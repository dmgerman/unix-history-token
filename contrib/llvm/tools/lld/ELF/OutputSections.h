begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- OutputSections.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                             The LLVM Linker
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLD_ELF_OUTPUT_SECTIONS_H
end_ifndef

begin_define
define|#
directive|define
name|LLD_ELF_OUTPUT_SECTIONS_H
end_define

begin_include
include|#
directive|include
file|"Config.h"
end_include

begin_include
include|#
directive|include
file|"Relocations.h"
end_include

begin_include
include|#
directive|include
file|"lld/Core/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/StringTableBuilder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MD5.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/SHA1.h"
end_include

begin_decl_stmt
name|namespace
name|lld
block|{
name|namespace
name|elf
block|{
name|class
name|SymbolBody
decl_stmt|;
struct_decl|struct
name|SectionPiece
struct_decl|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SymbolTable
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SymbolTableSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|StringTableSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|EhInputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InputSectionBase
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MergeInputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsReginfoInputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSection
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|ObjectFile
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SharedFile
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SharedSymbol
expr_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|DefinedRegular
expr_stmt|;
comment|// This represents a section in an output file.
comment|// Different sub classes represent different types of sections. Some contain
comment|// input sections, others are created by the linker.
comment|// The writer creates multiple OutputSections and assign them unique,
comment|// non-overlapping file offsets and VAs.
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSectionBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
name|OutputSectionBase
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t Type
argument_list|,
argument|uintX_t Flags
argument_list|)
empty_stmt|;
name|void
name|setVA
parameter_list|(
name|uintX_t
name|VA
parameter_list|)
block|{
name|Header
operator|.
name|sh_addr
operator|=
name|VA
expr_stmt|;
block|}
name|uintX_t
name|getVA
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|sh_addr
return|;
block|}
name|void
name|setFileOffset
parameter_list|(
name|uintX_t
name|Off
parameter_list|)
block|{
name|Header
operator|.
name|sh_offset
operator|=
name|Off
expr_stmt|;
block|}
name|void
name|setSHName
parameter_list|(
name|unsigned
name|Val
parameter_list|)
block|{
name|Header
operator|.
name|sh_name
operator|=
name|Val
expr_stmt|;
block|}
name|void
name|writeHeaderTo
parameter_list|(
name|Elf_Shdr
modifier|*
name|SHdr
parameter_list|)
function_decl|;
name|StringRef
name|getName
parameter_list|()
block|{
return|return
name|Name
return|;
block|}
name|virtual
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|C
argument_list|)
block|{}
name|unsigned
name|SectionIndex
decl_stmt|;
comment|// Returns the size of the section in the output file.
name|uintX_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|sh_size
return|;
block|}
name|void
name|setSize
parameter_list|(
name|uintX_t
name|Val
parameter_list|)
block|{
name|Header
operator|.
name|sh_size
operator|=
name|Val
expr_stmt|;
block|}
name|uintX_t
name|getFlags
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|sh_flags
return|;
block|}
name|uintX_t
name|getFileOff
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|sh_offset
return|;
block|}
name|uintX_t
name|getAlignment
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|sh_addralign
return|;
block|}
name|uint32_t
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Header
operator|.
name|sh_type
return|;
block|}
name|void
name|updateAlignment
parameter_list|(
name|uintX_t
name|Alignment
parameter_list|)
block|{
if|if
condition|(
name|Alignment
operator|>
name|Header
operator|.
name|sh_addralign
condition|)
name|Header
operator|.
name|sh_addralign
operator|=
name|Alignment
expr_stmt|;
block|}
comment|// If true, this section will be page aligned on disk.
comment|// Typically the first section of each PT_LOAD segment has this flag.
name|bool
name|PageAlign
init|=
name|false
decl_stmt|;
name|virtual
name|void
name|finalize
parameter_list|()
block|{}
name|virtual
name|void
name|finalizePieces
parameter_list|()
block|{}
name|virtual
name|void
name|assignOffsets
parameter_list|()
block|{}
name|virtual
name|void
name|writeTo
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|)
block|{}
name|virtual
operator|~
name|OutputSectionBase
argument_list|()
operator|=
expr|default
expr_stmt|;
name|protected
label|:
name|StringRef
name|Name
decl_stmt|;
name|Elf_Shdr
name|Header
decl_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|GotSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|OutputSectionBase
operator|<
name|ELFT
operator|>
name|Base
expr_stmt|;
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
name|public
label|:
name|GotSection
argument_list|()
expr_stmt|;
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
name|void
name|addEntry
parameter_list|(
name|SymbolBody
modifier|&
name|Sym
parameter_list|)
function_decl|;
name|void
name|addMipsEntry
parameter_list|(
name|SymbolBody
modifier|&
name|Sym
parameter_list|,
name|uintX_t
name|Addend
parameter_list|,
name|RelExpr
name|Expr
parameter_list|)
function_decl|;
name|bool
name|addDynTlsEntry
parameter_list|(
name|SymbolBody
modifier|&
name|Sym
parameter_list|)
function_decl|;
name|bool
name|addTlsIndex
parameter_list|()
function_decl|;
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|MipsPageEntries
operator|==
literal|0
operator|&&
name|Entries
operator|.
name|empty
argument_list|()
return|;
block|}
name|uintX_t
name|getMipsLocalPageOffset
parameter_list|(
name|uintX_t
name|Addr
parameter_list|)
function_decl|;
name|uintX_t
name|getMipsGotOffset
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|B
argument_list|,
name|uintX_t
name|Addend
argument_list|)
decl|const
decl_stmt|;
name|uintX_t
name|getGlobalDynAddr
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|B
argument_list|)
decl|const
decl_stmt|;
name|uintX_t
name|getGlobalDynOffset
argument_list|(
specifier|const
name|SymbolBody
operator|&
name|B
argument_list|)
decl|const
decl_stmt|;
name|uintX_t
name|getNumEntries
argument_list|()
specifier|const
block|{
return|return
name|Entries
operator|.
name|size
argument_list|()
return|;
block|}
comment|// Returns the symbol which corresponds to the first entry of the global part
comment|// of GOT on MIPS platform. It is required to fill up MIPS-specific dynamic
comment|// table properties.
comment|// Returns nullptr if the global part is empty.
specifier|const
name|SymbolBody
operator|*
name|getMipsFirstGlobalEntry
argument_list|()
specifier|const
expr_stmt|;
comment|// Returns the number of entries in the local part of GOT including
comment|// the number of reserved entries. This method is MIPS-specific.
name|unsigned
name|getMipsLocalEntriesNum
argument_list|()
specifier|const
expr_stmt|;
comment|// Returns offset of TLS part of the MIPS GOT table. This part goes
comment|// after 'local' and 'global' entries.
name|uintX_t
name|getMipsTlsOffset
parameter_list|()
function_decl|;
name|uintX_t
name|getTlsIndexVA
parameter_list|()
block|{
return|return
name|Base
operator|::
name|getVA
argument_list|()
operator|+
name|TlsIndexOff
return|;
block|}
name|uint32_t
name|getTlsIndexOff
parameter_list|()
block|{
return|return
name|TlsIndexOff
return|;
block|}
comment|// Flag to force GOT to be in output if we have relocations
comment|// that relies on its address.
name|bool
name|HasGotOffRel
init|=
name|false
decl_stmt|;
name|private
label|:
name|std
operator|::
name|vector
operator|<
specifier|const
name|SymbolBody
operator|*
operator|>
name|Entries
expr_stmt|;
name|uint32_t
name|TlsIndexOff
init|=
operator|-
literal|1
decl_stmt|;
name|uint32_t
name|MipsPageEntries
init|=
literal|0
decl_stmt|;
comment|// Output sections referenced by MIPS GOT relocations.
name|llvm
operator|::
name|SmallPtrSet
operator|<
specifier|const
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
operator|,
literal|10
operator|>
name|MipsOutSections
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
name|uintX_t
operator|,
name|size_t
operator|>
name|MipsLocalGotPos
expr_stmt|;
comment|// MIPS ABI requires to create unique GOT entry for each Symbol/Addend
comment|// pairs. The `MipsGotMap` maps (S,A) pair to the GOT index in the `MipsLocal`
comment|// or `MipsGlobal` vectors. In general it does not have a sence to take in
comment|// account addend for preemptible symbols because the corresponding
comment|// GOT entries should have one-to-one mapping with dynamic symbols table.
comment|// But we use the same container's types for both kind of GOT entries
comment|// to handle them uniformly.
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|SymbolBody
operator|*
operator|,
name|uintX_t
operator|>
name|MipsGotEntry
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|MipsGotEntry
operator|>
name|MipsGotEntries
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
name|MipsGotEntry
operator|,
name|size_t
operator|>
name|MipsGotMap
expr_stmt|;
name|MipsGotEntries
name|MipsLocal
decl_stmt|;
name|MipsGotEntries
name|MipsGlobal
decl_stmt|;
comment|// Write MIPS-specific parts of the GOT.
name|void
name|writeMipsGot
parameter_list|(
name|uint8_t
modifier|*
modifier|&
name|Buf
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|GotPltSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
name|public
operator|:
name|GotPltSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|addEntry
parameter_list|(
name|SymbolBody
modifier|&
name|Sym
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
specifier|const
name|SymbolBody
operator|*
operator|>
name|Entries
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|PltSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|OutputSectionBase
operator|<
name|ELFT
operator|>
name|Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|PltSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|addEntry
parameter_list|(
name|SymbolBody
modifier|&
name|Sym
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Entries
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|SymbolBody
operator|*
operator|,
name|unsigned
operator|>>
name|Entries
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|DynamicReloc
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
name|public
operator|:
name|DynamicReloc
argument_list|(
argument|uint32_t Type
argument_list|,
argument|const InputSectionBase<ELFT> *InputSec
argument_list|,
argument|uintX_t OffsetInSec
argument_list|,
argument|bool UseSymVA
argument_list|,
argument|SymbolBody *Sym
argument_list|,
argument|uintX_t Addend
argument_list|)
operator|:
name|Type
argument_list|(
name|Type
argument_list|)
operator|,
name|Sym
argument_list|(
name|Sym
argument_list|)
operator|,
name|InputSec
argument_list|(
name|InputSec
argument_list|)
operator|,
name|OffsetInSec
argument_list|(
name|OffsetInSec
argument_list|)
operator|,
name|UseSymVA
argument_list|(
name|UseSymVA
argument_list|)
operator|,
name|Addend
argument_list|(
argument|Addend
argument_list|)
block|{}
name|DynamicReloc
argument_list|(
argument|uint32_t Type
argument_list|,
argument|const OutputSectionBase<ELFT> *OutputSec
argument_list|,
argument|uintX_t OffsetInSec
argument_list|,
argument|bool UseSymVA
argument_list|,
argument|SymbolBody *Sym
argument_list|,
argument|uintX_t Addend
argument_list|)
operator|:
name|Type
argument_list|(
name|Type
argument_list|)
operator|,
name|Sym
argument_list|(
name|Sym
argument_list|)
operator|,
name|OutputSec
argument_list|(
name|OutputSec
argument_list|)
operator|,
name|OffsetInSec
argument_list|(
name|OffsetInSec
argument_list|)
operator|,
name|UseSymVA
argument_list|(
name|UseSymVA
argument_list|)
operator|,
name|Addend
argument_list|(
argument|Addend
argument_list|)
block|{}
name|uintX_t
name|getOffset
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uintX_t
name|getAddend
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uint32_t
name|getSymIndex
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|getOutputSec
argument_list|()
specifier|const
block|{
return|return
name|OutputSec
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|uint32_t
name|Type
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|SymbolBody
modifier|*
name|Sym
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|InputSec
operator|=
name|nullptr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|OutputSec
operator|=
name|nullptr
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uintX_t
name|OffsetInSec
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|UseSymVA
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uintX_t
name|Addend
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|SymbolTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Sym
name|Elf_Sym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|SymRange
name|Elf_Sym_Range
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_typedef

begin_expr_stmt
name|SymbolTableSection
argument_list|(
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|&
name|StrTabSec
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|addSymbol
parameter_list|(
name|SymbolBody
modifier|*
name|Body
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|&
name|getStrTabSec
argument_list|()
specifier|const
block|{
return|return
name|StrTabSec
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getNumSymbols
argument_list|()
specifier|const
block|{
return|return
name|NumLocals
operator|+
name|Symbols
operator|.
name|size
argument_list|()
operator|+
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ArrayRef
operator|<
name|std
operator|::
name|pair
operator|<
name|SymbolBody
operator|*
operator|,
name|size_t
operator|>>
name|getSymbols
argument_list|()
specifier|const
block|{
return|return
name|Symbols
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|unsigned
name|NumLocals
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|&
name|StrTabSec
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function_decl
name|void
name|writeLocalSymbols
parameter_list|(
name|uint8_t
modifier|*
modifier|&
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|writeGlobalSymbols
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|getOutputSection
argument_list|(
name|SymbolBody
operator|*
name|Sym
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// A vector of symbols and their string table offsets.
end_comment

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|SymbolBody
operator|*
operator|,
name|size_t
operator|>>
name|Symbols
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// For more information about .gnu.version and .gnu.version_r see:
end_comment

begin_comment
comment|// https://www.akkadia.org/drepper/symbol-versioning
end_comment

begin_comment
comment|// The .gnu.version_d section which has a section type of SHT_GNU_verdef shall
end_comment

begin_comment
comment|// contain symbol version definitions. The number of entries in this section
end_comment

begin_comment
comment|// shall be contained in the DT_VERDEFNUM entry of the .dynamic section.
end_comment

begin_comment
comment|// The section shall contain an array of Elf_Verdef structures, optionally
end_comment

begin_comment
comment|// followed by an array of Elf_Verdaux structures.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|VersionDefinitionSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|Verdef
name|Elf_Verdef
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Verdaux
name|Elf_Verdaux
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|VersionDefinitionSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_function_decl
name|void
name|writeOne
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|,
name|uint32_t
name|Index
parameter_list|,
name|StringRef
name|Name
parameter_list|,
name|size_t
name|NameOff
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|unsigned
name|FileDefNameOff
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// The .gnu.version section specifies the required version of each symbol in the
end_comment

begin_comment
comment|// dynamic symbol table. It contains one Elf_Versym for each dynamic symbol
end_comment

begin_comment
comment|// table entry. An Elf_Versym is just a 16-bit integer that refers to a version
end_comment

begin_comment
comment|// identifier defined in the either .gnu.version_r or .gnu.version_d section.
end_comment

begin_comment
comment|// The values 0 and 1 are reserved. All other values are used for versions in
end_comment

begin_comment
comment|// the own object or in any of the dependencies.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|VersionTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|Versym
name|Elf_Versym
expr_stmt|;
name|public
operator|:
name|VersionTableSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// The .gnu.version_r section defines the version identifiers used by
end_comment

begin_comment
comment|// .gnu.version. It contains a linked list of Elf_Verneed data structures. Each
end_comment

begin_comment
comment|// Elf_Verneed specifies the version requirements for a single DSO, and contains
end_comment

begin_comment
comment|// a reference to a linked list of Elf_Vernaux data structures which define the
end_comment

begin_comment
comment|// mapping from version identifiers to version names.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|VersionNeedSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|Verneed
name|Elf_Verneed
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Vernaux
name|Elf_Vernaux
expr_stmt|;
end_typedef

begin_comment
comment|// A vector of shared files that need Elf_Verneed data structures and the
end_comment

begin_comment
comment|// string table offsets of their sonames.
end_comment

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|SharedFile
operator|<
name|ELFT
operator|>
operator|*
operator|,
name|size_t
operator|>>
name|Needed
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The next available version identifier.
end_comment

begin_decl_stmt
name|unsigned
name|NextIndex
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|VersionNeedSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|addSymbol
argument_list|(
name|SharedSymbol
operator|<
name|ELFT
operator|>
operator|*
name|SS
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|size_t
name|getNeedNum
argument_list|()
specifier|const
block|{
return|return
name|Needed
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|RelocationSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rel
name|Elf_Rel
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_macro
name|RelocationSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|bool Sort
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|void
name|addReloc
argument_list|(
specifier|const
name|DynamicReloc
operator|<
name|ELFT
operator|>
operator|&
name|Reloc
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|unsigned
name|getRelocOffset
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|bool
name|hasRelocs
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Relocs
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|bool
name|Static
init|=
name|false
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|bool
name|Sort
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|DynamicReloc
operator|<
name|ELFT
operator|>>
name|Relocs
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Sym
name|Elf_Sym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rel
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_typedef

begin_macro
name|OutputSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t Type
argument_list|,
argument|uintX_t Flags
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|C
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|sortInitFini
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sortCtorsDtors
parameter_list|()
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|assignOffsets
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|InputSection
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Sections
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MergeOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
name|public
operator|:
name|MergeOutputSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t Type
argument_list|,
argument|uintX_t Flags
argument_list|,
argument|uintX_t Alignment
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|unsigned
name|getOffset
parameter_list|(
name|StringRef
name|Val
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalizePieces
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|shouldTailMerge
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|llvm
operator|::
name|StringTableBuilder
name|Builder
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|MergeInputSection
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Sections
expr_stmt|;
end_expr_stmt

begin_struct
unit|};
struct|struct
name|CieRecord
block|{
name|SectionPiece
modifier|*
name|Piece
init|=
name|nullptr
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|SectionPiece
operator|*
operator|>
name|FdePieces
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|// Output section for .eh_frame.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|EhOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rel
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|EhOutputSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Sections
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|NumFdes
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|class
name|RelTy
operator|>
name|void
name|addSectionAux
argument_list|(
name|EhInputSection
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|,
name|llvm
operator|::
name|ArrayRef
operator|<
name|RelTy
operator|>
name|Rels
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RelTy
operator|>
name|CieRecord
operator|*
name|addCie
argument_list|(
name|SectionPiece
operator|&
name|Piece
argument_list|,
name|EhInputSection
operator|<
name|ELFT
operator|>
operator|*
name|Sec
argument_list|,
name|ArrayRef
operator|<
name|RelTy
operator|>
operator|&
name|Rels
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RelTy
operator|>
name|bool
name|isFdeLive
argument_list|(
name|SectionPiece
operator|&
name|Piece
argument_list|,
name|EhInputSection
operator|<
name|ELFT
operator|>
operator|*
name|Sec
argument_list|,
name|ArrayRef
operator|<
name|RelTy
operator|>
operator|&
name|Rels
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|uintX_t
name|getFdePc
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|,
name|size_t
name|Off
parameter_list|,
name|uint8_t
name|Enc
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|EhInputSection
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Sections
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|CieRecord
operator|*
operator|>
name|Cies
expr_stmt|;
end_expr_stmt

begin_comment
comment|// CIE records are uniquified by their contents and personality functions.
end_comment

begin_expr_stmt
name|llvm
operator|::
name|DenseMap
operator|<
name|std
operator|::
name|pair
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|,
name|SymbolBody
operator|*
operator|>
operator|,
name|CieRecord
operator|>
name|CieMap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|InterpSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|InterpSection
argument_list|()
block|;
name|void
name|writeTo
argument_list|(
argument|uint8_t *Buf
argument_list|)
name|override
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|StringTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
name|StringTableSection
argument_list|(
argument|StringRef Name
argument_list|,
argument|bool Dynamic
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|unsigned
name|addString
parameter_list|(
name|StringRef
name|S
parameter_list|,
name|bool
name|HashIt
init|=
name|true
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|unsigned
name|getSize
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
end_expr_stmt

begin_function
name|void
name|finalize
parameter_list|()
function|override
block|{
name|this
operator|->
name|Header
operator|.
name|sh_size
operator|=
name|getSize
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|bool
name|isDynamic
argument_list|()
specifier|const
block|{
return|return
name|Dynamic
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|bool
name|Dynamic
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|llvm
operator|::
name|DenseMap
operator|<
name|StringRef
operator|,
name|unsigned
operator|>
name|StringMap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
name|Strings
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|Size
init|=
literal|1
decl_stmt|;
end_decl_stmt

begin_comment
comment|// ELF string tables start with a NUL byte, so 1.
end_comment

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|HashTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|Word
name|Elf_Word
expr_stmt|;
name|public
operator|:
name|HashTableSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// Outputs GNU Hash section. For detailed explanation see:
end_comment

begin_comment
comment|// https://blogs.oracle.com/ali/entry/gnu_hash_elf_sections
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|GnuHashTableSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|Off
name|Elf_Off
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Word
name|Elf_Word
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|GnuHashTableSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Adds symbols to the hash table.
end_comment

begin_comment
comment|// Sorts the input to satisfy GNU hash section requirements.
end_comment

begin_decl_stmt
name|void
name|addSymbols
argument_list|(
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|SymbolBody
operator|*
argument_list|,
name|size_t
operator|>>
operator|&
name|Symbols
argument_list|)
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_function_decl
specifier|static
name|unsigned
name|calcNBuckets
parameter_list|(
name|unsigned
name|NumHashed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|unsigned
name|calcMaskWords
parameter_list|(
name|unsigned
name|NumHashed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|writeHeader
parameter_list|(
name|uint8_t
modifier|*
modifier|&
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|writeBloomFilter
parameter_list|(
name|uint8_t
modifier|*
modifier|&
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|writeHashTable
parameter_list|(
name|uint8_t
modifier|*
name|Buf
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|SymbolData
block|{
name|SymbolBody
modifier|*
name|Body
decl_stmt|;
name|size_t
name|STName
decl_stmt|;
name|uint32_t
name|Hash
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|SymbolData
operator|>
name|Symbols
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|MaskWords
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|NBuckets
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|Shift2
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|DynamicSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|OutputSectionBase
operator|<
name|ELFT
operator|>
name|Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Dyn
name|Elf_Dyn
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rel
name|Elf_Rel
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Rela
name|Elf_Rela
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Sym
name|Elf_Sym
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_typedef

begin_comment
comment|// The .dynamic section contains information for the dynamic linker.
end_comment

begin_comment
comment|// The section consists of fixed size entries, which consist of
end_comment

begin_comment
comment|// type and value fields. Value are one of plain integers, symbol
end_comment

begin_comment
comment|// addresses, or section addresses. This struct represents the entry.
end_comment

begin_struct
struct|struct
name|Entry
block|{
name|int32_t
name|Tag
decl_stmt|;
union|union
block|{
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|OutSec
expr_stmt|;
name|uint64_t
name|Val
decl_stmt|;
specifier|const
name|SymbolBody
modifier|*
name|Sym
decl_stmt|;
block|}
union|;
enum|enum
name|KindT
block|{
name|SecAddr
block|,
name|SymAddr
block|,
name|PlainInt
block|}
name|Kind
enum|;
name|Entry
argument_list|(
argument|int32_t Tag
argument_list|,
argument|OutputSectionBase<ELFT> *OutSec
argument_list|)
block|:
name|Tag
argument_list|(
name|Tag
argument_list|)
operator|,
name|OutSec
argument_list|(
name|OutSec
argument_list|)
operator|,
name|Kind
argument_list|(
argument|SecAddr
argument_list|)
block|{}
name|Entry
argument_list|(
argument|int32_t Tag
argument_list|,
argument|uint64_t Val
argument_list|)
operator|:
name|Tag
argument_list|(
name|Tag
argument_list|)
operator|,
name|Val
argument_list|(
name|Val
argument_list|)
operator|,
name|Kind
argument_list|(
argument|PlainInt
argument_list|)
block|{}
name|Entry
argument_list|(
argument|int32_t Tag
argument_list|,
argument|const SymbolBody *Sym
argument_list|)
operator|:
name|Tag
argument_list|(
name|Tag
argument_list|)
operator|,
name|Sym
argument_list|(
name|Sym
argument_list|)
operator|,
name|Kind
argument_list|(
argument|SymAddr
argument_list|)
block|{}
block|}
struct|;
end_struct

begin_comment
comment|// finalize() fills this vector with the section contents. finalize()
end_comment

begin_comment
comment|// cannot directly create final section contents because when the
end_comment

begin_comment
comment|// function is called, symbol or section addresses are not fixed yet.
end_comment

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|Entry
operator|>
name|Entries
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_function_decl
name|explicit
name|DynamicSection
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|PreInitArraySec
operator|=
name|nullptr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|InitArraySec
operator|=
name|nullptr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|FiniArraySec
operator|=
name|nullptr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsReginfoOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_RegInfo
operator|<
name|ELFT
operator|>
name|Elf_Mips_RegInfo
expr_stmt|;
name|public
operator|:
name|MipsReginfoOutputSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|uint32_t
name|GprMask
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|MipsOptionsOutputSection
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_Options
operator|<
name|ELFT
operator|>
name|Elf_Mips_Options
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|llvm
operator|::
name|object
operator|::
name|Elf_Mips_RegInfo
operator|<
name|ELFT
operator|>
name|Elf_Mips_RegInfo
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|MipsOptionsOutputSection
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|addSection
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|S
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|uint32_t
name|GprMask
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// --eh-frame-hdr option tells linker to construct a header for all the
end_comment

begin_comment
comment|// .eh_frame sections. This header is placed to a section named .eh_frame_hdr
end_comment

begin_comment
comment|// and also to a PT_GNU_EH_FRAME segment.
end_comment

begin_comment
comment|// At runtime the unwinder then can find all the PT_GNU_EH_FRAME segments by
end_comment

begin_comment
comment|// calling dl_iterate_phdr.
end_comment

begin_comment
comment|// This section contains a lookup table for quick binary search of FDEs.
end_comment

begin_comment
comment|// Detailed info about internals can be found in Ian Lance Taylor's blog:
end_comment

begin_comment
comment|// http://www.airs.com/blog/archives/460 (".eh_frame")
end_comment

begin_comment
comment|// http://www.airs.com/blog/archives/462 (".eh_frame_hdr")
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|EhFrameHeader
name|final
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
name|public
operator|:
name|EhFrameHeader
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|void
name|finalize
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|writeTo
argument_list|(
name|uint8_t
operator|*
name|Buf
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|addFde
parameter_list|(
name|uint32_t
name|Pc
parameter_list|,
name|uint32_t
name|FdeVA
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_struct
struct|struct
name|FdeData
block|{
name|uint32_t
name|Pc
decl_stmt|;
name|uint32_t
name|FdeVA
decl_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|FdeData
operator|>
name|Fdes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|BuildIdSection
operator|:
name|public
name|OutputSectionBase
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|void
name|writeTo
argument_list|(
argument|uint8_t *Buf
argument_list|)
name|override
block|;
name|virtual
name|void
name|writeBuildId
argument_list|(
name|ArrayRef
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>>
name|Bufs
argument_list|)
operator|=
literal|0
block|;
name|protected
operator|:
name|BuildIdSection
argument_list|(
argument|size_t HashSize
argument_list|)
block|;
name|size_t
name|HashSize
block|;
name|uint8_t
operator|*
name|HashBuf
operator|=
name|nullptr
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|BuildIdFnv1
name|final
operator|:
name|public
name|BuildIdSection
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|BuildIdFnv1
argument_list|()
operator|:
name|BuildIdSection
operator|<
name|ELFT
operator|>
operator|(
literal|8
operator|)
block|{}
name|void
name|writeBuildId
argument_list|(
argument|ArrayRef<ArrayRef<uint8_t>> Bufs
argument_list|)
name|override
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|BuildIdMd5
name|final
operator|:
name|public
name|BuildIdSection
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|BuildIdMd5
argument_list|()
operator|:
name|BuildIdSection
operator|<
name|ELFT
operator|>
operator|(
literal|16
operator|)
block|{}
name|void
name|writeBuildId
argument_list|(
argument|ArrayRef<ArrayRef<uint8_t>> Bufs
argument_list|)
name|override
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|BuildIdSha1
name|final
operator|:
name|public
name|BuildIdSection
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|BuildIdSha1
argument_list|()
operator|:
name|BuildIdSection
operator|<
name|ELFT
operator|>
operator|(
literal|20
operator|)
block|{}
name|void
name|writeBuildId
argument_list|(
argument|ArrayRef<ArrayRef<uint8_t>> Bufs
argument_list|)
name|override
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|BuildIdHexstring
name|final
operator|:
name|public
name|BuildIdSection
operator|<
name|ELFT
operator|>
block|{
name|public
operator|:
name|BuildIdHexstring
argument_list|()
block|;
name|void
name|writeBuildId
argument_list|(
argument|ArrayRef<ArrayRef<uint8_t>> Bufs
argument_list|)
name|override
block|; }
expr_stmt|;
end_expr_stmt

begin_comment
comment|// All output sections that are hadnled by the linker specially are
end_comment

begin_comment
comment|// globally accessible. Writer initializes them, so don't use them
end_comment

begin_comment
comment|// until Writer is initialized.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
expr|struct
name|Out
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|Phdr
name|Elf_Phdr
expr_stmt|;
end_typedef

begin_expr_stmt
specifier|static
name|BuildIdSection
operator|<
name|ELFT
operator|>
operator|*
name|BuildId
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|DynamicSection
operator|<
name|ELFT
operator|>
operator|*
name|Dynamic
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|EhFrameHeader
operator|<
name|ELFT
operator|>
operator|*
name|EhFrameHdr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|EhOutputSection
operator|<
name|ELFT
operator|>
operator|*
name|EhFrame
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|GnuHashTableSection
operator|<
name|ELFT
operator|>
operator|*
name|GnuHashTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|GotPltSection
operator|<
name|ELFT
operator|>
operator|*
name|GotPlt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|GotSection
operator|<
name|ELFT
operator|>
operator|*
name|Got
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|HashTableSection
operator|<
name|ELFT
operator|>
operator|*
name|HashTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|InterpSection
operator|<
name|ELFT
operator|>
operator|*
name|Interp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Bss
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|MipsRldMap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|Opd
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|uint8_t
modifier|*
name|OpdBuf
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|PltSection
operator|<
name|ELFT
operator|>
operator|*
name|Plt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|RelocationSection
operator|<
name|ELFT
operator|>
operator|*
name|RelaDyn
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|RelocationSection
operator|<
name|ELFT
operator|>
operator|*
name|RelaPlt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|DynStrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|ShStrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|StrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|SymbolTableSection
operator|<
name|ELFT
operator|>
operator|*
name|DynSymTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|SymbolTableSection
operator|<
name|ELFT
operator|>
operator|*
name|SymTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|VersionDefinitionSection
operator|<
name|ELFT
operator|>
operator|*
name|VerDef
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|VersionTableSection
operator|<
name|ELFT
operator|>
operator|*
name|VerSym
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|VersionNeedSection
operator|<
name|ELFT
operator|>
operator|*
name|VerNeed
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|Elf_Phdr
modifier|*
name|TlsPhdr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|ElfHeader
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|ProgramHeaders
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|bool
name|Is64Bits
operator|>
expr|struct
name|SectionKey
block|{
typedef|typedef
name|typename
name|std
operator|::
name|conditional
operator|<
name|Is64Bits
operator|,
name|uint64_t
operator|,
name|uint32_t
operator|>
operator|::
name|type
name|uintX_t
expr_stmt|;
name|StringRef
name|Name
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|uint32_t
name|Type
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uintX_t
name|Flags
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uintX_t
name|Alignment
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// This class knows how to create an output section for a given
end_comment

begin_comment
comment|// input section. Output section type is determined by various
end_comment

begin_comment
comment|// factors, including input section's sh_flags, sh_type and
end_comment

begin_comment
comment|// linker scripts.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|class
name|OutputSectionFactory
block|{
typedef|typedef
name|typename
name|ELFT
operator|::
name|Shdr
name|Elf_Shdr
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|ELFT
operator|::
name|uint
name|uintX_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|elf
operator|::
name|SectionKey
operator|<
name|ELFT
operator|::
name|Is64Bits
operator|>
name|Key
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|pair
operator|<
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
operator|,
name|bool
operator|>
name|create
argument_list|(
argument|InputSectionBase<ELFT> *C
argument_list|,
argument|StringRef OutsecName
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|lookup
argument_list|(
argument|StringRef Name
argument_list|,
argument|uint32_t Type
argument_list|,
argument|uintX_t Flags
argument_list|)
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|Key
name|createKey
argument_list|(
name|InputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|C
argument_list|,
name|StringRef
name|OutsecName
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|llvm
operator|::
name|SmallDenseMap
operator|<
name|Key
operator|,
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
operator|>
name|Map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ELFT
operator|>
name|BuildIdSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|BuildId
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|DynamicSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Dynamic
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|EhFrameHeader
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|EhFrameHdr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|EhOutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|EhFrame
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|GnuHashTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|GnuHashTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|GotPltSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|GotPlt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|GotSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Got
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|HashTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|HashTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|InterpSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Interp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Bss
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|MipsRldMap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Opd
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|uint8_t
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|OpdBuf
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|PltSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|Plt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|RelocationSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|RelaDyn
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|RelocationSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|RelaPlt
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|DynStrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|ShStrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|StringTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|StrTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|SymbolTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|DynSymTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|SymbolTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|SymTab
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|VersionDefinitionSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|VerDef
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|VersionTableSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|VerSym
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|VersionNeedSection
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|VerNeed
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|typename
name|ELFT
operator|::
name|Phdr
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|TlsPhdr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|ElfHeader
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ELFT
operator|>
name|OutputSectionBase
operator|<
name|ELFT
operator|>
operator|*
name|Out
operator|<
name|ELFT
operator|>
operator|::
name|ProgramHeaders
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace elf
end_comment

begin_comment
unit|}
comment|// namespace lld
end_comment

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
name|bool
name|Is64Bits
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|lld
operator|::
name|elf
operator|::
name|SectionKey
operator|<
name|Is64Bits
operator|>>
block|{
typedef|typedef
name|typename
name|lld
operator|::
name|elf
operator|::
name|SectionKey
operator|<
name|Is64Bits
operator|>
name|Key
expr_stmt|;
specifier|static
name|Key
name|getEmptyKey
argument_list|()
expr_stmt|;
specifier|static
name|Key
name|getTombstoneKey
parameter_list|()
function_decl|;
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|Key
modifier|&
name|Val
parameter_list|)
function_decl|;
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|Key
modifier|&
name|LHS
parameter_list|,
specifier|const
name|Key
modifier|&
name|RHS
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

