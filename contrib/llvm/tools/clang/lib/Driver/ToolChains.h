begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ToolChains.h - ToolChain Implementations ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_LIB_DRIVER_TOOLCHAINS_H_
end_ifndef

begin_define
define|#
directive|define
name|CLANG_LIB_DRIVER_TOOLCHAINS_H_
end_define

begin_include
include|#
directive|include
file|"Tools.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/VersionTuple.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/Action.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/ToolChain.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
name|namespace
name|toolchains
block|{
comment|/// Generic_GCC - A tool chain using the 'gcc' command to perform
comment|/// all subcommands; this relies on gcc translating the majority of
comment|/// command line options.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Generic_GCC
range|:
name|public
name|ToolChain
block|{
name|protected
operator|:
comment|/// \brief Struct to store and manipulate GCC versions.
comment|///
comment|/// We rely on assumptions about the form and structure of GCC version
comment|/// numbers: they consist of at most three '.'-separated components, and each
comment|/// component is a non-negative integer except for the last component. For
comment|/// the last component we are very flexible in order to tolerate release
comment|/// candidates or 'x' wildcards.
comment|///
comment|/// Note that the ordering established among GCCVersions is based on the
comment|/// preferred version string to use. For example we prefer versions without
comment|/// a hard-coded patch number to those with a hard coded patch number.
comment|///
comment|/// Currently this doesn't provide any logic for textual suffixes to patches
comment|/// in the way that (for example) Debian's version format does. If that ever
comment|/// becomes necessary, it can be added.
expr|struct
name|GCCVersion
block|{
comment|/// \brief The unparsed text of the version.
name|std
operator|::
name|string
name|Text
block|;
comment|/// \brief The parsed major, minor, and patch numbers.
name|int
name|Major
block|,
name|Minor
block|,
name|Patch
block|;
comment|/// \brief Any textual suffix on the patch number.
name|std
operator|::
name|string
name|PatchSuffix
block|;
specifier|static
name|GCCVersion
name|Parse
argument_list|(
argument|StringRef VersionText
argument_list|)
block|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|GCCVersion
operator|&
name|RHS
operator|)
specifier|const
block|;
name|bool
name|operator
operator|>
operator|(
specifier|const
name|GCCVersion
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|RHS
operator|<
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|GCCVersion
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|>
name|RHS
operator|)
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|GCCVersion
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|<
name|RHS
operator|)
return|;
block|}
expr|}
block|;
comment|/// \brief This is a class to find a viable GCC installation for Clang to
comment|/// use.
comment|///
comment|/// This class tries to find a GCC installation on the system, and report
comment|/// information about it. It starts from the host information provided to the
comment|/// Driver, and has logic for fuzzing that where appropriate.
name|class
name|GCCInstallationDetector
block|{
name|bool
name|IsValid
block|;
name|llvm
operator|::
name|Triple
name|GCCTriple
block|;
comment|// FIXME: These might be better as path objects.
name|std
operator|::
name|string
name|GCCInstallPath
block|;
name|std
operator|::
name|string
name|GCCMultiarchSuffix
block|;
name|std
operator|::
name|string
name|GCCParentLibPath
block|;
name|GCCVersion
name|Version
block|;
name|public
operator|:
name|GCCInstallationDetector
argument_list|()
operator|:
name|IsValid
argument_list|(
argument|false
argument_list|)
block|{}
name|void
name|init
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|TargetTriple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
comment|/// \brief Check whether we detected a valid GCC install.
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|IsValid
return|;
block|}
comment|/// \brief Get the GCC triple for the detected install.
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|getTriple
argument_list|()
specifier|const
block|{
return|return
name|GCCTriple
return|;
block|}
comment|/// \brief Get the detected GCC installation path.
name|StringRef
name|getInstallPath
argument_list|()
specifier|const
block|{
return|return
name|GCCInstallPath
return|;
block|}
comment|/// \brief Get the detected GCC installation path suffix for multiarch GCCs.
name|StringRef
name|getMultiarchSuffix
argument_list|()
specifier|const
block|{
return|return
name|GCCMultiarchSuffix
return|;
block|}
comment|/// \brief Get the detected GCC parent lib path.
name|StringRef
name|getParentLibPath
argument_list|()
specifier|const
block|{
return|return
name|GCCParentLibPath
return|;
block|}
comment|/// \brief Get the detected GCC version string.
specifier|const
name|GCCVersion
operator|&
name|getVersion
argument_list|()
specifier|const
block|{
return|return
name|Version
return|;
block|}
name|private
operator|:
specifier|static
name|void
name|CollectLibDirsAndTriples
argument_list|(
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|TargetTriple
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|MultiarchTriple
argument_list|,
name|SmallVectorImpl
operator|<
name|StringRef
operator|>
operator|&
name|LibDirs
argument_list|,
name|SmallVectorImpl
operator|<
name|StringRef
operator|>
operator|&
name|TripleAliases
argument_list|,
name|SmallVectorImpl
operator|<
name|StringRef
operator|>
operator|&
name|MultiarchLibDirs
argument_list|,
name|SmallVectorImpl
operator|<
name|StringRef
operator|>
operator|&
name|MultiarchTripleAliases
argument_list|)
block|;
name|void
name|ScanLibDirForGCCTriple
argument_list|(
argument|llvm::Triple::ArchType TargetArch
argument_list|,
argument|const ArgList&Args
argument_list|,
argument|const std::string&LibDir
argument_list|,
argument|StringRef CandidateTriple
argument_list|,
argument|bool NeedsMultiarchSuffix = false
argument_list|)
block|;   }
block|;
name|GCCInstallationDetector
name|GCCInstallation
block|;
name|public
operator|:
name|Generic_GCC
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
operator|~
name|Generic_GCC
argument_list|()
block|;
name|virtual
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isPICDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isPIEDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isPICDefaultForced
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|getTool
argument_list|(
argument|Action::ActionClass AC
argument_list|)
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|;
comment|/// \name ToolChain Implementation Helper Functions
comment|/// @{
comment|/// \brief Check whether the target triple's architecture is 64-bits.
name|bool
name|isTarget64Bit
argument_list|()
specifier|const
block|{
return|return
name|getTriple
argument_list|()
operator|.
name|isArch64Bit
argument_list|()
return|;
block|}
comment|/// \brief Check whether the target triple's architecture is 32-bits.
name|bool
name|isTarget32Bit
argument_list|()
specifier|const
block|{
return|return
name|getTriple
argument_list|()
operator|.
name|isArch32Bit
argument_list|()
return|;
block|}
comment|/// @}
name|private
operator|:
name|mutable
name|OwningPtr
operator|<
name|tools
operator|::
name|gcc
operator|::
name|Preprocess
operator|>
name|Preprocess
block|;
name|mutable
name|OwningPtr
operator|<
name|tools
operator|::
name|gcc
operator|::
name|Precompile
operator|>
name|Precompile
block|;
name|mutable
name|OwningPtr
operator|<
name|tools
operator|::
name|gcc
operator|::
name|Compile
operator|>
name|Compile
block|; }
block|;
comment|/// Darwin - The base Darwin tool chain.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Darwin
operator|:
name|public
name|ToolChain
block|{
name|public
operator|:
comment|/// The host version.
name|unsigned
name|DarwinVersion
index|[
literal|3
index|]
block|;
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|getTool
argument_list|(
argument|Action::ActionClass AC
argument_list|)
specifier|const
block|;
name|private
operator|:
name|mutable
name|OwningPtr
operator|<
name|tools
operator|::
name|darwin
operator|::
name|Lipo
operator|>
name|Lipo
block|;
name|mutable
name|OwningPtr
operator|<
name|tools
operator|::
name|darwin
operator|::
name|Dsymutil
operator|>
name|Dsymutil
block|;
name|mutable
name|OwningPtr
operator|<
name|tools
operator|::
name|darwin
operator|::
name|VerifyDebug
operator|>
name|VerifyDebug
block|;
comment|/// Whether the information on the target has been initialized.
comment|//
comment|// FIXME: This should be eliminated. What we want to do is make this part of
comment|// the "default target for arguments" selection process, once we get out of
comment|// the argument translation business.
name|mutable
name|bool
name|TargetInitialized
block|;
comment|/// Whether we are targeting iPhoneOS target.
name|mutable
name|bool
name|TargetIsIPhoneOS
block|;
comment|/// Whether we are targeting the iPhoneOS simulator target.
name|mutable
name|bool
name|TargetIsIPhoneOSSimulator
block|;
comment|/// The OS version we are targeting.
name|mutable
name|VersionTuple
name|TargetVersion
block|;
name|private
operator|:
comment|/// The default macosx-version-min of this tool chain; empty until
comment|/// initialized.
name|std
operator|::
name|string
name|MacosxVersionMin
block|;
comment|/// The default ios-version-min of this tool chain; empty until
comment|/// initialized.
name|std
operator|::
name|string
name|iOSVersionMin
block|;
name|private
operator|:
name|void
name|AddDeploymentTarget
argument_list|(
argument|DerivedArgList&Args
argument_list|)
specifier|const
block|;
name|public
operator|:
name|Darwin
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
operator|~
name|Darwin
argument_list|()
block|;
name|std
operator|::
name|string
name|ComputeEffectiveClangTriple
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|types::ID InputType
argument_list|)
specifier|const
block|;
comment|/// @name Darwin Specific Toolchain API
comment|/// {
comment|// FIXME: Eliminate these ...Target functions and derive separate tool chains
comment|// for these targets and put version in constructor.
name|void
name|setTarget
argument_list|(
argument|bool IsIPhoneOS
argument_list|,
argument|unsigned Major
argument_list|,
argument|unsigned Minor
argument_list|,
argument|unsigned Micro
argument_list|,
argument|bool IsIOSSim
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
operator|(
operator|!
name|IsIOSSim
operator|||
name|IsIPhoneOS
operator|)
operator|&&
literal|"Unexpected deployment target!"
argument_list|)
block|;
comment|// FIXME: For now, allow reinitialization as long as values don't
comment|// change. This will go away when we move away from argument translation.
if|if
condition|(
name|TargetInitialized
operator|&&
name|TargetIsIPhoneOS
operator|==
name|IsIPhoneOS
operator|&&
name|TargetIsIPhoneOSSimulator
operator|==
name|IsIOSSim
operator|&&
name|TargetVersion
operator|==
name|VersionTuple
argument_list|(
name|Major
argument_list|,
name|Minor
argument_list|,
name|Micro
argument_list|)
condition|)
return|return;
name|assert
argument_list|(
operator|!
name|TargetInitialized
operator|&&
literal|"Target already initialized!"
argument_list|)
block|;
name|TargetInitialized
operator|=
name|true
block|;
name|TargetIsIPhoneOS
operator|=
name|IsIPhoneOS
block|;
name|TargetIsIPhoneOSSimulator
operator|=
name|IsIOSSim
block|;
name|TargetVersion
operator|=
name|VersionTuple
argument_list|(
name|Major
argument_list|,
name|Minor
argument_list|,
name|Micro
argument_list|)
block|;   }
name|bool
name|isTargetIPhoneOS
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|TargetInitialized
operator|&&
literal|"Target not initialized!"
argument_list|)
block|;
return|return
name|TargetIsIPhoneOS
return|;
block|}
name|bool
name|isTargetIOSSimulator
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|TargetInitialized
operator|&&
literal|"Target not initialized!"
argument_list|)
block|;
return|return
name|TargetIsIPhoneOSSimulator
return|;
block|}
name|bool
name|isTargetMacOS
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isTargetIOSSimulator
argument_list|()
operator|&&
operator|!
name|isTargetIPhoneOS
argument_list|()
return|;
block|}
name|bool
name|isTargetInitialized
argument_list|()
specifier|const
block|{
return|return
name|TargetInitialized
return|;
block|}
name|VersionTuple
name|getTargetVersion
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|TargetInitialized
operator|&&
literal|"Target not initialized!"
argument_list|)
block|;
return|return
name|TargetVersion
return|;
block|}
comment|/// getDarwinArchName - Get the "Darwin" arch name for a particular compiler
comment|/// invocation. For example, Darwin treats different ARM variations as
comment|/// distinct architectures.
name|StringRef
name|getDarwinArchName
argument_list|(
argument|const ArgList&Args
argument_list|)
specifier|const
block|;
name|bool
name|isIPhoneOSVersionLT
argument_list|(
argument|unsigned V0
argument_list|,
argument|unsigned V1=
literal|0
argument_list|,
argument|unsigned V2=
literal|0
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|isTargetIPhoneOS
argument_list|()
operator|&&
literal|"Unexpected call for OS X target!"
argument_list|)
block|;
return|return
name|TargetVersion
operator|<
name|VersionTuple
argument_list|(
name|V0
argument_list|,
name|V1
argument_list|,
name|V2
argument_list|)
return|;
block|}
name|bool
name|isMacosxVersionLT
argument_list|(
argument|unsigned V0
argument_list|,
argument|unsigned V1=
literal|0
argument_list|,
argument|unsigned V2=
literal|0
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
operator|!
name|isTargetIPhoneOS
argument_list|()
operator|&&
literal|"Unexpected call for iPhoneOS target!"
argument_list|)
block|;
return|return
name|TargetVersion
operator|<
name|VersionTuple
argument_list|(
name|V0
argument_list|,
name|V1
argument_list|,
name|V2
argument_list|)
return|;
block|}
comment|/// AddLinkARCArgs - Add the linker arguments to link the ARC runtime library.
name|virtual
name|void
name|AddLinkARCArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
operator|=
literal|0
block|;
comment|/// AddLinkRuntimeLibArgs - Add the linker arguments to link the compiler
comment|/// runtime library.
name|virtual
name|void
name|AddLinkRuntimeLibArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
operator|=
literal|0
block|;
comment|/// }
comment|/// @name ToolChain Implementation
comment|/// {
name|virtual
name|types
operator|::
name|ID
name|LookupTypeForExtension
argument_list|(
argument|const char *Ext
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|HasNativeLLVMSupport
argument_list|()
specifier|const
block|;
name|virtual
name|ObjCRuntime
name|getDefaultObjCRuntime
argument_list|(
argument|bool isNonFragile
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|hasBlocksRuntime
argument_list|()
specifier|const
block|;
name|virtual
name|DerivedArgList
operator|*
name|TranslateArgs
argument_list|(
argument|const DerivedArgList&Args
argument_list|,
argument|const char *BoundArch
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|IsBlocksDefault
argument_list|()
specifier|const
block|{
comment|// Always allow blocks on Darwin; users interested in versioning are
comment|// expected to use /usr/include/Blocks.h.
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|IsIntegratedAssemblerDefault
argument_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|DISABLE_DEFAULT_INTEGRATED_ASSEMBLER
return|return
name|false
return|;
else|#
directive|else
comment|// Default integrated assembler to on for Darwin.
return|return
name|true
return|;
endif|#
directive|endif
block|}
name|virtual
name|bool
name|IsStrictAliasingDefault
argument_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|DISABLE_DEFAULT_STRICT_ALIASING
return|return
name|false
return|;
else|#
directive|else
return|return
name|ToolChain
operator|::
name|IsStrictAliasingDefault
argument_list|()
return|;
endif|#
directive|endif
block|}
name|virtual
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|IsEncodeExtendedBlockSignatureDefault
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|IsObjCNonFragileABIDefault
argument_list|()
specifier|const
block|{
comment|// Non-fragile ABI is default for everything but i386.
return|return
name|getTriple
argument_list|()
operator|.
name|getArch
argument_list|()
operator|!=
name|llvm
operator|::
name|Triple
operator|::
name|x86
return|;
block|}
name|virtual
name|bool
name|UseObjCMixedDispatch
argument_list|()
specifier|const
block|{
comment|// This is only used with the non-fragile ABI and non-legacy dispatch.
comment|// Mixed dispatch is used everywhere except OS X before 10.6.
return|return
operator|!
operator|(
operator|!
name|isTargetIPhoneOS
argument_list|()
operator|&&
name|isMacosxVersionLT
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|)
operator|)
return|;
block|}
name|virtual
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|unsigned
name|GetDefaultStackProtectorLevel
argument_list|(
name|bool
name|KernelOrKext
argument_list|)
decl|const
block|{
comment|// Stack protectors default to on for user code on 10.5,
comment|// and for everything in 10.6 and beyond
return|return
name|isTargetIPhoneOS
argument_list|()
operator|||
operator|(
operator|!
name|isMacosxVersionLT
argument_list|(
literal|10
argument_list|,
literal|6
argument_list|)
operator|||
operator|(
operator|!
name|isMacosxVersionLT
argument_list|(
literal|10
argument_list|,
literal|5
argument_list|)
operator|&&
operator|!
name|KernelOrKext
operator|)
operator|)
return|;
block|}
name|virtual
name|RuntimeLibType
name|GetDefaultRuntimeLibType
argument_list|()
specifier|const
block|{
return|return
name|ToolChain
operator|::
name|RLT_CompilerRT
return|;
block|}
name|virtual
name|bool
name|isPICDefault
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isPIEDefault
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|isPICDefaultForced
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|SupportsProfiling
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|SupportsObjCGC
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|void
name|CheckObjCARC
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|UseDwarfDebugFlags
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|bool
name|UseSjLjExceptions
argument_list|()
specifier|const
expr_stmt|;
comment|/// }
block|}
empty_stmt|;
comment|/// DarwinClang - The Darwin toolchain used by Clang.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|DarwinClang
range|:
name|public
name|Darwin
block|{
name|public
operator|:
name|DarwinClang
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
comment|/// @name Darwin ToolChain Implementation
comment|/// {
name|virtual
name|void
name|AddLinkRuntimeLibArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|void
name|AddLinkRuntimeLib
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|,
argument|const char *DarwinStaticLib
argument_list|,
argument|bool AlwaysLink = false
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddCXXStdlibLibArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddCCKextLibArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddLinkARCArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
comment|/// }
block|}
decl_stmt|;
comment|/// Darwin_Generic_GCC - Generic Darwin tool chain using gcc.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Darwin_Generic_GCC
range|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|Darwin_Generic_GCC
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
operator|:
name|Generic_GCC
argument_list|(
argument|D
argument_list|,
argument|Triple
argument_list|,
argument|Args
argument_list|)
block|{}
name|std
operator|::
name|string
name|ComputeEffectiveClangTriple
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|types::ID InputType
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|isPICDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
expr|}
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Generic_ELF
operator|:
name|public
name|Generic_GCC
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|public
operator|:
name|Generic_ELF
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
operator|:
name|Generic_GCC
argument_list|(
argument|D
argument_list|,
argument|Triple
argument_list|,
argument|Args
argument_list|)
block|{}
name|virtual
name|bool
name|IsIntegratedAssemblerDefault
argument_list|()
specifier|const
block|{
comment|// Default integrated assembler to on for x86.
return|return
operator|(
name|getTriple
argument_list|()
operator|.
name|getArch
argument_list|()
operator|==
name|llvm
operator|::
name|Triple
operator|::
name|aarch64
operator|||
name|getTriple
argument_list|()
operator|.
name|getArch
argument_list|()
operator|==
name|llvm
operator|::
name|Triple
operator|::
name|x86
operator|||
name|getTriple
argument_list|()
operator|.
name|getArch
argument_list|()
operator|==
name|llvm
operator|::
name|Triple
operator|::
name|x86_64
operator|)
return|;
block|}
expr|}
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|AuroraUX
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|AuroraUX
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Solaris
operator|:
name|public
name|Generic_GCC
block|{
name|public
operator|:
name|Solaris
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|virtual
name|bool
name|IsIntegratedAssemblerDefault
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|;  }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|OpenBSD
operator|:
name|public
name|Generic_ELF
block|{
name|public
operator|:
name|OpenBSD
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|virtual
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|IsObjCNonFragileABIDefault
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Bitrig
operator|:
name|public
name|Generic_ELF
block|{
name|public
operator|:
name|Bitrig
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|virtual
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|IsObjCNonFragileABIDefault
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|IsObjCLegacyDispatchDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|AddClangCXXStdlibIncludeArgs
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddCXXStdlibLibArgs
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|ArgStringList&CmdArgs
argument_list|)
specifier|const
block|;
name|virtual
name|unsigned
name|GetDefaultStackProtectorLevel
argument_list|(
argument|bool KernelOrKext
argument_list|)
specifier|const
block|{
return|return
literal|1
return|;
block|}
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|FreeBSD
operator|:
name|public
name|Generic_ELF
block|{
name|public
operator|:
name|FreeBSD
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|virtual
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|IsObjCNonFragileABIDefault
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|UseSjLjExceptions
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|NetBSD
operator|:
name|public
name|Generic_ELF
block|{
name|public
operator|:
name|NetBSD
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|virtual
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|IsObjCNonFragileABIDefault
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
name|virtual
name|CXXStdlibType
name|GetCXXStdlibType
argument_list|(
argument|const ArgList&Args
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddClangCXXStdlibIncludeArgs
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Minix
operator|:
name|public
name|Generic_ELF
block|{
name|public
operator|:
name|Minix
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|DragonFly
operator|:
name|public
name|Generic_ELF
block|{
name|public
operator|:
name|DragonFly
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|virtual
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Linux
operator|:
name|public
name|Generic_ELF
block|{
name|public
operator|:
name|Linux
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|virtual
name|bool
name|HasNativeLLVMSupport
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|AddClangSystemIncludeArgs
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|addClangTargetOptions
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddClangCXXStdlibIncludeArgs
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|isPIEDefault
argument_list|()
specifier|const
block|;
name|std
operator|::
name|string
name|Linker
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|ExtraOpts
block|;
name|bool
name|IsPIEDefault
block|;
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|;
name|private
operator|:
specifier|static
name|bool
name|addLibStdCXXIncludePaths
argument_list|(
argument|Twine Base
argument_list|,
argument|Twine Suffix
argument_list|,
argument|Twine TargetArchDir
argument_list|,
argument|Twine MultiLibSuffix
argument_list|,
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
block|;
specifier|static
name|bool
name|addLibStdCXXIncludePaths
argument_list|(
argument|Twine Base
argument_list|,
argument|Twine TargetArchDir
argument_list|,
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
block|;
name|std
operator|::
name|string
name|computeSysRoot
argument_list|(
argument|const ArgList&Args
argument_list|)
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Hexagon_TC
operator|:
name|public
name|Linux
block|{
name|protected
operator|:
name|GCCVersion
name|GCCLibAndIncVersion
block|;
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|;
name|public
operator|:
name|Hexagon_TC
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
operator|~
name|Hexagon_TC
argument_list|()
block|;
name|virtual
name|void
name|AddClangSystemIncludeArgs
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddClangCXXStdlibIncludeArgs
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|virtual
name|CXXStdlibType
name|GetCXXStdlibType
argument_list|(
argument|const ArgList&Args
argument_list|)
specifier|const
block|;
name|StringRef
name|GetGCCLibAndIncVersion
argument_list|()
specifier|const
block|{
return|return
name|GCCLibAndIncVersion
operator|.
name|Text
return|;
block|}
specifier|static
name|std
operator|::
name|string
name|GetGnuDir
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|InstalledDir
argument_list|)
block|;
specifier|static
name|StringRef
name|GetTargetCPU
argument_list|(
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|; }
block|;
comment|/// TCEToolChain - A tool chain using the llvm bitcode tools to perform
comment|/// all subcommands. See http://tce.cs.tut.fi for our peculiar target.
name|class
name|LLVM_LIBRARY_VISIBILITY
name|TCEToolChain
operator|:
name|public
name|ToolChain
block|{
name|public
operator|:
name|TCEToolChain
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
operator|~
name|TCEToolChain
argument_list|()
block|;
name|bool
name|IsMathErrnoDefault
argument_list|()
specifier|const
block|;
name|bool
name|isPICDefault
argument_list|()
specifier|const
block|;
name|bool
name|isPIEDefault
argument_list|()
specifier|const
block|;
name|bool
name|isPICDefaultForced
argument_list|()
specifier|const
block|; }
block|;
name|class
name|LLVM_LIBRARY_VISIBILITY
name|Windows
operator|:
name|public
name|ToolChain
block|{
name|public
operator|:
name|Windows
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
block|;
name|virtual
name|bool
name|IsIntegratedAssemblerDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|IsUnwindTablesDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isPICDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isPIEDefault
argument_list|()
specifier|const
block|;
name|virtual
name|bool
name|isPICDefaultForced
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|AddClangSystemIncludeArgs
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|AddClangCXXStdlibIncludeArgs
argument_list|(
argument|const ArgList&DriverArgs
argument_list|,
argument|ArgStringList&CC1Args
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|virtual
name|Tool
operator|*
name|buildLinker
argument_list|()
specifier|const
block|;
name|virtual
name|Tool
operator|*
name|buildAssembler
argument_list|()
specifier|const
block|; }
block|;  }
comment|// end namespace toolchains
block|}
comment|// end namespace driver
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

