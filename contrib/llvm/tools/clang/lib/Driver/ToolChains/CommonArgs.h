begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- CommonArgs.h - Args handling for multiple toolchains ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_COMMONARGS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_COMMONARGS_H
end_define

begin_include
include|#
directive|include
file|"InputInfo.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/Driver.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/Tool.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/ToolChain.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/CodeGen.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
name|namespace
name|tools
block|{
name|void
name|addPathIfExists
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|Twine
operator|&
name|Path
argument_list|,
name|ToolChain
operator|::
name|path_list
operator|&
name|Paths
argument_list|)
decl_stmt|;
name|void
name|AddLinkerInputs
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
specifier|const
name|InputInfoList
operator|&
name|Inputs
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|,
specifier|const
name|JobAction
operator|&
name|JA
argument_list|)
decl_stmt|;
name|void
name|claimNoWarnArgs
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
decl_stmt|;
name|bool
name|addSanitizerRuntimes
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl_stmt|;
name|void
name|linkSanitizerRuntimeDeps
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl_stmt|;
name|void
name|AddRunTimeLibs
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
specifier|const
name|Driver
operator|&
name|D
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|SplitDebugName
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
specifier|const
name|InputInfo
operator|&
name|Input
argument_list|)
decl_stmt|;
name|void
name|SplitDebugInfo
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
name|Compilation
operator|&
name|C
argument_list|,
specifier|const
name|Tool
operator|&
name|T
argument_list|,
specifier|const
name|JobAction
operator|&
name|JA
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
specifier|const
name|InputInfo
operator|&
name|Output
argument_list|,
specifier|const
name|char
operator|*
name|OutFile
argument_list|)
decl_stmt|;
name|void
name|AddGoldPlugin
argument_list|(
specifier|const
name|ToolChain
operator|&
name|ToolChain
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|,
name|bool
name|IsThinLTO
argument_list|,
specifier|const
name|Driver
operator|&
name|D
argument_list|)
decl_stmt|;
name|std
operator|::
name|tuple
operator|<
name|llvm
operator|::
name|Reloc
operator|::
name|Model
operator|,
name|unsigned
operator|,
name|bool
operator|>
name|ParsePICArgs
argument_list|(
specifier|const
name|ToolChain
operator|&
name|ToolChain
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
expr_stmt|;
name|void
name|AddAssemblerKPIC
argument_list|(
specifier|const
name|ToolChain
operator|&
name|ToolChain
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl_stmt|;
name|void
name|addArchSpecificRPath
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl_stmt|;
name|void
name|addOpenMPRuntime
argument_list|(
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|,
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
decl_stmt|;
name|llvm
operator|::
name|opt
operator|::
name|Arg
operator|*
name|getLastProfileUseArg
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
expr_stmt|;
name|llvm
operator|::
name|opt
operator|::
name|Arg
operator|*
name|getLastProfileSampleUseArg
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
expr_stmt|;
name|bool
name|isObjCAutoRefCount
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
decl_stmt|;
name|unsigned
name|getLTOParallelism
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
specifier|const
name|Driver
operator|&
name|D
argument_list|)
decl_stmt|;
name|bool
name|areOptimizationsEnabled
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|)
decl_stmt|;
name|bool
name|isUseSeparateSections
argument_list|(
specifier|const
name|llvm
operator|::
name|Triple
operator|&
name|Triple
argument_list|)
decl_stmt|;
name|void
name|addDirectoryList
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|ArgStringList
operator|&
name|CmdArgs
argument_list|,
specifier|const
name|char
operator|*
name|ArgName
argument_list|,
specifier|const
name|char
operator|*
name|EnvVar
argument_list|)
decl_stmt|;
name|void
name|AddTargetFeature
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Features
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|OptSpecifier
name|OnOpt
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|OptSpecifier
name|OffOpt
argument_list|,
name|StringRef
name|FeatureName
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|getCPUName
argument_list|(
argument|const llvm::opt::ArgList&Args
argument_list|,
argument|const llvm::Triple&T
argument_list|,
argument|bool FromAs = false
argument_list|)
expr_stmt|;
name|void
name|handleTargetFeaturesGroup
argument_list|(
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|ArgList
operator|&
name|Args
argument_list|,
name|std
operator|::
name|vector
operator|<
name|StringRef
operator|>
operator|&
name|Features
argument_list|,
name|llvm
operator|::
name|opt
operator|::
name|OptSpecifier
name|Group
argument_list|)
decl_stmt|;
block|}
comment|// end namespace tools
block|}
comment|// end namespace driver
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_LIB_DRIVER_TOOLCHAINS_COMMONARGS_H
end_comment

end_unit

