begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- SanitizerArgs.h - Arguments for sanitizer tools  -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_LIB_DRIVER_SANITIZERARGS_H_
end_ifndef

begin_define
define|#
directive|define
name|CLANG_LIB_DRIVER_SANITIZERARGS_H_
end_define

begin_include
include|#
directive|include
file|"clang/Driver/ArgList.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
name|class
name|SanitizerArgs
block|{
comment|/// Assign ordinals to sanitizer flags. We'll use the ordinal values as
comment|/// bit positions within \c Kind.
enum|enum
name|SanitizeOrdinal
block|{
define|#
directive|define
name|SANITIZER
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|)
value|SO_##ID,
include|#
directive|include
file|"clang/Basic/Sanitizers.def"
name|SO_Count
block|}
enum|;
comment|/// Bugs to catch at runtime.
enum|enum
name|SanitizeKind
block|{
define|#
directive|define
name|SANITIZER
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|)
value|ID = 1<< SO_##ID,
define|#
directive|define
name|SANITIZER_GROUP
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|,
name|ALIAS
parameter_list|)
value|ID = ALIAS,
include|#
directive|include
file|"clang/Basic/Sanitizers.def"
name|NeedsAsanRt
init|=
name|Address
block|,
name|NeedsTsanRt
init|=
name|Thread
block|,
name|NeedsUbsanRt
init|=
name|Undefined
block|}
enum|;
name|unsigned
name|Kind
decl_stmt|;
name|public
label|:
name|SanitizerArgs
argument_list|()
operator|:
name|Kind
argument_list|(
literal|0
argument_list|)
block|{}
comment|/// Parses the sanitizer arguments from an argument list.
name|SanitizerArgs
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
expr_stmt|;
name|bool
name|needsAsanRt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|NeedsAsanRt
return|;
block|}
name|bool
name|needsTsanRt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|NeedsTsanRt
return|;
block|}
name|bool
name|needsUbsanRt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|NeedsUbsanRt
return|;
block|}
name|bool
name|sanitizesVptr
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|Vptr
return|;
block|}
name|void
name|addArgs
argument_list|(
specifier|const
name|ArgList
operator|&
name|Args
argument_list|,
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|Kind
condition|)
return|return;
name|llvm
operator|::
name|SmallString
operator|<
literal|256
operator|>
name|SanitizeOpt
argument_list|(
literal|"-fsanitize="
argument_list|)
expr_stmt|;
define|#
directive|define
name|SANITIZER
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|)
define|\
value|if (Kind& ID) \       SanitizeOpt += NAME ",";
include|#
directive|include
file|"clang/Basic/Sanitizers.def"
name|SanitizeOpt
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|CmdArgs
operator|.
name|push_back
argument_list|(
name|Args
operator|.
name|MakeArgString
argument_list|(
name|SanitizeOpt
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|private
label|:
comment|/// Parse a single value from a -fsanitize= or -fno-sanitize= value list.
comment|/// Returns a member of the \c SanitizeKind enumeration, or \c 0 if \p Value
comment|/// is not known.
specifier|static
name|unsigned
name|parse
parameter_list|(
specifier|const
name|char
modifier|*
name|Value
parameter_list|)
block|{
return|return
name|llvm
operator|::
name|StringSwitch
operator|<
name|SanitizeKind
operator|>
operator|(
name|Value
operator|)
define|#
directive|define
name|SANITIZER
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|)
value|.Case(NAME, ID)
define|#
directive|define
name|SANITIZER_GROUP
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|,
name|ALIAS
parameter_list|)
value|.Case(NAME, ID)
include|#
directive|include
file|"clang/Basic/Sanitizers.def"
operator|.
name|Default
argument_list|(
name|SanitizeKind
argument_list|()
argument_list|)
return|;
block|}
comment|/// Parse a -fsanitize= or -fno-sanitize= argument's values, diagnosing any
comment|/// invalid components.
specifier|static
name|unsigned
name|parse
parameter_list|(
specifier|const
name|Driver
modifier|&
name|D
parameter_list|,
specifier|const
name|Arg
modifier|*
name|A
parameter_list|)
block|{
name|unsigned
name|Kind
init|=
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|N
init|=
name|A
operator|->
name|getNumValues
argument_list|()
init|;
name|I
operator|!=
name|N
condition|;
operator|++
name|I
control|)
block|{
if|if
condition|(
name|unsigned
name|K
init|=
name|parse
argument_list|(
name|A
operator|->
name|getValue
argument_list|(
name|I
argument_list|)
argument_list|)
condition|)
name|Kind
operator||=
name|K
expr_stmt|;
else|else
name|D
operator|.
name|Diag
argument_list|(
name|diag
operator|::
name|err_drv_unsupported_option_argument
argument_list|)
operator|<<
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|getName
argument_list|()
operator|<<
name|A
operator|->
name|getValue
argument_list|(
name|I
argument_list|)
expr_stmt|;
block|}
return|return
name|Kind
return|;
block|}
comment|/// Produce an argument string from argument \p A, which shows how it provides
comment|/// a value in \p Mask. For instance, the argument
comment|/// "-fsanitize=address,alignment" with mask \c NeedsUbsanRt would produce
comment|/// "-fsanitize=alignment".
specifier|static
name|std
operator|::
name|string
name|describeSanitizeArg
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|const Arg *A
argument_list|,
argument|unsigned Mask
argument_list|)
block|{
if|if
condition|(
operator|!
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fsanitize_EQ
argument_list|)
condition|)
return|return
name|A
operator|->
name|getAsString
argument_list|(
name|Args
argument_list|)
return|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|N
init|=
name|A
operator|->
name|getNumValues
argument_list|()
init|;
name|I
operator|!=
name|N
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|parse
argument_list|(
name|A
operator|->
name|getValue
argument_list|(
name|I
argument_list|)
argument_list|)
operator|&
name|Mask
condition|)
return|return
name|std
operator|::
name|string
argument_list|(
literal|"-fsanitize="
argument_list|)
operator|+
name|A
operator|->
name|getValue
argument_list|(
name|I
argument_list|)
return|;
name|llvm_unreachable
argument_list|(
literal|"arg didn't provide expected value"
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace driver
end_comment

begin_comment
unit|}
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// CLANG_LIB_DRIVER_SANITIZERARGS_H_
end_comment

end_unit

