begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- SanitizerArgs.h - Arguments for sanitizer tools  -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_LIB_DRIVER_SANITIZERARGS_H_
end_ifndef

begin_define
define|#
directive|define
name|CLANG_LIB_DRIVER_SANITIZERARGS_H_
end_define

begin_include
include|#
directive|include
file|"clang/Driver/Arg.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/ArgList.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/Driver.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/DriverDiagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/Options.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSwitch.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Path.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
name|class
name|SanitizerArgs
block|{
comment|/// Assign ordinals to sanitizer flags. We'll use the ordinal values as
comment|/// bit positions within \c Kind.
enum|enum
name|SanitizeOrdinal
block|{
define|#
directive|define
name|SANITIZER
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|)
value|SO_##ID,
include|#
directive|include
file|"clang/Basic/Sanitizers.def"
name|SO_Count
block|}
enum|;
comment|/// Bugs to catch at runtime.
enum|enum
name|SanitizeKind
block|{
define|#
directive|define
name|SANITIZER
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|)
value|ID = 1<< SO_##ID,
define|#
directive|define
name|SANITIZER_GROUP
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|,
name|ALIAS
parameter_list|)
value|ID = ALIAS,
include|#
directive|include
file|"clang/Basic/Sanitizers.def"
name|NeedsAsanRt
init|=
name|Address
block|,
name|NeedsTsanRt
init|=
name|Thread
block|,
name|NeedsMsanRt
init|=
name|Memory
block|,
name|NeedsUbsanRt
init|=
name|Undefined
operator||
name|Integer
block|,
name|NotAllowedWithTrap
init|=
name|Vptr
block|,
name|HasZeroBaseShadow
init|=
name|Thread
operator||
name|Memory
block|}
enum|;
name|unsigned
name|Kind
decl_stmt|;
name|std
operator|::
name|string
name|BlacklistFile
expr_stmt|;
name|bool
name|MsanTrackOrigins
decl_stmt|;
name|bool
name|AsanZeroBaseShadow
decl_stmt|;
name|bool
name|UbsanTrapOnError
decl_stmt|;
name|public
label|:
name|SanitizerArgs
argument_list|()
operator|:
name|Kind
argument_list|(
literal|0
argument_list|)
operator|,
name|BlacklistFile
argument_list|(
literal|""
argument_list|)
operator|,
name|MsanTrackOrigins
argument_list|(
name|false
argument_list|)
operator|,
name|AsanZeroBaseShadow
argument_list|(
name|false
argument_list|)
operator|,
name|UbsanTrapOnError
argument_list|(
argument|false
argument_list|)
block|{}
comment|/// Parses the sanitizer arguments from an argument list.
name|SanitizerArgs
argument_list|(
specifier|const
name|ToolChain
operator|&
name|TC
argument_list|,
specifier|const
name|ArgList
operator|&
name|Args
argument_list|)
expr_stmt|;
name|bool
name|needsAsanRt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|NeedsAsanRt
return|;
block|}
name|bool
name|needsTsanRt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|NeedsTsanRt
return|;
block|}
name|bool
name|needsMsanRt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|NeedsMsanRt
return|;
block|}
name|bool
name|needsUbsanRt
argument_list|()
specifier|const
block|{
if|if
condition|(
name|UbsanTrapOnError
condition|)
return|return
name|false
return|;
return|return
name|Kind
operator|&
name|NeedsUbsanRt
return|;
block|}
name|bool
name|sanitizesVptr
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|Vptr
return|;
block|}
name|bool
name|notAllowedWithTrap
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|&
name|NotAllowedWithTrap
return|;
block|}
name|bool
name|hasZeroBaseShadow
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Kind
operator|&
name|HasZeroBaseShadow
operator|)
operator|||
name|AsanZeroBaseShadow
return|;
block|}
name|void
name|addArgs
argument_list|(
specifier|const
name|ArgList
operator|&
name|Args
argument_list|,
name|ArgStringList
operator|&
name|CmdArgs
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|Kind
condition|)
return|return;
name|SmallString
operator|<
literal|256
operator|>
name|SanitizeOpt
argument_list|(
literal|"-fsanitize="
argument_list|)
expr_stmt|;
define|#
directive|define
name|SANITIZER
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|)
define|\
value|if (Kind& ID) \       SanitizeOpt += NAME ",";
include|#
directive|include
file|"clang/Basic/Sanitizers.def"
name|SanitizeOpt
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|CmdArgs
operator|.
name|push_back
argument_list|(
name|Args
operator|.
name|MakeArgString
argument_list|(
name|SanitizeOpt
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|BlacklistFile
operator|.
name|empty
argument_list|()
condition|)
block|{
name|SmallString
operator|<
literal|64
operator|>
name|BlacklistOpt
argument_list|(
literal|"-fsanitize-blacklist="
argument_list|)
expr_stmt|;
name|BlacklistOpt
operator|+=
name|BlacklistFile
expr_stmt|;
name|CmdArgs
operator|.
name|push_back
argument_list|(
name|Args
operator|.
name|MakeArgString
argument_list|(
name|BlacklistOpt
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|MsanTrackOrigins
condition|)
name|CmdArgs
operator|.
name|push_back
argument_list|(
name|Args
operator|.
name|MakeArgString
argument_list|(
literal|"-fsanitize-memory-track-origins"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|AsanZeroBaseShadow
condition|)
name|CmdArgs
operator|.
name|push_back
argument_list|(
name|Args
operator|.
name|MakeArgString
argument_list|(
literal|"-fsanitize-address-zero-base-shadow"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|private
label|:
comment|/// Parse a single value from a -fsanitize= or -fno-sanitize= value list.
comment|/// Returns OR of members of the \c SanitizeKind enumeration, or \c 0
comment|/// if \p Value is not known.
specifier|static
name|unsigned
name|parse
parameter_list|(
specifier|const
name|char
modifier|*
name|Value
parameter_list|)
block|{
name|unsigned
name|ParsedKind
init|=
name|llvm
operator|::
name|StringSwitch
operator|<
name|SanitizeKind
operator|>
operator|(
name|Value
operator|)
define|#
directive|define
name|SANITIZER
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|)
value|.Case(NAME, ID)
define|#
directive|define
name|SANITIZER_GROUP
parameter_list|(
name|NAME
parameter_list|,
name|ID
parameter_list|,
name|ALIAS
parameter_list|)
value|.Case(NAME, ID)
include|#
directive|include
file|"clang/Basic/Sanitizers.def"
operator|.
name|Default
argument_list|(
name|SanitizeKind
argument_list|()
argument_list|)
decl_stmt|;
comment|// Assume -fsanitize=address implies -fsanitize=init-order.
comment|// FIXME: This should be either specified in Sanitizers.def, or go away when
comment|// we get rid of "-fsanitize=init-order" flag at all.
if|if
condition|(
name|ParsedKind
operator|&
name|Address
condition|)
name|ParsedKind
operator||=
name|InitOrder
expr_stmt|;
return|return
name|ParsedKind
return|;
block|}
comment|/// Parse a -fsanitize= or -fno-sanitize= argument's values, diagnosing any
comment|/// invalid components.
specifier|static
name|unsigned
name|parse
parameter_list|(
specifier|const
name|Driver
modifier|&
name|D
parameter_list|,
specifier|const
name|Arg
modifier|*
name|A
parameter_list|,
name|bool
name|DiagnoseErrors
parameter_list|)
block|{
name|unsigned
name|Kind
init|=
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|N
init|=
name|A
operator|->
name|getNumValues
argument_list|()
init|;
name|I
operator|!=
name|N
condition|;
operator|++
name|I
control|)
block|{
if|if
condition|(
name|unsigned
name|K
init|=
name|parse
argument_list|(
name|A
operator|->
name|getValue
argument_list|(
name|I
argument_list|)
argument_list|)
condition|)
name|Kind
operator||=
name|K
expr_stmt|;
elseif|else
if|if
condition|(
name|DiagnoseErrors
condition|)
name|D
operator|.
name|Diag
argument_list|(
name|diag
operator|::
name|err_drv_unsupported_option_argument
argument_list|)
operator|<<
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|getName
argument_list|()
operator|<<
name|A
operator|->
name|getValue
argument_list|(
name|I
argument_list|)
expr_stmt|;
block|}
return|return
name|Kind
return|;
block|}
comment|/// Parse a single flag of the form -f[no]sanitize=, or
comment|/// -f*-sanitizer. Sets the masks defining required change of Kind value.
comment|/// Returns true if the flag was parsed successfully.
specifier|static
name|bool
name|parse
parameter_list|(
specifier|const
name|Driver
modifier|&
name|D
parameter_list|,
specifier|const
name|ArgList
modifier|&
name|Args
parameter_list|,
specifier|const
name|Arg
modifier|*
name|A
parameter_list|,
name|unsigned
modifier|&
name|Add
parameter_list|,
name|unsigned
modifier|&
name|Remove
parameter_list|,
name|bool
name|DiagnoseErrors
parameter_list|)
block|{
name|Add
operator|=
literal|0
expr_stmt|;
name|Remove
operator|=
literal|0
expr_stmt|;
specifier|const
name|char
modifier|*
name|DeprecatedReplacement
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_faddress_sanitizer
argument_list|)
condition|)
block|{
name|Add
operator|=
name|Address
expr_stmt|;
name|DeprecatedReplacement
operator|=
literal|"-fsanitize=address"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fno_address_sanitizer
argument_list|)
condition|)
block|{
name|Remove
operator|=
name|Address
expr_stmt|;
name|DeprecatedReplacement
operator|=
literal|"-fno-sanitize=address"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fthread_sanitizer
argument_list|)
condition|)
block|{
name|Add
operator|=
name|Thread
expr_stmt|;
name|DeprecatedReplacement
operator|=
literal|"-fsanitize=thread"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fno_thread_sanitizer
argument_list|)
condition|)
block|{
name|Remove
operator|=
name|Thread
expr_stmt|;
name|DeprecatedReplacement
operator|=
literal|"-fno-sanitize=thread"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fcatch_undefined_behavior
argument_list|)
condition|)
block|{
name|Add
operator|=
name|UndefinedTrap
expr_stmt|;
name|DeprecatedReplacement
operator|=
literal|"-fsanitize=undefined-trap -fsanitize-undefined-trap-on-error"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fbounds_checking
argument_list|)
operator|||
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fbounds_checking_EQ
argument_list|)
condition|)
block|{
name|Add
operator|=
name|Bounds
expr_stmt|;
name|DeprecatedReplacement
operator|=
literal|"-fsanitize=bounds"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fsanitize_EQ
argument_list|)
condition|)
block|{
name|Add
operator|=
name|parse
argument_list|(
name|D
argument_list|,
name|A
argument_list|,
name|DiagnoseErrors
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fno_sanitize_EQ
argument_list|)
condition|)
block|{
name|Remove
operator|=
name|parse
argument_list|(
name|D
argument_list|,
name|A
argument_list|,
name|DiagnoseErrors
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Flag is not relevant to sanitizers.
return|return
name|false
return|;
block|}
comment|// If this is a deprecated synonym, produce a warning directing users
comment|// towards the new spelling.
if|if
condition|(
name|DeprecatedReplacement
operator|&&
name|DiagnoseErrors
condition|)
name|D
operator|.
name|Diag
argument_list|(
name|diag
operator|::
name|warn_drv_deprecated_arg
argument_list|)
operator|<<
name|A
operator|->
name|getAsString
argument_list|(
name|Args
argument_list|)
operator|<<
name|DeprecatedReplacement
expr_stmt|;
return|return
name|true
return|;
block|}
comment|/// Produce an argument string from ArgList \p Args, which shows how it
comment|/// provides a sanitizer kind in \p Mask. For example, the argument list
comment|/// "-fsanitize=thread,vptr -faddress-sanitizer" with mask \c NeedsUbsanRt
comment|/// would produce "-fsanitize=vptr".
specifier|static
name|std
operator|::
name|string
name|lastArgumentForKind
argument_list|(
argument|const Driver&D
argument_list|,
argument|const ArgList&Args
argument_list|,
argument|unsigned Kind
argument_list|)
block|{
for|for
control|(
name|ArgList
operator|::
name|const_reverse_iterator
name|I
operator|=
name|Args
operator|.
name|rbegin
argument_list|()
operator|,
name|E
operator|=
name|Args
operator|.
name|rend
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
name|unsigned
name|Add
decl_stmt|,
name|Remove
decl_stmt|;
if|if
condition|(
name|parse
argument_list|(
name|D
argument_list|,
name|Args
argument_list|,
operator|*
name|I
argument_list|,
name|Add
argument_list|,
name|Remove
argument_list|,
name|false
argument_list|)
operator|&&
operator|(
name|Add
operator|&
name|Kind
operator|)
condition|)
return|return
name|describeSanitizeArg
argument_list|(
name|Args
argument_list|,
operator|*
name|I
argument_list|,
name|Kind
argument_list|)
return|;
name|Kind
operator|&=
operator|~
name|Remove
expr_stmt|;
block|}
name|llvm_unreachable
argument_list|(
literal|"arg list didn't provide expected value"
argument_list|)
expr_stmt|;
block|}
comment|/// Produce an argument string from argument \p A, which shows how it provides
comment|/// a value in \p Mask. For instance, the argument
comment|/// "-fsanitize=address,alignment" with mask \c NeedsUbsanRt would produce
comment|/// "-fsanitize=alignment".
specifier|static
name|std
operator|::
name|string
name|describeSanitizeArg
argument_list|(
argument|const ArgList&Args
argument_list|,
argument|const Arg *A
argument_list|,
argument|unsigned Mask
argument_list|)
block|{
if|if
condition|(
operator|!
name|A
operator|->
name|getOption
argument_list|()
operator|.
name|matches
argument_list|(
name|options
operator|::
name|OPT_fsanitize_EQ
argument_list|)
condition|)
return|return
name|A
operator|->
name|getAsString
argument_list|(
name|Args
argument_list|)
return|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|N
init|=
name|A
operator|->
name|getNumValues
argument_list|()
init|;
name|I
operator|!=
name|N
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|parse
argument_list|(
name|A
operator|->
name|getValue
argument_list|(
name|I
argument_list|)
argument_list|)
operator|&
name|Mask
condition|)
return|return
name|std
operator|::
name|string
argument_list|(
literal|"-fsanitize="
argument_list|)
operator|+
name|A
operator|->
name|getValue
argument_list|(
name|I
argument_list|)
return|;
name|llvm_unreachable
argument_list|(
literal|"arg didn't provide expected value"
argument_list|)
expr_stmt|;
block|}
specifier|static
name|bool
name|getDefaultBlacklistForKind
argument_list|(
specifier|const
name|Driver
operator|&
name|D
argument_list|,
name|unsigned
name|Kind
argument_list|,
name|std
operator|::
name|string
operator|&
name|BLPath
argument_list|)
block|{
comment|// For now, specify the default blacklist location for ASan only.
if|if
condition|(
name|Kind
operator|&
name|NeedsAsanRt
condition|)
block|{
name|SmallString
operator|<
literal|64
operator|>
name|Path
argument_list|(
name|D
operator|.
name|ResourceDir
argument_list|)
expr_stmt|;
name|llvm
operator|::
name|sys
operator|::
name|path
operator|::
name|append
argument_list|(
name|Path
argument_list|,
literal|"asan_blacklist.txt"
argument_list|)
expr_stmt|;
name|BLPath
operator|=
name|Path
operator|.
name|str
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace driver
end_comment

begin_comment
unit|}
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// CLANG_LIB_DRIVER_SANITIZERARGS_H_
end_comment

end_unit

