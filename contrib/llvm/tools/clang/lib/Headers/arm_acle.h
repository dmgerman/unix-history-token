begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===---- arm_acle.h - ARM Non-Neon intrinsics -----------------------------===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ARM_ACLE_H
end_ifndef

begin_define
define|#
directive|define
name|__ARM_ACLE_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__ARM_ACLE
end_ifndef

begin_error
error|#
directive|error
literal|"ACLE intrinsics support not enabled."
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* 8 SYNCHRONIZATION, BARRIER AND HINT INTRINSICS */
comment|/* 8.3 Memory barriers */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
define|#
directive|define
name|__dmb
parameter_list|(
name|i
parameter_list|)
value|__builtin_arm_dmb(i)
define|#
directive|define
name|__dsb
parameter_list|(
name|i
parameter_list|)
value|__builtin_arm_dsb(i)
define|#
directive|define
name|__isb
parameter_list|(
name|i
parameter_list|)
value|__builtin_arm_isb(i)
endif|#
directive|endif
comment|/* 8.4 Hints */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__wfi
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_wfi
argument_list|()
expr_stmt|;
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__wfe
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_wfe
argument_list|()
expr_stmt|;
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__sev
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_sev
argument_list|()
expr_stmt|;
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__sevl
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_sevl
argument_list|()
expr_stmt|;
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__yield
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_yield
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|__ARM_32BIT_STATE
define|#
directive|define
name|__dbg
parameter_list|(
name|t
parameter_list|)
value|__builtin_arm_dbg(t)
endif|#
directive|endif
comment|/* 8.5 Swap */
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__swp
argument_list|(
name|uint32_t
name|__x
argument_list|,
specifier|volatile
name|uint32_t
operator|*
name|__p
argument_list|)
block|{
name|uint32_t
name|v
decl_stmt|;
do|do
name|v
operator|=
name|__builtin_arm_ldrex
argument_list|(
name|__p
argument_list|)
expr_stmt|;
do|while
condition|(
name|__builtin_arm_strex
argument_list|(
name|__x
argument_list|,
name|__p
argument_list|)
condition|)
do|;
return|return
name|v
return|;
block|}
comment|/* 8.6 Memory prefetch intrinsics */
comment|/* 8.6.1 Data prefetch */
define|#
directive|define
name|__pld
parameter_list|(
name|addr
parameter_list|)
value|__pldx(0, 0, 0, addr)
if|#
directive|if
name|__ARM_32BIT_STATE
define|#
directive|define
name|__pldx
parameter_list|(
name|access_kind
parameter_list|,
name|cache_level
parameter_list|,
name|retention_policy
parameter_list|,
name|addr
parameter_list|)
define|\
value|__builtin_arm_prefetch(addr, access_kind, 1)
else|#
directive|else
define|#
directive|define
name|__pldx
parameter_list|(
name|access_kind
parameter_list|,
name|cache_level
parameter_list|,
name|retention_policy
parameter_list|,
name|addr
parameter_list|)
define|\
value|__builtin_arm_prefetch(addr, access_kind, cache_level, retention_policy, 1)
endif|#
directive|endif
comment|/* 8.6.2 Instruction prefetch */
define|#
directive|define
name|__pli
parameter_list|(
name|addr
parameter_list|)
value|__plix(0, 0, addr)
if|#
directive|if
name|__ARM_32BIT_STATE
define|#
directive|define
name|__plix
parameter_list|(
name|cache_level
parameter_list|,
name|retention_policy
parameter_list|,
name|addr
parameter_list|)
define|\
value|__builtin_arm_prefetch(addr, 0, 0)
else|#
directive|else
define|#
directive|define
name|__plix
parameter_list|(
name|cache_level
parameter_list|,
name|retention_policy
parameter_list|,
name|addr
parameter_list|)
define|\
value|__builtin_arm_prefetch(addr, 0, cache_level, retention_policy, 0)
endif|#
directive|endif
comment|/* 8.7 NOP */
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__nop
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_nop
argument_list|()
expr_stmt|;
block|}
comment|/* 9 DATA-PROCESSING INTRINSICS */
comment|/* 9.2 Miscellaneous data-processing intrinsics */
comment|/* ROR */
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__ror
argument_list|(
name|uint32_t
name|__x
argument_list|,
name|uint32_t
name|__y
argument_list|)
block|{
name|__y
operator|%=
literal|32
expr_stmt|;
if|if
condition|(
name|__y
operator|==
literal|0
condition|)
return|return
name|__x
return|;
return|return
operator|(
name|__x
operator|>>
name|__y
operator|)
operator||
operator|(
name|__x
operator|<<
operator|(
literal|32
operator|-
name|__y
operator|)
operator|)
return|;
block|}
specifier|static
name|__inline__
name|uint64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rorll
argument_list|(
name|uint64_t
name|__x
argument_list|,
name|uint32_t
name|__y
argument_list|)
block|{
name|__y
operator|%=
literal|64
expr_stmt|;
if|if
condition|(
name|__y
operator|==
literal|0
condition|)
return|return
name|__x
return|;
return|return
operator|(
name|__x
operator|>>
name|__y
operator|)
operator||
operator|(
name|__x
operator|<<
operator|(
literal|64
operator|-
name|__y
operator|)
operator|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rorl
argument_list|(
name|unsigned
name|long
name|__x
argument_list|,
name|uint32_t
name|__y
argument_list|)
block|{
if|#
directive|if
name|__SIZEOF_LONG__
operator|==
literal|4
return|return
name|__ror
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
else|#
directive|else
return|return
name|__rorll
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
endif|#
directive|endif
block|}
comment|/* CLZ */
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__clz
argument_list|(
name|uint32_t
name|__t
argument_list|)
block|{
return|return
name|__builtin_clz
argument_list|(
name|__t
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__clzl
argument_list|(
name|unsigned
name|long
name|__t
argument_list|)
block|{
return|return
name|__builtin_clzl
argument_list|(
name|__t
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__clzll
argument_list|(
name|uint64_t
name|__t
argument_list|)
block|{
return|return
name|__builtin_clzll
argument_list|(
name|__t
argument_list|)
return|;
block|}
comment|/* REV */
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rev
argument_list|(
name|uint32_t
name|__t
argument_list|)
block|{
return|return
name|__builtin_bswap32
argument_list|(
name|__t
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__revl
argument_list|(
name|unsigned
name|long
name|__t
argument_list|)
block|{
if|#
directive|if
name|__SIZEOF_LONG__
operator|==
literal|4
return|return
name|__builtin_bswap32
argument_list|(
name|__t
argument_list|)
return|;
else|#
directive|else
return|return
name|__builtin_bswap64
argument_list|(
name|__t
argument_list|)
return|;
endif|#
directive|endif
block|}
specifier|static
name|__inline__
name|uint64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__revll
argument_list|(
name|uint64_t
name|__t
argument_list|)
block|{
return|return
name|__builtin_bswap64
argument_list|(
name|__t
argument_list|)
return|;
block|}
comment|/* REV16 */
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rev16
argument_list|(
name|uint32_t
name|__t
argument_list|)
block|{
return|return
name|__ror
argument_list|(
name|__rev
argument_list|(
name|__t
argument_list|)
argument_list|,
literal|16
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rev16ll
argument_list|(
name|uint64_t
name|__t
argument_list|)
block|{
return|return
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|__rev16
argument_list|(
name|__t
operator|>>
literal|32
argument_list|)
operator|)
operator|<<
literal|32
operator|)
operator||
name|__rev16
argument_list|(
name|__t
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rev16l
argument_list|(
name|unsigned
name|long
name|__t
argument_list|)
block|{
if|#
directive|if
name|__SIZEOF_LONG__
operator|==
literal|4
return|return
name|__rev16
argument_list|(
name|__t
argument_list|)
return|;
else|#
directive|else
return|return
name|__rev16ll
argument_list|(
name|__t
argument_list|)
return|;
endif|#
directive|endif
block|}
comment|/* REVSH */
specifier|static
name|__inline__
name|int16_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__revsh
argument_list|(
name|int16_t
name|__t
argument_list|)
block|{
return|return
name|__builtin_bswap16
argument_list|(
name|__t
argument_list|)
return|;
block|}
comment|/* RBIT */
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rbit
argument_list|(
name|uint32_t
name|__t
argument_list|)
block|{
return|return
name|__builtin_arm_rbit
argument_list|(
name|__t
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rbitll
argument_list|(
name|uint64_t
name|__t
argument_list|)
block|{
if|#
directive|if
name|__ARM_32BIT_STATE
return|return
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|__builtin_arm_rbit
argument_list|(
name|__t
argument_list|)
operator|)
operator|<<
literal|32
operator|)
operator||
name|__builtin_arm_rbit
argument_list|(
name|__t
operator|>>
literal|32
argument_list|)
return|;
else|#
directive|else
return|return
name|__builtin_arm_rbit64
argument_list|(
name|__t
argument_list|)
return|;
endif|#
directive|endif
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__rbitl
argument_list|(
name|unsigned
name|long
name|__t
argument_list|)
block|{
if|#
directive|if
name|__SIZEOF_LONG__
operator|==
literal|4
return|return
name|__rbit
argument_list|(
name|__t
argument_list|)
return|;
else|#
directive|else
return|return
name|__rbitll
argument_list|(
name|__t
argument_list|)
return|;
endif|#
directive|endif
block|}
comment|/*  * 9.3 16-bit multiplications  */
if|#
directive|if
name|__ARM_FEATURE_DSP
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smulbb
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smulbb
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smulbt
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smulbt
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smultb
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smultb
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smultt
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smultt
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smulwb
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smulwb
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smulwt
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smulwt
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/*  * 9.4 Saturating intrinsics  *  * FIXME: Change guard to their corrosponding __ARM_FEATURE flag when Q flag  * intrinsics are implemented and the flag is enabled.  */
comment|/* 9.4.1 Width-specified saturation intrinsics */
if|#
directive|if
name|__ARM_FEATURE_SAT
define|#
directive|define
name|__ssat
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|__builtin_arm_ssat(x, y)
define|#
directive|define
name|__usat
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|__builtin_arm_usat(x, y)
endif|#
directive|endif
comment|/* 9.4.2 Saturating addition and subtraction intrinsics */
if|#
directive|if
name|__ARM_FEATURE_DSP
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qadd
argument_list|(
name|int32_t
name|__t
argument_list|,
name|int32_t
name|__v
argument_list|)
block|{
return|return
name|__builtin_arm_qadd
argument_list|(
name|__t
argument_list|,
name|__v
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qsub
argument_list|(
name|int32_t
name|__t
argument_list|,
name|int32_t
name|__v
argument_list|)
block|{
return|return
name|__builtin_arm_qsub
argument_list|(
name|__t
argument_list|,
name|__v
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qdbl
argument_list|(
name|int32_t
name|__t
argument_list|)
block|{
return|return
name|__builtin_arm_qadd
argument_list|(
name|__t
argument_list|,
name|__t
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.4.3 Accumultating multiplications */
if|#
directive|if
name|__ARM_FEATURE_DSP
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlabb
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlabb
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlabt
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlabt
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlatb
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlatb
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlatt
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlatt
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlawb
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlawb
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlawt
argument_list|(
name|int32_t
name|__a
argument_list|,
name|int32_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlawt
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.5.4 Parallel 16-bit saturation */
if|#
directive|if
name|__ARM_FEATURE_SIMD32
define|#
directive|define
name|__ssat16
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|__builtin_arm_ssat16(x, y)
define|#
directive|define
name|__usat16
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|__builtin_arm_usat16(x, y)
endif|#
directive|endif
comment|/* 9.5.5 Packing and unpacking */
if|#
directive|if
name|__ARM_FEATURE_SIMD32
typedef|typedef
name|int32_t
name|int8x4_t
typedef|;
typedef|typedef
name|int32_t
name|int16x2_t
typedef|;
typedef|typedef
name|uint32_t
name|uint8x4_t
typedef|;
typedef|typedef
name|uint32_t
name|uint16x2_t
typedef|;
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__sxtab16
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_sxtab16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__sxtb16
argument_list|(
name|int8x4_t
name|__a
argument_list|)
block|{
return|return
name|__builtin_arm_sxtb16
argument_list|(
name|__a
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uxtab16
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uxtab16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uxtb16
argument_list|(
name|int8x4_t
name|__a
argument_list|)
block|{
return|return
name|__builtin_arm_uxtb16
argument_list|(
name|__a
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.5.6 Parallel selection */
if|#
directive|if
name|__ARM_FEATURE_SIMD32
specifier|static
name|__inline__
name|uint8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__sel
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_sel
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.5.7 Parallel 8-bit addition and subtraction */
if|#
directive|if
name|__ARM_FEATURE_SIMD32
specifier|static
name|__inline__
name|int8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qadd8
argument_list|(
name|int8x4_t
name|__a
argument_list|,
name|int8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_qadd8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qsub8
argument_list|(
name|int8x4_t
name|__a
argument_list|,
name|int8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_qsub8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__sadd8
argument_list|(
name|int8x4_t
name|__a
argument_list|,
name|int8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_sadd8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__shadd8
argument_list|(
name|int8x4_t
name|__a
argument_list|,
name|int8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_shadd8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__shsub8
argument_list|(
name|int8x4_t
name|__a
argument_list|,
name|int8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_shsub8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__ssub8
argument_list|(
name|int8x4_t
name|__a
argument_list|,
name|int8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_ssub8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uadd8
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uadd8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uhadd8
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uhadd8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uhsub8
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uhsub8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uqadd8
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uqadd8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uqsub8
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uqsub8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint8x4_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__usub8
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_usub8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.5.8 Sum of 8-bit absolute differences */
if|#
directive|if
name|__ARM_FEATURE_SIMD32
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__usad8
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_usad8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__usada8
argument_list|(
name|uint8x4_t
name|__a
argument_list|,
name|uint8x4_t
name|__b
argument_list|,
name|uint32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_usada8
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.5.9 Parallel 16-bit addition and subtraction */
if|#
directive|if
name|__ARM_FEATURE_SIMD32
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qadd16
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_qadd16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qasx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_qasx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qsax
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_qsax
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__qsub16
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_qsub16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__sadd16
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_sadd16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__sasx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_sasx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__shadd16
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_shadd16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__shasx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_shasx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__shsax
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_shsax
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__shsub16
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_shsub16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__ssax
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_ssax
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__ssub16
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_ssub16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uadd16
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uadd16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uasx
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uasx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uhadd16
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uhadd16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uhasx
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uhasx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uhsax
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uhsax
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uhsub16
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uhsub16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uqadd16
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uqadd16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uqasx
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uqasx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uqsax
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uqsax
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__uqsub16
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_uqsub16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__usax
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_usax
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint16x2_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__usub16
argument_list|(
name|uint16x2_t
name|__a
argument_list|,
name|uint16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_usub16
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.5.10 Parallel 16-bit multiplications */
if|#
directive|if
name|__ARM_FEATURE_SIMD32
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlad
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlad
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smladx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smladx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlald
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|,
name|int64_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlald
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlaldx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|,
name|int64_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlaldx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlsd
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlsd
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlsdx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|,
name|int32_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlsdx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlsld
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|,
name|int64_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlsld
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int64_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smlsldx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|,
name|int64_t
name|__c
argument_list|)
block|{
return|return
name|__builtin_arm_smlsldx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smuad
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smuad
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smuadx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smuadx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smusd
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smusd
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__smusdx
argument_list|(
name|int16x2_t
name|__a
argument_list|,
name|int16x2_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_smusdx
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.7 CRC32 intrinsics */
if|#
directive|if
name|__ARM_FEATURE_CRC32
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__crc32b
argument_list|(
name|uint32_t
name|__a
argument_list|,
name|uint8_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32b
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__crc32h
argument_list|(
name|uint32_t
name|__a
argument_list|,
name|uint16_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32h
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__crc32w
argument_list|(
name|uint32_t
name|__a
argument_list|,
name|uint32_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32w
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__crc32d
argument_list|(
name|uint32_t
name|__a
argument_list|,
name|uint64_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32d
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__crc32cb
argument_list|(
name|uint32_t
name|__a
argument_list|,
name|uint8_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32cb
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__crc32ch
argument_list|(
name|uint32_t
name|__a
argument_list|,
name|uint16_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32ch
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__crc32cw
argument_list|(
name|uint32_t
name|__a
argument_list|,
name|uint32_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32cw
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__crc32cd
argument_list|(
name|uint32_t
name|__a
argument_list|,
name|uint64_t
name|__b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32cd
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 10.1 Special register intrinsics */
define|#
directive|define
name|__arm_rsr
parameter_list|(
name|sysreg
parameter_list|)
value|__builtin_arm_rsr(sysreg)
define|#
directive|define
name|__arm_rsr64
parameter_list|(
name|sysreg
parameter_list|)
value|__builtin_arm_rsr64(sysreg)
define|#
directive|define
name|__arm_rsrp
parameter_list|(
name|sysreg
parameter_list|)
value|__builtin_arm_rsrp(sysreg)
define|#
directive|define
name|__arm_wsr
parameter_list|(
name|sysreg
parameter_list|,
name|v
parameter_list|)
value|__builtin_arm_wsr(sysreg, v)
define|#
directive|define
name|__arm_wsr64
parameter_list|(
name|sysreg
parameter_list|,
name|v
parameter_list|)
value|__builtin_arm_wsr64(sysreg, v)
define|#
directive|define
name|__arm_wsrp
parameter_list|(
name|sysreg
parameter_list|,
name|v
parameter_list|)
value|__builtin_arm_wsrp(sysreg, v)
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ARM_ACLE_H */
end_comment

end_unit

