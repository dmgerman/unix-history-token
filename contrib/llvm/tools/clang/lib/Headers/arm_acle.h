begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===---- arm_acle.h - ARM Non-Neon intrinsics -----------------------------===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__ARM_ACLE_H
end_ifndef

begin_define
define|#
directive|define
name|__ARM_ACLE_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__ARM_ACLE
end_ifndef

begin_error
error|#
directive|error
literal|"ACLE intrinsics support not enabled."
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* 8 SYNCHRONIZATION, BARRIER AND HINT INTRINSICS */
comment|/* 8.3 Memory barriers */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
define|#
directive|define
name|__dmb
parameter_list|(
name|i
parameter_list|)
value|__builtin_arm_dmb(i)
define|#
directive|define
name|__dsb
parameter_list|(
name|i
parameter_list|)
value|__builtin_arm_dsb(i)
define|#
directive|define
name|__isb
parameter_list|(
name|i
parameter_list|)
value|__builtin_arm_isb(i)
endif|#
directive|endif
comment|/* 8.4 Hints */
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__wfi
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_wfi
argument_list|()
expr_stmt|;
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__wfe
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_wfe
argument_list|()
expr_stmt|;
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__sev
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_sev
argument_list|()
expr_stmt|;
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__sevl
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_sevl
argument_list|()
expr_stmt|;
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__yield
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_yield
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* 8.7 NOP */
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__nop
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_arm_nop
argument_list|()
expr_stmt|;
block|}
comment|/* 9 DATA-PROCESSING INTRINSICS */
comment|/* 9.2 Miscellaneous data-processing intrinsics */
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__clz
argument_list|(
name|uint32_t
name|t
argument_list|)
block|{
return|return
name|__builtin_clz
argument_list|(
name|t
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__clzl
argument_list|(
name|unsigned
name|long
name|t
argument_list|)
block|{
return|return
name|__builtin_clzl
argument_list|(
name|t
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint64_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__clzll
argument_list|(
name|uint64_t
name|t
argument_list|)
block|{
if|#
directive|if
name|__SIZEOF_LONG_LONG__
operator|==
literal|8
return|return
name|__builtin_clzll
argument_list|(
name|t
argument_list|)
return|;
else|#
directive|else
return|return
name|__builtin_clzl
argument_list|(
name|t
argument_list|)
return|;
endif|#
directive|endif
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__rev
argument_list|(
name|uint32_t
name|t
argument_list|)
block|{
return|return
name|__builtin_bswap32
argument_list|(
name|t
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__revl
argument_list|(
name|unsigned
name|long
name|t
argument_list|)
block|{
if|#
directive|if
name|__SIZEOF_LONG__
operator|==
literal|4
return|return
name|__builtin_bswap32
argument_list|(
name|t
argument_list|)
return|;
else|#
directive|else
return|return
name|__builtin_bswap64
argument_list|(
name|t
argument_list|)
return|;
endif|#
directive|endif
block|}
specifier|static
name|__inline__
name|uint64_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__revll
argument_list|(
name|uint64_t
name|t
argument_list|)
block|{
return|return
name|__builtin_bswap64
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/*  * 9.4 Saturating intrinsics  *  * FIXME: Change guard to their corrosponding __ARM_FEATURE flag when Q flag  * intrinsics are implemented and the flag is enabled.  */
comment|/* 9.4.1 Width-specified saturation intrinsics */
if|#
directive|if
name|__ARM_32BIT_STATE
define|#
directive|define
name|__ssat
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|__builtin_arm_ssat(x, y)
define|#
directive|define
name|__usat
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|__builtin_arm_usat(x, y)
endif|#
directive|endif
comment|/* 9.4.2 Saturating addition and subtraction intrinsics */
if|#
directive|if
name|__ARM_32BIT_STATE
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__qadd
argument_list|(
name|int32_t
name|t
argument_list|,
name|int32_t
name|v
argument_list|)
block|{
return|return
name|__builtin_arm_qadd
argument_list|(
name|t
argument_list|,
name|v
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__qsub
argument_list|(
name|int32_t
name|t
argument_list|,
name|int32_t
name|v
argument_list|)
block|{
return|return
name|__builtin_arm_qsub
argument_list|(
name|t
argument_list|,
name|v
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|int32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__qdbl
argument_list|(
name|int32_t
name|t
argument_list|)
block|{
return|return
name|__builtin_arm_qadd
argument_list|(
name|t
argument_list|,
name|t
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/* 9.7 CRC32 intrinsics */
if|#
directive|if
name|__ARM_FEATURE_CRC32
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__crc32b
argument_list|(
name|uint32_t
name|a
argument_list|,
name|uint8_t
name|b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32b
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__crc32h
argument_list|(
name|uint32_t
name|a
argument_list|,
name|uint16_t
name|b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32h
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__crc32w
argument_list|(
name|uint32_t
name|a
argument_list|,
name|uint32_t
name|b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32w
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__crc32d
argument_list|(
name|uint32_t
name|a
argument_list|,
name|uint64_t
name|b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32d
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__crc32cb
argument_list|(
name|uint32_t
name|a
argument_list|,
name|uint8_t
name|b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32cb
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__crc32ch
argument_list|(
name|uint32_t
name|a
argument_list|,
name|uint16_t
name|b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32ch
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__crc32cw
argument_list|(
name|uint32_t
name|a
argument_list|,
name|uint32_t
name|b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32cw
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|uint32_t
name|__attribute__
argument_list|(
operator|(
name|always_inline
operator|,
name|nodebug
operator|)
argument_list|)
name|__crc32cd
argument_list|(
name|uint32_t
name|a
argument_list|,
name|uint64_t
name|b
argument_list|)
block|{
return|return
name|__builtin_arm_crc32cd
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __ARM_ACLE_H */
end_comment

end_unit

