begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===---- __clang_cuda_cmath.h - Device-side CUDA cmath support ------------===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CLANG_CUDA_CMATH_H__
end_ifndef

begin_define
define|#
directive|define
name|__CLANG_CUDA_CMATH_H__
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__CUDA__
end_ifndef

begin_error
error|#
directive|error
literal|"This file is for CUDA compilation only."
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<limits>
end_include

begin_comment
comment|// CUDA lets us use various std math functions on the device side.  This file
end_comment

begin_comment
comment|// works in concert with __clang_cuda_math_forward_declares.h to make this work.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Specifically, the forward-declares header declares __device__ overloads for
end_comment

begin_comment
comment|// these functions in the global namespace, then pulls them into namespace std
end_comment

begin_comment
comment|// with 'using' statements.  Then this file implements those functions, after
end_comment

begin_comment
comment|// their implementations have been pulled in.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// It's important that we declare the functions in the global namespace and pull
end_comment

begin_comment
comment|// them into namespace std with using statements, as opposed to simply declaring
end_comment

begin_comment
comment|// these functions in namespace std, because our device functions need to
end_comment

begin_comment
comment|// overload the standard library functions, which may be declared in the global
end_comment

begin_comment
comment|// namespace or in std, depending on the degree of conformance of the stdlib
end_comment

begin_comment
comment|// implementation.  Declaring in the global namespace and pulling into namespace
end_comment

begin_comment
comment|// std covers all of the known knowns.
end_comment

begin_define
define|#
directive|define
name|__DEVICE__
value|static __device__ __inline__ __attribute__((always_inline))
end_define

begin_function
name|__DEVICE__
name|long
name|long
name|abs
parameter_list|(
name|long
name|long
name|__n
parameter_list|)
block|{
return|return
operator|::
name|llabs
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|long
name|abs
parameter_list|(
name|long
name|__n
parameter_list|)
block|{
return|return
operator|::
name|labs
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|abs
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|fabsf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|double
name|abs
parameter_list|(
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|fabs
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|acos
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|acosf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|asin
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|asinf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|atan
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atanf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|atan2
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
operator|::
name|atan2f
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|ceil
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|ceilf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|cos
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|cosf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|cosh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|coshf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|exp
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|expf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|fabs
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|fabsf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|floor
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|floorf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|fmod
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
operator|::
name|fmodf
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|int
name|fpclassify
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
name|__builtin_fpclassify
argument_list|(
name|FP_NAN
argument_list|,
name|FP_INFINITE
argument_list|,
name|FP_NORMAL
argument_list|,
name|FP_SUBNORMAL
argument_list|,
name|FP_ZERO
argument_list|,
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|int
name|fpclassify
parameter_list|(
name|double
name|__x
parameter_list|)
block|{
return|return
name|__builtin_fpclassify
argument_list|(
name|FP_NAN
argument_list|,
name|FP_INFINITE
argument_list|,
name|FP_NORMAL
argument_list|,
name|FP_SUBNORMAL
argument_list|,
name|FP_ZERO
argument_list|,
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|frexp
parameter_list|(
name|float
name|__arg
parameter_list|,
name|int
modifier|*
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|frexpf
argument_list|(
name|__arg
argument_list|,
name|__exp
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// For inscrutable reasons, the CUDA headers define these functions for us on
end_comment

begin_comment
comment|// Windows.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MSC_VER
end_ifndef

begin_function
name|__DEVICE__
name|bool
name|isinf
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|__isinff
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isinf
parameter_list|(
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|__isinf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isfinite
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|__finitef
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// For inscrutable reasons, __finite(), the double-precision version of
end_comment

begin_comment
comment|// __finitef, does not exist when compiling for MacOS.  __isfinited is available
end_comment

begin_comment
comment|// everywhere and is just as good.
end_comment

begin_function
name|__DEVICE__
name|bool
name|isfinite
parameter_list|(
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|__isfinited
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isnan
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|__isnanf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isnan
parameter_list|(
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|__isnan
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|__DEVICE__
name|bool
name|isgreater
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
name|__builtin_isgreater
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isgreater
parameter_list|(
name|double
name|__x
parameter_list|,
name|double
name|__y
parameter_list|)
block|{
return|return
name|__builtin_isgreater
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isgreaterequal
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
name|__builtin_isgreaterequal
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isgreaterequal
parameter_list|(
name|double
name|__x
parameter_list|,
name|double
name|__y
parameter_list|)
block|{
return|return
name|__builtin_isgreaterequal
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isless
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
name|__builtin_isless
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isless
parameter_list|(
name|double
name|__x
parameter_list|,
name|double
name|__y
parameter_list|)
block|{
return|return
name|__builtin_isless
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|islessequal
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
name|__builtin_islessequal
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|islessequal
parameter_list|(
name|double
name|__x
parameter_list|,
name|double
name|__y
parameter_list|)
block|{
return|return
name|__builtin_islessequal
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|islessgreater
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
name|__builtin_islessgreater
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|islessgreater
parameter_list|(
name|double
name|__x
parameter_list|,
name|double
name|__y
parameter_list|)
block|{
return|return
name|__builtin_islessgreater
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isnormal
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
name|__builtin_isnormal
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isnormal
parameter_list|(
name|double
name|__x
parameter_list|)
block|{
return|return
name|__builtin_isnormal
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isunordered
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
name|__builtin_isunordered
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|isunordered
parameter_list|(
name|double
name|__x
parameter_list|,
name|double
name|__y
parameter_list|)
block|{
return|return
name|__builtin_isunordered
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|ldexp
parameter_list|(
name|float
name|__arg
parameter_list|,
name|int
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|ldexpf
argument_list|(
name|__arg
argument_list|,
name|__exp
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|log
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|logf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|log10
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|log10f
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|modf
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
modifier|*
name|__iptr
parameter_list|)
block|{
return|return
operator|::
name|modff
argument_list|(
name|__x
argument_list|,
name|__iptr
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|nexttoward
parameter_list|(
name|float
name|__from
parameter_list|,
name|double
name|__to
parameter_list|)
block|{
return|return
name|__builtin_nexttowardf
argument_list|(
name|__from
argument_list|,
name|__to
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|double
name|nexttoward
parameter_list|(
name|double
name|__from
parameter_list|,
name|double
name|__to
parameter_list|)
block|{
return|return
name|__builtin_nexttoward
argument_list|(
name|__from
argument_list|,
name|__to
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|nexttowardf
parameter_list|(
name|float
name|__from
parameter_list|,
name|double
name|__to
parameter_list|)
block|{
return|return
name|__builtin_nexttowardf
argument_list|(
name|__from
argument_list|,
name|__to
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|pow
parameter_list|(
name|float
name|__base
parameter_list|,
name|float
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|powf
argument_list|(
name|__base
argument_list|,
name|__exp
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|pow
parameter_list|(
name|float
name|__base
parameter_list|,
name|int
name|__iexp
parameter_list|)
block|{
return|return
operator|::
name|powif
argument_list|(
name|__base
argument_list|,
name|__iexp
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|double
name|pow
parameter_list|(
name|double
name|__base
parameter_list|,
name|int
name|__iexp
parameter_list|)
block|{
return|return
operator|::
name|powi
argument_list|(
name|__base
argument_list|,
name|__iexp
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|signbit
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|__signbitf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|bool
name|signbit
parameter_list|(
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|__signbitd
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|sin
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|sinf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|sinh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|sinhf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|sqrt
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|sqrtf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|tan
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tanf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
name|__DEVICE__
name|float
name|tanh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tanhf
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// Now we've defined everything we promised we'd define in
end_comment

begin_comment
comment|// __clang_cuda_math_forward_declares.h.  We need to do two additional things to
end_comment

begin_comment
comment|// fix up our math functions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// 1) Define __device__ overloads for e.g. sin(int).  The CUDA headers define
end_comment

begin_comment
comment|//    only sin(float) and sin(double), which means that e.g. sin(0) is
end_comment

begin_comment
comment|//    ambiguous.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// 2) Pull the __device__ overloads of "foobarf" math functions into namespace
end_comment

begin_comment
comment|//    std.  These are defined in the CUDA headers in the global namespace,
end_comment

begin_comment
comment|//    independent of everything else we've done here.
end_comment

begin_comment
comment|// We can't use std::enable_if, because we want to be pre-C++11 compatible.  But
end_comment

begin_comment
comment|// we go ahead and unconditionally define functions that are only available when
end_comment

begin_comment
comment|// compiling for C++11 to match the behavior of the CUDA headers.
end_comment

begin_expr_stmt
name|template
operator|<
name|bool
name|__B
operator|,
name|class
name|__T
operator|=
name|void
operator|>
expr|struct
name|__clang_cuda_enable_if
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|__T
operator|>
expr|struct
name|__clang_cuda_enable_if
operator|<
name|true
operator|,
name|__T
operator|>
block|{
typedef|typedef
name|__T
name|type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Defines an overload of __fn that accepts one integral argument, calls
end_comment

begin_comment
comment|// __fn((double)x), and returns __retty.
end_comment

begin_define
define|#
directive|define
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
parameter_list|(
name|__retty
parameter_list|,
name|__fn
parameter_list|)
define|\
value|template<typename __T>                                                      \   __DEVICE__                                                                   \       typename __clang_cuda_enable_if<std::numeric_limits<__T>::is_integer,    \                                       __retty>::type                           \       __fn(__T __x) {                                                          \     return ::__fn((double)__x);                                                \   }
end_define

begin_comment
comment|// Defines an overload of __fn that accepts one two arithmetic arguments, calls
end_comment

begin_comment
comment|// __fn((double)x, (double)y), and returns a double.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Note this is different from OVERLOAD_1, which generates an overload that
end_comment

begin_comment
comment|// accepts only *integral* arguments.
end_comment

begin_define
define|#
directive|define
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
parameter_list|(
name|__retty
parameter_list|,
name|__fn
parameter_list|)
define|\
value|template<typename __T1, typename __T2>                                      \   __DEVICE__ typename __clang_cuda_enable_if<                                  \       std::numeric_limits<__T1>::is_specialized&&                             \           std::numeric_limits<__T2>::is_specialized,                           \       __retty>::type                                                           \   __fn(__T1 __x, __T2 __y) {                                                   \     return __fn((double)__x, (double)__y);                                     \   }
end_define

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|acos
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|acosh
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|asin
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|asinh
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|atan
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|atan2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|atanh
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|cbrt
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|ceil
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|copysign
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|cos
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|cosh
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|erf
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|erfc
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|exp
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|exp2
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|expm1
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|fabs
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|fdim
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|floor
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|fmax
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|fmin
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|fmod
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|int
argument_list|,
argument|fpclassify
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|hypot
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|int
argument_list|,
argument|ilogb
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|bool
argument_list|,
argument|isfinite
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|bool
argument_list|,
name|isgreater
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|bool
argument_list|,
name|isgreaterequal
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
name|bool
argument_list|,
name|isinf
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|bool
argument_list|,
name|isless
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|bool
argument_list|,
name|islessequal
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|bool
argument_list|,
name|islessgreater
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
name|bool
argument_list|,
name|isnan
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|bool
argument_list|,
argument|isnormal
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|bool
argument_list|,
name|isunordered
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|lgamma
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|log
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|log10
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|log1p
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|log2
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|logb
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|long long
argument_list|,
argument|llrint
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|long long
argument_list|,
argument|llround
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|long
argument_list|,
argument|lrint
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|long
argument_list|,
argument|lround
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
name|double
argument_list|,
name|nearbyint
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|nextafter
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|pow
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
argument_list|(
name|double
argument_list|,
name|remainder
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
name|double
argument_list|,
name|rint
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
name|double
argument_list|,
name|round
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|bool
argument_list|,
argument|signbit
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|sin
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|sinh
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|sqrt
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|tan
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|tanh
argument_list|)
end_macro

begin_macro
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
argument|double
argument_list|,
argument|tgamma
argument_list|)
end_macro

begin_expr_stmt
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
argument_list|(
name|double
argument_list|,
name|trunc
argument_list|)
expr_stmt|;
end_expr_stmt

begin_undef
undef|#
directive|undef
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_1
end_undef

begin_undef
undef|#
directive|undef
name|__CUDA_CLANG_FN_INTEGER_OVERLOAD_2
end_undef

begin_comment
comment|// Overloads for functions that don't match the patterns expected by
end_comment

begin_comment
comment|// __CUDA_CLANG_FN_INTEGER_OVERLOAD_{1,2}.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|__T1
operator|,
name|typename
name|__T2
operator|,
name|typename
name|__T3
operator|>
name|__DEVICE__
name|typename
name|__clang_cuda_enable_if
operator|<
name|std
operator|::
name|numeric_limits
operator|<
name|__T1
operator|>
operator|::
name|is_specialized
operator|&&
name|std
operator|::
name|numeric_limits
operator|<
name|__T2
operator|>
operator|::
name|is_specialized
operator|&&
name|std
operator|::
name|numeric_limits
operator|<
name|__T3
operator|>
operator|::
name|is_specialized
operator|,
name|double
operator|>
operator|::
name|type
name|fma
argument_list|(
argument|__T1 __x
argument_list|,
argument|__T2 __y
argument_list|,
argument|__T3 __z
argument_list|)
block|{
return|return
name|std
operator|::
name|fma
argument_list|(
operator|(
name|double
operator|)
name|__x
argument_list|,
operator|(
name|double
operator|)
name|__y
argument_list|,
operator|(
name|double
operator|)
name|__z
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|__T
operator|>
name|__DEVICE__
name|typename
name|__clang_cuda_enable_if
operator|<
name|std
operator|::
name|numeric_limits
operator|<
name|__T
operator|>
operator|::
name|is_integer
operator|,
name|double
operator|>
operator|::
name|type
name|frexp
argument_list|(
argument|__T __x
argument_list|,
argument|int *__exp
argument_list|)
block|{
return|return
name|std
operator|::
name|frexp
argument_list|(
operator|(
name|double
operator|)
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|__T
operator|>
name|__DEVICE__
name|typename
name|__clang_cuda_enable_if
operator|<
name|std
operator|::
name|numeric_limits
operator|<
name|__T
operator|>
operator|::
name|is_integer
operator|,
name|double
operator|>
operator|::
name|type
name|ldexp
argument_list|(
argument|__T __x
argument_list|,
argument|int __exp
argument_list|)
block|{
return|return
name|std
operator|::
name|ldexp
argument_list|(
operator|(
name|double
operator|)
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|__T
operator|>
name|__DEVICE__
name|typename
name|__clang_cuda_enable_if
operator|<
name|std
operator|::
name|numeric_limits
operator|<
name|__T
operator|>
operator|::
name|is_integer
operator|,
name|double
operator|>
operator|::
name|type
name|nexttoward
argument_list|(
argument|__T __from
argument_list|,
argument|double __to
argument_list|)
block|{
return|return
name|std
operator|::
name|nexttoward
argument_list|(
operator|(
name|double
operator|)
name|__from
argument_list|,
name|__to
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|__T1
operator|,
name|typename
name|__T2
operator|>
name|__DEVICE__
name|typename
name|__clang_cuda_enable_if
operator|<
name|std
operator|::
name|numeric_limits
operator|<
name|__T1
operator|>
operator|::
name|is_specialized
operator|&&
name|std
operator|::
name|numeric_limits
operator|<
name|__T2
operator|>
operator|::
name|is_specialized
operator|,
name|double
operator|>
operator|::
name|type
name|remquo
argument_list|(
argument|__T1 __x
argument_list|,
argument|__T2 __y
argument_list|,
argument|int *__quo
argument_list|)
block|{
return|return
name|std
operator|::
name|remquo
argument_list|(
operator|(
name|double
operator|)
name|__x
argument_list|,
operator|(
name|double
operator|)
name|__y
argument_list|,
name|__quo
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|__T
operator|>
name|__DEVICE__
name|typename
name|__clang_cuda_enable_if
operator|<
name|std
operator|::
name|numeric_limits
operator|<
name|__T
operator|>
operator|::
name|is_integer
operator|,
name|double
operator|>
operator|::
name|type
name|scalbln
argument_list|(
argument|__T __x
argument_list|,
argument|long __exp
argument_list|)
block|{
return|return
name|std
operator|::
name|scalbln
argument_list|(
operator|(
name|double
operator|)
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|__T
operator|>
name|__DEVICE__
name|typename
name|__clang_cuda_enable_if
operator|<
name|std
operator|::
name|numeric_limits
operator|<
name|__T
operator|>
operator|::
name|is_integer
operator|,
name|double
operator|>
operator|::
name|type
name|scalbn
argument_list|(
argument|__T __x
argument_list|,
argument|int __exp
argument_list|)
block|{
return|return
name|std
operator|::
name|scalbn
argument_list|(
operator|(
name|double
operator|)
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// We need to define these overloads in exactly the namespace our standard
end_comment

begin_comment
comment|// library uses (including the right inline namespace), otherwise they won't be
end_comment

begin_comment
comment|// picked up by other functions in the standard library (e.g. functions in
end_comment

begin_comment
comment|//<complex>).  Thus the ugliness below.
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_LIBCPP_BEGIN_NAMESPACE_STD
end_ifdef

begin_decl_stmt
name|_LIBCPP_BEGIN_NAMESPACE_STD
else|#
directive|else
name|namespace
name|std
block|{
ifdef|#
directive|ifdef
name|_GLIBCXX_BEGIN_NAMESPACE_VERSION
name|_GLIBCXX_BEGIN_NAMESPACE_VERSION
endif|#
directive|endif
endif|#
directive|endif
comment|// Pull the new overloads we defined above into namespace std.
name|using
operator|::
name|acos
expr_stmt|;
name|using
operator|::
name|acosh
expr_stmt|;
name|using
operator|::
name|asin
expr_stmt|;
name|using
operator|::
name|asinh
expr_stmt|;
name|using
operator|::
name|atan
expr_stmt|;
name|using
operator|::
name|atan2
expr_stmt|;
name|using
operator|::
name|atanh
expr_stmt|;
name|using
operator|::
name|cbrt
expr_stmt|;
name|using
operator|::
name|ceil
expr_stmt|;
name|using
operator|::
name|copysign
expr_stmt|;
name|using
operator|::
name|cos
expr_stmt|;
name|using
operator|::
name|cosh
expr_stmt|;
name|using
operator|::
name|erf
expr_stmt|;
name|using
operator|::
name|erfc
expr_stmt|;
name|using
operator|::
name|exp
expr_stmt|;
name|using
operator|::
name|exp2
expr_stmt|;
name|using
operator|::
name|expm1
expr_stmt|;
name|using
operator|::
name|fabs
expr_stmt|;
name|using
operator|::
name|fdim
expr_stmt|;
name|using
operator|::
name|floor
expr_stmt|;
name|using
operator|::
name|fma
expr_stmt|;
name|using
operator|::
name|fmax
expr_stmt|;
name|using
operator|::
name|fmin
expr_stmt|;
name|using
operator|::
name|fmod
expr_stmt|;
name|using
operator|::
name|fpclassify
expr_stmt|;
name|using
operator|::
name|frexp
expr_stmt|;
name|using
operator|::
name|hypot
expr_stmt|;
name|using
operator|::
name|ilogb
expr_stmt|;
name|using
operator|::
name|isfinite
expr_stmt|;
name|using
operator|::
name|isgreater
expr_stmt|;
name|using
operator|::
name|isgreaterequal
expr_stmt|;
name|using
operator|::
name|isless
expr_stmt|;
name|using
operator|::
name|islessequal
expr_stmt|;
name|using
operator|::
name|islessgreater
expr_stmt|;
name|using
operator|::
name|isnormal
expr_stmt|;
name|using
operator|::
name|isunordered
expr_stmt|;
name|using
operator|::
name|ldexp
expr_stmt|;
name|using
operator|::
name|lgamma
expr_stmt|;
name|using
operator|::
name|llrint
expr_stmt|;
name|using
operator|::
name|llround
expr_stmt|;
name|using
operator|::
name|log
expr_stmt|;
name|using
operator|::
name|log10
expr_stmt|;
name|using
operator|::
name|log1p
expr_stmt|;
name|using
operator|::
name|log2
expr_stmt|;
name|using
operator|::
name|logb
expr_stmt|;
name|using
operator|::
name|lrint
expr_stmt|;
name|using
operator|::
name|lround
expr_stmt|;
name|using
operator|::
name|nearbyint
expr_stmt|;
name|using
operator|::
name|nextafter
expr_stmt|;
name|using
operator|::
name|nexttoward
expr_stmt|;
name|using
operator|::
name|pow
expr_stmt|;
name|using
operator|::
name|remainder
expr_stmt|;
name|using
operator|::
name|remquo
expr_stmt|;
name|using
operator|::
name|rint
expr_stmt|;
name|using
operator|::
name|round
expr_stmt|;
name|using
operator|::
name|scalbln
expr_stmt|;
name|using
operator|::
name|scalbn
expr_stmt|;
name|using
operator|::
name|signbit
expr_stmt|;
name|using
operator|::
name|sin
expr_stmt|;
name|using
operator|::
name|sinh
expr_stmt|;
name|using
operator|::
name|sqrt
expr_stmt|;
name|using
operator|::
name|tan
expr_stmt|;
name|using
operator|::
name|tanh
expr_stmt|;
name|using
operator|::
name|tgamma
expr_stmt|;
name|using
operator|::
name|trunc
expr_stmt|;
comment|// Well this is fun: We need to pull these symbols in for libc++, but we can't
comment|// pull them in with libstdc++, because its ::isinf and ::isnan are different
comment|// than its std::isinf and std::isnan.
ifndef|#
directive|ifndef
name|__GLIBCXX__
name|using
operator|::
name|isinf
expr_stmt|;
name|using
operator|::
name|isnan
expr_stmt|;
endif|#
directive|endif
comment|// Finally, pull the "foobarf" functions that CUDA defines in its headers into
comment|// namespace std.
name|using
operator|::
name|acosf
expr_stmt|;
name|using
operator|::
name|acoshf
expr_stmt|;
name|using
operator|::
name|asinf
expr_stmt|;
name|using
operator|::
name|asinhf
expr_stmt|;
name|using
operator|::
name|atan2f
expr_stmt|;
name|using
operator|::
name|atanf
expr_stmt|;
name|using
operator|::
name|atanhf
expr_stmt|;
name|using
operator|::
name|cbrtf
expr_stmt|;
name|using
operator|::
name|ceilf
expr_stmt|;
name|using
operator|::
name|copysignf
expr_stmt|;
name|using
operator|::
name|cosf
expr_stmt|;
name|using
operator|::
name|coshf
expr_stmt|;
name|using
operator|::
name|erfcf
expr_stmt|;
name|using
operator|::
name|erff
expr_stmt|;
name|using
operator|::
name|exp2f
expr_stmt|;
name|using
operator|::
name|expf
expr_stmt|;
name|using
operator|::
name|expm1f
expr_stmt|;
name|using
operator|::
name|fabsf
expr_stmt|;
name|using
operator|::
name|fdimf
expr_stmt|;
name|using
operator|::
name|floorf
expr_stmt|;
name|using
operator|::
name|fmaf
expr_stmt|;
name|using
operator|::
name|fmaxf
expr_stmt|;
name|using
operator|::
name|fminf
expr_stmt|;
name|using
operator|::
name|fmodf
expr_stmt|;
name|using
operator|::
name|frexpf
expr_stmt|;
name|using
operator|::
name|hypotf
expr_stmt|;
name|using
operator|::
name|ilogbf
expr_stmt|;
name|using
operator|::
name|ldexpf
expr_stmt|;
name|using
operator|::
name|lgammaf
expr_stmt|;
name|using
operator|::
name|llrintf
expr_stmt|;
name|using
operator|::
name|llroundf
expr_stmt|;
name|using
operator|::
name|log10f
expr_stmt|;
name|using
operator|::
name|log1pf
expr_stmt|;
name|using
operator|::
name|log2f
expr_stmt|;
name|using
operator|::
name|logbf
expr_stmt|;
name|using
operator|::
name|logf
expr_stmt|;
name|using
operator|::
name|lrintf
expr_stmt|;
name|using
operator|::
name|lroundf
expr_stmt|;
name|using
operator|::
name|modff
expr_stmt|;
name|using
operator|::
name|nearbyintf
expr_stmt|;
name|using
operator|::
name|nextafterf
expr_stmt|;
name|using
operator|::
name|nexttowardf
expr_stmt|;
name|using
operator|::
name|nexttowardf
expr_stmt|;
name|using
operator|::
name|powf
expr_stmt|;
name|using
operator|::
name|remainderf
expr_stmt|;
name|using
operator|::
name|remquof
expr_stmt|;
name|using
operator|::
name|rintf
expr_stmt|;
name|using
operator|::
name|roundf
expr_stmt|;
name|using
operator|::
name|scalblnf
expr_stmt|;
name|using
operator|::
name|scalbnf
expr_stmt|;
name|using
operator|::
name|sinf
expr_stmt|;
name|using
operator|::
name|sinhf
expr_stmt|;
name|using
operator|::
name|sqrtf
expr_stmt|;
name|using
operator|::
name|tanf
expr_stmt|;
name|using
operator|::
name|tanhf
expr_stmt|;
name|using
operator|::
name|tgammaf
expr_stmt|;
name|using
operator|::
name|truncf
expr_stmt|;
ifdef|#
directive|ifdef
name|_LIBCPP_END_NAMESPACE_STD
name|_LIBCPP_END_NAMESPACE_STD
else|#
directive|else
ifdef|#
directive|ifdef
name|_GLIBCXX_BEGIN_NAMESPACE_VERSION
name|_GLIBCXX_END_NAMESPACE_VERSION
endif|#
directive|endif
block|}
end_decl_stmt

begin_comment
comment|// namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_undef
undef|#
directive|undef
name|__DEVICE__
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

