begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===---- stdatomic.h - Standard header for atomic types and operations -----===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CLANG_STDATOMIC_H
end_ifndef

begin_define
define|#
directive|define
name|__CLANG_STDATOMIC_H
end_define

begin_comment
comment|/* If we're hosted, fall back to the system's stdatomic.h. FreeBSD, for  * example, already has a Clang-compatible stdatomic.h header.  */
end_comment

begin_if
if|#
directive|if
name|__STDC_HOSTED__
operator|&&
name|__has_include_next
argument_list|(
operator|<
name|stdatomic
operator|.
name|h
operator|>
argument_list|)
end_if

begin_empty
empty|# include_next<stdatomic.h>
end_empty

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* 7.17.1 Introduction */
define|#
directive|define
name|ATOMIC_BOOL_LOCK_FREE
value|__GCC_ATOMIC_BOOL_LOCK_FREE
define|#
directive|define
name|ATOMIC_CHAR_LOCK_FREE
value|__GCC_ATOMIC_CHAR_LOCK_FREE
define|#
directive|define
name|ATOMIC_CHAR16_T_LOCK_FREE
value|__GCC_ATOMIC_CHAR16_T_LOCK_FREE
define|#
directive|define
name|ATOMIC_CHAR32_T_LOCK_FREE
value|__GCC_ATOMIC_CHAR32_T_LOCK_FREE
define|#
directive|define
name|ATOMIC_WCHAR_T_LOCK_FREE
value|__GCC_ATOMIC_WCHAR_T_LOCK_FREE
define|#
directive|define
name|ATOMIC_SHORT_LOCK_FREE
value|__GCC_ATOMIC_SHORT_LOCK_FREE
define|#
directive|define
name|ATOMIC_INT_LOCK_FREE
value|__GCC_ATOMIC_INT_LOCK_FREE
define|#
directive|define
name|ATOMIC_LONG_LOCK_FREE
value|__GCC_ATOMIC_LONG_LOCK_FREE
define|#
directive|define
name|ATOMIC_LLONG_LOCK_FREE
value|__GCC_ATOMIC_LLONG_LOCK_FREE
define|#
directive|define
name|ATOMIC_POINTER_LOCK_FREE
value|__GCC_ATOMIC_POINTER_LOCK_FREE
comment|/* 7.17.2 Initialization */
define|#
directive|define
name|ATOMIC_VAR_INIT
parameter_list|(
name|value
parameter_list|)
value|(value)
define|#
directive|define
name|atomic_init
value|__c11_atomic_init
comment|/* 7.17.3 Order and consistency */
typedef|typedef
enum|enum
name|memory_order
block|{
name|memory_order_relaxed
init|=
name|__ATOMIC_RELAXED
block|,
name|memory_order_consume
init|=
name|__ATOMIC_CONSUME
block|,
name|memory_order_acquire
init|=
name|__ATOMIC_ACQUIRE
block|,
name|memory_order_release
init|=
name|__ATOMIC_RELEASE
block|,
name|memory_order_acq_rel
init|=
name|__ATOMIC_ACQ_REL
block|,
name|memory_order_seq_cst
init|=
name|__ATOMIC_SEQ_CST
block|}
name|memory_order
typedef|;
define|#
directive|define
name|kill_dependency
parameter_list|(
name|y
parameter_list|)
value|(y)
comment|/* 7.17.4 Fences */
comment|/* These should be provided by the libc implementation. */
name|void
name|atomic_thread_fence
parameter_list|(
name|memory_order
parameter_list|)
function_decl|;
name|void
name|atomic_signal_fence
parameter_list|(
name|memory_order
parameter_list|)
function_decl|;
define|#
directive|define
name|atomic_thread_fence
parameter_list|(
name|order
parameter_list|)
value|__c11_atomic_thread_fence(order)
define|#
directive|define
name|atomic_signal_fence
parameter_list|(
name|order
parameter_list|)
value|__c11_atomic_signal_fence(order)
comment|/* 7.17.5 Lock-free property */
define|#
directive|define
name|atomic_is_lock_free
parameter_list|(
name|obj
parameter_list|)
value|__c11_atomic_is_lock_free(sizeof(*(obj)))
comment|/* 7.17.6 Atomic integer types */
ifdef|#
directive|ifdef
name|__cplusplus
typedef|typedef
atomic|_Atomic
argument_list|(
name|bool
argument_list|)
name|atomic_bool
typedef|;
else|#
directive|else
typedef|typedef
atomic|_Atomic
argument_list|(
name|_Bool
argument_list|)
name|atomic_bool
typedef|;
endif|#
directive|endif
typedef|typedef
atomic|_Atomic
argument_list|(
name|char
argument_list|)
name|atomic_char
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|signed
name|char
argument_list|)
name|atomic_schar
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|unsigned
name|char
argument_list|)
name|atomic_uchar
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|short
argument_list|)
name|atomic_short
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|unsigned
name|short
argument_list|)
name|atomic_ushort
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int
argument_list|)
name|atomic_int
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|unsigned
name|int
argument_list|)
name|atomic_uint
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|long
argument_list|)
name|atomic_long
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|unsigned
name|long
argument_list|)
name|atomic_ulong
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|long
name|long
argument_list|)
name|atomic_llong
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|unsigned
name|long
name|long
argument_list|)
name|atomic_ullong
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_least16_t
argument_list|)
name|atomic_char16_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_least32_t
argument_list|)
name|atomic_char32_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|wchar_t
argument_list|)
name|atomic_wchar_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int_least8_t
argument_list|)
name|atomic_int_least8_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_least8_t
argument_list|)
name|atomic_uint_least8_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int_least16_t
argument_list|)
name|atomic_int_least16_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_least16_t
argument_list|)
name|atomic_uint_least16_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int_least32_t
argument_list|)
name|atomic_int_least32_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_least32_t
argument_list|)
name|atomic_uint_least32_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int_least64_t
argument_list|)
name|atomic_int_least64_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_least64_t
argument_list|)
name|atomic_uint_least64_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int_fast8_t
argument_list|)
name|atomic_int_fast8_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_fast8_t
argument_list|)
name|atomic_uint_fast8_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int_fast16_t
argument_list|)
name|atomic_int_fast16_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_fast16_t
argument_list|)
name|atomic_uint_fast16_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int_fast32_t
argument_list|)
name|atomic_int_fast32_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_fast32_t
argument_list|)
name|atomic_uint_fast32_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|int_fast64_t
argument_list|)
name|atomic_int_fast64_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uint_fast64_t
argument_list|)
name|atomic_uint_fast64_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|intptr_t
argument_list|)
name|atomic_intptr_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uintptr_t
argument_list|)
name|atomic_uintptr_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|size_t
argument_list|)
name|atomic_size_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|ptrdiff_t
argument_list|)
name|atomic_ptrdiff_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|intmax_t
argument_list|)
name|atomic_intmax_t
typedef|;
typedef|typedef
atomic|_Atomic
argument_list|(
name|uintmax_t
argument_list|)
name|atomic_uintmax_t
typedef|;
comment|/* 7.17.7 Operations on atomic types */
define|#
directive|define
name|atomic_store
parameter_list|(
name|object
parameter_list|,
name|desired
parameter_list|)
value|__c11_atomic_store(object, desired, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_store_explicit
value|__c11_atomic_store
define|#
directive|define
name|atomic_load
parameter_list|(
name|object
parameter_list|)
value|__c11_atomic_load(object, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_load_explicit
value|__c11_atomic_load
define|#
directive|define
name|atomic_exchange
parameter_list|(
name|object
parameter_list|,
name|desired
parameter_list|)
value|__c11_atomic_exchange(object, desired, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_exchange_explicit
value|__c11_atomic_exchange
define|#
directive|define
name|atomic_compare_exchange_strong
parameter_list|(
name|object
parameter_list|,
name|expected
parameter_list|,
name|desired
parameter_list|)
value|__c11_atomic_compare_exchange_strong(object, expected, desired, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_compare_exchange_strong_explicit
value|__c11_atomic_compare_exchange_strong
define|#
directive|define
name|atomic_compare_exchange_weak
parameter_list|(
name|object
parameter_list|,
name|expected
parameter_list|,
name|desired
parameter_list|)
value|__c11_atomic_compare_exchange_weak(object, expected, desired, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_compare_exchange_weak_explicit
value|__c11_atomic_compare_exchange_weak
define|#
directive|define
name|atomic_fetch_add
parameter_list|(
name|object
parameter_list|,
name|operand
parameter_list|)
value|__c11_atomic_fetch_add(object, operand, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_fetch_add_explicit
value|__c11_atomic_fetch_add
define|#
directive|define
name|atomic_fetch_sub
parameter_list|(
name|object
parameter_list|,
name|operand
parameter_list|)
value|__c11_atomic_fetch_sub(object, operand, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_fetch_sub_explicit
value|__c11_atomic_fetch_sub
define|#
directive|define
name|atomic_fetch_or
parameter_list|(
name|object
parameter_list|,
name|operand
parameter_list|)
value|__c11_atomic_fetch_or(object, operand, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_fetch_or_explicit
value|__c11_atomic_fetch_or
define|#
directive|define
name|atomic_fetch_xor
parameter_list|(
name|object
parameter_list|,
name|operand
parameter_list|)
value|__c11_atomic_fetch_xor(object, operand, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_fetch_xor_explicit
value|__c11_atomic_fetch_xor
define|#
directive|define
name|atomic_fetch_and
parameter_list|(
name|object
parameter_list|,
name|operand
parameter_list|)
value|__c11_atomic_fetch_and(object, operand, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_fetch_and_explicit
value|__c11_atomic_fetch_and
comment|/* 7.17.8 Atomic flag type and operations */
typedef|typedef
struct|struct
name|atomic_flag
block|{
name|atomic_bool
name|_Value
decl_stmt|;
block|}
name|atomic_flag
typedef|;
define|#
directive|define
name|ATOMIC_FLAG_INIT
value|{ 0 }
comment|/* These should be provided by the libc implementation. */
ifdef|#
directive|ifdef
name|__cplusplus
name|bool
name|atomic_flag_test_and_set
parameter_list|(
specifier|volatile
name|atomic_flag
modifier|*
parameter_list|)
function_decl|;
name|bool
name|atomic_flag_test_and_set_explicit
parameter_list|(
specifier|volatile
name|atomic_flag
modifier|*
parameter_list|,
name|memory_order
parameter_list|)
function_decl|;
else|#
directive|else
name|_Bool
name|atomic_flag_test_and_set
parameter_list|(
specifier|volatile
name|atomic_flag
modifier|*
parameter_list|)
function_decl|;
name|_Bool
name|atomic_flag_test_and_set_explicit
parameter_list|(
specifier|volatile
name|atomic_flag
modifier|*
parameter_list|,
name|memory_order
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|atomic_flag_clear
parameter_list|(
specifier|volatile
name|atomic_flag
modifier|*
parameter_list|)
function_decl|;
name|void
name|atomic_flag_clear_explicit
parameter_list|(
specifier|volatile
name|atomic_flag
modifier|*
parameter_list|,
name|memory_order
parameter_list|)
function_decl|;
define|#
directive|define
name|atomic_flag_test_and_set
parameter_list|(
name|object
parameter_list|)
value|__c11_atomic_exchange(&(object)->_Value, 1, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_flag_test_and_set_explicit
parameter_list|(
name|object
parameter_list|,
name|order
parameter_list|)
value|__c11_atomic_exchange(&(object)->_Value, 1, order)
define|#
directive|define
name|atomic_flag_clear
parameter_list|(
name|object
parameter_list|)
value|__c11_atomic_store(&(object)->_Value, 0, __ATOMIC_SEQ_CST)
define|#
directive|define
name|atomic_flag_clear_explicit
parameter_list|(
name|object
parameter_list|,
name|order
parameter_list|)
value|__c11_atomic_store(&(object)->_Value, 0, order)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STDC_HOSTED__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __CLANG_STDATOMIC_H */
end_comment

end_unit

