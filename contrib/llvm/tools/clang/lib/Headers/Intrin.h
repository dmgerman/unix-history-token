begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ===-------- Intrin.h ---------------------------------------------------===  *  * Permission is hereby granted, free of charge, to any person obtaining a copy  * of this software and associated documentation files (the "Software"), to deal  * in the Software without restriction, including without limitation the rights  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell  * copies of the Software, and to permit persons to whom the Software is  * furnished to do so, subject to the following conditions:  *  * The above copyright notice and this permission notice shall be included in  * all copies or substantial portions of the Software.  *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  * THE SOFTWARE.  *  *===-----------------------------------------------------------------------===  */
end_comment

begin_comment
comment|/* Only include this if we're compiling for the windows platform. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MSC_VER
end_ifndef

begin_empty
empty|#include_next<Intrin.h>
end_empty

begin_else
else|#
directive|else
end_else

begin_ifndef
ifndef|#
directive|ifndef
name|__INTRIN_H
end_ifndef

begin_define
define|#
directive|define
name|__INTRIN_H
end_define

begin_comment
comment|/* First include the standard intrinsics. */
end_comment

begin_include
include|#
directive|include
file|<x86intrin.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* And the random ones that aren't in those files. */
name|__m64
name|_m_from_float
parameter_list|(
name|float
parameter_list|)
function_decl|;
name|__m64
name|_m_from_int
parameter_list|(
name|int
name|_l
parameter_list|)
function_decl|;
name|void
name|_m_prefetch
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|float
name|_m_to_float
parameter_list|(
name|__m64
parameter_list|)
function_decl|;
name|int
name|_m_to_int
parameter_list|(
name|__m64
name|_M
parameter_list|)
function_decl|;
comment|/* Other assorted instruction intrinsics. */
name|void
name|__addfsbyte
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|char
parameter_list|)
function_decl|;
name|void
name|__addfsdword
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__addfsword
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|short
parameter_list|)
function_decl|;
name|void
name|__code_seg
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|__cpuid
parameter_list|(
name|int
index|[
literal|4
index|]
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|__cpuidex
parameter_list|(
name|int
index|[
literal|4
index|]
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|__debugbreak
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|__int64
name|__emul
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__emulu
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|__fastfail
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|__getcallerseflags
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__halt
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|char
name|__inbyte
parameter_list|(
name|unsigned
name|short
parameter_list|)
function_decl|;
name|void
name|__inbytestring
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__incfsbyte
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__incfsdword
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__incfsword
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__indword
parameter_list|(
name|unsigned
name|short
parameter_list|)
function_decl|;
name|void
name|__indwordstring
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__int2c
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__invlpg
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|short
name|__inword
parameter_list|(
name|unsigned
name|short
parameter_list|)
function_decl|;
name|void
name|__inwordstring
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|short
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__lidt
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__ll_lshift
parameter_list|(
name|unsigned
name|__int64
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|__int64
name|__ll_rshift
parameter_list|(
name|__int64
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|__llwpcb
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|char
name|__lwpins32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__lwpval32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|__lzcnt
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|short
name|__lzcnt16
parameter_list|(
name|unsigned
name|short
parameter_list|)
function_decl|;
name|void
name|__movsb
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
specifier|const
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|__movsd
parameter_list|(
name|unsigned
name|long
modifier|*
parameter_list|,
name|unsigned
name|long
specifier|const
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|__movsw
parameter_list|(
name|unsigned
name|short
modifier|*
parameter_list|,
name|unsigned
name|short
specifier|const
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|__nop
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__nvreg_restore_fence
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__nvreg_save_fence
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__outbyte
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|char
parameter_list|)
function_decl|;
name|void
name|__outbytestring
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__outdword
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__outdwordstring
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|long
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__outword
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|short
parameter_list|)
function_decl|;
name|void
name|__outwordstring
parameter_list|(
name|unsigned
name|short
parameter_list|,
name|unsigned
name|short
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|int
name|__popcnt
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|short
name|__popcnt16
parameter_list|(
name|unsigned
name|short
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__rdtsc
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__rdtscp
parameter_list|(
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__readcr0
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__readcr2
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__readcr3
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__readcr5
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__readcr8
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|int
name|__readdr
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|__readeflags
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|char
name|__readfsbyte
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__readfsdword
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__readfsqword
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|short
name|__readfsword
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__readmsr
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__readpmc
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__segmentlimit
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__sidt
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|__slwpcb
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__stosb
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
name|char
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|__stosd
parameter_list|(
name|unsigned
name|long
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|__stosw
parameter_list|(
name|unsigned
name|short
modifier|*
parameter_list|,
name|unsigned
name|short
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|__svm_clgi
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__svm_invlpga
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|__svm_skinit
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|__svm_stgi
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__svm_vmload
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|void
name|__svm_vmrun
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|void
name|__svm_vmsave
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|void
name|__ud2
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__ull_rshift
parameter_list|(
name|unsigned
name|__int64
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|__vmx_off
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__vmx_vmptrst
parameter_list|(
name|unsigned
name|__int64
modifier|*
parameter_list|)
function_decl|;
name|void
name|__wbinvd
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__writecr0
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__writecr3
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__writecr4
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__writecr8
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__writedr
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__writeeflags
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__writefsbyte
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|char
parameter_list|)
function_decl|;
name|void
name|__writefsdword
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__writefsqword
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__writefsword
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|short
parameter_list|)
function_decl|;
name|void
name|__writemsr
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|void
modifier|*
name|_AddressOfReturnAddress
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_andn_u32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_bextr_u32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_bextr_u32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_bextri_u32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_BitScanForward
parameter_list|(
name|unsigned
name|long
modifier|*
name|_Index
parameter_list|,
name|unsigned
name|long
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_BitScanReverse
parameter_list|(
name|unsigned
name|long
modifier|*
name|_Index
parameter_list|,
name|unsigned
name|long
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_bittest
parameter_list|(
name|long
specifier|const
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_bittestandcomplement
parameter_list|(
name|long
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_bittestandreset
parameter_list|(
name|long
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_bittestandset
parameter_list|(
name|long
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blcfill_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blci_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blcic_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blcmsk_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blcs_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blsfill_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blsi_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blsic_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blsmsk_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blsmsk_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blsr_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_blsr_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__cdecl
name|_byteswap_uint64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|long
name|__cdecl
name|_byteswap_ulong
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|short
name|__cdecl
name|_byteswap_ushort
parameter_list|(
name|unsigned
name|short
parameter_list|)
function_decl|;
name|unsigned
name|_bzhi_u32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_disable
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_enable
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_fxrstor
parameter_list|(
name|void
specifier|const
modifier|*
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_fxsave
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|long
name|_InterlockedAddLargeStatistic
parameter_list|(
name|__int64
specifier|volatile
modifier|*
name|_Addend
parameter_list|,
name|long
name|_Value
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|long
name|_InterlockedAnd
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|long
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|short
name|_InterlockedAnd16
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|short
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|char
name|_InterlockedAnd8
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|char
name|_Mask
parameter_list|)
function_decl|;
name|unsigned
name|char
name|_interlockedbittestandreset
parameter_list|(
name|long
specifier|volatile
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|unsigned
name|char
name|_interlockedbittestandset
parameter_list|(
name|long
specifier|volatile
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|long
name|__cdecl
name|_InterlockedCompareExchange
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|long
name|_Exchange
parameter_list|,
name|long
name|_Comparand
parameter_list|)
function_decl|;
name|long
name|_InterlockedCompareExchange_HLEAcquire
parameter_list|(
name|long
specifier|volatile
modifier|*
parameter_list|,
name|long
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|long
name|_InterlockedCompareExchange_HLERelease
parameter_list|(
name|long
specifier|volatile
modifier|*
parameter_list|,
name|long
parameter_list|,
name|long
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|short
name|_InterlockedCompareExchange16
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|short
name|_Exchange
parameter_list|,
name|short
name|_Comparand
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|__int64
name|_InterlockedCompareExchange64
parameter_list|(
name|__int64
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|__int64
name|_Exchange
parameter_list|,
name|__int64
name|_Comparand
parameter_list|)
function_decl|;
name|__int64
name|_InterlockedcompareExchange64_HLEAcquire
parameter_list|(
name|__int64
specifier|volatile
modifier|*
parameter_list|,
name|__int64
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
name|__int64
name|_InterlockedCompareExchange64_HLERelease
parameter_list|(
name|__int64
specifier|volatile
modifier|*
parameter_list|,
name|__int64
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|char
name|_InterlockedCompareExchange8
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|char
name|_Exchange
parameter_list|,
name|char
name|_Comparand
parameter_list|)
function_decl|;
name|void
modifier|*
name|_InterlockedCompareExchangePointer_HLEAcquire
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|_InterlockedCompareExchangePointer_HLERelease
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|long
name|__cdecl
name|_InterlockedDecrement
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Addend
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|short
name|_InterlockedDecrement16
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Addend
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|long
name|__cdecl
name|_InterlockedExchange
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Target
parameter_list|,
name|long
name|_Value
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|short
name|_InterlockedExchange16
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Target
parameter_list|,
name|short
name|_Value
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|char
name|_InterlockedExchange8
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Target
parameter_list|,
name|char
name|_Value
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|long
name|__cdecl
name|_InterlockedExchangeAdd
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Addend
parameter_list|,
name|long
name|_Value
parameter_list|)
function_decl|;
name|long
name|_InterlockedExchangeAdd_HLEAcquire
parameter_list|(
name|long
specifier|volatile
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|long
name|_InterlockedExchangeAdd_HLERelease
parameter_list|(
name|long
specifier|volatile
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|char
name|_InterlockedExchangeAdd8
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Addend
parameter_list|,
name|char
name|_Value
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|long
name|__cdecl
name|_InterlockedIncrement
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Addend
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|short
name|_InterlockedIncrement16
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Addend
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|long
name|_InterlockedOr
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|long
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|short
name|_InterlockedOr16
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|short
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|char
name|_InterlockedOr8
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|char
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|long
name|_InterlockedXor
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|long
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|short
name|_InterlockedXor16
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|short
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|char
name|_InterlockedXor8
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|char
name|_Mask
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_invpcid
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|long
name|__cdecl
name|_lrotl
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|long
name|__cdecl
name|_lrotr
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|int
name|_lzcnt_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|void
name|_ReadBarrier
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|void
name|_ReadWriteBarrier
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|void
modifier|*
name|_ReturnAddress
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_rorx_u32
parameter_list|(
name|unsigned
name|int
parameter_list|,
specifier|const
name|unsigned
name|int
parameter_list|)
function_decl|;
name|int
name|__cdecl
name|_rdrand16_step
parameter_list|(
name|unsigned
name|short
modifier|*
parameter_list|)
function_decl|;
name|int
name|__cdecl
name|_rdrand32_step
parameter_list|(
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|int
name|__cdecl
name|_rotl
parameter_list|(
name|unsigned
name|int
name|_Value
parameter_list|,
name|int
name|_Shift
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|short
name|_rotl16
parameter_list|(
name|unsigned
name|short
name|_Value
parameter_list|,
name|unsigned
name|char
name|_Shift
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|__int64
name|__cdecl
name|_rotl64
parameter_list|(
name|unsigned
name|__int64
name|_Value
parameter_list|,
name|int
name|_Shift
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_rotl8
parameter_list|(
name|unsigned
name|char
name|_Value
parameter_list|,
name|unsigned
name|char
name|_Shift
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|int
name|__cdecl
name|_rotr
parameter_list|(
name|unsigned
name|int
name|_Value
parameter_list|,
name|int
name|_Shift
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|short
name|_rotr16
parameter_list|(
name|unsigned
name|short
name|_Value
parameter_list|,
name|unsigned
name|char
name|_Shift
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|__int64
name|__cdecl
name|_rotr64
parameter_list|(
name|unsigned
name|__int64
name|_Value
parameter_list|,
name|int
name|_Shift
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_rotr8
parameter_list|(
name|unsigned
name|char
name|_Value
parameter_list|,
name|unsigned
name|char
name|_Shift
parameter_list|)
function_decl|;
name|int
name|_sarx_i32
parameter_list|(
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
comment|/* FIXME: Need definition for jmp_buf.    int __cdecl _setjmp(jmp_buf); */
name|unsigned
name|int
name|_shlx_u32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_shrx_u32
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|_Store_HLERelease
parameter_list|(
name|long
specifier|volatile
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
name|void
name|_Store64_HLERelease
parameter_list|(
name|__int64
specifier|volatile
modifier|*
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
name|void
name|_StorePointer_HLERelease
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_t1mskc_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_tzcnt_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_tzcnt_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|int
name|_tzmsk_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|void
name|_WriteBarrier
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|_xabort
parameter_list|(
specifier|const
name|unsigned
name|int
name|imm
parameter_list|)
function_decl|;
name|unsigned
name|__int32
name|xbegin
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|_xend
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__cdecl
name|_xgetbv
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_xrstor
parameter_list|(
name|void
specifier|const
modifier|*
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_xsave
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_xsaveopt
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_xsetbv
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|char
name|_xtest
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* These additional intrinsics are turned on in x64/amd64/x86_64 mode. */
ifdef|#
directive|ifdef
name|__x86_64__
name|void
name|__addgsbyte
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|char
parameter_list|)
function_decl|;
name|void
name|__addgsdword
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__addgsqword
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__addgsword
parameter_list|(
name|unsigned
name|long
parameter_list|,
name|unsigned
name|short
parameter_list|)
function_decl|;
name|void
name|__faststorefence
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|__incgsbyte
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__incgsdword
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__incgsqword
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|void
name|__incgsword
parameter_list|(
name|unsigned
name|long
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__popcnt64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__shiftleft128
parameter_list|(
name|unsigned
name|__int64
name|_LowPart
parameter_list|,
name|unsigned
name|__int64
name|_HighPart
parameter_list|,
name|unsigned
name|char
name|_Shift
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__shiftright128
parameter_list|(
name|unsigned
name|__int64
name|_LowPart
parameter_list|,
name|unsigned
name|__int64
name|_HighPart
parameter_list|,
name|unsigned
name|char
name|_Shift
parameter_list|)
function_decl|;
name|void
name|__stosq
parameter_list|(
name|unsigned
name|__int64
modifier|*
parameter_list|,
name|unsigned
name|__int64
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_andn_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_bextr_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_bextri_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_BitScanForward64
parameter_list|(
name|unsigned
name|long
modifier|*
name|_Index
parameter_list|,
name|unsigned
name|__int64
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_BitScanReverse64
parameter_list|(
name|unsigned
name|long
modifier|*
name|_Index
parameter_list|,
name|unsigned
name|__int64
name|_Mask
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_bittest64
parameter_list|(
name|__int64
specifier|const
modifier|*
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_bittestandcomplement64
parameter_list|(
name|__int64
modifier|*
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_bittestandreset64
parameter_list|(
name|__int64
modifier|*
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
specifier|static
name|__inline__
name|unsigned
name|char
name|_bittestandset64
parameter_list|(
name|__int64
modifier|*
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blcfill_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blci_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blcic_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blcmsk_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blcs_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blsfill_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blsi_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blsic_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blmsk_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_blsr_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__cdecl
name|_byteswap_uint64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_bzhi_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_fxrstor64
parameter_list|(
name|void
specifier|const
modifier|*
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_fxsave64
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
name|long
name|_InterlockedAnd_np
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|long
name|_Mask
parameter_list|)
function_decl|;
name|short
name|_InterlockedAnd16_np
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|short
name|_Mask
parameter_list|)
function_decl|;
name|__int64
name|_InterlockedAnd64_np
parameter_list|(
name|__int64
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|__int64
name|_Mask
parameter_list|)
function_decl|;
name|char
name|_InterlockedAnd8_np
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|char
name|_Mask
parameter_list|)
function_decl|;
name|unsigned
name|char
name|_interlockedbittestandreset64
parameter_list|(
name|__int64
specifier|volatile
modifier|*
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|char
name|_interlockedbittestandset64
parameter_list|(
name|__int64
specifier|volatile
modifier|*
parameter_list|,
name|__int64
parameter_list|)
function_decl|;
name|long
name|_InterlockedCompareExchange_np
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|long
name|_Exchange
parameter_list|,
name|long
name|_Comparand
parameter_list|)
function_decl|;
name|unsigned
name|char
name|_InterlockedCompareExchange128
parameter_list|(
name|__int64
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|__int64
name|_ExchangeHigh
parameter_list|,
name|__int64
name|_ExchangeLow
parameter_list|,
name|__int64
modifier|*
name|_CompareandResult
parameter_list|)
function_decl|;
name|unsigned
name|char
name|_InterlockedCompareExchange128_np
parameter_list|(
name|__int64
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|__int64
name|_ExchangeHigh
parameter_list|,
name|__int64
name|_ExchangeLow
parameter_list|,
name|__int64
modifier|*
name|_ComparandResult
parameter_list|)
function_decl|;
name|short
name|_InterlockedCompareExchange16_np
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|short
name|_Exchange
parameter_list|,
name|short
name|_Comparand
parameter_list|)
function_decl|;
name|__int64
name|_InterlockedCompareExchange64_np
parameter_list|(
name|__int64
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|__int64
name|_Exchange
parameter_list|,
name|__int64
name|_Comparand
parameter_list|)
function_decl|;
name|void
modifier|*
name|_InterlockedCompareExchangePointer_np
parameter_list|(
name|void
modifier|*
specifier|volatile
modifier|*
name|_Destination
parameter_list|,
name|void
modifier|*
name|_Exchange
parameter_list|,
name|void
modifier|*
name|_Comparand
parameter_list|)
function_decl|;
name|long
name|_InterlockedOr_np
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|long
name|_Mask
parameter_list|)
function_decl|;
name|short
name|_InterlockedOr16_np
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|short
name|_Mask
parameter_list|)
function_decl|;
name|__int64
name|_InterlockedOr64_np
parameter_list|(
name|__int64
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|__int64
name|_Mask
parameter_list|)
function_decl|;
name|char
name|_InterlockedOr8_np
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|char
name|_Mask
parameter_list|)
function_decl|;
name|long
name|_InterlockedXor_np
parameter_list|(
name|long
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|long
name|_Mask
parameter_list|)
function_decl|;
name|short
name|_InterlockedXor16_np
parameter_list|(
name|short
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|short
name|_Mask
parameter_list|)
function_decl|;
name|__int64
name|_InterlockedXor64_np
parameter_list|(
name|__int64
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|__int64
name|_Mask
parameter_list|)
function_decl|;
name|char
name|_InterlockedXor8_np
parameter_list|(
name|char
specifier|volatile
modifier|*
name|_Value
parameter_list|,
name|char
name|_Mask
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_lzcnt_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|__int64
name|_mul128
parameter_list|(
name|__int64
name|_Multiplier
parameter_list|,
name|__int64
name|_Multiplicand
parameter_list|,
name|__int64
modifier|*
name|_HighProduct
parameter_list|)
function_decl|;
name|unsigned
name|int
name|__cdecl
name|_readfsbase_u32
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__cdecl
name|_readfsbase_u64
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|int
name|__cdecl
name|_readgsbase_u32
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|__cdecl
name|_readgsbase_u64
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_rorx_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|,
specifier|const
name|unsigned
name|int
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_tzcnt_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_tzmsk_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|unsigned
name|__int64
name|_umul128
parameter_list|(
name|unsigned
name|__int64
name|_Multiplier
parameter_list|,
name|unsigned
name|__int64
name|_Multiplicand
parameter_list|,
name|unsigned
name|__int64
modifier|*
name|_HighProduct
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_writefsbase_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|_cdecl
name|_writefsbase_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_writegsbase_u32
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_writegsbase_u64
parameter_list|(
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_xrstor64
parameter_list|(
name|void
specifier|const
modifier|*
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_xsave64
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
name|void
name|__cdecl
name|_xsaveopt64
parameter_list|(
name|void
modifier|*
parameter_list|,
name|unsigned
name|__int64
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/* __x86_64__ */
comment|/*----------------------------------------------------------------------------*\ |* Bit Twiddling \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_rotl8
argument_list|(
name|unsigned
name|char
name|_Value
argument_list|,
name|unsigned
name|char
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0x7
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|<<
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|>>
operator|(
literal|8
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_rotr8
argument_list|(
name|unsigned
name|char
name|_Value
argument_list|,
name|unsigned
name|char
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0x7
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|>>
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|<<
operator|(
literal|8
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_rotl16
argument_list|(
name|unsigned
name|short
name|_Value
argument_list|,
name|unsigned
name|char
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0xf
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|<<
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|>>
operator|(
literal|16
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_rotr16
argument_list|(
name|unsigned
name|short
name|_Value
argument_list|,
name|unsigned
name|char
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0xf
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|>>
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|<<
operator|(
literal|16
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_rotl
argument_list|(
name|unsigned
name|int
name|_Value
argument_list|,
name|int
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0x1f
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|<<
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|>>
operator|(
literal|32
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_rotr
argument_list|(
name|unsigned
name|int
name|_Value
argument_list|,
name|int
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0x1f
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|>>
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|<<
operator|(
literal|32
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_lrotl
argument_list|(
name|unsigned
name|long
name|_Value
argument_list|,
name|int
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0x1f
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|<<
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|>>
operator|(
literal|32
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_lrotr
argument_list|(
name|unsigned
name|long
name|_Value
argument_list|,
name|int
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0x1f
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|>>
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|<<
operator|(
literal|32
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_rotl64
argument_list|(
name|unsigned
name|__int64
name|_Value
argument_list|,
name|int
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0x3f
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|<<
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|>>
operator|(
literal|64
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_rotr64
argument_list|(
name|unsigned
name|__int64
name|_Value
argument_list|,
name|int
name|_Shift
argument_list|)
block|{
name|_Shift
operator|&=
literal|0x3f
expr_stmt|;
return|return
name|_Shift
condition|?
operator|(
name|_Value
operator|>>
name|_Shift
operator|)
operator||
operator|(
name|_Value
operator|<<
operator|(
literal|64
operator|-
name|_Shift
operator|)
operator|)
else|:
name|_Value
return|;
block|}
comment|/*----------------------------------------------------------------------------*\ |* Bit Counting and Testing \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_BitScanForward
argument_list|(
name|unsigned
name|long
operator|*
name|_Index
argument_list|,
name|unsigned
name|long
name|_Mask
argument_list|)
block|{
if|if
condition|(
operator|!
name|_Mask
condition|)
return|return
literal|0
return|;
operator|*
name|_Index
operator|=
name|__builtin_ctzl
argument_list|(
name|_Mask
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_BitScanReverse
argument_list|(
name|unsigned
name|long
operator|*
name|_Index
argument_list|,
name|unsigned
name|long
name|_Mask
argument_list|)
block|{
if|if
condition|(
operator|!
name|_Mask
condition|)
return|return
literal|0
return|;
operator|*
name|_Index
operator|=
literal|31
operator|-
name|__builtin_clzl
argument_list|(
name|_Mask
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_lzcnt_u32
argument_list|(
name|unsigned
name|int
name|a
argument_list|)
block|{
if|if
condition|(
operator|!
name|a
condition|)
return|return
literal|32
return|;
return|return
name|__builtin_clzl
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__popcnt16
argument_list|(
name|unsigned
name|short
name|value
argument_list|)
block|{
return|return
name|__builtin_popcount
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__popcnt
argument_list|(
name|unsigned
name|int
name|value
argument_list|)
block|{
return|return
name|__builtin_popcount
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_bittest
argument_list|(
name|long
specifier|const
operator|*
name|a
argument_list|,
name|long
name|b
argument_list|)
block|{
return|return
operator|(
operator|*
name|a
operator|>>
name|b
operator|)
operator|&
literal|1
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_bittestandcomplement
argument_list|(
name|long
operator|*
name|a
argument_list|,
name|long
name|b
argument_list|)
block|{
name|unsigned
name|char
name|x
init|=
operator|(
operator|*
name|a
operator|>>
name|b
operator|)
operator|&
literal|1
decl_stmt|;
operator|*
name|a
operator|=
operator|*
name|a
operator|^
operator|(
literal|1
operator|<<
name|b
operator|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_bittestandreset
argument_list|(
name|long
operator|*
name|a
argument_list|,
name|long
name|b
argument_list|)
block|{
name|unsigned
name|char
name|x
init|=
operator|(
operator|*
name|a
operator|>>
name|b
operator|)
operator|&
literal|1
decl_stmt|;
operator|*
name|a
operator|=
operator|*
name|a
operator|&
operator|~
operator|(
literal|1
operator|<<
name|b
operator|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_bittestandset
argument_list|(
name|long
operator|*
name|a
argument_list|,
name|long
name|b
argument_list|)
block|{
name|unsigned
name|char
name|x
init|=
operator|(
operator|*
name|a
operator|>>
name|b
operator|)
operator|&
literal|1
decl_stmt|;
operator|*
name|a
operator|=
operator|*
name|a
operator||
operator|(
literal|1
operator|<<
name|b
operator|)
expr_stmt|;
return|return
name|x
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_BitScanForward64
argument_list|(
name|unsigned
name|long
operator|*
name|_Index
argument_list|,
name|unsigned
name|__int64
name|_Mask
argument_list|)
block|{
if|if
condition|(
operator|!
name|_Mask
condition|)
return|return
literal|0
return|;
operator|*
name|_Index
operator|=
name|__builtin_ctzll
argument_list|(
name|_Mask
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_BitScanReverse64
argument_list|(
name|unsigned
name|long
operator|*
name|_Index
argument_list|,
name|unsigned
name|__int64
name|_Mask
argument_list|)
block|{
if|if
condition|(
operator|!
name|_Mask
condition|)
return|return
literal|0
return|;
operator|*
name|_Index
operator|=
literal|63
operator|-
name|__builtin_clzll
argument_list|(
name|_Mask
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_lzcnt_u64
argument_list|(
name|unsigned
name|__int64
name|a
argument_list|)
block|{
if|if
condition|(
operator|!
name|a
condition|)
return|return
literal|64
return|;
return|return
name|__builtin_clzll
argument_list|(
name|a
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__popcnt64
argument_list|(
name|unsigned
name|__int64
name|value
argument_list|)
block|{
return|return
name|__builtin_popcountll
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_bittest64
argument_list|(
name|__int64
specifier|const
operator|*
name|a
argument_list|,
name|__int64
name|b
argument_list|)
block|{
return|return
operator|(
operator|*
name|a
operator|>>
name|b
operator|)
operator|&
literal|1
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_bittestandcomplement64
argument_list|(
name|__int64
operator|*
name|a
argument_list|,
name|__int64
name|b
argument_list|)
block|{
name|unsigned
name|char
name|x
init|=
operator|(
operator|*
name|a
operator|>>
name|b
operator|)
operator|&
literal|1
decl_stmt|;
operator|*
name|a
operator|=
operator|*
name|a
operator|^
operator|(
literal|1ll
operator|<<
name|b
operator|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_bittestandreset64
argument_list|(
name|__int64
operator|*
name|a
argument_list|,
name|__int64
name|b
argument_list|)
block|{
name|unsigned
name|char
name|x
init|=
operator|(
operator|*
name|a
operator|>>
name|b
operator|)
operator|&
literal|1
decl_stmt|;
operator|*
name|a
operator|=
operator|*
name|a
operator|&
operator|~
operator|(
literal|1ll
operator|<<
name|b
operator|)
expr_stmt|;
return|return
name|x
return|;
block|}
specifier|static
name|__inline__
name|unsigned
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_bittestandset64
argument_list|(
name|__int64
operator|*
name|a
argument_list|,
name|__int64
name|b
argument_list|)
block|{
name|unsigned
name|char
name|x
init|=
operator|(
operator|*
name|a
operator|>>
name|b
operator|)
operator|&
literal|1
decl_stmt|;
operator|*
name|a
operator|=
operator|*
name|a
operator||
operator|(
literal|1ll
operator|<<
name|b
operator|)
expr_stmt|;
return|return
name|x
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked Exchange Add \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchangeAdd8
argument_list|(
name|char
specifier|volatile
operator|*
name|_Addend
argument_list|,
name|char
name|_Value
argument_list|)
block|{
return|return
name|__atomic_add_fetch
argument_list|(
name|_Addend
argument_list|,
name|_Value
argument_list|,
literal|0
argument_list|)
operator|-
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchangeAdd16
argument_list|(
name|short
specifier|volatile
operator|*
name|_Addend
argument_list|,
name|short
name|_Value
argument_list|)
block|{
return|return
name|__atomic_add_fetch
argument_list|(
name|_Addend
argument_list|,
name|_Value
argument_list|,
literal|0
argument_list|)
operator|-
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchangeAdd
argument_list|(
name|long
specifier|volatile
operator|*
name|_Addend
argument_list|,
name|long
name|_Value
argument_list|)
block|{
return|return
name|__atomic_add_fetch
argument_list|(
name|_Addend
argument_list|,
name|_Value
argument_list|,
literal|0
argument_list|)
operator|-
name|_Value
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchangeAdd64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Addend
argument_list|,
name|__int64
name|_Value
argument_list|)
block|{
return|return
name|__atomic_add_fetch
argument_list|(
name|_Addend
argument_list|,
name|_Value
argument_list|,
literal|0
argument_list|)
operator|-
name|_Value
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked Exchange Sub \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchangeSub8
argument_list|(
name|char
specifier|volatile
operator|*
name|_Subend
argument_list|,
name|char
name|_Value
argument_list|)
block|{
return|return
name|__atomic_sub_fetch
argument_list|(
name|_Subend
argument_list|,
name|_Value
argument_list|,
literal|0
argument_list|)
operator|+
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchangeSub16
argument_list|(
name|short
specifier|volatile
operator|*
name|_Subend
argument_list|,
name|short
name|_Value
argument_list|)
block|{
return|return
name|__atomic_sub_fetch
argument_list|(
name|_Subend
argument_list|,
name|_Value
argument_list|,
literal|0
argument_list|)
operator|+
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchangeSub
argument_list|(
name|long
specifier|volatile
operator|*
name|_Subend
argument_list|,
name|long
name|_Value
argument_list|)
block|{
return|return
name|__atomic_sub_fetch
argument_list|(
name|_Subend
argument_list|,
name|_Value
argument_list|,
literal|0
argument_list|)
operator|+
name|_Value
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchangeSub64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Subend
argument_list|,
name|__int64
name|_Value
argument_list|)
block|{
return|return
name|__atomic_sub_fetch
argument_list|(
name|_Subend
argument_list|,
name|_Value
argument_list|,
literal|0
argument_list|)
operator|+
name|_Value
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked Increment \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedIncrement16
argument_list|(
name|char
specifier|volatile
operator|*
name|_Value
argument_list|)
block|{
return|return
name|__atomic_add_fetch
argument_list|(
name|_Value
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedIncrement
argument_list|(
name|long
specifier|volatile
operator|*
name|_Value
argument_list|)
block|{
return|return
name|__atomic_add_fetch
argument_list|(
name|_Value
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedIncrement64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Value
argument_list|)
block|{
return|return
name|__atomic_add_fetch
argument_list|(
name|_Value
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked Decrement \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedDecrement16
argument_list|(
name|char
specifier|volatile
operator|*
name|_Value
argument_list|)
block|{
return|return
name|__atomic_sub_fetch
argument_list|(
name|_Value
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedDecrement
argument_list|(
name|long
specifier|volatile
operator|*
name|_Value
argument_list|)
block|{
return|return
name|__atomic_sub_fetch
argument_list|(
name|_Value
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedDecrement64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Value
argument_list|)
block|{
return|return
name|__atomic_sub_fetch
argument_list|(
name|_Value
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked And \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedAnd8
argument_list|(
name|char
specifier|volatile
operator|*
name|_Value
argument_list|,
name|char
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_and_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedAnd16
argument_list|(
name|short
specifier|volatile
operator|*
name|_Value
argument_list|,
name|short
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_and_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedAnd
argument_list|(
name|long
specifier|volatile
operator|*
name|_Value
argument_list|,
name|long
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_and_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedAnd64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Value
argument_list|,
name|__int64
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_and_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked Or \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedOr8
argument_list|(
name|char
specifier|volatile
operator|*
name|_Value
argument_list|,
name|char
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_or_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedOr16
argument_list|(
name|short
specifier|volatile
operator|*
name|_Value
argument_list|,
name|short
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_or_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedOr
argument_list|(
name|long
specifier|volatile
operator|*
name|_Value
argument_list|,
name|long
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_or_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedOr64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Value
argument_list|,
name|__int64
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_or_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked Xor \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedXor8
argument_list|(
name|char
specifier|volatile
operator|*
name|_Value
argument_list|,
name|char
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_xor_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedXor16
argument_list|(
name|short
specifier|volatile
operator|*
name|_Value
argument_list|,
name|short
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_xor_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedXor
argument_list|(
name|long
specifier|volatile
operator|*
name|_Value
argument_list|,
name|long
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_xor_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedXor64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Value
argument_list|,
name|__int64
name|_Mask
argument_list|)
block|{
return|return
name|__atomic_xor_fetch
argument_list|(
name|_Value
argument_list|,
name|_Mask
argument_list|,
literal|0
argument_list|)
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked Exchange \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchange8
argument_list|(
name|char
specifier|volatile
operator|*
name|_Target
argument_list|,
name|char
name|_Value
argument_list|)
block|{
name|__atomic_exchange
argument_list|(
name|_Target
argument_list|,
operator|&
name|_Value
argument_list|,
operator|&
name|_Value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchange16
argument_list|(
name|short
specifier|volatile
operator|*
name|_Target
argument_list|,
name|short
name|_Value
argument_list|)
block|{
name|__atomic_exchange
argument_list|(
name|_Target
argument_list|,
operator|&
name|_Value
argument_list|,
operator|&
name|_Value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|_Value
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchange
argument_list|(
name|long
specifier|volatile
operator|*
name|_Target
argument_list|,
name|long
name|_Value
argument_list|)
block|{
name|__atomic_exchange
argument_list|(
name|_Target
argument_list|,
operator|&
name|_Value
argument_list|,
operator|&
name|_Value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|_Value
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedExchange64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Target
argument_list|,
name|__int64
name|_Value
argument_list|)
block|{
name|__atomic_exchange
argument_list|(
name|_Target
argument_list|,
operator|&
name|_Value
argument_list|,
operator|&
name|_Value
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|_Value
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Interlocked Compare Exchange \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|char
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedCompareExchange8
argument_list|(
name|char
specifier|volatile
operator|*
name|_Destination
argument_list|,
name|char
name|_Exchange
argument_list|,
name|char
name|_Comparand
argument_list|)
block|{
name|__atomic_compare_exchange
argument_list|(
name|_Destination
argument_list|,
operator|&
name|_Comparand
argument_list|,
operator|&
name|_Exchange
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|_Comparand
return|;
block|}
specifier|static
name|__inline__
name|short
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedCompareExchange16
argument_list|(
name|short
specifier|volatile
operator|*
name|_Destination
argument_list|,
name|short
name|_Exchange
argument_list|,
name|short
name|_Comparand
argument_list|)
block|{
name|__atomic_compare_exchange
argument_list|(
name|_Destination
argument_list|,
operator|&
name|_Comparand
argument_list|,
operator|&
name|_Exchange
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|_Comparand
return|;
block|}
specifier|static
name|__inline__
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedCompareExchange
argument_list|(
name|long
specifier|volatile
operator|*
name|_Destination
argument_list|,
name|long
name|_Exchange
argument_list|,
name|long
name|_Comparand
argument_list|)
block|{
name|__atomic_compare_exchange
argument_list|(
name|_Destination
argument_list|,
operator|&
name|_Comparand
argument_list|,
operator|&
name|_Exchange
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|_Comparand
return|;
block|}
ifdef|#
directive|ifdef
name|__x86_64__
specifier|static
name|__inline__
name|__int64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_InterlockedCompareExchange64
argument_list|(
name|__int64
specifier|volatile
operator|*
name|_Destination
argument_list|,
name|__int64
name|_Exchange
argument_list|,
name|__int64
name|_Comparand
argument_list|)
block|{
name|__atomic_compare_exchange
argument_list|(
name|_Destination
argument_list|,
operator|&
name|_Comparand
argument_list|,
operator|&
name|_Exchange
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|_Comparand
return|;
block|}
endif|#
directive|endif
comment|/*----------------------------------------------------------------------------*\ |* Barriers \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__attribute__
argument_list|(
operator|(
name|deprecated
argument_list|(
literal|"use other intrinsics or C++11 atomics instead"
argument_list|)
operator|)
argument_list|)
name|_ReadWriteBarrier
argument_list|(
name|void
argument_list|)
block|{
asm|__asm__
specifier|volatile
asm|("" : : : "memory");
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__attribute__
argument_list|(
operator|(
name|deprecated
argument_list|(
literal|"use other intrinsics or C++11 atomics instead"
argument_list|)
operator|)
argument_list|)
name|_ReadBarrier
argument_list|(
name|void
argument_list|)
block|{
asm|__asm__
specifier|volatile
asm|("" : : : "memory");
block|}
specifier|static
name|__inline__
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|__attribute__
argument_list|(
operator|(
name|deprecated
argument_list|(
literal|"use other intrinsics or C++11 atomics instead"
argument_list|)
operator|)
argument_list|)
name|_WriteBarrier
argument_list|(
name|void
argument_list|)
block|{
asm|__asm__
specifier|volatile
asm|("" : : : "memory");
block|}
comment|/*----------------------------------------------------------------------------*\ |* Misc \*----------------------------------------------------------------------------*/
specifier|static
name|__inline__
name|void
modifier|*
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_AddressOfReturnAddress
argument_list|(
name|void
argument_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|__builtin_frame_address
argument_list|(
literal|0
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|void
operator|*
argument_list|)
operator|)
return|;
block|}
specifier|static
name|__inline__
name|void
modifier|*
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|,
name|__nodebug__
operator|)
argument_list|)
name|_ReturnAddress
argument_list|(
name|void
argument_list|)
block|{
return|return
name|__builtin_return_address
argument_list|(
literal|0
argument_list|)
return|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __INTRIN_H */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MSC_VER */
end_comment

end_unit

