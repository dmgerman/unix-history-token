begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CGCleanup.h - Classes for cleanups IR generation --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These classes support the generation of LLVM IR for cleanups.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_CODEGEN_CGCLEANUP_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_CODEGEN_CGCLEANUP_H
end_define

begin_include
include|#
directive|include
file|"EHScopeStack.h"
end_include

begin_include
include|#
directive|include
file|"Address.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BasicBlock
decl_stmt|;
name|class
name|Value
decl_stmt|;
name|class
name|ConstantInt
decl_stmt|;
name|class
name|AllocaInst
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|FunctionDecl
decl_stmt|;
name|namespace
name|CodeGen
block|{
name|class
name|CodeGenModule
decl_stmt|;
name|class
name|CodeGenFunction
decl_stmt|;
comment|/// The MS C++ ABI needs a pointer to RTTI data plus some flags to describe the
comment|/// type of a catch handler, so we use this wrapper.
struct|struct
name|CatchTypeInfo
block|{
name|llvm
operator|::
name|Constant
operator|*
name|RTTI
expr_stmt|;
name|unsigned
name|Flags
decl_stmt|;
block|}
struct|;
comment|/// A protected scope for zero-cost EH handling.
name|class
name|EHScope
block|{
name|llvm
operator|::
name|BasicBlock
operator|*
name|CachedLandingPad
expr_stmt|;
name|llvm
operator|::
name|BasicBlock
operator|*
name|CachedEHDispatchBlock
expr_stmt|;
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingEHScope
expr_stmt|;
name|class
name|CommonBitFields
block|{
name|friend
name|class
name|EHScope
decl_stmt|;
name|unsigned
name|Kind
range|:
literal|3
decl_stmt|;
block|}
empty_stmt|;
enum|enum
block|{
name|NumCommonBits
init|=
literal|3
block|}
enum|;
name|protected
label|:
name|class
name|CatchBitFields
block|{
name|friend
name|class
name|EHCatchScope
decl_stmt|;
name|unsigned
label|:
name|NumCommonBits
expr_stmt|;
name|unsigned
name|NumHandlers
range|:
literal|32
operator|-
name|NumCommonBits
decl_stmt|;
block|}
empty_stmt|;
name|class
name|CleanupBitFields
block|{
name|friend
name|class
name|EHCleanupScope
decl_stmt|;
name|unsigned
label|:
name|NumCommonBits
expr_stmt|;
comment|/// Whether this cleanup needs to be run along normal edges.
name|unsigned
name|IsNormalCleanup
range|:
literal|1
decl_stmt|;
comment|/// Whether this cleanup needs to be run along exception edges.
name|unsigned
name|IsEHCleanup
range|:
literal|1
decl_stmt|;
comment|/// Whether this cleanup is currently active.
name|unsigned
name|IsActive
range|:
literal|1
decl_stmt|;
comment|/// Whether this cleanup is a lifetime marker
name|unsigned
name|IsLifetimeMarker
range|:
literal|1
decl_stmt|;
comment|/// Whether the normal cleanup should test the activation flag.
name|unsigned
name|TestFlagInNormalCleanup
range|:
literal|1
decl_stmt|;
comment|/// Whether the EH cleanup should test the activation flag.
name|unsigned
name|TestFlagInEHCleanup
range|:
literal|1
decl_stmt|;
comment|/// The amount of extra storage needed by the Cleanup.
comment|/// Always a multiple of the scope-stack alignment.
name|unsigned
name|CleanupSize
range|:
literal|12
decl_stmt|;
block|}
empty_stmt|;
name|class
name|FilterBitFields
block|{
name|friend
name|class
name|EHFilterScope
decl_stmt|;
name|unsigned
label|:
name|NumCommonBits
expr_stmt|;
name|unsigned
name|NumFilters
range|:
literal|32
operator|-
name|NumCommonBits
decl_stmt|;
block|}
empty_stmt|;
union|union
block|{
name|CommonBitFields
name|CommonBits
decl_stmt|;
name|CatchBitFields
name|CatchBits
decl_stmt|;
name|CleanupBitFields
name|CleanupBits
decl_stmt|;
name|FilterBitFields
name|FilterBits
decl_stmt|;
block|}
union|;
name|public
label|:
enum|enum
name|Kind
block|{
name|Cleanup
block|,
name|Catch
block|,
name|Terminate
block|,
name|Filter
block|,
name|PadEnd
block|}
enum|;
name|EHScope
argument_list|(
argument|Kind kind
argument_list|,
argument|EHScopeStack::stable_iterator enclosingEHScope
argument_list|)
block|:
name|CachedLandingPad
argument_list|(
name|nullptr
argument_list|)
operator|,
name|CachedEHDispatchBlock
argument_list|(
name|nullptr
argument_list|)
operator|,
name|EnclosingEHScope
argument_list|(
argument|enclosingEHScope
argument_list|)
block|{
name|CommonBits
operator|.
name|Kind
operator|=
name|kind
block|;   }
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Kind
operator|>
operator|(
name|CommonBits
operator|.
name|Kind
operator|)
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getCachedLandingPad
argument_list|()
specifier|const
block|{
return|return
name|CachedLandingPad
return|;
block|}
name|void
name|setCachedLandingPad
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|block
argument_list|)
block|{
name|CachedLandingPad
operator|=
name|block
expr_stmt|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getCachedEHDispatchBlock
argument_list|()
specifier|const
block|{
return|return
name|CachedEHDispatchBlock
return|;
block|}
name|void
name|setCachedEHDispatchBlock
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|block
argument_list|)
block|{
name|CachedEHDispatchBlock
operator|=
name|block
expr_stmt|;
block|}
name|bool
name|hasEHBranches
argument_list|()
specifier|const
block|{
if|if
condition|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|block
operator|=
name|getCachedEHDispatchBlock
argument_list|()
condition|)
return|return
operator|!
name|block
operator|->
name|use_empty
argument_list|()
return|;
return|return
name|false
return|;
block|}
name|EHScopeStack
operator|::
name|stable_iterator
name|getEnclosingEHScope
argument_list|()
specifier|const
block|{
return|return
name|EnclosingEHScope
return|;
block|}
block|}
empty_stmt|;
comment|/// A scope which attempts to handle some, possibly all, types of
comment|/// exceptions.
comment|///
comment|/// Objective C \@finally blocks are represented using a cleanup scope
comment|/// after the catch scope.
name|class
name|EHCatchScope
range|:
name|public
name|EHScope
block|{
comment|// In effect, we have a flexible array member
comment|//   Handler Handlers[0];
comment|// But that's only standard in C99, not C++, so we have to do
comment|// annoying pointer arithmetic instead.
name|public
operator|:
expr|struct
name|Handler
block|{
comment|/// A type info value, or null (C++ null, not an LLVM null pointer)
comment|/// for a catch-all.
name|CatchTypeInfo
name|Type
block|;
comment|/// The catch handler for this type.
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
block|;
name|bool
name|isCatchAll
argument_list|()
specifier|const
block|{
return|return
name|Type
operator|.
name|RTTI
operator|==
name|nullptr
return|;
block|}
expr|}
block|;
name|private
operator|:
name|friend
name|class
name|EHScopeStack
block|;
name|Handler
operator|*
name|getHandlers
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|Handler
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
specifier|const
name|Handler
operator|*
name|getHandlers
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Handler
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|public
operator|:
specifier|static
name|size_t
name|getSizeForNumHandlers
argument_list|(
argument|unsigned N
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHCatchScope
argument_list|)
operator|+
name|N
operator|*
sizeof|sizeof
argument_list|(
name|Handler
argument_list|)
return|;
block|}
name|EHCatchScope
argument_list|(
argument|unsigned numHandlers
argument_list|,
argument|EHScopeStack::stable_iterator enclosingEHScope
argument_list|)
operator|:
name|EHScope
argument_list|(
argument|Catch
argument_list|,
argument|enclosingEHScope
argument_list|)
block|{
name|CatchBits
operator|.
name|NumHandlers
operator|=
name|numHandlers
block|;
name|assert
argument_list|(
name|CatchBits
operator|.
name|NumHandlers
operator|==
name|numHandlers
operator|&&
literal|"NumHandlers overflow?"
argument_list|)
block|;   }
name|unsigned
name|getNumHandlers
argument_list|()
specifier|const
block|{
return|return
name|CatchBits
operator|.
name|NumHandlers
return|;
block|}
name|void
name|setCatchAllHandler
argument_list|(
argument|unsigned I
argument_list|,
argument|llvm::BasicBlock *Block
argument_list|)
block|{
name|setHandler
argument_list|(
name|I
argument_list|,
name|CatchTypeInfo
block|{
name|nullptr
block|,
literal|0
block|}
argument_list|,
name|Block
argument_list|)
block|;   }
name|void
name|setHandler
argument_list|(
argument|unsigned I
argument_list|,
argument|llvm::Constant *Type
argument_list|,
argument|llvm::BasicBlock *Block
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumHandlers
argument_list|()
argument_list|)
block|;
name|getHandlers
argument_list|()
index|[
name|I
index|]
operator|.
name|Type
operator|=
name|CatchTypeInfo
block|{
name|Type
block|,
literal|0
block|}
block|;
name|getHandlers
argument_list|()
index|[
name|I
index|]
operator|.
name|Block
operator|=
name|Block
block|;   }
name|void
name|setHandler
argument_list|(
argument|unsigned I
argument_list|,
argument|CatchTypeInfo Type
argument_list|,
argument|llvm::BasicBlock *Block
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumHandlers
argument_list|()
argument_list|)
block|;
name|getHandlers
argument_list|()
index|[
name|I
index|]
operator|.
name|Type
operator|=
name|Type
block|;
name|getHandlers
argument_list|()
index|[
name|I
index|]
operator|.
name|Block
operator|=
name|Block
block|;   }
specifier|const
name|Handler
operator|&
name|getHandler
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumHandlers
argument_list|()
argument_list|)
block|;
return|return
name|getHandlers
argument_list|()
index|[
name|I
index|]
return|;
block|}
comment|// Clear all handler blocks.
comment|// FIXME: it's better to always call clearHandlerBlocks in DTOR and have a
comment|// 'takeHandler' or some such function which removes ownership from the
comment|// EHCatchScope object if the handlers should live longer than EHCatchScope.
name|void
name|clearHandlerBlocks
argument_list|()
block|{
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|N
init|=
name|getNumHandlers
argument_list|()
init|;
name|I
operator|!=
name|N
condition|;
operator|++
name|I
control|)
name|delete
name|getHandler
argument_list|(
name|I
argument_list|)
decl|.
name|Block
decl_stmt|;
block|}
typedef|typedef
specifier|const
name|Handler
modifier|*
name|iterator
typedef|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|getHandlers
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|getHandlers
argument_list|()
operator|+
name|getNumHandlers
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Catch
return|;
block|}
expr|}
block|;
comment|/// A cleanup scope which generates the cleanup blocks lazily.
name|class
name|LLVM_ALIGNAS
argument_list|(
comment|/*alignof(uint64_t)*/
literal|8
argument_list|)
name|EHCleanupScope
operator|:
name|public
name|EHScope
block|{
comment|/// The nearest normal cleanup scope enclosing this one.
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingNormal
block|;
comment|/// The nearest EH scope enclosing this one.
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingEH
block|;
comment|/// The dual entry/exit block along the normal edge.  This is lazily
comment|/// created if needed before the cleanup is popped.
name|llvm
operator|::
name|BasicBlock
operator|*
name|NormalBlock
block|;
comment|/// An optional i1 variable indicating whether this cleanup has been
comment|/// activated yet.
name|llvm
operator|::
name|AllocaInst
operator|*
name|ActiveFlag
block|;
comment|/// Extra information required for cleanups that have resolved
comment|/// branches through them.  This has to be allocated on the side
comment|/// because everything on the cleanup stack has be trivially
comment|/// movable.
block|struct
name|ExtInfo
block|{
comment|/// The destinations of normal branch-afters and branch-throughs.
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|llvm
operator|::
name|BasicBlock
operator|*
block|,
literal|4
operator|>
name|Branches
block|;
comment|/// Normal branch-afters.
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|BasicBlock
operator|*
block|,
name|llvm
operator|::
name|ConstantInt
operator|*
operator|>
block|,
literal|4
operator|>
name|BranchAfters
block|;   }
block|;
name|mutable
expr|struct
name|ExtInfo
operator|*
name|ExtInfo
block|;
comment|/// The number of fixups required by enclosing scopes (not including
comment|/// this one).  If this is the top cleanup scope, all the fixups
comment|/// from this index onwards belong to this scope.
name|unsigned
name|FixupDepth
block|;    struct
name|ExtInfo
operator|&
name|getExtInfo
argument_list|()
block|{
if|if
condition|(
operator|!
name|ExtInfo
condition|)
name|ExtInfo
operator|=
name|new
expr|struct
name|ExtInfo
argument_list|()
expr_stmt|;
return|return
operator|*
name|ExtInfo
return|;
block|}
specifier|const
expr|struct
name|ExtInfo
operator|&
name|getExtInfo
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|ExtInfo
condition|)
name|ExtInfo
operator|=
name|new
expr|struct
name|ExtInfo
argument_list|()
expr_stmt|;
return|return
operator|*
name|ExtInfo
return|;
block|}
name|public
label|:
comment|/// Gets the size required for a lazy cleanup scope with the given
comment|/// cleanup-data requirements.
specifier|static
name|size_t
name|getSizeForCleanupSize
parameter_list|(
name|size_t
name|Size
parameter_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHCleanupScope
argument_list|)
operator|+
name|Size
return|;
block|}
name|size_t
name|getAllocatedSize
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHCleanupScope
argument_list|)
operator|+
name|CleanupBits
operator|.
name|CleanupSize
return|;
block|}
name|EHCleanupScope
argument_list|(
argument|bool isNormal
argument_list|,
argument|bool isEH
argument_list|,
argument|bool isActive
argument_list|,
argument|unsigned cleanupSize
argument_list|,
argument|unsigned fixupDepth
argument_list|,
argument|EHScopeStack::stable_iterator enclosingNormal
argument_list|,
argument|EHScopeStack::stable_iterator enclosingEH
argument_list|)
block|:
name|EHScope
argument_list|(
name|EHScope
operator|::
name|Cleanup
argument_list|,
name|enclosingEH
argument_list|)
operator|,
name|EnclosingNormal
argument_list|(
name|enclosingNormal
argument_list|)
operator|,
name|NormalBlock
argument_list|(
name|nullptr
argument_list|)
operator|,
name|ActiveFlag
argument_list|(
name|nullptr
argument_list|)
operator|,
name|ExtInfo
argument_list|(
name|nullptr
argument_list|)
operator|,
name|FixupDepth
argument_list|(
argument|fixupDepth
argument_list|)
block|{
name|CleanupBits
operator|.
name|IsNormalCleanup
operator|=
name|isNormal
block|;
name|CleanupBits
operator|.
name|IsEHCleanup
operator|=
name|isEH
block|;
name|CleanupBits
operator|.
name|IsActive
operator|=
name|isActive
block|;
name|CleanupBits
operator|.
name|IsLifetimeMarker
operator|=
name|false
block|;
name|CleanupBits
operator|.
name|TestFlagInNormalCleanup
operator|=
name|false
block|;
name|CleanupBits
operator|.
name|TestFlagInEHCleanup
operator|=
name|false
block|;
name|CleanupBits
operator|.
name|CleanupSize
operator|=
name|cleanupSize
block|;
name|assert
argument_list|(
name|CleanupBits
operator|.
name|CleanupSize
operator|==
name|cleanupSize
operator|&&
literal|"cleanup size overflow"
argument_list|)
block|;   }
name|void
name|Destroy
argument_list|()
block|{
name|delete
name|ExtInfo
block|;   }
comment|// Objects of EHCleanupScope are not destructed. Use Destroy().
operator|~
name|EHCleanupScope
argument_list|()
operator|=
name|delete
expr_stmt|;
name|bool
name|isNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|CleanupBits
operator|.
name|IsNormalCleanup
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getNormalBlock
argument_list|()
specifier|const
block|{
return|return
name|NormalBlock
return|;
block|}
name|void
name|setNormalBlock
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|BB
argument_list|)
block|{
name|NormalBlock
operator|=
name|BB
expr_stmt|;
block|}
name|bool
name|isEHCleanup
argument_list|()
specifier|const
block|{
return|return
name|CleanupBits
operator|.
name|IsEHCleanup
return|;
block|}
name|bool
name|isActive
argument_list|()
specifier|const
block|{
return|return
name|CleanupBits
operator|.
name|IsActive
return|;
block|}
name|void
name|setActive
parameter_list|(
name|bool
name|A
parameter_list|)
block|{
name|CleanupBits
operator|.
name|IsActive
operator|=
name|A
expr_stmt|;
block|}
name|bool
name|isLifetimeMarker
argument_list|()
specifier|const
block|{
return|return
name|CleanupBits
operator|.
name|IsLifetimeMarker
return|;
block|}
name|void
name|setLifetimeMarker
parameter_list|()
block|{
name|CleanupBits
operator|.
name|IsLifetimeMarker
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|hasActiveFlag
argument_list|()
specifier|const
block|{
return|return
name|ActiveFlag
operator|!=
name|nullptr
return|;
block|}
name|Address
name|getActiveFlag
argument_list|()
specifier|const
block|{
return|return
name|Address
argument_list|(
name|ActiveFlag
argument_list|,
name|CharUnits
operator|::
name|One
argument_list|()
argument_list|)
return|;
block|}
name|void
name|setActiveFlag
parameter_list|(
name|Address
name|Var
parameter_list|)
block|{
name|assert
argument_list|(
name|Var
operator|.
name|getAlignment
argument_list|()
operator|.
name|isOne
argument_list|()
argument_list|)
expr_stmt|;
name|ActiveFlag
operator|=
name|cast
operator|<
name|llvm
operator|::
name|AllocaInst
operator|>
operator|(
name|Var
operator|.
name|getPointer
argument_list|()
operator|)
expr_stmt|;
block|}
name|void
name|setTestFlagInNormalCleanup
parameter_list|()
block|{
name|CleanupBits
operator|.
name|TestFlagInNormalCleanup
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|shouldTestFlagInNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|CleanupBits
operator|.
name|TestFlagInNormalCleanup
return|;
block|}
name|void
name|setTestFlagInEHCleanup
parameter_list|()
block|{
name|CleanupBits
operator|.
name|TestFlagInEHCleanup
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|shouldTestFlagInEHCleanup
argument_list|()
specifier|const
block|{
return|return
name|CleanupBits
operator|.
name|TestFlagInEHCleanup
return|;
block|}
name|unsigned
name|getFixupDepth
argument_list|()
specifier|const
block|{
return|return
name|FixupDepth
return|;
block|}
name|EHScopeStack
operator|::
name|stable_iterator
name|getEnclosingNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|EnclosingNormal
return|;
block|}
name|size_t
name|getCleanupSize
argument_list|()
specifier|const
block|{
return|return
name|CleanupBits
operator|.
name|CleanupSize
return|;
block|}
name|void
modifier|*
name|getCleanupBuffer
parameter_list|()
block|{
return|return
name|this
operator|+
literal|1
return|;
block|}
name|EHScopeStack
operator|::
name|Cleanup
operator|*
name|getCleanup
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|EHScopeStack
operator|::
name|Cleanup
operator|*
operator|>
operator|(
name|getCleanupBuffer
argument_list|()
operator|)
return|;
block|}
comment|/// True if this cleanup scope has any branch-afters or branch-throughs.
name|bool
name|hasBranches
argument_list|()
specifier|const
block|{
return|return
name|ExtInfo
operator|&&
operator|!
name|ExtInfo
operator|->
name|Branches
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/// Add a branch-after to this cleanup scope.  A branch-after is a
comment|/// branch from a point protected by this (normal) cleanup to a
comment|/// point in the normal cleanup scope immediately containing it.
comment|/// For example,
comment|///   for (;;) { A a; break; }
comment|/// contains a branch-after.
comment|///
comment|/// Branch-afters each have their own destination out of the
comment|/// cleanup, guaranteed distinct from anything else threaded through
comment|/// it.  Therefore branch-afters usually force a switch after the
comment|/// cleanup.
name|void
name|addBranchAfter
argument_list|(
name|llvm
operator|::
name|ConstantInt
operator|*
name|Index
argument_list|,
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
argument_list|)
block|{
name|struct
name|ExtInfo
modifier|&
name|ExtInfo
init|=
name|getExtInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|ExtInfo
operator|.
name|Branches
operator|.
name|insert
argument_list|(
name|Block
argument_list|)
operator|.
name|second
condition|)
name|ExtInfo
operator|.
name|BranchAfters
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Block
argument_list|,
name|Index
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// Return the number of unique branch-afters on this scope.
name|unsigned
name|getNumBranchAfters
argument_list|()
specifier|const
block|{
return|return
name|ExtInfo
operator|?
name|ExtInfo
operator|->
name|BranchAfters
operator|.
name|size
argument_list|()
operator|:
literal|0
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getBranchAfterBlock
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumBranchAfters
argument_list|()
argument_list|)
block|;
return|return
name|ExtInfo
operator|->
name|BranchAfters
index|[
name|I
index|]
operator|.
name|first
return|;
block|}
name|llvm
operator|::
name|ConstantInt
operator|*
name|getBranchAfterIndex
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumBranchAfters
argument_list|()
argument_list|)
block|;
return|return
name|ExtInfo
operator|->
name|BranchAfters
index|[
name|I
index|]
operator|.
name|second
return|;
block|}
comment|/// Add a branch-through to this cleanup scope.  A branch-through is
comment|/// a branch from a scope protected by this (normal) cleanup to an
comment|/// enclosing scope other than the immediately-enclosing normal
comment|/// cleanup scope.
comment|///
comment|/// In the following example, the branch through B's scope is a
comment|/// branch-through, while the branch through A's scope is a
comment|/// branch-after:
comment|///   for (;;) { A a; B b; break; }
comment|///
comment|/// All branch-throughs have a common destination out of the
comment|/// cleanup, one possibly shared with the fall-through.  Therefore
comment|/// branch-throughs usually don't force a switch after the cleanup.
comment|///
comment|/// \return true if the branch-through was new to this scope
name|bool
name|addBranchThrough
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
argument_list|)
block|{
return|return
name|getExtInfo
argument_list|()
operator|.
name|Branches
operator|.
name|insert
argument_list|(
name|Block
argument_list|)
operator|.
name|second
return|;
block|}
comment|/// Determines if this cleanup scope has any branch throughs.
name|bool
name|hasBranchThroughs
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|ExtInfo
condition|)
return|return
name|false
return|;
return|return
operator|(
name|ExtInfo
operator|->
name|BranchAfters
operator|.
name|size
argument_list|()
operator|!=
name|ExtInfo
operator|->
name|Branches
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
end_decl_stmt

begin_function
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|EHScope
modifier|*
name|Scope
parameter_list|)
block|{
return|return
operator|(
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Cleanup
operator|)
return|;
block|}
end_function

begin_comment
unit|};
comment|// NOTE: there's a bunch of different data classes tacked on after an
end_comment

begin_comment
comment|// EHCleanupScope. It is asserted (in EHScopeStack::pushCleanup*) that
end_comment

begin_comment
comment|// they don't require greater alignment than ScopeStackAlignment. So,
end_comment

begin_comment
comment|// EHCleanupScope ought to have alignment equal to that -- not more
end_comment

begin_comment
comment|// (would be misaligned by the stack allocator), and not less (would
end_comment

begin_comment
comment|// break the appended classes).
end_comment

begin_expr_stmt
name|static_assert
argument_list|(
name|alignof
argument_list|(
name|EHCleanupScope
argument_list|)
operator|==
name|EHScopeStack
operator|::
name|ScopeStackAlignment
argument_list|,
literal|"EHCleanupScope expected alignment"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// An exceptions scope which filters exceptions thrown through it.
end_comment

begin_comment
comment|/// Only exceptions matching the filter types will be permitted to be
end_comment

begin_comment
comment|/// thrown.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// This is used to implement C++ exception specifications.
end_comment

begin_decl_stmt
name|class
name|EHFilterScope
range|:
name|public
name|EHScope
block|{
comment|// Essentially ends in a flexible array member:
comment|// llvm::Value *FilterTypes[0];
name|llvm
operator|::
name|Value
operator|*
operator|*
name|getFilters
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
specifier|const
operator|*
name|getFilters
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|llvm
operator|::
name|Value
operator|*
specifier|const
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|public
operator|:
name|EHFilterScope
argument_list|(
argument|unsigned numFilters
argument_list|)
operator|:
name|EHScope
argument_list|(
argument|Filter
argument_list|,
argument|EHScopeStack::stable_end()
argument_list|)
block|{
name|FilterBits
operator|.
name|NumFilters
operator|=
name|numFilters
block|;
name|assert
argument_list|(
name|FilterBits
operator|.
name|NumFilters
operator|==
name|numFilters
operator|&&
literal|"NumFilters overflow"
argument_list|)
block|;   }
specifier|static
name|size_t
name|getSizeForNumFilters
argument_list|(
argument|unsigned numFilters
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHFilterScope
argument_list|)
operator|+
name|numFilters
operator|*
sizeof|sizeof
argument_list|(
name|llvm
operator|::
name|Value
operator|*
argument_list|)
return|;
block|}
name|unsigned
name|getNumFilters
argument_list|()
specifier|const
block|{
return|return
name|FilterBits
operator|.
name|NumFilters
return|;
block|}
name|void
name|setFilter
argument_list|(
argument|unsigned i
argument_list|,
argument|llvm::Value *filterValue
argument_list|)
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumFilters
argument_list|()
argument_list|)
block|;
name|getFilters
argument_list|()
index|[
name|i
index|]
operator|=
name|filterValue
block|;   }
name|llvm
operator|::
name|Value
operator|*
name|getFilter
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumFilters
argument_list|()
argument_list|)
block|;
return|return
name|getFilters
argument_list|()
index|[
name|i
index|]
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *scope
argument_list|)
block|{
return|return
name|scope
operator|->
name|getKind
argument_list|()
operator|==
name|Filter
return|;
block|}
expr|}
block|;
comment|/// An exceptions scope which calls std::terminate if any exception
comment|/// reaches it.
name|class
name|EHTerminateScope
operator|:
name|public
name|EHScope
block|{
name|public
operator|:
name|EHTerminateScope
argument_list|(
argument|EHScopeStack::stable_iterator enclosingEHScope
argument_list|)
operator|:
name|EHScope
argument_list|(
argument|Terminate
argument_list|,
argument|enclosingEHScope
argument_list|)
block|{}
specifier|static
name|size_t
name|getSize
argument_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHTerminateScope
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *scope
argument_list|)
block|{
return|return
name|scope
operator|->
name|getKind
argument_list|()
operator|==
name|Terminate
return|;
block|}
expr|}
block|;
name|class
name|EHPadEndScope
operator|:
name|public
name|EHScope
block|{
name|public
operator|:
name|EHPadEndScope
argument_list|(
argument|EHScopeStack::stable_iterator enclosingEHScope
argument_list|)
operator|:
name|EHScope
argument_list|(
argument|PadEnd
argument_list|,
argument|enclosingEHScope
argument_list|)
block|{}
specifier|static
name|size_t
name|getSize
argument_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHPadEndScope
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *scope
argument_list|)
block|{
return|return
name|scope
operator|->
name|getKind
argument_list|()
operator|==
name|PadEnd
return|;
block|}
expr|}
block|;
comment|/// A non-stable pointer into the scope stack.
name|class
name|EHScopeStack
operator|::
name|iterator
block|{
name|char
operator|*
name|Ptr
block|;
name|friend
name|class
name|EHScopeStack
block|;
name|explicit
name|iterator
argument_list|(
name|char
operator|*
name|Ptr
argument_list|)
operator|:
name|Ptr
argument_list|(
argument|Ptr
argument_list|)
block|{}
name|public
operator|:
name|iterator
argument_list|()
operator|:
name|Ptr
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|EHScope
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|EHScope
operator|*
operator|>
operator|(
name|Ptr
operator|)
return|;
block|}
name|EHScope
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
name|get
argument_list|()
return|;
block|}
name|EHScope
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|get
argument_list|()
return|;
block|}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|size_t
name|Size
block|;
switch|switch
condition|(
name|get
argument_list|()
operator|->
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EHScope
operator|::
name|Catch
case|:
name|Size
operator|=
name|EHCatchScope
operator|::
name|getSizeForNumHandlers
argument_list|(
name|static_cast
operator|<
specifier|const
name|EHCatchScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getNumHandlers
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Filter
case|:
name|Size
operator|=
name|EHFilterScope
operator|::
name|getSizeForNumFilters
argument_list|(
name|static_cast
operator|<
specifier|const
name|EHFilterScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getNumFilters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Cleanup
case|:
name|Size
operator|=
name|static_cast
operator|<
specifier|const
name|EHCleanupScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getAllocatedSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Terminate
case|:
name|Size
operator|=
name|EHTerminateScope
operator|::
name|getSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|PadEnd
case|:
name|Size
operator|=
name|EHPadEndScope
operator|::
name|getSize
argument_list|()
expr_stmt|;
break|break;
block|}
name|Ptr
operator|+=
name|llvm
operator|::
name|alignTo
argument_list|(
name|Size
argument_list|,
name|ScopeStackAlignment
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|iterator
name|next
argument_list|()
block|{
name|iterator
name|copy
operator|=
operator|*
name|this
block|;
operator|++
name|copy
block|;
return|return
name|copy
return|;
block|}
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|copy
operator|=
operator|*
name|this
block|;
name|operator
operator|++
operator|(
operator|)
block|;
return|return
name|copy
return|;
block|}
name|bool
name|encloses
argument_list|(
argument|iterator other
argument_list|)
specifier|const
block|{
return|return
name|Ptr
operator|>=
name|other
operator|.
name|Ptr
return|;
block|}
name|bool
name|strictlyEncloses
argument_list|(
argument|iterator other
argument_list|)
specifier|const
block|{
return|return
name|Ptr
operator|>
name|other
operator|.
name|Ptr
return|;
block|}
name|bool
name|operator
operator|==
operator|(
name|iterator
name|other
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|==
name|other
operator|.
name|Ptr
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|iterator
name|other
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|!=
name|other
operator|.
name|Ptr
return|;
block|}
expr|}
block|;
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|begin
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|StartOfData
argument_list|)
return|;
block|}
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|end
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|EndOfBuffer
argument_list|)
return|;
block|}
specifier|inline
name|void
name|EHScopeStack
operator|::
name|popCatch
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"popping exception stack when not empty"
argument_list|)
block|;
name|EHCatchScope
operator|&
name|scope
operator|=
name|cast
operator|<
name|EHCatchScope
operator|>
operator|(
operator|*
name|begin
argument_list|()
operator|)
block|;
name|InnermostEHScope
operator|=
name|scope
operator|.
name|getEnclosingEHScope
argument_list|()
block|;
name|deallocate
argument_list|(
name|EHCatchScope
operator|::
name|getSizeForNumHandlers
argument_list|(
name|scope
operator|.
name|getNumHandlers
argument_list|()
argument_list|)
argument_list|)
block|; }
specifier|inline
name|void
name|EHScopeStack
operator|::
name|popTerminate
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"popping exception stack when not empty"
argument_list|)
block|;
name|EHTerminateScope
operator|&
name|scope
operator|=
name|cast
operator|<
name|EHTerminateScope
operator|>
operator|(
operator|*
name|begin
argument_list|()
operator|)
block|;
name|InnermostEHScope
operator|=
name|scope
operator|.
name|getEnclosingEHScope
argument_list|()
block|;
name|deallocate
argument_list|(
name|EHTerminateScope
operator|::
name|getSize
argument_list|()
argument_list|)
block|; }
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|find
argument_list|(
argument|stable_iterator sp
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|sp
operator|.
name|isValid
argument_list|()
operator|&&
literal|"finding invalid savepoint"
argument_list|)
block|;
name|assert
argument_list|(
name|sp
operator|.
name|Size
operator|<=
name|stable_begin
argument_list|()
operator|.
name|Size
operator|&&
literal|"finding savepoint after pop"
argument_list|)
block|;
return|return
name|iterator
argument_list|(
name|EndOfBuffer
operator|-
name|sp
operator|.
name|Size
argument_list|)
return|;
block|}
specifier|inline
name|EHScopeStack
operator|::
name|stable_iterator
name|EHScopeStack
operator|::
name|stabilize
argument_list|(
argument|iterator ir
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|StartOfData
operator|<=
name|ir
operator|.
name|Ptr
operator|&&
name|ir
operator|.
name|Ptr
operator|<=
name|EndOfBuffer
argument_list|)
block|;
return|return
name|stable_iterator
argument_list|(
name|EndOfBuffer
operator|-
name|ir
operator|.
name|Ptr
argument_list|)
return|;
block|}
comment|/// The exceptions personality for a function.
expr|struct
name|EHPersonality
block|{
specifier|const
name|char
operator|*
name|PersonalityFn
block|;
comment|// If this is non-null, this personality requires a non-standard
comment|// function for rethrowing an exception after a catchall cleanup.
comment|// This function must have prototype void(void*).
specifier|const
name|char
operator|*
name|CatchallRethrowFn
block|;
specifier|static
specifier|const
name|EHPersonality
operator|&
name|get
argument_list|(
name|CodeGenModule
operator|&
name|CGM
argument_list|,
specifier|const
name|FunctionDecl
operator|*
name|FD
argument_list|)
block|;
specifier|static
specifier|const
name|EHPersonality
operator|&
name|get
argument_list|(
name|CodeGenFunction
operator|&
name|CGF
argument_list|)
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_C
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_C_SJLJ
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_C_SEH
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_ObjC
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_ObjC_SJLJ
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_ObjC_SEH
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNUstep_ObjC
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_ObjCXX
block|;
specifier|static
specifier|const
name|EHPersonality
name|NeXT_ObjC
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_CPlusPlus
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_CPlusPlus_SJLJ
block|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_CPlusPlus_SEH
block|;
specifier|static
specifier|const
name|EHPersonality
name|MSVC_except_handler
block|;
specifier|static
specifier|const
name|EHPersonality
name|MSVC_C_specific_handler
block|;
specifier|static
specifier|const
name|EHPersonality
name|MSVC_CxxFrameHandler3
block|;
comment|/// Does this personality use landingpads or the family of pad instructions
comment|/// designed to form funclets?
name|bool
name|usesFuncletPads
argument_list|()
specifier|const
block|{
return|return
name|isMSVCPersonality
argument_list|()
return|;
block|}
name|bool
name|isMSVCPersonality
argument_list|()
specifier|const
block|{
return|return
name|this
operator|==
operator|&
name|MSVC_except_handler
operator|||
name|this
operator|==
operator|&
name|MSVC_C_specific_handler
operator|||
name|this
operator|==
operator|&
name|MSVC_CxxFrameHandler3
return|;
block|}
name|bool
name|isMSVCXXPersonality
argument_list|()
specifier|const
block|{
return|return
name|this
operator|==
operator|&
name|MSVC_CxxFrameHandler3
return|;
block|}
expr|}
block|; }
expr|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

