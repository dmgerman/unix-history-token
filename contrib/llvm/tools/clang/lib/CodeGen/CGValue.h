begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CGValue.h - LLVM CodeGen wrappers for llvm::Value* ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These classes implement wrappers around llvm::Value in order to
end_comment

begin_comment
comment|// fully represent the range of values for C L- and R- values.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_CODEGEN_CGVALUE_H
end_ifndef

begin_define
define|#
directive|define
name|CLANG_CODEGEN_CGVALUE_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ASTContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Constant
decl_stmt|;
name|class
name|Value
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ObjCPropertyRefExpr
decl_stmt|;
name|namespace
name|CodeGen
block|{
name|class
name|CGBitFieldInfo
decl_stmt|;
comment|/// RValue - This trivial value class is used to represent the result of an
comment|/// expression that is evaluated.  It can be one of three things: either a
comment|/// simple LLVM SSA value, a pair of SSA values for complex numbers, or the
comment|/// address of an aggregate value in memory.
name|class
name|RValue
block|{
enum|enum
name|Flavor
block|{
name|Scalar
block|,
name|Complex
block|,
name|Aggregate
block|}
enum|;
comment|// Stores first value and flavor.
name|llvm
operator|::
name|PointerIntPair
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|,
literal|2
operator|,
name|Flavor
operator|>
name|V1
expr_stmt|;
comment|// Stores second value and volatility.
name|llvm
operator|::
name|PointerIntPair
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|,
literal|1
operator|,
name|bool
operator|>
name|V2
expr_stmt|;
name|public
label|:
name|bool
name|isScalar
argument_list|()
specifier|const
block|{
return|return
name|V1
operator|.
name|getInt
argument_list|()
operator|==
name|Scalar
return|;
block|}
name|bool
name|isComplex
argument_list|()
specifier|const
block|{
return|return
name|V1
operator|.
name|getInt
argument_list|()
operator|==
name|Complex
return|;
block|}
name|bool
name|isAggregate
argument_list|()
specifier|const
block|{
return|return
name|V1
operator|.
name|getInt
argument_list|()
operator|==
name|Aggregate
return|;
block|}
name|bool
name|isVolatileQualified
argument_list|()
specifier|const
block|{
return|return
name|V2
operator|.
name|getInt
argument_list|()
return|;
block|}
comment|/// getScalarVal() - Return the Value* of this scalar value.
name|llvm
operator|::
name|Value
operator|*
name|getScalarVal
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isScalar
argument_list|()
operator|&&
literal|"Not a scalar!"
argument_list|)
block|;
return|return
name|V1
operator|.
name|getPointer
argument_list|()
return|;
block|}
comment|/// getComplexVal - Return the real/imag components of this complex value.
comment|///
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|,
name|llvm
operator|::
name|Value
operator|*
operator|>
name|getComplexVal
argument_list|()
specifier|const
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|V1
operator|.
name|getPointer
argument_list|()
argument_list|,
name|V2
operator|.
name|getPointer
argument_list|()
argument_list|)
return|;
block|}
comment|/// getAggregateAddr() - Return the Value* of the address of the aggregate.
name|llvm
operator|::
name|Value
operator|*
name|getAggregateAddr
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isAggregate
argument_list|()
operator|&&
literal|"Not an aggregate!"
argument_list|)
block|;
return|return
name|V1
operator|.
name|getPointer
argument_list|()
return|;
block|}
specifier|static
name|RValue
name|get
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|V
argument_list|)
block|{
name|RValue
name|ER
decl_stmt|;
name|ER
operator|.
name|V1
operator|.
name|setPointer
argument_list|(
name|V
argument_list|)
expr_stmt|;
name|ER
operator|.
name|V1
operator|.
name|setInt
argument_list|(
name|Scalar
argument_list|)
expr_stmt|;
name|ER
operator|.
name|V2
operator|.
name|setInt
argument_list|(
name|false
argument_list|)
expr_stmt|;
return|return
name|ER
return|;
block|}
specifier|static
name|RValue
name|getComplex
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|V1
argument_list|,
name|llvm
operator|::
name|Value
operator|*
name|V2
argument_list|)
block|{
name|RValue
name|ER
decl_stmt|;
name|ER
operator|.
name|V1
operator|.
name|setPointer
argument_list|(
name|V1
argument_list|)
expr_stmt|;
name|ER
operator|.
name|V2
operator|.
name|setPointer
argument_list|(
name|V2
argument_list|)
expr_stmt|;
name|ER
operator|.
name|V1
operator|.
name|setInt
argument_list|(
name|Complex
argument_list|)
expr_stmt|;
name|ER
operator|.
name|V2
operator|.
name|setInt
argument_list|(
name|false
argument_list|)
expr_stmt|;
return|return
name|ER
return|;
block|}
specifier|static
name|RValue
name|getComplex
argument_list|(
specifier|const
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|Value
operator|*
argument_list|,
name|llvm
operator|::
name|Value
operator|*
operator|>
operator|&
name|C
argument_list|)
block|{
return|return
name|getComplex
argument_list|(
name|C
operator|.
name|first
argument_list|,
name|C
operator|.
name|second
argument_list|)
return|;
block|}
comment|// FIXME: Aggregate rvalues need to retain information about whether they are
comment|// volatile or not.  Remove default to find all places that probably get this
comment|// wrong.
specifier|static
name|RValue
name|getAggregate
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|V
argument_list|,
name|bool
name|Volatile
operator|=
name|false
argument_list|)
block|{
name|RValue
name|ER
decl_stmt|;
name|ER
operator|.
name|V1
operator|.
name|setPointer
argument_list|(
name|V
argument_list|)
expr_stmt|;
name|ER
operator|.
name|V1
operator|.
name|setInt
argument_list|(
name|Aggregate
argument_list|)
expr_stmt|;
name|ER
operator|.
name|V2
operator|.
name|setInt
argument_list|(
name|Volatile
argument_list|)
expr_stmt|;
return|return
name|ER
return|;
block|}
block|}
empty_stmt|;
comment|/// LValue - This represents an lvalue references.  Because C/C++ allow
comment|/// bitfields, this is not a simple LLVM pointer, it may be a pointer plus a
comment|/// bitrange.
name|class
name|LValue
block|{
enum|enum
block|{
name|Simple
block|,
comment|// This is a normal l-value, use getAddress().
name|VectorElt
block|,
comment|// This is a vector element l-value (V[i]), use getVector*
name|BitField
block|,
comment|// This is a bitfield l-value, use getBitfield*.
name|ExtVectorElt
block|,
comment|// This is an extended vector subset, use getExtVectorComp
name|PropertyRef
comment|// This is an Objective-C property reference, use
comment|// getPropertyRefExpr
block|}
name|LVType
enum|;
name|llvm
operator|::
name|Value
operator|*
name|V
expr_stmt|;
union|union
block|{
comment|// Index into a vector subscript: V[i]
name|llvm
operator|::
name|Value
operator|*
name|VectorIdx
expr_stmt|;
comment|// ExtVector element subset: V.xyx
name|llvm
operator|::
name|Constant
operator|*
name|VectorElts
expr_stmt|;
comment|// BitField start bit and size
specifier|const
name|CGBitFieldInfo
modifier|*
name|BitFieldInfo
decl_stmt|;
comment|// Obj-C property reference expression
specifier|const
name|ObjCPropertyRefExpr
modifier|*
name|PropertyRefExpr
decl_stmt|;
block|}
union|;
name|QualType
name|Type
decl_stmt|;
comment|// 'const' is unused here
name|Qualifiers
name|Quals
decl_stmt|;
comment|/// The alignment to use when accessing this lvalue.
name|unsigned
name|short
name|Alignment
decl_stmt|;
comment|// objective-c's ivar
name|bool
name|Ivar
range|:
literal|1
decl_stmt|;
comment|// objective-c's ivar is an array
name|bool
name|ObjIsArray
range|:
literal|1
decl_stmt|;
comment|// LValue is non-gc'able for any reason, including being a parameter or local
comment|// variable.
name|bool
name|NonGC
range|:
literal|1
decl_stmt|;
comment|// Lvalue is a global reference of an objective-c object
name|bool
name|GlobalObjCRef
range|:
literal|1
decl_stmt|;
comment|// Lvalue is a thread local reference
name|bool
name|ThreadLocalRef
range|:
literal|1
decl_stmt|;
name|Expr
modifier|*
name|BaseIvarExp
decl_stmt|;
comment|/// TBAAInfo - TBAA information to attach to dereferences of this LValue.
name|llvm
operator|::
name|MDNode
operator|*
name|TBAAInfo
expr_stmt|;
name|private
label|:
name|void
name|Initialize
argument_list|(
name|QualType
name|Type
argument_list|,
name|Qualifiers
name|Quals
argument_list|,
name|unsigned
name|Alignment
operator|=
literal|0
argument_list|,
name|llvm
operator|::
name|MDNode
operator|*
name|TBAAInfo
operator|=
literal|0
argument_list|)
block|{
name|this
operator|->
name|Type
operator|=
name|Type
expr_stmt|;
name|this
operator|->
name|Quals
operator|=
name|Quals
expr_stmt|;
name|this
operator|->
name|Alignment
operator|=
name|Alignment
expr_stmt|;
name|assert
argument_list|(
name|this
operator|->
name|Alignment
operator|==
name|Alignment
operator|&&
literal|"Alignment exceeds allowed max!"
argument_list|)
expr_stmt|;
comment|// Initialize Objective-C flags.
name|this
operator|->
name|Ivar
operator|=
name|this
operator|->
name|ObjIsArray
operator|=
name|this
operator|->
name|NonGC
operator|=
name|this
operator|->
name|GlobalObjCRef
operator|=
name|false
expr_stmt|;
name|this
operator|->
name|ThreadLocalRef
operator|=
name|false
expr_stmt|;
name|this
operator|->
name|BaseIvarExp
operator|=
literal|0
expr_stmt|;
name|this
operator|->
name|TBAAInfo
operator|=
name|TBAAInfo
expr_stmt|;
block|}
name|public
label|:
name|bool
name|isSimple
argument_list|()
specifier|const
block|{
return|return
name|LVType
operator|==
name|Simple
return|;
block|}
name|bool
name|isVectorElt
argument_list|()
specifier|const
block|{
return|return
name|LVType
operator|==
name|VectorElt
return|;
block|}
name|bool
name|isBitField
argument_list|()
specifier|const
block|{
return|return
name|LVType
operator|==
name|BitField
return|;
block|}
name|bool
name|isExtVectorElt
argument_list|()
specifier|const
block|{
return|return
name|LVType
operator|==
name|ExtVectorElt
return|;
block|}
name|bool
name|isPropertyRef
argument_list|()
specifier|const
block|{
return|return
name|LVType
operator|==
name|PropertyRef
return|;
block|}
name|bool
name|isVolatileQualified
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|hasVolatile
argument_list|()
return|;
block|}
name|bool
name|isRestrictQualified
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|hasRestrict
argument_list|()
return|;
block|}
name|unsigned
name|getVRQualifiers
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|getCVRQualifiers
argument_list|()
operator|&
operator|~
name|Qualifiers
operator|::
name|Const
return|;
block|}
name|QualType
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|Qualifiers
operator|::
name|ObjCLifetime
name|getObjCLifetime
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|getObjCLifetime
argument_list|()
return|;
block|}
name|bool
name|isObjCIvar
argument_list|()
specifier|const
block|{
return|return
name|Ivar
return|;
block|}
name|void
name|setObjCIvar
parameter_list|(
name|bool
name|Value
parameter_list|)
block|{
name|Ivar
operator|=
name|Value
expr_stmt|;
block|}
name|bool
name|isObjCArray
argument_list|()
specifier|const
block|{
return|return
name|ObjIsArray
return|;
block|}
name|void
name|setObjCArray
parameter_list|(
name|bool
name|Value
parameter_list|)
block|{
name|ObjIsArray
operator|=
name|Value
expr_stmt|;
block|}
name|bool
name|isNonGC
argument_list|()
specifier|const
block|{
return|return
name|NonGC
return|;
block|}
name|void
name|setNonGC
parameter_list|(
name|bool
name|Value
parameter_list|)
block|{
name|NonGC
operator|=
name|Value
expr_stmt|;
block|}
name|bool
name|isGlobalObjCRef
argument_list|()
specifier|const
block|{
return|return
name|GlobalObjCRef
return|;
block|}
name|void
name|setGlobalObjCRef
parameter_list|(
name|bool
name|Value
parameter_list|)
block|{
name|GlobalObjCRef
operator|=
name|Value
expr_stmt|;
block|}
name|bool
name|isThreadLocalRef
argument_list|()
specifier|const
block|{
return|return
name|ThreadLocalRef
return|;
block|}
name|void
name|setThreadLocalRef
parameter_list|(
name|bool
name|Value
parameter_list|)
block|{
name|ThreadLocalRef
operator|=
name|Value
expr_stmt|;
block|}
name|bool
name|isObjCWeak
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|getObjCGCAttr
argument_list|()
operator|==
name|Qualifiers
operator|::
name|Weak
return|;
block|}
name|bool
name|isObjCStrong
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|getObjCGCAttr
argument_list|()
operator|==
name|Qualifiers
operator|::
name|Strong
return|;
block|}
name|bool
name|isVolatile
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|hasVolatile
argument_list|()
return|;
block|}
name|Expr
operator|*
name|getBaseIvarExp
argument_list|()
specifier|const
block|{
return|return
name|BaseIvarExp
return|;
block|}
name|void
name|setBaseIvarExp
parameter_list|(
name|Expr
modifier|*
name|V
parameter_list|)
block|{
name|BaseIvarExp
operator|=
name|V
expr_stmt|;
block|}
name|llvm
operator|::
name|MDNode
operator|*
name|getTBAAInfo
argument_list|()
specifier|const
block|{
return|return
name|TBAAInfo
return|;
block|}
name|void
name|setTBAAInfo
argument_list|(
name|llvm
operator|::
name|MDNode
operator|*
name|N
argument_list|)
block|{
name|TBAAInfo
operator|=
name|N
expr_stmt|;
block|}
specifier|const
name|Qualifiers
operator|&
name|getQuals
argument_list|()
specifier|const
block|{
return|return
name|Quals
return|;
block|}
name|Qualifiers
modifier|&
name|getQuals
parameter_list|()
block|{
return|return
name|Quals
return|;
block|}
name|unsigned
name|getAddressSpace
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|getAddressSpace
argument_list|()
return|;
block|}
name|unsigned
name|getAlignment
argument_list|()
specifier|const
block|{
return|return
name|Alignment
return|;
block|}
comment|// simple lvalue
name|llvm
operator|::
name|Value
operator|*
name|getAddress
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isSimple
argument_list|()
argument_list|)
block|;
return|return
name|V
return|;
block|}
name|void
name|setAddress
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|address
argument_list|)
block|{
name|assert
argument_list|(
name|isSimple
argument_list|()
argument_list|)
expr_stmt|;
name|V
operator|=
name|address
expr_stmt|;
block|}
comment|// vector elt lvalue
name|llvm
operator|::
name|Value
operator|*
name|getVectorAddr
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isVectorElt
argument_list|()
argument_list|)
block|;
return|return
name|V
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
name|getVectorIdx
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isVectorElt
argument_list|()
argument_list|)
block|;
return|return
name|VectorIdx
return|;
block|}
comment|// extended vector elements.
name|llvm
operator|::
name|Value
operator|*
name|getExtVectorAddr
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isExtVectorElt
argument_list|()
argument_list|)
block|;
return|return
name|V
return|;
block|}
name|llvm
operator|::
name|Constant
operator|*
name|getExtVectorElts
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isExtVectorElt
argument_list|()
argument_list|)
block|;
return|return
name|VectorElts
return|;
block|}
comment|// bitfield lvalue
name|llvm
operator|::
name|Value
operator|*
name|getBitFieldBaseAddr
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isBitField
argument_list|()
argument_list|)
block|;
return|return
name|V
return|;
block|}
specifier|const
name|CGBitFieldInfo
operator|&
name|getBitFieldInfo
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isBitField
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|BitFieldInfo
return|;
block|}
comment|// property ref lvalue
name|llvm
operator|::
name|Value
operator|*
name|getPropertyRefBaseAddr
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isPropertyRef
argument_list|()
argument_list|)
block|;
return|return
name|V
return|;
block|}
specifier|const
name|ObjCPropertyRefExpr
operator|*
name|getPropertyRefExpr
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isPropertyRef
argument_list|()
argument_list|)
block|;
return|return
name|PropertyRefExpr
return|;
block|}
specifier|static
name|LValue
name|MakeAddr
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|address
argument_list|,
name|QualType
name|type
argument_list|,
name|unsigned
name|alignment
argument_list|,
name|ASTContext
operator|&
name|Context
argument_list|,
name|llvm
operator|::
name|MDNode
operator|*
name|TBAAInfo
operator|=
literal|0
argument_list|)
block|{
name|Qualifiers
name|qs
init|=
name|type
operator|.
name|getQualifiers
argument_list|()
decl_stmt|;
name|qs
operator|.
name|setObjCGCAttr
argument_list|(
name|Context
operator|.
name|getObjCGCAttrKind
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|LValue
name|R
decl_stmt|;
name|R
operator|.
name|LVType
operator|=
name|Simple
expr_stmt|;
name|R
operator|.
name|V
operator|=
name|address
expr_stmt|;
name|R
operator|.
name|Initialize
argument_list|(
name|type
argument_list|,
name|qs
argument_list|,
name|alignment
argument_list|,
name|TBAAInfo
argument_list|)
expr_stmt|;
return|return
name|R
return|;
block|}
specifier|static
name|LValue
name|MakeVectorElt
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|Vec
argument_list|,
name|llvm
operator|::
name|Value
operator|*
name|Idx
argument_list|,
name|QualType
name|type
argument_list|)
block|{
name|LValue
name|R
decl_stmt|;
name|R
operator|.
name|LVType
operator|=
name|VectorElt
expr_stmt|;
name|R
operator|.
name|V
operator|=
name|Vec
expr_stmt|;
name|R
operator|.
name|VectorIdx
operator|=
name|Idx
expr_stmt|;
name|R
operator|.
name|Initialize
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|getQualifiers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|R
return|;
block|}
specifier|static
name|LValue
name|MakeExtVectorElt
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|Vec
argument_list|,
name|llvm
operator|::
name|Constant
operator|*
name|Elts
argument_list|,
name|QualType
name|type
argument_list|)
block|{
name|LValue
name|R
decl_stmt|;
name|R
operator|.
name|LVType
operator|=
name|ExtVectorElt
expr_stmt|;
name|R
operator|.
name|V
operator|=
name|Vec
expr_stmt|;
name|R
operator|.
name|VectorElts
operator|=
name|Elts
expr_stmt|;
name|R
operator|.
name|Initialize
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|getQualifiers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|R
return|;
block|}
comment|/// \brief Create a new object to represent a bit-field access.
comment|///
comment|/// \param BaseValue - The base address of the structure containing the
comment|/// bit-field.
comment|/// \param Info - The information describing how to perform the bit-field
comment|/// access.
specifier|static
name|LValue
name|MakeBitfield
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|BaseValue
argument_list|,
specifier|const
name|CGBitFieldInfo
operator|&
name|Info
argument_list|,
name|QualType
name|type
argument_list|)
block|{
name|LValue
name|R
decl_stmt|;
name|R
operator|.
name|LVType
operator|=
name|BitField
expr_stmt|;
name|R
operator|.
name|V
operator|=
name|BaseValue
expr_stmt|;
name|R
operator|.
name|BitFieldInfo
operator|=
operator|&
name|Info
expr_stmt|;
name|R
operator|.
name|Initialize
argument_list|(
name|type
argument_list|,
name|type
operator|.
name|getQualifiers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|R
return|;
block|}
comment|// FIXME: It is probably bad that we aren't emitting the target when we build
comment|// the lvalue. However, this complicates the code a bit, and I haven't figured
comment|// out how to make it go wrong yet.
specifier|static
name|LValue
name|MakePropertyRef
argument_list|(
specifier|const
name|ObjCPropertyRefExpr
operator|*
name|E
argument_list|,
name|llvm
operator|::
name|Value
operator|*
name|Base
argument_list|)
block|{
name|LValue
name|R
decl_stmt|;
name|R
operator|.
name|LVType
operator|=
name|PropertyRef
expr_stmt|;
name|R
operator|.
name|V
operator|=
name|Base
expr_stmt|;
name|R
operator|.
name|PropertyRefExpr
operator|=
name|E
expr_stmt|;
name|R
operator|.
name|Initialize
argument_list|(
name|QualType
argument_list|()
argument_list|,
name|Qualifiers
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|R
return|;
block|}
block|}
empty_stmt|;
comment|/// An aggregate value slot.
name|class
name|AggValueSlot
block|{
comment|/// The address.
name|llvm
operator|::
name|Value
operator|*
name|Addr
expr_stmt|;
comment|// Qualifiers
name|Qualifiers
name|Quals
decl_stmt|;
comment|// Associated flags.
name|bool
name|LifetimeFlag
range|:
literal|1
decl_stmt|;
name|bool
name|RequiresGCollection
range|:
literal|1
decl_stmt|;
comment|/// IsZeroed - This is set to true if the destination is known to be zero
comment|/// before the assignment into it.  This means that zero fields don't need to
comment|/// be set.
name|bool
name|IsZeroed
range|:
literal|1
decl_stmt|;
name|public
label|:
comment|/// ignored - Returns an aggregate value slot indicating that the
comment|/// aggregate value is being ignored.
specifier|static
name|AggValueSlot
name|ignored
parameter_list|()
block|{
name|AggValueSlot
name|AV
decl_stmt|;
name|AV
operator|.
name|Addr
operator|=
literal|0
expr_stmt|;
name|AV
operator|.
name|Quals
operator|=
name|Qualifiers
argument_list|()
expr_stmt|;
name|AV
operator|.
name|LifetimeFlag
operator|=
name|AV
operator|.
name|RequiresGCollection
operator|=
name|AV
operator|.
name|IsZeroed
operator|=
literal|0
expr_stmt|;
return|return
name|AV
return|;
block|}
comment|/// forAddr - Make a slot for an aggregate value.
comment|///
comment|/// \param Volatile - true if the slot should be volatile-initialized
comment|///
comment|/// \param Qualifiers - The qualifiers that dictate how the slot
comment|/// should be initialied. Only 'volatile' and the Objective-C
comment|/// lifetime qualifiers matter.
comment|///
comment|/// \param LifetimeExternallyManaged - true if the slot's lifetime
comment|///   is being externally managed; false if a destructor should be
comment|///   registered for any temporaries evaluated into the slot
comment|/// \param RequiresGCollection - true if the slot is located
comment|///   somewhere that ObjC GC calls should be emitted for
specifier|static
name|AggValueSlot
name|forAddr
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|Addr
argument_list|,
name|Qualifiers
name|Quals
argument_list|,
name|bool
name|LifetimeExternallyManaged
argument_list|,
name|bool
name|RequiresGCollection
operator|=
name|false
argument_list|,
name|bool
name|IsZeroed
operator|=
name|false
argument_list|)
block|{
name|AggValueSlot
name|AV
decl_stmt|;
name|AV
operator|.
name|Addr
operator|=
name|Addr
expr_stmt|;
name|AV
operator|.
name|Quals
operator|=
name|Quals
expr_stmt|;
name|AV
operator|.
name|LifetimeFlag
operator|=
name|LifetimeExternallyManaged
expr_stmt|;
name|AV
operator|.
name|RequiresGCollection
operator|=
name|RequiresGCollection
expr_stmt|;
name|AV
operator|.
name|IsZeroed
operator|=
name|IsZeroed
expr_stmt|;
return|return
name|AV
return|;
block|}
specifier|static
name|AggValueSlot
name|forLValue
parameter_list|(
name|LValue
name|LV
parameter_list|,
name|bool
name|LifetimeExternallyManaged
parameter_list|,
name|bool
name|RequiresGCollection
init|=
name|false
parameter_list|,
name|bool
name|IsZeroed
init|=
name|false
parameter_list|)
block|{
return|return
name|forAddr
argument_list|(
name|LV
operator|.
name|getAddress
argument_list|()
argument_list|,
name|LV
operator|.
name|getQuals
argument_list|()
argument_list|,
name|LifetimeExternallyManaged
argument_list|,
name|RequiresGCollection
argument_list|,
name|IsZeroed
argument_list|)
return|;
block|}
name|bool
name|isLifetimeExternallyManaged
argument_list|()
specifier|const
block|{
return|return
name|LifetimeFlag
return|;
block|}
name|void
name|setLifetimeExternallyManaged
parameter_list|(
name|bool
name|Managed
init|=
name|true
parameter_list|)
block|{
name|LifetimeFlag
operator|=
name|Managed
expr_stmt|;
block|}
name|Qualifiers
name|getQualifiers
argument_list|()
specifier|const
block|{
return|return
name|Quals
return|;
block|}
name|bool
name|isVolatile
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|hasVolatile
argument_list|()
return|;
block|}
name|Qualifiers
operator|::
name|ObjCLifetime
name|getObjCLifetime
argument_list|()
specifier|const
block|{
return|return
name|Quals
operator|.
name|getObjCLifetime
argument_list|()
return|;
block|}
name|bool
name|requiresGCollection
argument_list|()
specifier|const
block|{
return|return
name|RequiresGCollection
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
name|getAddr
argument_list|()
specifier|const
block|{
return|return
name|Addr
return|;
block|}
name|bool
name|isIgnored
argument_list|()
specifier|const
block|{
return|return
name|Addr
operator|==
literal|0
return|;
block|}
name|RValue
name|asRValue
argument_list|()
specifier|const
block|{
return|return
name|RValue
operator|::
name|getAggregate
argument_list|(
name|getAddr
argument_list|()
argument_list|,
name|isVolatile
argument_list|()
argument_list|)
return|;
block|}
name|void
name|setZeroed
parameter_list|(
name|bool
name|V
init|=
name|true
parameter_list|)
block|{
name|IsZeroed
operator|=
name|V
expr_stmt|;
block|}
name|bool
name|isZeroed
argument_list|()
specifier|const
block|{
return|return
name|IsZeroed
return|;
block|}
block|}
empty_stmt|;
block|}
comment|// end namespace CodeGen
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

