begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----- CGCall.h - Encapsulate calling convention details ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These classes wrap the information about a call or function
end_comment

begin_comment
comment|// definition used to handle ABI compliancy.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_CODEGEN_CGCALL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_CODEGEN_CGCALL_H
end_define

begin_include
include|#
directive|include
file|"CGValue.h"
end_include

begin_include
include|#
directive|include
file|"EHScopeStack.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CanonicalType.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Value.h"
end_include

begin_comment
comment|// FIXME: Restructure so we don't have to expose so much stuff.
end_comment

begin_include
include|#
directive|include
file|"ABIInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AttributeSet
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|ObjCMethodDecl
decl_stmt|;
name|class
name|VarDecl
decl_stmt|;
name|namespace
name|CodeGen
block|{
typedef|typedef
name|SmallVector
operator|<
name|llvm
operator|::
name|AttributeSet
operator|,
literal|8
operator|>
name|AttributeListType
expr_stmt|;
comment|/// Abstract information about a function or function prototype.
name|class
name|CGCalleeInfo
block|{
comment|/// \brief The function prototype of the callee.
specifier|const
name|FunctionProtoType
modifier|*
name|CalleeProtoTy
decl_stmt|;
comment|/// \brief The function declaration of the callee.
specifier|const
name|Decl
modifier|*
name|CalleeDecl
decl_stmt|;
name|public
label|:
name|explicit
name|CGCalleeInfo
argument_list|()
operator|:
name|CalleeProtoTy
argument_list|(
name|nullptr
argument_list|)
operator|,
name|CalleeDecl
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|CGCalleeInfo
argument_list|(
specifier|const
name|FunctionProtoType
operator|*
name|calleeProtoTy
argument_list|,
specifier|const
name|Decl
operator|*
name|calleeDecl
argument_list|)
operator|:
name|CalleeProtoTy
argument_list|(
name|calleeProtoTy
argument_list|)
operator|,
name|CalleeDecl
argument_list|(
argument|calleeDecl
argument_list|)
block|{}
name|CGCalleeInfo
argument_list|(
specifier|const
name|FunctionProtoType
operator|*
name|calleeProtoTy
argument_list|)
operator|:
name|CalleeProtoTy
argument_list|(
name|calleeProtoTy
argument_list|)
operator|,
name|CalleeDecl
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|CGCalleeInfo
argument_list|(
specifier|const
name|Decl
operator|*
name|calleeDecl
argument_list|)
operator|:
name|CalleeProtoTy
argument_list|(
name|nullptr
argument_list|)
operator|,
name|CalleeDecl
argument_list|(
argument|calleeDecl
argument_list|)
block|{}
specifier|const
name|FunctionProtoType
operator|*
name|getCalleeFunctionProtoType
argument_list|()
specifier|const
block|{
return|return
name|CalleeProtoTy
return|;
block|}
specifier|const
name|Decl
operator|*
name|getCalleeDecl
argument_list|()
specifier|const
block|{
return|return
name|CalleeDecl
return|;
block|}
block|}
empty_stmt|;
comment|/// All available information about a concrete callee.
name|class
name|CGCallee
block|{
name|enum
name|class
name|SpecialKind
range|:
name|uintptr_t
block|{
name|Invalid
block|,
name|Builtin
block|,
name|PseudoDestructor
block|,
name|Last
operator|=
name|PseudoDestructor
block|}
decl_stmt|;
struct|struct
name|BuiltinInfoStorage
block|{
specifier|const
name|FunctionDecl
modifier|*
name|Decl
decl_stmt|;
name|unsigned
name|ID
decl_stmt|;
block|}
struct|;
struct|struct
name|PseudoDestructorInfoStorage
block|{
specifier|const
name|CXXPseudoDestructorExpr
modifier|*
name|Expr
decl_stmt|;
block|}
struct|;
name|SpecialKind
name|KindOrFunctionPointer
decl_stmt|;
union|union
block|{
name|CGCalleeInfo
name|AbstractInfo
decl_stmt|;
name|BuiltinInfoStorage
name|BuiltinInfo
decl_stmt|;
name|PseudoDestructorInfoStorage
name|PseudoDestructorInfo
decl_stmt|;
block|}
union|;
name|explicit
name|CGCallee
argument_list|(
argument|SpecialKind kind
argument_list|)
block|:
name|KindOrFunctionPointer
argument_list|(
argument|kind
argument_list|)
block|{}
name|CGCallee
argument_list|(
argument|const FunctionDecl *builtinDecl
argument_list|,
argument|unsigned builtinID
argument_list|)
block|:
name|KindOrFunctionPointer
argument_list|(
argument|SpecialKind::Builtin
argument_list|)
block|{
name|BuiltinInfo
operator|.
name|Decl
operator|=
name|builtinDecl
expr_stmt|;
name|BuiltinInfo
operator|.
name|ID
operator|=
name|builtinID
expr_stmt|;
block|}
name|public
label|:
name|CGCallee
argument_list|()
operator|:
name|KindOrFunctionPointer
argument_list|(
argument|SpecialKind::Invalid
argument_list|)
block|{}
comment|/// Construct a callee.  Call this constructor directly when this
comment|/// isn't a direct call.
name|CGCallee
argument_list|(
specifier|const
name|CGCalleeInfo
operator|&
name|abstractInfo
argument_list|,
name|llvm
operator|::
name|Value
operator|*
name|functionPtr
argument_list|)
operator|:
name|KindOrFunctionPointer
argument_list|(
argument|SpecialKind(uintptr_t(functionPtr))
argument_list|)
block|{
name|AbstractInfo
operator|=
name|abstractInfo
block|;
name|assert
argument_list|(
name|functionPtr
operator|&&
literal|"configuring callee without function pointer"
argument_list|)
block|;
name|assert
argument_list|(
name|functionPtr
operator|->
name|getType
argument_list|()
operator|->
name|isPointerTy
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|functionPtr
operator|->
name|getType
argument_list|()
operator|->
name|getPointerElementType
argument_list|()
operator|->
name|isFunctionTy
argument_list|()
argument_list|)
block|;     }
specifier|static
name|CGCallee
name|forBuiltin
argument_list|(
argument|unsigned builtinID
argument_list|,
argument|const FunctionDecl *builtinDecl
argument_list|)
block|{
name|CGCallee
name|result
argument_list|(
name|SpecialKind
operator|::
name|Builtin
argument_list|)
block|;
name|result
operator|.
name|BuiltinInfo
operator|.
name|Decl
operator|=
name|builtinDecl
block|;
name|result
operator|.
name|BuiltinInfo
operator|.
name|ID
operator|=
name|builtinID
block|;
return|return
name|result
return|;
block|}
specifier|static
name|CGCallee
name|forPseudoDestructor
parameter_list|(
specifier|const
name|CXXPseudoDestructorExpr
modifier|*
name|E
parameter_list|)
block|{
name|CGCallee
name|result
argument_list|(
name|SpecialKind
operator|::
name|PseudoDestructor
argument_list|)
decl_stmt|;
name|result
operator|.
name|PseudoDestructorInfo
operator|.
name|Expr
operator|=
name|E
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
name|CGCallee
name|forDirect
argument_list|(
name|llvm
operator|::
name|Constant
operator|*
name|functionPtr
argument_list|,
specifier|const
name|CGCalleeInfo
operator|&
name|abstractInfo
operator|=
name|CGCalleeInfo
argument_list|()
argument_list|)
block|{
return|return
name|CGCallee
argument_list|(
name|abstractInfo
argument_list|,
name|functionPtr
argument_list|)
return|;
block|}
name|bool
name|isBuiltin
argument_list|()
specifier|const
block|{
return|return
name|KindOrFunctionPointer
operator|==
name|SpecialKind
operator|::
name|Builtin
return|;
block|}
specifier|const
name|FunctionDecl
operator|*
name|getBuiltinDecl
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isBuiltin
argument_list|()
argument_list|)
block|;
return|return
name|BuiltinInfo
operator|.
name|Decl
return|;
block|}
name|unsigned
name|getBuiltinID
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isBuiltin
argument_list|()
argument_list|)
block|;
return|return
name|BuiltinInfo
operator|.
name|ID
return|;
block|}
name|bool
name|isPseudoDestructor
argument_list|()
specifier|const
block|{
return|return
name|KindOrFunctionPointer
operator|==
name|SpecialKind
operator|::
name|PseudoDestructor
return|;
block|}
specifier|const
name|CXXPseudoDestructorExpr
operator|*
name|getPseudoDestructorExpr
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isPseudoDestructor
argument_list|()
argument_list|)
block|;
return|return
name|PseudoDestructorInfo
operator|.
name|Expr
return|;
block|}
name|bool
name|isOrdinary
argument_list|()
specifier|const
block|{
return|return
name|uintptr_t
argument_list|(
name|KindOrFunctionPointer
argument_list|)
operator|>
name|uintptr_t
argument_list|(
name|SpecialKind
operator|::
name|Last
argument_list|)
return|;
block|}
specifier|const
name|CGCalleeInfo
operator|&
name|getAbstractInfo
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isOrdinary
argument_list|()
argument_list|)
block|;
return|return
name|AbstractInfo
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
name|getFunctionPointer
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isOrdinary
argument_list|()
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|>
operator|(
name|uintptr_t
argument_list|(
name|KindOrFunctionPointer
argument_list|)
operator|)
return|;
block|}
name|llvm
operator|::
name|FunctionType
operator|*
name|getFunctionType
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|llvm
operator|::
name|FunctionType
operator|>
operator|(
name|getFunctionPointer
argument_list|()
operator|->
name|getType
argument_list|()
operator|->
name|getPointerElementType
argument_list|()
operator|)
return|;
block|}
name|void
name|setFunctionPointer
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|functionPtr
argument_list|)
block|{
name|assert
argument_list|(
name|isOrdinary
argument_list|()
argument_list|)
expr_stmt|;
name|KindOrFunctionPointer
operator|=
name|SpecialKind
argument_list|(
name|uintptr_t
argument_list|(
name|functionPtr
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
struct|struct
name|CallArg
block|{
name|RValue
name|RV
decl_stmt|;
name|QualType
name|Ty
decl_stmt|;
name|bool
name|NeedsCopy
decl_stmt|;
name|CallArg
argument_list|(
argument|RValue rv
argument_list|,
argument|QualType ty
argument_list|,
argument|bool needscopy
argument_list|)
block|:
name|RV
argument_list|(
name|rv
argument_list|)
operator|,
name|Ty
argument_list|(
name|ty
argument_list|)
operator|,
name|NeedsCopy
argument_list|(
argument|needscopy
argument_list|)
block|{ }
block|}
struct|;
comment|/// CallArgList - Type for representing both the value and type of
comment|/// arguments in a call.
name|class
name|CallArgList
range|:
name|public
name|SmallVector
operator|<
name|CallArg
decl_stmt|, 16>
block|{
name|public
label|:
name|CallArgList
argument_list|()
operator|:
name|StackBase
argument_list|(
argument|nullptr
argument_list|)
block|{}
expr|struct
name|Writeback
block|{
comment|/// The original argument.  Note that the argument l-value
comment|/// is potentially null.
name|LValue
name|Source
block|;
comment|/// The temporary alloca.
name|Address
name|Temporary
block|;
comment|/// A value to "use" after the writeback, or null.
name|llvm
operator|::
name|Value
operator|*
name|ToUse
block|;     }
expr_stmt|;
struct|struct
name|CallArgCleanup
block|{
name|EHScopeStack
operator|::
name|stable_iterator
name|Cleanup
expr_stmt|;
comment|/// The "is active" insertion point.  This instruction is temporary and
comment|/// will be removed after insertion.
name|llvm
operator|::
name|Instruction
operator|*
name|IsActiveIP
expr_stmt|;
block|}
struct|;
name|void
name|add
parameter_list|(
name|RValue
name|rvalue
parameter_list|,
name|QualType
name|type
parameter_list|,
name|bool
name|needscopy
init|=
name|false
parameter_list|)
block|{
name|push_back
argument_list|(
name|CallArg
argument_list|(
name|rvalue
argument_list|,
name|type
argument_list|,
name|needscopy
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// Add all the arguments from another CallArgList to this one. After doing
comment|/// this, the old CallArgList retains its list of arguments, but must not
comment|/// be used to emit a call.
name|void
name|addFrom
parameter_list|(
specifier|const
name|CallArgList
modifier|&
name|other
parameter_list|)
block|{
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|other
operator|.
name|begin
argument_list|()
argument_list|,
name|other
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Writebacks
operator|.
name|insert
argument_list|(
name|Writebacks
operator|.
name|end
argument_list|()
argument_list|,
name|other
operator|.
name|Writebacks
operator|.
name|begin
argument_list|()
argument_list|,
name|other
operator|.
name|Writebacks
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|CleanupsToDeactivate
operator|.
name|insert
argument_list|(
name|CleanupsToDeactivate
operator|.
name|end
argument_list|()
argument_list|,
name|other
operator|.
name|CleanupsToDeactivate
operator|.
name|begin
argument_list|()
argument_list|,
name|other
operator|.
name|CleanupsToDeactivate
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
operator|(
name|StackBase
operator|&&
name|other
operator|.
name|StackBase
operator|)
operator|&&
literal|"can't merge stackbases"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|StackBase
condition|)
name|StackBase
operator|=
name|other
operator|.
name|StackBase
expr_stmt|;
block|}
name|void
name|addWriteback
argument_list|(
name|LValue
name|srcLV
argument_list|,
name|Address
name|temporary
argument_list|,
name|llvm
operator|::
name|Value
operator|*
name|toUse
argument_list|)
block|{
name|Writeback
name|writeback
init|=
block|{
name|srcLV
block|,
name|temporary
block|,
name|toUse
block|}
decl_stmt|;
name|Writebacks
operator|.
name|push_back
argument_list|(
name|writeback
argument_list|)
expr_stmt|;
block|}
name|bool
name|hasWritebacks
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Writebacks
operator|.
name|empty
argument_list|()
return|;
block|}
typedef|typedef
name|llvm
operator|::
name|iterator_range
operator|<
name|SmallVectorImpl
operator|<
name|Writeback
operator|>
operator|::
name|const_iterator
operator|>
name|writeback_const_range
expr_stmt|;
name|writeback_const_range
name|writebacks
argument_list|()
specifier|const
block|{
return|return
name|writeback_const_range
argument_list|(
name|Writebacks
operator|.
name|begin
argument_list|()
argument_list|,
name|Writebacks
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|void
name|addArgCleanupDeactivation
argument_list|(
name|EHScopeStack
operator|::
name|stable_iterator
name|Cleanup
argument_list|,
name|llvm
operator|::
name|Instruction
operator|*
name|IsActiveIP
argument_list|)
block|{
name|CallArgCleanup
name|ArgCleanup
decl_stmt|;
name|ArgCleanup
operator|.
name|Cleanup
operator|=
name|Cleanup
expr_stmt|;
name|ArgCleanup
operator|.
name|IsActiveIP
operator|=
name|IsActiveIP
expr_stmt|;
name|CleanupsToDeactivate
operator|.
name|push_back
argument_list|(
name|ArgCleanup
argument_list|)
expr_stmt|;
block|}
name|ArrayRef
operator|<
name|CallArgCleanup
operator|>
name|getCleanupsToDeactivate
argument_list|()
specifier|const
block|{
return|return
name|CleanupsToDeactivate
return|;
block|}
name|void
name|allocateArgumentMemory
parameter_list|(
name|CodeGenFunction
modifier|&
name|CGF
parameter_list|)
function_decl|;
name|llvm
operator|::
name|Instruction
operator|*
name|getStackBase
argument_list|()
specifier|const
block|{
return|return
name|StackBase
return|;
block|}
name|void
name|freeArgumentMemory
argument_list|(
name|CodeGenFunction
operator|&
name|CGF
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Returns if we're using an inalloca struct to pass arguments in
comment|/// memory.
name|bool
name|isUsingInAlloca
argument_list|()
specifier|const
block|{
return|return
name|StackBase
return|;
block|}
name|private
label|:
name|SmallVector
operator|<
name|Writeback
operator|,
literal|1
operator|>
name|Writebacks
expr_stmt|;
comment|/// Deactivate these cleanups immediately before making the call.  This
comment|/// is used to cleanup objects that are owned by the callee once the call
comment|/// occurs.
name|SmallVector
operator|<
name|CallArgCleanup
operator|,
literal|1
operator|>
name|CleanupsToDeactivate
expr_stmt|;
comment|/// The stacksave call.  It dominates all of the argument evaluation.
name|llvm
operator|::
name|CallInst
operator|*
name|StackBase
expr_stmt|;
block|}
empty_stmt|;
comment|/// FunctionArgList - Type for representing both the decl and type
comment|/// of parameters to a function. The decl must be either a
comment|/// ParmVarDecl or ImplicitParamDecl.
name|class
name|FunctionArgList
range|:
name|public
name|SmallVector
operator|<
specifier|const
name|VarDecl
operator|*
decl_stmt|, 16>
block|{   }
empty_stmt|;
comment|/// ReturnValueSlot - Contains the address where the return value of a
comment|/// function can be stored, and whether the address is volatile or not.
name|class
name|ReturnValueSlot
block|{
name|llvm
operator|::
name|PointerIntPair
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|,
literal|2
operator|,
name|unsigned
name|int
operator|>
name|Value
expr_stmt|;
name|CharUnits
name|Alignment
decl_stmt|;
comment|// Return value slot flags
enum|enum
name|Flags
block|{
name|IS_VOLATILE
init|=
literal|0x1
block|,
name|IS_UNUSED
init|=
literal|0x2
block|,     }
enum|;
name|public
label|:
name|ReturnValueSlot
argument_list|()
block|{}
name|ReturnValueSlot
argument_list|(
argument|Address Addr
argument_list|,
argument|bool IsVolatile
argument_list|,
argument|bool IsUnused = false
argument_list|)
block|:
name|Value
argument_list|(
name|Addr
operator|.
name|isValid
argument_list|()
condition|?
name|Addr
operator|.
name|getPointer
argument_list|()
else|:
name|nullptr
argument_list|,
operator|(
name|IsVolatile
condition|?
name|IS_VOLATILE
else|:
literal|0
operator|)
operator||
operator|(
name|IsUnused
condition|?
name|IS_UNUSED
else|:
literal|0
operator|)
argument_list|)
operator|,
name|Alignment
argument_list|(
argument|Addr.isValid() ? Addr.getAlignment() : CharUnits::Zero()
argument_list|)
block|{}
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
operator|!
name|getValue
argument_list|()
operator|.
name|isValid
argument_list|()
return|;
block|}
name|bool
name|isVolatile
argument_list|()
specifier|const
block|{
return|return
name|Value
operator|.
name|getInt
argument_list|()
operator|&
name|IS_VOLATILE
return|;
block|}
name|Address
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Address
argument_list|(
name|Value
operator|.
name|getPointer
argument_list|()
argument_list|,
name|Alignment
argument_list|)
return|;
block|}
name|bool
name|isUnused
argument_list|()
specifier|const
block|{
return|return
name|Value
operator|.
name|getInt
argument_list|()
operator|&
name|IS_UNUSED
return|;
block|}
block|}
empty_stmt|;
block|}
comment|// end namespace CodeGen
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

