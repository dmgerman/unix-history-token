begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----- CGCall.h - Encapsulate calling convention details ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These classes wrap the information about a call or function
end_comment

begin_comment
comment|// definition used to handle ABI compliancy.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_CODEGEN_CGCALL_H
end_ifndef

begin_define
define|#
directive|define
name|CLANG_CODEGEN_CGCALL_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Value.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CanonicalType.h"
end_include

begin_include
include|#
directive|include
file|"CGValue.h"
end_include

begin_comment
comment|// FIXME: Restructure so we don't have to expose so much stuff.
end_comment

begin_include
include|#
directive|include
file|"ABIInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
struct_decl|struct
name|AttributeWithIndex
struct_decl|;
name|class
name|Function
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|,
name|unsigned
operator|>
name|class
name|SmallVector
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|ObjCMethodDecl
decl_stmt|;
name|class
name|VarDecl
decl_stmt|;
name|namespace
name|CodeGen
block|{
typedef|typedef
name|SmallVector
operator|<
name|llvm
operator|::
name|AttributeWithIndex
operator|,
literal|8
operator|>
name|AttributeListType
expr_stmt|;
struct|struct
name|CallArg
block|{
name|RValue
name|RV
decl_stmt|;
name|QualType
name|Ty
decl_stmt|;
name|bool
name|NeedsCopy
decl_stmt|;
name|CallArg
argument_list|(
argument|RValue rv
argument_list|,
argument|QualType ty
argument_list|,
argument|bool needscopy
argument_list|)
block|:
name|RV
argument_list|(
name|rv
argument_list|)
operator|,
name|Ty
argument_list|(
name|ty
argument_list|)
operator|,
name|NeedsCopy
argument_list|(
argument|needscopy
argument_list|)
block|{ }
block|}
struct|;
comment|/// CallArgList - Type for representing both the value and type of
comment|/// arguments in a call.
name|class
name|CallArgList
range|:
name|public
name|SmallVector
operator|<
name|CallArg
decl_stmt|, 16>
block|{
name|public
label|:
struct|struct
name|Writeback
block|{
comment|/// The original argument.
name|llvm
operator|::
name|Value
operator|*
name|Address
expr_stmt|;
comment|/// The pointee type of the original argument.
name|QualType
name|AddressType
decl_stmt|;
comment|/// The temporary alloca.
name|llvm
operator|::
name|Value
operator|*
name|Temporary
expr_stmt|;
block|}
struct|;
name|void
name|add
parameter_list|(
name|RValue
name|rvalue
parameter_list|,
name|QualType
name|type
parameter_list|,
name|bool
name|needscopy
init|=
name|false
parameter_list|)
block|{
name|push_back
argument_list|(
name|CallArg
argument_list|(
name|rvalue
argument_list|,
name|type
argument_list|,
name|needscopy
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|addFrom
parameter_list|(
specifier|const
name|CallArgList
modifier|&
name|other
parameter_list|)
block|{
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|other
operator|.
name|begin
argument_list|()
argument_list|,
name|other
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Writebacks
operator|.
name|insert
argument_list|(
name|Writebacks
operator|.
name|end
argument_list|()
argument_list|,
name|other
operator|.
name|Writebacks
operator|.
name|begin
argument_list|()
argument_list|,
name|other
operator|.
name|Writebacks
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|addWriteback
argument_list|(
name|llvm
operator|::
name|Value
operator|*
name|address
argument_list|,
name|QualType
name|addressType
argument_list|,
name|llvm
operator|::
name|Value
operator|*
name|temporary
argument_list|)
block|{
name|Writeback
name|writeback
decl_stmt|;
name|writeback
operator|.
name|Address
operator|=
name|address
expr_stmt|;
name|writeback
operator|.
name|AddressType
operator|=
name|addressType
expr_stmt|;
name|writeback
operator|.
name|Temporary
operator|=
name|temporary
expr_stmt|;
name|Writebacks
operator|.
name|push_back
argument_list|(
name|writeback
argument_list|)
expr_stmt|;
block|}
name|bool
name|hasWritebacks
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Writebacks
operator|.
name|empty
argument_list|()
return|;
block|}
typedef|typedef
name|SmallVectorImpl
operator|<
name|Writeback
operator|>
operator|::
name|const_iterator
name|writeback_iterator
expr_stmt|;
name|writeback_iterator
name|writeback_begin
argument_list|()
specifier|const
block|{
return|return
name|Writebacks
operator|.
name|begin
argument_list|()
return|;
block|}
name|writeback_iterator
name|writeback_end
argument_list|()
specifier|const
block|{
return|return
name|Writebacks
operator|.
name|end
argument_list|()
return|;
block|}
name|private
label|:
name|SmallVector
operator|<
name|Writeback
operator|,
literal|1
operator|>
name|Writebacks
expr_stmt|;
block|}
empty_stmt|;
comment|/// A class for recording the number of arguments that a function
comment|/// signature requires.
name|class
name|RequiredArgs
block|{
comment|/// The number of required arguments, or ~0 if the signature does
comment|/// not permit optional arguments.
name|unsigned
name|NumRequired
decl_stmt|;
name|public
label|:
enum|enum
name|All_t
block|{
name|All
block|}
enum|;
name|RequiredArgs
argument_list|(
argument|All_t _
argument_list|)
block|:
name|NumRequired
argument_list|(
argument|~
literal|0U
argument_list|)
block|{}
name|explicit
name|RequiredArgs
argument_list|(
argument|unsigned n
argument_list|)
block|:
name|NumRequired
argument_list|(
argument|n
argument_list|)
block|{
name|assert
argument_list|(
name|n
operator|!=
operator|~
literal|0U
argument_list|)
expr_stmt|;
block|}
comment|/// Compute the arguments required by the given formal prototype,
comment|/// given that there may be some additional, non-formal arguments
comment|/// in play.
specifier|static
name|RequiredArgs
name|forPrototypePlus
parameter_list|(
specifier|const
name|FunctionProtoType
modifier|*
name|prototype
parameter_list|,
name|unsigned
name|additional
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prototype
operator|->
name|isVariadic
argument_list|()
condition|)
return|return
name|All
return|;
return|return
name|RequiredArgs
argument_list|(
name|prototype
operator|->
name|getNumArgs
argument_list|()
operator|+
name|additional
argument_list|)
return|;
block|}
specifier|static
name|RequiredArgs
name|forPrototype
parameter_list|(
specifier|const
name|FunctionProtoType
modifier|*
name|prototype
parameter_list|)
block|{
return|return
name|forPrototypePlus
argument_list|(
name|prototype
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|static
name|RequiredArgs
name|forPrototype
argument_list|(
name|CanQual
operator|<
name|FunctionProtoType
operator|>
name|prototype
argument_list|)
block|{
return|return
name|forPrototype
argument_list|(
name|prototype
operator|.
name|getTypePtr
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|RequiredArgs
name|forPrototypePlus
argument_list|(
name|CanQual
operator|<
name|FunctionProtoType
operator|>
name|prototype
argument_list|,
name|unsigned
name|additional
argument_list|)
block|{
return|return
name|forPrototypePlus
argument_list|(
name|prototype
operator|.
name|getTypePtr
argument_list|()
argument_list|,
name|additional
argument_list|)
return|;
block|}
name|bool
name|allowsOptionalArgs
argument_list|()
specifier|const
block|{
return|return
name|NumRequired
operator|!=
operator|~
literal|0U
return|;
block|}
name|bool
name|getNumRequiredArgs
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|allowsOptionalArgs
argument_list|()
argument_list|)
block|;
return|return
name|NumRequired
return|;
block|}
name|unsigned
name|getOpaqueData
argument_list|()
specifier|const
block|{
return|return
name|NumRequired
return|;
block|}
specifier|static
name|RequiredArgs
name|getFromOpaqueData
parameter_list|(
name|unsigned
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
operator|~
literal|0U
condition|)
return|return
name|All
return|;
return|return
name|RequiredArgs
argument_list|(
name|value
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|/// FunctionArgList - Type for representing both the decl and type
comment|/// of parameters to a function. The decl must be either a
comment|/// ParmVarDecl or ImplicitParamDecl.
name|class
name|FunctionArgList
range|:
name|public
name|SmallVector
operator|<
specifier|const
name|VarDecl
operator|*
decl_stmt|, 16>
block|{   }
empty_stmt|;
comment|/// CGFunctionInfo - Class to encapsulate the information about a
comment|/// function definition.
name|class
name|CGFunctionInfo
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{     struct
name|ArgInfo
block|{
name|CanQualType
name|type
block|;
name|ABIArgInfo
name|info
block|;     }
block|;
comment|/// The LLVM::CallingConv to use for this function (as specified by the
comment|/// user).
name|unsigned
name|CallingConvention
operator|:
literal|8
block|;
comment|/// The LLVM::CallingConv to actually use for this function, which may
comment|/// depend on the ABI.
name|unsigned
name|EffectiveCallingConvention
operator|:
literal|8
block|;
comment|/// The clang::CallingConv that this was originally created with.
name|unsigned
name|ASTCallingConvention
operator|:
literal|8
block|;
comment|/// Whether this function is noreturn.
name|unsigned
name|NoReturn
operator|:
literal|1
block|;
comment|/// Whether this function is returns-retained.
name|unsigned
name|ReturnsRetained
operator|:
literal|1
block|;
comment|/// How many arguments to pass inreg.
name|unsigned
name|HasRegParm
operator|:
literal|1
block|;
name|unsigned
name|RegParm
operator|:
literal|4
block|;
name|RequiredArgs
name|Required
block|;
name|unsigned
name|NumArgs
block|;
name|ArgInfo
operator|*
name|getArgsBuffer
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|ArgInfo
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
specifier|const
name|ArgInfo
operator|*
name|getArgsBuffer
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|ArgInfo
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|CGFunctionInfo
argument_list|()
operator|:
name|Required
argument_list|(
argument|RequiredArgs::All
argument_list|)
block|{}
name|public
operator|:
specifier|static
name|CGFunctionInfo
operator|*
name|create
argument_list|(
argument|unsigned llvmCC
argument_list|,
argument|const FunctionType::ExtInfo&extInfo
argument_list|,
argument|CanQualType resultType
argument_list|,
argument|ArrayRef<CanQualType> argTypes
argument_list|,
argument|RequiredArgs required
argument_list|)
block|;
typedef|typedef
specifier|const
name|ArgInfo
modifier|*
name|const_arg_iterator
typedef|;
typedef|typedef
name|ArgInfo
modifier|*
name|arg_iterator
typedef|;
name|const_arg_iterator
name|arg_begin
argument_list|()
specifier|const
block|{
return|return
name|getArgsBuffer
argument_list|()
operator|+
literal|1
return|;
block|}
name|const_arg_iterator
name|arg_end
argument_list|()
specifier|const
block|{
return|return
name|getArgsBuffer
argument_list|()
operator|+
literal|1
operator|+
name|NumArgs
return|;
block|}
name|arg_iterator
name|arg_begin
parameter_list|()
block|{
return|return
name|getArgsBuffer
argument_list|()
operator|+
literal|1
return|;
block|}
name|arg_iterator
name|arg_end
parameter_list|()
block|{
return|return
name|getArgsBuffer
argument_list|()
operator|+
literal|1
operator|+
name|NumArgs
return|;
block|}
name|unsigned
name|arg_size
argument_list|()
specifier|const
block|{
return|return
name|NumArgs
return|;
block|}
name|bool
name|isVariadic
argument_list|()
specifier|const
block|{
return|return
name|Required
operator|.
name|allowsOptionalArgs
argument_list|()
return|;
block|}
name|RequiredArgs
name|getRequiredArgs
argument_list|()
specifier|const
block|{
return|return
name|Required
return|;
block|}
name|bool
name|isNoReturn
argument_list|()
specifier|const
block|{
return|return
name|NoReturn
return|;
block|}
comment|/// In ARC, whether this function retains its return value.  This
comment|/// is not always reliable for call sites.
name|bool
name|isReturnsRetained
argument_list|()
specifier|const
block|{
return|return
name|ReturnsRetained
return|;
block|}
comment|/// getASTCallingConvention() - Return the AST-specified calling
comment|/// convention.
name|CallingConv
name|getASTCallingConvention
argument_list|()
specifier|const
block|{
return|return
name|CallingConv
argument_list|(
name|ASTCallingConvention
argument_list|)
return|;
block|}
comment|/// getCallingConvention - Return the user specified calling
comment|/// convention, which has been translated into an LLVM CC.
name|unsigned
name|getCallingConvention
argument_list|()
specifier|const
block|{
return|return
name|CallingConvention
return|;
block|}
comment|/// getEffectiveCallingConvention - Return the actual calling convention to
comment|/// use, which may depend on the ABI.
name|unsigned
name|getEffectiveCallingConvention
argument_list|()
specifier|const
block|{
return|return
name|EffectiveCallingConvention
return|;
block|}
name|void
name|setEffectiveCallingConvention
parameter_list|(
name|unsigned
name|Value
parameter_list|)
block|{
name|EffectiveCallingConvention
operator|=
name|Value
expr_stmt|;
block|}
name|bool
name|getHasRegParm
argument_list|()
specifier|const
block|{
return|return
name|HasRegParm
return|;
block|}
name|unsigned
name|getRegParm
argument_list|()
specifier|const
block|{
return|return
name|RegParm
return|;
block|}
name|FunctionType
operator|::
name|ExtInfo
name|getExtInfo
argument_list|()
specifier|const
block|{
return|return
name|FunctionType
operator|::
name|ExtInfo
argument_list|(
name|isNoReturn
argument_list|()
argument_list|,
name|getHasRegParm
argument_list|()
argument_list|,
name|getRegParm
argument_list|()
argument_list|,
name|getASTCallingConvention
argument_list|()
argument_list|,
name|isReturnsRetained
argument_list|()
argument_list|)
return|;
block|}
name|CanQualType
name|getReturnType
argument_list|()
specifier|const
block|{
return|return
name|getArgsBuffer
argument_list|()
index|[
literal|0
index|]
operator|.
name|type
return|;
block|}
name|ABIArgInfo
modifier|&
name|getReturnInfo
parameter_list|()
block|{
return|return
name|getArgsBuffer
argument_list|()
index|[
literal|0
index|]
operator|.
name|info
return|;
block|}
specifier|const
name|ABIArgInfo
operator|&
name|getReturnInfo
argument_list|()
specifier|const
block|{
return|return
name|getArgsBuffer
argument_list|()
index|[
literal|0
index|]
operator|.
name|info
return|;
block|}
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
name|getASTCallingConvention
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|NoReturn
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|ReturnsRetained
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|HasRegParm
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddInteger
argument_list|(
name|RegParm
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddInteger
argument_list|(
name|Required
operator|.
name|getOpaqueData
argument_list|()
argument_list|)
expr_stmt|;
name|getReturnType
argument_list|()
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
for|for
control|(
name|arg_iterator
name|it
init|=
name|arg_begin
argument_list|()
init|,
name|ie
init|=
name|arg_end
argument_list|()
init|;
name|it
operator|!=
name|ie
condition|;
operator|++
name|it
control|)
name|it
operator|->
name|type
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
specifier|const
name|FunctionType
operator|::
name|ExtInfo
operator|&
name|info
argument_list|,
name|RequiredArgs
name|required
argument_list|,
name|CanQualType
name|resultType
argument_list|,
name|ArrayRef
operator|<
name|CanQualType
operator|>
name|argTypes
argument_list|)
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
name|info
operator|.
name|getCC
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|info
operator|.
name|getNoReturn
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|info
operator|.
name|getProducesResult
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddBoolean
argument_list|(
name|info
operator|.
name|getHasRegParm
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddInteger
argument_list|(
name|info
operator|.
name|getRegParm
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddInteger
argument_list|(
name|required
operator|.
name|getOpaqueData
argument_list|()
argument_list|)
expr_stmt|;
name|resultType
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
for|for
control|(
name|ArrayRef
operator|<
name|CanQualType
operator|>
operator|::
name|iterator
name|i
operator|=
name|argTypes
operator|.
name|begin
argument_list|()
operator|,
name|e
operator|=
name|argTypes
operator|.
name|end
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
name|i
operator|->
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
block|}
empty_stmt|;
comment|/// ReturnValueSlot - Contains the address where the return value of a
comment|/// function can be stored, and whether the address is volatile or not.
name|class
name|ReturnValueSlot
block|{
name|llvm
operator|::
name|PointerIntPair
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|,
literal|1
operator|,
name|bool
operator|>
name|Value
expr_stmt|;
name|public
label|:
name|ReturnValueSlot
argument_list|()
block|{}
name|ReturnValueSlot
argument_list|(
argument|llvm::Value *Value
argument_list|,
argument|bool IsVolatile
argument_list|)
block|:
name|Value
argument_list|(
argument|Value
argument_list|,
argument|IsVolatile
argument_list|)
block|{}
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
operator|!
name|getValue
argument_list|()
return|;
block|}
name|bool
name|isVolatile
argument_list|()
specifier|const
block|{
return|return
name|Value
operator|.
name|getInt
argument_list|()
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Value
operator|.
name|getPointer
argument_list|()
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace CodeGen
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

