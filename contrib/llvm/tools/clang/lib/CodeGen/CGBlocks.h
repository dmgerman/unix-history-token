begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CGBlocks.h - state for LLVM CodeGen for blocks ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This is the internal state used for llvm translation for block literals.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_CODEGEN_CGBLOCKS_H
end_ifndef

begin_define
define|#
directive|define
name|CLANG_CODEGEN_CGBLOCKS_H
end_define

begin_include
include|#
directive|include
file|"CodeGenTypes.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/TargetInfo.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CharUnits.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Expr.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprObjC.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|"CGBuilder.h"
end_include

begin_include
include|#
directive|include
file|"CGCall.h"
end_include

begin_include
include|#
directive|include
file|"CGValue.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Module
decl_stmt|;
name|class
name|Constant
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|GlobalValue
decl_stmt|;
name|class
name|TargetData
decl_stmt|;
name|class
name|FunctionType
decl_stmt|;
name|class
name|PointerType
decl_stmt|;
name|class
name|Value
decl_stmt|;
name|class
name|LLVMContext
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|CodeGen
block|{
name|class
name|CodeGenModule
decl_stmt|;
name|class
name|BlockBase
block|{
name|public
label|:
enum|enum
block|{
name|BLOCK_HAS_COPY_DISPOSE
init|=
operator|(
literal|1
operator|<<
literal|25
operator|)
block|,
name|BLOCK_HAS_CXX_OBJ
init|=
operator|(
literal|1
operator|<<
literal|26
operator|)
block|,
name|BLOCK_IS_GLOBAL
init|=
operator|(
literal|1
operator|<<
literal|28
operator|)
block|,
name|BLOCK_USE_STRET
init|=
operator|(
literal|1
operator|<<
literal|29
operator|)
block|,
name|BLOCK_HAS_SIGNATURE
init|=
operator|(
literal|1
operator|<<
literal|30
operator|)
block|}
enum|;
block|}
empty_stmt|;
name|class
name|BlockModule
range|:
name|public
name|BlockBase
block|{
name|ASTContext
operator|&
name|Context
block|;
name|llvm
operator|::
name|Module
operator|&
name|TheModule
block|;
specifier|const
name|llvm
operator|::
name|TargetData
operator|&
name|TheTargetData
block|;
name|CodeGenTypes
operator|&
name|Types
block|;
name|CodeGenModule
operator|&
name|CGM
block|;
name|llvm
operator|::
name|LLVMContext
operator|&
name|VMContext
block|;
name|ASTContext
operator|&
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|llvm
operator|::
name|Module
operator|&
name|getModule
argument_list|()
specifier|const
block|{
return|return
name|TheModule
return|;
block|}
name|CodeGenTypes
operator|&
name|getTypes
argument_list|()
block|{
return|return
name|Types
return|;
block|}
specifier|const
name|llvm
operator|::
name|TargetData
operator|&
name|getTargetData
argument_list|()
specifier|const
block|{
return|return
name|TheTargetData
return|;
block|}
name|public
operator|:
name|llvm
operator|::
name|Constant
operator|*
name|getNSConcreteGlobalBlock
argument_list|()
block|;
name|llvm
operator|::
name|Constant
operator|*
name|getNSConcreteStackBlock
argument_list|()
block|;
name|int
name|getGlobalUniqueCount
argument_list|()
block|{
return|return
operator|++
name|Block
operator|.
name|GlobalUniqueCount
return|;
block|}
specifier|const
name|llvm
operator|::
name|Type
operator|*
name|getBlockDescriptorType
argument_list|()
block|;
specifier|const
name|llvm
operator|::
name|Type
operator|*
name|getGenericBlockLiteralType
argument_list|()
block|;
name|llvm
operator|::
name|Constant
operator|*
name|GetAddrOfGlobalBlock
argument_list|(
specifier|const
name|BlockExpr
operator|*
name|BE
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
block|;
comment|/// NSConcreteGlobalBlock - Cached reference to the class pointer for global
comment|/// blocks.
name|llvm
operator|::
name|Constant
operator|*
name|NSConcreteGlobalBlock
block|;
comment|/// NSConcreteStackBlock - Cached reference to the class poinnter for stack
comment|/// blocks.
name|llvm
operator|::
name|Constant
operator|*
name|NSConcreteStackBlock
block|;
specifier|const
name|llvm
operator|::
name|Type
operator|*
name|BlockDescriptorType
block|;
specifier|const
name|llvm
operator|::
name|Type
operator|*
name|GenericBlockLiteralType
block|;    struct
block|{
name|int
name|GlobalUniqueCount
block|;   }
name|Block
block|;
name|llvm
operator|::
name|Value
operator|*
name|BlockObjectAssign
block|;
name|llvm
operator|::
name|Value
operator|*
name|BlockObjectDispose
block|;
specifier|const
name|llvm
operator|::
name|Type
operator|*
name|PtrToInt8Ty
block|;
name|std
operator|::
name|map
operator|<
name|uint64_t
block|,
name|llvm
operator|::
name|Constant
operator|*
operator|>
name|AssignCache
block|;
name|std
operator|::
name|map
operator|<
name|uint64_t
block|,
name|llvm
operator|::
name|Constant
operator|*
operator|>
name|DestroyCache
block|;
name|BlockModule
argument_list|(
name|ASTContext
operator|&
name|C
argument_list|,
name|llvm
operator|::
name|Module
operator|&
name|M
argument_list|,
specifier|const
name|llvm
operator|::
name|TargetData
operator|&
name|TD
argument_list|,
name|CodeGenTypes
operator|&
name|T
argument_list|,
name|CodeGenModule
operator|&
name|CodeGen
argument_list|)
operator|:
name|Context
argument_list|(
name|C
argument_list|)
block|,
name|TheModule
argument_list|(
name|M
argument_list|)
block|,
name|TheTargetData
argument_list|(
name|TD
argument_list|)
block|,
name|Types
argument_list|(
name|T
argument_list|)
block|,
name|CGM
argument_list|(
name|CodeGen
argument_list|)
block|,
name|VMContext
argument_list|(
name|M
operator|.
name|getContext
argument_list|()
argument_list|)
block|,
name|NSConcreteGlobalBlock
argument_list|(
literal|0
argument_list|)
block|,
name|NSConcreteStackBlock
argument_list|(
literal|0
argument_list|)
block|,
name|BlockDescriptorType
argument_list|(
literal|0
argument_list|)
block|,
name|GenericBlockLiteralType
argument_list|(
literal|0
argument_list|)
block|,
name|BlockObjectAssign
argument_list|(
literal|0
argument_list|)
block|,
name|BlockObjectDispose
argument_list|(
literal|0
argument_list|)
block|{
name|Block
operator|.
name|GlobalUniqueCount
operator|=
literal|0
block|;
name|PtrToInt8Ty
operator|=
name|llvm
operator|::
name|Type
operator|::
name|getInt8PtrTy
argument_list|(
name|M
operator|.
name|getContext
argument_list|()
argument_list|)
block|;   }
name|bool
name|BlockRequiresCopying
argument_list|(
argument|QualType Ty
argument_list|)
block|{
return|return
name|getContext
argument_list|()
operator|.
name|BlockRequiresCopying
argument_list|(
name|Ty
argument_list|)
return|;
block|}
expr|}
block|;
name|class
name|BlockFunction
operator|:
name|public
name|BlockBase
block|{
name|CodeGenModule
operator|&
name|CGM
block|;
name|CodeGenFunction
operator|&
name|CGF
block|;
name|ASTContext
operator|&
name|getContext
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|llvm
operator|::
name|LLVMContext
operator|&
name|VMContext
block|;
name|public
operator|:
specifier|const
name|llvm
operator|::
name|PointerType
operator|*
name|PtrToInt8Ty
block|;   struct
name|HelperInfo
block|{
name|int
name|index
block|;
name|int
name|flag
block|;
name|bool
name|RequiresCopying
block|;   }
block|;    enum
block|{
name|BLOCK_FIELD_IS_OBJECT
operator|=
literal|3
block|,
comment|/* id, NSObject, __attribute__((NSObject)),                                       block, ... */
name|BLOCK_FIELD_IS_BLOCK
operator|=
literal|7
block|,
comment|/* a block variable */
name|BLOCK_FIELD_IS_BYREF
operator|=
literal|8
block|,
comment|/* the on stack structure holding the __block                                       variable */
name|BLOCK_FIELD_IS_WEAK
operator|=
literal|16
block|,
comment|/* declared __weak, only used in byref copy                                       helpers */
name|BLOCK_BYREF_CALLER
operator|=
literal|128
block|,
comment|/* called from __block (byref) copy/dispose                                       support routines */
name|BLOCK_BYREF_CURRENT_MAX
operator|=
literal|256
block|}
block|;
name|CGBuilderTy
operator|&
name|Builder
block|;
name|BlockFunction
argument_list|(
name|CodeGenModule
operator|&
name|cgm
argument_list|,
name|CodeGenFunction
operator|&
name|cgf
argument_list|,
name|CGBuilderTy
operator|&
name|B
argument_list|)
block|;
comment|/// BlockOffset - The offset in bytes for the next allocation of an
comment|/// imported block variable.
name|CharUnits
name|BlockOffset
block|;
comment|/// BlockAlign - Maximal alignment needed for the Block expressed in
comment|/// characters.
name|CharUnits
name|BlockAlign
block|;
comment|/// getBlockOffset - Allocate a location within the block's storage
comment|/// for a value with the given size and alignment requirements.
name|CharUnits
name|getBlockOffset
argument_list|(
argument|CharUnits Size
argument_list|,
argument|CharUnits Align
argument_list|)
block|;
comment|/// BlockHasCopyDispose - True iff the block uses copy/dispose.
name|bool
name|BlockHasCopyDispose
block|;
comment|/// BlockLayout - The layout of the block's storage, represented as
comment|/// a sequence of expressions which require such storage.  The
comment|/// expressions can be:
comment|/// - a BlockDeclRefExpr, indicating that the given declaration
comment|///   from an enclosing scope is needed by the block;
comment|/// - a DeclRefExpr, which always wraps an anonymous VarDecl with
comment|///   array type, used to insert padding into the block; or
comment|/// - a CXXThisExpr, indicating that the C++ 'this' value should
comment|///   propagate from the parent to the block.
comment|/// This is a really silly representation.
name|llvm
operator|::
name|SmallVector
operator|<
specifier|const
name|Expr
operator|*
block|,
literal|8
operator|>
name|BlockLayout
block|;
comment|/// BlockDecls - Offsets for all Decls in BlockDeclRefExprs.
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Decl
operator|*
block|,
name|CharUnits
operator|>
name|BlockDecls
block|;
comment|/// BlockCXXThisOffset - The offset of the C++ 'this' value within
comment|/// the block structure.
name|CharUnits
name|BlockCXXThisOffset
block|;
name|ImplicitParamDecl
operator|*
name|BlockStructDecl
block|;
name|ImplicitParamDecl
operator|*
name|getBlockStructDecl
argument_list|()
block|{
return|return
name|BlockStructDecl
return|;
block|}
name|llvm
operator|::
name|Constant
operator|*
name|GenerateCopyHelperFunction
argument_list|(
name|bool
argument_list|,
specifier|const
name|llvm
operator|::
name|StructType
operator|*
argument_list|,
name|std
operator|::
name|vector
operator|<
name|HelperInfo
operator|>
operator|*
argument_list|)
block|;
name|llvm
operator|::
name|Constant
operator|*
name|GenerateDestroyHelperFunction
argument_list|(
name|bool
argument_list|,
specifier|const
name|llvm
operator|::
name|StructType
operator|*
argument_list|,
name|std
operator|::
name|vector
operator|<
name|HelperInfo
operator|>
operator|*
argument_list|)
block|;
name|llvm
operator|::
name|Constant
operator|*
name|BuildCopyHelper
argument_list|(
specifier|const
name|llvm
operator|::
name|StructType
operator|*
argument_list|,
name|std
operator|::
name|vector
operator|<
name|HelperInfo
operator|>
operator|*
argument_list|)
block|;
name|llvm
operator|::
name|Constant
operator|*
name|BuildDestroyHelper
argument_list|(
specifier|const
name|llvm
operator|::
name|StructType
operator|*
argument_list|,
name|std
operator|::
name|vector
operator|<
name|HelperInfo
operator|>
operator|*
argument_list|)
block|;
name|llvm
operator|::
name|Constant
operator|*
name|GeneratebyrefCopyHelperFunction
argument_list|(
argument|const llvm::Type *
argument_list|,
argument|int flag
argument_list|)
block|;
name|llvm
operator|::
name|Constant
operator|*
name|GeneratebyrefDestroyHelperFunction
argument_list|(
specifier|const
name|llvm
operator|::
name|Type
operator|*
name|T
argument_list|,
name|int
argument_list|)
block|;
name|llvm
operator|::
name|Constant
operator|*
name|BuildbyrefCopyHelper
argument_list|(
argument|const llvm::Type *T
argument_list|,
argument|int flag
argument_list|,
argument|unsigned Align
argument_list|)
block|;
name|llvm
operator|::
name|Constant
operator|*
name|BuildbyrefDestroyHelper
argument_list|(
argument|const llvm::Type *T
argument_list|,
argument|int flag
argument_list|,
argument|unsigned Align
argument_list|)
block|;
name|llvm
operator|::
name|Value
operator|*
name|getBlockObjectAssign
argument_list|()
block|;
name|llvm
operator|::
name|Value
operator|*
name|getBlockObjectDispose
argument_list|()
block|;
name|void
name|BuildBlockRelease
argument_list|(
argument|llvm::Value *DeclPtr
argument_list|,
argument|int flag = BLOCK_FIELD_IS_BYREF
argument_list|)
block|;
name|bool
name|BlockRequiresCopying
argument_list|(
argument|QualType Ty
argument_list|)
block|{
return|return
name|getContext
argument_list|()
operator|.
name|BlockRequiresCopying
argument_list|(
name|Ty
argument_list|)
return|;
block|}
expr|}
block|;  }
comment|// end namespace CodeGen
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

