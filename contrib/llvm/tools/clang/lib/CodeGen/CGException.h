begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CGException.h - Classes for exceptions IR generation ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These classes support the generation of LLVM IR for exceptions in
end_comment

begin_comment
comment|// C++ and Objective C.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_CODEGEN_CGEXCEPTION_H
end_ifndef

begin_define
define|#
directive|define
name|CLANG_CODEGEN_CGEXCEPTION_H
end_define

begin_comment
comment|/// EHScopeStack is defined in CodeGenFunction.h, but its
end_comment

begin_comment
comment|/// implementation is in this file and in CGException.cpp.
end_comment

begin_include
include|#
directive|include
file|"CodeGenFunction.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Value
decl_stmt|;
name|class
name|BasicBlock
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|CodeGen
block|{
comment|/// The exceptions personality for a function.  When
name|class
name|EHPersonality
block|{
specifier|const
name|char
modifier|*
name|PersonalityFn
decl_stmt|;
comment|// If this is non-null, this personality requires a non-standard
comment|// function for rethrowing an exception after a catchall cleanup.
comment|// This function must have prototype void(void*).
specifier|const
name|char
modifier|*
name|CatchallRethrowFn
decl_stmt|;
name|EHPersonality
argument_list|(
specifier|const
name|char
operator|*
name|PersonalityFn
argument_list|,
specifier|const
name|char
operator|*
name|CatchallRethrowFn
operator|=
literal|0
argument_list|)
operator|:
name|PersonalityFn
argument_list|(
name|PersonalityFn
argument_list|)
operator|,
name|CatchallRethrowFn
argument_list|(
argument|CatchallRethrowFn
argument_list|)
block|{}
name|public
operator|:
specifier|static
specifier|const
name|EHPersonality
operator|&
name|get
argument_list|(
specifier|const
name|LangOptions
operator|&
name|Lang
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_C
decl_stmt|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_ObjC
decl_stmt|;
specifier|static
specifier|const
name|EHPersonality
name|NeXT_ObjC
decl_stmt|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_CPlusPlus
decl_stmt|;
specifier|static
specifier|const
name|EHPersonality
name|GNU_CPlusPlus_SJLJ
decl_stmt|;
specifier|const
name|char
operator|*
name|getPersonalityFnName
argument_list|()
specifier|const
block|{
return|return
name|PersonalityFn
return|;
block|}
specifier|const
name|char
operator|*
name|getCatchallRethrowFnName
argument_list|()
specifier|const
block|{
return|return
name|CatchallRethrowFn
return|;
block|}
block|}
empty_stmt|;
comment|/// A protected scope for zero-cost EH handling.
name|class
name|EHScope
block|{
name|llvm
operator|::
name|BasicBlock
operator|*
name|CachedLandingPad
expr_stmt|;
name|unsigned
name|K
range|:
literal|2
decl_stmt|;
name|protected
label|:
enum|enum
block|{
name|BitsRemaining
init|=
literal|30
block|}
enum|;
name|public
label|:
enum|enum
name|Kind
block|{
name|Cleanup
block|,
name|Catch
block|,
name|Terminate
block|,
name|Filter
block|}
enum|;
name|EHScope
argument_list|(
argument|Kind K
argument_list|)
block|:
name|CachedLandingPad
argument_list|(
literal|0
argument_list|)
operator|,
name|K
argument_list|(
argument|K
argument_list|)
block|{}
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Kind
operator|>
operator|(
name|K
operator|)
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getCachedLandingPad
argument_list|()
specifier|const
block|{
return|return
name|CachedLandingPad
return|;
block|}
name|void
name|setCachedLandingPad
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
argument_list|)
block|{
name|CachedLandingPad
operator|=
name|Block
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// A scope which attempts to handle some, possibly all, types of
comment|/// exceptions.
comment|///
comment|/// Objective C @finally blocks are represented using a cleanup scope
comment|/// after the catch scope.
name|class
name|EHCatchScope
range|:
name|public
name|EHScope
block|{
name|unsigned
name|NumHandlers
operator|:
name|BitsRemaining
block|;
comment|// In effect, we have a flexible array member
comment|//   Handler Handlers[0];
comment|// But that's only standard in C99, not C++, so we have to do
comment|// annoying pointer arithmetic instead.
name|public
operator|:
expr|struct
name|Handler
block|{
comment|/// A type info value, or null (C++ null, not an LLVM null pointer)
comment|/// for a catch-all.
name|llvm
operator|::
name|Value
operator|*
name|Type
block|;
comment|/// The catch handler for this type.
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
block|;
comment|/// The unwind destination index for this handler.
name|unsigned
name|Index
block|;   }
block|;
name|private
operator|:
name|friend
name|class
name|EHScopeStack
block|;
name|Handler
operator|*
name|getHandlers
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|Handler
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
specifier|const
name|Handler
operator|*
name|getHandlers
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Handler
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|public
operator|:
specifier|static
name|size_t
name|getSizeForNumHandlers
argument_list|(
argument|unsigned N
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHCatchScope
argument_list|)
operator|+
name|N
operator|*
sizeof|sizeof
argument_list|(
name|Handler
argument_list|)
return|;
block|}
name|EHCatchScope
argument_list|(
argument|unsigned NumHandlers
argument_list|)
operator|:
name|EHScope
argument_list|(
name|Catch
argument_list|)
block|,
name|NumHandlers
argument_list|(
argument|NumHandlers
argument_list|)
block|{   }
name|unsigned
name|getNumHandlers
argument_list|()
specifier|const
block|{
return|return
name|NumHandlers
return|;
block|}
name|void
name|setCatchAllHandler
argument_list|(
argument|unsigned I
argument_list|,
argument|llvm::BasicBlock *Block
argument_list|)
block|{
name|setHandler
argument_list|(
name|I
argument_list|,
comment|/*catchall*/
literal|0
argument_list|,
name|Block
argument_list|)
block|;   }
name|void
name|setHandler
argument_list|(
argument|unsigned I
argument_list|,
argument|llvm::Value *Type
argument_list|,
argument|llvm::BasicBlock *Block
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumHandlers
argument_list|()
argument_list|)
block|;
name|getHandlers
argument_list|()
index|[
name|I
index|]
operator|.
name|Type
operator|=
name|Type
block|;
name|getHandlers
argument_list|()
index|[
name|I
index|]
operator|.
name|Block
operator|=
name|Block
block|;   }
specifier|const
name|Handler
operator|&
name|getHandler
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumHandlers
argument_list|()
argument_list|)
block|;
return|return
name|getHandlers
argument_list|()
index|[
name|I
index|]
return|;
block|}
typedef|typedef
specifier|const
name|Handler
modifier|*
name|iterator
typedef|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|getHandlers
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|getHandlers
argument_list|()
operator|+
name|getNumHandlers
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Catch
return|;
block|}
block|}
empty_stmt|;
comment|/// A cleanup scope which generates the cleanup blocks lazily.
name|class
name|EHCleanupScope
range|:
name|public
name|EHScope
block|{
comment|/// Whether this cleanup needs to be run along normal edges.
name|bool
name|IsNormalCleanup
operator|:
literal|1
block|;
comment|/// Whether this cleanup needs to be run along exception edges.
name|bool
name|IsEHCleanup
operator|:
literal|1
block|;
comment|/// Whether this cleanup was activated before all normal uses.
name|bool
name|ActivatedBeforeNormalUse
operator|:
literal|1
block|;
comment|/// Whether this cleanup was activated before all EH uses.
name|bool
name|ActivatedBeforeEHUse
operator|:
literal|1
block|;
comment|/// The amount of extra storage needed by the Cleanup.
comment|/// Always a multiple of the scope-stack alignment.
name|unsigned
name|CleanupSize
operator|:
literal|12
block|;
comment|/// The number of fixups required by enclosing scopes (not including
comment|/// this one).  If this is the top cleanup scope, all the fixups
comment|/// from this index onwards belong to this scope.
name|unsigned
name|FixupDepth
operator|:
name|BitsRemaining
operator|-
literal|16
block|;
comment|/// The nearest normal cleanup scope enclosing this one.
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingNormal
block|;
comment|/// The nearest EH cleanup scope enclosing this one.
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingEH
block|;
comment|/// The dual entry/exit block along the normal edge.  This is lazily
comment|/// created if needed before the cleanup is popped.
name|llvm
operator|::
name|BasicBlock
operator|*
name|NormalBlock
block|;
comment|/// The dual entry/exit block along the EH edge.  This is lazily
comment|/// created if needed before the cleanup is popped.
name|llvm
operator|::
name|BasicBlock
operator|*
name|EHBlock
block|;
comment|/// An optional i1 variable indicating whether this cleanup has been
comment|/// activated yet.  This has one of three states:
comment|///   - it is null if the cleanup is inactive
comment|///   - it is activeSentinel() if the cleanup is active and was not
comment|///     required before activation
comment|///   - it points to a valid variable
name|llvm
operator|::
name|AllocaInst
operator|*
name|ActiveVar
block|;
comment|/// Extra information required for cleanups that have resolved
comment|/// branches through them.  This has to be allocated on the side
comment|/// because everything on the cleanup stack has be trivially
comment|/// movable.
block|struct
name|ExtInfo
block|{
comment|/// The destinations of normal branch-afters and branch-throughs.
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|llvm
operator|::
name|BasicBlock
operator|*
block|,
literal|4
operator|>
name|Branches
block|;
comment|/// Normal branch-afters.
name|llvm
operator|::
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|BasicBlock
operator|*
block|,
name|llvm
operator|::
name|ConstantInt
operator|*
operator|>
block|,
literal|4
operator|>
name|BranchAfters
block|;
comment|/// The destinations of EH branch-afters and branch-throughs.
comment|/// TODO: optimize for the extremely common case of a single
comment|/// branch-through.
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|llvm
operator|::
name|BasicBlock
operator|*
block|,
literal|4
operator|>
name|EHBranches
block|;
comment|/// EH branch-afters.
name|llvm
operator|::
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|BasicBlock
operator|*
block|,
name|llvm
operator|::
name|ConstantInt
operator|*
operator|>
block|,
literal|4
operator|>
name|EHBranchAfters
block|;   }
block|;
name|mutable
expr|struct
name|ExtInfo
operator|*
name|ExtInfo
block|;    struct
name|ExtInfo
operator|&
name|getExtInfo
argument_list|()
block|{
if|if
condition|(
operator|!
name|ExtInfo
condition|)
name|ExtInfo
operator|=
name|new
expr|struct
name|ExtInfo
argument_list|()
expr_stmt|;
return|return
operator|*
name|ExtInfo
return|;
block|}
specifier|const
expr|struct
name|ExtInfo
operator|&
name|getExtInfo
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|ExtInfo
condition|)
name|ExtInfo
operator|=
name|new
expr|struct
name|ExtInfo
argument_list|()
expr_stmt|;
return|return
operator|*
name|ExtInfo
return|;
block|}
name|public
label|:
comment|/// Gets the size required for a lazy cleanup scope with the given
comment|/// cleanup-data requirements.
specifier|static
name|size_t
name|getSizeForCleanupSize
parameter_list|(
name|size_t
name|Size
parameter_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHCleanupScope
argument_list|)
operator|+
name|Size
return|;
block|}
name|size_t
name|getAllocatedSize
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHCleanupScope
argument_list|)
operator|+
name|CleanupSize
return|;
block|}
name|EHCleanupScope
argument_list|(
argument|bool IsNormal
argument_list|,
argument|bool IsEH
argument_list|,
argument|bool IsActive
argument_list|,
argument|unsigned CleanupSize
argument_list|,
argument|unsigned FixupDepth
argument_list|,
argument|EHScopeStack::stable_iterator EnclosingNormal
argument_list|,
argument|EHScopeStack::stable_iterator EnclosingEH
argument_list|)
block|:
name|EHScope
argument_list|(
name|EHScope
operator|::
name|Cleanup
argument_list|)
operator|,
name|IsNormalCleanup
argument_list|(
name|IsNormal
argument_list|)
operator|,
name|IsEHCleanup
argument_list|(
name|IsEH
argument_list|)
operator|,
name|ActivatedBeforeNormalUse
argument_list|(
name|IsActive
argument_list|)
operator|,
name|ActivatedBeforeEHUse
argument_list|(
name|IsActive
argument_list|)
operator|,
name|CleanupSize
argument_list|(
name|CleanupSize
argument_list|)
operator|,
name|FixupDepth
argument_list|(
name|FixupDepth
argument_list|)
operator|,
name|EnclosingNormal
argument_list|(
name|EnclosingNormal
argument_list|)
operator|,
name|EnclosingEH
argument_list|(
name|EnclosingEH
argument_list|)
operator|,
name|NormalBlock
argument_list|(
literal|0
argument_list|)
operator|,
name|EHBlock
argument_list|(
literal|0
argument_list|)
operator|,
name|ActiveVar
argument_list|(
name|IsActive
condition|?
name|activeSentinel
argument_list|()
else|:
literal|0
argument_list|)
operator|,
name|ExtInfo
argument_list|(
literal|0
argument_list|)
block|{
name|assert
argument_list|(
name|this
operator|->
name|CleanupSize
operator|==
name|CleanupSize
operator|&&
literal|"cleanup size overflow"
argument_list|)
block|;   }
operator|~
name|EHCleanupScope
argument_list|()
block|{
name|delete
name|ExtInfo
block|;   }
name|bool
name|isNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|IsNormalCleanup
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getNormalBlock
argument_list|()
specifier|const
block|{
return|return
name|NormalBlock
return|;
block|}
name|void
name|setNormalBlock
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|BB
argument_list|)
block|{
name|NormalBlock
operator|=
name|BB
expr_stmt|;
block|}
name|bool
name|isEHCleanup
argument_list|()
specifier|const
block|{
return|return
name|IsEHCleanup
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getEHBlock
argument_list|()
specifier|const
block|{
return|return
name|EHBlock
return|;
block|}
name|void
name|setEHBlock
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|BB
argument_list|)
block|{
name|EHBlock
operator|=
name|BB
expr_stmt|;
block|}
specifier|static
name|llvm
operator|::
name|AllocaInst
operator|*
name|activeSentinel
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|llvm
operator|::
name|AllocaInst
operator|*
operator|>
operator|(
literal|1
operator|)
return|;
block|}
name|bool
name|isActive
argument_list|()
specifier|const
block|{
return|return
name|ActiveVar
operator|!=
literal|0
return|;
block|}
name|llvm
operator|::
name|AllocaInst
operator|*
name|getActiveVar
argument_list|()
specifier|const
block|{
return|return
name|ActiveVar
return|;
block|}
name|void
name|setActiveVar
argument_list|(
name|llvm
operator|::
name|AllocaInst
operator|*
name|Var
argument_list|)
block|{
name|ActiveVar
operator|=
name|Var
expr_stmt|;
block|}
name|bool
name|wasActivatedBeforeNormalUse
argument_list|()
specifier|const
block|{
return|return
name|ActivatedBeforeNormalUse
return|;
block|}
name|void
name|setActivatedBeforeNormalUse
parameter_list|(
name|bool
name|B
parameter_list|)
block|{
name|ActivatedBeforeNormalUse
operator|=
name|B
expr_stmt|;
block|}
name|bool
name|wasActivatedBeforeEHUse
argument_list|()
specifier|const
block|{
return|return
name|ActivatedBeforeEHUse
return|;
block|}
name|void
name|setActivatedBeforeEHUse
parameter_list|(
name|bool
name|B
parameter_list|)
block|{
name|ActivatedBeforeEHUse
operator|=
name|B
expr_stmt|;
block|}
name|unsigned
name|getFixupDepth
argument_list|()
specifier|const
block|{
return|return
name|FixupDepth
return|;
block|}
name|EHScopeStack
operator|::
name|stable_iterator
name|getEnclosingNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|EnclosingNormal
return|;
block|}
name|EHScopeStack
operator|::
name|stable_iterator
name|getEnclosingEHCleanup
argument_list|()
specifier|const
block|{
return|return
name|EnclosingEH
return|;
block|}
name|size_t
name|getCleanupSize
argument_list|()
specifier|const
block|{
return|return
name|CleanupSize
return|;
block|}
name|void
modifier|*
name|getCleanupBuffer
parameter_list|()
block|{
return|return
name|this
operator|+
literal|1
return|;
block|}
name|EHScopeStack
operator|::
name|Cleanup
operator|*
name|getCleanup
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|EHScopeStack
operator|::
name|Cleanup
operator|*
operator|>
operator|(
name|getCleanupBuffer
argument_list|()
operator|)
return|;
block|}
comment|/// True if this cleanup scope has any branch-afters or branch-throughs.
name|bool
name|hasBranches
argument_list|()
specifier|const
block|{
return|return
name|ExtInfo
operator|&&
operator|!
name|ExtInfo
operator|->
name|Branches
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/// Add a branch-after to this cleanup scope.  A branch-after is a
comment|/// branch from a point protected by this (normal) cleanup to a
comment|/// point in the normal cleanup scope immediately containing it.
comment|/// For example,
comment|///   for (;;) { A a; break; }
comment|/// contains a branch-after.
comment|///
comment|/// Branch-afters each have their own destination out of the
comment|/// cleanup, guaranteed distinct from anything else threaded through
comment|/// it.  Therefore branch-afters usually force a switch after the
comment|/// cleanup.
name|void
name|addBranchAfter
argument_list|(
name|llvm
operator|::
name|ConstantInt
operator|*
name|Index
argument_list|,
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
argument_list|)
block|{
name|struct
name|ExtInfo
modifier|&
name|ExtInfo
init|=
name|getExtInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|ExtInfo
operator|.
name|Branches
operator|.
name|insert
argument_list|(
name|Block
argument_list|)
condition|)
name|ExtInfo
operator|.
name|BranchAfters
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Block
argument_list|,
name|Index
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// Return the number of unique branch-afters on this scope.
name|unsigned
name|getNumBranchAfters
argument_list|()
specifier|const
block|{
return|return
name|ExtInfo
operator|?
name|ExtInfo
operator|->
name|BranchAfters
operator|.
name|size
argument_list|()
operator|:
literal|0
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getBranchAfterBlock
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumBranchAfters
argument_list|()
argument_list|)
block|;
return|return
name|ExtInfo
operator|->
name|BranchAfters
index|[
name|I
index|]
operator|.
name|first
return|;
block|}
name|llvm
operator|::
name|ConstantInt
operator|*
name|getBranchAfterIndex
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumBranchAfters
argument_list|()
argument_list|)
block|;
return|return
name|ExtInfo
operator|->
name|BranchAfters
index|[
name|I
index|]
operator|.
name|second
return|;
block|}
comment|/// Add a branch-through to this cleanup scope.  A branch-through is
comment|/// a branch from a scope protected by this (normal) cleanup to an
comment|/// enclosing scope other than the immediately-enclosing normal
comment|/// cleanup scope.
comment|///
comment|/// In the following example, the branch through B's scope is a
comment|/// branch-through, while the branch through A's scope is a
comment|/// branch-after:
comment|///   for (;;) { A a; B b; break; }
comment|///
comment|/// All branch-throughs have a common destination out of the
comment|/// cleanup, one possibly shared with the fall-through.  Therefore
comment|/// branch-throughs usually don't force a switch after the cleanup.
comment|///
comment|/// \return true if the branch-through was new to this scope
name|bool
name|addBranchThrough
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
argument_list|)
block|{
return|return
name|getExtInfo
argument_list|()
operator|.
name|Branches
operator|.
name|insert
argument_list|(
name|Block
argument_list|)
return|;
block|}
comment|/// Determines if this cleanup scope has any branch throughs.
name|bool
name|hasBranchThroughs
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|ExtInfo
condition|)
return|return
name|false
return|;
return|return
operator|(
name|ExtInfo
operator|->
name|BranchAfters
operator|.
name|size
argument_list|()
operator|!=
name|ExtInfo
operator|->
name|Branches
operator|.
name|size
argument_list|()
operator|)
return|;
block|}
end_decl_stmt

begin_comment
comment|// Same stuff, only for EH branches instead of normal branches.
end_comment

begin_comment
comment|// It's quite possible that we could find a better representation
end_comment

begin_comment
comment|// for this.
end_comment

begin_expr_stmt
name|bool
name|hasEHBranches
argument_list|()
specifier|const
block|{
return|return
name|ExtInfo
operator|&&
operator|!
name|ExtInfo
operator|->
name|EHBranches
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|addEHBranchAfter
argument_list|(
name|llvm
operator|::
name|ConstantInt
operator|*
name|Index
argument_list|,
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
argument_list|)
block|{
name|struct
name|ExtInfo
modifier|&
name|ExtInfo
init|=
name|getExtInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|ExtInfo
operator|.
name|EHBranches
operator|.
name|insert
argument_list|(
name|Block
argument_list|)
condition|)
name|ExtInfo
operator|.
name|EHBranchAfters
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Block
argument_list|,
name|Index
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|unsigned
name|getNumEHBranchAfters
argument_list|()
specifier|const
block|{
return|return
name|ExtInfo
operator|?
name|ExtInfo
operator|->
name|EHBranchAfters
operator|.
name|size
argument_list|()
operator|:
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|BasicBlock
operator|*
name|getEHBranchAfterBlock
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumEHBranchAfters
argument_list|()
argument_list|)
block|;
return|return
name|ExtInfo
operator|->
name|EHBranchAfters
index|[
name|I
index|]
operator|.
name|first
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|ConstantInt
operator|*
name|getEHBranchAfterIndex
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumEHBranchAfters
argument_list|()
argument_list|)
block|;
return|return
name|ExtInfo
operator|->
name|EHBranchAfters
index|[
name|I
index|]
operator|.
name|second
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|bool
name|addEHBranchThrough
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
argument_list|)
block|{
return|return
name|getExtInfo
argument_list|()
operator|.
name|EHBranches
operator|.
name|insert
argument_list|(
name|Block
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|hasEHBranchThroughs
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|ExtInfo
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_return
return|return
operator|(
name|ExtInfo
operator|->
name|EHBranchAfters
operator|.
name|size
argument_list|()
operator|!=
name|ExtInfo
operator|->
name|EHBranches
operator|.
name|size
argument_list|()
operator|)
return|;
end_return

begin_function
unit|}    static
name|bool
name|classof
parameter_list|(
specifier|const
name|EHScope
modifier|*
name|Scope
parameter_list|)
block|{
return|return
operator|(
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Cleanup
operator|)
return|;
block|}
end_function

begin_comment
unit|};
comment|/// An exceptions scope which filters exceptions thrown through it.
end_comment

begin_comment
comment|/// Only exceptions matching the filter types will be permitted to be
end_comment

begin_comment
comment|/// thrown.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// This is used to implement C++ exception specifications.
end_comment

begin_decl_stmt
name|class
name|EHFilterScope
range|:
name|public
name|EHScope
block|{
name|unsigned
name|NumFilters
operator|:
name|BitsRemaining
block|;
comment|// Essentially ends in a flexible array member:
comment|// llvm::Value *FilterTypes[0];
name|llvm
operator|::
name|Value
operator|*
operator|*
name|getFilters
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
specifier|const
operator|*
name|getFilters
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|llvm
operator|::
name|Value
operator|*
specifier|const
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|public
operator|:
name|EHFilterScope
argument_list|(
argument|unsigned NumFilters
argument_list|)
operator|:
name|EHScope
argument_list|(
name|Filter
argument_list|)
block|,
name|NumFilters
argument_list|(
argument|NumFilters
argument_list|)
block|{}
specifier|static
name|size_t
name|getSizeForNumFilters
argument_list|(
argument|unsigned NumFilters
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHFilterScope
argument_list|)
operator|+
name|NumFilters
operator|*
sizeof|sizeof
argument_list|(
name|llvm
operator|::
name|Value
operator|*
argument_list|)
return|;
block|}
name|unsigned
name|getNumFilters
argument_list|()
specifier|const
block|{
return|return
name|NumFilters
return|;
block|}
name|void
name|setFilter
argument_list|(
argument|unsigned I
argument_list|,
argument|llvm::Value *FilterValue
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumFilters
argument_list|()
argument_list|)
block|;
name|getFilters
argument_list|()
index|[
name|I
index|]
operator|=
name|FilterValue
block|;   }
name|llvm
operator|::
name|Value
operator|*
name|getFilter
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumFilters
argument_list|()
argument_list|)
block|;
return|return
name|getFilters
argument_list|()
index|[
name|I
index|]
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Filter
return|;
block|}
expr|}
block|;
comment|/// An exceptions scope which calls std::terminate if any exception
comment|/// reaches it.
name|class
name|EHTerminateScope
operator|:
name|public
name|EHScope
block|{
name|unsigned
name|DestIndex
operator|:
name|BitsRemaining
block|;
name|public
operator|:
name|EHTerminateScope
argument_list|(
argument|unsigned Index
argument_list|)
operator|:
name|EHScope
argument_list|(
name|Terminate
argument_list|)
block|,
name|DestIndex
argument_list|(
argument|Index
argument_list|)
block|{}
specifier|static
name|size_t
name|getSize
argument_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHTerminateScope
argument_list|)
return|;
block|}
name|unsigned
name|getDestIndex
argument_list|()
specifier|const
block|{
return|return
name|DestIndex
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Terminate
return|;
block|}
expr|}
block|;
comment|/// A non-stable pointer into the scope stack.
name|class
name|EHScopeStack
operator|::
name|iterator
block|{
name|char
operator|*
name|Ptr
block|;
name|friend
name|class
name|EHScopeStack
block|;
name|explicit
name|iterator
argument_list|(
name|char
operator|*
name|Ptr
argument_list|)
operator|:
name|Ptr
argument_list|(
argument|Ptr
argument_list|)
block|{}
name|public
operator|:
name|iterator
argument_list|()
operator|:
name|Ptr
argument_list|(
literal|0
argument_list|)
block|{}
name|EHScope
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|EHScope
operator|*
operator|>
operator|(
name|Ptr
operator|)
return|;
block|}
name|EHScope
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
name|get
argument_list|()
return|;
block|}
name|EHScope
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|get
argument_list|()
return|;
block|}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
switch|switch
condition|(
name|get
argument_list|()
operator|->
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EHScope
operator|::
name|Catch
case|:
name|Ptr
operator|+=
name|EHCatchScope
operator|::
name|getSizeForNumHandlers
argument_list|(
name|static_cast
operator|<
specifier|const
name|EHCatchScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getNumHandlers
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Filter
case|:
name|Ptr
operator|+=
name|EHFilterScope
operator|::
name|getSizeForNumFilters
argument_list|(
name|static_cast
operator|<
specifier|const
name|EHFilterScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getNumFilters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Cleanup
case|:
name|Ptr
operator|+=
name|static_cast
operator|<
specifier|const
name|EHCleanupScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getAllocatedSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Terminate
case|:
name|Ptr
operator|+=
name|EHTerminateScope
operator|::
name|getSize
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
operator|*
name|this
return|;
block|}
name|iterator
name|next
argument_list|()
block|{
name|iterator
name|copy
operator|=
operator|*
name|this
block|;
operator|++
name|copy
block|;
return|return
name|copy
return|;
block|}
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|copy
operator|=
operator|*
name|this
block|;
name|operator
operator|++
operator|(
operator|)
block|;
return|return
name|copy
return|;
block|}
name|bool
name|encloses
argument_list|(
argument|iterator other
argument_list|)
specifier|const
block|{
return|return
name|Ptr
operator|>=
name|other
operator|.
name|Ptr
return|;
block|}
name|bool
name|strictlyEncloses
argument_list|(
argument|iterator other
argument_list|)
specifier|const
block|{
return|return
name|Ptr
operator|>
name|other
operator|.
name|Ptr
return|;
block|}
name|bool
name|operator
operator|==
operator|(
name|iterator
name|other
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|==
name|other
operator|.
name|Ptr
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|iterator
name|other
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|!=
name|other
operator|.
name|Ptr
return|;
block|}
expr|}
block|;
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|begin
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|StartOfData
argument_list|)
return|;
block|}
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|end
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|EndOfBuffer
argument_list|)
return|;
block|}
specifier|inline
name|void
name|EHScopeStack
operator|::
name|popCatch
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"popping exception stack when not empty"
argument_list|)
block|;
name|assert
argument_list|(
name|isa
operator|<
name|EHCatchScope
operator|>
operator|(
operator|*
name|begin
argument_list|()
operator|)
argument_list|)
block|;
name|StartOfData
operator|+=
name|EHCatchScope
operator|::
name|getSizeForNumHandlers
argument_list|(
name|cast
operator|<
name|EHCatchScope
operator|>
operator|(
operator|*
name|begin
argument_list|()
operator|)
operator|.
name|getNumHandlers
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|empty
argument_list|()
condition|)
name|NextEHDestIndex
operator|=
name|FirstEHDestIndex
expr_stmt|;
name|assert
argument_list|(
name|CatchDepth
operator|>
literal|0
operator|&&
literal|"mismatched catch/terminate push/pop"
argument_list|)
block|;
name|CatchDepth
operator|--
block|; }
specifier|inline
name|void
name|EHScopeStack
operator|::
name|popTerminate
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"popping exception stack when not empty"
argument_list|)
block|;
name|assert
argument_list|(
name|isa
operator|<
name|EHTerminateScope
operator|>
operator|(
operator|*
name|begin
argument_list|()
operator|)
argument_list|)
block|;
name|StartOfData
operator|+=
name|EHTerminateScope
operator|::
name|getSize
argument_list|()
block|;
if|if
condition|(
name|empty
argument_list|()
condition|)
name|NextEHDestIndex
operator|=
name|FirstEHDestIndex
expr_stmt|;
name|assert
argument_list|(
name|CatchDepth
operator|>
literal|0
operator|&&
literal|"mismatched catch/terminate push/pop"
argument_list|)
block|;
name|CatchDepth
operator|--
block|; }
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|find
argument_list|(
argument|stable_iterator sp
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|sp
operator|.
name|isValid
argument_list|()
operator|&&
literal|"finding invalid savepoint"
argument_list|)
block|;
name|assert
argument_list|(
name|sp
operator|.
name|Size
operator|<=
name|stable_begin
argument_list|()
operator|.
name|Size
operator|&&
literal|"finding savepoint after pop"
argument_list|)
block|;
return|return
name|iterator
argument_list|(
name|EndOfBuffer
operator|-
name|sp
operator|.
name|Size
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|inline
name|EHScopeStack
operator|::
name|stable_iterator
name|EHScopeStack
operator|::
name|stabilize
argument_list|(
argument|iterator ir
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|StartOfData
operator|<=
name|ir
operator|.
name|Ptr
operator|&&
name|ir
operator|.
name|Ptr
operator|<=
name|EndOfBuffer
argument_list|)
block|;
return|return
name|stable_iterator
argument_list|(
name|EndOfBuffer
operator|-
name|ir
operator|.
name|Ptr
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|EHScopeStack
operator|::
name|stable_iterator
name|EHScopeStack
operator|::
name|getInnermostActiveNormalCleanup
argument_list|()
specifier|const
block|{
for|for
control|(
name|EHScopeStack
operator|::
name|stable_iterator
name|I
operator|=
name|getInnermostNormalCleanup
argument_list|()
operator|,
name|E
operator|=
name|stable_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
control|)
block|{
name|EHCleanupScope
modifier|&
name|S
init|=
name|cast
operator|<
name|EHCleanupScope
operator|>
operator|(
operator|*
name|find
argument_list|(
name|I
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|S
operator|.
name|isActive
argument_list|()
condition|)
return|return
name|I
return|;
name|I
operator|=
name|S
operator|.
name|getEnclosingNormalCleanup
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|stable_end
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  inline
name|EHScopeStack
operator|::
name|stable_iterator
name|EHScopeStack
operator|::
name|getInnermostActiveEHCleanup
argument_list|()
specifier|const
block|{
for|for
control|(
name|EHScopeStack
operator|::
name|stable_iterator
name|I
operator|=
name|getInnermostEHCleanup
argument_list|()
operator|,
name|E
operator|=
name|stable_end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
control|)
block|{
name|EHCleanupScope
modifier|&
name|S
init|=
name|cast
operator|<
name|EHCleanupScope
operator|>
operator|(
operator|*
name|find
argument_list|(
name|I
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|S
operator|.
name|isActive
argument_list|()
condition|)
return|return
name|I
return|;
name|I
operator|=
name|S
operator|.
name|getEnclosingEHCleanup
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|stable_end
argument_list|()
return|;
end_return

begin_endif
unit|}  } }
endif|#
directive|endif
end_endif

end_unit

