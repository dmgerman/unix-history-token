begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CGException.h - Classes for exceptions IR generation ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These classes support the generation of LLVM IR for exceptions in
end_comment

begin_comment
comment|// C++ and Objective C.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CLANG_CODEGEN_CGEXCEPTION_H
end_ifndef

begin_define
define|#
directive|define
name|CLANG_CODEGEN_CGEXCEPTION_H
end_define

begin_comment
comment|/// EHScopeStack is defined in CodeGenFunction.h, but its
end_comment

begin_comment
comment|/// implementation is in this file and in CGException.cpp.
end_comment

begin_include
include|#
directive|include
file|"CodeGenFunction.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Value
decl_stmt|;
name|class
name|BasicBlock
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|CodeGen
block|{
comment|/// A protected scope for zero-cost EH handling.
name|class
name|EHScope
block|{
name|llvm
operator|::
name|BasicBlock
operator|*
name|CachedLandingPad
expr_stmt|;
name|unsigned
name|K
range|:
literal|3
decl_stmt|;
name|protected
label|:
enum|enum
block|{
name|BitsRemaining
init|=
literal|29
block|}
enum|;
name|public
label|:
enum|enum
name|Kind
block|{
name|Cleanup
block|,
name|LazyCleanup
block|,
name|Catch
block|,
name|Terminate
block|,
name|Filter
block|}
enum|;
name|EHScope
argument_list|(
argument|Kind K
argument_list|)
block|:
name|CachedLandingPad
argument_list|(
literal|0
argument_list|)
operator|,
name|K
argument_list|(
argument|K
argument_list|)
block|{}
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Kind
operator|>
operator|(
name|K
operator|)
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getCachedLandingPad
argument_list|()
specifier|const
block|{
return|return
name|CachedLandingPad
return|;
block|}
name|void
name|setCachedLandingPad
argument_list|(
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
argument_list|)
block|{
name|CachedLandingPad
operator|=
name|Block
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// A scope which attempts to handle some, possibly all, types of
comment|/// exceptions.
comment|///
comment|/// Objective C @finally blocks are represented using a cleanup scope
comment|/// after the catch scope.
name|class
name|EHCatchScope
range|:
name|public
name|EHScope
block|{
name|unsigned
name|NumHandlers
operator|:
name|BitsRemaining
block|;
comment|// In effect, we have a flexible array member
comment|//   Handler Handlers[0];
comment|// But that's only standard in C99, not C++, so we have to do
comment|// annoying pointer arithmetic instead.
name|public
operator|:
expr|struct
name|Handler
block|{
comment|/// A type info value, or null (C++ null, not an LLVM null pointer)
comment|/// for a catch-all.
name|llvm
operator|::
name|Value
operator|*
name|Type
block|;
comment|/// The catch handler for this type.
name|llvm
operator|::
name|BasicBlock
operator|*
name|Block
block|;
specifier|static
name|Handler
name|make
argument_list|(
argument|llvm::Value *Type
argument_list|,
argument|llvm::BasicBlock *Block
argument_list|)
block|{
name|Handler
name|Temp
block|;
name|Temp
operator|.
name|Type
operator|=
name|Type
block|;
name|Temp
operator|.
name|Block
operator|=
name|Block
block|;
return|return
name|Temp
return|;
block|}
expr|}
block|;
name|private
operator|:
name|Handler
operator|*
name|getHandlers
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|Handler
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
specifier|const
name|Handler
operator|*
name|getHandlers
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Handler
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|public
operator|:
specifier|static
name|size_t
name|getSizeForNumHandlers
argument_list|(
argument|unsigned N
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHCatchScope
argument_list|)
operator|+
name|N
operator|*
sizeof|sizeof
argument_list|(
name|Handler
argument_list|)
return|;
block|}
name|EHCatchScope
argument_list|(
argument|unsigned NumHandlers
argument_list|)
operator|:
name|EHScope
argument_list|(
name|Catch
argument_list|)
block|,
name|NumHandlers
argument_list|(
argument|NumHandlers
argument_list|)
block|{   }
name|unsigned
name|getNumHandlers
argument_list|()
specifier|const
block|{
return|return
name|NumHandlers
return|;
block|}
name|void
name|setCatchAllHandler
argument_list|(
argument|unsigned I
argument_list|,
argument|llvm::BasicBlock *Block
argument_list|)
block|{
name|setHandler
argument_list|(
name|I
argument_list|,
comment|/*catchall*/
literal|0
argument_list|,
name|Block
argument_list|)
block|;   }
name|void
name|setHandler
argument_list|(
argument|unsigned I
argument_list|,
argument|llvm::Value *Type
argument_list|,
argument|llvm::BasicBlock *Block
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumHandlers
argument_list|()
argument_list|)
block|;
name|getHandlers
argument_list|()
index|[
name|I
index|]
operator|=
name|Handler
operator|::
name|make
argument_list|(
name|Type
argument_list|,
name|Block
argument_list|)
block|;   }
specifier|const
name|Handler
operator|&
name|getHandler
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumHandlers
argument_list|()
argument_list|)
block|;
return|return
name|getHandlers
argument_list|()
index|[
name|I
index|]
return|;
block|}
typedef|typedef
specifier|const
name|Handler
modifier|*
name|iterator
typedef|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|getHandlers
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|getHandlers
argument_list|()
operator|+
name|getNumHandlers
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Catch
return|;
block|}
expr|}
block|;
comment|/// A cleanup scope which generates the cleanup blocks lazily.
name|class
name|EHLazyCleanupScope
operator|:
name|public
name|EHScope
block|{
comment|/// Whether this cleanup needs to be run along normal edges.
name|bool
name|IsNormalCleanup
operator|:
literal|1
block|;
comment|/// Whether this cleanup needs to be run along exception edges.
name|bool
name|IsEHCleanup
operator|:
literal|1
block|;
comment|/// The amount of extra storage needed by the LazyCleanup.
comment|/// Always a multiple of the scope-stack alignment.
name|unsigned
name|CleanupSize
operator|:
literal|12
block|;
comment|/// The number of fixups required by enclosing scopes (not including
comment|/// this one).  If this is the top cleanup scope, all the fixups
comment|/// from this index onwards belong to this scope.
name|unsigned
name|FixupDepth
operator|:
name|BitsRemaining
operator|-
literal|14
block|;
comment|/// The nearest normal cleanup scope enclosing this one.
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingNormal
block|;
comment|/// The nearest EH cleanup scope enclosing this one.
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingEH
block|;
comment|/// The dual entry/exit block along the normal edge.  This is lazily
comment|/// created if needed before the cleanup is popped.
name|llvm
operator|::
name|BasicBlock
operator|*
name|NormalBlock
block|;
comment|/// The dual entry/exit block along the EH edge.  This is lazily
comment|/// created if needed before the cleanup is popped.
name|llvm
operator|::
name|BasicBlock
operator|*
name|EHBlock
block|;
name|public
operator|:
comment|/// Gets the size required for a lazy cleanup scope with the given
comment|/// cleanup-data requirements.
specifier|static
name|size_t
name|getSizeForCleanupSize
argument_list|(
argument|size_t Size
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHLazyCleanupScope
argument_list|)
operator|+
name|Size
return|;
block|}
name|size_t
name|getAllocatedSize
argument_list|()
specifier|const
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHLazyCleanupScope
argument_list|)
operator|+
name|CleanupSize
return|;
block|}
name|EHLazyCleanupScope
argument_list|(
argument|bool IsNormal
argument_list|,
argument|bool IsEH
argument_list|,
argument|unsigned CleanupSize
argument_list|,
argument|unsigned FixupDepth
argument_list|,
argument|EHScopeStack::stable_iterator EnclosingNormal
argument_list|,
argument|EHScopeStack::stable_iterator EnclosingEH
argument_list|)
operator|:
name|EHScope
argument_list|(
name|EHScope
operator|::
name|LazyCleanup
argument_list|)
block|,
name|IsNormalCleanup
argument_list|(
name|IsNormal
argument_list|)
block|,
name|IsEHCleanup
argument_list|(
name|IsEH
argument_list|)
block|,
name|CleanupSize
argument_list|(
name|CleanupSize
argument_list|)
block|,
name|FixupDepth
argument_list|(
name|FixupDepth
argument_list|)
block|,
name|EnclosingNormal
argument_list|(
name|EnclosingNormal
argument_list|)
block|,
name|EnclosingEH
argument_list|(
name|EnclosingEH
argument_list|)
block|,
name|NormalBlock
argument_list|(
literal|0
argument_list|)
block|,
name|EHBlock
argument_list|(
literal|0
argument_list|)
block|{}
name|bool
name|isNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|IsNormalCleanup
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getNormalBlock
argument_list|()
specifier|const
block|{
return|return
name|NormalBlock
return|;
block|}
name|void
name|setNormalBlock
argument_list|(
argument|llvm::BasicBlock *BB
argument_list|)
block|{
name|NormalBlock
operator|=
name|BB
block|; }
name|bool
name|isEHCleanup
argument_list|()
specifier|const
block|{
return|return
name|IsEHCleanup
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getEHBlock
argument_list|()
specifier|const
block|{
return|return
name|EHBlock
return|;
block|}
name|void
name|setEHBlock
argument_list|(
argument|llvm::BasicBlock *BB
argument_list|)
block|{
name|EHBlock
operator|=
name|BB
block|; }
name|unsigned
name|getFixupDepth
argument_list|()
specifier|const
block|{
return|return
name|FixupDepth
return|;
block|}
name|EHScopeStack
operator|::
name|stable_iterator
name|getEnclosingNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|EnclosingNormal
return|;
block|}
name|EHScopeStack
operator|::
name|stable_iterator
name|getEnclosingEHCleanup
argument_list|()
specifier|const
block|{
return|return
name|EnclosingEH
return|;
block|}
name|size_t
name|getCleanupSize
argument_list|()
specifier|const
block|{
return|return
name|CleanupSize
return|;
block|}
name|void
operator|*
name|getCleanupBuffer
argument_list|()
block|{
return|return
name|this
operator|+
literal|1
return|;
block|}
name|EHScopeStack
operator|::
name|LazyCleanup
operator|*
name|getCleanup
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|EHScopeStack
operator|::
name|LazyCleanup
operator|*
operator|>
operator|(
name|getCleanupBuffer
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
operator|(
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|LazyCleanup
operator|)
return|;
block|}
expr|}
block|;
comment|/// A scope which needs to execute some code if we try to unwind ---
comment|/// either normally, via the EH mechanism, or both --- through it.
name|class
name|EHCleanupScope
operator|:
name|public
name|EHScope
block|{
comment|/// The number of fixups required by enclosing scopes (not including
comment|/// this one).  If this is the top cleanup scope, all the fixups
comment|/// from this index onwards belong to this scope.
name|unsigned
name|FixupDepth
operator|:
name|BitsRemaining
block|;
comment|/// The nearest normal cleanup scope enclosing this one.
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingNormal
block|;
comment|/// The nearest EH cleanup scope enclosing this one.
name|EHScopeStack
operator|::
name|stable_iterator
name|EnclosingEH
block|;
name|llvm
operator|::
name|BasicBlock
operator|*
name|NormalEntry
block|;
name|llvm
operator|::
name|BasicBlock
operator|*
name|NormalExit
block|;
name|llvm
operator|::
name|BasicBlock
operator|*
name|EHEntry
block|;
name|llvm
operator|::
name|BasicBlock
operator|*
name|EHExit
block|;
name|public
operator|:
specifier|static
name|size_t
name|getSize
argument_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHCleanupScope
argument_list|)
return|;
block|}
name|EHCleanupScope
argument_list|(
argument|unsigned FixupDepth
argument_list|,
argument|EHScopeStack::stable_iterator EnclosingNormal
argument_list|,
argument|EHScopeStack::stable_iterator EnclosingEH
argument_list|,
argument|llvm::BasicBlock *NormalEntry
argument_list|,
argument|llvm::BasicBlock *NormalExit
argument_list|,
argument|llvm::BasicBlock *EHEntry
argument_list|,
argument|llvm::BasicBlock *EHExit
argument_list|)
operator|:
name|EHScope
argument_list|(
name|Cleanup
argument_list|)
block|,
name|FixupDepth
argument_list|(
name|FixupDepth
argument_list|)
block|,
name|EnclosingNormal
argument_list|(
name|EnclosingNormal
argument_list|)
block|,
name|EnclosingEH
argument_list|(
name|EnclosingEH
argument_list|)
block|,
name|NormalEntry
argument_list|(
name|NormalEntry
argument_list|)
block|,
name|NormalExit
argument_list|(
name|NormalExit
argument_list|)
block|,
name|EHEntry
argument_list|(
name|EHEntry
argument_list|)
block|,
name|EHExit
argument_list|(
argument|EHExit
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|NormalEntry
operator|!=
literal|0
operator|)
operator|==
operator|(
name|NormalExit
operator|!=
literal|0
operator|)
argument_list|)
block|;
name|assert
argument_list|(
operator|(
name|EHEntry
operator|!=
literal|0
operator|)
operator|==
operator|(
name|EHExit
operator|!=
literal|0
operator|)
argument_list|)
block|;   }
name|bool
name|isNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|NormalEntry
operator|!=
literal|0
return|;
block|}
name|bool
name|isEHCleanup
argument_list|()
specifier|const
block|{
return|return
name|EHEntry
operator|!=
literal|0
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getNormalEntry
argument_list|()
specifier|const
block|{
return|return
name|NormalEntry
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getNormalExit
argument_list|()
specifier|const
block|{
return|return
name|NormalExit
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getEHEntry
argument_list|()
specifier|const
block|{
return|return
name|EHEntry
return|;
block|}
name|llvm
operator|::
name|BasicBlock
operator|*
name|getEHExit
argument_list|()
specifier|const
block|{
return|return
name|EHExit
return|;
block|}
name|unsigned
name|getFixupDepth
argument_list|()
specifier|const
block|{
return|return
name|FixupDepth
return|;
block|}
name|EHScopeStack
operator|::
name|stable_iterator
name|getEnclosingNormalCleanup
argument_list|()
specifier|const
block|{
return|return
name|EnclosingNormal
return|;
block|}
name|EHScopeStack
operator|::
name|stable_iterator
name|getEnclosingEHCleanup
argument_list|()
specifier|const
block|{
return|return
name|EnclosingEH
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Cleanup
return|;
block|}
expr|}
block|;
comment|/// An exceptions scope which filters exceptions thrown through it.
comment|/// Only exceptions matching the filter types will be permitted to be
comment|/// thrown.
comment|///
comment|/// This is used to implement C++ exception specifications.
name|class
name|EHFilterScope
operator|:
name|public
name|EHScope
block|{
name|unsigned
name|NumFilters
operator|:
name|BitsRemaining
block|;
comment|// Essentially ends in a flexible array member:
comment|// llvm::Value *FilterTypes[0];
name|llvm
operator|::
name|Value
operator|*
operator|*
name|getFilters
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|llvm
operator|::
name|Value
operator|*
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|llvm
operator|::
name|Value
operator|*
specifier|const
operator|*
name|getFilters
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|llvm
operator|::
name|Value
operator|*
specifier|const
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|public
operator|:
name|EHFilterScope
argument_list|(
argument|unsigned NumFilters
argument_list|)
operator|:
name|EHScope
argument_list|(
name|Filter
argument_list|)
block|,
name|NumFilters
argument_list|(
argument|NumFilters
argument_list|)
block|{}
specifier|static
name|size_t
name|getSizeForNumFilters
argument_list|(
argument|unsigned NumFilters
argument_list|)
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHFilterScope
argument_list|)
operator|+
name|NumFilters
operator|*
sizeof|sizeof
argument_list|(
name|llvm
operator|::
name|Value
operator|*
argument_list|)
return|;
block|}
name|unsigned
name|getNumFilters
argument_list|()
specifier|const
block|{
return|return
name|NumFilters
return|;
block|}
name|void
name|setFilter
argument_list|(
argument|unsigned I
argument_list|,
argument|llvm::Value *FilterValue
argument_list|)
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumFilters
argument_list|()
argument_list|)
block|;
name|getFilters
argument_list|()
index|[
name|I
index|]
operator|=
name|FilterValue
block|;   }
name|llvm
operator|::
name|Value
operator|*
name|getFilter
argument_list|(
argument|unsigned I
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|I
operator|<
name|getNumFilters
argument_list|()
argument_list|)
block|;
return|return
name|getFilters
argument_list|()
index|[
name|I
index|]
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Filter
return|;
block|}
expr|}
block|;
comment|/// An exceptions scope which calls std::terminate if any exception
comment|/// reaches it.
name|class
name|EHTerminateScope
operator|:
name|public
name|EHScope
block|{
name|public
operator|:
name|EHTerminateScope
argument_list|()
operator|:
name|EHScope
argument_list|(
argument|Terminate
argument_list|)
block|{}
specifier|static
name|size_t
name|getSize
argument_list|()
block|{
return|return
sizeof|sizeof
argument_list|(
name|EHTerminateScope
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const EHScope *Scope
argument_list|)
block|{
return|return
name|Scope
operator|->
name|getKind
argument_list|()
operator|==
name|Terminate
return|;
block|}
expr|}
block|;
comment|/// A non-stable pointer into the scope stack.
name|class
name|EHScopeStack
operator|::
name|iterator
block|{
name|char
operator|*
name|Ptr
block|;
name|friend
name|class
name|EHScopeStack
block|;
name|explicit
name|iterator
argument_list|(
name|char
operator|*
name|Ptr
argument_list|)
operator|:
name|Ptr
argument_list|(
argument|Ptr
argument_list|)
block|{}
name|public
operator|:
name|iterator
argument_list|()
operator|:
name|Ptr
argument_list|(
literal|0
argument_list|)
block|{}
name|EHScope
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|EHScope
operator|*
operator|>
operator|(
name|Ptr
operator|)
return|;
block|}
name|EHScope
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
name|get
argument_list|()
return|;
block|}
name|EHScope
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|get
argument_list|()
return|;
block|}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
switch|switch
condition|(
name|get
argument_list|()
operator|->
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EHScope
operator|::
name|Catch
case|:
name|Ptr
operator|+=
name|EHCatchScope
operator|::
name|getSizeForNumHandlers
argument_list|(
name|static_cast
operator|<
specifier|const
name|EHCatchScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getNumHandlers
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Filter
case|:
name|Ptr
operator|+=
name|EHFilterScope
operator|::
name|getSizeForNumFilters
argument_list|(
name|static_cast
operator|<
specifier|const
name|EHFilterScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getNumFilters
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|LazyCleanup
case|:
name|Ptr
operator|+=
name|static_cast
operator|<
specifier|const
name|EHLazyCleanupScope
operator|*
operator|>
operator|(
name|get
argument_list|()
operator|)
operator|->
name|getAllocatedSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Cleanup
case|:
name|Ptr
operator|+=
name|EHCleanupScope
operator|::
name|getSize
argument_list|()
expr_stmt|;
break|break;
case|case
name|EHScope
operator|::
name|Terminate
case|:
name|Ptr
operator|+=
name|EHTerminateScope
operator|::
name|getSize
argument_list|()
expr_stmt|;
break|break;
block|}
return|return
operator|*
name|this
return|;
block|}
name|iterator
name|next
argument_list|()
block|{
name|iterator
name|copy
operator|=
operator|*
name|this
block|;
operator|++
name|copy
block|;
return|return
name|copy
return|;
block|}
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|copy
operator|=
operator|*
name|this
block|;
name|operator
operator|++
operator|(
operator|)
block|;
return|return
name|copy
return|;
block|}
name|bool
name|operator
operator|==
operator|(
name|iterator
name|other
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|==
name|other
operator|.
name|Ptr
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|iterator
name|other
operator|)
specifier|const
block|{
return|return
name|Ptr
operator|!=
name|other
operator|.
name|Ptr
return|;
block|}
expr|}
block|;
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|begin
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|StartOfData
argument_list|)
return|;
block|}
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|end
argument_list|()
specifier|const
block|{
return|return
name|iterator
argument_list|(
name|EndOfBuffer
argument_list|)
return|;
block|}
specifier|inline
name|void
name|EHScopeStack
operator|::
name|popCatch
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"popping exception stack when not empty"
argument_list|)
block|;
name|assert
argument_list|(
name|isa
operator|<
name|EHCatchScope
operator|>
operator|(
operator|*
name|begin
argument_list|()
operator|)
argument_list|)
block|;
name|StartOfData
operator|+=
name|EHCatchScope
operator|::
name|getSizeForNumHandlers
argument_list|(
name|cast
operator|<
name|EHCatchScope
operator|>
operator|(
operator|*
name|begin
argument_list|()
operator|)
operator|.
name|getNumHandlers
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|CatchDepth
operator|>
literal|0
operator|&&
literal|"mismatched catch/terminate push/pop"
argument_list|)
block|;
name|CatchDepth
operator|--
block|; }
specifier|inline
name|void
name|EHScopeStack
operator|::
name|popTerminate
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|empty
argument_list|()
operator|&&
literal|"popping exception stack when not empty"
argument_list|)
block|;
name|assert
argument_list|(
name|isa
operator|<
name|EHTerminateScope
operator|>
operator|(
operator|*
name|begin
argument_list|()
operator|)
argument_list|)
block|;
name|StartOfData
operator|+=
name|EHTerminateScope
operator|::
name|getSize
argument_list|()
block|;
name|assert
argument_list|(
name|CatchDepth
operator|>
literal|0
operator|&&
literal|"mismatched catch/terminate push/pop"
argument_list|)
block|;
name|CatchDepth
operator|--
block|; }
specifier|inline
name|EHScopeStack
operator|::
name|iterator
name|EHScopeStack
operator|::
name|find
argument_list|(
argument|stable_iterator sp
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|sp
operator|.
name|isValid
argument_list|()
operator|&&
literal|"finding invalid savepoint"
argument_list|)
block|;
name|assert
argument_list|(
name|sp
operator|.
name|Size
operator|<=
name|stable_begin
argument_list|()
operator|.
name|Size
operator|&&
literal|"finding savepoint after pop"
argument_list|)
block|;
return|return
name|iterator
argument_list|(
name|EndOfBuffer
operator|-
name|sp
operator|.
name|Size
argument_list|)
return|;
block|}
specifier|inline
name|EHScopeStack
operator|::
name|stable_iterator
name|EHScopeStack
operator|::
name|stabilize
argument_list|(
argument|iterator ir
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|StartOfData
operator|<=
name|ir
operator|.
name|Ptr
operator|&&
name|ir
operator|.
name|Ptr
operator|<=
name|EndOfBuffer
argument_list|)
block|;
return|return
name|stable_iterator
argument_list|(
name|EndOfBuffer
operator|-
name|ir
operator|.
name|Ptr
argument_list|)
return|;
block|}
expr|} }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

