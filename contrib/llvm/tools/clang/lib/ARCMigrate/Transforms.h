begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Transforms.h - Transformations to ARC mode --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_ARCMIGRATE_TRANSFORMS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_ARCMIGRATE_TRANSFORMS_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ParentMap.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/RecursiveASTVisitor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/SaveAndRestore.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Decl
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|BlockDecl
decl_stmt|;
name|class
name|ObjCMethodDecl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|namespace
name|arcmt
block|{
name|class
name|MigrationPass
decl_stmt|;
name|namespace
name|trans
block|{
name|class
name|MigrationContext
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// Transformations.
comment|//===----------------------------------------------------------------------===//
name|void
name|rewriteAutoreleasePool
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|rewriteUnbridgedCasts
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|makeAssignARCSafe
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|removeRetainReleaseDeallocFinalize
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|removeZeroOutPropsInDeallocFinalize
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|rewriteUnusedInitDelegate
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|checkAPIUses
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|removeEmptyStatementsAndDeallocFinalize
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|class
name|BodyContext
block|{
name|MigrationContext
modifier|&
name|MigrateCtx
decl_stmt|;
name|ParentMap
name|PMap
decl_stmt|;
name|Stmt
modifier|*
name|TopStmt
decl_stmt|;
name|public
label|:
name|BodyContext
argument_list|(
name|MigrationContext
operator|&
name|MigrateCtx
argument_list|,
name|Stmt
operator|*
name|S
argument_list|)
operator|:
name|MigrateCtx
argument_list|(
name|MigrateCtx
argument_list|)
operator|,
name|PMap
argument_list|(
name|S
argument_list|)
operator|,
name|TopStmt
argument_list|(
argument|S
argument_list|)
block|{}
name|MigrationContext
operator|&
name|getMigrationContext
argument_list|()
block|{
return|return
name|MigrateCtx
return|;
block|}
name|ParentMap
modifier|&
name|getParentMap
parameter_list|()
block|{
return|return
name|PMap
return|;
block|}
name|Stmt
modifier|*
name|getTopStmt
parameter_list|()
block|{
return|return
name|TopStmt
return|;
block|}
block|}
empty_stmt|;
name|class
name|ObjCImplementationContext
block|{
name|MigrationContext
modifier|&
name|MigrateCtx
decl_stmt|;
name|ObjCImplementationDecl
modifier|*
name|ImpD
decl_stmt|;
name|public
label|:
name|ObjCImplementationContext
argument_list|(
name|MigrationContext
operator|&
name|MigrateCtx
argument_list|,
name|ObjCImplementationDecl
operator|*
name|D
argument_list|)
operator|:
name|MigrateCtx
argument_list|(
name|MigrateCtx
argument_list|)
operator|,
name|ImpD
argument_list|(
argument|D
argument_list|)
block|{}
name|MigrationContext
operator|&
name|getMigrationContext
argument_list|()
block|{
return|return
name|MigrateCtx
return|;
block|}
name|ObjCImplementationDecl
modifier|*
name|getImplementationDecl
parameter_list|()
block|{
return|return
name|ImpD
return|;
block|}
block|}
empty_stmt|;
name|class
name|ASTTraverser
block|{
name|public
label|:
name|virtual
operator|~
name|ASTTraverser
argument_list|()
expr_stmt|;
name|virtual
name|void
name|traverseTU
parameter_list|(
name|MigrationContext
modifier|&
name|MigrateCtx
parameter_list|)
block|{ }
name|virtual
name|void
name|traverseBody
parameter_list|(
name|BodyContext
modifier|&
name|BodyCtx
parameter_list|)
block|{ }
name|virtual
name|void
name|traverseObjCImplementation
parameter_list|(
name|ObjCImplementationContext
modifier|&
name|ImplCtx
parameter_list|)
block|{}
block|}
empty_stmt|;
name|class
name|MigrationContext
block|{
name|std
operator|::
name|vector
operator|<
name|ASTTraverser
operator|*
operator|>
name|Traversers
expr_stmt|;
name|public
label|:
name|MigrationPass
modifier|&
name|Pass
decl_stmt|;
struct|struct
name|GCAttrOccurrence
block|{
enum|enum
name|AttrKind
block|{
name|Weak
block|,
name|Strong
block|}
name|Kind
enum|;
name|SourceLocation
name|Loc
decl_stmt|;
name|QualType
name|ModifiedType
decl_stmt|;
name|Decl
modifier|*
name|Dcl
decl_stmt|;
comment|/// \brief true if the attribute is owned, e.g. it is in a body and not just
comment|/// in an interface.
name|bool
name|FullyMigratable
decl_stmt|;
block|}
struct|;
name|std
operator|::
name|vector
operator|<
name|GCAttrOccurrence
operator|>
name|GCAttrs
expr_stmt|;
name|llvm
operator|::
name|DenseSet
operator|<
name|unsigned
operator|>
name|AttrSet
expr_stmt|;
name|llvm
operator|::
name|DenseSet
operator|<
name|unsigned
operator|>
name|RemovedAttrSet
expr_stmt|;
comment|/// \brief Set of raw '@' locations for 'assign' properties group that contain
comment|/// GC __weak.
name|llvm
operator|::
name|DenseSet
operator|<
name|unsigned
operator|>
name|AtPropsWeak
expr_stmt|;
name|explicit
name|MigrationContext
argument_list|(
name|MigrationPass
operator|&
name|pass
argument_list|)
operator|:
name|Pass
argument_list|(
argument|pass
argument_list|)
block|{}
operator|~
name|MigrationContext
argument_list|()
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ASTTraverser
operator|*
operator|>
operator|::
name|iterator
name|traverser_iterator
expr_stmt|;
name|traverser_iterator
name|traversers_begin
parameter_list|()
block|{
return|return
name|Traversers
operator|.
name|begin
argument_list|()
return|;
block|}
name|traverser_iterator
name|traversers_end
parameter_list|()
block|{
return|return
name|Traversers
operator|.
name|end
argument_list|()
return|;
block|}
name|void
name|addTraverser
parameter_list|(
name|ASTTraverser
modifier|*
name|traverser
parameter_list|)
block|{
name|Traversers
operator|.
name|push_back
argument_list|(
name|traverser
argument_list|)
expr_stmt|;
block|}
name|bool
name|isGCOwnedNonObjC
parameter_list|(
name|QualType
name|T
parameter_list|)
function_decl|;
name|bool
name|removePropertyAttribute
parameter_list|(
name|StringRef
name|fromAttr
parameter_list|,
name|SourceLocation
name|atLoc
parameter_list|)
block|{
return|return
name|rewritePropertyAttribute
argument_list|(
name|fromAttr
argument_list|,
name|StringRef
argument_list|()
argument_list|,
name|atLoc
argument_list|)
return|;
block|}
name|bool
name|rewritePropertyAttribute
parameter_list|(
name|StringRef
name|fromAttr
parameter_list|,
name|StringRef
name|toAttr
parameter_list|,
name|SourceLocation
name|atLoc
parameter_list|)
function_decl|;
name|bool
name|addPropertyAttribute
parameter_list|(
name|StringRef
name|attr
parameter_list|,
name|SourceLocation
name|atLoc
parameter_list|)
function_decl|;
name|void
name|traverse
parameter_list|(
name|TranslationUnitDecl
modifier|*
name|TU
parameter_list|)
function_decl|;
name|void
name|dumpGCAttrs
parameter_list|()
function_decl|;
block|}
empty_stmt|;
name|class
name|PropertyRewriteTraverser
range|:
name|public
name|ASTTraverser
block|{
name|public
operator|:
name|virtual
name|void
name|traverseObjCImplementation
argument_list|(
name|ObjCImplementationContext
operator|&
name|ImplCtx
argument_list|)
block|; }
decl_stmt|;
name|class
name|BlockObjCVariableTraverser
range|:
name|public
name|ASTTraverser
block|{
name|public
operator|:
name|virtual
name|void
name|traverseBody
argument_list|(
name|BodyContext
operator|&
name|BodyCtx
argument_list|)
block|; }
decl_stmt|;
name|class
name|ProtectedScopeTraverser
range|:
name|public
name|ASTTraverser
block|{
name|public
operator|:
name|virtual
name|void
name|traverseBody
argument_list|(
name|BodyContext
operator|&
name|BodyCtx
argument_list|)
block|; }
decl_stmt|;
comment|// GC transformations
name|class
name|GCAttrsTraverser
range|:
name|public
name|ASTTraverser
block|{
name|public
operator|:
name|virtual
name|void
name|traverseTU
argument_list|(
name|MigrationContext
operator|&
name|MigrateCtx
argument_list|)
block|; }
decl_stmt|;
name|class
name|GCCollectableCallsTraverser
range|:
name|public
name|ASTTraverser
block|{
name|public
operator|:
name|virtual
name|void
name|traverseBody
argument_list|(
name|BodyContext
operator|&
name|BodyCtx
argument_list|)
block|; }
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|// Helpers.
comment|//===----------------------------------------------------------------------===//
comment|/// \brief Determine whether we can add weak to the given type.
name|bool
name|canApplyWeak
parameter_list|(
name|ASTContext
modifier|&
name|Ctx
parameter_list|,
name|QualType
name|type
parameter_list|,
name|bool
name|AllowOnUnknownClass
init|=
name|false
parameter_list|)
function_decl|;
name|bool
name|isPlusOneAssign
parameter_list|(
specifier|const
name|BinaryOperator
modifier|*
name|E
parameter_list|)
function_decl|;
name|bool
name|isPlusOne
parameter_list|(
specifier|const
name|Expr
modifier|*
name|E
parameter_list|)
function_decl|;
comment|/// \brief 'Loc' is the end of a statement range. This returns the location
comment|/// immediately after the semicolon following the statement.
comment|/// If no semicolon is found or the location is inside a macro, the returned
comment|/// source location will be invalid.
name|SourceLocation
name|findLocationAfterSemi
parameter_list|(
name|SourceLocation
name|loc
parameter_list|,
name|ASTContext
modifier|&
name|Ctx
parameter_list|,
name|bool
name|IsDecl
init|=
name|false
parameter_list|)
function_decl|;
comment|/// \brief 'Loc' is the end of a statement range. This returns the location
comment|/// of the semicolon following the statement.
comment|/// If no semicolon is found or the location is inside a macro, the returned
comment|/// source location will be invalid.
name|SourceLocation
name|findSemiAfterLocation
parameter_list|(
name|SourceLocation
name|loc
parameter_list|,
name|ASTContext
modifier|&
name|Ctx
parameter_list|,
name|bool
name|IsDecl
init|=
name|false
parameter_list|)
function_decl|;
name|bool
name|hasSideEffects
parameter_list|(
name|Expr
modifier|*
name|E
parameter_list|,
name|ASTContext
modifier|&
name|Ctx
parameter_list|)
function_decl|;
name|bool
name|isGlobalVar
parameter_list|(
name|Expr
modifier|*
name|E
parameter_list|)
function_decl|;
comment|/// \brief Returns "nil" or "0" if 'nil' macro is not actually defined.
name|StringRef
name|getNilString
parameter_list|(
name|ASTContext
modifier|&
name|Ctx
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|BODY_TRANS
operator|>
name|class
name|BodyTransform
operator|:
name|public
name|RecursiveASTVisitor
operator|<
name|BodyTransform
operator|<
name|BODY_TRANS
operator|>
expr|>
block|{
name|MigrationPass
operator|&
name|Pass
block|;
name|Decl
operator|*
name|ParentD
block|;
typedef|typedef
name|RecursiveASTVisitor
operator|<
name|BodyTransform
operator|<
name|BODY_TRANS
operator|>
expr|>
name|base
expr_stmt|;
name|public
operator|:
name|BodyTransform
argument_list|(
name|MigrationPass
operator|&
name|pass
argument_list|)
operator|:
name|Pass
argument_list|(
name|pass
argument_list|)
operator|,
name|ParentD
argument_list|(
literal|0
argument_list|)
block|{ }
name|bool
name|TraverseStmt
argument_list|(
argument|Stmt *rootS
argument_list|)
block|{
if|if
condition|(
name|rootS
condition|)
name|BODY_TRANS
argument_list|(
name|Pass
argument_list|)
operator|.
name|transformBody
argument_list|(
name|rootS
argument_list|,
name|ParentD
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|bool
name|TraverseObjCMethodDecl
parameter_list|(
name|ObjCMethodDecl
modifier|*
name|D
parameter_list|)
block|{
name|SaveAndRestore
operator|<
name|Decl
operator|*
operator|>
name|SetParent
argument_list|(
name|ParentD
argument_list|,
name|D
argument_list|)
expr_stmt|;
return|return
name|base
operator|::
name|TraverseObjCMethodDecl
argument_list|(
name|D
argument_list|)
return|;
block|}
block|}
empty_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseSet
operator|<
name|Expr
operator|*
operator|>
name|ExprSet
expr_stmt|;
name|void
name|clearRefsIn
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExprSet
modifier|&
name|refs
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|iterator
operator|>
name|void
name|clearRefsIn
argument_list|(
argument|iterator begin
argument_list|,
argument|iterator end
argument_list|,
argument|ExprSet&refs
argument_list|)
block|{
for|for
control|(
init|;
name|begin
operator|!=
name|end
condition|;
operator|++
name|begin
control|)
name|clearRefsIn
argument_list|(
operator|*
name|begin
argument_list|,
name|refs
argument_list|)
expr_stmt|;
block|}
name|void
name|collectRefs
parameter_list|(
name|ValueDecl
modifier|*
name|D
parameter_list|,
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExprSet
modifier|&
name|refs
parameter_list|)
function_decl|;
name|void
name|collectRemovables
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExprSet
modifier|&
name|exprs
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace trans
end_comment

begin_comment
unit|}
comment|// end namespace arcmt
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

