begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Transforms.h - Tranformations to ARC mode ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_ARCMIGRATE_TRANSFORMS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_ARCMIGRATE_TRANSFORMS_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/RecursiveASTVisitor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Decl
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|BlockDecl
decl_stmt|;
name|class
name|ObjCMethodDecl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|namespace
name|arcmt
block|{
name|class
name|MigrationPass
decl_stmt|;
name|namespace
name|trans
block|{
comment|//===----------------------------------------------------------------------===//
comment|// Transformations.
comment|//===----------------------------------------------------------------------===//
name|void
name|rewriteAutoreleasePool
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|rewriteUnbridgedCasts
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|makeAssignARCSafe
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|removeRetainReleaseDealloc
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|removeZeroOutPropsInDealloc
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|rewriteProperties
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|rewriteBlockObjCVariable
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|rewriteUnusedInitDelegate
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
name|void
name|removeEmptyStatementsAndDealloc
parameter_list|(
name|MigrationPass
modifier|&
name|pass
parameter_list|)
function_decl|;
comment|//===----------------------------------------------------------------------===//
comment|// Helpers.
comment|//===----------------------------------------------------------------------===//
comment|/// \brief Determine whether we can add weak to the given type.
name|bool
name|canApplyWeak
parameter_list|(
name|ASTContext
modifier|&
name|Ctx
parameter_list|,
name|QualType
name|type
parameter_list|)
function_decl|;
comment|/// \brief 'Loc' is the end of a statement range. This returns the location
comment|/// immediately after the semicolon following the statement.
comment|/// If no semicolon is found or the location is inside a macro, the returned
comment|/// source location will be invalid.
name|SourceLocation
name|findLocationAfterSemi
parameter_list|(
name|SourceLocation
name|loc
parameter_list|,
name|ASTContext
modifier|&
name|Ctx
parameter_list|)
function_decl|;
name|bool
name|hasSideEffects
parameter_list|(
name|Expr
modifier|*
name|E
parameter_list|,
name|ASTContext
modifier|&
name|Ctx
parameter_list|)
function_decl|;
name|bool
name|isGlobalVar
parameter_list|(
name|Expr
modifier|*
name|E
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|BODY_TRANS
operator|>
name|class
name|BodyTransform
operator|:
name|public
name|RecursiveASTVisitor
operator|<
name|BodyTransform
operator|<
name|BODY_TRANS
operator|>
expr|>
block|{
name|MigrationPass
operator|&
name|Pass
block|;
name|public
operator|:
name|BodyTransform
argument_list|(
name|MigrationPass
operator|&
name|pass
argument_list|)
operator|:
name|Pass
argument_list|(
argument|pass
argument_list|)
block|{ }
name|bool
name|TraverseStmt
argument_list|(
argument|Stmt *rootS
argument_list|)
block|{
name|BODY_TRANS
argument_list|(
name|Pass
argument_list|)
operator|.
name|transformBody
argument_list|(
name|rootS
argument_list|)
block|;
return|return
name|true
return|;
block|}
expr|}
block|;
typedef|typedef
name|llvm
operator|::
name|DenseSet
operator|<
name|Expr
operator|*
operator|>
name|ExprSet
expr_stmt|;
name|void
name|clearRefsIn
argument_list|(
name|Stmt
operator|*
name|S
argument_list|,
name|ExprSet
operator|&
name|refs
argument_list|)
expr_stmt|;
name|template
operator|<
name|typename
name|iterator
operator|>
name|void
name|clearRefsIn
argument_list|(
argument|iterator begin
argument_list|,
argument|iterator end
argument_list|,
argument|ExprSet&refs
argument_list|)
block|{
for|for
control|(
init|;
name|begin
operator|!=
name|end
condition|;
operator|++
name|begin
control|)
name|clearRefsIn
argument_list|(
operator|*
name|begin
argument_list|,
name|refs
argument_list|)
expr_stmt|;
block|}
name|void
name|collectRefs
parameter_list|(
name|ValueDecl
modifier|*
name|D
parameter_list|,
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExprSet
modifier|&
name|refs
parameter_list|)
function_decl|;
name|void
name|collectRemovables
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExprSet
modifier|&
name|exprs
parameter_list|)
function_decl|;
block|}
comment|// end namespace trans
block|}
comment|// end namespace arcmt
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

