begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- TypeLocBuilder.h - Type Source Info collector ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines TypeLocBuilder, a class for building TypeLocs
end_comment

begin_comment
comment|//  bottom-up.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_LIB_SEMA_TYPELOCBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_LIB_SEMA_TYPELOCBUILDER_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ASTContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/TypeLoc.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|TypeLocBuilder
block|{
enum|enum
block|{
name|InlineCapacity
init|=
literal|8
operator|*
expr|sizeof
operator|(
name|SourceLocation
operator|)
block|}
enum|;
comment|/// The underlying location-data buffer.  Data grows from the end
comment|/// of the buffer backwards.
name|char
modifier|*
name|Buffer
decl_stmt|;
comment|/// The capacity of the current buffer.
name|size_t
name|Capacity
decl_stmt|;
comment|/// The index of the first occupied byte in the buffer.
name|size_t
name|Index
decl_stmt|;
ifndef|#
directive|ifndef
name|NDEBUG
comment|/// The last type pushed on this builder.
name|QualType
name|LastTy
decl_stmt|;
endif|#
directive|endif
comment|/// The inline buffer.
enum|enum
block|{
name|BufferMaxAlignment
init|=
name|llvm
operator|::
name|AlignOf
operator|<
name|void
operator|*
operator|>
operator|::
name|Alignment
block|}
enum|;
name|llvm
operator|::
name|AlignedCharArray
operator|<
name|BufferMaxAlignment
operator|,
name|InlineCapacity
operator|>
name|InlineBuffer
expr_stmt|;
name|unsigned
name|NumBytesAtAlign4
decl_stmt|,
name|NumBytesAtAlign8
decl_stmt|;
name|public
label|:
name|TypeLocBuilder
argument_list|()
operator|:
name|Buffer
argument_list|(
name|InlineBuffer
operator|.
name|buffer
argument_list|)
operator|,
name|Capacity
argument_list|(
name|InlineCapacity
argument_list|)
operator|,
name|Index
argument_list|(
name|InlineCapacity
argument_list|)
operator|,
name|NumBytesAtAlign4
argument_list|(
literal|0
argument_list|)
operator|,
name|NumBytesAtAlign8
argument_list|(
literal|0
argument_list|)
block|{   }
operator|~
name|TypeLocBuilder
argument_list|()
block|{
if|if
condition|(
name|Buffer
operator|!=
name|InlineBuffer
operator|.
name|buffer
condition|)
name|delete
index|[]
name|Buffer
decl_stmt|;
block|}
comment|/// Ensures that this buffer has at least as much capacity as described.
name|void
name|reserve
parameter_list|(
name|size_t
name|Requested
parameter_list|)
block|{
if|if
condition|(
name|Requested
operator|>
name|Capacity
condition|)
comment|// For now, match the request exactly.
name|grow
argument_list|(
name|Requested
argument_list|)
expr_stmt|;
block|}
comment|/// Pushes a copy of the given TypeLoc onto this builder.  The builder
comment|/// must be empty for this to work.
name|void
name|pushFullCopy
parameter_list|(
name|TypeLoc
name|L
parameter_list|)
function_decl|;
comment|/// Pushes space for a typespec TypeLoc.  Invalidates any TypeLocs
comment|/// previously retrieved from this builder.
name|TypeSpecTypeLoc
name|pushTypeSpec
parameter_list|(
name|QualType
name|T
parameter_list|)
block|{
name|size_t
name|LocalSize
init|=
name|TypeSpecTypeLoc
operator|::
name|LocalDataSize
decl_stmt|;
name|unsigned
name|LocalAlign
init|=
name|TypeSpecTypeLoc
operator|::
name|LocalDataAlignment
decl_stmt|;
return|return
name|pushImpl
argument_list|(
name|T
argument_list|,
name|LocalSize
argument_list|,
name|LocalAlign
argument_list|)
operator|.
name|castAs
operator|<
name|TypeSpecTypeLoc
operator|>
operator|(
operator|)
return|;
block|}
comment|/// Resets this builder to the newly-initialized state.
name|void
name|clear
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|NDEBUG
name|LastTy
operator|=
name|QualType
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|Index
operator|=
name|Capacity
expr_stmt|;
name|NumBytesAtAlign4
operator|=
name|NumBytesAtAlign8
operator|=
literal|0
expr_stmt|;
block|}
comment|/// \brief Tell the TypeLocBuilder that the type it is storing has been
comment|/// modified in some safe way that doesn't affect type-location information.
name|void
name|TypeWasModifiedSafely
parameter_list|(
name|QualType
name|T
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|NDEBUG
name|LastTy
operator|=
name|T
expr_stmt|;
endif|#
directive|endif
block|}
comment|/// Pushes space for a new TypeLoc of the given type.  Invalidates
comment|/// any TypeLocs previously retrieved from this builder.
name|template
operator|<
name|class
name|TyLocType
operator|>
name|TyLocType
name|push
argument_list|(
argument|QualType T
argument_list|)
block|{
name|TyLocType
name|Loc
operator|=
name|TypeLoc
argument_list|(
name|T
argument_list|,
name|nullptr
argument_list|)
operator|.
name|castAs
operator|<
name|TyLocType
operator|>
operator|(
operator|)
block|;
name|size_t
name|LocalSize
operator|=
name|Loc
operator|.
name|getLocalDataSize
argument_list|()
block|;
name|unsigned
name|LocalAlign
operator|=
name|Loc
operator|.
name|getLocalDataAlignment
argument_list|()
block|;
return|return
name|pushImpl
argument_list|(
name|T
argument_list|,
name|LocalSize
argument_list|,
name|LocalAlign
argument_list|)
operator|.
name|castAs
operator|<
name|TyLocType
operator|>
operator|(
operator|)
return|;
block|}
comment|/// Creates a TypeSourceInfo for the given type.
name|TypeSourceInfo
modifier|*
name|getTypeSourceInfo
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|,
name|QualType
name|T
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|NDEBUG
name|assert
argument_list|(
name|T
operator|==
name|LastTy
operator|&&
literal|"type doesn't match last type pushed!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|size_t
name|FullDataSize
init|=
name|Capacity
operator|-
name|Index
decl_stmt|;
name|TypeSourceInfo
modifier|*
name|DI
init|=
name|Context
operator|.
name|CreateTypeSourceInfo
argument_list|(
name|T
argument_list|,
name|FullDataSize
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|DI
operator|->
name|getTypeLoc
argument_list|()
operator|.
name|getOpaqueData
argument_list|()
argument_list|,
operator|&
name|Buffer
index|[
name|Index
index|]
argument_list|,
name|FullDataSize
argument_list|)
expr_stmt|;
return|return
name|DI
return|;
block|}
comment|/// \brief Copies the type-location information to the given AST context and
comment|/// returns a \c TypeLoc referring into the AST context.
name|TypeLoc
name|getTypeLocInContext
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|,
name|QualType
name|T
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|NDEBUG
name|assert
argument_list|(
name|T
operator|==
name|LastTy
operator|&&
literal|"type doesn't match last type pushed!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|size_t
name|FullDataSize
init|=
name|Capacity
operator|-
name|Index
decl_stmt|;
name|void
modifier|*
name|Mem
init|=
name|Context
operator|.
name|Allocate
argument_list|(
name|FullDataSize
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|Mem
argument_list|,
operator|&
name|Buffer
index|[
name|Index
index|]
argument_list|,
name|FullDataSize
argument_list|)
expr_stmt|;
return|return
name|TypeLoc
argument_list|(
name|T
argument_list|,
name|Mem
argument_list|)
return|;
block|}
name|private
label|:
name|TypeLoc
name|pushImpl
parameter_list|(
name|QualType
name|T
parameter_list|,
name|size_t
name|LocalSize
parameter_list|,
name|unsigned
name|LocalAlignment
parameter_list|)
function_decl|;
comment|/// Grow to the given capacity.
name|void
name|grow
parameter_list|(
name|size_t
name|NewCapacity
parameter_list|)
function_decl|;
comment|/// \brief Retrieve a temporary TypeLoc that refers into this \c TypeLocBuilder
comment|/// object.
comment|///
comment|/// The resulting \c TypeLoc should only be used so long as the
comment|/// \c TypeLocBuilder is active and has not had more type information
comment|/// pushed into it.
name|TypeLoc
name|getTemporaryTypeLoc
parameter_list|(
name|QualType
name|T
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|NDEBUG
name|assert
argument_list|(
name|LastTy
operator|==
name|T
operator|&&
literal|"type doesn't match last type pushed!"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|TypeLoc
argument_list|(
name|T
argument_list|,
operator|&
name|Buffer
index|[
name|Index
index|]
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

