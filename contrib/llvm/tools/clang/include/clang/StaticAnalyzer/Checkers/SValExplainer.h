begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== SValExplainer.h - Symbolic value explainer -----------------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines SValExplainer, a class for pretty-printing a
end_comment

begin_comment
comment|//  human-readable description of a symbolic value. For example,
end_comment

begin_comment
comment|//  "reg_$0<x>" is turned into "initial value of variable 'x'".
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STATICANALYZER_CHECKERS_SVALEXPLAINER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STATICANALYZER_CHECKERS_SVALEXPLAINER_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/DeclCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SValVisitor.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|class
name|SValExplainer
range|:
name|public
name|FullSValVisitor
operator|<
name|SValExplainer
decl_stmt|,
name|std
decl|::
name|string
decl|>
block|{
name|private
label|:
name|ASTContext
modifier|&
name|ACtx
decl_stmt|;
name|std
operator|::
name|string
name|printStmt
argument_list|(
argument|const Stmt *S
argument_list|)
block|{
name|std
operator|::
name|string
name|Str
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Str
argument_list|)
block|;
name|S
operator|->
name|printPretty
argument_list|(
name|OS
argument_list|,
name|nullptr
argument_list|,
name|PrintingPolicy
argument_list|(
name|ACtx
operator|.
name|getLangOpts
argument_list|()
argument_list|)
argument_list|)
block|;
return|return
name|OS
operator|.
name|str
argument_list|()
return|;
block|}
name|bool
name|isThisObject
parameter_list|(
specifier|const
name|SymbolicRegion
modifier|*
name|R
parameter_list|)
block|{
if|if
condition|(
name|auto
name|S
init|=
name|dyn_cast
operator|<
name|SymbolRegionValue
operator|>
operator|(
name|R
operator|->
name|getSymbol
argument_list|()
operator|)
condition|)
if|if
condition|(
name|isa
operator|<
name|CXXThisRegion
operator|>
operator|(
name|S
operator|->
name|getRegion
argument_list|()
operator|)
condition|)
return|return
name|true
return|;
return|return
name|false
return|;
block|}
name|public
label|:
name|SValExplainer
argument_list|(
name|ASTContext
operator|&
name|Ctx
argument_list|)
operator|:
name|ACtx
argument_list|(
argument|Ctx
argument_list|)
block|{}
name|std
operator|::
name|string
name|VisitUnknownVal
argument_list|(
argument|UnknownVal V
argument_list|)
block|{
return|return
literal|"unknown value"
return|;
block|}
name|std
operator|::
name|string
name|VisitUndefinedVal
argument_list|(
argument|UndefinedVal V
argument_list|)
block|{
return|return
literal|"undefined value"
return|;
block|}
name|std
operator|::
name|string
name|VisitLocMemRegionVal
argument_list|(
argument|loc::MemRegionVal V
argument_list|)
block|{
specifier|const
name|MemRegion
operator|*
name|R
operator|=
name|V
operator|.
name|getRegion
argument_list|()
block|;
comment|// Avoid the weird "pointer to pointee of ...".
if|if
condition|(
name|auto
name|SR
init|=
name|dyn_cast
operator|<
name|SymbolicRegion
operator|>
operator|(
name|R
operator|)
condition|)
block|{
comment|// However, "pointer to 'this' object" is fine.
if|if
condition|(
operator|!
name|isThisObject
argument_list|(
name|SR
argument_list|)
condition|)
return|return
name|Visit
argument_list|(
name|SR
operator|->
name|getSymbol
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|"pointer to "
operator|+
name|Visit
argument_list|(
name|R
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitLocConcreteInt
argument_list|(
argument|loc::ConcreteInt V
argument_list|)
block|{
name|llvm
operator|::
name|APSInt
name|I
operator|=
name|V
operator|.
name|getValue
argument_list|()
block|;
name|std
operator|::
name|string
name|Str
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Str
argument_list|)
block|;
name|OS
operator|<<
literal|"concrete memory address '"
operator|<<
name|I
operator|<<
literal|"'"
block|;
return|return
name|OS
operator|.
name|str
argument_list|()
return|;
block|}
name|std
operator|::
name|string
name|VisitNonLocSymbolVal
argument_list|(
argument|nonloc::SymbolVal V
argument_list|)
block|{
return|return
name|Visit
argument_list|(
name|V
operator|.
name|getSymbol
argument_list|()
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitNonLocConcreteInt
argument_list|(
argument|nonloc::ConcreteInt V
argument_list|)
block|{
name|llvm
operator|::
name|APSInt
name|I
operator|=
name|V
operator|.
name|getValue
argument_list|()
block|;
name|std
operator|::
name|string
name|Str
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Str
argument_list|)
block|;
name|OS
operator|<<
operator|(
name|I
operator|.
name|isSigned
argument_list|()
condition|?
literal|"signed "
else|:
literal|"unsigned "
operator|)
operator|<<
name|I
operator|.
name|getBitWidth
argument_list|()
operator|<<
literal|"-bit integer '"
operator|<<
name|I
operator|<<
literal|"'"
block|;
return|return
name|OS
operator|.
name|str
argument_list|()
return|;
block|}
name|std
operator|::
name|string
name|VisitNonLocLazyCompoundVal
argument_list|(
argument|nonloc::LazyCompoundVal V
argument_list|)
block|{
return|return
literal|"lazily frozen compound value of "
operator|+
name|Visit
argument_list|(
name|V
operator|.
name|getRegion
argument_list|()
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitSymbolRegionValue
argument_list|(
argument|const SymbolRegionValue *S
argument_list|)
block|{
specifier|const
name|MemRegion
operator|*
name|R
operator|=
name|S
operator|->
name|getRegion
argument_list|()
block|;
comment|// Special handling for argument values.
if|if
condition|(
name|auto
name|V
init|=
name|dyn_cast
operator|<
name|VarRegion
operator|>
operator|(
name|R
operator|)
condition|)
if|if
condition|(
name|auto
name|D
init|=
name|dyn_cast
operator|<
name|ParmVarDecl
operator|>
operator|(
name|V
operator|->
name|getDecl
argument_list|()
operator|)
condition|)
return|return
literal|"argument '"
operator|+
name|D
operator|->
name|getQualifiedNameAsString
argument_list|()
operator|+
literal|"'"
return|;
return|return
literal|"initial value of "
operator|+
name|Visit
argument_list|(
name|R
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitSymbolConjured
argument_list|(
argument|const SymbolConjured *S
argument_list|)
block|{
return|return
literal|"symbol of type '"
operator|+
name|S
operator|->
name|getType
argument_list|()
operator|.
name|getAsString
argument_list|()
operator|+
literal|"' conjured at statement '"
operator|+
name|printStmt
argument_list|(
name|S
operator|->
name|getStmt
argument_list|()
argument_list|)
operator|+
literal|"'"
return|;
block|}
name|std
operator|::
name|string
name|VisitSymbolDerived
argument_list|(
argument|const SymbolDerived *S
argument_list|)
block|{
return|return
literal|"value derived from ("
operator|+
name|Visit
argument_list|(
name|S
operator|->
name|getParentSymbol
argument_list|()
argument_list|)
operator|+
literal|") for "
operator|+
name|Visit
argument_list|(
name|S
operator|->
name|getRegion
argument_list|()
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitSymbolExtent
argument_list|(
argument|const SymbolExtent *S
argument_list|)
block|{
return|return
literal|"extent of "
operator|+
name|Visit
argument_list|(
name|S
operator|->
name|getRegion
argument_list|()
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitSymbolMetadata
argument_list|(
argument|const SymbolMetadata *S
argument_list|)
block|{
return|return
literal|"metadata of type '"
operator|+
name|S
operator|->
name|getType
argument_list|()
operator|.
name|getAsString
argument_list|()
operator|+
literal|"' tied to "
operator|+
name|Visit
argument_list|(
name|S
operator|->
name|getRegion
argument_list|()
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitSymIntExpr
argument_list|(
argument|const SymIntExpr *S
argument_list|)
block|{
name|std
operator|::
name|string
name|Str
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Str
argument_list|)
block|;
name|OS
operator|<<
literal|"("
operator|<<
name|Visit
argument_list|(
name|S
operator|->
name|getLHS
argument_list|()
argument_list|)
operator|<<
literal|") "
operator|<<
name|std
operator|::
name|string
argument_list|(
name|BinaryOperator
operator|::
name|getOpcodeStr
argument_list|(
name|S
operator|->
name|getOpcode
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|" "
operator|<<
name|S
operator|->
name|getRHS
argument_list|()
block|;
return|return
name|OS
operator|.
name|str
argument_list|()
return|;
block|}
comment|// TODO: IntSymExpr doesn't appear in practice.
comment|// Add the relevant code once it does.
name|std
operator|::
name|string
name|VisitSymSymExpr
argument_list|(
argument|const SymSymExpr *S
argument_list|)
block|{
return|return
literal|"("
operator|+
name|Visit
argument_list|(
name|S
operator|->
name|getLHS
argument_list|()
argument_list|)
operator|+
literal|") "
operator|+
name|std
operator|::
name|string
argument_list|(
name|BinaryOperator
operator|::
name|getOpcodeStr
argument_list|(
name|S
operator|->
name|getOpcode
argument_list|()
argument_list|)
argument_list|)
operator|+
literal|" ("
operator|+
name|Visit
argument_list|(
name|S
operator|->
name|getRHS
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
comment|// TODO: SymbolCast doesn't appear in practice.
comment|// Add the relevant code once it does.
name|std
operator|::
name|string
name|VisitSymbolicRegion
argument_list|(
argument|const SymbolicRegion *R
argument_list|)
block|{
comment|// Explain 'this' object here.
comment|// TODO: Explain CXXThisRegion itself, find a way to test it.
if|if
condition|(
name|isThisObject
argument_list|(
name|R
argument_list|)
condition|)
return|return
literal|"'this' object"
return|;
comment|// Objective-C objects are not normal symbolic regions. At least,
comment|// they're always on the heap.
if|if
condition|(
name|R
operator|->
name|getSymbol
argument_list|()
operator|->
name|getType
argument_list|()
operator|.
name|getCanonicalType
argument_list|()
operator|->
name|getAs
operator|<
name|ObjCObjectPointerType
operator|>
operator|(
operator|)
condition|)
return|return
literal|"object at "
operator|+
name|Visit
argument_list|(
name|R
operator|->
name|getSymbol
argument_list|()
argument_list|)
return|;
comment|// Other heap-based symbolic regions are also special.
if|if
condition|(
name|isa
operator|<
name|HeapSpaceRegion
operator|>
operator|(
name|R
operator|->
name|getMemorySpace
argument_list|()
operator|)
condition|)
return|return
literal|"heap segment that starts at "
operator|+
name|Visit
argument_list|(
name|R
operator|->
name|getSymbol
argument_list|()
argument_list|)
return|;
return|return
literal|"pointee of "
operator|+
name|Visit
argument_list|(
name|R
operator|->
name|getSymbol
argument_list|()
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitAllocaRegion
argument_list|(
argument|const AllocaRegion *R
argument_list|)
block|{
return|return
literal|"region allocated by '"
operator|+
name|printStmt
argument_list|(
name|R
operator|->
name|getExpr
argument_list|()
argument_list|)
operator|+
literal|"'"
return|;
block|}
name|std
operator|::
name|string
name|VisitCompoundLiteralRegion
argument_list|(
argument|const CompoundLiteralRegion *R
argument_list|)
block|{
return|return
literal|"compound literal "
operator|+
name|printStmt
argument_list|(
name|R
operator|->
name|getLiteralExpr
argument_list|()
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|VisitStringRegion
argument_list|(
argument|const StringRegion *R
argument_list|)
block|{
return|return
literal|"string literal "
operator|+
name|R
operator|->
name|getString
argument_list|()
return|;
block|}
name|std
operator|::
name|string
name|VisitElementRegion
argument_list|(
argument|const ElementRegion *R
argument_list|)
block|{
name|std
operator|::
name|string
name|Str
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Str
argument_list|)
block|;
name|OS
operator|<<
literal|"element of type '"
operator|<<
name|R
operator|->
name|getElementType
argument_list|()
operator|.
name|getAsString
argument_list|()
operator|<<
literal|"' with index "
block|;
comment|// For concrete index: omit type of the index integer.
if|if
condition|(
name|auto
name|I
init|=
name|R
operator|->
name|getIndex
argument_list|()
operator|.
name|getAs
operator|<
name|nonloc
operator|::
name|ConcreteInt
operator|>
operator|(
operator|)
condition|)
name|OS
operator|<<
name|I
operator|->
name|getValue
argument_list|()
expr_stmt|;
else|else
name|OS
operator|<<
literal|"'"
operator|<<
name|Visit
argument_list|(
name|R
operator|->
name|getIndex
argument_list|()
argument_list|)
operator|<<
literal|"'"
expr_stmt|;
name|OS
operator|<<
literal|" of "
operator|+
name|Visit
argument_list|(
name|R
operator|->
name|getSuperRegion
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|OS
operator|.
name|str
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|VisitVarRegion
argument_list|(
argument|const VarRegion *R
argument_list|)
block|{
specifier|const
name|VarDecl
operator|*
name|VD
operator|=
name|R
operator|->
name|getDecl
argument_list|()
block|;
name|std
operator|::
name|string
name|Name
operator|=
name|VD
operator|->
name|getQualifiedNameAsString
argument_list|()
block|;
if|if
condition|(
name|isa
operator|<
name|ParmVarDecl
operator|>
operator|(
name|VD
operator|)
condition|)
return|return
literal|"parameter '"
operator|+
name|Name
operator|+
literal|"'"
return|;
elseif|else
if|if
condition|(
name|VD
operator|->
name|hasAttr
operator|<
name|BlocksAttr
operator|>
operator|(
operator|)
condition|)
return|return
literal|"block variable '"
operator|+
name|Name
operator|+
literal|"'"
return|;
elseif|else
if|if
condition|(
name|VD
operator|->
name|hasLocalStorage
argument_list|()
condition|)
return|return
literal|"local variable '"
operator|+
name|Name
operator|+
literal|"'"
return|;
elseif|else
if|if
condition|(
name|VD
operator|->
name|isStaticLocal
argument_list|()
condition|)
return|return
literal|"static local variable '"
operator|+
name|Name
operator|+
literal|"'"
return|;
elseif|else
if|if
condition|(
name|VD
operator|->
name|hasGlobalStorage
argument_list|()
condition|)
return|return
literal|"global variable '"
operator|+
name|Name
operator|+
literal|"'"
return|;
else|else
name|llvm_unreachable
argument_list|(
literal|"A variable is either local or global"
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|VisitObjCIvarRegion
argument_list|(
argument|const ObjCIvarRegion *R
argument_list|)
block|{
return|return
literal|"instance variable '"
operator|+
name|R
operator|->
name|getDecl
argument_list|()
operator|->
name|getNameAsString
argument_list|()
operator|+
literal|"' of "
operator|+
name|Visit
argument_list|(
name|R
operator|->
name|getSuperRegion
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|VisitFieldRegion
argument_list|(
argument|const FieldRegion *R
argument_list|)
block|{
return|return
literal|"field '"
operator|+
name|R
operator|->
name|getDecl
argument_list|()
operator|->
name|getNameAsString
argument_list|()
operator|+
literal|"' of "
operator|+
name|Visit
argument_list|(
name|R
operator|->
name|getSuperRegion
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|VisitCXXTempObjectRegion
argument_list|(
argument|const CXXTempObjectRegion *R
argument_list|)
block|{
return|return
literal|"temporary object constructed at statement '"
operator|+
name|printStmt
argument_list|(
name|R
operator|->
name|getExpr
argument_list|()
argument_list|)
operator|+
literal|"'"
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|VisitCXXBaseObjectRegion
argument_list|(
argument|const CXXBaseObjectRegion *R
argument_list|)
block|{
return|return
literal|"base object '"
operator|+
name|R
operator|->
name|getDecl
argument_list|()
operator|->
name|getQualifiedNameAsString
argument_list|()
operator|+
literal|"' inside "
operator|+
name|Visit
argument_list|(
name|R
operator|->
name|getSuperRegion
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|VisitSVal
argument_list|(
argument|SVal V
argument_list|)
block|{
name|std
operator|::
name|string
name|Str
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Str
argument_list|)
block|;
name|OS
operator|<<
name|V
block|;
return|return
literal|"a value unsupported by the explainer: ("
operator|+
name|std
operator|::
name|string
argument_list|(
name|OS
operator|.
name|str
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|VisitSymExpr
argument_list|(
argument|SymbolRef S
argument_list|)
block|{
name|std
operator|::
name|string
name|Str
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Str
argument_list|)
block|;
name|S
operator|->
name|dumpToStream
argument_list|(
name|OS
argument_list|)
block|;
return|return
literal|"a symbolic expression unsupported by the explainer: ("
operator|+
name|std
operator|::
name|string
argument_list|(
name|OS
operator|.
name|str
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|VisitMemRegion
argument_list|(
argument|const MemRegion *R
argument_list|)
block|{
name|std
operator|::
name|string
name|Str
block|;
name|llvm
operator|::
name|raw_string_ostream
name|OS
argument_list|(
name|Str
argument_list|)
block|;
name|OS
operator|<<
name|R
block|;
return|return
literal|"a memory region unsupported by the explainer ("
operator|+
name|std
operator|::
name|string
argument_list|(
name|OS
operator|.
name|str
argument_list|()
argument_list|)
operator|+
literal|")"
return|;
block|}
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace ento
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

