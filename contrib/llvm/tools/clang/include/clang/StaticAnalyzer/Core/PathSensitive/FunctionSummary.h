begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== FunctionSummary.h - Stores summaries of functions. ------------*- C++ -*-//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines a summary of a function gathered/used by static analyzes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_GR_FUNCTIONSUMMARY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_GR_FUNCTIONSUMMARY_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Decl.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|Decl
operator|*
operator|,
literal|24
operator|>
name|SetOfDecls
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
specifier|const
name|Decl
operator|*
operator|,
literal|24
operator|>
name|SetOfConstDecls
expr_stmt|;
name|class
name|FunctionSummariesTy
block|{
struct|struct
name|FunctionSummary
block|{
comment|/// True if this function has reached a max block count while inlined from
comment|/// at least one call site.
name|bool
name|MayReachMaxBlockCount
decl_stmt|;
comment|/// Total number of blocks in the function.
name|unsigned
name|TotalBasicBlocks
decl_stmt|;
comment|/// Marks the IDs of the basic blocks visited during the analyzes.
name|llvm
operator|::
name|BitVector
name|VisitedBasicBlocks
expr_stmt|;
name|FunctionSummary
argument_list|()
operator|:
name|MayReachMaxBlockCount
argument_list|(
name|false
argument_list|)
operator|,
name|TotalBasicBlocks
argument_list|(
literal|0
argument_list|)
operator|,
name|VisitedBasicBlocks
argument_list|(
literal|0
argument_list|)
block|{}
block|}
struct|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Decl
operator|*
operator|,
name|FunctionSummary
operator|*
operator|>
name|MapTy
expr_stmt|;
name|MapTy
name|Map
decl_stmt|;
name|public
label|:
operator|~
name|FunctionSummariesTy
argument_list|()
expr_stmt|;
name|MapTy
operator|::
name|iterator
name|findOrInsertSummary
argument_list|(
argument|const Decl *D
argument_list|)
block|{
name|MapTy
operator|::
name|iterator
name|I
operator|=
name|Map
operator|.
name|find
argument_list|(
name|D
argument_list|)
block|;
if|if
condition|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return
name|I
return|;
name|FunctionSummary
operator|*
name|DS
operator|=
name|new
name|FunctionSummary
argument_list|()
expr_stmt|;
name|I
operator|=
name|Map
operator|.
name|insert
argument_list|(
name|std
operator|::
name|pair
operator|<
specifier|const
name|Decl
operator|*
argument_list|,
name|FunctionSummary
operator|*
operator|>
operator|(
name|D
operator|,
name|DS
operator|)
argument_list|)
operator|.
name|first
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|I
return|;
block|}
name|void
name|markReachedMaxBlockCount
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
block|{
name|MapTy
operator|::
name|iterator
name|I
operator|=
name|findOrInsertSummary
argument_list|(
name|D
argument_list|)
expr_stmt|;
name|I
operator|->
name|second
operator|->
name|MayReachMaxBlockCount
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|hasReachedMaxBlockCount
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
block|{
name|MapTy
operator|::
name|const_iterator
name|I
operator|=
name|Map
operator|.
name|find
argument_list|(
name|D
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return
name|I
operator|->
name|second
operator|->
name|MayReachMaxBlockCount
return|;
return|return
name|false
return|;
block|}
name|void
name|markVisitedBasicBlock
parameter_list|(
name|unsigned
name|ID
parameter_list|,
specifier|const
name|Decl
modifier|*
name|D
parameter_list|,
name|unsigned
name|TotalIDs
parameter_list|)
block|{
name|MapTy
operator|::
name|iterator
name|I
operator|=
name|findOrInsertSummary
argument_list|(
name|D
argument_list|)
expr_stmt|;
name|llvm
operator|::
name|BitVector
operator|&
name|Blocks
operator|=
name|I
operator|->
name|second
operator|->
name|VisitedBasicBlocks
expr_stmt|;
name|assert
argument_list|(
name|ID
operator|<
name|TotalIDs
argument_list|)
expr_stmt|;
if|if
condition|(
name|TotalIDs
operator|>
name|Blocks
operator|.
name|size
argument_list|()
condition|)
block|{
name|Blocks
operator|.
name|resize
argument_list|(
name|TotalIDs
argument_list|)
expr_stmt|;
name|I
operator|->
name|second
operator|->
name|TotalBasicBlocks
operator|=
name|TotalIDs
expr_stmt|;
block|}
name|Blocks
index|[
name|ID
index|]
operator|=
name|true
expr_stmt|;
block|}
name|unsigned
name|getNumVisitedBasicBlocks
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
block|{
name|MapTy
operator|::
name|const_iterator
name|I
operator|=
name|Map
operator|.
name|find
argument_list|(
name|D
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return
name|I
operator|->
name|second
operator|->
name|VisitedBasicBlocks
operator|.
name|count
argument_list|()
return|;
return|return
literal|0
return|;
block|}
comment|/// Get the percentage of the reachable blocks.
name|unsigned
name|getPercentBlocksReachable
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
block|{
name|MapTy
operator|::
name|const_iterator
name|I
operator|=
name|Map
operator|.
name|find
argument_list|(
name|D
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return
operator|(
operator|(
name|I
operator|->
name|second
operator|->
name|VisitedBasicBlocks
operator|.
name|count
argument_list|()
operator|*
literal|100
operator|)
operator|/
name|I
operator|->
name|second
operator|->
name|TotalBasicBlocks
operator|)
return|;
return|return
literal|0
return|;
block|}
name|unsigned
name|getTotalNumBasicBlocks
parameter_list|()
function_decl|;
name|unsigned
name|getTotalNumVisitedBasicBlocks
parameter_list|()
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
unit|}
comment|// end clang ento namespaces
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

