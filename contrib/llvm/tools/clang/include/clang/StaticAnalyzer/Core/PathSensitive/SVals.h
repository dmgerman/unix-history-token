begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== SVals.h - Abstract Values for Static Analysis ---------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines SVal, Loc, and NonLoc, classes that represent
end_comment

begin_comment
comment|//  abstract r-values for use with path-sensitive value tracking.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SVALS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_SVALS_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Expr.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/ProgramState_Fwd.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableList.h"
end_include

begin_comment
comment|//==------------------------------------------------------------------------==//
end_comment

begin_comment
comment|//  Base SVal types.
end_comment

begin_comment
comment|//==------------------------------------------------------------------------==//
end_comment

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|class
name|CompoundValData
decl_stmt|;
name|class
name|LazyCompoundValData
decl_stmt|;
name|class
name|ProgramState
decl_stmt|;
name|class
name|BasicValueFactory
decl_stmt|;
name|class
name|MemRegion
decl_stmt|;
name|class
name|TypedValueRegion
decl_stmt|;
name|class
name|MemRegionManager
decl_stmt|;
name|class
name|ProgramStateManager
decl_stmt|;
name|class
name|SValBuilder
decl_stmt|;
comment|/// SVal - This represents a symbolic expression, which can be either
comment|///  an L-value or an R-value.
comment|///
name|class
name|SVal
block|{
name|public
label|:
enum|enum
name|BaseKind
block|{
comment|// The enumerators must be representable using 2 bits.
define|#
directive|define
name|BASIC_SVAL
parameter_list|(
name|Id
parameter_list|,
name|Parent
parameter_list|)
value|Id ## Kind,
define|#
directive|define
name|ABSTRACT_SVAL_WITH_KIND
parameter_list|(
name|Id
parameter_list|,
name|Parent
parameter_list|)
value|Id ## Kind,
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"
block|}
enum|;
enum|enum
block|{
name|BaseBits
init|=
literal|2
block|,
name|BaseMask
init|=
literal|0x3
block|}
enum|;
name|protected
label|:
specifier|const
name|void
modifier|*
name|Data
decl_stmt|;
comment|/// The lowest 2 bits are a BaseKind (0 -- 3).
comment|///  The higher bits are an unsigned "kind" value.
name|unsigned
name|Kind
decl_stmt|;
name|explicit
name|SVal
argument_list|(
argument|const void *d
argument_list|,
argument|bool isLoc
argument_list|,
argument|unsigned ValKind
argument_list|)
block|:
name|Data
argument_list|(
name|d
argument_list|)
operator|,
name|Kind
argument_list|(
argument|(isLoc ? LocKind : NonLocKind) | (ValKind<< BaseBits)
argument_list|)
block|{}
name|explicit
name|SVal
argument_list|(
argument|BaseKind k
argument_list|,
argument|const void *D = nullptr
argument_list|)
operator|:
name|Data
argument_list|(
name|D
argument_list|)
operator|,
name|Kind
argument_list|(
argument|k
argument_list|)
block|{}
name|public
operator|:
name|explicit
name|SVal
argument_list|()
operator|:
name|Data
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Kind
argument_list|(
literal|0
argument_list|)
block|{}
comment|/// \brief Convert to the specified SVal type, asserting that this SVal is of
comment|/// the desired type.
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|castAs
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|T
operator|::
name|isKind
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
block|;
name|T
name|t
block|;
name|SVal
operator|&
name|sv
operator|=
name|t
block|;
name|sv
operator|=
operator|*
name|this
block|;
return|return
name|t
return|;
block|}
comment|/// \brief Convert to the specified SVal type, returning None if this SVal is
comment|/// not of the desired type.
name|template
operator|<
name|typename
name|T
operator|>
name|Optional
operator|<
name|T
operator|>
name|getAs
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|T
operator|::
name|isKind
argument_list|(
operator|*
name|this
argument_list|)
condition|)
return|return
name|None
return|;
name|T
name|t
expr_stmt|;
name|SVal
modifier|&
name|sv
init|=
name|t
decl_stmt|;
name|sv
operator|=
operator|*
name|this
expr_stmt|;
return|return
name|t
return|;
block|}
comment|/// BufferTy - A temporary buffer to hold a set of SVals.
typedef|typedef
name|SmallVector
operator|<
name|SVal
operator|,
literal|5
operator|>
name|BufferTy
expr_stmt|;
specifier|inline
name|unsigned
name|getRawKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
specifier|inline
name|BaseKind
name|getBaseKind
argument_list|()
specifier|const
block|{
return|return
call|(
name|BaseKind
call|)
argument_list|(
name|Kind
operator|&
name|BaseMask
argument_list|)
return|;
block|}
specifier|inline
name|unsigned
name|getSubKind
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Kind
operator|&
operator|~
name|BaseMask
operator|)
operator|>>
name|BaseBits
return|;
block|}
comment|// This method is required for using SVal in a FoldingSetNode.  It
comment|// extracts a unique signature for this SVal object.
specifier|inline
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
operator|(
name|unsigned
operator|)
name|getRawKind
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|Data
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SVal
operator|&
name|R
operator|)
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|==
name|R
operator|.
name|getRawKind
argument_list|()
operator|&&
name|Data
operator|==
name|R
operator|.
name|Data
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|SVal
operator|&
name|R
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|R
operator|)
return|;
block|}
specifier|inline
name|bool
name|isUnknown
argument_list|()
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|==
name|UnknownValKind
return|;
block|}
specifier|inline
name|bool
name|isUndef
argument_list|()
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|==
name|UndefinedValKind
return|;
block|}
specifier|inline
name|bool
name|isUnknownOrUndef
argument_list|()
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|<=
name|UnknownValKind
return|;
block|}
specifier|inline
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|getRawKind
argument_list|()
operator|>
name|UnknownValKind
return|;
block|}
name|bool
name|isConstant
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isConstant
argument_list|(
name|int
name|I
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isZeroConstant
argument_list|()
specifier|const
expr_stmt|;
comment|/// hasConjuredSymbol - If this SVal wraps a conjured symbol, return true;
name|bool
name|hasConjuredSymbol
argument_list|()
specifier|const
expr_stmt|;
comment|/// getAsFunctionDecl - If this SVal is a MemRegionVal and wraps a
comment|/// CodeTextRegion wrapping a FunctionDecl, return that FunctionDecl.
comment|/// Otherwise return 0.
specifier|const
name|FunctionDecl
operator|*
name|getAsFunctionDecl
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief If this SVal is a location and wraps a symbol, return that
comment|///  SymbolRef. Otherwise return 0.
comment|///
comment|/// Casts are ignored during lookup.
comment|/// \param IncludeBaseRegions The boolean that controls whether the search
comment|/// should continue to the base regions if the region is not symbolic.
name|SymbolRef
name|getAsLocSymbol
argument_list|(
name|bool
name|IncludeBaseRegions
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
comment|/// Get the symbol in the SVal or its base region.
name|SymbolRef
name|getLocSymbolInBase
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief If this SVal wraps a symbol return that SymbolRef.
comment|/// Otherwise, return 0.
comment|///
comment|/// Casts are ignored during lookup.
comment|/// \param IncludeBaseRegions The boolean that controls whether the search
comment|/// should continue to the base regions if the region is not symbolic.
name|SymbolRef
name|getAsSymbol
argument_list|(
name|bool
name|IncludeBaseRegions
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
comment|/// getAsSymbolicExpression - If this Sval wraps a symbolic expression then
comment|///  return that expression.  Otherwise return NULL.
specifier|const
name|SymExpr
operator|*
name|getAsSymbolicExpression
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|SymExpr
operator|*
name|getAsSymExpr
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|MemRegion
operator|*
name|getAsRegion
argument_list|()
specifier|const
expr_stmt|;
name|void
name|dumpToStream
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
name|SymExpr
operator|::
name|symbol_iterator
name|symbol_begin
argument_list|()
specifier|const
block|{
specifier|const
name|SymExpr
operator|*
name|SE
operator|=
name|getAsSymbolicExpression
argument_list|()
block|;
if|if
condition|(
name|SE
condition|)
return|return
name|SE
operator|->
name|symbol_begin
argument_list|()
return|;
else|else
return|return
name|SymExpr
operator|::
name|symbol_iterator
argument_list|()
return|;
block|}
name|SymExpr
operator|::
name|symbol_iterator
name|symbol_end
argument_list|()
specifier|const
block|{
return|return
name|SymExpr
operator|::
name|symbol_end
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|class
name|UndefinedVal
range|:
name|public
name|SVal
block|{
name|public
operator|:
name|UndefinedVal
argument_list|()
operator|:
name|SVal
argument_list|(
argument|UndefinedValKind
argument_list|)
block|{}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|UndefinedValKind
return|;
block|}
expr|}
block|;
name|class
name|DefinedOrUnknownSVal
operator|:
name|public
name|SVal
block|{
name|private
operator|:
comment|// We want calling these methods to be a compiler error since they are
comment|// tautologically false.
name|bool
name|isUndef
argument_list|()
specifier|const
operator|=
name|delete
block|;
name|bool
name|isValid
argument_list|()
specifier|const
operator|=
name|delete
block|;
name|protected
operator|:
name|DefinedOrUnknownSVal
argument_list|()
block|{}
name|explicit
name|DefinedOrUnknownSVal
argument_list|(
argument|const void *d
argument_list|,
argument|bool isLoc
argument_list|,
argument|unsigned ValKind
argument_list|)
operator|:
name|SVal
argument_list|(
argument|d
argument_list|,
argument|isLoc
argument_list|,
argument|ValKind
argument_list|)
block|{}
name|explicit
name|DefinedOrUnknownSVal
argument_list|(
argument|BaseKind k
argument_list|,
argument|void *D = nullptr
argument_list|)
operator|:
name|SVal
argument_list|(
argument|k
argument_list|,
argument|D
argument_list|)
block|{}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
operator|!
name|V
operator|.
name|isUndef
argument_list|()
return|;
block|}
expr|}
block|;
name|class
name|UnknownVal
operator|:
name|public
name|DefinedOrUnknownSVal
block|{
name|public
operator|:
name|explicit
name|UnknownVal
argument_list|()
operator|:
name|DefinedOrUnknownSVal
argument_list|(
argument|UnknownValKind
argument_list|)
block|{}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal&V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|UnknownValKind
return|;
block|}
expr|}
block|;
name|class
name|DefinedSVal
operator|:
name|public
name|DefinedOrUnknownSVal
block|{
name|private
operator|:
comment|// We want calling these methods to be a compiler error since they are
comment|// tautologically true/false.
name|bool
name|isUnknown
argument_list|()
specifier|const
operator|=
name|delete
block|;
name|bool
name|isUnknownOrUndef
argument_list|()
specifier|const
operator|=
name|delete
block|;
name|bool
name|isValid
argument_list|()
specifier|const
operator|=
name|delete
block|;
name|protected
operator|:
name|DefinedSVal
argument_list|()
block|{}
name|explicit
name|DefinedSVal
argument_list|(
argument|const void *d
argument_list|,
argument|bool isLoc
argument_list|,
argument|unsigned ValKind
argument_list|)
operator|:
name|DefinedOrUnknownSVal
argument_list|(
argument|d
argument_list|,
argument|isLoc
argument_list|,
argument|ValKind
argument_list|)
block|{}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
operator|!
name|V
operator|.
name|isUnknownOrUndef
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Represents an SVal that is guaranteed to not be UnknownVal.
name|class
name|KnownSVal
operator|:
name|public
name|SVal
block|{
name|KnownSVal
argument_list|()
block|{}
name|friend
name|class
name|SVal
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal&V
argument_list|)
block|{
return|return
operator|!
name|V
operator|.
name|isUnknown
argument_list|()
return|;
block|}
name|public
operator|:
name|KnownSVal
argument_list|(
specifier|const
name|DefinedSVal
operator|&
name|V
argument_list|)
operator|:
name|SVal
argument_list|(
argument|V
argument_list|)
block|{}
name|KnownSVal
argument_list|(
specifier|const
name|UndefinedVal
operator|&
name|V
argument_list|)
operator|:
name|SVal
argument_list|(
argument|V
argument_list|)
block|{}
expr|}
block|;
name|class
name|NonLoc
operator|:
name|public
name|DefinedSVal
block|{
name|protected
operator|:
name|NonLoc
argument_list|()
block|{}
name|explicit
name|NonLoc
argument_list|(
argument|unsigned SubKind
argument_list|,
argument|const void *d
argument_list|)
operator|:
name|DefinedSVal
argument_list|(
argument|d
argument_list|,
argument|false
argument_list|,
argument|SubKind
argument_list|)
block|{}
name|public
operator|:
name|void
name|dumpToStream
argument_list|(
argument|raw_ostream&Out
argument_list|)
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|SVal
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
return|;
block|}
expr|}
block|;
name|class
name|Loc
operator|:
name|public
name|DefinedSVal
block|{
name|protected
operator|:
name|Loc
argument_list|()
block|{}
name|explicit
name|Loc
argument_list|(
argument|unsigned SubKind
argument_list|,
argument|const void *D
argument_list|)
operator|:
name|DefinedSVal
argument_list|(
argument|const_cast<void*>(D)
argument_list|,
argument|true
argument_list|,
argument|SubKind
argument_list|)
block|{}
name|public
operator|:
name|void
name|dumpToStream
argument_list|(
argument|raw_ostream&Out
argument_list|)
specifier|const
block|;
specifier|static
specifier|inline
name|bool
name|isLocType
argument_list|(
argument|QualType T
argument_list|)
block|{
return|return
name|T
operator|->
name|isAnyPointerType
argument_list|()
operator|||
name|T
operator|->
name|isBlockPointerType
argument_list|()
operator|||
name|T
operator|->
name|isReferenceType
argument_list|()
operator|||
name|T
operator|->
name|isNullPtrType
argument_list|()
return|;
block|}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|LocKind
return|;
block|}
expr|}
block|;
comment|//==------------------------------------------------------------------------==//
comment|//  Subclasses of NonLoc.
comment|//==------------------------------------------------------------------------==//
name|namespace
name|nonloc
block|{  enum
name|Kind
block|{
define|#
directive|define
name|NONLOC_SVAL
parameter_list|(
name|Id
parameter_list|,
name|Parent
parameter_list|)
value|Id ## Kind,
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"
block|}
block|;
comment|/// \brief Represents symbolic expression.
name|class
name|SymbolVal
operator|:
name|public
name|NonLoc
block|{
name|public
operator|:
name|SymbolVal
argument_list|(
argument|SymbolRef sym
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|SymbolValKind
argument_list|,
argument|sym
argument_list|)
block|{}
name|SymbolRef
name|getSymbol
argument_list|()
specifier|const
block|{
return|return
operator|(
specifier|const
name|SymExpr
operator|*
operator|)
name|Data
return|;
block|}
name|bool
name|isExpression
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isa
operator|<
name|SymbolData
operator|>
operator|(
name|getSymbol
argument_list|()
operator|)
return|;
block|}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
name|SymbolVal
argument_list|()
block|{}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|SymbolValKind
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const NonLoc& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|SymbolValKind
return|;
block|}
expr|}
block|;
comment|/// \brief Value representing integer constant.
name|class
name|ConcreteInt
operator|:
name|public
name|NonLoc
block|{
name|public
operator|:
name|explicit
name|ConcreteInt
argument_list|(
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|V
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|ConcreteIntKind
argument_list|,
argument|&V
argument_list|)
block|{}
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getValue
argument_list|()
specifier|const
block|{
return|return
operator|*
name|static_cast
operator|<
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
comment|// Transfer functions for binary/unary operations on ConcreteInts.
name|SVal
name|evalBinOp
argument_list|(
argument|SValBuilder&svalBuilder
argument_list|,
argument|BinaryOperator::Opcode Op
argument_list|,
argument|const ConcreteInt& R
argument_list|)
specifier|const
block|;
name|ConcreteInt
name|evalComplement
argument_list|(
argument|SValBuilder&svalBuilder
argument_list|)
specifier|const
block|;
name|ConcreteInt
name|evalMinus
argument_list|(
argument|SValBuilder&svalBuilder
argument_list|)
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|SVal
block|;
name|ConcreteInt
argument_list|()
block|{}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|ConcreteIntKind
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const NonLoc& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|ConcreteIntKind
return|;
block|}
expr|}
block|;
name|class
name|LocAsInteger
operator|:
name|public
name|NonLoc
block|{
name|friend
name|class
name|ento
operator|::
name|SValBuilder
block|;
name|explicit
name|LocAsInteger
argument_list|(
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
argument_list|,
name|uintptr_t
operator|>
operator|&
name|data
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|LocAsIntegerKind
argument_list|,
argument|&data
argument_list|)
block|{
name|assert
argument_list|(
name|data
operator|.
name|first
operator|.
name|getAs
operator|<
name|Loc
operator|>
operator|(
operator|)
argument_list|)
block|;   }
name|public
operator|:
name|Loc
name|getLoc
argument_list|()
specifier|const
block|{
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
block|,
name|uintptr_t
operator|>
operator|*
name|D
operator|=
name|static_cast
operator|<
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
block|,
name|uintptr_t
operator|>
operator|*
operator|>
operator|(
name|Data
operator|)
block|;
return|return
name|D
operator|->
name|first
operator|.
name|castAs
operator|<
name|Loc
operator|>
operator|(
operator|)
return|;
block|}
name|Loc
name|getPersistentLoc
argument_list|()
specifier|const
block|{
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
block|,
name|uintptr_t
operator|>
operator|*
name|D
operator|=
name|static_cast
operator|<
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
block|,
name|uintptr_t
operator|>
operator|*
operator|>
operator|(
name|Data
operator|)
block|;
specifier|const
name|SVal
operator|&
name|V
operator|=
name|D
operator|->
name|first
block|;
return|return
name|V
operator|.
name|castAs
operator|<
name|Loc
operator|>
operator|(
operator|)
return|;
block|}
name|unsigned
name|getNumBits
argument_list|()
specifier|const
block|{
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
block|,
name|uintptr_t
operator|>
operator|*
name|D
operator|=
name|static_cast
operator|<
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
block|,
name|uintptr_t
operator|>
operator|*
operator|>
operator|(
name|Data
operator|)
block|;
return|return
name|D
operator|->
name|second
return|;
block|}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
name|LocAsInteger
argument_list|()
block|{}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|LocAsIntegerKind
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const NonLoc& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|LocAsIntegerKind
return|;
block|}
expr|}
block|;
name|class
name|CompoundVal
operator|:
name|public
name|NonLoc
block|{
name|friend
name|class
name|ento
operator|::
name|SValBuilder
block|;
name|explicit
name|CompoundVal
argument_list|(
specifier|const
name|CompoundValData
operator|*
name|D
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|CompoundValKind
argument_list|,
argument|D
argument_list|)
block|{}
name|public
operator|:
specifier|const
name|CompoundValData
operator|*
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|CompoundValData
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
typedef|typedef
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
specifier|const
block|;
name|iterator
name|end
argument_list|()
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|SVal
block|;
name|CompoundVal
argument_list|()
block|{}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|CompoundValKind
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const NonLoc& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|CompoundValKind
return|;
block|}
expr|}
block|;
name|class
name|LazyCompoundVal
operator|:
name|public
name|NonLoc
block|{
name|friend
name|class
name|ento
operator|::
name|SValBuilder
block|;
name|explicit
name|LazyCompoundVal
argument_list|(
specifier|const
name|LazyCompoundValData
operator|*
name|D
argument_list|)
operator|:
name|NonLoc
argument_list|(
argument|LazyCompoundValKind
argument_list|,
argument|D
argument_list|)
block|{}
name|public
operator|:
specifier|const
name|LazyCompoundValData
operator|*
name|getCVData
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|LazyCompoundValData
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
specifier|const
name|void
operator|*
name|getStore
argument_list|()
specifier|const
block|;
specifier|const
name|TypedValueRegion
operator|*
name|getRegion
argument_list|()
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|SVal
block|;
name|LazyCompoundVal
argument_list|()
block|{}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|NonLocKind
operator|&&
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|LazyCompoundValKind
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const NonLoc& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|LazyCompoundValKind
return|;
block|}
expr|}
block|;  }
comment|// end namespace ento::nonloc
comment|//==------------------------------------------------------------------------==//
comment|//  Subclasses of Loc.
comment|//==------------------------------------------------------------------------==//
name|namespace
name|loc
block|{  enum
name|Kind
block|{
define|#
directive|define
name|LOC_SVAL
parameter_list|(
name|Id
parameter_list|,
name|Parent
parameter_list|)
value|Id ## Kind,
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.def"
block|}
block|;
name|class
name|GotoLabel
operator|:
name|public
name|Loc
block|{
name|public
operator|:
name|explicit
name|GotoLabel
argument_list|(
name|LabelDecl
operator|*
name|Label
argument_list|)
operator|:
name|Loc
argument_list|(
argument|GotoLabelKind
argument_list|,
argument|Label
argument_list|)
block|{}
specifier|const
name|LabelDecl
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|LabelDecl
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
name|GotoLabel
argument_list|()
block|{}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|LocKind
operator|&&
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|GotoLabelKind
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const Loc& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|GotoLabelKind
return|;
block|}
expr|}
block|;
name|class
name|MemRegionVal
operator|:
name|public
name|Loc
block|{
name|public
operator|:
name|explicit
name|MemRegionVal
argument_list|(
specifier|const
name|MemRegion
operator|*
name|r
argument_list|)
operator|:
name|Loc
argument_list|(
argument|MemRegionValKind
argument_list|,
argument|r
argument_list|)
block|{}
comment|/// \brief Get the underlining region.
specifier|const
name|MemRegion
operator|*
name|getRegion
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|MemRegion
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
comment|/// \brief Get the underlining region and strip casts.
specifier|const
name|MemRegion
operator|*
name|stripCasts
argument_list|(
argument|bool StripBaseCasts = true
argument_list|)
specifier|const
block|;
name|template
operator|<
name|typename
name|REGION
operator|>
specifier|const
name|REGION
operator|*
name|getRegionAs
argument_list|()
specifier|const
block|{
return|return
name|dyn_cast
operator|<
name|REGION
operator|>
operator|(
name|getRegion
argument_list|()
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MemRegionVal
operator|&
name|R
operator|)
specifier|const
block|{
return|return
name|getRegion
argument_list|()
operator|==
name|R
operator|.
name|getRegion
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|MemRegionVal
operator|&
name|R
operator|)
specifier|const
block|{
return|return
name|getRegion
argument_list|()
operator|!=
name|R
operator|.
name|getRegion
argument_list|()
return|;
block|}
name|private
operator|:
name|friend
name|class
name|SVal
block|;
name|MemRegionVal
argument_list|()
block|{}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|LocKind
operator|&&
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|MemRegionValKind
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const Loc& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|MemRegionValKind
return|;
block|}
expr|}
block|;
name|class
name|ConcreteInt
operator|:
name|public
name|Loc
block|{
name|public
operator|:
name|explicit
name|ConcreteInt
argument_list|(
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|V
argument_list|)
operator|:
name|Loc
argument_list|(
argument|ConcreteIntKind
argument_list|,
argument|&V
argument_list|)
block|{}
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getValue
argument_list|()
specifier|const
block|{
return|return
operator|*
name|static_cast
operator|<
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
operator|>
operator|(
name|Data
operator|)
return|;
block|}
comment|// Transfer functions for binary/unary operations on ConcreteInts.
name|SVal
name|evalBinOp
argument_list|(
argument|BasicValueFactory& BasicVals
argument_list|,
argument|BinaryOperator::Opcode Op
argument_list|,
argument|const ConcreteInt& R
argument_list|)
specifier|const
block|;
name|private
operator|:
name|friend
name|class
name|SVal
block|;
name|ConcreteInt
argument_list|()
block|{}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const SVal& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getBaseKind
argument_list|()
operator|==
name|LocKind
operator|&&
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|ConcreteIntKind
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const Loc& V
argument_list|)
block|{
return|return
name|V
operator|.
name|getSubKind
argument_list|()
operator|==
name|ConcreteIntKind
return|;
block|}
expr|}
block|;  }
comment|// end ento::loc namespace
block|}
comment|// end ento namespace
block|}
comment|// end clang namespace
name|namespace
name|llvm
block|{
specifier|static
specifier|inline
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|os
expr|,
name|clang
operator|::
name|ento
operator|::
name|SVal
name|V
operator|)
block|{
name|V
operator|.
name|dumpToStream
argument_list|(
name|os
argument_list|)
block|;
return|return
name|os
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|isPodLike
block|;
name|template
operator|<
operator|>
expr|struct
name|isPodLike
operator|<
name|clang
operator|::
name|ento
operator|::
name|SVal
operator|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
block|;  }
end_decl_stmt

begin_comment
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

