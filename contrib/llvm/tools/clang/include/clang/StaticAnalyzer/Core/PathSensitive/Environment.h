begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== Environment.h - Map from Stmt* to Locations/Values ---------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defined the Environment and EnvironmentManager classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_GR_ENVIRONMENT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_GR_ENVIRONMENT_H
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/AnalysisContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableMap.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|LiveVariables
decl_stmt|;
name|namespace
name|ento
block|{
name|class
name|EnvironmentManager
decl_stmt|;
name|class
name|SValBuilder
decl_stmt|;
comment|/// An entry in the environment consists of a Stmt and an LocationContext.
comment|/// This allows the environment to manage context-sensitive bindings,
comment|/// which is essentially for modeling recursive function analysis, among
comment|/// other things.
name|class
name|EnvironmentEntry
range|:
name|public
name|std
operator|::
name|pair
operator|<
specifier|const
name|Stmt
operator|*
decl_stmt|,                                           const
name|StackFrameContext
modifier|*
decl|>
block|{
name|public
label|:
name|EnvironmentEntry
argument_list|(
specifier|const
name|Stmt
operator|*
name|s
argument_list|,
specifier|const
name|LocationContext
operator|*
name|L
argument_list|)
expr_stmt|;
specifier|const
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
block|{
return|return
name|first
return|;
block|}
specifier|const
name|LocationContext
operator|*
name|getLocationContext
argument_list|()
specifier|const
block|{
return|return
name|second
return|;
block|}
comment|/// Profile an EnvironmentEntry for inclusion in a FoldingSet.
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
specifier|const
name|EnvironmentEntry
operator|&
name|E
argument_list|)
block|{
name|ID
operator|.
name|AddPointer
argument_list|(
name|E
operator|.
name|getStmt
argument_list|()
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|E
operator|.
name|getLocationContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|/// An immutable map from EnvironemntEntries to SVals.
name|class
name|Environment
block|{
name|private
label|:
name|friend
name|class
name|EnvironmentManager
decl_stmt|;
comment|// Type definitions.
typedef|typedef
name|llvm
operator|::
name|ImmutableMap
operator|<
name|EnvironmentEntry
operator|,
name|SVal
operator|>
name|BindingsTy
expr_stmt|;
comment|// Data.
name|BindingsTy
name|ExprBindings
decl_stmt|;
name|Environment
argument_list|(
argument|BindingsTy eb
argument_list|)
block|:
name|ExprBindings
argument_list|(
argument|eb
argument_list|)
block|{}
name|SVal
name|lookupExpr
argument_list|(
specifier|const
name|EnvironmentEntry
operator|&
name|E
argument_list|)
decl|const
decl_stmt|;
name|public
label|:
typedef|typedef
name|BindingsTy
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|ExprBindings
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|ExprBindings
operator|.
name|end
argument_list|()
return|;
block|}
comment|/// Fetches the current binding of the expression in the
comment|/// Environment.
name|SVal
name|getSVal
argument_list|(
specifier|const
name|EnvironmentEntry
operator|&
name|E
argument_list|,
name|SValBuilder
operator|&
name|svalBuilder
argument_list|)
decl|const
decl_stmt|;
comment|/// Profile - Profile the contents of an Environment object for use
comment|///  in a FoldingSet.
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
specifier|const
name|Environment
operator|*
name|env
argument_list|)
block|{
name|env
operator|->
name|ExprBindings
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
comment|/// Profile - Used to profile the contents of this object for inclusion
comment|///  in a FoldingSet.
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Environment
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ExprBindings
operator|==
name|RHS
operator|.
name|ExprBindings
return|;
block|}
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|Out
argument_list|,
specifier|const
name|char
operator|*
name|NL
argument_list|,
specifier|const
name|char
operator|*
name|Sep
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|void
name|printAux
argument_list|(
name|raw_ostream
operator|&
name|Out
argument_list|,
name|bool
name|printLocations
argument_list|,
specifier|const
name|char
operator|*
name|NL
argument_list|,
specifier|const
name|char
operator|*
name|Sep
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
name|class
name|EnvironmentManager
block|{
name|private
label|:
typedef|typedef
name|Environment
operator|::
name|BindingsTy
operator|::
name|Factory
name|FactoryTy
expr_stmt|;
name|FactoryTy
name|F
decl_stmt|;
name|public
label|:
name|EnvironmentManager
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Allocator
argument_list|)
operator|:
name|F
argument_list|(
argument|Allocator
argument_list|)
block|{}
operator|~
name|EnvironmentManager
argument_list|()
block|{}
name|Environment
name|getInitialEnvironment
argument_list|()
block|{
return|return
name|Environment
argument_list|(
name|F
operator|.
name|getEmptyMap
argument_list|()
argument_list|)
return|;
block|}
comment|/// Bind a symbolic value to the given environment entry.
name|Environment
name|bindExpr
parameter_list|(
name|Environment
name|Env
parameter_list|,
specifier|const
name|EnvironmentEntry
modifier|&
name|E
parameter_list|,
name|SVal
name|V
parameter_list|,
name|bool
name|Invalidate
parameter_list|)
function_decl|;
name|Environment
name|removeDeadBindings
parameter_list|(
name|Environment
name|Env
parameter_list|,
name|SymbolReaper
modifier|&
name|SymReaper
parameter_list|,
name|ProgramStateRef
name|state
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
comment|// end GR namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

