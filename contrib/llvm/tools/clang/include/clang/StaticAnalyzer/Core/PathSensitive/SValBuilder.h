begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// SValBuilder.h - Construction of SVals from evaluating expressions -*- C++ -*-
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines SValBuilder, a class that defines the interface for
end_comment

begin_comment
comment|//  "symbolical evaluators" which construct an SVal from an expression.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_GR_SVALBUILDER
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_GR_SVALBUILDER
end_define

begin_include
include|#
directive|include
file|"clang/AST/ASTContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Expr.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprObjC.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/BasicValueFactory.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CXXBoolLiteralExpr
decl_stmt|;
name|namespace
name|ento
block|{
name|class
name|SValBuilder
block|{
name|virtual
name|void
name|anchor
parameter_list|()
function_decl|;
name|protected
label|:
name|ASTContext
modifier|&
name|Context
decl_stmt|;
comment|/// Manager of APSInt values.
name|BasicValueFactory
name|BasicVals
decl_stmt|;
comment|/// Manages the creation of symbols.
name|SymbolManager
name|SymMgr
decl_stmt|;
comment|/// Manages the creation of memory regions.
name|MemRegionManager
name|MemMgr
decl_stmt|;
name|ProgramStateManager
modifier|&
name|StateMgr
decl_stmt|;
comment|/// The scalar type to use for array indices.
specifier|const
name|QualType
name|ArrayIndexTy
decl_stmt|;
comment|/// The width of the scalar type used for array indices.
specifier|const
name|unsigned
name|ArrayIndexWidth
decl_stmt|;
name|virtual
name|SVal
name|evalCastFromNonLoc
parameter_list|(
name|NonLoc
name|val
parameter_list|,
name|QualType
name|castTy
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|evalCastFromLoc
parameter_list|(
name|Loc
name|val
parameter_list|,
name|QualType
name|castTy
parameter_list|)
init|=
literal|0
function_decl|;
name|public
label|:
comment|// FIXME: Make these protected again once RegionStoreManager correctly
comment|// handles loads from different bound value types.
name|virtual
name|SVal
name|dispatchCast
parameter_list|(
name|SVal
name|val
parameter_list|,
name|QualType
name|castTy
parameter_list|)
init|=
literal|0
function_decl|;
name|public
label|:
name|SValBuilder
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|alloc
argument_list|,
name|ASTContext
operator|&
name|context
argument_list|,
name|ProgramStateManager
operator|&
name|stateMgr
argument_list|)
operator|:
name|Context
argument_list|(
name|context
argument_list|)
operator|,
name|BasicVals
argument_list|(
name|context
argument_list|,
name|alloc
argument_list|)
operator|,
name|SymMgr
argument_list|(
name|context
argument_list|,
name|BasicVals
argument_list|,
name|alloc
argument_list|)
operator|,
name|MemMgr
argument_list|(
name|context
argument_list|,
name|alloc
argument_list|)
operator|,
name|StateMgr
argument_list|(
name|stateMgr
argument_list|)
operator|,
name|ArrayIndexTy
argument_list|(
name|context
operator|.
name|IntTy
argument_list|)
operator|,
name|ArrayIndexWidth
argument_list|(
argument|context.getTypeSize(ArrayIndexTy)
argument_list|)
block|{}
name|virtual
operator|~
name|SValBuilder
argument_list|()
block|{}
name|bool
name|haveSameType
argument_list|(
argument|const SymExpr *Sym1
argument_list|,
argument|const SymExpr *Sym2
argument_list|)
block|{
return|return
name|haveSameType
argument_list|(
name|Sym1
operator|->
name|getType
argument_list|()
argument_list|,
name|Sym2
operator|->
name|getType
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|haveSameType
parameter_list|(
name|QualType
name|Ty1
parameter_list|,
name|QualType
name|Ty2
parameter_list|)
block|{
comment|// FIXME: Remove the second disjunct when we support symbolic
comment|// truncation/extension.
return|return
operator|(
name|Context
operator|.
name|getCanonicalType
argument_list|(
name|Ty1
argument_list|)
operator|==
name|Context
operator|.
name|getCanonicalType
argument_list|(
name|Ty2
argument_list|)
operator|||
operator|(
name|Ty1
operator|->
name|isIntegralOrEnumerationType
argument_list|()
operator|&&
name|Ty2
operator|->
name|isIntegralOrEnumerationType
argument_list|()
operator|)
operator|)
return|;
block|}
name|SVal
name|evalCast
parameter_list|(
name|SVal
name|val
parameter_list|,
name|QualType
name|castTy
parameter_list|,
name|QualType
name|originalType
parameter_list|)
function_decl|;
name|virtual
name|SVal
name|evalMinus
parameter_list|(
name|NonLoc
name|val
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|SVal
name|evalComplement
parameter_list|(
name|NonLoc
name|val
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Create a new value which represents a binary expression with two non-
comment|/// location operands.
name|virtual
name|SVal
name|evalBinOpNN
argument_list|(
name|ProgramStateRef
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
name|NonLoc
name|lhs
argument_list|,
name|NonLoc
name|rhs
argument_list|,
name|QualType
name|resultTy
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// Create a new value which represents a binary expression with two memory
comment|/// location operands.
name|virtual
name|SVal
name|evalBinOpLL
argument_list|(
name|ProgramStateRef
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
name|Loc
name|lhs
argument_list|,
name|Loc
name|rhs
argument_list|,
name|QualType
name|resultTy
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// Create a new value which represents a binary expression with a memory
comment|/// location and non-location operands. For example, this would be used to
comment|/// evaluate a pointer arithmetic operation.
name|virtual
name|SVal
name|evalBinOpLN
argument_list|(
name|ProgramStateRef
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
name|Loc
name|lhs
argument_list|,
name|NonLoc
name|rhs
argument_list|,
name|QualType
name|resultTy
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// Evaluates a given SVal. If the SVal has only one possible (integer) value,
comment|/// that value is returned. Otherwise, returns NULL.
name|virtual
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
name|getKnownValue
argument_list|(
argument|ProgramStateRef state
argument_list|,
argument|SVal val
argument_list|)
operator|=
literal|0
expr_stmt|;
comment|/// Constructs a symbolic expression for two non-location values.
name|SVal
name|makeSymExprValNN
argument_list|(
name|ProgramStateRef
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
name|NonLoc
name|lhs
argument_list|,
name|NonLoc
name|rhs
argument_list|,
name|QualType
name|resultTy
argument_list|)
decl_stmt|;
name|SVal
name|evalBinOp
argument_list|(
name|ProgramStateRef
name|state
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
name|SVal
name|lhs
argument_list|,
name|SVal
name|rhs
argument_list|,
name|QualType
name|type
argument_list|)
decl_stmt|;
name|DefinedOrUnknownSVal
name|evalEQ
parameter_list|(
name|ProgramStateRef
name|state
parameter_list|,
name|DefinedOrUnknownSVal
name|lhs
parameter_list|,
name|DefinedOrUnknownSVal
name|rhs
parameter_list|)
function_decl|;
name|ASTContext
modifier|&
name|getContext
parameter_list|()
block|{
return|return
name|Context
return|;
block|}
specifier|const
name|ASTContext
operator|&
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|ProgramStateManager
modifier|&
name|getStateManager
parameter_list|()
block|{
return|return
name|StateMgr
return|;
block|}
name|QualType
name|getConditionType
argument_list|()
specifier|const
block|{
return|return
name|Context
operator|.
name|getLangOpts
argument_list|()
operator|.
name|CPlusPlus
operator|?
name|Context
operator|.
name|BoolTy
operator|:
name|Context
operator|.
name|IntTy
return|;
block|}
name|QualType
name|getArrayIndexType
argument_list|()
specifier|const
block|{
return|return
name|ArrayIndexTy
return|;
block|}
name|BasicValueFactory
modifier|&
name|getBasicValueFactory
parameter_list|()
block|{
return|return
name|BasicVals
return|;
block|}
specifier|const
name|BasicValueFactory
operator|&
name|getBasicValueFactory
argument_list|()
specifier|const
block|{
return|return
name|BasicVals
return|;
block|}
name|SymbolManager
modifier|&
name|getSymbolManager
parameter_list|()
block|{
return|return
name|SymMgr
return|;
block|}
specifier|const
name|SymbolManager
operator|&
name|getSymbolManager
argument_list|()
specifier|const
block|{
return|return
name|SymMgr
return|;
block|}
name|MemRegionManager
modifier|&
name|getRegionManager
parameter_list|()
block|{
return|return
name|MemMgr
return|;
block|}
specifier|const
name|MemRegionManager
operator|&
name|getRegionManager
argument_list|()
specifier|const
block|{
return|return
name|MemMgr
return|;
block|}
comment|// Forwarding methods to SymbolManager.
specifier|const
name|SymbolConjured
modifier|*
name|conjureSymbol
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|stmt
parameter_list|,
specifier|const
name|LocationContext
modifier|*
name|LCtx
parameter_list|,
name|QualType
name|type
parameter_list|,
name|unsigned
name|visitCount
parameter_list|,
specifier|const
name|void
modifier|*
name|symbolTag
init|=
name|nullptr
parameter_list|)
block|{
return|return
name|SymMgr
operator|.
name|conjureSymbol
argument_list|(
name|stmt
argument_list|,
name|LCtx
argument_list|,
name|type
argument_list|,
name|visitCount
argument_list|,
name|symbolTag
argument_list|)
return|;
block|}
specifier|const
name|SymbolConjured
modifier|*
name|conjureSymbol
parameter_list|(
specifier|const
name|Expr
modifier|*
name|expr
parameter_list|,
specifier|const
name|LocationContext
modifier|*
name|LCtx
parameter_list|,
name|unsigned
name|visitCount
parameter_list|,
specifier|const
name|void
modifier|*
name|symbolTag
init|=
name|nullptr
parameter_list|)
block|{
return|return
name|SymMgr
operator|.
name|conjureSymbol
argument_list|(
name|expr
argument_list|,
name|LCtx
argument_list|,
name|visitCount
argument_list|,
name|symbolTag
argument_list|)
return|;
block|}
comment|/// Construct an SVal representing '0' for the specified type.
name|DefinedOrUnknownSVal
name|makeZeroVal
parameter_list|(
name|QualType
name|type
parameter_list|)
function_decl|;
comment|/// Make a unique symbol for value of region.
name|DefinedOrUnknownSVal
name|getRegionValueSymbolVal
parameter_list|(
specifier|const
name|TypedValueRegion
modifier|*
name|region
parameter_list|)
function_decl|;
comment|/// \brief Create a new symbol with a unique 'name'.
comment|///
comment|/// We resort to conjured symbols when we cannot construct a derived symbol.
comment|/// The advantage of symbols derived/built from other symbols is that we
comment|/// preserve the relation between related(or even equivalent) expressions, so
comment|/// conjured symbols should be used sparingly.
name|DefinedOrUnknownSVal
name|conjureSymbolVal
parameter_list|(
specifier|const
name|void
modifier|*
name|symbolTag
parameter_list|,
specifier|const
name|Expr
modifier|*
name|expr
parameter_list|,
specifier|const
name|LocationContext
modifier|*
name|LCtx
parameter_list|,
name|unsigned
name|count
parameter_list|)
function_decl|;
name|DefinedOrUnknownSVal
name|conjureSymbolVal
parameter_list|(
specifier|const
name|void
modifier|*
name|symbolTag
parameter_list|,
specifier|const
name|Expr
modifier|*
name|expr
parameter_list|,
specifier|const
name|LocationContext
modifier|*
name|LCtx
parameter_list|,
name|QualType
name|type
parameter_list|,
name|unsigned
name|count
parameter_list|)
function_decl|;
name|DefinedOrUnknownSVal
name|conjureSymbolVal
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|stmt
parameter_list|,
specifier|const
name|LocationContext
modifier|*
name|LCtx
parameter_list|,
name|QualType
name|type
parameter_list|,
name|unsigned
name|visitCount
parameter_list|)
function_decl|;
comment|/// \brief Conjure a symbol representing heap allocated memory region.
comment|///
comment|/// Note, the expression should represent a location.
name|DefinedOrUnknownSVal
name|getConjuredHeapSymbolVal
parameter_list|(
specifier|const
name|Expr
modifier|*
name|E
parameter_list|,
specifier|const
name|LocationContext
modifier|*
name|LCtx
parameter_list|,
name|unsigned
name|Count
parameter_list|)
function_decl|;
name|DefinedOrUnknownSVal
name|getDerivedRegionValueSymbolVal
parameter_list|(
name|SymbolRef
name|parentSymbol
parameter_list|,
specifier|const
name|TypedValueRegion
modifier|*
name|region
parameter_list|)
function_decl|;
name|DefinedSVal
name|getMetadataSymbolVal
parameter_list|(
specifier|const
name|void
modifier|*
name|symbolTag
parameter_list|,
specifier|const
name|MemRegion
modifier|*
name|region
parameter_list|,
specifier|const
name|Expr
modifier|*
name|expr
parameter_list|,
name|QualType
name|type
parameter_list|,
name|unsigned
name|count
parameter_list|)
function_decl|;
name|DefinedSVal
name|getFunctionPointer
parameter_list|(
specifier|const
name|FunctionDecl
modifier|*
name|func
parameter_list|)
function_decl|;
name|DefinedSVal
name|getBlockPointer
parameter_list|(
specifier|const
name|BlockDecl
modifier|*
name|block
parameter_list|,
name|CanQualType
name|locTy
parameter_list|,
specifier|const
name|LocationContext
modifier|*
name|locContext
parameter_list|,
name|unsigned
name|blockCount
parameter_list|)
function_decl|;
comment|/// Returns the value of \p E, if it can be determined in a non-path-sensitive
comment|/// manner.
comment|///
comment|/// If \p E is not a constant or cannot be modeled, returns \c None.
name|Optional
operator|<
name|SVal
operator|>
name|getConstantVal
argument_list|(
specifier|const
name|Expr
operator|*
name|E
argument_list|)
expr_stmt|;
name|NonLoc
name|makeCompoundVal
argument_list|(
name|QualType
name|type
argument_list|,
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
name|vals
argument_list|)
block|{
return|return
name|nonloc
operator|::
name|CompoundVal
argument_list|(
name|BasicVals
operator|.
name|getCompoundValData
argument_list|(
name|type
argument_list|,
name|vals
argument_list|)
argument_list|)
return|;
block|}
name|NonLoc
name|makeLazyCompoundVal
parameter_list|(
specifier|const
name|StoreRef
modifier|&
name|store
parameter_list|,
specifier|const
name|TypedValueRegion
modifier|*
name|region
parameter_list|)
block|{
return|return
name|nonloc
operator|::
name|LazyCompoundVal
argument_list|(
name|BasicVals
operator|.
name|getLazyCompoundValData
argument_list|(
name|store
argument_list|,
name|region
argument_list|)
argument_list|)
return|;
block|}
name|NonLoc
name|makeZeroArrayIndex
parameter_list|()
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
literal|0
argument_list|,
name|ArrayIndexTy
argument_list|)
argument_list|)
return|;
block|}
name|NonLoc
name|makeArrayIndex
parameter_list|(
name|uint64_t
name|idx
parameter_list|)
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
name|idx
argument_list|,
name|ArrayIndexTy
argument_list|)
argument_list|)
return|;
block|}
name|SVal
name|convertToArrayIndex
parameter_list|(
name|SVal
name|val
parameter_list|)
function_decl|;
name|nonloc
operator|::
name|ConcreteInt
name|makeIntVal
argument_list|(
argument|const IntegerLiteral* integer
argument_list|)
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
name|integer
operator|->
name|getValue
argument_list|()
argument_list|,
name|integer
operator|->
name|getType
argument_list|()
operator|->
name|isUnsignedIntegerOrEnumerationType
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
name|nonloc
operator|::
name|ConcreteInt
name|makeBoolVal
argument_list|(
argument|const ObjCBoolLiteralExpr *boolean
argument_list|)
block|{
return|return
name|makeTruthVal
argument_list|(
name|boolean
operator|->
name|getValue
argument_list|()
argument_list|,
name|boolean
operator|->
name|getType
argument_list|()
argument_list|)
return|;
block|}
name|nonloc
operator|::
name|ConcreteInt
name|makeBoolVal
argument_list|(
specifier|const
name|CXXBoolLiteralExpr
operator|*
name|boolean
argument_list|)
expr_stmt|;
name|nonloc
operator|::
name|ConcreteInt
name|makeIntVal
argument_list|(
argument|const llvm::APSInt& integer
argument_list|)
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
name|integer
argument_list|)
argument_list|)
return|;
block|}
name|loc
operator|::
name|ConcreteInt
name|makeIntLocVal
argument_list|(
argument|const llvm::APSInt&integer
argument_list|)
block|{
return|return
name|loc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
name|integer
argument_list|)
argument_list|)
return|;
block|}
name|NonLoc
name|makeIntVal
argument_list|(
specifier|const
name|llvm
operator|::
name|APInt
operator|&
name|integer
argument_list|,
name|bool
name|isUnsigned
argument_list|)
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
name|integer
argument_list|,
name|isUnsigned
argument_list|)
argument_list|)
return|;
block|}
name|DefinedSVal
name|makeIntVal
parameter_list|(
name|uint64_t
name|integer
parameter_list|,
name|QualType
name|type
parameter_list|)
block|{
if|if
condition|(
name|Loc
operator|::
name|isLocType
argument_list|(
name|type
argument_list|)
condition|)
return|return
name|loc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
name|integer
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
name|integer
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
name|NonLoc
name|makeIntVal
parameter_list|(
name|uint64_t
name|integer
parameter_list|,
name|bool
name|isUnsigned
parameter_list|)
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getIntValue
argument_list|(
name|integer
argument_list|,
name|isUnsigned
argument_list|)
argument_list|)
return|;
block|}
name|NonLoc
name|makeIntValWithPtrWidth
parameter_list|(
name|uint64_t
name|integer
parameter_list|,
name|bool
name|isUnsigned
parameter_list|)
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getIntWithPtrWidth
argument_list|(
name|integer
argument_list|,
name|isUnsigned
argument_list|)
argument_list|)
return|;
block|}
name|NonLoc
name|makeLocAsInteger
parameter_list|(
name|Loc
name|loc
parameter_list|,
name|unsigned
name|bits
parameter_list|)
block|{
return|return
name|nonloc
operator|::
name|LocAsInteger
argument_list|(
name|BasicVals
operator|.
name|getPersistentSValWithData
argument_list|(
name|loc
argument_list|,
name|bits
argument_list|)
argument_list|)
return|;
block|}
name|NonLoc
name|makeNonLoc
argument_list|(
specifier|const
name|SymExpr
operator|*
name|lhs
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|rhs
argument_list|,
name|QualType
name|type
argument_list|)
decl_stmt|;
name|NonLoc
name|makeNonLoc
argument_list|(
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|rhs
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
specifier|const
name|SymExpr
operator|*
name|lhs
argument_list|,
name|QualType
name|type
argument_list|)
decl_stmt|;
name|NonLoc
name|makeNonLoc
argument_list|(
specifier|const
name|SymExpr
operator|*
name|lhs
argument_list|,
name|BinaryOperator
operator|::
name|Opcode
name|op
argument_list|,
specifier|const
name|SymExpr
operator|*
name|rhs
argument_list|,
name|QualType
name|type
argument_list|)
decl_stmt|;
comment|/// \brief Create a NonLoc value for cast.
name|NonLoc
name|makeNonLoc
parameter_list|(
specifier|const
name|SymExpr
modifier|*
name|operand
parameter_list|,
name|QualType
name|fromTy
parameter_list|,
name|QualType
name|toTy
parameter_list|)
function_decl|;
name|nonloc
operator|::
name|ConcreteInt
name|makeTruthVal
argument_list|(
argument|bool b
argument_list|,
argument|QualType type
argument_list|)
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getTruthValue
argument_list|(
name|b
argument_list|,
name|type
argument_list|)
argument_list|)
return|;
block|}
name|nonloc
operator|::
name|ConcreteInt
name|makeTruthVal
argument_list|(
argument|bool b
argument_list|)
block|{
return|return
name|nonloc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getTruthValue
argument_list|(
name|b
argument_list|)
argument_list|)
return|;
block|}
name|Loc
name|makeNull
parameter_list|()
block|{
return|return
name|loc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getZeroWithPtrWidth
argument_list|()
argument_list|)
return|;
block|}
name|Loc
name|makeLoc
parameter_list|(
name|SymbolRef
name|sym
parameter_list|)
block|{
return|return
name|loc
operator|::
name|MemRegionVal
argument_list|(
name|MemMgr
operator|.
name|getSymbolicRegion
argument_list|(
name|sym
argument_list|)
argument_list|)
return|;
block|}
name|Loc
name|makeLoc
parameter_list|(
specifier|const
name|MemRegion
modifier|*
name|region
parameter_list|)
block|{
return|return
name|loc
operator|::
name|MemRegionVal
argument_list|(
name|region
argument_list|)
return|;
block|}
name|Loc
name|makeLoc
parameter_list|(
specifier|const
name|AddrLabelExpr
modifier|*
name|expr
parameter_list|)
block|{
return|return
name|loc
operator|::
name|GotoLabel
argument_list|(
name|expr
operator|->
name|getLabel
argument_list|()
argument_list|)
return|;
block|}
name|Loc
name|makeLoc
argument_list|(
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|integer
argument_list|)
block|{
return|return
name|loc
operator|::
name|ConcreteInt
argument_list|(
name|BasicVals
operator|.
name|getValue
argument_list|(
name|integer
argument_list|)
argument_list|)
return|;
block|}
comment|/// Return a memory region for the 'this' object reference.
name|loc
operator|::
name|MemRegionVal
name|getCXXThis
argument_list|(
specifier|const
name|CXXMethodDecl
operator|*
name|D
argument_list|,
specifier|const
name|StackFrameContext
operator|*
name|SFC
argument_list|)
expr_stmt|;
comment|/// Return a memory region for the 'this' object reference.
name|loc
operator|::
name|MemRegionVal
name|getCXXThis
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|D
argument_list|,
specifier|const
name|StackFrameContext
operator|*
name|SFC
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|SValBuilder
modifier|*
name|createSimpleSValBuilder
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|alloc
argument_list|,
name|ASTContext
operator|&
name|context
argument_list|,
name|ProgramStateManager
operator|&
name|stateMgr
argument_list|)
decl_stmt|;
block|}
comment|// end GR namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

