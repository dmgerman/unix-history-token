begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=== BasicValueFactory.h - Basic values for Path Sens analysis --*- C++ -*---//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines BasicValueFactory, a class that manages the lifetime
end_comment

begin_comment
comment|//  of APSInt objects and symbolic constraints used by ExprEngine
end_comment

begin_comment
comment|//  and related classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_BASICVALUEFACTORY_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STATICANALYZER_CORE_PATHSENSITIVE_BASICVALUEFACTORY_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ASTContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/APSIntType.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/StoreRef.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|class
name|CompoundValData
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
name|QualType
name|T
block|;
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
name|L
block|;
name|public
operator|:
name|CompoundValData
argument_list|(
argument|QualType t
argument_list|,
argument|llvm::ImmutableList<SVal> l
argument_list|)
operator|:
name|T
argument_list|(
name|t
argument_list|)
block|,
name|L
argument_list|(
argument|l
argument_list|)
block|{}
typedef|typedef
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|L
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|L
operator|.
name|end
argument_list|()
return|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID& ID
argument_list|,
argument|QualType T
argument_list|,
argument|llvm::ImmutableList<SVal> L
argument_list|)
decl_stmt|;
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|T
argument_list|,
name|L
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
name|class
name|LazyCompoundValData
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
name|StoreRef
name|store
block|;
specifier|const
name|TypedValueRegion
operator|*
name|region
block|;
name|public
operator|:
name|LazyCompoundValData
argument_list|(
specifier|const
name|StoreRef
operator|&
name|st
argument_list|,
specifier|const
name|TypedValueRegion
operator|*
name|r
argument_list|)
operator|:
name|store
argument_list|(
name|st
argument_list|)
block|,
name|region
argument_list|(
argument|r
argument_list|)
block|{}
specifier|const
name|void
operator|*
name|getStore
argument_list|()
specifier|const
block|{
return|return
name|store
operator|.
name|getStore
argument_list|()
return|;
block|}
specifier|const
name|TypedValueRegion
operator|*
name|getRegion
argument_list|()
specifier|const
block|{
return|return
name|region
return|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
specifier|const
name|StoreRef
operator|&
name|store
argument_list|,
specifier|const
name|TypedValueRegion
operator|*
name|region
argument_list|)
block|;
name|void
name|Profile
argument_list|(
argument|llvm::FoldingSetNodeID& ID
argument_list|)
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|store
argument_list|,
name|region
argument_list|)
block|; }
block|}
decl_stmt|;
name|class
name|PointerToMemberData
range|:
name|public
name|llvm
operator|::
name|FoldingSetNode
block|{
specifier|const
name|DeclaratorDecl
operator|*
name|D
block|;
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
name|L
block|;
name|public
operator|:
name|PointerToMemberData
argument_list|(
specifier|const
name|DeclaratorDecl
operator|*
name|D
argument_list|,
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
name|L
argument_list|)
operator|:
name|D
argument_list|(
name|D
argument_list|)
block|,
name|L
argument_list|(
argument|L
argument_list|)
block|{}
typedef|typedef
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|L
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|L
operator|.
name|end
argument_list|()
return|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
specifier|const
name|DeclaratorDecl
operator|*
name|D
argument_list|,
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
name|L
argument_list|)
decl_stmt|;
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|D
argument_list|,
name|L
argument_list|)
expr_stmt|;
block|}
specifier|const
name|DeclaratorDecl
operator|*
name|getDeclaratorDecl
argument_list|()
specifier|const
block|{
return|return
name|D
return|;
block|}
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
name|getCXXBaseList
argument_list|()
specifier|const
block|{
return|return
name|L
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|BasicValueFactory
block|{
typedef|typedef
name|llvm
operator|::
name|FoldingSet
operator|<
name|llvm
operator|::
name|FoldingSetNodeWrapper
operator|<
name|llvm
operator|::
name|APSInt
operator|>
expr|>
name|APSIntSetTy
expr_stmt|;
name|ASTContext
modifier|&
name|Ctx
decl_stmt|;
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|BPAlloc
expr_stmt|;
name|APSIntSetTy
name|APSIntSet
decl_stmt|;
name|void
modifier|*
name|PersistentSVals
decl_stmt|;
name|void
modifier|*
name|PersistentSValPairs
decl_stmt|;
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
operator|::
name|Factory
name|SValListFactory
expr_stmt|;
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
operator|::
name|Factory
name|CXXBaseListFactory
expr_stmt|;
name|llvm
operator|::
name|FoldingSet
operator|<
name|CompoundValData
operator|>
name|CompoundValDataSet
expr_stmt|;
name|llvm
operator|::
name|FoldingSet
operator|<
name|LazyCompoundValData
operator|>
name|LazyCompoundValDataSet
expr_stmt|;
name|llvm
operator|::
name|FoldingSet
operator|<
name|PointerToMemberData
operator|>
name|PointerToMemberDataSet
expr_stmt|;
comment|// This is private because external clients should use the factory
comment|// method that takes a QualType.
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getValue
argument_list|(
argument|uint64_t X
argument_list|,
argument|unsigned BitWidth
argument_list|,
argument|bool isUnsigned
argument_list|)
expr_stmt|;
name|public
label|:
name|BasicValueFactory
argument_list|(
name|ASTContext
operator|&
name|ctx
argument_list|,
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Alloc
argument_list|)
operator|:
name|Ctx
argument_list|(
name|ctx
argument_list|)
operator|,
name|BPAlloc
argument_list|(
name|Alloc
argument_list|)
operator|,
name|PersistentSVals
argument_list|(
name|nullptr
argument_list|)
operator|,
name|PersistentSValPairs
argument_list|(
name|nullptr
argument_list|)
operator|,
name|SValListFactory
argument_list|(
name|Alloc
argument_list|)
operator|,
name|CXXBaseListFactory
argument_list|(
argument|Alloc
argument_list|)
block|{}
operator|~
name|BasicValueFactory
argument_list|()
expr_stmt|;
name|ASTContext
operator|&
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|Ctx
return|;
block|}
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getValue
argument_list|(
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|X
argument_list|)
expr_stmt|;
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getValue
argument_list|(
argument|const llvm::APInt& X
argument_list|,
argument|bool isUnsigned
argument_list|)
expr_stmt|;
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getValue
argument_list|(
argument|uint64_t X
argument_list|,
argument|QualType T
argument_list|)
expr_stmt|;
comment|/// Returns the type of the APSInt used to store values of the given QualType.
name|APSIntType
name|getAPSIntType
argument_list|(
name|QualType
name|T
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|T
operator|->
name|isIntegralOrEnumerationType
argument_list|()
operator|||
name|Loc
operator|::
name|isLocType
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|APSIntType
argument_list|(
name|Ctx
operator|.
name|getTypeSize
argument_list|(
name|T
argument_list|)
argument_list|,
operator|!
name|T
operator|->
name|isSignedIntegerOrEnumerationType
argument_list|()
argument_list|)
return|;
block|}
comment|/// Convert - Create a new persistent APSInt with the same value as 'From'
comment|///  but with the bitwidth and signedness of 'To'.
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|Convert
argument_list|(
argument|const llvm::APSInt& To
argument_list|,
argument|const llvm::APSInt& From
argument_list|)
block|{
name|APSIntType
name|TargetType
argument_list|(
name|To
argument_list|)
block|;
if|if
condition|(
name|TargetType
operator|==
name|APSIntType
argument_list|(
name|From
argument_list|)
condition|)
return|return
name|From
return|;
return|return
name|getValue
argument_list|(
name|TargetType
operator|.
name|convert
argument_list|(
name|From
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|Convert
argument_list|(
argument|QualType T
argument_list|,
argument|const llvm::APSInt&From
argument_list|)
block|{
name|APSIntType
name|TargetType
operator|=
name|getAPSIntType
argument_list|(
name|T
argument_list|)
block|;
if|if
condition|(
name|TargetType
operator|==
name|APSIntType
argument_list|(
name|From
argument_list|)
condition|)
return|return
name|From
return|;
end_expr_stmt

begin_return
return|return
name|getValue
argument_list|(
name|TargetType
operator|.
name|convert
argument_list|(
name|From
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    const
name|llvm
operator|::
name|APSInt
operator|&
name|getIntValue
argument_list|(
argument|uint64_t X
argument_list|,
argument|bool isUnsigned
argument_list|)
block|{
name|QualType
name|T
operator|=
name|isUnsigned
operator|?
name|Ctx
operator|.
name|UnsignedIntTy
operator|:
name|Ctx
operator|.
name|IntTy
block|;
return|return
name|getValue
argument_list|(
name|X
argument_list|,
name|T
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getMaxValue
argument_list|(
argument|const llvm::APSInt&v
argument_list|)
block|{
return|return
name|getValue
argument_list|(
name|APSIntType
argument_list|(
name|v
argument_list|)
operator|.
name|getMaxValue
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getMinValue
argument_list|(
argument|const llvm::APSInt&v
argument_list|)
block|{
return|return
name|getValue
argument_list|(
name|APSIntType
argument_list|(
name|v
argument_list|)
operator|.
name|getMinValue
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getMaxValue
argument_list|(
argument|QualType T
argument_list|)
block|{
return|return
name|getValue
argument_list|(
name|getAPSIntType
argument_list|(
name|T
argument_list|)
operator|.
name|getMaxValue
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getMinValue
argument_list|(
argument|QualType T
argument_list|)
block|{
return|return
name|getValue
argument_list|(
name|getAPSIntType
argument_list|(
name|T
argument_list|)
operator|.
name|getMinValue
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|Add1
argument_list|(
argument|const llvm::APSInt& V
argument_list|)
block|{
name|llvm
operator|::
name|APSInt
name|X
operator|=
name|V
block|;
operator|++
name|X
block|;
return|return
name|getValue
argument_list|(
name|X
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|Sub1
argument_list|(
argument|const llvm::APSInt& V
argument_list|)
block|{
name|llvm
operator|::
name|APSInt
name|X
operator|=
name|V
block|;
operator|--
name|X
block|;
return|return
name|getValue
argument_list|(
name|X
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getZeroWithPtrWidth
argument_list|(
argument|bool isUnsigned = true
argument_list|)
block|{
return|return
name|getValue
argument_list|(
literal|0
argument_list|,
name|Ctx
operator|.
name|getTypeSize
argument_list|(
name|Ctx
operator|.
name|VoidPtrTy
argument_list|)
argument_list|,
name|isUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getIntWithPtrWidth
argument_list|(
argument|uint64_t X
argument_list|,
argument|bool isUnsigned
argument_list|)
block|{
return|return
name|getValue
argument_list|(
name|X
argument_list|,
name|Ctx
operator|.
name|getTypeSize
argument_list|(
name|Ctx
operator|.
name|VoidPtrTy
argument_list|)
argument_list|,
name|isUnsigned
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getTruthValue
argument_list|(
argument|bool b
argument_list|,
argument|QualType T
argument_list|)
block|{
return|return
name|getValue
argument_list|(
name|b
operator|?
literal|1
operator|:
literal|0
argument_list|,
name|Ctx
operator|.
name|getTypeSize
argument_list|(
name|T
argument_list|)
argument_list|,
name|false
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|llvm
operator|::
name|APSInt
operator|&
name|getTruthValue
argument_list|(
argument|bool b
argument_list|)
block|{
return|return
name|getTruthValue
argument_list|(
name|b
argument_list|,
name|Ctx
operator|.
name|getLogicalOperationType
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|CompoundValData
modifier|*
name|getCompoundValData
argument_list|(
name|QualType
name|T
argument_list|,
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
name|Vals
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|const
name|LazyCompoundValData
modifier|*
name|getLazyCompoundValData
parameter_list|(
specifier|const
name|StoreRef
modifier|&
name|store
parameter_list|,
specifier|const
name|TypedValueRegion
modifier|*
name|region
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|const
name|PointerToMemberData
modifier|*
name|getPointerToMemberData
argument_list|(
specifier|const
name|DeclaratorDecl
operator|*
name|DD
argument_list|,
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
name|L
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
name|getEmptySValList
argument_list|()
block|{
return|return
name|SValListFactory
operator|.
name|getEmptyList
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|ImmutableList
operator|<
name|SVal
operator|>
name|prependSVal
argument_list|(
argument|SVal X
argument_list|,
argument|llvm::ImmutableList<SVal> L
argument_list|)
block|{
return|return
name|SValListFactory
operator|.
name|add
argument_list|(
name|X
argument_list|,
name|L
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
name|getEmptyCXXBaseList
argument_list|()
block|{
return|return
name|CXXBaseListFactory
operator|.
name|getEmptyList
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|ImmutableList
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
name|prependCXXBase
argument_list|(
argument|const CXXBaseSpecifier *CBS
argument_list|,
argument|llvm::ImmutableList<const CXXBaseSpecifier *> L
argument_list|)
block|{
return|return
name|CXXBaseListFactory
operator|.
name|add
argument_list|(
name|CBS
argument_list|,
name|L
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|clang
operator|::
name|ento
operator|::
name|PointerToMemberData
operator|*
name|accumCXXBase
argument_list|(
name|llvm
operator|::
name|iterator_range
operator|<
name|CastExpr
operator|::
name|path_const_iterator
operator|>
name|PathRange
argument_list|,
specifier|const
name|nonloc
operator|::
name|PointerToMember
operator|&
name|PTM
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|llvm
operator|::
name|APSInt
operator|*
name|evalAPSInt
argument_list|(
argument|BinaryOperator::Opcode Op
argument_list|,
argument|const llvm::APSInt& V1
argument_list|,
argument|const llvm::APSInt& V2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
operator|,
name|uintptr_t
operator|>
operator|&
name|getPersistentSValWithData
argument_list|(
argument|const SVal& V
argument_list|,
argument|uintptr_t Data
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|std
operator|::
name|pair
operator|<
name|SVal
operator|,
name|SVal
operator|>
operator|&
name|getPersistentSValPair
argument_list|(
specifier|const
name|SVal
operator|&
name|V1
argument_list|,
specifier|const
name|SVal
operator|&
name|V2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
specifier|const
name|SVal
modifier|*
name|getPersistentSVal
parameter_list|(
name|SVal
name|X
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|};  }
comment|// end GR namespace
end_comment

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

