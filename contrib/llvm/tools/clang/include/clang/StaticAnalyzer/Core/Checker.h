begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== Checker.h - Registration mechanism for checkers -------------*- C++ -*--=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines Checker, used to create and register checkers.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STATICANALYZER_CORE_CHECKER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STATICANALYZER_CORE_CHECKER_H
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/ProgramPoint.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/CheckerManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|class
name|BugReporter
decl_stmt|;
name|namespace
name|check
block|{
struct|struct
name|_VoidCheck
block|{
specifier|static
name|void
name|_register
parameter_list|(
name|void
modifier|*
name|checker
parameter_list|,
name|CheckerManager
modifier|&
name|mgr
parameter_list|)
block|{ }
block|}
struct|;
name|template
operator|<
name|typename
name|DECL
operator|>
name|class
name|ASTDecl
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkDecl
argument_list|(
argument|void *checker
argument_list|,
argument|const Decl *D
argument_list|,
argument|AnalysisManager& mgr
argument_list|,
argument|BugReporter&BR
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkASTDecl
argument_list|(
name|cast
operator|<
name|DECL
operator|>
operator|(
name|D
operator|)
argument_list|,
name|mgr
argument_list|,
name|BR
argument_list|)
block|;   }
specifier|static
name|bool
name|_handlesDecl
argument_list|(
argument|const Decl *D
argument_list|)
block|{
return|return
name|isa
operator|<
name|DECL
operator|>
operator|(
name|D
operator|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForDecl
argument_list|(
name|CheckerManager
operator|::
name|CheckDeclFunc
argument_list|(
name|checker
argument_list|,
name|_checkDecl
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|,
name|_handlesDecl
argument_list|)
block|;   }
expr|}
block|;
name|class
name|ASTCodeBody
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkBody
argument_list|(
argument|void *checker
argument_list|,
argument|const Decl *D
argument_list|,
argument|AnalysisManager& mgr
argument_list|,
argument|BugReporter&BR
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkASTCodeBody
argument_list|(
name|D
argument_list|,
name|mgr
argument_list|,
name|BR
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForBody
argument_list|(
name|CheckerManager
operator|::
name|CheckDeclFunc
argument_list|(
name|checker
argument_list|,
name|_checkBody
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|EndOfTranslationUnit
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkEndOfTranslationUnit
argument_list|(
argument|void *checker
argument_list|,
argument|const TranslationUnitDecl *TU
argument_list|,
argument|AnalysisManager& mgr
argument_list|,
argument|BugReporter&BR
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkEndOfTranslationUnit
argument_list|(
name|TU
argument_list|,
name|mgr
argument_list|,
name|BR
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEndOfTranslationUnit
argument_list|(
name|CheckerManager
operator|::
name|CheckEndOfTranslationUnit
argument_list|(
name|checker
argument_list|,
name|_checkEndOfTranslationUnit
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|template
operator|<
name|typename
name|STMT
operator|>
name|class
name|PreStmt
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkStmt
argument_list|(
argument|void *checker
argument_list|,
argument|const Stmt *S
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPreStmt
argument_list|(
name|cast
operator|<
name|STMT
operator|>
operator|(
name|S
operator|)
argument_list|,
name|C
argument_list|)
block|;   }
specifier|static
name|bool
name|_handlesStmt
argument_list|(
argument|const Stmt *S
argument_list|)
block|{
return|return
name|isa
operator|<
name|STMT
operator|>
operator|(
name|S
operator|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPreStmt
argument_list|(
name|CheckerManager
operator|::
name|CheckStmtFunc
argument_list|(
name|checker
argument_list|,
name|_checkStmt
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|,
name|_handlesStmt
argument_list|)
block|;   }
expr|}
block|;
name|template
operator|<
name|typename
name|STMT
operator|>
name|class
name|PostStmt
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkStmt
argument_list|(
argument|void *checker
argument_list|,
argument|const Stmt *S
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPostStmt
argument_list|(
name|cast
operator|<
name|STMT
operator|>
operator|(
name|S
operator|)
argument_list|,
name|C
argument_list|)
block|;   }
specifier|static
name|bool
name|_handlesStmt
argument_list|(
argument|const Stmt *S
argument_list|)
block|{
return|return
name|isa
operator|<
name|STMT
operator|>
operator|(
name|S
operator|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPostStmt
argument_list|(
name|CheckerManager
operator|::
name|CheckStmtFunc
argument_list|(
name|checker
argument_list|,
name|_checkStmt
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|,
name|_handlesStmt
argument_list|)
block|;   }
expr|}
block|;
name|class
name|PreObjCMessage
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkObjCMessage
argument_list|(
argument|void *checker
argument_list|,
argument|const ObjCMethodCall&msg
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPreObjCMessage
argument_list|(
name|msg
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPreObjCMessage
argument_list|(
name|CheckerManager
operator|::
name|CheckObjCMessageFunc
argument_list|(
name|checker
argument_list|,
name|_checkObjCMessage
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|PostObjCMessage
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkObjCMessage
argument_list|(
argument|void *checker
argument_list|,
argument|const ObjCMethodCall&msg
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPostObjCMessage
argument_list|(
name|msg
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPostObjCMessage
argument_list|(
name|CheckerManager
operator|::
name|CheckObjCMessageFunc
argument_list|(
name|checker
argument_list|,
name|_checkObjCMessage
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|PreCall
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkCall
argument_list|(
argument|void *checker
argument_list|,
argument|const CallEvent&msg
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPreCall
argument_list|(
name|msg
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPreCall
argument_list|(
name|CheckerManager
operator|::
name|CheckCallFunc
argument_list|(
name|checker
argument_list|,
name|_checkCall
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|PostCall
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkCall
argument_list|(
argument|void *checker
argument_list|,
argument|const CallEvent&msg
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPostCall
argument_list|(
name|msg
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPostCall
argument_list|(
name|CheckerManager
operator|::
name|CheckCallFunc
argument_list|(
name|checker
argument_list|,
name|_checkCall
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|Location
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkLocation
argument_list|(
argument|void *checker
argument_list|,
argument|const SVal&location
argument_list|,
argument|bool isLoad
argument_list|,
argument|const Stmt *S
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkLocation
argument_list|(
name|location
argument_list|,
name|isLoad
argument_list|,
name|S
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForLocation
argument_list|(
name|CheckerManager
operator|::
name|CheckLocationFunc
argument_list|(
name|checker
argument_list|,
name|_checkLocation
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|Bind
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkBind
argument_list|(
argument|void *checker
argument_list|,
argument|const SVal&location
argument_list|,
argument|const SVal&val
argument_list|,
argument|const Stmt *S
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkBind
argument_list|(
name|location
argument_list|,
name|val
argument_list|,
name|S
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForBind
argument_list|(
name|CheckerManager
operator|::
name|CheckBindFunc
argument_list|(
name|checker
argument_list|,
name|_checkBind
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|EndAnalysis
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkEndAnalysis
argument_list|(
argument|void *checker
argument_list|,
argument|ExplodedGraph&G
argument_list|,
argument|BugReporter&BR
argument_list|,
argument|ExprEngine&Eng
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkEndAnalysis
argument_list|(
name|G
argument_list|,
name|BR
argument_list|,
name|Eng
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEndAnalysis
argument_list|(
name|CheckerManager
operator|::
name|CheckEndAnalysisFunc
argument_list|(
name|checker
argument_list|,
name|_checkEndAnalysis
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|EndFunction
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkEndFunction
argument_list|(
argument|void *checker
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkEndFunction
argument_list|(
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEndFunction
argument_list|(
name|CheckerManager
operator|::
name|CheckEndFunctionFunc
argument_list|(
name|checker
argument_list|,
name|_checkEndFunction
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|BranchCondition
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkBranchCondition
argument_list|(
argument|void *checker
argument_list|,
argument|const Stmt *Condition
argument_list|,
argument|CheckerContext& C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkBranchCondition
argument_list|(
name|Condition
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForBranchCondition
argument_list|(
name|CheckerManager
operator|::
name|CheckBranchConditionFunc
argument_list|(
name|checker
argument_list|,
name|_checkBranchCondition
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|LiveSymbols
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkLiveSymbols
argument_list|(
argument|void *checker
argument_list|,
argument|ProgramStateRef state
argument_list|,
argument|SymbolReaper&SR
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkLiveSymbols
argument_list|(
name|state
argument_list|,
name|SR
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForLiveSymbols
argument_list|(
name|CheckerManager
operator|::
name|CheckLiveSymbolsFunc
argument_list|(
name|checker
argument_list|,
name|_checkLiveSymbols
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|DeadSymbols
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkDeadSymbols
argument_list|(
argument|void *checker
argument_list|,
argument|SymbolReaper&SR
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkDeadSymbols
argument_list|(
name|SR
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForDeadSymbols
argument_list|(
name|CheckerManager
operator|::
name|CheckDeadSymbolsFunc
argument_list|(
name|checker
argument_list|,
name|_checkDeadSymbols
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|RegionChanges
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|ProgramStateRef
name|_checkRegionChanges
argument_list|(
argument|void *checker
argument_list|,
argument|ProgramStateRef state
argument_list|,
argument|const InvalidatedSymbols *invalidated
argument_list|,
argument|ArrayRef<const MemRegion *> Explicits
argument_list|,
argument|ArrayRef<const MemRegion *> Regions
argument_list|,
argument|const CallEvent *Call
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkRegionChanges
argument_list|(
name|state
argument_list|,
name|invalidated
argument_list|,
name|Explicits
argument_list|,
name|Regions
argument_list|,
name|Call
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|bool
name|_wantsRegionChangeUpdate
argument_list|(
argument|void *checker
argument_list|,
argument|ProgramStateRef state
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|wantsRegionChangeUpdate
argument_list|(
name|state
argument_list|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForRegionChanges
argument_list|(
name|CheckerManager
operator|::
name|CheckRegionChangesFunc
argument_list|(
name|checker
argument_list|,
name|_checkRegionChanges
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|,
name|CheckerManager
operator|::
name|WantsRegionChangeUpdateFunc
argument_list|(
name|checker
argument_list|,
name|_wantsRegionChangeUpdate
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
expr|}
block|;
name|class
name|PointerEscape
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|ProgramStateRef
name|_checkPointerEscape
argument_list|(
argument|void *Checker
argument_list|,
argument|ProgramStateRef State
argument_list|,
argument|const InvalidatedSymbols&Escaped
argument_list|,
argument|const CallEvent *Call
argument_list|,
argument|PointerEscapeKind Kind
argument_list|,
argument|RegionAndSymbolInvalidationTraits *ETraits
argument_list|)
block|{
if|if
condition|(
operator|!
name|ETraits
condition|)
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|Checker
operator|)
operator|->
name|checkPointerEscape
argument_list|(
name|State
argument_list|,
name|Escaped
argument_list|,
name|Call
argument_list|,
name|Kind
argument_list|)
return|;
name|InvalidatedSymbols
name|RegularEscape
block|;
for|for
control|(
name|InvalidatedSymbols
operator|::
name|const_iterator
name|I
operator|=
name|Escaped
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|Escaped
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
operator|!
name|ETraits
operator|->
name|hasTrait
argument_list|(
operator|*
name|I
argument_list|,
name|RegionAndSymbolInvalidationTraits
operator|::
name|TK_PreserveContents
argument_list|)
operator|&&
operator|!
name|ETraits
operator|->
name|hasTrait
argument_list|(
operator|*
name|I
argument_list|,
name|RegionAndSymbolInvalidationTraits
operator|::
name|TK_SuppressEscape
argument_list|)
condition|)
name|RegularEscape
operator|.
name|insert
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
if|if
condition|(
name|RegularEscape
operator|.
name|empty
argument_list|()
condition|)
return|return
name|State
return|;
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|Checker
operator|)
operator|->
name|checkPointerEscape
argument_list|(
name|State
argument_list|,
name|RegularEscape
argument_list|,
name|Call
argument_list|,
name|Kind
argument_list|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPointerEscape
argument_list|(
name|CheckerManager
operator|::
name|CheckPointerEscapeFunc
argument_list|(
name|checker
argument_list|,
name|_checkPointerEscape
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
expr|}
block|;
name|class
name|ConstPointerEscape
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|ProgramStateRef
name|_checkConstPointerEscape
argument_list|(
argument|void *Checker
argument_list|,
argument|ProgramStateRef State
argument_list|,
argument|const InvalidatedSymbols&Escaped
argument_list|,
argument|const CallEvent *Call
argument_list|,
argument|PointerEscapeKind Kind
argument_list|,
argument|RegionAndSymbolInvalidationTraits *ETraits
argument_list|)
block|{
if|if
condition|(
operator|!
name|ETraits
condition|)
return|return
name|State
return|;
name|InvalidatedSymbols
name|ConstEscape
block|;
for|for
control|(
name|InvalidatedSymbols
operator|::
name|const_iterator
name|I
operator|=
name|Escaped
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|Escaped
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|ETraits
operator|->
name|hasTrait
argument_list|(
operator|*
name|I
argument_list|,
name|RegionAndSymbolInvalidationTraits
operator|::
name|TK_PreserveContents
argument_list|)
operator|&&
operator|!
name|ETraits
operator|->
name|hasTrait
argument_list|(
operator|*
name|I
argument_list|,
name|RegionAndSymbolInvalidationTraits
operator|::
name|TK_SuppressEscape
argument_list|)
condition|)
name|ConstEscape
operator|.
name|insert
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
if|if
condition|(
name|ConstEscape
operator|.
name|empty
argument_list|()
condition|)
return|return
name|State
return|;
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|Checker
operator|)
operator|->
name|checkConstPointerEscape
argument_list|(
name|State
argument_list|,
name|ConstEscape
argument_list|,
name|Call
argument_list|,
name|Kind
argument_list|)
return|;
block|}
name|public
label|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPointerEscape
argument_list|(
name|CheckerManager
operator|::
name|CheckPointerEscapeFunc
argument_list|(
name|checker
argument_list|,
name|_checkConstPointerEscape
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|EVENT
operator|>
name|class
name|Event
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkEvent
argument_list|(
argument|void *checker
argument_list|,
argument|const void *event
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkEvent
argument_list|(
operator|*
operator|(
specifier|const
name|EVENT
operator|*
operator|)
name|event
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerListenerForEvent
operator|<
name|EVENT
operator|>
operator|(
name|CheckerManager
operator|::
name|CheckEventFunc
argument_list|(
name|checker
argument_list|,
name|_checkEvent
operator|<
name|CHECKER
operator|>
argument_list|)
operator|)
block|;   }
block|}
expr_stmt|;
block|}
comment|// end check namespace
name|namespace
name|eval
block|{
name|class
name|Assume
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|ProgramStateRef
name|_evalAssume
argument_list|(
argument|void *checker
argument_list|,
argument|ProgramStateRef state
argument_list|,
argument|const SVal&cond
argument_list|,
argument|bool assumption
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|evalAssume
argument_list|(
name|state
argument_list|,
name|cond
argument_list|,
name|assumption
argument_list|)
return|;
block|}
name|public
label|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEvalAssume
argument_list|(
name|CheckerManager
operator|::
name|EvalAssumeFunc
argument_list|(
name|checker
argument_list|,
name|_evalAssume
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
empty_stmt|;
name|class
name|Call
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|bool
name|_evalCall
argument_list|(
argument|void *checker
argument_list|,
argument|const CallExpr *CE
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|evalCall
argument_list|(
name|CE
argument_list|,
name|C
argument_list|)
return|;
block|}
name|public
label|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEvalCall
argument_list|(
name|CheckerManager
operator|::
name|EvalCallFunc
argument_list|(
name|checker
argument_list|,
name|_evalCall
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
empty_stmt|;
block|}
comment|// end eval namespace
name|class
name|CheckerBase
range|:
name|public
name|ProgramPointTag
block|{
name|CheckName
name|Name
block|;
name|friend
name|class
operator|::
name|clang
operator|::
name|ento
operator|::
name|CheckerManager
block|;
name|public
operator|:
name|StringRef
name|getTagDescription
argument_list|()
specifier|const
name|override
block|;
name|CheckName
name|getCheckName
argument_list|()
specifier|const
block|;
comment|/// See CheckerManager::runCheckersForPrintState.
name|virtual
name|void
name|printState
argument_list|(
argument|raw_ostream&Out
argument_list|,
argument|ProgramStateRef State
argument_list|,
argument|const char *NL
argument_list|,
argument|const char *Sep
argument_list|)
specifier|const
block|{ }
block|}
decl_stmt|;
comment|/// Dump checker name to stream.
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|Out
operator|,
specifier|const
name|CheckerBase
operator|&
name|Checker
operator|)
expr_stmt|;
comment|/// Tag that can use a checker name as a message provider
comment|/// (see SimpleProgramPointTag).
name|class
name|CheckerProgramPointTag
range|:
name|public
name|SimpleProgramPointTag
block|{
name|public
operator|:
name|CheckerProgramPointTag
argument_list|(
argument|StringRef CheckerName
argument_list|,
argument|StringRef Msg
argument_list|)
block|;
name|CheckerProgramPointTag
argument_list|(
argument|const CheckerBase *Checker
argument_list|,
argument|StringRef Msg
argument_list|)
block|; }
decl_stmt|;
name|template
operator|<
name|typename
name|CHECK1
operator|,
name|typename
name|CHECK2
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK3
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK4
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK5
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK6
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK7
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK8
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK9
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK10
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK11
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK12
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK13
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK14
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK15
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK16
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK17
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK18
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK19
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK20
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK21
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK22
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK23
operator|=
name|check
operator|::
name|_VoidCheck
operator|,
name|typename
name|CHECK24
operator|=
name|check
operator|::
name|_VoidCheck
operator|>
name|class
name|Checker
expr_stmt|;
name|template
operator|<
operator|>
name|class
name|Checker
operator|<
name|check
operator|::
name|_VoidCheck
operator|>
operator|:
name|public
name|CheckerBase
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|public
operator|:
specifier|static
name|void
name|_register
argument_list|(
argument|void *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{ }
block|}
expr_stmt|;
name|template
operator|<
name|typename
name|CHECK1
operator|,
name|typename
name|CHECK2
operator|,
name|typename
name|CHECK3
operator|,
name|typename
name|CHECK4
operator|,
name|typename
name|CHECK5
operator|,
name|typename
name|CHECK6
operator|,
name|typename
name|CHECK7
operator|,
name|typename
name|CHECK8
operator|,
name|typename
name|CHECK9
operator|,
name|typename
name|CHECK10
operator|,
name|typename
name|CHECK11
operator|,
name|typename
name|CHECK12
operator|,
name|typename
name|CHECK13
operator|,
name|typename
name|CHECK14
operator|,
name|typename
name|CHECK15
operator|,
name|typename
name|CHECK16
operator|,
name|typename
name|CHECK17
operator|,
name|typename
name|CHECK18
operator|,
name|typename
name|CHECK19
operator|,
name|typename
name|CHECK20
operator|,
name|typename
name|CHECK21
operator|,
name|typename
name|CHECK22
operator|,
name|typename
name|CHECK23
operator|,
name|typename
name|CHECK24
operator|>
name|class
name|Checker
operator|:
name|public
name|CHECK1
operator|,
name|public
name|Checker
operator|<
name|CHECK2
operator|,
name|CHECK3
operator|,
name|CHECK4
operator|,
name|CHECK5
operator|,
name|CHECK6
operator|,
name|CHECK7
operator|,
name|CHECK8
operator|,
name|CHECK9
operator|,
name|CHECK10
operator|,
name|CHECK11
operator|,
name|CHECK12
operator|,
name|CHECK13
operator|,
name|CHECK14
operator|,
name|CHECK15
operator|,
name|CHECK16
operator|,
name|CHECK17
operator|,
name|CHECK18
operator|,
name|CHECK19
operator|,
name|CHECK20
operator|,
name|CHECK21
operator|,
name|CHECK22
operator|,
name|CHECK23
operator|,
name|CHECK24
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|CHECK1
operator|::
name|_register
argument_list|(
name|checker
argument_list|,
name|mgr
argument_list|)
block|;
name|Checker
operator|<
name|CHECK2
block|,
name|CHECK3
block|,
name|CHECK4
block|,
name|CHECK5
block|,
name|CHECK6
block|,
name|CHECK7
block|,
name|CHECK8
block|,
name|CHECK9
block|,
name|CHECK10
block|,
name|CHECK11
block|,
name|CHECK12
block|,
name|CHECK13
block|,
name|CHECK14
block|,
name|CHECK15
block|,
name|CHECK16
block|,
name|CHECK17
block|,
name|CHECK18
block|,
name|CHECK19
block|,
name|CHECK20
block|,
name|CHECK21
block|,
name|CHECK22
block|,
name|CHECK23
block|,
name|CHECK24
operator|>
operator|::
name|_register
argument_list|(
name|checker
argument_list|,
name|mgr
argument_list|)
block|;   }
block|}
expr_stmt|;
name|template
operator|<
name|typename
name|EVENT
operator|>
name|class
name|EventDispatcher
block|{
name|CheckerManager
operator|*
name|Mgr
block|;
name|public
operator|:
name|EventDispatcher
argument_list|()
operator|:
name|Mgr
argument_list|(
argument|nullptr
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerDispatcherForEvent
operator|<
name|EVENT
operator|>
operator|(
operator|)
block|;
name|static_cast
operator|<
name|EventDispatcher
operator|<
name|EVENT
operator|>
operator|*
operator|>
operator|(
name|checker
operator|)
operator|->
name|Mgr
operator|=
operator|&
name|mgr
block|;   }
name|void
name|dispatchEvent
argument_list|(
argument|const EVENT&event
argument_list|)
specifier|const
block|{
name|Mgr
operator|->
name|_dispatchEvent
argument_list|(
name|event
argument_list|)
block|;   }
block|}
expr_stmt|;
comment|/// \brief We dereferenced a location that may be null.
struct|struct
name|ImplicitNullDerefEvent
block|{
name|SVal
name|Location
decl_stmt|;
name|bool
name|IsLoad
decl_stmt|;
name|ExplodedNode
modifier|*
name|SinkNode
decl_stmt|;
name|BugReporter
modifier|*
name|BR
decl_stmt|;
block|}
struct|;
comment|/// \brief A helper class which wraps a boolean value set to false by default.
comment|///
comment|/// This class should behave exactly like 'bool' except that it doesn't need to
comment|/// be explicitly initialized.
struct|struct
name|DefaultBool
block|{
name|bool
name|val
decl_stmt|;
name|DefaultBool
argument_list|()
operator|:
name|val
argument_list|(
argument|false
argument_list|)
block|{}
comment|/*implicit*/
name|operator
name|bool
operator|&
operator|(
operator|)
block|{
return|return
name|val
return|;
block|}
comment|/*implicit*/
name|operator
specifier|const
name|bool
operator|&
operator|(
operator|)
specifier|const
block|{
return|return
name|val
return|;
block|}
name|DefaultBool
modifier|&
name|operator
init|=
operator|(
name|bool
name|b
operator|)
block|{
name|val
operator|=
name|b
block|;
return|return
operator|*
name|this
return|;
block|}
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// end ento namespace
end_comment

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

