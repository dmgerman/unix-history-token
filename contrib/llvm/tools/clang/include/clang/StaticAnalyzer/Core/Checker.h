begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== Checker.h - Registration mechanism for checkers -------------*- C++ -*--=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines Checker, used to create and register checkers.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_SA_CORE_CHECKER
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_SA_CORE_CHECKER
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/ProgramPoint.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/CheckerManager.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|class
name|BugReporter
decl_stmt|;
name|namespace
name|check
block|{
struct|struct
name|_VoidCheck
block|{
specifier|static
name|void
name|_register
parameter_list|(
name|void
modifier|*
name|checker
parameter_list|,
name|CheckerManager
modifier|&
name|mgr
parameter_list|)
block|{ }
block|}
struct|;
name|template
operator|<
name|typename
name|DECL
operator|>
name|class
name|ASTDecl
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkDecl
argument_list|(
argument|void *checker
argument_list|,
argument|const Decl *D
argument_list|,
argument|AnalysisManager& mgr
argument_list|,
argument|BugReporter&BR
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkASTDecl
argument_list|(
name|llvm
operator|::
name|cast
operator|<
name|DECL
operator|>
operator|(
name|D
operator|)
argument_list|,
name|mgr
argument_list|,
name|BR
argument_list|)
block|;   }
specifier|static
name|bool
name|_handlesDecl
argument_list|(
argument|const Decl *D
argument_list|)
block|{
return|return
name|llvm
operator|::
name|isa
operator|<
name|DECL
operator|>
operator|(
name|D
operator|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForDecl
argument_list|(
name|CheckerManager
operator|::
name|CheckDeclFunc
argument_list|(
name|checker
argument_list|,
name|_checkDecl
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|,
name|_handlesDecl
argument_list|)
block|;   }
expr|}
block|;
name|class
name|ASTCodeBody
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkBody
argument_list|(
argument|void *checker
argument_list|,
argument|const Decl *D
argument_list|,
argument|AnalysisManager& mgr
argument_list|,
argument|BugReporter&BR
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkASTCodeBody
argument_list|(
name|D
argument_list|,
name|mgr
argument_list|,
name|BR
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForBody
argument_list|(
name|CheckerManager
operator|::
name|CheckDeclFunc
argument_list|(
name|checker
argument_list|,
name|_checkBody
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|EndOfTranslationUnit
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkEndOfTranslationUnit
argument_list|(
argument|void *checker
argument_list|,
argument|const TranslationUnitDecl *TU
argument_list|,
argument|AnalysisManager& mgr
argument_list|,
argument|BugReporter&BR
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkEndOfTranslationUnit
argument_list|(
name|TU
argument_list|,
name|mgr
argument_list|,
name|BR
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEndOfTranslationUnit
argument_list|(
name|CheckerManager
operator|::
name|CheckEndOfTranslationUnit
argument_list|(
name|checker
argument_list|,
name|_checkEndOfTranslationUnit
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|template
operator|<
name|typename
name|STMT
operator|>
name|class
name|PreStmt
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkStmt
argument_list|(
argument|void *checker
argument_list|,
argument|const Stmt *S
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPreStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
name|STMT
operator|>
operator|(
name|S
operator|)
argument_list|,
name|C
argument_list|)
block|;   }
specifier|static
name|bool
name|_handlesStmt
argument_list|(
argument|const Stmt *S
argument_list|)
block|{
return|return
name|llvm
operator|::
name|isa
operator|<
name|STMT
operator|>
operator|(
name|S
operator|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPreStmt
argument_list|(
name|CheckerManager
operator|::
name|CheckStmtFunc
argument_list|(
name|checker
argument_list|,
name|_checkStmt
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|,
name|_handlesStmt
argument_list|)
block|;   }
expr|}
block|;
name|template
operator|<
name|typename
name|STMT
operator|>
name|class
name|PostStmt
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkStmt
argument_list|(
argument|void *checker
argument_list|,
argument|const Stmt *S
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPostStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
name|STMT
operator|>
operator|(
name|S
operator|)
argument_list|,
name|C
argument_list|)
block|;   }
specifier|static
name|bool
name|_handlesStmt
argument_list|(
argument|const Stmt *S
argument_list|)
block|{
return|return
name|llvm
operator|::
name|isa
operator|<
name|STMT
operator|>
operator|(
name|S
operator|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPostStmt
argument_list|(
name|CheckerManager
operator|::
name|CheckStmtFunc
argument_list|(
name|checker
argument_list|,
name|_checkStmt
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|,
name|_handlesStmt
argument_list|)
block|;   }
expr|}
block|;
name|class
name|PreObjCMessage
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkObjCMessage
argument_list|(
argument|void *checker
argument_list|,
argument|const ObjCMessage&msg
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPreObjCMessage
argument_list|(
name|msg
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPreObjCMessage
argument_list|(
name|CheckerManager
operator|::
name|CheckObjCMessageFunc
argument_list|(
name|checker
argument_list|,
name|_checkObjCMessage
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|PostObjCMessage
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkObjCMessage
argument_list|(
argument|void *checker
argument_list|,
argument|const ObjCMessage&msg
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkPostObjCMessage
argument_list|(
name|msg
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForPostObjCMessage
argument_list|(
name|CheckerManager
operator|::
name|CheckObjCMessageFunc
argument_list|(
name|checker
argument_list|,
name|_checkObjCMessage
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|Location
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkLocation
argument_list|(
argument|void *checker
argument_list|,
argument|const SVal&location
argument_list|,
argument|bool isLoad
argument_list|,
argument|const Stmt *S
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkLocation
argument_list|(
name|location
argument_list|,
name|isLoad
argument_list|,
name|S
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForLocation
argument_list|(
name|CheckerManager
operator|::
name|CheckLocationFunc
argument_list|(
name|checker
argument_list|,
name|_checkLocation
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|Bind
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkBind
argument_list|(
argument|void *checker
argument_list|,
argument|const SVal&location
argument_list|,
argument|const SVal&val
argument_list|,
argument|const Stmt *S
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkBind
argument_list|(
name|location
argument_list|,
name|val
argument_list|,
name|S
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForBind
argument_list|(
name|CheckerManager
operator|::
name|CheckBindFunc
argument_list|(
name|checker
argument_list|,
name|_checkBind
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|EndAnalysis
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkEndAnalysis
argument_list|(
argument|void *checker
argument_list|,
argument|ExplodedGraph&G
argument_list|,
argument|BugReporter&BR
argument_list|,
argument|ExprEngine&Eng
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkEndAnalysis
argument_list|(
name|G
argument_list|,
name|BR
argument_list|,
name|Eng
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEndAnalysis
argument_list|(
name|CheckerManager
operator|::
name|CheckEndAnalysisFunc
argument_list|(
name|checker
argument_list|,
name|_checkEndAnalysis
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|EndPath
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkEndPath
argument_list|(
argument|void *checker
argument_list|,
argument|EndOfFunctionNodeBuilder&B
argument_list|,
argument|ExprEngine&Eng
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkEndPath
argument_list|(
name|B
argument_list|,
name|Eng
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEndPath
argument_list|(
name|CheckerManager
operator|::
name|CheckEndPathFunc
argument_list|(
name|checker
argument_list|,
name|_checkEndPath
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|BranchCondition
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkBranchCondition
argument_list|(
argument|void *checker
argument_list|,
argument|const Stmt *condition
argument_list|,
argument|BranchNodeBuilder&B
argument_list|,
argument|ExprEngine&Eng
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkBranchCondition
argument_list|(
name|condition
argument_list|,
name|B
argument_list|,
name|Eng
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForBranchCondition
argument_list|(
name|CheckerManager
operator|::
name|CheckBranchConditionFunc
argument_list|(
name|checker
argument_list|,
name|_checkBranchCondition
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|LiveSymbols
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkLiveSymbols
argument_list|(
argument|void *checker
argument_list|,
argument|const ProgramState *state
argument_list|,
argument|SymbolReaper&SR
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkLiveSymbols
argument_list|(
name|state
argument_list|,
name|SR
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForLiveSymbols
argument_list|(
name|CheckerManager
operator|::
name|CheckLiveSymbolsFunc
argument_list|(
name|checker
argument_list|,
name|_checkLiveSymbols
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|DeadSymbols
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkDeadSymbols
argument_list|(
argument|void *checker
argument_list|,
argument|SymbolReaper&SR
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkDeadSymbols
argument_list|(
name|SR
argument_list|,
name|C
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForDeadSymbols
argument_list|(
name|CheckerManager
operator|::
name|CheckDeadSymbolsFunc
argument_list|(
name|checker
argument_list|,
name|_checkDeadSymbols
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
block|}
block|;
name|class
name|RegionChanges
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
specifier|const
name|ProgramState
operator|*
name|_checkRegionChanges
argument_list|(
argument|void *checker
argument_list|,
argument|const ProgramState *state
argument_list|,
argument|const StoreManager::InvalidatedSymbols *invalidated
argument_list|,
argument|ArrayRef<const MemRegion *> Explicits
argument_list|,
argument|ArrayRef<const MemRegion *> Regions
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkRegionChanges
argument_list|(
name|state
argument_list|,
name|invalidated
argument_list|,
name|Explicits
argument_list|,
name|Regions
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|bool
name|_wantsRegionChangeUpdate
argument_list|(
argument|void *checker
argument_list|,
argument|const ProgramState *state
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|wantsRegionChangeUpdate
argument_list|(
name|state
argument_list|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForRegionChanges
argument_list|(
name|CheckerManager
operator|::
name|CheckRegionChangesFunc
argument_list|(
name|checker
argument_list|,
name|_checkRegionChanges
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|,
name|CheckerManager
operator|::
name|WantsRegionChangeUpdateFunc
argument_list|(
name|checker
argument_list|,
name|_wantsRegionChangeUpdate
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
expr|}
block|;
name|template
operator|<
name|typename
name|EVENT
operator|>
name|class
name|Event
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_checkEvent
argument_list|(
argument|void *checker
argument_list|,
argument|const void *event
argument_list|)
block|{
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|checkEvent
argument_list|(
operator|*
operator|(
specifier|const
name|EVENT
operator|*
operator|)
name|event
argument_list|)
block|;   }
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerListenerForEvent
operator|<
name|EVENT
operator|>
operator|(
name|CheckerManager
operator|::
name|CheckEventFunc
argument_list|(
name|checker
argument_list|,
name|_checkEvent
operator|<
name|CHECKER
operator|>
argument_list|)
operator|)
block|;   }
block|}
block|;  }
comment|// end check namespace
name|namespace
name|eval
block|{
name|class
name|Assume
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
specifier|const
name|ProgramState
operator|*
name|_evalAssume
argument_list|(
argument|void *checker
argument_list|,
argument|const ProgramState *state
argument_list|,
argument|const SVal&cond
argument_list|,
argument|bool assumption
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|evalAssume
argument_list|(
name|state
argument_list|,
name|cond
argument_list|,
name|assumption
argument_list|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEvalAssume
argument_list|(
name|CheckerManager
operator|::
name|EvalAssumeFunc
argument_list|(
name|checker
argument_list|,
name|_evalAssume
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
expr|}
block|;
name|class
name|Call
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|bool
name|_evalCall
argument_list|(
argument|void *checker
argument_list|,
argument|const CallExpr *CE
argument_list|,
argument|CheckerContext&C
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|evalCall
argument_list|(
name|CE
argument_list|,
name|C
argument_list|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForEvalCall
argument_list|(
name|CheckerManager
operator|::
name|EvalCallFunc
argument_list|(
name|checker
argument_list|,
name|_evalCall
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
expr|}
block|;
name|class
name|InlineCall
block|{
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|bool
name|_inlineCall
argument_list|(
argument|void *checker
argument_list|,
argument|const CallExpr *CE
argument_list|,
argument|ExprEngine&Eng
argument_list|,
argument|ExplodedNode *Pred
argument_list|,
argument|ExplodedNodeSet&Dst
argument_list|)
block|{
return|return
operator|(
operator|(
specifier|const
name|CHECKER
operator|*
operator|)
name|checker
operator|)
operator|->
name|inlineCall
argument_list|(
name|CE
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|Dst
argument_list|)
return|;
block|}
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerForInlineCall
argument_list|(
name|CheckerManager
operator|::
name|InlineCallFunc
argument_list|(
name|checker
argument_list|,
name|_inlineCall
operator|<
name|CHECKER
operator|>
argument_list|)
argument_list|)
block|;   }
expr|}
block|;  }
comment|// end eval namespace
name|class
name|CheckerBase
operator|:
name|public
name|ProgramPointTag
block|{
name|public
operator|:
name|StringRef
name|getTagDescription
argument_list|()
specifier|const
block|;
comment|/// See CheckerManager::runCheckersForPrintState.
name|virtual
name|void
name|printState
argument_list|(
argument|raw_ostream&Out
argument_list|,
argument|const ProgramState *State
argument_list|,
argument|const char *NL
argument_list|,
argument|const char *Sep
argument_list|)
specifier|const
block|{ }
block|}
block|;
name|template
operator|<
name|typename
name|CHECK1
block|,
name|typename
name|CHECK2
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK3
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK4
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK5
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK6
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK7
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK8
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK9
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK10
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK11
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK12
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK13
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK14
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK15
operator|=
name|check
operator|::
name|_VoidCheck
block|,
name|typename
name|CHECK16
operator|=
name|check
operator|::
name|_VoidCheck
operator|>
name|class
name|Checker
block|;
name|template
operator|<
operator|>
name|class
name|Checker
operator|<
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
block|,
name|check
operator|::
name|_VoidCheck
operator|>
operator|:
name|public
name|CheckerBase
block|{
name|public
operator|:
specifier|static
name|void
name|_register
argument_list|(
argument|void *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{ }
block|}
block|;
name|template
operator|<
name|typename
name|CHECK1
block|,
name|typename
name|CHECK2
block|,
name|typename
name|CHECK3
block|,
name|typename
name|CHECK4
block|,
name|typename
name|CHECK5
block|,
name|typename
name|CHECK6
block|,
name|typename
name|CHECK7
block|,
name|typename
name|CHECK8
block|,
name|typename
name|CHECK9
block|,
name|typename
name|CHECK10
block|,
name|typename
name|CHECK11
block|,
name|typename
name|CHECK12
block|,
name|typename
name|CHECK13
block|,
name|typename
name|CHECK14
block|,
name|typename
name|CHECK15
block|,
name|typename
name|CHECK16
operator|>
name|class
name|Checker
operator|:
name|public
name|CHECK1
block|,
name|public
name|Checker
operator|<
name|CHECK2
block|,
name|CHECK3
block|,
name|CHECK4
block|,
name|CHECK5
block|,
name|CHECK6
block|,
name|CHECK7
block|,
name|CHECK8
block|,
name|CHECK9
block|,
name|CHECK10
block|,
name|CHECK11
block|,
name|CHECK12
block|,
name|CHECK13
block|,
name|CHECK14
block|,
name|CHECK15
block|,
name|CHECK16
operator|>
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|CHECK1
operator|::
name|_register
argument_list|(
name|checker
argument_list|,
name|mgr
argument_list|)
block|;
name|Checker
operator|<
name|CHECK2
block|,
name|CHECK3
block|,
name|CHECK4
block|,
name|CHECK5
block|,
name|CHECK6
block|,
name|CHECK7
block|,
name|CHECK8
block|,
name|CHECK9
block|,
name|CHECK10
block|,
name|CHECK11
block|,
name|CHECK12
block|,
name|CHECK13
block|,
name|CHECK14
block|,
name|CHECK15
block|,
name|CHECK16
operator|>
operator|::
name|_register
argument_list|(
name|checker
argument_list|,
name|mgr
argument_list|)
block|;   }
block|}
block|;
name|template
operator|<
name|typename
name|EVENT
operator|>
name|class
name|EventDispatcher
block|{
name|CheckerManager
operator|*
name|Mgr
block|;
name|public
operator|:
name|EventDispatcher
argument_list|()
operator|:
name|Mgr
argument_list|(
literal|0
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|CHECKER
operator|>
specifier|static
name|void
name|_register
argument_list|(
argument|CHECKER *checker
argument_list|,
argument|CheckerManager&mgr
argument_list|)
block|{
name|mgr
operator|.
name|_registerDispatcherForEvent
operator|<
name|EVENT
operator|>
operator|(
operator|)
block|;
name|static_cast
operator|<
name|EventDispatcher
operator|<
name|EVENT
operator|>
operator|*
operator|>
operator|(
name|checker
operator|)
operator|->
name|Mgr
operator|=
operator|&
name|mgr
block|;   }
name|void
name|dispatchEvent
argument_list|(
argument|const EVENT&event
argument_list|)
specifier|const
block|{
name|Mgr
operator|->
name|_dispatchEvent
argument_list|(
name|event
argument_list|)
block|;   }
block|}
block|;
comment|/// \brief We dereferenced a location that may be null.
block|struct
name|ImplicitNullDerefEvent
block|{
name|SVal
name|Location
block|;
name|bool
name|IsLoad
block|;
name|ExplodedNode
operator|*
name|SinkNode
block|;
name|BugReporter
operator|*
name|BR
block|; }
block|;  }
comment|// end ento namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

