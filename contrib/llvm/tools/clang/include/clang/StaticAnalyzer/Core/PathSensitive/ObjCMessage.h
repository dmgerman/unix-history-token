begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ObjCMessage.h - Wrapper for ObjC messages and dot syntax ---*- C++ -*--//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines ObjCMessage which serves as a common wrapper for ObjC
end_comment

begin_comment
comment|// message expressions or implicit messages for loading/storing ObjC properties.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STATICANALYZER_PATHSENSITIVE_OBJCMESSAGE
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STATICANALYZER_PATHSENSITIVE_OBJCMESSAGE
end_define

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprObjC.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|using
name|llvm
operator|::
name|StrInStrNoCase
expr_stmt|;
comment|/// \brief Represents both explicit ObjC message expressions and implicit
comment|/// messages that are sent for handling properties in dot syntax.
name|class
name|ObjCMessage
block|{
specifier|const
name|ObjCMessageExpr
modifier|*
name|Msg
decl_stmt|;
specifier|const
name|ObjCPropertyRefExpr
modifier|*
name|PE
decl_stmt|;
specifier|const
name|bool
name|IsPropSetter
decl_stmt|;
name|public
label|:
name|ObjCMessage
argument_list|()
operator|:
name|Msg
argument_list|(
literal|0
argument_list|)
operator|,
name|PE
argument_list|(
literal|0
argument_list|)
operator|,
name|IsPropSetter
argument_list|(
argument|false
argument_list|)
block|{}
name|ObjCMessage
argument_list|(
argument|const ObjCMessageExpr *E
argument_list|,
argument|const ObjCPropertyRefExpr *pe =
literal|0
argument_list|,
argument|bool isSetter = false
argument_list|)
operator|:
name|Msg
argument_list|(
name|E
argument_list|)
operator|,
name|PE
argument_list|(
name|pe
argument_list|)
operator|,
name|IsPropSetter
argument_list|(
argument|isSetter
argument_list|)
block|{
name|assert
argument_list|(
name|E
operator|&&
literal|"should not be initialized with null expression"
argument_list|)
block|;   }
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|Msg
return|;
block|}
name|bool
name|isPureMessageExpr
argument_list|()
specifier|const
block|{
return|return
operator|!
name|PE
return|;
block|}
name|bool
name|isPropertyGetter
argument_list|()
specifier|const
block|{
return|return
name|PE
operator|&&
operator|!
name|IsPropSetter
return|;
block|}
name|bool
name|isPropertySetter
argument_list|()
specifier|const
block|{
return|return
name|IsPropSetter
return|;
block|}
specifier|const
name|Expr
operator|*
name|getMessageExpr
argument_list|()
specifier|const
block|{
return|return
name|Msg
return|;
block|}
name|QualType
name|getType
argument_list|(
name|ASTContext
operator|&
name|ctx
argument_list|)
decl|const
block|{
return|return
name|Msg
operator|->
name|getType
argument_list|()
return|;
block|}
name|QualType
name|getResultType
argument_list|(
name|ASTContext
operator|&
name|ctx
argument_list|)
decl|const
block|{
if|if
condition|(
specifier|const
name|ObjCMethodDecl
modifier|*
name|MD
init|=
name|Msg
operator|->
name|getMethodDecl
argument_list|()
condition|)
return|return
name|MD
operator|->
name|getResultType
argument_list|()
return|;
return|return
name|getType
argument_list|(
name|ctx
argument_list|)
return|;
block|}
name|ObjCMethodFamily
name|getMethodFamily
argument_list|()
specifier|const
block|{
return|return
name|Msg
operator|->
name|getMethodFamily
argument_list|()
return|;
block|}
name|Selector
name|getSelector
argument_list|()
specifier|const
block|{
return|return
name|Msg
operator|->
name|getSelector
argument_list|()
return|;
block|}
specifier|const
name|Expr
operator|*
name|getInstanceReceiver
argument_list|()
specifier|const
block|{
return|return
name|Msg
operator|->
name|getInstanceReceiver
argument_list|()
return|;
block|}
name|SVal
name|getInstanceReceiverSVal
argument_list|(
name|ProgramStateRef
name|State
argument_list|,
specifier|const
name|LocationContext
operator|*
name|LC
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|isInstanceMessage
argument_list|()
condition|)
return|return
name|UndefinedVal
argument_list|()
return|;
if|if
condition|(
specifier|const
name|Expr
modifier|*
name|Ex
init|=
name|getInstanceReceiver
argument_list|()
condition|)
return|return
name|State
operator|->
name|getSValAsScalarOrLoc
argument_list|(
name|Ex
argument_list|,
name|LC
argument_list|)
return|;
comment|// An instance message with no expression means we are sending to super.
comment|// In this case the object reference is the same as 'self'.
specifier|const
name|ImplicitParamDecl
modifier|*
name|SelfDecl
init|=
name|LC
operator|->
name|getSelfDecl
argument_list|()
decl_stmt|;
name|assert
argument_list|(
name|SelfDecl
operator|&&
literal|"No message receiver Expr, but not in an ObjC method"
argument_list|)
expr_stmt|;
return|return
name|State
operator|->
name|getSVal
argument_list|(
name|State
operator|->
name|getRegion
argument_list|(
name|SelfDecl
argument_list|,
name|LC
argument_list|)
argument_list|)
return|;
block|}
name|bool
name|isInstanceMessage
argument_list|()
specifier|const
block|{
return|return
name|Msg
operator|->
name|isInstanceMessage
argument_list|()
return|;
block|}
specifier|const
name|ObjCMethodDecl
operator|*
name|getMethodDecl
argument_list|()
specifier|const
block|{
return|return
name|Msg
operator|->
name|getMethodDecl
argument_list|()
return|;
block|}
specifier|const
name|ObjCInterfaceDecl
operator|*
name|getReceiverInterface
argument_list|()
specifier|const
block|{
return|return
name|Msg
operator|->
name|getReceiverInterface
argument_list|()
return|;
block|}
name|SourceLocation
name|getSuperLoc
argument_list|()
specifier|const
block|{
if|if
condition|(
name|PE
condition|)
return|return
name|PE
operator|->
name|getReceiverLocation
argument_list|()
return|;
return|return
name|Msg
operator|->
name|getSuperLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
if|if
condition|(
name|PE
condition|)
return|return
name|PE
operator|->
name|getSourceRange
argument_list|()
return|;
return|return
name|Msg
operator|->
name|getSourceRange
argument_list|()
return|;
block|}
name|unsigned
name|getNumArgs
argument_list|()
specifier|const
block|{
return|return
name|Msg
operator|->
name|getNumArgs
argument_list|()
return|;
block|}
name|SVal
name|getArgSVal
argument_list|(
name|unsigned
name|i
argument_list|,
specifier|const
name|LocationContext
operator|*
name|LCtx
argument_list|,
name|ProgramStateRef
name|state
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
operator|&&
literal|"Invalid index for argument"
argument_list|)
expr_stmt|;
return|return
name|state
operator|->
name|getSVal
argument_list|(
name|Msg
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
argument_list|,
name|LCtx
argument_list|)
return|;
block|}
name|QualType
name|getArgType
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
operator|&&
literal|"Invalid index for argument"
argument_list|)
expr_stmt|;
return|return
name|Msg
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
operator|->
name|getType
argument_list|()
return|;
block|}
specifier|const
name|Expr
modifier|*
name|getArgExpr
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
operator|&&
literal|"Invalid index for argument"
argument_list|)
expr_stmt|;
return|return
name|Msg
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
return|;
block|}
name|SourceRange
name|getArgSourceRange
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
specifier|const
name|Expr
modifier|*
name|argE
init|=
name|getArgExpr
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|argE
operator|->
name|getSourceRange
argument_list|()
return|;
block|}
name|SourceRange
name|getReceiverSourceRange
argument_list|()
specifier|const
block|{
if|if
condition|(
name|PE
condition|)
block|{
if|if
condition|(
name|PE
operator|->
name|isObjectReceiver
argument_list|()
condition|)
return|return
name|PE
operator|->
name|getBase
argument_list|()
operator|->
name|getSourceRange
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|Msg
operator|->
name|getReceiverRange
argument_list|()
return|;
block|}
comment|// FIXME: This isn't a range.
return|return
name|PE
operator|->
name|getReceiverLocation
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// \brief Common wrapper for a call expression, ObjC message, or C++
end_comment

begin_comment
comment|/// constructor, mainly to provide a common interface for their arguments.
end_comment

begin_decl_stmt
name|class
name|CallOrObjCMessage
block|{
name|llvm
operator|::
name|PointerUnion
operator|<
specifier|const
name|CallExpr
operator|*
operator|,
specifier|const
name|CXXConstructExpr
operator|*
operator|>
name|CallE
expr_stmt|;
name|ObjCMessage
name|Msg
decl_stmt|;
name|ProgramStateRef
name|State
decl_stmt|;
specifier|const
name|LocationContext
modifier|*
name|LCtx
decl_stmt|;
name|public
label|:
name|CallOrObjCMessage
argument_list|(
argument|const CallExpr *callE
argument_list|,
argument|ProgramStateRef state
argument_list|,
argument|const LocationContext *lctx
argument_list|)
block|:
name|CallE
argument_list|(
name|callE
argument_list|)
operator|,
name|State
argument_list|(
name|state
argument_list|)
operator|,
name|LCtx
argument_list|(
argument|lctx
argument_list|)
block|{}
name|CallOrObjCMessage
argument_list|(
argument|const CXXConstructExpr *consE
argument_list|,
argument|ProgramStateRef state
argument_list|,
argument|const LocationContext *lctx
argument_list|)
operator|:
name|CallE
argument_list|(
name|consE
argument_list|)
operator|,
name|State
argument_list|(
name|state
argument_list|)
operator|,
name|LCtx
argument_list|(
argument|lctx
argument_list|)
block|{}
name|CallOrObjCMessage
argument_list|(
argument|const ObjCMessage&msg
argument_list|,
argument|ProgramStateRef state
argument_list|,
argument|const LocationContext *lctx
argument_list|)
operator|:
name|CallE
argument_list|(
operator|(
name|CallExpr
operator|*
operator|)
literal|0
argument_list|)
operator|,
name|Msg
argument_list|(
name|msg
argument_list|)
operator|,
name|State
argument_list|(
name|state
argument_list|)
operator|,
name|LCtx
argument_list|(
argument|lctx
argument_list|)
block|{}
name|QualType
name|getResultType
argument_list|(
argument|ASTContext&ctx
argument_list|)
specifier|const
expr_stmt|;
name|bool
name|isFunctionCall
argument_list|()
specifier|const
block|{
return|return
name|CallE
operator|&&
name|CallE
operator|.
name|is
operator|<
specifier|const
name|CallExpr
operator|*
operator|>
operator|(
operator|)
return|;
block|}
name|bool
name|isCXXConstructExpr
argument_list|()
specifier|const
block|{
return|return
name|CallE
operator|&&
name|CallE
operator|.
name|is
operator|<
specifier|const
name|CXXConstructExpr
operator|*
operator|>
operator|(
operator|)
return|;
block|}
name|bool
name|isObjCMessage
argument_list|()
specifier|const
block|{
return|return
operator|!
name|CallE
return|;
block|}
name|bool
name|isCXXCall
argument_list|()
specifier|const
block|{
specifier|const
name|CallExpr
operator|*
name|ActualCallE
operator|=
name|CallE
operator|.
name|dyn_cast
operator|<
specifier|const
name|CallExpr
operator|*
operator|>
operator|(
operator|)
block|;
return|return
name|ActualCallE
operator|&&
name|isa
operator|<
name|CXXMemberCallExpr
operator|>
operator|(
name|ActualCallE
operator|)
return|;
block|}
comment|/// Check if the callee is declared in the system header.
name|bool
name|isInSystemHeader
argument_list|()
specifier|const
block|{
if|if
condition|(
specifier|const
name|Decl
modifier|*
name|FD
init|=
name|getDecl
argument_list|()
condition|)
block|{
specifier|const
name|SourceManager
modifier|&
name|SM
init|=
name|State
operator|->
name|getStateManager
argument_list|()
operator|.
name|getContext
argument_list|()
operator|.
name|getSourceManager
argument_list|()
decl_stmt|;
return|return
name|SM
operator|.
name|isInSystemHeader
argument_list|(
name|FD
operator|->
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
return|return
name|false
return|;
block|}
specifier|const
name|Expr
operator|*
name|getOriginExpr
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|CallE
condition|)
return|return
name|Msg
operator|.
name|getMessageExpr
argument_list|()
return|;
if|if
condition|(
specifier|const
name|CXXConstructExpr
modifier|*
name|Ctor
init|=
name|CallE
operator|.
name|dyn_cast
operator|<
specifier|const
name|CXXConstructExpr
operator|*
operator|>
operator|(
operator|)
condition|)
return|return
name|Ctor
return|;
return|return
name|CallE
operator|.
name|get
operator|<
specifier|const
name|CallExpr
operator|*
operator|>
operator|(
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|SVal
name|getFunctionCallee
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SVal
name|getCXXCallee
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|SVal
name|getInstanceMessageReceiver
argument_list|(
specifier|const
name|LocationContext
operator|*
name|LC
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// Get the declaration of the function or method.
end_comment

begin_expr_stmt
specifier|const
name|Decl
operator|*
name|getDecl
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getNumArgs
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|CallE
condition|)
return|return
name|Msg
operator|.
name|getNumArgs
argument_list|()
return|;
end_expr_stmt

begin_if
if|if
condition|(
specifier|const
name|CXXConstructExpr
modifier|*
name|Ctor
init|=
name|CallE
operator|.
name|dyn_cast
operator|<
specifier|const
name|CXXConstructExpr
operator|*
operator|>
operator|(
operator|)
condition|)
return|return
name|Ctor
operator|->
name|getNumArgs
argument_list|()
return|;
end_if

begin_return
return|return
name|CallE
operator|.
name|get
operator|<
specifier|const
name|CallExpr
operator|*
operator|>
operator|(
operator|)
operator|->
name|getNumArgs
argument_list|()
return|;
end_return

begin_macro
unit|}    SVal
name|getArgSVal
argument_list|(
argument|unsigned i
argument_list|)
end_macro

begin_expr_stmt
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
argument_list|)
block|;
if|if
condition|(
operator|!
name|CallE
condition|)
return|return
name|Msg
operator|.
name|getArgSVal
argument_list|(
name|i
argument_list|,
name|LCtx
argument_list|,
name|State
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|State
operator|->
name|getSVal
argument_list|(
name|getArg
argument_list|(
name|i
argument_list|)
argument_list|,
name|LCtx
argument_list|)
return|;
end_return

begin_decl_stmt
unit|}    const
name|Expr
modifier|*
name|getArg
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|CallE
condition|)
return|return
name|Msg
operator|.
name|getArgExpr
argument_list|(
name|i
argument_list|)
return|;
if|if
condition|(
specifier|const
name|CXXConstructExpr
modifier|*
name|Ctor
init|=
name|CallE
operator|.
name|dyn_cast
operator|<
specifier|const
name|CXXConstructExpr
operator|*
operator|>
operator|(
operator|)
condition|)
return|return
name|Ctor
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
return|;
return|return
name|CallE
operator|.
name|get
operator|<
specifier|const
name|CallExpr
operator|*
operator|>
operator|(
operator|)
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|SourceRange
name|getArgSourceRange
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CallE
condition|)
return|return
name|getArg
argument_list|(
name|i
argument_list|)
operator|->
name|getSourceRange
argument_list|()
return|;
return|return
name|Msg
operator|.
name|getArgSourceRange
argument_list|(
name|i
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|SourceRange
name|getReceiverSourceRange
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isObjCMessage
argument_list|()
argument_list|)
block|;
return|return
name|Msg
operator|.
name|getReceiverSourceRange
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Check if the name corresponds to a CoreFoundation or CoreGraphics
end_comment

begin_comment
comment|/// function that allows objects to escape.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// Many methods allow a tracked object to escape.  For example:
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|///   CFMutableDictionaryRef x = CFDictionaryCreateMutable(..., customDeallocator);
end_comment

begin_comment
comment|///   CFDictionaryAddValue(y, key, x);
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// We handle this and similar cases with the following heuristic.  If the
end_comment

begin_comment
comment|/// function name contains "InsertValue", "SetValue", "AddValue",
end_comment

begin_comment
comment|/// "AppendValue", or "SetAttribute", then we assume that arguments may
end_comment

begin_comment
comment|/// escape.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// TODO: To reduce false negatives here, we should track the container
end_comment

begin_comment
comment|// allocation site and check if a proper deallocator was set there.
end_comment

begin_function
specifier|static
name|bool
name|isCFCGAllowingEscape
parameter_list|(
name|StringRef
name|FName
parameter_list|)
block|{
if|if
condition|(
name|FName
index|[
literal|0
index|]
operator|==
literal|'C'
operator|&&
operator|(
name|FName
index|[
literal|1
index|]
operator|==
literal|'F'
operator|||
name|FName
index|[
literal|1
index|]
operator|==
literal|'G'
operator|)
condition|)
if|if
condition|(
name|StrInStrNoCase
argument_list|(
name|FName
argument_list|,
literal|"InsertValue"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|StrInStrNoCase
argument_list|(
name|FName
argument_list|,
literal|"AddValue"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|StrInStrNoCase
argument_list|(
name|FName
argument_list|,
literal|"SetValue"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|StrInStrNoCase
argument_list|(
name|FName
argument_list|,
literal|"WithData"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|StrInStrNoCase
argument_list|(
name|FName
argument_list|,
literal|"AppendValue"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
operator|||
name|StrInStrNoCase
argument_list|(
name|FName
argument_list|,
literal|"SetAttribute"
argument_list|)
operator|!=
name|StringRef
operator|::
name|npos
condition|)
block|{
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
end_function

begin_endif
unit|};  } }
endif|#
directive|endif
end_endif

end_unit

