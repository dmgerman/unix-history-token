begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ObjCMessage.h - Wrapper for ObjC messages and dot syntax ---*- C++ -*--//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines ObjCMessage which serves as a common wrapper for ObjC
end_comment

begin_comment
comment|// message expressions or implicit messages for loading/storing ObjC properties.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_STATICANALYZER_PATHSENSITIVE_OBJCMESSAGE
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_STATICANALYZER_PATHSENSITIVE_OBJCMESSAGE
end_define

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/GRState.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprObjC.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
comment|/// \brief Represents both explicit ObjC message expressions and implicit
comment|/// messages that are sent for handling properties in dot syntax.
name|class
name|ObjCMessage
block|{
specifier|const
name|Expr
modifier|*
name|MsgOrPropE
decl_stmt|;
specifier|const
name|Expr
modifier|*
name|OriginE
decl_stmt|;
name|bool
name|IsPropSetter
decl_stmt|;
name|SVal
name|SetterArgV
decl_stmt|;
name|protected
label|:
name|ObjCMessage
argument_list|(
argument|const Expr *E
argument_list|,
argument|const Expr *origE
argument_list|,
argument|bool isSetter
argument_list|,
argument|SVal setArgV
argument_list|)
block|:
name|MsgOrPropE
argument_list|(
name|E
argument_list|)
operator|,
name|OriginE
argument_list|(
name|origE
argument_list|)
operator|,
name|IsPropSetter
argument_list|(
name|isSetter
argument_list|)
operator|,
name|SetterArgV
argument_list|(
argument|setArgV
argument_list|)
block|{ }
name|public
operator|:
name|ObjCMessage
argument_list|()
operator|:
name|MsgOrPropE
argument_list|(
literal|0
argument_list|)
operator|,
name|OriginE
argument_list|(
literal|0
argument_list|)
block|{ }
name|ObjCMessage
argument_list|(
specifier|const
name|ObjCMessageExpr
operator|*
name|E
argument_list|)
operator|:
name|MsgOrPropE
argument_list|(
name|E
argument_list|)
operator|,
name|OriginE
argument_list|(
argument|E
argument_list|)
block|{
name|assert
argument_list|(
name|E
operator|&&
literal|"should not be initialized with null expression"
argument_list|)
block|;   }
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|MsgOrPropE
operator|!=
literal|0
return|;
block|}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isValid
argument_list|()
return|;
block|}
name|bool
name|isMessageExpr
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|isa
operator|<
name|ObjCMessageExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
return|;
block|}
name|bool
name|isPropertyGetter
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|isa
operator|<
name|ObjCPropertyRefExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
operator|&&
operator|!
name|IsPropSetter
return|;
block|}
name|bool
name|isPropertySetter
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|isa
operator|<
name|ObjCPropertyRefExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
operator|&&
name|IsPropSetter
return|;
block|}
specifier|const
name|Expr
operator|*
name|getOriginExpr
argument_list|()
specifier|const
block|{
return|return
name|OriginE
return|;
block|}
name|QualType
name|getType
argument_list|(
name|ASTContext
operator|&
name|ctx
argument_list|)
decl|const
decl_stmt|;
name|QualType
name|getResultType
argument_list|(
name|ASTContext
operator|&
name|ctx
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|ObjCMessageExpr
modifier|*
name|msgE
init|=
name|dyn_cast
operator|<
name|ObjCMessageExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
condition|)
if|if
condition|(
specifier|const
name|ObjCMethodDecl
modifier|*
name|MD
init|=
name|msgE
operator|->
name|getMethodDecl
argument_list|()
condition|)
return|return
name|MD
operator|->
name|getResultType
argument_list|()
return|;
return|return
name|getType
argument_list|(
name|ctx
argument_list|)
return|;
block|}
name|ObjCMethodFamily
name|getMethodFamily
argument_list|()
specifier|const
expr_stmt|;
name|Selector
name|getSelector
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|Expr
operator|*
name|getInstanceReceiver
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
block|;
if|if
condition|(
specifier|const
name|ObjCMessageExpr
modifier|*
name|msgE
init|=
name|dyn_cast
operator|<
name|ObjCMessageExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
condition|)
return|return
name|msgE
operator|->
name|getInstanceReceiver
argument_list|()
return|;
specifier|const
name|ObjCPropertyRefExpr
operator|*
name|propE
operator|=
name|cast
operator|<
name|ObjCPropertyRefExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
expr_stmt|;
if|if
condition|(
name|propE
operator|->
name|isObjectReceiver
argument_list|()
condition|)
return|return
name|propE
operator|->
name|getBase
argument_list|()
return|;
return|return
literal|0
return|;
block|}
name|bool
name|isInstanceMessage
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
block|;
if|if
condition|(
specifier|const
name|ObjCMessageExpr
modifier|*
name|msgE
init|=
name|dyn_cast
operator|<
name|ObjCMessageExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
condition|)
return|return
name|msgE
operator|->
name|isInstanceMessage
argument_list|()
return|;
specifier|const
name|ObjCPropertyRefExpr
operator|*
name|propE
operator|=
name|cast
operator|<
name|ObjCPropertyRefExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
expr_stmt|;
comment|// FIXME: 'super' may be super class.
return|return
name|propE
operator|->
name|isObjectReceiver
argument_list|()
operator|||
name|propE
operator|->
name|isSuperReceiver
argument_list|()
return|;
block|}
specifier|const
name|ObjCMethodDecl
operator|*
name|getMethodDecl
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|ObjCInterfaceDecl
operator|*
name|getReceiverInterface
argument_list|()
specifier|const
expr_stmt|;
name|SourceLocation
name|getSuperLoc
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
block|;
if|if
condition|(
specifier|const
name|ObjCMessageExpr
modifier|*
name|msgE
init|=
name|dyn_cast
operator|<
name|ObjCMessageExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
condition|)
return|return
name|msgE
operator|->
name|getSuperLoc
argument_list|()
return|;
return|return
name|cast
operator|<
name|ObjCPropertyRefExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
operator|->
name|getReceiverLocation
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
block|;
return|return
name|MsgOrPropE
operator|->
name|getSourceRange
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getNumArgs
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
block|;
if|if
condition|(
specifier|const
name|ObjCMessageExpr
modifier|*
name|msgE
init|=
name|dyn_cast
operator|<
name|ObjCMessageExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
condition|)
return|return
name|msgE
operator|->
name|getNumArgs
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|isPropertySetter
argument_list|()
condition|?
literal|1
else|:
literal|0
return|;
end_return

begin_macro
unit|}     SVal
name|getArgSVal
argument_list|(
argument|unsigned i
argument_list|,
argument|const GRState *state
argument_list|)
end_macro

begin_expr_stmt
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
block|;
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
operator|&&
literal|"Invalid index for argument"
argument_list|)
block|;
if|if
condition|(
specifier|const
name|ObjCMessageExpr
modifier|*
name|msgE
init|=
name|dyn_cast
operator|<
name|ObjCMessageExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
condition|)
return|return
name|state
operator|->
name|getSVal
argument_list|(
name|msgE
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
name|assert
argument_list|(
name|isPropertySetter
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|SetterArgV
return|;
end_return

begin_macro
unit|}     QualType
name|getArgType
argument_list|(
argument|unsigned i
argument_list|)
end_macro

begin_expr_stmt
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
block|;
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
operator|&&
literal|"Invalid index for argument"
argument_list|)
block|;
if|if
condition|(
specifier|const
name|ObjCMessageExpr
modifier|*
name|msgE
init|=
name|dyn_cast
operator|<
name|ObjCMessageExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
condition|)
return|return
name|msgE
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
operator|->
name|getType
argument_list|()
return|;
name|assert
argument_list|(
name|isPropertySetter
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|cast
operator|<
name|ObjCPropertyRefExpr
operator|>
operator|(
name|MsgOrPropE
operator|)
operator|->
name|getType
argument_list|()
return|;
end_return

begin_decl_stmt
unit|}        const
name|Expr
modifier|*
name|getArgExpr
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|SourceRange
name|getArgSourceRange
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
operator|&&
literal|"This ObjCMessage is uninitialized!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
operator|&&
literal|"Invalid index for argument"
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|Expr
modifier|*
name|argE
init|=
name|getArgExpr
argument_list|(
name|i
argument_list|)
condition|)
return|return
name|argE
operator|->
name|getSourceRange
argument_list|()
return|;
return|return
name|OriginE
operator|->
name|getSourceRange
argument_list|()
return|;
block|}
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|ObjCPropertyGetter
range|:
name|public
name|ObjCMessage
block|{
name|public
operator|:
name|ObjCPropertyGetter
argument_list|(
specifier|const
name|ObjCPropertyRefExpr
operator|*
name|propE
argument_list|,
specifier|const
name|Expr
operator|*
name|originE
argument_list|)
operator|:
name|ObjCMessage
argument_list|(
argument|propE
argument_list|,
argument|originE
argument_list|,
argument|false
argument_list|,
argument|SVal()
argument_list|)
block|{
name|assert
argument_list|(
name|propE
operator|&&
name|originE
operator|&&
literal|"should not be initialized with null expressions"
argument_list|)
block|;   }
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|ObjCPropertySetter
range|:
name|public
name|ObjCMessage
block|{
name|public
operator|:
name|ObjCPropertySetter
argument_list|(
argument|const ObjCPropertyRefExpr *propE
argument_list|,
argument|const Expr *storeE
argument_list|,
argument|SVal argV
argument_list|)
operator|:
name|ObjCMessage
argument_list|(
argument|propE
argument_list|,
argument|storeE
argument_list|,
argument|true
argument_list|,
argument|argV
argument_list|)
block|{
name|assert
argument_list|(
name|propE
operator|&&
name|storeE
operator|&&
literal|"should not be initialized with null expressions"
argument_list|)
block|;   }
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// \brief Common wrapper for a call expression or an ObjC message, mainly to
end_comment

begin_comment
comment|/// provide a common interface for handling their arguments.
end_comment

begin_decl_stmt
name|class
name|CallOrObjCMessage
block|{
specifier|const
name|CallExpr
modifier|*
name|CallE
decl_stmt|;
name|ObjCMessage
name|Msg
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|State
decl_stmt|;
name|public
label|:
name|CallOrObjCMessage
argument_list|(
specifier|const
name|CallExpr
operator|*
name|callE
argument_list|,
specifier|const
name|GRState
operator|*
name|state
argument_list|)
operator|:
name|CallE
argument_list|(
name|callE
argument_list|)
operator|,
name|State
argument_list|(
argument|state
argument_list|)
block|{}
name|CallOrObjCMessage
argument_list|(
specifier|const
name|ObjCMessage
operator|&
name|msg
argument_list|,
specifier|const
name|GRState
operator|*
name|state
argument_list|)
operator|:
name|CallE
argument_list|(
literal|0
argument_list|)
operator|,
name|Msg
argument_list|(
name|msg
argument_list|)
operator|,
name|State
argument_list|(
argument|state
argument_list|)
block|{}
name|QualType
name|getResultType
argument_list|(
argument|ASTContext&ctx
argument_list|)
specifier|const
expr_stmt|;
name|bool
name|isFunctionCall
argument_list|()
specifier|const
block|{
return|return
operator|(
name|bool
operator|)
name|CallE
return|;
block|}
name|bool
name|isCXXCall
argument_list|()
specifier|const
block|{
return|return
name|CallE
operator|&&
name|isa
operator|<
name|CXXMemberCallExpr
operator|>
operator|(
name|CallE
operator|)
return|;
block|}
name|SVal
name|getCXXCallee
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getNumArgs
argument_list|()
specifier|const
block|{
if|if
condition|(
name|CallE
condition|)
return|return
name|CallE
operator|->
name|getNumArgs
argument_list|()
return|;
return|return
name|Msg
operator|.
name|getNumArgs
argument_list|()
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|SVal
name|getArgSVal
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CallE
condition|)
return|return
name|State
operator|->
name|getSVal
argument_list|(
name|CallE
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
return|return
name|Msg
operator|.
name|getArgSVal
argument_list|(
name|i
argument_list|,
name|State
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|SVal
name|getArgSValAsScalarOrLoc
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|Expr
modifier|*
name|getArg
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CallE
condition|)
return|return
name|CallE
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
return|;
return|return
name|Msg
operator|.
name|getArgExpr
argument_list|(
name|i
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|SourceRange
name|getArgSourceRange
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumArgs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|CallE
condition|)
return|return
name|CallE
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
operator|->
name|getSourceRange
argument_list|()
return|;
return|return
name|Msg
operator|.
name|getArgSourceRange
argument_list|(
name|i
argument_list|)
return|;
block|}
end_decl_stmt

begin_endif
unit|};  } }
endif|#
directive|endif
end_endif

end_unit

