begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== CheckerContext.h - Context info for path-sensitive checkers--*- C++ -*--=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines CheckerContext that provides contextual info for
end_comment

begin_comment
comment|// path-sensitive checkers.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_SA_CORE_PATHSENSITIVE_CHECKERCONTEXT
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_SA_CORE_PATHSENSITIVE_CHECKERCONTEXT
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/Support/SaveAndRestore.h"
end_include

begin_include
include|#
directive|include
file|"clang/StaticAnalyzer/Core/PathSensitive/ExprEngine.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|ento
block|{
name|class
name|CheckerContext
block|{
name|ExplodedNodeSet
modifier|&
name|Dst
decl_stmt|;
name|StmtNodeBuilder
modifier|&
name|B
decl_stmt|;
name|ExprEngine
modifier|&
name|Eng
decl_stmt|;
name|ExplodedNode
modifier|*
name|Pred
decl_stmt|;
name|SaveAndRestore
operator|<
name|bool
operator|>
name|OldSink
expr_stmt|;
name|SaveOr
name|OldHasGen
decl_stmt|;
specifier|const
name|ProgramPoint
name|Location
decl_stmt|;
specifier|const
name|ProgramState
modifier|*
name|ST
decl_stmt|;
specifier|const
name|unsigned
name|size
decl_stmt|;
name|public
label|:
name|bool
modifier|*
name|respondsToCallback
decl_stmt|;
name|public
label|:
name|CheckerContext
argument_list|(
name|ExplodedNodeSet
operator|&
name|dst
argument_list|,
name|StmtNodeBuilder
operator|&
name|builder
argument_list|,
name|ExprEngine
operator|&
name|eng
argument_list|,
name|ExplodedNode
operator|*
name|pred
argument_list|,
specifier|const
name|ProgramPoint
operator|&
name|loc
argument_list|,
name|bool
operator|*
name|respondsToCB
operator|=
literal|0
argument_list|,
specifier|const
name|ProgramState
operator|*
name|st
operator|=
literal|0
argument_list|)
operator|:
name|Dst
argument_list|(
name|dst
argument_list|)
operator|,
name|B
argument_list|(
name|builder
argument_list|)
operator|,
name|Eng
argument_list|(
name|eng
argument_list|)
operator|,
name|Pred
argument_list|(
name|pred
argument_list|)
operator|,
name|OldSink
argument_list|(
name|B
operator|.
name|BuildSinks
argument_list|)
operator|,
name|OldHasGen
argument_list|(
name|B
operator|.
name|hasGeneratedNode
argument_list|)
operator|,
name|Location
argument_list|(
name|loc
argument_list|)
operator|,
name|ST
argument_list|(
name|st
argument_list|)
operator|,
name|size
argument_list|(
name|Dst
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|respondsToCallback
argument_list|(
argument|respondsToCB
argument_list|)
block|{}
operator|~
name|CheckerContext
argument_list|()
expr_stmt|;
name|ExprEngine
modifier|&
name|getEngine
parameter_list|()
block|{
return|return
name|Eng
return|;
block|}
name|AnalysisManager
modifier|&
name|getAnalysisManager
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getAnalysisManager
argument_list|()
return|;
block|}
name|ConstraintManager
modifier|&
name|getConstraintManager
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getConstraintManager
argument_list|()
return|;
block|}
name|StoreManager
modifier|&
name|getStoreManager
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getStoreManager
argument_list|()
return|;
block|}
name|ExplodedNodeSet
modifier|&
name|getNodeSet
parameter_list|()
block|{
return|return
name|Dst
return|;
block|}
name|ExplodedNode
modifier|*
modifier|&
name|getPredecessor
parameter_list|()
block|{
return|return
name|Pred
return|;
block|}
specifier|const
name|ProgramState
modifier|*
name|getState
parameter_list|()
block|{
return|return
name|ST
condition|?
name|ST
else|:
name|Pred
operator|->
name|getState
argument_list|()
return|;
block|}
comment|/// \brief Returns the number of times the current block has been visited
comment|/// along the analyzed path.
name|unsigned
name|getCurrentBlockCount
parameter_list|()
block|{
return|return
name|B
operator|.
name|getCurrentBlockCount
argument_list|()
return|;
block|}
name|ASTContext
modifier|&
name|getASTContext
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getContext
argument_list|()
return|;
block|}
name|BugReporter
modifier|&
name|getBugReporter
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getBugReporter
argument_list|()
return|;
block|}
name|SourceManager
modifier|&
name|getSourceManager
parameter_list|()
block|{
return|return
name|getBugReporter
argument_list|()
operator|.
name|getSourceManager
argument_list|()
return|;
block|}
name|SValBuilder
modifier|&
name|getSValBuilder
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getSValBuilder
argument_list|()
return|;
block|}
name|SymbolManager
modifier|&
name|getSymbolManager
parameter_list|()
block|{
return|return
name|getSValBuilder
argument_list|()
operator|.
name|getSymbolManager
argument_list|()
return|;
block|}
name|bool
name|isObjCGCEnabled
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|isObjCGCEnabled
argument_list|()
return|;
block|}
comment|/// \brief Generate a default checker node (containing checker tag but no
comment|/// checker state changes).
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
name|bool
name|autoTransition
init|=
name|true
parameter_list|)
block|{
return|return
name|generateNode
argument_list|(
name|getState
argument_list|()
argument_list|,
name|autoTransition
argument_list|)
return|;
block|}
comment|/// \brief Generate a new checker node with the given predecessor.
comment|/// Allows checkers to generate a chain of nodes.
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|ProgramState
modifier|*
name|state
parameter_list|,
name|ExplodedNode
modifier|*
name|pred
parameter_list|,
specifier|const
name|ProgramPointTag
modifier|*
name|tag
init|=
literal|0
parameter_list|,
name|bool
name|autoTransition
init|=
name|true
parameter_list|)
block|{
name|ExplodedNode
modifier|*
name|N
init|=
name|generateNodeImpl
argument_list|(
name|state
argument_list|,
name|false
argument_list|,
name|pred
argument_list|,
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|N
operator|&&
name|autoTransition
condition|)
name|addTransition
argument_list|(
name|N
argument_list|)
expr_stmt|;
return|return
name|N
return|;
block|}
comment|/// \brief Generate a new checker node.
name|ExplodedNode
modifier|*
name|generateNode
parameter_list|(
specifier|const
name|ProgramState
modifier|*
name|state
parameter_list|,
name|bool
name|autoTransition
init|=
name|true
parameter_list|,
specifier|const
name|ProgramPointTag
modifier|*
name|tag
init|=
literal|0
parameter_list|)
block|{
name|ExplodedNode
modifier|*
name|N
init|=
name|generateNodeImpl
argument_list|(
name|state
argument_list|,
name|false
argument_list|,
literal|0
argument_list|,
name|tag
argument_list|)
decl_stmt|;
if|if
condition|(
name|N
operator|&&
name|autoTransition
condition|)
name|addTransition
argument_list|(
name|N
argument_list|)
expr_stmt|;
return|return
name|N
return|;
block|}
comment|/// \brief Generate a sink node. Generating sink stops exploration of the
comment|/// given path.
name|ExplodedNode
modifier|*
name|generateSink
parameter_list|(
specifier|const
name|ProgramState
modifier|*
name|state
init|=
literal|0
parameter_list|)
block|{
return|return
name|generateNodeImpl
argument_list|(
name|state
condition|?
name|state
else|:
name|getState
argument_list|()
argument_list|,
name|true
argument_list|)
return|;
block|}
name|void
name|addTransition
parameter_list|(
name|ExplodedNode
modifier|*
name|node
parameter_list|)
block|{
name|Dst
operator|.
name|Add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|void
name|addTransition
parameter_list|(
specifier|const
name|ProgramState
modifier|*
name|state
parameter_list|,
specifier|const
name|ProgramPointTag
modifier|*
name|tag
init|=
literal|0
parameter_list|)
block|{
name|assert
argument_list|(
name|state
argument_list|)
expr_stmt|;
comment|// If the 'state' is not new, we need to check if the cached state 'ST'
comment|// is new.
if|if
condition|(
name|state
operator|!=
name|getState
argument_list|()
operator|||
operator|(
name|ST
operator|&&
name|ST
operator|!=
name|Pred
operator|->
name|getState
argument_list|()
operator|)
condition|)
comment|// state is new or equals to ST.
name|generateNode
argument_list|(
name|state
argument_list|,
name|true
argument_list|,
name|tag
argument_list|)
expr_stmt|;
else|else
name|Dst
operator|.
name|Add
argument_list|(
name|Pred
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitReport
parameter_list|(
name|BugReport
modifier|*
name|R
parameter_list|)
block|{
name|Eng
operator|.
name|getBugReporter
argument_list|()
operator|.
name|EmitReport
argument_list|(
name|R
argument_list|)
expr_stmt|;
block|}
name|AnalysisContext
operator|*
name|getCurrentAnalysisContext
argument_list|()
specifier|const
block|{
return|return
name|Pred
operator|->
name|getLocationContext
argument_list|()
operator|->
name|getAnalysisContext
argument_list|()
return|;
block|}
name|private
label|:
name|ExplodedNode
modifier|*
name|generateNodeImpl
parameter_list|(
specifier|const
name|ProgramState
modifier|*
name|state
parameter_list|,
name|bool
name|markAsSink
parameter_list|,
name|ExplodedNode
modifier|*
name|pred
init|=
literal|0
parameter_list|,
specifier|const
name|ProgramPointTag
modifier|*
name|tag
init|=
literal|0
parameter_list|)
block|{
name|ExplodedNode
modifier|*
name|node
init|=
name|B
operator|.
name|generateNode
argument_list|(
name|tag
condition|?
name|Location
operator|.
name|withTag
argument_list|(
name|tag
argument_list|)
else|:
name|Location
argument_list|,
name|state
argument_list|,
name|pred
condition|?
name|pred
else|:
name|Pred
argument_list|)
decl_stmt|;
if|if
condition|(
name|markAsSink
operator|&&
name|node
condition|)
name|node
operator|->
name|markAsSink
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
empty_stmt|;
block|}
comment|// end GR namespace
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

