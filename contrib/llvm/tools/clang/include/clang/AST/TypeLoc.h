begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- TypeLoc.h - Type Source Info Wrapper -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief Defines the clang::TypeLoc interface and its subclasses.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_TYPELOC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_TYPELOC_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Decl.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/TemplateBase.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/Specifiers.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|ParmVarDecl
decl_stmt|;
name|class
name|TypeSourceInfo
decl_stmt|;
name|class
name|UnqualTypeLoc
decl_stmt|;
comment|// Predeclare all the type nodes.
define|#
directive|define
name|ABSTRACT_TYPELOC
parameter_list|(
name|Class
parameter_list|,
name|Base
parameter_list|)
define|#
directive|define
name|TYPELOC
parameter_list|(
name|Class
parameter_list|,
name|Base
parameter_list|)
define|\
value|class Class##TypeLoc;
include|#
directive|include
file|"clang/AST/TypeLocNodes.def"
comment|/// \brief Base wrapper for a particular "section" of type source info.
comment|///
comment|/// A client should use the TypeLoc subclasses through castAs()/getAs()
comment|/// in order to get at the actual information.
name|class
name|TypeLoc
block|{
name|protected
label|:
comment|// The correctness of this relies on the property that, for Type *Ty,
comment|//   QualType(Ty, 0).getAsOpaquePtr() == (void*) Ty
specifier|const
name|void
modifier|*
name|Ty
decl_stmt|;
name|void
modifier|*
name|Data
decl_stmt|;
name|public
label|:
comment|/// \brief Convert to the specified TypeLoc type, asserting that this TypeLoc
comment|/// is of the desired type.
comment|///
comment|/// \pre T::isKind(*this)
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|castAs
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|T
operator|::
name|isKind
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
block|;
name|T
name|t
block|;
name|TypeLoc
operator|&
name|tl
operator|=
name|t
block|;
name|tl
operator|=
operator|*
name|this
block|;
return|return
name|t
return|;
block|}
comment|/// \brief Convert to the specified TypeLoc type, returning a null TypeLoc if
comment|/// this TypeLoc is not of the desired type.
name|template
operator|<
name|typename
name|T
operator|>
name|T
name|getAs
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|T
operator|::
name|isKind
argument_list|(
operator|*
name|this
argument_list|)
condition|)
return|return
name|T
argument_list|()
return|;
name|T
name|t
expr_stmt|;
name|TypeLoc
modifier|&
name|tl
init|=
name|t
decl_stmt|;
name|tl
operator|=
operator|*
name|this
expr_stmt|;
return|return
name|t
return|;
block|}
comment|/// The kinds of TypeLocs.  Equivalent to the Type::TypeClass enum,
comment|/// except it also defines a Qualified enum that corresponds to the
comment|/// QualifiedLoc class.
enum|enum
name|TypeLocClass
block|{
define|#
directive|define
name|ABSTRACT_TYPE
parameter_list|(
name|Class
parameter_list|,
name|Base
parameter_list|)
define|#
directive|define
name|TYPE
parameter_list|(
name|Class
parameter_list|,
name|Base
parameter_list|)
define|\
value|Class = Type::Class,
include|#
directive|include
file|"clang/AST/TypeNodes.def"
name|Qualified
block|}
enum|;
name|TypeLoc
argument_list|()
operator|:
name|Ty
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Data
argument_list|(
argument|nullptr
argument_list|)
block|{ }
name|TypeLoc
argument_list|(
argument|QualType ty
argument_list|,
argument|void *opaqueData
argument_list|)
operator|:
name|Ty
argument_list|(
name|ty
operator|.
name|getAsOpaquePtr
argument_list|()
argument_list|)
operator|,
name|Data
argument_list|(
argument|opaqueData
argument_list|)
block|{ }
name|TypeLoc
argument_list|(
specifier|const
name|Type
operator|*
name|ty
argument_list|,
name|void
operator|*
name|opaqueData
argument_list|)
operator|:
name|Ty
argument_list|(
name|ty
argument_list|)
operator|,
name|Data
argument_list|(
argument|opaqueData
argument_list|)
block|{ }
name|TypeLocClass
name|getTypeLocClass
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getType
argument_list|()
operator|.
name|hasLocalQualifiers
argument_list|()
condition|)
return|return
name|Qualified
return|;
return|return
operator|(
name|TypeLocClass
operator|)
name|getType
argument_list|()
operator|->
name|getTypeClass
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Ty
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|LLVM_EXPLICIT
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|Ty
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Returns the size of type source info data block for the given type.
end_comment

begin_function_decl
specifier|static
name|unsigned
name|getFullDataSizeForType
parameter_list|(
name|QualType
name|Ty
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// \brief Returns the alignment of type source info data block for
end_comment

begin_comment
comment|/// the given type.
end_comment

begin_function_decl
specifier|static
name|unsigned
name|getLocalAlignmentForType
parameter_list|(
name|QualType
name|Ty
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// \brief Get the type for which this source info wrapper provides
end_comment

begin_comment
comment|/// information.
end_comment

begin_expr_stmt
name|QualType
name|getType
argument_list|()
specifier|const
block|{
return|return
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|Ty
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|Type
operator|*
name|getTypePtr
argument_list|()
specifier|const
block|{
return|return
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|Ty
argument_list|)
operator|.
name|getTypePtr
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Get the pointer where source information is stored.
end_comment

begin_expr_stmt
name|void
operator|*
name|getOpaqueData
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Get the begin source location.
end_comment

begin_expr_stmt
name|SourceLocation
name|getBeginLoc
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \brief Get the end source location.
end_comment

begin_expr_stmt
name|SourceLocation
name|getEndLoc
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \brief Get the full source range.
end_comment

begin_expr_stmt
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
return|return
name|SourceRange
argument_list|(
name|getBeginLoc
argument_list|()
argument_list|,
name|getEndLoc
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|SourceLocation
name|getLocStart
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
return|return
name|getBeginLoc
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|SourceLocation
name|getLocEnd
argument_list|()
specifier|const
name|LLVM_READONLY
block|{
return|return
name|getEndLoc
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Get the local source range.
end_comment

begin_expr_stmt
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|getLocalSourceRangeImpl
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Returns the size of the type source info data block.
end_comment

begin_expr_stmt
name|unsigned
name|getFullDataSize
argument_list|()
specifier|const
block|{
return|return
name|getFullDataSizeForType
argument_list|(
name|getType
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Get the next TypeLoc pointed by this TypeLoc, e.g for "int*" the
end_comment

begin_comment
comment|/// TypeLoc is a PointerLoc and next TypeLoc is for "int".
end_comment

begin_expr_stmt
name|TypeLoc
name|getNextTypeLoc
argument_list|()
specifier|const
block|{
return|return
name|getNextTypeLocImpl
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Skips past any qualifiers, if this is qualified.
end_comment

begin_expr_stmt
name|UnqualTypeLoc
name|getUnqualifiedLoc
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|// implemented in this header
end_comment

begin_expr_stmt
name|TypeLoc
name|IgnoreParens
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// \brief Initializes this to state that every location in this
end_comment

begin_comment
comment|/// type is the given location.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// This method exists to provide a simple transition for code that
end_comment

begin_comment
comment|/// relies on location-less types.
end_comment

begin_decl_stmt
name|void
name|initialize
argument_list|(
name|ASTContext
operator|&
name|Context
argument_list|,
name|SourceLocation
name|Loc
argument_list|)
decl|const
block|{
name|initializeImpl
argument_list|(
name|Context
argument_list|,
operator|*
name|this
argument_list|,
name|Loc
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/// \brief Initializes this by copying its information from another
end_comment

begin_comment
comment|/// TypeLoc of the same type.
end_comment

begin_decl_stmt
name|void
name|initializeFullCopy
argument_list|(
name|TypeLoc
name|Other
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|getType
argument_list|()
operator|==
name|Other
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|size_t
name|Size
init|=
name|getFullDataSize
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
name|getOpaqueData
argument_list|()
argument_list|,
name|Other
operator|.
name|getOpaqueData
argument_list|()
argument_list|,
name|Size
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/// \brief Initializes this by copying its information from another
end_comment

begin_comment
comment|/// TypeLoc of the same type.  The given size must be the full data
end_comment

begin_comment
comment|/// size.
end_comment

begin_decl_stmt
name|void
name|initializeFullCopy
argument_list|(
name|TypeLoc
name|Other
argument_list|,
name|unsigned
name|Size
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|getType
argument_list|()
operator|==
name|Other
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|getFullDataSize
argument_list|()
operator|==
name|Size
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|getOpaqueData
argument_list|()
argument_list|,
name|Other
operator|.
name|getOpaqueData
argument_list|()
argument_list|,
name|Size
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|TypeLoc
operator|&
name|LHS
operator|,
specifier|const
name|TypeLoc
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|Ty
operator|==
name|RHS
operator|.
name|Ty
operator|&&
name|LHS
operator|.
name|Data
operator|==
name|RHS
operator|.
name|Data
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|TypeLoc
operator|&
name|LHS
operator|,
specifier|const
name|TypeLoc
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|==
name|RHS
operator|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function
specifier|static
name|bool
name|isKind
parameter_list|(
specifier|const
name|TypeLoc
modifier|&
parameter_list|)
block|{
return|return
name|true
return|;
block|}
end_function

begin_function_decl
specifier|static
name|void
name|initializeImpl
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|,
name|TypeLoc
name|TL
parameter_list|,
name|SourceLocation
name|Loc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|TypeLoc
name|getNextTypeLocImpl
parameter_list|(
name|TypeLoc
name|TL
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|TypeLoc
name|IgnoreParensImpl
parameter_list|(
name|TypeLoc
name|TL
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|SourceRange
name|getLocalSourceRangeImpl
parameter_list|(
name|TypeLoc
name|TL
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|};
comment|/// \brief Return the TypeLoc for a type source info.
end_comment

begin_expr_stmt
specifier|inline
name|TypeLoc
name|TypeSourceInfo
operator|::
name|getTypeLoc
argument_list|()
specifier|const
block|{
return|return
name|TypeLoc
argument_list|(
name|Ty
argument_list|,
name|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|static_cast
operator|<
specifier|const
name|void
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// \brief Wrapper of type source information for a type with
end_comment

begin_comment
comment|/// no direct qualifiers.
end_comment

begin_decl_stmt
name|class
name|UnqualTypeLoc
range|:
name|public
name|TypeLoc
block|{
name|public
operator|:
name|UnqualTypeLoc
argument_list|()
block|{}
name|UnqualTypeLoc
argument_list|(
specifier|const
name|Type
operator|*
name|Ty
argument_list|,
name|void
operator|*
name|Data
argument_list|)
operator|:
name|TypeLoc
argument_list|(
argument|Ty
argument_list|,
argument|Data
argument_list|)
block|{}
specifier|const
name|Type
operator|*
name|getTypePtr
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
specifier|const
name|Type
operator|*
operator|>
operator|(
name|Ty
operator|)
return|;
block|}
name|TypeLocClass
name|getTypeLocClass
argument_list|()
specifier|const
block|{
return|return
operator|(
name|TypeLocClass
operator|)
name|getTypePtr
argument_list|()
operator|->
name|getTypeClass
argument_list|()
return|;
block|}
name|private
operator|:
name|friend
name|class
name|TypeLoc
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const TypeLoc&TL
argument_list|)
block|{
return|return
operator|!
name|TL
operator|.
name|getType
argument_list|()
operator|.
name|hasLocalQualifiers
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper of type source information for a type with
comment|/// non-trivial direct qualifiers.
comment|///
comment|/// Currently, we intentionally do not provide source location for
comment|/// type qualifiers.
name|class
name|QualifiedTypeLoc
operator|:
name|public
name|TypeLoc
block|{
name|public
operator|:
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|()
return|;
block|}
name|UnqualTypeLoc
name|getUnqualifiedLoc
argument_list|()
specifier|const
block|{
name|unsigned
name|align
operator|=
name|TypeLoc
operator|::
name|getLocalAlignmentForType
argument_list|(
name|QualType
argument_list|(
name|getTypePtr
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
block|;
name|uintptr_t
name|dataInt
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Data
operator|)
block|;
name|dataInt
operator|=
name|llvm
operator|::
name|RoundUpToAlignment
argument_list|(
name|dataInt
argument_list|,
name|align
argument_list|)
block|;
return|return
name|UnqualTypeLoc
argument_list|(
name|getTypePtr
argument_list|()
argument_list|,
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|dataInt
operator|)
argument_list|)
return|;
block|}
comment|/// Initializes the local data of this type source info block to
comment|/// provide no information.
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
comment|// do nothing
block|}
name|TypeLoc
name|getNextTypeLoc
argument_list|()
specifier|const
block|{
return|return
name|getUnqualifiedLoc
argument_list|()
return|;
block|}
comment|/// \brief Returns the size of the type source info data block that is
comment|/// specific to this type.
name|unsigned
name|getLocalDataSize
argument_list|()
specifier|const
block|{
comment|// In fact, we don't currently preserve any location information
comment|// for qualifiers.
return|return
literal|0
return|;
block|}
comment|/// \brief Returns the alignment of the type source info data block that is
comment|/// specific to this type.
name|unsigned
name|getLocalDataAlignment
argument_list|()
specifier|const
block|{
comment|// We don't preserve any location information.
return|return
literal|1
return|;
block|}
name|private
operator|:
name|friend
name|class
name|TypeLoc
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const TypeLoc&TL
argument_list|)
block|{
return|return
name|TL
operator|.
name|getType
argument_list|()
operator|.
name|hasLocalQualifiers
argument_list|()
return|;
block|}
expr|}
block|;
specifier|inline
name|UnqualTypeLoc
name|TypeLoc
operator|::
name|getUnqualifiedLoc
argument_list|()
specifier|const
block|{
if|if
condition|(
name|QualifiedTypeLoc
name|Loc
init|=
name|getAs
operator|<
name|QualifiedTypeLoc
operator|>
operator|(
operator|)
condition|)
return|return
name|Loc
operator|.
name|getUnqualifiedLoc
argument_list|()
return|;
return|return
name|castAs
operator|<
name|UnqualTypeLoc
operator|>
operator|(
operator|)
return|;
block|}
comment|/// A metaprogramming base class for TypeLoc classes which correspond
comment|/// to a particular Type subclass.  It is accepted for a single
comment|/// TypeLoc class to correspond to multiple Type classes.
comment|///
comment|/// \tparam Base a class from which to derive
comment|/// \tparam Derived the class deriving from this one
comment|/// \tparam TypeClass the concrete Type subclass associated with this
comment|///   location type
comment|/// \tparam LocalData the structure type of local location data for
comment|///   this type
comment|///
comment|/// TypeLocs with non-constant amounts of local data should override
comment|/// getExtraLocalDataSize(); getExtraLocalData() will then point to
comment|/// this extra memory.
comment|///
comment|/// TypeLocs with an inner type should define
comment|///   QualType getInnerType() const
comment|/// and getInnerTypeLoc() will then point to this inner type's
comment|/// location data.
comment|///
comment|/// A word about hierarchies: this template is not designed to be
comment|/// derived from multiple times in a hierarchy.  It is also not
comment|/// designed to be used for classes where subtypes might provide
comment|/// different amounts of source information.  It should be subclassed
comment|/// only at the deepest portion of the hierarchy where all children
comment|/// have identical source information; if that's an abstract type,
comment|/// then further descendents should inherit from
comment|/// InheritingConcreteTypeLoc instead.
name|template
operator|<
name|class
name|Base
block|,
name|class
name|Derived
block|,
name|class
name|TypeClass
block|,
name|class
name|LocalData
operator|>
name|class
name|ConcreteTypeLoc
operator|:
name|public
name|Base
block|{
specifier|const
name|Derived
operator|*
name|asDerived
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|Derived
operator|*
operator|>
operator|(
name|this
operator|)
return|;
block|}
name|friend
name|class
name|TypeLoc
block|;
specifier|static
name|bool
name|isKind
argument_list|(
argument|const TypeLoc&TL
argument_list|)
block|{
return|return
operator|!
name|TL
operator|.
name|getType
argument_list|()
operator|.
name|hasLocalQualifiers
argument_list|()
operator|&&
name|Derived
operator|::
name|classofType
argument_list|(
name|TL
operator|.
name|getTypePtr
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|classofType
argument_list|(
argument|const Type *Ty
argument_list|)
block|{
return|return
name|TypeClass
operator|::
name|classof
argument_list|(
name|Ty
argument_list|)
return|;
block|}
name|public
operator|:
name|unsigned
name|getLocalDataAlignment
argument_list|()
specifier|const
block|{
return|return
name|std
operator|::
name|max
argument_list|(
name|llvm
operator|::
name|alignOf
operator|<
name|LocalData
operator|>
operator|(
operator|)
argument_list|,
name|asDerived
argument_list|()
operator|->
name|getExtraLocalDataAlignment
argument_list|()
argument_list|)
return|;
block|}
name|unsigned
name|getLocalDataSize
argument_list|()
specifier|const
block|{
name|unsigned
name|size
operator|=
sizeof|sizeof
argument_list|(
name|LocalData
argument_list|)
block|;
name|unsigned
name|extraAlign
operator|=
name|asDerived
argument_list|()
operator|->
name|getExtraLocalDataAlignment
argument_list|()
block|;
name|size
operator|=
name|llvm
operator|::
name|RoundUpToAlignment
argument_list|(
name|size
argument_list|,
name|extraAlign
argument_list|)
block|;
name|size
operator|+=
name|asDerived
argument_list|()
operator|->
name|getExtraLocalDataSize
argument_list|()
block|;
return|return
name|size
return|;
block|}
name|TypeLoc
name|getNextTypeLoc
argument_list|()
specifier|const
block|{
return|return
name|getNextTypeLoc
argument_list|(
name|asDerived
argument_list|()
operator|->
name|getInnerType
argument_list|()
argument_list|)
return|;
block|}
specifier|const
name|TypeClass
operator|*
name|getTypePtr
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|TypeClass
operator|>
operator|(
name|Base
operator|::
name|getTypePtr
argument_list|()
operator|)
return|;
block|}
name|protected
operator|:
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|unsigned
name|getExtraLocalDataAlignment
argument_list|()
specifier|const
block|{
return|return
literal|1
return|;
block|}
name|LocalData
operator|*
name|getLocalData
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|LocalData
operator|*
operator|>
operator|(
name|Base
operator|::
name|Data
operator|)
return|;
block|}
comment|/// Gets a pointer past the Info structure; useful for classes with
comment|/// local data that can't be captured in the Info (e.g. because it's
comment|/// of variable size).
name|void
operator|*
name|getExtraLocalData
argument_list|()
specifier|const
block|{
name|unsigned
name|size
operator|=
sizeof|sizeof
argument_list|(
name|LocalData
argument_list|)
block|;
name|unsigned
name|extraAlign
operator|=
name|asDerived
argument_list|()
operator|->
name|getExtraLocalDataAlignment
argument_list|()
block|;
name|size
operator|=
name|llvm
operator|::
name|RoundUpToAlignment
argument_list|(
name|size
argument_list|,
name|extraAlign
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|Base
operator|::
name|Data
operator|)
operator|+
name|size
return|;
block|}
name|void
operator|*
name|getNonLocalData
argument_list|()
specifier|const
block|{
name|uintptr_t
name|data
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Base
operator|::
name|Data
operator|)
block|;
name|data
operator|+=
name|asDerived
argument_list|()
operator|->
name|getLocalDataSize
argument_list|()
block|;
name|data
operator|=
name|llvm
operator|::
name|RoundUpToAlignment
argument_list|(
name|data
argument_list|,
name|getNextTypeAlign
argument_list|()
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|data
operator|)
return|;
block|}
expr|struct
name|HasNoInnerType
block|{}
block|;
name|HasNoInnerType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|HasNoInnerType
argument_list|()
return|;
block|}
name|TypeLoc
name|getInnerTypeLoc
argument_list|()
specifier|const
block|{
return|return
name|TypeLoc
argument_list|(
name|asDerived
argument_list|()
operator|->
name|getInnerType
argument_list|()
argument_list|,
name|getNonLocalData
argument_list|()
argument_list|)
return|;
block|}
name|private
operator|:
name|unsigned
name|getInnerTypeSize
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeSize
argument_list|(
name|asDerived
argument_list|()
operator|->
name|getInnerType
argument_list|()
argument_list|)
return|;
block|}
name|unsigned
name|getInnerTypeSize
argument_list|(
argument|HasNoInnerType _
argument_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|unsigned
name|getInnerTypeSize
argument_list|(
argument|QualType _
argument_list|)
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
operator|.
name|getFullDataSize
argument_list|()
return|;
block|}
name|unsigned
name|getNextTypeAlign
argument_list|()
specifier|const
block|{
return|return
name|getNextTypeAlign
argument_list|(
name|asDerived
argument_list|()
operator|->
name|getInnerType
argument_list|()
argument_list|)
return|;
block|}
name|unsigned
name|getNextTypeAlign
argument_list|(
argument|HasNoInnerType _
argument_list|)
specifier|const
block|{
return|return
literal|1
return|;
block|}
name|unsigned
name|getNextTypeAlign
argument_list|(
argument|QualType T
argument_list|)
specifier|const
block|{
return|return
name|TypeLoc
operator|::
name|getLocalAlignmentForType
argument_list|(
name|T
argument_list|)
return|;
block|}
name|TypeLoc
name|getNextTypeLoc
argument_list|(
argument|HasNoInnerType _
argument_list|)
specifier|const
block|{
return|return
name|TypeLoc
argument_list|()
return|;
block|}
name|TypeLoc
name|getNextTypeLoc
argument_list|(
argument|QualType T
argument_list|)
specifier|const
block|{
return|return
name|TypeLoc
argument_list|(
name|T
argument_list|,
name|getNonLocalData
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// A metaprogramming class designed for concrete subtypes of abstract
comment|/// types where all subtypes share equivalently-structured source
comment|/// information.  See the note on ConcreteTypeLoc.
name|template
operator|<
name|class
name|Base
block|,
name|class
name|Derived
block|,
name|class
name|TypeClass
operator|>
name|class
name|InheritingConcreteTypeLoc
operator|:
name|public
name|Base
block|{
name|friend
name|class
name|TypeLoc
block|;
specifier|static
name|bool
name|classofType
argument_list|(
argument|const Type *Ty
argument_list|)
block|{
return|return
name|TypeClass
operator|::
name|classof
argument_list|(
name|Ty
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const TypeLoc&TL
argument_list|)
block|{
return|return
operator|!
name|TL
operator|.
name|getType
argument_list|()
operator|.
name|hasLocalQualifiers
argument_list|()
operator|&&
name|Derived
operator|::
name|classofType
argument_list|(
name|TL
operator|.
name|getTypePtr
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|isKind
argument_list|(
argument|const UnqualTypeLoc&TL
argument_list|)
block|{
return|return
name|Derived
operator|::
name|classofType
argument_list|(
name|TL
operator|.
name|getTypePtr
argument_list|()
argument_list|)
return|;
block|}
name|public
operator|:
specifier|const
name|TypeClass
operator|*
name|getTypePtr
argument_list|()
specifier|const
block|{
return|return
name|cast
operator|<
name|TypeClass
operator|>
operator|(
name|Base
operator|::
name|getTypePtr
argument_list|()
operator|)
return|;
block|}
expr|}
block|;   struct
name|TypeSpecLocInfo
block|{
name|SourceLocation
name|NameLoc
block|; }
block|;
comment|/// \brief A reasonable base class for TypeLocs that correspond to
comment|/// types that are written as a type-specifier.
name|class
name|TypeSpecTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|TypeSpecTypeLoc
block|,
name|Type
block|,
name|TypeSpecLocInfo
operator|>
block|{
name|public
operator|:
expr|enum
block|{
name|LocalDataSize
operator|=
sizeof|sizeof
argument_list|(
name|TypeSpecLocInfo
argument_list|)
block|,
name|LocalDataAlignment
operator|=
name|llvm
operator|::
name|AlignOf
operator|<
name|TypeSpecLocInfo
operator|>
operator|::
name|Alignment
block|}
block|;
name|SourceLocation
name|getNameLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|NameLoc
return|;
block|}
name|void
name|setNameLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|NameLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getNameLoc
argument_list|()
argument_list|,
name|getNameLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setNameLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
name|private
operator|:
name|friend
name|class
name|TypeLoc
block|;
specifier|static
name|bool
name|isKind
argument_list|(
specifier|const
name|TypeLoc
operator|&
name|TL
argument_list|)
block|; }
block|;   struct
name|BuiltinLocInfo
block|{
name|SourceLocation
name|BuiltinLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for builtin types.
name|class
name|BuiltinTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|BuiltinTypeLoc
block|,
name|BuiltinType
block|,
name|BuiltinLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getBuiltinLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|BuiltinLoc
return|;
block|}
name|void
name|setBuiltinLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|BuiltinLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getNameLoc
argument_list|()
specifier|const
block|{
return|return
name|getBuiltinLoc
argument_list|()
return|;
block|}
name|WrittenBuiltinSpecs
operator|&
name|getWrittenBuiltinSpecs
argument_list|()
block|{
return|return
operator|*
operator|(
name|static_cast
operator|<
name|WrittenBuiltinSpecs
operator|*
operator|>
operator|(
name|getExtraLocalData
argument_list|()
operator|)
operator|)
return|;
block|}
specifier|const
name|WrittenBuiltinSpecs
operator|&
name|getWrittenBuiltinSpecs
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|static_cast
operator|<
name|WrittenBuiltinSpecs
operator|*
operator|>
operator|(
name|getExtraLocalData
argument_list|()
operator|)
operator|)
return|;
block|}
name|bool
name|needsExtraLocalData
argument_list|()
specifier|const
block|{
name|BuiltinType
operator|::
name|Kind
name|bk
operator|=
name|getTypePtr
argument_list|()
operator|->
name|getKind
argument_list|()
block|;
return|return
operator|(
name|bk
operator|>=
name|BuiltinType
operator|::
name|UShort
operator|&&
name|bk
operator|<=
name|BuiltinType
operator|::
name|UInt128
operator|)
operator|||
operator|(
name|bk
operator|>=
name|BuiltinType
operator|::
name|Short
operator|&&
name|bk
operator|<=
name|BuiltinType
operator|::
name|LongDouble
operator|)
operator|||
name|bk
operator|==
name|BuiltinType
operator|::
name|UChar
operator|||
name|bk
operator|==
name|BuiltinType
operator|::
name|SChar
return|;
block|}
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
name|needsExtraLocalData
argument_list|()
operator|?
sizeof|sizeof
argument_list|(
name|WrittenBuiltinSpecs
argument_list|)
operator|:
literal|0
return|;
block|}
name|unsigned
name|getExtraLocalDataAlignment
argument_list|()
specifier|const
block|{
return|return
name|needsExtraLocalData
argument_list|()
condition|?
name|llvm
operator|::
name|alignOf
operator|<
name|WrittenBuiltinSpecs
operator|>
operator|(
operator|)
else|:
literal|1
return|;
block|}
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getBuiltinLoc
argument_list|()
argument_list|,
name|getBuiltinLoc
argument_list|()
argument_list|)
return|;
block|}
name|TypeSpecifierSign
name|getWrittenSignSpec
argument_list|()
specifier|const
block|{
if|if
condition|(
name|needsExtraLocalData
argument_list|()
condition|)
return|return
name|static_cast
operator|<
name|TypeSpecifierSign
operator|>
operator|(
name|getWrittenBuiltinSpecs
argument_list|()
operator|.
name|Sign
operator|)
return|;
else|else
return|return
name|TSS_unspecified
return|;
block|}
name|bool
name|hasWrittenSignSpec
argument_list|()
specifier|const
block|{
return|return
name|getWrittenSignSpec
argument_list|()
operator|!=
name|TSS_unspecified
return|;
block|}
name|void
name|setWrittenSignSpec
argument_list|(
argument|TypeSpecifierSign written
argument_list|)
block|{
if|if
condition|(
name|needsExtraLocalData
argument_list|()
condition|)
name|getWrittenBuiltinSpecs
argument_list|()
operator|.
name|Sign
operator|=
name|written
expr_stmt|;
block|}
name|TypeSpecifierWidth
name|getWrittenWidthSpec
argument_list|()
specifier|const
block|{
if|if
condition|(
name|needsExtraLocalData
argument_list|()
condition|)
return|return
name|static_cast
operator|<
name|TypeSpecifierWidth
operator|>
operator|(
name|getWrittenBuiltinSpecs
argument_list|()
operator|.
name|Width
operator|)
return|;
else|else
return|return
name|TSW_unspecified
return|;
block|}
name|bool
name|hasWrittenWidthSpec
argument_list|()
specifier|const
block|{
return|return
name|getWrittenWidthSpec
argument_list|()
operator|!=
name|TSW_unspecified
return|;
block|}
name|void
name|setWrittenWidthSpec
argument_list|(
argument|TypeSpecifierWidth written
argument_list|)
block|{
if|if
condition|(
name|needsExtraLocalData
argument_list|()
condition|)
name|getWrittenBuiltinSpecs
argument_list|()
operator|.
name|Width
operator|=
name|written
expr_stmt|;
block|}
name|TypeSpecifierType
name|getWrittenTypeSpec
argument_list|()
specifier|const
block|;
name|bool
name|hasWrittenTypeSpec
argument_list|()
specifier|const
block|{
return|return
name|getWrittenTypeSpec
argument_list|()
operator|!=
name|TST_unspecified
return|;
block|}
name|void
name|setWrittenTypeSpec
argument_list|(
argument|TypeSpecifierType written
argument_list|)
block|{
if|if
condition|(
name|needsExtraLocalData
argument_list|()
condition|)
name|getWrittenBuiltinSpecs
argument_list|()
operator|.
name|Type
operator|=
name|written
expr_stmt|;
block|}
name|bool
name|hasModeAttr
argument_list|()
specifier|const
block|{
if|if
condition|(
name|needsExtraLocalData
argument_list|()
condition|)
return|return
name|getWrittenBuiltinSpecs
argument_list|()
operator|.
name|ModeAttr
return|;
else|else
return|return
name|false
return|;
block|}
name|void
name|setModeAttr
argument_list|(
argument|bool written
argument_list|)
block|{
if|if
condition|(
name|needsExtraLocalData
argument_list|()
condition|)
name|getWrittenBuiltinSpecs
argument_list|()
operator|.
name|ModeAttr
operator|=
name|written
expr_stmt|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setBuiltinLoc
argument_list|(
name|Loc
argument_list|)
block|;
if|if
condition|(
name|needsExtraLocalData
argument_list|()
condition|)
block|{
name|WrittenBuiltinSpecs
modifier|&
name|wbs
init|=
name|getWrittenBuiltinSpecs
argument_list|()
decl_stmt|;
name|wbs
operator|.
name|Sign
operator|=
name|TSS_unspecified
expr_stmt|;
name|wbs
operator|.
name|Width
operator|=
name|TSW_unspecified
expr_stmt|;
name|wbs
operator|.
name|Type
operator|=
name|TST_unspecified
expr_stmt|;
name|wbs
operator|.
name|ModeAttr
operator|=
name|false
expr_stmt|;
block|}
block|}
expr|}
block|;
comment|/// \brief Wrapper for source info for typedefs.
name|class
name|TypedefTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|TypedefTypeLoc
block|,
name|TypedefType
operator|>
block|{
name|public
operator|:
name|TypedefNameDecl
operator|*
name|getTypedefNameDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper for source info for injected class names of class
comment|/// templates.
name|class
name|InjectedClassNameTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|InjectedClassNameTypeLoc
block|,
name|InjectedClassNameType
operator|>
block|{
name|public
operator|:
name|CXXRecordDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper for source info for unresolved typename using decls.
name|class
name|UnresolvedUsingTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|UnresolvedUsingTypeLoc
block|,
name|UnresolvedUsingType
operator|>
block|{
name|public
operator|:
name|UnresolvedUsingTypenameDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper for source info for tag types.  Note that this only
comment|/// records source info for the name itself; a type written 'struct foo'
comment|/// should be represented as an ElaboratedTypeLoc.  We currently
comment|/// only do that when C++ is enabled because of the expense of
comment|/// creating an ElaboratedType node for so many type references in C.
name|class
name|TagTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|TagTypeLoc
block|,
name|TagType
operator|>
block|{
name|public
operator|:
name|TagDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
comment|/// \brief True if the tag was defined in this type specifier.
name|bool
name|isDefinition
argument_list|()
specifier|const
block|{
name|TagDecl
operator|*
name|D
operator|=
name|getDecl
argument_list|()
block|;
return|return
name|D
operator|->
name|isCompleteDefinition
argument_list|()
operator|&&
operator|(
name|D
operator|->
name|getIdentifier
argument_list|()
operator|==
name|nullptr
operator|||
name|D
operator|->
name|getLocation
argument_list|()
operator|==
name|getNameLoc
argument_list|()
operator|)
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper for source info for record types.
name|class
name|RecordTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TagTypeLoc
block|,
name|RecordTypeLoc
block|,
name|RecordType
operator|>
block|{
name|public
operator|:
name|RecordDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper for source info for enum types.
name|class
name|EnumTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TagTypeLoc
block|,
name|EnumTypeLoc
block|,
name|EnumType
operator|>
block|{
name|public
operator|:
name|EnumDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper for template type parameters.
name|class
name|TemplateTypeParmTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|TemplateTypeParmTypeLoc
block|,
name|TemplateTypeParmType
operator|>
block|{
name|public
operator|:
name|TemplateTypeParmDecl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper for substituted template type parameters.
name|class
name|SubstTemplateTypeParmTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|SubstTemplateTypeParmTypeLoc
block|,
name|SubstTemplateTypeParmType
operator|>
block|{ }
block|;
comment|/// \brief Wrapper for substituted template type parameters.
name|class
name|SubstTemplateTypeParmPackTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|SubstTemplateTypeParmPackTypeLoc
block|,
name|SubstTemplateTypeParmPackType
operator|>
block|{ }
block|;  struct
name|AttributedLocInfo
block|{
expr|union
block|{
name|Expr
operator|*
name|ExprOperand
block|;
comment|/// A raw SourceLocation.
name|unsigned
name|EnumOperandLoc
block|;   }
block|;
name|SourceRange
name|OperandParens
block|;
name|SourceLocation
name|AttrLoc
block|; }
block|;
comment|/// \brief Type source information for an attributed type.
name|class
name|AttributedTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|AttributedTypeLoc
block|,
name|AttributedType
block|,
name|AttributedLocInfo
operator|>
block|{
name|public
operator|:
name|AttributedType
operator|::
name|Kind
name|getAttrKind
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getAttrKind
argument_list|()
return|;
block|}
name|bool
name|hasAttrExprOperand
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getAttrKind
argument_list|()
operator|>=
name|AttributedType
operator|::
name|FirstExprOperandKind
operator|&&
name|getAttrKind
argument_list|()
operator|<=
name|AttributedType
operator|::
name|LastExprOperandKind
operator|)
return|;
block|}
name|bool
name|hasAttrEnumOperand
argument_list|()
specifier|const
block|{
return|return
operator|(
name|getAttrKind
argument_list|()
operator|>=
name|AttributedType
operator|::
name|FirstEnumOperandKind
operator|&&
name|getAttrKind
argument_list|()
operator|<=
name|AttributedType
operator|::
name|LastEnumOperandKind
operator|)
return|;
block|}
name|bool
name|hasAttrOperand
argument_list|()
specifier|const
block|{
return|return
name|hasAttrExprOperand
argument_list|()
operator|||
name|hasAttrEnumOperand
argument_list|()
return|;
block|}
comment|/// The modified type, which is generally canonically different from
comment|/// the attribute type.
comment|///    int main(int, char**) __attribute__((noreturn))
comment|///    ~~~     ~~~~~~~~~~~~~
name|TypeLoc
name|getModifiedLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
comment|/// The location of the attribute name, i.e.
comment|///    __attribute__((regparm(1000)))
comment|///                   ^~~~~~~
name|SourceLocation
name|getAttrNameLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|AttrLoc
return|;
block|}
name|void
name|setAttrNameLoc
argument_list|(
argument|SourceLocation loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|AttrLoc
operator|=
name|loc
block|;   }
comment|/// The attribute's expression operand, if it has one.
comment|///    void *cur_thread __attribute__((address_space(21)))
comment|///                                                  ^~
name|Expr
operator|*
name|getAttrExprOperand
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|hasAttrExprOperand
argument_list|()
argument_list|)
block|;
return|return
name|getLocalData
argument_list|()
operator|->
name|ExprOperand
return|;
block|}
name|void
name|setAttrExprOperand
argument_list|(
argument|Expr *e
argument_list|)
block|{
name|assert
argument_list|(
name|hasAttrExprOperand
argument_list|()
argument_list|)
block|;
name|getLocalData
argument_list|()
operator|->
name|ExprOperand
operator|=
name|e
block|;   }
comment|/// The location of the attribute's enumerated operand, if it has one.
comment|///    void * __attribute__((objc_gc(weak)))
comment|///                                  ^~~~
name|SourceLocation
name|getAttrEnumOperandLoc
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|hasAttrEnumOperand
argument_list|()
argument_list|)
block|;
return|return
name|SourceLocation
operator|::
name|getFromRawEncoding
argument_list|(
name|getLocalData
argument_list|()
operator|->
name|EnumOperandLoc
argument_list|)
return|;
block|}
name|void
name|setAttrEnumOperandLoc
argument_list|(
argument|SourceLocation loc
argument_list|)
block|{
name|assert
argument_list|(
name|hasAttrEnumOperand
argument_list|()
argument_list|)
block|;
name|getLocalData
argument_list|()
operator|->
name|EnumOperandLoc
operator|=
name|loc
operator|.
name|getRawEncoding
argument_list|()
block|;   }
comment|/// The location of the parentheses around the operand, if there is
comment|/// an operand.
comment|///    void * __attribute__((objc_gc(weak)))
comment|///                                 ^    ^
name|SourceRange
name|getAttrOperandParensRange
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|hasAttrOperand
argument_list|()
argument_list|)
block|;
return|return
name|getLocalData
argument_list|()
operator|->
name|OperandParens
return|;
block|}
name|void
name|setAttrOperandParensRange
argument_list|(
argument|SourceRange range
argument_list|)
block|{
name|assert
argument_list|(
name|hasAttrOperand
argument_list|()
argument_list|)
block|;
name|getLocalData
argument_list|()
operator|->
name|OperandParens
operator|=
name|range
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
comment|// Note that this does *not* include the range of the attribute
comment|// enclosure, e.g.:
comment|//    __attribute__((foo(bar)))
comment|//    ^~~~~~~~~~~~~~~        ~~
comment|// or
comment|//    [[foo(bar)]]
comment|//    ^~        ~~
comment|// That enclosure doesn't necessarily belong to a single attribute
comment|// anyway.
name|SourceRange
name|range
argument_list|(
name|getAttrNameLoc
argument_list|()
argument_list|)
block|;
if|if
condition|(
name|hasAttrOperand
argument_list|()
condition|)
name|range
operator|.
name|setEnd
argument_list|(
name|getAttrOperandParensRange
argument_list|()
operator|.
name|getEnd
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|range
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation loc
argument_list|)
block|{
name|setAttrNameLoc
argument_list|(
name|loc
argument_list|)
block|;
if|if
condition|(
name|hasAttrExprOperand
argument_list|()
condition|)
block|{
name|setAttrOperandParensRange
argument_list|(
name|SourceRange
argument_list|(
name|loc
argument_list|)
argument_list|)
expr_stmt|;
name|setAttrExprOperand
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasAttrEnumOperand
argument_list|()
condition|)
block|{
name|setAttrOperandParensRange
argument_list|(
name|SourceRange
argument_list|(
name|loc
argument_list|)
argument_list|)
expr_stmt|;
name|setAttrEnumOperandLoc
argument_list|(
name|loc
argument_list|)
expr_stmt|;
block|}
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getModifiedType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|ObjCProtocolListLocInfo
block|{
name|SourceLocation
name|LAngleLoc
block|;
name|SourceLocation
name|RAngleLoc
block|;
name|bool
name|HasBaseTypeAsWritten
block|; }
block|;
comment|// A helper class for defining ObjC TypeLocs that can qualified with
comment|// protocols.
comment|//
comment|// TypeClass basically has to be either ObjCInterfaceType or
comment|// ObjCObjectPointerType.
name|class
name|ObjCObjectTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|ObjCObjectTypeLoc
block|,
name|ObjCObjectType
block|,
name|ObjCProtocolListLocInfo
operator|>
block|{
comment|// SourceLocations are stored after Info, one for each Protocol.
name|SourceLocation
operator|*
name|getProtocolLocArray
argument_list|()
specifier|const
block|{
return|return
operator|(
name|SourceLocation
operator|*
operator|)
name|this
operator|->
name|getExtraLocalData
argument_list|()
return|;
block|}
name|public
operator|:
name|SourceLocation
name|getLAngleLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LAngleLoc
return|;
block|}
name|void
name|setLAngleLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LAngleLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRAngleLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RAngleLoc
return|;
block|}
name|void
name|setRAngleLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RAngleLoc
operator|=
name|Loc
block|;   }
name|unsigned
name|getNumProtocols
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getTypePtr
argument_list|()
operator|->
name|getNumProtocols
argument_list|()
return|;
block|}
name|SourceLocation
name|getProtocolLoc
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumProtocols
argument_list|()
operator|&&
literal|"Index is out of bounds!"
argument_list|)
block|;
return|return
name|getProtocolLocArray
argument_list|()
index|[
name|i
index|]
return|;
block|}
name|void
name|setProtocolLoc
argument_list|(
argument|unsigned i
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumProtocols
argument_list|()
operator|&&
literal|"Index is out of bounds!"
argument_list|)
block|;
name|getProtocolLocArray
argument_list|()
index|[
name|i
index|]
operator|=
name|Loc
block|;   }
name|ObjCProtocolDecl
operator|*
name|getProtocol
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|getNumProtocols
argument_list|()
operator|&&
literal|"Index is out of bounds!"
argument_list|)
block|;
return|return
operator|*
operator|(
name|this
operator|->
name|getTypePtr
argument_list|()
operator|->
name|qual_begin
argument_list|()
operator|+
name|i
operator|)
return|;
block|}
name|bool
name|hasBaseTypeAsWritten
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|HasBaseTypeAsWritten
return|;
block|}
name|void
name|setHasBaseTypeAsWritten
argument_list|(
argument|bool HasBaseType
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|HasBaseTypeAsWritten
operator|=
name|HasBaseType
block|;   }
name|TypeLoc
name|getBaseLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLAngleLoc
argument_list|()
argument_list|,
name|getRAngleLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setHasBaseTypeAsWritten
argument_list|(
name|true
argument_list|)
block|;
name|setLAngleLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setRAngleLoc
argument_list|(
name|Loc
argument_list|)
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|getNumProtocols
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|setProtocolLoc
argument_list|(
name|i
argument_list|,
name|Loc
argument_list|)
expr_stmt|;
block|}
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getNumProtocols
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|SourceLocation
argument_list|)
return|;
block|}
name|unsigned
name|getExtraLocalDataAlignment
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|alignOf
operator|<
name|SourceLocation
operator|>
operator|(
operator|)
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getBaseType
argument_list|()
return|;
block|}
expr|}
block|;   struct
name|ObjCInterfaceLocInfo
block|{
name|SourceLocation
name|NameLoc
block|;
name|SourceLocation
name|NameEndLoc
block|; }
block|;
comment|/// \brief Wrapper for source info for ObjC interfaces.
name|class
name|ObjCInterfaceTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|ObjCObjectTypeLoc
block|,
name|ObjCInterfaceTypeLoc
block|,
name|ObjCInterfaceType
block|,
name|ObjCInterfaceLocInfo
operator|>
block|{
name|public
operator|:
name|ObjCInterfaceDecl
operator|*
name|getIFaceDecl
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getDecl
argument_list|()
return|;
block|}
name|SourceLocation
name|getNameLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|NameLoc
return|;
block|}
name|void
name|setNameLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|NameLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getNameLoc
argument_list|()
argument_list|,
name|getNameEndLoc
argument_list|()
argument_list|)
return|;
block|}
name|SourceLocation
name|getNameEndLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|NameEndLoc
return|;
block|}
name|void
name|setNameEndLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|NameEndLoc
operator|=
name|Loc
block|;   }
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setNameLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setNameEndLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
expr|}
block|;  struct
name|ParenLocInfo
block|{
name|SourceLocation
name|LParenLoc
block|;
name|SourceLocation
name|RParenLoc
block|; }
block|;
name|class
name|ParenTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|ParenTypeLoc
block|,
name|ParenType
block|,
name|ParenLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getLParenLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
return|;
block|}
name|SourceLocation
name|getRParenLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
return|;
block|}
name|void
name|setLParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
operator|=
name|Loc
block|;   }
name|void
name|setRParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLParenLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setLParenLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setRParenLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
name|TypeLoc
name|getInnerLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getTypePtr
argument_list|()
operator|->
name|getInnerType
argument_list|()
return|;
block|}
expr|}
block|;
specifier|inline
name|TypeLoc
name|TypeLoc
operator|::
name|IgnoreParens
argument_list|()
specifier|const
block|{
if|if
condition|(
name|ParenTypeLoc
operator|::
name|isKind
argument_list|(
operator|*
name|this
argument_list|)
condition|)
return|return
name|IgnoreParensImpl
argument_list|(
operator|*
name|this
argument_list|)
return|;
return|return
operator|*
name|this
return|;
block|}
expr|struct
name|AdjustedLocInfo
block|{ }
block|;
comment|// Nothing.
name|class
name|AdjustedTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|AdjustedTypeLoc
block|,
name|AdjustedType
block|,
name|AdjustedLocInfo
operator|>
block|{
name|public
operator|:
name|TypeLoc
name|getOriginalLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
comment|// do nothing
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
comment|// The inner type is the undecayed type, since that's what we have source
comment|// location information for.
return|return
name|getTypePtr
argument_list|()
operator|->
name|getOriginalType
argument_list|()
return|;
block|}
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|()
return|;
block|}
name|unsigned
name|getLocalDataSize
argument_list|()
specifier|const
block|{
comment|// sizeof(AdjustedLocInfo) is 1, but we don't need its address to be unique
comment|// anyway.  TypeLocBuilder can't handle data sizes of 1.
return|return
literal|0
return|;
comment|// No data.
block|}
expr|}
block|;
comment|/// \brief Wrapper for source info for pointers decayed from arrays and
comment|/// functions.
name|class
name|DecayedTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|AdjustedTypeLoc
block|,
name|DecayedTypeLoc
block|,
name|DecayedType
operator|>
block|{ }
block|;  struct
name|PointerLikeLocInfo
block|{
name|SourceLocation
name|StarLoc
block|; }
block|;
comment|/// A base class for
name|template
operator|<
name|class
name|Derived
block|,
name|class
name|TypeClass
block|,
name|class
name|LocalData
operator|=
name|PointerLikeLocInfo
operator|>
name|class
name|PointerLikeTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|Derived
block|,
name|TypeClass
block|,
name|LocalData
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getSigilLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|StarLoc
return|;
block|}
name|void
name|setSigilLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|StarLoc
operator|=
name|Loc
block|;   }
name|TypeLoc
name|getPointeeLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getSigilLoc
argument_list|()
argument_list|,
name|getSigilLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setSigilLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getTypePtr
argument_list|()
operator|->
name|getPointeeType
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// \brief Wrapper for source info for pointers.
name|class
name|PointerTypeLoc
operator|:
name|public
name|PointerLikeTypeLoc
operator|<
name|PointerTypeLoc
block|,
name|PointerType
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getStarLoc
argument_list|()
specifier|const
block|{
return|return
name|getSigilLoc
argument_list|()
return|;
block|}
name|void
name|setStarLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|setSigilLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
expr|}
block|;
comment|/// \brief Wrapper for source info for block pointers.
name|class
name|BlockPointerTypeLoc
operator|:
name|public
name|PointerLikeTypeLoc
operator|<
name|BlockPointerTypeLoc
block|,
name|BlockPointerType
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getCaretLoc
argument_list|()
specifier|const
block|{
return|return
name|getSigilLoc
argument_list|()
return|;
block|}
name|void
name|setCaretLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|setSigilLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
expr|}
block|;  struct
name|MemberPointerLocInfo
operator|:
name|public
name|PointerLikeLocInfo
block|{
name|TypeSourceInfo
operator|*
name|ClassTInfo
block|; }
block|;
comment|/// \brief Wrapper for source info for member pointers.
name|class
name|MemberPointerTypeLoc
operator|:
name|public
name|PointerLikeTypeLoc
operator|<
name|MemberPointerTypeLoc
block|,
name|MemberPointerType
block|,
name|MemberPointerLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getStarLoc
argument_list|()
specifier|const
block|{
return|return
name|getSigilLoc
argument_list|()
return|;
block|}
name|void
name|setStarLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|setSigilLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
specifier|const
name|Type
operator|*
name|getClass
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getClass
argument_list|()
return|;
block|}
name|TypeSourceInfo
operator|*
name|getClassTInfo
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|ClassTInfo
return|;
block|}
name|void
name|setClassTInfo
argument_list|(
argument|TypeSourceInfo* TI
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|ClassTInfo
operator|=
name|TI
block|;   }
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setSigilLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setClassTInfo
argument_list|(
name|nullptr
argument_list|)
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
if|if
condition|(
name|TypeSourceInfo
modifier|*
name|TI
init|=
name|getClassTInfo
argument_list|()
condition|)
return|return
name|SourceRange
argument_list|(
name|TI
operator|->
name|getTypeLoc
argument_list|()
operator|.
name|getBeginLoc
argument_list|()
argument_list|,
name|getStarLoc
argument_list|()
argument_list|)
return|;
else|else
return|return
name|SourceRange
argument_list|(
name|getStarLoc
argument_list|()
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// Wraps an ObjCPointerType with source location information.
name|class
name|ObjCObjectPointerTypeLoc
operator|:
name|public
name|PointerLikeTypeLoc
operator|<
name|ObjCObjectPointerTypeLoc
block|,
name|ObjCObjectPointerType
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getStarLoc
argument_list|()
specifier|const
block|{
return|return
name|getSigilLoc
argument_list|()
return|;
block|}
name|void
name|setStarLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|setSigilLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
expr|}
block|;
name|class
name|ReferenceTypeLoc
operator|:
name|public
name|PointerLikeTypeLoc
operator|<
name|ReferenceTypeLoc
block|,
name|ReferenceType
operator|>
block|{
name|public
operator|:
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getPointeeTypeAsWritten
argument_list|()
return|;
block|}
expr|}
block|;
name|class
name|LValueReferenceTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|ReferenceTypeLoc
block|,
name|LValueReferenceTypeLoc
block|,
name|LValueReferenceType
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getAmpLoc
argument_list|()
specifier|const
block|{
return|return
name|getSigilLoc
argument_list|()
return|;
block|}
name|void
name|setAmpLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|setSigilLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
expr|}
block|;
name|class
name|RValueReferenceTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|ReferenceTypeLoc
block|,
name|RValueReferenceTypeLoc
block|,
name|RValueReferenceType
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getAmpAmpLoc
argument_list|()
specifier|const
block|{
return|return
name|getSigilLoc
argument_list|()
return|;
block|}
name|void
name|setAmpAmpLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|setSigilLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
expr|}
block|;   struct
name|FunctionLocInfo
block|{
name|SourceLocation
name|LocalRangeBegin
block|;
name|SourceLocation
name|LParenLoc
block|;
name|SourceLocation
name|RParenLoc
block|;
name|SourceLocation
name|LocalRangeEnd
block|; }
block|;
comment|/// \brief Wrapper for source info for functions.
name|class
name|FunctionTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|FunctionTypeLoc
block|,
name|FunctionType
block|,
name|FunctionLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getLocalRangeBegin
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|LocalRangeBegin
return|;
block|}
name|void
name|setLocalRangeBegin
argument_list|(
argument|SourceLocation L
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|LocalRangeBegin
operator|=
name|L
block|;   }
name|SourceLocation
name|getLocalRangeEnd
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|LocalRangeEnd
return|;
block|}
name|void
name|setLocalRangeEnd
argument_list|(
argument|SourceLocation L
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|LocalRangeEnd
operator|=
name|L
block|;   }
name|SourceLocation
name|getLParenLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
return|;
block|}
name|void
name|setLParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRParenLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
return|;
block|}
name|void
name|setRParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getParensRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLParenLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
name|ArrayRef
operator|<
name|ParmVarDecl
operator|*
operator|>
name|getParams
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|makeArrayRef
argument_list|(
name|getParmArray
argument_list|()
argument_list|,
name|getNumParams
argument_list|()
argument_list|)
return|;
block|}
comment|// ParmVarDecls* are stored after Info, one for each parameter.
name|ParmVarDecl
operator|*
operator|*
name|getParmArray
argument_list|()
specifier|const
block|{
return|return
operator|(
name|ParmVarDecl
operator|*
operator|*
operator|)
name|getExtraLocalData
argument_list|()
return|;
block|}
name|unsigned
name|getNumParams
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isa
operator|<
name|FunctionNoProtoType
operator|>
operator|(
name|getTypePtr
argument_list|()
operator|)
condition|)
return|return
literal|0
return|;
return|return
name|cast
operator|<
name|FunctionProtoType
operator|>
operator|(
name|getTypePtr
argument_list|()
operator|)
operator|->
name|getNumParams
argument_list|()
return|;
block|}
name|ParmVarDecl
operator|*
name|getParam
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
return|return
name|getParmArray
argument_list|()
index|[
name|i
index|]
return|;
block|}
name|void
name|setParam
argument_list|(
argument|unsigned i
argument_list|,
argument|ParmVarDecl *VD
argument_list|)
block|{
name|getParmArray
argument_list|()
index|[
name|i
index|]
operator|=
name|VD
block|; }
name|TypeLoc
name|getReturnLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLocalRangeBegin
argument_list|()
argument_list|,
name|getLocalRangeEnd
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setLocalRangeBegin
argument_list|(
name|Loc
argument_list|)
block|;
name|setLParenLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setRParenLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setLocalRangeEnd
argument_list|(
name|Loc
argument_list|)
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|getNumParams
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|setParam
argument_list|(
name|i
argument_list|,
name|nullptr
argument_list|)
expr_stmt|;
block|}
comment|/// \brief Returns the size of the type source info data block that is
comment|/// specific to this type.
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
name|getNumParams
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|ParmVarDecl
operator|*
argument_list|)
return|;
block|}
name|unsigned
name|getExtraLocalDataAlignment
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|alignOf
operator|<
name|ParmVarDecl
operator|*
operator|>
operator|(
operator|)
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getReturnType
argument_list|()
return|;
block|}
expr|}
block|;
name|class
name|FunctionProtoTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|FunctionTypeLoc
block|,
name|FunctionProtoTypeLoc
block|,
name|FunctionProtoType
operator|>
block|{ }
block|;
name|class
name|FunctionNoProtoTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|FunctionTypeLoc
block|,
name|FunctionNoProtoTypeLoc
block|,
name|FunctionNoProtoType
operator|>
block|{ }
block|;   struct
name|ArrayLocInfo
block|{
name|SourceLocation
name|LBracketLoc
block|,
name|RBracketLoc
block|;
name|Expr
operator|*
name|Size
block|; }
block|;
comment|/// \brief Wrapper for source info for arrays.
name|class
name|ArrayTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|ArrayTypeLoc
block|,
name|ArrayType
block|,
name|ArrayLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getLBracketLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|LBracketLoc
return|;
block|}
name|void
name|setLBracketLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|LBracketLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRBracketLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|RBracketLoc
return|;
block|}
name|void
name|setRBracketLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|RBracketLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getBracketsRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLBracketLoc
argument_list|()
argument_list|,
name|getRBracketLoc
argument_list|()
argument_list|)
return|;
block|}
name|Expr
operator|*
name|getSizeExpr
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|Size
return|;
block|}
name|void
name|setSizeExpr
argument_list|(
argument|Expr *Size
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|Size
operator|=
name|Size
block|;   }
name|TypeLoc
name|getElementLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLBracketLoc
argument_list|()
argument_list|,
name|getRBracketLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setLBracketLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setRBracketLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setSizeExpr
argument_list|(
name|nullptr
argument_list|)
block|;   }
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getElementType
argument_list|()
return|;
block|}
expr|}
block|;
name|class
name|ConstantArrayTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|ArrayTypeLoc
block|,
name|ConstantArrayTypeLoc
block|,
name|ConstantArrayType
operator|>
block|{ }
block|;
name|class
name|IncompleteArrayTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|ArrayTypeLoc
block|,
name|IncompleteArrayTypeLoc
block|,
name|IncompleteArrayType
operator|>
block|{ }
block|;
name|class
name|DependentSizedArrayTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|ArrayTypeLoc
block|,
name|DependentSizedArrayTypeLoc
block|,
name|DependentSizedArrayType
operator|>
block|{  }
block|;
name|class
name|VariableArrayTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|ArrayTypeLoc
block|,
name|VariableArrayTypeLoc
block|,
name|VariableArrayType
operator|>
block|{ }
block|;
comment|// Location information for a TemplateName.  Rudimentary for now.
block|struct
name|TemplateNameLocInfo
block|{
name|SourceLocation
name|NameLoc
block|; }
block|;  struct
name|TemplateSpecializationLocInfo
operator|:
name|TemplateNameLocInfo
block|{
name|SourceLocation
name|TemplateKWLoc
block|;
name|SourceLocation
name|LAngleLoc
block|;
name|SourceLocation
name|RAngleLoc
block|; }
block|;
name|class
name|TemplateSpecializationTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|TemplateSpecializationTypeLoc
block|,
name|TemplateSpecializationType
block|,
name|TemplateSpecializationLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getTemplateKeywordLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|TemplateKWLoc
return|;
block|}
name|void
name|setTemplateKeywordLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|TemplateKWLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getLAngleLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|LAngleLoc
return|;
block|}
name|void
name|setLAngleLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|LAngleLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRAngleLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|RAngleLoc
return|;
block|}
name|void
name|setRAngleLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|RAngleLoc
operator|=
name|Loc
block|;   }
name|unsigned
name|getNumArgs
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getNumArgs
argument_list|()
return|;
block|}
name|void
name|setArgLocInfo
argument_list|(
argument|unsigned i
argument_list|,
argument|TemplateArgumentLocInfo AI
argument_list|)
block|{
name|getArgInfos
argument_list|()
index|[
name|i
index|]
operator|=
name|AI
block|;   }
name|TemplateArgumentLocInfo
name|getArgLocInfo
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
return|return
name|getArgInfos
argument_list|()
index|[
name|i
index|]
return|;
block|}
name|TemplateArgumentLoc
name|getArgLoc
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
return|return
name|TemplateArgumentLoc
argument_list|(
name|getTypePtr
argument_list|()
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
argument_list|,
name|getArgLocInfo
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
name|SourceLocation
name|getTemplateNameLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|NameLoc
return|;
block|}
name|void
name|setTemplateNameLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|NameLoc
operator|=
name|Loc
block|;   }
comment|/// \brief - Copy the location information from the given info.
name|void
name|copy
argument_list|(
argument|TemplateSpecializationTypeLoc Loc
argument_list|)
block|{
name|unsigned
name|size
operator|=
name|getFullDataSize
argument_list|()
block|;
name|assert
argument_list|(
name|size
operator|==
name|Loc
operator|.
name|getFullDataSize
argument_list|()
argument_list|)
block|;
comment|// We're potentially copying Expr references here.  We don't
comment|// bother retaining them because TypeSourceInfos live forever, so
comment|// as long as the Expr was retained when originally written into
comment|// the TypeLoc, we're okay.
name|memcpy
argument_list|(
name|Data
argument_list|,
name|Loc
operator|.
name|Data
argument_list|,
name|size
argument_list|)
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getTemplateKeywordLoc
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|SourceRange
argument_list|(
name|getTemplateKeywordLoc
argument_list|()
argument_list|,
name|getRAngleLoc
argument_list|()
argument_list|)
return|;
else|else
return|return
name|SourceRange
argument_list|(
name|getTemplateNameLoc
argument_list|()
argument_list|,
name|getRAngleLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setTemplateKeywordLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setTemplateNameLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setLAngleLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setRAngleLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|initializeArgLocs
argument_list|(
name|Context
argument_list|,
name|getNumArgs
argument_list|()
argument_list|,
name|getTypePtr
argument_list|()
operator|->
name|getArgs
argument_list|()
argument_list|,
name|getArgInfos
argument_list|()
argument_list|,
name|Loc
argument_list|)
block|;   }
specifier|static
name|void
name|initializeArgLocs
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|unsigned NumArgs
argument_list|,
argument|const TemplateArgument *Args
argument_list|,
argument|TemplateArgumentLocInfo *ArgInfos
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|;
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
name|getNumArgs
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|TemplateArgumentLocInfo
argument_list|)
return|;
block|}
name|unsigned
name|getExtraLocalDataAlignment
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|alignOf
operator|<
name|TemplateArgumentLocInfo
operator|>
operator|(
operator|)
return|;
block|}
name|private
operator|:
name|TemplateArgumentLocInfo
operator|*
name|getArgInfos
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|TemplateArgumentLocInfo
operator|*
operator|>
operator|(
name|getExtraLocalData
argument_list|()
operator|)
return|;
block|}
expr|}
block|;
comment|//===----------------------------------------------------------------------===//
comment|//
comment|//  All of these need proper implementations.
comment|//
comment|//===----------------------------------------------------------------------===//
comment|// FIXME: size expression and attribute locations (or keyword if we
comment|// ever fully support altivec syntax).
name|class
name|VectorTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|VectorTypeLoc
block|,
name|VectorType
operator|>
block|{ }
block|;
comment|// FIXME: size expression and attribute locations.
name|class
name|ExtVectorTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|VectorTypeLoc
block|,
name|ExtVectorTypeLoc
block|,
name|ExtVectorType
operator|>
block|{ }
block|;
comment|// FIXME: attribute locations.
comment|// For some reason, this isn't a subtype of VectorType.
name|class
name|DependentSizedExtVectorTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|DependentSizedExtVectorTypeLoc
block|,
name|DependentSizedExtVectorType
operator|>
block|{ }
block|;
comment|// FIXME: location of the '_Complex' keyword.
name|class
name|ComplexTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|ComplexTypeLoc
block|,
name|ComplexType
operator|>
block|{ }
block|;  struct
name|TypeofLocInfo
block|{
name|SourceLocation
name|TypeofLoc
block|;
name|SourceLocation
name|LParenLoc
block|;
name|SourceLocation
name|RParenLoc
block|; }
block|;  struct
name|TypeOfExprTypeLocInfo
operator|:
name|public
name|TypeofLocInfo
block|{ }
block|;  struct
name|TypeOfTypeLocInfo
operator|:
name|public
name|TypeofLocInfo
block|{
name|TypeSourceInfo
operator|*
name|UnderlyingTInfo
block|; }
block|;
name|template
operator|<
name|class
name|Derived
block|,
name|class
name|TypeClass
block|,
name|class
name|LocalData
operator|=
name|TypeofLocInfo
operator|>
name|class
name|TypeofLikeTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|Derived
block|,
name|TypeClass
block|,
name|LocalData
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getTypeofLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|TypeofLoc
return|;
block|}
name|void
name|setTypeofLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|TypeofLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getLParenLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
return|;
block|}
name|void
name|setLParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRParenLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
return|;
block|}
name|void
name|setRParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getParensRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLParenLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|setParensRange
argument_list|(
argument|SourceRange range
argument_list|)
block|{
name|setLParenLoc
argument_list|(
name|range
operator|.
name|getBegin
argument_list|()
argument_list|)
block|;
name|setRParenLoc
argument_list|(
name|range
operator|.
name|getEnd
argument_list|()
argument_list|)
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getTypeofLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setTypeofLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setLParenLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setRParenLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
expr|}
block|;
name|class
name|TypeOfExprTypeLoc
operator|:
name|public
name|TypeofLikeTypeLoc
operator|<
name|TypeOfExprTypeLoc
block|,
name|TypeOfExprType
block|,
name|TypeOfExprTypeLocInfo
operator|>
block|{
name|public
operator|:
name|Expr
operator|*
name|getUnderlyingExpr
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getUnderlyingExpr
argument_list|()
return|;
block|}
comment|// Reimplemented to account for GNU/C++ extension
comment|//     typeof unary-expression
comment|// where there are no parentheses.
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|; }
block|;
name|class
name|TypeOfTypeLoc
operator|:
name|public
name|TypeofLikeTypeLoc
operator|<
name|TypeOfTypeLoc
block|,
name|TypeOfType
block|,
name|TypeOfTypeLocInfo
operator|>
block|{
name|public
operator|:
name|QualType
name|getUnderlyingType
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getTypePtr
argument_list|()
operator|->
name|getUnderlyingType
argument_list|()
return|;
block|}
name|TypeSourceInfo
operator|*
name|getUnderlyingTInfo
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|UnderlyingTInfo
return|;
block|}
name|void
name|setUnderlyingTInfo
argument_list|(
argument|TypeSourceInfo* TI
argument_list|)
specifier|const
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|UnderlyingTInfo
operator|=
name|TI
block|;   }
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|; }
block|;
comment|// FIXME: location of the 'decltype' and parens.
name|class
name|DecltypeTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|DecltypeTypeLoc
block|,
name|DecltypeType
operator|>
block|{
name|public
operator|:
name|Expr
operator|*
name|getUnderlyingExpr
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getUnderlyingExpr
argument_list|()
return|;
block|}
expr|}
block|;  struct
name|UnaryTransformTypeLocInfo
block|{
comment|// FIXME: While there's only one unary transform right now, future ones may
comment|// need different representations
name|SourceLocation
name|KWLoc
block|,
name|LParenLoc
block|,
name|RParenLoc
block|;
name|TypeSourceInfo
operator|*
name|UnderlyingTInfo
block|; }
block|;
name|class
name|UnaryTransformTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|UnaryTransformTypeLoc
block|,
name|UnaryTransformType
block|,
name|UnaryTransformTypeLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getKWLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|KWLoc
return|;
block|}
name|void
name|setKWLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|KWLoc
operator|=
name|Loc
block|; }
name|SourceLocation
name|getLParenLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
return|;
block|}
name|void
name|setLParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
operator|=
name|Loc
block|; }
name|SourceLocation
name|getRParenLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
return|;
block|}
name|void
name|setRParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
operator|=
name|Loc
block|; }
name|TypeSourceInfo
operator|*
name|getUnderlyingTInfo
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|UnderlyingTInfo
return|;
block|}
name|void
name|setUnderlyingTInfo
argument_list|(
argument|TypeSourceInfo *TInfo
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|UnderlyingTInfo
operator|=
name|TInfo
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getKWLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
name|SourceRange
name|getParensRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLParenLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|setParensRange
argument_list|(
argument|SourceRange Range
argument_list|)
block|{
name|setLParenLoc
argument_list|(
name|Range
operator|.
name|getBegin
argument_list|()
argument_list|)
block|;
name|setRParenLoc
argument_list|(
name|Range
operator|.
name|getEnd
argument_list|()
argument_list|)
block|;   }
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setKWLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setRParenLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setLParenLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
expr|}
block|;
name|class
name|AutoTypeLoc
operator|:
name|public
name|InheritingConcreteTypeLoc
operator|<
name|TypeSpecTypeLoc
block|,
name|AutoTypeLoc
block|,
name|AutoType
operator|>
block|{ }
block|;  struct
name|ElaboratedLocInfo
block|{
name|SourceLocation
name|ElaboratedKWLoc
block|;
comment|/// \brief Data associated with the nested-name-specifier location.
name|void
operator|*
name|QualifierData
block|; }
block|;
name|class
name|ElaboratedTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|ElaboratedTypeLoc
block|,
name|ElaboratedType
block|,
name|ElaboratedLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getElaboratedKeywordLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|ElaboratedKWLoc
return|;
block|}
name|void
name|setElaboratedKeywordLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|ElaboratedKWLoc
operator|=
name|Loc
block|;   }
name|NestedNameSpecifierLoc
name|getQualifierLoc
argument_list|()
specifier|const
block|{
return|return
name|NestedNameSpecifierLoc
argument_list|(
name|getTypePtr
argument_list|()
operator|->
name|getQualifier
argument_list|()
argument_list|,
name|getLocalData
argument_list|()
operator|->
name|QualifierData
argument_list|)
return|;
block|}
name|void
name|setQualifierLoc
argument_list|(
argument|NestedNameSpecifierLoc QualifierLoc
argument_list|)
block|{
name|assert
argument_list|(
name|QualifierLoc
operator|.
name|getNestedNameSpecifier
argument_list|()
operator|==
name|getTypePtr
argument_list|()
operator|->
name|getQualifier
argument_list|()
operator|&&
literal|"Inconsistent nested-name-specifier pointer"
argument_list|)
block|;
name|getLocalData
argument_list|()
operator|->
name|QualifierData
operator|=
name|QualifierLoc
operator|.
name|getOpaqueData
argument_list|()
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getElaboratedKeywordLoc
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
if|if
condition|(
name|getQualifierLoc
argument_list|()
condition|)
return|return
name|SourceRange
argument_list|(
name|getElaboratedKeywordLoc
argument_list|()
argument_list|,
name|getQualifierLoc
argument_list|()
operator|.
name|getEndLoc
argument_list|()
argument_list|)
return|;
else|else
return|return
name|SourceRange
argument_list|(
name|getElaboratedKeywordLoc
argument_list|()
argument_list|)
return|;
else|else
return|return
name|getQualifierLoc
argument_list|()
operator|.
name|getSourceRange
argument_list|()
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|;
name|TypeLoc
name|getNamedTypeLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getNamedType
argument_list|()
return|;
block|}
name|void
name|copy
argument_list|(
argument|ElaboratedTypeLoc Loc
argument_list|)
block|{
name|unsigned
name|size
operator|=
name|getFullDataSize
argument_list|()
block|;
name|assert
argument_list|(
name|size
operator|==
name|Loc
operator|.
name|getFullDataSize
argument_list|()
argument_list|)
block|;
name|memcpy
argument_list|(
name|Data
argument_list|,
name|Loc
operator|.
name|Data
argument_list|,
name|size
argument_list|)
block|;   }
expr|}
block|;
comment|// This is exactly the structure of an ElaboratedTypeLoc whose inner
comment|// type is some sort of TypeDeclTypeLoc.
block|struct
name|DependentNameLocInfo
operator|:
name|ElaboratedLocInfo
block|{
name|SourceLocation
name|NameLoc
block|; }
block|;
name|class
name|DependentNameTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|DependentNameTypeLoc
block|,
name|DependentNameType
block|,
name|DependentNameLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getElaboratedKeywordLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|ElaboratedKWLoc
return|;
block|}
name|void
name|setElaboratedKeywordLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|ElaboratedKWLoc
operator|=
name|Loc
block|;   }
name|NestedNameSpecifierLoc
name|getQualifierLoc
argument_list|()
specifier|const
block|{
return|return
name|NestedNameSpecifierLoc
argument_list|(
name|getTypePtr
argument_list|()
operator|->
name|getQualifier
argument_list|()
argument_list|,
name|getLocalData
argument_list|()
operator|->
name|QualifierData
argument_list|)
return|;
block|}
name|void
name|setQualifierLoc
argument_list|(
argument|NestedNameSpecifierLoc QualifierLoc
argument_list|)
block|{
name|assert
argument_list|(
name|QualifierLoc
operator|.
name|getNestedNameSpecifier
argument_list|()
operator|==
name|getTypePtr
argument_list|()
operator|->
name|getQualifier
argument_list|()
operator|&&
literal|"Inconsistent nested-name-specifier pointer"
argument_list|)
block|;
name|getLocalData
argument_list|()
operator|->
name|QualifierData
operator|=
name|QualifierLoc
operator|.
name|getOpaqueData
argument_list|()
block|;   }
name|SourceLocation
name|getNameLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|NameLoc
return|;
block|}
name|void
name|setNameLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|NameLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getElaboratedKeywordLoc
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|SourceRange
argument_list|(
name|getElaboratedKeywordLoc
argument_list|()
argument_list|,
name|getNameLoc
argument_list|()
argument_list|)
return|;
else|else
return|return
name|SourceRange
argument_list|(
name|getQualifierLoc
argument_list|()
operator|.
name|getBeginLoc
argument_list|()
argument_list|,
name|getNameLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|copy
argument_list|(
argument|DependentNameTypeLoc Loc
argument_list|)
block|{
name|unsigned
name|size
operator|=
name|getFullDataSize
argument_list|()
block|;
name|assert
argument_list|(
name|size
operator|==
name|Loc
operator|.
name|getFullDataSize
argument_list|()
argument_list|)
block|;
name|memcpy
argument_list|(
name|Data
argument_list|,
name|Loc
operator|.
name|Data
argument_list|,
name|size
argument_list|)
block|;   }
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|; }
block|;  struct
name|DependentTemplateSpecializationLocInfo
operator|:
name|DependentNameLocInfo
block|{
name|SourceLocation
name|TemplateKWLoc
block|;
name|SourceLocation
name|LAngleLoc
block|;
name|SourceLocation
name|RAngleLoc
block|;
comment|// followed by a TemplateArgumentLocInfo[]
block|}
block|;
name|class
name|DependentTemplateSpecializationTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|DependentTemplateSpecializationTypeLoc
block|,
name|DependentTemplateSpecializationType
block|,
name|DependentTemplateSpecializationLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getElaboratedKeywordLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|ElaboratedKWLoc
return|;
block|}
name|void
name|setElaboratedKeywordLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|ElaboratedKWLoc
operator|=
name|Loc
block|;   }
name|NestedNameSpecifierLoc
name|getQualifierLoc
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|getLocalData
argument_list|()
operator|->
name|QualifierData
condition|)
return|return
name|NestedNameSpecifierLoc
argument_list|()
return|;
return|return
name|NestedNameSpecifierLoc
argument_list|(
name|getTypePtr
argument_list|()
operator|->
name|getQualifier
argument_list|()
argument_list|,
name|getLocalData
argument_list|()
operator|->
name|QualifierData
argument_list|)
return|;
block|}
name|void
name|setQualifierLoc
argument_list|(
argument|NestedNameSpecifierLoc QualifierLoc
argument_list|)
block|{
if|if
condition|(
operator|!
name|QualifierLoc
condition|)
block|{
comment|// Even if we have a nested-name-specifier in the dependent
comment|// template specialization type, we won't record the nested-name-specifier
comment|// location information when this type-source location information is
comment|// part of a nested-name-specifier.
name|getLocalData
argument_list|()
operator|->
name|QualifierData
operator|=
name|nullptr
expr_stmt|;
return|return;
block|}
name|assert
argument_list|(
name|QualifierLoc
operator|.
name|getNestedNameSpecifier
argument_list|()
operator|==
name|getTypePtr
argument_list|()
operator|->
name|getQualifier
argument_list|()
operator|&&
literal|"Inconsistent nested-name-specifier pointer"
argument_list|)
expr_stmt|;
name|getLocalData
argument_list|()
operator|->
name|QualifierData
operator|=
name|QualifierLoc
operator|.
name|getOpaqueData
argument_list|()
block|;   }
name|SourceLocation
name|getTemplateKeywordLoc
argument_list|()
specifier|const
block|{
return|return
name|getLocalData
argument_list|()
operator|->
name|TemplateKWLoc
return|;
block|}
name|void
name|setTemplateKeywordLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|getLocalData
argument_list|()
operator|->
name|TemplateKWLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getTemplateNameLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|NameLoc
return|;
block|}
name|void
name|setTemplateNameLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|NameLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getLAngleLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LAngleLoc
return|;
block|}
name|void
name|setLAngleLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LAngleLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRAngleLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RAngleLoc
return|;
block|}
name|void
name|setRAngleLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RAngleLoc
operator|=
name|Loc
block|;   }
name|unsigned
name|getNumArgs
argument_list|()
specifier|const
block|{
return|return
name|getTypePtr
argument_list|()
operator|->
name|getNumArgs
argument_list|()
return|;
block|}
name|void
name|setArgLocInfo
argument_list|(
argument|unsigned i
argument_list|,
argument|TemplateArgumentLocInfo AI
argument_list|)
block|{
name|getArgInfos
argument_list|()
index|[
name|i
index|]
operator|=
name|AI
block|;   }
name|TemplateArgumentLocInfo
name|getArgLocInfo
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
return|return
name|getArgInfos
argument_list|()
index|[
name|i
index|]
return|;
block|}
name|TemplateArgumentLoc
name|getArgLoc
argument_list|(
argument|unsigned i
argument_list|)
specifier|const
block|{
return|return
name|TemplateArgumentLoc
argument_list|(
name|getTypePtr
argument_list|()
operator|->
name|getArg
argument_list|(
name|i
argument_list|)
argument_list|,
name|getArgLocInfo
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
if|if
condition|(
name|getElaboratedKeywordLoc
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|SourceRange
argument_list|(
name|getElaboratedKeywordLoc
argument_list|()
argument_list|,
name|getRAngleLoc
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|getQualifierLoc
argument_list|()
condition|)
return|return
name|SourceRange
argument_list|(
name|getQualifierLoc
argument_list|()
operator|.
name|getBeginLoc
argument_list|()
argument_list|,
name|getRAngleLoc
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|getTemplateKeywordLoc
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|SourceRange
argument_list|(
name|getTemplateKeywordLoc
argument_list|()
argument_list|,
name|getRAngleLoc
argument_list|()
argument_list|)
return|;
else|else
return|return
name|SourceRange
argument_list|(
name|getTemplateNameLoc
argument_list|()
argument_list|,
name|getRAngleLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|copy
argument_list|(
argument|DependentTemplateSpecializationTypeLoc Loc
argument_list|)
block|{
name|unsigned
name|size
operator|=
name|getFullDataSize
argument_list|()
block|;
name|assert
argument_list|(
name|size
operator|==
name|Loc
operator|.
name|getFullDataSize
argument_list|()
argument_list|)
block|;
name|memcpy
argument_list|(
name|Data
argument_list|,
name|Loc
operator|.
name|Data
argument_list|,
name|size
argument_list|)
block|;   }
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|;
name|unsigned
name|getExtraLocalDataSize
argument_list|()
specifier|const
block|{
return|return
name|getNumArgs
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|TemplateArgumentLocInfo
argument_list|)
return|;
block|}
name|unsigned
name|getExtraLocalDataAlignment
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|alignOf
operator|<
name|TemplateArgumentLocInfo
operator|>
operator|(
operator|)
return|;
block|}
name|private
operator|:
name|TemplateArgumentLocInfo
operator|*
name|getArgInfos
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|TemplateArgumentLocInfo
operator|*
operator|>
operator|(
name|getExtraLocalData
argument_list|()
operator|)
return|;
block|}
expr|}
block|;   struct
name|PackExpansionTypeLocInfo
block|{
name|SourceLocation
name|EllipsisLoc
block|; }
block|;
name|class
name|PackExpansionTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|PackExpansionTypeLoc
block|,
name|PackExpansionType
block|,
name|PackExpansionTypeLocInfo
operator|>
block|{
name|public
operator|:
name|SourceLocation
name|getEllipsisLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|EllipsisLoc
return|;
block|}
name|void
name|setEllipsisLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|EllipsisLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getEllipsisLoc
argument_list|()
argument_list|,
name|getEllipsisLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setEllipsisLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
name|TypeLoc
name|getPatternLoc
argument_list|()
specifier|const
block|{
return|return
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getTypePtr
argument_list|()
operator|->
name|getPattern
argument_list|()
return|;
block|}
expr|}
block|;  struct
name|AtomicTypeLocInfo
block|{
name|SourceLocation
name|KWLoc
block|,
name|LParenLoc
block|,
name|RParenLoc
block|; }
block|;
name|class
name|AtomicTypeLoc
operator|:
name|public
name|ConcreteTypeLoc
operator|<
name|UnqualTypeLoc
block|,
name|AtomicTypeLoc
block|,
name|AtomicType
block|,
name|AtomicTypeLocInfo
operator|>
block|{
name|public
operator|:
name|TypeLoc
name|getValueLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getInnerTypeLoc
argument_list|()
return|;
block|}
name|SourceRange
name|getLocalSourceRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getKWLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
name|SourceLocation
name|getKWLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|KWLoc
return|;
block|}
name|void
name|setKWLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|KWLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getLParenLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
return|;
block|}
name|void
name|setLParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|LParenLoc
operator|=
name|Loc
block|;   }
name|SourceLocation
name|getRParenLoc
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
return|;
block|}
name|void
name|setRParenLoc
argument_list|(
argument|SourceLocation Loc
argument_list|)
block|{
name|this
operator|->
name|getLocalData
argument_list|()
operator|->
name|RParenLoc
operator|=
name|Loc
block|;   }
name|SourceRange
name|getParensRange
argument_list|()
specifier|const
block|{
return|return
name|SourceRange
argument_list|(
name|getLParenLoc
argument_list|()
argument_list|,
name|getRParenLoc
argument_list|()
argument_list|)
return|;
block|}
name|void
name|setParensRange
argument_list|(
argument|SourceRange Range
argument_list|)
block|{
name|setLParenLoc
argument_list|(
name|Range
operator|.
name|getBegin
argument_list|()
argument_list|)
block|;
name|setRParenLoc
argument_list|(
name|Range
operator|.
name|getEnd
argument_list|()
argument_list|)
block|;   }
name|void
name|initializeLocal
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
name|setKWLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setLParenLoc
argument_list|(
name|Loc
argument_list|)
block|;
name|setRParenLoc
argument_list|(
name|Loc
argument_list|)
block|;   }
name|QualType
name|getInnerType
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|getTypePtr
argument_list|()
operator|->
name|getValueType
argument_list|()
return|;
block|}
expr|}
block|;   }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

