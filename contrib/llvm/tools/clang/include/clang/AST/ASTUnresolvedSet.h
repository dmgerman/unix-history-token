begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ASTUnresolvedSet.h - Unresolved sets of declarations  ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file provides an UnresolvedSet-like class, whose contents are
end_comment

begin_comment
comment|//  allocated using the allocator associated with an ASTContext.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_ASTUNRESOLVEDSET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_ASTUNRESOLVEDSET_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ASTVector.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/UnresolvedSet.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// \brief An UnresolvedSet-like class which uses the ASTContext's allocator.
name|class
name|ASTUnresolvedSet
block|{
typedef|typedef
name|ASTVector
operator|<
name|DeclAccessPair
operator|>
name|DeclsTy
expr_stmt|;
name|DeclsTy
name|Decls
decl_stmt|;
name|ASTUnresolvedSet
argument_list|(
argument|const ASTUnresolvedSet&
argument_list|)
name|LLVM_DELETED_FUNCTION
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|ASTUnresolvedSet
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
decl_stmt|;
name|public
label|:
name|ASTUnresolvedSet
argument_list|()
block|{}
name|ASTUnresolvedSet
argument_list|(
argument|ASTContext&C
argument_list|,
argument|unsigned N
argument_list|)
block|:
name|Decls
argument_list|(
argument|C
argument_list|,
argument|N
argument_list|)
block|{}
typedef|typedef
name|UnresolvedSetIterator
name|iterator
typedef|;
typedef|typedef
name|UnresolvedSetIterator
name|const_iterator
typedef|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|Decls
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|Decls
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|Decls
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|Decls
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|void
name|addDecl
parameter_list|(
name|ASTContext
modifier|&
name|C
parameter_list|,
name|NamedDecl
modifier|*
name|D
parameter_list|)
block|{
name|addDecl
argument_list|(
name|C
argument_list|,
name|D
argument_list|,
name|AS_none
argument_list|)
expr_stmt|;
block|}
name|void
name|addDecl
parameter_list|(
name|ASTContext
modifier|&
name|C
parameter_list|,
name|NamedDecl
modifier|*
name|D
parameter_list|,
name|AccessSpecifier
name|AS
parameter_list|)
block|{
name|Decls
operator|.
name|push_back
argument_list|(
name|DeclAccessPair
operator|::
name|make
argument_list|(
name|D
argument_list|,
name|AS
argument_list|)
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
comment|/// Replaces the given declaration with the new one, once.
comment|///
comment|/// \return true if the set changed
name|bool
name|replace
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|Old
parameter_list|,
name|NamedDecl
modifier|*
name|New
parameter_list|)
block|{
for|for
control|(
name|DeclsTy
operator|::
name|iterator
name|I
operator|=
name|Decls
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|Decls
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|I
operator|->
name|getDecl
argument_list|()
operator|==
name|Old
condition|)
return|return
operator|(
name|I
operator|->
name|setDecl
argument_list|(
name|New
argument_list|)
operator|,
name|true
operator|)
return|;
return|return
name|false
return|;
block|}
name|void
name|erase
parameter_list|(
name|unsigned
name|I
parameter_list|)
block|{
name|Decls
index|[
name|I
index|]
operator|=
name|Decls
operator|.
name|back
argument_list|()
expr_stmt|;
name|Decls
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|Decls
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Decls
operator|.
name|empty
argument_list|()
return|;
block|}
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Decls
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|reserve
parameter_list|(
name|ASTContext
modifier|&
name|C
parameter_list|,
name|unsigned
name|N
parameter_list|)
block|{
name|Decls
operator|.
name|reserve
argument_list|(
name|C
argument_list|,
name|N
argument_list|)
expr_stmt|;
block|}
name|void
name|append
parameter_list|(
name|ASTContext
modifier|&
name|C
parameter_list|,
name|iterator
name|I
parameter_list|,
name|iterator
name|E
parameter_list|)
block|{
name|Decls
operator|.
name|append
argument_list|(
name|C
argument_list|,
name|I
operator|.
name|ir
argument_list|,
name|E
operator|.
name|ir
argument_list|)
expr_stmt|;
block|}
name|DeclAccessPair
modifier|&
name|operator
function|[]
parameter_list|(
name|unsigned
name|I
parameter_list|)
block|{
return|return
name|Decls
index|[
name|I
index|]
return|;
block|}
specifier|const
name|DeclAccessPair
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
name|Decls
index|[
name|I
index|]
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

