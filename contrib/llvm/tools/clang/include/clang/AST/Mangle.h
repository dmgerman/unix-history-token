begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Mangle.h - Mangle C++ Names ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Defines the C++ name mangling interface.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_MANGLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_MANGLE_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/ABI.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|BlockDecl
decl_stmt|;
name|class
name|CXXConstructorDecl
decl_stmt|;
name|class
name|CXXDestructorDecl
decl_stmt|;
name|class
name|CXXMethodDecl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
name|class
name|ObjCMethodDecl
decl_stmt|;
name|class
name|StringLiteral
decl_stmt|;
struct_decl|struct
name|ThisAdjustment
struct_decl|;
struct_decl|struct
name|ThunkInfo
struct_decl|;
name|class
name|VarDecl
decl_stmt|;
comment|/// MangleContext - Context for tracking state which persists across multiple
comment|/// calls to the C++ name mangler.
name|class
name|MangleContext
block|{
name|public
label|:
enum|enum
name|ManglerKind
block|{
name|MK_Itanium
block|,
name|MK_Microsoft
block|}
enum|;
name|private
label|:
name|virtual
name|void
name|anchor
parameter_list|()
function_decl|;
name|ASTContext
modifier|&
name|Context
decl_stmt|;
name|DiagnosticsEngine
modifier|&
name|Diags
decl_stmt|;
specifier|const
name|ManglerKind
name|Kind
decl_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|BlockDecl
operator|*
operator|,
name|unsigned
operator|>
name|GlobalBlockIds
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|BlockDecl
operator|*
operator|,
name|unsigned
operator|>
name|LocalBlockIds
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|TagDecl
operator|*
operator|,
name|uint64_t
operator|>
name|AnonStructIds
expr_stmt|;
name|public
label|:
name|ManglerKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|explicit
name|MangleContext
argument_list|(
argument|ASTContext&Context
argument_list|,
argument|DiagnosticsEngine&Diags
argument_list|,
argument|ManglerKind Kind
argument_list|)
block|:
name|Context
argument_list|(
name|Context
argument_list|)
operator|,
name|Diags
argument_list|(
name|Diags
argument_list|)
operator|,
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|virtual
operator|~
name|MangleContext
argument_list|()
block|{ }
name|ASTContext
operator|&
name|getASTContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|DiagnosticsEngine
operator|&
name|getDiags
argument_list|()
specifier|const
block|{
return|return
name|Diags
return|;
block|}
name|virtual
name|void
name|startNewFunction
parameter_list|()
block|{
name|LocalBlockIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|unsigned
name|getBlockId
parameter_list|(
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|bool
name|Local
parameter_list|)
block|{
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|BlockDecl
operator|*
operator|,
name|unsigned
operator|>
operator|&
name|BlockIds
operator|=
name|Local
condition|?
name|LocalBlockIds
else|:
name|GlobalBlockIds
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|BlockDecl
operator|*
operator|,
name|unsigned
operator|>
operator|::
name|iterator
operator|,
name|bool
operator|>
name|Result
operator|=
name|BlockIds
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|BD
argument_list|,
name|BlockIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|first
operator|->
name|second
return|;
block|}
name|uint64_t
name|getAnonymousStructId
parameter_list|(
specifier|const
name|TagDecl
modifier|*
name|TD
parameter_list|)
block|{
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|TagDecl
operator|*
operator|,
name|uint64_t
operator|>
operator|::
name|iterator
operator|,
name|bool
operator|>
name|Result
operator|=
name|AnonStructIds
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|TD
argument_list|,
name|AnonStructIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|first
operator|->
name|second
return|;
block|}
comment|/// @name Mangler Entry Points
comment|/// @{
name|bool
name|shouldMangleDeclName
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|virtual
name|bool
name|shouldMangleCXXName
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|D
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|shouldMangleStringLiteral
parameter_list|(
specifier|const
name|StringLiteral
modifier|*
name|SL
parameter_list|)
init|=
literal|0
function_decl|;
comment|// FIXME: consider replacing raw_ostream& with something like SmallString&.
name|void
name|mangleName
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|D
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|mangleCXXName
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|D
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleThunk
parameter_list|(
specifier|const
name|CXXMethodDecl
modifier|*
name|MD
parameter_list|,
specifier|const
name|ThunkInfo
modifier|&
name|Thunk
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXDtorThunk
parameter_list|(
specifier|const
name|CXXDestructorDecl
modifier|*
name|DD
parameter_list|,
name|CXXDtorType
name|Type
parameter_list|,
specifier|const
name|ThisAdjustment
modifier|&
name|ThisAdjustment
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleReferenceTemporary
parameter_list|(
specifier|const
name|VarDecl
modifier|*
name|D
parameter_list|,
name|unsigned
name|ManglingNumber
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXRTTI
parameter_list|(
name|QualType
name|T
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXRTTIName
parameter_list|(
name|QualType
name|T
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXCtor
parameter_list|(
specifier|const
name|CXXConstructorDecl
modifier|*
name|D
parameter_list|,
name|CXXCtorType
name|Type
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXDtor
parameter_list|(
specifier|const
name|CXXDestructorDecl
modifier|*
name|D
parameter_list|,
name|CXXDtorType
name|Type
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleStringLiteral
parameter_list|(
specifier|const
name|StringLiteral
modifier|*
name|SL
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|void
name|mangleGlobalBlock
parameter_list|(
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
specifier|const
name|NamedDecl
modifier|*
name|ID
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
name|void
name|mangleCtorBlock
parameter_list|(
specifier|const
name|CXXConstructorDecl
modifier|*
name|CD
parameter_list|,
name|CXXCtorType
name|CT
parameter_list|,
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
name|void
name|mangleDtorBlock
parameter_list|(
specifier|const
name|CXXDestructorDecl
modifier|*
name|CD
parameter_list|,
name|CXXDtorType
name|DT
parameter_list|,
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
name|void
name|mangleBlock
parameter_list|(
specifier|const
name|DeclContext
modifier|*
name|DC
parameter_list|,
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
name|void
name|mangleObjCMethodName
parameter_list|(
specifier|const
name|ObjCMethodDecl
modifier|*
name|MD
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|mangleStaticGuardVariable
parameter_list|(
specifier|const
name|VarDecl
modifier|*
name|D
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleDynamicInitializer
parameter_list|(
specifier|const
name|VarDecl
modifier|*
name|D
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleDynamicAtExitDestructor
parameter_list|(
specifier|const
name|VarDecl
modifier|*
name|D
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleSEHFilterExpression
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|EnclosingDecl
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleSEHFinallyBlock
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|EnclosingDecl
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Generates a unique string for an externally visible type for use with TBAA
comment|/// or type uniquing.
comment|/// TODO: Extend this to internal types by generating names that are unique
comment|/// across translation units so it can be used with LTO.
name|virtual
name|void
name|mangleTypeName
parameter_list|(
name|QualType
name|T
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// @}
block|}
empty_stmt|;
name|class
name|ItaniumMangleContext
range|:
name|public
name|MangleContext
block|{
name|public
operator|:
name|explicit
name|ItaniumMangleContext
argument_list|(
name|ASTContext
operator|&
name|C
argument_list|,
name|DiagnosticsEngine
operator|&
name|D
argument_list|)
operator|:
name|MangleContext
argument_list|(
argument|C
argument_list|,
argument|D
argument_list|,
argument|MK_Itanium
argument_list|)
block|{}
name|virtual
name|void
name|mangleCXXVTable
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
name|raw_ostream
operator|&
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXVTT
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|RD
argument_list|,
name|raw_ostream
operator|&
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXCtorVTable
argument_list|(
argument|const CXXRecordDecl *RD
argument_list|,
argument|int64_t Offset
argument_list|,
argument|const CXXRecordDecl *Type
argument_list|,
argument|raw_ostream&
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleItaniumThreadLocalInit
argument_list|(
specifier|const
name|VarDecl
operator|*
name|D
argument_list|,
name|raw_ostream
operator|&
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleItaniumThreadLocalWrapper
argument_list|(
specifier|const
name|VarDecl
operator|*
name|D
argument_list|,
name|raw_ostream
operator|&
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXCtorComdat
argument_list|(
specifier|const
name|CXXConstructorDecl
operator|*
name|D
argument_list|,
name|raw_ostream
operator|&
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXDtorComdat
argument_list|(
specifier|const
name|CXXDestructorDecl
operator|*
name|D
argument_list|,
name|raw_ostream
operator|&
argument_list|)
operator|=
literal|0
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const MangleContext *C
argument_list|)
block|{
return|return
name|C
operator|->
name|getKind
argument_list|()
operator|==
name|MK_Itanium
return|;
block|}
specifier|static
name|ItaniumMangleContext
operator|*
name|create
argument_list|(
name|ASTContext
operator|&
name|Context
argument_list|,
name|DiagnosticsEngine
operator|&
name|Diags
argument_list|)
block|; }
decl_stmt|;
name|class
name|MicrosoftMangleContext
range|:
name|public
name|MangleContext
block|{
name|public
operator|:
name|explicit
name|MicrosoftMangleContext
argument_list|(
name|ASTContext
operator|&
name|C
argument_list|,
name|DiagnosticsEngine
operator|&
name|D
argument_list|)
operator|:
name|MangleContext
argument_list|(
argument|C
argument_list|,
argument|D
argument_list|,
argument|MK_Microsoft
argument_list|)
block|{}
comment|/// \brief Mangle vftable symbols.  Only a subset of the bases along the path
comment|/// to the vftable are included in the name.  It's up to the caller to pick
comment|/// them correctly.
name|virtual
name|void
name|mangleCXXVFTable
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|Derived
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|CXXRecordDecl
operator|*
operator|>
name|BasePath
argument_list|,
name|raw_ostream
operator|&
name|Out
argument_list|)
operator|=
literal|0
block|;
comment|/// \brief Mangle vbtable symbols.  Only a subset of the bases along the path
comment|/// to the vbtable are included in the name.  It's up to the caller to pick
comment|/// them correctly.
name|virtual
name|void
name|mangleCXXVBTable
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|Derived
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|CXXRecordDecl
operator|*
operator|>
name|BasePath
argument_list|,
name|raw_ostream
operator|&
name|Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleThreadSafeStaticGuardVariable
argument_list|(
argument|const VarDecl *VD
argument_list|,
argument|unsigned GuardNum
argument_list|,
argument|raw_ostream&Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleVirtualMemPtrThunk
argument_list|(
specifier|const
name|CXXMethodDecl
operator|*
name|MD
argument_list|,
name|raw_ostream
operator|&
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXVirtualDisplacementMap
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|SrcRD
argument_list|,
specifier|const
name|CXXRecordDecl
operator|*
name|DstRD
argument_list|,
name|raw_ostream
operator|&
name|Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXThrowInfo
argument_list|(
argument|QualType T
argument_list|,
argument|bool IsConst
argument_list|,
argument|bool IsVolatile
argument_list|,
argument|uint32_t NumEntries
argument_list|,
argument|raw_ostream&Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXCatchableTypeArray
argument_list|(
argument|QualType T
argument_list|,
argument|uint32_t NumEntries
argument_list|,
argument|raw_ostream&Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXCatchableType
argument_list|(
argument|QualType T
argument_list|,
argument|const CXXConstructorDecl *CD
argument_list|,
argument|CXXCtorType CT
argument_list|,
argument|uint32_t Size
argument_list|,
argument|uint32_t NVOffset
argument_list|,
argument|int32_t VBPtrOffset
argument_list|,
argument|uint32_t VBIndex
argument_list|,
argument|raw_ostream&Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXCatchHandlerType
argument_list|(
argument|QualType T
argument_list|,
argument|uint32_t Flags
argument_list|,
argument|raw_ostream&Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXRTTIBaseClassDescriptor
argument_list|(
argument|const CXXRecordDecl *Derived
argument_list|,
argument|uint32_t NVOffset
argument_list|,
argument|int32_t VBPtrOffset
argument_list|,
argument|uint32_t VBTableOffset
argument_list|,
argument|uint32_t Flags
argument_list|,
argument|raw_ostream&Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXRTTIBaseClassArray
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|Derived
argument_list|,
name|raw_ostream
operator|&
name|Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXRTTIClassHierarchyDescriptor
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|Derived
argument_list|,
name|raw_ostream
operator|&
name|Out
argument_list|)
operator|=
literal|0
block|;
name|virtual
name|void
name|mangleCXXRTTICompleteObjectLocator
argument_list|(
specifier|const
name|CXXRecordDecl
operator|*
name|Derived
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|CXXRecordDecl
operator|*
operator|>
name|BasePath
argument_list|,
name|raw_ostream
operator|&
name|Out
argument_list|)
operator|=
literal|0
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const MangleContext *C
argument_list|)
block|{
return|return
name|C
operator|->
name|getKind
argument_list|()
operator|==
name|MK_Microsoft
return|;
block|}
specifier|static
name|MicrosoftMangleContext
operator|*
name|create
argument_list|(
name|ASTContext
operator|&
name|Context
argument_list|,
name|DiagnosticsEngine
operator|&
name|Diags
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

