begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Mangle.h - Mangle C++ Names ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Defines the C++ name mangling interface.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_MANGLE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_MANGLE_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/ABI.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|BlockDecl
decl_stmt|;
name|class
name|CXXConstructorDecl
decl_stmt|;
name|class
name|CXXDestructorDecl
decl_stmt|;
name|class
name|CXXMethodDecl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
name|class
name|ObjCMethodDecl
decl_stmt|;
name|class
name|VarDecl
decl_stmt|;
struct_decl|struct
name|ThisAdjustment
struct_decl|;
struct_decl|struct
name|ThunkInfo
struct_decl|;
comment|/// MangleBuffer - a convenient class for storing a name which is
comment|/// either the result of a mangling or is a constant string with
comment|/// external memory ownership.
name|class
name|MangleBuffer
block|{
name|public
label|:
name|void
name|setString
parameter_list|(
name|StringRef
name|Ref
parameter_list|)
block|{
name|String
operator|=
name|Ref
expr_stmt|;
block|}
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|getBuffer
argument_list|()
block|{
return|return
name|Buffer
return|;
block|}
name|StringRef
name|getString
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|String
operator|.
name|empty
argument_list|()
condition|)
return|return
name|String
return|;
return|return
name|Buffer
operator|.
name|str
argument_list|()
return|;
block|}
name|operator
name|StringRef
argument_list|()
specifier|const
block|{
return|return
name|getString
argument_list|()
return|;
block|}
name|private
label|:
name|StringRef
name|String
decl_stmt|;
name|SmallString
operator|<
literal|256
operator|>
name|Buffer
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// MangleContext - Context for tracking state which persists across multiple
end_comment

begin_comment
comment|/// calls to the C++ name mangler.
end_comment

begin_decl_stmt
name|class
name|MangleContext
block|{
name|virtual
name|void
name|anchor
parameter_list|()
function_decl|;
name|ASTContext
modifier|&
name|Context
decl_stmt|;
name|DiagnosticsEngine
modifier|&
name|Diags
decl_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|BlockDecl
operator|*
operator|,
name|unsigned
operator|>
name|GlobalBlockIds
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|BlockDecl
operator|*
operator|,
name|unsigned
operator|>
name|LocalBlockIds
expr_stmt|;
name|public
label|:
name|explicit
name|MangleContext
argument_list|(
name|ASTContext
operator|&
name|Context
argument_list|,
name|DiagnosticsEngine
operator|&
name|Diags
argument_list|)
operator|:
name|Context
argument_list|(
name|Context
argument_list|)
operator|,
name|Diags
argument_list|(
argument|Diags
argument_list|)
block|{ }
name|virtual
operator|~
name|MangleContext
argument_list|()
block|{ }
name|ASTContext
operator|&
name|getASTContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|DiagnosticsEngine
operator|&
name|getDiags
argument_list|()
specifier|const
block|{
return|return
name|Diags
return|;
block|}
name|virtual
name|void
name|startNewFunction
parameter_list|()
block|{
name|LocalBlockIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|unsigned
name|getBlockId
parameter_list|(
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|bool
name|Local
parameter_list|)
block|{
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|BlockDecl
operator|*
operator|,
name|unsigned
operator|>
operator|&
name|BlockIds
operator|=
name|Local
condition|?
name|LocalBlockIds
else|:
name|GlobalBlockIds
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|BlockDecl
operator|*
operator|,
name|unsigned
operator|>
operator|::
name|iterator
operator|,
name|bool
operator|>
name|Result
operator|=
name|BlockIds
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|BD
argument_list|,
name|BlockIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Result
operator|.
name|first
operator|->
name|second
return|;
block|}
comment|/// @name Mangler Entry Points
comment|/// @{
name|virtual
name|bool
name|shouldMangleDeclName
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|D
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleName
parameter_list|(
specifier|const
name|NamedDecl
modifier|*
name|D
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleThunk
parameter_list|(
specifier|const
name|CXXMethodDecl
modifier|*
name|MD
parameter_list|,
specifier|const
name|ThunkInfo
modifier|&
name|Thunk
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXDtorThunk
parameter_list|(
specifier|const
name|CXXDestructorDecl
modifier|*
name|DD
parameter_list|,
name|CXXDtorType
name|Type
parameter_list|,
specifier|const
name|ThisAdjustment
modifier|&
name|ThisAdjustment
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleReferenceTemporary
parameter_list|(
specifier|const
name|VarDecl
modifier|*
name|D
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXVTable
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXVTT
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXCtorVTable
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|,
name|int64_t
name|Offset
parameter_list|,
specifier|const
name|CXXRecordDecl
modifier|*
name|Type
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXRTTI
parameter_list|(
name|QualType
name|T
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXRTTIName
parameter_list|(
name|QualType
name|T
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXCtor
parameter_list|(
specifier|const
name|CXXConstructorDecl
modifier|*
name|D
parameter_list|,
name|CXXCtorType
name|Type
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|void
name|mangleCXXDtor
parameter_list|(
specifier|const
name|CXXDestructorDecl
modifier|*
name|D
parameter_list|,
name|CXXDtorType
name|Type
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
init|=
literal|0
function_decl|;
name|void
name|mangleGlobalBlock
parameter_list|(
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
name|void
name|mangleCtorBlock
parameter_list|(
specifier|const
name|CXXConstructorDecl
modifier|*
name|CD
parameter_list|,
name|CXXCtorType
name|CT
parameter_list|,
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
name|void
name|mangleDtorBlock
parameter_list|(
specifier|const
name|CXXDestructorDecl
modifier|*
name|CD
parameter_list|,
name|CXXDtorType
name|DT
parameter_list|,
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
name|void
name|mangleBlock
parameter_list|(
specifier|const
name|DeclContext
modifier|*
name|DC
parameter_list|,
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
comment|// Do the right thing.
name|void
name|mangleBlock
parameter_list|(
specifier|const
name|BlockDecl
modifier|*
name|BD
parameter_list|,
name|raw_ostream
modifier|&
name|Out
parameter_list|)
function_decl|;
name|void
name|mangleObjCMethodName
parameter_list|(
specifier|const
name|ObjCMethodDecl
modifier|*
name|MD
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
function_decl|;
comment|// This is pretty lame.
name|virtual
name|void
name|mangleItaniumGuardVariable
parameter_list|(
specifier|const
name|VarDecl
modifier|*
name|D
parameter_list|,
name|raw_ostream
modifier|&
parameter_list|)
block|{
name|llvm_unreachable
argument_list|(
literal|"Target does not support mangling guard variables"
argument_list|)
expr_stmt|;
block|}
comment|/// @}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
name|MangleContext
modifier|*
name|createItaniumMangleContext
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|,
name|DiagnosticsEngine
modifier|&
name|Diags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|MangleContext
modifier|*
name|createMicrosoftMangleContext
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|,
name|DiagnosticsEngine
modifier|&
name|Diags
parameter_list|)
function_decl|;
end_function_decl

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

