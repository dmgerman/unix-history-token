begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- StmtIterator.h - Iterators for Statements ------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the StmtIterator and ConstStmtIterator classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_STMT_ITR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_STMT_ITR_H
end_define

begin_include
include|#
directive|include
file|"llvm/System/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Stmt
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|VariableArrayType
decl_stmt|;
name|class
name|StmtIteratorBase
block|{
name|protected
label|:
enum|enum
block|{
name|DeclMode
init|=
literal|0x1
block|,
name|SizeOfTypeVAMode
init|=
literal|0x2
block|,
name|DeclGroupMode
init|=
literal|0x3
block|,
name|Flags
init|=
literal|0x3
block|}
enum|;
name|Stmt
modifier|*
modifier|*
name|stmt
decl_stmt|;
union|union
block|{
name|Decl
modifier|*
name|decl
decl_stmt|;
name|Decl
modifier|*
modifier|*
name|DGI
decl_stmt|;
block|}
union|;
name|uintptr_t
name|RawVAPtr
decl_stmt|;
name|Decl
modifier|*
modifier|*
name|DGE
decl_stmt|;
name|bool
name|inDecl
argument_list|()
specifier|const
block|{
return|return
operator|(
name|RawVAPtr
operator|&
name|Flags
operator|)
operator|==
name|DeclMode
return|;
block|}
name|bool
name|inDeclGroup
argument_list|()
specifier|const
block|{
return|return
operator|(
name|RawVAPtr
operator|&
name|Flags
operator|)
operator|==
name|DeclGroupMode
return|;
block|}
name|bool
name|inSizeOfTypeVA
argument_list|()
specifier|const
block|{
return|return
operator|(
name|RawVAPtr
operator|&
name|Flags
operator|)
operator|==
name|SizeOfTypeVAMode
return|;
block|}
name|bool
name|inStmt
argument_list|()
specifier|const
block|{
return|return
operator|(
name|RawVAPtr
operator|&
name|Flags
operator|)
operator|==
literal|0
return|;
block|}
name|VariableArrayType
operator|*
name|getVAPtr
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|VariableArrayType
operator|*
operator|>
operator|(
name|RawVAPtr
operator|&
operator|~
name|Flags
operator|)
return|;
block|}
name|void
name|setVAPtr
parameter_list|(
name|VariableArrayType
modifier|*
name|P
parameter_list|)
block|{
name|assert
argument_list|(
name|inDecl
argument_list|()
operator|||
name|inDeclGroup
argument_list|()
operator|||
name|inSizeOfTypeVA
argument_list|()
argument_list|)
expr_stmt|;
name|RawVAPtr
operator|=
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|P
operator|)
operator||
operator|(
name|RawVAPtr
operator|&
name|Flags
operator|)
expr_stmt|;
block|}
name|void
name|NextDecl
parameter_list|(
name|bool
name|ImmediateAdvance
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|HandleDecl
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|void
name|NextVA
parameter_list|()
function_decl|;
name|Stmt
operator|*
operator|&
name|GetDeclExpr
argument_list|()
specifier|const
expr_stmt|;
name|StmtIteratorBase
argument_list|(
name|Stmt
operator|*
operator|*
name|s
argument_list|)
operator|:
name|stmt
argument_list|(
name|s
argument_list|)
operator|,
name|decl
argument_list|(
literal|0
argument_list|)
operator|,
name|RawVAPtr
argument_list|(
literal|0
argument_list|)
block|{}
name|StmtIteratorBase
argument_list|(
name|Decl
operator|*
name|d
argument_list|,
name|Stmt
operator|*
operator|*
name|s
argument_list|)
expr_stmt|;
name|StmtIteratorBase
argument_list|(
name|VariableArrayType
operator|*
name|t
argument_list|)
expr_stmt|;
name|StmtIteratorBase
argument_list|(
name|Decl
operator|*
operator|*
name|dgi
argument_list|,
name|Decl
operator|*
operator|*
name|dge
argument_list|)
expr_stmt|;
name|StmtIteratorBase
argument_list|()
operator|:
name|stmt
argument_list|(
literal|0
argument_list|)
operator|,
name|decl
argument_list|(
literal|0
argument_list|)
operator|,
name|RawVAPtr
argument_list|(
literal|0
argument_list|)
block|{}
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|DERIVED
operator|,
name|typename
name|REFERENCE
operator|>
name|class
name|StmtIteratorImpl
operator|:
name|public
name|StmtIteratorBase
operator|,
name|public
name|std
operator|::
name|iterator
operator|<
name|std
operator|::
name|forward_iterator_tag
operator|,
name|REFERENCE
operator|,
name|ptrdiff_t
operator|,
name|REFERENCE
operator|,
name|REFERENCE
operator|>
block|{
name|protected
operator|:
name|StmtIteratorImpl
argument_list|(
specifier|const
name|StmtIteratorBase
operator|&
name|RHS
argument_list|)
operator|:
name|StmtIteratorBase
argument_list|(
argument|RHS
argument_list|)
block|{}
name|public
operator|:
name|StmtIteratorImpl
argument_list|()
block|{}
name|StmtIteratorImpl
argument_list|(
name|Stmt
operator|*
operator|*
name|s
argument_list|)
operator|:
name|StmtIteratorBase
argument_list|(
argument|s
argument_list|)
block|{}
name|StmtIteratorImpl
argument_list|(
name|Decl
operator|*
operator|*
name|dgi
argument_list|,
name|Decl
operator|*
operator|*
name|dge
argument_list|)
operator|:
name|StmtIteratorBase
argument_list|(
argument|dgi
argument_list|,
argument|dge
argument_list|)
block|{}
name|StmtIteratorImpl
argument_list|(
name|Decl
operator|*
name|d
argument_list|,
name|Stmt
operator|*
operator|*
name|s
argument_list|)
operator|:
name|StmtIteratorBase
argument_list|(
argument|d
argument_list|,
argument|s
argument_list|)
block|{}
name|StmtIteratorImpl
argument_list|(
name|VariableArrayType
operator|*
name|t
argument_list|)
operator|:
name|StmtIteratorBase
argument_list|(
argument|t
argument_list|)
block|{}
name|DERIVED
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
if|if
condition|(
name|inDecl
argument_list|()
operator|||
name|inDeclGroup
argument_list|()
condition|)
block|{
if|if
condition|(
name|getVAPtr
argument_list|()
condition|)
name|NextVA
argument_list|()
expr_stmt|;
else|else
name|NextDecl
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|inSizeOfTypeVA
argument_list|()
condition|)
name|NextVA
argument_list|()
expr_stmt|;
else|else
operator|++
name|stmt
expr_stmt|;
return|return
name|static_cast
operator|<
name|DERIVED
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
return|;
block|}
name|DERIVED
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|DERIVED
name|tmp
operator|=
name|static_cast
operator|<
name|DERIVED
operator|&
operator|>
operator|(
operator|*
name|this
operator|)
block|;
name|operator
operator|++
operator|(
operator|)
block|;
return|return
name|tmp
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DERIVED
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|stmt
operator|==
name|RHS
operator|.
name|stmt
operator|&&
name|decl
operator|==
name|RHS
operator|.
name|decl
operator|&&
name|RawVAPtr
operator|==
name|RHS
operator|.
name|RawVAPtr
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|DERIVED
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|stmt
operator|!=
name|RHS
operator|.
name|stmt
operator|||
name|decl
operator|!=
name|RHS
operator|.
name|decl
operator|||
name|RawVAPtr
operator|!=
name|RHS
operator|.
name|RawVAPtr
return|;
block|}
name|REFERENCE
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
call|(
name|REFERENCE
call|)
argument_list|(
name|inStmt
argument_list|()
operator|?
operator|*
name|stmt
operator|:
name|GetDeclExpr
argument_list|()
argument_list|)
return|;
block|}
name|REFERENCE
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|operator
operator|*
operator|(
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
unit|};
name|struct
name|StmtIterator
range|:
name|public
name|StmtIteratorImpl
operator|<
name|StmtIterator
decl_stmt|,
name|Stmt
modifier|*
modifier|&
decl|>
block|{
name|explicit
name|StmtIterator
argument_list|()
operator|:
name|StmtIteratorImpl
operator|<
name|StmtIterator
operator|,
name|Stmt
operator|*
operator|&
operator|>
operator|(
operator|)
block|{}
name|StmtIterator
argument_list|(
name|Stmt
operator|*
operator|*
name|S
argument_list|)
operator|:
name|StmtIteratorImpl
operator|<
name|StmtIterator
operator|,
name|Stmt
operator|*
operator|&
operator|>
operator|(
name|S
operator|)
block|{}
name|StmtIterator
argument_list|(
name|Decl
operator|*
operator|*
name|dgi
argument_list|,
name|Decl
operator|*
operator|*
name|dge
argument_list|)
operator|:
name|StmtIteratorImpl
operator|<
name|StmtIterator
operator|,
name|Stmt
operator|*
operator|&
operator|>
operator|(
name|dgi
operator|,
name|dge
operator|)
block|{}
name|StmtIterator
argument_list|(
name|VariableArrayType
operator|*
name|t
argument_list|)
operator|:
name|StmtIteratorImpl
operator|<
name|StmtIterator
operator|,
name|Stmt
operator|*
operator|&
operator|>
operator|(
name|t
operator|)
block|{}
name|StmtIterator
argument_list|(
name|Decl
operator|*
name|D
argument_list|,
name|Stmt
operator|*
operator|*
name|s
operator|=
literal|0
argument_list|)
operator|:
name|StmtIteratorImpl
operator|<
name|StmtIterator
operator|,
name|Stmt
operator|*
operator|&
operator|>
operator|(
name|D
operator|,
name|s
operator|)
block|{}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|struct
name|ConstStmtIterator
range|:
name|public
name|StmtIteratorImpl
operator|<
name|ConstStmtIterator
decl_stmt|,                                                    const
name|Stmt
modifier|*
decl|>
block|{
name|explicit
name|ConstStmtIterator
argument_list|()
operator|:
name|StmtIteratorImpl
operator|<
name|ConstStmtIterator
operator|,
specifier|const
name|Stmt
operator|*
operator|>
operator|(
operator|)
block|{}
name|ConstStmtIterator
argument_list|(
specifier|const
name|StmtIterator
operator|&
name|RHS
argument_list|)
operator|:
name|StmtIteratorImpl
operator|<
name|ConstStmtIterator
operator|,
specifier|const
name|Stmt
operator|*
operator|>
operator|(
name|RHS
operator|)
block|{}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

