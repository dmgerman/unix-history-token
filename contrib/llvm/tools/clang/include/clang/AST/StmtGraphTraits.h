begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- StmtGraphTraits.h - Graph Traits for the class Stmt ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines a template specialization of llvm::GraphTraits to
end_comment

begin_comment
comment|//  treat ASTs (Stmt*) as graphs
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_STMTGRAPHTRAITS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_STMTGRAPHTRAITS_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/Stmt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DepthFirstIterator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|//template<typename T> struct GraphTraits;
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|clang
operator|::
name|Stmt
operator|*
operator|>
block|{
typedef|typedef
name|clang
operator|::
name|Stmt
operator|*
name|NodeRef
expr_stmt|;
typedef|typedef
name|clang
operator|::
name|Stmt
operator|::
name|child_iterator
name|ChildIteratorType
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|df_iterator
operator|<
name|clang
operator|::
name|Stmt
operator|*
operator|>
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
name|clang
operator|::
name|Stmt
operator|*
name|S
argument_list|)
block|{
return|return
name|S
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeRef
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
condition|)
return|return
name|N
operator|->
name|child_begin
argument_list|()
return|;
else|else
return|return
name|ChildIteratorType
argument_list|()
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeRef
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
condition|)
return|return
name|N
operator|->
name|child_end
argument_list|()
return|;
else|else
return|return
name|ChildIteratorType
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
name|clang
operator|::
name|Stmt
operator|*
name|S
argument_list|)
block|{
return|return
name|df_begin
argument_list|(
name|S
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
name|clang
operator|::
name|Stmt
operator|*
name|S
argument_list|)
block|{
return|return
name|df_end
argument_list|(
name|S
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|clang
operator|::
name|Stmt
operator|*
operator|>
block|{
typedef|typedef
specifier|const
name|clang
operator|::
name|Stmt
operator|*
name|NodeRef
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|clang
operator|::
name|Stmt
operator|::
name|const_child_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|llvm
operator|::
name|df_iterator
operator|<
specifier|const
name|clang
operator|::
name|Stmt
operator|*
operator|>
name|nodes_iterator
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeRef
name|getEntryNode
argument_list|(
specifier|const
name|clang
operator|::
name|Stmt
operator|*
name|S
argument_list|)
block|{
return|return
name|S
return|;
block|}
end_decl_stmt

begin_function
specifier|static
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeRef
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
condition|)
return|return
name|N
operator|->
name|child_begin
argument_list|()
return|;
else|else
return|return
name|ChildIteratorType
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeRef
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
condition|)
return|return
name|N
operator|->
name|child_end
argument_list|()
return|;
else|else
return|return
name|ChildIteratorType
argument_list|()
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
specifier|const
name|clang
operator|::
name|Stmt
operator|*
name|S
argument_list|)
block|{
return|return
name|df_begin
argument_list|(
name|S
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
specifier|const
name|clang
operator|::
name|Stmt
operator|*
name|S
argument_list|)
block|{
return|return
name|df_end
argument_list|(
name|S
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
unit|};   }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

