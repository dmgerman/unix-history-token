begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DeclLookups.h - Low-level interface to all names in a DC-*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines DeclContext::all_lookups_iterator.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_DECLLOOKUPS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_DECLLOOKUPS_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ASTContext.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclBase.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclContextInternals.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclarationName.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// all_lookups_iterator - An iterator that provides a view over the results
comment|/// of looking up every possible name.
name|class
name|DeclContext
operator|::
name|all_lookups_iterator
block|{
name|StoredDeclsMap
operator|::
name|iterator
name|It
block|,
name|End
block|;
name|public
operator|:
typedef|typedef
name|lookup_result
name|value_type
typedef|;
typedef|typedef
name|lookup_result
name|reference
typedef|;
typedef|typedef
name|lookup_result
name|pointer
typedef|;
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|std
operator|::
name|ptrdiff_t
name|difference_type
expr_stmt|;
name|all_lookups_iterator
argument_list|()
block|{}
name|all_lookups_iterator
argument_list|(
argument|StoredDeclsMap::iterator It
argument_list|,
argument|StoredDeclsMap::iterator End
argument_list|)
block|:
name|It
argument_list|(
name|It
argument_list|)
operator|,
name|End
argument_list|(
argument|End
argument_list|)
block|{}
name|DeclarationName
name|getLookupName
argument_list|()
specifier|const
block|{
return|return
name|It
operator|->
name|first
return|;
block|}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|It
operator|->
name|second
operator|.
name|getLookupResult
argument_list|()
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|It
operator|->
name|second
operator|.
name|getLookupResult
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|all_lookups_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
comment|// Filter out using directives. They don't belong as results from name
comment|// lookup anyways, except as an implementation detail. Users of the API
comment|// should not expect to get them (or worse, rely on it).
do|do
block|{
operator|++
name|It
expr_stmt|;
block|}
end_expr_stmt

begin_while
while|while
condition|(
name|It
operator|!=
name|End
operator|&&
name|It
operator|->
name|first
operator|==
name|DeclarationName
operator|::
name|getUsingDirectiveName
argument_list|()
condition|)
empty_stmt|;
end_while

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    all_lookups_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|all_lookups_iterator
name|tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
name|all_lookups_iterator
name|x
operator|,
name|all_lookups_iterator
name|y
operator|)
block|{
return|return
name|x
operator|.
name|It
operator|==
name|y
operator|.
name|It
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|!=
operator|(
name|all_lookups_iterator
name|x
operator|,
name|all_lookups_iterator
name|y
operator|)
block|{
return|return
name|x
operator|.
name|It
operator|!=
name|y
operator|.
name|It
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
specifier|inline
name|DeclContext
operator|::
name|lookups_range
name|DeclContext
operator|::
name|lookups
argument_list|()
specifier|const
block|{
name|DeclContext
operator|*
name|Primary
operator|=
name|const_cast
operator|<
name|DeclContext
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getPrimaryContext
argument_list|()
block|;
if|if
condition|(
name|Primary
operator|->
name|hasExternalVisibleStorage
argument_list|()
condition|)
name|getParentASTContext
argument_list|()
operator|.
name|getExternalSource
argument_list|()
operator|->
name|completeVisibleDeclsMap
argument_list|(
name|Primary
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|StoredDeclsMap
modifier|*
name|Map
init|=
name|Primary
operator|->
name|buildLookup
argument_list|()
condition|)
return|return
name|lookups_range
argument_list|(
name|all_lookups_iterator
argument_list|(
name|Map
operator|->
name|begin
argument_list|()
argument_list|,
name|Map
operator|->
name|end
argument_list|()
argument_list|)
argument_list|,
name|all_lookups_iterator
argument_list|(
name|Map
operator|->
name|end
argument_list|()
argument_list|,
name|Map
operator|->
name|end
argument_list|()
argument_list|)
argument_list|)
return|;
end_if

begin_return
return|return
name|lookups_range
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  inline
name|DeclContext
operator|::
name|all_lookups_iterator
name|DeclContext
operator|::
name|lookups_begin
argument_list|()
specifier|const
block|{
return|return
name|lookups
argument_list|()
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|DeclContext
operator|::
name|all_lookups_iterator
name|DeclContext
operator|::
name|lookups_end
argument_list|()
specifier|const
block|{
return|return
name|lookups
argument_list|()
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|DeclContext
operator|::
name|lookups_range
name|DeclContext
operator|::
name|noload_lookups
argument_list|()
specifier|const
block|{
name|DeclContext
operator|*
name|Primary
operator|=
name|const_cast
operator|<
name|DeclContext
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getPrimaryContext
argument_list|()
block|;
if|if
condition|(
name|StoredDeclsMap
modifier|*
name|Map
init|=
name|Primary
operator|->
name|getLookupPtr
argument_list|()
condition|)
return|return
name|lookups_range
argument_list|(
name|all_lookups_iterator
argument_list|(
name|Map
operator|->
name|begin
argument_list|()
argument_list|,
name|Map
operator|->
name|end
argument_list|()
argument_list|)
argument_list|,
name|all_lookups_iterator
argument_list|(
name|Map
operator|->
name|end
argument_list|()
argument_list|,
name|Map
operator|->
name|end
argument_list|()
argument_list|)
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|lookups_range
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  inline
name|DeclContext
operator|::
name|all_lookups_iterator
name|DeclContext
operator|::
name|noload_lookups_begin
argument_list|()
specifier|const
block|{
return|return
name|noload_lookups
argument_list|()
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|DeclContext
operator|::
name|all_lookups_iterator
name|DeclContext
operator|::
name|noload_lookups_end
argument_list|()
specifier|const
block|{
return|return
name|noload_lookups
argument_list|()
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

