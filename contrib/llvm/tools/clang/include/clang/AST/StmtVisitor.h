begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- StmtVisitor.h - Visitor for Stmt subclasses ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the StmtVisitor and ConstStmtVisitor interfaces.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_STMTVISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_STMTVISITOR_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ExprCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprObjC.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExprOpenMP.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/StmtCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/StmtObjC.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/StmtOpenMP.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|make_ptr
block|{
typedef|typedef
name|T
modifier|*
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|make_const_ptr
block|{
typedef|typedef
specifier|const
name|T
modifier|*
name|type
typedef|;
block|}
empty_stmt|;
comment|/// StmtVisitorBase - This class implements a simple visitor for Stmt
comment|/// subclasses. Since Expr derives from Stmt, this also includes support for
comment|/// visiting Exprs.
name|template
operator|<
name|template
operator|<
name|typename
operator|>
name|class
name|Ptr
operator|,
name|typename
name|ImplClass
operator|,
name|typename
name|RetTy
operator|=
name|void
operator|>
name|class
name|StmtVisitorBase
block|{
name|public
operator|:
define|#
directive|define
name|PTR
parameter_list|(
name|CLASS
parameter_list|)
value|typename Ptr<CLASS>::type
define|#
directive|define
name|DISPATCH
parameter_list|(
name|NAME
parameter_list|,
name|CLASS
parameter_list|)
define|\
value|return static_cast<ImplClass*>(this)->Visit ## NAME(static_cast<PTR(CLASS)>(S))
name|RetTy
name|Visit
argument_list|(
argument|PTR(Stmt) S
argument_list|)
block|{
comment|// If we have a binary expr, dispatch to the subcode of the binop.  A smart
comment|// optimizer (e.g. LLVM) will fold this comparison into the switch stmt
comment|// below.
if|if
condition|(
name|PTR
argument_list|(
argument|BinaryOperator
argument_list|)
name|BinOp
operator|=
name|dyn_cast
operator|<
name|BinaryOperator
operator|>
operator|(
name|S
operator|)
condition|)
block|{
switch|switch
condition|(
name|BinOp
operator|->
name|getOpcode
argument_list|()
condition|)
block|{
case|case
name|BO_PtrMemD
case|:
name|DISPATCH
argument_list|(
name|BinPtrMemD
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_PtrMemI
case|:
name|DISPATCH
argument_list|(
name|BinPtrMemI
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Mul
case|:
name|DISPATCH
argument_list|(
name|BinMul
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Div
case|:
name|DISPATCH
argument_list|(
name|BinDiv
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Rem
case|:
name|DISPATCH
argument_list|(
name|BinRem
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Add
case|:
name|DISPATCH
argument_list|(
name|BinAdd
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Sub
case|:
name|DISPATCH
argument_list|(
name|BinSub
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Shl
case|:
name|DISPATCH
argument_list|(
name|BinShl
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Shr
case|:
name|DISPATCH
argument_list|(
name|BinShr
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_LT
case|:
name|DISPATCH
argument_list|(
name|BinLT
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_GT
case|:
name|DISPATCH
argument_list|(
name|BinGT
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_LE
case|:
name|DISPATCH
argument_list|(
name|BinLE
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_GE
case|:
name|DISPATCH
argument_list|(
name|BinGE
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_EQ
case|:
name|DISPATCH
argument_list|(
name|BinEQ
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_NE
case|:
name|DISPATCH
argument_list|(
name|BinNE
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_And
case|:
name|DISPATCH
argument_list|(
name|BinAnd
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Xor
case|:
name|DISPATCH
argument_list|(
name|BinXor
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Or
case|:
name|DISPATCH
argument_list|(
name|BinOr
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_LAnd
case|:
name|DISPATCH
argument_list|(
name|BinLAnd
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_LOr
case|:
name|DISPATCH
argument_list|(
name|BinLOr
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Assign
case|:
name|DISPATCH
argument_list|(
name|BinAssign
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
case|case
name|BO_MulAssign
case|:
name|DISPATCH
argument_list|(
name|BinMulAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_DivAssign
case|:
name|DISPATCH
argument_list|(
name|BinDivAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_RemAssign
case|:
name|DISPATCH
argument_list|(
name|BinRemAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_AddAssign
case|:
name|DISPATCH
argument_list|(
name|BinAddAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_SubAssign
case|:
name|DISPATCH
argument_list|(
name|BinSubAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_ShlAssign
case|:
name|DISPATCH
argument_list|(
name|BinShlAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_ShrAssign
case|:
name|DISPATCH
argument_list|(
name|BinShrAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_AndAssign
case|:
name|DISPATCH
argument_list|(
name|BinAndAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_OrAssign
case|:
name|DISPATCH
argument_list|(
name|BinOrAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_XorAssign
case|:
name|DISPATCH
argument_list|(
name|BinXorAssign
argument_list|,
name|CompoundAssignOperator
argument_list|)
expr_stmt|;
case|case
name|BO_Comma
case|:
name|DISPATCH
argument_list|(
name|BinComma
argument_list|,
name|BinaryOperator
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|PTR
argument_list|(
argument|UnaryOperator
argument_list|)
name|UnOp
operator|=
name|dyn_cast
operator|<
name|UnaryOperator
operator|>
operator|(
name|S
operator|)
condition|)
block|{
switch|switch
condition|(
name|UnOp
operator|->
name|getOpcode
argument_list|()
condition|)
block|{
case|case
name|UO_PostInc
case|:
name|DISPATCH
argument_list|(
name|UnaryPostInc
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_PostDec
case|:
name|DISPATCH
argument_list|(
name|UnaryPostDec
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_PreInc
case|:
name|DISPATCH
argument_list|(
name|UnaryPreInc
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_PreDec
case|:
name|DISPATCH
argument_list|(
name|UnaryPreDec
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_AddrOf
case|:
name|DISPATCH
argument_list|(
name|UnaryAddrOf
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_Deref
case|:
name|DISPATCH
argument_list|(
name|UnaryDeref
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_Plus
case|:
name|DISPATCH
argument_list|(
name|UnaryPlus
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_Minus
case|:
name|DISPATCH
argument_list|(
name|UnaryMinus
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_Not
case|:
name|DISPATCH
argument_list|(
name|UnaryNot
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_LNot
case|:
name|DISPATCH
argument_list|(
name|UnaryLNot
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_Real
case|:
name|DISPATCH
argument_list|(
name|UnaryReal
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_Imag
case|:
name|DISPATCH
argument_list|(
name|UnaryImag
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_Extension
case|:
name|DISPATCH
argument_list|(
name|UnaryExtension
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
case|case
name|UO_Coawait
case|:
name|DISPATCH
argument_list|(
name|UnaryCoawait
argument_list|,
name|UnaryOperator
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Top switch stmt: dispatch to VisitFooStmt for each FooStmt.
switch|switch
condition|(
name|S
operator|->
name|getStmtClass
argument_list|()
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown stmt kind!"
argument_list|)
expr_stmt|;
define|#
directive|define
name|ABSTRACT_STMT
parameter_list|(
name|STMT
parameter_list|)
define|#
directive|define
name|STMT
parameter_list|(
name|CLASS
parameter_list|,
name|PARENT
parameter_list|)
define|\
value|case Stmt::CLASS ## Class: DISPATCH(CLASS, CLASS);
include|#
directive|include
file|"clang/AST/StmtNodes.inc"
block|}
block|}
comment|// If the implementation chooses not to implement a certain visit method, fall
comment|// back on VisitExpr or whatever else is the superclass.
define|#
directive|define
name|STMT
parameter_list|(
name|CLASS
parameter_list|,
name|PARENT
parameter_list|)
define|\
value|RetTy Visit ## CLASS(PTR(CLASS) S) { DISPATCH(PARENT, PARENT); }
include|#
directive|include
file|"clang/AST/StmtNodes.inc"
comment|// If the implementation doesn't implement binary operator methods, fall back
comment|// on VisitBinaryOperator.
define|#
directive|define
name|BINOP_FALLBACK
parameter_list|(
name|NAME
parameter_list|)
define|\
value|RetTy VisitBin ## NAME(PTR(BinaryOperator) S) { \     DISPATCH(BinaryOperator, BinaryOperator); \   }
name|BINOP_FALLBACK
argument_list|(
argument|PtrMemD
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|PtrMemI
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Mul
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Div
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Rem
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Add
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Sub
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Shl
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Shr
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|LT
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|GT
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|LE
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|GE
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|EQ
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|NE
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|And
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Xor
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Or
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|LAnd
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|LOr
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Assign
argument_list|)
name|BINOP_FALLBACK
argument_list|(
argument|Comma
argument_list|)
undef|#
directive|undef
name|BINOP_FALLBACK
comment|// If the implementation doesn't implement compound assignment operator
comment|// methods, fall back on VisitCompoundAssignOperator.
define|#
directive|define
name|CAO_FALLBACK
parameter_list|(
name|NAME
parameter_list|)
define|\
value|RetTy VisitBin ## NAME(PTR(CompoundAssignOperator) S) { \     DISPATCH(CompoundAssignOperator, CompoundAssignOperator); \   }
name|CAO_FALLBACK
argument_list|(
argument|MulAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|DivAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|RemAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|AddAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|SubAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|ShlAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|ShrAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|AndAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|OrAssign
argument_list|)
name|CAO_FALLBACK
argument_list|(
argument|XorAssign
argument_list|)
undef|#
directive|undef
name|CAO_FALLBACK
comment|// If the implementation doesn't implement unary operator methods, fall back
comment|// on VisitUnaryOperator.
define|#
directive|define
name|UNARYOP_FALLBACK
parameter_list|(
name|NAME
parameter_list|)
define|\
value|RetTy VisitUnary ## NAME(PTR(UnaryOperator) S) { \     DISPATCH(UnaryOperator, UnaryOperator);    \   }
name|UNARYOP_FALLBACK
argument_list|(
argument|PostInc
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|PostDec
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|PreInc
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|PreDec
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|AddrOf
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|Deref
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|Plus
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|Minus
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|Not
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|LNot
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|Real
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|Imag
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|Extension
argument_list|)
name|UNARYOP_FALLBACK
argument_list|(
argument|Coawait
argument_list|)
undef|#
directive|undef
name|UNARYOP_FALLBACK
comment|// Base case, ignore it. :)
name|RetTy
name|VisitStmt
argument_list|(
argument|PTR(Stmt) Node
argument_list|)
block|{
return|return
name|RetTy
argument_list|()
return|;
block|}
undef|#
directive|undef
name|PTR
undef|#
directive|undef
name|DISPATCH
expr|}
block|;
comment|/// StmtVisitor - This class implements a simple visitor for Stmt subclasses.
comment|/// Since Expr derives from Stmt, this also includes support for visiting Exprs.
comment|///
comment|/// This class does not preserve constness of Stmt pointers (see also
comment|/// ConstStmtVisitor).
name|template
operator|<
name|typename
name|ImplClass
block|,
name|typename
name|RetTy
operator|=
name|void
operator|>
name|class
name|StmtVisitor
operator|:
name|public
name|StmtVisitorBase
operator|<
name|make_ptr
block|,
name|ImplClass
block|,
name|RetTy
operator|>
block|{}
block|;
comment|/// ConstStmtVisitor - This class implements a simple visitor for Stmt
comment|/// subclasses. Since Expr derives from Stmt, this also includes support for
comment|/// visiting Exprs.
comment|///
comment|/// This class preserves constness of Stmt pointers (see also StmtVisitor).
name|template
operator|<
name|typename
name|ImplClass
block|,
name|typename
name|RetTy
operator|=
name|void
operator|>
name|class
name|ConstStmtVisitor
operator|:
name|public
name|StmtVisitorBase
operator|<
name|make_const_ptr
block|,
name|ImplClass
block|,
name|RetTy
operator|>
block|{}
block|;
comment|/// \brief This class implements a simple visitor for OMPClause
comment|/// subclasses.
name|template
operator|<
name|class
name|ImplClass
block|,
name|template
operator|<
name|typename
operator|>
name|class
name|Ptr
block|,
name|typename
name|RetTy
operator|>
name|class
name|OMPClauseVisitorBase
block|{
name|public
operator|:
define|#
directive|define
name|PTR
parameter_list|(
name|CLASS
parameter_list|)
value|typename Ptr<CLASS>::type
define|#
directive|define
name|DISPATCH
parameter_list|(
name|CLASS
parameter_list|)
define|\
value|return static_cast<ImplClass*>(this)->Visit##CLASS(static_cast<PTR(CLASS)>(S))
define|#
directive|define
name|OPENMP_CLAUSE
parameter_list|(
name|Name
parameter_list|,
name|Class
parameter_list|)
define|\
value|RetTy Visit ## Class (PTR(Class) S) { DISPATCH(Class); }
include|#
directive|include
file|"clang/Basic/OpenMPKinds.def"
name|RetTy
name|Visit
argument_list|(
argument|PTR(OMPClause) S
argument_list|)
block|{
comment|// Top switch clause: visit each OMPClause.
switch|switch
condition|(
name|S
operator|->
name|getClauseKind
argument_list|()
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown clause kind!"
argument_list|)
expr_stmt|;
define|#
directive|define
name|OPENMP_CLAUSE
parameter_list|(
name|Name
parameter_list|,
name|Class
parameter_list|)
define|\
value|case OMPC_ ## Name : return Visit ## Class(static_cast<PTR(Class)>(S));
include|#
directive|include
file|"clang/Basic/OpenMPKinds.def"
block|}
block|}
comment|// Base case, ignore it. :)
name|RetTy
name|VisitOMPClause
argument_list|(
argument|PTR(OMPClause) Node
argument_list|)
block|{
return|return
name|RetTy
argument_list|()
return|;
block|}
undef|#
directive|undef
name|PTR
undef|#
directive|undef
name|DISPATCH
expr|}
block|;
name|template
operator|<
name|class
name|ImplClass
block|,
name|typename
name|RetTy
operator|=
name|void
operator|>
name|class
name|OMPClauseVisitor
operator|:
name|public
name|OMPClauseVisitorBase
operator|<
name|ImplClass
block|,
name|make_ptr
block|,
name|RetTy
operator|>
block|{}
block|;
name|template
operator|<
name|class
name|ImplClass
block|,
name|typename
name|RetTy
operator|=
name|void
operator|>
name|class
name|ConstOMPClauseVisitor
operator|:
name|public
name|OMPClauseVisitorBase
operator|<
name|ImplClass
block|,
name|make_const_ptr
block|,
name|RetTy
operator|>
block|{}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

