begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- CommentSema.h - Doxygen comment semantic analysis ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the semantic analysis class for Doxygen comments.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_COMMENT_SEMA_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_COMMENT_SEMA_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Diagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Comment.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Decl
decl_stmt|;
name|class
name|SourceMgr
decl_stmt|;
name|class
name|Preprocessor
decl_stmt|;
name|namespace
name|comments
block|{
name|class
name|CommandTraits
decl_stmt|;
name|class
name|Sema
block|{
name|Sema
argument_list|(
argument|const Sema&
argument_list|)
name|LLVM_DELETED_FUNCTION
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|Sema
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
decl_stmt|;
comment|/// Allocator for AST nodes.
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Allocator
expr_stmt|;
comment|/// Source manager for the comment being parsed.
specifier|const
name|SourceManager
modifier|&
name|SourceMgr
decl_stmt|;
name|DiagnosticsEngine
modifier|&
name|Diags
decl_stmt|;
name|CommandTraits
modifier|&
name|Traits
decl_stmt|;
specifier|const
name|Preprocessor
modifier|*
name|PP
decl_stmt|;
comment|/// Information about the declaration this comment is attached to.
name|DeclInfo
modifier|*
name|ThisDeclInfo
decl_stmt|;
comment|/// Comment AST nodes that correspond to parameter names in
comment|/// \c TemplateParameters.
comment|///
comment|/// Contains a valid value if \c DeclInfo->IsFilled is true.
name|llvm
operator|::
name|StringMap
operator|<
name|TParamCommandComment
operator|*
operator|>
name|TemplateParameterDocs
expr_stmt|;
comment|/// AST node for the \\brief command and its aliases.
specifier|const
name|BlockCommandComment
modifier|*
name|BriefCommand
decl_stmt|;
comment|/// AST node for the \\returns command and its aliases.
specifier|const
name|BlockCommandComment
modifier|*
name|ReturnsCommand
decl_stmt|;
name|DiagnosticBuilder
name|Diag
parameter_list|(
name|SourceLocation
name|Loc
parameter_list|,
name|unsigned
name|DiagID
parameter_list|)
block|{
return|return
name|Diags
operator|.
name|Report
argument_list|(
name|Loc
argument_list|,
name|DiagID
argument_list|)
return|;
block|}
comment|/// A stack of HTML tags that are currently open (not matched with closing
comment|/// tags).
name|SmallVector
operator|<
name|HTMLStartTagComment
operator|*
operator|,
literal|8
operator|>
name|HTMLOpenTags
expr_stmt|;
name|public
label|:
name|Sema
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Allocator
argument_list|,
specifier|const
name|SourceManager
operator|&
name|SourceMgr
argument_list|,
name|DiagnosticsEngine
operator|&
name|Diags
argument_list|,
name|CommandTraits
operator|&
name|Traits
argument_list|,
specifier|const
name|Preprocessor
operator|*
name|PP
argument_list|)
expr_stmt|;
name|void
name|setDecl
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
comment|/// Returns a copy of array, owned by Sema's allocator.
name|template
operator|<
name|typename
name|T
operator|>
name|ArrayRef
operator|<
name|T
operator|>
name|copyArray
argument_list|(
argument|ArrayRef<T> Source
argument_list|)
block|{
name|size_t
name|Size
operator|=
name|Source
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|Size
operator|!=
literal|0
condition|)
block|{
name|T
modifier|*
name|Mem
init|=
name|Allocator
operator|.
name|Allocate
operator|<
name|T
operator|>
operator|(
name|Size
operator|)
decl_stmt|;
name|std
operator|::
name|uninitialized_copy
argument_list|(
name|Source
operator|.
name|begin
argument_list|()
argument_list|,
name|Source
operator|.
name|end
argument_list|()
argument_list|,
name|Mem
argument_list|)
expr_stmt|;
return|return
name|llvm
operator|::
name|makeArrayRef
argument_list|(
name|Mem
argument_list|,
name|Size
argument_list|)
return|;
block|}
else|else
return|return
name|llvm
operator|::
name|makeArrayRef
argument_list|(
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|NULL
operator|)
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|ParagraphComment
modifier|*
name|actOnParagraphComment
argument_list|(
name|ArrayRef
operator|<
name|InlineContentComment
operator|*
operator|>
name|Content
argument_list|)
decl_stmt|;
name|BlockCommandComment
modifier|*
name|actOnBlockCommandStart
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|SourceLocation
name|LocEnd
parameter_list|,
name|unsigned
name|CommandID
parameter_list|)
function_decl|;
name|void
name|actOnBlockCommandArgs
argument_list|(
name|BlockCommandComment
operator|*
name|Command
argument_list|,
name|ArrayRef
operator|<
name|BlockCommandComment
operator|::
name|Argument
operator|>
name|Args
argument_list|)
decl_stmt|;
name|void
name|actOnBlockCommandFinish
parameter_list|(
name|BlockCommandComment
modifier|*
name|Command
parameter_list|,
name|ParagraphComment
modifier|*
name|Paragraph
parameter_list|)
function_decl|;
name|ParamCommandComment
modifier|*
name|actOnParamCommandStart
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|SourceLocation
name|LocEnd
parameter_list|,
name|unsigned
name|CommandID
parameter_list|)
function_decl|;
name|void
name|actOnParamCommandDirectionArg
parameter_list|(
name|ParamCommandComment
modifier|*
name|Command
parameter_list|,
name|SourceLocation
name|ArgLocBegin
parameter_list|,
name|SourceLocation
name|ArgLocEnd
parameter_list|,
name|StringRef
name|Arg
parameter_list|)
function_decl|;
name|void
name|actOnParamCommandParamNameArg
parameter_list|(
name|ParamCommandComment
modifier|*
name|Command
parameter_list|,
name|SourceLocation
name|ArgLocBegin
parameter_list|,
name|SourceLocation
name|ArgLocEnd
parameter_list|,
name|StringRef
name|Arg
parameter_list|)
function_decl|;
name|void
name|actOnParamCommandFinish
parameter_list|(
name|ParamCommandComment
modifier|*
name|Command
parameter_list|,
name|ParagraphComment
modifier|*
name|Paragraph
parameter_list|)
function_decl|;
name|TParamCommandComment
modifier|*
name|actOnTParamCommandStart
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|SourceLocation
name|LocEnd
parameter_list|,
name|unsigned
name|CommandID
parameter_list|)
function_decl|;
name|void
name|actOnTParamCommandParamNameArg
parameter_list|(
name|TParamCommandComment
modifier|*
name|Command
parameter_list|,
name|SourceLocation
name|ArgLocBegin
parameter_list|,
name|SourceLocation
name|ArgLocEnd
parameter_list|,
name|StringRef
name|Arg
parameter_list|)
function_decl|;
name|void
name|actOnTParamCommandFinish
parameter_list|(
name|TParamCommandComment
modifier|*
name|Command
parameter_list|,
name|ParagraphComment
modifier|*
name|Paragraph
parameter_list|)
function_decl|;
name|InlineCommandComment
modifier|*
name|actOnInlineCommand
parameter_list|(
name|SourceLocation
name|CommandLocBegin
parameter_list|,
name|SourceLocation
name|CommandLocEnd
parameter_list|,
name|unsigned
name|CommandID
parameter_list|)
function_decl|;
name|InlineCommandComment
modifier|*
name|actOnInlineCommand
parameter_list|(
name|SourceLocation
name|CommandLocBegin
parameter_list|,
name|SourceLocation
name|CommandLocEnd
parameter_list|,
name|unsigned
name|CommandID
parameter_list|,
name|SourceLocation
name|ArgLocBegin
parameter_list|,
name|SourceLocation
name|ArgLocEnd
parameter_list|,
name|StringRef
name|Arg
parameter_list|)
function_decl|;
name|InlineContentComment
modifier|*
name|actOnUnknownCommand
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|SourceLocation
name|LocEnd
parameter_list|,
name|StringRef
name|CommandName
parameter_list|)
function_decl|;
name|InlineContentComment
modifier|*
name|actOnUnknownCommand
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|SourceLocation
name|LocEnd
parameter_list|,
name|unsigned
name|CommandID
parameter_list|)
function_decl|;
name|TextComment
modifier|*
name|actOnText
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|SourceLocation
name|LocEnd
parameter_list|,
name|StringRef
name|Text
parameter_list|)
function_decl|;
name|VerbatimBlockComment
modifier|*
name|actOnVerbatimBlockStart
parameter_list|(
name|SourceLocation
name|Loc
parameter_list|,
name|unsigned
name|CommandID
parameter_list|)
function_decl|;
name|VerbatimBlockLineComment
modifier|*
name|actOnVerbatimBlockLine
parameter_list|(
name|SourceLocation
name|Loc
parameter_list|,
name|StringRef
name|Text
parameter_list|)
function_decl|;
name|void
name|actOnVerbatimBlockFinish
argument_list|(
name|VerbatimBlockComment
operator|*
name|Block
argument_list|,
name|SourceLocation
name|CloseNameLocBegin
argument_list|,
name|StringRef
name|CloseName
argument_list|,
name|ArrayRef
operator|<
name|VerbatimBlockLineComment
operator|*
operator|>
name|Lines
argument_list|)
decl_stmt|;
name|VerbatimLineComment
modifier|*
name|actOnVerbatimLine
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|unsigned
name|CommandID
parameter_list|,
name|SourceLocation
name|TextBegin
parameter_list|,
name|StringRef
name|Text
parameter_list|)
function_decl|;
name|HTMLStartTagComment
modifier|*
name|actOnHTMLStartTagStart
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|StringRef
name|TagName
parameter_list|)
function_decl|;
name|void
name|actOnHTMLStartTagFinish
argument_list|(
name|HTMLStartTagComment
operator|*
name|Tag
argument_list|,
name|ArrayRef
operator|<
name|HTMLStartTagComment
operator|::
name|Attribute
operator|>
name|Attrs
argument_list|,
name|SourceLocation
name|GreaterLoc
argument_list|,
name|bool
name|IsSelfClosing
argument_list|)
decl_stmt|;
name|HTMLEndTagComment
modifier|*
name|actOnHTMLEndTag
parameter_list|(
name|SourceLocation
name|LocBegin
parameter_list|,
name|SourceLocation
name|LocEnd
parameter_list|,
name|StringRef
name|TagName
parameter_list|)
function_decl|;
name|FullComment
modifier|*
name|actOnFullComment
argument_list|(
name|ArrayRef
operator|<
name|BlockContentComment
operator|*
operator|>
name|Blocks
argument_list|)
decl_stmt|;
name|void
name|checkBlockCommandEmptyParagraph
parameter_list|(
name|BlockCommandComment
modifier|*
name|Command
parameter_list|)
function_decl|;
name|void
name|checkReturnsCommand
parameter_list|(
specifier|const
name|BlockCommandComment
modifier|*
name|Command
parameter_list|)
function_decl|;
comment|/// Emit diagnostics about duplicate block commands that should be
comment|/// used only once per comment, e.g., \\brief and \\returns.
name|void
name|checkBlockCommandDuplicate
parameter_list|(
specifier|const
name|BlockCommandComment
modifier|*
name|Command
parameter_list|)
function_decl|;
name|void
name|checkDeprecatedCommand
parameter_list|(
specifier|const
name|BlockCommandComment
modifier|*
name|Comment
parameter_list|)
function_decl|;
comment|/// Resolve parameter names to parameter indexes in function declaration.
comment|/// Emit diagnostics about unknown parametrs.
name|void
name|resolveParamCommandIndexes
parameter_list|(
specifier|const
name|FullComment
modifier|*
name|FC
parameter_list|)
function_decl|;
name|bool
name|isFunctionDecl
parameter_list|()
function_decl|;
name|bool
name|isTemplateOrSpecialization
parameter_list|()
function_decl|;
name|ArrayRef
operator|<
specifier|const
name|ParmVarDecl
operator|*
operator|>
name|getParamVars
argument_list|()
expr_stmt|;
comment|/// Extract all important semantic information from
comment|/// \c ThisDeclInfo->ThisDecl into \c ThisDeclInfo members.
name|void
name|inspectThisDecl
parameter_list|()
function_decl|;
comment|/// Returns index of a function parameter with a given name.
name|unsigned
name|resolveParmVarReference
argument_list|(
name|StringRef
name|Name
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|ParmVarDecl
operator|*
operator|>
name|ParamVars
argument_list|)
decl_stmt|;
comment|/// Returns index of a function parameter with the name closest to a given
comment|/// typo.
name|unsigned
name|correctTypoInParmVarReference
argument_list|(
name|StringRef
name|Typo
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|ParmVarDecl
operator|*
operator|>
name|ParamVars
argument_list|)
decl_stmt|;
name|bool
name|resolveTParamReference
argument_list|(
name|StringRef
name|Name
argument_list|,
specifier|const
name|TemplateParameterList
operator|*
name|TemplateParameters
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|*
name|Position
argument_list|)
decl_stmt|;
name|StringRef
name|correctTypoInTParamReference
parameter_list|(
name|StringRef
name|Typo
parameter_list|,
specifier|const
name|TemplateParameterList
modifier|*
name|TemplateParameters
parameter_list|)
function_decl|;
name|InlineCommandComment
operator|::
name|RenderKind
name|getInlineCommandRenderKind
argument_list|(
argument|StringRef Name
argument_list|)
specifier|const
expr_stmt|;
block|}
empty_stmt|;
block|}
comment|// end namespace comments
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

