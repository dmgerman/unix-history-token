begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Attr.h - Classes for representing expressions ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the Attr interface and subclasses.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_ATTR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_ATTR_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSwitch.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/AttrKinds.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/VersionTuple.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_expr_stmt
name|using
name|llvm
operator|::
name|dyn_cast
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|IdentifierInfo
decl_stmt|;
name|class
name|ObjCInterfaceDecl
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|QualType
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|TypeSourceInfo
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// Defined in ASTContext.h
end_comment

begin_decl_stmt
name|void
modifier|*
name|operator
name|new
argument_list|(
name|size_t
name|Bytes
argument_list|,
specifier|const
name|clang
operator|::
name|ASTContext
operator|&
name|C
argument_list|,
name|size_t
name|Alignment
operator|=
literal|16
argument_list|)
name|throw
argument_list|()
decl_stmt|;
end_decl_stmt

begin_comment
comment|// FIXME: Being forced to not have a default argument here due to redeclaration
end_comment

begin_comment
comment|//        rules on default arguments sucks
end_comment

begin_decl_stmt
name|void
modifier|*
name|operator
name|new
index|[]
argument_list|(
name|size_t
name|Bytes
argument_list|,
specifier|const
name|clang
operator|::
name|ASTContext
operator|&
name|C
argument_list|,
name|size_t
name|Alignment
argument_list|)
name|throw
argument_list|()
decl_stmt|;
end_decl_stmt

begin_comment
comment|// It is good practice to pair new/delete operators.  Also, MSVC gives many
end_comment

begin_comment
comment|// warnings if a matching delete overload is not declared, even though the
end_comment

begin_comment
comment|// throw() spec guarantees it will not be implicitly called.
end_comment

begin_decl_stmt
name|void
name|operator
name|delete
argument_list|(
name|void
operator|*
name|Ptr
argument_list|,
specifier|const
name|clang
operator|::
name|ASTContext
operator|&
name|C
argument_list|,
name|size_t
argument_list|)
name|throw
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|operator
name|delete
index|[]
argument_list|(
name|void
operator|*
name|Ptr
argument_list|,
specifier|const
name|clang
operator|::
name|ASTContext
operator|&
name|C
argument_list|,
name|size_t
argument_list|)
name|throw
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// Attr - This represents one attribute.
name|class
name|Attr
block|{
name|private
label|:
name|SourceLocation
name|Loc
decl_stmt|;
name|unsigned
name|AttrKind
range|:
literal|16
decl_stmt|;
name|protected
label|:
name|bool
name|Inherited
range|:
literal|1
decl_stmt|;
name|virtual
operator|~
name|Attr
argument_list|()
expr_stmt|;
name|void
modifier|*
name|operator
name|new
parameter_list|(
name|size_t
name|bytes
parameter_list|)
function|throw
parameter_list|()
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Attrs cannot be allocated with regular 'new'."
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
name|data
parameter_list|)
function|throw
parameter_list|()
block|{
name|assert
argument_list|(
literal|0
operator|&&
literal|"Attrs cannot be released with regular 'delete'."
argument_list|)
expr_stmt|;
block|}
name|public
label|:
comment|// Forward so that the regular new and delete do not hide global ones.
name|void
modifier|*
name|operator
name|new
parameter_list|(
name|size_t
name|Bytes
parameter_list|,
name|ASTContext
modifier|&
name|C
parameter_list|,
name|size_t
name|Alignment
init|=
literal|16
parameter_list|)
function|throw
parameter_list|()
block|{
return|return
operator|::
name|operator
name|new
argument_list|(
name|Bytes
argument_list|,
name|C
argument_list|,
name|Alignment
argument_list|)
return|;
block|}
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
name|Ptr
parameter_list|,
name|ASTContext
modifier|&
name|C
parameter_list|,
name|size_t
name|Alignment
parameter_list|)
function|throw
parameter_list|()
block|{
return|return
operator|::
name|operator
name|delete
argument_list|(
name|Ptr
argument_list|,
name|C
argument_list|,
name|Alignment
argument_list|)
return|;
block|}
name|protected
label|:
name|Attr
argument_list|(
argument|attr::Kind AK
argument_list|,
argument|SourceLocation L
argument_list|)
block|:
name|Loc
argument_list|(
name|L
argument_list|)
operator|,
name|AttrKind
argument_list|(
name|AK
argument_list|)
operator|,
name|Inherited
argument_list|(
argument|false
argument_list|)
block|{}
name|public
operator|:
name|attr
operator|::
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|attr
operator|::
name|Kind
operator|>
operator|(
name|AttrKind
operator|)
return|;
block|}
name|SourceLocation
name|getLocation
argument_list|()
specifier|const
block|{
return|return
name|Loc
return|;
block|}
name|void
name|setLocation
parameter_list|(
name|SourceLocation
name|L
parameter_list|)
block|{
name|Loc
operator|=
name|L
expr_stmt|;
block|}
name|bool
name|isInherited
argument_list|()
specifier|const
block|{
return|return
name|Inherited
return|;
block|}
comment|// Clone this attribute.
name|virtual
name|Attr
modifier|*
name|clone
argument_list|(
name|ASTContext
operator|&
name|C
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
comment|// Implement isa/cast/dyncast/etc.
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|Attr
modifier|*
parameter_list|)
block|{
return|return
name|true
return|;
block|}
block|}
empty_stmt|;
name|class
name|InheritableAttr
range|:
name|public
name|Attr
block|{
name|protected
operator|:
name|InheritableAttr
argument_list|(
argument|attr::Kind AK
argument_list|,
argument|SourceLocation L
argument_list|)
operator|:
name|Attr
argument_list|(
argument|AK
argument_list|,
argument|L
argument_list|)
block|{}
name|public
operator|:
name|void
name|setInherited
argument_list|(
argument|bool I
argument_list|)
block|{
name|Inherited
operator|=
name|I
block|; }
comment|// Implement isa/cast/dyncast/etc.
specifier|static
name|bool
name|classof
argument_list|(
argument|const Attr *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|<=
name|attr
operator|::
name|LAST_INHERITABLE
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const InheritableAttr *
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
name|class
name|InheritableParamAttr
operator|:
name|public
name|InheritableAttr
block|{
name|protected
operator|:
name|InheritableParamAttr
argument_list|(
argument|attr::Kind AK
argument_list|,
argument|SourceLocation L
argument_list|)
operator|:
name|InheritableAttr
argument_list|(
argument|AK
argument_list|,
argument|L
argument_list|)
block|{}
name|public
operator|:
comment|// Implement isa/cast/dyncast/etc.
specifier|static
name|bool
name|classof
argument_list|(
argument|const Attr *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|<=
name|attr
operator|::
name|LAST_INHERITABLE_PARAM
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const InheritableParamAttr *
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
include|#
directive|include
file|"clang/AST/Attrs.inc"
comment|/// AttrVec - A vector of Attr, which is how they are stored on the AST.
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|Attr
operator|*
operator|,
literal|2
operator|>
name|AttrVec
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
specifier|const
name|Attr
operator|*
operator|,
literal|2
operator|>
name|ConstAttrVec
expr_stmt|;
comment|/// DestroyAttrs - Destroy the contents of an AttrVec.
specifier|inline
name|void
name|DestroyAttrs
argument_list|(
argument|AttrVec& V
argument_list|,
argument|ASTContext&C
argument_list|)
block|{ }
comment|/// specific_attr_iterator - Iterates over a subrange of an AttrVec, only
comment|/// providing attributes that are of a specifc type.
name|template
operator|<
name|typename
name|SpecificAttr
operator|>
name|class
name|specific_attr_iterator
block|{
comment|/// Current - The current, underlying iterator.
comment|/// In order to ensure we don't dereference an invalid iterator unless
comment|/// specifically requested, we don't necessarily advance this all the
comment|/// way. Instead, we advance it when an operation is requested; if the
comment|/// operation is acting on what should be a past-the-end iterator,
comment|/// then we offer no guarantees, but this way we do not dererence a
comment|/// past-the-end iterator when we move to a past-the-end position.
name|mutable
name|AttrVec
operator|::
name|const_iterator
name|Current
block|;
name|void
name|AdvanceToNext
argument_list|()
specifier|const
block|{
while|while
condition|(
operator|!
name|llvm
operator|::
name|isa
operator|<
name|SpecificAttr
operator|>
operator|(
operator|*
name|Current
operator|)
condition|)
operator|++
name|Current
expr_stmt|;
block|}
name|void
name|AdvanceToNext
argument_list|(
argument|AttrVec::const_iterator I
argument_list|)
specifier|const
block|{
while|while
condition|(
name|Current
operator|!=
name|I
operator|&&
operator|!
name|llvm
operator|::
name|isa
operator|<
name|SpecificAttr
operator|>
operator|(
operator|*
name|Current
operator|)
condition|)
operator|++
name|Current
expr_stmt|;
block|}
name|public
operator|:
typedef|typedef
name|SpecificAttr
modifier|*
name|value_type
typedef|;
typedef|typedef
name|SpecificAttr
modifier|*
name|reference
typedef|;
typedef|typedef
name|SpecificAttr
modifier|*
name|pointer
typedef|;
typedef|typedef
name|std
operator|::
name|forward_iterator_tag
name|iterator_category
expr_stmt|;
typedef|typedef
name|std
operator|::
name|ptrdiff_t
name|difference_type
expr_stmt|;
name|specific_attr_iterator
argument_list|()
operator|:
name|Current
argument_list|()
block|{ }
name|explicit
name|specific_attr_iterator
argument_list|(
argument|AttrVec::const_iterator i
argument_list|)
operator|:
name|Current
argument_list|(
argument|i
argument_list|)
block|{ }
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|AdvanceToNext
argument_list|()
block|;
return|return
name|llvm
operator|::
name|cast
operator|<
name|SpecificAttr
operator|>
operator|(
operator|*
name|Current
operator|)
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
decl|const
block|{
name|AdvanceToNext
argument_list|()
expr_stmt|;
return|return
name|llvm
operator|::
name|cast
operator|<
name|SpecificAttr
operator|>
operator|(
operator|*
name|Current
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|specific_attr_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|Current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|specific_attr_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|specific_attr_iterator
name|Tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
operator|(
operator|*
name|this
operator|)
block|;
return|return
name|Tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
operator|(
name|specific_attr_iterator
name|Left
operator|,
name|specific_attr_iterator
name|Right
operator|)
block|{
if|if
condition|(
name|Left
operator|.
name|Current
operator|<
name|Right
operator|.
name|Current
condition|)
name|Left
operator|.
name|AdvanceToNext
argument_list|(
name|Right
operator|.
name|Current
argument_list|)
expr_stmt|;
else|else
name|Right
operator|.
name|AdvanceToNext
argument_list|(
name|Left
operator|.
name|Current
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|Left
operator|.
name|Current
operator|==
name|Right
operator|.
name|Current
return|;
end_return

begin_expr_stmt
unit|}   friend
name|bool
name|operator
operator|!=
operator|(
name|specific_attr_iterator
name|Left
operator|,
name|specific_attr_iterator
name|Right
operator|)
block|{
return|return
operator|!
operator|(
name|Left
operator|==
name|Right
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|specific_attr_iterator
operator|<
name|T
operator|>
name|specific_attr_begin
argument_list|(
argument|const AttrVec& vec
argument_list|)
block|{
return|return
name|specific_attr_iterator
operator|<
name|T
operator|>
operator|(
name|vec
operator|.
name|begin
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|specific_attr_iterator
operator|<
name|T
operator|>
name|specific_attr_end
argument_list|(
argument|const AttrVec& vec
argument_list|)
block|{
return|return
name|specific_attr_iterator
operator|<
name|T
operator|>
operator|(
name|vec
operator|.
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|bool
name|hasSpecificAttr
argument_list|(
argument|const AttrVec& vec
argument_list|)
block|{
return|return
name|specific_attr_begin
operator|<
name|T
operator|>
operator|(
name|vec
operator|)
operator|!=
name|specific_attr_end
operator|<
name|T
operator|>
operator|(
name|vec
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|T
operator|*
name|getSpecificAttr
argument_list|(
argument|const AttrVec& vec
argument_list|)
block|{
name|specific_attr_iterator
operator|<
name|T
operator|>
name|i
operator|=
name|specific_attr_begin
operator|<
name|T
operator|>
operator|(
name|vec
operator|)
block|;
if|if
condition|(
name|i
operator|!=
name|specific_attr_end
operator|<
name|T
operator|>
operator|(
name|vec
operator|)
condition|)
return|return
operator|*
name|i
return|;
else|else
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_comment
comment|/// getMaxAlignment - Returns the highest alignment value found among
end_comment

begin_comment
comment|/// AlignedAttrs in an AttrVec, or 0 if there are none.
end_comment

begin_function
specifier|inline
name|unsigned
name|getMaxAttrAlignment
parameter_list|(
specifier|const
name|AttrVec
modifier|&
name|V
parameter_list|,
name|ASTContext
modifier|&
name|Ctx
parameter_list|)
block|{
name|unsigned
name|Align
init|=
literal|0
decl_stmt|;
name|specific_attr_iterator
operator|<
name|AlignedAttr
operator|>
name|i
argument_list|(
name|V
operator|.
name|begin
argument_list|()
argument_list|)
operator|,
name|e
argument_list|(
name|V
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|Align
operator|=
name|std
operator|::
name|max
argument_list|(
name|Align
argument_list|,
name|i
operator|->
name|getAlignment
argument_list|(
name|Ctx
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Align
return|;
block|}
end_function

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

