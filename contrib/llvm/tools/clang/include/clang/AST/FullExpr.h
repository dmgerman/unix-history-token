begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- FullExpr.h - C++ full expression class -----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the FullExpr interface, to be used for type safe handling
end_comment

begin_comment
comment|//  of full expressions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  Full expressions are described in C++ [intro.execution]p12.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_FULLEXPR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_FULLEXPR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|CXXTemporary
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|FullExpr
block|{
struct|struct
name|ExprAndTemporaries
block|{
name|Expr
modifier|*
name|SubExpr
decl_stmt|;
name|unsigned
name|NumTemps
decl_stmt|;
typedef|typedef
name|CXXTemporary
modifier|*
modifier|*
name|temps_iterator
typedef|;
name|temps_iterator
name|temps_begin
parameter_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|CXXTemporary
operator|*
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|temps_iterator
name|temps_end
parameter_list|()
block|{
return|return
name|temps_begin
argument_list|()
operator|+
name|NumTemps
return|;
block|}
block|}
struct|;
typedef|typedef
name|llvm
operator|::
name|PointerUnion
operator|<
name|Expr
operator|*
operator|,
name|ExprAndTemporaries
operator|*
operator|>
name|SubExprTy
expr_stmt|;
name|SubExprTy
name|SubExpr
decl_stmt|;
name|FullExpr
argument_list|()
block|{ }
name|public
label|:
specifier|static
name|FullExpr
name|Create
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|,
name|Expr
modifier|*
name|SubExpr
parameter_list|,
name|CXXTemporary
modifier|*
modifier|*
name|Temps
parameter_list|,
name|unsigned
name|NumTemps
parameter_list|)
function_decl|;
name|void
name|Destroy
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|)
function_decl|;
name|Expr
modifier|*
name|getExpr
parameter_list|()
block|{
if|if
condition|(
name|Expr
modifier|*
name|E
init|=
name|SubExpr
operator|.
name|dyn_cast
operator|<
name|Expr
operator|*
operator|>
operator|(
operator|)
condition|)
return|return
name|E
return|;
return|return
name|SubExpr
operator|.
name|get
operator|<
name|ExprAndTemporaries
operator|*
operator|>
operator|(
operator|)
operator|->
name|SubExpr
return|;
block|}
specifier|const
name|Expr
operator|*
name|getExpr
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|FullExpr
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getExpr
argument_list|()
return|;
block|}
typedef|typedef
name|CXXTemporary
modifier|*
modifier|*
name|temps_iterator
typedef|;
name|temps_iterator
name|temps_begin
parameter_list|()
block|{
if|if
condition|(
name|ExprAndTemporaries
modifier|*
name|ET
init|=
name|SubExpr
operator|.
name|dyn_cast
operator|<
name|ExprAndTemporaries
operator|*
operator|>
operator|(
operator|)
condition|)
return|return
name|ET
operator|->
name|temps_begin
argument_list|()
return|;
return|return
literal|0
return|;
block|}
name|temps_iterator
name|temps_end
parameter_list|()
block|{
if|if
condition|(
name|ExprAndTemporaries
modifier|*
name|ET
init|=
name|SubExpr
operator|.
name|dyn_cast
operator|<
name|ExprAndTemporaries
operator|*
operator|>
operator|(
operator|)
condition|)
return|return
name|ET
operator|->
name|temps_end
argument_list|()
return|;
return|return
literal|0
return|;
block|}
name|void
operator|*
name|getAsOpaquePtr
argument_list|()
specifier|const
block|{
return|return
name|SubExpr
operator|.
name|getOpaqueValue
argument_list|()
return|;
block|}
specifier|static
name|FullExpr
name|getFromOpaquePtr
parameter_list|(
name|void
modifier|*
name|Ptr
parameter_list|)
block|{
name|FullExpr
name|E
decl_stmt|;
name|E
operator|.
name|SubExpr
operator|=
name|SubExprTy
operator|::
name|getFromOpaqueValue
argument_list|(
name|Ptr
argument_list|)
expr_stmt|;
return|return
name|E
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

