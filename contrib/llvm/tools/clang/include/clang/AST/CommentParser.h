begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- CommentParser.h - Doxygen comment parser ---------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the Doxygen comment parser.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_COMMENT_PARSER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_COMMENT_PARSER_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Diagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CommentLexer.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Comment.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CommentSema.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|SourceManager
decl_stmt|;
name|namespace
name|comments
block|{
name|class
name|CommandTraits
decl_stmt|;
comment|/// Doxygen comment parser.
name|class
name|Parser
block|{
name|Parser
argument_list|(
specifier|const
name|Parser
operator|&
argument_list|)
expr_stmt|;
comment|// DO NOT IMPLEMENT
name|void
name|operator
init|=
operator|(
specifier|const
name|Parser
operator|&
operator|)
decl_stmt|;
comment|// DO NOT IMPLEMENT
name|friend
name|class
name|TextTokenRetokenizer
decl_stmt|;
name|Lexer
modifier|&
name|L
decl_stmt|;
name|Sema
modifier|&
name|S
decl_stmt|;
comment|/// Allocator for anything that goes into AST nodes.
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Allocator
expr_stmt|;
comment|/// Source manager for the comment being parsed.
specifier|const
name|SourceManager
modifier|&
name|SourceMgr
decl_stmt|;
name|DiagnosticsEngine
modifier|&
name|Diags
decl_stmt|;
name|DiagnosticBuilder
name|Diag
parameter_list|(
name|SourceLocation
name|Loc
parameter_list|,
name|unsigned
name|DiagID
parameter_list|)
block|{
return|return
name|Diags
operator|.
name|Report
argument_list|(
name|Loc
argument_list|,
name|DiagID
argument_list|)
return|;
block|}
specifier|const
name|CommandTraits
modifier|&
name|Traits
decl_stmt|;
comment|/// Current lookahead token.  We can safely assume that all tokens are from
comment|/// a single source file.
name|Token
name|Tok
decl_stmt|;
comment|/// A stack of additional lookahead tokens.
name|SmallVector
operator|<
name|Token
operator|,
literal|8
operator|>
name|MoreLATokens
expr_stmt|;
name|void
name|consumeToken
parameter_list|()
block|{
if|if
condition|(
name|MoreLATokens
operator|.
name|empty
argument_list|()
condition|)
name|L
operator|.
name|lex
argument_list|(
name|Tok
argument_list|)
expr_stmt|;
else|else
block|{
name|Tok
operator|=
name|MoreLATokens
operator|.
name|back
argument_list|()
expr_stmt|;
name|MoreLATokens
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
block|}
name|void
name|putBack
parameter_list|(
specifier|const
name|Token
modifier|&
name|OldTok
parameter_list|)
block|{
name|MoreLATokens
operator|.
name|push_back
argument_list|(
name|Tok
argument_list|)
expr_stmt|;
name|Tok
operator|=
name|OldTok
expr_stmt|;
block|}
name|void
name|putBack
argument_list|(
name|ArrayRef
operator|<
name|Token
operator|>
name|Toks
argument_list|)
block|{
if|if
condition|(
name|Toks
operator|.
name|empty
argument_list|()
condition|)
return|return;
name|MoreLATokens
operator|.
name|push_back
argument_list|(
name|Tok
argument_list|)
expr_stmt|;
for|for
control|(
specifier|const
name|Token
modifier|*
name|I
init|=
operator|&
name|Toks
operator|.
name|back
argument_list|()
init|,
modifier|*
name|B
init|=
operator|&
name|Toks
operator|.
name|front
argument_list|()
init|;
name|I
operator|!=
name|B
condition|;
operator|--
name|I
control|)
block|{
name|MoreLATokens
operator|.
name|push_back
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
name|Tok
operator|=
name|Toks
index|[
literal|0
index|]
expr_stmt|;
block|}
name|public
label|:
name|Parser
argument_list|(
name|Lexer
operator|&
name|L
argument_list|,
name|Sema
operator|&
name|S
argument_list|,
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Allocator
argument_list|,
specifier|const
name|SourceManager
operator|&
name|SourceMgr
argument_list|,
name|DiagnosticsEngine
operator|&
name|Diags
argument_list|,
specifier|const
name|CommandTraits
operator|&
name|Traits
argument_list|)
expr_stmt|;
comment|/// Parse arguments for \\param command.
name|void
name|parseParamCommandArgs
parameter_list|(
name|ParamCommandComment
modifier|*
name|PC
parameter_list|,
name|TextTokenRetokenizer
modifier|&
name|Retokenizer
parameter_list|)
function_decl|;
comment|/// Parse arguments for \\tparam command.
name|void
name|parseTParamCommandArgs
parameter_list|(
name|TParamCommandComment
modifier|*
name|TPC
parameter_list|,
name|TextTokenRetokenizer
modifier|&
name|Retokenizer
parameter_list|)
function_decl|;
name|void
name|parseBlockCommandArgs
parameter_list|(
name|BlockCommandComment
modifier|*
name|BC
parameter_list|,
name|TextTokenRetokenizer
modifier|&
name|Retokenizer
parameter_list|,
name|unsigned
name|NumArgs
parameter_list|)
function_decl|;
name|BlockCommandComment
modifier|*
name|parseBlockCommand
parameter_list|()
function_decl|;
name|InlineCommandComment
modifier|*
name|parseInlineCommand
parameter_list|()
function_decl|;
name|HTMLStartTagComment
modifier|*
name|parseHTMLStartTag
parameter_list|()
function_decl|;
name|HTMLEndTagComment
modifier|*
name|parseHTMLEndTag
parameter_list|()
function_decl|;
name|BlockContentComment
modifier|*
name|parseParagraphOrBlockCommand
parameter_list|()
function_decl|;
name|VerbatimBlockComment
modifier|*
name|parseVerbatimBlock
parameter_list|()
function_decl|;
name|VerbatimLineComment
modifier|*
name|parseVerbatimLine
parameter_list|()
function_decl|;
name|BlockContentComment
modifier|*
name|parseBlockContent
parameter_list|()
function_decl|;
name|FullComment
modifier|*
name|parseFullComment
parameter_list|()
function_decl|;
block|}
empty_stmt|;
block|}
comment|// end namespace comments
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

