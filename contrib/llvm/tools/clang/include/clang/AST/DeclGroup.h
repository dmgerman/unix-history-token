begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- DeclGroup.h - Classes for representing groups of Decls -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the DeclGroup, DeclGroupRef, and OwningDeclGroup classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_DECLGROUP_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_DECLGROUP_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TrailingObjects.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|ASTContext
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|DeclGroup
decl_stmt|;
name|class
name|DeclGroupIterator
decl_stmt|;
name|class
name|DeclGroup
name|final
range|:
name|private
name|llvm
operator|::
name|TrailingObjects
operator|<
name|DeclGroup
decl_stmt|,
name|Decl
modifier|*
decl|>
block|{
comment|// FIXME: Include a TypeSpecifier object.
name|unsigned
name|NumDecls
decl_stmt|;
name|private
label|:
name|DeclGroup
argument_list|()
operator|:
name|NumDecls
argument_list|(
literal|0
argument_list|)
block|{}
name|DeclGroup
argument_list|(
argument|unsigned numdecls
argument_list|,
argument|Decl** decls
argument_list|)
expr_stmt|;
name|public
label|:
specifier|static
name|DeclGroup
modifier|*
name|Create
parameter_list|(
name|ASTContext
modifier|&
name|C
parameter_list|,
name|Decl
modifier|*
modifier|*
name|Decls
parameter_list|,
name|unsigned
name|NumDecls
parameter_list|)
function_decl|;
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|NumDecls
return|;
block|}
name|Decl
modifier|*
modifier|&
name|operator
function|[]
parameter_list|(
name|unsigned
name|i
parameter_list|)
block|{
name|assert
argument_list|(
name|i
operator|<
name|NumDecls
operator|&&
literal|"Out-of-bounds access."
argument_list|)
expr_stmt|;
return|return
name|getTrailingObjects
operator|<
name|Decl
operator|*
operator|>
operator|(
operator|)
index|[
name|i
index|]
return|;
block|}
name|Decl
modifier|*
specifier|const
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|NumDecls
operator|&&
literal|"Out-of-bounds access."
argument_list|)
expr_stmt|;
return|return
name|getTrailingObjects
operator|<
name|Decl
operator|*
operator|>
operator|(
operator|)
index|[
name|i
index|]
return|;
block|}
name|friend
name|TrailingObjects
decl_stmt|;
block|}
empty_stmt|;
name|class
name|DeclGroupRef
block|{
comment|// Note this is not a PointerIntPair because we need the address of the
comment|// non-group case to be valid as a Decl** for iteration.
enum|enum
name|Kind
block|{
name|SingleDeclKind
init|=
literal|0x0
block|,
name|DeclGroupKind
init|=
literal|0x1
block|,
name|Mask
init|=
literal|0x1
block|}
enum|;
name|Decl
modifier|*
name|D
decl_stmt|;
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
call|(
name|Kind
call|)
argument_list|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|D
operator|)
operator|&
name|Mask
argument_list|)
return|;
block|}
name|public
label|:
name|DeclGroupRef
argument_list|()
operator|:
name|D
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|explicit
name|DeclGroupRef
argument_list|(
name|Decl
operator|*
name|d
argument_list|)
operator|:
name|D
argument_list|(
argument|d
argument_list|)
block|{}
name|explicit
name|DeclGroupRef
argument_list|(
name|DeclGroup
operator|*
name|dg
argument_list|)
operator|:
name|D
argument_list|(
argument|(Decl*) (reinterpret_cast<uintptr_t>(dg) | DeclGroupKind)
argument_list|)
block|{}
specifier|static
name|DeclGroupRef
name|Create
argument_list|(
argument|ASTContext&C
argument_list|,
argument|Decl **Decls
argument_list|,
argument|unsigned NumDecls
argument_list|)
block|{
if|if
condition|(
name|NumDecls
operator|==
literal|0
condition|)
return|return
name|DeclGroupRef
argument_list|()
return|;
if|if
condition|(
name|NumDecls
operator|==
literal|1
condition|)
return|return
name|DeclGroupRef
argument_list|(
name|Decls
index|[
literal|0
index|]
argument_list|)
return|;
return|return
name|DeclGroupRef
argument_list|(
name|DeclGroup
operator|::
name|Create
argument_list|(
name|C
argument_list|,
name|Decls
argument_list|,
name|NumDecls
argument_list|)
argument_list|)
return|;
block|}
typedef|typedef
name|Decl
modifier|*
modifier|*
name|iterator
typedef|;
typedef|typedef
name|Decl
modifier|*
specifier|const
modifier|*
name|const_iterator
typedef|;
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|D
operator|==
name|nullptr
return|;
block|}
name|bool
name|isSingleDecl
argument_list|()
specifier|const
block|{
return|return
name|getKind
argument_list|()
operator|==
name|SingleDeclKind
return|;
block|}
name|bool
name|isDeclGroup
argument_list|()
specifier|const
block|{
return|return
name|getKind
argument_list|()
operator|==
name|DeclGroupKind
return|;
block|}
name|Decl
modifier|*
name|getSingleDecl
parameter_list|()
block|{
name|assert
argument_list|(
name|isSingleDecl
argument_list|()
operator|&&
literal|"Isn't a single decl"
argument_list|)
expr_stmt|;
return|return
name|D
return|;
block|}
specifier|const
name|Decl
operator|*
name|getSingleDecl
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|DeclGroupRef
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getSingleDecl
argument_list|()
return|;
block|}
name|DeclGroup
modifier|&
name|getDeclGroup
parameter_list|()
block|{
name|assert
argument_list|(
name|isDeclGroup
argument_list|()
operator|&&
literal|"Isn't a declgroup"
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
operator|(
name|DeclGroup
operator|*
operator|)
operator|(
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|D
operator|)
operator|&
operator|~
name|Mask
operator|)
operator|)
return|;
block|}
specifier|const
name|DeclGroup
operator|&
name|getDeclGroup
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|DeclGroupRef
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getDeclGroup
argument_list|()
return|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
if|if
condition|(
name|isSingleDecl
argument_list|()
condition|)
return|return
name|D
condition|?
operator|&
name|D
else|:
name|nullptr
return|;
return|return
operator|&
name|getDeclGroup
argument_list|()
index|[
literal|0
index|]
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
if|if
condition|(
name|isSingleDecl
argument_list|()
condition|)
return|return
name|D
condition|?
operator|&
name|D
operator|+
literal|1
else|:
name|nullptr
return|;
name|DeclGroup
modifier|&
name|G
init|=
name|getDeclGroup
argument_list|()
decl_stmt|;
return|return
operator|&
name|G
index|[
literal|0
index|]
operator|+
name|G
operator|.
name|size
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isSingleDecl
argument_list|()
condition|)
return|return
name|D
operator|?
operator|&
name|D
operator|:
name|nullptr
return|;
return|return
operator|&
name|getDeclGroup
argument_list|()
index|[
literal|0
index|]
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
if|if
condition|(
name|isSingleDecl
argument_list|()
condition|)
return|return
name|D
operator|?
operator|&
name|D
operator|+
literal|1
operator|:
name|nullptr
return|;
specifier|const
name|DeclGroup
operator|&
name|G
operator|=
name|getDeclGroup
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|&
name|G
index|[
literal|0
index|]
operator|+
name|G
operator|.
name|size
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}    void
operator|*
name|getAsOpaquePtr
argument_list|()
specifier|const
block|{
return|return
name|D
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|DeclGroupRef
name|getFromOpaquePtr
parameter_list|(
name|void
modifier|*
name|Ptr
parameter_list|)
block|{
name|DeclGroupRef
name|X
decl_stmt|;
name|X
operator|.
name|D
operator|=
name|static_cast
operator|<
name|Decl
operator|*
operator|>
operator|(
name|Ptr
operator|)
expr_stmt|;
return|return
name|X
return|;
block|}
end_function

begin_comment
unit|};  }
comment|// end clang namespace
end_comment

begin_macro
unit|namespace
name|llvm
end_macro

begin_block
block|{
comment|// DeclGroupRef is "like a pointer", implement PointerLikeTypeTraits.
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|PointerLikeTypeTraits
expr_stmt|;
name|template
operator|<
operator|>
name|class
name|PointerLikeTypeTraits
operator|<
name|clang
operator|::
name|DeclGroupRef
operator|>
block|{
name|public
operator|:
specifier|static
specifier|inline
name|void
operator|*
name|getAsVoidPointer
argument_list|(
argument|clang::DeclGroupRef P
argument_list|)
block|{
return|return
name|P
operator|.
name|getAsOpaquePtr
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|clang
operator|::
name|DeclGroupRef
name|getFromVoidPointer
argument_list|(
argument|void *P
argument_list|)
block|{
return|return
name|clang
operator|::
name|DeclGroupRef
operator|::
name|getFromOpaquePtr
argument_list|(
name|P
argument_list|)
return|;
block|}
enum|enum
block|{
name|NumLowBitsAvailable
init|=
literal|0
block|}
enum|;
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

