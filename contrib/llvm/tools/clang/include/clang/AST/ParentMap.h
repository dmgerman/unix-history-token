begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ParentMap.h - Mappings from Stmts to their Parents -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the ParentMap class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_PARENTMAP_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_PARENTMAP_H
end_define

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Stmt
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|ParentMap
block|{
name|void
modifier|*
name|Impl
decl_stmt|;
name|public
label|:
name|ParentMap
argument_list|(
name|Stmt
operator|*
name|ASTRoot
argument_list|)
expr_stmt|;
operator|~
name|ParentMap
argument_list|()
expr_stmt|;
comment|/// \brief Adds and/or updates the parent/child-relations of the complete
comment|/// stmt tree of S. All children of S including indirect descendants are
comment|/// visited and updated or inserted but not the parents of S.
name|void
name|addStmt
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|)
function_decl|;
name|Stmt
modifier|*
name|getParent
argument_list|(
name|Stmt
operator|*
argument_list|)
decl|const
decl_stmt|;
name|Stmt
modifier|*
name|getParentIgnoreParens
argument_list|(
name|Stmt
operator|*
argument_list|)
decl|const
decl_stmt|;
name|Stmt
modifier|*
name|getParentIgnoreParenCasts
argument_list|(
name|Stmt
operator|*
argument_list|)
decl|const
decl_stmt|;
name|Stmt
modifier|*
name|getOuterParenParent
argument_list|(
name|Stmt
operator|*
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|Stmt
modifier|*
name|getParent
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|)
decl|const
block|{
return|return
name|getParent
argument_list|(
name|const_cast
operator|<
name|Stmt
operator|*
operator|>
operator|(
name|S
operator|)
argument_list|)
return|;
block|}
specifier|const
name|Stmt
modifier|*
name|getParentIgnoreParens
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|)
decl|const
block|{
return|return
name|getParentIgnoreParens
argument_list|(
name|const_cast
operator|<
name|Stmt
operator|*
operator|>
operator|(
name|S
operator|)
argument_list|)
return|;
block|}
specifier|const
name|Stmt
modifier|*
name|getParentIgnoreParenCasts
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|)
decl|const
block|{
return|return
name|getParentIgnoreParenCasts
argument_list|(
name|const_cast
operator|<
name|Stmt
operator|*
operator|>
operator|(
name|S
operator|)
argument_list|)
return|;
block|}
name|bool
name|hasParent
argument_list|(
name|Stmt
operator|*
name|S
argument_list|)
decl|const
block|{
return|return
name|getParent
argument_list|(
name|S
argument_list|)
operator|!=
literal|0
return|;
block|}
name|bool
name|isConsumedExpr
argument_list|(
name|Expr
operator|*
name|E
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isConsumedExpr
argument_list|(
specifier|const
name|Expr
operator|*
name|E
argument_list|)
decl|const
block|{
return|return
name|isConsumedExpr
argument_list|(
name|const_cast
operator|<
name|Expr
operator|*
operator|>
operator|(
name|E
operator|)
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

