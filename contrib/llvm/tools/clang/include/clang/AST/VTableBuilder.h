begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- VTableBuilder.h - C++ vtable layout builder --------------*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This contains code dealing with generation of the layout of virtual tables.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_VTABLEBUILDER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_VTABLEBUILDER_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/BaseSubobject.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/CXXInheritance.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/GlobalDecl.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/RecordLayout.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/ABI.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SetVector.h"
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CXXRecordDecl
decl_stmt|;
comment|/// VTableComponent - Represents a single component in a vtable.
name|class
name|VTableComponent
block|{
name|public
label|:
enum|enum
name|Kind
block|{
name|CK_VCallOffset
block|,
name|CK_VBaseOffset
block|,
name|CK_OffsetToTop
block|,
name|CK_RTTI
block|,
name|CK_FunctionPointer
block|,
comment|/// CK_CompleteDtorPointer - A pointer to the complete destructor.
name|CK_CompleteDtorPointer
block|,
comment|/// CK_DeletingDtorPointer - A pointer to the deleting destructor.
name|CK_DeletingDtorPointer
block|,
comment|/// CK_UnusedFunctionPointer - In some cases, a vtable function pointer
comment|/// will end up never being called. Such vtable function pointers are
comment|/// represented as a CK_UnusedFunctionPointer.
name|CK_UnusedFunctionPointer
block|}
enum|;
name|VTableComponent
argument_list|()
block|{ }
specifier|static
name|VTableComponent
name|MakeVCallOffset
parameter_list|(
name|CharUnits
name|Offset
parameter_list|)
block|{
return|return
name|VTableComponent
argument_list|(
name|CK_VCallOffset
argument_list|,
name|Offset
argument_list|)
return|;
block|}
specifier|static
name|VTableComponent
name|MakeVBaseOffset
parameter_list|(
name|CharUnits
name|Offset
parameter_list|)
block|{
return|return
name|VTableComponent
argument_list|(
name|CK_VBaseOffset
argument_list|,
name|Offset
argument_list|)
return|;
block|}
specifier|static
name|VTableComponent
name|MakeOffsetToTop
parameter_list|(
name|CharUnits
name|Offset
parameter_list|)
block|{
return|return
name|VTableComponent
argument_list|(
name|CK_OffsetToTop
argument_list|,
name|Offset
argument_list|)
return|;
block|}
specifier|static
name|VTableComponent
name|MakeRTTI
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|)
block|{
return|return
name|VTableComponent
argument_list|(
name|CK_RTTI
argument_list|,
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|RD
operator|)
argument_list|)
return|;
block|}
specifier|static
name|VTableComponent
name|MakeFunction
parameter_list|(
specifier|const
name|CXXMethodDecl
modifier|*
name|MD
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|isa
operator|<
name|CXXDestructorDecl
operator|>
operator|(
name|MD
operator|)
operator|&&
literal|"Don't use MakeFunction with destructors!"
argument_list|)
expr_stmt|;
return|return
name|VTableComponent
argument_list|(
name|CK_FunctionPointer
argument_list|,
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|MD
operator|)
argument_list|)
return|;
block|}
specifier|static
name|VTableComponent
name|MakeCompleteDtor
parameter_list|(
specifier|const
name|CXXDestructorDecl
modifier|*
name|DD
parameter_list|)
block|{
return|return
name|VTableComponent
argument_list|(
name|CK_CompleteDtorPointer
argument_list|,
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|DD
operator|)
argument_list|)
return|;
block|}
specifier|static
name|VTableComponent
name|MakeDeletingDtor
parameter_list|(
specifier|const
name|CXXDestructorDecl
modifier|*
name|DD
parameter_list|)
block|{
return|return
name|VTableComponent
argument_list|(
name|CK_DeletingDtorPointer
argument_list|,
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|DD
operator|)
argument_list|)
return|;
block|}
specifier|static
name|VTableComponent
name|MakeUnusedFunction
parameter_list|(
specifier|const
name|CXXMethodDecl
modifier|*
name|MD
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|isa
operator|<
name|CXXDestructorDecl
operator|>
operator|(
name|MD
operator|)
operator|&&
literal|"Don't use MakeUnusedFunction with destructors!"
argument_list|)
expr_stmt|;
return|return
name|VTableComponent
argument_list|(
name|CK_UnusedFunctionPointer
argument_list|,
name|reinterpret_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|MD
operator|)
argument_list|)
return|;
block|}
specifier|static
name|VTableComponent
name|getFromOpaqueInteger
parameter_list|(
name|uint64_t
name|I
parameter_list|)
block|{
return|return
name|VTableComponent
argument_list|(
name|I
argument_list|)
return|;
block|}
comment|/// getKind - Get the kind of this vtable component.
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
call|(
name|Kind
call|)
argument_list|(
name|Value
operator|&
literal|0x7
argument_list|)
return|;
block|}
name|CharUnits
name|getVCallOffset
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|CK_VCallOffset
operator|&&
literal|"Invalid component kind!"
argument_list|)
block|;
return|return
name|getOffset
argument_list|()
return|;
block|}
name|CharUnits
name|getVBaseOffset
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|CK_VBaseOffset
operator|&&
literal|"Invalid component kind!"
argument_list|)
block|;
return|return
name|getOffset
argument_list|()
return|;
block|}
name|CharUnits
name|getOffsetToTop
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|CK_OffsetToTop
operator|&&
literal|"Invalid component kind!"
argument_list|)
block|;
return|return
name|getOffset
argument_list|()
return|;
block|}
specifier|const
name|CXXRecordDecl
operator|*
name|getRTTIDecl
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|CK_RTTI
operator|&&
literal|"Invalid component kind!"
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|CXXRecordDecl
operator|*
operator|>
operator|(
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|const
name|CXXMethodDecl
operator|*
name|getFunctionDecl
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|CK_FunctionPointer
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|CXXMethodDecl
operator|*
operator|>
operator|(
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|const
name|CXXDestructorDecl
operator|*
name|getDestructorDecl
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|getKind
argument_list|()
operator|==
name|CK_CompleteDtorPointer
operator|||
name|getKind
argument_list|()
operator|==
name|CK_DeletingDtorPointer
operator|)
operator|&&
literal|"Invalid component kind!"
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|CXXDestructorDecl
operator|*
operator|>
operator|(
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|const
name|CXXMethodDecl
operator|*
name|getUnusedFunctionDecl
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|CK_UnusedFunctionPointer
argument_list|)
block|;
return|return
name|reinterpret_cast
operator|<
name|CXXMethodDecl
operator|*
operator|>
operator|(
name|getPointer
argument_list|()
operator|)
return|;
block|}
name|private
label|:
name|VTableComponent
argument_list|(
argument|Kind ComponentKind
argument_list|,
argument|CharUnits Offset
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|ComponentKind
operator|==
name|CK_VCallOffset
operator|||
name|ComponentKind
operator|==
name|CK_VBaseOffset
operator|||
name|ComponentKind
operator|==
name|CK_OffsetToTop
operator|)
operator|&&
literal|"Invalid component kind!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|Offset
operator|.
name|getQuantity
argument_list|()
operator|<
operator|(
literal|1LL
operator|<<
literal|56
operator|)
operator|&&
literal|"Offset is too big!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|Offset
operator|.
name|getQuantity
argument_list|()
operator|>=
operator|-
operator|(
literal|1LL
operator|<<
literal|56
operator|)
operator|&&
literal|"Offset is too small!"
argument_list|)
expr_stmt|;
name|Value
operator|=
operator|(
name|uint64_t
argument_list|(
name|Offset
operator|.
name|getQuantity
argument_list|()
argument_list|)
operator|<<
literal|3
operator|)
operator||
name|ComponentKind
expr_stmt|;
block|}
name|VTableComponent
argument_list|(
argument|Kind ComponentKind
argument_list|,
argument|uintptr_t Ptr
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|ComponentKind
operator|==
name|CK_RTTI
operator|||
name|ComponentKind
operator|==
name|CK_FunctionPointer
operator|||
name|ComponentKind
operator|==
name|CK_CompleteDtorPointer
operator|||
name|ComponentKind
operator|==
name|CK_DeletingDtorPointer
operator|||
name|ComponentKind
operator|==
name|CK_UnusedFunctionPointer
operator|)
operator|&&
literal|"Invalid component kind!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|Ptr
operator|&
literal|7
operator|)
operator|==
literal|0
operator|&&
literal|"Pointer not sufficiently aligned!"
argument_list|)
expr_stmt|;
name|Value
operator|=
name|Ptr
operator||
name|ComponentKind
expr_stmt|;
block|}
name|CharUnits
name|getOffset
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|getKind
argument_list|()
operator|==
name|CK_VCallOffset
operator|||
name|getKind
argument_list|()
operator|==
name|CK_VBaseOffset
operator|||
name|getKind
argument_list|()
operator|==
name|CK_OffsetToTop
operator|)
operator|&&
literal|"Invalid component kind!"
argument_list|)
block|;
return|return
name|CharUnits
operator|::
name|fromQuantity
argument_list|(
name|Value
operator|>>
literal|3
argument_list|)
return|;
block|}
name|uintptr_t
name|getPointer
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
operator|(
name|getKind
argument_list|()
operator|==
name|CK_RTTI
operator|||
name|getKind
argument_list|()
operator|==
name|CK_FunctionPointer
operator|||
name|getKind
argument_list|()
operator|==
name|CK_CompleteDtorPointer
operator|||
name|getKind
argument_list|()
operator|==
name|CK_DeletingDtorPointer
operator|||
name|getKind
argument_list|()
operator|==
name|CK_UnusedFunctionPointer
operator|)
operator|&&
literal|"Invalid component kind!"
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|uintptr_t
operator|>
operator|(
name|Value
operator|&
operator|~
literal|7ULL
operator|)
return|;
block|}
name|explicit
name|VTableComponent
argument_list|(
argument|uint64_t Value
argument_list|)
block|:
name|Value
argument_list|(
argument|Value
argument_list|)
block|{ }
comment|/// The kind is stored in the lower 3 bits of the value. For offsets, we
comment|/// make use of the facts that classes can't be larger than 2^55 bytes,
comment|/// so we store the offset in the lower part of the 61 bytes that remain.
comment|/// (The reason that we're not simply using a PointerIntPair here is that we
comment|/// need the offsets to be 64-bit, even when on a 32-bit machine).
name|int64_t
name|Value
decl_stmt|;
block|}
empty_stmt|;
name|class
name|VTableLayout
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|uint64_t
operator|,
name|ThunkInfo
operator|>
name|VTableThunkTy
expr_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|ThunkInfo
operator|,
literal|1
operator|>
name|ThunkInfoVectorTy
expr_stmt|;
typedef|typedef
specifier|const
name|VTableComponent
modifier|*
name|vtable_component_iterator
typedef|;
typedef|typedef
specifier|const
name|VTableThunkTy
modifier|*
name|vtable_thunk_iterator
typedef|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|BaseSubobject
operator|,
name|uint64_t
operator|>
name|AddressPointsMapTy
expr_stmt|;
name|private
label|:
name|uint64_t
name|NumVTableComponents
decl_stmt|;
name|llvm
operator|::
name|OwningArrayPtr
operator|<
name|VTableComponent
operator|>
name|VTableComponents
expr_stmt|;
comment|/// VTableThunks - Contains thunks needed by vtables.
name|uint64_t
name|NumVTableThunks
decl_stmt|;
name|llvm
operator|::
name|OwningArrayPtr
operator|<
name|VTableThunkTy
operator|>
name|VTableThunks
expr_stmt|;
comment|/// Address points - Address points for all vtables.
name|AddressPointsMapTy
name|AddressPoints
decl_stmt|;
name|bool
name|IsMicrosoftABI
decl_stmt|;
name|public
label|:
name|VTableLayout
argument_list|(
argument|uint64_t NumVTableComponents
argument_list|,
argument|const VTableComponent *VTableComponents
argument_list|,
argument|uint64_t NumVTableThunks
argument_list|,
argument|const VTableThunkTy *VTableThunks
argument_list|,
argument|const AddressPointsMapTy&AddressPoints
argument_list|,
argument|bool IsMicrosoftABI
argument_list|)
empty_stmt|;
operator|~
name|VTableLayout
argument_list|()
expr_stmt|;
name|uint64_t
name|getNumVTableComponents
argument_list|()
specifier|const
block|{
return|return
name|NumVTableComponents
return|;
block|}
name|vtable_component_iterator
name|vtable_component_begin
argument_list|()
specifier|const
block|{
return|return
name|VTableComponents
operator|.
name|get
argument_list|()
return|;
block|}
name|vtable_component_iterator
name|vtable_component_end
argument_list|()
specifier|const
block|{
return|return
name|VTableComponents
operator|.
name|get
argument_list|()
operator|+
name|NumVTableComponents
return|;
block|}
name|uint64_t
name|getNumVTableThunks
argument_list|()
specifier|const
block|{
return|return
name|NumVTableThunks
return|;
block|}
name|vtable_thunk_iterator
name|vtable_thunk_begin
argument_list|()
specifier|const
block|{
return|return
name|VTableThunks
operator|.
name|get
argument_list|()
return|;
block|}
name|vtable_thunk_iterator
name|vtable_thunk_end
argument_list|()
specifier|const
block|{
return|return
name|VTableThunks
operator|.
name|get
argument_list|()
operator|+
name|NumVTableThunks
return|;
block|}
name|uint64_t
name|getAddressPoint
argument_list|(
name|BaseSubobject
name|Base
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|AddressPoints
operator|.
name|count
argument_list|(
name|Base
argument_list|)
operator|&&
literal|"Did not find address point!"
argument_list|)
expr_stmt|;
name|uint64_t
name|AddressPoint
init|=
name|AddressPoints
operator|.
name|lookup
argument_list|(
name|Base
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|AddressPoint
operator|!=
literal|0
operator|||
name|IsMicrosoftABI
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|IsMicrosoftABI
expr_stmt|;
return|return
name|AddressPoint
return|;
block|}
specifier|const
name|AddressPointsMapTy
operator|&
name|getAddressPoints
argument_list|()
specifier|const
block|{
return|return
name|AddressPoints
return|;
block|}
block|}
empty_stmt|;
name|class
name|VTableContext
block|{
name|ASTContext
modifier|&
name|Context
decl_stmt|;
name|public
label|:
typedef|typedef
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|uint64_t
operator|,
name|ThunkInfo
operator|>
operator|,
literal|1
operator|>
name|VTableThunksTy
expr_stmt|;
typedef|typedef
name|SmallVector
operator|<
name|ThunkInfo
operator|,
literal|1
operator|>
name|ThunkInfoVectorTy
expr_stmt|;
name|private
label|:
name|bool
name|IsMicrosoftABI
decl_stmt|;
comment|/// MethodVTableIndices - Contains the index (relative to the vtable address
comment|/// point) where the function pointer for a virtual function is stored.
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|GlobalDecl
operator|,
name|int64_t
operator|>
name|MethodVTableIndicesTy
expr_stmt|;
name|MethodVTableIndicesTy
name|MethodVTableIndices
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|CXXRecordDecl
operator|*
operator|,
specifier|const
name|VTableLayout
operator|*
operator|>
name|VTableLayoutMapTy
expr_stmt|;
name|VTableLayoutMapTy
name|VTableLayouts
decl_stmt|;
comment|/// NumVirtualFunctionPointers - Contains the number of virtual function
comment|/// pointers in the vtable for a given record decl.
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|CXXRecordDecl
operator|*
operator|,
name|uint64_t
operator|>
name|NumVirtualFunctionPointers
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|CXXRecordDecl
operator|*
operator|,
specifier|const
name|CXXRecordDecl
operator|*
operator|>
name|ClassPairTy
expr_stmt|;
comment|/// VirtualBaseClassOffsetOffsets - Contains the vtable offset (relative to
comment|/// the address point) in chars where the offsets for virtual bases of a class
comment|/// are stored.
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|ClassPairTy
operator|,
name|CharUnits
operator|>
name|VirtualBaseClassOffsetOffsetsMapTy
expr_stmt|;
name|VirtualBaseClassOffsetOffsetsMapTy
name|VirtualBaseClassOffsetOffsets
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|CXXMethodDecl
operator|*
operator|,
name|ThunkInfoVectorTy
operator|>
name|ThunksMapTy
expr_stmt|;
comment|/// Thunks - Contains all thunks that a given method decl will need.
name|ThunksMapTy
name|Thunks
decl_stmt|;
name|void
name|ComputeMethodVTableIndices
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|)
function_decl|;
comment|/// ComputeVTableRelatedInformation - Compute and store all vtable related
comment|/// information (vtable layout, vbase offset offsets, thunks etc) for the
comment|/// given record decl.
name|void
name|ComputeVTableRelatedInformation
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|)
function_decl|;
comment|/// ErrorUnsupported - Print out an error that the v-table layout code
comment|/// doesn't support the particular C++ feature yet.
name|void
name|ErrorUnsupported
parameter_list|(
name|StringRef
name|Feature
parameter_list|,
name|SourceLocation
name|Location
parameter_list|)
function_decl|;
name|public
label|:
name|VTableContext
argument_list|(
name|ASTContext
operator|&
name|Context
argument_list|)
expr_stmt|;
operator|~
name|VTableContext
argument_list|()
expr_stmt|;
name|bool
name|isMicrosoftABI
argument_list|()
specifier|const
block|{
comment|// FIXME: Currently, this method is only used in the VTableContext and
comment|// VTableBuilder code which is ABI-specific. Probably we can remove it
comment|// when we add a layer of abstraction for vtable generation.
return|return
name|IsMicrosoftABI
return|;
block|}
specifier|const
name|VTableLayout
modifier|&
name|getVTableLayout
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|)
block|{
name|ComputeVTableRelatedInformation
argument_list|(
name|RD
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|VTableLayouts
operator|.
name|count
argument_list|(
name|RD
argument_list|)
operator|&&
literal|"No layout for this record decl!"
argument_list|)
expr_stmt|;
return|return
operator|*
name|VTableLayouts
index|[
name|RD
index|]
return|;
block|}
name|VTableLayout
modifier|*
name|createConstructionVTableLayout
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|MostDerivedClass
parameter_list|,
name|CharUnits
name|MostDerivedClassOffset
parameter_list|,
name|bool
name|MostDerivedClassIsVirtual
parameter_list|,
specifier|const
name|CXXRecordDecl
modifier|*
name|LayoutClass
parameter_list|)
function_decl|;
specifier|const
name|ThunkInfoVectorTy
modifier|*
name|getThunkInfo
parameter_list|(
specifier|const
name|CXXMethodDecl
modifier|*
name|MD
parameter_list|)
block|{
name|ComputeVTableRelatedInformation
argument_list|(
name|MD
operator|->
name|getParent
argument_list|()
argument_list|)
expr_stmt|;
name|ThunksMapTy
operator|::
name|const_iterator
name|I
operator|=
name|Thunks
operator|.
name|find
argument_list|(
name|MD
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|==
name|Thunks
operator|.
name|end
argument_list|()
condition|)
block|{
comment|// We did not find a thunk for this method.
return|return
literal|0
return|;
block|}
return|return
operator|&
name|I
operator|->
name|second
return|;
block|}
comment|/// getNumVirtualFunctionPointers - Return the number of virtual function
comment|/// pointers in the vtable for a given record decl.
name|uint64_t
name|getNumVirtualFunctionPointers
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|)
function_decl|;
comment|/// getMethodVTableIndex - Return the index (relative to the vtable address
comment|/// point) where the function pointer for the given virtual function is
comment|/// stored.
name|uint64_t
name|getMethodVTableIndex
parameter_list|(
name|GlobalDecl
name|GD
parameter_list|)
function_decl|;
comment|/// getVirtualBaseOffsetOffset - Return the offset in chars (relative to the
comment|/// vtable address point) where the offset of the virtual base that contains
comment|/// the given base is stored, otherwise, if no virtual base contains the given
comment|/// class, return 0.  Base must be a virtual base class or an unambigious
comment|/// base.
name|CharUnits
name|getVirtualBaseOffsetOffset
parameter_list|(
specifier|const
name|CXXRecordDecl
modifier|*
name|RD
parameter_list|,
specifier|const
name|CXXRecordDecl
modifier|*
name|VBase
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

