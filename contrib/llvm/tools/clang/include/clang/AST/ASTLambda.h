begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ASTLambda.h - Lambda Helper Functions --------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file provides some common utility functions for processing
end_comment

begin_comment
comment|/// Lambda related AST Constructs.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_LAMBDA_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_LAMBDA_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/DeclCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/DeclTemplate.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
specifier|inline
name|StringRef
name|getLambdaStaticInvokerName
parameter_list|()
block|{
return|return
literal|"__invoke"
return|;
block|}
comment|// This function returns true if M is a specialization, a template,
comment|// or a non-generic lambda call operator.
specifier|inline
name|bool
name|isLambdaCallOperator
parameter_list|(
specifier|const
name|CXXMethodDecl
modifier|*
name|MD
parameter_list|)
block|{
specifier|const
name|CXXRecordDecl
modifier|*
name|LambdaClass
init|=
name|MD
operator|->
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|LambdaClass
operator|||
operator|!
name|LambdaClass
operator|->
name|isLambda
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|MD
operator|->
name|getOverloadedOperator
argument_list|()
operator|==
name|OO_Call
return|;
block|}
specifier|inline
name|bool
name|isLambdaCallOperator
parameter_list|(
specifier|const
name|DeclContext
modifier|*
name|DC
parameter_list|)
block|{
if|if
condition|(
operator|!
name|DC
operator|||
operator|!
name|isa
operator|<
name|CXXMethodDecl
operator|>
operator|(
name|DC
operator|)
condition|)
return|return
name|false
return|;
return|return
name|isLambdaCallOperator
argument_list|(
name|cast
operator|<
name|CXXMethodDecl
operator|>
operator|(
name|DC
operator|)
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|isGenericLambdaCallOperatorSpecialization
parameter_list|(
specifier|const
name|CXXMethodDecl
modifier|*
name|MD
parameter_list|)
block|{
if|if
condition|(
operator|!
name|MD
condition|)
return|return
name|false
return|;
specifier|const
name|CXXRecordDecl
modifier|*
name|LambdaClass
init|=
name|MD
operator|->
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|LambdaClass
operator|&&
name|LambdaClass
operator|->
name|isGenericLambda
argument_list|()
condition|)
return|return
name|isLambdaCallOperator
argument_list|(
name|MD
argument_list|)
operator|&&
name|MD
operator|->
name|isFunctionTemplateSpecialization
argument_list|()
return|;
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|isLambdaConversionOperator
parameter_list|(
name|CXXConversionDecl
modifier|*
name|C
parameter_list|)
block|{
return|return
name|C
condition|?
name|C
operator|->
name|getParent
argument_list|()
operator|->
name|isLambda
argument_list|()
else|:
name|false
return|;
block|}
specifier|inline
name|bool
name|isLambdaConversionOperator
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|)
block|{
if|if
condition|(
operator|!
name|D
condition|)
return|return
name|false
return|;
if|if
condition|(
name|CXXConversionDecl
modifier|*
name|Conv
init|=
name|dyn_cast
operator|<
name|CXXConversionDecl
operator|>
operator|(
name|D
operator|)
condition|)
return|return
name|isLambdaConversionOperator
argument_list|(
name|Conv
argument_list|)
return|;
if|if
condition|(
name|FunctionTemplateDecl
modifier|*
name|F
init|=
name|dyn_cast
operator|<
name|FunctionTemplateDecl
operator|>
operator|(
name|D
operator|)
condition|)
if|if
condition|(
name|CXXConversionDecl
modifier|*
name|Conv
init|=
name|dyn_cast_or_null
operator|<
name|CXXConversionDecl
operator|>
operator|(
name|F
operator|->
name|getTemplatedDecl
argument_list|()
operator|)
condition|)
return|return
name|isLambdaConversionOperator
argument_list|(
name|Conv
argument_list|)
return|;
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|isGenericLambdaCallOperatorSpecialization
parameter_list|(
name|DeclContext
modifier|*
name|DC
parameter_list|)
block|{
return|return
name|isGenericLambdaCallOperatorSpecialization
argument_list|(
name|dyn_cast
operator|<
name|CXXMethodDecl
operator|>
operator|(
name|DC
operator|)
argument_list|)
return|;
block|}
comment|// This returns the parent DeclContext ensuring that the correct
comment|// parent DeclContext is returned for Lambdas
specifier|inline
name|DeclContext
modifier|*
name|getLambdaAwareParentOfDeclContext
parameter_list|(
name|DeclContext
modifier|*
name|DC
parameter_list|)
block|{
if|if
condition|(
name|isLambdaCallOperator
argument_list|(
name|DC
argument_list|)
condition|)
return|return
name|DC
operator|->
name|getParent
argument_list|()
operator|->
name|getParent
argument_list|()
return|;
else|else
return|return
name|DC
operator|->
name|getParent
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_AST_LAMBDA_H
end_comment

end_unit

