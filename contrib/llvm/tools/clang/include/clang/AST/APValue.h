begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- APValue.h - Union class for APFloat/APSInt/Complex -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the APValue class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_APVALUE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_APVALUE_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APFloat.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerIntPair.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerUnion.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|AddrLabelExpr
decl_stmt|;
name|class
name|ASTContext
decl_stmt|;
name|class
name|CharUnits
decl_stmt|;
name|class
name|DiagnosticBuilder
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|FieldDecl
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|ValueDecl
decl_stmt|;
name|class
name|CXXRecordDecl
decl_stmt|;
name|class
name|QualType
decl_stmt|;
comment|/// APValue - This class implements a discriminated union of [uninitialized]
comment|/// [APSInt] [APFloat], [Complex APSInt] [Complex APFloat], [Expr + Offset],
comment|/// [Vector: N * APValue], [Array: N * APValue]
name|class
name|APValue
block|{
typedef|typedef
name|llvm
operator|::
name|APSInt
name|APSInt
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|APFloat
name|APFloat
expr_stmt|;
name|public
label|:
enum|enum
name|ValueKind
block|{
name|Uninitialized
block|,
name|Int
block|,
name|Float
block|,
name|ComplexInt
block|,
name|ComplexFloat
block|,
name|LValue
block|,
name|Vector
block|,
name|Array
block|,
name|Struct
block|,
name|Union
block|,
name|MemberPointer
block|,
name|AddrLabelDiff
block|}
enum|;
typedef|typedef
name|llvm
operator|::
name|PointerUnion
operator|<
specifier|const
name|ValueDecl
operator|*
operator|,
specifier|const
name|Expr
operator|*
operator|>
name|LValueBase
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|PointerIntPair
operator|<
specifier|const
name|Decl
operator|*
operator|,
literal|1
operator|,
name|bool
operator|>
name|BaseOrMemberType
expr_stmt|;
union|union
name|LValuePathEntry
block|{
comment|/// BaseOrMember - The FieldDecl or CXXRecordDecl indicating the next item
comment|/// in the path. An opaque value of type BaseOrMemberType.
name|void
modifier|*
name|BaseOrMember
decl_stmt|;
comment|/// ArrayIndex - The array index of the next item in the path.
name|uint64_t
name|ArrayIndex
decl_stmt|;
block|}
union|;
struct|struct
name|NoLValuePath
block|{}
struct|;
struct|struct
name|UninitArray
block|{}
struct|;
struct|struct
name|UninitStruct
block|{}
struct|;
name|private
label|:
name|ValueKind
name|Kind
decl_stmt|;
struct|struct
name|ComplexAPSInt
block|{
name|APSInt
name|Real
decl_stmt|,
name|Imag
decl_stmt|;
name|ComplexAPSInt
argument_list|()
operator|:
name|Real
argument_list|(
literal|1
argument_list|)
operator|,
name|Imag
argument_list|(
literal|1
argument_list|)
block|{}
block|}
struct|;
struct|struct
name|ComplexAPFloat
block|{
name|APFloat
name|Real
decl_stmt|,
name|Imag
decl_stmt|;
name|ComplexAPFloat
argument_list|()
operator|:
name|Real
argument_list|(
literal|0.0
argument_list|)
operator|,
name|Imag
argument_list|(
literal|0.0
argument_list|)
block|{}
block|}
struct|;
struct_decl|struct
name|LV
struct_decl|;
struct|struct
name|Vec
block|{
name|APValue
modifier|*
name|Elts
decl_stmt|;
name|unsigned
name|NumElts
decl_stmt|;
name|Vec
argument_list|()
operator|:
name|Elts
argument_list|(
name|nullptr
argument_list|)
operator|,
name|NumElts
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|Vec
argument_list|()
block|{
name|delete
index|[]
name|Elts
block|; }
block|}
struct|;
struct|struct
name|Arr
block|{
name|APValue
modifier|*
name|Elts
decl_stmt|;
name|unsigned
name|NumElts
decl_stmt|,
name|ArrSize
decl_stmt|;
name|Arr
argument_list|(
argument|unsigned NumElts
argument_list|,
argument|unsigned ArrSize
argument_list|)
empty_stmt|;
operator|~
name|Arr
argument_list|()
expr_stmt|;
block|}
struct|;
struct|struct
name|StructData
block|{
name|APValue
modifier|*
name|Elts
decl_stmt|;
name|unsigned
name|NumBases
decl_stmt|;
name|unsigned
name|NumFields
decl_stmt|;
name|StructData
argument_list|(
argument|unsigned NumBases
argument_list|,
argument|unsigned NumFields
argument_list|)
empty_stmt|;
operator|~
name|StructData
argument_list|()
expr_stmt|;
block|}
struct|;
struct|struct
name|UnionData
block|{
specifier|const
name|FieldDecl
modifier|*
name|Field
decl_stmt|;
name|APValue
modifier|*
name|Value
decl_stmt|;
name|UnionData
argument_list|()
expr_stmt|;
operator|~
name|UnionData
argument_list|()
expr_stmt|;
block|}
struct|;
struct|struct
name|AddrLabelDiffData
block|{
specifier|const
name|AddrLabelExpr
modifier|*
name|LHSExpr
decl_stmt|;
specifier|const
name|AddrLabelExpr
modifier|*
name|RHSExpr
decl_stmt|;
block|}
struct|;
struct_decl|struct
name|MemberPointerData
struct_decl|;
comment|// We ensure elsewhere that Data is big enough for LV and MemberPointerData.
typedef|typedef
name|llvm
operator|::
name|AlignedCharArrayUnion
operator|<
name|void
operator|*
operator|,
name|APSInt
operator|,
name|APFloat
operator|,
name|ComplexAPSInt
operator|,
name|ComplexAPFloat
operator|,
name|Vec
operator|,
name|Arr
operator|,
name|StructData
operator|,
name|UnionData
operator|,
name|AddrLabelDiffData
operator|>
name|DataType
expr_stmt|;
specifier|static
specifier|const
name|size_t
name|DataSize
init|=
sizeof|sizeof
argument_list|(
name|DataType
argument_list|)
decl_stmt|;
name|DataType
name|Data
decl_stmt|;
name|public
label|:
name|APValue
argument_list|()
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{}
name|explicit
name|APValue
argument_list|(
argument|APSInt I
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeInt
argument_list|()
block|;
name|setInt
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|I
argument_list|)
argument_list|)
block|;   }
name|explicit
name|APValue
argument_list|(
argument|APFloat F
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeFloat
argument_list|()
block|;
name|setFloat
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|F
argument_list|)
argument_list|)
block|;   }
name|explicit
name|APValue
argument_list|(
argument|const APValue *E
argument_list|,
argument|unsigned N
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeVector
argument_list|()
block|;
name|setVector
argument_list|(
name|E
argument_list|,
name|N
argument_list|)
block|;   }
name|APValue
argument_list|(
argument|APSInt R
argument_list|,
argument|APSInt I
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeComplexInt
argument_list|()
block|;
name|setComplexInt
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|R
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|I
argument_list|)
argument_list|)
block|;   }
name|APValue
argument_list|(
argument|APFloat R
argument_list|,
argument|APFloat I
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeComplexFloat
argument_list|()
block|;
name|setComplexFloat
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|R
argument_list|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|I
argument_list|)
argument_list|)
block|;   }
name|APValue
argument_list|(
specifier|const
name|APValue
operator|&
name|RHS
argument_list|)
expr_stmt|;
name|APValue
argument_list|(
name|APValue
operator|&&
name|RHS
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|swap
argument_list|(
name|RHS
argument_list|)
block|; }
name|APValue
argument_list|(
argument|LValueBase B
argument_list|,
argument|const CharUnits&O
argument_list|,
argument|NoLValuePath N
argument_list|,
argument|unsigned CallIndex
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeLValue
argument_list|()
block|;
name|setLValue
argument_list|(
name|B
argument_list|,
name|O
argument_list|,
name|N
argument_list|,
name|CallIndex
argument_list|)
block|;   }
name|APValue
argument_list|(
argument|LValueBase B
argument_list|,
argument|const CharUnits&O
argument_list|,
argument|ArrayRef<LValuePathEntry> Path
argument_list|,
argument|bool OnePastTheEnd
argument_list|,
argument|unsigned CallIndex
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeLValue
argument_list|()
block|;
name|setLValue
argument_list|(
name|B
argument_list|,
name|O
argument_list|,
name|Path
argument_list|,
name|OnePastTheEnd
argument_list|,
name|CallIndex
argument_list|)
block|;   }
name|APValue
argument_list|(
argument|UninitArray
argument_list|,
argument|unsigned InitElts
argument_list|,
argument|unsigned Size
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeArray
argument_list|(
name|InitElts
argument_list|,
name|Size
argument_list|)
block|;   }
name|APValue
argument_list|(
argument|UninitStruct
argument_list|,
argument|unsigned B
argument_list|,
argument|unsigned M
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeStruct
argument_list|(
name|B
argument_list|,
name|M
argument_list|)
block|;   }
name|explicit
name|APValue
argument_list|(
specifier|const
name|FieldDecl
operator|*
name|D
argument_list|,
specifier|const
name|APValue
operator|&
name|V
operator|=
name|APValue
argument_list|()
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeUnion
argument_list|()
block|;
name|setUnion
argument_list|(
name|D
argument_list|,
name|V
argument_list|)
block|;   }
name|APValue
argument_list|(
argument|const ValueDecl *Member
argument_list|,
argument|bool IsDerivedMember
argument_list|,
argument|ArrayRef<const CXXRecordDecl*> Path
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeMemberPointer
argument_list|(
name|Member
argument_list|,
name|IsDerivedMember
argument_list|,
name|Path
argument_list|)
block|;   }
name|APValue
argument_list|(
specifier|const
name|AddrLabelExpr
operator|*
name|LHSExpr
argument_list|,
specifier|const
name|AddrLabelExpr
operator|*
name|RHSExpr
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeAddrLabelDiff
argument_list|()
block|;
name|setAddrLabelDiff
argument_list|(
name|LHSExpr
argument_list|,
name|RHSExpr
argument_list|)
block|;   }
operator|~
name|APValue
argument_list|()
block|{
name|MakeUninit
argument_list|()
block|;   }
comment|/// \brief Returns whether the object performed allocations.
comment|///
comment|/// If APValues are constructed via placement new, \c needsCleanup()
comment|/// indicates whether the destructor must be called in order to correctly
comment|/// free all allocated memory.
name|bool
name|needsCleanup
argument_list|()
specifier|const
expr_stmt|;
comment|/// \brief Swaps the contents of this and the given APValue.
name|void
name|swap
parameter_list|(
name|APValue
modifier|&
name|RHS
parameter_list|)
function_decl|;
name|ValueKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|bool
name|isUninit
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Uninitialized
return|;
block|}
name|bool
name|isInt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Int
return|;
block|}
name|bool
name|isFloat
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Float
return|;
block|}
name|bool
name|isComplexInt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|ComplexInt
return|;
block|}
name|bool
name|isComplexFloat
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|ComplexFloat
return|;
block|}
name|bool
name|isLValue
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|LValue
return|;
block|}
name|bool
name|isVector
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Vector
return|;
block|}
name|bool
name|isArray
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Array
return|;
block|}
name|bool
name|isStruct
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Struct
return|;
block|}
name|bool
name|isUnion
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Union
return|;
block|}
name|bool
name|isMemberPointer
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|MemberPointer
return|;
block|}
name|bool
name|isAddrLabelDiff
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|AddrLabelDiff
return|;
block|}
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|void
name|printPretty
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|ASTContext
operator|&
name|Ctx
argument_list|,
name|QualType
name|Ty
argument_list|)
decl|const
decl_stmt|;
name|std
operator|::
name|string
name|getAsString
argument_list|(
argument|ASTContext&Ctx
argument_list|,
argument|QualType Ty
argument_list|)
specifier|const
expr_stmt|;
name|APSInt
modifier|&
name|getInt
parameter_list|()
block|{
name|assert
argument_list|(
name|isInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
name|APSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
return|;
block|}
specifier|const
name|APSInt
operator|&
name|getInt
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getInt
argument_list|()
return|;
block|}
name|APFloat
modifier|&
name|getFloat
parameter_list|()
block|{
name|assert
argument_list|(
name|isFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
name|APFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
return|;
block|}
specifier|const
name|APFloat
operator|&
name|getFloat
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getFloat
argument_list|()
return|;
block|}
name|APSInt
modifier|&
name|getComplexIntReal
parameter_list|()
block|{
name|assert
argument_list|(
name|isComplexInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ComplexAPSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Real
return|;
block|}
specifier|const
name|APSInt
operator|&
name|getComplexIntReal
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getComplexIntReal
argument_list|()
return|;
block|}
name|APSInt
modifier|&
name|getComplexIntImag
parameter_list|()
block|{
name|assert
argument_list|(
name|isComplexInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ComplexAPSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Imag
return|;
block|}
specifier|const
name|APSInt
operator|&
name|getComplexIntImag
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getComplexIntImag
argument_list|()
return|;
block|}
name|APFloat
modifier|&
name|getComplexFloatReal
parameter_list|()
block|{
name|assert
argument_list|(
name|isComplexFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ComplexAPFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Real
return|;
block|}
specifier|const
name|APFloat
operator|&
name|getComplexFloatReal
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getComplexFloatReal
argument_list|()
return|;
block|}
name|APFloat
modifier|&
name|getComplexFloatImag
parameter_list|()
block|{
name|assert
argument_list|(
name|isComplexFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ComplexAPFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Imag
return|;
block|}
specifier|const
name|APFloat
operator|&
name|getComplexFloatImag
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getComplexFloatImag
argument_list|()
return|;
block|}
specifier|const
name|LValueBase
name|getLValueBase
argument_list|()
specifier|const
expr_stmt|;
name|CharUnits
modifier|&
name|getLValueOffset
parameter_list|()
function_decl|;
specifier|const
name|CharUnits
operator|&
name|getLValueOffset
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getLValueOffset
argument_list|()
return|;
block|}
name|bool
name|isLValueOnePastTheEnd
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|hasLValuePath
argument_list|()
specifier|const
expr_stmt|;
name|ArrayRef
operator|<
name|LValuePathEntry
operator|>
name|getLValuePath
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getLValueCallIndex
argument_list|()
specifier|const
expr_stmt|;
name|APValue
modifier|&
name|getVectorElt
parameter_list|(
name|unsigned
name|I
parameter_list|)
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|<
name|getVectorLength
argument_list|()
operator|&&
literal|"Index out of range"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Vec
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Elts
index|[
name|I
index|]
return|;
block|}
specifier|const
name|APValue
modifier|&
name|getVectorElt
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getVectorElt
argument_list|(
name|I
argument_list|)
return|;
block|}
name|unsigned
name|getVectorLength
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|Vec
operator|*
operator|)
operator|(
specifier|const
name|void
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|NumElts
return|;
block|}
name|APValue
modifier|&
name|getArrayInitializedElt
parameter_list|(
name|unsigned
name|I
parameter_list|)
block|{
name|assert
argument_list|(
name|isArray
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|<
name|getArrayInitializedElts
argument_list|()
operator|&&
literal|"Index out of range"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Arr
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Elts
index|[
name|I
index|]
return|;
block|}
specifier|const
name|APValue
modifier|&
name|getArrayInitializedElt
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getArrayInitializedElt
argument_list|(
name|I
argument_list|)
return|;
block|}
name|bool
name|hasArrayFiller
argument_list|()
specifier|const
block|{
return|return
name|getArrayInitializedElts
argument_list|()
operator|!=
name|getArraySize
argument_list|()
return|;
block|}
name|APValue
modifier|&
name|getArrayFiller
parameter_list|()
block|{
name|assert
argument_list|(
name|isArray
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|hasArrayFiller
argument_list|()
operator|&&
literal|"No array filler"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Arr
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Elts
index|[
name|getArrayInitializedElts
argument_list|()
index|]
return|;
block|}
specifier|const
name|APValue
operator|&
name|getArrayFiller
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getArrayFiller
argument_list|()
return|;
block|}
name|unsigned
name|getArrayInitializedElts
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isArray
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|Arr
operator|*
operator|)
operator|(
specifier|const
name|void
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|NumElts
return|;
block|}
name|unsigned
name|getArraySize
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isArray
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|Arr
operator|*
operator|)
operator|(
specifier|const
name|void
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|ArrSize
return|;
block|}
name|unsigned
name|getStructNumBases
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isStruct
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|StructData
operator|*
operator|)
operator|(
specifier|const
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|NumBases
return|;
block|}
name|unsigned
name|getStructNumFields
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isStruct
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|StructData
operator|*
operator|)
operator|(
specifier|const
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|NumFields
return|;
block|}
name|APValue
modifier|&
name|getStructBase
parameter_list|(
name|unsigned
name|i
parameter_list|)
block|{
name|assert
argument_list|(
name|isStruct
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|StructData
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Elts
index|[
name|i
index|]
return|;
block|}
name|APValue
modifier|&
name|getStructField
parameter_list|(
name|unsigned
name|i
parameter_list|)
block|{
name|assert
argument_list|(
name|isStruct
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|StructData
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Elts
index|[
name|getStructNumBases
argument_list|()
operator|+
name|i
index|]
return|;
block|}
specifier|const
name|APValue
modifier|&
name|getStructBase
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getStructBase
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|const
name|APValue
modifier|&
name|getStructField
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getStructField
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|const
name|FieldDecl
operator|*
name|getUnionField
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isUnion
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|UnionData
operator|*
operator|)
operator|(
specifier|const
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Field
return|;
block|}
name|APValue
modifier|&
name|getUnionValue
parameter_list|()
block|{
name|assert
argument_list|(
name|isUnion
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
operator|(
name|UnionData
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Value
return|;
block|}
specifier|const
name|APValue
operator|&
name|getUnionValue
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getUnionValue
argument_list|()
return|;
block|}
specifier|const
name|ValueDecl
operator|*
name|getMemberPointerDecl
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|isMemberPointerToDerivedMember
argument_list|()
specifier|const
expr_stmt|;
name|ArrayRef
operator|<
specifier|const
name|CXXRecordDecl
operator|*
operator|>
name|getMemberPointerPath
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|AddrLabelExpr
operator|*
name|getAddrLabelDiffLHS
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isAddrLabelDiff
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|AddrLabelDiffData
operator|*
operator|)
operator|(
specifier|const
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|LHSExpr
return|;
block|}
specifier|const
name|AddrLabelExpr
operator|*
name|getAddrLabelDiffRHS
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isAddrLabelDiff
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|AddrLabelDiffData
operator|*
operator|)
operator|(
specifier|const
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|RHSExpr
return|;
block|}
name|void
name|setInt
parameter_list|(
name|APSInt
name|I
parameter_list|)
block|{
name|assert
argument_list|(
name|isInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|*
operator|(
name|APSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|=
name|std
operator|::
name|move
argument_list|(
name|I
argument_list|)
expr_stmt|;
block|}
name|void
name|setFloat
parameter_list|(
name|APFloat
name|F
parameter_list|)
block|{
name|assert
argument_list|(
name|isFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|*
operator|(
name|APFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|=
name|std
operator|::
name|move
argument_list|(
name|F
argument_list|)
expr_stmt|;
block|}
name|void
name|setVector
parameter_list|(
specifier|const
name|APValue
modifier|*
name|E
parameter_list|,
name|unsigned
name|N
parameter_list|)
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Vec
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Elts
operator|=
name|new
name|APValue
index|[
name|N
index|]
expr_stmt|;
operator|(
operator|(
name|Vec
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|NumElts
operator|=
name|N
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|N
condition|;
operator|++
name|i
control|)
operator|(
operator|(
name|Vec
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Elts
index|[
name|i
index|]
operator|=
name|E
index|[
name|i
index|]
expr_stmt|;
block|}
name|void
name|setComplexInt
parameter_list|(
name|APSInt
name|R
parameter_list|,
name|APSInt
name|I
parameter_list|)
block|{
name|assert
argument_list|(
name|R
operator|.
name|getBitWidth
argument_list|()
operator|==
name|I
operator|.
name|getBitWidth
argument_list|()
operator|&&
literal|"Invalid complex int (type mismatch)."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|isComplexInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ComplexAPSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Real
operator|=
name|std
operator|::
name|move
argument_list|(
name|R
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ComplexAPSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Imag
operator|=
name|std
operator|::
name|move
argument_list|(
name|I
argument_list|)
expr_stmt|;
block|}
name|void
name|setComplexFloat
parameter_list|(
name|APFloat
name|R
parameter_list|,
name|APFloat
name|I
parameter_list|)
block|{
name|assert
argument_list|(
operator|&
name|R
operator|.
name|getSemantics
argument_list|()
operator|==
operator|&
name|I
operator|.
name|getSemantics
argument_list|()
operator|&&
literal|"Invalid complex float (type mismatch)."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|isComplexFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ComplexAPFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Real
operator|=
name|std
operator|::
name|move
argument_list|(
name|R
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ComplexAPFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Imag
operator|=
name|std
operator|::
name|move
argument_list|(
name|I
argument_list|)
expr_stmt|;
block|}
name|void
name|setLValue
parameter_list|(
name|LValueBase
name|B
parameter_list|,
specifier|const
name|CharUnits
modifier|&
name|O
parameter_list|,
name|NoLValuePath
parameter_list|,
name|unsigned
name|CallIndex
parameter_list|)
function_decl|;
name|void
name|setLValue
argument_list|(
name|LValueBase
name|B
argument_list|,
specifier|const
name|CharUnits
operator|&
name|O
argument_list|,
name|ArrayRef
operator|<
name|LValuePathEntry
operator|>
name|Path
argument_list|,
name|bool
name|OnePastTheEnd
argument_list|,
name|unsigned
name|CallIndex
argument_list|)
decl_stmt|;
name|void
name|setUnion
parameter_list|(
specifier|const
name|FieldDecl
modifier|*
name|Field
parameter_list|,
specifier|const
name|APValue
modifier|&
name|Value
parameter_list|)
block|{
name|assert
argument_list|(
name|isUnion
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|UnionData
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Field
operator|=
name|Field
expr_stmt|;
operator|*
operator|(
operator|(
name|UnionData
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|Value
operator|=
name|Value
expr_stmt|;
block|}
name|void
name|setAddrLabelDiff
parameter_list|(
specifier|const
name|AddrLabelExpr
modifier|*
name|LHSExpr
parameter_list|,
specifier|const
name|AddrLabelExpr
modifier|*
name|RHSExpr
parameter_list|)
block|{
operator|(
operator|(
name|AddrLabelDiffData
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|LHSExpr
operator|=
name|LHSExpr
expr_stmt|;
operator|(
operator|(
name|AddrLabelDiffData
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|.
name|buffer
operator|)
operator|->
name|RHSExpr
operator|=
name|RHSExpr
expr_stmt|;
block|}
comment|/// Assign by swapping from a copy of the RHS.
name|APValue
modifier|&
name|operator
init|=
operator|(
name|APValue
name|RHS
operator|)
block|{
name|swap
argument_list|(
name|RHS
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|private
label|:
name|void
name|DestroyDataAndMakeUninit
parameter_list|()
function_decl|;
name|void
name|MakeUninit
parameter_list|()
block|{
if|if
condition|(
name|Kind
operator|!=
name|Uninitialized
condition|)
name|DestroyDataAndMakeUninit
argument_list|()
expr_stmt|;
block|}
name|void
name|MakeInt
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)Data.buffer
argument_list|)
name|APSInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Kind
operator|=
name|Int
expr_stmt|;
block|}
name|void
name|MakeFloat
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data.buffer
argument_list|)
name|APFloat
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|Kind
operator|=
name|Float
expr_stmt|;
block|}
name|void
name|MakeVector
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data.buffer
argument_list|)
name|Vec
argument_list|()
expr_stmt|;
name|Kind
operator|=
name|Vector
expr_stmt|;
block|}
name|void
name|MakeComplexInt
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data.buffer
argument_list|)
name|ComplexAPSInt
argument_list|()
expr_stmt|;
name|Kind
operator|=
name|ComplexInt
expr_stmt|;
block|}
name|void
name|MakeComplexFloat
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data.buffer
argument_list|)
name|ComplexAPFloat
argument_list|()
expr_stmt|;
name|Kind
operator|=
name|ComplexFloat
expr_stmt|;
block|}
name|void
name|MakeLValue
parameter_list|()
function_decl|;
name|void
name|MakeArray
parameter_list|(
name|unsigned
name|InitElts
parameter_list|,
name|unsigned
name|Size
parameter_list|)
function_decl|;
name|void
name|MakeStruct
parameter_list|(
name|unsigned
name|B
parameter_list|,
name|unsigned
name|M
parameter_list|)
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data.buffer
argument_list|)
name|StructData
argument_list|(
name|B
argument_list|,
name|M
argument_list|)
expr_stmt|;
name|Kind
operator|=
name|Struct
expr_stmt|;
block|}
name|void
name|MakeUnion
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data.buffer
argument_list|)
name|UnionData
argument_list|()
expr_stmt|;
name|Kind
operator|=
name|Union
expr_stmt|;
block|}
name|void
name|MakeMemberPointer
argument_list|(
specifier|const
name|ValueDecl
operator|*
name|Member
argument_list|,
name|bool
name|IsDerivedMember
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|CXXRecordDecl
operator|*
operator|>
name|Path
argument_list|)
decl_stmt|;
name|void
name|MakeAddrLabelDiff
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data.buffer
argument_list|)
name|AddrLabelDiffData
argument_list|()
expr_stmt|;
name|Kind
operator|=
name|AddrLabelDiff
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

