begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- APValue.h - Union class for APFloat/APSInt/Complex -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the APValue class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_AST_APVALUE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_AST_APVALUE_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APFloat.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CharUnits
decl_stmt|;
name|class
name|DiagnosticBuilder
decl_stmt|;
name|class
name|Expr
decl_stmt|;
comment|/// APValue - This class implements a discriminated union of [uninitialized]
comment|/// [APSInt] [APFloat], [Complex APSInt] [Complex APFloat], [Expr + Offset].
name|class
name|APValue
block|{
typedef|typedef
name|llvm
operator|::
name|APSInt
name|APSInt
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|APFloat
name|APFloat
expr_stmt|;
name|public
label|:
enum|enum
name|ValueKind
block|{
name|Uninitialized
block|,
name|Int
block|,
name|Float
block|,
name|ComplexInt
block|,
name|ComplexFloat
block|,
name|LValue
block|,
name|Vector
block|}
enum|;
name|private
label|:
name|ValueKind
name|Kind
decl_stmt|;
struct|struct
name|ComplexAPSInt
block|{
name|APSInt
name|Real
decl_stmt|,
name|Imag
decl_stmt|;
name|ComplexAPSInt
argument_list|()
operator|:
name|Real
argument_list|(
literal|1
argument_list|)
operator|,
name|Imag
argument_list|(
literal|1
argument_list|)
block|{}
block|}
struct|;
struct|struct
name|ComplexAPFloat
block|{
name|APFloat
name|Real
decl_stmt|,
name|Imag
decl_stmt|;
name|ComplexAPFloat
argument_list|()
operator|:
name|Real
argument_list|(
literal|0.0
argument_list|)
operator|,
name|Imag
argument_list|(
literal|0.0
argument_list|)
block|{}
block|}
struct|;
struct|struct
name|Vec
block|{
name|APValue
modifier|*
name|Elts
decl_stmt|;
name|unsigned
name|NumElts
decl_stmt|;
name|Vec
argument_list|()
operator|:
name|Elts
argument_list|(
literal|0
argument_list|)
operator|,
name|NumElts
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|Vec
argument_list|()
block|{
name|delete
index|[]
name|Elts
block|; }
block|}
struct|;
enum|enum
block|{
name|MaxSize
init|=
operator|(
sizeof|sizeof
argument_list|(
name|ComplexAPSInt
argument_list|)
operator|>
sizeof|sizeof
argument_list|(
name|ComplexAPFloat
argument_list|)
condition|?
sizeof|sizeof
argument_list|(
name|ComplexAPSInt
argument_list|)
else|:
sizeof|sizeof
argument_list|(
name|ComplexAPFloat
argument_list|)
operator|)
block|}
enum|;
union|union
block|{
name|void
modifier|*
name|Aligner
decl_stmt|;
name|char
name|Data
index|[
name|MaxSize
index|]
decl_stmt|;
block|}
union|;
name|public
label|:
name|APValue
argument_list|()
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{}
name|explicit
name|APValue
argument_list|(
specifier|const
name|APSInt
operator|&
name|I
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeInt
argument_list|()
block|;
name|setInt
argument_list|(
name|I
argument_list|)
block|;   }
name|explicit
name|APValue
argument_list|(
specifier|const
name|APFloat
operator|&
name|F
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeFloat
argument_list|()
block|;
name|setFloat
argument_list|(
name|F
argument_list|)
block|;   }
name|explicit
name|APValue
argument_list|(
argument|const APValue *E
argument_list|,
argument|unsigned N
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeVector
argument_list|()
block|;
name|setVector
argument_list|(
name|E
argument_list|,
name|N
argument_list|)
block|;   }
name|APValue
argument_list|(
specifier|const
name|APSInt
operator|&
name|R
argument_list|,
specifier|const
name|APSInt
operator|&
name|I
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeComplexInt
argument_list|()
block|;
name|setComplexInt
argument_list|(
name|R
argument_list|,
name|I
argument_list|)
block|;   }
name|APValue
argument_list|(
specifier|const
name|APFloat
operator|&
name|R
argument_list|,
specifier|const
name|APFloat
operator|&
name|I
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeComplexFloat
argument_list|()
block|;
name|setComplexFloat
argument_list|(
name|R
argument_list|,
name|I
argument_list|)
block|;   }
name|APValue
argument_list|(
specifier|const
name|APValue
operator|&
name|RHS
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
operator|*
name|this
operator|=
name|RHS
block|;   }
name|APValue
argument_list|(
specifier|const
name|Expr
operator|*
name|B
argument_list|,
specifier|const
name|CharUnits
operator|&
name|O
argument_list|)
operator|:
name|Kind
argument_list|(
argument|Uninitialized
argument_list|)
block|{
name|MakeLValue
argument_list|()
block|;
name|setLValue
argument_list|(
name|B
argument_list|,
name|O
argument_list|)
block|;   }
name|APValue
argument_list|(
specifier|const
name|Expr
operator|*
name|B
argument_list|)
expr_stmt|;
operator|~
name|APValue
argument_list|()
block|{
name|MakeUninit
argument_list|()
block|;   }
name|ValueKind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|bool
name|isUninit
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Uninitialized
return|;
block|}
name|bool
name|isInt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Int
return|;
block|}
name|bool
name|isFloat
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Float
return|;
block|}
name|bool
name|isComplexInt
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|ComplexInt
return|;
block|}
name|bool
name|isComplexFloat
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|ComplexFloat
return|;
block|}
name|bool
name|isLValue
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|LValue
return|;
block|}
name|bool
name|isVector
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Vector
return|;
block|}
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
name|APSInt
modifier|&
name|getInt
parameter_list|()
block|{
name|assert
argument_list|(
name|isInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
name|APSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
return|;
block|}
specifier|const
name|APSInt
operator|&
name|getInt
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getInt
argument_list|()
return|;
block|}
name|APFloat
modifier|&
name|getFloat
parameter_list|()
block|{
name|assert
argument_list|(
name|isFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|*
operator|(
name|APFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
return|;
block|}
specifier|const
name|APFloat
operator|&
name|getFloat
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getFloat
argument_list|()
return|;
block|}
name|APValue
modifier|&
name|getVectorElt
parameter_list|(
name|unsigned
name|i
parameter_list|)
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|Vec
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Elts
index|[
name|i
index|]
return|;
block|}
specifier|const
name|APValue
modifier|&
name|getVectorElt
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
specifier|const
name|Vec
operator|*
operator|)
operator|(
specifier|const
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Elts
index|[
name|i
index|]
return|;
block|}
name|unsigned
name|getVectorLength
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
block|;
return|return
operator|(
operator|(
specifier|const
name|Vec
operator|*
operator|)
operator|(
specifier|const
name|void
operator|*
operator|)
name|Data
operator|)
operator|->
name|NumElts
return|;
block|}
name|APSInt
modifier|&
name|getComplexIntReal
parameter_list|()
block|{
name|assert
argument_list|(
name|isComplexInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ComplexAPSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Real
return|;
block|}
specifier|const
name|APSInt
operator|&
name|getComplexIntReal
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getComplexIntReal
argument_list|()
return|;
block|}
name|APSInt
modifier|&
name|getComplexIntImag
parameter_list|()
block|{
name|assert
argument_list|(
name|isComplexInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ComplexAPSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Imag
return|;
block|}
specifier|const
name|APSInt
operator|&
name|getComplexIntImag
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getComplexIntImag
argument_list|()
return|;
block|}
name|APFloat
modifier|&
name|getComplexFloatReal
parameter_list|()
block|{
name|assert
argument_list|(
name|isComplexFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ComplexAPFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Real
return|;
block|}
specifier|const
name|APFloat
operator|&
name|getComplexFloatReal
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getComplexFloatReal
argument_list|()
return|;
block|}
name|APFloat
modifier|&
name|getComplexFloatImag
parameter_list|()
block|{
name|assert
argument_list|(
name|isComplexFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|ComplexAPFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Imag
return|;
block|}
specifier|const
name|APFloat
operator|&
name|getComplexFloatImag
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|APValue
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getComplexFloatImag
argument_list|()
return|;
block|}
specifier|const
name|Expr
operator|*
name|getLValueBase
argument_list|()
specifier|const
expr_stmt|;
name|CharUnits
name|getLValueOffset
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setInt
parameter_list|(
specifier|const
name|APSInt
modifier|&
name|I
parameter_list|)
block|{
name|assert
argument_list|(
name|isInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|*
operator|(
name|APSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|=
name|I
expr_stmt|;
block|}
name|void
name|setFloat
parameter_list|(
specifier|const
name|APFloat
modifier|&
name|F
parameter_list|)
block|{
name|assert
argument_list|(
name|isFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|*
operator|(
name|APFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|=
name|F
expr_stmt|;
block|}
name|void
name|setVector
parameter_list|(
specifier|const
name|APValue
modifier|*
name|E
parameter_list|,
name|unsigned
name|N
parameter_list|)
block|{
name|assert
argument_list|(
name|isVector
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Vec
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Elts
operator|=
name|new
name|APValue
index|[
name|N
index|]
expr_stmt|;
operator|(
operator|(
name|Vec
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|NumElts
operator|=
name|N
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|N
condition|;
operator|++
name|i
control|)
operator|(
operator|(
name|Vec
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Elts
index|[
name|i
index|]
operator|=
name|E
index|[
name|i
index|]
expr_stmt|;
block|}
name|void
name|setComplexInt
parameter_list|(
specifier|const
name|APSInt
modifier|&
name|R
parameter_list|,
specifier|const
name|APSInt
modifier|&
name|I
parameter_list|)
block|{
name|assert
argument_list|(
name|R
operator|.
name|getBitWidth
argument_list|()
operator|==
name|I
operator|.
name|getBitWidth
argument_list|()
operator|&&
literal|"Invalid complex int (type mismatch)."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|isComplexInt
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ComplexAPSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Real
operator|=
name|R
expr_stmt|;
operator|(
operator|(
name|ComplexAPSInt
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Imag
operator|=
name|I
expr_stmt|;
block|}
name|void
name|setComplexFloat
parameter_list|(
specifier|const
name|APFloat
modifier|&
name|R
parameter_list|,
specifier|const
name|APFloat
modifier|&
name|I
parameter_list|)
block|{
name|assert
argument_list|(
operator|&
name|R
operator|.
name|getSemantics
argument_list|()
operator|==
operator|&
name|I
operator|.
name|getSemantics
argument_list|()
operator|&&
literal|"Invalid complex float (type mismatch)."
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|isComplexFloat
argument_list|()
operator|&&
literal|"Invalid accessor"
argument_list|)
expr_stmt|;
operator|(
operator|(
name|ComplexAPFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Real
operator|=
name|R
expr_stmt|;
operator|(
operator|(
name|ComplexAPFloat
operator|*
operator|)
operator|(
name|char
operator|*
operator|)
name|Data
operator|)
operator|->
name|Imag
operator|=
name|I
expr_stmt|;
block|}
name|void
name|setLValue
parameter_list|(
specifier|const
name|Expr
modifier|*
name|B
parameter_list|,
specifier|const
name|CharUnits
modifier|&
name|O
parameter_list|)
function_decl|;
specifier|const
name|APValue
modifier|&
name|operator
init|=
operator|(
specifier|const
name|APValue
operator|&
name|RHS
operator|)
decl_stmt|;
name|private
label|:
name|void
name|MakeUninit
parameter_list|()
function_decl|;
name|void
name|MakeInt
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)Data
argument_list|)
name|APSInt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|Kind
operator|=
name|Int
expr_stmt|;
block|}
name|void
name|MakeFloat
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data
argument_list|)
name|APFloat
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|Kind
operator|=
name|Float
expr_stmt|;
block|}
name|void
name|MakeVector
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data
argument_list|)
name|Vec
argument_list|()
expr_stmt|;
name|Kind
operator|=
name|Vector
expr_stmt|;
block|}
name|void
name|MakeComplexInt
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data
argument_list|)
name|ComplexAPSInt
argument_list|()
expr_stmt|;
name|Kind
operator|=
name|ComplexInt
expr_stmt|;
block|}
name|void
name|MakeComplexFloat
parameter_list|()
block|{
name|assert
argument_list|(
name|isUninit
argument_list|()
operator|&&
literal|"Bad state change"
argument_list|)
expr_stmt|;
name|new
argument_list|(
argument|(void*)(char*)Data
argument_list|)
name|ComplexAPFloat
argument_list|()
expr_stmt|;
name|Kind
operator|=
name|ComplexFloat
expr_stmt|;
block|}
name|void
name|MakeLValue
parameter_list|()
function_decl|;
block|}
empty_stmt|;
specifier|inline
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|APValue
operator|&
name|V
operator|)
block|{
name|V
operator|.
name|print
argument_list|(
name|OS
argument_list|)
block|;
return|return
name|OS
return|;
block|}
comment|// Writes a concise representation of V to DB, in a single<< operation.
specifier|const
name|DiagnosticBuilder
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|DiagnosticBuilder
operator|&
name|DB
operator|,
specifier|const
name|APValue
operator|&
name|V
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

