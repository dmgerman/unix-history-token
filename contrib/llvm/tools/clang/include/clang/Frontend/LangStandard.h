begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- LangStandard.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_FRONTEND_LANGSTANDARD_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_FRONTEND_LANGSTANDARD_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|frontend
block|{
enum|enum
name|LangFeatures
block|{
name|LineComment
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|C89
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|C99
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|C11
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|CPlusPlus
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
name|CPlusPlus11
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
name|CPlusPlus14
init|=
operator|(
literal|1
operator|<<
literal|6
operator|)
block|,
name|CPlusPlus1z
init|=
operator|(
literal|1
operator|<<
literal|7
operator|)
block|,
name|Digraphs
init|=
operator|(
literal|1
operator|<<
literal|8
operator|)
block|,
name|GNUMode
init|=
operator|(
literal|1
operator|<<
literal|9
operator|)
block|,
name|HexFloat
init|=
operator|(
literal|1
operator|<<
literal|10
operator|)
block|,
name|ImplicitInt
init|=
operator|(
literal|1
operator|<<
literal|11
operator|)
block|,
name|OpenCL
init|=
operator|(
literal|1
operator|<<
literal|12
operator|)
block|}
enum|;
block|}
comment|/// LangStandard - Information about the properties of a particular language
comment|/// standard.
struct|struct
name|LangStandard
block|{
enum|enum
name|Kind
block|{
define|#
directive|define
name|LANGSTANDARD
parameter_list|(
name|id
parameter_list|,
name|name
parameter_list|,
name|desc
parameter_list|,
name|features
parameter_list|)
define|\
value|lang_##id,
include|#
directive|include
file|"clang/Frontend/LangStandards.def"
name|lang_unspecified
block|}
enum|;
specifier|const
name|char
modifier|*
name|ShortName
decl_stmt|;
specifier|const
name|char
modifier|*
name|Description
decl_stmt|;
name|unsigned
name|Flags
decl_stmt|;
name|public
label|:
comment|/// getName - Get the name of this standard.
specifier|const
name|char
operator|*
name|getName
argument_list|()
specifier|const
block|{
return|return
name|ShortName
return|;
block|}
comment|/// getDescription - Get the description of this standard.
specifier|const
name|char
operator|*
name|getDescription
argument_list|()
specifier|const
block|{
return|return
name|Description
return|;
block|}
comment|/// Language supports '//' comments.
name|bool
name|hasLineComments
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|LineComment
return|;
block|}
comment|/// isC89 - Language is a superset of C89.
name|bool
name|isC89
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|C89
return|;
block|}
comment|/// isC99 - Language is a superset of C99.
name|bool
name|isC99
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|C99
return|;
block|}
comment|/// isC11 - Language is a superset of C11.
name|bool
name|isC11
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|C11
return|;
block|}
comment|/// isCPlusPlus - Language is a C++ variant.
name|bool
name|isCPlusPlus
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|CPlusPlus
return|;
block|}
comment|/// isCPlusPlus11 - Language is a C++11 variant (or later).
name|bool
name|isCPlusPlus11
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|CPlusPlus11
return|;
block|}
comment|/// isCPlusPlus14 - Language is a C++14 variant (or later).
name|bool
name|isCPlusPlus14
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|CPlusPlus14
return|;
block|}
comment|/// isCPlusPlus1z - Language is a C++17 variant (or later).
name|bool
name|isCPlusPlus1z
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|CPlusPlus1z
return|;
block|}
comment|/// hasDigraphs - Language supports digraphs.
name|bool
name|hasDigraphs
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|Digraphs
return|;
block|}
comment|/// isGNUMode - Language includes GNU extensions.
name|bool
name|isGNUMode
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|GNUMode
return|;
block|}
comment|/// hasHexFloats - Language supports hexadecimal float constants.
name|bool
name|hasHexFloats
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|HexFloat
return|;
block|}
comment|/// hasImplicitInt - Language allows variables to be typed as int implicitly.
name|bool
name|hasImplicitInt
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|ImplicitInt
return|;
block|}
comment|/// isOpenCL - Language is a OpenCL variant.
name|bool
name|isOpenCL
argument_list|()
specifier|const
block|{
return|return
name|Flags
operator|&
name|frontend
operator|::
name|OpenCL
return|;
block|}
specifier|static
specifier|const
name|LangStandard
modifier|&
name|getLangStandardForKind
parameter_list|(
name|Kind
name|K
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|LangStandard
modifier|*
name|getLangStandardForName
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
block|}
struct|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

