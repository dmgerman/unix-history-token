begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- DocumentXML.h - XML document for ASTs ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements the XML document class, which provides the means to
end_comment

begin_comment
comment|// dump out the AST in a XML form that exposes type details and other fields.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_FRONTEND_DOCUMENTXML_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_FRONTEND_DOCUMENTXML_H
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<stack>
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/TypeOrdering.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|//--------------------------------------------------------- forwards
name|class
name|DeclContext
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
name|class
name|FunctionDecl
decl_stmt|;
name|class
name|ASTContext
decl_stmt|;
name|class
name|LabelStmt
decl_stmt|;
comment|//---------------------------------------------------------
name|namespace
name|XML
block|{
comment|// id maps:
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|IdMap
operator|:
name|llvm
operator|::
name|DenseMap
operator|<
name|T
operator|,
name|unsigned
operator|>
block|{}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|IdMap
operator|<
name|QualType
operator|>
operator|:
name|std
operator|::
name|map
operator|<
name|QualType
operator|,
name|unsigned
operator|,
name|QualTypeOrdering
operator|>
block|{}
expr_stmt|;
name|template
operator|<
operator|>
expr|struct
name|IdMap
operator|<
name|std
operator|::
name|string
operator|>
operator|:
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|unsigned
operator|>
block|{}
expr_stmt|;
block|}
comment|//---------------------------------------------------------
name|class
name|DocumentXML
block|{
name|public
label|:
name|DocumentXML
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|rootName
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|out
argument_list|)
expr_stmt|;
name|void
name|initialize
parameter_list|(
name|ASTContext
modifier|&
name|Context
parameter_list|)
function_decl|;
name|void
name|PrintDecl
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|void
name|PrintStmt
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
function_decl|;
comment|// defined in StmtXML.cpp
name|void
name|finalize
parameter_list|()
function_decl|;
name|DocumentXML
modifier|&
name|addSubNode
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
decl_stmt|;
comment|// also enters the sub node, returns *this
name|DocumentXML
modifier|&
name|toParent
parameter_list|()
function_decl|;
comment|// returns *this
name|void
name|addAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
specifier|const
name|QualType
modifier|&
name|pType
parameter_list|)
function_decl|;
name|void
name|addAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
name|bool
name|value
parameter_list|)
function_decl|;
name|template
operator|<
name|class
name|T
operator|>
name|void
name|addAttribute
argument_list|(
argument|const char* pName
argument_list|,
argument|const T* value
argument_list|)
block|{
name|addPtrAttribute
argument_list|(
name|pName
argument_list|,
name|value
argument_list|)
block|;   }
name|template
operator|<
name|class
name|T
operator|>
name|void
name|addAttribute
argument_list|(
argument|const char* pName
argument_list|,
argument|T* value
argument_list|)
block|{
name|addPtrAttribute
argument_list|(
name|pName
argument_list|,
name|value
argument_list|)
block|;   }
name|template
operator|<
name|class
name|T
operator|>
name|void
name|addAttribute
argument_list|(
specifier|const
name|char
operator|*
name|pName
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|T
operator|>
name|void
name|addAttributeOptional
argument_list|(
specifier|const
name|char
operator|*
name|pName
argument_list|,
specifier|const
name|T
operator|&
name|value
argument_list|)
expr_stmt|;
name|void
name|addSourceFileAttribute
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|fileName
argument_list|)
decl_stmt|;
name|PresumedLoc
name|addLocation
parameter_list|(
specifier|const
name|SourceLocation
modifier|&
name|Loc
parameter_list|)
function_decl|;
name|void
name|addLocationRange
parameter_list|(
specifier|const
name|SourceRange
modifier|&
name|R
parameter_list|)
function_decl|;
specifier|static
name|std
operator|::
name|string
name|escapeString
argument_list|(
argument|const char* pStr
argument_list|,
argument|std::string::size_type len
argument_list|)
expr_stmt|;
name|private
label|:
name|DocumentXML
argument_list|(
specifier|const
name|DocumentXML
operator|&
argument_list|)
expr_stmt|;
comment|// not defined
name|DocumentXML
modifier|&
name|operator
init|=
operator|(
specifier|const
name|DocumentXML
operator|&
operator|)
decl_stmt|;
comment|// not defined
name|std
operator|::
name|stack
operator|<
name|std
operator|::
name|string
operator|>
name|NodeStack
expr_stmt|;
name|llvm
operator|::
name|raw_ostream
operator|&
name|Out
expr_stmt|;
name|ASTContext
modifier|*
name|Ctx
decl_stmt|;
name|bool
name|HasCurrentNodeSubNodes
decl_stmt|;
name|XML
operator|::
name|IdMap
operator|<
name|QualType
operator|>
name|Types
expr_stmt|;
name|XML
operator|::
name|IdMap
operator|<
specifier|const
name|DeclContext
operator|*
operator|>
name|Contexts
expr_stmt|;
name|XML
operator|::
name|IdMap
operator|<
specifier|const
name|Type
operator|*
operator|>
name|BasicTypes
expr_stmt|;
name|XML
operator|::
name|IdMap
operator|<
name|std
operator|::
name|string
operator|>
name|SourceFiles
expr_stmt|;
name|XML
operator|::
name|IdMap
operator|<
specifier|const
name|NamedDecl
operator|*
operator|>
name|Decls
expr_stmt|;
name|XML
operator|::
name|IdMap
operator|<
specifier|const
name|LabelStmt
operator|*
operator|>
name|Labels
expr_stmt|;
name|void
name|addContextsRecursively
parameter_list|(
specifier|const
name|DeclContext
modifier|*
name|DC
parameter_list|)
function_decl|;
name|void
name|addTypeRecursively
parameter_list|(
specifier|const
name|Type
modifier|*
name|pType
parameter_list|)
function_decl|;
name|void
name|addTypeRecursively
parameter_list|(
specifier|const
name|QualType
modifier|&
name|pType
parameter_list|)
function_decl|;
name|void
name|Indent
parameter_list|()
function_decl|;
comment|// forced pointer dispatch:
name|void
name|addPtrAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
specifier|const
name|Type
modifier|*
name|pType
parameter_list|)
function_decl|;
name|void
name|addPtrAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
specifier|const
name|NamedDecl
modifier|*
name|D
parameter_list|)
function_decl|;
name|void
name|addPtrAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
specifier|const
name|DeclContext
modifier|*
name|D
parameter_list|)
function_decl|;
name|void
name|addPtrAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
specifier|const
name|NamespaceDecl
modifier|*
name|D
parameter_list|)
function_decl|;
comment|// disambiguation
name|void
name|addPtrAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
specifier|const
name|NestedNameSpecifier
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|addPtrAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
specifier|const
name|LabelStmt
modifier|*
name|L
parameter_list|)
function_decl|;
name|void
name|addPtrAttribute
parameter_list|(
specifier|const
name|char
modifier|*
name|pName
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|)
function_decl|;
comment|// defined in TypeXML.cpp:
name|void
name|addParentTypes
parameter_list|(
specifier|const
name|Type
modifier|*
name|pType
parameter_list|)
function_decl|;
name|void
name|writeTypeToXML
parameter_list|(
specifier|const
name|Type
modifier|*
name|pType
parameter_list|)
function_decl|;
name|void
name|writeTypeToXML
parameter_list|(
specifier|const
name|QualType
modifier|&
name|pType
parameter_list|)
function_decl|;
name|class
name|TypeAdder
decl_stmt|;
name|friend
name|class
name|TypeAdder
decl_stmt|;
comment|// defined in DeclXML.cpp:
name|void
name|writeDeclToXML
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
name|class
name|DeclPrinter
decl_stmt|;
name|friend
name|class
name|DeclPrinter
decl_stmt|;
comment|// for addAttributeOptional:
specifier|static
name|bool
name|isDefault
parameter_list|(
name|unsigned
name|value
parameter_list|)
block|{
return|return
name|value
operator|==
literal|0
return|;
block|}
specifier|static
name|bool
name|isDefault
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
return|return
operator|!
name|value
return|;
block|}
specifier|static
name|bool
name|isDefault
argument_list|(
name|Qualifiers
operator|::
name|GC
name|value
argument_list|)
block|{
return|return
name|value
operator|==
name|Qualifiers
operator|::
name|GCNone
return|;
block|}
specifier|static
name|bool
name|isDefault
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|value
argument_list|)
block|{
return|return
name|value
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|//--------------------------------------------------------- inlines
specifier|inline
name|void
name|DocumentXML
operator|::
name|initialize
argument_list|(
argument|ASTContext&Context
argument_list|)
block|{
name|Ctx
operator|=
operator|&
name|Context
block|; }
comment|//---------------------------------------------------------
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|DocumentXML
operator|::
name|addAttribute
argument_list|(
argument|const char* pName
argument_list|,
argument|const T& value
argument_list|)
block|{
name|std
operator|::
name|string
name|repr
block|;
block|{
name|llvm
operator|::
name|raw_string_ostream
name|buf
argument_list|(
name|repr
argument_list|)
block|;
name|buf
operator|<<
name|value
block|;   }
name|Out
operator|<<
literal|' '
operator|<<
name|pName
operator|<<
literal|"=\""
operator|<<
name|DocumentXML
operator|::
name|escapeString
argument_list|(
name|repr
operator|.
name|c_str
argument_list|()
argument_list|,
name|repr
operator|.
name|size
argument_list|()
argument_list|)
operator|<<
literal|"\""
block|; }
comment|//---------------------------------------------------------
specifier|inline
name|void
name|DocumentXML
operator|::
name|addPtrAttribute
argument_list|(
argument|const char* pName
argument_list|,
argument|const char* text
argument_list|)
block|{
name|Out
operator|<<
literal|' '
operator|<<
name|pName
operator|<<
literal|"=\""
operator|<<
name|DocumentXML
operator|::
name|escapeString
argument_list|(
name|text
argument_list|,
name|strlen
argument_list|(
name|text
argument_list|)
argument_list|)
operator|<<
literal|"\""
block|; }
comment|//---------------------------------------------------------
specifier|inline
name|void
name|DocumentXML
operator|::
name|addAttribute
argument_list|(
argument|const char* pName
argument_list|,
argument|bool value
argument_list|)
block|{
name|addPtrAttribute
argument_list|(
name|pName
argument_list|,
name|value
operator|?
literal|"1"
operator|:
literal|"0"
argument_list|)
block|; }
comment|//---------------------------------------------------------
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|DocumentXML
operator|::
name|addAttributeOptional
argument_list|(
argument|const char* pName
argument_list|,
argument|const T& value
argument_list|)
block|{
if|if
condition|(
operator|!
name|isDefault
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|addAttribute
argument_list|(
name|pName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
comment|//---------------------------------------------------------
block|}
end_decl_stmt

begin_comment
comment|//namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|//LLVM_CLANG_DOCUMENTXML_H
end_comment

end_unit

