begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DiagnosticsYaml.h -- Serialiazation for Diagnosticss ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file defines the structure of a YAML document for serializing
end_comment

begin_comment
comment|/// diagnostics.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_TOOLING_DIAGNOSTICSYAML_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_TOOLING_DIAGNOSTICSYAML_H
end_define

begin_include
include|#
directive|include
file|"clang/Tooling/Core/Diagnostic.h"
end_include

begin_include
include|#
directive|include
file|"clang/Tooling/ReplacementsYaml.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/YAMLTraits.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_macro
name|LLVM_YAML_IS_SEQUENCE_VECTOR
argument_list|(
argument|clang::tooling::Diagnostic
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|yaml
block|{
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|clang
operator|::
name|tooling
operator|::
name|Diagnostic
operator|>
block|{
comment|/// \brief Helper to (de)serialize a Diagnostic since we don't have direct
comment|/// access to its data members.
name|class
name|NormalizedDiagnostic
block|{
name|public
operator|:
name|NormalizedDiagnostic
argument_list|(
specifier|const
name|IO
operator|&
argument_list|)
operator|:
name|DiagLevel
argument_list|(
argument|clang::tooling::Diagnostic::Level::Warning
argument_list|)
block|{}
name|NormalizedDiagnostic
argument_list|(
specifier|const
name|IO
operator|&
argument_list|,
specifier|const
name|clang
operator|::
name|tooling
operator|::
name|Diagnostic
operator|&
name|D
argument_list|)
operator|:
name|DiagnosticName
argument_list|(
name|D
operator|.
name|DiagnosticName
argument_list|)
block|,
name|Message
argument_list|(
name|D
operator|.
name|Message
argument_list|)
block|,
name|Fix
argument_list|(
name|D
operator|.
name|Fix
argument_list|)
block|,
name|Notes
argument_list|(
name|D
operator|.
name|Notes
argument_list|)
block|,
name|DiagLevel
argument_list|(
name|D
operator|.
name|DiagLevel
argument_list|)
block|,
name|BuildDirectory
argument_list|(
argument|D.BuildDirectory
argument_list|)
block|{}
name|clang
operator|::
name|tooling
operator|::
name|Diagnostic
name|denormalize
argument_list|(
argument|const IO&
argument_list|)
block|{
return|return
name|clang
operator|::
name|tooling
operator|::
name|Diagnostic
argument_list|(
name|DiagnosticName
argument_list|,
name|Message
argument_list|,
name|Fix
argument_list|,
name|Notes
argument_list|,
name|DiagLevel
argument_list|,
name|BuildDirectory
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|DiagnosticName
block|;
name|clang
operator|::
name|tooling
operator|::
name|DiagnosticMessage
name|Message
block|;
name|llvm
operator|::
name|StringMap
operator|<
name|clang
operator|::
name|tooling
operator|::
name|Replacements
operator|>
name|Fix
block|;
name|SmallVector
operator|<
name|clang
operator|::
name|tooling
operator|::
name|DiagnosticMessage
block|,
literal|1
operator|>
name|Notes
block|;
name|clang
operator|::
name|tooling
operator|::
name|Diagnostic
operator|::
name|Level
name|DiagLevel
block|;
name|std
operator|::
name|string
name|BuildDirectory
block|;   }
block|;
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&Io
argument_list|,
argument|clang::tooling::Diagnostic&D
argument_list|)
block|{
name|MappingNormalization
operator|<
name|NormalizedDiagnostic
block|,
name|clang
operator|::
name|tooling
operator|::
name|Diagnostic
operator|>
name|Keys
argument_list|(
name|Io
argument_list|,
name|D
argument_list|)
block|;
name|Io
operator|.
name|mapRequired
argument_list|(
literal|"DiagnosticName"
argument_list|,
name|Keys
operator|->
name|DiagnosticName
argument_list|)
block|;
name|Io
operator|.
name|mapRequired
argument_list|(
literal|"Message"
argument_list|,
name|Keys
operator|->
name|Message
operator|.
name|Message
argument_list|)
block|;
name|Io
operator|.
name|mapRequired
argument_list|(
literal|"FileOffset"
argument_list|,
name|Keys
operator|->
name|Message
operator|.
name|FileOffset
argument_list|)
block|;
name|Io
operator|.
name|mapRequired
argument_list|(
literal|"FilePath"
argument_list|,
name|Keys
operator|->
name|Message
operator|.
name|FilePath
argument_list|)
block|;
comment|// FIXME: Export properly all the different fields.
name|std
operator|::
name|vector
operator|<
name|clang
operator|::
name|tooling
operator|::
name|Replacement
operator|>
name|Fixes
block|;
for|for
control|(
name|auto
operator|&
name|Replacements
operator|:
name|Keys
operator|->
name|Fix
control|)
block|{
for|for
control|(
name|auto
operator|&
name|Replacement
operator|:
name|Replacements
operator|.
name|second
control|)
block|{
name|Fixes
operator|.
name|push_back
argument_list|(
name|Replacement
argument_list|)
expr_stmt|;
block|}
block|}
name|Io
operator|.
name|mapRequired
argument_list|(
literal|"Replacements"
argument_list|,
name|Fixes
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|Fix
operator|:
name|Fixes
control|)
block|{
name|llvm
operator|::
name|Error
name|Err
operator|=
name|Keys
operator|->
name|Fix
index|[
name|Fix
operator|.
name|getFilePath
argument_list|()
index|]
operator|.
name|add
argument_list|(
name|Fix
argument_list|)
expr_stmt|;
if|if
condition|(
name|Err
condition|)
block|{
comment|// FIXME: Implement better conflict handling.
name|llvm
operator|::
name|errs
argument_list|()
operator|<<
literal|"Fix conflicts with existing fix: "
operator|<<
name|llvm
operator|::
name|toString
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Err
argument_list|)
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
block|}
block|}
empty_stmt|;
comment|/// \brief Specialized MappingTraits to describe how a
comment|/// TranslationUnitDiagnostics is (de)serialized.
name|template
operator|<
operator|>
expr|struct
name|MappingTraits
operator|<
name|clang
operator|::
name|tooling
operator|::
name|TranslationUnitDiagnostics
operator|>
block|{
specifier|static
name|void
name|mapping
argument_list|(
argument|IO&Io
argument_list|,
argument|clang::tooling::TranslationUnitDiagnostics&Doc
argument_list|)
block|{
name|Io
operator|.
name|mapRequired
argument_list|(
literal|"MainSourceFile"
argument_list|,
name|Doc
operator|.
name|MainSourceFile
argument_list|)
block|;
name|Io
operator|.
name|mapRequired
argument_list|(
literal|"Diagnostics"
argument_list|,
name|Doc
operator|.
name|Diagnostics
argument_list|)
block|;   }
block|}
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace yaml
end_comment

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_TOOLING_DIAGNOSTICSYAML_H
end_comment

end_unit

