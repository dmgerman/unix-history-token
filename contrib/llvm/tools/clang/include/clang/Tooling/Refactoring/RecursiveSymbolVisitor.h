begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- RecursiveSymbolVisitor.h - Clang refactoring library -------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief A wrapper class around \c RecursiveASTVisitor that visits each
end_comment

begin_comment
comment|/// occurrences of a named symbol.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_TOOLING_REFACTOR_RECURSIVE_SYMBOL_VISITOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_TOOLING_REFACTOR_RECURSIVE_SYMBOL_VISITOR_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/AST.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/RecursiveASTVisitor.h"
end_include

begin_include
include|#
directive|include
file|"clang/Lex/Lexer.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|tooling
block|{
comment|/// Traverses the AST and visits the occurrence of each named symbol in the
comment|/// given nodes.
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|RecursiveSymbolVisitor
operator|:
name|public
name|RecursiveASTVisitor
operator|<
name|RecursiveSymbolVisitor
operator|<
name|T
operator|>>
block|{
name|using
name|BaseType
operator|=
name|RecursiveASTVisitor
operator|<
name|RecursiveSymbolVisitor
operator|<
name|T
operator|>>
block|;
name|public
operator|:
name|RecursiveSymbolVisitor
argument_list|(
specifier|const
name|SourceManager
operator|&
name|SM
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LangOpts
argument_list|)
operator|:
name|SM
argument_list|(
name|SM
argument_list|)
block|,
name|LangOpts
argument_list|(
argument|LangOpts
argument_list|)
block|{}
name|bool
name|visitSymbolOccurrence
argument_list|(
argument|const NamedDecl *ND
argument_list|,
argument|ArrayRef<SourceRange> NameRanges
argument_list|)
block|{
return|return
name|true
return|;
block|}
comment|// Declaration visitors:
name|bool
name|VisitNamedDecl
argument_list|(
argument|const NamedDecl *D
argument_list|)
block|{
return|return
name|isa
operator|<
name|CXXConversionDecl
operator|>
operator|(
name|D
operator|)
operator|?
name|true
operator|:
name|visit
argument_list|(
name|D
argument_list|,
name|D
operator|->
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|VisitCXXConstructorDecl
argument_list|(
argument|const CXXConstructorDecl *CD
argument_list|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|*
name|Initializer
range|:
name|CD
operator|->
name|inits
argument_list|()
control|)
block|{
comment|// Ignore implicit initializers.
if|if
condition|(
operator|!
name|Initializer
operator|->
name|isWritten
argument_list|()
condition|)
continue|continue;
if|if
condition|(
specifier|const
name|FieldDecl
modifier|*
name|FD
init|=
name|Initializer
operator|->
name|getMember
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|visit
argument_list|(
name|FD
argument_list|,
name|Initializer
operator|->
name|getSourceLocation
argument_list|()
argument_list|,
name|Lexer
operator|::
name|getLocForEndOfToken
argument_list|(
name|Initializer
operator|->
name|getSourceLocation
argument_list|()
argument_list|,
literal|0
argument_list|,
name|SM
argument_list|,
name|LangOpts
argument_list|)
argument_list|)
condition|)
return|return
name|false
return|;
block|}
block|}
return|return
name|true
return|;
block|}
comment|// Expression visitors:
name|bool
name|VisitDeclRefExpr
argument_list|(
argument|const DeclRefExpr *Expr
argument_list|)
block|{
return|return
name|visit
argument_list|(
name|Expr
operator|->
name|getFoundDecl
argument_list|()
argument_list|,
name|Expr
operator|->
name|getLocation
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|VisitMemberExpr
argument_list|(
argument|const MemberExpr *Expr
argument_list|)
block|{
return|return
name|visit
argument_list|(
name|Expr
operator|->
name|getFoundDecl
argument_list|()
operator|.
name|getDecl
argument_list|()
argument_list|,
name|Expr
operator|->
name|getMemberLoc
argument_list|()
argument_list|)
return|;
block|}
comment|// Other visitors:
name|bool
name|VisitTypeLoc
argument_list|(
argument|const TypeLoc Loc
argument_list|)
block|{
specifier|const
name|SourceLocation
name|TypeBeginLoc
operator|=
name|Loc
operator|.
name|getBeginLoc
argument_list|()
block|;
specifier|const
name|SourceLocation
name|TypeEndLoc
operator|=
name|Lexer
operator|::
name|getLocForEndOfToken
argument_list|(
name|TypeBeginLoc
argument_list|,
literal|0
argument_list|,
name|SM
argument_list|,
name|LangOpts
argument_list|)
block|;
if|if
condition|(
specifier|const
specifier|auto
modifier|*
name|TemplateTypeParm
init|=
name|dyn_cast
operator|<
name|TemplateTypeParmType
operator|>
operator|(
name|Loc
operator|.
name|getType
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|visit
argument_list|(
name|TemplateTypeParm
operator|->
name|getDecl
argument_list|()
argument_list|,
name|TypeBeginLoc
argument_list|,
name|TypeEndLoc
argument_list|)
condition|)
return|return
name|false
return|;
block|}
if|if
condition|(
specifier|const
specifier|auto
modifier|*
name|TemplateSpecType
init|=
name|dyn_cast
operator|<
name|TemplateSpecializationType
operator|>
operator|(
name|Loc
operator|.
name|getType
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|visit
argument_list|(
name|TemplateSpecType
operator|->
name|getTemplateName
argument_list|()
operator|.
name|getAsTemplateDecl
argument_list|()
argument_list|,
name|TypeBeginLoc
argument_list|,
name|TypeEndLoc
argument_list|)
condition|)
return|return
name|false
return|;
block|}
return|return
name|visit
argument_list|(
name|Loc
operator|.
name|getType
argument_list|()
operator|->
name|getAsCXXRecordDecl
argument_list|()
argument_list|,
name|TypeBeginLoc
argument_list|,
name|TypeEndLoc
argument_list|)
return|;
block|}
name|bool
name|TraverseNestedNameSpecifierLoc
argument_list|(
argument|NestedNameSpecifierLoc NNS
argument_list|)
block|{
comment|// The base visitor will visit NNSL prefixes, so we should only look at
comment|// the current NNS.
if|if
condition|(
name|NNS
condition|)
block|{
specifier|const
name|NamespaceDecl
modifier|*
name|ND
init|=
name|NNS
operator|.
name|getNestedNameSpecifier
argument_list|()
operator|->
name|getAsNamespace
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|visit
argument_list|(
name|ND
argument_list|,
name|NNS
operator|.
name|getLocalBeginLoc
argument_list|()
argument_list|,
name|NNS
operator|.
name|getLocalEndLoc
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
block|}
return|return
name|BaseType
operator|::
name|TraverseNestedNameSpecifierLoc
argument_list|(
name|NNS
argument_list|)
return|;
block|}
name|private
operator|:
specifier|const
name|SourceManager
operator|&
name|SM
block|;
specifier|const
name|LangOptions
operator|&
name|LangOpts
block|;
name|bool
name|visit
argument_list|(
argument|const NamedDecl *ND
argument_list|,
argument|SourceLocation BeginLoc
argument_list|,
argument|SourceLocation EndLoc
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|visitSymbolOccurrence
argument_list|(
name|ND
argument_list|,
name|SourceRange
argument_list|(
name|BeginLoc
argument_list|,
name|EndLoc
argument_list|)
argument_list|)
return|;
block|}
name|bool
name|visit
argument_list|(
argument|const NamedDecl *ND
argument_list|,
argument|SourceLocation Loc
argument_list|)
block|{
return|return
name|visit
argument_list|(
name|ND
argument_list|,
name|Loc
argument_list|,
name|Loc
operator|.
name|getLocWithOffset
argument_list|(
name|ND
operator|->
name|getNameAsString
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
expr|}
block|;  }
comment|// end namespace tooling
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_TOOLING_REFACTOR_RECURSIVE_SYMBOL_VISITOR_H
end_comment

end_unit

