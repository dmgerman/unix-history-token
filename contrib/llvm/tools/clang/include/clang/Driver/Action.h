begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- Action.h - Abstract compilation steps ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_DRIVER_ACTION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_DRIVER_ACTION_H
end_define

begin_include
include|#
directive|include
file|"clang/Driver/Types.h"
end_include

begin_include
include|#
directive|include
file|"clang/Driver/Util.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|opt
block|{
name|class
name|Arg
decl_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|driver
block|{
comment|/// Action - Represent an abstract compilation step to perform.
comment|///
comment|/// An action represents an edge in the compilation graph; typically
comment|/// it is a job to transform an input using some tool.
comment|///
comment|/// The current driver is hard wired to expect actions which produce a
comment|/// single primary output, at least in terms of controlling the
comment|/// compilation. Actions can produce auxiliary files, but can only
comment|/// produce a single output to feed into subsequent actions.
name|class
name|Action
block|{
name|public
label|:
typedef|typedef
name|ActionList
operator|::
name|size_type
name|size_type
expr_stmt|;
typedef|typedef
name|ActionList
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|ActionList
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
enum|enum
name|ActionClass
block|{
name|InputClass
init|=
literal|0
block|,
name|BindArchClass
block|,
name|CudaDeviceClass
block|,
name|CudaHostClass
block|,
name|PreprocessJobClass
block|,
name|PrecompileJobClass
block|,
name|AnalyzeJobClass
block|,
name|MigrateJobClass
block|,
name|CompileJobClass
block|,
name|BackendJobClass
block|,
name|AssembleJobClass
block|,
name|LinkJobClass
block|,
name|LipoJobClass
block|,
name|DsymutilJobClass
block|,
name|VerifyDebugInfoJobClass
block|,
name|VerifyPCHJobClass
block|,
name|JobClassFirst
init|=
name|PreprocessJobClass
block|,
name|JobClassLast
init|=
name|VerifyPCHJobClass
block|}
enum|;
specifier|static
specifier|const
name|char
modifier|*
name|getClassName
parameter_list|(
name|ActionClass
name|AC
parameter_list|)
function_decl|;
name|private
label|:
name|ActionClass
name|Kind
decl_stmt|;
comment|/// The output type of this action.
name|types
operator|::
name|ID
name|Type
expr_stmt|;
name|ActionList
name|Inputs
decl_stmt|;
name|unsigned
name|OwnsInputs
range|:
literal|1
decl_stmt|;
name|protected
label|:
name|Action
argument_list|(
argument|ActionClass Kind
argument_list|,
argument|types::ID Type
argument_list|)
block|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Type
argument_list|(
name|Type
argument_list|)
operator|,
name|OwnsInputs
argument_list|(
argument|true
argument_list|)
block|{}
name|Action
argument_list|(
argument|ActionClass Kind
argument_list|,
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID Type
argument_list|)
operator|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Type
argument_list|(
name|Type
argument_list|)
operator|,
name|Inputs
argument_list|(
literal|1
argument_list|,
name|Input
operator|.
name|release
argument_list|()
argument_list|)
operator|,
name|OwnsInputs
argument_list|(
argument|true
argument_list|)
block|{   }
name|Action
argument_list|(
argument|ActionClass Kind
argument_list|,
argument|std::unique_ptr<Action> Input
argument_list|)
operator|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Type
argument_list|(
name|Input
operator|->
name|getType
argument_list|()
argument_list|)
operator|,
name|Inputs
argument_list|(
literal|1
argument_list|,
name|Input
operator|.
name|release
argument_list|()
argument_list|)
operator|,
name|OwnsInputs
argument_list|(
argument|true
argument_list|)
block|{}
name|Action
argument_list|(
argument|ActionClass Kind
argument_list|,
argument|const ActionList&Inputs
argument_list|,
argument|types::ID Type
argument_list|)
operator|:
name|Kind
argument_list|(
name|Kind
argument_list|)
operator|,
name|Type
argument_list|(
name|Type
argument_list|)
operator|,
name|Inputs
argument_list|(
name|Inputs
argument_list|)
operator|,
name|OwnsInputs
argument_list|(
argument|true
argument_list|)
block|{}
name|public
operator|:
name|virtual
operator|~
name|Action
argument_list|()
expr_stmt|;
specifier|const
name|char
operator|*
name|getClassName
argument_list|()
specifier|const
block|{
return|return
name|Action
operator|::
name|getClassName
argument_list|(
name|getKind
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|getOwnsInputs
parameter_list|()
block|{
return|return
name|OwnsInputs
return|;
block|}
name|void
name|setOwnsInputs
parameter_list|(
name|bool
name|Value
parameter_list|)
block|{
name|OwnsInputs
operator|=
name|Value
expr_stmt|;
block|}
name|ActionClass
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|types
operator|::
name|ID
name|getType
argument_list|()
specifier|const
block|{
return|return
name|Type
return|;
block|}
name|ActionList
modifier|&
name|getInputs
parameter_list|()
block|{
return|return
name|Inputs
return|;
block|}
specifier|const
name|ActionList
operator|&
name|getInputs
argument_list|()
specifier|const
block|{
return|return
name|Inputs
return|;
block|}
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|Inputs
operator|.
name|size
argument_list|()
return|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Inputs
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Inputs
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Inputs
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Inputs
operator|.
name|end
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|class
name|InputAction
range|:
name|public
name|Action
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|Arg
operator|&
name|Input
block|;
name|public
operator|:
name|InputAction
argument_list|(
argument|const llvm::opt::Arg&Input
argument_list|,
argument|types::ID Type
argument_list|)
block|;
specifier|const
name|llvm
operator|::
name|opt
operator|::
name|Arg
operator|&
name|getInputArg
argument_list|()
specifier|const
block|{
return|return
name|Input
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|InputClass
return|;
block|}
expr|}
block|;
name|class
name|BindArchAction
operator|:
name|public
name|Action
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
comment|/// The architecture to bind, or 0 if the default architecture
comment|/// should be bound.
specifier|const
name|char
operator|*
name|ArchName
block|;
name|public
operator|:
name|BindArchAction
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|Action
operator|>
name|Input
argument_list|,
specifier|const
name|char
operator|*
name|ArchName
argument_list|)
block|;
specifier|const
name|char
operator|*
name|getArchName
argument_list|()
specifier|const
block|{
return|return
name|ArchName
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|BindArchClass
return|;
block|}
expr|}
block|;
name|class
name|CudaDeviceAction
operator|:
name|public
name|Action
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
comment|/// GPU architecture to bind -- e.g 'sm_35'.
specifier|const
name|char
operator|*
name|GpuArchName
block|;
comment|/// True when action results are not consumed by the host action (e.g when
comment|/// -fsyntax-only or --cuda-device-only options are used).
name|bool
name|AtTopLevel
block|;
name|public
operator|:
name|CudaDeviceAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|const char *ArchName
argument_list|,
argument|bool AtTopLevel
argument_list|)
block|;
specifier|const
name|char
operator|*
name|getGpuArchName
argument_list|()
specifier|const
block|{
return|return
name|GpuArchName
return|;
block|}
name|bool
name|isAtTopLevel
argument_list|()
specifier|const
block|{
return|return
name|AtTopLevel
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|CudaDeviceClass
return|;
block|}
expr|}
block|;
name|class
name|CudaHostAction
operator|:
name|public
name|Action
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|ActionList
name|DeviceActions
block|;
name|public
operator|:
name|CudaHostAction
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|Action
operator|>
name|Input
argument_list|,
specifier|const
name|ActionList
operator|&
name|DeviceActions
argument_list|)
block|;
operator|~
name|CudaHostAction
argument_list|()
name|override
block|;
name|ActionList
operator|&
name|getDeviceActions
argument_list|()
block|{
return|return
name|DeviceActions
return|;
block|}
specifier|const
name|ActionList
operator|&
name|getDeviceActions
argument_list|()
specifier|const
block|{
return|return
name|DeviceActions
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|CudaHostClass
return|;
block|}
expr|}
block|;
name|class
name|JobAction
operator|:
name|public
name|Action
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|protected
operator|:
name|JobAction
argument_list|(
argument|ActionClass Kind
argument_list|,
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID Type
argument_list|)
block|;
name|JobAction
argument_list|(
argument|ActionClass Kind
argument_list|,
argument|const ActionList&Inputs
argument_list|,
argument|types::ID Type
argument_list|)
block|;
name|public
operator|:
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
operator|(
name|A
operator|->
name|getKind
argument_list|()
operator|>=
name|JobClassFirst
operator|&&
name|A
operator|->
name|getKind
argument_list|()
operator|<=
name|JobClassLast
operator|)
return|;
block|}
expr|}
block|;
name|class
name|PreprocessJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|PreprocessJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID OutputType
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|PreprocessJobClass
return|;
block|}
expr|}
block|;
name|class
name|PrecompileJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|PrecompileJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID OutputType
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|PrecompileJobClass
return|;
block|}
expr|}
block|;
name|class
name|AnalyzeJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|AnalyzeJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID OutputType
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|AnalyzeJobClass
return|;
block|}
expr|}
block|;
name|class
name|MigrateJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|MigrateJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID OutputType
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|MigrateJobClass
return|;
block|}
expr|}
block|;
name|class
name|CompileJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|CompileJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID OutputType
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|CompileJobClass
return|;
block|}
expr|}
block|;
name|class
name|BackendJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|BackendJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID OutputType
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|BackendJobClass
return|;
block|}
expr|}
block|;
name|class
name|AssembleJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|AssembleJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID OutputType
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|AssembleJobClass
return|;
block|}
expr|}
block|;
name|class
name|LinkJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|LinkJobAction
argument_list|(
argument|ActionList&Inputs
argument_list|,
argument|types::ID Type
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|LinkJobClass
return|;
block|}
expr|}
block|;
name|class
name|LipoJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|LipoJobAction
argument_list|(
argument|ActionList&Inputs
argument_list|,
argument|types::ID Type
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|LipoJobClass
return|;
block|}
expr|}
block|;
name|class
name|DsymutilJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|DsymutilJobAction
argument_list|(
argument|ActionList&Inputs
argument_list|,
argument|types::ID Type
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|DsymutilJobClass
return|;
block|}
expr|}
block|;
name|class
name|VerifyJobAction
operator|:
name|public
name|JobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|VerifyJobAction
argument_list|(
argument|ActionClass Kind
argument_list|,
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID Type
argument_list|)
block|;
name|VerifyJobAction
argument_list|(
argument|ActionClass Kind
argument_list|,
argument|ActionList&Inputs
argument_list|,
argument|types::ID Type
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|VerifyDebugInfoJobClass
operator|||
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|VerifyPCHJobClass
return|;
block|}
expr|}
block|;
name|class
name|VerifyDebugInfoJobAction
operator|:
name|public
name|VerifyJobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|VerifyDebugInfoJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID Type
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|VerifyDebugInfoJobClass
return|;
block|}
expr|}
block|;
name|class
name|VerifyPCHJobAction
operator|:
name|public
name|VerifyJobAction
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|VerifyPCHJobAction
argument_list|(
argument|std::unique_ptr<Action> Input
argument_list|,
argument|types::ID Type
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const Action *A
argument_list|)
block|{
return|return
name|A
operator|->
name|getKind
argument_list|()
operator|==
name|VerifyPCHJobClass
return|;
block|}
expr|}
block|;  }
comment|// end namespace driver
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

