begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- OpenCLOptions.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief Defines the clang::OpenCLOptions class.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_BASIC_OPENCLOPTIONS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_BASIC_OPENCLOPTIONS_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringMap.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// \brief OpenCL supported extensions and optional core features
name|class
name|OpenCLOptions
block|{
struct|struct
name|Info
block|{
name|bool
name|Supported
decl_stmt|;
comment|// Is this option supported
name|bool
name|Enabled
decl_stmt|;
comment|// Is this option enabled
name|unsigned
name|Avail
decl_stmt|;
comment|// Option starts to be available in this OpenCL version
name|unsigned
name|Core
decl_stmt|;
comment|// Option becomes (optional) core feature in this OpenCL
comment|// version
name|Info
argument_list|(
argument|bool S = false
argument_list|,
argument|bool E = false
argument_list|,
argument|unsigned A =
literal|100
argument_list|,
argument|unsigned C = ~
literal|0U
argument_list|)
block|:
name|Supported
argument_list|(
name|S
argument_list|)
operator|,
name|Enabled
argument_list|(
name|E
argument_list|)
operator|,
name|Avail
argument_list|(
name|A
argument_list|)
operator|,
name|Core
argument_list|(
argument|C
argument_list|)
block|{}
block|}
struct|;
name|llvm
operator|::
name|StringMap
operator|<
name|Info
operator|>
name|OptMap
expr_stmt|;
name|public
label|:
name|bool
name|isKnown
argument_list|(
name|llvm
operator|::
name|StringRef
name|Ext
argument_list|)
decl|const
block|{
return|return
name|OptMap
operator|.
name|find
argument_list|(
name|Ext
argument_list|)
operator|!=
name|OptMap
operator|.
name|end
argument_list|()
return|;
block|}
name|bool
name|isEnabled
argument_list|(
name|llvm
operator|::
name|StringRef
name|Ext
argument_list|)
decl|const
block|{
return|return
name|OptMap
operator|.
name|find
argument_list|(
name|Ext
argument_list|)
operator|->
name|second
operator|.
name|Enabled
return|;
block|}
comment|// Is supported as either an extension or an (optional) core feature for
comment|// OpenCL version \p CLVer.
name|bool
name|isSupported
argument_list|(
name|llvm
operator|::
name|StringRef
name|Ext
argument_list|,
name|unsigned
name|CLVer
argument_list|)
decl|const
block|{
name|auto
name|I
init|=
name|OptMap
operator|.
name|find
argument_list|(
name|Ext
argument_list|)
operator|->
name|getValue
argument_list|()
decl_stmt|;
return|return
name|I
operator|.
name|Supported
operator|&&
name|I
operator|.
name|Avail
operator|<=
name|CLVer
return|;
block|}
comment|// Is supported (optional) OpenCL core features for OpenCL version \p CLVer.
comment|// For supported extension, return false.
name|bool
name|isSupportedCore
argument_list|(
name|llvm
operator|::
name|StringRef
name|Ext
argument_list|,
name|unsigned
name|CLVer
argument_list|)
decl|const
block|{
name|auto
name|I
init|=
name|OptMap
operator|.
name|find
argument_list|(
name|Ext
argument_list|)
operator|->
name|getValue
argument_list|()
decl_stmt|;
return|return
name|I
operator|.
name|Supported
operator|&&
name|I
operator|.
name|Avail
operator|<=
name|CLVer
operator|&&
name|I
operator|.
name|Core
operator|!=
operator|~
literal|0U
operator|&&
name|CLVer
operator|>=
name|I
operator|.
name|Core
return|;
block|}
comment|// Is supported OpenCL extension for OpenCL version \p CLVer.
comment|// For supported (optional) core feature, return false.
name|bool
name|isSupportedExtension
argument_list|(
name|llvm
operator|::
name|StringRef
name|Ext
argument_list|,
name|unsigned
name|CLVer
argument_list|)
decl|const
block|{
name|auto
name|I
init|=
name|OptMap
operator|.
name|find
argument_list|(
name|Ext
argument_list|)
operator|->
name|getValue
argument_list|()
decl_stmt|;
return|return
name|I
operator|.
name|Supported
operator|&&
name|I
operator|.
name|Avail
operator|<=
name|CLVer
operator|&&
operator|(
name|I
operator|.
name|Core
operator|==
operator|~
literal|0U
operator|||
name|CLVer
operator|<
name|I
operator|.
name|Core
operator|)
return|;
block|}
name|void
name|enable
argument_list|(
name|llvm
operator|::
name|StringRef
name|Ext
argument_list|,
name|bool
name|V
operator|=
name|true
argument_list|)
block|{
name|OptMap
index|[
name|Ext
index|]
operator|.
name|Enabled
operator|=
name|V
expr_stmt|;
block|}
comment|/// \brief Enable or disable support for OpenCL extensions
comment|/// \param Ext name of the extension optionally prefixed with
comment|///        '+' or '-'
comment|/// \param V used when \p Ext is not prefixed by '+' or '-'
name|void
name|support
argument_list|(
name|llvm
operator|::
name|StringRef
name|Ext
argument_list|,
name|bool
name|V
operator|=
name|true
argument_list|)
block|{
name|assert
argument_list|(
operator|!
name|Ext
operator|.
name|empty
argument_list|()
operator|&&
literal|"Extension is empty."
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|Ext
index|[
literal|0
index|]
condition|)
block|{
case|case
literal|'+'
case|:
name|V
operator|=
name|true
expr_stmt|;
name|Ext
operator|=
name|Ext
operator|.
name|drop_front
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'-'
case|:
name|V
operator|=
name|false
expr_stmt|;
name|Ext
operator|=
name|Ext
operator|.
name|drop_front
argument_list|()
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|Ext
operator|.
name|equals
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
name|supportAll
argument_list|(
name|V
argument_list|)
expr_stmt|;
return|return;
block|}
name|OptMap
index|[
name|Ext
index|]
operator|.
name|Supported
operator|=
name|V
expr_stmt|;
block|}
name|OpenCLOptions
argument_list|()
block|{
define|#
directive|define
name|OPENCLEXT_INTERNAL
parameter_list|(
name|Ext
parameter_list|,
name|AvailVer
parameter_list|,
name|CoreVer
parameter_list|)
define|\
value|OptMap[#Ext].Avail = AvailVer; \     OptMap[#Ext].Core = CoreVer;
include|#
directive|include
file|"clang/Basic/OpenCLExtensions.def"
block|}
name|void
name|addSupport
parameter_list|(
specifier|const
name|OpenCLOptions
modifier|&
name|Opts
parameter_list|)
block|{
for|for
control|(
name|auto
operator|&
name|I
operator|:
name|Opts
operator|.
name|OptMap
control|)
if|if
condition|(
name|I
operator|.
name|second
operator|.
name|Supported
condition|)
name|OptMap
index|[
name|I
operator|.
name|getKey
argument_list|()
index|]
operator|.
name|Supported
operator|=
name|true
expr_stmt|;
block|}
name|void
name|copy
parameter_list|(
specifier|const
name|OpenCLOptions
modifier|&
name|Opts
parameter_list|)
block|{
name|OptMap
operator|=
name|Opts
operator|.
name|OptMap
expr_stmt|;
block|}
comment|// Turn on or off support of all options.
name|void
name|supportAll
parameter_list|(
name|bool
name|On
init|=
name|true
parameter_list|)
block|{
for|for
control|(
name|llvm
operator|::
name|StringMap
operator|<
name|Info
operator|>
operator|::
name|iterator
name|I
operator|=
name|OptMap
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|OptMap
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|I
operator|->
name|second
operator|.
name|Supported
operator|=
name|On
expr_stmt|;
block|}
name|void
name|disableAll
parameter_list|()
block|{
for|for
control|(
name|llvm
operator|::
name|StringMap
operator|<
name|Info
operator|>
operator|::
name|iterator
name|I
operator|=
name|OptMap
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|OptMap
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|I
operator|->
name|second
operator|.
name|Enabled
operator|=
name|false
expr_stmt|;
block|}
name|void
name|enableSupportedCore
parameter_list|(
name|unsigned
name|CLVer
parameter_list|)
block|{
for|for
control|(
name|llvm
operator|::
name|StringMap
operator|<
name|Info
operator|>
operator|::
name|iterator
name|I
operator|=
name|OptMap
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|OptMap
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|isSupportedCore
argument_list|(
name|I
operator|->
name|getKey
argument_list|()
argument_list|,
name|CLVer
argument_list|)
condition|)
name|I
operator|->
name|second
operator|.
name|Enabled
operator|=
name|true
expr_stmt|;
block|}
name|friend
name|class
name|ASTWriter
decl_stmt|;
name|friend
name|class
name|ASTReader
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

