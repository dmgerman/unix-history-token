begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- TargetBuiltins.h - Target specific builtin IDs -------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_BASIC_TARGET_BUILTINS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_BASIC_TARGET_BUILTINS_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/Builtins.h"
end_include

begin_undef
undef|#
directive|undef
name|PPC
end_undef

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// ARM builtins
name|namespace
name|ARM
block|{
enum|enum
block|{
name|LastTIBuiltin
init|=
name|clang
operator|::
name|Builtin
operator|::
name|FirstTSBuiltin
operator|-
literal|1
block|,
define|#
directive|define
name|BUILTIN
parameter_list|(
name|ID
parameter_list|,
name|TYPE
parameter_list|,
name|ATTRS
parameter_list|)
value|BI##ID,
include|#
directive|include
file|"clang/Basic/BuiltinsARM.def"
name|LastTSBuiltin
block|}
enum|;
block|}
comment|/// PPC builtins
name|namespace
name|PPC
block|{
enum|enum
block|{
name|LastTIBuiltin
init|=
name|clang
operator|::
name|Builtin
operator|::
name|FirstTSBuiltin
operator|-
literal|1
block|,
define|#
directive|define
name|BUILTIN
parameter_list|(
name|ID
parameter_list|,
name|TYPE
parameter_list|,
name|ATTRS
parameter_list|)
value|BI##ID,
include|#
directive|include
file|"clang/Basic/BuiltinsPPC.def"
name|LastTSBuiltin
block|}
enum|;
block|}
comment|/// PTX builtins
name|namespace
name|PTX
block|{
enum|enum
block|{
name|LastTIBuiltin
init|=
name|clang
operator|::
name|Builtin
operator|::
name|FirstTSBuiltin
operator|-
literal|1
block|,
define|#
directive|define
name|BUILTIN
parameter_list|(
name|ID
parameter_list|,
name|TYPE
parameter_list|,
name|ATTRS
parameter_list|)
value|BI##ID,
include|#
directive|include
file|"clang/Basic/BuiltinsPTX.def"
name|LastTSBuiltin
block|}
enum|;
block|}
comment|/// X86 builtins
name|namespace
name|X86
block|{
enum|enum
block|{
name|LastTIBuiltin
init|=
name|clang
operator|::
name|Builtin
operator|::
name|FirstTSBuiltin
operator|-
literal|1
block|,
define|#
directive|define
name|BUILTIN
parameter_list|(
name|ID
parameter_list|,
name|TYPE
parameter_list|,
name|ATTRS
parameter_list|)
value|BI##ID,
include|#
directive|include
file|"clang/Basic/BuiltinsX86.def"
name|LastTSBuiltin
block|}
enum|;
block|}
comment|/// NeonTypeFlags - Flags to identify the types for overloaded Neon
comment|/// builtins.  These must be kept in sync with the flags in
comment|/// utils/TableGen/NeonEmitter.h.
name|class
name|NeonTypeFlags
block|{
enum|enum
block|{
name|EltTypeMask
init|=
literal|0xf
block|,
name|UnsignedFlag
init|=
literal|0x10
block|,
name|QuadFlag
init|=
literal|0x20
block|}
enum|;
name|uint32_t
name|Flags
decl_stmt|;
name|public
label|:
enum|enum
name|EltType
block|{
name|Int8
block|,
name|Int16
block|,
name|Int32
block|,
name|Int64
block|,
name|Poly8
block|,
name|Poly16
block|,
name|Float16
block|,
name|Float32
block|}
enum|;
name|NeonTypeFlags
argument_list|(
argument|unsigned F
argument_list|)
block|:
name|Flags
argument_list|(
argument|F
argument_list|)
block|{}
name|NeonTypeFlags
argument_list|(
argument|EltType ET
argument_list|,
argument|bool IsUnsigned
argument_list|,
argument|bool IsQuad
argument_list|)
block|:
name|Flags
argument_list|(
argument|ET
argument_list|)
block|{
if|if
condition|(
name|IsUnsigned
condition|)
name|Flags
operator||=
name|UnsignedFlag
expr_stmt|;
if|if
condition|(
name|IsQuad
condition|)
name|Flags
operator||=
name|QuadFlag
expr_stmt|;
block|}
name|EltType
name|getEltType
argument_list|()
specifier|const
block|{
return|return
call|(
name|EltType
call|)
argument_list|(
name|Flags
operator|&
name|EltTypeMask
argument_list|)
return|;
block|}
name|bool
name|isPoly
argument_list|()
specifier|const
block|{
name|EltType
name|ET
operator|=
name|getEltType
argument_list|()
block|;
return|return
name|ET
operator|==
name|Poly8
operator|||
name|ET
operator|==
name|Poly16
return|;
block|}
name|bool
name|isUnsigned
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Flags
operator|&
name|UnsignedFlag
operator|)
operator|!=
literal|0
return|;
block|}
name|bool
name|isQuad
argument_list|()
specifier|const
block|{
return|return
operator|(
name|Flags
operator|&
name|QuadFlag
operator|)
operator|!=
literal|0
return|;
block|}
block|}
empty_stmt|;
comment|/// Hexagon builtins
name|namespace
name|Hexagon
block|{
enum|enum
block|{
name|LastTIBuiltin
init|=
name|clang
operator|::
name|Builtin
operator|::
name|FirstTSBuiltin
operator|-
literal|1
block|,
define|#
directive|define
name|BUILTIN
parameter_list|(
name|ID
parameter_list|,
name|TYPE
parameter_list|,
name|ATTRS
parameter_list|)
value|BI##ID,
include|#
directive|include
file|"clang/Basic/BuiltinsHexagon.def"
name|LastTSBuiltin
block|}
enum|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

