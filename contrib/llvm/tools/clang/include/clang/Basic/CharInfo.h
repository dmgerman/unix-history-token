begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- clang/Basic/CharInfo.h - Classifying ASCII Characters ------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_BASIC_CHARINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_BASIC_CHARINFO_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|charinfo
block|{
specifier|extern
specifier|const
name|uint16_t
name|InfoTable
index|[
literal|256
index|]
decl_stmt|;
enum|enum
block|{
name|CHAR_HORZ_WS
init|=
literal|0x0001
block|,
comment|// '\t', '\f', '\v'.  Note, no '\0'
name|CHAR_VERT_WS
init|=
literal|0x0002
block|,
comment|// '\r', '\n'
name|CHAR_SPACE
init|=
literal|0x0004
block|,
comment|// ' '
name|CHAR_DIGIT
init|=
literal|0x0008
block|,
comment|// 0-9
name|CHAR_XLETTER
init|=
literal|0x0010
block|,
comment|// a-f,A-F
name|CHAR_UPPER
init|=
literal|0x0020
block|,
comment|// A-Z
name|CHAR_LOWER
init|=
literal|0x0040
block|,
comment|// a-z
name|CHAR_UNDER
init|=
literal|0x0080
block|,
comment|// _
name|CHAR_PERIOD
init|=
literal|0x0100
block|,
comment|// .
name|CHAR_RAWDEL
init|=
literal|0x0200
block|,
comment|// {}[]#<>%:;?*+-/^&|~!=,"'
name|CHAR_PUNCT
init|=
literal|0x0400
comment|// `$@()
block|}
enum|;
enum|enum
block|{
name|CHAR_XUPPER
init|=
name|CHAR_XLETTER
operator||
name|CHAR_UPPER
block|,
name|CHAR_XLOWER
init|=
name|CHAR_XLETTER
operator||
name|CHAR_LOWER
block|}
enum|;
block|}
comment|// end namespace charinfo
comment|/// Returns true if this is an ASCII character.
name|LLVM_READNONE
specifier|static
specifier|inline
name|bool
name|isASCII
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|c
operator|)
operator|<=
literal|127
return|;
block|}
comment|/// Returns true if this is a valid first character of a C identifier,
comment|/// which is [a-zA-Z_].
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isIdentifierHead
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|,
name|bool
name|AllowDollar
init|=
name|false
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
if|if
condition|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_UPPER
operator||
name|CHAR_LOWER
operator||
name|CHAR_UNDER
operator|)
condition|)
return|return
name|true
return|;
return|return
name|AllowDollar
operator|&&
name|c
operator|==
literal|'$'
return|;
block|}
comment|/// Returns true if this is a body character of a C identifier,
comment|/// which is [a-zA-Z0-9_].
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isIdentifierBody
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|,
name|bool
name|AllowDollar
init|=
name|false
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
if|if
condition|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_UPPER
operator||
name|CHAR_LOWER
operator||
name|CHAR_DIGIT
operator||
name|CHAR_UNDER
operator|)
condition|)
return|return
name|true
return|;
return|return
name|AllowDollar
operator|&&
name|c
operator|==
literal|'$'
return|;
block|}
comment|/// Returns true if this character is horizontal ASCII whitespace:
comment|/// ' ', '\\t', '\\f', '\\v'.
comment|///
comment|/// Note that this returns false for '\\0'.
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isHorizontalWhitespace
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_HORZ_WS
operator||
name|CHAR_SPACE
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Returns true if this character is vertical ASCII whitespace: '\\n', '\\r'.
comment|///
comment|/// Note that this returns false for '\\0'.
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isVerticalWhitespace
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
name|CHAR_VERT_WS
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is horizontal or vertical ASCII whitespace:
comment|/// ' ', '\\t', '\\f', '\\v', '\\n', '\\r'.
comment|///
comment|/// Note that this returns false for '\\0'.
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isWhitespace
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_HORZ_WS
operator||
name|CHAR_VERT_WS
operator||
name|CHAR_SPACE
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is an ASCII digit: [0-9]
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isDigit
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
name|CHAR_DIGIT
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is a lowercase ASCII letter: [a-z]
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isLowercase
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
name|CHAR_LOWER
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is an uppercase ASCII letter: [A-Z]
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isUppercase
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
name|CHAR_UPPER
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is an ASCII letter: [a-zA-Z]
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isLetter
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_UPPER
operator||
name|CHAR_LOWER
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is an ASCII letter or digit: [a-zA-Z0-9]
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isAlphanumeric
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_DIGIT
operator||
name|CHAR_UPPER
operator||
name|CHAR_LOWER
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is an ASCII hex digit: [0-9a-fA-F]
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isHexDigit
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_DIGIT
operator||
name|CHAR_XLETTER
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is an ASCII punctuation character.
comment|///
comment|/// Note that '_' is both a punctuation character and an identifier character!
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isPunctuation
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_UNDER
operator||
name|CHAR_PERIOD
operator||
name|CHAR_RAWDEL
operator||
name|CHAR_PUNCT
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this character is an ASCII printable character; that is, a
comment|/// character that should take exactly one column to print in a fixed-width
comment|/// terminal.
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isPrintable
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_UPPER
operator||
name|CHAR_LOWER
operator||
name|CHAR_PERIOD
operator||
name|CHAR_PUNCT
operator||
name|CHAR_DIGIT
operator||
name|CHAR_UNDER
operator||
name|CHAR_RAWDEL
operator||
name|CHAR_SPACE
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this is the body character of a C preprocessing number,
comment|/// which is [a-zA-Z0-9_.].
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isPreprocessingNumberBody
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_UPPER
operator||
name|CHAR_LOWER
operator||
name|CHAR_DIGIT
operator||
name|CHAR_UNDER
operator||
name|CHAR_PERIOD
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Return true if this is the body character of a C++ raw string delimiter.
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isRawStringDelimBody
parameter_list|(
name|unsigned
name|char
name|c
parameter_list|)
block|{
name|using
name|namespace
name|charinfo
decl_stmt|;
return|return
operator|(
name|InfoTable
index|[
name|c
index|]
operator|&
operator|(
name|CHAR_UPPER
operator||
name|CHAR_LOWER
operator||
name|CHAR_PERIOD
operator||
name|CHAR_DIGIT
operator||
name|CHAR_UNDER
operator||
name|CHAR_RAWDEL
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// Converts the given ASCII character to its lowercase equivalent.
comment|///
comment|/// If the character is not an uppercase character, it is returned as is.
name|LLVM_READONLY
specifier|static
specifier|inline
name|char
name|toLowercase
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|isUppercase
argument_list|(
name|c
argument_list|)
condition|)
return|return
name|c
operator|+
literal|'a'
operator|-
literal|'A'
return|;
return|return
name|c
return|;
block|}
comment|/// Converts the given ASCII character to its uppercase equivalent.
comment|///
comment|/// If the character is not a lowercase character, it is returned as is.
name|LLVM_READONLY
specifier|static
specifier|inline
name|char
name|toUppercase
parameter_list|(
name|char
name|c
parameter_list|)
block|{
if|if
condition|(
name|isLowercase
argument_list|(
name|c
argument_list|)
condition|)
return|return
name|c
operator|+
literal|'A'
operator|-
literal|'a'
return|;
return|return
name|c
return|;
block|}
comment|/// Return true if this is a valid ASCII identifier.
comment|///
comment|/// Note that this is a very simple check; it does not accept '$' or UCNs as
comment|/// valid identifier characters.
name|LLVM_READONLY
specifier|static
specifier|inline
name|bool
name|isValidIdentifier
parameter_list|(
name|StringRef
name|S
parameter_list|)
block|{
if|if
condition|(
name|S
operator|.
name|empty
argument_list|()
operator|||
operator|!
name|isIdentifierHead
argument_list|(
name|S
index|[
literal|0
index|]
argument_list|)
condition|)
return|return
name|false
return|;
for|for
control|(
name|StringRef
operator|::
name|iterator
name|I
operator|=
name|S
operator|.
name|begin
argument_list|()
operator|,
name|E
operator|=
name|S
operator|.
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
operator|!
name|isIdentifierBody
argument_list|(
operator|*
name|I
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

