begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- SourceLocation.h - Compact identifier for Source Files -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief Defines the clang::SourceLocation class and associated facilities.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_SOURCELOCATION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_SOURCELOCATION_H
end_define

begin_include
include|#
directive|include
file|"clang/Basic/LLVM.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/PointerLikeTypeTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MemoryBuffer
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|DenseMapInfo
expr_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|isPodLike
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|SourceManager
decl_stmt|;
comment|/// \brief An opaque identifier used by SourceManager which refers to a
comment|/// source file (MemoryBuffer) along with its \#include path and \#line data.
comment|///
name|class
name|FileID
block|{
comment|/// \brief A mostly-opaque identifier, where 0 is "invalid",>0 is
comment|/// this module, and<-1 is something loaded from another module.
name|int
name|ID
decl_stmt|;
name|public
label|:
name|FileID
argument_list|()
operator|:
name|ID
argument_list|(
literal|0
argument_list|)
block|{}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
name|ID
operator|==
literal|0
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ID
operator|==
name|RHS
operator|.
name|ID
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ID
operator|<
name|RHS
operator|.
name|ID
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ID
operator|<=
name|RHS
operator|.
name|ID
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|RHS
operator|)
return|;
block|}
name|bool
name|operator
operator|>
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|RHS
operator|<
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|FileID
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|RHS
operator|<=
operator|*
name|this
return|;
block|}
specifier|static
name|FileID
name|getSentinel
parameter_list|()
block|{
return|return
name|get
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
name|unsigned
name|getHashValue
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|ID
operator|)
return|;
block|}
name|private
label|:
name|friend
name|class
name|SourceManager
decl_stmt|;
name|friend
name|class
name|ASTWriter
decl_stmt|;
name|friend
name|class
name|ASTReader
decl_stmt|;
specifier|static
name|FileID
name|get
parameter_list|(
name|int
name|V
parameter_list|)
block|{
name|FileID
name|F
decl_stmt|;
name|F
operator|.
name|ID
operator|=
name|V
expr_stmt|;
return|return
name|F
return|;
block|}
name|int
name|getOpaqueValue
argument_list|()
specifier|const
block|{
return|return
name|ID
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief Encodes a location in the source. The SourceManager can decode this
comment|/// to get at the full include stack, line and column information.
comment|///
comment|/// Technically, a source location is simply an offset into the manager's view
comment|/// of the input source, which is all input buffers (including macro
comment|/// expansions) concatenated in an effectively arbitrary order. The manager
comment|/// actually maintains two blocks of input buffers. One, starting at offset
comment|/// 0 and growing upwards, contains all buffers from this module. The other,
comment|/// starting at the highest possible offset and growing downwards, contains
comment|/// buffers of loaded modules.
comment|///
comment|/// In addition, one bit of SourceLocation is used for quick access to the
comment|/// information whether the location is in a file or a macro expansion.
comment|///
comment|/// It is important that this type remains small. It is currently 32 bits wide.
name|class
name|SourceLocation
block|{
name|unsigned
name|ID
decl_stmt|;
name|friend
name|class
name|SourceManager
decl_stmt|;
name|friend
name|class
name|ASTReader
decl_stmt|;
name|friend
name|class
name|ASTWriter
decl_stmt|;
enum|enum
block|{
name|MacroIDBit
init|=
literal|1U
operator|<<
literal|31
block|}
enum|;
name|public
label|:
name|SourceLocation
argument_list|()
operator|:
name|ID
argument_list|(
literal|0
argument_list|)
block|{}
name|bool
name|isFileID
argument_list|()
specifier|const
block|{
return|return
operator|(
name|ID
operator|&
name|MacroIDBit
operator|)
operator|==
literal|0
return|;
block|}
name|bool
name|isMacroID
argument_list|()
specifier|const
block|{
return|return
operator|(
name|ID
operator|&
name|MacroIDBit
operator|)
operator|!=
literal|0
return|;
block|}
comment|/// \brief Return true if this is a valid SourceLocation object.
comment|///
comment|/// Invalid SourceLocations are often used when events have no corresponding
comment|/// location in the source (e.g. a diagnostic is required for a command line
comment|/// option).
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|ID
operator|!=
literal|0
return|;
block|}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
name|ID
operator|==
literal|0
return|;
block|}
name|private
label|:
comment|/// \brief Return the offset into the manager's global input view.
name|unsigned
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|ID
operator|&
operator|~
name|MacroIDBit
return|;
block|}
specifier|static
name|SourceLocation
name|getFileLoc
parameter_list|(
name|unsigned
name|ID
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|ID
operator|&
name|MacroIDBit
operator|)
operator|==
literal|0
operator|&&
literal|"Ran out of source locations!"
argument_list|)
expr_stmt|;
name|SourceLocation
name|L
decl_stmt|;
name|L
operator|.
name|ID
operator|=
name|ID
expr_stmt|;
return|return
name|L
return|;
block|}
specifier|static
name|SourceLocation
name|getMacroLoc
parameter_list|(
name|unsigned
name|ID
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|ID
operator|&
name|MacroIDBit
operator|)
operator|==
literal|0
operator|&&
literal|"Ran out of source locations!"
argument_list|)
expr_stmt|;
name|SourceLocation
name|L
decl_stmt|;
name|L
operator|.
name|ID
operator|=
name|MacroIDBit
operator||
name|ID
expr_stmt|;
return|return
name|L
return|;
block|}
name|public
label|:
comment|/// \brief Return a source location with the specified offset from this
comment|/// SourceLocation.
name|SourceLocation
name|getLocWithOffset
argument_list|(
name|int
name|Offset
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|(
operator|(
name|getOffset
argument_list|()
operator|+
name|Offset
operator|)
operator|&
name|MacroIDBit
operator|)
operator|==
literal|0
operator|&&
literal|"offset overflow"
argument_list|)
expr_stmt|;
name|SourceLocation
name|L
decl_stmt|;
name|L
operator|.
name|ID
operator|=
name|ID
operator|+
name|Offset
expr_stmt|;
return|return
name|L
return|;
block|}
comment|/// \brief When a SourceLocation itself cannot be used, this returns
comment|/// an (opaque) 32-bit integer encoding for it.
comment|///
comment|/// This should only be passed to SourceLocation::getFromRawEncoding, it
comment|/// should not be inspected directly.
name|unsigned
name|getRawEncoding
argument_list|()
specifier|const
block|{
return|return
name|ID
return|;
block|}
comment|/// \brief Turn a raw encoding of a SourceLocation object into
comment|/// a real SourceLocation.
comment|///
comment|/// \see getRawEncoding.
specifier|static
name|SourceLocation
name|getFromRawEncoding
parameter_list|(
name|unsigned
name|Encoding
parameter_list|)
block|{
name|SourceLocation
name|X
decl_stmt|;
name|X
operator|.
name|ID
operator|=
name|Encoding
expr_stmt|;
return|return
name|X
return|;
block|}
comment|/// \brief When a SourceLocation itself cannot be used, this returns
comment|/// an (opaque) pointer encoding for it.
comment|///
comment|/// This should only be passed to SourceLocation::getFromPtrEncoding, it
comment|/// should not be inspected directly.
name|void
operator|*
name|getPtrEncoding
argument_list|()
specifier|const
block|{
comment|// Double cast to avoid a warning "cast to pointer from integer of different
comment|// size".
return|return
operator|(
name|void
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
name|getRawEncoding
argument_list|()
return|;
block|}
comment|/// getFromPtrEncoding - Turn a pointer encoding of a SourceLocation object
comment|/// into a real SourceLocation.
specifier|static
name|SourceLocation
name|getFromPtrEncoding
parameter_list|(
specifier|const
name|void
modifier|*
name|Encoding
parameter_list|)
block|{
return|return
name|getFromRawEncoding
argument_list|(
operator|(
name|unsigned
operator|)
operator|(
name|uintptr_t
operator|)
name|Encoding
argument_list|)
return|;
block|}
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|SourceManager
operator|&
name|SM
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|(
specifier|const
name|SourceManager
operator|&
name|SM
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SourceLocation
operator|&
name|LHS
operator|,
specifier|const
name|SourceLocation
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|getRawEncoding
argument_list|()
operator|==
name|RHS
operator|.
name|getRawEncoding
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|SourceLocation
operator|&
name|LHS
operator|,
specifier|const
name|SourceLocation
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|==
name|RHS
operator|)
return|;
block|}
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|SourceLocation
operator|&
name|LHS
operator|,
specifier|const
name|SourceLocation
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|getRawEncoding
argument_list|()
operator|<
name|RHS
operator|.
name|getRawEncoding
argument_list|()
return|;
block|}
comment|/// \brief A trival tuple used to represent a source range.
name|class
name|SourceRange
block|{
name|SourceLocation
name|B
decl_stmt|;
name|SourceLocation
name|E
decl_stmt|;
name|public
label|:
name|SourceRange
argument_list|()
operator|:
name|B
argument_list|(
name|SourceLocation
argument_list|()
argument_list|)
operator|,
name|E
argument_list|(
argument|SourceLocation()
argument_list|)
block|{}
name|SourceRange
argument_list|(
argument|SourceLocation loc
argument_list|)
operator|:
name|B
argument_list|(
name|loc
argument_list|)
operator|,
name|E
argument_list|(
argument|loc
argument_list|)
block|{}
name|SourceRange
argument_list|(
argument|SourceLocation begin
argument_list|,
argument|SourceLocation end
argument_list|)
operator|:
name|B
argument_list|(
name|begin
argument_list|)
operator|,
name|E
argument_list|(
argument|end
argument_list|)
block|{}
name|SourceLocation
name|getBegin
argument_list|()
specifier|const
block|{
return|return
name|B
return|;
block|}
name|SourceLocation
name|getEnd
argument_list|()
specifier|const
block|{
return|return
name|E
return|;
block|}
name|void
name|setBegin
parameter_list|(
name|SourceLocation
name|b
parameter_list|)
block|{
name|B
operator|=
name|b
expr_stmt|;
block|}
name|void
name|setEnd
parameter_list|(
name|SourceLocation
name|e
parameter_list|)
block|{
name|E
operator|=
name|e
expr_stmt|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|B
operator|.
name|isValid
argument_list|()
operator|&&
name|E
operator|.
name|isValid
argument_list|()
return|;
block|}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isValid
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SourceRange
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|B
operator|==
name|X
operator|.
name|B
operator|&&
name|E
operator|==
name|X
operator|.
name|E
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|SourceRange
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|B
operator|!=
name|X
operator|.
name|B
operator|||
name|E
operator|!=
name|X
operator|.
name|E
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief Represents a character-granular source range.
comment|///
comment|/// The underlying SourceRange can either specify the starting/ending character
comment|/// of the range, or it can specify the start or the range and the start of the
comment|/// last token of the range (a "token range").  In the token range case, the
comment|/// size of the last token must be measured to determine the actual end of the
comment|/// range.
name|class
name|CharSourceRange
block|{
name|SourceRange
name|Range
decl_stmt|;
name|bool
name|IsTokenRange
decl_stmt|;
name|public
label|:
name|CharSourceRange
argument_list|()
operator|:
name|IsTokenRange
argument_list|(
argument|false
argument_list|)
block|{}
name|CharSourceRange
argument_list|(
argument|SourceRange R
argument_list|,
argument|bool ITR
argument_list|)
operator|:
name|Range
argument_list|(
name|R
argument_list|)
operator|,
name|IsTokenRange
argument_list|(
argument|ITR
argument_list|)
block|{}
specifier|static
name|CharSourceRange
name|getTokenRange
argument_list|(
argument|SourceRange R
argument_list|)
block|{
name|CharSourceRange
name|Result
block|;
name|Result
operator|.
name|Range
operator|=
name|R
block|;
name|Result
operator|.
name|IsTokenRange
operator|=
name|true
block|;
return|return
name|Result
return|;
block|}
specifier|static
name|CharSourceRange
name|getCharRange
parameter_list|(
name|SourceRange
name|R
parameter_list|)
block|{
name|CharSourceRange
name|Result
decl_stmt|;
name|Result
operator|.
name|Range
operator|=
name|R
expr_stmt|;
name|Result
operator|.
name|IsTokenRange
operator|=
name|false
expr_stmt|;
return|return
name|Result
return|;
block|}
specifier|static
name|CharSourceRange
name|getTokenRange
parameter_list|(
name|SourceLocation
name|B
parameter_list|,
name|SourceLocation
name|E
parameter_list|)
block|{
return|return
name|getTokenRange
argument_list|(
name|SourceRange
argument_list|(
name|B
argument_list|,
name|E
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|CharSourceRange
name|getCharRange
parameter_list|(
name|SourceLocation
name|B
parameter_list|,
name|SourceLocation
name|E
parameter_list|)
block|{
return|return
name|getCharRange
argument_list|(
name|SourceRange
argument_list|(
name|B
argument_list|,
name|E
argument_list|)
argument_list|)
return|;
block|}
comment|/// \brief Return true if the end of this range specifies the start of
comment|/// the last token.  Return false if the end of this range specifies the last
comment|/// character in the range.
name|bool
name|isTokenRange
argument_list|()
specifier|const
block|{
return|return
name|IsTokenRange
return|;
block|}
name|bool
name|isCharRange
argument_list|()
specifier|const
block|{
return|return
operator|!
name|IsTokenRange
return|;
block|}
name|SourceLocation
name|getBegin
argument_list|()
specifier|const
block|{
return|return
name|Range
operator|.
name|getBegin
argument_list|()
return|;
block|}
name|SourceLocation
name|getEnd
argument_list|()
specifier|const
block|{
return|return
name|Range
operator|.
name|getEnd
argument_list|()
return|;
block|}
specifier|const
name|SourceRange
operator|&
name|getAsRange
argument_list|()
specifier|const
block|{
return|return
name|Range
return|;
block|}
name|void
name|setBegin
parameter_list|(
name|SourceLocation
name|b
parameter_list|)
block|{
name|Range
operator|.
name|setBegin
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
name|void
name|setEnd
parameter_list|(
name|SourceLocation
name|e
parameter_list|)
block|{
name|Range
operator|.
name|setEnd
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|Range
operator|.
name|isValid
argument_list|()
return|;
block|}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isValid
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|/// \brief A SourceLocation and its associated SourceManager.
comment|///
comment|/// This is useful for argument passing to functions that expect both objects.
name|class
name|FullSourceLoc
range|:
name|public
name|SourceLocation
block|{
specifier|const
name|SourceManager
operator|*
name|SrcMgr
block|;
name|public
operator|:
comment|/// \brief Creates a FullSourceLoc where isValid() returns \c false.
name|explicit
name|FullSourceLoc
argument_list|()
operator|:
name|SrcMgr
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|FullSourceLoc
argument_list|(
argument|SourceLocation Loc
argument_list|,
argument|const SourceManager&SM
argument_list|)
operator|:
name|SourceLocation
argument_list|(
name|Loc
argument_list|)
block|,
name|SrcMgr
argument_list|(
argument|&SM
argument_list|)
block|{}
comment|/// \pre This FullSourceLoc has an associated SourceManager.
specifier|const
name|SourceManager
operator|&
name|getManager
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|SrcMgr
operator|&&
literal|"SourceManager is NULL."
argument_list|)
block|;
return|return
operator|*
name|SrcMgr
return|;
block|}
name|FileID
name|getFileID
argument_list|()
specifier|const
block|;
name|FullSourceLoc
name|getExpansionLoc
argument_list|()
specifier|const
block|;
name|FullSourceLoc
name|getSpellingLoc
argument_list|()
specifier|const
block|;
name|unsigned
name|getExpansionLineNumber
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
name|unsigned
name|getExpansionColumnNumber
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
name|unsigned
name|getSpellingLineNumber
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
name|unsigned
name|getSpellingColumnNumber
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
specifier|const
name|char
operator|*
name|getCharacterData
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
specifier|const
name|llvm
operator|::
name|MemoryBuffer
operator|*
name|getBuffer
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
comment|/// \brief Return a StringRef to the source buffer data for the
comment|/// specified FileID.
name|StringRef
name|getBufferData
argument_list|(
argument|bool *Invalid =
literal|0
argument_list|)
specifier|const
block|;
comment|/// \brief Decompose the specified location into a raw FileID + Offset pair.
comment|///
comment|/// The first element is the FileID, the second is the offset from the
comment|/// start of the buffer of the location.
name|std
operator|::
name|pair
operator|<
name|FileID
block|,
name|unsigned
operator|>
name|getDecomposedLoc
argument_list|()
specifier|const
block|;
name|bool
name|isInSystemHeader
argument_list|()
specifier|const
block|;
comment|/// \brief Determines the order of 2 source locations in the translation unit.
comment|///
comment|/// \returns true if this source location comes before 'Loc', false otherwise.
name|bool
name|isBeforeInTranslationUnitThan
argument_list|(
argument|SourceLocation Loc
argument_list|)
specifier|const
block|;
comment|/// \brief Determines the order of 2 source locations in the translation unit.
comment|///
comment|/// \returns true if this source location comes before 'Loc', false otherwise.
name|bool
name|isBeforeInTranslationUnitThan
argument_list|(
argument|FullSourceLoc Loc
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Loc
operator|.
name|isValid
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
name|SrcMgr
operator|==
name|Loc
operator|.
name|SrcMgr
operator|&&
literal|"Loc comes from another SourceManager!"
argument_list|)
block|;
return|return
name|isBeforeInTranslationUnitThan
argument_list|(
operator|(
name|SourceLocation
operator|)
name|Loc
argument_list|)
return|;
block|}
comment|/// \brief Comparison function class, useful for sorting FullSourceLocs.
expr|struct
name|BeforeThanCompare
operator|:
name|public
name|std
operator|::
name|binary_function
operator|<
name|FullSourceLoc
block|,
name|FullSourceLoc
block|,
name|bool
operator|>
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|FullSourceLoc
operator|&
name|lhs
expr|,
specifier|const
name|FullSourceLoc
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
name|lhs
operator|.
name|isBeforeInTranslationUnitThan
argument_list|(
name|rhs
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// \brief Prints information about this FullSourceLoc to stderr.
comment|///
comment|/// This is useful for debugging.
name|LLVM_ATTRIBUTE_USED
name|void
name|dump
argument_list|()
specifier|const
block|;
name|friend
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|FullSourceLoc
operator|&
name|LHS
expr|,
specifier|const
name|FullSourceLoc
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|getRawEncoding
argument_list|()
operator|==
name|RHS
operator|.
name|getRawEncoding
argument_list|()
operator|&&
name|LHS
operator|.
name|SrcMgr
operator|==
name|RHS
operator|.
name|SrcMgr
return|;
block|}
name|friend
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|FullSourceLoc
operator|&
name|LHS
expr|,
specifier|const
name|FullSourceLoc
operator|&
name|RHS
operator|)
block|{
return|return
operator|!
operator|(
name|LHS
operator|==
name|RHS
operator|)
return|;
block|}
expr|}
block|;
comment|/// \brief Represents an unpacked "presumed" location which can be presented
comment|/// to the user.
comment|///
comment|/// A 'presumed' location can be modified by \#line and GNU line marker
comment|/// directives and is always the expansion point of a normal location.
comment|///
comment|/// You can get a PresumedLoc from a SourceLocation with SourceManager.
name|class
name|PresumedLoc
block|{
specifier|const
name|char
operator|*
name|Filename
block|;
name|unsigned
name|Line
block|,
name|Col
block|;
name|SourceLocation
name|IncludeLoc
block|;
name|public
operator|:
name|PresumedLoc
argument_list|()
operator|:
name|Filename
argument_list|(
literal|0
argument_list|)
block|{}
name|PresumedLoc
argument_list|(
argument|const char *FN
argument_list|,
argument|unsigned Ln
argument_list|,
argument|unsigned Co
argument_list|,
argument|SourceLocation IL
argument_list|)
operator|:
name|Filename
argument_list|(
name|FN
argument_list|)
block|,
name|Line
argument_list|(
name|Ln
argument_list|)
block|,
name|Col
argument_list|(
name|Co
argument_list|)
block|,
name|IncludeLoc
argument_list|(
argument|IL
argument_list|)
block|{   }
comment|/// \brief Return true if this object is invalid or uninitialized.
comment|///
comment|/// This occurs when created with invalid source locations or when walking
comment|/// off the top of a \#include stack.
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
name|Filename
operator|==
literal|0
return|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|Filename
operator|!=
literal|0
return|;
block|}
comment|/// \brief Return the presumed filename of this location.
comment|///
comment|/// This can be affected by \#line etc.
specifier|const
name|char
operator|*
name|getFilename
argument_list|()
specifier|const
block|{
return|return
name|Filename
return|;
block|}
comment|/// \brief Return the presumed line number of this location.
comment|///
comment|/// This can be affected by \#line etc.
name|unsigned
name|getLine
argument_list|()
specifier|const
block|{
return|return
name|Line
return|;
block|}
comment|/// \brief Return the presumed column number of this location.
comment|///
comment|/// This cannot be affected by \#line, but is packaged here for convenience.
name|unsigned
name|getColumn
argument_list|()
specifier|const
block|{
return|return
name|Col
return|;
block|}
comment|/// \brief Return the presumed include location of this location.
comment|///
comment|/// This can be affected by GNU linemarker directives.
name|SourceLocation
name|getIncludeLoc
argument_list|()
specifier|const
block|{
return|return
name|IncludeLoc
return|;
block|}
expr|}
block|;   }
comment|// end namespace clang
name|namespace
name|llvm
block|{
comment|/// Define DenseMapInfo so that FileID's can be used as keys in DenseMap and
comment|/// DenseSets.
name|template
operator|<
operator|>
expr|struct
name|DenseMapInfo
operator|<
name|clang
operator|::
name|FileID
operator|>
block|{
specifier|static
specifier|inline
name|clang
operator|::
name|FileID
name|getEmptyKey
argument_list|()
block|{
return|return
name|clang
operator|::
name|FileID
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|clang
operator|::
name|FileID
name|getTombstoneKey
argument_list|()
block|{
return|return
name|clang
operator|::
name|FileID
operator|::
name|getSentinel
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|clang::FileID S
argument_list|)
block|{
return|return
name|S
operator|.
name|getHashValue
argument_list|()
return|;
block|}
specifier|static
name|bool
name|isEqual
argument_list|(
argument|clang::FileID LHS
argument_list|,
argument|clang::FileID RHS
argument_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|isPodLike
operator|<
name|clang
operator|::
name|SourceLocation
operator|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|isPodLike
operator|<
name|clang
operator|::
name|FileID
operator|>
block|{
specifier|static
specifier|const
name|bool
name|value
operator|=
name|true
block|; }
block|;
comment|// Teach SmallPtrSet how to handle SourceLocation.
name|template
operator|<
operator|>
name|class
name|PointerLikeTypeTraits
operator|<
name|clang
operator|::
name|SourceLocation
operator|>
block|{
name|public
operator|:
specifier|static
specifier|inline
name|void
operator|*
name|getAsVoidPointer
argument_list|(
argument|clang::SourceLocation L
argument_list|)
block|{
return|return
name|L
operator|.
name|getPtrEncoding
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|clang
operator|::
name|SourceLocation
name|getFromVoidPointer
argument_list|(
argument|void *P
argument_list|)
block|{
return|return
name|clang
operator|::
name|SourceLocation
operator|::
name|getFromRawEncoding
argument_list|(
operator|(
name|unsigned
operator|)
operator|(
name|uintptr_t
operator|)
name|P
argument_list|)
return|;
block|}
expr|enum
block|{
name|NumLowBitsAvailable
operator|=
literal|0
block|}
block|;   }
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

