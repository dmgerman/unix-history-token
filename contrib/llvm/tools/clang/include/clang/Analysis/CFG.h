begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- CFG.h - Classes for representing and building CFGs------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines the CFG and CFGBuilder classes for representing and
end_comment

begin_comment
comment|//  building Control-Flow Graphs (CFGs) from ASTs.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_CFG_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_CFG_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/PointerIntPair.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Stmt.h"
end_include

begin_include
include|#
directive|include
file|"clang/Analysis/Support/BumpVector.h"
end_include

begin_include
include|#
directive|include
file|"clang/Basic/SourceLocation.h"
end_include

begin_include
include|#
directive|include
file|<bitset>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<iterator>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CXXDestructorDecl
decl_stmt|;
name|class
name|Decl
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|Expr
decl_stmt|;
name|class
name|FieldDecl
decl_stmt|;
name|class
name|VarDecl
decl_stmt|;
name|class
name|CXXCtorInitializer
decl_stmt|;
name|class
name|CXXBaseSpecifier
decl_stmt|;
name|class
name|CXXBindTemporaryExpr
decl_stmt|;
name|class
name|CFG
decl_stmt|;
name|class
name|PrinterHelper
decl_stmt|;
name|class
name|LangOptions
decl_stmt|;
name|class
name|ASTContext
decl_stmt|;
comment|/// CFGElement - Represents a top-level expression in a basic block.
name|class
name|CFGElement
block|{
name|public
label|:
enum|enum
name|Kind
block|{
comment|// main kind
name|Invalid
block|,
name|Statement
block|,
name|Initializer
block|,
comment|// dtor kind
name|AutomaticObjectDtor
block|,
name|BaseDtor
block|,
name|MemberDtor
block|,
name|TemporaryDtor
block|,
name|DTOR_BEGIN
init|=
name|AutomaticObjectDtor
block|,
name|DTOR_END
init|=
name|TemporaryDtor
block|}
enum|;
name|protected
label|:
comment|// The int bits are used to mark the kind.
name|llvm
operator|::
name|PointerIntPair
operator|<
name|void
operator|*
operator|,
literal|2
operator|>
name|Data1
expr_stmt|;
name|llvm
operator|::
name|PointerIntPair
operator|<
name|void
operator|*
operator|,
literal|2
operator|>
name|Data2
expr_stmt|;
name|CFGElement
argument_list|(
argument|Kind kind
argument_list|,
argument|const void *Ptr1
argument_list|,
argument|const void *Ptr2 =
literal|0
argument_list|)
block|:
name|Data1
argument_list|(
name|const_cast
operator|<
name|void
operator|*
operator|>
operator|(
name|Ptr1
operator|)
argument_list|,
operator|(
operator|(
name|unsigned
operator|)
name|kind
operator|)
operator|&
literal|0x3
argument_list|)
operator|,
name|Data2
argument_list|(
argument|const_cast<void*>(Ptr2)
argument_list|,
argument|(((unsigned) kind)>>
literal|2
argument|)&
literal|0x3
argument_list|)
block|{}
name|public
operator|:
name|CFGElement
argument_list|()
block|{}
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
name|unsigned
name|x
operator|=
name|Data2
operator|.
name|getInt
argument_list|()
block|;
name|x
operator|<<=
literal|2
block|;
name|x
operator||=
name|Data1
operator|.
name|getInt
argument_list|()
block|;
return|return
operator|(
name|Kind
operator|)
name|x
return|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|getKind
argument_list|()
operator|!=
name|Invalid
return|;
block|}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
return|;
block|}
name|template
operator|<
name|class
name|ElemTy
operator|>
specifier|const
name|ElemTy
operator|*
name|getAs
argument_list|()
specifier|const
block|{
if|if
condition|(
name|llvm
operator|::
name|isa
operator|<
name|ElemTy
operator|>
operator|(
name|this
operator|)
condition|)
return|return
name|static_cast
operator|<
specifier|const
name|ElemTy
operator|*
operator|>
operator|(
name|this
operator|)
return|;
return|return
literal|0
return|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|CFGElement
modifier|*
name|E
parameter_list|)
block|{
return|return
name|true
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|CFGStmt
range|:
name|public
name|CFGElement
block|{
name|public
operator|:
name|CFGStmt
argument_list|(
name|Stmt
operator|*
name|S
argument_list|)
operator|:
name|CFGElement
argument_list|(
argument|Statement
argument_list|,
argument|S
argument_list|)
block|{}
specifier|const
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|Stmt
operator|*
operator|>
operator|(
name|Data1
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const CFGElement *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getKind
argument_list|()
operator|==
name|Statement
return|;
block|}
expr|}
block|;
comment|/// CFGInitializer - Represents C++ base or member initializer from
comment|/// constructor's initialization list.
name|class
name|CFGInitializer
operator|:
name|public
name|CFGElement
block|{
name|public
operator|:
name|CFGInitializer
argument_list|(
name|CXXCtorInitializer
operator|*
name|initializer
argument_list|)
operator|:
name|CFGElement
argument_list|(
argument|Initializer
argument_list|,
argument|initializer
argument_list|)
block|{}
name|CXXCtorInitializer
operator|*
name|getInitializer
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|CXXCtorInitializer
operator|*
operator|>
operator|(
name|Data1
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const CFGElement *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getKind
argument_list|()
operator|==
name|Initializer
return|;
block|}
expr|}
block|;
comment|/// CFGImplicitDtor - Represents C++ object destructor implicitly generated
comment|/// by compiler on various occasions.
name|class
name|CFGImplicitDtor
operator|:
name|public
name|CFGElement
block|{
name|protected
operator|:
name|CFGImplicitDtor
argument_list|(
argument|Kind kind
argument_list|,
argument|const void *data1
argument_list|,
argument|const void *data2 =
literal|0
argument_list|)
operator|:
name|CFGElement
argument_list|(
argument|kind
argument_list|,
argument|data1
argument_list|,
argument|data2
argument_list|)
block|{
name|assert
argument_list|(
name|kind
operator|>=
name|DTOR_BEGIN
operator|&&
name|kind
operator|<=
name|DTOR_END
argument_list|)
block|;   }
name|public
operator|:
specifier|const
name|CXXDestructorDecl
operator|*
name|getDestructorDecl
argument_list|(
argument|ASTContext&astContext
argument_list|)
specifier|const
block|;
name|bool
name|isNoReturn
argument_list|(
argument|ASTContext&astContext
argument_list|)
specifier|const
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const CFGElement *E
argument_list|)
block|{
name|Kind
name|kind
operator|=
name|E
operator|->
name|getKind
argument_list|()
block|;
return|return
name|kind
operator|>=
name|DTOR_BEGIN
operator|&&
name|kind
operator|<=
name|DTOR_END
return|;
block|}
expr|}
block|;
comment|/// CFGAutomaticObjDtor - Represents C++ object destructor implicitly generated
comment|/// for automatic object or temporary bound to const reference at the point
comment|/// of leaving its local scope.
name|class
name|CFGAutomaticObjDtor
operator|:
name|public
name|CFGImplicitDtor
block|{
name|public
operator|:
name|CFGAutomaticObjDtor
argument_list|(
specifier|const
name|VarDecl
operator|*
name|var
argument_list|,
specifier|const
name|Stmt
operator|*
name|stmt
argument_list|)
operator|:
name|CFGImplicitDtor
argument_list|(
argument|AutomaticObjectDtor
argument_list|,
argument|var
argument_list|,
argument|stmt
argument_list|)
block|{}
specifier|const
name|VarDecl
operator|*
name|getVarDecl
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|VarDecl
operator|*
operator|>
operator|(
name|Data1
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
comment|// Get statement end of which triggered the destructor call.
specifier|const
name|Stmt
operator|*
name|getTriggerStmt
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|Stmt
operator|*
operator|>
operator|(
name|Data2
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const CFGElement *elem
argument_list|)
block|{
return|return
name|elem
operator|->
name|getKind
argument_list|()
operator|==
name|AutomaticObjectDtor
return|;
block|}
expr|}
block|;
comment|/// CFGBaseDtor - Represents C++ object destructor implicitly generated for
comment|/// base object in destructor.
name|class
name|CFGBaseDtor
operator|:
name|public
name|CFGImplicitDtor
block|{
name|public
operator|:
name|CFGBaseDtor
argument_list|(
specifier|const
name|CXXBaseSpecifier
operator|*
name|base
argument_list|)
operator|:
name|CFGImplicitDtor
argument_list|(
argument|BaseDtor
argument_list|,
argument|base
argument_list|)
block|{}
specifier|const
name|CXXBaseSpecifier
operator|*
name|getBaseSpecifier
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|CXXBaseSpecifier
operator|*
operator|>
operator|(
name|Data1
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const CFGElement *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getKind
argument_list|()
operator|==
name|BaseDtor
return|;
block|}
expr|}
block|;
comment|/// CFGMemberDtor - Represents C++ object destructor implicitly generated for
comment|/// member object in destructor.
name|class
name|CFGMemberDtor
operator|:
name|public
name|CFGImplicitDtor
block|{
name|public
operator|:
name|CFGMemberDtor
argument_list|(
specifier|const
name|FieldDecl
operator|*
name|field
argument_list|)
operator|:
name|CFGImplicitDtor
argument_list|(
argument|MemberDtor
argument_list|,
argument|field
argument_list|,
literal|0
argument_list|)
block|{}
specifier|const
name|FieldDecl
operator|*
name|getFieldDecl
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|FieldDecl
operator|*
operator|>
operator|(
name|Data1
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const CFGElement *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getKind
argument_list|()
operator|==
name|MemberDtor
return|;
block|}
expr|}
block|;
comment|/// CFGTemporaryDtor - Represents C++ object destructor implicitly generated
comment|/// at the end of full expression for temporary object.
name|class
name|CFGTemporaryDtor
operator|:
name|public
name|CFGImplicitDtor
block|{
name|public
operator|:
name|CFGTemporaryDtor
argument_list|(
name|CXXBindTemporaryExpr
operator|*
name|expr
argument_list|)
operator|:
name|CFGImplicitDtor
argument_list|(
argument|TemporaryDtor
argument_list|,
argument|expr
argument_list|,
literal|0
argument_list|)
block|{}
specifier|const
name|CXXBindTemporaryExpr
operator|*
name|getBindTemporaryExpr
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|CXXBindTemporaryExpr
operator|*
operator|>
operator|(
name|Data1
operator|.
name|getPointer
argument_list|()
operator|)
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const CFGElement *E
argument_list|)
block|{
return|return
name|E
operator|->
name|getKind
argument_list|()
operator|==
name|TemporaryDtor
return|;
block|}
expr|}
block|;
comment|/// CFGTerminator - Represents CFGBlock terminator statement.
comment|///
comment|/// TemporaryDtorsBranch bit is set to true if the terminator marks a branch
comment|/// in control flow of destructors of temporaries. In this case terminator
comment|/// statement is the same statement that branches control flow in evaluation
comment|/// of matching full expression.
name|class
name|CFGTerminator
block|{
name|llvm
operator|::
name|PointerIntPair
operator|<
name|Stmt
operator|*
block|,
literal|1
operator|>
name|Data
block|;
name|public
operator|:
name|CFGTerminator
argument_list|()
block|{}
name|CFGTerminator
argument_list|(
argument|Stmt *S
argument_list|,
argument|bool TemporaryDtorsBranch = false
argument_list|)
operator|:
name|Data
argument_list|(
argument|S
argument_list|,
argument|TemporaryDtorsBranch
argument_list|)
block|{}
name|Stmt
operator|*
name|getStmt
argument_list|()
block|{
return|return
name|Data
operator|.
name|getPointer
argument_list|()
return|;
block|}
specifier|const
name|Stmt
operator|*
name|getStmt
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|.
name|getPointer
argument_list|()
return|;
block|}
name|bool
name|isTemporaryDtorsBranch
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|.
name|getInt
argument_list|()
return|;
block|}
name|operator
name|Stmt
operator|*
operator|(
operator|)
block|{
return|return
name|getStmt
argument_list|()
return|;
block|}
name|operator
specifier|const
name|Stmt
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|getStmt
argument_list|()
return|;
block|}
name|Stmt
operator|*
name|operator
operator|->
expr|(
block|)
block|{
return|return
name|getStmt
argument_list|()
return|;
block|}
specifier|const
name|Stmt
operator|*
name|operator
operator|->
expr|(
block|)
specifier|const
block|{
return|return
name|getStmt
argument_list|()
return|;
block|}
name|Stmt
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|getStmt
argument_list|()
return|;
block|}
specifier|const
name|Stmt
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|getStmt
argument_list|()
return|;
block|}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|getStmt
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// CFGBlock - Represents a single basic block in a source-level CFG.
comment|///  It consists of:
comment|///
comment|///  (1) A set of statements/expressions (which may contain subexpressions).
comment|///  (2) A "terminator" statement (not in the set of statements).
comment|///  (3) A list of successors and predecessors.
comment|///
comment|/// Terminator: The terminator represents the type of control-flow that occurs
comment|/// at the end of the basic block.  The terminator is a Stmt* referring to an
comment|/// AST node that has control-flow: if-statements, breaks, loops, etc.
comment|/// If the control-flow is conditional, the condition expression will appear
comment|/// within the set of statements in the block (usually the last statement).
comment|///
comment|/// Predecessors: the order in the set of predecessors is arbitrary.
comment|///
comment|/// Successors: the order in the set of successors is NOT arbitrary.  We
comment|///  currently have the following orderings based on the terminator:
comment|///
comment|///     Terminator       Successor Ordering
comment|///  -----------------------------------------------------
comment|///       if            Then Block;  Else Block
comment|///     ? operator      LHS expression;  RHS expression
comment|///&&, ||          expression that uses result of&& or ||, RHS
comment|///
comment|/// But note that any of that may be NULL in case of optimized-out edges.
comment|///
name|class
name|CFGBlock
block|{
name|class
name|ElementList
block|{
typedef|typedef
name|BumpVector
operator|<
name|CFGElement
operator|>
name|ImplTy
expr_stmt|;
name|ImplTy
name|Impl
block|;
name|public
operator|:
name|ElementList
argument_list|(
name|BumpVectorContext
operator|&
name|C
argument_list|)
operator|:
name|Impl
argument_list|(
argument|C
argument_list|,
literal|4
argument_list|)
block|{}
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|ImplTy
operator|::
name|iterator
operator|>
name|iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|ImplTy
operator|::
name|const_iterator
operator|>
name|const_iterator
expr_stmt|;
typedef|typedef
name|ImplTy
operator|::
name|iterator
name|reverse_iterator
expr_stmt|;
typedef|typedef
name|ImplTy
operator|::
name|const_iterator
name|const_reverse_iterator
expr_stmt|;
typedef|typedef
name|ImplTy
operator|::
name|const_reference
name|const_reference
expr_stmt|;
name|void
name|push_back
argument_list|(
argument|CFGElement e
argument_list|,
argument|BumpVectorContext&C
argument_list|)
block|{
name|Impl
operator|.
name|push_back
argument_list|(
name|e
argument_list|,
name|C
argument_list|)
block|; }
name|reverse_iterator
name|insert
argument_list|(
argument|reverse_iterator I
argument_list|,
argument|size_t Cnt
argument_list|,
argument|CFGElement E
argument_list|,
argument|BumpVectorContext&C
argument_list|)
block|{
return|return
name|Impl
operator|.
name|insert
argument_list|(
name|I
argument_list|,
name|Cnt
argument_list|,
name|E
argument_list|,
name|C
argument_list|)
return|;
block|}
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|back
argument_list|()
return|;
block|}
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|front
argument_list|()
return|;
block|}
name|iterator
name|begin
argument_list|()
block|{
return|return
name|Impl
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|Impl
operator|.
name|rend
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|rbegin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|rend
argument_list|()
return|;
block|}
name|reverse_iterator
name|rbegin
argument_list|()
block|{
return|return
name|Impl
operator|.
name|begin
argument_list|()
return|;
block|}
name|reverse_iterator
name|rend
argument_list|()
block|{
return|return
name|Impl
operator|.
name|end
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|end
argument_list|()
return|;
block|}
name|CFGElement
name|operator
index|[]
operator|(
name|size_t
name|i
operator|)
specifier|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|Impl
operator|.
name|size
argument_list|()
argument_list|)
block|;
return|return
name|Impl
index|[
name|Impl
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|-
name|i
index|]
return|;
block|}
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Impl
operator|.
name|empty
argument_list|()
return|;
block|}
expr|}
block|;
comment|/// Stmts - The set of statements in the basic block.
name|ElementList
name|Elements
block|;
comment|/// Label - An (optional) label that prefixes the executable
comment|///  statements in the block.  When this variable is non-NULL, it is
comment|///  either an instance of LabelStmt, SwitchCase or CXXCatchStmt.
name|Stmt
operator|*
name|Label
block|;
comment|/// Terminator - The terminator for a basic block that
comment|///  indicates the type of control-flow that occurs between a block
comment|///  and its successors.
name|CFGTerminator
name|Terminator
block|;
comment|/// LoopTarget - Some blocks are used to represent the "loop edge" to
comment|///  the start of a loop from within the loop body.  This Stmt* will be
comment|///  refer to the loop statement for such blocks (and be null otherwise).
specifier|const
name|Stmt
operator|*
name|LoopTarget
block|;
comment|/// BlockID - A numerical ID assigned to a CFGBlock during construction
comment|///   of the CFG.
name|unsigned
name|BlockID
block|;
comment|/// Predecessors/Successors - Keep track of the predecessor / successor
comment|/// CFG blocks.
typedef|typedef
name|BumpVector
operator|<
name|CFGBlock
operator|*
operator|>
name|AdjacentBlocks
expr_stmt|;
name|AdjacentBlocks
name|Preds
block|;
name|AdjacentBlocks
name|Succs
block|;
comment|/// NoReturn - This bit is set when the basic block contains a function call
comment|/// or implicit destructor that is attributed as 'noreturn'. In that case,
comment|/// control cannot technically ever proceed past this block. All such blocks
comment|/// will have a single immediate successor: the exit block. This allows them
comment|/// to be easily reached from the exit block and using this bit quickly
comment|/// recognized without scanning the contents of the block.
comment|///
comment|/// Optimization Note: This bit could be profitably folded with Terminator's
comment|/// storage if the memory usage of CFGBlock becomes an issue.
name|unsigned
name|HasNoReturnElement
operator|:
literal|1
block|;
comment|/// Parent - The parent CFG that owns this CFGBlock.
name|CFG
operator|*
name|Parent
block|;
name|public
operator|:
name|explicit
name|CFGBlock
argument_list|(
argument|unsigned blockid
argument_list|,
argument|BumpVectorContext&C
argument_list|,
argument|CFG *parent
argument_list|)
operator|:
name|Elements
argument_list|(
name|C
argument_list|)
block|,
name|Label
argument_list|(
name|NULL
argument_list|)
block|,
name|Terminator
argument_list|(
name|NULL
argument_list|)
block|,
name|LoopTarget
argument_list|(
name|NULL
argument_list|)
block|,
name|BlockID
argument_list|(
name|blockid
argument_list|)
block|,
name|Preds
argument_list|(
name|C
argument_list|,
literal|1
argument_list|)
block|,
name|Succs
argument_list|(
name|C
argument_list|,
literal|1
argument_list|)
block|,
name|HasNoReturnElement
argument_list|(
name|false
argument_list|)
block|,
name|Parent
argument_list|(
argument|parent
argument_list|)
block|{}
operator|~
name|CFGBlock
argument_list|()
block|{}
comment|// Statement iterators
typedef|typedef
name|ElementList
operator|::
name|iterator
name|iterator
expr_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|ElementList
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ElementList
operator|::
name|reverse_iterator
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|ElementList
operator|::
name|const_reverse_iterator
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_expr_stmt
name|CFGElement
name|front
argument_list|()
specifier|const
block|{
return|return
name|Elements
operator|.
name|front
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|CFGElement
name|back
argument_list|()
specifier|const
block|{
return|return
name|Elements
operator|.
name|back
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Elements
operator|.
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Elements
operator|.
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Elements
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Elements
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|Elements
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_function

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|Elements
operator|.
name|rend
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|Elements
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|Elements
operator|.
name|rend
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Elements
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|Elements
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|CFGElement
name|operator
index|[]
argument_list|(
name|size_t
name|i
argument_list|)
decl|const
block|{
return|return
name|Elements
index|[
name|i
index|]
return|;
block|}
end_decl_stmt

begin_comment
comment|// CFG iterators
end_comment

begin_typedef
typedef|typedef
name|AdjacentBlocks
operator|::
name|iterator
name|pred_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AdjacentBlocks
operator|::
name|const_iterator
name|const_pred_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AdjacentBlocks
operator|::
name|reverse_iterator
name|pred_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AdjacentBlocks
operator|::
name|const_reverse_iterator
name|const_pred_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AdjacentBlocks
operator|::
name|iterator
name|succ_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AdjacentBlocks
operator|::
name|const_iterator
name|const_succ_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AdjacentBlocks
operator|::
name|reverse_iterator
name|succ_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AdjacentBlocks
operator|::
name|const_reverse_iterator
name|const_succ_reverse_iterator
expr_stmt|;
end_typedef

begin_function
name|pred_iterator
name|pred_begin
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
name|pred_iterator
name|pred_end
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_pred_iterator
name|pred_begin
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_pred_iterator
name|pred_end
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|pred_reverse_iterator
name|pred_rbegin
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_function

begin_function
name|pred_reverse_iterator
name|pred_rend
parameter_list|()
block|{
return|return
name|Preds
operator|.
name|rend
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_pred_reverse_iterator
name|pred_rbegin
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_pred_reverse_iterator
name|pred_rend
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|rend
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|succ_iterator
name|succ_begin
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
name|succ_iterator
name|succ_end
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_succ_iterator
name|succ_begin
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_succ_iterator
name|succ_end
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|succ_reverse_iterator
name|succ_rbegin
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_function

begin_function
name|succ_reverse_iterator
name|succ_rend
parameter_list|()
block|{
return|return
name|Succs
operator|.
name|rend
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_succ_reverse_iterator
name|succ_rbegin
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_succ_reverse_iterator
name|succ_rend
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|rend
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|succ_size
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|succ_empty
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|pred_size
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|pred_empty
argument_list|()
specifier|const
block|{
return|return
name|Preds
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|class
name|FilterOptions
block|{
name|public
label|:
name|FilterOptions
argument_list|()
block|{
name|IgnoreDefaultsWithCoveredEnums
operator|=
literal|0
expr_stmt|;
block|}
name|unsigned
name|IgnoreDefaultsWithCoveredEnums
range|:
literal|1
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function_decl
specifier|static
name|bool
name|FilterEdge
parameter_list|(
specifier|const
name|FilterOptions
modifier|&
name|F
parameter_list|,
specifier|const
name|CFGBlock
modifier|*
name|Src
parameter_list|,
specifier|const
name|CFGBlock
modifier|*
name|Dst
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|typename
name|IMPL
operator|,
name|bool
name|IsPred
operator|>
name|class
name|FilteredCFGBlockIterator
block|{
name|private
operator|:
name|IMPL
name|I
block|,
name|E
block|;
specifier|const
name|FilterOptions
name|F
block|;
specifier|const
name|CFGBlock
operator|*
name|From
block|;
name|public
operator|:
name|explicit
name|FilteredCFGBlockIterator
argument_list|(
specifier|const
name|IMPL
operator|&
name|i
argument_list|,
specifier|const
name|IMPL
operator|&
name|e
argument_list|,
specifier|const
name|CFGBlock
operator|*
name|from
argument_list|,
specifier|const
name|FilterOptions
operator|&
name|f
argument_list|)
operator|:
name|I
argument_list|(
name|i
argument_list|)
block|,
name|E
argument_list|(
name|e
argument_list|)
block|,
name|F
argument_list|(
name|f
argument_list|)
block|,
name|From
argument_list|(
argument|from
argument_list|)
block|{}
name|bool
name|hasMore
argument_list|()
specifier|const
block|{
return|return
name|I
operator|!=
name|E
return|;
block|}
name|FilteredCFGBlockIterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
do|do
block|{
operator|++
name|I
expr_stmt|;
block|}
end_expr_stmt

begin_while
while|while
condition|(
name|hasMore
argument_list|()
operator|&&
name|Filter
argument_list|(
operator|*
name|I
argument_list|)
condition|)
empty_stmt|;
end_while

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}      const
name|CFGBlock
operator|*
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function
name|bool
name|Filter
parameter_list|(
specifier|const
name|CFGBlock
modifier|*
name|To
parameter_list|)
block|{
return|return
name|IsPred
condition|?
name|FilterEdge
argument_list|(
name|F
argument_list|,
name|To
argument_list|,
name|From
argument_list|)
else|:
name|FilterEdge
argument_list|(
name|F
argument_list|,
name|From
argument_list|,
name|To
argument_list|)
return|;
block|}
end_function

begin_typedef
unit|};
typedef|typedef
name|FilteredCFGBlockIterator
operator|<
name|const_pred_iterator
operator|,
name|true
operator|>
name|filtered_pred_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|FilteredCFGBlockIterator
operator|<
name|const_succ_iterator
operator|,
name|false
operator|>
name|filtered_succ_iterator
expr_stmt|;
end_typedef

begin_decl_stmt
name|filtered_pred_iterator
name|filtered_pred_start_end
argument_list|(
specifier|const
name|FilterOptions
operator|&
name|f
argument_list|)
decl|const
block|{
return|return
name|filtered_pred_iterator
argument_list|(
name|pred_begin
argument_list|()
argument_list|,
name|pred_end
argument_list|()
argument_list|,
name|this
argument_list|,
name|f
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|filtered_succ_iterator
name|filtered_succ_start_end
argument_list|(
specifier|const
name|FilterOptions
operator|&
name|f
argument_list|)
decl|const
block|{
return|return
name|filtered_succ_iterator
argument_list|(
name|succ_begin
argument_list|()
argument_list|,
name|succ_end
argument_list|()
argument_list|,
name|this
argument_list|,
name|f
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|// Manipulation of block contents
end_comment

begin_function
name|void
name|setTerminator
parameter_list|(
name|Stmt
modifier|*
name|Statement
parameter_list|)
block|{
name|Terminator
operator|=
name|Statement
expr_stmt|;
block|}
end_function

begin_function
name|void
name|setLabel
parameter_list|(
name|Stmt
modifier|*
name|Statement
parameter_list|)
block|{
name|Label
operator|=
name|Statement
expr_stmt|;
block|}
end_function

begin_function
name|void
name|setLoopTarget
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|loopTarget
parameter_list|)
block|{
name|LoopTarget
operator|=
name|loopTarget
expr_stmt|;
block|}
end_function

begin_function
name|void
name|setHasNoReturnElement
parameter_list|()
block|{
name|HasNoReturnElement
operator|=
name|true
expr_stmt|;
block|}
end_function

begin_function
name|CFGTerminator
name|getTerminator
parameter_list|()
block|{
return|return
name|Terminator
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|CFGTerminator
name|getTerminator
argument_list|()
specifier|const
block|{
return|return
name|Terminator
return|;
block|}
end_expr_stmt

begin_function_decl
name|Stmt
modifier|*
name|getTerminatorCondition
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|Stmt
operator|*
name|getTerminatorCondition
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|CFGBlock
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getTerminatorCondition
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|Stmt
operator|*
name|getLoopTarget
argument_list|()
specifier|const
block|{
return|return
name|LoopTarget
return|;
block|}
end_expr_stmt

begin_function
name|Stmt
modifier|*
name|getLabel
parameter_list|()
block|{
return|return
name|Label
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|Stmt
operator|*
name|getLabel
argument_list|()
specifier|const
block|{
return|return
name|Label
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|hasNoReturnElement
argument_list|()
specifier|const
block|{
return|return
name|HasNoReturnElement
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|unsigned
name|getBlockID
argument_list|()
specifier|const
block|{
return|return
name|BlockID
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|CFG
operator|*
name|getParent
argument_list|()
specifier|const
block|{
return|return
name|Parent
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|dump
argument_list|(
specifier|const
name|CFG
operator|*
name|cfg
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|,
name|bool
name|ShowColors
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|CFG
operator|*
name|cfg
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|,
name|bool
name|ShowColors
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|printTerminator
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|addSuccessor
parameter_list|(
name|CFGBlock
modifier|*
name|Block
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
if|if
condition|(
name|Block
condition|)
name|Block
operator|->
name|Preds
operator|.
name|push_back
argument_list|(
name|this
argument_list|,
name|C
argument_list|)
expr_stmt|;
name|Succs
operator|.
name|push_back
argument_list|(
name|Block
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|appendStmt
parameter_list|(
name|Stmt
modifier|*
name|statement
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
name|Elements
operator|.
name|push_back
argument_list|(
name|CFGStmt
argument_list|(
name|statement
argument_list|)
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|appendInitializer
parameter_list|(
name|CXXCtorInitializer
modifier|*
name|initializer
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
name|Elements
operator|.
name|push_back
argument_list|(
name|CFGInitializer
argument_list|(
name|initializer
argument_list|)
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|appendBaseDtor
parameter_list|(
specifier|const
name|CXXBaseSpecifier
modifier|*
name|BS
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
name|Elements
operator|.
name|push_back
argument_list|(
name|CFGBaseDtor
argument_list|(
name|BS
argument_list|)
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|appendMemberDtor
parameter_list|(
name|FieldDecl
modifier|*
name|FD
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
name|Elements
operator|.
name|push_back
argument_list|(
name|CFGMemberDtor
argument_list|(
name|FD
argument_list|)
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|appendTemporaryDtor
parameter_list|(
name|CXXBindTemporaryExpr
modifier|*
name|E
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
name|Elements
operator|.
name|push_back
argument_list|(
name|CFGTemporaryDtor
argument_list|(
name|E
argument_list|)
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|appendAutomaticObjDtor
parameter_list|(
name|VarDecl
modifier|*
name|VD
parameter_list|,
name|Stmt
modifier|*
name|S
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
name|Elements
operator|.
name|push_back
argument_list|(
name|CFGAutomaticObjDtor
argument_list|(
name|VD
argument_list|,
name|S
argument_list|)
argument_list|,
name|C
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Destructors must be inserted in reversed order. So insertion is in two
end_comment

begin_comment
comment|// steps. First we prepare space for some number of elements, then we insert
end_comment

begin_comment
comment|// the elements beginning at the last position in prepared space.
end_comment

begin_function
name|iterator
name|beginAutomaticObjDtorsInsert
parameter_list|(
name|iterator
name|I
parameter_list|,
name|size_t
name|Cnt
parameter_list|,
name|BumpVectorContext
modifier|&
name|C
parameter_list|)
block|{
return|return
name|iterator
argument_list|(
name|Elements
operator|.
name|insert
argument_list|(
name|I
operator|.
name|base
argument_list|()
argument_list|,
name|Cnt
argument_list|,
name|CFGElement
argument_list|()
argument_list|,
name|C
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|insertAutomaticObjDtor
parameter_list|(
name|iterator
name|I
parameter_list|,
name|VarDecl
modifier|*
name|VD
parameter_list|,
name|Stmt
modifier|*
name|S
parameter_list|)
block|{
operator|*
name|I
operator|=
name|CFGAutomaticObjDtor
argument_list|(
name|VD
argument_list|,
name|S
argument_list|)
expr_stmt|;
return|return
operator|++
name|I
return|;
block|}
end_function

begin_comment
unit|};
comment|/// CFG - Represents a source-level, intra-procedural CFG that represents the
end_comment

begin_comment
comment|///  control-flow of a Stmt.  The Stmt can represent an entire function body,
end_comment

begin_comment
comment|///  or a single expression.  A CFG will always contain one empty block that
end_comment

begin_comment
comment|///  represents the Exit point of the CFG.  A CFG will also contain a designated
end_comment

begin_comment
comment|///  Entry block.  The CFG solely represents control-flow; it consists of
end_comment

begin_comment
comment|///  CFGBlocks which are simply containers of Stmt*'s in the AST the CFG
end_comment

begin_comment
comment|///  was constructed from.
end_comment

begin_decl_stmt
name|class
name|CFG
block|{
name|public
label|:
comment|//===--------------------------------------------------------------------===//
comment|// CFG Construction& Manipulation.
comment|//===--------------------------------------------------------------------===//
name|class
name|BuildOptions
block|{
name|std
operator|::
name|bitset
operator|<
name|Stmt
operator|::
name|lastStmtConstant
operator|>
name|alwaysAddMask
expr_stmt|;
name|public
label|:
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Stmt
operator|*
operator|,
specifier|const
name|CFGBlock
operator|*
operator|>
name|ForcedBlkExprs
expr_stmt|;
name|ForcedBlkExprs
modifier|*
modifier|*
name|forcedBlkExprs
decl_stmt|;
name|bool
name|PruneTriviallyFalseEdges
decl_stmt|;
name|bool
name|AddEHEdges
decl_stmt|;
name|bool
name|AddInitializers
decl_stmt|;
name|bool
name|AddImplicitDtors
decl_stmt|;
name|bool
name|alwaysAdd
argument_list|(
specifier|const
name|Stmt
operator|*
name|stmt
argument_list|)
decl|const
block|{
return|return
name|alwaysAddMask
index|[
name|stmt
operator|->
name|getStmtClass
argument_list|()
index|]
return|;
block|}
name|BuildOptions
modifier|&
name|setAlwaysAdd
argument_list|(
name|Stmt
operator|::
name|StmtClass
name|stmtClass
argument_list|,
name|bool
name|val
operator|=
name|true
argument_list|)
block|{
name|alwaysAddMask
index|[
name|stmtClass
index|]
operator|=
name|val
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|BuildOptions
modifier|&
name|setAllAlwaysAdd
parameter_list|()
block|{
name|alwaysAddMask
operator|.
name|set
argument_list|()
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|BuildOptions
argument_list|()
operator|:
name|forcedBlkExprs
argument_list|(
literal|0
argument_list|)
operator|,
name|PruneTriviallyFalseEdges
argument_list|(
name|true
argument_list|)
operator|,
name|AddEHEdges
argument_list|(
name|false
argument_list|)
operator|,
name|AddInitializers
argument_list|(
name|false
argument_list|)
operator|,
name|AddImplicitDtors
argument_list|(
argument|false
argument_list|)
block|{}
block|}
empty_stmt|;
comment|/// \brief Provides a custom implementation of the iterator class to have the
comment|/// same interface as Function::iterator - iterator returns CFGBlock
comment|/// (not a pointer to CFGBlock).
name|class
name|graph_iterator
block|{
name|public
label|:
typedef|typedef
specifier|const
name|CFGBlock
name|value_type
typedef|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
typedef|typedef
name|BumpVector
operator|<
name|CFGBlock
operator|*
operator|>
operator|::
name|iterator
name|ImplTy
expr_stmt|;
name|graph_iterator
argument_list|(
specifier|const
name|ImplTy
operator|&
name|i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|graph_iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|X
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|graph_iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
operator|*
name|I
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|*
name|I
return|;
block|}
name|operator
name|CFGBlock
modifier|*
parameter_list|()
block|{
return|return
operator|*
name|I
return|;
block|}
name|graph_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|graph_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
name|private
label|:
name|ImplTy
name|I
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|const_graph_iterator
block|{
name|public
label|:
typedef|typedef
specifier|const
name|CFGBlock
name|value_type
typedef|;
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
typedef|typedef
name|BumpVector
operator|<
name|CFGBlock
operator|*
operator|>
operator|::
name|const_iterator
name|ImplTy
expr_stmt|;
name|const_graph_iterator
argument_list|(
specifier|const
name|ImplTy
operator|&
name|i
argument_list|)
operator|:
name|I
argument_list|(
argument|i
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_graph_iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|==
name|X
operator|.
name|I
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_graph_iterator
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|I
operator|!=
name|X
operator|.
name|I
return|;
block|}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
operator|*
name|I
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|*
name|I
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|operator
name|CFGBlock
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|I
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_graph_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_graph_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|--
name|I
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|ImplTy
name|I
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|/// buildCFG - Builds a CFG from an AST.  The responsibility to free the
end_comment

begin_comment
comment|///   constructed CFG belongs to the caller.
end_comment

begin_function_decl
specifier|static
name|CFG
modifier|*
name|buildCFG
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|,
name|Stmt
modifier|*
name|AST
parameter_list|,
name|ASTContext
modifier|*
name|C
parameter_list|,
specifier|const
name|BuildOptions
modifier|&
name|BO
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// createBlock - Create a new block in the CFG.  The CFG owns the block;
end_comment

begin_comment
comment|///  the caller should not directly free it.
end_comment

begin_function_decl
name|CFGBlock
modifier|*
name|createBlock
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|/// setEntry - Set the entry block of the CFG.  This is typically used
end_comment

begin_comment
comment|///  only during CFG construction.  Most CFG clients expect that the
end_comment

begin_comment
comment|///  entry block has no predecessors and contains no statements.
end_comment

begin_function
name|void
name|setEntry
parameter_list|(
name|CFGBlock
modifier|*
name|B
parameter_list|)
block|{
name|Entry
operator|=
name|B
expr_stmt|;
block|}
end_function

begin_comment
comment|/// setIndirectGotoBlock - Set the block used for indirect goto jumps.
end_comment

begin_comment
comment|///  This is typically used only during CFG construction.
end_comment

begin_function
name|void
name|setIndirectGotoBlock
parameter_list|(
name|CFGBlock
modifier|*
name|B
parameter_list|)
block|{
name|IndirectGotoBlock
operator|=
name|B
expr_stmt|;
block|}
end_function

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Block Iterators
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_typedef
typedef|typedef
name|BumpVector
operator|<
name|CFGBlock
operator|*
operator|>
name|CFGBlockListTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|CFGBlockListTy
operator|::
name|iterator
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|CFGBlockListTy
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_function
name|CFGBlock
modifier|&
name|front
parameter_list|()
block|{
return|return
operator|*
name|Blocks
operator|.
name|front
argument_list|()
return|;
block|}
end_function

begin_function
name|CFGBlock
modifier|&
name|back
parameter_list|()
block|{
return|return
operator|*
name|Blocks
operator|.
name|back
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|graph_iterator
name|nodes_begin
parameter_list|()
block|{
return|return
name|graph_iterator
argument_list|(
name|Blocks
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
name|graph_iterator
name|nodes_end
parameter_list|()
block|{
return|return
name|graph_iterator
argument_list|(
name|Blocks
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_graph_iterator
name|nodes_begin
argument_list|()
specifier|const
block|{
return|return
name|const_graph_iterator
argument_list|(
name|Blocks
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_graph_iterator
name|nodes_end
argument_list|()
specifier|const
block|{
return|return
name|const_graph_iterator
argument_list|(
name|Blocks
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_function

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|Blocks
operator|.
name|rend
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|rend
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|CFGBlock
modifier|&
name|getEntry
parameter_list|()
block|{
return|return
operator|*
name|Entry
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|CFGBlock
operator|&
name|getEntry
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Entry
return|;
block|}
end_expr_stmt

begin_function
name|CFGBlock
modifier|&
name|getExit
parameter_list|()
block|{
return|return
operator|*
name|Exit
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|CFGBlock
operator|&
name|getExit
argument_list|()
specifier|const
block|{
return|return
operator|*
name|Exit
return|;
block|}
end_expr_stmt

begin_function
name|CFGBlock
modifier|*
name|getIndirectGotoBlock
parameter_list|()
block|{
return|return
name|IndirectGotoBlock
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|CFGBlock
operator|*
name|getIndirectGotoBlock
argument_list|()
specifier|const
block|{
return|return
name|IndirectGotoBlock
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|vector
operator|<
specifier|const
name|CFGBlock
operator|*
operator|>
operator|::
name|const_iterator
name|try_block_iterator
expr_stmt|;
end_typedef

begin_expr_stmt
name|try_block_iterator
name|try_blocks_begin
argument_list|()
specifier|const
block|{
return|return
name|TryDispatchBlocks
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|try_block_iterator
name|try_blocks_end
argument_list|()
specifier|const
block|{
return|return
name|TryDispatchBlocks
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|addTryDispatchBlock
parameter_list|(
specifier|const
name|CFGBlock
modifier|*
name|block
parameter_list|)
block|{
name|TryDispatchBlocks
operator|.
name|push_back
argument_list|(
name|block
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Member templates useful for various batch operations over CFGs.
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|CALLBACK
operator|>
name|void
name|VisitBlockStmts
argument_list|(
argument|CALLBACK& O
argument_list|)
specifier|const
block|{
for|for
control|(
name|const_iterator
name|I
init|=
name|begin
argument_list|()
init|,
name|E
init|=
name|end
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
for|for
control|(
name|CFGBlock
operator|::
name|const_iterator
name|BI
operator|=
operator|(
operator|*
name|I
operator|)
operator|->
name|begin
argument_list|()
operator|,
name|BE
operator|=
operator|(
operator|*
name|I
operator|)
operator|->
name|end
argument_list|()
init|;
name|BI
operator|!=
name|BE
condition|;
operator|++
name|BI
control|)
block|{
if|if
condition|(
specifier|const
name|CFGStmt
modifier|*
name|stmt
init|=
name|BI
operator|->
name|getAs
operator|<
name|CFGStmt
operator|>
operator|(
operator|)
condition|)
name|O
argument_list|(
name|const_cast
operator|<
name|Stmt
operator|*
operator|>
operator|(
name|stmt
operator|->
name|getStmt
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// CFG Introspection.
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_macro
unit|struct
name|BlkExprNumTy
end_macro

begin_block
block|{
specifier|const
name|signed
name|Idx
decl_stmt|;
name|explicit
name|BlkExprNumTy
argument_list|(
argument|signed idx
argument_list|)
block|:
name|Idx
argument_list|(
argument|idx
argument_list|)
block|{}
name|explicit
name|BlkExprNumTy
argument_list|()
operator|:
name|Idx
argument_list|(
argument|-
literal|1
argument_list|)
block|{}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|Idx
operator|>=
literal|0
return|;
block|}
name|operator
name|unsigned
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Idx
operator|>=
literal|0
argument_list|)
block|;
return|return
operator|(
name|unsigned
operator|)
name|Idx
return|;
block|}
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
name|bool
name|isBlkExpr
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
block|{
return|return
name|getBlkExprNum
argument_list|(
name|S
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|bool
name|isBlkExpr
argument_list|(
specifier|const
name|Stmt
operator|*
name|S
argument_list|)
decl|const
block|{
return|return
name|const_cast
operator|<
name|CFG
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|isBlkExpr
argument_list|(
name|S
argument_list|)
return|;
block|}
end_decl_stmt

begin_function_decl
name|BlkExprNumTy
name|getBlkExprNum
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|getNumBlkExprs
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|/// getNumBlockIDs - Returns the total number of BlockIDs allocated (which
end_comment

begin_comment
comment|/// start at 0).
end_comment

begin_expr_stmt
name|unsigned
name|getNumBlockIDs
argument_list|()
specifier|const
block|{
return|return
name|NumBlockIDs
return|;
block|}
end_expr_stmt

begin_comment
comment|/// size - Return the total number of CFGBlocks within the CFG
end_comment

begin_comment
comment|/// This is simply a renaming of the getNumBlockIDs(). This is necessary
end_comment

begin_comment
comment|/// because the dominator implementation needs such an interface.
end_comment

begin_expr_stmt
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|NumBlockIDs
return|;
block|}
end_expr_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// CFG Debugging: Pretty-Printing and Visualization.
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|void
name|viewCFG
argument_list|(
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|LangOptions
operator|&
name|LO
argument_list|,
name|bool
name|ShowColors
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_macro
name|void
end_macro

begin_macro
name|dump
argument_list|(
argument|const LangOptions&LO
argument_list|,
argument|bool ShowColors
argument_list|)
end_macro

begin_decl_stmt
specifier|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Internal: constructors and data.
end_comment

begin_comment
comment|//===--------------------------------------------------------------------===//
end_comment

begin_expr_stmt
name|CFG
argument_list|()
operator|:
name|Entry
argument_list|(
name|NULL
argument_list|)
operator|,
name|Exit
argument_list|(
name|NULL
argument_list|)
operator|,
name|IndirectGotoBlock
argument_list|(
name|NULL
argument_list|)
operator|,
name|NumBlockIDs
argument_list|(
literal|0
argument_list|)
operator|,
name|BlkExprMap
argument_list|(
name|NULL
argument_list|)
operator|,
name|Blocks
argument_list|(
argument|BlkBVC
argument_list|,
literal|10
argument_list|)
block|{}
operator|~
name|CFG
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|getAllocator
argument_list|()
block|{
return|return
name|BlkBVC
operator|.
name|getAllocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|BumpVectorContext
modifier|&
name|getBumpVectorContext
parameter_list|()
block|{
return|return
name|BlkBVC
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|CFGBlock
modifier|*
name|Entry
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CFGBlock
modifier|*
name|Exit
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CFGBlock
modifier|*
name|IndirectGotoBlock
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Special block to contain collective dispatch
end_comment

begin_comment
comment|// for indirect gotos
end_comment

begin_decl_stmt
name|unsigned
name|NumBlockIDs
decl_stmt|;
end_decl_stmt

begin_comment
comment|// BlkExprMap - An opaque pointer to prevent inclusion of DenseMap.h.
end_comment

begin_comment
comment|//  It represents a map from Expr* to integers to record the set of
end_comment

begin_comment
comment|//  block-level expressions and their "statement number" in the CFG.
end_comment

begin_decl_stmt
name|void
modifier|*
name|BlkExprMap
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|BumpVectorContext
name|BlkBVC
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CFGBlockListTy
name|Blocks
decl_stmt|;
end_decl_stmt

begin_comment
comment|/// C++ 'try' statements are modeled with an indirect dispatch block.
end_comment

begin_comment
comment|/// This is the collection of such blocks present in the CFG.
end_comment

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
specifier|const
name|CFGBlock
operator|*
operator|>
name|TryDispatchBlocks
expr_stmt|;
end_expr_stmt

begin_comment
unit|}; }
comment|// end namespace clang
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// GraphTraits specializations for CFG basic block graphs (source-level CFGs)
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_macro
unit|namespace
name|llvm
end_macro

begin_block
block|{
comment|/// Implement simplify_type for CFGTerminator, so that we can dyn_cast from
comment|/// CFGTerminator to a specific Stmt class.
name|template
operator|<
operator|>
expr|struct
name|simplify_type
operator|<
specifier|const
operator|::
name|clang
operator|::
name|CFGTerminator
operator|>
block|{
typedef|typedef
specifier|const
operator|::
name|clang
operator|::
name|Stmt
operator|*
name|SimpleType
expr_stmt|;
specifier|static
name|SimpleType
name|getSimplifiedValue
argument_list|(
argument|const ::clang::CFGTerminator&Val
argument_list|)
block|{
return|return
name|Val
operator|.
name|getStmt
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|template
operator|<
operator|>
expr|struct
name|simplify_type
operator|<
operator|::
name|clang
operator|::
name|CFGTerminator
operator|>
block|{
typedef|typedef
operator|::
name|clang
operator|::
name|Stmt
operator|*
name|SimpleType
expr_stmt|;
specifier|static
name|SimpleType
name|getSimplifiedValue
argument_list|(
argument|const ::clang::CFGTerminator&Val
argument_list|)
block|{
return|return
name|const_cast
operator|<
name|SimpleType
operator|>
operator|(
name|Val
operator|.
name|getStmt
argument_list|()
operator|)
return|;
block|}
block|}
empty_stmt|;
comment|// Traits for: CFGBlock
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
block|{
typedef|typedef
operator|::
name|clang
operator|::
name|CFGBlock
name|NodeType
expr_stmt|;
typedef|typedef
operator|::
name|clang
operator|::
name|CFGBlock
operator|::
name|succ_iterator
name|ChildIteratorType
expr_stmt|;
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
name|BB
argument_list|)
block|{
return|return
name|BB
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_begin
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_end
argument_list|()
return|;
block|}
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
block|{
typedef|typedef
specifier|const
operator|::
name|clang
operator|::
name|CFGBlock
name|NodeType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|clang
operator|::
name|CFGBlock
operator|::
name|const_succ_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
specifier|const
name|clang
operator|::
name|CFGBlock
operator|*
name|BB
argument_list|)
block|{
return|return
name|BB
return|;
block|}
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|succ_end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|clang
operator|::
name|CFGBlock
name|NodeType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|clang
operator|::
name|CFGBlock
operator|::
name|const_pred_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
name|Inverse
operator|<
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
name|G
argument_list|)
block|{
return|return
name|G
operator|.
name|Graph
return|;
block|}
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|pred_begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|pred_end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
expr|>
block|{
typedef|typedef
specifier|const
operator|::
name|clang
operator|::
name|CFGBlock
name|NodeType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
operator|::
name|clang
operator|::
name|CFGBlock
operator|::
name|const_pred_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
name|Inverse
operator|<
specifier|const
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
name|G
argument_list|)
block|{
return|return
name|G
operator|.
name|Graph
return|;
block|}
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|pred_begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|pred_end
argument_list|()
return|;
block|}
end_function

begin_comment
unit|};
comment|// Traits for: CFG
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
operator|::
name|clang
operator|::
name|CFG
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
block|{
typedef|typedef
operator|::
name|clang
operator|::
name|CFG
operator|::
name|graph_iterator
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|::clang::CFG* F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getEntry
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|nodes_begin
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|nodes_end
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|size
argument_list|(
argument|::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|size
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
operator|::
name|clang
operator|::
name|CFG
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
specifier|const
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
block|{
typedef|typedef
operator|::
name|clang
operator|::
name|CFG
operator|::
name|const_graph_iterator
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|const ::clang::CFG* F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getEntry
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|const ::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|nodes_begin
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|const ::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|nodes_end
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|size
argument_list|(
argument|const ::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|size
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
operator|::
name|clang
operator|::
name|CFG
operator|*
operator|>
expr|>
operator|:
name|public
name|GraphTraits
operator|<
name|Inverse
operator|<
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|clang
operator|::
name|CFG
operator|::
name|graph_iterator
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|::clang::CFG* F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getExit
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|nodes_begin
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|nodes_end
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
operator|::
name|clang
operator|::
name|CFG
operator|*
operator|>
expr|>
operator|:
name|public
name|GraphTraits
operator|<
name|Inverse
operator|<
specifier|const
operator|::
name|clang
operator|::
name|CFGBlock
operator|*
operator|>
expr|>
block|{
typedef|typedef
operator|::
name|clang
operator|::
name|CFG
operator|::
name|const_graph_iterator
name|nodes_iterator
expr_stmt|;
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|const ::clang::CFG* F
argument_list|)
block|{
return|return
operator|&
name|F
operator|->
name|getExit
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
argument|const ::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|nodes_begin
argument_list|()
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
argument|const ::clang::CFG* F
argument_list|)
block|{
return|return
name|F
operator|->
name|nodes_end
argument_list|()
return|;
block|}
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

