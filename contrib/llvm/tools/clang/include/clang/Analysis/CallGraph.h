begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== CallGraph.h - AST-based Call graph  ------------------------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file declares the AST-based CallGraph.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  A call graph for functions whose definitions/bodies are available in the
end_comment

begin_comment
comment|//  current translation unit. The graph has a "virtual" root node that contains
end_comment

begin_comment
comment|//  edges to all externally available functions.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_CALLGRAPH
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_CALLGRAPH
end_define

begin_include
include|#
directive|include
file|"clang/AST/DeclBase.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/RecursiveASTVisitor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SetVector.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CallGraphNode
decl_stmt|;
comment|/// \brief The AST-based call graph.
comment|///
comment|/// The call graph extends itself with the given declarations by implementing
comment|/// the recursive AST visitor, which constructs the graph by visiting the given
comment|/// declarations.
name|class
name|CallGraph
range|:
name|public
name|RecursiveASTVisitor
operator|<
name|CallGraph
operator|>
block|{
name|friend
name|class
name|CallGraphNode
block|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|Decl
operator|*
operator|,
name|CallGraphNode
operator|*
operator|>
name|FunctionMapTy
expr_stmt|;
comment|/// FunctionMap owns all CallGraphNodes.
name|FunctionMapTy
name|FunctionMap
decl_stmt|;
comment|/// This is a virtual root node that has edges to all the functions.
name|CallGraphNode
modifier|*
name|Root
decl_stmt|;
name|public
label|:
name|CallGraph
argument_list|()
expr_stmt|;
operator|~
name|CallGraph
argument_list|()
expr_stmt|;
comment|/// \brief Populate the call graph with the functions in the given
comment|/// declaration.
comment|///
comment|/// Recursively walks the declaration to find all the dependent Decls as well.
name|void
name|addToCallGraph
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|)
block|{
name|TraverseDecl
argument_list|(
name|D
argument_list|)
expr_stmt|;
block|}
comment|/// \brief Determine if a declaration should be included in the graph.
specifier|static
name|bool
name|includeInGraph
parameter_list|(
specifier|const
name|Decl
modifier|*
name|D
parameter_list|)
function_decl|;
comment|/// \brief Lookup the node for the given declaration.
name|CallGraphNode
modifier|*
name|getNode
argument_list|(
specifier|const
name|Decl
operator|*
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Lookup the node for the given declaration. If none found, insert
comment|/// one into the graph.
name|CallGraphNode
modifier|*
name|getOrInsertNode
parameter_list|(
name|Decl
modifier|*
parameter_list|)
function_decl|;
comment|/// Iterators through all the elements in the graph. Note, this gives
comment|/// non-deterministic order.
typedef|typedef
name|FunctionMapTy
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|FunctionMapTy
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|FunctionMap
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|FunctionMap
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|FunctionMap
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|FunctionMap
operator|.
name|end
argument_list|()
return|;
block|}
comment|/// \brief Get the number of nodes in the graph.
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|FunctionMap
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// \ brief Get the virtual root of the graph, all the functions available
comment|/// externally are represented as callees of the node.
name|CallGraphNode
operator|*
name|getRoot
argument_list|()
specifier|const
block|{
return|return
name|Root
return|;
block|}
comment|/// Iterators through all the nodes of the graph that have no parent. These
comment|/// are the unreachable nodes, which are either unused or are due to us
comment|/// failing to add a call edge due to the analysis imprecision.
typedef|typedef
name|llvm
operator|::
name|SetVector
operator|<
name|CallGraphNode
operator|*
operator|>
operator|::
name|iterator
name|nodes_iterator
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|SetVector
operator|<
name|CallGraphNode
operator|*
operator|>
operator|::
name|const_iterator
name|const_nodes_iterator
expr_stmt|;
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|os
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
name|void
name|viewGraph
argument_list|()
specifier|const
expr_stmt|;
name|void
name|addNodesForBlocks
parameter_list|(
name|DeclContext
modifier|*
name|D
parameter_list|)
function_decl|;
comment|/// Part of recursive declaration visitation. We recursively visit all the
comment|/// declarations to collect the root functions.
name|bool
name|VisitFunctionDecl
parameter_list|(
name|FunctionDecl
modifier|*
name|FD
parameter_list|)
block|{
comment|// We skip function template definitions, as their semantics is
comment|// only determined when they are instantiated.
if|if
condition|(
name|includeInGraph
argument_list|(
name|FD
argument_list|)
condition|)
block|{
comment|// Add all blocks declared inside this function to the graph.
name|addNodesForBlocks
argument_list|(
name|FD
argument_list|)
expr_stmt|;
comment|// If this function has external linkage, anything could call it.
comment|// Note, we are not precise here. For example, the function could have
comment|// its address taken.
name|addNodeForDecl
argument_list|(
name|FD
argument_list|,
name|FD
operator|->
name|isGlobal
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|true
return|;
block|}
comment|/// Part of recursive declaration visitation.
name|bool
name|VisitObjCMethodDecl
parameter_list|(
name|ObjCMethodDecl
modifier|*
name|MD
parameter_list|)
block|{
if|if
condition|(
name|includeInGraph
argument_list|(
name|MD
argument_list|)
condition|)
block|{
name|addNodesForBlocks
argument_list|(
name|MD
argument_list|)
expr_stmt|;
name|addNodeForDecl
argument_list|(
name|MD
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
return|return
name|true
return|;
block|}
comment|// We are only collecting the declarations, so do not step into the bodies.
name|bool
name|TraverseStmt
parameter_list|(
name|Stmt
modifier|*
name|S
parameter_list|)
block|{
return|return
name|true
return|;
block|}
name|bool
name|shouldWalkTypesOfTypeLocs
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|private
label|:
comment|/// \brief Add the given declaration to the call graph.
name|void
name|addNodeForDecl
parameter_list|(
name|Decl
modifier|*
name|D
parameter_list|,
name|bool
name|IsGlobal
parameter_list|)
function_decl|;
comment|/// \brief Allocate a new node in the graph.
name|CallGraphNode
modifier|*
name|allocateNewNode
parameter_list|(
name|Decl
modifier|*
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|CallGraphNode
block|{
name|public
label|:
typedef|typedef
name|CallGraphNode
modifier|*
name|CallRecord
typedef|;
name|private
label|:
comment|/// \brief The function/method declaration.
name|Decl
modifier|*
name|FD
decl_stmt|;
comment|/// \brief The list of functions called from this node.
name|SmallVector
operator|<
name|CallRecord
operator|,
literal|5
operator|>
name|CalledFunctions
expr_stmt|;
name|public
label|:
name|CallGraphNode
argument_list|(
name|Decl
operator|*
name|D
argument_list|)
operator|:
name|FD
argument_list|(
argument|D
argument_list|)
block|{}
typedef|typedef
name|SmallVectorImpl
operator|<
name|CallRecord
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|SmallVectorImpl
operator|<
name|CallRecord
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
comment|/// Iterators through all the callees/children of the node.
specifier|inline
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|CalledFunctions
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|iterator
name|end
parameter_list|()
block|{
return|return
name|CalledFunctions
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|CalledFunctions
operator|.
name|begin
argument_list|()
return|;
block|}
specifier|inline
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|CalledFunctions
operator|.
name|end
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|CalledFunctions
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|inline
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|CalledFunctions
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|addCallee
parameter_list|(
name|CallGraphNode
modifier|*
name|N
parameter_list|,
name|CallGraph
modifier|*
name|CG
parameter_list|)
block|{
name|CalledFunctions
operator|.
name|push_back
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
name|Decl
operator|*
name|getDecl
argument_list|()
specifier|const
block|{
return|return
name|FD
return|;
block|}
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|os
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end clang namespace
end_comment

begin_comment
comment|// Graph traits for iteration, viewing.
end_comment

begin_macro
unit|namespace
name|llvm
end_macro

begin_block
block|{
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|clang
operator|::
name|CallGraphNode
operator|*
operator|>
block|{
typedef|typedef
name|clang
operator|::
name|CallGraphNode
name|NodeType
expr_stmt|;
typedef|typedef
name|clang
operator|::
name|CallGraphNode
operator|::
name|CallRecord
name|CallRecordTy
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pointer_to_unary_function
operator|<
name|CallRecordTy
operator|,
name|clang
operator|::
name|CallGraphNode
operator|*
operator|>
name|CGNDerefFun
expr_stmt|;
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
name|clang
operator|::
name|CallGraphNode
operator|*
name|CGN
argument_list|)
block|{
return|return
name|CGN
return|;
block|}
typedef|typedef
name|mapped_iterator
operator|<
name|NodeType
operator|::
name|iterator
operator|,
name|CGNDerefFun
operator|>
name|ChildIteratorType
expr_stmt|;
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|N
operator|->
name|begin
argument_list|()
argument_list|,
name|CGNDerefFun
argument_list|(
name|CGNDeref
argument_list|)
argument_list|)
return|;
block|}
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|N
operator|->
name|end
argument_list|()
argument_list|,
name|CGNDerefFun
argument_list|(
name|CGNDeref
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|clang
operator|::
name|CallGraphNode
operator|*
name|CGNDeref
argument_list|(
argument|CallRecordTy P
argument_list|)
block|{
return|return
name|P
return|;
block|}
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|clang
operator|::
name|CallGraphNode
operator|*
operator|>
block|{
typedef|typedef
specifier|const
name|clang
operator|::
name|CallGraphNode
name|NodeType
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|NodeType
operator|::
name|const_iterator
name|ChildIteratorType
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|NodeType
modifier|*
name|getEntryNode
argument_list|(
specifier|const
name|clang
operator|::
name|CallGraphNode
operator|*
name|CGN
argument_list|)
block|{
return|return
name|CGN
return|;
block|}
end_decl_stmt

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|begin
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|N
operator|->
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|clang
operator|::
name|CallGraph
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
name|clang
operator|::
name|CallGraphNode
operator|*
operator|>
block|{
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|clang::CallGraph *CGN
argument_list|)
block|{
return|return
name|CGN
operator|->
name|getRoot
argument_list|()
return|;
comment|// Start at the external node!
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|clang
operator|::
name|Decl
operator|*
operator|,
name|clang
operator|::
name|CallGraphNode
operator|*
operator|>
name|PairTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|pointer_to_unary_function
operator|<
name|PairTy
operator|,
name|clang
operator|::
name|CallGraphNode
operator|&
operator|>
name|DerefFun
expr_stmt|;
end_typedef

begin_comment
comment|// nodes_iterator/begin/end - Allow iteration over all nodes in the graph
end_comment

begin_typedef
typedef|typedef
name|mapped_iterator
operator|<
name|clang
operator|::
name|CallGraph
operator|::
name|iterator
operator|,
name|DerefFun
operator|>
name|nodes_iterator
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
name|clang
operator|::
name|CallGraph
operator|*
name|CG
argument_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|CG
operator|->
name|begin
argument_list|()
argument_list|,
name|DerefFun
argument_list|(
name|CGdereference
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
name|clang
operator|::
name|CallGraph
operator|*
name|CG
argument_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|CG
operator|->
name|end
argument_list|()
argument_list|,
name|DerefFun
argument_list|(
name|CGdereference
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|CallGraphNode
operator|&
name|CGdereference
argument_list|(
argument|PairTy P
argument_list|)
block|{
return|return
operator|*
operator|(
name|P
operator|.
name|second
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|size
argument_list|(
name|clang
operator|::
name|CallGraph
operator|*
name|CG
argument_list|)
block|{
return|return
name|CG
operator|->
name|size
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
specifier|const
name|clang
operator|::
name|CallGraph
operator|*
operator|>
operator|:
name|public
name|GraphTraits
operator|<
specifier|const
name|clang
operator|::
name|CallGraphNode
operator|*
operator|>
block|{
specifier|static
name|NodeType
operator|*
name|getEntryNode
argument_list|(
argument|const clang::CallGraph *CGN
argument_list|)
block|{
return|return
name|CGN
operator|->
name|getRoot
argument_list|()
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|clang
operator|::
name|Decl
operator|*
operator|,
name|clang
operator|::
name|CallGraphNode
operator|*
operator|>
name|PairTy
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|pointer_to_unary_function
operator|<
name|PairTy
operator|,
name|clang
operator|::
name|CallGraphNode
operator|&
operator|>
name|DerefFun
expr_stmt|;
end_typedef

begin_comment
comment|// nodes_iterator/begin/end - Allow iteration over all nodes in the graph
end_comment

begin_typedef
typedef|typedef
name|mapped_iterator
operator|<
name|clang
operator|::
name|CallGraph
operator|::
name|const_iterator
operator|,
name|DerefFun
operator|>
name|nodes_iterator
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
name|nodes_iterator
name|nodes_begin
argument_list|(
specifier|const
name|clang
operator|::
name|CallGraph
operator|*
name|CG
argument_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|CG
operator|->
name|begin
argument_list|()
argument_list|,
name|DerefFun
argument_list|(
name|CGdereference
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|nodes_iterator
name|nodes_end
argument_list|(
specifier|const
name|clang
operator|::
name|CallGraph
operator|*
name|CG
argument_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|CG
operator|->
name|end
argument_list|()
argument_list|,
name|DerefFun
argument_list|(
name|CGdereference
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|CallGraphNode
operator|&
name|CGdereference
argument_list|(
argument|PairTy P
argument_list|)
block|{
return|return
operator|*
operator|(
name|P
operator|.
name|second
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|static
name|unsigned
name|size
argument_list|(
specifier|const
name|clang
operator|::
name|CallGraph
operator|*
name|CG
argument_list|)
block|{
return|return
name|CG
operator|->
name|size
argument_list|()
return|;
block|}
end_decl_stmt

begin_comment
unit|};  }
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

