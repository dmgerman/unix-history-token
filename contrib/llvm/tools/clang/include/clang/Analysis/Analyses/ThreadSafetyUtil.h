begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ThreadSafetyUtil.h --------------------------------------*- C++ --*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines some basic utility classes for use by ThreadSafetyTIL.h
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_ANALYSES_THREADSAFETYUTIL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_ANALYSES_THREADSAFETYUTIL_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/ExprCXX.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/AlignOf.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Allocator.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<ostream>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|threadSafety
block|{
name|namespace
name|til
block|{
comment|// Simple wrapper class to abstract away from the details of memory management.
comment|// SExprs are allocated in pools, and deallocated all at once.
name|class
name|MemRegionRef
block|{
name|private
label|:
union|union
name|AlignmentType
block|{
name|double
name|d
decl_stmt|;
name|void
modifier|*
name|p
decl_stmt|;
name|long
name|double
name|dd
decl_stmt|;
name|long
name|long
name|ii
decl_stmt|;
block|}
union|;
name|public
label|:
name|MemRegionRef
argument_list|()
operator|:
name|Allocator
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|MemRegionRef
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|*
name|A
argument_list|)
operator|:
name|Allocator
argument_list|(
argument|A
argument_list|)
block|{}
name|void
operator|*
name|allocate
argument_list|(
argument|size_t Sz
argument_list|)
block|{
return|return
name|Allocator
operator|->
name|Allocate
argument_list|(
name|Sz
argument_list|,
name|llvm
operator|::
name|AlignOf
operator|<
name|AlignmentType
operator|>
operator|::
name|Alignment
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|*
name|allocateT
argument_list|()
block|{
return|return
name|Allocator
operator|->
name|Allocate
operator|<
name|T
operator|>
operator|(
operator|)
return|;
block|}
name|template
operator|<
name|typename
name|T
operator|>
name|T
operator|*
name|allocateT
argument_list|(
argument|size_t NumElems
argument_list|)
block|{
return|return
name|Allocator
operator|->
name|Allocate
operator|<
name|T
operator|>
operator|(
name|NumElems
operator|)
return|;
block|}
name|private
label|:
name|llvm
operator|::
name|BumpPtrAllocator
operator|*
name|Allocator
expr_stmt|;
block|}
empty_stmt|;
block|}
comment|// end namespace til
block|}
comment|// end namespace threadSafety
block|}
end_decl_stmt

begin_comment
comment|// end namespace clang
end_comment

begin_decl_stmt
specifier|inline
name|void
modifier|*
name|operator
name|new
argument_list|(
name|size_t
name|Sz
argument_list|,
name|clang
operator|::
name|threadSafety
operator|::
name|til
operator|::
name|MemRegionRef
operator|&
name|R
argument_list|)
block|{
return|return
name|R
operator|.
name|allocate
argument_list|(
name|Sz
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|threadSafety
block|{
name|std
operator|::
name|string
name|getSourceLiteralString
argument_list|(
specifier|const
name|clang
operator|::
name|Expr
operator|*
name|CE
argument_list|)
expr_stmt|;
name|using
name|llvm
operator|::
name|StringRef
expr_stmt|;
name|using
name|clang
operator|::
name|SourceLocation
expr_stmt|;
name|namespace
name|til
block|{
comment|// A simple fixed size array class that does not manage its own memory,
comment|// suitable for use with bump pointer allocation.
name|template
operator|<
name|class
name|T
operator|>
name|class
name|SimpleArray
block|{
name|public
operator|:
name|SimpleArray
argument_list|()
operator|:
name|Data
argument_list|(
name|nullptr
argument_list|)
block|,
name|Size
argument_list|(
literal|0
argument_list|)
block|,
name|Capacity
argument_list|(
literal|0
argument_list|)
block|{}
name|SimpleArray
argument_list|(
argument|T *Dat
argument_list|,
argument|size_t Cp
argument_list|,
argument|size_t Sz =
literal|0
argument_list|)
operator|:
name|Data
argument_list|(
name|Dat
argument_list|)
block|,
name|Size
argument_list|(
name|Sz
argument_list|)
block|,
name|Capacity
argument_list|(
argument|Cp
argument_list|)
block|{}
name|SimpleArray
argument_list|(
argument|MemRegionRef A
argument_list|,
argument|size_t Cp
argument_list|)
operator|:
name|Data
argument_list|(
name|Cp
operator|==
literal|0
operator|?
name|nullptr
operator|:
name|A
operator|.
name|allocateT
operator|<
name|T
operator|>
operator|(
name|Cp
operator|)
argument_list|)
block|,
name|Size
argument_list|(
literal|0
argument_list|)
block|,
name|Capacity
argument_list|(
argument|Cp
argument_list|)
block|{}
name|SimpleArray
argument_list|(
name|SimpleArray
operator|<
name|T
operator|>
operator|&&
name|A
argument_list|)
operator|:
name|Data
argument_list|(
name|A
operator|.
name|Data
argument_list|)
block|,
name|Size
argument_list|(
name|A
operator|.
name|Size
argument_list|)
block|,
name|Capacity
argument_list|(
argument|A.Capacity
argument_list|)
block|{
name|A
operator|.
name|Data
operator|=
name|nullptr
block|;
name|A
operator|.
name|Size
operator|=
literal|0
block|;
name|A
operator|.
name|Capacity
operator|=
literal|0
block|;   }
name|SimpleArray
operator|&
name|operator
operator|=
operator|(
name|SimpleArray
operator|&&
name|RHS
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|RHS
condition|)
block|{
name|Data
operator|=
name|RHS
operator|.
name|Data
expr_stmt|;
name|Size
operator|=
name|RHS
operator|.
name|Size
expr_stmt|;
name|Capacity
operator|=
name|RHS
operator|.
name|Capacity
expr_stmt|;
name|RHS
operator|.
name|Data
operator|=
name|nullptr
expr_stmt|;
name|RHS
operator|.
name|Size
operator|=
name|RHS
operator|.
name|Capacity
operator|=
literal|0
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
comment|// Reserve space for at least Ncp items, reallocating if necessary.
name|void
name|reserve
argument_list|(
argument|size_t Ncp
argument_list|,
argument|MemRegionRef A
argument_list|)
block|{
if|if
condition|(
name|Ncp
operator|<=
name|Capacity
condition|)
return|return;
name|T
operator|*
name|Odata
operator|=
name|Data
block|;
name|Data
operator|=
name|A
operator|.
name|allocateT
operator|<
name|T
operator|>
operator|(
name|Ncp
operator|)
block|;
name|Capacity
operator|=
name|Ncp
block|;
name|memcpy
argument_list|(
name|Data
argument_list|,
name|Odata
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
name|Size
argument_list|)
block|;
return|return;
block|}
comment|// Reserve space for at least N more items.
name|void
name|reserveCheck
parameter_list|(
name|size_t
name|N
parameter_list|,
name|MemRegionRef
name|A
parameter_list|)
block|{
if|if
condition|(
name|Capacity
operator|==
literal|0
condition|)
name|reserve
argument_list|(
name|u_max
argument_list|(
name|InitialCapacity
argument_list|,
name|N
argument_list|)
argument_list|,
name|A
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|Size
operator|+
name|N
operator|<
name|Capacity
condition|)
name|reserve
argument_list|(
name|u_max
argument_list|(
name|Size
operator|+
name|N
argument_list|,
name|Capacity
operator|*
literal|2
argument_list|)
argument_list|,
name|A
argument_list|)
expr_stmt|;
block|}
typedef|typedef
name|T
modifier|*
name|iterator
typedef|;
typedef|typedef
specifier|const
name|T
modifier|*
name|const_iterator
typedef|;
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|Size
return|;
block|}
name|size_t
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|Capacity
return|;
block|}
name|T
modifier|&
name|operator
function|[]
parameter_list|(
name|unsigned
name|i
parameter_list|)
block|{
name|assert
argument_list|(
name|i
operator|<
name|Size
operator|&&
literal|"Array index out of bounds."
argument_list|)
expr_stmt|;
return|return
name|Data
index|[
name|i
index|]
return|;
block|}
specifier|const
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|i
operator|<
name|Size
operator|&&
literal|"Array index out of bounds."
argument_list|)
expr_stmt|;
return|return
name|Data
index|[
name|i
index|]
return|;
block|}
name|T
modifier|&
name|back
parameter_list|()
block|{
name|assert
argument_list|(
name|Size
operator|&&
literal|"No elements in the array."
argument_list|)
expr_stmt|;
return|return
name|Data
index|[
name|Size
operator|-
literal|1
index|]
return|;
block|}
specifier|const
name|T
operator|&
name|back
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Size
operator|&&
literal|"No elements in the array."
argument_list|)
block|;
return|return
name|Data
index|[
name|Size
operator|-
literal|1
index|]
return|;
block|}
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|Data
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|Data
operator|+
name|Size
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|+
name|Size
return|;
block|}
name|const_iterator
name|cbegin
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
name|const_iterator
name|cend
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|+
name|Size
return|;
block|}
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|Elem
parameter_list|)
block|{
name|assert
argument_list|(
name|Size
operator|<
name|Capacity
argument_list|)
expr_stmt|;
name|Data
index|[
name|Size
operator|++
index|]
operator|=
name|Elem
expr_stmt|;
block|}
comment|// drop last n elements from array
name|void
name|drop
parameter_list|(
name|unsigned
name|n
init|=
literal|0
parameter_list|)
block|{
name|assert
argument_list|(
name|Size
operator|>
name|n
argument_list|)
expr_stmt|;
name|Size
operator|-=
name|n
expr_stmt|;
block|}
name|void
name|setValues
parameter_list|(
name|unsigned
name|Sz
parameter_list|,
specifier|const
name|T
modifier|&
name|C
parameter_list|)
block|{
name|assert
argument_list|(
name|Sz
operator|<=
name|Capacity
argument_list|)
expr_stmt|;
name|Size
operator|=
name|Sz
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Sz
condition|;
operator|++
name|i
control|)
block|{
name|Data
index|[
name|i
index|]
operator|=
name|C
expr_stmt|;
block|}
block|}
name|template
operator|<
name|class
name|Iter
operator|>
name|unsigned
name|append
argument_list|(
argument|Iter I
argument_list|,
argument|Iter E
argument_list|)
block|{
name|size_t
name|Osz
operator|=
name|Size
block|;
name|size_t
name|J
operator|=
name|Osz
block|;
for|for
control|(
init|;
name|J
operator|<
name|Capacity
operator|&&
name|I
operator|!=
name|E
condition|;
operator|++
name|J
operator|,
operator|++
name|I
control|)
name|Data
index|[
name|J
index|]
operator|=
operator|*
name|I
expr_stmt|;
name|Size
operator|=
name|J
expr_stmt|;
return|return
name|J
operator|-
name|Osz
return|;
block|}
name|llvm
operator|::
name|iterator_range
operator|<
name|reverse_iterator
operator|>
name|reverse
argument_list|()
block|{
return|return
name|llvm
operator|::
name|make_range
argument_list|(
name|rbegin
argument_list|()
argument_list|,
name|rend
argument_list|()
argument_list|)
return|;
block|}
name|llvm
operator|::
name|iterator_range
operator|<
name|const_reverse_iterator
operator|>
name|reverse
argument_list|()
specifier|const
block|{
return|return
name|llvm
operator|::
name|make_range
argument_list|(
name|rbegin
argument_list|()
argument_list|,
name|rend
argument_list|()
argument_list|)
return|;
block|}
name|private
label|:
comment|// std::max is annoying here, because it requires a reference,
comment|// thus forcing InitialCapacity to be initialized outside the .h file.
name|size_t
name|u_max
parameter_list|(
name|size_t
name|i
parameter_list|,
name|size_t
name|j
parameter_list|)
block|{
return|return
operator|(
name|i
operator|<
name|j
operator|)
condition|?
name|j
else|:
name|i
return|;
block|}
specifier|static
specifier|const
name|size_t
name|InitialCapacity
init|=
literal|4
decl_stmt|;
name|SimpleArray
argument_list|(
specifier|const
name|SimpleArray
operator|<
name|T
operator|>
operator|&
name|A
argument_list|)
operator|=
name|delete
expr_stmt|;
name|T
modifier|*
name|Data
decl_stmt|;
name|size_t
name|Size
decl_stmt|;
name|size_t
name|Capacity
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace til
end_comment

begin_comment
comment|// A copy on write vector.
end_comment

begin_comment
comment|// The vector can be in one of three states:
end_comment

begin_comment
comment|// * invalid -- no operations are permitted.
end_comment

begin_comment
comment|// * read-only -- read operations are permitted.
end_comment

begin_comment
comment|// * writable -- read and write operations are permitted.
end_comment

begin_comment
comment|// The init(), destroy(), and makeWritable() methods will change state.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|CopyOnWriteVector
block|{
name|class
name|VectorData
block|{
name|public
operator|:
name|VectorData
argument_list|()
operator|:
name|NumRefs
argument_list|(
literal|1
argument_list|)
block|{ }
name|VectorData
argument_list|(
specifier|const
name|VectorData
operator|&
name|VD
argument_list|)
operator|:
name|NumRefs
argument_list|(
literal|1
argument_list|)
block|,
name|Vect
argument_list|(
argument|VD.Vect
argument_list|)
block|{ }
name|unsigned
name|NumRefs
block|;
name|std
operator|::
name|vector
operator|<
name|T
operator|>
name|Vect
block|;   }
block|;
comment|// No copy constructor or copy assignment.  Use clone() with move assignment.
name|CopyOnWriteVector
argument_list|(
specifier|const
name|CopyOnWriteVector
operator|&
name|V
argument_list|)
operator|=
name|delete
block|;
name|void
name|operator
operator|=
operator|(
specifier|const
name|CopyOnWriteVector
operator|&
name|V
operator|)
operator|=
name|delete
block|;
name|public
operator|:
name|CopyOnWriteVector
argument_list|()
operator|:
name|Data
argument_list|(
argument|nullptr
argument_list|)
block|{}
name|CopyOnWriteVector
argument_list|(
name|CopyOnWriteVector
operator|&&
name|V
argument_list|)
operator|:
name|Data
argument_list|(
argument|V.Data
argument_list|)
block|{
name|V
operator|.
name|Data
operator|=
name|nullptr
block|; }
operator|~
name|CopyOnWriteVector
argument_list|()
block|{
name|destroy
argument_list|()
block|; }
comment|// Returns true if this holds a valid vector.
name|bool
name|valid
argument_list|()
specifier|const
block|{
return|return
name|Data
return|;
block|}
comment|// Returns true if this vector is writable.
name|bool
name|writable
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|&&
name|Data
operator|->
name|NumRefs
operator|==
literal|1
return|;
block|}
end_expr_stmt

begin_comment
comment|// If this vector is not valid, initialize it to a valid vector.
end_comment

begin_function
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Data
condition|)
block|{
name|Data
operator|=
name|new
name|VectorData
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// Destroy this vector; thus making it invalid.
end_comment

begin_function
name|void
name|destroy
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Data
condition|)
return|return;
if|if
condition|(
name|Data
operator|->
name|NumRefs
operator|<=
literal|1
condition|)
name|delete
name|Data
decl_stmt|;
else|else
operator|--
name|Data
operator|->
name|NumRefs
expr_stmt|;
name|Data
operator|=
name|nullptr
expr_stmt|;
block|}
end_function

begin_comment
comment|// Make this vector writable, creating a copy if needed.
end_comment

begin_function
name|void
name|makeWritable
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Data
condition|)
block|{
name|Data
operator|=
name|new
name|VectorData
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|Data
operator|->
name|NumRefs
operator|==
literal|1
condition|)
return|return;
comment|// already writeable.
operator|--
name|Data
operator|->
name|NumRefs
expr_stmt|;
name|Data
operator|=
name|new
name|VectorData
argument_list|(
operator|*
name|Data
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Create a lazy copy of this vector.
end_comment

begin_function
name|CopyOnWriteVector
name|clone
parameter_list|()
block|{
return|return
name|CopyOnWriteVector
argument_list|(
name|Data
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|CopyOnWriteVector
modifier|&
name|operator
init|=
operator|(
name|CopyOnWriteVector
operator|&&
name|V
operator|)
block|{
name|destroy
argument_list|()
block|;
name|Data
operator|=
name|V
operator|.
name|Data
block|;
name|V
operator|.
name|Data
operator|=
name|nullptr
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_typedef
typedef|typedef
name|typename
name|std
operator|::
name|vector
operator|<
name|T
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_expr_stmt
specifier|const
name|std
operator|::
name|vector
operator|<
name|T
operator|>
operator|&
name|elements
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|->
name|Vect
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|elements
argument_list|()
operator|.
name|cbegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|elements
argument_list|()
operator|.
name|cend
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|T
modifier|&
name|operator
index|[]
argument_list|(
name|unsigned
name|i
argument_list|)
decl|const
block|{
return|return
name|elements
argument_list|()
index|[
name|i
index|]
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|unsigned
name|size
argument_list|()
specifier|const
block|{
return|return
name|Data
operator|?
name|elements
argument_list|()
operator|.
name|size
argument_list|()
operator|:
literal|0
return|;
block|}
end_expr_stmt

begin_comment
comment|// Return true if V and this vector refer to the same data.
end_comment

begin_decl_stmt
name|bool
name|sameAs
argument_list|(
specifier|const
name|CopyOnWriteVector
operator|&
name|V
argument_list|)
decl|const
block|{
return|return
name|Data
operator|==
name|V
operator|.
name|Data
return|;
block|}
end_decl_stmt

begin_comment
comment|// Clear vector.  The vector must be writable.
end_comment

begin_function
name|void
name|clear
parameter_list|()
block|{
name|assert
argument_list|(
name|writable
argument_list|()
operator|&&
literal|"Vector is not writable!"
argument_list|)
expr_stmt|;
name|Data
operator|->
name|Vect
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|// Push a new element onto the end.  The vector must be writable.
end_comment

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|Elem
parameter_list|)
block|{
name|assert
argument_list|(
name|writable
argument_list|()
operator|&&
literal|"Vector is not writable!"
argument_list|)
expr_stmt|;
name|Data
operator|->
name|Vect
operator|.
name|push_back
argument_list|(
name|Elem
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Gets a mutable reference to the element at index(i).
end_comment

begin_comment
comment|// The vector must be writable.
end_comment

begin_function
name|T
modifier|&
name|elem
parameter_list|(
name|unsigned
name|i
parameter_list|)
block|{
name|assert
argument_list|(
name|writable
argument_list|()
operator|&&
literal|"Vector is not writable!"
argument_list|)
expr_stmt|;
return|return
name|Data
operator|->
name|Vect
index|[
name|i
index|]
return|;
block|}
end_function

begin_comment
comment|// Drops elements from the back until the vector has size i.
end_comment

begin_function
name|void
name|downsize
parameter_list|(
name|unsigned
name|i
parameter_list|)
block|{
name|assert
argument_list|(
name|writable
argument_list|()
operator|&&
literal|"Vector is not writable!"
argument_list|)
expr_stmt|;
name|Data
operator|->
name|Vect
operator|.
name|erase
argument_list|(
name|Data
operator|->
name|Vect
operator|.
name|begin
argument_list|()
operator|+
name|i
argument_list|,
name|Data
operator|->
name|Vect
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|CopyOnWriteVector
argument_list|(
name|VectorData
operator|*
name|D
argument_list|)
operator|:
name|Data
argument_list|(
argument|D
argument_list|)
block|{
if|if
condition|(
operator|!
name|Data
condition|)
return|return;
operator|++
name|Data
operator|->
name|NumRefs
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    VectorData
operator|*
name|Data
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
specifier|inline
name|std
operator|::
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|std
operator|::
name|ostream
operator|&
name|ss
operator|,
specifier|const
name|StringRef
name|str
operator|)
block|{
return|return
name|ss
operator|.
name|write
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// end namespace threadSafety
end_comment

begin_comment
unit|}
comment|// end namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_THREAD_SAFETY_UTIL_H
end_comment

end_unit

