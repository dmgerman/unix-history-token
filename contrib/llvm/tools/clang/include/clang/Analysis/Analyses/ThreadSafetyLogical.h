begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ThreadSafetyLogical.h -----------------------------------*- C++ --*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// This file defines a representation for logical expressions with SExpr leaves
end_comment

begin_comment
comment|// that are used as part of fact-checking capability expressions.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_THREAD_SAFETY_LOGICAL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_THREAD_SAFETY_LOGICAL_H
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/Analyses/ThreadSafetyTIL.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|namespace
name|threadSafety
block|{
name|namespace
name|lexpr
block|{
name|class
name|LExpr
block|{
name|public
label|:
enum|enum
name|Opcode
block|{
name|Terminal
block|,
name|And
block|,
name|Or
block|,
name|Not
block|}
enum|;
name|Opcode
name|kind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
comment|/// \brief Logical implication. Returns true if the LExpr implies RHS, i.e. if
comment|/// the LExpr holds, then RHS must hold. For example, (A& B) implies A.
specifier|inline
name|bool
name|implies
argument_list|(
specifier|const
name|LExpr
operator|*
name|RHS
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
name|LExpr
argument_list|(
argument|Opcode Kind
argument_list|)
block|:
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|private
label|:
name|Opcode
name|Kind
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Terminal
range|:
name|public
name|LExpr
block|{
name|til
operator|::
name|SExprRef
name|Expr
block|;
name|public
operator|:
name|Terminal
argument_list|(
name|til
operator|::
name|SExpr
operator|*
name|Expr
argument_list|)
operator|:
name|LExpr
argument_list|(
name|LExpr
operator|::
name|Terminal
argument_list|)
block|,
name|Expr
argument_list|(
argument|Expr
argument_list|)
block|{}
specifier|const
name|til
operator|::
name|SExpr
operator|*
name|expr
argument_list|()
specifier|const
block|{
return|return
name|Expr
operator|.
name|get
argument_list|()
return|;
block|}
name|til
operator|::
name|SExpr
operator|*
name|expr
argument_list|()
block|{
return|return
name|Expr
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const LExpr *E
argument_list|)
block|{
return|return
name|E
operator|->
name|kind
argument_list|()
operator|==
name|LExpr
operator|::
name|Terminal
return|;
block|}
expr|}
block|;
name|class
name|BinOp
operator|:
name|public
name|LExpr
block|{
name|LExpr
operator|*
name|LHS
block|,
operator|*
name|RHS
block|;
name|protected
operator|:
name|BinOp
argument_list|(
argument|LExpr *LHS
argument_list|,
argument|LExpr *RHS
argument_list|,
argument|Opcode Code
argument_list|)
operator|:
name|LExpr
argument_list|(
name|Code
argument_list|)
block|,
name|LHS
argument_list|(
name|LHS
argument_list|)
block|,
name|RHS
argument_list|(
argument|RHS
argument_list|)
block|{}
name|public
operator|:
specifier|const
name|LExpr
operator|*
name|left
argument_list|()
specifier|const
block|{
return|return
name|LHS
return|;
block|}
name|LExpr
operator|*
name|left
argument_list|()
block|{
return|return
name|LHS
return|;
block|}
specifier|const
name|LExpr
operator|*
name|right
argument_list|()
specifier|const
block|{
return|return
name|RHS
return|;
block|}
name|LExpr
operator|*
name|right
argument_list|()
block|{
return|return
name|RHS
return|;
block|}
expr|}
block|;
name|class
name|And
operator|:
name|public
name|BinOp
block|{
name|public
operator|:
name|And
argument_list|(
name|LExpr
operator|*
name|LHS
argument_list|,
name|LExpr
operator|*
name|RHS
argument_list|)
operator|:
name|BinOp
argument_list|(
argument|LHS
argument_list|,
argument|RHS
argument_list|,
argument|LExpr::And
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const LExpr *E
argument_list|)
block|{
return|return
name|E
operator|->
name|kind
argument_list|()
operator|==
name|LExpr
operator|::
name|And
return|;
block|}
expr|}
block|;
name|class
name|Or
operator|:
name|public
name|BinOp
block|{
name|public
operator|:
name|Or
argument_list|(
name|LExpr
operator|*
name|LHS
argument_list|,
name|LExpr
operator|*
name|RHS
argument_list|)
operator|:
name|BinOp
argument_list|(
argument|LHS
argument_list|,
argument|RHS
argument_list|,
argument|LExpr::Or
argument_list|)
block|{}
specifier|static
name|bool
name|classof
argument_list|(
argument|const LExpr *E
argument_list|)
block|{
return|return
name|E
operator|->
name|kind
argument_list|()
operator|==
name|LExpr
operator|::
name|Or
return|;
block|}
expr|}
block|;
name|class
name|Not
operator|:
name|public
name|LExpr
block|{
name|LExpr
operator|*
name|Exp
block|;
name|public
operator|:
name|Not
argument_list|(
name|LExpr
operator|*
name|Exp
argument_list|)
operator|:
name|LExpr
argument_list|(
name|LExpr
operator|::
name|Not
argument_list|)
block|,
name|Exp
argument_list|(
argument|Exp
argument_list|)
block|{}
specifier|const
name|LExpr
operator|*
name|exp
argument_list|()
specifier|const
block|{
return|return
name|Exp
return|;
block|}
name|LExpr
operator|*
name|exp
argument_list|()
block|{
return|return
name|Exp
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const LExpr *E
argument_list|)
block|{
return|return
name|E
operator|->
name|kind
argument_list|()
operator|==
name|LExpr
operator|::
name|Not
return|;
block|}
expr|}
block|;
comment|/// \brief Logical implication. Returns true if LHS implies RHS, i.e. if LHS
comment|/// holds, then RHS must hold. For example, (A& B) implies A.
name|bool
name|implies
argument_list|(
specifier|const
name|LExpr
operator|*
name|LHS
argument_list|,
specifier|const
name|LExpr
operator|*
name|RHS
argument_list|)
block|;
name|bool
name|LExpr
operator|::
name|implies
argument_list|(
argument|const LExpr *RHS
argument_list|)
specifier|const
block|{
return|return
name|lexpr
operator|::
name|implies
argument_list|(
name|this
argument_list|,
name|RHS
argument_list|)
return|;
block|}
expr|} } }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_CLANG_THREAD_SAFETY_LOGICAL_H
end_comment

end_unit

