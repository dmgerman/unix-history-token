begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- TypoCorrection.h - Class for typo correction results ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the TypoCorrection class, which stores the results of
end_comment

begin_comment
comment|// Sema's typo correction (Sema::CorrectTypo).
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_SEMA_TYPOCORRECTION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_SEMA_TYPOCORRECTION_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/DeclCXX.h"
end_include

begin_include
include|#
directive|include
file|"clang/Sema/DeclSpec.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
comment|/// @brief Simple class containing the result of Sema::CorrectTypo
name|class
name|TypoCorrection
block|{
name|public
label|:
comment|// "Distance" for unusable corrections
specifier|static
specifier|const
name|unsigned
name|InvalidDistance
init|=
operator|~
literal|0U
decl_stmt|;
comment|// The largest distance still considered valid (larger edit distances are
comment|// mapped to InvalidDistance by getEditDistance).
specifier|static
specifier|const
name|unsigned
name|MaximumDistance
init|=
literal|10000U
decl_stmt|;
comment|// Relative weightings of the "edit distance" components. The higher the
comment|// weight, the more of a penalty to fitness the component will give (higher
comment|// weights mean greater contribution to the total edit distance, with the
comment|// best correction candidates having the lowest edit distance).
specifier|static
specifier|const
name|unsigned
name|CharDistanceWeight
init|=
literal|100U
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|QualifierDistanceWeight
init|=
literal|110U
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|CallbackDistanceWeight
init|=
literal|150U
decl_stmt|;
name|TypoCorrection
argument_list|(
argument|const DeclarationName&Name
argument_list|,
argument|NamedDecl *NameDecl
argument_list|,
argument|NestedNameSpecifier *NNS = nullptr
argument_list|,
argument|unsigned CharDistance =
literal|0
argument_list|,
argument|unsigned QualifierDistance =
literal|0
argument_list|)
block|:
name|CorrectionName
argument_list|(
name|Name
argument_list|)
operator|,
name|CorrectionNameSpec
argument_list|(
name|NNS
argument_list|)
operator|,
name|CharDistance
argument_list|(
name|CharDistance
argument_list|)
operator|,
name|QualifierDistance
argument_list|(
name|QualifierDistance
argument_list|)
operator|,
name|CallbackDistance
argument_list|(
literal|0
argument_list|)
operator|,
name|ForceSpecifierReplacement
argument_list|(
name|false
argument_list|)
operator|,
name|RequiresImport
argument_list|(
argument|false
argument_list|)
block|{
if|if
condition|(
name|NameDecl
condition|)
name|CorrectionDecls
operator|.
name|push_back
argument_list|(
name|NameDecl
argument_list|)
expr_stmt|;
block|}
name|TypoCorrection
argument_list|(
argument|NamedDecl *Name
argument_list|,
argument|NestedNameSpecifier *NNS = nullptr
argument_list|,
argument|unsigned CharDistance =
literal|0
argument_list|)
block|:
name|CorrectionName
argument_list|(
name|Name
operator|->
name|getDeclName
argument_list|()
argument_list|)
operator|,
name|CorrectionNameSpec
argument_list|(
name|NNS
argument_list|)
operator|,
name|CharDistance
argument_list|(
name|CharDistance
argument_list|)
operator|,
name|QualifierDistance
argument_list|(
literal|0
argument_list|)
operator|,
name|CallbackDistance
argument_list|(
literal|0
argument_list|)
operator|,
name|ForceSpecifierReplacement
argument_list|(
name|false
argument_list|)
operator|,
name|RequiresImport
argument_list|(
argument|false
argument_list|)
block|{
if|if
condition|(
name|Name
condition|)
name|CorrectionDecls
operator|.
name|push_back
argument_list|(
name|Name
argument_list|)
expr_stmt|;
block|}
name|TypoCorrection
argument_list|(
argument|DeclarationName Name
argument_list|,
argument|NestedNameSpecifier *NNS = nullptr
argument_list|,
argument|unsigned CharDistance =
literal|0
argument_list|)
block|:
name|CorrectionName
argument_list|(
name|Name
argument_list|)
operator|,
name|CorrectionNameSpec
argument_list|(
name|NNS
argument_list|)
operator|,
name|CharDistance
argument_list|(
name|CharDistance
argument_list|)
operator|,
name|QualifierDistance
argument_list|(
literal|0
argument_list|)
operator|,
name|CallbackDistance
argument_list|(
literal|0
argument_list|)
operator|,
name|ForceSpecifierReplacement
argument_list|(
name|false
argument_list|)
operator|,
name|RequiresImport
argument_list|(
argument|false
argument_list|)
block|{}
name|TypoCorrection
argument_list|()
operator|:
name|CorrectionNameSpec
argument_list|(
name|nullptr
argument_list|)
operator|,
name|CharDistance
argument_list|(
literal|0
argument_list|)
operator|,
name|QualifierDistance
argument_list|(
literal|0
argument_list|)
operator|,
name|CallbackDistance
argument_list|(
literal|0
argument_list|)
operator|,
name|ForceSpecifierReplacement
argument_list|(
name|false
argument_list|)
operator|,
name|RequiresImport
argument_list|(
argument|false
argument_list|)
block|{}
comment|/// \brief Gets the DeclarationName of the typo correction
name|DeclarationName
name|getCorrection
argument_list|()
specifier|const
block|{
return|return
name|CorrectionName
return|;
block|}
name|IdentifierInfo
operator|*
name|getCorrectionAsIdentifierInfo
argument_list|()
specifier|const
block|{
return|return
name|CorrectionName
operator|.
name|getAsIdentifierInfo
argument_list|()
return|;
block|}
comment|/// \brief Gets the NestedNameSpecifier needed to use the typo correction
name|NestedNameSpecifier
operator|*
name|getCorrectionSpecifier
argument_list|()
specifier|const
block|{
return|return
name|CorrectionNameSpec
return|;
block|}
name|void
name|setCorrectionSpecifier
parameter_list|(
name|NestedNameSpecifier
modifier|*
name|NNS
parameter_list|)
block|{
name|CorrectionNameSpec
operator|=
name|NNS
expr_stmt|;
name|ForceSpecifierReplacement
operator|=
operator|(
name|NNS
operator|!=
name|nullptr
operator|)
expr_stmt|;
block|}
name|void
name|WillReplaceSpecifier
parameter_list|(
name|bool
name|ForceReplacement
parameter_list|)
block|{
name|ForceSpecifierReplacement
operator|=
name|ForceReplacement
expr_stmt|;
block|}
name|bool
name|WillReplaceSpecifier
argument_list|()
specifier|const
block|{
return|return
name|ForceSpecifierReplacement
return|;
block|}
name|void
name|setQualifierDistance
parameter_list|(
name|unsigned
name|ED
parameter_list|)
block|{
name|QualifierDistance
operator|=
name|ED
expr_stmt|;
block|}
name|void
name|setCallbackDistance
parameter_list|(
name|unsigned
name|ED
parameter_list|)
block|{
name|CallbackDistance
operator|=
name|ED
expr_stmt|;
block|}
comment|// Convert the given weighted edit distance to a roughly equivalent number of
comment|// single-character edits (typically for comparison to the length of the
comment|// string being edited).
specifier|static
name|unsigned
name|NormalizeEditDistance
parameter_list|(
name|unsigned
name|ED
parameter_list|)
block|{
if|if
condition|(
name|ED
operator|>
name|MaximumDistance
condition|)
return|return
name|InvalidDistance
return|;
return|return
operator|(
name|ED
operator|+
name|CharDistanceWeight
operator|/
literal|2
operator|)
operator|/
name|CharDistanceWeight
return|;
block|}
comment|/// \brief Gets the "edit distance" of the typo correction from the typo.
comment|/// If Normalized is true, scale the distance down by the CharDistanceWeight
comment|/// to return the edit distance in terms of single-character edits.
name|unsigned
name|getEditDistance
argument_list|(
name|bool
name|Normalized
operator|=
name|true
argument_list|)
decl|const
block|{
if|if
condition|(
name|CharDistance
operator|>
name|MaximumDistance
operator|||
name|QualifierDistance
operator|>
name|MaximumDistance
operator|||
name|CallbackDistance
operator|>
name|MaximumDistance
condition|)
return|return
name|InvalidDistance
return|;
name|unsigned
name|ED
init|=
name|CharDistance
operator|*
name|CharDistanceWeight
operator|+
name|QualifierDistance
operator|*
name|QualifierDistanceWeight
operator|+
name|CallbackDistance
operator|*
name|CallbackDistanceWeight
decl_stmt|;
if|if
condition|(
name|ED
operator|>
name|MaximumDistance
condition|)
return|return
name|InvalidDistance
return|;
comment|// Half the CharDistanceWeight is added to ED to simulate rounding since
comment|// integer division truncates the value (i.e. round-to-nearest-int instead
comment|// of round-to-zero).
return|return
name|Normalized
condition|?
name|NormalizeEditDistance
argument_list|(
name|ED
argument_list|)
else|:
name|ED
return|;
block|}
comment|/// \brief Gets the pointer to the declaration of the typo correction
name|NamedDecl
operator|*
name|getCorrectionDecl
argument_list|()
specifier|const
block|{
return|return
name|hasCorrectionDecl
argument_list|()
operator|?
operator|*
operator|(
name|CorrectionDecls
operator|.
name|begin
argument_list|()
operator|)
operator|:
name|nullptr
return|;
block|}
name|template
operator|<
name|class
name|DeclClass
operator|>
name|DeclClass
operator|*
name|getCorrectionDeclAs
argument_list|()
specifier|const
block|{
return|return
name|dyn_cast_or_null
operator|<
name|DeclClass
operator|>
operator|(
name|getCorrectionDecl
argument_list|()
operator|)
return|;
block|}
comment|/// \brief Clears the list of NamedDecls.
name|void
name|ClearCorrectionDecls
parameter_list|()
block|{
name|CorrectionDecls
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/// \brief Clears the list of NamedDecls before adding the new one.
name|void
name|setCorrectionDecl
parameter_list|(
name|NamedDecl
modifier|*
name|CDecl
parameter_list|)
block|{
name|CorrectionDecls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addCorrectionDecl
argument_list|(
name|CDecl
argument_list|)
expr_stmt|;
block|}
comment|/// \brief Clears the list of NamedDecls and adds the given set.
name|void
name|setCorrectionDecls
argument_list|(
name|ArrayRef
operator|<
name|NamedDecl
operator|*
operator|>
name|Decls
argument_list|)
block|{
name|CorrectionDecls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CorrectionDecls
operator|.
name|insert
argument_list|(
name|CorrectionDecls
operator|.
name|begin
argument_list|()
argument_list|,
name|Decls
operator|.
name|begin
argument_list|()
argument_list|,
name|Decls
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/// \brief Add the given NamedDecl to the list of NamedDecls that are the
comment|/// declarations associated with the DeclarationName of this TypoCorrection
name|void
name|addCorrectionDecl
parameter_list|(
name|NamedDecl
modifier|*
name|CDecl
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|getAsString
argument_list|(
argument|const LangOptions&LO
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|string
name|getQuoted
argument_list|(
argument|const LangOptions&LO
argument_list|)
specifier|const
block|{
return|return
literal|"'"
operator|+
name|getAsString
argument_list|(
name|LO
argument_list|)
operator|+
literal|"'"
return|;
block|}
comment|/// \brief Returns whether this TypoCorrection has a non-empty DeclarationName
name|LLVM_EXPLICIT
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|bool
argument_list|(
name|CorrectionName
argument_list|)
return|;
block|}
comment|/// \brief Mark this TypoCorrection as being a keyword.
comment|/// Since addCorrectionDeclsand setCorrectionDecl don't allow NULL to be
comment|/// added to the list of the correction's NamedDecl pointers, NULL is added
comment|/// as the only element in the list to mark this TypoCorrection as a keyword.
name|void
name|makeKeyword
parameter_list|()
block|{
name|CorrectionDecls
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CorrectionDecls
operator|.
name|push_back
argument_list|(
name|nullptr
argument_list|)
expr_stmt|;
name|ForceSpecifierReplacement
operator|=
name|true
expr_stmt|;
block|}
comment|// Check if this TypoCorrection is a keyword by checking if the first
comment|// item in CorrectionDecls is NULL.
name|bool
name|isKeyword
argument_list|()
specifier|const
block|{
return|return
operator|!
name|CorrectionDecls
operator|.
name|empty
argument_list|()
operator|&&
name|CorrectionDecls
operator|.
name|front
argument_list|()
operator|==
name|nullptr
return|;
block|}
comment|// Check if this TypoCorrection is the given keyword.
name|template
operator|<
name|std
operator|::
name|size_t
name|StrLen
operator|>
name|bool
name|isKeyword
argument_list|(
argument|const char (&Str)[StrLen]
argument_list|)
specifier|const
block|{
return|return
name|isKeyword
argument_list|()
operator|&&
name|getCorrectionAsIdentifierInfo
argument_list|()
operator|->
name|isStr
argument_list|(
name|Str
argument_list|)
return|;
block|}
comment|// Returns true if the correction either is a keyword or has a known decl.
name|bool
name|isResolved
argument_list|()
specifier|const
block|{
return|return
operator|!
name|CorrectionDecls
operator|.
name|empty
argument_list|()
return|;
block|}
name|bool
name|isOverloaded
argument_list|()
specifier|const
block|{
return|return
name|CorrectionDecls
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
name|void
name|setCorrectionRange
parameter_list|(
name|CXXScopeSpec
modifier|*
name|SS
parameter_list|,
specifier|const
name|DeclarationNameInfo
modifier|&
name|TypoName
parameter_list|)
block|{
name|CorrectionRange
operator|.
name|setBegin
argument_list|(
name|ForceSpecifierReplacement
operator|&&
name|SS
operator|&&
operator|!
name|SS
operator|->
name|isEmpty
argument_list|()
condition|?
name|SS
operator|->
name|getBeginLoc
argument_list|()
else|:
name|TypoName
operator|.
name|getLoc
argument_list|()
argument_list|)
expr_stmt|;
name|CorrectionRange
operator|.
name|setEnd
argument_list|(
name|TypoName
operator|.
name|getLoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SourceRange
name|getCorrectionRange
argument_list|()
specifier|const
block|{
return|return
name|CorrectionRange
return|;
block|}
typedef|typedef
name|SmallVectorImpl
operator|<
name|NamedDecl
operator|*
operator|>
operator|::
name|iterator
name|decl_iterator
expr_stmt|;
name|decl_iterator
name|begin
parameter_list|()
block|{
return|return
name|isKeyword
argument_list|()
condition|?
name|CorrectionDecls
operator|.
name|end
argument_list|()
else|:
name|CorrectionDecls
operator|.
name|begin
argument_list|()
return|;
block|}
name|decl_iterator
name|end
parameter_list|()
block|{
return|return
name|CorrectionDecls
operator|.
name|end
argument_list|()
return|;
block|}
typedef|typedef
name|SmallVectorImpl
operator|<
name|NamedDecl
operator|*
operator|>
operator|::
name|const_iterator
name|const_decl_iterator
expr_stmt|;
name|const_decl_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|isKeyword
argument_list|()
operator|?
name|CorrectionDecls
operator|.
name|end
argument_list|()
operator|:
name|CorrectionDecls
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_decl_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|CorrectionDecls
operator|.
name|end
argument_list|()
return|;
block|}
comment|/// \brief Returns whether this typo correction is correcting to a
comment|/// declaration that was declared in a module that has not been imported.
name|bool
name|requiresImport
argument_list|()
specifier|const
block|{
return|return
name|RequiresImport
return|;
block|}
name|void
name|setRequiresImport
parameter_list|(
name|bool
name|Req
parameter_list|)
block|{
name|RequiresImport
operator|=
name|Req
expr_stmt|;
block|}
name|private
label|:
name|bool
name|hasCorrectionDecl
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|!
name|isKeyword
argument_list|()
operator|&&
operator|!
name|CorrectionDecls
operator|.
name|empty
argument_list|()
operator|)
return|;
block|}
comment|// Results.
name|DeclarationName
name|CorrectionName
decl_stmt|;
name|NestedNameSpecifier
modifier|*
name|CorrectionNameSpec
decl_stmt|;
name|SmallVector
operator|<
name|NamedDecl
operator|*
operator|,
literal|1
operator|>
name|CorrectionDecls
expr_stmt|;
name|unsigned
name|CharDistance
decl_stmt|;
name|unsigned
name|QualifierDistance
decl_stmt|;
name|unsigned
name|CallbackDistance
decl_stmt|;
name|SourceRange
name|CorrectionRange
decl_stmt|;
name|bool
name|ForceSpecifierReplacement
decl_stmt|;
name|bool
name|RequiresImport
decl_stmt|;
block|}
empty_stmt|;
comment|/// @brief Base class for callback objects used by Sema::CorrectTypo to check
comment|/// the validity of a potential typo correction.
name|class
name|CorrectionCandidateCallback
block|{
name|public
label|:
specifier|static
specifier|const
name|unsigned
name|InvalidDistance
init|=
name|TypoCorrection
operator|::
name|InvalidDistance
decl_stmt|;
name|CorrectionCandidateCallback
argument_list|()
operator|:
name|WantTypeSpecifiers
argument_list|(
name|true
argument_list|)
operator|,
name|WantExpressionKeywords
argument_list|(
name|true
argument_list|)
operator|,
name|WantCXXNamedCasts
argument_list|(
name|true
argument_list|)
operator|,
name|WantRemainingKeywords
argument_list|(
name|true
argument_list|)
operator|,
name|WantObjCSuper
argument_list|(
name|false
argument_list|)
operator|,
name|IsObjCIvarLookup
argument_list|(
name|false
argument_list|)
operator|,
name|IsAddressOfOperand
argument_list|(
argument|false
argument_list|)
block|{}
name|virtual
operator|~
name|CorrectionCandidateCallback
argument_list|()
block|{}
comment|/// \brief Simple predicate used by the default RankCandidate to
comment|/// determine whether to return an edit distance of 0 or InvalidDistance.
comment|/// This can be overrided by validators that only need to determine if a
comment|/// candidate is viable, without ranking potentially viable candidates.
comment|/// Only ValidateCandidate or RankCandidate need to be overriden by a
comment|/// callback wishing to check the viability of correction candidates.
comment|/// The default predicate always returns true if the candidate is not a type
comment|/// name or keyword, true for types if WantTypeSpecifiers is true, and true
comment|/// for keywords if WantTypeSpecifiers, WantExpressionKeywords,
comment|/// WantCXXNamedCasts, WantRemainingKeywords, or WantObjCSuper is true.
name|virtual
name|bool
name|ValidateCandidate
argument_list|(
specifier|const
name|TypoCorrection
operator|&
name|candidate
argument_list|)
expr_stmt|;
comment|/// \brief Method used by Sema::CorrectTypo to assign an "edit distance" rank
comment|/// to a candidate (where a lower value represents a better candidate), or
comment|/// returning InvalidDistance if the candidate is not at all viable. For
comment|/// validation callbacks that only need to determine if a candidate is viable,
comment|/// the default RankCandidate returns either 0 or InvalidDistance depending
comment|/// whether ValidateCandidate returns true or false.
name|virtual
name|unsigned
name|RankCandidate
parameter_list|(
specifier|const
name|TypoCorrection
modifier|&
name|candidate
parameter_list|)
block|{
return|return
name|ValidateCandidate
argument_list|(
name|candidate
argument_list|)
condition|?
literal|0
else|:
name|InvalidDistance
return|;
block|}
comment|// Flags for context-dependent keywords.
comment|// TODO: Expand these to apply to non-keywords or possibly remove them.
name|bool
name|WantTypeSpecifiers
decl_stmt|;
name|bool
name|WantExpressionKeywords
decl_stmt|;
name|bool
name|WantCXXNamedCasts
decl_stmt|;
name|bool
name|WantRemainingKeywords
decl_stmt|;
name|bool
name|WantObjCSuper
decl_stmt|;
comment|// Temporary hack for the one case where a CorrectTypoContext enum is used
comment|// when looking up results.
name|bool
name|IsObjCIvarLookup
decl_stmt|;
name|bool
name|IsAddressOfOperand
decl_stmt|;
block|}
empty_stmt|;
comment|/// @brief Simple template class for restricting typo correction candidates
comment|/// to ones having a single Decl* of the given type.
name|template
operator|<
name|class
name|C
operator|>
name|class
name|DeclFilterCCC
operator|:
name|public
name|CorrectionCandidateCallback
block|{
name|public
operator|:
name|bool
name|ValidateCandidate
argument_list|(
argument|const TypoCorrection&candidate
argument_list|)
name|override
block|{
return|return
name|candidate
operator|.
name|getCorrectionDeclAs
operator|<
name|C
operator|>
operator|(
operator|)
return|;
block|}
expr|}
block|;
comment|// @brief Callback class to limit the allowed keywords and to only accept typo
comment|// corrections that are keywords or whose decls refer to functions (or template
comment|// functions) that accept the given number of arguments.
name|class
name|FunctionCallFilterCCC
operator|:
name|public
name|CorrectionCandidateCallback
block|{
name|public
operator|:
name|FunctionCallFilterCCC
argument_list|(
argument|Sema&SemaRef
argument_list|,
argument|unsigned NumArgs
argument_list|,
argument|bool HasExplicitTemplateArgs
argument_list|,
argument|MemberExpr *ME = nullptr
argument_list|)
block|;
name|bool
name|ValidateCandidate
argument_list|(
argument|const TypoCorrection&candidate
argument_list|)
name|override
block|;
name|private
operator|:
name|unsigned
name|NumArgs
block|;
name|bool
name|HasExplicitTemplateArgs
block|;
name|DeclContext
operator|*
name|CurContext
block|;
name|MemberExpr
operator|*
name|MemberFn
block|; }
block|;
comment|// @brief Callback class that effectively disabled typo correction
name|class
name|NoTypoCorrectionCCC
operator|:
name|public
name|CorrectionCandidateCallback
block|{
name|public
operator|:
name|NoTypoCorrectionCCC
argument_list|()
block|{
name|WantTypeSpecifiers
operator|=
name|false
block|;
name|WantExpressionKeywords
operator|=
name|false
block|;
name|WantCXXNamedCasts
operator|=
name|false
block|;
name|WantRemainingKeywords
operator|=
name|false
block|;   }
name|bool
name|ValidateCandidate
argument_list|(
argument|const TypoCorrection&candidate
argument_list|)
name|override
block|{
return|return
name|false
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

