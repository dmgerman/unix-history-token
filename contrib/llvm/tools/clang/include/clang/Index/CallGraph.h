begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== CallGraph.cpp - Call graph building ------------------------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defined the CallGraph and CallGraphNode classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_CALLGRAPH
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_CALLGRAPH
end_define

begin_include
include|#
directive|include
file|"clang/Index/ASTLocation.h"
end_include

begin_include
include|#
directive|include
file|"clang/Index/Entity.h"
end_include

begin_include
include|#
directive|include
file|"clang/Index/Program.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/GraphTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CallGraphNode
block|{
name|idx
operator|::
name|Entity
name|F
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|idx
operator|::
name|ASTLocation
operator|,
name|CallGraphNode
operator|*
operator|>
name|CallRecord
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|CallRecord
operator|>
name|CalledFunctions
expr_stmt|;
name|public
label|:
name|CallGraphNode
argument_list|(
argument|idx::Entity f
argument_list|)
block|:
name|F
argument_list|(
argument|f
argument_list|)
block|{}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|CallRecord
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|CallRecord
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|CalledFunctions
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|CalledFunctions
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|CalledFunctions
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|CalledFunctions
operator|.
name|end
argument_list|()
return|;
block|}
name|void
name|addCallee
argument_list|(
name|idx
operator|::
name|ASTLocation
name|L
argument_list|,
name|CallGraphNode
operator|*
name|Node
argument_list|)
block|{
name|CalledFunctions
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|L
argument_list|,
name|Node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|hasCallee
argument_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|!=
name|end
argument_list|()
return|;
block|}
name|std
operator|::
name|string
name|getName
argument_list|()
specifier|const
block|{
return|return
name|F
operator|.
name|getPrintableName
argument_list|()
return|;
block|}
name|Decl
modifier|*
name|getDecl
argument_list|(
name|ASTContext
operator|&
name|Ctx
argument_list|)
decl|const
block|{
return|return
name|F
operator|.
name|getDecl
argument_list|(
name|Ctx
argument_list|)
return|;
block|}
block|}
empty_stmt|;
name|class
name|CallGraph
block|{
comment|/// Program manages all Entities.
name|idx
operator|::
name|Program
operator|&
name|Prog
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|idx
operator|::
name|Entity
operator|,
name|CallGraphNode
operator|*
operator|>
name|FunctionMapTy
expr_stmt|;
comment|/// FunctionMap owns all CallGraphNodes.
name|FunctionMapTy
name|FunctionMap
decl_stmt|;
comment|/// CallerCtx maps a caller to its ASTContext.
name|llvm
operator|::
name|DenseMap
operator|<
name|CallGraphNode
operator|*
operator|,
name|ASTContext
operator|*
operator|>
name|CallerCtx
expr_stmt|;
comment|/// Root node is the 'main' function or 0.
name|CallGraphNode
modifier|*
name|Root
decl_stmt|;
comment|/// ExternalCallingNode has edges to all external functions.
name|CallGraphNode
modifier|*
name|ExternalCallingNode
decl_stmt|;
name|public
label|:
name|CallGraph
argument_list|(
name|idx
operator|::
name|Program
operator|&
name|P
argument_list|)
expr_stmt|;
operator|~
name|CallGraph
argument_list|()
expr_stmt|;
typedef|typedef
name|FunctionMapTy
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|FunctionMapTy
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|FunctionMap
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
parameter_list|()
block|{
return|return
name|FunctionMap
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|FunctionMap
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|FunctionMap
operator|.
name|end
argument_list|()
return|;
block|}
name|CallGraphNode
modifier|*
name|getRoot
parameter_list|()
block|{
return|return
name|Root
return|;
block|}
name|CallGraphNode
modifier|*
name|getExternalCallingNode
parameter_list|()
block|{
return|return
name|ExternalCallingNode
return|;
block|}
name|void
name|addTU
parameter_list|(
name|ASTContext
modifier|&
name|AST
parameter_list|)
function_decl|;
name|idx
operator|::
name|Program
operator|&
name|getProgram
argument_list|()
block|{
return|return
name|Prog
return|;
block|}
name|CallGraphNode
modifier|*
name|getOrInsertFunction
argument_list|(
name|idx
operator|::
name|Entity
name|F
argument_list|)
decl_stmt|;
name|Decl
modifier|*
name|getDecl
parameter_list|(
name|CallGraphNode
modifier|*
name|Node
parameter_list|)
function_decl|;
name|void
name|print
argument_list|(
name|llvm
operator|::
name|raw_ostream
operator|&
name|os
argument_list|)
decl_stmt|;
name|void
name|dump
parameter_list|()
function_decl|;
name|void
name|ViewCallGraph
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_decl_stmt
name|namespace
name|llvm
block|{
name|template
operator|<
operator|>
expr|struct
name|GraphTraits
operator|<
name|clang
operator|::
name|CallGraph
operator|>
block|{
typedef|typedef
name|clang
operator|::
name|CallGraph
name|GraphType
expr_stmt|;
typedef|typedef
name|clang
operator|::
name|CallGraphNode
name|NodeType
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|clang
operator|::
name|idx
operator|::
name|ASTLocation
operator|,
name|NodeType
operator|*
operator|>
name|CGNPairTy
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pointer_to_unary_function
operator|<
name|CGNPairTy
operator|,
name|NodeType
operator|*
operator|>
name|CGNDerefFun
expr_stmt|;
typedef|typedef
name|mapped_iterator
operator|<
name|NodeType
operator|::
name|iterator
operator|,
name|CGNDerefFun
operator|>
name|ChildIteratorType
expr_stmt|;
specifier|static
name|NodeType
modifier|*
name|getEntryNode
parameter_list|(
name|GraphType
modifier|*
name|CG
parameter_list|)
block|{
return|return
name|CG
operator|->
name|getExternalCallingNode
argument_list|()
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_begin
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|N
operator|->
name|begin
argument_list|()
argument_list|,
name|CGNDerefFun
argument_list|(
name|CGNDeref
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|ChildIteratorType
name|child_end
parameter_list|(
name|NodeType
modifier|*
name|N
parameter_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|N
operator|->
name|end
argument_list|()
argument_list|,
name|CGNDerefFun
argument_list|(
name|CGNDeref
argument_list|)
argument_list|)
return|;
block|}
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|clang
operator|::
name|idx
operator|::
name|Entity
operator|,
name|NodeType
operator|*
operator|>
name|PairTy
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pointer_to_unary_function
operator|<
name|PairTy
operator|,
name|NodeType
operator|*
operator|>
name|DerefFun
expr_stmt|;
typedef|typedef
name|mapped_iterator
operator|<
name|GraphType
operator|::
name|const_iterator
operator|,
name|DerefFun
operator|>
name|nodes_iterator
expr_stmt|;
specifier|static
name|nodes_iterator
name|nodes_begin
parameter_list|(
specifier|const
name|GraphType
modifier|&
name|CG
parameter_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|CG
operator|.
name|begin
argument_list|()
argument_list|,
name|DerefFun
argument_list|(
name|CGDeref
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|nodes_iterator
name|nodes_end
parameter_list|(
specifier|const
name|GraphType
modifier|&
name|CG
parameter_list|)
block|{
return|return
name|map_iterator
argument_list|(
name|CG
operator|.
name|end
argument_list|()
argument_list|,
name|DerefFun
argument_list|(
name|CGDeref
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|NodeType
modifier|*
name|CGNDeref
parameter_list|(
name|CGNPairTy
name|P
parameter_list|)
block|{
return|return
name|P
operator|.
name|second
return|;
block|}
specifier|static
name|NodeType
modifier|*
name|CGDeref
parameter_list|(
name|PairTy
name|P
parameter_list|)
block|{
return|return
name|P
operator|.
name|second
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

