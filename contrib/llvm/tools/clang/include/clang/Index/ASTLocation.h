begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ASTLocation.h - A<Decl, Stmt> pair --------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  ASTLocation is Decl or a Stmt and its immediate Decl parent.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_INDEX_ASTLOCATION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_INDEX_ASTLOCATION_H
end_define

begin_include
include|#
directive|include
file|"clang/AST/TypeLoc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/PointerIntPair.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|Decl
decl_stmt|;
name|class
name|Stmt
decl_stmt|;
name|class
name|NamedDecl
decl_stmt|;
name|namespace
name|idx
block|{
name|class
name|TranslationUnit
decl_stmt|;
comment|/// \brief Represents a Decl or a Stmt and its immediate Decl parent. It's
comment|/// immutable.
comment|///
comment|/// ASTLocation is intended to be used as a "pointer" into the AST. It is either
comment|/// just a Decl, or a Stmt and its Decl parent. Since a single Stmt is devoid
comment|/// of context, its parent Decl provides all the additional missing information
comment|/// like the declaration context, ASTContext, etc.
comment|///
name|class
name|ASTLocation
block|{
name|public
label|:
enum|enum
name|NodeKind
block|{
name|N_Decl
block|,
name|N_NamedRef
block|,
name|N_Stmt
block|,
name|N_Type
block|}
enum|;
struct|struct
name|NamedRef
block|{
name|NamedDecl
modifier|*
name|ND
decl_stmt|;
name|SourceLocation
name|Loc
decl_stmt|;
name|NamedRef
argument_list|()
operator|:
name|ND
argument_list|(
literal|0
argument_list|)
block|{ }
name|NamedRef
argument_list|(
argument|NamedDecl *nd
argument_list|,
argument|SourceLocation loc
argument_list|)
operator|:
name|ND
argument_list|(
name|nd
argument_list|)
operator|,
name|Loc
argument_list|(
argument|loc
argument_list|)
block|{ }
block|}
struct|;
name|private
label|:
name|llvm
operator|::
name|PointerIntPair
operator|<
name|Decl
operator|*
operator|,
literal|2
operator|,
name|NodeKind
operator|>
name|ParentDecl
expr_stmt|;
union|union
block|{
name|Decl
modifier|*
name|D
decl_stmt|;
name|Stmt
modifier|*
name|Stm
decl_stmt|;
struct|struct
block|{
name|NamedDecl
modifier|*
name|ND
decl_stmt|;
name|unsigned
name|RawLoc
decl_stmt|;
block|}
name|NDRef
struct|;
struct|struct
block|{
name|void
modifier|*
name|TyPtr
decl_stmt|;
name|void
modifier|*
name|Data
decl_stmt|;
block|}
name|Ty
struct|;
block|}
union|;
name|public
label|:
name|ASTLocation
argument_list|()
block|{ }
name|explicit
name|ASTLocation
argument_list|(
specifier|const
name|Decl
operator|*
name|d
argument_list|)
operator|:
name|ParentDecl
argument_list|(
name|const_cast
operator|<
name|Decl
operator|*
operator|>
operator|(
name|d
operator|)
argument_list|,
name|N_Decl
argument_list|)
operator|,
name|D
argument_list|(
argument|const_cast<Decl*>(d)
argument_list|)
block|{ }
name|ASTLocation
argument_list|(
specifier|const
name|Decl
operator|*
name|parentDecl
argument_list|,
specifier|const
name|Stmt
operator|*
name|stm
argument_list|)
operator|:
name|ParentDecl
argument_list|(
name|const_cast
operator|<
name|Decl
operator|*
operator|>
operator|(
name|parentDecl
operator|)
argument_list|,
name|N_Stmt
argument_list|)
operator|,
name|Stm
argument_list|(
argument|const_cast<Stmt*>(stm)
argument_list|)
block|{
if|if
condition|(
operator|!
name|stm
condition|)
name|ParentDecl
operator|.
name|setPointer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ASTLocation
argument_list|(
argument|const Decl *parentDecl
argument_list|,
argument|NamedDecl *ndRef
argument_list|,
argument|SourceLocation loc
argument_list|)
block|:
name|ParentDecl
argument_list|(
argument|const_cast<Decl*>(parentDecl)
argument_list|,
argument|N_NamedRef
argument_list|)
block|{
if|if
condition|(
name|ndRef
condition|)
block|{
name|NDRef
operator|.
name|ND
operator|=
name|ndRef
expr_stmt|;
name|NDRef
operator|.
name|RawLoc
operator|=
name|loc
operator|.
name|getRawEncoding
argument_list|()
expr_stmt|;
block|}
else|else
name|ParentDecl
operator|.
name|setPointer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|ASTLocation
argument_list|(
argument|const Decl *parentDecl
argument_list|,
argument|TypeLoc tyLoc
argument_list|)
block|:
name|ParentDecl
argument_list|(
argument|const_cast<Decl*>(parentDecl)
argument_list|,
argument|N_Type
argument_list|)
block|{
if|if
condition|(
name|tyLoc
condition|)
block|{
name|Ty
operator|.
name|TyPtr
operator|=
name|tyLoc
operator|.
name|getType
argument_list|()
operator|.
name|getAsOpaquePtr
argument_list|()
expr_stmt|;
name|Ty
operator|.
name|Data
operator|=
name|tyLoc
operator|.
name|getOpaqueData
argument_list|()
expr_stmt|;
block|}
else|else
name|ParentDecl
operator|.
name|setPointer
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
name|ParentDecl
operator|.
name|getPointer
argument_list|()
operator|!=
literal|0
return|;
block|}
name|bool
name|isInvalid
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isValid
argument_list|()
return|;
block|}
name|NodeKind
name|getKind
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|isValid
argument_list|()
argument_list|)
block|;
return|return
operator|(
name|NodeKind
operator|)
name|ParentDecl
operator|.
name|getInt
argument_list|()
return|;
block|}
name|Decl
operator|*
name|getParentDecl
argument_list|()
specifier|const
block|{
return|return
name|ParentDecl
operator|.
name|getPointer
argument_list|()
return|;
block|}
name|Decl
operator|*
name|AsDecl
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|N_Decl
argument_list|)
block|;
return|return
name|D
return|;
block|}
name|Stmt
operator|*
name|AsStmt
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|N_Stmt
argument_list|)
block|;
return|return
name|Stm
return|;
block|}
name|NamedRef
name|AsNamedRef
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|N_NamedRef
argument_list|)
block|;
return|return
name|NamedRef
argument_list|(
name|NDRef
operator|.
name|ND
argument_list|,
name|SourceLocation
operator|::
name|getFromRawEncoding
argument_list|(
name|NDRef
operator|.
name|RawLoc
argument_list|)
argument_list|)
return|;
block|}
name|TypeLoc
name|AsTypeLoc
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|getKind
argument_list|()
operator|==
name|N_Type
argument_list|)
block|;
return|return
name|TypeLoc
argument_list|(
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|Ty
operator|.
name|TyPtr
argument_list|)
argument_list|,
name|Ty
operator|.
name|Data
argument_list|)
return|;
block|}
name|Decl
operator|*
name|dyn_AsDecl
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|getKind
argument_list|()
operator|==
name|N_Decl
operator|?
name|D
operator|:
literal|0
return|;
block|}
name|Stmt
operator|*
name|dyn_AsStmt
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|getKind
argument_list|()
operator|==
name|N_Stmt
operator|?
name|Stm
operator|:
literal|0
return|;
block|}
name|NamedRef
name|dyn_AsNamedRef
argument_list|()
specifier|const
block|{
return|return
name|getKind
argument_list|()
operator|==
name|N_Type
operator|?
name|AsNamedRef
argument_list|()
operator|:
name|NamedRef
argument_list|()
return|;
block|}
name|TypeLoc
name|dyn_AsTypeLoc
argument_list|()
specifier|const
block|{
return|return
name|getKind
argument_list|()
operator|==
name|N_Type
operator|?
name|AsTypeLoc
argument_list|()
operator|:
name|TypeLoc
argument_list|()
return|;
block|}
name|bool
name|isDecl
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|getKind
argument_list|()
operator|==
name|N_Decl
return|;
block|}
name|bool
name|isStmt
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|getKind
argument_list|()
operator|==
name|N_Stmt
return|;
block|}
name|bool
name|isNamedRef
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|getKind
argument_list|()
operator|==
name|N_NamedRef
return|;
block|}
name|bool
name|isType
argument_list|()
specifier|const
block|{
return|return
name|isValid
argument_list|()
operator|&&
name|getKind
argument_list|()
operator|==
name|N_Type
return|;
block|}
comment|/// \brief Returns the declaration that this ASTLocation references.
comment|///
comment|/// If this points to a Decl, that Decl is returned.
comment|/// If this points to an Expr that references a Decl, that Decl is returned,
comment|/// otherwise it returns NULL.
name|Decl
modifier|*
name|getReferencedDecl
parameter_list|()
function_decl|;
specifier|const
name|Decl
operator|*
name|getReferencedDecl
argument_list|()
specifier|const
block|{
return|return
name|const_cast
operator|<
name|ASTLocation
operator|*
operator|>
operator|(
name|this
operator|)
operator|->
name|getReferencedDecl
argument_list|()
return|;
block|}
name|SourceRange
name|getSourceRange
argument_list|()
specifier|const
expr_stmt|;
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
comment|/// \brief Like ASTLocation but also contains the TranslationUnit that the
comment|/// ASTLocation originated from.
name|class
name|TULocation
range|:
name|public
name|ASTLocation
block|{
name|TranslationUnit
operator|*
name|TU
block|;
name|public
operator|:
name|TULocation
argument_list|(
argument|TranslationUnit *tu
argument_list|,
argument|ASTLocation astLoc
argument_list|)
operator|:
name|ASTLocation
argument_list|(
name|astLoc
argument_list|)
block|,
name|TU
argument_list|(
argument|tu
argument_list|)
block|{
name|assert
argument_list|(
name|tu
operator|&&
literal|"Passed null translation unit"
argument_list|)
block|;   }
name|TranslationUnit
operator|*
name|getTU
argument_list|()
specifier|const
block|{
return|return
name|TU
return|;
block|}
expr|}
block|;  }
comment|// namespace idx
block|}
end_decl_stmt

begin_comment
comment|// namespace clang
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

