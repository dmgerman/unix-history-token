begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== Environment.h - Map from Stmt* to Locations/Values ---------*- C++ -*--==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defined the Environment and EnvironmentManager classes.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_ENVIRONMENT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_ENVIRONMENT_H
end_define

begin_comment
comment|// For using typedefs in StoreManager. Should find a better place for these
end_comment

begin_comment
comment|// typedefs.
end_comment

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/Store.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/SVals.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ImmutableMap.h"
end_include

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|EnvironmentManager
decl_stmt|;
name|class
name|ValueManager
decl_stmt|;
name|class
name|LiveVariables
decl_stmt|;
name|class
name|Environment
block|{
name|private
label|:
name|friend
name|class
name|EnvironmentManager
decl_stmt|;
comment|// Type definitions.
typedef|typedef
name|llvm
operator|::
name|ImmutableMap
operator|<
specifier|const
name|Stmt
operator|*
operator|,
name|SVal
operator|>
name|BindingsTy
expr_stmt|;
comment|// Data.
name|BindingsTy
name|ExprBindings
decl_stmt|;
name|Environment
argument_list|(
argument|BindingsTy eb
argument_list|)
block|:
name|ExprBindings
argument_list|(
argument|eb
argument_list|)
block|{}
name|public
label|:
typedef|typedef
name|BindingsTy
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|ExprBindings
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|ExprBindings
operator|.
name|end
argument_list|()
return|;
block|}
name|SVal
name|LookupExpr
argument_list|(
specifier|const
name|Stmt
operator|*
name|E
argument_list|)
decl|const
block|{
specifier|const
name|SVal
modifier|*
name|X
init|=
name|ExprBindings
operator|.
name|lookup
argument_list|(
name|E
argument_list|)
decl_stmt|;
return|return
name|X
condition|?
operator|*
name|X
else|:
name|UnknownVal
argument_list|()
return|;
block|}
name|SVal
name|GetSVal
argument_list|(
specifier|const
name|Stmt
operator|*
name|Ex
argument_list|,
name|ValueManager
operator|&
name|ValMgr
argument_list|)
decl|const
decl_stmt|;
comment|/// Profile - Profile the contents of an Environment object for use
comment|///  in a FoldingSet.
specifier|static
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
specifier|const
name|Environment
operator|*
name|E
argument_list|)
block|{
name|E
operator|->
name|ExprBindings
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
comment|/// Profile - Used to profile the contents of this object for inclusion
comment|///  in a FoldingSet.
name|void
name|Profile
argument_list|(
name|llvm
operator|::
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Environment
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|ExprBindings
operator|==
name|RHS
operator|.
name|ExprBindings
return|;
block|}
block|}
empty_stmt|;
name|class
name|EnvironmentManager
block|{
name|private
label|:
typedef|typedef
name|Environment
operator|::
name|BindingsTy
operator|::
name|Factory
name|FactoryTy
expr_stmt|;
name|FactoryTy
name|F
decl_stmt|;
name|public
label|:
name|EnvironmentManager
argument_list|(
name|llvm
operator|::
name|BumpPtrAllocator
operator|&
name|Allocator
argument_list|)
operator|:
name|F
argument_list|(
argument|Allocator
argument_list|)
block|{}
operator|~
name|EnvironmentManager
argument_list|()
block|{}
name|Environment
name|getInitialEnvironment
argument_list|()
block|{
return|return
name|Environment
argument_list|(
name|F
operator|.
name|GetEmptyMap
argument_list|()
argument_list|)
return|;
block|}
name|Environment
name|BindExpr
parameter_list|(
name|Environment
name|Env
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|SVal
name|V
parameter_list|,
name|bool
name|Invalidate
parameter_list|)
function_decl|;
name|Environment
name|RemoveDeadBindings
argument_list|(
name|Environment
name|Env
argument_list|,
name|SymbolReaper
operator|&
name|SymReaper
argument_list|,
specifier|const
name|GRState
operator|*
name|ST
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
specifier|const
name|MemRegion
operator|*
operator|>
operator|&
name|RegionRoots
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

