begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//== Checker.h - Abstract interface for checkers -----------------*- C++ -*--=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines Checker and CheckerVisitor, classes used for creating
end_comment

begin_comment
comment|//  domain-specific checks.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CLANG_ANALYSIS_CHECKER
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CLANG_ANALYSIS_CHECKER
end_define

begin_include
include|#
directive|include
file|"clang/Analysis/Support/SaveAndRestore.h"
end_include

begin_include
include|#
directive|include
file|"clang/Checker/PathSensitive/GRExprEngine.h"
end_include

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Checker interface.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|namespace
name|clang
block|{
name|class
name|CheckerContext
block|{
name|ExplodedNodeSet
modifier|&
name|Dst
decl_stmt|;
name|GRStmtNodeBuilder
modifier|&
name|B
decl_stmt|;
name|GRExprEngine
modifier|&
name|Eng
decl_stmt|;
name|ExplodedNode
modifier|*
name|Pred
decl_stmt|;
name|SaveAndRestore
operator|<
name|bool
operator|>
name|OldSink
expr_stmt|;
name|SaveAndRestore
operator|<
specifier|const
name|void
operator|*
operator|>
name|OldTag
expr_stmt|;
name|SaveAndRestore
operator|<
name|ProgramPoint
operator|::
name|Kind
operator|>
name|OldPointKind
expr_stmt|;
name|SaveOr
name|OldHasGen
decl_stmt|;
specifier|const
name|GRState
modifier|*
name|ST
decl_stmt|;
specifier|const
name|Stmt
modifier|*
name|statement
decl_stmt|;
specifier|const
name|unsigned
name|size
decl_stmt|;
name|bool
name|DoneEvaluating
decl_stmt|;
comment|// FIXME: This is not a permanent API change.
name|public
label|:
name|bool
modifier|*
name|respondsToCallback
decl_stmt|;
name|public
label|:
name|CheckerContext
argument_list|(
argument|ExplodedNodeSet&dst
argument_list|,
argument|GRStmtNodeBuilder&builder
argument_list|,
argument|GRExprEngine&eng
argument_list|,
argument|ExplodedNode *pred
argument_list|,
argument|const void *tag
argument_list|,
argument|ProgramPoint::Kind K
argument_list|,
argument|bool *respondsToCB =
literal|0
argument_list|,
argument|const Stmt *stmt =
literal|0
argument_list|,
argument|const GRState *st =
literal|0
argument_list|)
block|:
name|Dst
argument_list|(
name|dst
argument_list|)
operator|,
name|B
argument_list|(
name|builder
argument_list|)
operator|,
name|Eng
argument_list|(
name|eng
argument_list|)
operator|,
name|Pred
argument_list|(
name|pred
argument_list|)
operator|,
name|OldSink
argument_list|(
name|B
operator|.
name|BuildSinks
argument_list|)
operator|,
name|OldTag
argument_list|(
name|B
operator|.
name|Tag
argument_list|,
name|tag
argument_list|)
operator|,
name|OldPointKind
argument_list|(
name|B
operator|.
name|PointKind
argument_list|,
name|K
argument_list|)
operator|,
name|OldHasGen
argument_list|(
name|B
operator|.
name|HasGeneratedNode
argument_list|)
operator|,
name|ST
argument_list|(
name|st
argument_list|)
operator|,
name|statement
argument_list|(
name|stmt
argument_list|)
operator|,
name|size
argument_list|(
name|Dst
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|respondsToCallback
argument_list|(
argument|respondsToCB
argument_list|)
block|{}
operator|~
name|CheckerContext
argument_list|()
expr_stmt|;
name|GRExprEngine
modifier|&
name|getEngine
parameter_list|()
block|{
return|return
name|Eng
return|;
block|}
name|AnalysisManager
modifier|&
name|getAnalysisManager
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getAnalysisManager
argument_list|()
return|;
block|}
name|ConstraintManager
modifier|&
name|getConstraintManager
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getConstraintManager
argument_list|()
return|;
block|}
name|StoreManager
modifier|&
name|getStoreManager
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getStoreManager
argument_list|()
return|;
block|}
name|ExplodedNodeSet
modifier|&
name|getNodeSet
parameter_list|()
block|{
return|return
name|Dst
return|;
block|}
name|GRStmtNodeBuilder
modifier|&
name|getNodeBuilder
parameter_list|()
block|{
return|return
name|B
return|;
block|}
name|ExplodedNode
modifier|*
modifier|&
name|getPredecessor
parameter_list|()
block|{
return|return
name|Pred
return|;
block|}
specifier|const
name|GRState
modifier|*
name|getState
parameter_list|()
block|{
return|return
name|ST
condition|?
name|ST
else|:
name|B
operator|.
name|GetState
argument_list|(
name|Pred
argument_list|)
return|;
block|}
name|ASTContext
modifier|&
name|getASTContext
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getContext
argument_list|()
return|;
block|}
name|BugReporter
modifier|&
name|getBugReporter
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getBugReporter
argument_list|()
return|;
block|}
name|SourceManager
modifier|&
name|getSourceManager
parameter_list|()
block|{
return|return
name|getBugReporter
argument_list|()
operator|.
name|getSourceManager
argument_list|()
return|;
block|}
name|ValueManager
modifier|&
name|getValueManager
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getValueManager
argument_list|()
return|;
block|}
name|SValuator
modifier|&
name|getSValuator
parameter_list|()
block|{
return|return
name|Eng
operator|.
name|getSValuator
argument_list|()
return|;
block|}
name|ExplodedNode
modifier|*
name|GenerateNode
parameter_list|(
name|bool
name|autoTransition
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|statement
operator|&&
literal|"Only transitions with statements currently supported"
argument_list|)
expr_stmt|;
name|ExplodedNode
modifier|*
name|N
init|=
name|GenerateNodeImpl
argument_list|(
name|statement
argument_list|,
name|getState
argument_list|()
argument_list|,
name|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|N
operator|&&
name|autoTransition
condition|)
name|Dst
operator|.
name|Add
argument_list|(
name|N
argument_list|)
expr_stmt|;
return|return
name|N
return|;
block|}
name|ExplodedNode
modifier|*
name|GenerateNode
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|stmt
parameter_list|,
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|bool
name|autoTransition
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|ExplodedNode
modifier|*
name|N
init|=
name|GenerateNodeImpl
argument_list|(
name|stmt
argument_list|,
name|state
argument_list|,
name|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|N
operator|&&
name|autoTransition
condition|)
name|addTransition
argument_list|(
name|N
argument_list|)
expr_stmt|;
return|return
name|N
return|;
block|}
name|ExplodedNode
modifier|*
name|GenerateNode
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|ExplodedNode
modifier|*
name|pred
parameter_list|,
name|bool
name|autoTransition
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|statement
operator|&&
literal|"Only transitions with statements currently supported"
argument_list|)
expr_stmt|;
name|ExplodedNode
modifier|*
name|N
init|=
name|GenerateNodeImpl
argument_list|(
name|statement
argument_list|,
name|state
argument_list|,
name|pred
argument_list|,
name|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|N
operator|&&
name|autoTransition
condition|)
name|addTransition
argument_list|(
name|N
argument_list|)
expr_stmt|;
return|return
name|N
return|;
block|}
name|ExplodedNode
modifier|*
name|GenerateNode
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|bool
name|autoTransition
init|=
name|true
parameter_list|)
block|{
name|assert
argument_list|(
name|statement
operator|&&
literal|"Only transitions with statements currently supported"
argument_list|)
expr_stmt|;
name|ExplodedNode
modifier|*
name|N
init|=
name|GenerateNodeImpl
argument_list|(
name|statement
argument_list|,
name|state
argument_list|,
name|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|N
operator|&&
name|autoTransition
condition|)
name|addTransition
argument_list|(
name|N
argument_list|)
expr_stmt|;
return|return
name|N
return|;
block|}
name|ExplodedNode
modifier|*
name|GenerateSink
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|stmt
parameter_list|,
specifier|const
name|GRState
modifier|*
name|state
init|=
literal|0
parameter_list|)
block|{
return|return
name|GenerateNodeImpl
argument_list|(
name|stmt
argument_list|,
name|state
condition|?
name|state
else|:
name|getState
argument_list|()
argument_list|,
name|true
argument_list|)
return|;
block|}
name|ExplodedNode
modifier|*
name|GenerateSink
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
init|=
literal|0
parameter_list|)
block|{
name|assert
argument_list|(
name|statement
operator|&&
literal|"Only transitions with statements currently supported"
argument_list|)
expr_stmt|;
return|return
name|GenerateNodeImpl
argument_list|(
name|statement
argument_list|,
name|state
condition|?
name|state
else|:
name|getState
argument_list|()
argument_list|,
name|true
argument_list|)
return|;
block|}
name|void
name|addTransition
parameter_list|(
name|ExplodedNode
modifier|*
name|node
parameter_list|)
block|{
name|Dst
operator|.
name|Add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|void
name|addTransition
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|)
block|{
name|assert
argument_list|(
name|state
argument_list|)
expr_stmt|;
comment|// If the 'state' is not new, we need to check if the cached state 'ST'
comment|// is new.
if|if
condition|(
name|state
operator|!=
name|getState
argument_list|()
operator|||
operator|(
name|ST
operator|&&
name|ST
operator|!=
name|B
operator|.
name|GetState
argument_list|(
name|Pred
argument_list|)
operator|)
condition|)
comment|// state is new or equals to ST.
name|GenerateNode
argument_list|(
name|state
argument_list|,
name|true
argument_list|)
expr_stmt|;
else|else
name|Dst
operator|.
name|Add
argument_list|(
name|Pred
argument_list|)
expr_stmt|;
block|}
comment|// Generate a node with a new program point different from the one that will
comment|// be created by the GRStmtNodeBuilder.
name|void
name|addTransition
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|ProgramPoint
name|Loc
parameter_list|)
block|{
name|ExplodedNode
modifier|*
name|N
init|=
name|B
operator|.
name|generateNode
argument_list|(
name|Loc
argument_list|,
name|state
argument_list|,
name|Pred
argument_list|)
decl_stmt|;
if|if
condition|(
name|N
condition|)
name|addTransition
argument_list|(
name|N
argument_list|)
expr_stmt|;
block|}
name|void
name|EmitReport
parameter_list|(
name|BugReport
modifier|*
name|R
parameter_list|)
block|{
name|Eng
operator|.
name|getBugReporter
argument_list|()
operator|.
name|EmitReport
argument_list|(
name|R
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|ExplodedNode
modifier|*
name|GenerateNodeImpl
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|stmt
parameter_list|,
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|bool
name|markAsSink
parameter_list|)
block|{
name|ExplodedNode
modifier|*
name|node
init|=
name|B
operator|.
name|generateNode
argument_list|(
name|stmt
argument_list|,
name|state
argument_list|,
name|Pred
argument_list|)
decl_stmt|;
if|if
condition|(
name|markAsSink
operator|&&
name|node
condition|)
name|node
operator|->
name|markAsSink
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
name|ExplodedNode
modifier|*
name|GenerateNodeImpl
parameter_list|(
specifier|const
name|Stmt
modifier|*
name|stmt
parameter_list|,
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|ExplodedNode
modifier|*
name|pred
parameter_list|,
name|bool
name|markAsSink
parameter_list|)
block|{
name|ExplodedNode
modifier|*
name|node
init|=
name|B
operator|.
name|generateNode
argument_list|(
name|stmt
argument_list|,
name|state
argument_list|,
name|pred
argument_list|)
decl_stmt|;
if|if
condition|(
name|markAsSink
operator|&&
name|node
condition|)
name|node
operator|->
name|markAsSink
argument_list|()
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
empty_stmt|;
name|class
name|Checker
block|{
name|private
label|:
name|friend
name|class
name|GRExprEngine
decl_stmt|;
comment|// FIXME: Remove the 'tag' option.
name|void
name|GR_Visit
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|GRStmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|GRExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|bool
name|isPrevisit
parameter_list|,
name|bool
modifier|&
name|respondsToCallback
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|isPrevisit
condition|?
name|ProgramPoint
operator|::
name|PreStmtKind
else|:
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
operator|&
name|respondsToCallback
argument_list|,
name|S
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPrevisit
condition|)
name|_PreVisit
argument_list|(
name|C
argument_list|,
name|S
argument_list|)
expr_stmt|;
else|else
name|_PostVisit
argument_list|(
name|C
argument_list|,
name|S
argument_list|)
expr_stmt|;
block|}
name|bool
name|GR_EvalNilReceiver
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|GRStmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|GRExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|ObjCMessageExpr
modifier|*
name|ME
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
literal|0
argument_list|,
name|ME
argument_list|,
name|state
argument_list|)
decl_stmt|;
return|return
name|EvalNilReceiver
argument_list|(
name|C
argument_list|,
name|ME
argument_list|)
return|;
block|}
name|bool
name|GR_EvalCallExpr
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|GRStmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|GRExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|CallExpr
modifier|*
name|CE
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
literal|0
argument_list|,
name|CE
argument_list|)
decl_stmt|;
return|return
name|EvalCallExpr
argument_list|(
name|C
argument_list|,
name|CE
argument_list|)
return|;
block|}
comment|// FIXME: Remove the 'tag' option.
name|void
name|GR_VisitBind
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|GRStmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|GRExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|AssignE
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|StoreE
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|SVal
name|location
parameter_list|,
name|SVal
name|val
parameter_list|,
name|bool
name|isPrevisit
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|isPrevisit
condition|?
name|ProgramPoint
operator|::
name|PreStmtKind
else|:
name|ProgramPoint
operator|::
name|PostStmtKind
argument_list|,
literal|0
argument_list|,
name|StoreE
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|isPrevisit
operator|&&
literal|"Only previsit supported for now."
argument_list|)
expr_stmt|;
name|PreVisitBind
argument_list|(
name|C
argument_list|,
name|AssignE
argument_list|,
name|StoreE
argument_list|,
name|location
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: Remove the 'tag' option.
name|void
name|GR_VisitLocation
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|GRStmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|GRExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|SVal
name|location
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|bool
name|isLoad
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|isLoad
condition|?
name|ProgramPoint
operator|::
name|PreLoadKind
else|:
name|ProgramPoint
operator|::
name|PreStoreKind
argument_list|,
literal|0
argument_list|,
name|S
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|VisitLocation
argument_list|(
name|C
argument_list|,
name|S
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
name|void
name|GR_EvalDeadSymbols
parameter_list|(
name|ExplodedNodeSet
modifier|&
name|Dst
parameter_list|,
name|GRStmtNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|GRExprEngine
modifier|&
name|Eng
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|ExplodedNode
modifier|*
name|Pred
parameter_list|,
name|SymbolReaper
modifier|&
name|SymReaper
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
block|{
name|CheckerContext
name|C
argument_list|(
name|Dst
argument_list|,
name|Builder
argument_list|,
name|Eng
argument_list|,
name|Pred
argument_list|,
name|tag
argument_list|,
name|ProgramPoint
operator|::
name|PostPurgeDeadSymbolsKind
argument_list|,
literal|0
argument_list|,
name|S
argument_list|)
decl_stmt|;
name|EvalDeadSymbols
argument_list|(
name|C
argument_list|,
name|SymReaper
argument_list|)
expr_stmt|;
block|}
name|public
label|:
name|virtual
operator|~
name|Checker
argument_list|()
expr_stmt|;
name|virtual
name|void
name|_PreVisit
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
block|{}
name|virtual
name|void
name|_PostVisit
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|)
block|{}
name|virtual
name|void
name|VisitLocation
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|S
parameter_list|,
name|SVal
name|location
parameter_list|)
block|{}
name|virtual
name|void
name|PreVisitBind
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|AssignE
parameter_list|,
specifier|const
name|Stmt
modifier|*
name|StoreE
parameter_list|,
name|SVal
name|location
parameter_list|,
name|SVal
name|val
parameter_list|)
block|{}
name|virtual
name|void
name|EvalDeadSymbols
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
name|SymbolReaper
modifier|&
name|SymReaper
parameter_list|)
block|{}
name|virtual
name|void
name|EvalEndPath
parameter_list|(
name|GREndPathNodeBuilder
modifier|&
name|B
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|,
name|GRExprEngine
modifier|&
name|Eng
parameter_list|)
block|{}
name|virtual
name|void
name|VisitBranchCondition
parameter_list|(
name|GRBranchNodeBuilder
modifier|&
name|Builder
parameter_list|,
name|GRExprEngine
modifier|&
name|Eng
parameter_list|,
name|Stmt
modifier|*
name|Condition
parameter_list|,
name|void
modifier|*
name|tag
parameter_list|)
block|{}
name|virtual
name|bool
name|EvalNilReceiver
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|ObjCMessageExpr
modifier|*
name|ME
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|EvalCallExpr
parameter_list|(
name|CheckerContext
modifier|&
name|C
parameter_list|,
specifier|const
name|CallExpr
modifier|*
name|CE
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
specifier|const
name|GRState
modifier|*
name|EvalAssume
parameter_list|(
specifier|const
name|GRState
modifier|*
name|state
parameter_list|,
name|SVal
name|Cond
parameter_list|,
name|bool
name|Assumption
parameter_list|)
block|{
return|return
name|state
return|;
block|}
name|virtual
name|void
name|VisitEndAnalysis
parameter_list|(
name|ExplodedGraph
modifier|&
name|G
parameter_list|,
name|BugReporter
modifier|&
name|B
parameter_list|,
name|bool
name|hasWorkRemaining
parameter_list|)
block|{}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end clang namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

