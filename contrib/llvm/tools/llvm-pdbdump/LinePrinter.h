begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- LinePrinter.h ------------------------------------------ *- C++ --*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TOOLS_LLVMPDBDUMP_LINEPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TOOLS_LLVMPDBDUMP_LINEPRINTER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Twine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Regex.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|LinePrinter
block|{
name|friend
name|class
name|WithColor
decl_stmt|;
name|public
label|:
name|LinePrinter
argument_list|(
argument|int Indent
argument_list|,
argument|raw_ostream&Stream
argument_list|)
empty_stmt|;
name|void
name|Indent
parameter_list|()
function_decl|;
name|void
name|Unindent
parameter_list|()
function_decl|;
name|void
name|NewLine
parameter_list|()
function_decl|;
name|raw_ostream
modifier|&
name|getStream
parameter_list|()
block|{
return|return
name|OS
return|;
block|}
name|int
name|getIndentLevel
argument_list|()
specifier|const
block|{
return|return
name|CurrentIndent
return|;
block|}
name|bool
name|IsTypeExcluded
argument_list|(
name|llvm
operator|::
name|StringRef
name|TypeName
argument_list|)
decl_stmt|;
name|bool
name|IsSymbolExcluded
argument_list|(
name|llvm
operator|::
name|StringRef
name|SymbolName
argument_list|)
decl_stmt|;
name|bool
name|IsCompilandExcluded
argument_list|(
name|llvm
operator|::
name|StringRef
name|CompilandName
argument_list|)
decl_stmt|;
name|private
label|:
name|template
operator|<
name|typename
name|Iter
operator|>
name|void
name|SetFilters
argument_list|(
argument|std::list<Regex>&List
argument_list|,
argument|Iter Begin
argument_list|,
argument|Iter End
argument_list|)
block|{
name|List
operator|.
name|clear
argument_list|()
block|;
for|for
control|(
init|;
name|Begin
operator|!=
name|End
condition|;
operator|++
name|Begin
control|)
name|List
operator|.
name|emplace_back
argument_list|(
name|StringRef
argument_list|(
operator|*
name|Begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|raw_ostream
modifier|&
name|OS
decl_stmt|;
name|int
name|IndentSpaces
decl_stmt|;
name|int
name|CurrentIndent
decl_stmt|;
name|std
operator|::
name|list
operator|<
name|Regex
operator|>
name|ExcludeCompilandFilters
expr_stmt|;
name|std
operator|::
name|list
operator|<
name|Regex
operator|>
name|ExcludeTypeFilters
expr_stmt|;
name|std
operator|::
name|list
operator|<
name|Regex
operator|>
name|ExcludeSymbolFilters
expr_stmt|;
name|std
operator|::
name|list
operator|<
name|Regex
operator|>
name|IncludeCompilandFilters
expr_stmt|;
name|std
operator|::
name|list
operator|<
name|Regex
operator|>
name|IncludeTypeFilters
expr_stmt|;
name|std
operator|::
name|list
operator|<
name|Regex
operator|>
name|IncludeSymbolFilters
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|LinePrinter
operator|&
name|Printer
operator|,
specifier|const
name|T
operator|&
name|Item
operator|)
block|{
name|Printer
operator|.
name|getStream
argument_list|()
operator|<<
name|Item
block|;
return|return
name|Printer
operator|.
name|getStream
argument_list|()
return|;
block|}
name|enum
name|class
name|PDB_ColorItem
block|{
name|None
operator|,
name|Address
operator|,
name|Type
operator|,
name|Keyword
operator|,
name|Offset
operator|,
name|Identifier
operator|,
name|Path
operator|,
name|SectionHeader
operator|,
name|LiteralValue
operator|,
name|Register
operator|,
block|}
empty_stmt|;
name|class
name|WithColor
block|{
name|public
label|:
name|WithColor
argument_list|(
argument|LinePrinter&P
argument_list|,
argument|PDB_ColorItem C
argument_list|)
empty_stmt|;
operator|~
name|WithColor
argument_list|()
expr_stmt|;
name|raw_ostream
modifier|&
name|get
parameter_list|()
block|{
return|return
name|OS
return|;
block|}
name|private
label|:
name|void
name|applyColor
parameter_list|(
name|PDB_ColorItem
name|C
parameter_list|)
function_decl|;
name|raw_ostream
modifier|&
name|OS
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

