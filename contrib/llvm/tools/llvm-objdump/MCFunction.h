begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MCFunction.h ------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the data structures to hold a CFG reconstructed from
end_comment

begin_comment
comment|// machine code.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_OBJECTDUMP_MCFUNCTION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_OBJECTDUMP_MCFUNCTION_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInst.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCDisassembler
decl_stmt|;
name|class
name|MCInstrAnalysis
decl_stmt|;
name|class
name|MemoryObject
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|/// MCDecodedInst - Small container to hold an MCInst and associated info like
comment|/// address and size.
struct|struct
name|MCDecodedInst
block|{
name|uint64_t
name|Address
decl_stmt|;
name|uint64_t
name|Size
decl_stmt|;
name|MCInst
name|Inst
decl_stmt|;
name|MCDecodedInst
argument_list|()
block|{}
name|MCDecodedInst
argument_list|(
argument|uint64_t Address
argument_list|,
argument|uint64_t Size
argument_list|,
argument|MCInst Inst
argument_list|)
block|:
name|Address
argument_list|(
name|Address
argument_list|)
operator|,
name|Size
argument_list|(
name|Size
argument_list|)
operator|,
name|Inst
argument_list|(
argument|Inst
argument_list|)
block|{}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|MCDecodedInst
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Address
operator|<
name|RHS
operator|.
name|Address
return|;
block|}
block|}
struct|;
comment|/// MCBasicBlock - Consists of multiple MCDecodedInsts and a list of successing
comment|/// MCBasicBlocks.
name|class
name|MCBasicBlock
block|{
name|std
operator|::
name|vector
operator|<
name|MCDecodedInst
operator|>
name|Insts
expr_stmt|;
typedef|typedef
name|DenseSet
operator|<
name|uint64_t
operator|>
name|SetTy
expr_stmt|;
name|SetTy
name|Succs
decl_stmt|;
name|public
label|:
name|ArrayRef
operator|<
name|MCDecodedInst
operator|>
name|getInsts
argument_list|()
specifier|const
block|{
return|return
name|Insts
return|;
block|}
typedef|typedef
name|SetTy
operator|::
name|const_iterator
name|succ_iterator
expr_stmt|;
name|succ_iterator
name|succ_begin
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|begin
argument_list|()
return|;
block|}
name|succ_iterator
name|succ_end
argument_list|()
specifier|const
block|{
return|return
name|Succs
operator|.
name|end
argument_list|()
return|;
block|}
name|bool
name|contains
argument_list|(
name|uint64_t
name|Addr
argument_list|)
decl|const
block|{
return|return
name|Succs
operator|.
name|count
argument_list|(
name|Addr
argument_list|)
return|;
block|}
name|void
name|addInst
parameter_list|(
specifier|const
name|MCDecodedInst
modifier|&
name|Inst
parameter_list|)
block|{
name|Insts
operator|.
name|push_back
argument_list|(
name|Inst
argument_list|)
expr_stmt|;
block|}
name|void
name|addSucc
parameter_list|(
name|uint64_t
name|Addr
parameter_list|)
block|{
name|Succs
operator|.
name|insert
argument_list|(
name|Addr
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|MCBasicBlock
operator|&
name|RHS
operator|)
specifier|const
block|{
return|return
name|Insts
operator|.
name|size
argument_list|()
operator|<
name|RHS
operator|.
name|Insts
operator|.
name|size
argument_list|()
return|;
block|}
block|}
empty_stmt|;
comment|/// MCFunction - Represents a named function in machine code, containing
comment|/// multiple MCBasicBlocks.
name|class
name|MCFunction
block|{
specifier|const
name|StringRef
name|Name
decl_stmt|;
comment|// Keep BBs sorted by address.
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
name|uint64_t
operator|,
name|MCBasicBlock
operator|>
expr|>
name|MapTy
expr_stmt|;
name|MapTy
name|Blocks
decl_stmt|;
name|public
label|:
name|MCFunction
argument_list|(
argument|StringRef Name
argument_list|)
block|:
name|Name
argument_list|(
argument|Name
argument_list|)
block|{}
comment|// Create an MCFunction from a region of binary machine code.
specifier|static
name|MCFunction
name|createFunctionFromMC
argument_list|(
name|StringRef
name|Name
argument_list|,
specifier|const
name|MCDisassembler
operator|*
name|DisAsm
argument_list|,
specifier|const
name|MemoryObject
operator|&
name|Region
argument_list|,
name|uint64_t
name|Start
argument_list|,
name|uint64_t
name|End
argument_list|,
specifier|const
name|MCInstrAnalysis
operator|*
name|Ana
argument_list|,
name|raw_ostream
operator|&
name|DebugOut
argument_list|,
name|SmallVectorImpl
operator|<
name|uint64_t
operator|>
operator|&
name|Calls
argument_list|)
decl_stmt|;
typedef|typedef
name|MapTy
operator|::
name|const_iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|Blocks
operator|.
name|end
argument_list|()
return|;
block|}
name|StringRef
name|getName
argument_list|()
specifier|const
block|{
return|return
name|Name
return|;
block|}
name|MCBasicBlock
modifier|&
name|addBlock
parameter_list|(
name|uint64_t
name|Address
parameter_list|,
specifier|const
name|MCBasicBlock
modifier|&
name|BB
parameter_list|)
block|{
name|Blocks
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|Address
argument_list|,
name|BB
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|Blocks
operator|.
name|back
argument_list|()
operator|.
name|second
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

