begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- OrcLazyJIT.h - Basic Orc-based JIT for lazy execution --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Simple Orc-based JIT. Uses the compile-on-demand layer to break up and
end_comment

begin_comment
comment|// lazily compile modules.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TOOLS_LLI_ORCLAZYJIT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TOOLS_LLI_ORCLAZYJIT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/CompileOnDemandLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/CompileUtils.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/ExecutionUtils.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/IRCompileLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/IRTransformLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/Orc/ObjectLinkingLayer.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/RTDyldMemoryManager.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|OrcLazyJIT
block|{
name|public
label|:
typedef|typedef
name|orc
operator|::
name|JITCompileCallbackManager
name|CompileCallbackMgr
expr_stmt|;
typedef|typedef
name|orc
operator|::
name|ObjectLinkingLayer
operator|<
operator|>
name|ObjLayerT
expr_stmt|;
typedef|typedef
name|orc
operator|::
name|IRCompileLayer
operator|<
name|ObjLayerT
operator|>
name|CompileLayerT
expr_stmt|;
typedef|typedef
name|std
operator|::
name|function
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
operator|(
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
operator|)
operator|>
name|TransformFtor
expr_stmt|;
typedef|typedef
name|orc
operator|::
name|IRTransformLayer
operator|<
name|CompileLayerT
operator|,
name|TransformFtor
operator|>
name|IRDumpLayerT
expr_stmt|;
typedef|typedef
name|orc
operator|::
name|CompileOnDemandLayer
operator|<
name|IRDumpLayerT
operator|,
name|CompileCallbackMgr
operator|>
name|CODLayerT
expr_stmt|;
typedef|typedef
name|CODLayerT
operator|::
name|IndirectStubsManagerBuilderT
name|IndirectStubsManagerBuilder
expr_stmt|;
typedef|typedef
name|CODLayerT
operator|::
name|ModuleSetHandleT
name|ModuleHandleT
expr_stmt|;
name|OrcLazyJIT
argument_list|(
argument|std::unique_ptr<TargetMachine> TM
argument_list|,
argument|std::unique_ptr<CompileCallbackMgr> CCMgr
argument_list|,
argument|IndirectStubsManagerBuilder IndirectStubsMgrBuilder
argument_list|,
argument|bool InlineStubs
argument_list|)
block|:
name|TM
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|TM
argument_list|)
argument_list|)
operator|,
name|DL
argument_list|(
name|this
operator|->
name|TM
operator|->
name|createDataLayout
argument_list|()
argument_list|)
operator|,
name|CCMgr
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|CCMgr
argument_list|)
argument_list|)
operator|,
name|ObjectLayer
argument_list|()
operator|,
name|CompileLayer
argument_list|(
name|ObjectLayer
argument_list|,
name|orc
operator|::
name|SimpleCompiler
argument_list|(
operator|*
name|this
operator|->
name|TM
argument_list|)
argument_list|)
operator|,
name|IRDumpLayer
argument_list|(
name|CompileLayer
argument_list|,
name|createDebugDumper
argument_list|()
argument_list|)
operator|,
name|CODLayer
argument_list|(
name|IRDumpLayer
argument_list|,
name|extractSingleFunction
argument_list|,
operator|*
name|this
operator|->
name|CCMgr
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|IndirectStubsMgrBuilder
argument_list|)
argument_list|,
name|InlineStubs
argument_list|)
operator|,
name|CXXRuntimeOverrides
argument_list|(
argument|[this](const std::string&S) { return mangle(S); }
argument_list|)
block|{}
operator|~
name|OrcLazyJIT
argument_list|()
block|{
comment|// Run any destructors registered with __cxa_atexit.
name|CXXRuntimeOverrides
operator|.
name|runDestructors
argument_list|()
block|;
comment|// Run any IR destructors.
for|for
control|(
name|auto
operator|&
name|DtorRunner
operator|:
name|IRStaticDestructorRunners
control|)
name|DtorRunner
operator|.
name|runViaLayer
argument_list|(
name|CODLayer
argument_list|)
expr_stmt|;
block|}
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|CompileCallbackMgr
operator|>
name|createCompileCallbackMgr
argument_list|(
argument|Triple T
argument_list|)
expr_stmt|;
specifier|static
name|IndirectStubsManagerBuilder
name|createIndirectStubsMgrBuilder
parameter_list|(
name|Triple
name|T
parameter_list|)
function_decl|;
name|ModuleHandleT
name|addModule
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
name|M
argument_list|)
block|{
comment|// Attach a data-layout if one isn't already present.
if|if
condition|(
name|M
operator|->
name|getDataLayout
argument_list|()
operator|.
name|isDefault
argument_list|()
condition|)
name|M
operator|->
name|setDataLayout
argument_list|(
name|DL
argument_list|)
expr_stmt|;
comment|// Record the static constructors and destructors. We have to do this before
comment|// we hand over ownership of the module to the JIT.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|CtorNames
operator|,
name|DtorNames
expr_stmt|;
for|for
control|(
name|auto
name|Ctor
range|:
name|orc
operator|::
name|getConstructors
argument_list|(
operator|*
name|M
argument_list|)
control|)
name|CtorNames
operator|.
name|push_back
argument_list|(
name|mangle
argument_list|(
name|Ctor
operator|.
name|Func
operator|->
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
name|Dtor
range|:
name|orc
operator|::
name|getDestructors
argument_list|(
operator|*
name|M
argument_list|)
control|)
name|DtorNames
operator|.
name|push_back
argument_list|(
name|mangle
argument_list|(
name|Dtor
operator|.
name|Func
operator|->
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Symbol resolution order:
comment|//   1) Search the JIT symbols.
comment|//   2) Check for C++ runtime overrides.
comment|//   3) Search the host process (LLI)'s symbol table.
name|std
operator|::
name|shared_ptr
operator|<
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|>
name|Resolver
operator|=
name|orc
operator|::
name|createLambdaResolver
argument_list|(
index|[
name|this
index|]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
if|if
condition|(
name|auto
name|Sym
init|=
name|CODLayer
operator|.
name|findSymbol
argument_list|(
name|Name
argument_list|,
name|true
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Sym
operator|.
name|getAddress
argument_list|()
argument_list|,
name|Sym
operator|.
name|getFlags
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|auto
name|Sym
init|=
name|CXXRuntimeOverrides
operator|.
name|searchOverrides
argument_list|(
name|Name
argument_list|)
condition|)
return|return
name|Sym
return|;
if|if
condition|(
name|auto
name|Addr
init|=
name|RTDyldMemoryManager
operator|::
name|getSymbolAddressInProcess
argument_list|(
name|Name
argument_list|)
condition|)
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|Addr
argument_list|,
name|JITSymbolFlags
operator|::
name|Exported
argument_list|)
return|;
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
operator|,
index|[]
operator|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
operator|)
block|{
return|return
name|RuntimeDyld
operator|::
name|SymbolInfo
argument_list|(
name|nullptr
argument_list|)
return|;
block|}
block|)
decl_stmt|;
comment|// Add the module to the JIT.
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>>
name|S
expr_stmt|;
name|S
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|M
argument_list|)
argument_list|)
expr_stmt|;
name|auto
name|H
init|=
name|CODLayer
operator|.
name|addModuleSet
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|S
argument_list|)
argument_list|,
name|llvm
operator|::
name|make_unique
operator|<
name|SectionMemoryManager
operator|>
operator|(
operator|)
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|Resolver
argument_list|)
argument_list|)
decl_stmt|;
comment|// Run the static constructors, and save the static destructor runner for
comment|// execution when the JIT is torn down.
name|orc
operator|::
name|CtorDtorRunner
operator|<
name|CODLayerT
operator|>
name|CtorRunner
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|CtorNames
argument_list|)
argument_list|,
name|H
argument_list|)
expr_stmt|;
name|CtorRunner
operator|.
name|runViaLayer
argument_list|(
name|CODLayer
argument_list|)
expr_stmt|;
name|IRStaticDestructorRunners
operator|.
name|emplace_back
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|DtorNames
argument_list|)
argument_list|,
name|H
argument_list|)
expr_stmt|;
return|return
name|H
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|orc
operator|::
name|JITSymbol
name|findSymbol
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
return|return
name|CODLayer
operator|.
name|findSymbol
argument_list|(
name|mangle
argument_list|(
name|Name
argument_list|)
argument_list|,
name|true
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|orc
operator|::
name|JITSymbol
name|findSymbolIn
argument_list|(
argument|ModuleHandleT H
argument_list|,
argument|const std::string&Name
argument_list|)
block|{
return|return
name|CODLayer
operator|.
name|findSymbolIn
argument_list|(
name|H
argument_list|,
name|mangle
argument_list|(
name|Name
argument_list|)
argument_list|,
name|true
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|string
name|mangle
argument_list|(
argument|const std::string&Name
argument_list|)
block|{
name|std
operator|::
name|string
name|MangledName
block|;
block|{
name|raw_string_ostream
name|MangledNameStream
argument_list|(
name|MangledName
argument_list|)
block|;
name|Mangler
operator|::
name|getNameWithPrefix
argument_list|(
name|MangledNameStream
argument_list|,
name|Name
argument_list|,
name|DL
argument_list|)
block|;     }
return|return
name|MangledName
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|set
operator|<
name|Function
operator|*
operator|>
name|extractSingleFunction
argument_list|(
argument|Function&F
argument_list|)
block|{
name|std
operator|::
name|set
operator|<
name|Function
operator|*
operator|>
name|Partition
block|;
name|Partition
operator|.
name|insert
argument_list|(
operator|&
name|F
argument_list|)
block|;
return|return
name|Partition
return|;
block|}
end_expr_stmt

begin_function_decl
specifier|static
name|TransformFtor
name|createDebugDumper
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|TargetMachine
operator|>
name|TM
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|DataLayout
name|DL
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|SectionMemoryManager
name|CCMgrMemMgr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|CompileCallbackMgr
operator|>
name|CCMgr
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ObjLayerT
name|ObjectLayer
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompileLayerT
name|CompileLayer
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|IRDumpLayerT
name|IRDumpLayer
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CODLayerT
name|CODLayer
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|orc
operator|::
name|LocalCXXRuntimeOverrides
name|CXXRuntimeOverrides
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|orc
operator|::
name|CtorDtorRunner
operator|<
name|CODLayerT
operator|>>
name|IRStaticDestructorRunners
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|};
name|int
name|runOrcLazyJIT
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|Module
operator|>
name|M
argument_list|,
name|int
name|ArgC
argument_list|,
name|char
operator|*
name|ArgV
index|[]
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

