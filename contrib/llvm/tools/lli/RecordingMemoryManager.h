begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- RecordingMemoryManager.h - LLI MCJIT recording memory manager ------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This memory manager allocates local storage and keeps a record of each
end_comment

begin_comment
comment|// allocation. Iterators are provided for all data and code allocations.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|RECORDINGMEMORYMANAGER_H
end_ifndef

begin_define
define|#
directive|define
name|RECORDINGMEMORYMANAGER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ExecutionEngine/JITMemoryManager.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Memory.h"
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RecordingMemoryManager
range|:
name|public
name|JITMemoryManager
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|sys
operator|::
name|MemoryBlock
operator|,
name|unsigned
operator|>
name|Allocation
expr_stmt|;
name|private
operator|:
name|SmallVector
operator|<
name|Allocation
block|,
literal|16
operator|>
name|AllocatedDataMem
decl_stmt|;
name|SmallVector
operator|<
name|Allocation
operator|,
literal|16
operator|>
name|AllocatedCodeMem
expr_stmt|;
name|public
label|:
name|RecordingMemoryManager
argument_list|()
block|{}
name|virtual
operator|~
name|RecordingMemoryManager
argument_list|()
block|{}
typedef|typedef
name|SmallVectorImpl
operator|<
name|Allocation
operator|>
operator|::
name|const_iterator
name|const_data_iterator
expr_stmt|;
typedef|typedef
name|SmallVectorImpl
operator|<
name|Allocation
operator|>
operator|::
name|const_iterator
name|const_code_iterator
expr_stmt|;
name|const_data_iterator
name|data_begin
argument_list|()
specifier|const
block|{
return|return
name|AllocatedDataMem
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_data_iterator
name|data_end
argument_list|()
specifier|const
block|{
return|return
name|AllocatedDataMem
operator|.
name|end
argument_list|()
return|;
block|}
name|const_code_iterator
name|code_begin
argument_list|()
specifier|const
block|{
return|return
name|AllocatedCodeMem
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_code_iterator
name|code_end
argument_list|()
specifier|const
block|{
return|return
name|AllocatedCodeMem
operator|.
name|end
argument_list|()
return|;
block|}
name|uint8_t
modifier|*
name|allocateCodeSection
parameter_list|(
name|uintptr_t
name|Size
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|SectionID
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|allocateDataSection
parameter_list|(
name|uintptr_t
name|Size
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|SectionID
parameter_list|)
function_decl|;
name|void
modifier|*
name|getPointerToNamedFunction
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Name
argument_list|,
name|bool
name|AbortOnFailure
operator|=
name|true
argument_list|)
decl_stmt|;
comment|// The following obsolete JITMemoryManager calls are stubbed out for
comment|// this model.
name|void
name|setMemoryWritable
parameter_list|()
function_decl|;
name|void
name|setMemoryExecutable
parameter_list|()
function_decl|;
name|void
name|setPoisonMemory
parameter_list|(
name|bool
name|poison
parameter_list|)
function_decl|;
name|void
name|AllocateGOT
parameter_list|()
function_decl|;
name|uint8_t
operator|*
name|getGOTBase
argument_list|()
specifier|const
expr_stmt|;
name|uint8_t
modifier|*
name|startFunctionBody
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|,
name|uintptr_t
modifier|&
name|ActualSize
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|allocateStub
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|F
parameter_list|,
name|unsigned
name|StubSize
parameter_list|,
name|unsigned
name|Alignment
parameter_list|)
function_decl|;
name|void
name|endFunctionBody
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|,
name|uint8_t
modifier|*
name|FunctionStart
parameter_list|,
name|uint8_t
modifier|*
name|FunctionEnd
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|allocateSpace
parameter_list|(
name|intptr_t
name|Size
parameter_list|,
name|unsigned
name|Alignment
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|allocateGlobal
parameter_list|(
name|uintptr_t
name|Size
parameter_list|,
name|unsigned
name|Alignment
parameter_list|)
function_decl|;
name|void
name|deallocateFunctionBody
parameter_list|(
name|void
modifier|*
name|Body
parameter_list|)
function_decl|;
name|uint8_t
modifier|*
name|startExceptionTable
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|,
name|uintptr_t
modifier|&
name|ActualSize
parameter_list|)
function_decl|;
name|void
name|endExceptionTable
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|,
name|uint8_t
modifier|*
name|TableStart
parameter_list|,
name|uint8_t
modifier|*
name|TableEnd
parameter_list|,
name|uint8_t
modifier|*
name|FrameRegister
parameter_list|)
function_decl|;
name|void
name|deallocateExceptionTable
parameter_list|(
name|void
modifier|*
name|ET
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

