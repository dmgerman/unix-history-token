begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DiagnosticManager.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_DiagnosticManager_h
end_ifndef

begin_define
define|#
directive|define
name|lldb_DiagnosticManager_h
end_define

begin_include
include|#
directive|include
file|"lldb/lldb-defines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-types.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
enum|enum
name|DiagnosticOrigin
block|{
name|eDiagnosticOriginUnknown
init|=
literal|0
block|,
name|eDiagnosticOriginLLDB
block|,
name|eDiagnosticOriginClang
block|,
name|eDiagnosticOriginGo
block|,
name|eDiagnosticOriginSwift
block|,
name|eDiagnosticOriginLLVM
block|}
enum|;
enum|enum
name|DiagnosticSeverity
block|{
name|eDiagnosticSeverityError
block|,
name|eDiagnosticSeverityWarning
block|,
name|eDiagnosticSeverityRemark
block|}
enum|;
specifier|const
name|uint32_t
name|LLDB_INVALID_COMPILER_ID
init|=
name|UINT32_MAX
decl_stmt|;
name|class
name|Diagnostic
block|{
name|friend
name|class
name|DiagnosticManager
decl_stmt|;
name|public
label|:
name|DiagnosticOrigin
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|m_origin
return|;
block|}
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|Diagnostic
modifier|*
name|diag
parameter_list|)
block|{
name|DiagnosticOrigin
name|kind
init|=
name|diag
operator|->
name|getKind
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|eDiagnosticOriginUnknown
case|:
case|case
name|eDiagnosticOriginLLDB
case|:
case|case
name|eDiagnosticOriginGo
case|:
case|case
name|eDiagnosticOriginLLVM
case|:
return|return
name|true
return|;
case|case
name|eDiagnosticOriginClang
case|:
case|case
name|eDiagnosticOriginSwift
case|:
return|return
name|false
return|;
block|}
block|}
name|Diagnostic
argument_list|(
argument|llvm::StringRef message
argument_list|,
argument|DiagnosticSeverity severity
argument_list|,
argument|DiagnosticOrigin origin
argument_list|,
argument|uint32_t compiler_id
argument_list|)
block|:
name|m_message
argument_list|(
name|message
argument_list|)
operator|,
name|m_severity
argument_list|(
name|severity
argument_list|)
operator|,
name|m_origin
argument_list|(
name|origin
argument_list|)
operator|,
name|m_compiler_id
argument_list|(
argument|compiler_id
argument_list|)
block|{}
name|Diagnostic
argument_list|(
specifier|const
name|Diagnostic
operator|&
name|rhs
argument_list|)
operator|:
name|m_message
argument_list|(
name|rhs
operator|.
name|m_message
argument_list|)
operator|,
name|m_severity
argument_list|(
name|rhs
operator|.
name|m_severity
argument_list|)
operator|,
name|m_origin
argument_list|(
name|rhs
operator|.
name|m_origin
argument_list|)
operator|,
name|m_compiler_id
argument_list|(
argument|rhs.m_compiler_id
argument_list|)
block|{}
name|virtual
operator|~
name|Diagnostic
argument_list|()
operator|=
expr|default
expr_stmt|;
name|virtual
name|bool
name|HasFixIts
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|DiagnosticSeverity
name|GetSeverity
argument_list|()
specifier|const
block|{
return|return
name|m_severity
return|;
block|}
name|uint32_t
name|GetCompilerID
argument_list|()
specifier|const
block|{
return|return
name|m_compiler_id
return|;
block|}
name|llvm
operator|::
name|StringRef
name|GetMessage
argument_list|()
specifier|const
block|{
return|return
name|m_message
return|;
block|}
name|void
name|AppendMessage
argument_list|(
name|llvm
operator|::
name|StringRef
name|message
argument_list|,
name|bool
name|precede_with_newline
operator|=
name|true
argument_list|)
block|{
if|if
condition|(
name|precede_with_newline
condition|)
name|m_message
operator|.
name|push_back
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|m_message
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
name|protected
label|:
name|std
operator|::
name|string
name|m_message
expr_stmt|;
name|DiagnosticSeverity
name|m_severity
decl_stmt|;
name|DiagnosticOrigin
name|m_origin
decl_stmt|;
name|uint32_t
name|m_compiler_id
decl_stmt|;
comment|// Compiler-specific diagnostic ID
block|}
empty_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Diagnostic
operator|*
operator|>
name|DiagnosticList
expr_stmt|;
name|class
name|DiagnosticManager
block|{
name|public
label|:
name|void
name|Clear
parameter_list|()
block|{
name|m_diagnostics
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_fixed_expression
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// The diagnostic manager holds a list of diagnostics, which are owned by the
comment|// manager.
specifier|const
name|DiagnosticList
modifier|&
name|Diagnostics
parameter_list|()
block|{
return|return
name|m_diagnostics
return|;
block|}
operator|~
name|DiagnosticManager
argument_list|()
block|{
for|for
control|(
name|Diagnostic
modifier|*
name|diag
range|:
name|m_diagnostics
control|)
block|{
name|delete
name|diag
decl_stmt|;
block|}
block|}
name|bool
name|HasFixIts
argument_list|()
block|{
for|for
control|(
name|Diagnostic
modifier|*
name|diag
range|:
name|m_diagnostics
control|)
block|{
if|if
condition|(
name|diag
operator|->
name|HasFixIts
argument_list|()
condition|)
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|void
name|AddDiagnostic
argument_list|(
name|llvm
operator|::
name|StringRef
name|message
argument_list|,
name|DiagnosticSeverity
name|severity
argument_list|,
name|DiagnosticOrigin
name|origin
argument_list|,
name|uint32_t
name|compiler_id
operator|=
name|LLDB_INVALID_COMPILER_ID
argument_list|)
block|{
name|m_diagnostics
operator|.
name|push_back
argument_list|(
argument|new Diagnostic(message, severity, origin, compiler_id)
argument_list|)
expr_stmt|;
block|}
name|void
name|AddDiagnostic
parameter_list|(
name|Diagnostic
modifier|*
name|diagnostic
parameter_list|)
block|{
name|m_diagnostics
operator|.
name|push_back
argument_list|(
name|diagnostic
argument_list|)
expr_stmt|;
block|}
name|void
name|CopyDiagnostics
parameter_list|(
name|DiagnosticManager
modifier|&
name|otherDiagnostics
parameter_list|)
function_decl|;
name|size_t
name|Printf
parameter_list|(
name|DiagnosticSeverity
name|severity
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(format
parameter_list|(
name|printf
parameter_list|,
function_decl|3
operator|,
function_decl|4
block|)
decl_stmt|)
block|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|PutString
argument_list|(
name|DiagnosticSeverity
name|severity
argument_list|,
name|llvm
operator|::
name|StringRef
name|str
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|AppendMessageToDiagnostic
argument_list|(
name|llvm
operator|::
name|StringRef
name|str
argument_list|)
block|{
if|if
condition|(
operator|!
name|m_diagnostics
operator|.
name|empty
argument_list|()
condition|)
block|{
name|m_diagnostics
operator|.
name|back
argument_list|()
operator|->
name|AppendMessage
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// Returns a string containing errors in this format:
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// "error: error text\n
end_comment

begin_comment
comment|// warning: warning text\n
end_comment

begin_comment
comment|// remark text\n"
end_comment

begin_expr_stmt
name|std
operator|::
name|string
name|GetString
argument_list|(
argument|char separator =
literal|'\n'
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|void
name|Dump
parameter_list|(
name|Log
modifier|*
name|log
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|std
operator|::
name|string
operator|&
name|GetFixedExpression
argument_list|()
block|{
return|return
name|m_fixed_expression
return|;
block|}
end_expr_stmt

begin_comment
comment|// Moves fixed_expression to the internal storage.
end_comment

begin_decl_stmt
name|void
name|SetFixedExpression
argument_list|(
name|std
operator|::
name|string
name|fixed_expression
argument_list|)
block|{
name|m_fixed_expression
operator|=
name|std
operator|::
name|move
argument_list|(
name|fixed_expression
argument_list|)
expr_stmt|;
name|fixed_expression
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|DiagnosticList
name|m_diagnostics
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_fixed_expression
expr_stmt|;
end_expr_stmt

begin_endif
unit|}; }
endif|#
directive|endif
end_endif

begin_comment
comment|/* lldb_DiagnosticManager_h */
end_comment

end_unit

