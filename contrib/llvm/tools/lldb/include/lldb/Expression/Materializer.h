begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Materializer.h ------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Materializer_h
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Materializer_h
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Expression/IRMemoryMap.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/TaggedASTType.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/StackFrame.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private-types.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|Materializer
block|{
name|public
label|:
name|Materializer
argument_list|()
expr_stmt|;
operator|~
name|Materializer
argument_list|()
expr_stmt|;
name|class
name|Dematerializer
block|{
name|public
label|:
name|Dematerializer
argument_list|()
operator|:
name|m_materializer
argument_list|(
name|nullptr
argument_list|)
operator|,
name|m_map
argument_list|(
name|nullptr
argument_list|)
operator|,
name|m_process_address
argument_list|(
argument|LLDB_INVALID_ADDRESS
argument_list|)
block|{}
operator|~
name|Dematerializer
argument_list|()
block|{
name|Wipe
argument_list|()
block|; }
name|void
name|Dematerialize
argument_list|(
argument|Error&err
argument_list|,
argument|lldb::addr_t frame_top
argument_list|,
argument|lldb::addr_t frame_bottom
argument_list|)
expr_stmt|;
name|void
name|Wipe
parameter_list|()
function_decl|;
name|bool
name|IsValid
parameter_list|()
block|{
return|return
name|m_materializer
operator|&&
name|m_map
operator|&&
operator|(
name|m_process_address
operator|!=
name|LLDB_INVALID_ADDRESS
operator|)
return|;
block|}
name|private
label|:
name|friend
name|class
name|Materializer
decl_stmt|;
name|Dematerializer
argument_list|(
argument|Materializer&materializer
argument_list|,
argument|lldb::StackFrameSP&frame_sp
argument_list|,
argument|IRMemoryMap&map
argument_list|,
argument|lldb::addr_t process_address
argument_list|)
block|:
name|m_materializer
argument_list|(
operator|&
name|materializer
argument_list|)
operator|,
name|m_map
argument_list|(
operator|&
name|map
argument_list|)
operator|,
name|m_process_address
argument_list|(
argument|process_address
argument_list|)
block|{
if|if
condition|(
name|frame_sp
condition|)
block|{
name|m_thread_wp
operator|=
name|frame_sp
operator|->
name|GetThread
argument_list|()
expr_stmt|;
name|m_stack_id
operator|=
name|frame_sp
operator|->
name|GetStackID
argument_list|()
expr_stmt|;
block|}
block|}
name|Materializer
operator|*
name|m_materializer
expr_stmt|;
name|lldb
operator|::
name|ThreadWP
name|m_thread_wp
expr_stmt|;
name|StackID
name|m_stack_id
decl_stmt|;
name|IRMemoryMap
modifier|*
name|m_map
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|m_process_address
expr_stmt|;
block|}
empty_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Dematerializer
operator|>
name|DematerializerSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|weak_ptr
operator|<
name|Dematerializer
operator|>
name|DematerializerWP
expr_stmt|;
name|DematerializerSP
name|Materialize
argument_list|(
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame_sp
argument_list|,
name|IRMemoryMap
operator|&
name|map
argument_list|,
name|lldb
operator|::
name|addr_t
name|process_address
argument_list|,
name|Error
operator|&
name|err
argument_list|)
decl_stmt|;
name|class
name|PersistentVariableDelegate
block|{
name|public
label|:
name|virtual
operator|~
name|PersistentVariableDelegate
argument_list|()
expr_stmt|;
name|virtual
name|ConstString
name|GetName
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|DidDematerialize
argument_list|(
name|lldb
operator|::
name|ExpressionVariableSP
operator|&
name|variable
argument_list|)
init|=
literal|0
decl_stmt|;
block|}
empty_stmt|;
name|uint32_t
name|AddPersistentVariable
argument_list|(
name|lldb
operator|::
name|ExpressionVariableSP
operator|&
name|persistent_variable_sp
argument_list|,
name|PersistentVariableDelegate
operator|*
name|delegate
argument_list|,
name|Error
operator|&
name|err
argument_list|)
decl_stmt|;
name|uint32_t
name|AddVariable
argument_list|(
name|lldb
operator|::
name|VariableSP
operator|&
name|variable_sp
argument_list|,
name|Error
operator|&
name|err
argument_list|)
decl_stmt|;
name|uint32_t
name|AddResultVariable
parameter_list|(
specifier|const
name|CompilerType
modifier|&
name|type
parameter_list|,
name|bool
name|is_lvalue
parameter_list|,
name|bool
name|keep_in_memory
parameter_list|,
name|PersistentVariableDelegate
modifier|*
name|delegate
parameter_list|,
name|Error
modifier|&
name|err
parameter_list|)
function_decl|;
name|uint32_t
name|AddSymbol
parameter_list|(
specifier|const
name|Symbol
modifier|&
name|symbol_sp
parameter_list|,
name|Error
modifier|&
name|err
parameter_list|)
function_decl|;
name|uint32_t
name|AddRegister
parameter_list|(
specifier|const
name|RegisterInfo
modifier|&
name|register_info
parameter_list|,
name|Error
modifier|&
name|err
parameter_list|)
function_decl|;
name|uint32_t
name|GetStructAlignment
parameter_list|()
block|{
return|return
name|m_struct_alignment
return|;
block|}
name|uint32_t
name|GetStructByteSize
parameter_list|()
block|{
return|return
name|m_current_offset
return|;
block|}
name|class
name|Entity
block|{
name|public
label|:
name|Entity
argument_list|()
operator|:
name|m_alignment
argument_list|(
literal|1
argument_list|)
operator|,
name|m_size
argument_list|(
literal|0
argument_list|)
operator|,
name|m_offset
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
operator|~
name|Entity
argument_list|()
operator|=
expr|default
expr_stmt|;
name|virtual
name|void
name|Materialize
argument_list|(
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame_sp
argument_list|,
name|IRMemoryMap
operator|&
name|map
argument_list|,
name|lldb
operator|::
name|addr_t
name|process_address
argument_list|,
name|Error
operator|&
name|err
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|Dematerialize
argument_list|(
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame_sp
argument_list|,
name|IRMemoryMap
operator|&
name|map
argument_list|,
name|lldb
operator|::
name|addr_t
name|process_address
argument_list|,
name|lldb
operator|::
name|addr_t
name|frame_top
argument_list|,
name|lldb
operator|::
name|addr_t
name|frame_bottom
argument_list|,
name|Error
operator|&
name|err
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|DumpToLog
argument_list|(
name|IRMemoryMap
operator|&
name|map
argument_list|,
name|lldb
operator|::
name|addr_t
name|process_address
argument_list|,
name|Log
operator|*
name|log
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|void
name|Wipe
argument_list|(
name|IRMemoryMap
operator|&
name|map
argument_list|,
name|lldb
operator|::
name|addr_t
name|process_address
argument_list|)
init|=
literal|0
decl_stmt|;
name|uint32_t
name|GetAlignment
parameter_list|()
block|{
return|return
name|m_alignment
return|;
block|}
name|uint32_t
name|GetSize
parameter_list|()
block|{
return|return
name|m_size
return|;
block|}
name|uint32_t
name|GetOffset
parameter_list|()
block|{
return|return
name|m_offset
return|;
block|}
name|void
name|SetOffset
parameter_list|(
name|uint32_t
name|offset
parameter_list|)
block|{
name|m_offset
operator|=
name|offset
expr_stmt|;
block|}
name|protected
label|:
name|void
name|SetSizeAndAlignmentFromType
parameter_list|(
name|CompilerType
modifier|&
name|type
parameter_list|)
function_decl|;
name|uint32_t
name|m_alignment
decl_stmt|;
name|uint32_t
name|m_size
decl_stmt|;
name|uint32_t
name|m_offset
decl_stmt|;
block|}
empty_stmt|;
name|private
label|:
name|uint32_t
name|AddStructMember
parameter_list|(
name|Entity
modifier|&
name|entity
parameter_list|)
function_decl|;
typedef|typedef
name|std
operator|::
name|unique_ptr
operator|<
name|Entity
operator|>
name|EntityUP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|EntityUP
operator|>
name|EntityVector
expr_stmt|;
name|DematerializerWP
name|m_dematerializer_wp
decl_stmt|;
name|EntityVector
name|m_entities
decl_stmt|;
name|uint32_t
name|m_current_offset
decl_stmt|;
name|uint32_t
name|m_struct_alignment
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_Materializer_h
end_comment

end_unit

