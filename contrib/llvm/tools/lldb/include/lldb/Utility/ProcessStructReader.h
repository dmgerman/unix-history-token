begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------------------ProcessStructReader.h ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|utility_ProcessStructReader_h_
end_ifndef

begin_define
define|#
directive|define
name|utility_ProcessStructReader_h_
end_define

begin_include
include|#
directive|include
file|"lldb/lldb-defines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-types.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/DataExtractor.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/ClangASTType.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/Process.h"
end_include

begin_include
include|#
directive|include
file|<initializer_list>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ProcessStructReader
block|{
name|protected
label|:
struct|struct
name|FieldImpl
block|{
name|ClangASTType
name|type
decl_stmt|;
name|size_t
name|offset
decl_stmt|;
name|size_t
name|size
decl_stmt|;
block|}
struct|;
name|std
operator|::
name|map
operator|<
name|ConstString
operator|,
name|FieldImpl
operator|>
name|m_fields
expr_stmt|;
name|DataExtractor
name|m_data
decl_stmt|;
name|lldb
operator|::
name|ByteOrder
name|m_byte_order
expr_stmt|;
name|size_t
name|m_addr_byte_size
decl_stmt|;
name|public
label|:
name|ProcessStructReader
argument_list|(
argument|Process *process
argument_list|,
argument|lldb::addr_t base_addr
argument_list|,
argument|ClangASTType struct_type
argument_list|)
block|{
if|if
condition|(
operator|!
name|process
condition|)
return|return;
if|if
condition|(
name|base_addr
operator|==
literal|0
operator|||
name|base_addr
operator|==
name|LLDB_INVALID_ADDRESS
condition|)
return|return;
name|m_byte_order
operator|=
name|process
operator|->
name|GetByteOrder
argument_list|()
expr_stmt|;
name|m_addr_byte_size
operator|=
name|process
operator|->
name|GetAddressByteSize
argument_list|()
expr_stmt|;
for|for
control|(
name|size_t
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|struct_type
operator|.
name|GetNumFields
argument_list|()
condition|;
name|idx
operator|++
control|)
block|{
name|std
operator|::
name|string
name|name
expr_stmt|;
name|uint64_t
name|bit_offset
decl_stmt|;
name|uint32_t
name|bitfield_bit_size
decl_stmt|;
name|bool
name|is_bitfield
decl_stmt|;
name|ClangASTType
name|field_type
init|=
name|struct_type
operator|.
name|GetFieldAtIndex
argument_list|(
name|idx
argument_list|,
name|name
argument_list|,
operator|&
name|bit_offset
argument_list|,
operator|&
name|bitfield_bit_size
argument_list|,
operator|&
name|is_bitfield
argument_list|)
decl_stmt|;
comment|// no support for bitfields in here (yet)
if|if
condition|(
name|is_bitfield
condition|)
return|return;
name|auto
name|size
init|=
name|field_type
operator|.
name|GetByteSize
argument_list|()
decl_stmt|;
comment|// no support for things larger than a uint64_t (yet)
if|if
condition|(
name|size
operator|>
literal|8
condition|)
return|return;
name|ConstString
name|const_name
init|=
name|ConstString
argument_list|(
name|name
operator|.
name|c_str
argument_list|()
argument_list|)
decl_stmt|;
name|size_t
name|byte_index
init|=
name|static_cast
operator|<
name|size_t
operator|>
operator|(
name|bit_offset
operator|/
literal|8
operator|)
decl_stmt|;
name|m_fields
index|[
name|const_name
index|]
operator|=
name|FieldImpl
block|{
name|field_type
block|,
name|byte_index
block|,
name|static_cast
operator|<
name|size_t
operator|>
operator|(
name|size
operator|)
block|}
expr_stmt|;
block|}
name|size_t
name|total_size
init|=
name|struct_type
operator|.
name|GetByteSize
argument_list|()
decl_stmt|;
name|lldb
operator|::
name|DataBufferSP
name|buffer_sp
argument_list|(
argument|new DataBufferHeap(total_size,
literal|0
argument|)
argument_list|)
expr_stmt|;
name|Error
name|error
decl_stmt|;
name|process
operator|->
name|ReadMemoryFromInferior
argument_list|(
name|base_addr
argument_list|,
name|buffer_sp
operator|->
name|GetBytes
argument_list|()
argument_list|,
name|total_size
argument_list|,
name|error
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|.
name|Fail
argument_list|()
condition|)
return|return;
name|m_data
operator|=
name|DataExtractor
argument_list|(
name|buffer_sp
argument_list|,
name|m_byte_order
argument_list|,
name|m_addr_byte_size
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|typename
name|RetType
operator|>
name|RetType
name|GetField
argument_list|(
argument|ConstString name
argument_list|,
argument|RetType fail_value = RetType()
argument_list|)
block|{
name|auto
name|iter
operator|=
name|m_fields
operator|.
name|find
argument_list|(
name|name
argument_list|)
block|,
name|end
operator|=
name|m_fields
operator|.
name|end
argument_list|()
block|;
if|if
condition|(
name|iter
operator|==
name|end
condition|)
return|return
name|fail_value
return|;
name|auto
name|size
operator|=
name|iter
operator|->
name|second
operator|.
name|size
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|RetType
argument_list|)
operator|<
name|size
condition|)
return|return
name|fail_value
return|;
name|lldb
operator|::
name|offset_t
name|offset
operator|=
name|iter
operator|->
name|second
operator|.
name|offset
expr_stmt|;
if|if
condition|(
name|offset
operator|+
name|size
operator|>
name|m_data
operator|.
name|GetByteSize
argument_list|()
condition|)
return|return
name|fail_value
return|;
return|return
call|(
name|RetType
call|)
argument_list|(
name|m_data
operator|.
name|GetMaxU64
argument_list|(
operator|&
name|offset
argument_list|,
name|size
argument_list|)
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// utility_ProcessStructReader_h_
end_comment

end_unit

