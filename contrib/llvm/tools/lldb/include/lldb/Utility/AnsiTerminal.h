begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------------------AnsiTerminal.h ------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_define
define|#
directive|define
name|ANSI_FG_COLOR_BLACK
value|30
end_define

begin_define
define|#
directive|define
name|ANSI_FG_COLOR_RED
value|31
end_define

begin_define
define|#
directive|define
name|ANSI_FG_COLOR_GREEN
value|32
end_define

begin_define
define|#
directive|define
name|ANSI_FG_COLOR_YELLOW
value|33
end_define

begin_define
define|#
directive|define
name|ANSI_FG_COLOR_BLUE
value|34
end_define

begin_define
define|#
directive|define
name|ANSI_FG_COLOR_PURPLE
value|35
end_define

begin_define
define|#
directive|define
name|ANSI_FG_COLOR_CYAN
value|36
end_define

begin_define
define|#
directive|define
name|ANSI_FG_COLOR_WHITE
value|37
end_define

begin_define
define|#
directive|define
name|ANSI_BG_COLOR_BLACK
value|40
end_define

begin_define
define|#
directive|define
name|ANSI_BG_COLOR_RED
value|41
end_define

begin_define
define|#
directive|define
name|ANSI_BG_COLOR_GREEN
value|42
end_define

begin_define
define|#
directive|define
name|ANSI_BG_COLOR_YELLOW
value|43
end_define

begin_define
define|#
directive|define
name|ANSI_BG_COLOR_BLUE
value|44
end_define

begin_define
define|#
directive|define
name|ANSI_BG_COLOR_PURPLE
value|45
end_define

begin_define
define|#
directive|define
name|ANSI_BG_COLOR_CYAN
value|46
end_define

begin_define
define|#
directive|define
name|ANSI_BG_COLOR_WHITE
value|47
end_define

begin_define
define|#
directive|define
name|ANSI_SPECIAL_FRAMED
value|51
end_define

begin_define
define|#
directive|define
name|ANSI_SPECIAL_ENCIRCLED
value|52
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_NORMAL
value|0
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_BOLD
value|1
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_FAINT
value|2
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_ITALIC
value|3
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_UNDERLINE
value|4
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_SLOW_BLINK
value|5
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_FAST_BLINK
value|6
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_IMAGE_NEGATIVE
value|7
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_CONCEAL
value|8
end_define

begin_define
define|#
directive|define
name|ANSI_CTRL_CROSSED_OUT
value|9
end_define

begin_define
define|#
directive|define
name|ANSI_ESC_START
value|"\033["
end_define

begin_define
define|#
directive|define
name|ANSI_ESC_END
value|"m"
end_define

begin_define
define|#
directive|define
name|ANSI_STR
parameter_list|(
name|s
parameter_list|)
value|#s
end_define

begin_define
define|#
directive|define
name|ANSI_DEF_STR
parameter_list|(
name|s
parameter_list|)
value|ANSI_STR(s)
end_define

begin_define
define|#
directive|define
name|ANSI_ESCAPE1
parameter_list|(
name|s
parameter_list|)
value|ANSI_ESC_START ANSI_DEF_STR(s) ANSI_ESC_END
end_define

begin_define
define|#
directive|define
name|ANSI_1_CTRL
parameter_list|(
name|ctrl1
parameter_list|)
value|"\033["##ctrl1 ANSI_ESC_END
end_define

begin_define
define|#
directive|define
name|ANSI_2_CTRL
parameter_list|(
name|ctrl1
parameter_list|,
name|ctrl2
parameter_list|)
value|"\033["##ctrl1";"##ctrl2 ANSI_ESC_END
end_define

begin_decl_stmt
name|namespace
name|lldb_utility
block|{
name|namespace
name|ansi
block|{
specifier|inline
name|std
operator|::
name|string
name|FormatAnsiTerminalCodes
argument_list|(
argument|const char *format
argument_list|,
argument|bool do_color = true
argument_list|)
block|{
comment|// Convert "${ansi.XXX}" tokens to ansi values or clear them if do_color is false.
specifier|static
specifier|const
expr|struct
block|{
specifier|const
name|char
operator|*
name|name
block|;
specifier|const
name|char
operator|*
name|value
block|;             }
name|g_color_tokens
index|[]
operator|=
block|{
define|#
directive|define
name|_TO_STR2
parameter_list|(
name|_val
parameter_list|)
value|#_val
define|#
directive|define
name|_TO_STR
parameter_list|(
name|_val
parameter_list|)
value|_TO_STR2(_val)
block|{
literal|"fg.black}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_FG_COLOR_BLACK
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"fg.red}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_FG_COLOR_RED
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"fg.green}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_FG_COLOR_GREEN
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"fg.yellow}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_FG_COLOR_YELLOW
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"fg.blue}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_FG_COLOR_BLUE
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"fg.purple}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_FG_COLOR_PURPLE
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"fg.cyan}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_FG_COLOR_CYAN
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"fg.white}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_FG_COLOR_WHITE
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bg.black}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_BG_COLOR_BLACK
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bg.red}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_BG_COLOR_RED
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bg.green}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_BG_COLOR_GREEN
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bg.yellow}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_BG_COLOR_YELLOW
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bg.blue}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_BG_COLOR_BLUE
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bg.purple}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_BG_COLOR_PURPLE
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bg.cyan}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_BG_COLOR_CYAN
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bg.white}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_BG_COLOR_WHITE
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"normal}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_NORMAL
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"bold}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_BOLD
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"faint}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_FAINT
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"italic}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_ITALIC
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"underline}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_UNDERLINE
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"slow-blink}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_SLOW_BLINK
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"fast-blink}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_FAST_BLINK
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"negative}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_IMAGE_NEGATIVE
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"conceal}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_CONCEAL
argument_list|)
name|ANSI_ESC_END
block|}
block|,
block|{
literal|"crossed-out}"
block|,
name|ANSI_ESC_START
name|_TO_STR
argument_list|(
argument|ANSI_CTRL_CROSSED_OUT
argument_list|)
name|ANSI_ESC_END
block|}
block|,
undef|#
directive|undef
name|_TO_STR
undef|#
directive|undef
name|_TO_STR2
block|}
block|;
specifier|static
specifier|const
name|char
name|tok_hdr
index|[]
operator|=
literal|"${ansi."
block|;
name|std
operator|::
name|string
name|fmt
block|;
for|for
control|(
specifier|const
name|char
modifier|*
name|p
init|=
name|format
init|;
operator|*
name|p
condition|;
operator|++
name|p
control|)
block|{
specifier|const
name|char
modifier|*
name|tok_start
init|=
name|strstr
argument_list|(
name|p
argument_list|,
name|tok_hdr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tok_start
condition|)
block|{
name|fmt
operator|.
name|append
argument_list|(
name|p
argument_list|,
name|strlen
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|fmt
operator|.
name|append
argument_list|(
name|p
argument_list|,
name|tok_start
operator|-
name|p
argument_list|)
expr_stmt|;
name|p
operator|=
name|tok_start
expr_stmt|;
specifier|const
name|char
modifier|*
name|tok_str
init|=
name|tok_start
operator|+
sizeof|sizeof
argument_list|(
name|tok_hdr
argument_list|)
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|g_color_tokens
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|g_color_tokens
index|[
literal|0
index|]
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|strncmp
argument_list|(
name|tok_str
argument_list|,
name|g_color_tokens
index|[
name|i
index|]
operator|.
name|name
argument_list|,
name|strlen
argument_list|(
name|g_color_tokens
index|[
name|i
index|]
operator|.
name|name
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|do_color
condition|)
name|fmt
operator|.
name|append
argument_list|(
name|g_color_tokens
index|[
name|i
index|]
operator|.
name|value
argument_list|)
expr_stmt|;
name|p
operator|=
name|tok_str
operator|+
name|strlen
argument_list|(
name|g_color_tokens
index|[
name|i
index|]
operator|.
name|name
argument_list|)
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|fmt
return|;
block|}
block|}
block|}
end_decl_stmt

end_unit

