begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- StringExtractor.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|utility_StringExtractor_h_
end_ifndef

begin_define
define|#
directive|define
name|utility_StringExtractor_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_decl_stmt
name|class
name|StringExtractor
block|{
name|public
label|:
enum|enum
block|{
name|BigEndian
init|=
literal|0
block|,
name|LittleEndian
init|=
literal|1
block|}
enum|;
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|StringExtractor
argument_list|()
expr_stmt|;
name|StringExtractor
argument_list|(
argument|llvm::StringRef packet_str
argument_list|)
empty_stmt|;
name|StringExtractor
argument_list|(
specifier|const
name|char
operator|*
name|packet_cstr
argument_list|)
expr_stmt|;
name|StringExtractor
argument_list|(
specifier|const
name|StringExtractor
operator|&
name|rhs
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|StringExtractor
argument_list|()
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// Operators
comment|//------------------------------------------------------------------
specifier|const
name|StringExtractor
modifier|&
name|operator
init|=
operator|(
specifier|const
name|StringExtractor
operator|&
name|rhs
operator|)
decl_stmt|;
name|void
name|Reset
argument_list|(
name|llvm
operator|::
name|StringRef
name|str
argument_list|)
block|{
name|m_packet
operator|=
name|str
expr_stmt|;
name|m_index
operator|=
literal|0
expr_stmt|;
block|}
comment|// Returns true if the file position is still valid for the data
comment|// contained in this string extractor object.
name|bool
name|IsGood
argument_list|()
specifier|const
block|{
return|return
name|m_index
operator|!=
name|UINT64_MAX
return|;
block|}
name|uint64_t
name|GetFilePos
argument_list|()
specifier|const
block|{
return|return
name|m_index
return|;
block|}
name|void
name|SetFilePos
parameter_list|(
name|uint32_t
name|idx
parameter_list|)
block|{
name|m_index
operator|=
name|idx
expr_stmt|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|m_packet
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_index
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|SkipSpaces
parameter_list|()
function_decl|;
name|std
operator|::
name|string
operator|&
name|GetStringRef
argument_list|()
block|{
return|return
name|m_packet
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|GetStringRef
argument_list|()
specifier|const
block|{
return|return
name|m_packet
return|;
block|}
name|bool
name|Empty
parameter_list|()
block|{
return|return
name|m_packet
operator|.
name|empty
argument_list|()
return|;
block|}
name|size_t
name|GetBytesLeft
parameter_list|()
block|{
if|if
condition|(
name|m_index
operator|<
name|m_packet
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_packet
operator|.
name|size
argument_list|()
operator|-
name|m_index
return|;
return|return
literal|0
return|;
block|}
name|char
name|GetChar
parameter_list|(
name|char
name|fail_value
init|=
literal|'\0'
parameter_list|)
function_decl|;
name|char
name|PeekChar
parameter_list|(
name|char
name|fail_value
init|=
literal|'\0'
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|cstr
init|=
name|Peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|cstr
condition|)
return|return
name|cstr
index|[
literal|0
index|]
return|;
return|return
name|fail_value
return|;
block|}
name|int
name|DecodeHexU8
parameter_list|()
function_decl|;
name|uint8_t
name|GetHexU8
parameter_list|(
name|uint8_t
name|fail_value
init|=
literal|0
parameter_list|,
name|bool
name|set_eof_on_fail
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|GetHexU8Ex
parameter_list|(
name|uint8_t
modifier|&
name|ch
parameter_list|,
name|bool
name|set_eof_on_fail
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|GetNameColonValue
argument_list|(
name|llvm
operator|::
name|StringRef
operator|&
name|name
argument_list|,
name|llvm
operator|::
name|StringRef
operator|&
name|value
argument_list|)
decl_stmt|;
name|int32_t
name|GetS32
parameter_list|(
name|int32_t
name|fail_value
parameter_list|,
name|int
name|base
init|=
literal|0
parameter_list|)
function_decl|;
name|uint32_t
name|GetU32
parameter_list|(
name|uint32_t
name|fail_value
parameter_list|,
name|int
name|base
init|=
literal|0
parameter_list|)
function_decl|;
name|int64_t
name|GetS64
parameter_list|(
name|int64_t
name|fail_value
parameter_list|,
name|int
name|base
init|=
literal|0
parameter_list|)
function_decl|;
name|uint64_t
name|GetU64
parameter_list|(
name|uint64_t
name|fail_value
parameter_list|,
name|int
name|base
init|=
literal|0
parameter_list|)
function_decl|;
name|uint32_t
name|GetHexMaxU32
parameter_list|(
name|bool
name|little_endian
parameter_list|,
name|uint32_t
name|fail_value
parameter_list|)
function_decl|;
name|uint64_t
name|GetHexMaxU64
parameter_list|(
name|bool
name|little_endian
parameter_list|,
name|uint64_t
name|fail_value
parameter_list|)
function_decl|;
name|size_t
name|GetHexBytes
argument_list|(
name|llvm
operator|::
name|MutableArrayRef
operator|<
name|uint8_t
operator|>
name|dest
argument_list|,
name|uint8_t
name|fail_fill_value
argument_list|)
decl_stmt|;
name|size_t
name|GetHexBytesAvail
argument_list|(
name|llvm
operator|::
name|MutableArrayRef
operator|<
name|uint8_t
operator|>
name|dest
argument_list|)
decl_stmt|;
name|uint64_t
name|GetHexWithFixedSize
parameter_list|(
name|uint32_t
name|byte_size
parameter_list|,
name|bool
name|little_endian
parameter_list|,
name|uint64_t
name|fail_value
parameter_list|)
function_decl|;
name|size_t
name|GetHexByteString
argument_list|(
name|std
operator|::
name|string
operator|&
name|str
argument_list|)
decl_stmt|;
name|size_t
name|GetHexByteStringFixedLength
argument_list|(
name|std
operator|::
name|string
operator|&
name|str
argument_list|,
name|uint32_t
name|nibble_length
argument_list|)
decl_stmt|;
name|size_t
name|GetHexByteStringTerminatedBy
argument_list|(
name|std
operator|::
name|string
operator|&
name|str
argument_list|,
name|char
name|terminator
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|Peek
parameter_list|()
block|{
if|if
condition|(
name|m_index
operator|<
name|m_packet
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_packet
operator|.
name|c_str
argument_list|()
operator|+
name|m_index
return|;
return|return
name|nullptr
return|;
block|}
name|protected
label|:
name|bool
name|fail
parameter_list|()
block|{
name|m_index
operator|=
name|UINT64_MAX
expr_stmt|;
return|return
name|false
return|;
block|}
comment|//------------------------------------------------------------------
comment|// For StringExtractor only
comment|//------------------------------------------------------------------
name|std
operator|::
name|string
name|m_packet
expr_stmt|;
comment|// The string in which to extract data.
name|uint64_t
name|m_index
decl_stmt|;
comment|// When extracting data from a packet, this index
comment|// will march along as things get extracted. If set
comment|// to UINT64_MAX the end of the packet data was
comment|// reached when decoding information
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// utility_StringExtractor_h_
end_comment

end_unit

