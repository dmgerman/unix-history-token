begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===------------------SharedCluster.h --------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|utility_SharedCluster_h_
end_ifndef

begin_define
define|#
directive|define
name|utility_SharedCluster_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Utility/SharingPtr.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Mutex.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|imp
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|shared_ptr_refcount
operator|:
name|public
name|lldb_private
operator|::
name|imp
operator|::
name|shared_count
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Y
operator|>
name|shared_ptr_refcount
argument_list|(
name|Y
operator|*
name|in
argument_list|)
operator|:
name|shared_count
argument_list|(
literal|0
argument_list|)
block|,
name|manager
argument_list|(
argument|in
argument_list|)
block|{}
name|shared_ptr_refcount
argument_list|()
operator|:
name|shared_count
argument_list|(
literal|0
argument_list|)
block|{}
name|virtual
operator|~
name|shared_ptr_refcount
argument_list|()
block|{         }
name|virtual
name|void
name|on_zero_shared
argument_list|()
block|{
name|manager
operator|->
name|DecrementRefCount
argument_list|()
block|;         }
name|private
operator|:
name|T
operator|*
name|manager
block|;     }
expr_stmt|;
block|}
comment|// namespace imp
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ClusterManager
block|{
name|public
operator|:
name|ClusterManager
argument_list|()
operator|:
name|m_objects
argument_list|()
block|,
name|m_external_ref
argument_list|(
literal|0
argument_list|)
block|,
name|m_mutex
argument_list|(
argument|Mutex::eMutexTypeNormal
argument_list|)
block|{}
operator|~
name|ClusterManager
argument_list|()
block|{
name|size_t
name|n_items
operator|=
name|m_objects
operator|.
name|size
argument_list|()
block|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n_items
condition|;
name|i
operator|++
control|)
block|{
name|delete
name|m_objects
index|[
name|i
index|]
decl_stmt|;
block|}
comment|// Decrement refcount should have been called on this ClusterManager,
comment|// and it should have locked the mutex, now we will unlock it before
comment|// we destroy it...
name|m_mutex
operator|.
name|Unlock
argument_list|()
expr_stmt|;
block|}
name|void
name|ManageObject
argument_list|(
argument|T *new_object
argument_list|)
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
block|;
if|if
condition|(
operator|!
name|ContainsObject
argument_list|(
name|new_object
argument_list|)
condition|)
name|m_objects
operator|.
name|push_back
argument_list|(
name|new_object
argument_list|)
expr_stmt|;
block|}
name|typename
name|lldb_private
operator|::
name|SharingPtr
operator|<
name|T
operator|>
name|GetSharedPointer
argument_list|(
argument|T *desired_object
argument_list|)
block|{
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
block|;
name|m_external_ref
operator|++
block|;
name|assert
argument_list|(
name|ContainsObject
argument_list|(
name|desired_object
argument_list|)
argument_list|)
block|;         }
return|return
name|typename
name|lldb_private
operator|::
name|SharingPtr
operator|<
name|T
operator|>
operator|(
name|desired_object
operator|,
name|new
name|imp
operator|::
name|shared_ptr_refcount
operator|<
name|ClusterManager
operator|>
operator|(
name|this
operator|)
operator|)
return|;
block|}
name|private
operator|:
name|bool
name|ContainsObject
argument_list|(
argument|const T *desired_object
argument_list|)
block|{
name|typename
name|std
operator|::
name|vector
operator|<
name|T
operator|*
operator|>
operator|::
name|iterator
name|pos
block|,
name|end
operator|=
name|m_objects
operator|.
name|end
argument_list|()
block|;
name|pos
operator|=
name|std
operator|::
name|find
argument_list|(
name|m_objects
operator|.
name|begin
argument_list|()
argument_list|,
name|end
argument_list|,
name|desired_object
argument_list|)
block|;
return|return
name|pos
operator|!=
name|end
return|;
block|}
name|void
name|DecrementRefCount
argument_list|()
block|{
name|m_mutex
operator|.
name|Lock
argument_list|()
block|;
name|m_external_ref
operator|--
block|;
if|if
condition|(
name|m_external_ref
operator|==
literal|0
condition|)
name|delete
name|this
decl_stmt|;
else|else
name|m_mutex
operator|.
name|Unlock
argument_list|()
expr_stmt|;
block|}
name|friend
name|class
name|imp
operator|::
name|shared_ptr_refcount
operator|<
name|ClusterManager
operator|>
block|;
name|std
operator|::
name|vector
operator|<
name|T
operator|*
operator|>
name|m_objects
block|;
name|int
name|m_external_ref
block|;
name|Mutex
name|m_mutex
block|; }
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// utility_SharedCluster_h_
end_comment

end_unit

