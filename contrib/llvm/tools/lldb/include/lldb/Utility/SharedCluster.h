begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===------------------SharedCluster.h --------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|utility_SharedCluster_h_
end_ifndef

begin_define
define|#
directive|define
name|utility_SharedCluster_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Utility/LLDBAssert.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/SharingPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|imp
block|{
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|shared_ptr_refcount
operator|:
name|public
name|lldb_private
operator|::
name|imp
operator|::
name|shared_count
block|{
name|public
operator|:
name|template
operator|<
name|class
name|Y
operator|>
name|shared_ptr_refcount
argument_list|(
name|Y
operator|*
name|in
argument_list|)
operator|:
name|shared_count
argument_list|(
literal|0
argument_list|)
block|,
name|manager
argument_list|(
argument|in
argument_list|)
block|{}
name|shared_ptr_refcount
argument_list|()
operator|:
name|shared_count
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|shared_ptr_refcount
argument_list|()
name|override
block|{         }
name|void
name|on_zero_shared
argument_list|()
name|override
block|{
name|manager
operator|->
name|DecrementRefCount
argument_list|()
block|;         }
name|private
operator|:
name|T
operator|*
name|manager
block|;     }
expr_stmt|;
block|}
comment|// namespace imp
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ClusterManager
block|{
name|public
operator|:
name|ClusterManager
argument_list|()
operator|:
name|m_objects
argument_list|()
block|,
name|m_external_ref
argument_list|(
literal|0
argument_list|)
block|,
name|m_mutex
argument_list|()
block|{}
operator|~
name|ClusterManager
argument_list|()
block|{
for|for
control|(
name|typename
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|T
operator|*
operator|,
literal|16
operator|>
operator|::
name|iterator
name|pos
operator|=
name|m_objects
operator|.
name|begin
argument_list|()
operator|,
name|end
operator|=
name|m_objects
operator|.
name|end
argument_list|()
init|;
name|pos
operator|!=
name|end
condition|;
operator|++
name|pos
control|)
block|{
name|T
modifier|*
name|object
init|=
operator|*
name|pos
decl_stmt|;
name|delete
name|object
decl_stmt|;
block|}
comment|// Decrement refcount should have been called on this ClusterManager,
comment|// and it should have locked the mutex, now we will unlock it before
comment|// we destroy it...
name|m_mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|void
name|ManageObject
argument_list|(
argument|T *new_object
argument_list|)
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
block|;
name|m_objects
operator|.
name|insert
argument_list|(
name|new_object
argument_list|)
block|;     }
name|typename
name|lldb_private
operator|::
name|SharingPtr
operator|<
name|T
operator|>
name|GetSharedPointer
argument_list|(
argument|T *desired_object
argument_list|)
block|{
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
block|;
name|m_external_ref
operator|++
block|;
if|if
condition|(
literal|0
operator|==
name|m_objects
operator|.
name|count
argument_list|(
name|desired_object
argument_list|)
condition|)
block|{
name|lldbassert
argument_list|(
name|false
operator|&&
literal|"object not found in shared cluster when expected"
argument_list|)
expr_stmt|;
name|desired_object
operator|=
name|nullptr
expr_stmt|;
block|}
block|}
return|return
name|typename
name|lldb_private
operator|::
name|SharingPtr
operator|<
name|T
operator|>
operator|(
name|desired_object
operator|,
name|new
name|imp
operator|::
name|shared_ptr_refcount
operator|<
name|ClusterManager
operator|>
operator|(
name|this
operator|)
operator|)
return|;
block|}
name|private
operator|:
name|void
name|DecrementRefCount
argument_list|()
block|{
name|m_mutex
operator|.
name|lock
argument_list|()
block|;
name|m_external_ref
operator|--
block|;
if|if
condition|(
name|m_external_ref
operator|==
literal|0
condition|)
name|delete
name|this
decl_stmt|;
else|else
name|m_mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|friend
name|class
name|imp
operator|::
name|shared_ptr_refcount
operator|<
name|ClusterManager
operator|>
block|;
name|llvm
operator|::
name|SmallPtrSet
operator|<
name|T
operator|*
block|,
literal|16
operator|>
name|m_objects
block|;
name|int
name|m_external_ref
block|;
name|std
operator|::
name|mutex
name|m_mutex
block|; }
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// utility_SharedCluster_h_
end_comment

end_unit

