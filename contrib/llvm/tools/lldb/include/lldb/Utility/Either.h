begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Either.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Either_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Either_h_
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_decl_stmt
name|namespace
name|lldb_utility
block|{
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
name|class
name|Either
block|{
name|private
operator|:
expr|enum
name|class
name|Selected
block|{
name|One
block|,
name|Two
block|}
block|;
name|Selected
name|m_selected
block|;
expr|union
block|{
name|T1
name|m_t1
block|;
name|T2
name|m_t2
block|;   }
block|;
name|public
operator|:
name|Either
argument_list|(
argument|const T1&t1
argument_list|)
block|{
name|m_t1
operator|=
name|t1
block|;
name|m_selected
operator|=
name|Selected
operator|::
name|One
block|;   }
name|Either
argument_list|(
argument|const T2&t2
argument_list|)
block|{
name|m_t2
operator|=
name|t2
block|;
name|m_selected
operator|=
name|Selected
operator|::
name|Two
block|;   }
name|Either
argument_list|(
argument|const Either<T1
argument_list|,
argument|T2>&rhs
argument_list|)
block|{
switch|switch
condition|(
name|rhs
operator|.
name|m_selected
condition|)
block|{
case|case
name|Selected
operator|::
name|One
case|:
name|m_t1
operator|=
name|rhs
operator|.
name|GetAs
operator|<
name|T1
operator|>
operator|(
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|m_selected
operator|=
name|Selected
operator|::
name|One
expr_stmt|;
break|break;
case|case
name|Selected
operator|::
name|Two
case|:
name|m_t2
operator|=
name|rhs
operator|.
name|GetAs
operator|<
name|T2
operator|>
operator|(
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|m_selected
operator|=
name|Selected
operator|::
name|Two
expr_stmt|;
break|break;
block|}
block|}
name|template
operator|<
name|class
name|X
block|,
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_same
operator|<
name|T1
block|,
name|X
operator|>
operator|::
name|value
operator|>
operator|::
name|type
operator|*
operator|=
name|nullptr
operator|>
name|llvm
operator|::
name|Optional
operator|<
name|T1
operator|>
name|GetAs
argument_list|()
specifier|const
block|{
switch|switch
condition|(
name|m_selected
condition|)
block|{
case|case
name|Selected
operator|::
name|One
case|:
return|return
name|m_t1
return|;
default|default:
return|return
name|llvm
operator|::
name|Optional
operator|<
name|T1
operator|>
operator|(
operator|)
return|;
block|}
block|}
name|template
operator|<
name|class
name|X
block|,
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_same
operator|<
name|T2
block|,
name|X
operator|>
operator|::
name|value
operator|>
operator|::
name|type
operator|*
operator|=
name|nullptr
operator|>
name|llvm
operator|::
name|Optional
operator|<
name|T2
operator|>
name|GetAs
argument_list|()
specifier|const
block|{
switch|switch
condition|(
name|m_selected
condition|)
block|{
case|case
name|Selected
operator|::
name|Two
case|:
return|return
name|m_t2
return|;
default|default:
return|return
name|llvm
operator|::
name|Optional
operator|<
name|T2
operator|>
operator|(
operator|)
return|;
block|}
block|}
name|template
operator|<
name|class
name|ResultType
operator|>
name|ResultType
name|Apply
argument_list|(
argument|std::function<ResultType(T1)> if_T1
argument_list|,
argument|std::function<ResultType(T2)> if_T2
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|m_selected
condition|)
block|{
case|case
name|Selected
operator|::
name|One
case|:
return|return
name|if_T1
argument_list|(
name|m_t1
argument_list|)
return|;
case|case
name|Selected
operator|::
name|Two
case|:
return|return
name|if_T2
argument_list|(
name|m_t2
argument_list|)
return|;
block|}
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|Either
operator|<
name|T1
operator|,
name|T2
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|GetAs
operator|<
name|T1
operator|>
operator|(
operator|)
operator|==
name|rhs
operator|.
name|GetAs
operator|<
name|T1
operator|>
operator|(
operator|)
operator|)
operator|&&
operator|(
name|GetAs
operator|<
name|T2
operator|>
operator|(
operator|)
operator|==
name|rhs
operator|.
name|GetAs
operator|<
name|T2
operator|>
operator|(
operator|)
operator|)
return|;
block|}
name|explicit
name|operator
name|bool
argument_list|()
block|{
switch|switch
condition|(
name|m_selected
condition|)
block|{
case|case
name|Selected
operator|::
name|One
case|:
return|return
operator|(
name|bool
operator|)
name|m_t1
return|;
case|case
name|Selected
operator|::
name|Two
case|:
return|return
operator|(
name|bool
operator|)
name|m_t2
return|;
block|}
block|}
name|Either
operator|<
name|T1
block|,
name|T2
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Either
operator|<
name|T1
operator|,
name|T2
operator|>
operator|&
name|rhs
operator|)
block|{
switch|switch
condition|(
name|rhs
operator|.
name|m_selected
condition|)
block|{
case|case
name|Selected
operator|::
name|One
case|:
name|m_t1
operator|=
name|rhs
operator|.
name|GetAs
operator|<
name|T1
operator|>
operator|(
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|m_selected
operator|=
name|Selected
operator|::
name|One
expr_stmt|;
break|break;
case|case
name|Selected
operator|::
name|Two
case|:
name|m_t2
operator|=
name|rhs
operator|.
name|GetAs
operator|<
name|T2
operator|>
operator|(
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|m_selected
operator|=
name|Selected
operator|::
name|Two
expr_stmt|;
break|break;
block|}
return|return
operator|*
name|this
return|;
block|}
operator|~
name|Either
argument_list|()
block|{
switch|switch
condition|(
name|m_selected
condition|)
block|{
case|case
name|Selected
operator|::
name|One
case|:
name|m_t1
operator|.
name|T1
operator|::
operator|~
name|T1
argument_list|()
expr_stmt|;
break|break;
case|case
name|Selected
operator|::
name|Two
case|:
name|m_t2
operator|.
name|T2
operator|::
operator|~
name|T2
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_utility
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef liblldb_Either_h_
end_comment

end_unit

