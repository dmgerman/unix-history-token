begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------------------SharingPtr.h --------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|utility_SharingPtr_h_
end_ifndef

begin_define
define|#
directive|define
name|utility_SharingPtr_h_
end_define

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_comment
comment|//#define ENABLE_SP_LOGGING 1 // DON'T CHECK THIS LINE IN UNLESS COMMENTED OUT
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|ENABLE_SP_LOGGING
argument_list|)
end_if

begin_extern
extern|extern
literal|"C"
name|void
name|track_sp
parameter_list|(
name|void
modifier|*
name|sp_this
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|long
name|count
parameter_list|)
function_decl|;
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|imp
block|{
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
name|increment
argument_list|(
argument|T& t
argument_list|)
block|{
return|return
name|__sync_add_and_fetch
argument_list|(
operator|&
name|t
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
name|decrement
argument_list|(
argument|T& t
argument_list|)
block|{
return|return
name|__sync_add_and_fetch
argument_list|(
operator|&
name|t
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
name|class
name|shared_count
block|{
name|shared_count
argument_list|(
specifier|const
name|shared_count
operator|&
argument_list|)
expr_stmt|;
name|shared_count
modifier|&
name|operator
init|=
operator|(
specifier|const
name|shared_count
operator|&
operator|)
decl_stmt|;
name|protected
label|:
name|long
name|shared_owners_
decl_stmt|;
name|virtual
operator|~
name|shared_count
argument_list|()
expr_stmt|;
name|private
label|:
name|virtual
name|void
name|on_zero_shared
parameter_list|()
init|=
literal|0
function_decl|;
name|public
label|:
name|explicit
name|shared_count
argument_list|(
argument|long refs =
literal|0
argument_list|)
block|:
name|shared_owners_
argument_list|(
argument|refs
argument_list|)
block|{}
name|void
name|add_shared
parameter_list|()
function_decl|;
name|void
name|release_shared
parameter_list|()
function_decl|;
name|long
name|use_count
argument_list|()
specifier|const
block|{
return|return
name|shared_owners_
operator|+
literal|1
return|;
block|}
block|}
empty_stmt|;
name|template
operator|<
name|class
name|T
operator|>
name|class
name|shared_ptr_pointer
operator|:
name|public
name|shared_count
block|{
name|T
name|data_
block|;
name|public
operator|:
name|shared_ptr_pointer
argument_list|(
argument|T p
argument_list|)
operator|:
name|data_
argument_list|(
argument|p
argument_list|)
block|{}
name|private
operator|:
name|virtual
name|void
name|on_zero_shared
argument_list|()
block|;
comment|// Outlaw copy constructor and assignment operator to keep effictive C++
comment|// warnings down to a minumum
name|shared_ptr_pointer
argument_list|(
specifier|const
name|shared_ptr_pointer
operator|&
argument_list|)
block|;
name|shared_ptr_pointer
operator|&
name|operator
operator|=
operator|(
specifier|const
name|shared_ptr_pointer
operator|&
operator|)
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|T
operator|>
name|void
name|shared_ptr_pointer
operator|<
name|T
operator|>
operator|::
name|on_zero_shared
argument_list|()
block|{
name|delete
name|data_
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|class
name|shared_ptr_emplace
operator|:
name|public
name|shared_count
block|{
name|T
name|data_
block|;
name|public
operator|:
name|shared_ptr_emplace
argument_list|()
operator|:
name|data_
argument_list|()
block|{}
name|template
operator|<
name|class
name|A0
operator|>
name|shared_ptr_emplace
argument_list|(
name|A0
operator|&
name|a0
argument_list|)
operator|:
name|data_
argument_list|(
argument|a0
argument_list|)
block|{}
name|template
operator|<
name|class
name|A0
block|,
name|class
name|A1
operator|>
name|shared_ptr_emplace
argument_list|(
name|A0
operator|&
name|a0
argument_list|,
name|A1
operator|&
name|a1
argument_list|)
operator|:
name|data_
argument_list|(
argument|a0
argument_list|,
argument|a1
argument_list|)
block|{}
name|template
operator|<
name|class
name|A0
block|,
name|class
name|A1
block|,
name|class
name|A2
operator|>
name|shared_ptr_emplace
argument_list|(
name|A0
operator|&
name|a0
argument_list|,
name|A1
operator|&
name|a1
argument_list|,
name|A2
operator|&
name|a2
argument_list|)
operator|:
name|data_
argument_list|(
argument|a0
argument_list|,
argument|a1
argument_list|,
argument|a2
argument_list|)
block|{}
name|template
operator|<
name|class
name|A0
block|,
name|class
name|A1
block|,
name|class
name|A2
block|,
name|class
name|A3
operator|>
name|shared_ptr_emplace
argument_list|(
name|A0
operator|&
name|a0
argument_list|,
name|A1
operator|&
name|a1
argument_list|,
name|A2
operator|&
name|a2
argument_list|,
name|A3
operator|&
name|a3
argument_list|)
operator|:
name|data_
argument_list|(
argument|a0
argument_list|,
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|)
block|{}
name|template
operator|<
name|class
name|A0
block|,
name|class
name|A1
block|,
name|class
name|A2
block|,
name|class
name|A3
block|,
name|class
name|A4
operator|>
name|shared_ptr_emplace
argument_list|(
name|A0
operator|&
name|a0
argument_list|,
name|A1
operator|&
name|a1
argument_list|,
name|A2
operator|&
name|a2
argument_list|,
name|A3
operator|&
name|a3
argument_list|,
name|A4
operator|&
name|a4
argument_list|)
operator|:
name|data_
argument_list|(
argument|a0
argument_list|,
argument|a1
argument_list|,
argument|a2
argument_list|,
argument|a3
argument_list|,
argument|a4
argument_list|)
block|{}
name|private
operator|:
name|virtual
name|void
name|on_zero_shared
argument_list|()
block|;
name|public
operator|:
name|T
operator|*
name|get
argument_list|()
block|{
return|return
operator|&
name|data_
return|;
block|}
expr|}
block|;
name|template
operator|<
name|class
name|T
operator|>
name|void
name|shared_ptr_emplace
operator|<
name|T
operator|>
operator|::
name|on_zero_shared
argument_list|()
block|{ }
block|}
comment|// namespace
name|template
operator|<
name|class
name|T
operator|>
name|class
name|SharingPtr
block|{
name|public
operator|:
typedef|typedef
name|T
name|element_type
typedef|;
name|private
operator|:
name|element_type
operator|*
name|ptr_
expr_stmt|;
name|imp
operator|::
name|shared_count
operator|*
name|cntrl_
expr_stmt|;
struct|struct
name|nat
block|{
name|int
name|for_bool_
decl_stmt|;
block|}
struct|;
name|public
label|:
name|SharingPtr
argument_list|()
expr_stmt|;
name|template
operator|<
name|class
name|Y
operator|>
name|explicit
name|SharingPtr
argument_list|(
name|Y
operator|*
name|p
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|Y
operator|>
name|explicit
name|SharingPtr
argument_list|(
name|Y
operator|*
name|p
argument_list|,
name|imp
operator|::
name|shared_count
operator|*
name|ctrl_block
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|Y
operator|>
name|SharingPtr
argument_list|(
specifier|const
name|SharingPtr
operator|<
name|Y
operator|>
operator|&
name|r
argument_list|,
name|element_type
operator|*
name|p
argument_list|)
expr_stmt|;
name|SharingPtr
argument_list|(
specifier|const
name|SharingPtr
operator|&
name|r
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|Y
operator|>
name|SharingPtr
argument_list|(
specifier|const
name|SharingPtr
operator|<
name|Y
operator|>
operator|&
name|r
argument_list|)
expr_stmt|;
operator|~
name|SharingPtr
argument_list|()
expr_stmt|;
name|SharingPtr
modifier|&
name|operator
init|=
operator|(
specifier|const
name|SharingPtr
operator|&
name|r
operator|)
decl_stmt|;
name|template
operator|<
name|class
name|Y
operator|>
name|SharingPtr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|SharingPtr
operator|<
name|Y
operator|>
operator|&
name|r
operator|)
expr_stmt|;
name|void
name|swap
parameter_list|(
name|SharingPtr
modifier|&
name|r
parameter_list|)
function_decl|;
name|void
name|reset
parameter_list|()
function_decl|;
name|template
operator|<
name|class
name|Y
operator|>
name|void
name|reset
argument_list|(
name|Y
operator|*
name|p
argument_list|)
expr_stmt|;
name|element_type
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|ptr_
return|;
block|}
name|element_type
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|ptr_
return|;
block|}
name|element_type
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|ptr_
return|;
block|}
name|long
name|use_count
argument_list|()
specifier|const
block|{
return|return
name|cntrl_
operator|?
name|cntrl_
operator|->
name|use_count
argument_list|()
operator|:
literal|0
return|;
block|}
name|bool
name|unique
argument_list|()
specifier|const
block|{
return|return
name|use_count
argument_list|()
operator|==
literal|1
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|cntrl_
operator|==
literal|0
return|;
block|}
name|operator
name|nat
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|(
name|nat
operator|*
operator|)
name|get
argument_list|()
return|;
block|}
specifier|static
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|()
expr_stmt|;
name|template
operator|<
name|class
name|A0
operator|>
specifier|static
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
name|A0
operator|&
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|A0
operator|,
name|class
name|A1
operator|>
specifier|static
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
name|A0
operator|&
argument_list|,
name|A1
operator|&
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|>
specifier|static
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
name|A0
operator|&
argument_list|,
name|A1
operator|&
argument_list|,
name|A2
operator|&
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|,
name|class
name|A3
operator|>
specifier|static
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
name|A0
operator|&
argument_list|,
name|A1
operator|&
argument_list|,
name|A2
operator|&
argument_list|,
name|A3
operator|&
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|,
name|class
name|A3
operator|,
name|class
name|A4
operator|>
specifier|static
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
name|A0
operator|&
argument_list|,
name|A1
operator|&
argument_list|,
name|A2
operator|&
argument_list|,
name|A3
operator|&
argument_list|,
name|A4
operator|&
argument_list|)
expr_stmt|;
name|private
label|:
name|template
operator|<
name|class
name|U
operator|>
name|friend
name|class
name|SharingPtr
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|SharingPtr
argument_list|()
operator|:
name|ptr_
argument_list|(
literal|0
argument_list|)
operator|,
name|cntrl_
argument_list|(
literal|0
argument_list|)
block|{ }
name|template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|Y
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|SharingPtr
argument_list|(
name|Y
operator|*
name|p
argument_list|)
operator|:
name|ptr_
argument_list|(
name|p
argument_list|)
operator|,
name|cntrl_
argument_list|(
literal|0
argument_list|)
block|{
name|std
operator|::
name|unique_ptr
operator|<
name|Y
operator|>
name|hold
argument_list|(
name|p
argument_list|)
block|;
typedef|typedef
name|imp
operator|::
name|shared_ptr_pointer
operator|<
name|Y
operator|*
operator|>
name|_CntrlBlk
expr_stmt|;
name|cntrl_
operator|=
name|new
name|_CntrlBlk
argument_list|(
name|p
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|hold
operator|.
name|release
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|Y
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|SharingPtr
argument_list|(
name|Y
operator|*
name|p
argument_list|,
name|imp
operator|::
name|shared_count
operator|*
name|cntrl_block
argument_list|)
operator|:
name|ptr_
argument_list|(
name|p
argument_list|)
operator|,
name|cntrl_
argument_list|(
argument|cntrl_block
argument_list|)
block|{ }
name|template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|Y
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|SharingPtr
argument_list|(
specifier|const
name|SharingPtr
operator|<
name|Y
operator|>
operator|&
name|r
argument_list|,
name|element_type
operator|*
name|p
argument_list|)
operator|:
name|ptr_
argument_list|(
name|p
argument_list|)
operator|,
name|cntrl_
argument_list|(
argument|r.cntrl_
argument_list|)
block|{
if|if
condition|(
name|cntrl_
condition|)
name|cntrl_
operator|->
name|add_shared
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|SharingPtr
argument_list|(
specifier|const
name|SharingPtr
operator|&
name|r
argument_list|)
operator|:
name|ptr_
argument_list|(
name|r
operator|.
name|ptr_
argument_list|)
operator|,
name|cntrl_
argument_list|(
argument|r.cntrl_
argument_list|)
block|{
if|if
condition|(
name|cntrl_
condition|)
name|cntrl_
operator|->
name|add_shared
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|Y
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|SharingPtr
argument_list|(
specifier|const
name|SharingPtr
operator|<
name|Y
operator|>
operator|&
name|r
argument_list|)
operator|:
name|ptr_
argument_list|(
name|r
operator|.
name|ptr_
argument_list|)
operator|,
name|cntrl_
argument_list|(
argument|r.cntrl_
argument_list|)
block|{
if|if
condition|(
name|cntrl_
condition|)
name|cntrl_
operator|->
name|add_shared
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
operator|~
name|SharingPtr
argument_list|()
block|{
if|if
condition|(
name|cntrl_
condition|)
name|cntrl_
operator|->
name|release_shared
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
operator|&
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|SharingPtr
operator|&
name|r
operator|)
block|{
name|SharingPtr
argument_list|(
name|r
argument_list|)
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|Y
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
operator|&
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|SharingPtr
operator|<
name|Y
operator|>
operator|&
name|r
operator|)
block|{
name|SharingPtr
argument_list|(
name|r
argument_list|)
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|swap
argument_list|(
argument|SharingPtr& r
argument_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|ptr_
argument_list|,
name|r
operator|.
name|ptr_
argument_list|)
block|;
name|std
operator|::
name|swap
argument_list|(
name|cntrl_
argument_list|,
name|r
operator|.
name|cntrl_
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|reset
argument_list|()
block|{
name|SharingPtr
argument_list|()
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|Y
operator|>
specifier|inline
name|void
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|reset
argument_list|(
argument|Y* p
argument_list|)
block|{
name|SharingPtr
argument_list|(
name|p
argument_list|)
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|SharingPtr
operator|<
name|T
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|()
block|{
typedef|typedef
name|imp
operator|::
name|shared_ptr_emplace
operator|<
name|T
operator|>
name|CntrlBlk
expr_stmt|;
name|SharingPtr
operator|<
name|T
operator|>
name|r
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|cntrl_
operator|=
name|new
name|CntrlBlk
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|ptr_
operator|=
name|static_cast
operator|<
name|CntrlBlk
operator|*
operator|>
operator|(
name|r
operator|.
name|cntrl_
operator|)
operator|->
name|get
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|A0
operator|>
name|SharingPtr
operator|<
name|T
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
argument|A0& a0
argument_list|)
block|{
typedef|typedef
name|imp
operator|::
name|shared_ptr_emplace
operator|<
name|T
operator|>
name|CntrlBlk
expr_stmt|;
name|SharingPtr
operator|<
name|T
operator|>
name|r
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|cntrl_
operator|=
name|new
name|CntrlBlk
argument_list|(
name|a0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|ptr_
operator|=
name|static_cast
operator|<
name|CntrlBlk
operator|*
operator|>
operator|(
name|r
operator|.
name|cntrl_
operator|)
operator|->
name|get
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|A0
operator|,
name|class
name|A1
operator|>
name|SharingPtr
operator|<
name|T
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
argument|A0& a0
argument_list|,
argument|A1& a1
argument_list|)
block|{
typedef|typedef
name|imp
operator|::
name|shared_ptr_emplace
operator|<
name|T
operator|>
name|CntrlBlk
expr_stmt|;
name|SharingPtr
operator|<
name|T
operator|>
name|r
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|cntrl_
operator|=
name|new
name|CntrlBlk
argument_list|(
name|a0
argument_list|,
name|a1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|ptr_
operator|=
name|static_cast
operator|<
name|CntrlBlk
operator|*
operator|>
operator|(
name|r
operator|.
name|cntrl_
operator|)
operator|->
name|get
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|>
name|SharingPtr
operator|<
name|T
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
argument|A0& a0
argument_list|,
argument|A1& a1
argument_list|,
argument|A2& a2
argument_list|)
block|{
typedef|typedef
name|imp
operator|::
name|shared_ptr_emplace
operator|<
name|T
operator|>
name|CntrlBlk
expr_stmt|;
name|SharingPtr
operator|<
name|T
operator|>
name|r
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|cntrl_
operator|=
name|new
name|CntrlBlk
argument_list|(
name|a0
argument_list|,
name|a1
argument_list|,
name|a2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|ptr_
operator|=
name|static_cast
operator|<
name|CntrlBlk
operator|*
operator|>
operator|(
name|r
operator|.
name|cntrl_
operator|)
operator|->
name|get
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|,
name|class
name|A3
operator|>
name|SharingPtr
operator|<
name|T
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
argument|A0& a0
argument_list|,
argument|A1& a1
argument_list|,
argument|A2& a2
argument_list|,
argument|A3& a3
argument_list|)
block|{
typedef|typedef
name|imp
operator|::
name|shared_ptr_emplace
operator|<
name|T
operator|>
name|CntrlBlk
expr_stmt|;
name|SharingPtr
operator|<
name|T
operator|>
name|r
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|cntrl_
operator|=
name|new
name|CntrlBlk
argument_list|(
name|a0
argument_list|,
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|ptr_
operator|=
name|static_cast
operator|<
name|CntrlBlk
operator|*
operator|>
operator|(
name|r
operator|.
name|cntrl_
operator|)
operator|->
name|get
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|template
operator|<
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|,
name|class
name|A3
operator|,
name|class
name|A4
operator|>
name|SharingPtr
operator|<
name|T
operator|>
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
argument|A0& a0
argument_list|,
argument|A1& a1
argument_list|,
argument|A2& a2
argument_list|,
argument|A3& a3
argument_list|,
argument|A4& a4
argument_list|)
block|{
typedef|typedef
name|imp
operator|::
name|shared_ptr_emplace
operator|<
name|T
operator|>
name|CntrlBlk
expr_stmt|;
name|SharingPtr
operator|<
name|T
operator|>
name|r
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|cntrl_
operator|=
name|new
name|CntrlBlk
argument_list|(
name|a0
argument_list|,
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|r
operator|.
name|ptr_
operator|=
name|static_cast
operator|<
name|CntrlBlk
operator|*
operator|>
operator|(
name|r
operator|.
name|cntrl_
operator|)
operator|->
name|get
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|r
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|()
block|{
return|return
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|A0
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
argument|A0& a0
argument_list|)
block|{
return|return
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
name|a0
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|A0
operator|,
name|class
name|A1
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
argument|A0& a0
argument_list|,
argument|A1& a1
argument_list|)
block|{
return|return
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
name|a0
argument_list|,
name|a1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
argument|A0& a0
argument_list|,
argument|A1& a1
argument_list|,
argument|A2& a2
argument_list|)
block|{
return|return
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
name|a0
argument_list|,
name|a1
argument_list|,
name|a2
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|,
name|class
name|A3
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
argument|A0& a0
argument_list|,
argument|A1& a1
argument_list|,
argument|A2& a2
argument_list|,
argument|A3& a3
argument_list|)
block|{
return|return
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
name|a0
argument_list|,
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|A0
operator|,
name|class
name|A1
operator|,
name|class
name|A2
operator|,
name|class
name|A3
operator|,
name|class
name|A4
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
name|make_shared
argument_list|(
argument|A0& a0
argument_list|,
argument|A1& a1
argument_list|,
argument|A2& a2
argument_list|,
argument|A3& a3
argument_list|,
argument|A4& a4
argument_list|)
block|{
return|return
name|SharingPtr
operator|<
name|T
operator|>
operator|::
name|make_shared
argument_list|(
name|a0
argument_list|,
name|a1
argument_list|,
name|a2
argument_list|,
name|a3
argument_list|,
name|a4
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SharingPtr
operator|<
name|T
operator|>
operator|&
name|__x
operator|,
specifier|const
name|SharingPtr
operator|<
name|U
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|get
argument_list|()
operator|==
name|__y
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|SharingPtr
operator|<
name|T
operator|>
operator|&
name|__x
operator|,
specifier|const
name|SharingPtr
operator|<
name|U
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|==
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|SharingPtr
operator|<
name|T
operator|>
operator|&
name|__x
operator|,
specifier|const
name|SharingPtr
operator|<
name|U
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|get
argument_list|()
operator|<
name|__y
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|SharingPtr<T>& __x
argument_list|,
argument|SharingPtr<T>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|SharingPtr
operator|<
name|T
operator|>
name|static_pointer_cast
argument_list|(
argument|const SharingPtr<U>& r
argument_list|)
block|{
return|return
name|SharingPtr
operator|<
name|T
operator|>
operator|(
name|r
operator|,
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|r
operator|.
name|get
argument_list|()
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
name|SharingPtr
operator|<
name|T
operator|>
name|const_pointer_cast
argument_list|(
argument|const SharingPtr<U>& r
argument_list|)
block|{
return|return
name|SharingPtr
operator|<
name|T
operator|>
operator|(
name|r
operator|,
name|const_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|r
operator|.
name|get
argument_list|()
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|LoggingSharingPtr
operator|:
name|public
name|SharingPtr
operator|<
name|T
operator|>
block|{
typedef|typedef
name|SharingPtr
operator|<
name|T
operator|>
name|base
expr_stmt|;
name|public
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|Callback
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|LoggingSharingPtr
modifier|&
parameter_list|,
name|bool
name|action
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|// action:  false means increment just happened
end_comment

begin_comment
comment|//          true  means decrement is about to happen
end_comment

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|Callback
name|cb_
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|baton_
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|LoggingSharingPtr
argument_list|()
operator|:
name|cb_
argument_list|(
literal|0
argument_list|)
operator|,
name|baton_
argument_list|(
literal|0
argument_list|)
block|{}
name|LoggingSharingPtr
argument_list|(
argument|Callback cb
argument_list|,
argument|void* baton
argument_list|)
operator|:
name|cb_
argument_list|(
name|cb
argument_list|)
operator|,
name|baton_
argument_list|(
argument|baton
argument_list|)
block|{
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Y
operator|>
name|LoggingSharingPtr
argument_list|(
name|Y
operator|*
name|p
argument_list|)
operator|:
name|base
argument_list|(
name|p
argument_list|)
operator|,
name|cb_
argument_list|(
literal|0
argument_list|)
operator|,
name|baton_
argument_list|(
literal|0
argument_list|)
block|{}
name|template
operator|<
name|class
name|Y
operator|>
name|LoggingSharingPtr
argument_list|(
argument|Y* p
argument_list|,
argument|Callback cb
argument_list|,
argument|void* baton
argument_list|)
operator|:
name|base
argument_list|(
name|p
argument_list|)
operator|,
name|cb_
argument_list|(
name|cb
argument_list|)
operator|,
name|baton_
argument_list|(
argument|baton
argument_list|)
block|{
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
operator|~
name|LoggingSharingPtr
argument_list|()
block|{
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|LoggingSharingPtr
argument_list|(
specifier|const
name|LoggingSharingPtr
operator|&
name|p
argument_list|)
operator|:
name|base
argument_list|(
name|p
argument_list|)
operator|,
name|cb_
argument_list|(
name|p
operator|.
name|cb_
argument_list|)
operator|,
name|baton_
argument_list|(
argument|p.baton_
argument_list|)
block|{
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_decl_stmt
name|LoggingSharingPtr
modifier|&
name|operator
init|=
operator|(
specifier|const
name|LoggingSharingPtr
operator|&
name|p
operator|)
block|{
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|base
operator|::
name|operator
operator|=
operator|(
name|p
operator|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|cb_
operator|=
name|p
operator|.
name|cb_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|baton_
operator|=
name|p
operator|.
name|baton_
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|false
argument_list|)
expr_stmt|;
end_if

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_macro
unit|}      void
name|reset
argument_list|()
end_macro

begin_block
block|{
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|base
operator|::
name|reset
argument_list|()
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|template
operator|<
name|class
name|Y
operator|>
name|void
name|reset
argument_list|(
argument|Y* p
argument_list|)
block|{
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|base
operator|::
name|reset
argument_list|(
name|p
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|cb_
condition|)
name|cb_
argument_list|(
name|baton_
argument_list|,
operator|*
name|this
argument_list|,
name|false
argument_list|)
expr_stmt|;
end_if

begin_macro
unit|}      void
name|SetCallback
argument_list|(
argument|Callback cb
argument_list|,
argument|void* baton
argument_list|)
end_macro

begin_block
block|{
name|cb_
operator|=
name|cb
expr_stmt|;
name|baton_
operator|=
name|baton
expr_stmt|;
block|}
end_block

begin_function
name|void
name|ClearCallback
parameter_list|()
block|{
name|cb_
operator|=
literal|0
expr_stmt|;
name|baton_
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|class
name|IntrusiveSharingPtr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ReferenceCountedBase
block|{
name|public
operator|:
name|explicit
name|ReferenceCountedBase
argument_list|()
operator|:
name|shared_owners_
argument_list|(
argument|-
literal|1
argument_list|)
block|{     }
name|void
name|add_shared
argument_list|()
block|;
name|void
name|release_shared
argument_list|()
block|;
name|long
name|use_count
argument_list|()
specifier|const
block|{
return|return
name|shared_owners_
operator|+
literal|1
return|;
block|}
name|protected
operator|:
name|long
name|shared_owners_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|class
name|IntrusiveSharingPtr
operator|<
name|T
operator|>
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|ReferenceCountedBase
argument_list|(
specifier|const
name|ReferenceCountedBase
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ReferenceCountedBase
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ReferenceCountedBase
operator|&
operator|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
name|void
name|lldb_private
operator|::
name|ReferenceCountedBase
operator|<
name|T
operator|>
operator|::
name|add_shared
argument_list|()
block|{
name|imp
operator|::
name|increment
argument_list|(
name|shared_owners_
argument_list|)
block|;     }
name|template
operator|<
name|class
name|T
operator|>
name|void
name|lldb_private
operator|::
name|ReferenceCountedBase
operator|<
name|T
operator|>
operator|::
name|release_shared
argument_list|()
block|{
if|if
condition|(
name|imp
operator|::
name|decrement
argument_list|(
name|shared_owners_
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|delete
name|static_cast
operator|<
name|T
operator|*
operator|>
operator|(
name|this
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ReferenceCountedBaseVirtual
operator|:
name|public
name|imp
operator|::
name|shared_count
block|{
name|public
operator|:
name|explicit
name|ReferenceCountedBaseVirtual
argument_list|()
operator|:
name|imp
operator|::
name|shared_count
argument_list|(
argument|-
literal|1
argument_list|)
block|{     }
name|virtual
operator|~
name|ReferenceCountedBaseVirtual
argument_list|()
block|{     }
name|virtual
name|void
name|on_zero_shared
argument_list|()
block|;      }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|ReferenceCountedBaseVirtual
operator|<
name|T
operator|>
operator|::
name|on_zero_shared
argument_list|()
block|{ }
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|IntrusiveSharingPtr
block|{
name|public
operator|:
typedef|typedef
name|T
name|element_type
typedef|;
name|explicit
name|IntrusiveSharingPtr
argument_list|()
operator|:
name|ptr_
argument_list|(
literal|0
argument_list|)
block|{     }
name|explicit
name|IntrusiveSharingPtr
argument_list|(
name|T
operator|*
name|ptr
argument_list|)
operator|:
name|ptr_
argument_list|(
argument|ptr
argument_list|)
block|{
name|add_shared
argument_list|()
block|;     }
name|IntrusiveSharingPtr
argument_list|(
specifier|const
name|IntrusiveSharingPtr
operator|&
name|rhs
argument_list|)
operator|:
name|ptr_
argument_list|(
argument|rhs.ptr_
argument_list|)
block|{
name|add_shared
argument_list|()
block|;     }
name|template
operator|<
name|class
name|X
operator|>
name|IntrusiveSharingPtr
argument_list|(
specifier|const
name|IntrusiveSharingPtr
operator|<
name|X
operator|>
operator|&
name|rhs
argument_list|)
operator|:
name|ptr_
argument_list|(
argument|rhs.get()
argument_list|)
block|{
name|add_shared
argument_list|()
block|;     }
name|IntrusiveSharingPtr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|IntrusiveSharingPtr
operator|&
name|rhs
operator|)
block|{
name|reset
argument_list|(
name|rhs
operator|.
name|get
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|X
operator|>
name|IntrusiveSharingPtr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|IntrusiveSharingPtr
operator|<
name|X
operator|>
operator|&
name|rhs
operator|)
block|{
name|reset
argument_list|(
name|rhs
operator|.
name|get
argument_list|()
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|IntrusiveSharingPtr
modifier|&
name|operator
init|=
operator|(
name|T
operator|*
name|ptr
operator|)
block|{
name|reset
argument_list|(
name|ptr
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
operator|~
name|IntrusiveSharingPtr
argument_list|()
block|{
name|release_shared
argument_list|()
block|;
if|#
directive|if
name|defined
argument_list|(
name|LLDB_CONFIGURATION_DEBUG
argument_list|)
operator|||
name|defined
argument_list|(
name|LLDB_CONFIGURATION_RELEASE
argument_list|)
comment|// NULL out the pointer in objects which can help with leaks detection.
comment|// We don't enable this for LLDB_CONFIGURATION_BUILD_AND_INTEGRATION or
comment|// when none of the LLDB_CONFIGURATION_XXX macros are defined since
comment|// those would be builds for release. But for debug and release builds
comment|// that are for development, we NULL out the pointers to catch potential
comment|// issues.
name|ptr_
operator|=
name|NULL
block|;
endif|#
directive|endif
comment|// #if defined (LLDB_CONFIGURATION_DEBUG) || defined (LLDB_CONFIGURATION_RELEASE)
block|}
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|T
operator|*
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|T
operator|*
name|get
argument_list|()
specifier|const
block|{
return|return
name|ptr_
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|ptr_
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_function
name|void
name|swap
parameter_list|(
name|IntrusiveSharingPtr
modifier|&
name|rhs
parameter_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|ptr_
argument_list|,
name|rhs
operator|.
name|ptr_
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ENABLE_SP_LOGGING
argument_list|)
name|track_sp
argument_list|(
name|this
argument_list|,
name|ptr_
argument_list|,
name|use_count
argument_list|()
argument_list|)
expr_stmt|;
name|track_sp
argument_list|(
operator|&
name|rhs
argument_list|,
name|rhs
operator|.
name|ptr_
argument_list|,
name|rhs
operator|.
name|use_count
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
name|void
name|reset
parameter_list|(
name|T
modifier|*
name|ptr
init|=
name|NULL
parameter_list|)
block|{
name|IntrusiveSharingPtr
argument_list|(
name|ptr
argument_list|)
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|long
name|use_count
argument_list|()
specifier|const
block|{
if|if
condition|(
name|ptr_
condition|)
return|return
name|ptr_
operator|->
name|use_count
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
literal|0
return|;
end_return

begin_macro
unit|}          bool
name|unique
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|use_count
argument_list|()
operator|==
literal|1
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|element_type
modifier|*
name|ptr_
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|add_shared
parameter_list|()
block|{
if|if
condition|(
name|ptr_
condition|)
block|{
name|ptr_
operator|->
name|add_shared
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ENABLE_SP_LOGGING
argument_list|)
name|track_sp
argument_list|(
name|this
argument_list|,
name|ptr_
argument_list|,
name|ptr_
operator|->
name|use_count
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function

begin_function
name|void
name|release_shared
parameter_list|()
block|{
if|if
condition|(
name|ptr_
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|ENABLE_SP_LOGGING
argument_list|)
name|track_sp
argument_list|(
name|this
argument_list|,
name|NULL
argument_list|,
name|ptr_
operator|->
name|use_count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ptr_
operator|->
name|release_shared
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|IntrusiveSharingPtr
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|IntrusiveSharingPtr
operator|<
name|U
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|get
argument_list|()
operator|==
name|rhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|IntrusiveSharingPtr
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|IntrusiveSharingPtr
operator|<
name|U
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|get
argument_list|()
operator|!=
name|rhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|IntrusiveSharingPtr
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
name|U
operator|*
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|get
argument_list|()
operator|==
name|rhs
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|IntrusiveSharingPtr
operator|<
name|T
operator|>
operator|&
name|lhs
operator|,
name|U
operator|*
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|get
argument_list|()
operator|!=
name|rhs
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|T
operator|*
name|lhs
operator|,
specifier|const
name|IntrusiveSharingPtr
operator|<
name|U
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|==
name|rhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|U
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|T
operator|*
name|lhs
operator|,
specifier|const
name|IntrusiveSharingPtr
operator|<
name|U
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|!=
name|rhs
operator|.
name|get
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// utility_SharingPtr_h_
end_comment

end_unit

