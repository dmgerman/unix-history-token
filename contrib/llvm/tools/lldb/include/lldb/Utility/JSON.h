begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---------------------JSON.h --------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|utility_JSON_h_
end_ifndef

begin_define
define|#
directive|define
name|utility_JSON_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Utility/StringExtractor.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|Stream
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|JSONValue
block|{
name|public
label|:
name|virtual
name|void
name|Write
parameter_list|(
name|Stream
modifier|&
name|s
parameter_list|)
init|=
literal|0
function_decl|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|JSONValue
operator|>
name|SP
expr_stmt|;
name|enum
name|class
name|Kind
block|{
name|String
operator|,
name|Number
operator|,
name|True
operator|,
name|False
operator|,
name|Null
operator|,
name|Object
operator|,
name|Array
block|}
empty_stmt|;
name|JSONValue
argument_list|(
argument|Kind k
argument_list|)
block|:
name|m_kind
argument_list|(
argument|k
argument_list|)
block|{}
name|Kind
name|GetKind
argument_list|()
specifier|const
block|{
return|return
name|m_kind
return|;
block|}
name|virtual
operator|~
name|JSONValue
argument_list|()
operator|=
expr|default
expr_stmt|;
name|private
label|:
specifier|const
name|Kind
name|m_kind
decl_stmt|;
block|}
empty_stmt|;
name|class
name|JSONString
range|:
name|public
name|JSONValue
block|{
name|public
operator|:
name|JSONString
argument_list|()
block|;
name|JSONString
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|)
block|;
name|JSONString
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
block|;
name|JSONString
argument_list|(
specifier|const
name|JSONString
operator|&
name|s
argument_list|)
operator|=
name|delete
block|;
name|JSONString
operator|&
name|operator
operator|=
operator|(
specifier|const
name|JSONString
operator|&
name|s
operator|)
operator|=
name|delete
block|;
name|void
name|Write
argument_list|(
argument|Stream&s
argument_list|)
name|override
block|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|JSONString
operator|>
name|SP
expr_stmt|;
name|std
operator|::
name|string
name|GetData
argument_list|()
block|{
return|return
name|m_data
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const JSONValue *V
argument_list|)
block|{
return|return
name|V
operator|->
name|GetKind
argument_list|()
operator|==
name|JSONValue
operator|::
name|Kind
operator|::
name|String
return|;
block|}
operator|~
name|JSONString
argument_list|()
name|override
operator|=
block|default
decl_stmt|;
name|private
label|:
specifier|static
name|std
operator|::
name|string
name|json_string_quote_metachars
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|m_data
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|JSONNumber
range|:
name|public
name|JSONValue
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|JSONNumber
operator|>
name|SP
expr_stmt|;
comment|// We cretae a constructor for all integer and floating point type with using
comment|// templates and
comment|// SFINAE to avoid having ambiguous overloads because of the implicit type
comment|// promotion. If we
comment|// would have constructors only with int64_t, uint64_t and double types then
comment|// constructing a
comment|// JSONNumber from an int32_t (or any other similar type) would fail to
comment|// compile.
name|template
operator|<
name|typename
name|T
block|,
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_integral
operator|<
name|T
operator|>
operator|::
name|value
operator|&&
name|std
operator|::
name|is_unsigned
operator|<
name|T
operator|>
operator|::
name|value
operator|>
operator|::
name|type
operator|*
operator|=
name|nullptr
operator|>
name|explicit
name|JSONNumber
argument_list|(
argument|T u
argument_list|)
operator|:
name|JSONValue
argument_list|(
name|JSONValue
operator|::
name|Kind
operator|::
name|Number
argument_list|)
block|,
name|m_data_type
argument_list|(
argument|DataType::Unsigned
argument_list|)
block|{
name|m_data
operator|.
name|m_unsigned
operator|=
name|u
block|;   }
name|template
operator|<
name|typename
name|T
decl_stmt|,
name|typename
name|std
decl|::
name|enable_if
decl|<
name|std
decl|::
name|is_integral
decl|<
name|T
decl|>::
name|value
decl|&&
name|std
decl|::
name|is_signed
decl|<
name|T
decl|>::
name|value
decl|>::
name|type
modifier|*
init|=
name|nullptr
operator|>
name|explicit
name|JSONNumber
argument_list|(
argument|T s
argument_list|)
operator|:
name|JSONValue
argument_list|(
name|JSONValue
operator|::
name|Kind
operator|::
name|Number
argument_list|)
decl_stmt|,
name|m_data_type
argument_list|(
name|DataType
operator|::
name|Signed
argument_list|)
block|{
name|m_data
operator|.
name|m_signed
operator|=
name|s
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|,
name|typename
name|std
operator|::
name|enable_if
operator|<
name|std
operator|::
name|is_floating_point
operator|<
name|T
operator|>
operator|::
name|value
operator|>
operator|::
name|type
operator|*
operator|=
name|nullptr
operator|>
name|explicit
name|JSONNumber
argument_list|(
argument|T d
argument_list|)
operator|:
name|JSONValue
argument_list|(
name|JSONValue
operator|::
name|Kind
operator|::
name|Number
argument_list|)
operator|,
name|m_data_type
argument_list|(
argument|DataType::Double
argument_list|)
block|{
name|m_data
operator|.
name|m_double
operator|=
name|d
block|;   }
operator|~
name|JSONNumber
argument_list|()
name|override
operator|=
expr|default
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|JSONNumber
argument_list|(
specifier|const
name|JSONNumber
operator|&
name|s
argument_list|)
operator|=
name|delete
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|JSONNumber
modifier|&
name|operator
init|=
operator|(
specifier|const
name|JSONNumber
operator|&
name|s
operator|)
operator|=
name|delete
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|Write
argument_list|(
name|Stream
operator|&
name|s
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|uint64_t
name|GetAsUnsigned
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|int64_t
name|GetAsSigned
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|double
name|GetAsDouble
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_function
specifier|static
name|bool
name|classof
parameter_list|(
specifier|const
name|JSONValue
modifier|*
name|V
parameter_list|)
block|{
return|return
name|V
operator|->
name|GetKind
argument_list|()
operator|==
name|JSONValue
operator|::
name|Kind
operator|::
name|Number
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|enum
name|class
name|DataType
range|:
name|uint8_t
block|{
name|Unsigned
block|,
name|Signed
block|,
name|Double
block|}
name|m_data_type
decl_stmt|;
end_decl_stmt

begin_union
union|union
block|{
name|uint64_t
name|m_unsigned
decl_stmt|;
name|int64_t
name|m_signed
decl_stmt|;
name|double
name|m_double
decl_stmt|;
block|}
name|m_data
union|;
end_union

begin_decl_stmt
unit|};
name|class
name|JSONTrue
range|:
name|public
name|JSONValue
block|{
name|public
operator|:
name|JSONTrue
argument_list|()
block|;
name|JSONTrue
argument_list|(
specifier|const
name|JSONTrue
operator|&
name|s
argument_list|)
operator|=
name|delete
block|;
name|JSONTrue
operator|&
name|operator
operator|=
operator|(
specifier|const
name|JSONTrue
operator|&
name|s
operator|)
operator|=
name|delete
block|;
name|void
name|Write
argument_list|(
argument|Stream&s
argument_list|)
name|override
block|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|JSONTrue
operator|>
name|SP
expr_stmt|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const JSONValue *V
argument_list|)
block|{
return|return
name|V
operator|->
name|GetKind
argument_list|()
operator|==
name|JSONValue
operator|::
name|Kind
operator|::
name|True
return|;
block|}
operator|~
name|JSONTrue
argument_list|()
name|override
operator|=
block|default
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|JSONFalse
range|:
name|public
name|JSONValue
block|{
name|public
operator|:
name|JSONFalse
argument_list|()
block|;
name|JSONFalse
argument_list|(
specifier|const
name|JSONFalse
operator|&
name|s
argument_list|)
operator|=
name|delete
block|;
name|JSONFalse
operator|&
name|operator
operator|=
operator|(
specifier|const
name|JSONFalse
operator|&
name|s
operator|)
operator|=
name|delete
block|;
name|void
name|Write
argument_list|(
argument|Stream&s
argument_list|)
name|override
block|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|JSONFalse
operator|>
name|SP
expr_stmt|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const JSONValue *V
argument_list|)
block|{
return|return
name|V
operator|->
name|GetKind
argument_list|()
operator|==
name|JSONValue
operator|::
name|Kind
operator|::
name|False
return|;
block|}
operator|~
name|JSONFalse
argument_list|()
name|override
operator|=
block|default
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|JSONNull
range|:
name|public
name|JSONValue
block|{
name|public
operator|:
name|JSONNull
argument_list|()
block|;
name|JSONNull
argument_list|(
specifier|const
name|JSONNull
operator|&
name|s
argument_list|)
operator|=
name|delete
block|;
name|JSONNull
operator|&
name|operator
operator|=
operator|(
specifier|const
name|JSONNull
operator|&
name|s
operator|)
operator|=
name|delete
block|;
name|void
name|Write
argument_list|(
argument|Stream&s
argument_list|)
name|override
block|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|JSONNull
operator|>
name|SP
expr_stmt|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const JSONValue *V
argument_list|)
block|{
return|return
name|V
operator|->
name|GetKind
argument_list|()
operator|==
name|JSONValue
operator|::
name|Kind
operator|::
name|Null
return|;
block|}
operator|~
name|JSONNull
argument_list|()
name|override
operator|=
block|default
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|JSONObject
range|:
name|public
name|JSONValue
block|{
name|public
operator|:
name|JSONObject
argument_list|()
block|;
name|JSONObject
argument_list|(
specifier|const
name|JSONObject
operator|&
name|s
argument_list|)
operator|=
name|delete
block|;
name|JSONObject
operator|&
name|operator
operator|=
operator|(
specifier|const
name|JSONObject
operator|&
name|s
operator|)
operator|=
name|delete
block|;
name|void
name|Write
argument_list|(
argument|Stream&s
argument_list|)
name|override
block|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|JSONObject
operator|>
name|SP
expr_stmt|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const JSONValue *V
argument_list|)
block|{
return|return
name|V
operator|->
name|GetKind
argument_list|()
operator|==
name|JSONValue
operator|::
name|Kind
operator|::
name|Object
return|;
block|}
name|bool
name|SetObject
argument_list|(
argument|const std::string&key
argument_list|,
argument|JSONValue::SP value
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|JSONValue
operator|::
name|SP
name|GetObject
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|key
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|~
name|JSONObject
argument_list|()
name|override
operator|=
expr|default
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|JSONValue
operator|::
name|SP
operator|>
name|Map
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Map
operator|::
name|iterator
name|Iterator
expr_stmt|;
end_typedef

begin_decl_stmt
name|Map
name|m_elements
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|JSONArray
range|:
name|public
name|JSONValue
block|{
name|public
operator|:
name|JSONArray
argument_list|()
block|;
name|JSONArray
argument_list|(
specifier|const
name|JSONArray
operator|&
name|s
argument_list|)
operator|=
name|delete
block|;
name|JSONArray
operator|&
name|operator
operator|=
operator|(
specifier|const
name|JSONArray
operator|&
name|s
operator|)
operator|=
name|delete
block|;
name|void
name|Write
argument_list|(
argument|Stream&s
argument_list|)
name|override
block|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|JSONArray
operator|>
name|SP
expr_stmt|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const JSONValue *V
argument_list|)
block|{
return|return
name|V
operator|->
name|GetKind
argument_list|()
operator|==
name|JSONValue
operator|::
name|Kind
operator|::
name|Array
return|;
block|}
name|private
operator|:
end_decl_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|JSONValue
operator|::
name|SP
operator|>
name|Vector
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Vector
operator|::
name|iterator
name|Iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Vector
operator|::
name|size_type
name|Index
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Vector
operator|::
name|size_type
name|Size
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_decl_stmt
name|bool
name|SetObject
argument_list|(
name|Index
name|i
argument_list|,
name|JSONValue
operator|::
name|SP
name|value
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|AppendObject
argument_list|(
name|JSONValue
operator|::
name|SP
name|value
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|JSONValue
operator|::
name|SP
name|GetObject
argument_list|(
argument|Index i
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|Size
name|GetNumElements
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
operator|~
name|JSONArray
argument_list|()
name|override
operator|=
expr|default
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Vector
name|m_elements
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|JSONParser
range|:
name|public
name|StringExtractor
block|{
name|public
operator|:
expr|enum
name|Token
block|{
name|Invalid
block|,
name|Error
block|,
name|ObjectStart
block|,
name|ObjectEnd
block|,
name|ArrayStart
block|,
name|ArrayEnd
block|,
name|Comma
block|,
name|Colon
block|,
name|String
block|,
name|Integer
block|,
name|Float
block|,
name|True
block|,
name|False
block|,
name|Null
block|,
name|EndOfFile
block|}
block|;
name|JSONParser
argument_list|(
specifier|const
name|char
operator|*
name|cstr
argument_list|)
block|;
name|int
name|GetEscapedChar
argument_list|(
name|bool
operator|&
name|was_escaped
argument_list|)
block|;
name|Token
name|GetToken
argument_list|(
name|std
operator|::
name|string
operator|&
name|value
argument_list|)
block|;
name|JSONValue
operator|::
name|SP
name|ParseJSONValue
argument_list|()
block|;
name|protected
operator|:
name|JSONValue
operator|::
name|SP
name|ParseJSONObject
argument_list|()
block|;
name|JSONValue
operator|::
name|SP
name|ParseJSONArray
argument_list|()
block|; }
decl_stmt|;
end_decl_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// utility_JSON_h_
end_comment

end_unit

