begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ClangASTType.h ------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ClangASTType_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ClangASTType_h_
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ClangForward.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/Type.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|// A class that can carry around a clang ASTContext and a opaque clang
comment|// QualType. A clang::QualType can be easily reconstructed from an
comment|// opaque clang type and often the ASTContext is needed when doing
comment|// various type related tasks, so this class allows both items to travel
comment|// in a single very lightweight class that can be used. There are many
comment|// static equivalents of the member functions that allow the ASTContext
comment|// and the opaque clang QualType to be specified for ease of use and
comment|// to avoid code duplication.
comment|//----------------------------------------------------------------------
name|class
name|ClangASTType
block|{
name|public
label|:
enum|enum
block|{
name|eTypeHasChildren
init|=
operator|(
literal|1u
operator|<<
literal|0
operator|)
block|,
name|eTypeHasValue
init|=
operator|(
literal|1u
operator|<<
literal|1
operator|)
block|,
name|eTypeIsArray
init|=
operator|(
literal|1u
operator|<<
literal|2
operator|)
block|,
name|eTypeIsBlock
init|=
operator|(
literal|1u
operator|<<
literal|3
operator|)
block|,
name|eTypeIsBuiltIn
init|=
operator|(
literal|1u
operator|<<
literal|4
operator|)
block|,
name|eTypeIsClass
init|=
operator|(
literal|1u
operator|<<
literal|5
operator|)
block|,
name|eTypeIsCPlusPlus
init|=
operator|(
literal|1u
operator|<<
literal|6
operator|)
block|,
name|eTypeIsEnumeration
init|=
operator|(
literal|1u
operator|<<
literal|7
operator|)
block|,
name|eTypeIsFuncPrototype
init|=
operator|(
literal|1u
operator|<<
literal|8
operator|)
block|,
name|eTypeIsMember
init|=
operator|(
literal|1u
operator|<<
literal|9
operator|)
block|,
name|eTypeIsObjC
init|=
operator|(
literal|1u
operator|<<
literal|10
operator|)
block|,
name|eTypeIsPointer
init|=
operator|(
literal|1u
operator|<<
literal|11
operator|)
block|,
name|eTypeIsReference
init|=
operator|(
literal|1u
operator|<<
literal|12
operator|)
block|,
name|eTypeIsStructUnion
init|=
operator|(
literal|1u
operator|<<
literal|13
operator|)
block|,
name|eTypeIsTemplate
init|=
operator|(
literal|1u
operator|<<
literal|14
operator|)
block|,
name|eTypeIsTypedef
init|=
operator|(
literal|1u
operator|<<
literal|15
operator|)
block|,
name|eTypeIsVector
init|=
operator|(
literal|1u
operator|<<
literal|16
operator|)
block|,
name|eTypeIsScalar
init|=
operator|(
literal|1u
operator|<<
literal|17
operator|)
block|,
name|eTypeIsInteger
init|=
operator|(
literal|1u
operator|<<
literal|18
operator|)
block|,
name|eTypeIsFloat
init|=
operator|(
literal|1u
operator|<<
literal|19
operator|)
block|,
name|eTypeIsComplex
init|=
operator|(
literal|1u
operator|<<
literal|20
operator|)
block|,
name|eTypeIsSigned
init|=
operator|(
literal|1u
operator|<<
literal|21
operator|)
block|}
enum|;
comment|//----------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//----------------------------------------------------------------------
name|ClangASTType
argument_list|(
argument|clang::ASTContext *ast_context
argument_list|,
argument|lldb::clang_type_t type
argument_list|)
block|:
name|m_type
argument_list|(
name|type
argument_list|)
operator|,
name|m_ast
argument_list|(
argument|ast_context
argument_list|)
block|{     }
name|ClangASTType
argument_list|(
argument|clang::ASTContext *ast_context
argument_list|,
argument|clang::QualType qual_type
argument_list|)
expr_stmt|;
name|ClangASTType
argument_list|(
specifier|const
name|ClangASTType
operator|&
name|rhs
argument_list|)
operator|:
name|m_type
argument_list|(
name|rhs
operator|.
name|m_type
argument_list|)
operator|,
name|m_ast
argument_list|(
argument|rhs.m_ast
argument_list|)
block|{     }
name|ClangASTType
argument_list|()
operator|:
name|m_type
argument_list|(
literal|0
argument_list|)
operator|,
name|m_ast
argument_list|(
literal|0
argument_list|)
block|{     }
operator|~
name|ClangASTType
argument_list|()
expr_stmt|;
comment|//----------------------------------------------------------------------
comment|// Operators
comment|//----------------------------------------------------------------------
specifier|const
name|ClangASTType
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ClangASTType
operator|&
name|rhs
operator|)
block|{
name|m_type
operator|=
name|rhs
operator|.
name|m_type
block|;
name|m_ast
operator|=
name|rhs
operator|.
name|m_ast
block|;
return|return
operator|*
name|this
return|;
block|}
comment|//----------------------------------------------------------------------
comment|// Tests
comment|//----------------------------------------------------------------------
name|explicit
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
name|m_type
operator|!=
name|NULL
operator|&&
name|m_ast
operator|!=
name|NULL
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ClangASTType
operator|&
name|rhs
operator|)
specifier|const
block|{
if|if
condition|(
name|m_ast
operator|==
name|rhs
operator|.
name|m_ast
condition|)
return|return
name|m_type
operator|<
name|rhs
operator|.
name|m_type
return|;
return|return
name|m_ast
operator|<
name|rhs
operator|.
name|m_ast
return|;
block|}
name|bool
name|IsValid
argument_list|()
specifier|const
block|{
return|return
name|m_type
operator|!=
name|NULL
operator|&&
name|m_ast
operator|!=
name|NULL
return|;
block|}
name|bool
name|IsArrayType
argument_list|(
name|ClangASTType
operator|*
name|element_type
argument_list|,
name|uint64_t
operator|*
name|size
argument_list|,
name|bool
operator|*
name|is_incomplete
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsArrayOfScalarType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsAggregateType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsBeingDefined
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsCharType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsCompleteType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsConst
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsCStringType
argument_list|(
name|uint32_t
operator|&
name|length
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsCXXClassType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsDefined
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsFloatingPointType
argument_list|(
name|uint32_t
operator|&
name|count
argument_list|,
name|bool
operator|&
name|is_complex
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsFunctionType
argument_list|(
name|bool
operator|*
name|is_variadic_ptr
operator|=
name|NULL
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|GetNumberOfFunctionArguments
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetFunctionArgumentAtIndex
parameter_list|(
specifier|const
name|size_t
name|index
parameter_list|)
function_decl|;
name|bool
name|IsVariadicFunctionType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsFunctionPointerType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsIntegerType
argument_list|(
name|bool
operator|&
name|is_signed
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsObjCClassType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsObjCClassTypeAndHasIVars
argument_list|(
name|bool
name|check_superclass
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsObjCObjectOrInterfaceType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsObjCObjectPointerType
parameter_list|(
name|ClangASTType
modifier|*
name|target_type
init|=
name|NULL
parameter_list|)
function_decl|;
name|bool
name|IsPolymorphicClass
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsPossibleCPlusPlusDynamicType
argument_list|(
name|ClangASTType
operator|*
name|target_type
operator|=
name|NULL
argument_list|)
decl|const
block|{
return|return
name|IsPossibleDynamicType
argument_list|(
name|target_type
argument_list|,
name|true
argument_list|,
name|false
argument_list|)
return|;
block|}
name|bool
name|IsPossibleDynamicType
argument_list|(
name|ClangASTType
operator|*
name|target_type
argument_list|,
comment|// Can pass NULL
name|bool
name|check_cplusplus
argument_list|,
name|bool
name|check_objc
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsPointerToScalarType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsRuntimeGeneratedType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsPointerType
argument_list|(
name|ClangASTType
operator|*
name|pointee_type
operator|=
name|NULL
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsPointerOrReferenceType
argument_list|(
name|ClangASTType
operator|*
name|pointee_type
operator|=
name|NULL
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsReferenceType
argument_list|(
name|ClangASTType
operator|*
name|pointee_type
operator|=
name|NULL
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsScalarType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsTypedefType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsVoidType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|GetCXXClassName
argument_list|(
name|std
operator|::
name|string
operator|&
name|class_name
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetObjCClassName
argument_list|(
name|std
operator|::
name|string
operator|&
name|class_name
argument_list|)
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Type Completion
comment|//----------------------------------------------------------------------
name|bool
name|GetCompleteType
argument_list|()
specifier|const
expr_stmt|;
comment|//----------------------------------------------------------------------
comment|// AST related queries
comment|//----------------------------------------------------------------------
name|size_t
name|GetPointerByteSize
argument_list|()
specifier|const
expr_stmt|;
comment|//----------------------------------------------------------------------
comment|// Accessors
comment|//----------------------------------------------------------------------
name|clang
operator|::
name|ASTContext
operator|*
name|GetASTContext
argument_list|()
specifier|const
block|{
return|return
name|m_ast
return|;
block|}
name|ConstString
name|GetConstQualifiedTypeName
argument_list|()
specifier|const
expr_stmt|;
name|ConstString
name|GetConstTypeName
argument_list|()
specifier|const
expr_stmt|;
name|ConstString
name|GetTypeName
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|GetTypeInfo
argument_list|(
name|ClangASTType
operator|*
name|pointee_or_element_clang_type
operator|=
name|NULL
argument_list|)
decl|const
decl_stmt|;
name|lldb
operator|::
name|LanguageType
name|GetMinimumLanguage
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|clang_type_t
name|GetOpaqueQualType
argument_list|()
specifier|const
block|{
return|return
name|m_type
return|;
block|}
name|lldb
operator|::
name|TypeClass
name|GetTypeClass
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetClangType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|lldb
operator|::
name|clang_type_t
name|type
argument_list|)
block|{
name|m_ast
operator|=
name|ast
expr_stmt|;
name|m_type
operator|=
name|type
expr_stmt|;
block|}
name|void
name|SetClangType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|clang
operator|::
name|QualType
name|qual_type
argument_list|)
decl_stmt|;
name|unsigned
name|GetTypeQualifiers
argument_list|()
specifier|const
expr_stmt|;
comment|//----------------------------------------------------------------------
comment|// Creating related types
comment|//----------------------------------------------------------------------
name|ClangASTType
name|AddConstModifier
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|AddRestrictModifier
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|AddVolatileModifier
argument_list|()
specifier|const
expr_stmt|;
comment|// Using the current type, create a new typedef to that type using "typedef_name"
comment|// as the name and "decl_ctx" as the decl context.
name|ClangASTType
name|CreateTypedefType
argument_list|(
specifier|const
name|char
operator|*
name|typedef_name
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|)
decl|const
decl_stmt|;
name|ClangASTType
name|GetArrayElementType
argument_list|(
name|uint64_t
operator|&
name|stride
argument_list|)
decl|const
decl_stmt|;
name|ClangASTType
name|GetCanonicalType
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetFullyUnqualifiedType
argument_list|()
specifier|const
expr_stmt|;
comment|// Returns -1 if this isn't a function of if the fucntion doesn't have a prototype
comment|// Returns a value>= 0 if there is a prototype.
name|int
name|GetFunctionArgumentCount
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetFunctionArgumentTypeAtIndex
parameter_list|(
name|size_t
name|idx
parameter_list|)
function_decl|;
name|ClangASTType
name|GetFunctionReturnType
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetLValueReferenceType
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetNonReferenceType
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetPointeeType
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetPointerType
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetRValueReferenceType
argument_list|()
specifier|const
expr_stmt|;
comment|// If the current object represents a typedef type, get the underlying type
name|ClangASTType
name|GetTypedefedType
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|RemoveFastQualifiers
argument_list|()
specifier|const
expr_stmt|;
comment|//----------------------------------------------------------------------
comment|// Create related types using the current type's AST
comment|//----------------------------------------------------------------------
name|ClangASTType
name|GetBasicTypeFromAST
argument_list|(
name|lldb
operator|::
name|BasicType
name|basic_type
argument_list|)
decl|const
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Exploring the type
comment|//----------------------------------------------------------------------
name|uint64_t
name|GetByteSize
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|GetBitSize
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|Encoding
name|GetEncoding
argument_list|(
argument|uint64_t&count
argument_list|)
specifier|const
expr_stmt|;
name|lldb
operator|::
name|Format
name|GetFormat
argument_list|()
specifier|const
expr_stmt|;
name|size_t
name|GetTypeBitAlign
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|GetNumChildren
argument_list|(
name|bool
name|omit_empty_base_classes
argument_list|)
decl|const
decl_stmt|;
name|lldb
operator|::
name|BasicType
name|GetBasicTypeEnumeration
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|lldb
operator|::
name|BasicType
name|GetBasicTypeEnumeration
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
expr_stmt|;
name|uint32_t
name|GetNumDirectBaseClasses
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|GetNumVirtualBaseClasses
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|GetNumFields
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetDirectBaseClassAtIndex
argument_list|(
name|size_t
name|idx
argument_list|,
name|uint32_t
operator|*
name|bit_offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|ClangASTType
name|GetVirtualBaseClassAtIndex
argument_list|(
name|size_t
name|idx
argument_list|,
name|uint32_t
operator|*
name|bit_offset_ptr
argument_list|)
decl|const
decl_stmt|;
name|ClangASTType
name|GetFieldAtIndex
argument_list|(
name|size_t
name|idx
argument_list|,
name|std
operator|::
name|string
operator|&
name|name
argument_list|,
name|uint64_t
operator|*
name|bit_offset_ptr
argument_list|,
name|uint32_t
operator|*
name|bitfield_bit_size_ptr
argument_list|,
name|bool
operator|*
name|is_bitfield_ptr
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|GetIndexOfFieldWithName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|ClangASTType
operator|*
name|field_clang_type
operator|=
name|NULL
argument_list|,
name|uint64_t
operator|*
name|bit_offset_ptr
operator|=
name|NULL
argument_list|,
name|uint32_t
operator|*
name|bitfield_bit_size_ptr
operator|=
name|NULL
argument_list|,
name|bool
operator|*
name|is_bitfield_ptr
operator|=
name|NULL
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|GetNumPointeeChildren
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetChildClangTypeAtIndex
argument_list|(
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
specifier|const
name|char
operator|*
name|parent_name
argument_list|,
name|size_t
name|idx
argument_list|,
name|bool
name|transparent_pointers
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|,
name|bool
name|ignore_array_bounds
argument_list|,
name|std
operator|::
name|string
operator|&
name|child_name
argument_list|,
name|uint32_t
operator|&
name|child_byte_size
argument_list|,
name|int32_t
operator|&
name|child_byte_offset
argument_list|,
name|uint32_t
operator|&
name|child_bitfield_bit_size
argument_list|,
name|uint32_t
operator|&
name|child_bitfield_bit_offset
argument_list|,
name|bool
operator|&
name|child_is_base_class
argument_list|,
name|bool
operator|&
name|child_is_deref_of_parent
argument_list|)
decl|const
decl_stmt|;
comment|// Lookup a child given a name. This function will match base class names
comment|// and member member names in "clang_type" only, not descendants.
name|uint32_t
name|GetIndexOfChildWithName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|)
decl|const
decl_stmt|;
comment|// Lookup a child member given a name. This function will match member names
comment|// only and will descend into "clang_type" children in search for the first
comment|// member in this class, or any base class that matches "name".
comment|// TODO: Return all matches for a given name by returning a vector<vector<uint32_t>>
comment|// so we catch all names that match a given child name, not just the first.
name|size_t
name|GetIndexOfChildMemberWithName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|child_indexes
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|GetNumTemplateArguments
argument_list|()
specifier|const
expr_stmt|;
name|ClangASTType
name|GetTemplateArgument
argument_list|(
name|size_t
name|idx
argument_list|,
name|lldb
operator|::
name|TemplateArgumentKind
operator|&
name|kind
argument_list|)
decl|const
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Modifying RecordType
comment|//----------------------------------------------------------------------
name|clang
operator|::
name|FieldDecl
operator|*
name|AddFieldToRecordType
argument_list|(
argument|const char *name
argument_list|,
argument|const ClangASTType&field_type
argument_list|,
argument|lldb::AccessType access
argument_list|,
argument|uint32_t bitfield_bit_size
argument_list|)
expr_stmt|;
name|void
name|BuildIndirectFields
parameter_list|()
function_decl|;
name|clang
operator|::
name|VarDecl
operator|*
name|AddVariableToRecordType
argument_list|(
argument|const char *name
argument_list|,
argument|const ClangASTType&var_type
argument_list|,
argument|lldb::AccessType access
argument_list|)
expr_stmt|;
name|clang
operator|::
name|CXXMethodDecl
operator|*
name|AddMethodToCXXRecordType
argument_list|(
argument|const char *name
argument_list|,
argument|const ClangASTType&method_type
argument_list|,
argument|lldb::AccessType access
argument_list|,
argument|bool is_virtual
argument_list|,
argument|bool is_static
argument_list|,
argument|bool is_inline
argument_list|,
argument|bool is_explicit
argument_list|,
argument|bool is_attr_used
argument_list|,
argument|bool is_artificial
argument_list|)
expr_stmt|;
comment|// C++ Base Classes
name|clang
operator|::
name|CXXBaseSpecifier
operator|*
name|CreateBaseClassSpecifier
argument_list|(
argument|lldb::AccessType access
argument_list|,
argument|bool is_virtual
argument_list|,
argument|bool base_of_class
argument_list|)
expr_stmt|;
specifier|static
name|void
name|DeleteBaseClassSpecifiers
argument_list|(
name|clang
operator|::
name|CXXBaseSpecifier
operator|*
operator|*
name|base_classes
argument_list|,
name|unsigned
name|num_base_classes
argument_list|)
decl_stmt|;
name|bool
name|SetBaseClassesForClassType
argument_list|(
name|clang
operator|::
name|CXXBaseSpecifier
specifier|const
operator|*
specifier|const
operator|*
name|base_classes
argument_list|,
name|unsigned
name|num_base_classes
argument_list|)
decl_stmt|;
name|bool
name|SetObjCSuperClass
parameter_list|(
specifier|const
name|ClangASTType
modifier|&
name|superclass_clang_type
parameter_list|)
function_decl|;
name|bool
name|AddObjCClassProperty
argument_list|(
specifier|const
name|char
operator|*
name|property_name
argument_list|,
specifier|const
name|ClangASTType
operator|&
name|property_clang_type
argument_list|,
name|clang
operator|::
name|ObjCIvarDecl
operator|*
name|ivar_decl
argument_list|,
specifier|const
name|char
operator|*
name|property_setter_name
argument_list|,
specifier|const
name|char
operator|*
name|property_getter_name
argument_list|,
name|uint32_t
name|property_attributes
argument_list|,
name|ClangASTMetadata
operator|*
name|metadata
argument_list|)
decl_stmt|;
name|clang
operator|::
name|ObjCMethodDecl
operator|*
name|AddMethodToObjCObjectType
argument_list|(
argument|const char *name
argument_list|,
comment|// the full symbol name as seen in the symbol table ("-[NString stringWithCString:]")
argument|const ClangASTType&method_clang_type
argument_list|,
argument|lldb::AccessType access
argument_list|,
argument|bool is_artificial
argument_list|)
expr_stmt|;
name|clang
operator|::
name|DeclContext
operator|*
name|GetDeclContextForType
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|SetDefaultAccessForRecordFields
parameter_list|(
name|int
name|default_accessibility
parameter_list|,
name|int
modifier|*
name|assigned_accessibilities
parameter_list|,
name|size_t
name|num_assigned_accessibilities
parameter_list|)
function_decl|;
name|bool
name|SetHasExternalStorage
parameter_list|(
name|bool
name|has_extern
parameter_list|)
function_decl|;
comment|//------------------------------------------------------------------
comment|// clang::TagType
comment|//------------------------------------------------------------------
name|bool
name|SetTagTypeKind
argument_list|(
name|int
name|kind
argument_list|)
decl|const
decl_stmt|;
comment|//------------------------------------------------------------------
comment|// Tag Declarations
comment|//------------------------------------------------------------------
name|bool
name|StartTagDeclarationDefinition
parameter_list|()
function_decl|;
name|bool
name|CompleteTagDeclarationDefinition
parameter_list|()
function_decl|;
comment|//----------------------------------------------------------------------
comment|// Modifying Enumeration types
comment|//----------------------------------------------------------------------
name|bool
name|AddEnumerationValueToEnumerationType
parameter_list|(
specifier|const
name|ClangASTType
modifier|&
name|enumerator_qual_type
parameter_list|,
specifier|const
name|Declaration
modifier|&
name|decl
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int64_t
name|enum_value
parameter_list|,
name|uint32_t
name|enum_value_bit_size
parameter_list|)
function_decl|;
name|ClangASTType
name|GetEnumerationIntegerType
argument_list|()
specifier|const
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// Pointers& References
comment|//------------------------------------------------------------------
comment|// Call this function using the class type when you want to make a
comment|// member pointer type to pointee_type.
name|ClangASTType
name|CreateMemberPointerType
argument_list|(
specifier|const
name|ClangASTType
operator|&
name|pointee_type
argument_list|)
decl|const
decl_stmt|;
comment|// Converts "s" to a floating point value and place resulting floating
comment|// point bytes in the "dst" buffer.
name|size_t
name|ConvertStringToFloatValue
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|,
name|uint8_t
operator|*
name|dst
argument_list|,
name|size_t
name|dst_size
argument_list|)
decl|const
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Dumping types
comment|//----------------------------------------------------------------------
name|void
name|DumpValue
argument_list|(
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|Stream
operator|*
name|s
argument_list|,
name|lldb
operator|::
name|Format
name|format
argument_list|,
specifier|const
name|DataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
name|data_offset
argument_list|,
name|size_t
name|data_byte_size
argument_list|,
name|uint32_t
name|bitfield_bit_size
argument_list|,
name|uint32_t
name|bitfield_bit_offset
argument_list|,
name|bool
name|show_types
argument_list|,
name|bool
name|show_summary
argument_list|,
name|bool
name|verbose
argument_list|,
name|uint32_t
name|depth
argument_list|)
decl_stmt|;
name|bool
name|DumpTypeValue
argument_list|(
name|Stream
operator|*
name|s
argument_list|,
name|lldb
operator|::
name|Format
name|format
argument_list|,
specifier|const
name|DataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
name|data_offset
argument_list|,
name|size_t
name|data_byte_size
argument_list|,
name|uint32_t
name|bitfield_bit_size
argument_list|,
name|uint32_t
name|bitfield_bit_offset
argument_list|,
name|ExecutionContextScope
operator|*
name|exe_scope
argument_list|)
decl_stmt|;
name|void
name|DumpSummary
argument_list|(
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|Stream
operator|*
name|s
argument_list|,
specifier|const
name|DataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
name|data_offset
argument_list|,
name|size_t
name|data_byte_size
argument_list|)
decl_stmt|;
name|void
name|DumpTypeDescription
argument_list|()
specifier|const
expr_stmt|;
comment|// Dump to stdout
name|void
name|DumpTypeDescription
argument_list|(
name|Stream
operator|*
name|s
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetValueAsScalar
argument_list|(
specifier|const
name|DataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
name|data_offset
argument_list|,
name|size_t
name|data_byte_size
argument_list|,
name|Scalar
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
name|bool
name|SetValueFromScalar
parameter_list|(
specifier|const
name|Scalar
modifier|&
name|value
parameter_list|,
name|Stream
modifier|&
name|strm
parameter_list|)
function_decl|;
name|bool
name|ReadFromMemory
argument_list|(
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|AddressType
name|address_type
argument_list|,
name|DataExtractor
operator|&
name|data
argument_list|)
decl_stmt|;
name|bool
name|WriteToMemory
argument_list|(
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|AddressType
name|address_type
argument_list|,
name|StreamString
operator|&
name|new_value
argument_list|)
decl_stmt|;
name|clang
operator|::
name|RecordDecl
operator|*
name|GetAsRecordDecl
argument_list|()
specifier|const
expr_stmt|;
name|clang
operator|::
name|CXXRecordDecl
operator|*
name|GetAsCXXRecordDecl
argument_list|()
specifier|const
expr_stmt|;
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
name|GetAsObjCInterfaceDecl
argument_list|()
specifier|const
expr_stmt|;
name|void
name|Clear
parameter_list|()
block|{
name|m_type
operator|=
name|NULL
expr_stmt|;
name|m_ast
operator|=
name|NULL
expr_stmt|;
block|}
name|clang
operator|::
name|QualType
name|GetQualType
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_type
condition|)
return|return
name|clang
operator|::
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|m_type
argument_list|)
return|;
return|return
name|clang
operator|::
name|QualType
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|clang
operator|::
name|QualType
name|GetCanonicalQualType
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_type
condition|)
return|return
name|clang
operator|::
name|QualType
operator|::
name|getFromOpaquePtr
argument_list|(
name|m_type
argument_list|)
operator|.
name|getCanonicalType
argument_list|()
return|;
end_expr_stmt

begin_return
return|return
name|clang
operator|::
name|QualType
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  private:
name|lldb
operator|::
name|clang_type_t
name|m_type
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|ASTContext
operator|*
name|m_ast
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ClangASTType
operator|&
name|lhs
operator|,
specifier|const
name|ClangASTType
operator|&
name|rhs
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ClangASTType
operator|&
name|lhs
operator|,
specifier|const
name|ClangASTType
operator|&
name|rhs
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef liblldb_ClangASTType_h_
end_comment

end_unit

