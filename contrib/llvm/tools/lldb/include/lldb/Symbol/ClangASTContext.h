begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ClangASTContext.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ClangASTContext_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ClangASTContext_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/TemplateBase.h"
end_include

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ClangForward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/ClangASTType.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|Declaration
decl_stmt|;
name|class
name|ClangASTContext
block|{
name|public
label|:
typedef|typedef
name|void
argument_list|(
operator|*
name|CompleteTagDeclCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|TagDecl
operator|*
argument_list|)
expr_stmt|;
typedef|typedef
name|void
argument_list|(
operator|*
name|CompleteObjCInterfaceDeclCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
argument_list|)
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|ClangASTContext
argument_list|(
specifier|const
name|char
operator|*
name|triple
operator|=
name|NULL
argument_list|)
expr_stmt|;
operator|~
name|ClangASTContext
argument_list|()
expr_stmt|;
name|clang
operator|::
name|ASTContext
operator|*
name|getASTContext
argument_list|()
expr_stmt|;
name|clang
operator|::
name|Builtin
operator|::
name|Context
operator|*
name|getBuiltinContext
argument_list|()
expr_stmt|;
name|clang
operator|::
name|IdentifierTable
operator|*
name|getIdentifierTable
argument_list|()
expr_stmt|;
name|clang
operator|::
name|LangOptions
operator|*
name|getLanguageOptions
argument_list|()
expr_stmt|;
name|clang
operator|::
name|SelectorTable
operator|*
name|getSelectorTable
argument_list|()
expr_stmt|;
name|clang
operator|::
name|FileManager
operator|*
name|getFileManager
argument_list|()
expr_stmt|;
name|clang
operator|::
name|SourceManager
operator|*
name|getSourceManager
argument_list|()
expr_stmt|;
name|clang
operator|::
name|DiagnosticsEngine
operator|*
name|getDiagnosticsEngine
argument_list|()
expr_stmt|;
name|clang
operator|::
name|DiagnosticConsumer
operator|*
name|getDiagnosticConsumer
argument_list|()
expr_stmt|;
name|clang
operator|::
name|TargetOptions
operator|*
name|getTargetOptions
argument_list|()
expr_stmt|;
name|clang
operator|::
name|TargetInfo
operator|*
name|getTargetInfo
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|GetTargetTriple
parameter_list|()
function_decl|;
name|void
name|SetTargetTriple
parameter_list|(
specifier|const
name|char
modifier|*
name|target_triple
parameter_list|)
function_decl|;
name|void
name|SetArchitecture
parameter_list|(
specifier|const
name|ArchSpec
modifier|&
name|arch
parameter_list|)
function_decl|;
name|bool
name|HasExternalSource
parameter_list|()
function_decl|;
name|void
name|SetExternalSource
argument_list|(
name|llvm
operator|::
name|OwningPtr
operator|<
name|clang
operator|::
name|ExternalASTSource
operator|>
operator|&
name|ast_source_ap
argument_list|)
decl_stmt|;
name|void
name|RemoveExternalSource
parameter_list|()
function_decl|;
name|bool
name|GetCompleteDecl
argument_list|(
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
block|{
return|return
name|ClangASTContext
operator|::
name|GetCompleteDecl
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|decl
argument_list|)
return|;
block|}
specifier|static
name|bool
name|GetCompleteDecl
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|decl
argument_list|)
decl_stmt|;
name|void
name|SetMetadataAsUserID
argument_list|(
specifier|const
name|void
operator|*
name|object
argument_list|,
name|lldb
operator|::
name|user_id_t
name|user_id
argument_list|)
decl_stmt|;
name|void
name|SetMetadata
parameter_list|(
specifier|const
name|void
modifier|*
name|object
parameter_list|,
name|ClangASTMetadata
modifier|&
name|meta_data
parameter_list|)
block|{
name|SetMetadata
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|object
argument_list|,
name|meta_data
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|SetMetadata
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|void
operator|*
name|object
argument_list|,
name|ClangASTMetadata
operator|&
name|meta_data
argument_list|)
decl_stmt|;
name|ClangASTMetadata
modifier|*
name|GetMetadata
parameter_list|(
specifier|const
name|void
modifier|*
name|object
parameter_list|)
block|{
return|return
name|GetMetadata
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|object
argument_list|)
return|;
block|}
specifier|static
name|ClangASTMetadata
modifier|*
name|GetMetadata
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|void
operator|*
name|object
argument_list|)
decl_stmt|;
comment|//------------------------------------------------------------------
comment|// Basic Types
comment|//------------------------------------------------------------------
name|ClangASTType
name|GetBuiltinTypeForEncodingAndBitSize
argument_list|(
name|lldb
operator|::
name|Encoding
name|encoding
argument_list|,
name|uint32_t
name|bit_size
argument_list|)
decl_stmt|;
specifier|static
name|ClangASTType
name|GetBuiltinTypeForEncodingAndBitSize
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|lldb
operator|::
name|Encoding
name|encoding
argument_list|,
name|uint32_t
name|bit_size
argument_list|)
decl_stmt|;
name|ClangASTType
name|GetBasicType
argument_list|(
name|lldb
operator|::
name|BasicType
name|type
argument_list|)
decl_stmt|;
specifier|static
name|ClangASTType
name|GetBasicType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|lldb
operator|::
name|BasicType
name|type
argument_list|)
decl_stmt|;
specifier|static
name|ClangASTType
name|GetBasicType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
decl_stmt|;
specifier|static
name|lldb
operator|::
name|BasicType
name|GetBasicTypeEnumeration
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|)
expr_stmt|;
name|ClangASTType
name|GetBuiltinTypeForDWARFEncodingAndBitSize
parameter_list|(
specifier|const
name|char
modifier|*
name|type_name
parameter_list|,
name|uint32_t
name|dw_ate
parameter_list|,
name|uint32_t
name|bit_size
parameter_list|)
function_decl|;
name|ClangASTType
name|GetCStringType
parameter_list|(
name|bool
name|is_const
parameter_list|)
function_decl|;
specifier|static
name|ClangASTType
name|GetUnknownAnyType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|)
decl_stmt|;
name|ClangASTType
name|GetUnknownAnyType
parameter_list|()
block|{
return|return
name|ClangASTContext
operator|::
name|GetUnknownAnyType
argument_list|(
name|getASTContext
argument_list|()
argument_list|)
return|;
block|}
name|uint32_t
name|GetPointerByteSize
parameter_list|()
function_decl|;
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|GetTranslationUnitDecl
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|)
expr_stmt|;
name|clang
operator|::
name|DeclContext
operator|*
name|GetTranslationUnitDecl
argument_list|()
block|{
return|return
name|GetTranslationUnitDecl
argument_list|(
name|getASTContext
argument_list|()
argument_list|)
return|;
block|}
specifier|static
name|bool
name|GetClassMethodInfoForDeclContext
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|lldb
operator|::
name|LanguageType
operator|&
name|language
argument_list|,
name|bool
operator|&
name|is_instance_method
argument_list|,
name|ConstString
operator|&
name|language_object_name
argument_list|)
decl_stmt|;
specifier|static
name|ClangASTType
name|CopyType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dest_context
argument_list|,
name|ClangASTType
name|source_type
argument_list|)
decl_stmt|;
specifier|static
name|clang
operator|::
name|Decl
operator|*
name|CopyDecl
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|dest_context
argument_list|,
name|clang
operator|::
name|ASTContext
operator|*
name|source_context
argument_list|,
name|clang
operator|::
name|Decl
operator|*
name|source_decl
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|AreTypesSame
parameter_list|(
name|ClangASTType
name|type1
parameter_list|,
name|ClangASTType
name|type2
parameter_list|,
name|bool
name|ignore_qualifiers
init|=
name|false
parameter_list|)
function_decl|;
name|ClangASTType
name|GetTypeForDecl
argument_list|(
name|clang
operator|::
name|TagDecl
operator|*
name|decl
argument_list|)
decl_stmt|;
name|ClangASTType
name|GetTypeForDecl
argument_list|(
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
name|objc_decl
argument_list|)
decl_stmt|;
comment|//------------------------------------------------------------------
comment|// Structure, Unions, Classes
comment|//------------------------------------------------------------------
specifier|static
name|clang
operator|::
name|AccessSpecifier
name|ConvertAccessTypeToAccessSpecifier
argument_list|(
argument|lldb::AccessType access
argument_list|)
expr_stmt|;
specifier|static
name|clang
operator|::
name|AccessSpecifier
name|UnifyAccessSpecifiers
argument_list|(
argument|clang::AccessSpecifier lhs
argument_list|,
argument|clang::AccessSpecifier rhs
argument_list|)
expr_stmt|;
specifier|static
name|uint32_t
name|GetNumBaseClasses
argument_list|(
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
name|cxx_record_decl
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|)
decl_stmt|;
specifier|static
name|uint32_t
name|GetIndexForRecordBase
argument_list|(
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|record_decl
argument_list|,
specifier|const
name|clang
operator|::
name|CXXBaseSpecifier
operator|*
name|base_spec
argument_list|,
name|bool
name|omit_empty_base_classes
argument_list|)
decl_stmt|;
name|ClangASTType
name|CreateRecordType
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|lldb
operator|::
name|AccessType
name|access_type
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|int
name|kind
argument_list|,
name|lldb
operator|::
name|LanguageType
name|language
argument_list|,
name|ClangASTMetadata
operator|*
name|metadata
operator|=
name|NULL
argument_list|)
decl_stmt|;
name|class
name|TemplateParameterInfos
block|{
name|public
label|:
name|bool
name|IsValid
argument_list|()
specifier|const
block|{
if|if
condition|(
name|args
operator|.
name|empty
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|args
operator|.
name|size
argument_list|()
operator|==
name|names
operator|.
name|size
argument_list|()
return|;
block|}
name|size_t
name|GetSize
argument_list|()
specifier|const
block|{
if|if
condition|(
name|IsValid
argument_list|()
condition|)
return|return
name|args
operator|.
name|size
argument_list|()
return|;
return|return
literal|0
return|;
block|}
name|llvm
operator|::
name|SmallVector
operator|<
specifier|const
name|char
operator|*
operator|,
literal|8
operator|>
name|names
expr_stmt|;
name|llvm
operator|::
name|SmallVector
operator|<
name|clang
operator|::
name|TemplateArgument
operator|,
literal|8
operator|>
name|args
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|clang
operator|::
name|FunctionTemplateDecl
operator|*
name|CreateFunctionTemplateDecl
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|clang
operator|::
name|FunctionDecl
operator|*
name|func_decl
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|TemplateParameterInfos
operator|&
name|infos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|CreateFunctionTemplateSpecializationInfo
argument_list|(
name|clang
operator|::
name|FunctionDecl
operator|*
name|func_decl
argument_list|,
name|clang
operator|::
name|FunctionTemplateDecl
operator|*
name|Template
argument_list|,
specifier|const
name|TemplateParameterInfos
operator|&
name|infos
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|clang
operator|::
name|ClassTemplateDecl
operator|*
name|CreateClassTemplateDecl
argument_list|(
argument|clang::DeclContext *decl_ctx
argument_list|,
argument|lldb::AccessType access_type
argument_list|,
argument|const char *class_name
argument_list|,
argument|int kind
argument_list|,
argument|const TemplateParameterInfos&infos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|clang
operator|::
name|ClassTemplateSpecializationDecl
operator|*
name|CreateClassTemplateSpecializationDecl
argument_list|(
argument|clang::DeclContext *decl_ctx
argument_list|,
argument|clang::ClassTemplateDecl *class_template_decl
argument_list|,
argument|int kind
argument_list|,
argument|const TemplateParameterInfos&infos
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ClangASTType
name|CreateClassTemplateSpecializationType
argument_list|(
name|clang
operator|::
name|ClassTemplateSpecializationDecl
operator|*
name|class_template_specialization_decl
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|GetAsDeclContext
argument_list|(
name|clang
operator|::
name|CXXMethodDecl
operator|*
name|cxx_method_decl
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|static
name|clang
operator|::
name|DeclContext
operator|*
name|GetAsDeclContext
argument_list|(
name|clang
operator|::
name|ObjCMethodDecl
operator|*
name|objc_method_decl
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
specifier|static
name|bool
name|CheckOverloadedOperatorKindParameterCount
parameter_list|(
name|uint32_t
name|op_kind
parameter_list|,
name|uint32_t
name|num_params
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|bool
name|FieldIsBitfield
argument_list|(
name|clang
operator|::
name|FieldDecl
operator|*
name|field
argument_list|,
name|uint32_t
operator|&
name|bitfield_bit_size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|FieldIsBitfield
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|clang
operator|::
name|FieldDecl
operator|*
name|field
argument_list|,
name|uint32_t
operator|&
name|bitfield_bit_size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|RecordHasFields
argument_list|(
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|record_decl
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ClangASTType
name|CreateObjCClass
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|bool
name|isForwardDecl
argument_list|,
name|bool
name|isInternal
argument_list|,
name|ClangASTMetadata
operator|*
name|metadata
operator|=
name|NULL
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Returns a mask containing bits from the ClangASTContext::eTypeXXX enumerations
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Namespace Declarations
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|clang
operator|::
name|NamespaceDecl
operator|*
name|GetUniqueNamespaceDeclaration
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Function Types
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|clang
operator|::
name|FunctionDecl
operator|*
name|CreateFunctionDeclaration
argument_list|(
argument|clang::DeclContext *decl_ctx
argument_list|,
argument|const char *name
argument_list|,
argument|const ClangASTType&function_Type
argument_list|,
argument|int storage
argument_list|,
argument|bool is_inline
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
name|ClangASTType
name|CreateFunctionType
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
specifier|const
name|ClangASTType
operator|&
name|result_type
argument_list|,
specifier|const
name|ClangASTType
operator|*
name|args
argument_list|,
name|unsigned
name|num_args
argument_list|,
name|bool
name|is_variadic
argument_list|,
name|unsigned
name|type_quals
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
name|ClangASTType
name|CreateFunctionType
parameter_list|(
specifier|const
name|ClangASTType
modifier|&
name|result_type
parameter_list|,
specifier|const
name|ClangASTType
modifier|*
name|args
parameter_list|,
name|unsigned
name|num_args
parameter_list|,
name|bool
name|is_variadic
parameter_list|,
name|unsigned
name|type_quals
parameter_list|)
block|{
return|return
name|ClangASTContext
operator|::
name|CreateFunctionType
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|result_type
argument_list|,
name|args
argument_list|,
name|num_args
argument_list|,
name|is_variadic
argument_list|,
name|type_quals
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|clang
operator|::
name|ParmVarDecl
operator|*
name|CreateParameterDeclaration
argument_list|(
argument|const char *name
argument_list|,
argument|const ClangASTType&param_type
argument_list|,
argument|int storage
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void
name|SetFunctionParameters
argument_list|(
name|clang
operator|::
name|FunctionDecl
operator|*
name|function_decl
argument_list|,
name|clang
operator|::
name|ParmVarDecl
operator|*
operator|*
name|params
argument_list|,
name|unsigned
name|num_params
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Array Types
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_function_decl
name|ClangASTType
name|CreateArrayType
parameter_list|(
specifier|const
name|ClangASTType
modifier|&
name|element_type
parameter_list|,
name|size_t
name|element_count
parameter_list|,
name|bool
name|is_vector
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Enumeration Types
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_decl_stmt
name|ClangASTType
name|CreateEnumerationType
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
specifier|const
name|Declaration
operator|&
name|decl
argument_list|,
specifier|const
name|ClangASTType
operator|&
name|integer_qual_type
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Floating point functions
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_function
name|ClangASTType
name|GetFloatTypeFromBitSize
parameter_list|(
name|size_t
name|bit_size
parameter_list|)
block|{
return|return
name|GetFloatTypeFromBitSize
argument_list|(
name|getASTContext
argument_list|()
argument_list|,
name|bit_size
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|ClangASTType
name|GetFloatTypeFromBitSize
argument_list|(
name|clang
operator|::
name|ASTContext
operator|*
name|ast
argument_list|,
name|size_t
name|bit_size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// Classes that inherit from ClangASTContext can see and modify these
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|std
operator|::
name|string
name|m_target_triple
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|ASTContext
operator|>
name|m_ast_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|LangOptions
operator|>
name|m_language_options_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|FileManager
operator|>
name|m_file_manager_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|FileSystemOptions
operator|>
name|m_file_system_options_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|SourceManager
operator|>
name|m_source_manager_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|DiagnosticsEngine
operator|>
name|m_diagnostics_engine_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|DiagnosticConsumer
operator|>
name|m_diagnostic_consumer_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|IntrusiveRefCntPtr
operator|<
name|clang
operator|::
name|TargetOptions
operator|>
name|m_target_options_rp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|TargetInfo
operator|>
name|m_target_info_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|IdentifierTable
operator|>
name|m_identifier_table_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|SelectorTable
operator|>
name|m_selector_table_ap
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|unique_ptr
operator|<
name|clang
operator|::
name|Builtin
operator|::
name|Context
operator|>
name|m_builtins_ap
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|CompleteTagDeclCallback
name|m_callback_tag_decl
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|CompleteObjCInterfaceDeclCallback
name|m_callback_objc_decl
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|m_callback_baton
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint32_t
name|m_pointer_byte_size
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_comment
comment|// For ClangASTContext only
end_comment

begin_comment
comment|//------------------------------------------------------------------
end_comment

begin_expr_stmt
name|ClangASTContext
argument_list|(
specifier|const
name|ClangASTContext
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|ClangASTContext
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ClangASTContext
operator|&
operator|)
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_ClangASTContext_h_
end_comment

end_unit

