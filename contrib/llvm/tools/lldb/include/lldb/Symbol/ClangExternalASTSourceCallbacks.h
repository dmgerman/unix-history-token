begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ClangExternalASTSourceCallbacks.h -----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ClangExternalASTSourceCallbacks_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ClangExternalASTSourceCallbacks_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"clang/AST/CharUnits.h"
end_include

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ClangForward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/ClangASTType.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/ClangExternalASTSourceCommon.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ClangExternalASTSourceCallbacks
range|:
name|public
name|ClangExternalASTSourceCommon
block|{
name|public
operator|:
typedef|typedef
name|void
argument_list|(
operator|*
name|CompleteTagDeclCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|TagDecl
operator|*
argument_list|)
expr_stmt|;
typedef|typedef
name|void
argument_list|(
operator|*
name|CompleteObjCInterfaceDeclCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
argument_list|)
expr_stmt|;
typedef|typedef
name|void
argument_list|(
argument|*FindExternalVisibleDeclsByNameCallback
argument_list|)
operator|(
name|void
operator|*
name|baton
operator|,
specifier|const
name|clang
operator|::
name|DeclContext
operator|*
name|DC
operator|,
name|clang
operator|::
name|DeclarationName
name|Name
operator|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|clang
operator|::
name|NamedDecl
operator|*
operator|>
operator|*
name|results
operator|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|LayoutRecordTypeCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|Record
argument_list|,
name|uint64_t
operator|&
name|Size
argument_list|,
name|uint64_t
operator|&
name|Alignment
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|FieldDecl
operator|*
argument_list|,
name|uint64_t
operator|>
operator|&
name|FieldOffsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|BaseOffsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|VirtualBaseOffsets
argument_list|)
expr_stmt|;
name|ClangExternalASTSourceCallbacks
argument_list|(
argument|CompleteTagDeclCallback tag_decl_callback
argument_list|,
argument|CompleteObjCInterfaceDeclCallback objc_decl_callback
argument_list|,
argument|FindExternalVisibleDeclsByNameCallback find_by_name_callback
argument_list|,
argument|LayoutRecordTypeCallback layout_record_type_callback
argument_list|,
argument|void *callback_baton
argument_list|)
block|:
name|m_callback_tag_decl
argument_list|(
name|tag_decl_callback
argument_list|)
operator|,
name|m_callback_objc_decl
argument_list|(
name|objc_decl_callback
argument_list|)
operator|,
name|m_callback_find_by_name
argument_list|(
name|find_by_name_callback
argument_list|)
operator|,
name|m_callback_layout_record_type
argument_list|(
name|layout_record_type_callback
argument_list|)
operator|,
name|m_callback_baton
argument_list|(
argument|callback_baton
argument_list|)
block|{     }
comment|//------------------------------------------------------------------
comment|// clang::ExternalASTSource
comment|//------------------------------------------------------------------
name|virtual
name|clang
operator|::
name|Decl
operator|*
name|GetExternalDecl
argument_list|(
argument|uint32_t ID
argument_list|)
block|{
comment|// This method only needs to be implemented if the AST source ever
comment|// passes back decl sets as VisibleDeclaration objects.
return|return
literal|0
return|;
block|}
name|virtual
name|clang
operator|::
name|Stmt
operator|*
name|GetExternalDeclStmt
argument_list|(
argument|uint64_t Offset
argument_list|)
block|{
comment|// This operation is meant to be used via a LazyOffsetPtr.  It only
comment|// needs to be implemented if the AST source uses methods like
comment|// FunctionDecl::setLazyBody when building decls.
return|return
literal|0
return|;
block|}
name|virtual
name|clang
operator|::
name|Selector
name|GetExternalSelector
argument_list|(
argument|uint32_t ID
argument_list|)
block|{
comment|// This operation only needs to be implemented if the AST source
comment|// returns non-zero for GetNumKnownSelectors().
return|return
name|clang
operator|::
name|Selector
argument_list|()
return|;
block|}
name|virtual
name|uint32_t
name|GetNumExternalSelectors
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|clang
operator|::
name|CXXBaseSpecifier
operator|*
name|GetExternalCXXBaseSpecifiers
argument_list|(
argument|uint64_t Offset
argument_list|)
block|{
return|return
name|NULL
return|;
block|}
name|virtual
name|void
name|MaterializeVisibleDecls
argument_list|(
specifier|const
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|)
block|{
return|return;
block|}
name|virtual
name|clang
operator|::
name|ExternalLoadResult
name|FindExternalLexicalDecls
argument_list|(
argument|const clang::DeclContext *decl_ctx
argument_list|,
argument|bool (*isKindWeWant)(clang::Decl::Kind)
argument_list|,
argument|llvm::SmallVectorImpl<clang::Decl*>&decls
argument_list|)
block|{
comment|// This is used to support iterating through an entire lexical context,
comment|// which isn't something the debugger should ever need to do.
return|return
name|clang
operator|::
name|ELR_Failure
return|;
block|}
name|virtual
name|bool
name|FindExternalVisibleDeclsByName
argument_list|(
specifier|const
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
name|clang
operator|::
name|DeclarationName
name|decl_name
argument_list|)
decl_stmt|;
name|virtual
name|void
name|CompleteType
argument_list|(
name|clang
operator|::
name|TagDecl
operator|*
name|tag_decl
argument_list|)
decl_stmt|;
name|virtual
name|void
name|CompleteType
argument_list|(
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
name|objc_decl
argument_list|)
decl_stmt|;
name|bool
name|layoutRecordType
argument_list|(
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|Record
argument_list|,
name|uint64_t
operator|&
name|Size
argument_list|,
name|uint64_t
operator|&
name|Alignment
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|FieldDecl
operator|*
argument_list|,
name|uint64_t
operator|>
operator|&
name|FieldOffsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|BaseOffsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|VirtualBaseOffsets
argument_list|)
decl_stmt|;
name|void
name|SetExternalSourceCallbacks
parameter_list|(
name|CompleteTagDeclCallback
name|tag_decl_callback
parameter_list|,
name|CompleteObjCInterfaceDeclCallback
name|objc_decl_callback
parameter_list|,
name|FindExternalVisibleDeclsByNameCallback
name|find_by_name_callback
parameter_list|,
name|LayoutRecordTypeCallback
name|layout_record_type_callback
parameter_list|,
name|void
modifier|*
name|callback_baton
parameter_list|)
block|{
name|m_callback_tag_decl
operator|=
name|tag_decl_callback
expr_stmt|;
name|m_callback_objc_decl
operator|=
name|objc_decl_callback
expr_stmt|;
name|m_callback_find_by_name
operator|=
name|find_by_name_callback
expr_stmt|;
name|m_callback_layout_record_type
operator|=
name|layout_record_type_callback
expr_stmt|;
name|m_callback_baton
operator|=
name|callback_baton
expr_stmt|;
block|}
name|void
name|RemoveExternalSourceCallbacks
parameter_list|(
name|void
modifier|*
name|callback_baton
parameter_list|)
block|{
if|if
condition|(
name|callback_baton
operator|==
name|m_callback_baton
condition|)
block|{
name|m_callback_tag_decl
operator|=
name|NULL
expr_stmt|;
name|m_callback_objc_decl
operator|=
name|NULL
expr_stmt|;
name|m_callback_find_by_name
operator|=
name|NULL
expr_stmt|;
name|m_callback_layout_record_type
operator|=
name|NULL
expr_stmt|;
block|}
block|}
name|protected
label|:
comment|//------------------------------------------------------------------
comment|// Classes that inherit from ClangExternalASTSourceCallbacks can see and modify these
comment|//------------------------------------------------------------------
name|CompleteTagDeclCallback
name|m_callback_tag_decl
decl_stmt|;
name|CompleteObjCInterfaceDeclCallback
name|m_callback_objc_decl
decl_stmt|;
name|FindExternalVisibleDeclsByNameCallback
name|m_callback_find_by_name
decl_stmt|;
name|LayoutRecordTypeCallback
name|m_callback_layout_record_type
decl_stmt|;
name|void
modifier|*
name|m_callback_baton
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_ClangExternalASTSourceCallbacks_h_
end_comment

end_unit

