begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- TypeMap.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_TypeMap_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_TypeMap_h_
end_define

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/Type.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/Iterable.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|TypeMap
block|{
name|public
label|:
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|TypeMap
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|TypeMap
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|void
name|Dump
parameter_list|(
name|Stream
modifier|*
name|s
parameter_list|,
name|bool
name|show_context
parameter_list|)
function_decl|;
name|TypeMap
name|FindTypes
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|name
parameter_list|)
function_decl|;
name|void
name|Insert
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeSP
operator|&
name|type
argument_list|)
decl_stmt|;
name|bool
name|Empty
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|InsertUnique
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeSP
operator|&
name|type
argument_list|)
decl_stmt|;
name|uint32_t
name|GetSize
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|TypeSP
name|GetTypeAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
typedef|typedef
name|std
operator|::
name|multimap
operator|<
name|lldb
operator|::
name|user_id_t
operator|,
name|lldb
operator|::
name|TypeSP
operator|>
name|collection
expr_stmt|;
typedef|typedef
name|AdaptedIterable
operator|<
name|collection
operator|,
name|lldb
operator|::
name|TypeSP
operator|,
name|map_adapter
operator|>
name|TypeIterable
expr_stmt|;
name|TypeIterable
name|Types
parameter_list|()
block|{
return|return
name|TypeIterable
argument_list|(
name|m_types
argument_list|)
return|;
block|}
name|void
name|ForEach
argument_list|(
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeSP
operator|&
name|type_sp
argument_list|)
operator|>
specifier|const
operator|&
name|callback
argument_list|)
decl|const
decl_stmt|;
name|void
name|ForEach
argument_list|(
name|std
operator|::
name|function
operator|<
name|bool
argument_list|(
name|lldb
operator|::
name|TypeSP
operator|&
name|type_sp
argument_list|)
operator|>
specifier|const
operator|&
name|callback
argument_list|)
decl_stmt|;
name|bool
name|Remove
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeSP
operator|&
name|type_sp
argument_list|)
decl_stmt|;
name|void
name|RemoveMismatchedTypes
parameter_list|(
specifier|const
name|char
modifier|*
name|qualified_typename
parameter_list|,
name|bool
name|exact_match
parameter_list|)
function_decl|;
name|void
name|RemoveMismatchedTypes
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|type_scope
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|type_basename
argument_list|,
name|lldb
operator|::
name|TypeClass
name|type_class
argument_list|,
name|bool
name|exact_match
argument_list|)
decl_stmt|;
name|void
name|RemoveMismatchedTypes
argument_list|(
name|lldb
operator|::
name|TypeClass
name|type_class
argument_list|)
decl_stmt|;
name|private
label|:
typedef|typedef
name|collection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|collection
name|m_types
decl_stmt|;
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TypeMap
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_TypeMap_h_
end_comment

end_unit

