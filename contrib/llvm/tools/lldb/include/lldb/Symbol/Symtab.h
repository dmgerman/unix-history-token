begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Symtab.h ------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Symtab_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Symtab_h_
end_define

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/RangeMap.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/UniqueCStringMap.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Mutex.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/Symbol.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|Symtab
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|IndexCollection
expr_stmt|;
typedef|typedef
name|UniqueCStringMap
operator|<
name|uint32_t
operator|>
name|NameToIndexMap
expr_stmt|;
typedef|typedef
enum|enum
name|Debug
block|{
name|eDebugNo
block|,
comment|// Not a debug symbol
name|eDebugYes
block|,
comment|// A debug symbol
name|eDebugAny
block|}
name|Debug
typedef|;
typedef|typedef
enum|enum
name|Visibility
block|{
name|eVisibilityAny
block|,
name|eVisibilityExtern
block|,
name|eVisibilityPrivate
block|}
name|Visibility
typedef|;
name|Symtab
argument_list|(
name|ObjectFile
operator|*
name|objfile
argument_list|)
expr_stmt|;
operator|~
name|Symtab
argument_list|()
expr_stmt|;
name|void
name|Reserve
parameter_list|(
name|size_t
name|count
parameter_list|)
function_decl|;
name|Symbol
modifier|*
name|Resize
parameter_list|(
name|size_t
name|count
parameter_list|)
function_decl|;
name|uint32_t
name|AddSymbol
parameter_list|(
specifier|const
name|Symbol
modifier|&
name|symbol
parameter_list|)
function_decl|;
name|size_t
name|GetNumSymbols
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SectionFileAddressesChanged
parameter_list|()
function_decl|;
name|void
name|Dump
parameter_list|(
name|Stream
modifier|*
name|s
parameter_list|,
name|Target
modifier|*
name|target
parameter_list|,
name|SortOrder
name|sort_type
parameter_list|)
function_decl|;
name|void
name|Dump
argument_list|(
name|Stream
operator|*
name|s
argument_list|,
name|Target
operator|*
name|target
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|indexes
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|GetIndexForSymbol
argument_list|(
specifier|const
name|Symbol
operator|*
name|symbol
argument_list|)
decl|const
decl_stmt|;
name|Mutex
modifier|&
name|GetMutex
parameter_list|()
block|{
return|return
name|m_mutex
return|;
block|}
name|Symbol
modifier|*
name|FindSymbolByID
argument_list|(
name|lldb
operator|::
name|user_id_t
name|uid
argument_list|)
decl|const
decl_stmt|;
name|Symbol
modifier|*
name|SymbolAtIndex
parameter_list|(
name|size_t
name|idx
parameter_list|)
function_decl|;
specifier|const
name|Symbol
modifier|*
name|SymbolAtIndex
argument_list|(
name|size_t
name|idx
argument_list|)
decl|const
decl_stmt|;
name|Symbol
modifier|*
name|FindSymbolWithType
argument_list|(
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|,
name|uint32_t
operator|&
name|start_idx
argument_list|)
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesWithType
argument_list|(
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|indexes
argument_list|,
name|uint32_t
name|start_idx
operator|=
literal|0
argument_list|,
name|uint32_t
name|end_index
operator|=
name|UINT32_MAX
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesWithTypeAndFlagsValue
argument_list|(
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|uint32_t
name|flags_value
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|indexes
argument_list|,
name|uint32_t
name|start_idx
operator|=
literal|0
argument_list|,
name|uint32_t
name|end_index
operator|=
name|UINT32_MAX
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesWithType
argument_list|(
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|matches
argument_list|,
name|uint32_t
name|start_idx
operator|=
literal|0
argument_list|,
name|uint32_t
name|end_index
operator|=
name|UINT32_MAX
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesWithName
argument_list|(
specifier|const
name|ConstString
operator|&
name|symbol_name
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|matches
argument_list|)
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesWithName
argument_list|(
specifier|const
name|ConstString
operator|&
name|symbol_name
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|matches
argument_list|)
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesWithNameAndType
argument_list|(
specifier|const
name|ConstString
operator|&
name|symbol_name
argument_list|,
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|matches
argument_list|)
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesWithNameAndType
argument_list|(
specifier|const
name|ConstString
operator|&
name|symbol_name
argument_list|,
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|matches
argument_list|)
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesMatchingRegExAndType
argument_list|(
specifier|const
name|RegularExpression
operator|&
name|regex
argument_list|,
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|indexes
argument_list|)
decl_stmt|;
name|uint32_t
name|AppendSymbolIndexesMatchingRegExAndType
argument_list|(
specifier|const
name|RegularExpression
operator|&
name|regex
argument_list|,
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|indexes
argument_list|)
decl_stmt|;
name|size_t
name|FindAllSymbolsWithNameAndType
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|,
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|symbol_indexes
argument_list|)
decl_stmt|;
name|size_t
name|FindAllSymbolsWithNameAndType
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|,
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|symbol_indexes
argument_list|)
decl_stmt|;
name|size_t
name|FindAllSymbolsMatchingRexExAndType
argument_list|(
specifier|const
name|RegularExpression
operator|&
name|regex
argument_list|,
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|symbol_indexes
argument_list|)
decl_stmt|;
name|Symbol
modifier|*
name|FindFirstSymbolWithNameAndType
argument_list|(
specifier|const
name|ConstString
operator|&
name|name
argument_list|,
name|lldb
operator|::
name|SymbolType
name|symbol_type
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|)
decl_stmt|;
name|Symbol
modifier|*
name|FindSymbolContainingFileAddress
argument_list|(
name|lldb
operator|::
name|addr_t
name|file_addr
argument_list|,
specifier|const
name|uint32_t
operator|*
name|indexes
argument_list|,
name|uint32_t
name|num_indexes
argument_list|)
decl_stmt|;
name|Symbol
modifier|*
name|FindSymbolContainingFileAddress
argument_list|(
name|lldb
operator|::
name|addr_t
name|file_addr
argument_list|)
decl_stmt|;
name|size_t
name|FindFunctionSymbols
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|name
parameter_list|,
name|uint32_t
name|name_type_mask
parameter_list|,
name|SymbolContextList
modifier|&
name|sc_list
parameter_list|)
function_decl|;
name|void
name|CalculateSymbolSizes
parameter_list|()
function_decl|;
name|void
name|SortSymbolIndexesByValue
argument_list|(
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|indexes
argument_list|,
name|bool
name|remove_duplicates
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|void
name|DumpSymbolHeader
parameter_list|(
name|Stream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|Finalize
parameter_list|()
block|{
comment|// Shrink to fit the symbols so we don't waste memory
if|if
condition|(
name|m_symbols
operator|.
name|capacity
argument_list|()
operator|>
name|m_symbols
operator|.
name|size
argument_list|()
condition|)
block|{
name|collection
name|new_symbols
argument_list|(
name|m_symbols
operator|.
name|begin
argument_list|()
argument_list|,
name|m_symbols
operator|.
name|end
argument_list|()
argument_list|)
decl_stmt|;
name|m_symbols
operator|.
name|swap
argument_list|(
name|new_symbols
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|AppendSymbolNamesToMap
argument_list|(
specifier|const
name|IndexCollection
operator|&
name|indexes
argument_list|,
name|bool
name|add_demangled
argument_list|,
name|bool
name|add_mangled
argument_list|,
name|NameToIndexMap
operator|&
name|name_to_index_map
argument_list|)
decl|const
decl_stmt|;
name|ObjectFile
modifier|*
name|GetObjectFile
parameter_list|()
block|{
return|return
name|m_objfile
return|;
block|}
name|protected
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Symbol
operator|>
name|collection
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
typedef|typedef
name|RangeDataVector
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|lldb
operator|::
name|addr_t
operator|,
name|uint32_t
operator|>
name|FileRangeToIndexMap
expr_stmt|;
name|void
name|InitNameIndexes
parameter_list|()
function_decl|;
name|void
name|InitAddressIndexes
parameter_list|()
function_decl|;
name|ObjectFile
modifier|*
name|m_objfile
decl_stmt|;
name|collection
name|m_symbols
decl_stmt|;
name|FileRangeToIndexMap
name|m_file_addr_to_index
decl_stmt|;
name|UniqueCStringMap
operator|<
name|uint32_t
operator|>
name|m_name_to_index
expr_stmt|;
name|UniqueCStringMap
operator|<
name|uint32_t
operator|>
name|m_basename_to_index
expr_stmt|;
name|UniqueCStringMap
operator|<
name|uint32_t
operator|>
name|m_method_to_index
expr_stmt|;
name|UniqueCStringMap
operator|<
name|uint32_t
operator|>
name|m_selector_to_index
expr_stmt|;
name|mutable
name|Mutex
name|m_mutex
decl_stmt|;
comment|// Provide thread safety for this symbol table
name|bool
name|m_file_addr_to_index_computed
range|:
literal|1
decl_stmt|,
name|m_name_indexes_computed
range|:
literal|1
decl_stmt|;
name|private
label|:
name|bool
name|CheckSymbolAtIndex
argument_list|(
name|size_t
name|idx
argument_list|,
name|Debug
name|symbol_debug_type
argument_list|,
name|Visibility
name|symbol_visibility
argument_list|)
decl|const
block|{
switch|switch
condition|(
name|symbol_debug_type
condition|)
block|{
case|case
name|eDebugNo
case|:
if|if
condition|(
name|m_symbols
index|[
name|idx
index|]
operator|.
name|IsDebug
argument_list|()
operator|==
name|true
condition|)
return|return
name|false
return|;
break|break;
case|case
name|eDebugYes
case|:
if|if
condition|(
name|m_symbols
index|[
name|idx
index|]
operator|.
name|IsDebug
argument_list|()
operator|==
name|false
condition|)
return|return
name|false
return|;
break|break;
case|case
name|eDebugAny
case|:
break|break;
block|}
switch|switch
condition|(
name|symbol_visibility
condition|)
block|{
case|case
name|eVisibilityAny
case|:
return|return
name|true
return|;
case|case
name|eVisibilityExtern
case|:
return|return
name|m_symbols
index|[
name|idx
index|]
operator|.
name|IsExternal
argument_list|()
return|;
case|case
name|eVisibilityPrivate
case|:
return|return
operator|!
name|m_symbols
index|[
name|idx
index|]
operator|.
name|IsExternal
argument_list|()
return|;
block|}
return|return
name|false
return|;
block|}
name|void
name|SymbolIndicesToSymbolContextList
argument_list|(
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|symbol_indexes
argument_list|,
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Symtab
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_Symtab_h_
end_comment

end_unit

