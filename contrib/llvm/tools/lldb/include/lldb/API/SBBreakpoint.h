begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBBreakpoint.h ------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBBreakpoint_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBBreakpoint_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_decl_stmt
name|class
name|SBBreakpointListImpl
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|LLDB_API
name|SBBreakpoint
block|{
name|public
label|:
typedef|typedef
name|bool
argument_list|(
operator|*
name|BreakpointHitCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|SBProcess
operator|&
name|process
argument_list|,
name|SBThread
operator|&
name|thread
argument_list|,
name|lldb
operator|::
name|SBBreakpointLocation
operator|&
name|location
argument_list|)
expr_stmt|;
name|SBBreakpoint
argument_list|()
expr_stmt|;
name|SBBreakpoint
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBreakpoint
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBBreakpoint
argument_list|()
expr_stmt|;
specifier|const
name|lldb
operator|::
name|SBBreakpoint
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBBreakpoint
operator|&
name|rhs
operator|)
expr_stmt|;
comment|// Tests to see if the opaque breakpoint object in this object matches the
comment|// opaque breakpoint object in "rhs".
name|bool
name|operator
operator|==
operator|(
specifier|const
name|lldb
operator|::
name|SBBreakpoint
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|lldb
operator|::
name|SBBreakpoint
operator|&
name|rhs
operator|)
expr_stmt|;
name|break_id_t
name|GetID
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|void
name|ClearAllBreakpointSites
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBBreakpointLocation
name|FindLocationByAddress
argument_list|(
argument|lldb::addr_t vm_addr
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|break_id_t
name|FindLocationIDByAddress
argument_list|(
argument|lldb::addr_t vm_addr
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBBreakpointLocation
name|FindLocationByID
argument_list|(
argument|lldb::break_id_t bp_loc_id
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBBreakpointLocation
name|GetLocationAtIndex
argument_list|(
argument|uint32_t index
argument_list|)
expr_stmt|;
name|void
name|SetEnabled
parameter_list|(
name|bool
name|enable
parameter_list|)
function_decl|;
name|bool
name|IsEnabled
parameter_list|()
function_decl|;
name|void
name|SetOneShot
parameter_list|(
name|bool
name|one_shot
parameter_list|)
function_decl|;
name|bool
name|IsOneShot
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsInternal
parameter_list|()
function_decl|;
name|uint32_t
name|GetHitCount
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetIgnoreCount
parameter_list|(
name|uint32_t
name|count
parameter_list|)
function_decl|;
name|uint32_t
name|GetIgnoreCount
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetCondition
parameter_list|(
specifier|const
name|char
modifier|*
name|condition
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetCondition
parameter_list|()
function_decl|;
name|void
name|SetThreadID
argument_list|(
name|lldb
operator|::
name|tid_t
name|sb_thread_id
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|tid_t
name|GetThreadID
argument_list|()
expr_stmt|;
name|void
name|SetThreadIndex
parameter_list|(
name|uint32_t
name|index
parameter_list|)
function_decl|;
name|uint32_t
name|GetThreadIndex
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetThreadName
parameter_list|(
specifier|const
name|char
modifier|*
name|thread_name
parameter_list|)
function_decl|;
specifier|const
name|char
operator|*
name|GetThreadName
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetQueueName
parameter_list|(
specifier|const
name|char
modifier|*
name|queue_name
parameter_list|)
function_decl|;
specifier|const
name|char
operator|*
name|GetQueueName
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetCallback
parameter_list|(
name|BreakpointHitCallback
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
name|void
name|SetScriptCallbackFunction
parameter_list|(
specifier|const
name|char
modifier|*
name|callback_function_name
parameter_list|)
function_decl|;
name|void
name|SetCommandLineCommands
parameter_list|(
name|SBStringList
modifier|&
name|commands
parameter_list|)
function_decl|;
name|bool
name|GetCommandLineCommands
parameter_list|(
name|SBStringList
modifier|&
name|commands
parameter_list|)
function_decl|;
name|SBError
name|SetScriptCallbackBody
parameter_list|(
specifier|const
name|char
modifier|*
name|script_body_text
parameter_list|)
function_decl|;
name|bool
name|AddName
parameter_list|(
specifier|const
name|char
modifier|*
name|new_name
parameter_list|)
function_decl|;
name|void
name|RemoveName
parameter_list|(
specifier|const
name|char
modifier|*
name|name_to_remove
parameter_list|)
function_decl|;
name|bool
name|MatchesName
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
name|void
name|GetNames
parameter_list|(
name|SBStringList
modifier|&
name|names
parameter_list|)
function_decl|;
name|size_t
name|GetNumResolvedLocations
argument_list|()
specifier|const
expr_stmt|;
name|size_t
name|GetNumLocations
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|)
decl_stmt|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|,
name|bool
name|include_locations
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|EventIsBreakpointEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|)
decl_stmt|;
specifier|static
name|lldb
operator|::
name|BreakpointEventType
name|GetBreakpointEventTypeFromEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBBreakpoint
name|GetBreakpointFromEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBBreakpointLocation
name|GetBreakpointLocationAtIndexFromEvent
argument_list|(
argument|const lldb::SBEvent&event
argument_list|,
argument|uint32_t loc_idx
argument_list|)
expr_stmt|;
specifier|static
name|uint32_t
name|GetNumBreakpointLocationsFromEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event_sp
argument_list|)
decl_stmt|;
name|private
label|:
name|friend
name|class
name|SBBreakpointList
decl_stmt|;
name|friend
name|class
name|SBBreakpointLocation
decl_stmt|;
name|friend
name|class
name|SBTarget
decl_stmt|;
name|SBBreakpoint
argument_list|(
specifier|const
name|lldb
operator|::
name|BreakpointSP
operator|&
name|bp_sp
argument_list|)
expr_stmt|;
name|lldb_private
operator|::
name|Breakpoint
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
decl_stmt|;
name|lldb_private
operator|::
name|Breakpoint
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|BreakpointSP
operator|&
name|operator
operator|*
operator|(
operator|)
expr_stmt|;
specifier|const
name|lldb
operator|::
name|BreakpointSP
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
specifier|static
name|bool
name|PrivateBreakpointHitCallback
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|lldb_private
operator|::
name|StoppointCallbackContext
operator|*
name|context
argument_list|,
name|lldb
operator|::
name|user_id_t
name|break_id
argument_list|,
name|lldb
operator|::
name|user_id_t
name|break_loc_id
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|BreakpointSP
name|m_opaque_sp
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|LLDB_API
name|SBBreakpointList
block|{
name|public
label|:
name|SBBreakpointList
argument_list|(
name|SBTarget
operator|&
name|target
argument_list|)
expr_stmt|;
operator|~
name|SBBreakpointList
argument_list|()
expr_stmt|;
name|size_t
name|GetSize
argument_list|()
specifier|const
expr_stmt|;
name|SBBreakpoint
name|GetBreakpointAtIndex
parameter_list|(
name|size_t
name|idx
parameter_list|)
function_decl|;
name|SBBreakpoint
name|FindBreakpointByID
argument_list|(
name|lldb
operator|::
name|break_id_t
argument_list|)
decl_stmt|;
name|void
name|Append
parameter_list|(
specifier|const
name|SBBreakpoint
modifier|&
name|sb_file
parameter_list|)
function_decl|;
name|bool
name|AppendIfUnique
parameter_list|(
specifier|const
name|SBBreakpoint
modifier|&
name|sb_file
parameter_list|)
function_decl|;
name|void
name|AppendByID
argument_list|(
name|lldb
operator|::
name|break_id_t
name|id
argument_list|)
decl_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|protected
label|:
name|friend
name|class
name|SBTarget
decl_stmt|;
name|void
name|CopyToBreakpointIDList
argument_list|(
name|lldb_private
operator|::
name|BreakpointIDList
operator|&
name|bp_id_list
argument_list|)
decl_stmt|;
name|private
label|:
name|std
operator|::
name|shared_ptr
operator|<
name|SBBreakpointListImpl
operator|>
name|m_opaque_sp
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBBreakpoint_h_
end_comment

end_unit

