begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBEvent.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBEvent_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBEvent_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|SBBroadcaster
decl_stmt|;
name|class
name|SBEvent
block|{
name|public
label|:
name|SBEvent
argument_list|()
expr_stmt|;
name|SBEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|rhs
argument_list|)
expr_stmt|;
comment|// Make an event that contains a C string.
name|SBEvent
argument_list|(
argument|uint32_t event
argument_list|,
argument|const char *cstr
argument_list|,
argument|uint32_t cstr_len
argument_list|)
empty_stmt|;
operator|~
name|SBEvent
argument_list|()
expr_stmt|;
specifier|const
name|SBEvent
modifier|&
name|operator
init|=
operator|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|rhs
operator|)
decl_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
modifier|*
name|GetDataFlavor
parameter_list|()
function_decl|;
name|uint32_t
name|GetType
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|SBBroadcaster
name|GetBroadcaster
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|GetBroadcasterClass
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|BroadcasterMatchesPtr
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|*
name|broadcaster
argument_list|)
decl_stmt|;
name|bool
name|BroadcasterMatchesRef
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|)
decl_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|char
modifier|*
name|GetCStringFromEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|)
decl_stmt|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|)
decl_stmt|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
name|friend
name|class
name|SBListener
decl_stmt|;
name|friend
name|class
name|SBBroadcaster
decl_stmt|;
name|friend
name|class
name|SBBreakpoint
decl_stmt|;
name|friend
name|class
name|SBDebugger
decl_stmt|;
name|friend
name|class
name|SBProcess
decl_stmt|;
name|friend
name|class
name|SBThread
decl_stmt|;
name|friend
name|class
name|SBWatchpoint
decl_stmt|;
name|SBEvent
argument_list|(
name|lldb
operator|::
name|EventSP
operator|&
name|event_sp
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|EventSP
operator|&
name|GetSP
argument_list|()
specifier|const
expr_stmt|;
name|void
name|reset
argument_list|(
name|lldb
operator|::
name|EventSP
operator|&
name|event_sp
argument_list|)
decl_stmt|;
name|void
name|reset
argument_list|(
name|lldb_private
operator|::
name|Event
operator|*
name|event
argument_list|)
decl_stmt|;
name|lldb_private
operator|::
name|Event
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|mutable
name|lldb
operator|::
name|EventSP
name|m_event_sp
expr_stmt|;
name|mutable
name|lldb_private
operator|::
name|Event
operator|*
name|m_opaque_ptr
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBEvent_h_
end_comment

end_unit

