begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBBroadcaster.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBBroadcaster_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBBroadcaster_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|SBBroadcaster
block|{
name|public
label|:
name|SBBroadcaster
argument_list|()
expr_stmt|;
name|SBBroadcaster
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
expr_stmt|;
name|SBBroadcaster
argument_list|(
specifier|const
name|SBBroadcaster
operator|&
name|rhs
argument_list|)
expr_stmt|;
specifier|const
name|SBBroadcaster
modifier|&
name|operator
init|=
operator|(
specifier|const
name|SBBroadcaster
operator|&
name|rhs
operator|)
decl_stmt|;
operator|~
name|SBBroadcaster
argument_list|()
expr_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|void
name|BroadcastEventByType
parameter_list|(
name|uint32_t
name|event_type
parameter_list|,
name|bool
name|unique
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|BroadcastEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|,
name|bool
name|unique
operator|=
name|false
argument_list|)
decl_stmt|;
name|void
name|AddInitialEventsToListener
argument_list|(
specifier|const
name|lldb
operator|::
name|SBListener
operator|&
name|listener
argument_list|,
name|uint32_t
name|requested_events
argument_list|)
decl_stmt|;
name|uint32_t
name|AddListener
argument_list|(
specifier|const
name|lldb
operator|::
name|SBListener
operator|&
name|listener
argument_list|,
name|uint32_t
name|event_mask
argument_list|)
decl_stmt|;
specifier|const
name|char
operator|*
name|GetName
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|EventTypeHasListeners
parameter_list|(
name|uint32_t
name|event_type
parameter_list|)
function_decl|;
name|bool
name|RemoveListener
argument_list|(
specifier|const
name|lldb
operator|::
name|SBListener
operator|&
name|listener
argument_list|,
name|uint32_t
name|event_mask
operator|=
name|UINT32_MAX
argument_list|)
decl_stmt|;
comment|// This comparison is checking if the internal opaque pointer value
comment|// is equal to that in "rhs".
name|bool
name|operator
operator|==
operator|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
comment|// This comparison is checking if the internal opaque pointer value
comment|// is not equal to that in "rhs".
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
comment|// This comparison is checking if the internal opaque pointer value
comment|// is less than that in "rhs" so SBBroadcaster objects can be contained
comment|// in ordered containers.
name|bool
name|operator
operator|<
operator|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
name|protected
label|:
name|friend
name|class
name|SBCommandInterpreter
decl_stmt|;
name|friend
name|class
name|SBCommunication
decl_stmt|;
name|friend
name|class
name|SBEvent
decl_stmt|;
name|friend
name|class
name|SBListener
decl_stmt|;
name|friend
name|class
name|SBProcess
decl_stmt|;
name|friend
name|class
name|SBTarget
decl_stmt|;
name|SBBroadcaster
argument_list|(
argument|lldb_private::Broadcaster *broadcaster
argument_list|,
argument|bool owns
argument_list|)
empty_stmt|;
name|lldb_private
operator|::
name|Broadcaster
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|void
name|reset
argument_list|(
name|lldb_private
operator|::
name|Broadcaster
operator|*
name|broadcaster
argument_list|,
name|bool
name|owns
argument_list|)
decl_stmt|;
name|private
label|:
name|lldb
operator|::
name|BroadcasterSP
name|m_opaque_sp
expr_stmt|;
name|lldb_private
operator|::
name|Broadcaster
operator|*
name|m_opaque_ptr
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBBroadcaster_h_
end_comment

end_unit

