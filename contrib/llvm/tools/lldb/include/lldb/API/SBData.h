begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBData.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBData_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBData_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|LLDB_API
name|SBData
block|{
name|public
label|:
name|SBData
argument_list|()
expr_stmt|;
name|SBData
argument_list|(
specifier|const
name|SBData
operator|&
name|rhs
argument_list|)
expr_stmt|;
specifier|const
name|SBData
modifier|&
name|operator
init|=
operator|(
specifier|const
name|SBData
operator|&
name|rhs
operator|)
decl_stmt|;
operator|~
name|SBData
argument_list|()
expr_stmt|;
name|uint8_t
name|GetAddressByteSize
parameter_list|()
function_decl|;
name|void
name|SetAddressByteSize
parameter_list|(
name|uint8_t
name|addr_byte_size
parameter_list|)
function_decl|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|bool
name|IsValid
parameter_list|()
function_decl|;
name|size_t
name|GetByteSize
parameter_list|()
function_decl|;
name|lldb
operator|::
name|ByteOrder
name|GetByteOrder
argument_list|()
expr_stmt|;
name|void
name|SetByteOrder
argument_list|(
name|lldb
operator|::
name|ByteOrder
name|endian
argument_list|)
decl_stmt|;
name|float
name|GetFloat
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|double
name|GetDouble
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|long
name|double
name|GetLongDouble
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|GetAddress
argument_list|(
argument|lldb::SBError&error
argument_list|,
argument|lldb::offset_t offset
argument_list|)
expr_stmt|;
name|uint8_t
name|GetUnsignedInt8
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|uint16_t
name|GetUnsignedInt16
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|uint32_t
name|GetUnsignedInt32
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|uint64_t
name|GetUnsignedInt64
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|int8_t
name|GetSignedInt8
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|int16_t
name|GetSignedInt16
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|int32_t
name|GetSignedInt32
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|int64_t
name|GetSignedInt64
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetString
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|)
decl_stmt|;
name|size_t
name|ReadRawData
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|offset_t
name|offset
argument_list|,
name|void
operator|*
name|buf
argument_list|,
name|size_t
name|size
argument_list|)
decl_stmt|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|,
name|lldb
operator|::
name|addr_t
name|base_addr
operator|=
name|LLDB_INVALID_ADDRESS
argument_list|)
decl_stmt|;
comment|// it would be nice to have SetData(SBError, const void*, size_t) when
comment|// endianness and address size can be
comment|// inferred from the existing DataExtractor, but having two SetData()
comment|// signatures triggers a SWIG bug where
comment|// the typemap isn't applied before resolving the overload, and thus the right
comment|// function never gets called
name|void
name|SetData
argument_list|(
name|lldb
operator|::
name|SBError
operator|&
name|error
argument_list|,
specifier|const
name|void
operator|*
name|buf
argument_list|,
name|size_t
name|size
argument_list|,
name|lldb
operator|::
name|ByteOrder
name|endian
argument_list|,
name|uint8_t
name|addr_size
argument_list|)
decl_stmt|;
comment|// see SetData() for why we don't have Append(const void* buf, size_t size)
name|bool
name|Append
parameter_list|(
specifier|const
name|SBData
modifier|&
name|rhs
parameter_list|)
function_decl|;
specifier|static
name|lldb
operator|::
name|SBData
name|CreateDataFromCString
argument_list|(
argument|lldb::ByteOrder endian
argument_list|,
argument|uint32_t addr_byte_size
argument_list|,
argument|const char *data
argument_list|)
expr_stmt|;
comment|// in the following CreateData*() and SetData*() prototypes, the two
comment|// parameters array and array_len
comment|// should not be renamed or rearranged, because doing so will break the SWIG
comment|// typemap
specifier|static
name|lldb
operator|::
name|SBData
name|CreateDataFromUInt64Array
argument_list|(
argument|lldb::ByteOrder endian
argument_list|,
argument|uint32_t addr_byte_size
argument_list|,
argument|uint64_t *array
argument_list|,
argument|size_t array_len
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBData
name|CreateDataFromUInt32Array
argument_list|(
argument|lldb::ByteOrder endian
argument_list|,
argument|uint32_t addr_byte_size
argument_list|,
argument|uint32_t *array
argument_list|,
argument|size_t array_len
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBData
name|CreateDataFromSInt64Array
argument_list|(
argument|lldb::ByteOrder endian
argument_list|,
argument|uint32_t addr_byte_size
argument_list|,
argument|int64_t *array
argument_list|,
argument|size_t array_len
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBData
name|CreateDataFromSInt32Array
argument_list|(
argument|lldb::ByteOrder endian
argument_list|,
argument|uint32_t addr_byte_size
argument_list|,
argument|int32_t *array
argument_list|,
argument|size_t array_len
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBData
name|CreateDataFromDoubleArray
argument_list|(
argument|lldb::ByteOrder endian
argument_list|,
argument|uint32_t addr_byte_size
argument_list|,
argument|double *array
argument_list|,
argument|size_t array_len
argument_list|)
expr_stmt|;
name|bool
name|SetDataFromCString
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|)
function_decl|;
name|bool
name|SetDataFromUInt64Array
parameter_list|(
name|uint64_t
modifier|*
name|array
parameter_list|,
name|size_t
name|array_len
parameter_list|)
function_decl|;
name|bool
name|SetDataFromUInt32Array
parameter_list|(
name|uint32_t
modifier|*
name|array
parameter_list|,
name|size_t
name|array_len
parameter_list|)
function_decl|;
name|bool
name|SetDataFromSInt64Array
parameter_list|(
name|int64_t
modifier|*
name|array
parameter_list|,
name|size_t
name|array_len
parameter_list|)
function_decl|;
name|bool
name|SetDataFromSInt32Array
parameter_list|(
name|int32_t
modifier|*
name|array
parameter_list|,
name|size_t
name|array_len
parameter_list|)
function_decl|;
name|bool
name|SetDataFromDoubleArray
parameter_list|(
name|double
modifier|*
name|array
parameter_list|,
name|size_t
name|array_len
parameter_list|)
function_decl|;
name|protected
label|:
comment|// Mimic shared pointer...
name|lldb_private
operator|::
name|DataExtractor
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|lldb_private
operator|::
name|DataExtractor
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
decl_stmt|;
name|lldb
operator|::
name|DataExtractorSP
operator|&
name|operator
operator|*
operator|(
operator|)
expr_stmt|;
specifier|const
name|lldb
operator|::
name|DataExtractorSP
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
name|SBData
argument_list|(
specifier|const
name|lldb
operator|::
name|DataExtractorSP
operator|&
name|data_sp
argument_list|)
expr_stmt|;
name|void
name|SetOpaque
argument_list|(
specifier|const
name|lldb
operator|::
name|DataExtractorSP
operator|&
name|data_sp
argument_list|)
decl_stmt|;
name|private
label|:
name|friend
name|class
name|SBInstruction
decl_stmt|;
name|friend
name|class
name|SBProcess
decl_stmt|;
name|friend
name|class
name|SBSection
decl_stmt|;
name|friend
name|class
name|SBTarget
decl_stmt|;
name|friend
name|class
name|SBValue
decl_stmt|;
name|lldb
operator|::
name|DataExtractorSP
name|m_opaque_sp
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBData_h_
end_comment

end_unit

