begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBEvent.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBExpressionOptions_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBExpressionOptions_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|LLDB_API
name|SBExpressionOptions
block|{
name|public
label|:
name|SBExpressionOptions
argument_list|()
expr_stmt|;
name|SBExpressionOptions
argument_list|(
specifier|const
name|lldb
operator|::
name|SBExpressionOptions
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBExpressionOptions
argument_list|()
expr_stmt|;
specifier|const
name|SBExpressionOptions
modifier|&
name|operator
init|=
operator|(
specifier|const
name|lldb
operator|::
name|SBExpressionOptions
operator|&
name|rhs
operator|)
decl_stmt|;
name|bool
name|GetCoerceResultToId
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetCoerceResultToId
parameter_list|(
name|bool
name|coerce
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|GetUnwindOnError
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetUnwindOnError
parameter_list|(
name|bool
name|unwind
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|GetIgnoreBreakpoints
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetIgnoreBreakpoints
parameter_list|(
name|bool
name|ignore
init|=
name|true
parameter_list|)
function_decl|;
name|lldb
operator|::
name|DynamicValueType
name|GetFetchDynamicValue
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetFetchDynamicValue
argument_list|(
name|lldb
operator|::
name|DynamicValueType
name|dynamic
operator|=
name|lldb
operator|::
name|eDynamicCanRunTarget
argument_list|)
decl_stmt|;
name|uint32_t
name|GetTimeoutInMicroSeconds
argument_list|()
specifier|const
expr_stmt|;
comment|// Set the timeout for the expression, 0 means wait forever.
name|void
name|SetTimeoutInMicroSeconds
parameter_list|(
name|uint32_t
name|timeout
init|=
literal|0
parameter_list|)
function_decl|;
name|uint32_t
name|GetOneThreadTimeoutInMicroSeconds
argument_list|()
specifier|const
expr_stmt|;
comment|// Set the timeout for running on one thread, 0 means use the default
comment|// behavior.
comment|// If you set this higher than the overall timeout, you'll get an error when
comment|// you
comment|// try to run the expression.
name|void
name|SetOneThreadTimeoutInMicroSeconds
parameter_list|(
name|uint32_t
name|timeout
init|=
literal|0
parameter_list|)
function_decl|;
name|bool
name|GetTryAllThreads
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetTryAllThreads
parameter_list|(
name|bool
name|run_others
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|GetStopOthers
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetStopOthers
parameter_list|(
name|bool
name|stop_others
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|GetTrapExceptions
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetTrapExceptions
parameter_list|(
name|bool
name|trap_exceptions
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|SetLanguage
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|)
decl_stmt|;
name|void
name|SetCancelCallback
argument_list|(
name|lldb
operator|::
name|ExpressionCancelCallback
name|callback
argument_list|,
name|void
operator|*
name|baton
argument_list|)
decl_stmt|;
name|bool
name|GetGenerateDebugInfo
parameter_list|()
function_decl|;
name|void
name|SetGenerateDebugInfo
parameter_list|(
name|bool
name|b
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|GetSuppressPersistentResult
parameter_list|()
function_decl|;
name|void
name|SetSuppressPersistentResult
parameter_list|(
name|bool
name|b
init|=
name|false
parameter_list|)
function_decl|;
specifier|const
name|char
operator|*
name|GetPrefix
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetPrefix
parameter_list|(
specifier|const
name|char
modifier|*
name|prefix
parameter_list|)
function_decl|;
name|void
name|SetAutoApplyFixIts
parameter_list|(
name|bool
name|b
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|GetAutoApplyFixIts
parameter_list|()
function_decl|;
name|bool
name|GetTopLevel
parameter_list|()
function_decl|;
name|void
name|SetTopLevel
parameter_list|(
name|bool
name|b
init|=
name|true
parameter_list|)
function_decl|;
name|protected
label|:
name|SBExpressionOptions
argument_list|(
name|lldb_private
operator|::
name|EvaluateExpressionOptions
operator|&
name|expression_options
argument_list|)
expr_stmt|;
name|lldb_private
operator|::
name|EvaluateExpressionOptions
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|lldb_private
operator|::
name|EvaluateExpressionOptions
operator|&
name|ref
argument_list|()
specifier|const
expr_stmt|;
name|friend
name|class
name|SBFrame
decl_stmt|;
name|friend
name|class
name|SBValue
decl_stmt|;
name|friend
name|class
name|SBTarget
decl_stmt|;
name|private
label|:
comment|// This auto_pointer is made in the constructor and is always valid.
name|mutable
name|std
operator|::
name|unique_ptr
operator|<
name|lldb_private
operator|::
name|EvaluateExpressionOptions
operator|>
name|m_opaque_ap
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBExpressionOptions_h_
end_comment

end_unit

