begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBInputReader.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBInputReader_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBInputReader_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|SBInputReader
block|{
name|public
label|:
typedef|typedef
name|size_t
function_decl|(
modifier|*
name|Callback
function_decl|)
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
name|SBInputReader
modifier|*
name|reader
parameter_list|,
name|InputReaderAction
name|notification
parameter_list|,
specifier|const
name|char
modifier|*
name|bytes
parameter_list|,
name|size_t
name|bytes_len
parameter_list|)
function_decl|;
name|SBInputReader
argument_list|()
expr_stmt|;
name|SBInputReader
argument_list|(
specifier|const
name|lldb
operator|::
name|InputReaderSP
operator|&
name|reader_sp
argument_list|)
expr_stmt|;
name|SBInputReader
argument_list|(
specifier|const
name|lldb
operator|::
name|SBInputReader
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBInputReader
argument_list|()
expr_stmt|;
name|SBError
name|Initialize
argument_list|(
name|SBDebugger
operator|&
name|debugger
argument_list|,
name|Callback
name|callback
argument_list|,
name|void
operator|*
name|callback_baton
argument_list|,
name|lldb
operator|::
name|InputReaderGranularity
name|granularity
argument_list|,
specifier|const
name|char
operator|*
name|end_token
argument_list|,
specifier|const
name|char
operator|*
name|prompt
argument_list|,
name|bool
name|echo
argument_list|)
decl_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|lldb
operator|::
name|SBInputReader
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBInputReader
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|IsActive
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|IsDone
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetIsDone
parameter_list|(
name|bool
name|value
parameter_list|)
function_decl|;
name|InputReaderGranularity
name|GetGranularity
parameter_list|()
function_decl|;
name|protected
label|:
name|friend
name|class
name|SBDebugger
decl_stmt|;
name|lldb_private
operator|::
name|InputReader
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
decl_stmt|;
name|lldb
operator|::
name|InputReaderSP
operator|&
name|operator
operator|*
operator|(
operator|)
expr_stmt|;
specifier|const
name|lldb
operator|::
name|InputReaderSP
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
expr_stmt|;
name|lldb_private
operator|::
name|InputReader
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|lldb_private
operator|::
name|InputReader
operator|&
name|ref
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
specifier|static
name|size_t
name|PrivateCallback
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|lldb_private
operator|::
name|InputReader
operator|&
name|reader
argument_list|,
name|lldb
operator|::
name|InputReaderAction
name|notification
argument_list|,
specifier|const
name|char
operator|*
name|bytes
argument_list|,
name|size_t
name|bytes_len
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|InputReaderSP
name|m_opaque_sp
expr_stmt|;
name|Callback
name|m_callback_function
decl_stmt|;
name|void
modifier|*
name|m_callback_baton
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBInputReader_h_
end_comment

end_unit

