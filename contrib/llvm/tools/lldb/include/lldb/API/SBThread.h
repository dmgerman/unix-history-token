begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBThread.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBThread_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBThread_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|SBFrame
decl_stmt|;
name|class
name|SBThread
block|{
name|public
label|:
enum|enum
block|{
name|eBroadcastBitStackChanged
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|eBroadcastBitThreadSuspended
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|eBroadcastBitThreadResumed
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|eBroadcastBitSelectedFrameChanged
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|eBroadcastBitThreadSelected
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|}
enum|;
specifier|static
specifier|const
name|char
modifier|*
name|GetBroadcasterClassName
parameter_list|()
function_decl|;
name|SBThread
argument_list|()
expr_stmt|;
name|SBThread
argument_list|(
specifier|const
name|lldb
operator|::
name|SBThread
operator|&
name|thread
argument_list|)
expr_stmt|;
name|SBThread
argument_list|(
specifier|const
name|lldb
operator|::
name|ThreadSP
operator|&
name|lldb_object_sp
argument_list|)
expr_stmt|;
operator|~
name|SBThread
argument_list|()
expr_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|lldb
operator|::
name|StopReason
name|GetStopReason
argument_list|()
expr_stmt|;
comment|/// Get the number of words associated with the stop reason.
comment|/// See also GetStopReasonDataAtIndex().
name|size_t
name|GetStopReasonDataCount
parameter_list|()
function_decl|;
comment|//--------------------------------------------------------------------------
comment|/// Get information associated with a stop reason.
comment|///
comment|/// Breakpoint stop reasons will have data that consists of pairs of
comment|/// breakpoint IDs followed by the breakpoint location IDs (they always come
comment|/// in pairs).
comment|///
comment|/// Stop Reason              Count Data Type
comment|/// ======================== ===== =========================================
comment|/// eStopReasonNone          0
comment|/// eStopReasonTrace         0
comment|/// eStopReasonBreakpoint    N     duple: {breakpoint id, location id}
comment|/// eStopReasonWatchpoint    1     watchpoint id
comment|/// eStopReasonSignal        1     unix signal number
comment|/// eStopReasonException     N     exception data
comment|/// eStopReasonExec          0
comment|/// eStopReasonPlanComplete  0
comment|//--------------------------------------------------------------------------
name|uint64_t
name|GetStopReasonDataAtIndex
parameter_list|(
name|uint32_t
name|idx
parameter_list|)
function_decl|;
name|size_t
name|GetStopDescription
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
name|size_t
name|dst_len
parameter_list|)
function_decl|;
name|SBValue
name|GetStopReturnValue
parameter_list|()
function_decl|;
name|lldb
operator|::
name|tid_t
name|GetThreadID
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|GetIndexID
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|GetName
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|GetQueueName
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|queue_id_t
name|GetQueueID
argument_list|()
specifier|const
expr_stmt|;
name|void
name|StepOver
argument_list|(
name|lldb
operator|::
name|RunMode
name|stop_other_threads
operator|=
name|lldb
operator|::
name|eOnlyDuringStepping
argument_list|)
decl_stmt|;
name|void
name|StepInto
argument_list|(
name|lldb
operator|::
name|RunMode
name|stop_other_threads
operator|=
name|lldb
operator|::
name|eOnlyDuringStepping
argument_list|)
decl_stmt|;
name|void
name|StepInto
argument_list|(
specifier|const
name|char
operator|*
name|target_name
argument_list|,
name|lldb
operator|::
name|RunMode
name|stop_other_threads
operator|=
name|lldb
operator|::
name|eOnlyDuringStepping
argument_list|)
decl_stmt|;
name|void
name|StepOut
parameter_list|()
function_decl|;
name|void
name|StepOutOfFrame
argument_list|(
name|lldb
operator|::
name|SBFrame
operator|&
name|frame
argument_list|)
decl_stmt|;
name|void
name|StepInstruction
parameter_list|(
name|bool
name|step_over
parameter_list|)
function_decl|;
name|SBError
name|StepOverUntil
argument_list|(
name|lldb
operator|::
name|SBFrame
operator|&
name|frame
argument_list|,
name|lldb
operator|::
name|SBFileSpec
operator|&
name|file_spec
argument_list|,
name|uint32_t
name|line
argument_list|)
decl_stmt|;
name|SBError
name|JumpToLine
argument_list|(
name|lldb
operator|::
name|SBFileSpec
operator|&
name|file_spec
argument_list|,
name|uint32_t
name|line
argument_list|)
decl_stmt|;
name|void
name|RunToAddress
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl_stmt|;
name|SBError
name|ReturnFromFrame
parameter_list|(
name|SBFrame
modifier|&
name|frame
parameter_list|,
name|SBValue
modifier|&
name|return_value
parameter_list|)
function_decl|;
comment|//--------------------------------------------------------------------------
comment|/// LLDB currently supports process centric debugging which means when any
comment|/// thread in a process stops, all other threads are stopped. The Suspend()
comment|/// call here tells our process to suspend a thread and not let it run when
comment|/// the other threads in a process are allowed to run. So when
comment|/// SBProcess::Continue() is called, any threads that aren't suspended will
comment|/// be allowed to run. If any of the SBThread functions for stepping are
comment|/// called (StepOver, StepInto, StepOut, StepInstruction, RunToAddres), the
comment|/// thread will not be allowed to run and these funtions will simply return.
comment|///
comment|/// Eventually we plan to add support for thread centric debugging where
comment|/// each thread is controlled individually and each thread would broadcast
comment|/// its state, but we haven't implemented this yet.
comment|///
comment|/// Likewise the SBThread::Resume() call will again allow the thread to run
comment|/// when the process is continued.
comment|///
comment|/// Suspend() and Resume() functions are not currently reference counted, if
comment|/// anyone has the need for them to be reference counted, please let us
comment|/// know.
comment|//--------------------------------------------------------------------------
name|bool
name|Suspend
parameter_list|()
function_decl|;
name|bool
name|Resume
parameter_list|()
function_decl|;
name|bool
name|IsSuspended
parameter_list|()
function_decl|;
name|bool
name|IsStopped
parameter_list|()
function_decl|;
name|uint32_t
name|GetNumFrames
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBFrame
name|GetFrameAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBFrame
name|GetSelectedFrame
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBFrame
name|SetSelectedFrame
argument_list|(
argument|uint32_t frame_idx
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|EventIsThreadEvent
parameter_list|(
specifier|const
name|SBEvent
modifier|&
name|event
parameter_list|)
function_decl|;
specifier|static
name|SBFrame
name|GetStackFrameFromEvent
parameter_list|(
specifier|const
name|SBEvent
modifier|&
name|event
parameter_list|)
function_decl|;
specifier|static
name|SBThread
name|GetThreadFromEvent
parameter_list|(
specifier|const
name|SBEvent
modifier|&
name|event
parameter_list|)
function_decl|;
name|lldb
operator|::
name|SBProcess
name|GetProcess
argument_list|()
expr_stmt|;
specifier|const
name|lldb
operator|::
name|SBThread
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBThread
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|lldb
operator|::
name|SBThread
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|lldb
operator|::
name|SBThread
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetStatus
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|status
argument_list|)
decl|const
decl_stmt|;
name|SBThread
name|GetExtendedBacktrace
parameter_list|(
specifier|const
name|char
modifier|*
name|type
parameter_list|)
function_decl|;
name|protected
label|:
name|friend
name|class
name|SBBreakpoint
decl_stmt|;
name|friend
name|class
name|SBBreakpointLocation
decl_stmt|;
name|friend
name|class
name|SBFrame
decl_stmt|;
name|friend
name|class
name|SBProcess
decl_stmt|;
name|friend
name|class
name|SBDebugger
decl_stmt|;
name|friend
name|class
name|SBValue
decl_stmt|;
name|void
name|SetThread
argument_list|(
specifier|const
name|lldb
operator|::
name|ThreadSP
operator|&
name|lldb_object_sp
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|SWIG
name|SBError
name|ResumeNewPlan
argument_list|(
name|lldb_private
operator|::
name|ExecutionContext
operator|&
name|exe_ctx
argument_list|,
name|lldb_private
operator|::
name|ThreadPlan
operator|*
name|new_plan
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|private
label|:
name|lldb
operator|::
name|ExecutionContextRefSP
name|m_opaque_sp
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBThread_h_
end_comment

end_unit

