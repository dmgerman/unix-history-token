begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBCommandInterpreter.h ----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBCommandInterpreter_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBCommandInterpreter_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<memory>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/API/SBDebugger.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|LLDB_API
name|SBCommandInterpreterRunOptions
block|{
name|friend
name|class
name|SBDebugger
decl_stmt|;
name|friend
name|class
name|SBCommandInterpreter
decl_stmt|;
name|public
label|:
name|SBCommandInterpreterRunOptions
argument_list|()
expr_stmt|;
operator|~
name|SBCommandInterpreterRunOptions
argument_list|()
expr_stmt|;
name|bool
name|GetStopOnContinue
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetStopOnContinue
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|GetStopOnError
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetStopOnError
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|GetStopOnCrash
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetStopOnCrash
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|GetEchoCommands
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetEchoCommands
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|GetPrintResults
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetPrintResults
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|GetAddToHistory
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetAddToHistory
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|private
label|:
name|lldb_private
operator|::
name|CommandInterpreterRunOptions
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|lldb_private
operator|::
name|CommandInterpreterRunOptions
operator|&
name|ref
argument_list|()
specifier|const
expr_stmt|;
comment|// This is set in the constructor and will always be valid.
name|mutable
name|std
operator|::
name|unique_ptr
operator|<
name|lldb_private
operator|::
name|CommandInterpreterRunOptions
operator|>
name|m_opaque_up
expr_stmt|;
block|}
empty_stmt|;
name|class
name|SBCommandInterpreter
block|{
name|public
label|:
enum|enum
block|{
name|eBroadcastBitThreadShouldExit
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|eBroadcastBitResetPrompt
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|eBroadcastBitQuitCommandReceived
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
comment|// User entered quit
name|eBroadcastBitAsynchronousOutputData
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|eBroadcastBitAsynchronousErrorData
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|}
enum|;
name|SBCommandInterpreter
argument_list|(
specifier|const
name|lldb
operator|::
name|SBCommandInterpreter
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBCommandInterpreter
argument_list|()
expr_stmt|;
specifier|const
name|lldb
operator|::
name|SBCommandInterpreter
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBCommandInterpreter
operator|&
name|rhs
operator|)
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetArgumentTypeAsCString
argument_list|(
specifier|const
name|lldb
operator|::
name|CommandArgumentType
name|arg_type
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetArgumentDescriptionAsCString
argument_list|(
specifier|const
name|lldb
operator|::
name|CommandArgumentType
name|arg_type
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|EventIsCommandInterpreterEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|)
decl_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|CommandExists
parameter_list|(
specifier|const
name|char
modifier|*
name|cmd
parameter_list|)
function_decl|;
name|bool
name|AliasExists
parameter_list|(
specifier|const
name|char
modifier|*
name|cmd
parameter_list|)
function_decl|;
name|lldb
operator|::
name|SBBroadcaster
name|GetBroadcaster
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetBroadcasterClass
parameter_list|()
function_decl|;
name|bool
name|HasCommands
parameter_list|()
function_decl|;
name|bool
name|HasAliases
parameter_list|()
function_decl|;
name|bool
name|HasAliasOptions
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBProcess
name|GetProcess
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBDebugger
name|GetDebugger
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBCommand
name|AddMultiwordCommand
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|help
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBCommand
name|AddCommand
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|lldb
operator|::
name|SBCommandPluginInterface
operator|*
name|impl
argument_list|,
specifier|const
name|char
operator|*
name|help
argument_list|)
expr_stmt|;
name|void
name|SourceInitFileInHomeDirectory
argument_list|(
name|lldb
operator|::
name|SBCommandReturnObject
operator|&
name|result
argument_list|)
decl_stmt|;
name|void
name|SourceInitFileInCurrentWorkingDirectory
argument_list|(
name|lldb
operator|::
name|SBCommandReturnObject
operator|&
name|result
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|ReturnStatus
name|HandleCommand
argument_list|(
argument|const char *command_line
argument_list|,
argument|lldb::SBCommandReturnObject&result
argument_list|,
argument|bool add_to_history = false
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|ReturnStatus
name|HandleCommand
argument_list|(
argument|const char *command_line
argument_list|,
argument|SBExecutionContext&exe_ctx
argument_list|,
argument|SBCommandReturnObject&result
argument_list|,
argument|bool add_to_history = false
argument_list|)
expr_stmt|;
name|void
name|HandleCommandsFromFile
argument_list|(
name|lldb
operator|::
name|SBFileSpec
operator|&
name|file
argument_list|,
name|lldb
operator|::
name|SBExecutionContext
operator|&
name|override_context
argument_list|,
name|lldb
operator|::
name|SBCommandInterpreterRunOptions
operator|&
name|options
argument_list|,
name|lldb
operator|::
name|SBCommandReturnObject
name|result
argument_list|)
decl_stmt|;
comment|// The pointer based interface is not useful in SWIG, since the cursor& last_char arguments are string pointers INTO current_line
comment|// and you can't do that in a scripting language interface in general...
comment|// In either case, the way this works is that the you give it a line and cursor position in the line.  The function
comment|// will return the number of completions.  The matches list will contain number_of_completions + 1 elements.  The first
comment|// element is the common substring after the cursor position for all the matches.  The rest of the elements are the
comment|// matches.  The first element is useful if you are emulating the common shell behavior where the tab completes
comment|// to the string that is common among all the matches, then you should first check if the first element is non-empty,
comment|// and if so just insert it and move the cursor to the end of the insertion.  The next tab will return an empty
comment|// common substring, and a list of choices (if any), at which point you should display the choices and let the user
comment|// type further to disambiguate.
name|int
name|HandleCompletion
argument_list|(
specifier|const
name|char
operator|*
name|current_line
argument_list|,
specifier|const
name|char
operator|*
name|cursor
argument_list|,
specifier|const
name|char
operator|*
name|last_char
argument_list|,
name|int
name|match_start_point
argument_list|,
name|int
name|max_return_elements
argument_list|,
name|lldb
operator|::
name|SBStringList
operator|&
name|matches
argument_list|)
decl_stmt|;
name|int
name|HandleCompletion
argument_list|(
specifier|const
name|char
operator|*
name|current_line
argument_list|,
name|uint32_t
name|cursor_pos
argument_list|,
name|int
name|match_start_point
argument_list|,
name|int
name|max_return_elements
argument_list|,
name|lldb
operator|::
name|SBStringList
operator|&
name|matches
argument_list|)
decl_stmt|;
comment|// Catch commands before they execute by registering a callback that will
comment|// get called when the command gets executed. This allows GUI or command
comment|// line interfaces to intercept a command and stop it from happening
name|bool
name|SetCommandOverrideCallback
argument_list|(
specifier|const
name|char
operator|*
name|command_name
argument_list|,
name|lldb
operator|::
name|CommandOverrideCallback
name|callback
argument_list|,
name|void
operator|*
name|baton
argument_list|)
decl_stmt|;
name|SBCommandInterpreter
argument_list|(
name|lldb_private
operator|::
name|CommandInterpreter
operator|*
name|interpreter_ptr
operator|=
name|nullptr
argument_list|)
expr_stmt|;
comment|// Access using SBDebugger::GetCommandInterpreter();
comment|//----------------------------------------------------------------------
comment|/// Return true if the command interpreter is the active IO handler.
comment|///
comment|/// This indicates that any input coming into the debugger handles will
comment|/// go to the command interpreter and will result in LLDB command line
comment|/// commands being executed.
comment|//----------------------------------------------------------------------
name|bool
name|IsActive
parameter_list|()
function_decl|;
comment|//----------------------------------------------------------------------
comment|/// Get the string that needs to be written to the debugger stdin file
comment|/// handle when a control character is typed.
comment|///
comment|/// Some GUI programs will intercept "control + char" sequences and want
comment|/// to have them do what normally would happen when using a real
comment|/// terminal, so this function allows GUI programs to emulate this
comment|/// functionality.
comment|///
comment|/// @param[in] ch
comment|///     The character that was typed along with the control key
comment|///
comment|/// @return
comment|///     The string that should be written into the file handle that is
comment|///     feeding the input stream for the debugger, or nullptr if there is
comment|///     no string for this control key.
comment|//----------------------------------------------------------------------
specifier|const
name|char
modifier|*
name|GetIOHandlerControlSequence
parameter_list|(
name|char
name|ch
parameter_list|)
function_decl|;
name|bool
name|GetPromptOnQuit
parameter_list|()
function_decl|;
name|void
name|SetPromptOnQuit
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
comment|//----------------------------------------------------------------------
comment|/// Resolve the command just as HandleCommand would, expanding abbreviations
comment|/// and aliases.  If successful, result->GetOutput has the full expansion.
comment|//----------------------------------------------------------------------
name|void
name|ResolveCommand
parameter_list|(
specifier|const
name|char
modifier|*
name|command_line
parameter_list|,
name|SBCommandReturnObject
modifier|&
name|result
parameter_list|)
function_decl|;
name|protected
label|:
name|lldb_private
operator|::
name|CommandInterpreter
operator|&
name|ref
argument_list|()
expr_stmt|;
name|lldb_private
operator|::
name|CommandInterpreter
operator|*
name|get
argument_list|()
expr_stmt|;
name|void
name|reset
argument_list|(
name|lldb_private
operator|::
name|CommandInterpreter
operator|*
argument_list|)
decl_stmt|;
name|private
label|:
name|friend
name|class
name|SBDebugger
decl_stmt|;
specifier|static
name|void
name|InitializeSWIG
parameter_list|()
function_decl|;
name|lldb_private
operator|::
name|CommandInterpreter
operator|*
name|m_opaque_ptr
expr_stmt|;
block|}
empty_stmt|;
name|class
name|SBCommandPluginInterface
block|{
name|public
label|:
name|virtual
operator|~
name|SBCommandPluginInterface
argument_list|()
operator|=
expr|default
expr_stmt|;
name|virtual
name|bool
name|DoExecute
argument_list|(
name|lldb
operator|::
name|SBDebugger
comment|/*debugger*/
argument_list|,
name|char
operator|*
operator|*
comment|/*command*/
argument_list|,
name|lldb
operator|::
name|SBCommandReturnObject
operator|&
comment|/*result*/
argument_list|)
block|{
return|return
name|false
return|;
block|}
block|}
empty_stmt|;
name|class
name|SBCommand
block|{
name|public
label|:
name|SBCommand
argument_list|()
expr_stmt|;
name|bool
name|IsValid
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|GetName
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|GetHelp
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|GetHelpLong
parameter_list|()
function_decl|;
name|void
name|SetHelp
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|SetHelpLong
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|uint32_t
name|GetFlags
parameter_list|()
function_decl|;
name|void
name|SetFlags
parameter_list|(
name|uint32_t
name|flags
parameter_list|)
function_decl|;
name|lldb
operator|::
name|SBCommand
name|AddMultiwordCommand
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
specifier|const
name|char
operator|*
name|help
operator|=
name|nullptr
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBCommand
name|AddCommand
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|lldb
operator|::
name|SBCommandPluginInterface
operator|*
name|impl
argument_list|,
specifier|const
name|char
operator|*
name|help
operator|=
name|nullptr
argument_list|)
expr_stmt|;
name|private
label|:
name|friend
name|class
name|SBDebugger
decl_stmt|;
name|friend
name|class
name|SBCommandInterpreter
decl_stmt|;
name|SBCommand
argument_list|(
argument|lldb::CommandObjectSP cmd_sp
argument_list|)
empty_stmt|;
name|lldb
operator|::
name|CommandObjectSP
name|m_opaque_sp
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBCommandInterpreter_h_
end_comment

end_unit

