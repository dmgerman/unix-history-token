begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBListener.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBListener_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBListener_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|LLDB_API
name|SBListener
block|{
name|public
label|:
name|SBListener
argument_list|()
expr_stmt|;
name|SBListener
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
expr_stmt|;
name|SBListener
argument_list|(
specifier|const
name|SBListener
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBListener
argument_list|()
expr_stmt|;
specifier|const
name|lldb
operator|::
name|SBListener
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBListener
operator|&
name|rhs
operator|)
expr_stmt|;
name|void
name|AddEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|)
decl_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|StartListeningForEventClass
parameter_list|(
name|SBDebugger
modifier|&
name|debugger
parameter_list|,
specifier|const
name|char
modifier|*
name|broadcaster_class
parameter_list|,
name|uint32_t
name|event_mask
parameter_list|)
function_decl|;
name|bool
name|StopListeningForEventClass
parameter_list|(
name|SBDebugger
modifier|&
name|debugger
parameter_list|,
specifier|const
name|char
modifier|*
name|broadcaster_class
parameter_list|,
name|uint32_t
name|event_mask
parameter_list|)
function_decl|;
name|uint32_t
name|StartListeningForEvents
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|,
name|uint32_t
name|event_mask
argument_list|)
decl_stmt|;
name|bool
name|StopListeningForEvents
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|,
name|uint32_t
name|event_mask
argument_list|)
decl_stmt|;
comment|// Returns true if an event was received, false if we timed out.
name|bool
name|WaitForEvent
argument_list|(
name|uint32_t
name|num_seconds
argument_list|,
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|)
decl_stmt|;
name|bool
name|WaitForEventForBroadcaster
argument_list|(
name|uint32_t
name|num_seconds
argument_list|,
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|,
name|lldb
operator|::
name|SBEvent
operator|&
name|sb_event
argument_list|)
decl_stmt|;
name|bool
name|WaitForEventForBroadcasterWithType
argument_list|(
name|uint32_t
name|num_seconds
argument_list|,
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|,
name|uint32_t
name|event_type_mask
argument_list|,
name|lldb
operator|::
name|SBEvent
operator|&
name|sb_event
argument_list|)
decl_stmt|;
name|bool
name|PeekAtNextEvent
argument_list|(
name|lldb
operator|::
name|SBEvent
operator|&
name|sb_event
argument_list|)
decl_stmt|;
name|bool
name|PeekAtNextEventForBroadcaster
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|,
name|lldb
operator|::
name|SBEvent
operator|&
name|sb_event
argument_list|)
decl_stmt|;
name|bool
name|PeekAtNextEventForBroadcasterWithType
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|,
name|uint32_t
name|event_type_mask
argument_list|,
name|lldb
operator|::
name|SBEvent
operator|&
name|sb_event
argument_list|)
decl_stmt|;
name|bool
name|GetNextEvent
argument_list|(
name|lldb
operator|::
name|SBEvent
operator|&
name|sb_event
argument_list|)
decl_stmt|;
name|bool
name|GetNextEventForBroadcaster
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|,
name|lldb
operator|::
name|SBEvent
operator|&
name|sb_event
argument_list|)
decl_stmt|;
name|bool
name|GetNextEventForBroadcasterWithType
argument_list|(
specifier|const
name|lldb
operator|::
name|SBBroadcaster
operator|&
name|broadcaster
argument_list|,
name|uint32_t
name|event_type_mask
argument_list|,
name|lldb
operator|::
name|SBEvent
operator|&
name|sb_event
argument_list|)
decl_stmt|;
name|bool
name|HandleBroadcastEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|)
decl_stmt|;
name|protected
label|:
name|friend
name|class
name|SBAttachInfo
decl_stmt|;
name|friend
name|class
name|SBBroadcaster
decl_stmt|;
name|friend
name|class
name|SBCommandInterpreter
decl_stmt|;
name|friend
name|class
name|SBDebugger
decl_stmt|;
name|friend
name|class
name|SBLaunchInfo
decl_stmt|;
name|friend
name|class
name|SBTarget
decl_stmt|;
name|SBListener
argument_list|(
specifier|const
name|lldb
operator|::
name|ListenerSP
operator|&
name|listener_sp
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|ListenerSP
name|GetSP
argument_list|()
expr_stmt|;
name|private
label|:
name|lldb_private
operator|::
name|Listener
operator|*
name|operator
operator|->
expr|(
block|)
decl|const
decl_stmt|;
name|lldb_private
operator|::
name|Listener
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|void
name|reset
argument_list|(
name|lldb
operator|::
name|ListenerSP
name|listener_sp
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|ListenerSP
name|m_opaque_sp
expr_stmt|;
name|lldb_private
operator|::
name|Listener
operator|*
name|m_unused_ptr
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBListener_h_
end_comment

end_unit

