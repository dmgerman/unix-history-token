begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBType.h ------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBType_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBType_h_
end_define

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|SBTypeList
decl_stmt|;
name|class
name|SBTypeMember
block|{
name|public
label|:
name|SBTypeMember
argument_list|()
expr_stmt|;
name|SBTypeMember
argument_list|(
specifier|const
name|lldb
operator|::
name|SBTypeMember
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBTypeMember
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBTypeMember
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBTypeMember
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
modifier|*
name|GetName
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBType
name|GetType
argument_list|()
expr_stmt|;
name|uint64_t
name|GetOffsetInBytes
parameter_list|()
function_decl|;
name|uint64_t
name|GetOffsetInBits
parameter_list|()
function_decl|;
name|bool
name|IsBitfield
parameter_list|()
function_decl|;
name|uint32_t
name|GetBitfieldSizeInBits
parameter_list|()
function_decl|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|,
name|lldb
operator|::
name|DescriptionLevel
name|description_level
argument_list|)
decl_stmt|;
name|protected
label|:
name|friend
name|class
name|SBType
decl_stmt|;
name|void
name|reset
argument_list|(
name|lldb_private
operator|::
name|TypeMemberImpl
operator|*
argument_list|)
decl_stmt|;
name|lldb_private
operator|::
name|TypeMemberImpl
operator|&
name|ref
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|TypeMemberImpl
operator|&
name|ref
argument_list|()
specifier|const
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|lldb_private
operator|::
name|TypeMemberImpl
operator|>
name|m_opaque_ap
expr_stmt|;
block|}
empty_stmt|;
name|class
name|SBType
block|{
name|public
label|:
name|SBType
argument_list|()
expr_stmt|;
name|SBType
argument_list|(
specifier|const
name|lldb
operator|::
name|SBType
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBType
argument_list|()
expr_stmt|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|GetByteSize
parameter_list|()
function_decl|;
name|bool
name|IsPointerType
parameter_list|()
function_decl|;
name|bool
name|IsReferenceType
parameter_list|()
function_decl|;
name|bool
name|IsFunctionType
parameter_list|()
function_decl|;
name|bool
name|IsPolymorphicClass
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBType
name|GetPointerType
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBType
name|GetPointeeType
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBType
name|GetReferenceType
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBType
name|GetTypedefedType
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBType
name|GetDereferencedType
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBType
name|GetUnqualifiedType
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBType
name|GetCanonicalType
argument_list|()
expr_stmt|;
comment|// Get the "lldb::BasicType" enumeration for a type. If a type is not a basic
comment|// type eBasicTypeInvalid will be returned
name|lldb
operator|::
name|BasicType
name|GetBasicType
argument_list|()
expr_stmt|;
comment|// The call below confusing and should really be renamed to "CreateBasicType"
name|lldb
operator|::
name|SBType
name|GetBasicType
argument_list|(
argument|lldb::BasicType type
argument_list|)
expr_stmt|;
name|uint32_t
name|GetNumberOfFields
parameter_list|()
function_decl|;
name|uint32_t
name|GetNumberOfDirectBaseClasses
parameter_list|()
function_decl|;
name|uint32_t
name|GetNumberOfVirtualBaseClasses
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBTypeMember
name|GetFieldAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBTypeMember
name|GetDirectBaseClassAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBTypeMember
name|GetVirtualBaseClassAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBTypeEnumMemberList
name|GetEnumMembers
argument_list|()
expr_stmt|;
name|uint32_t
name|GetNumberOfTemplateArguments
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBType
name|GetTemplateArgumentType
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|TemplateArgumentKind
name|GetTemplateArgumentKind
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBType
name|GetFunctionReturnType
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBTypeList
name|GetFunctionArgumentTypes
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|GetName
parameter_list|()
function_decl|;
specifier|const
name|char
modifier|*
name|GetDisplayTypeName
parameter_list|()
function_decl|;
name|lldb
operator|::
name|TypeClass
name|GetTypeClass
argument_list|()
expr_stmt|;
name|bool
name|IsTypeComplete
parameter_list|()
function_decl|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|,
name|lldb
operator|::
name|DescriptionLevel
name|description_level
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|SBType
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBType
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
name|lldb
operator|::
name|SBType
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
name|lldb
operator|::
name|SBType
operator|&
name|rhs
operator|)
expr_stmt|;
name|protected
label|:
name|lldb_private
operator|::
name|TypeImpl
operator|&
name|ref
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|TypeImpl
operator|&
name|ref
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|TypeImplSP
name|GetSP
argument_list|()
expr_stmt|;
name|void
name|SetSP
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeImplSP
operator|&
name|type_impl_sp
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|TypeImplSP
name|m_opaque_sp
expr_stmt|;
name|friend
name|class
name|SBFunction
decl_stmt|;
name|friend
name|class
name|SBModule
decl_stmt|;
name|friend
name|class
name|SBTarget
decl_stmt|;
name|friend
name|class
name|SBTypeEnumMember
decl_stmt|;
name|friend
name|class
name|SBTypeEnumMemberList
decl_stmt|;
name|friend
name|class
name|SBTypeNameSpecifier
decl_stmt|;
name|friend
name|class
name|SBTypeMember
decl_stmt|;
name|friend
name|class
name|SBTypeList
decl_stmt|;
name|friend
name|class
name|SBValue
decl_stmt|;
name|SBType
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ClangASTType
operator|&
argument_list|)
expr_stmt|;
name|SBType
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeSP
operator|&
argument_list|)
expr_stmt|;
name|SBType
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeImplSP
operator|&
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|class
name|SBTypeList
block|{
name|public
label|:
name|SBTypeList
argument_list|()
expr_stmt|;
name|SBTypeList
argument_list|(
specifier|const
name|lldb
operator|::
name|SBTypeList
operator|&
name|rhs
argument_list|)
expr_stmt|;
operator|~
name|SBTypeList
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBTypeList
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBTypeList
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|IsValid
parameter_list|()
function_decl|;
name|void
name|Append
argument_list|(
name|lldb
operator|::
name|SBType
name|type
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|SBType
name|GetTypeAtIndex
argument_list|(
argument|uint32_t index
argument_list|)
expr_stmt|;
name|uint32_t
name|GetSize
parameter_list|()
function_decl|;
name|private
label|:
name|std
operator|::
name|unique_ptr
operator|<
name|lldb_private
operator|::
name|TypeListImpl
operator|>
name|m_opaque_ap
expr_stmt|;
name|friend
name|class
name|SBModule
decl_stmt|;
name|friend
name|class
name|SBCompileUnit
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBType_h_
end_comment

end_unit

