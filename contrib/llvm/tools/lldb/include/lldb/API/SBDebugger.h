begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SBDebugger.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_SBDebugger_h_
end_ifndef

begin_define
define|#
directive|define
name|LLDB_SBDebugger_h_
end_define

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/API/SBPlatform.h"
end_include

begin_decl_stmt
name|namespace
name|lldb
block|{
name|class
name|LLDB_API
name|SBInputReader
block|{
name|public
label|:
name|SBInputReader
argument_list|()
operator|=
expr|default
expr_stmt|;
operator|~
name|SBInputReader
argument_list|()
operator|=
expr|default
expr_stmt|;
name|SBError
name|Initialize
argument_list|(
name|lldb
operator|::
name|SBDebugger
operator|&
argument_list|,
name|unsigned
name|long
argument_list|(
argument|*
argument_list|)
operator|(
name|void
operator|*
operator|,
name|lldb
operator|::
name|SBInputReader
operator|*
operator|,
name|lldb
operator|::
name|InputReaderAction
operator|,
name|char
specifier|const
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|,
name|void
operator|*
argument_list|,
name|lldb
operator|::
name|InputReaderGranularity
argument_list|,
name|char
specifier|const
operator|*
argument_list|,
name|char
specifier|const
operator|*
argument_list|,
name|bool
argument_list|)
decl_stmt|;
name|void
name|SetIsDone
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|bool
name|IsActive
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
name|class
name|LLDB_API
name|SBDebugger
block|{
name|public
label|:
name|SBDebugger
argument_list|()
expr_stmt|;
name|SBDebugger
argument_list|(
specifier|const
name|lldb
operator|::
name|SBDebugger
operator|&
name|rhs
argument_list|)
expr_stmt|;
name|SBDebugger
argument_list|(
specifier|const
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger_sp
argument_list|)
expr_stmt|;
operator|~
name|SBDebugger
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|SBDebugger
operator|&
name|operator
operator|=
operator|(
specifier|const
name|lldb
operator|::
name|SBDebugger
operator|&
name|rhs
operator|)
expr_stmt|;
specifier|static
name|void
name|Initialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|Terminate
parameter_list|()
function_decl|;
comment|// Deprecated, use the one that takes a source_init_files bool.
specifier|static
name|lldb
operator|::
name|SBDebugger
name|Create
argument_list|()
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBDebugger
name|Create
argument_list|(
argument|bool source_init_files
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBDebugger
name|Create
argument_list|(
argument|bool source_init_files
argument_list|,
argument|lldb::LogOutputCallback log_callback
argument_list|,
argument|void *baton
argument_list|)
expr_stmt|;
specifier|static
name|void
name|Destroy
argument_list|(
name|lldb
operator|::
name|SBDebugger
operator|&
name|debugger
argument_list|)
decl_stmt|;
specifier|static
name|void
name|MemoryPressureDetected
parameter_list|()
function_decl|;
name|bool
name|IsValid
argument_list|()
specifier|const
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|void
name|SetAsync
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|bool
name|GetAsync
parameter_list|()
function_decl|;
name|void
name|SkipLLDBInitFiles
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|void
name|SkipAppInitFiles
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|void
name|SetInputFileHandle
parameter_list|(
name|FILE
modifier|*
name|f
parameter_list|,
name|bool
name|transfer_ownership
parameter_list|)
function_decl|;
name|void
name|SetOutputFileHandle
parameter_list|(
name|FILE
modifier|*
name|f
parameter_list|,
name|bool
name|transfer_ownership
parameter_list|)
function_decl|;
name|void
name|SetErrorFileHandle
parameter_list|(
name|FILE
modifier|*
name|f
parameter_list|,
name|bool
name|transfer_ownership
parameter_list|)
function_decl|;
name|FILE
modifier|*
name|GetInputFileHandle
parameter_list|()
function_decl|;
name|FILE
modifier|*
name|GetOutputFileHandle
parameter_list|()
function_decl|;
name|FILE
modifier|*
name|GetErrorFileHandle
parameter_list|()
function_decl|;
name|void
name|SaveInputTerminalState
parameter_list|()
function_decl|;
name|void
name|RestoreInputTerminalState
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBCommandInterpreter
name|GetCommandInterpreter
argument_list|()
expr_stmt|;
name|void
name|HandleCommand
parameter_list|(
specifier|const
name|char
modifier|*
name|command
parameter_list|)
function_decl|;
name|lldb
operator|::
name|SBListener
name|GetListener
argument_list|()
expr_stmt|;
name|void
name|HandleProcessEvent
argument_list|(
specifier|const
name|lldb
operator|::
name|SBProcess
operator|&
name|process
argument_list|,
specifier|const
name|lldb
operator|::
name|SBEvent
operator|&
name|event
argument_list|,
name|FILE
operator|*
name|out
argument_list|,
name|FILE
operator|*
name|err
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|SBTarget
name|CreateTarget
argument_list|(
argument|const char *filename
argument_list|,
argument|const char *target_triple
argument_list|,
argument|const char *platform_name
argument_list|,
argument|bool add_dependent_modules
argument_list|,
argument|lldb::SBError&error
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBTarget
name|CreateTargetWithFileAndTargetTriple
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
specifier|const
name|char
operator|*
name|target_triple
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBTarget
name|CreateTargetWithFileAndArch
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
specifier|const
name|char
operator|*
name|archname
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBTarget
name|CreateTarget
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|)
expr_stmt|;
comment|// Return true if target is deleted from the target list of the debugger.
name|bool
name|DeleteTarget
argument_list|(
name|lldb
operator|::
name|SBTarget
operator|&
name|target
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|SBTarget
name|GetTargetAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
expr_stmt|;
name|uint32_t
name|GetIndexOfTarget
argument_list|(
name|lldb
operator|::
name|SBTarget
name|target
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|SBTarget
name|FindTargetWithProcessID
argument_list|(
argument|pid_t pid
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|SBTarget
name|FindTargetWithFileAndArch
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
specifier|const
name|char
operator|*
name|arch
argument_list|)
expr_stmt|;
name|uint32_t
name|GetNumTargets
parameter_list|()
function_decl|;
name|lldb
operator|::
name|SBTarget
name|GetSelectedTarget
argument_list|()
expr_stmt|;
name|void
name|SetSelectedTarget
parameter_list|(
name|SBTarget
modifier|&
name|target
parameter_list|)
function_decl|;
name|lldb
operator|::
name|SBPlatform
name|GetSelectedPlatform
argument_list|()
expr_stmt|;
name|void
name|SetSelectedPlatform
argument_list|(
name|lldb
operator|::
name|SBPlatform
operator|&
name|platform
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|SBSourceManager
name|GetSourceManager
argument_list|()
expr_stmt|;
comment|// REMOVE: just for a quick fix, need to expose platforms through
comment|// SBPlatform from this class.
name|lldb
operator|::
name|SBError
name|SetCurrentPlatform
argument_list|(
specifier|const
name|char
operator|*
name|platform_name
argument_list|)
expr_stmt|;
name|bool
name|SetCurrentPlatformSDKRoot
parameter_list|(
specifier|const
name|char
modifier|*
name|sysroot
parameter_list|)
function_decl|;
comment|// FIXME: Once we get the set show stuff in place, the driver won't need
comment|// an interface to the Set/Get UseExternalEditor.
name|bool
name|SetUseExternalEditor
parameter_list|(
name|bool
name|input
parameter_list|)
function_decl|;
name|bool
name|GetUseExternalEditor
parameter_list|()
function_decl|;
name|bool
name|SetUseColor
parameter_list|(
name|bool
name|use_color
parameter_list|)
function_decl|;
name|bool
name|GetUseColor
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|bool
name|GetDefaultArchitecture
parameter_list|(
name|char
modifier|*
name|arch_name
parameter_list|,
name|size_t
name|arch_name_len
parameter_list|)
function_decl|;
specifier|static
name|bool
name|SetDefaultArchitecture
parameter_list|(
specifier|const
name|char
modifier|*
name|arch_name
parameter_list|)
function_decl|;
name|lldb
operator|::
name|ScriptLanguage
name|GetScriptingLanguage
argument_list|(
specifier|const
name|char
operator|*
name|script_language_name
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetVersionString
parameter_list|()
function_decl|;
specifier|static
specifier|const
name|char
modifier|*
name|StateAsCString
argument_list|(
name|lldb
operator|::
name|StateType
name|state
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|StateIsRunningState
argument_list|(
name|lldb
operator|::
name|StateType
name|state
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|StateIsStoppedState
argument_list|(
name|lldb
operator|::
name|StateType
name|state
argument_list|)
decl_stmt|;
name|bool
name|EnableLog
parameter_list|(
specifier|const
name|char
modifier|*
name|channel
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|categories
parameter_list|)
function_decl|;
name|void
name|SetLoggingCallback
argument_list|(
name|lldb
operator|::
name|LogOutputCallback
name|log_callback
argument_list|,
name|void
operator|*
name|baton
argument_list|)
decl_stmt|;
comment|// DEPRECATED
name|void
name|DispatchInput
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
function_decl|;
name|void
name|DispatchInput
parameter_list|(
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
function_decl|;
name|void
name|DispatchInputInterrupt
parameter_list|()
function_decl|;
name|void
name|DispatchInputEndOfFile
parameter_list|()
function_decl|;
name|void
name|PushInputReader
argument_list|(
name|lldb
operator|::
name|SBInputReader
operator|&
name|reader
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetInstanceName
parameter_list|()
function_decl|;
specifier|static
name|SBDebugger
name|FindDebuggerWithID
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
specifier|static
name|lldb
operator|::
name|SBError
name|SetInternalVariable
argument_list|(
specifier|const
name|char
operator|*
name|var_name
argument_list|,
specifier|const
name|char
operator|*
name|value
argument_list|,
specifier|const
name|char
operator|*
name|debugger_instance_name
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|SBStringList
name|GetInternalVariableValue
argument_list|(
specifier|const
name|char
operator|*
name|var_name
argument_list|,
specifier|const
name|char
operator|*
name|debugger_instance_name
argument_list|)
expr_stmt|;
name|bool
name|GetDescription
argument_list|(
name|lldb
operator|::
name|SBStream
operator|&
name|description
argument_list|)
decl_stmt|;
name|uint32_t
name|GetTerminalWidth
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetTerminalWidth
parameter_list|(
name|uint32_t
name|term_width
parameter_list|)
function_decl|;
name|lldb
operator|::
name|user_id_t
name|GetID
argument_list|()
expr_stmt|;
specifier|const
name|char
operator|*
name|GetPrompt
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetPrompt
parameter_list|(
specifier|const
name|char
modifier|*
name|prompt
parameter_list|)
function_decl|;
name|lldb
operator|::
name|ScriptLanguage
name|GetScriptLanguage
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetScriptLanguage
argument_list|(
name|lldb
operator|::
name|ScriptLanguage
name|script_lang
argument_list|)
decl_stmt|;
name|bool
name|GetCloseInputOnEOF
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetCloseInputOnEOF
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|SBTypeCategory
name|GetCategory
parameter_list|(
specifier|const
name|char
modifier|*
name|category_name
parameter_list|)
function_decl|;
name|SBTypeCategory
name|GetCategory
argument_list|(
name|lldb
operator|::
name|LanguageType
name|lang_type
argument_list|)
decl_stmt|;
name|SBTypeCategory
name|CreateCategory
parameter_list|(
specifier|const
name|char
modifier|*
name|category_name
parameter_list|)
function_decl|;
name|bool
name|DeleteCategory
parameter_list|(
specifier|const
name|char
modifier|*
name|category_name
parameter_list|)
function_decl|;
name|uint32_t
name|GetNumCategories
parameter_list|()
function_decl|;
name|SBTypeCategory
name|GetCategoryAtIndex
parameter_list|(
name|uint32_t
parameter_list|)
function_decl|;
name|SBTypeCategory
name|GetDefaultCategory
parameter_list|()
function_decl|;
name|SBTypeFormat
name|GetFormatForType
parameter_list|(
name|SBTypeNameSpecifier
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
name|SBTypeSummary
name|GetSummaryForType
parameter_list|(
name|SBTypeNameSpecifier
parameter_list|)
function_decl|;
endif|#
directive|endif
name|SBTypeFilter
name|GetFilterForType
parameter_list|(
name|SBTypeNameSpecifier
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
name|SBTypeSynthetic
name|GetSyntheticForType
parameter_list|(
name|SBTypeNameSpecifier
parameter_list|)
function_decl|;
endif|#
directive|endif
name|void
name|RunCommandInterpreter
parameter_list|(
name|bool
name|auto_handle_events
parameter_list|,
name|bool
name|spawn_thread
parameter_list|)
function_decl|;
name|void
name|RunCommandInterpreter
parameter_list|(
name|bool
name|auto_handle_events
parameter_list|,
name|bool
name|spawn_thread
parameter_list|,
name|SBCommandInterpreterRunOptions
modifier|&
name|options
parameter_list|,
name|int
modifier|&
name|num_errors
parameter_list|,
name|bool
modifier|&
name|quit_requested
parameter_list|,
name|bool
modifier|&
name|stopped_for_crash
parameter_list|)
function_decl|;
name|SBError
name|RunREPL
argument_list|(
name|lldb
operator|::
name|LanguageType
name|language
argument_list|,
specifier|const
name|char
operator|*
name|repl_options
argument_list|)
decl_stmt|;
name|private
label|:
name|friend
name|class
name|SBCommandInterpreter
decl_stmt|;
name|friend
name|class
name|SBInputReader
decl_stmt|;
name|friend
name|class
name|SBListener
decl_stmt|;
name|friend
name|class
name|SBProcess
decl_stmt|;
name|friend
name|class
name|SBSourceManager
decl_stmt|;
name|friend
name|class
name|SBTarget
decl_stmt|;
name|lldb
operator|::
name|SBTarget
name|FindTargetWithLLDBProcess
argument_list|(
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|processSP
argument_list|)
expr_stmt|;
name|void
name|reset
argument_list|(
specifier|const
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger_sp
argument_list|)
decl_stmt|;
name|lldb_private
operator|::
name|Debugger
operator|*
name|get
argument_list|()
specifier|const
expr_stmt|;
name|lldb_private
operator|::
name|Debugger
operator|&
name|ref
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|lldb
operator|::
name|DebuggerSP
operator|&
name|get_sp
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|DebuggerSP
name|m_opaque_sp
expr_stmt|;
block|}
empty_stmt|;
comment|// class SBDebugger
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_SBDebugger_h_
end_comment

end_unit

