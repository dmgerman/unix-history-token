begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ScriptInterpreter.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ScriptInterpreter_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ScriptInterpreter_h_
end_define

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Broadcaster.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/PseudoTerminal.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ScriptInterpreterObject
block|{
name|public
label|:
name|ScriptInterpreterObject
argument_list|()
operator|:
name|m_object
argument_list|(
argument|NULL
argument_list|)
block|{}
name|ScriptInterpreterObject
argument_list|(
name|void
operator|*
name|obj
argument_list|)
operator|:
name|m_object
argument_list|(
argument|obj
argument_list|)
block|{}
name|ScriptInterpreterObject
argument_list|(
specifier|const
name|ScriptInterpreterObject
operator|&
name|rhs
argument_list|)
operator|:
name|m_object
argument_list|(
argument|rhs.m_object
argument_list|)
block|{}
name|virtual
name|void
operator|*
name|GetObject
argument_list|()
block|{
return|return
name|m_object
return|;
block|}
name|explicit
name|operator
name|bool
parameter_list|()
block|{
return|return
name|m_object
operator|!=
name|NULL
return|;
block|}
name|ScriptInterpreterObject
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ScriptInterpreterObject
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|rhs
condition|)
name|m_object
operator|=
name|rhs
operator|.
name|m_object
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|virtual
operator|~
name|ScriptInterpreterObject
argument_list|()
block|{}
name|protected
operator|:
name|void
operator|*
name|m_object
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|ScriptInterpreterLocker
block|{
name|public
label|:
name|ScriptInterpreterLocker
argument_list|()
block|{     }
name|virtual
operator|~
name|ScriptInterpreterLocker
argument_list|()
block|{     }
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ScriptInterpreterLocker
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|ScriptInterpreter
block|{
name|public
label|:
typedef|typedef
name|void
function_decl|(
modifier|*
name|SWIGInitCallback
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|SWIGBreakpointCallbackFunction
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame_sp
argument_list|,
specifier|const
name|lldb
operator|::
name|BreakpointLocationSP
operator|&
name|bp_loc_sp
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|SWIGWatchpointCallbackFunction
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame_sp
argument_list|,
specifier|const
name|lldb
operator|::
name|WatchpointSP
operator|&
name|wp_sp
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonTypeScriptCallbackFunction
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
name|void
operator|*
name|session_dictionary
argument_list|,
specifier|const
name|lldb
operator|::
name|ValueObjectSP
operator|&
name|valobj_sp
argument_list|,
name|void
operator|*
operator|*
name|pyfunct_wrapper
argument_list|,
specifier|const
name|lldb
operator|::
name|TypeSummaryOptionsSP
operator|&
name|options
argument_list|,
name|std
operator|::
name|string
operator|&
name|retval
argument_list|)
expr_stmt|;
typedef|typedef
name|void
argument_list|*
call|(
modifier|*
name|SWIGPythonCreateSyntheticProvider
call|)
argument_list|(
specifier|const
name|char
operator|*
name|python_class_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|ValueObjectSP
operator|&
name|valobj_sp
argument_list|)
argument_list|;      typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPythonCreateScriptedThreadPlan
call|)
argument_list|(
specifier|const
name|char
operator|*
name|python_class_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|ThreadPlanSP
operator|&
name|thread_plan_sp
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonCallThreadPlan
argument_list|)
argument_list|(
name|void
operator|*
name|implementor
argument_list|,
specifier|const
name|char
operator|*
name|method_name
argument_list|,
name|Event
operator|*
name|event_sp
argument_list|,
name|bool
operator|&
name|got_error
argument_list|)
argument_list|;      typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPythonCreateOSPlugin
call|)
argument_list|(
specifier|const
name|char
operator|*
name|python_class_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|process_sp
argument_list|)
argument_list|;          typedef
name|uint32_t
argument_list|(
operator|*
name|SWIGPythonCalculateNumChildren
argument_list|)
argument_list|(
name|void
operator|*
name|implementor
argument_list|)
argument_list|;     typedef
name|void
operator|*
operator|(
operator|*
name|SWIGPythonGetChildAtIndex
operator|)
operator|(
name|void
operator|*
name|implementor
operator|,
name|uint32_t
name|idx
operator|)
argument_list|;     typedef
name|int
argument_list|(
operator|*
name|SWIGPythonGetIndexOfChildWithName
argument_list|)
argument_list|(
name|void
operator|*
name|implementor
argument_list|,
specifier|const
name|char
operator|*
name|child_name
argument_list|)
argument_list|;     typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPythonCastPyObjectToSBValue
call|)
argument_list|(
name|void
operator|*
name|data
argument_list|)
argument_list|;     typedef
name|lldb
operator|::
name|ValueObjectSP
argument_list|(
operator|*
name|SWIGPythonGetValueObjectSPFromSBValue
argument_list|)
argument_list|(
name|void
operator|*
name|data
argument_list|)
argument_list|;     typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonUpdateSynthProviderInstance
argument_list|)
argument_list|(
name|void
operator|*
name|data
argument_list|)
argument_list|;     typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonMightHaveChildrenSynthProviderInstance
argument_list|)
argument_list|(
name|void
operator|*
name|data
argument_list|)
argument_list|;     typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPythonGetValueSynthProviderInstance
call|)
argument_list|(
name|void
operator|*
name|implementor
argument_list|)
argument_list|;          typedef
name|bool
argument_list|(
argument|*SWIGPythonCallCommand
argument_list|)
operator|(
specifier|const
name|char
operator|*
name|python_function_name
operator|,
specifier|const
name|char
operator|*
name|session_dictionary_name
operator|,
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger
operator|,
specifier|const
name|char
operator|*
name|args
operator|,
name|lldb_private
operator|::
name|CommandReturnObject
operator|&
name|cmd_retobj
operator|,
name|lldb
operator|::
name|ExecutionContextRefSP
name|exe_ctx_ref_sp
operator|)
argument_list|;          typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonCallModuleInit
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_module_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger
argument_list|)
argument_list|;          typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Process
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|ProcessSP
operator|&
name|process
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;     typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Thread
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|ThreadSP
operator|&
name|thread
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;          typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Target
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|TargetSP
operator|&
name|target
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Frame
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Value
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|ValueObjectSP
operator|&
name|value
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;          typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPython_GetDynamicSetting
call|)
argument_list|(
name|void
operator|*
name|module
argument_list|,
specifier|const
name|char
operator|*
name|setting
argument_list|,
specifier|const
name|lldb
operator|::
name|TargetSP
operator|&
name|target_sp
argument_list|)
argument_list|;      typedef
expr|enum
block|{
name|eScriptReturnTypeCharPtr
block|,
name|eScriptReturnTypeBool
block|,
name|eScriptReturnTypeShortInt
block|,
name|eScriptReturnTypeShortIntUnsigned
block|,
name|eScriptReturnTypeInt
block|,
name|eScriptReturnTypeIntUnsigned
block|,
name|eScriptReturnTypeLongInt
block|,
name|eScriptReturnTypeLongIntUnsigned
block|,
name|eScriptReturnTypeLongLong
block|,
name|eScriptReturnTypeLongLongUnsigned
block|,
name|eScriptReturnTypeFloat
block|,
name|eScriptReturnTypeDouble
block|,
name|eScriptReturnTypeChar
block|,
name|eScriptReturnTypeCharStrOrNone
block|,
name|eScriptReturnTypeOpaqueObject
block|}
name|ScriptReturnType
argument_list|;
name|ScriptInterpreter
argument_list|(
argument|CommandInterpreter&interpreter
argument_list|,
argument|lldb::ScriptLanguage script_lang
argument_list|)
argument_list|;
name|virtual
operator|~
name|ScriptInterpreter
argument_list|()
argument_list|;
expr|struct
name|ExecuteScriptOptions
block|{
name|public
operator|:
name|ExecuteScriptOptions
argument_list|()
operator|:
name|m_enable_io
argument_list|(
name|true
argument_list|)
block|,
name|m_set_lldb_globals
argument_list|(
name|true
argument_list|)
block|,
name|m_maskout_errors
argument_list|(
argument|true
argument_list|)
block|{         }
name|bool
name|GetEnableIO
argument_list|()
specifier|const
block|{
return|return
name|m_enable_io
return|;
block|}
name|bool
name|GetSetLLDBGlobals
argument_list|()
specifier|const
block|{
return|return
name|m_set_lldb_globals
return|;
block|}
name|bool
name|GetMaskoutErrors
argument_list|()
specifier|const
block|{
return|return
name|m_maskout_errors
return|;
block|}
name|ExecuteScriptOptions
operator|&
name|SetEnableIO
argument_list|(
argument|bool enable
argument_list|)
block|{
name|m_enable_io
operator|=
name|enable
block|;
return|return
operator|*
name|this
return|;
block|}
name|ExecuteScriptOptions
operator|&
name|SetSetLLDBGlobals
argument_list|(
argument|bool set
argument_list|)
block|{
name|m_set_lldb_globals
operator|=
name|set
block|;
return|return
operator|*
name|this
return|;
block|}
name|ExecuteScriptOptions
operator|&
name|SetMaskoutErrors
argument_list|(
argument|bool maskout
argument_list|)
block|{
name|m_maskout_errors
operator|=
name|maskout
block|;
return|return
operator|*
name|this
return|;
block|}
name|private
operator|:
name|bool
name|m_enable_io
block|;
name|bool
name|m_set_lldb_globals
block|;
name|bool
name|m_maskout_errors
block|;     }
argument_list|;
name|virtual
name|bool
name|ExecuteOneLine
argument_list|(
specifier|const
name|char
operator|*
name|command
argument_list|,
name|CommandReturnObject
operator|*
name|result
argument_list|,
specifier|const
name|ExecuteScriptOptions
operator|&
name|options
operator|=
name|ExecuteScriptOptions
argument_list|()
argument_list|)
operator|=
literal|0
argument_list|;
name|virtual
name|void
name|ExecuteInterpreterLoop
argument_list|()
operator|=
literal|0
argument_list|;
name|virtual
name|bool
name|ExecuteOneLineWithReturn
argument_list|(
argument|const char *in_string
argument_list|,
argument|ScriptReturnType return_type
argument_list|,
argument|void *ret_value
argument_list|,
argument|const ExecuteScriptOptions&options = ExecuteScriptOptions()
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|virtual
name|Error
name|ExecuteMultipleLines
parameter_list|(
specifier|const
name|char
modifier|*
name|in_string
parameter_list|,
specifier|const
name|ExecuteScriptOptions
modifier|&
name|options
init|=
name|ExecuteScriptOptions
argument_list|()
parameter_list|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"not implemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|virtual
name|Error
name|ExportFunctionDefinitionToInterpreter
parameter_list|(
name|StringList
modifier|&
name|function_def
parameter_list|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"not implemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|virtual
name|Error
name|GenerateBreakpointCommandCallbackData
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"not implemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|virtual
name|bool
name|GenerateWatchpointCommandCallbackData
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateTypeScriptFunction
argument_list|(
specifier|const
name|char
operator|*
name|oneliner
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|void
operator|*
name|name_token
operator|=
name|NULL
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateTypeScriptFunction
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|void
operator|*
name|name_token
operator|=
name|NULL
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateScriptAliasFunction
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateTypeSynthClass
argument_list|(
name|StringList
operator|&
name|input
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|void
operator|*
name|name_token
operator|=
name|NULL
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GenerateTypeSynthClass
argument_list|(
specifier|const
name|char
operator|*
name|oneliner
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|void
operator|*
name|name_token
operator|=
name|NULL
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|CreateSyntheticScriptedProvider
argument_list|(
argument|const char *class_name
argument_list|,
argument|lldb::ValueObjectSP valobj
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_CreatePluginObject
argument_list|(
argument|const char *class_name
argument_list|,
argument|lldb::ProcessSP process_sp
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_RegisterInfo
argument_list|(
argument|lldb::ScriptInterpreterObjectSP os_plugin_object_sp
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_ThreadsInfo
argument_list|(
argument|lldb::ScriptInterpreterObjectSP os_plugin_object_sp
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_RegisterContextData
argument_list|(
argument|lldb::ScriptInterpreterObjectSP os_plugin_object_sp
argument_list|,
argument|lldb::tid_t thread_id
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|OSPlugin_CreateThread
argument_list|(
argument|lldb::ScriptInterpreterObjectSP os_plugin_object_sp
argument_list|,
argument|lldb::tid_t tid
argument_list|,
argument|lldb::addr_t context
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|CreateScriptedThreadPlan
argument_list|(
argument|const char *class_name
argument_list|,
argument|lldb::ThreadPlanSP thread_plan_sp
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|bool
name|ScriptedThreadPlanExplainsStop
argument_list|(
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|implementor_sp
argument_list|,
name|Event
operator|*
name|event
argument_list|,
name|bool
operator|&
name|script_error
argument_list|)
block|{
name|script_error
operator|=
name|true
expr_stmt|;
return|return
name|true
return|;
block|}
name|virtual
name|bool
name|ScriptedThreadPlanShouldStop
argument_list|(
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|implementor_sp
argument_list|,
name|Event
operator|*
name|event
argument_list|,
name|bool
operator|&
name|script_error
argument_list|)
block|{
name|script_error
operator|=
name|true
expr_stmt|;
return|return
name|true
return|;
block|}
name|virtual
name|lldb
operator|::
name|StateType
name|ScriptedThreadPlanGetRunState
argument_list|(
argument|lldb::ScriptInterpreterObjectSP implementor_sp
argument_list|,
argument|bool&script_error
argument_list|)
block|{
name|script_error
operator|=
name|true
block|;
return|return
name|lldb
operator|::
name|eStateStepping
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|LoadPluginModule
argument_list|(
argument|const FileSpec& file_spec
argument_list|,
argument|lldb_private::Error& error
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|GetDynamicSettings
argument_list|(
argument|lldb::ScriptInterpreterObjectSP plugin_module_sp
argument_list|,
argument|Target* target
argument_list|,
argument|const char* setting_name
argument_list|,
argument|lldb_private::Error& error
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|()
return|;
block|}
name|virtual
name|Error
name|GenerateFunction
parameter_list|(
specifier|const
name|char
modifier|*
name|signature
parameter_list|,
specifier|const
name|StringList
modifier|&
name|input
parameter_list|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|virtual
name|void
name|CollectDataForBreakpointCommandCallback
argument_list|(
name|std
operator|::
name|vector
operator|<
name|BreakpointOptions
operator|*
operator|>
operator|&
name|options
argument_list|,
name|CommandReturnObject
operator|&
name|result
argument_list|)
decl_stmt|;
name|virtual
name|void
name|CollectDataForWatchpointCommandCallback
parameter_list|(
name|WatchpointOptions
modifier|*
name|wp_options
parameter_list|,
name|CommandReturnObject
modifier|&
name|result
parameter_list|)
function_decl|;
comment|/// Set the specified text as the callback for the breakpoint.
name|Error
name|SetBreakpointCommandCallback
argument_list|(
name|std
operator|::
name|vector
operator|<
name|BreakpointOptions
operator|*
operator|>
operator|&
name|bp_options_vec
argument_list|,
specifier|const
name|char
operator|*
name|callback_text
argument_list|)
decl_stmt|;
name|virtual
name|Error
name|SetBreakpointCommandCallback
parameter_list|(
name|BreakpointOptions
modifier|*
name|bp_options
parameter_list|,
specifier|const
name|char
modifier|*
name|callback_text
parameter_list|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|void
name|SetBreakpointCommandCallbackFunction
argument_list|(
name|std
operator|::
name|vector
operator|<
name|BreakpointOptions
operator|*
operator|>
operator|&
name|bp_options_vec
argument_list|,
specifier|const
name|char
operator|*
name|function_name
argument_list|)
decl_stmt|;
comment|/// Set a one-liner as the callback for the breakpoint.
name|virtual
name|void
name|SetBreakpointCommandCallbackFunction
parameter_list|(
name|BreakpointOptions
modifier|*
name|bp_options
parameter_list|,
specifier|const
name|char
modifier|*
name|function_name
parameter_list|)
block|{
return|return;
block|}
comment|/// Set a one-liner as the callback for the watchpoint.
name|virtual
name|void
name|SetWatchpointCommandCallback
parameter_list|(
name|WatchpointOptions
modifier|*
name|wp_options
parameter_list|,
specifier|const
name|char
modifier|*
name|oneliner
parameter_list|)
block|{
return|return;
block|}
name|virtual
name|bool
name|GetScriptedSummary
argument_list|(
specifier|const
name|char
operator|*
name|function_name
argument_list|,
name|lldb
operator|::
name|ValueObjectSP
name|valobj
argument_list|,
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|callee_wrapper_sp
argument_list|,
specifier|const
name|TypeSummaryOptions
operator|&
name|options
argument_list|,
name|std
operator|::
name|string
operator|&
name|retval
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|void
name|Clear
parameter_list|()
block|{
comment|// Clean up any ref counts to SBObjects that might be in global variables
block|}
name|virtual
name|size_t
name|CalculateNumChildren
argument_list|(
specifier|const
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|implementor
argument_list|)
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|lldb
operator|::
name|ValueObjectSP
name|GetChildAtIndex
argument_list|(
argument|const lldb::ScriptInterpreterObjectSP& implementor
argument_list|,
argument|uint32_t idx
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ValueObjectSP
argument_list|()
return|;
block|}
name|virtual
name|int
name|GetIndexOfChildWithName
argument_list|(
specifier|const
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|implementor
argument_list|,
specifier|const
name|char
operator|*
name|child_name
argument_list|)
block|{
return|return
name|UINT32_MAX
return|;
block|}
name|virtual
name|bool
name|UpdateSynthProviderInstance
argument_list|(
specifier|const
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|implementor
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|MightHaveChildrenSynthProviderInstance
argument_list|(
specifier|const
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|&
name|implementor
argument_list|)
block|{
return|return
name|true
return|;
block|}
name|virtual
name|lldb
operator|::
name|ValueObjectSP
name|GetSyntheticValue
argument_list|(
argument|const lldb::ScriptInterpreterObjectSP& implementor
argument_list|)
block|{
return|return
name|nullptr
return|;
block|}
name|virtual
name|bool
name|RunScriptBasedCommand
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
specifier|const
name|char
operator|*
name|args
argument_list|,
name|ScriptedCommandSynchronicity
name|synchronicity
argument_list|,
name|lldb_private
operator|::
name|CommandReturnObject
operator|&
name|cmd_retobj
argument_list|,
name|Error
operator|&
name|error
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ExecutionContext
operator|&
name|exe_ctx
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Process
operator|*
name|process
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Thread
operator|*
name|thread
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Target
operator|*
name|target
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|StackFrame
operator|*
name|frame
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|ValueObject
operator|*
name|value
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GetDocumentationForItem
argument_list|(
specifier|const
name|char
operator|*
name|item
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
block|{
name|dest
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|CheckObjectExists
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|LoadScriptingModule
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
name|bool
name|can_reload
argument_list|,
name|bool
name|init_session
argument_list|,
name|lldb_private
operator|::
name|Error
operator|&
name|error
argument_list|,
name|lldb
operator|::
name|ScriptInterpreterObjectSP
operator|*
name|module_sp
operator|=
name|nullptr
argument_list|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"loading unimplemented"
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|MakeScriptObject
argument_list|(
argument|void* object
argument_list|)
block|{
return|return
name|lldb
operator|::
name|ScriptInterpreterObjectSP
argument_list|(
argument|new ScriptInterpreterObject(object)
argument_list|)
return|;
block|}
name|virtual
name|std
operator|::
name|unique_ptr
operator|<
name|ScriptInterpreterLocker
operator|>
name|AcquireInterpreterLock
argument_list|()
expr_stmt|;
specifier|const
name|char
modifier|*
name|GetScriptInterpreterPtyName
parameter_list|()
function_decl|;
name|int
name|GetMasterFileDescriptor
parameter_list|()
function_decl|;
name|CommandInterpreter
modifier|&
name|GetCommandInterpreter
parameter_list|()
function_decl|;
specifier|static
name|std
operator|::
name|string
name|LanguageToString
argument_list|(
argument|lldb::ScriptLanguage language
argument_list|)
expr_stmt|;
specifier|static
name|void
name|InitializeInterpreter
parameter_list|(
name|SWIGInitCallback
name|python_swig_init_callback
parameter_list|,
name|SWIGBreakpointCallbackFunction
name|swig_breakpoint_callback
parameter_list|,
name|SWIGWatchpointCallbackFunction
name|swig_watchpoint_callback
parameter_list|,
name|SWIGPythonTypeScriptCallbackFunction
name|swig_typescript_callback
parameter_list|,
name|SWIGPythonCreateSyntheticProvider
name|swig_synthetic_script
parameter_list|,
name|SWIGPythonCalculateNumChildren
name|swig_calc_children
parameter_list|,
name|SWIGPythonGetChildAtIndex
name|swig_get_child_index
parameter_list|,
name|SWIGPythonGetIndexOfChildWithName
name|swig_get_index_child
parameter_list|,
name|SWIGPythonCastPyObjectToSBValue
name|swig_cast_to_sbvalue
parameter_list|,
name|SWIGPythonGetValueObjectSPFromSBValue
name|swig_get_valobj_sp_from_sbvalue
parameter_list|,
name|SWIGPythonUpdateSynthProviderInstance
name|swig_update_provider
parameter_list|,
name|SWIGPythonMightHaveChildrenSynthProviderInstance
name|swig_mighthavechildren_provider
parameter_list|,
name|SWIGPythonGetValueSynthProviderInstance
name|swig_getvalue_provider
parameter_list|,
name|SWIGPythonCallCommand
name|swig_call_command
parameter_list|,
name|SWIGPythonCallModuleInit
name|swig_call_module_init
parameter_list|,
name|SWIGPythonCreateOSPlugin
name|swig_create_os_plugin
parameter_list|,
name|SWIGPythonScriptKeyword_Process
name|swig_run_script_keyword_process
parameter_list|,
name|SWIGPythonScriptKeyword_Thread
name|swig_run_script_keyword_thread
parameter_list|,
name|SWIGPythonScriptKeyword_Target
name|swig_run_script_keyword_target
parameter_list|,
name|SWIGPythonScriptKeyword_Frame
name|swig_run_script_keyword_frame
parameter_list|,
name|SWIGPythonScriptKeyword_Value
name|swig_run_script_keyword_value
parameter_list|,
name|SWIGPython_GetDynamicSetting
name|swig_plugin_get
parameter_list|,
name|SWIGPythonCreateScriptedThreadPlan
name|swig_thread_plan_script
parameter_list|,
name|SWIGPythonCallThreadPlan
name|swig_call_thread_plan
parameter_list|)
function_decl|;
name|virtual
name|void
name|ResetOutputFileHandle
parameter_list|(
name|FILE
modifier|*
name|new_fh
parameter_list|)
block|{ }
comment|//By default, do nothing.
name|protected
label|:
name|CommandInterpreter
modifier|&
name|m_interpreter
decl_stmt|;
name|lldb
operator|::
name|ScriptLanguage
name|m_script_lang
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef liblldb_ScriptInterpreter_h_
end_comment

end_unit

