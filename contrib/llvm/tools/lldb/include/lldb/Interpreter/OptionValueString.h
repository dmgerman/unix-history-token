begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- OptionValueString.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_OptionValueString_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_OptionValueString_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<string>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Core/Flags.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/OptionValue.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|OptionValueString
range|:
name|public
name|OptionValue
block|{
name|public
operator|:
typedef|typedef
name|Error
function_decl|(
modifier|*
name|ValidatorCallback
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
block|enum
name|Options
block|{
name|eOptionEncodeCharacterEscapeSequences
operator|=
operator|(
literal|1u
operator|<<
literal|0
operator|)
block|}
decl_stmt|;
name|OptionValueString
argument_list|()
operator|:
name|OptionValue
argument_list|()
operator|,
name|m_current_value
argument_list|()
operator|,
name|m_default_value
argument_list|()
operator|,
name|m_options
argument_list|()
operator|,
name|m_validator
argument_list|()
operator|,
name|m_validator_baton
argument_list|()
block|{     }
name|OptionValueString
argument_list|(
argument|ValidatorCallback validator
argument_list|,
argument|void* baton = nullptr
argument_list|)
operator|:
name|OptionValue
argument_list|()
operator|,
name|m_current_value
argument_list|()
operator|,
name|m_default_value
argument_list|()
operator|,
name|m_options
argument_list|()
operator|,
name|m_validator
argument_list|(
name|validator
argument_list|)
operator|,
name|m_validator_baton
argument_list|(
argument|baton
argument_list|)
block|{     }
name|OptionValueString
argument_list|(
specifier|const
name|char
operator|*
name|value
argument_list|)
operator|:
name|OptionValue
argument_list|()
operator|,
name|m_current_value
argument_list|()
operator|,
name|m_default_value
argument_list|()
operator|,
name|m_options
argument_list|()
operator|,
name|m_validator
argument_list|()
operator|,
name|m_validator_baton
argument_list|()
block|{
if|if
condition|(
name|value
operator|&&
name|value
index|[
literal|0
index|]
condition|)
block|{
name|m_current_value
operator|.
name|assign
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|m_default_value
operator|.
name|assign
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|OptionValueString
argument_list|(
specifier|const
name|char
operator|*
name|current_value
argument_list|,
specifier|const
name|char
operator|*
name|default_value
argument_list|)
operator|:
name|OptionValue
argument_list|()
operator|,
name|m_current_value
argument_list|()
operator|,
name|m_default_value
argument_list|()
operator|,
name|m_options
argument_list|()
operator|,
name|m_validator
argument_list|()
operator|,
name|m_validator_baton
argument_list|()
block|{
if|if
condition|(
name|current_value
operator|&&
name|current_value
index|[
literal|0
index|]
condition|)
name|m_current_value
operator|.
name|assign
argument_list|(
name|current_value
argument_list|)
expr_stmt|;
if|if
condition|(
name|default_value
operator|&&
name|default_value
index|[
literal|0
index|]
condition|)
name|m_default_value
operator|.
name|assign
argument_list|(
name|default_value
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_macro
name|OptionValueString
argument_list|(
argument|const char *value
argument_list|,
argument|ValidatorCallback validator
argument_list|,
argument|void* baton = nullptr
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|OptionValue
argument_list|()
operator|,
name|m_current_value
argument_list|()
operator|,
name|m_default_value
argument_list|()
operator|,
name|m_options
argument_list|()
operator|,
name|m_validator
argument_list|(
name|validator
argument_list|)
operator|,
name|m_validator_baton
argument_list|(
argument|baton
argument_list|)
block|{
if|if
condition|(
name|value
operator|&&
name|value
index|[
literal|0
index|]
condition|)
block|{
name|m_current_value
operator|.
name|assign
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|m_default_value
operator|.
name|assign
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}          OptionValueString
operator|(
specifier|const
name|char
operator|*
name|current_value
operator|,
specifier|const
name|char
operator|*
name|default_value
operator|,
name|ValidatorCallback
name|validator
operator|,
name|void
operator|*
name|baton
operator|=
name|nullptr
operator|)
operator|:
name|OptionValue
argument_list|()
operator|,
name|m_current_value
argument_list|()
operator|,
name|m_default_value
argument_list|()
operator|,
name|m_options
argument_list|()
operator|,
name|m_validator
argument_list|(
name|validator
argument_list|)
operator|,
name|m_validator_baton
argument_list|(
argument|baton
argument_list|)
block|{
if|if
condition|(
name|current_value
operator|&&
name|current_value
index|[
literal|0
index|]
condition|)
name|m_current_value
operator|.
name|assign
argument_list|(
name|current_value
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|default_value
operator|&&
name|default_value
index|[
literal|0
index|]
condition|)
name|m_default_value
operator|.
name|assign
argument_list|(
name|default_value
argument_list|)
expr_stmt|;
end_if

begin_macro
unit|}          ~
name|OptionValueString
argument_list|()
end_macro

begin_expr_stmt
name|override
operator|=
expr|default
expr_stmt|;
end_expr_stmt

begin_comment
comment|//---------------------------------------------------------------------
end_comment

begin_comment
comment|// Virtual subclass pure virtual overrides
end_comment

begin_comment
comment|//---------------------------------------------------------------------
end_comment

begin_expr_stmt
name|OptionValue
operator|::
name|Type
name|GetType
argument_list|()
specifier|const
name|override
block|{
return|return
name|eTypeString
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|DumpValue
argument_list|(
specifier|const
name|ExecutionContext
operator|*
name|exe_ctx
argument_list|,
name|Stream
operator|&
name|strm
argument_list|,
name|uint32_t
name|dump_mask
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Error
name|SetValueFromString
argument_list|(
name|llvm
operator|::
name|StringRef
name|value
argument_list|,
name|VarSetOperationType
name|op
operator|=
name|eVarSetOperationAssign
argument_list|)
name|override
decl_stmt|;
end_decl_stmt

begin_function
name|bool
name|Clear
parameter_list|()
function|override
block|{
name|m_current_value
operator|=
name|m_default_value
expr_stmt|;
name|m_value_was_set
operator|=
name|false
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_expr_stmt
name|lldb
operator|::
name|OptionValueSP
name|DeepCopy
argument_list|()
specifier|const
name|override
expr_stmt|;
end_expr_stmt

begin_comment
comment|//---------------------------------------------------------------------
end_comment

begin_comment
comment|// Subclass specific functions
end_comment

begin_comment
comment|//---------------------------------------------------------------------
end_comment

begin_function
name|Flags
modifier|&
name|GetOptions
parameter_list|()
block|{
return|return
name|m_options
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|Flags
operator|&
name|GetOptions
argument_list|()
specifier|const
block|{
return|return
name|m_options
return|;
block|}
end_expr_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|operator
init|=
operator|(
specifier|const
name|char
operator|*
name|value
operator|)
block|{
name|SetCurrentValue
argument_list|(
name|value
argument_list|)
block|;
return|return
name|m_current_value
operator|.
name|c_str
argument_list|()
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|const
name|char
operator|*
name|GetCurrentValue
argument_list|()
specifier|const
block|{
return|return
name|m_current_value
operator|.
name|c_str
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|char
operator|*
name|GetDefaultValue
argument_list|()
specifier|const
block|{
return|return
name|m_default_value
operator|.
name|c_str
argument_list|()
return|;
block|}
end_expr_stmt

begin_function_decl
name|Error
name|SetCurrentValue
parameter_list|(
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Error
name|AppendToCurrentValue
parameter_list|(
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|SetDefaultValue
parameter_list|(
specifier|const
name|char
modifier|*
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|&&
name|value
index|[
literal|0
index|]
condition|)
name|m_default_value
operator|.
name|assign
argument_list|(
name|value
argument_list|)
expr_stmt|;
else|else
name|m_default_value
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|bool
name|IsCurrentValueEmpty
argument_list|()
specifier|const
block|{
return|return
name|m_current_value
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|IsDefaultValueEmpty
argument_list|()
specifier|const
block|{
return|return
name|m_default_value
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|string
name|m_current_value
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_default_value
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|Flags
name|m_options
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ValidatorCallback
name|m_validator
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
modifier|*
name|m_validator_baton
decl_stmt|;
end_decl_stmt

begin_comment
unit|};  }
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_OptionValueString_h_
end_comment

end_unit

