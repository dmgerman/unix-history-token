begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- CommandCompletions.h ------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_CommandCompletions_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_CommandCompletions_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<set>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/SearchFilter.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/FileSpecList.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/RegularExpression.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|CommandCompletions
block|{
name|public
label|:
comment|//----------------------------------------------------------------------
comment|// This is the command completion callback that is used to complete the argument of the option
comment|// it is bound to (in the OptionDefinition table below).  Return the total number of matches.
comment|//----------------------------------------------------------------------
typedef|typedef
name|int
argument_list|(
argument|*CompletionCallback
argument_list|)
operator|(
name|CommandInterpreter
operator|&
name|interpreter
operator|,
specifier|const
name|char
operator|*
name|completion_str
operator|,
comment|// This is the argument we are completing
name|int
name|match_start_point
operator|,
comment|// This is the point in the list of matches that you should start returning elements
name|int
name|max_return_elements
operator|,
comment|// This is the number of matches requested.
name|lldb_private
operator|::
name|SearchFilter
operator|*
name|searcher
operator|,
comment|// A search filter to limit the search...
name|bool
operator|&
name|word_complete
operator|,
name|lldb_private
operator|::
name|StringList
operator|&
name|matches
operator|)
expr_stmt|;
comment|// The array of matches we return.
typedef|typedef
enum|enum
block|{
name|eNoCompletion
init|=
literal|0u
block|,
name|eSourceFileCompletion
init|=
operator|(
literal|1u
operator|<<
literal|0
operator|)
block|,
name|eDiskFileCompletion
init|=
operator|(
literal|1u
operator|<<
literal|1
operator|)
block|,
name|eDiskDirectoryCompletion
init|=
operator|(
literal|1u
operator|<<
literal|2
operator|)
block|,
name|eSymbolCompletion
init|=
operator|(
literal|1u
operator|<<
literal|3
operator|)
block|,
name|eModuleCompletion
init|=
operator|(
literal|1u
operator|<<
literal|4
operator|)
block|,
name|eSettingsNameCompletion
init|=
operator|(
literal|1u
operator|<<
literal|5
operator|)
block|,
name|ePlatformPluginCompletion
init|=
operator|(
literal|1u
operator|<<
literal|6
operator|)
block|,
name|eArchitectureCompletion
init|=
operator|(
literal|1u
operator|<<
literal|7
operator|)
block|,
name|eVariablePathCompletion
init|=
operator|(
literal|1u
operator|<<
literal|8
operator|)
block|,
comment|// This item serves two purposes.  It is the last element in the enum,
comment|// so you can add custom enums starting from here in your Option class.
comment|// Also if you& in this bit the base code will not process the option.
name|eCustomCompletion
init|=
operator|(
literal|1u
operator|<<
literal|9
operator|)
block|}
name|CommonCompletionTypes
typedef|;
struct|struct
name|CommonCompletionElement
block|{
name|uint32_t
name|type
decl_stmt|;
name|CompletionCallback
name|callback
decl_stmt|;
block|}
struct|;
specifier|static
name|bool
name|InvokeCommonCompletionCallbacks
parameter_list|(
name|CommandInterpreter
modifier|&
name|interpreter
parameter_list|,
name|uint32_t
name|completion_mask
parameter_list|,
specifier|const
name|char
modifier|*
name|completion_str
parameter_list|,
name|int
name|match_start_point
parameter_list|,
name|int
name|max_return_elements
parameter_list|,
name|SearchFilter
modifier|*
name|searcher
parameter_list|,
name|bool
modifier|&
name|word_complete
parameter_list|,
name|StringList
modifier|&
name|matches
parameter_list|)
function_decl|;
comment|//----------------------------------------------------------------------
comment|// These are the generic completer functions:
comment|//----------------------------------------------------------------------
specifier|static
name|int
name|DiskFiles
parameter_list|(
name|CommandInterpreter
modifier|&
name|interpreter
parameter_list|,
specifier|const
name|char
modifier|*
name|partial_file_name
parameter_list|,
name|int
name|match_start_point
parameter_list|,
name|int
name|max_return_elements
parameter_list|,
name|SearchFilter
modifier|*
name|searcher
parameter_list|,
name|bool
modifier|&
name|word_complete
parameter_list|,
name|StringList
modifier|&
name|matches
parameter_list|)
function_decl|;
specifier|static
name|int
name|DiskDirectories
parameter_list|(
name|CommandInterpreter
modifier|&
name|interpreter
parameter_list|,
specifier|const
name|char
modifier|*
name|partial_file_name
parameter_list|,
name|int
name|match_start_point
parameter_list|,
name|int
name|max_return_elements
parameter_list|,
name|SearchFilter
modifier|*
name|searcher
parameter_list|,
name|bool
modifier|&
name|word_complete
parameter_list|,
name|StringList
modifier|&
name|matches
parameter_list|)
function_decl|;
specifier|static
name|int
name|SourceFiles
parameter_list|(
name|CommandInterpreter
modifier|&
name|interpreter
parameter_list|,
specifier|const
name|char
modifier|*
name|partial_file_name
parameter_list|,
name|int
name|match_start_point
parameter_list|,
name|int
name|max_return_elements
parameter_list|,
name|SearchFilter
modifier|*
name|searcher
parameter_list|,
name|bool
modifier|&
name|word_complete
parameter_list|,
name|StringList
modifier|&
name|matches
parameter_list|)
function_decl|;
specifier|static
name|int
name|Modules
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|,
specifier|const
name|char
operator|*
name|partial_file_name
argument_list|,
name|int
name|match_start_point
argument_list|,
name|int
name|max_return_elements
argument_list|,
name|SearchFilter
operator|*
name|searcher
argument_list|,
name|bool
operator|&
name|word_complete
argument_list|,
name|lldb_private
operator|::
name|StringList
operator|&
name|matches
argument_list|)
decl_stmt|;
specifier|static
name|int
name|Symbols
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|,
specifier|const
name|char
operator|*
name|partial_file_name
argument_list|,
name|int
name|match_start_point
argument_list|,
name|int
name|max_return_elements
argument_list|,
name|SearchFilter
operator|*
name|searcher
argument_list|,
name|bool
operator|&
name|word_complete
argument_list|,
name|lldb_private
operator|::
name|StringList
operator|&
name|matches
argument_list|)
decl_stmt|;
specifier|static
name|int
name|SettingsNames
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|,
specifier|const
name|char
operator|*
name|partial_file_name
argument_list|,
name|int
name|match_start_point
argument_list|,
name|int
name|max_return_elements
argument_list|,
name|SearchFilter
operator|*
name|searcher
argument_list|,
name|bool
operator|&
name|word_complete
argument_list|,
name|lldb_private
operator|::
name|StringList
operator|&
name|matches
argument_list|)
decl_stmt|;
specifier|static
name|int
name|PlatformPluginNames
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|,
specifier|const
name|char
operator|*
name|partial_file_name
argument_list|,
name|int
name|match_start_point
argument_list|,
name|int
name|max_return_elements
argument_list|,
name|SearchFilter
operator|*
name|searcher
argument_list|,
name|bool
operator|&
name|word_complete
argument_list|,
name|lldb_private
operator|::
name|StringList
operator|&
name|matches
argument_list|)
decl_stmt|;
specifier|static
name|int
name|ArchitectureNames
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|,
specifier|const
name|char
operator|*
name|partial_file_name
argument_list|,
name|int
name|match_start_point
argument_list|,
name|int
name|max_return_elements
argument_list|,
name|SearchFilter
operator|*
name|searcher
argument_list|,
name|bool
operator|&
name|word_complete
argument_list|,
name|lldb_private
operator|::
name|StringList
operator|&
name|matches
argument_list|)
decl_stmt|;
specifier|static
name|int
name|VariablePath
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|,
specifier|const
name|char
operator|*
name|partial_file_name
argument_list|,
name|int
name|match_start_point
argument_list|,
name|int
name|max_return_elements
argument_list|,
name|SearchFilter
operator|*
name|searcher
argument_list|,
name|bool
operator|&
name|word_complete
argument_list|,
name|lldb_private
operator|::
name|StringList
operator|&
name|matches
argument_list|)
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// The Completer class is a convenient base class for building searchers
comment|// that go along with the SearchFilter passed to the standard Completer
comment|// functions.
comment|//----------------------------------------------------------------------
name|class
name|Completer
range|:
name|public
name|Searcher
block|{
name|public
operator|:
name|Completer
argument_list|(
argument|CommandInterpreter&interpreter
argument_list|,
argument|const char *completion_str
argument_list|,
argument|int match_start_point
argument_list|,
argument|int max_return_elements
argument_list|,
argument|StringList&matches
argument_list|)
block|;
operator|~
name|Completer
argument_list|()
name|override
block|;
name|CallbackReturn
name|SearchCallback
argument_list|(
argument|SearchFilter&filter
argument_list|,
argument|SymbolContext&context
argument_list|,
argument|Address *addr
argument_list|,
argument|bool complete
argument_list|)
name|override
operator|=
literal|0
block|;
name|Depth
name|GetDepth
argument_list|()
name|override
operator|=
literal|0
block|;
name|virtual
name|size_t
name|DoCompletion
argument_list|(
name|SearchFilter
operator|*
name|filter
argument_list|)
operator|=
literal|0
block|;
name|protected
operator|:
name|CommandInterpreter
operator|&
name|m_interpreter
block|;
name|std
operator|::
name|string
name|m_completion_str
block|;
name|int
name|m_match_start_point
block|;
name|int
name|m_max_return_elements
block|;
name|StringList
operator|&
name|m_matches
block|;
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Completer
argument_list|)
block|;     }
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// SourceFileCompleter implements the source file completer
comment|//----------------------------------------------------------------------
name|class
name|SourceFileCompleter
range|:
name|public
name|Completer
block|{
name|public
operator|:
name|SourceFileCompleter
argument_list|(
argument|CommandInterpreter&interpreter
argument_list|,
argument|bool include_support_files
argument_list|,
argument|const char *completion_str
argument_list|,
argument|int match_start_point
argument_list|,
argument|int max_return_elements
argument_list|,
argument|StringList&matches
argument_list|)
block|;
name|Searcher
operator|::
name|Depth
name|GetDepth
argument_list|()
name|override
block|;
name|Searcher
operator|::
name|CallbackReturn
name|SearchCallback
argument_list|(
argument|SearchFilter&filter
argument_list|,
argument|SymbolContext&context
argument_list|,
argument|Address *addr
argument_list|,
argument|bool complete
argument_list|)
name|override
block|;
name|size_t
name|DoCompletion
argument_list|(
argument|SearchFilter *filter
argument_list|)
name|override
block|;
name|private
operator|:
name|bool
name|m_include_support_files
block|;
name|FileSpecList
name|m_matching_files
block|;
specifier|const
name|char
operator|*
name|m_file_name
block|;
specifier|const
name|char
operator|*
name|m_dir_name
block|;
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|SourceFileCompleter
argument_list|)
block|;     }
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// ModuleCompleter implements the module completer
comment|//----------------------------------------------------------------------
name|class
name|ModuleCompleter
range|:
name|public
name|Completer
block|{
name|public
operator|:
name|ModuleCompleter
argument_list|(
argument|CommandInterpreter&interpreter
argument_list|,
argument|const char *completion_str
argument_list|,
argument|int match_start_point
argument_list|,
argument|int max_return_elements
argument_list|,
argument|StringList&matches
argument_list|)
block|;
name|Searcher
operator|::
name|Depth
name|GetDepth
argument_list|()
name|override
block|;
name|Searcher
operator|::
name|CallbackReturn
name|SearchCallback
argument_list|(
argument|SearchFilter&filter
argument_list|,
argument|SymbolContext&context
argument_list|,
argument|Address *addr
argument_list|,
argument|bool complete
argument_list|)
name|override
block|;
name|size_t
name|DoCompletion
argument_list|(
argument|SearchFilter *filter
argument_list|)
name|override
block|;
name|private
operator|:
specifier|const
name|char
operator|*
name|m_file_name
block|;
specifier|const
name|char
operator|*
name|m_dir_name
block|;
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ModuleCompleter
argument_list|)
block|;     }
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// SymbolCompleter implements the symbol completer
comment|//----------------------------------------------------------------------
name|class
name|SymbolCompleter
range|:
name|public
name|Completer
block|{
name|public
operator|:
name|SymbolCompleter
argument_list|(
argument|CommandInterpreter&interpreter
argument_list|,
argument|const char *completion_str
argument_list|,
argument|int match_start_point
argument_list|,
argument|int max_return_elements
argument_list|,
argument|StringList&matches
argument_list|)
block|;
name|Searcher
operator|::
name|Depth
name|GetDepth
argument_list|()
name|override
block|;
name|Searcher
operator|::
name|CallbackReturn
name|SearchCallback
argument_list|(
argument|SearchFilter&filter
argument_list|,
argument|SymbolContext&context
argument_list|,
argument|Address *addr
argument_list|,
argument|bool complete
argument_list|)
name|override
block|;
name|size_t
name|DoCompletion
argument_list|(
argument|SearchFilter *filter
argument_list|)
name|override
block|;
name|private
operator|:
comment|//        struct NameCmp {
comment|//            bool operator() (const ConstString& lhs, const ConstString& rhs) const
comment|//            {
comment|//                return lhs< rhs;
comment|//            }
comment|//        };
name|RegularExpression
name|m_regex
block|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|ConstString
operator|>
name|collection
expr_stmt|;
name|collection
name|m_match_set
decl_stmt|;
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|SymbolCompleter
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|private
label|:
specifier|static
name|CommonCompletionElement
name|g_common_completions
index|[]
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_CommandCompletions_h_
end_comment

end_unit

