begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- FormattersHelpers.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_FormattersHelpers_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_FormattersHelpers_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-forward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/TypeCategory.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/TypeFormat.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/TypeSummary.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/TypeSynthetic.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|formatters
block|{
name|void
name|AddFormat
argument_list|(
name|TypeCategoryImpl
operator|::
name|SharedPointer
name|category_sp
argument_list|,
name|lldb
operator|::
name|Format
name|format
argument_list|,
name|ConstString
name|type_name
argument_list|,
name|TypeFormatImpl
operator|::
name|Flags
name|flags
argument_list|,
name|bool
name|regex
operator|=
name|false
argument_list|)
decl_stmt|;
name|void
name|AddSummary
argument_list|(
name|TypeCategoryImpl
operator|::
name|SharedPointer
name|category_sp
argument_list|,
name|lldb
operator|::
name|TypeSummaryImplSP
name|summary_sp
argument_list|,
name|ConstString
name|type_name
argument_list|,
name|bool
name|regex
operator|=
name|false
argument_list|)
decl_stmt|;
name|void
name|AddStringSummary
argument_list|(
name|TypeCategoryImpl
operator|::
name|SharedPointer
name|category_sp
argument_list|,
specifier|const
name|char
operator|*
name|string
argument_list|,
name|ConstString
name|type_name
argument_list|,
name|TypeSummaryImpl
operator|::
name|Flags
name|flags
argument_list|,
name|bool
name|regex
operator|=
name|false
argument_list|)
decl_stmt|;
name|void
name|AddOneLineSummary
argument_list|(
name|TypeCategoryImpl
operator|::
name|SharedPointer
name|category_sp
argument_list|,
name|ConstString
name|type_name
argument_list|,
name|TypeSummaryImpl
operator|::
name|Flags
name|flags
argument_list|,
name|bool
name|regex
operator|=
name|false
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
name|void
name|AddCXXSummary
argument_list|(
name|TypeCategoryImpl
operator|::
name|SharedPointer
name|category_sp
argument_list|,
name|CXXFunctionSummaryFormat
operator|::
name|Callback
name|funct
argument_list|,
specifier|const
name|char
operator|*
name|description
argument_list|,
name|ConstString
name|type_name
argument_list|,
name|TypeSummaryImpl
operator|::
name|Flags
name|flags
argument_list|,
name|bool
name|regex
operator|=
name|false
argument_list|)
decl_stmt|;
name|void
name|AddCXXSynthetic
argument_list|(
name|TypeCategoryImpl
operator|::
name|SharedPointer
name|category_sp
argument_list|,
name|CXXSyntheticChildren
operator|::
name|CreateFrontEndCallback
name|generator
argument_list|,
specifier|const
name|char
operator|*
name|description
argument_list|,
name|ConstString
name|type_name
argument_list|,
name|ScriptedSyntheticChildren
operator|::
name|Flags
name|flags
argument_list|,
name|bool
name|regex
operator|=
name|false
argument_list|)
decl_stmt|;
name|void
name|AddFilter
argument_list|(
name|TypeCategoryImpl
operator|::
name|SharedPointer
name|category_sp
argument_list|,
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|children
argument_list|,
specifier|const
name|char
operator|*
name|description
argument_list|,
name|ConstString
name|type_name
argument_list|,
name|ScriptedSyntheticChildren
operator|::
name|Flags
name|flags
argument_list|,
name|bool
name|regex
operator|=
name|false
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|StackFrame
modifier|*
name|GetViableFrame
parameter_list|(
name|ExecutionContext
name|exe_ctx
parameter_list|)
function_decl|;
name|bool
name|ExtractValueFromObjCExpression
parameter_list|(
name|ValueObject
modifier|&
name|valobj
parameter_list|,
specifier|const
name|char
modifier|*
name|target_type
parameter_list|,
specifier|const
name|char
modifier|*
name|selector
parameter_list|,
name|uint64_t
modifier|&
name|value
parameter_list|)
function_decl|;
name|bool
name|ExtractSummaryFromObjCExpression
argument_list|(
name|ValueObject
operator|&
name|valobj
argument_list|,
specifier|const
name|char
operator|*
name|target_type
argument_list|,
specifier|const
name|char
operator|*
name|selector
argument_list|,
name|Stream
operator|&
name|stream
argument_list|,
name|lldb
operator|::
name|LanguageType
name|lang_type
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|ValueObjectSP
name|CallSelectorOnObject
argument_list|(
argument|ValueObject&valobj
argument_list|,
argument|const char* return_type
argument_list|,
argument|const char* selector
argument_list|,
argument|uint64_t index
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|ValueObjectSP
name|CallSelectorOnObject
argument_list|(
name|ValueObject
operator|&
name|valobj
argument_list|,
specifier|const
name|char
operator|*
name|return_type
argument_list|,
specifier|const
name|char
operator|*
name|selector
argument_list|,
specifier|const
name|char
operator|*
name|key
argument_list|)
expr_stmt|;
name|size_t
name|ExtractIndexFromString
parameter_list|(
specifier|const
name|char
modifier|*
name|item_name
parameter_list|)
function_decl|;
name|lldb
operator|::
name|addr_t
name|GetArrayAddressOrPointerValue
argument_list|(
name|ValueObject
operator|&
name|valobj
argument_list|)
expr_stmt|;
name|time_t
name|GetOSXEpoch
parameter_list|()
function_decl|;
struct|struct
name|InferiorSizedWord
block|{
name|InferiorSizedWord
argument_list|(
specifier|const
name|InferiorSizedWord
operator|&
name|word
argument_list|)
operator|:
name|ptr_size
argument_list|(
argument|word.ptr_size
argument_list|)
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
name|thirty_two
operator|=
name|word
operator|.
name|thirty_two
expr_stmt|;
else|else
name|sixty_four
operator|=
name|word
operator|.
name|sixty_four
expr_stmt|;
block|}
name|InferiorSizedWord
name|operator
init|=
operator|(
specifier|const
name|InferiorSizedWord
operator|&
name|word
operator|)
block|{
name|ptr_size
operator|=
name|word
operator|.
name|ptr_size
block|;
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
name|thirty_two
operator|=
name|word
operator|.
name|thirty_two
expr_stmt|;
else|else
name|sixty_four
operator|=
name|word
operator|.
name|sixty_four
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|InferiorSizedWord
argument_list|(
name|uint64_t
name|val
argument_list|,
name|Process
operator|&
name|process
argument_list|)
range|:
name|ptr_size
argument_list|(
argument|process.GetAddressByteSize()
argument_list|)
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
name|thirty_two
operator|=
operator|(
name|uint32_t
operator|)
name|val
expr_stmt|;
elseif|else
if|if
condition|(
name|ptr_size
operator|==
literal|8
condition|)
name|sixty_four
operator|=
name|val
expr_stmt|;
else|else
name|assert
argument_list|(
name|false
operator|&&
literal|"new pointer size is unknown"
argument_list|)
expr_stmt|;
block|}
name|bool
name|IsNegative
argument_list|()
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
operator|(
operator|(
name|int32_t
operator|)
name|thirty_two
operator|)
operator|<
literal|0
return|;
else|else
return|return
operator|(
operator|(
name|int64_t
operator|)
name|sixty_four
operator|)
operator|<
literal|0
return|;
block|}
name|bool
name|IsZero
argument_list|()
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
name|thirty_two
operator|==
literal|0
return|;
else|else
return|return
name|sixty_four
operator|==
literal|0
return|;
block|}
decl|static
name|InferiorSizedWord
name|GetMaximum
argument_list|(
name|Process
operator|&
name|process
argument_list|)
block|{
if|if
condition|(
name|process
operator|.
name|GetAddressByteSize
argument_list|()
operator|==
literal|4
condition|)
return|return
name|InferiorSizedWord
argument_list|(
name|UINT32_MAX
argument_list|,
literal|4
argument_list|)
return|;
else|else
return|return
name|InferiorSizedWord
argument_list|(
name|UINT64_MAX
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|InferiorSizedWord
name|operator
decl|>>
argument_list|(
name|int
name|rhs
argument_list|)
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
name|InferiorSizedWord
argument_list|(
name|thirty_two
operator|>>
name|rhs
argument_list|,
literal|4
argument_list|)
return|;
return|return
name|InferiorSizedWord
argument_list|(
name|sixty_four
operator|>>
name|rhs
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|InferiorSizedWord
name|operator
decl|<<
argument_list|(
name|int
name|rhs
argument_list|)
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
name|InferiorSizedWord
argument_list|(
name|thirty_two
operator|<<
name|rhs
argument_list|,
literal|4
argument_list|)
return|;
return|return
name|InferiorSizedWord
argument_list|(
name|sixty_four
operator|<<
name|rhs
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|InferiorSizedWord
name|operator
modifier|&
argument_list|(
specifier|const
name|InferiorSizedWord
operator|&
name|word
argument_list|)
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|!=
name|word
operator|.
name|ptr_size
condition|)
return|return
name|InferiorSizedWord
argument_list|(
literal|0
argument_list|,
name|ptr_size
argument_list|)
return|;
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
name|InferiorSizedWord
argument_list|(
name|thirty_two
operator|&
name|word
operator|.
name|thirty_two
argument_list|,
literal|4
argument_list|)
return|;
return|return
name|InferiorSizedWord
argument_list|(
name|sixty_four
operator|&
name|word
operator|.
name|sixty_four
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|InferiorSizedWord
name|operator
modifier|&
argument_list|(
name|int
name|x
argument_list|)
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
name|InferiorSizedWord
argument_list|(
name|thirty_two
operator|&
name|x
argument_list|,
literal|4
argument_list|)
return|;
return|return
name|InferiorSizedWord
argument_list|(
name|sixty_four
operator|&
name|x
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|size_t
name|GetBitSize
argument_list|()
decl|const
block|{
return|return
name|ptr_size
operator|<<
literal|3
return|;
block|}
name|size_t
name|GetByteSize
argument_list|()
decl|const
block|{
return|return
name|ptr_size
return|;
block|}
name|uint64_t
name|GetValue
argument_list|()
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
operator|(
name|uint64_t
operator|)
name|thirty_two
return|;
return|return
name|sixty_four
return|;
block|}
name|InferiorSizedWord
name|SignExtend
argument_list|()
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
name|InferiorSizedWord
argument_list|(
operator|(
name|int32_t
operator|)
name|thirty_two
argument_list|,
literal|4
argument_list|)
return|;
return|return
name|InferiorSizedWord
argument_list|(
operator|(
name|int64_t
operator|)
name|sixty_four
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|uint8_t
modifier|*
name|CopyToBuffer
argument_list|(
name|uint8_t
operator|*
name|buffer
argument_list|)
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
block|{
name|memcpy
argument_list|(
name|buffer
argument_list|,
operator|&
name|thirty_two
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|+
literal|4
return|;
block|}
else|else
block|{
name|memcpy
argument_list|(
name|buffer
argument_list|,
operator|&
name|sixty_four
argument_list|,
literal|8
argument_list|)
expr_stmt|;
return|return
name|buffer
operator|+
literal|8
return|;
block|}
block|}
name|DataExtractor
name|GetAsData
argument_list|(
name|lldb
operator|::
name|ByteOrder
name|byte_order
operator|=
name|lldb
operator|::
name|eByteOrderInvalid
argument_list|)
decl|const
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
return|return
name|DataExtractor
argument_list|(
operator|&
name|thirty_two
argument_list|,
literal|4
argument_list|,
name|byte_order
argument_list|,
literal|4
argument_list|)
return|;
else|else
return|return
name|DataExtractor
argument_list|(
operator|&
name|sixty_four
argument_list|,
literal|8
argument_list|,
name|byte_order
argument_list|,
literal|8
argument_list|)
return|;
block|}
name|private
range|:
name|InferiorSizedWord
argument_list|(
argument|uint64_t val
argument_list|,
argument|size_t psz
argument_list|)
operator|:
name|ptr_size
argument_list|(
argument|psz
argument_list|)
block|{
if|if
condition|(
name|ptr_size
operator|==
literal|4
condition|)
name|thirty_two
operator|=
operator|(
name|uint32_t
operator|)
name|val
expr_stmt|;
else|else
name|sixty_four
operator|=
name|val
expr_stmt|;
block|}
name|size_t
name|ptr_size
struct|;
union|union
block|{
name|uint32_t
name|thirty_two
decl_stmt|;
name|uint64_t
name|sixty_four
decl_stmt|;
block|}
union|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace formatters
end_comment

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_FormattersHelpers_h_
end_comment

end_unit

