begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- TypeCategoryMap.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_TypeCategoryMap_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_TypeCategoryMap_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-public.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/FormattersContainer.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/TypeCategory.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|TypeCategoryMap
block|{
name|private
label|:
typedef|typedef
name|ConstString
name|KeyType
typedef|;
typedef|typedef
name|TypeCategoryImpl
name|ValueType
typedef|;
typedef|typedef
name|ValueType
operator|::
name|SharedPointer
name|ValueSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|list
operator|<
name|lldb
operator|::
name|TypeCategoryImplSP
operator|>
name|ActiveCategoriesList
expr_stmt|;
typedef|typedef
name|ActiveCategoriesList
operator|::
name|iterator
name|ActiveCategoriesIterator
expr_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|KeyType
operator|,
name|ValueSP
operator|>
name|MapType
expr_stmt|;
typedef|typedef
name|MapType
operator|::
name|iterator
name|MapIterator
expr_stmt|;
typedef|typedef
name|bool
function_decl|(
modifier|*
name|CallbackType
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|ValueSP
modifier|&
parameter_list|)
function_decl|;
typedef|typedef
name|uint32_t
name|Position
typedef|;
specifier|static
specifier|const
name|Position
name|First
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|Position
name|Default
init|=
literal|1
decl_stmt|;
specifier|static
specifier|const
name|Position
name|Last
init|=
name|UINT32_MAX
decl_stmt|;
name|TypeCategoryMap
argument_list|(
name|IFormatChangeListener
operator|*
name|lst
argument_list|)
expr_stmt|;
name|void
name|Add
parameter_list|(
name|KeyType
name|name
parameter_list|,
specifier|const
name|ValueSP
modifier|&
name|entry
parameter_list|)
function_decl|;
name|bool
name|Delete
parameter_list|(
name|KeyType
name|name
parameter_list|)
function_decl|;
name|bool
name|Enable
parameter_list|(
name|KeyType
name|category_name
parameter_list|,
name|Position
name|pos
init|=
name|Default
parameter_list|)
function_decl|;
name|bool
name|Disable
parameter_list|(
name|KeyType
name|category_name
parameter_list|)
function_decl|;
name|bool
name|Enable
parameter_list|(
name|ValueSP
name|category
parameter_list|,
name|Position
name|pos
init|=
name|Default
parameter_list|)
function_decl|;
name|bool
name|Disable
parameter_list|(
name|ValueSP
name|category
parameter_list|)
function_decl|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|bool
name|Get
parameter_list|(
name|KeyType
name|name
parameter_list|,
name|ValueSP
modifier|&
name|entry
parameter_list|)
function_decl|;
name|bool
name|Get
parameter_list|(
name|uint32_t
name|pos
parameter_list|,
name|ValueSP
modifier|&
name|entry
parameter_list|)
function_decl|;
name|void
name|LoopThrough
parameter_list|(
name|CallbackType
name|callback
parameter_list|,
name|void
modifier|*
name|param
parameter_list|)
function_decl|;
name|lldb
operator|::
name|TypeCategoryImplSP
name|GetAtIndex
argument_list|(
name|uint32_t
argument_list|)
expr_stmt|;
name|bool
name|AnyMatches
argument_list|(
name|ConstString
name|type_name
argument_list|,
name|TypeCategoryImpl
operator|::
name|FormatCategoryItems
name|items
operator|=
name|TypeCategoryImpl
operator|::
name|ALL_ITEM_TYPES
argument_list|,
name|bool
name|only_enabled
operator|=
name|true
argument_list|,
specifier|const
name|char
operator|*
operator|*
name|matching_category
operator|=
name|NULL
argument_list|,
name|TypeCategoryImpl
operator|::
name|FormatCategoryItems
operator|*
name|matching_type
operator|=
name|NULL
argument_list|)
decl_stmt|;
name|uint32_t
name|GetCount
parameter_list|()
block|{
return|return
name|m_map
operator|.
name|size
argument_list|()
return|;
block|}
name|lldb
operator|::
name|TypeFormatImplSP
name|GetFormat
argument_list|(
argument|ValueObject& valobj
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|TypeSummaryImplSP
name|GetSummaryFormat
argument_list|(
argument|ValueObject& valobj
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
name|lldb
operator|::
name|SyntheticChildrenSP
name|GetSyntheticChildren
argument_list|(
argument|ValueObject& valobj
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|private
label|:
name|class
name|delete_matching_categories
block|{
name|lldb
operator|::
name|TypeCategoryImplSP
name|ptr
expr_stmt|;
name|public
label|:
name|delete_matching_categories
argument_list|(
argument|lldb::TypeCategoryImplSP p
argument_list|)
block|:
name|ptr
argument_list|(
argument|p
argument_list|)
block|{}
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|lldb
operator|::
name|TypeCategoryImplSP
operator|&
name|other
operator|)
block|{
return|return
name|ptr
operator|.
name|get
argument_list|()
operator|==
name|other
operator|.
name|get
argument_list|()
return|;
block|}
block|}
empty_stmt|;
name|Mutex
name|m_map_mutex
decl_stmt|;
name|IFormatChangeListener
modifier|*
name|listener
decl_stmt|;
name|MapType
name|m_map
decl_stmt|;
name|ActiveCategoriesList
name|m_active_categories
decl_stmt|;
name|MapType
modifier|&
name|map
parameter_list|()
block|{
return|return
name|m_map
return|;
block|}
name|ActiveCategoriesList
modifier|&
name|active_list
parameter_list|()
block|{
return|return
name|m_active_categories
return|;
block|}
name|Mutex
modifier|&
name|mutex
parameter_list|()
block|{
return|return
name|m_map_mutex
return|;
block|}
name|friend
name|class
name|FormattersContainer
operator|<
name|KeyType
operator|,
name|ValueType
operator|>
expr_stmt|;
name|friend
name|class
name|FormatManager
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_TypeCategoryMap_h_
end_comment

end_unit

