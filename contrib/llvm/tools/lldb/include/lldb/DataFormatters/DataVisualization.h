begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DataVisualization.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_DataVisualization_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_DataVisualization_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Core/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/FormatClasses.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/FormatManager.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|// this class is the high-level front-end of LLDB Data Visualization
comment|// code in FormatManager.h/cpp is the low-level implementation of this feature
comment|// clients should refer to this class as the entry-point into the data formatters
comment|// unless they have a good reason to bypass this and go to the backend
name|class
name|DataVisualization
block|{
name|public
label|:
comment|// use this call to force the FM to consider itself updated even when there is no apparent reason for that
specifier|static
name|void
name|ForceUpdate
parameter_list|()
function_decl|;
specifier|static
name|uint32_t
name|GetCurrentRevision
parameter_list|()
function_decl|;
name|class
name|ValueFormats
block|{
name|public
label|:
specifier|static
name|lldb
operator|::
name|TypeFormatImplSP
name|GetFormat
argument_list|(
argument|ValueObject& valobj
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|TypeFormatImplSP
name|GetFormat
argument_list|(
specifier|const
name|ConstString
operator|&
name|type
argument_list|)
expr_stmt|;
specifier|static
name|void
name|Add
argument_list|(
specifier|const
name|ConstString
operator|&
name|type
argument_list|,
specifier|const
name|lldb
operator|::
name|TypeFormatImplSP
operator|&
name|entry
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|Delete
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|type
parameter_list|)
function_decl|;
specifier|static
name|void
name|Clear
parameter_list|()
function_decl|;
specifier|static
name|void
name|LoopThrough
argument_list|(
name|TypeFormatImpl
operator|::
name|ValueCallback
name|callback
argument_list|,
name|void
operator|*
name|callback_baton
argument_list|)
decl_stmt|;
specifier|static
name|size_t
name|GetCount
parameter_list|()
function_decl|;
specifier|static
name|lldb
operator|::
name|TypeNameSpecifierImplSP
name|GetTypeNameSpecifierForFormatAtIndex
argument_list|(
name|size_t
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|TypeFormatImplSP
name|GetFormatAtIndex
argument_list|(
name|size_t
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
specifier|static
name|lldb
operator|::
name|TypeSummaryImplSP
name|GetSummaryFormat
argument_list|(
argument|ValueObject& valobj
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|TypeSummaryImplSP
name|GetSummaryForType
argument_list|(
argument|lldb::TypeNameSpecifierImplSP type_sp
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
specifier|static
name|lldb
operator|::
name|SyntheticChildrenSP
name|GetSyntheticChildrenForType
argument_list|(
argument|lldb::TypeNameSpecifierImplSP type_sp
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|static
name|lldb
operator|::
name|TypeFilterImplSP
name|GetFilterForType
argument_list|(
argument|lldb::TypeNameSpecifierImplSP type_sp
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
specifier|static
name|lldb
operator|::
name|ScriptedSyntheticChildrenSP
name|GetSyntheticForType
argument_list|(
argument|lldb::TypeNameSpecifierImplSP type_sp
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
specifier|static
name|lldb
operator|::
name|SyntheticChildrenSP
name|GetSyntheticChildren
argument_list|(
argument|ValueObject& valobj
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|static
name|bool
name|AnyMatches
argument_list|(
name|ConstString
name|type_name
argument_list|,
name|TypeCategoryImpl
operator|::
name|FormatCategoryItems
name|items
operator|=
name|TypeCategoryImpl
operator|::
name|ALL_ITEM_TYPES
argument_list|,
name|bool
name|only_enabled
operator|=
name|true
argument_list|,
specifier|const
name|char
operator|*
operator|*
name|matching_category
operator|=
name|NULL
argument_list|,
name|TypeCategoryImpl
operator|::
name|FormatCategoryItems
operator|*
name|matching_type
operator|=
name|NULL
argument_list|)
decl_stmt|;
name|class
name|NamedSummaryFormats
block|{
name|public
label|:
specifier|static
name|bool
name|GetSummaryFormat
argument_list|(
specifier|const
name|ConstString
operator|&
name|type
argument_list|,
name|lldb
operator|::
name|TypeSummaryImplSP
operator|&
name|entry
argument_list|)
decl_stmt|;
specifier|static
name|void
name|Add
argument_list|(
specifier|const
name|ConstString
operator|&
name|type
argument_list|,
specifier|const
name|lldb
operator|::
name|TypeSummaryImplSP
operator|&
name|entry
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|Delete
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|type
parameter_list|)
function_decl|;
specifier|static
name|void
name|Clear
parameter_list|()
function_decl|;
specifier|static
name|void
name|LoopThrough
argument_list|(
name|TypeSummaryImpl
operator|::
name|SummaryCallback
name|callback
argument_list|,
name|void
operator|*
name|callback_baton
argument_list|)
decl_stmt|;
specifier|static
name|uint32_t
name|GetCount
parameter_list|()
function_decl|;
block|}
empty_stmt|;
name|class
name|Categories
block|{
name|public
label|:
specifier|static
name|bool
name|GetCategory
argument_list|(
specifier|const
name|ConstString
operator|&
name|category
argument_list|,
name|lldb
operator|::
name|TypeCategoryImplSP
operator|&
name|entry
argument_list|,
name|bool
name|allow_create
operator|=
name|true
argument_list|)
decl_stmt|;
specifier|static
name|void
name|Add
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|category
parameter_list|)
function_decl|;
specifier|static
name|bool
name|Delete
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|category
parameter_list|)
function_decl|;
specifier|static
name|void
name|Clear
parameter_list|()
function_decl|;
specifier|static
name|void
name|Clear
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|category
parameter_list|)
function_decl|;
specifier|static
name|void
name|Enable
argument_list|(
specifier|const
name|ConstString
operator|&
name|category
argument_list|,
name|TypeCategoryMap
operator|::
name|Position
operator|=
name|TypeCategoryMap
operator|::
name|Default
argument_list|)
decl_stmt|;
specifier|static
name|void
name|Disable
parameter_list|(
specifier|const
name|ConstString
modifier|&
name|category
parameter_list|)
function_decl|;
specifier|static
name|void
name|Enable
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeCategoryImplSP
operator|&
name|category
argument_list|,
name|TypeCategoryMap
operator|::
name|Position
operator|=
name|TypeCategoryMap
operator|::
name|Default
argument_list|)
decl_stmt|;
specifier|static
name|void
name|Disable
argument_list|(
specifier|const
name|lldb
operator|::
name|TypeCategoryImplSP
operator|&
name|category
argument_list|)
decl_stmt|;
specifier|static
name|void
name|LoopThrough
argument_list|(
name|FormatManager
operator|::
name|CategoryCallback
name|callback
argument_list|,
name|void
operator|*
name|callback_baton
argument_list|)
decl_stmt|;
specifier|static
name|uint32_t
name|GetCount
parameter_list|()
function_decl|;
specifier|static
name|lldb
operator|::
name|TypeCategoryImplSP
name|GetCategoryAtIndex
argument_list|(
name|size_t
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_DataVisualization_h_
end_comment

end_unit

