begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- TypeFormat.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_TypeFormat_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_TypeFormat_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<string>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-public.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ValueObject.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|TypeFormatImpl
block|{
name|public
label|:
name|class
name|Flags
block|{
name|public
label|:
name|Flags
argument_list|()
operator|:
name|m_flags
argument_list|(
argument|lldb::eTypeOptionCascade
argument_list|)
block|{}
name|Flags
argument_list|(
specifier|const
name|Flags
operator|&
name|other
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|other.m_flags
argument_list|)
block|{}
name|Flags
argument_list|(
argument|uint32_t value
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|value
argument_list|)
block|{}
name|Flags
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Flags
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
operator|&
name|rhs
operator|!=
name|this
condition|)
name|m_flags
operator|=
name|rhs
operator|.
name|m_flags
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Flags
modifier|&
name|operator
init|=
operator|(
specifier|const
name|uint32_t
operator|&
name|rhs
operator|)
block|{
name|m_flags
operator|=
name|rhs
block|;
return|return
operator|*
name|this
return|;
block|}
name|Flags
modifier|&
name|Clear
parameter_list|()
block|{
name|m_flags
operator|=
literal|0
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetCascades
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionCascade
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionCascade
return|;
block|}
name|Flags
modifier|&
name|SetCascades
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionCascade
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionCascade
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetSkipPointers
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionSkipPointers
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionSkipPointers
return|;
block|}
name|Flags
modifier|&
name|SetSkipPointers
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionSkipPointers
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionSkipPointers
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetSkipReferences
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionSkipReferences
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionSkipReferences
return|;
block|}
name|Flags
modifier|&
name|SetSkipReferences
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionSkipReferences
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionSkipReferences
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|uint32_t
name|GetValue
parameter_list|()
block|{
return|return
name|m_flags
return|;
block|}
name|void
name|SetValue
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|m_flags
operator|=
name|value
expr_stmt|;
block|}
name|private
label|:
name|uint32_t
name|m_flags
decl_stmt|;
block|}
empty_stmt|;
name|TypeFormatImpl
argument_list|(
argument|lldb::Format f = lldb::eFormatInvalid
argument_list|,
argument|const Flags& flags = Flags()
argument_list|)
empty_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|TypeFormatImpl
operator|>
name|SharedPointer
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|ValueCallback
argument_list|)
argument_list|(
name|void
operator|*
argument_list|,
name|ConstString
argument_list|,
specifier|const
name|lldb
operator|::
name|TypeFormatImplSP
operator|&
argument_list|)
expr_stmt|;
operator|~
name|TypeFormatImpl
argument_list|()
block|{         }
name|bool
name|Cascades
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetCascades
argument_list|()
return|;
block|}
name|bool
name|SkipsPointers
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetSkipPointers
argument_list|()
return|;
block|}
name|bool
name|SkipsReferences
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetSkipReferences
argument_list|()
return|;
block|}
name|void
name|SetCascades
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetCascades
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetSkipsPointers
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetSkipPointers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetSkipsReferences
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetSkipReferences
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|lldb
operator|::
name|Format
name|GetFormat
argument_list|()
specifier|const
block|{
return|return
name|m_format
return|;
block|}
name|void
name|SetFormat
argument_list|(
name|lldb
operator|::
name|Format
name|fmt
argument_list|)
block|{
name|m_format
operator|=
name|fmt
expr_stmt|;
block|}
name|uint32_t
name|GetOptions
parameter_list|()
block|{
return|return
name|m_flags
operator|.
name|GetValue
argument_list|()
return|;
block|}
name|void
name|SetOptions
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|uint32_t
modifier|&
name|GetRevision
parameter_list|()
block|{
return|return
name|m_my_revision
return|;
block|}
name|std
operator|::
name|string
name|GetDescription
argument_list|()
expr_stmt|;
name|protected
label|:
name|Flags
name|m_flags
decl_stmt|;
name|lldb
operator|::
name|Format
name|m_format
expr_stmt|;
name|uint32_t
name|m_my_revision
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TypeFormatImpl
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_TypeFormat_h_
end_comment

end_unit

