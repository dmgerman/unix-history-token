begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- TypeSummary.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_TypeSummary_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_TypeSummary_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-public.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ValueObject.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/ScriptInterpreterPython.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/Type.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|TypeSummaryImpl
block|{
name|public
label|:
name|class
name|Flags
block|{
name|public
label|:
name|Flags
argument_list|()
operator|:
name|m_flags
argument_list|(
argument|lldb::eTypeOptionCascade
argument_list|)
block|{}
name|Flags
argument_list|(
specifier|const
name|Flags
operator|&
name|other
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|other.m_flags
argument_list|)
block|{}
name|Flags
argument_list|(
argument|uint32_t value
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|value
argument_list|)
block|{}
name|Flags
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Flags
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
operator|&
name|rhs
operator|!=
name|this
condition|)
name|m_flags
operator|=
name|rhs
operator|.
name|m_flags
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Flags
modifier|&
name|operator
init|=
operator|(
specifier|const
name|uint32_t
operator|&
name|rhs
operator|)
block|{
name|m_flags
operator|=
name|rhs
block|;
return|return
operator|*
name|this
return|;
block|}
name|Flags
modifier|&
name|Clear
parameter_list|()
block|{
name|m_flags
operator|=
literal|0
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetCascades
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionCascade
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionCascade
return|;
block|}
name|Flags
modifier|&
name|SetCascades
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionCascade
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionCascade
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetSkipPointers
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionSkipPointers
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionSkipPointers
return|;
block|}
name|Flags
modifier|&
name|SetSkipPointers
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionSkipPointers
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionSkipPointers
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetSkipReferences
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionSkipReferences
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionSkipReferences
return|;
block|}
name|Flags
modifier|&
name|SetSkipReferences
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionSkipReferences
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionSkipReferences
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetDontShowChildren
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionHideChildren
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionHideChildren
return|;
block|}
name|Flags
modifier|&
name|SetDontShowChildren
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionHideChildren
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionHideChildren
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetDontShowValue
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionHideValue
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionHideValue
return|;
block|}
name|Flags
modifier|&
name|SetDontShowValue
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionHideValue
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionHideValue
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetShowMembersOneLiner
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionShowOneLiner
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionShowOneLiner
return|;
block|}
name|Flags
modifier|&
name|SetShowMembersOneLiner
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionShowOneLiner
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionShowOneLiner
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetHideItemNames
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionHideNames
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionHideNames
return|;
block|}
name|Flags
modifier|&
name|SetHideItemNames
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionHideNames
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionHideNames
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|uint32_t
name|GetValue
parameter_list|()
block|{
return|return
name|m_flags
return|;
block|}
name|void
name|SetValue
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|m_flags
operator|=
name|value
expr_stmt|;
block|}
name|private
label|:
name|uint32_t
name|m_flags
decl_stmt|;
block|}
empty_stmt|;
typedef|typedef
enum|enum
name|Type
block|{
name|eTypeUnknown
block|,
name|eTypeString
block|,
name|eTypeScript
block|,
name|eTypeCallback
block|}
name|Type
typedef|;
name|TypeSummaryImpl
argument_list|(
specifier|const
name|TypeSummaryImpl
operator|::
name|Flags
operator|&
name|flags
argument_list|)
expr_stmt|;
name|bool
name|Cascades
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetCascades
argument_list|()
return|;
block|}
name|bool
name|SkipsPointers
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetSkipPointers
argument_list|()
return|;
block|}
name|bool
name|SkipsReferences
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetSkipReferences
argument_list|()
return|;
block|}
name|bool
name|DoesPrintChildren
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_flags
operator|.
name|GetDontShowChildren
argument_list|()
return|;
block|}
name|bool
name|DoesPrintValue
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_flags
operator|.
name|GetDontShowValue
argument_list|()
return|;
block|}
name|bool
name|IsOneliner
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetShowMembersOneLiner
argument_list|()
return|;
block|}
name|bool
name|HideNames
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetHideItemNames
argument_list|()
return|;
block|}
name|void
name|SetCascades
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetCascades
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetSkipsPointers
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetSkipPointers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetSkipsReferences
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetSkipReferences
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetDoesPrintChildren
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetDontShowChildren
argument_list|(
operator|!
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetDoesPrintValue
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetDontShowValue
argument_list|(
operator|!
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetIsOneliner
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetShowMembersOneLiner
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetHideNames
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetHideItemNames
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|uint32_t
name|GetOptions
parameter_list|()
block|{
return|return
name|m_flags
operator|.
name|GetValue
argument_list|()
return|;
block|}
name|void
name|SetOptions
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|virtual
operator|~
name|TypeSummaryImpl
argument_list|()
block|{         }
comment|// we are using a ValueObject* instead of a ValueObjectSP because we do not need to hold on to this for
comment|// extended periods of time and we trust the ValueObject to stay around for as long as it is required
comment|// for us to generate its summary
name|virtual
name|bool
name|FormatObject
argument_list|(
name|ValueObject
operator|*
name|valobj
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|std
operator|::
name|string
name|GetDescription
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|IsScripted
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|Type
name|GetType
parameter_list|()
init|=
literal|0
function_decl|;
name|uint32_t
modifier|&
name|GetRevision
parameter_list|()
block|{
return|return
name|m_my_revision
return|;
block|}
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|TypeSummaryImpl
operator|>
name|SharedPointer
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|SummaryCallback
argument_list|)
argument_list|(
name|void
operator|*
argument_list|,
name|ConstString
argument_list|,
specifier|const
name|lldb
operator|::
name|TypeSummaryImplSP
operator|&
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|RegexSummaryCallback
argument_list|)
argument_list|(
name|void
operator|*
argument_list|,
name|lldb
operator|::
name|RegularExpressionSP
argument_list|,
specifier|const
name|lldb
operator|::
name|TypeSummaryImplSP
operator|&
argument_list|)
expr_stmt|;
name|protected
label|:
name|uint32_t
name|m_my_revision
decl_stmt|;
name|Flags
name|m_flags
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TypeSummaryImpl
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// simple string-based summaries, using ${var to show data
end_comment

begin_decl_stmt
name|struct
name|StringSummaryFormat
range|:
name|public
name|TypeSummaryImpl
block|{
name|std
operator|::
name|string
name|m_format
block|;
name|StringSummaryFormat
argument_list|(
specifier|const
name|TypeSummaryImpl
operator|::
name|Flags
operator|&
name|flags
argument_list|,
specifier|const
name|char
operator|*
name|f
argument_list|)
block|;
specifier|const
name|char
operator|*
name|GetSummaryString
argument_list|()
specifier|const
block|{
return|return
name|m_format
operator|.
name|c_str
argument_list|()
return|;
block|}
name|void
name|SetSummaryString
argument_list|(
argument|const char* data
argument_list|)
block|{
if|if
condition|(
name|data
condition|)
name|m_format
operator|.
name|assign
argument_list|(
name|data
argument_list|)
expr_stmt|;
else|else
name|m_format
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|virtual
operator|~
name|StringSummaryFormat
argument_list|()
block|{         }
name|virtual
name|bool
name|FormatObject
argument_list|(
name|ValueObject
operator|*
name|valobj
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
block|;
name|virtual
name|std
operator|::
name|string
name|GetDescription
argument_list|()
block|;
name|virtual
name|bool
name|IsScripted
argument_list|()
block|{
return|return
name|false
return|;
block|}
name|virtual
name|Type
name|GetType
argument_list|()
block|{
return|return
name|TypeSummaryImpl
operator|::
name|eTypeString
return|;
block|}
name|private
operator|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|StringSummaryFormat
argument_list|)
block|;     }
decl_stmt|;
end_decl_stmt

begin_comment
comment|// summaries implemented via a C++ function
end_comment

begin_decl_stmt
name|struct
name|CXXFunctionSummaryFormat
range|:
name|public
name|TypeSummaryImpl
block|{
comment|// we should convert these to SBValue and SBStream if we ever cross
comment|// the boundary towards the external world
typedef|typedef
name|bool
function_decl|(
modifier|*
name|Callback
function_decl|)
parameter_list|(
name|ValueObject
modifier|&
name|valobj
parameter_list|,
name|Stream
modifier|&
name|dest
parameter_list|)
function_decl|;
name|Callback
name|m_impl
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|m_description
expr_stmt|;
end_expr_stmt

begin_macro
name|CXXFunctionSummaryFormat
argument_list|(
argument|const TypeSummaryImpl::Flags& flags
argument_list|,
argument|Callback impl
argument_list|,
argument|const char* description
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|Callback
name|GetBackendFunction
argument_list|()
specifier|const
block|{
return|return
name|m_impl
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|char
operator|*
name|GetTextualInfo
argument_list|()
specifier|const
block|{
return|return
name|m_description
operator|.
name|c_str
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|SetBackendFunction
parameter_list|(
name|Callback
name|cb_func
parameter_list|)
block|{
name|m_impl
operator|=
name|cb_func
expr_stmt|;
block|}
end_function

begin_function
name|void
name|SetTextualInfo
parameter_list|(
specifier|const
name|char
modifier|*
name|descr
parameter_list|)
block|{
if|if
condition|(
name|descr
condition|)
name|m_description
operator|.
name|assign
argument_list|(
name|descr
argument_list|)
expr_stmt|;
else|else
name|m_description
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|virtual
operator|~
name|CXXFunctionSummaryFormat
argument_list|()
block|{         }
name|virtual
name|bool
name|FormatObject
argument_list|(
name|ValueObject
operator|*
name|valobj
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|virtual
name|std
operator|::
name|string
name|GetDescription
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
name|virtual
name|bool
name|IsScripted
parameter_list|()
block|{
return|return
name|false
return|;
block|}
end_function

begin_function
name|virtual
name|Type
name|GetType
parameter_list|()
block|{
return|return
name|TypeSummaryImpl
operator|::
name|eTypeCallback
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|CXXFunctionSummaryFormat
operator|>
name|SharedPointer
expr_stmt|;
end_typedef

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|CXXFunctionSummaryFormat
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|LLDB_DISABLE_PYTHON
end_ifndef

begin_comment
comment|// Python-based summaries, running script code to show data
end_comment

begin_decl_stmt
name|struct
name|ScriptSummaryFormat
range|:
name|public
name|TypeSummaryImpl
block|{
name|std
operator|::
name|string
name|m_function_name
block|;
name|std
operator|::
name|string
name|m_python_script
block|;
name|lldb
operator|::
name|ScriptInterpreterObjectSP
name|m_script_function_sp
block|;
name|ScriptSummaryFormat
argument_list|(
specifier|const
name|TypeSummaryImpl
operator|::
name|Flags
operator|&
name|flags
argument_list|,
specifier|const
name|char
operator|*
name|function_name
argument_list|,
specifier|const
name|char
operator|*
name|python_script
operator|=
name|NULL
argument_list|)
block|;
specifier|const
name|char
operator|*
name|GetFunctionName
argument_list|()
specifier|const
block|{
return|return
name|m_function_name
operator|.
name|c_str
argument_list|()
return|;
block|}
specifier|const
name|char
operator|*
name|GetPythonScript
argument_list|()
specifier|const
block|{
return|return
name|m_python_script
operator|.
name|c_str
argument_list|()
return|;
block|}
name|void
name|SetFunctionName
argument_list|(
argument|const char* function_name
argument_list|)
block|{
if|if
condition|(
name|function_name
condition|)
name|m_function_name
operator|.
name|assign
argument_list|(
name|function_name
argument_list|)
expr_stmt|;
else|else
name|m_function_name
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_python_script
operator|.
name|clear
argument_list|()
block|;         }
name|void
name|SetPythonScript
argument_list|(
argument|const char* script
argument_list|)
block|{
if|if
condition|(
name|script
condition|)
name|m_python_script
operator|.
name|assign
argument_list|(
name|script
argument_list|)
expr_stmt|;
else|else
name|m_python_script
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
name|virtual
operator|~
name|ScriptSummaryFormat
argument_list|()
block|{         }
name|virtual
name|bool
name|FormatObject
argument_list|(
name|ValueObject
operator|*
name|valobj
argument_list|,
name|std
operator|::
name|string
operator|&
name|dest
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|virtual
name|std
operator|::
name|string
name|GetDescription
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
name|virtual
name|bool
name|IsScripted
parameter_list|()
block|{
return|return
name|true
return|;
block|}
end_function

begin_function
name|virtual
name|Type
name|GetType
parameter_list|()
block|{
return|return
name|TypeSummaryImpl
operator|::
name|eTypeScript
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|ScriptSummaryFormat
operator|>
name|SharedPointer
expr_stmt|;
end_typedef

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ScriptSummaryFormat
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_TypeSummary_h_
end_comment

end_unit

