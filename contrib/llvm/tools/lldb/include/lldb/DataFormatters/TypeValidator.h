begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- TypeValidator.h ------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_TypeValidator_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_TypeValidator_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-public.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private-enumerations.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|TypeValidatorImpl
block|{
name|public
label|:
name|class
name|Flags
block|{
name|public
label|:
name|Flags
argument_list|()
operator|:
name|m_flags
argument_list|(
argument|lldb::eTypeOptionCascade
argument_list|)
block|{}
name|Flags
argument_list|(
specifier|const
name|Flags
operator|&
name|other
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|other.m_flags
argument_list|)
block|{}
name|Flags
argument_list|(
argument|uint32_t value
argument_list|)
operator|:
name|m_flags
argument_list|(
argument|value
argument_list|)
block|{}
name|Flags
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Flags
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
operator|&
name|rhs
operator|!=
name|this
condition|)
name|m_flags
operator|=
name|rhs
operator|.
name|m_flags
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|Flags
modifier|&
name|operator
init|=
operator|(
specifier|const
name|uint32_t
operator|&
name|rhs
operator|)
block|{
name|m_flags
operator|=
name|rhs
block|;
return|return
operator|*
name|this
return|;
block|}
name|Flags
modifier|&
name|Clear
parameter_list|()
block|{
name|m_flags
operator|=
literal|0
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetCascades
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionCascade
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionCascade
return|;
block|}
name|Flags
modifier|&
name|SetCascades
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionCascade
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionCascade
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetSkipPointers
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionSkipPointers
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionSkipPointers
return|;
block|}
name|Flags
modifier|&
name|SetSkipPointers
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionSkipPointers
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionSkipPointers
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetSkipReferences
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionSkipReferences
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionSkipReferences
return|;
block|}
name|Flags
modifier|&
name|SetSkipReferences
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionSkipReferences
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionSkipReferences
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|GetNonCacheable
argument_list|()
specifier|const
block|{
return|return
operator|(
name|m_flags
operator|&
name|lldb
operator|::
name|eTypeOptionNonCacheable
operator|)
operator|==
name|lldb
operator|::
name|eTypeOptionNonCacheable
return|;
block|}
name|Flags
modifier|&
name|SetNonCacheable
parameter_list|(
name|bool
name|value
init|=
name|true
parameter_list|)
block|{
if|if
condition|(
name|value
condition|)
name|m_flags
operator||=
name|lldb
operator|::
name|eTypeOptionNonCacheable
expr_stmt|;
else|else
name|m_flags
operator|&=
operator|~
name|lldb
operator|::
name|eTypeOptionNonCacheable
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|uint32_t
name|GetValue
parameter_list|()
block|{
return|return
name|m_flags
return|;
block|}
name|void
name|SetValue
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|m_flags
operator|=
name|value
expr_stmt|;
block|}
name|private
label|:
name|uint32_t
name|m_flags
decl_stmt|;
block|}
empty_stmt|;
name|TypeValidatorImpl
argument_list|(
specifier|const
name|Flags
operator|&
name|flags
operator|=
name|Flags
argument_list|()
argument_list|)
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|TypeValidatorImpl
operator|>
name|SharedPointer
expr_stmt|;
name|virtual
operator|~
name|TypeValidatorImpl
argument_list|()
expr_stmt|;
name|bool
name|Cascades
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetCascades
argument_list|()
return|;
block|}
name|bool
name|SkipsPointers
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetSkipPointers
argument_list|()
return|;
block|}
name|bool
name|SkipsReferences
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetSkipReferences
argument_list|()
return|;
block|}
name|bool
name|NonCacheable
argument_list|()
specifier|const
block|{
return|return
name|m_flags
operator|.
name|GetNonCacheable
argument_list|()
return|;
block|}
name|void
name|SetCascades
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetCascades
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetSkipsPointers
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetSkipPointers
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetSkipsReferences
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetSkipReferences
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|void
name|SetNonCacheable
parameter_list|(
name|bool
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetNonCacheable
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|uint32_t
name|GetOptions
parameter_list|()
block|{
return|return
name|m_flags
operator|.
name|GetValue
argument_list|()
return|;
block|}
name|void
name|SetOptions
parameter_list|(
name|uint32_t
name|value
parameter_list|)
block|{
name|m_flags
operator|.
name|SetValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|uint32_t
modifier|&
name|GetRevision
parameter_list|()
block|{
return|return
name|m_my_revision
return|;
block|}
name|enum
name|class
name|Type
block|{
name|eTypeUnknown
operator|,
name|eTypeCXX
block|}
empty_stmt|;
struct|struct
name|ValidationResult
block|{
name|TypeValidatorResult
name|m_result
decl_stmt|;
name|std
operator|::
name|string
name|m_message
expr_stmt|;
block|}
struct|;
name|virtual
name|Type
name|GetType
parameter_list|()
block|{
return|return
name|Type
operator|::
name|eTypeUnknown
return|;
block|}
comment|// we are using a ValueObject* instead of a ValueObjectSP because we do not need to hold on to this for
comment|// extended periods of time and we trust the ValueObject to stay around for as long as it is required
comment|// for us to generate its value
name|virtual
name|ValidationResult
name|FormatObject
argument_list|(
name|ValueObject
operator|*
name|valobj
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|virtual
name|std
operator|::
name|string
name|GetDescription
argument_list|()
operator|=
literal|0
expr_stmt|;
specifier|static
name|ValidationResult
name|Success
parameter_list|()
function_decl|;
specifier|static
name|ValidationResult
name|Failure
argument_list|(
name|std
operator|::
name|string
name|message
argument_list|)
decl_stmt|;
name|protected
label|:
name|Flags
name|m_flags
decl_stmt|;
name|uint32_t
name|m_my_revision
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TypeValidatorImpl
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|TypeValidatorImpl_CXX
range|:
name|public
name|TypeValidatorImpl
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|function
operator|<
name|TypeValidatorImpl
operator|::
name|ValidationResult
argument_list|(
name|ValueObject
operator|*
name|valobj
argument_list|)
operator|>
name|ValidatorFunction
expr_stmt|;
name|TypeValidatorImpl_CXX
argument_list|(
argument|ValidatorFunction f
argument_list|,
argument|std::string d
argument_list|,
argument|const TypeValidatorImpl::Flags& flags = Flags()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|TypeValidatorImpl_CXX
operator|>
name|SharedPointer
expr_stmt|;
end_typedef

begin_expr_stmt
operator|~
name|TypeValidatorImpl_CXX
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|ValidatorFunction
name|GetValidatorFunction
argument_list|()
specifier|const
block|{
return|return
name|m_validator_function
return|;
block|}
end_expr_stmt

begin_function
name|void
name|SetValidatorFunction
parameter_list|(
name|ValidatorFunction
name|f
parameter_list|)
block|{
name|m_validator_function
operator|=
name|f
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|TypeValidatorImpl
operator|::
name|Type
name|GetType
argument_list|()
name|override
block|{
return|return
name|TypeValidatorImpl
operator|::
name|Type
operator|::
name|eTypeCXX
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|ValidationResult
name|FormatObject
argument_list|(
name|ValueObject
operator|*
name|valobj
argument_list|)
decl|const
name|override
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|string
name|GetDescription
argument_list|()
name|override
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|std
operator|::
name|string
name|m_description
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|ValidatorFunction
name|m_validator_function
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|TypeValidatorImpl_CXX
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|};       }
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_TypeValidator_h_
end_comment

end_unit

