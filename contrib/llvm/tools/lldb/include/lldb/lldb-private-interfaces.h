begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- lldb-private-interfaces.h -------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_lldb_private_interfaces_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_lldb_private_interfaces_h_
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_include
include|#
directive|include
file|"lldb/lldb-enumerations.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-forward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-types.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private-enumerations.h"
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
typedef|typedef
name|lldb
operator|::
name|ABISP
argument_list|(
operator|*
name|ABICreateInstance
argument_list|)
argument_list|(
specifier|const
name|ArchSpec
operator|&
name|arch
argument_list|)
expr_stmt|;
typedef|typedef
name|Disassembler
modifier|*
function_decl|(
modifier|*
name|DisassemblerCreateInstance
function_decl|)
parameter_list|(
specifier|const
name|ArchSpec
modifier|&
name|arch
parameter_list|,
specifier|const
name|char
modifier|*
name|flavor
parameter_list|)
function_decl|;
typedef|typedef
name|DynamicLoader
modifier|*
function_decl|(
modifier|*
name|DynamicLoaderCreateInstance
function_decl|)
parameter_list|(
name|Process
modifier|*
name|process
parameter_list|,
name|bool
name|force
parameter_list|)
function_decl|;
typedef|typedef
name|lldb
operator|::
name|JITLoaderSP
argument_list|(
argument|*JITLoaderCreateInstance
argument_list|)
operator|(
name|Process
operator|*
name|process
operator|,
name|bool
name|force
operator|)
expr_stmt|;
typedef|typedef
name|ObjectContainer
operator|*
operator|(
operator|*
name|ObjectContainerCreateInstance
operator|)
operator|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
operator|,
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_sp
operator|,
name|lldb
operator|::
name|offset_t
name|data_offset
operator|,
specifier|const
name|FileSpec
operator|*
name|file
operator|,
name|lldb
operator|::
name|offset_t
name|offset
operator|,
name|lldb
operator|::
name|offset_t
name|length
operator|)
expr_stmt|;
typedef|typedef
name|size_t
argument_list|(
argument|*ObjectFileGetModuleSpecifications
argument_list|)
operator|(
specifier|const
name|FileSpec
operator|&
name|file
operator|,
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_sp
operator|,
name|lldb
operator|::
name|offset_t
name|data_offset
operator|,
name|lldb
operator|::
name|offset_t
name|file_offset
operator|,
name|lldb
operator|::
name|offset_t
name|length
operator|,
name|ModuleSpecList
operator|&
name|module_specs
operator|)
expr_stmt|;
typedef|typedef
name|ObjectFile
operator|*
operator|(
operator|*
name|ObjectFileCreateInstance
operator|)
operator|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
operator|,
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_sp
operator|,
name|lldb
operator|::
name|offset_t
name|data_offset
operator|,
specifier|const
name|FileSpec
operator|*
name|file
operator|,
name|lldb
operator|::
name|offset_t
name|file_offset
operator|,
name|lldb
operator|::
name|offset_t
name|length
operator|)
expr_stmt|;
typedef|typedef
name|ObjectFile
operator|*
operator|(
operator|*
name|ObjectFileCreateMemoryInstance
operator|)
operator|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
operator|,
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_sp
operator|,
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|process_sp
operator|,
name|lldb
operator|::
name|addr_t
name|offset
operator|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|ObjectFileSaveCore
argument_list|)
argument_list|(
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|process_sp
argument_list|,
specifier|const
name|FileSpec
operator|&
name|outfile
argument_list|,
name|Status
operator|&
name|error
argument_list|)
expr_stmt|;
typedef|typedef
name|EmulateInstruction
modifier|*
function_decl|(
modifier|*
name|EmulateInstructionCreateInstance
function_decl|)
parameter_list|(
specifier|const
name|ArchSpec
modifier|&
name|arch
parameter_list|,
name|InstructionType
name|inst_type
parameter_list|)
function_decl|;
typedef|typedef
name|OperatingSystem
modifier|*
function_decl|(
modifier|*
name|OperatingSystemCreateInstance
function_decl|)
parameter_list|(
name|Process
modifier|*
name|process
parameter_list|,
name|bool
name|force
parameter_list|)
function_decl|;
typedef|typedef
name|Language
operator|*
operator|(
operator|*
name|LanguageCreateInstance
operator|)
operator|(
name|lldb
operator|::
name|LanguageType
name|language
operator|)
expr_stmt|;
typedef|typedef
name|LanguageRuntime
operator|*
operator|(
operator|*
name|LanguageRuntimeCreateInstance
operator|)
operator|(
name|Process
operator|*
name|process
operator|,
name|lldb
operator|::
name|LanguageType
name|language
operator|)
expr_stmt|;
typedef|typedef
name|lldb
operator|::
name|CommandObjectSP
argument_list|(
operator|*
name|LanguageRuntimeGetCommandObject
argument_list|)
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|)
expr_stmt|;
typedef|typedef
name|lldb
operator|::
name|StructuredDataPluginSP
argument_list|(
operator|*
name|StructuredDataPluginCreateInstance
argument_list|)
argument_list|(
name|Process
operator|&
name|process
argument_list|)
expr_stmt|;
typedef|typedef
name|Status
function_decl|(
modifier|*
name|StructuredDataFilterLaunchInfo
function_decl|)
parameter_list|(
name|ProcessLaunchInfo
modifier|&
name|launch_info
parameter_list|,
name|Target
modifier|*
name|target
parameter_list|)
function_decl|;
typedef|typedef
name|SystemRuntime
modifier|*
function_decl|(
modifier|*
name|SystemRuntimeCreateInstance
function_decl|)
parameter_list|(
name|Process
modifier|*
name|process
parameter_list|)
function_decl|;
typedef|typedef
name|lldb
operator|::
name|PlatformSP
argument_list|(
argument|*PlatformCreateInstance
argument_list|)
operator|(
name|bool
name|force
operator|,
specifier|const
name|ArchSpec
operator|*
name|arch
operator|)
expr_stmt|;
typedef|typedef
name|lldb
operator|::
name|ProcessSP
argument_list|(
argument|*ProcessCreateInstance
argument_list|)
operator|(
name|lldb
operator|::
name|TargetSP
name|target_sp
operator|,
name|lldb
operator|::
name|ListenerSP
name|listener_sp
operator|,
specifier|const
name|FileSpec
operator|*
name|crash_file_path
operator|)
expr_stmt|;
typedef|typedef
name|lldb
operator|::
name|ScriptInterpreterSP
argument_list|(
operator|*
name|ScriptInterpreterCreateInstance
argument_list|)
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|)
expr_stmt|;
typedef|typedef
name|SymbolFile
modifier|*
function_decl|(
modifier|*
name|SymbolFileCreateInstance
function_decl|)
parameter_list|(
name|ObjectFile
modifier|*
name|obj_file
parameter_list|)
function_decl|;
typedef|typedef
name|SymbolVendor
argument_list|*
call|(
modifier|*
name|SymbolVendorCreateInstance
call|)
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|*
name|feedback_strm
argument_list|)
argument_list|;
comment|// Module can be NULL for default system symbol vendor
argument_list|typedef
name|bool
argument_list|(
argument|*BreakpointHitCallback
argument_list|)
operator|(
name|void
operator|*
name|baton
operator|,
name|StoppointCallbackContext
operator|*
name|context
operator|,
name|lldb
operator|::
name|user_id_t
name|break_id
operator|,
name|lldb
operator|::
name|user_id_t
name|break_loc_id
operator|)
argument_list|; typedef
name|bool
argument_list|(
argument|*WatchpointHitCallback
argument_list|)
operator|(
name|void
operator|*
name|baton
operator|,
name|StoppointCallbackContext
operator|*
name|context
operator|,
name|lldb
operator|::
name|user_id_t
name|watch_id
operator|)
argument_list|; typedef
name|void
argument_list|(
operator|*
name|OptionValueChangedCallback
argument_list|)
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|OptionValue
operator|*
name|option_value
argument_list|)
argument_list|; typedef
name|bool
argument_list|(
argument|*ThreadPlanShouldStopHereCallback
argument_list|)
operator|(
name|ThreadPlan
operator|*
name|current_plan
operator|,
name|Flags
operator|&
name|flags
operator|,
name|lldb
operator|::
name|FrameComparison
name|operation
operator|,
name|void
operator|*
name|baton
operator|)
argument_list|; typedef
name|lldb
operator|::
name|ThreadPlanSP
argument_list|(
argument|*ThreadPlanStepFromHereCallback
argument_list|)
operator|(
name|ThreadPlan
operator|*
name|current_plan
operator|,
name|Flags
operator|&
name|flags
operator|,
name|lldb
operator|::
name|FrameComparison
name|operation
operator|,
name|void
operator|*
name|baton
operator|)
argument_list|; typedef
name|UnwindAssembly
operator|*
call|(
modifier|*
name|UnwindAssemblyCreateInstance
call|)
argument_list|(
specifier|const
name|ArchSpec
operator|&
name|arch
argument_list|)
argument_list|; typedef
name|lldb
operator|::
name|MemoryHistorySP
argument_list|(
operator|*
name|MemoryHistoryCreateInstance
argument_list|)
argument_list|(
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|process_sp
argument_list|)
argument_list|; typedef
name|lldb
operator|::
name|InstrumentationRuntimeType
argument_list|(
operator|*
name|InstrumentationRuntimeGetType
argument_list|)
argument_list|()
argument_list|; typedef
name|lldb
operator|::
name|InstrumentationRuntimeSP
argument_list|(
operator|*
name|InstrumentationRuntimeCreateInstance
argument_list|)
argument_list|(
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|process_sp
argument_list|)
argument_list|; typedef
name|lldb
operator|::
name|TypeSystemSP
argument_list|(
argument|*TypeSystemCreateInstance
argument_list|)
operator|(
name|lldb
operator|::
name|LanguageType
name|language
operator|,
name|Module
operator|*
name|module
operator|,
name|Target
operator|*
name|target
operator|)
argument_list|; typedef
name|lldb
operator|::
name|REPLSP
argument_list|(
argument|*REPLCreateInstance
argument_list|)
operator|(
name|Status
operator|&
name|error
operator|,
name|lldb
operator|::
name|LanguageType
name|language
operator|,
name|Debugger
operator|*
name|debugger
operator|,
name|Target
operator|*
name|target
operator|,
specifier|const
name|char
operator|*
name|repl_options
operator|)
argument_list|; typedef
name|void
argument_list|(
operator|*
name|TypeSystemEnumerateSupportedLanguages
argument_list|)
argument_list|(
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|LanguageType
operator|>
operator|&
name|languages_for_types
argument_list|,
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|LanguageType
operator|>
operator|&
name|languages_for_expressions
argument_list|)
argument_list|; typedef
name|void
argument_list|(
operator|*
name|REPLEnumerateSupportedLanguages
argument_list|)
argument_list|(
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|LanguageType
operator|>
operator|&
name|languages
argument_list|)
argument_list|; typedef
name|int
argument_list|(
operator|*
name|ComparisonFunction
argument_list|)
argument_list|(
specifier|const
name|void
operator|*
argument_list|,
specifier|const
name|void
operator|*
argument_list|)
argument_list|; typedef
name|void
argument_list|(
operator|*
name|DebuggerInitializeCallback
argument_list|)
argument_list|(
name|Debugger
operator|&
name|debugger
argument_list|)
argument_list|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #if defined(__cplusplus)
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_lldb_private_interfaces_h_
end_comment

end_unit

