begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ModuleSpec.h --------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ModuleSpec_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ModuleSpec_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Core/ArchSpec.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Stream.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/UUID.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/FileSpec.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/PathMappingList.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ModuleSpec
block|{
name|public
label|:
name|ModuleSpec
argument_list|()
operator|:
name|m_file
argument_list|()
operator|,
name|m_platform_file
argument_list|()
operator|,
name|m_symbol_file
argument_list|()
operator|,
name|m_arch
argument_list|()
operator|,
name|m_uuid
argument_list|()
operator|,
name|m_object_name
argument_list|()
operator|,
name|m_object_offset
argument_list|(
literal|0
argument_list|)
operator|,
name|m_object_mod_time
argument_list|()
operator|,
name|m_source_mappings
argument_list|()
block|{     }
name|ModuleSpec
argument_list|(
specifier|const
name|FileSpec
operator|&
name|file_spec
argument_list|)
operator|:
name|m_file
argument_list|(
name|file_spec
argument_list|)
operator|,
name|m_platform_file
argument_list|()
operator|,
name|m_symbol_file
argument_list|()
operator|,
name|m_arch
argument_list|()
operator|,
name|m_uuid
argument_list|()
operator|,
name|m_object_name
argument_list|()
operator|,
name|m_object_offset
argument_list|(
literal|0
argument_list|)
operator|,
name|m_object_mod_time
argument_list|()
operator|,
name|m_source_mappings
argument_list|()
block|{     }
name|ModuleSpec
argument_list|(
specifier|const
name|FileSpec
operator|&
name|file_spec
argument_list|,
specifier|const
name|ArchSpec
operator|&
name|arch
argument_list|)
operator|:
name|m_file
argument_list|(
name|file_spec
argument_list|)
operator|,
name|m_platform_file
argument_list|()
operator|,
name|m_symbol_file
argument_list|()
operator|,
name|m_arch
argument_list|(
name|arch
argument_list|)
operator|,
name|m_uuid
argument_list|()
operator|,
name|m_object_name
argument_list|()
operator|,
name|m_object_offset
argument_list|(
literal|0
argument_list|)
operator|,
name|m_object_mod_time
argument_list|()
operator|,
name|m_source_mappings
argument_list|()
block|{     }
name|ModuleSpec
argument_list|(
specifier|const
name|ModuleSpec
operator|&
name|rhs
argument_list|)
operator|:
name|m_file
argument_list|(
name|rhs
operator|.
name|m_file
argument_list|)
operator|,
name|m_platform_file
argument_list|(
name|rhs
operator|.
name|m_platform_file
argument_list|)
operator|,
name|m_symbol_file
argument_list|(
name|rhs
operator|.
name|m_symbol_file
argument_list|)
operator|,
name|m_arch
argument_list|(
name|rhs
operator|.
name|m_arch
argument_list|)
operator|,
name|m_uuid
argument_list|(
name|rhs
operator|.
name|m_uuid
argument_list|)
operator|,
name|m_object_name
argument_list|(
name|rhs
operator|.
name|m_object_name
argument_list|)
operator|,
name|m_object_offset
argument_list|(
name|rhs
operator|.
name|m_object_offset
argument_list|)
operator|,
name|m_object_mod_time
argument_list|(
name|rhs
operator|.
name|m_object_mod_time
argument_list|)
operator|,
name|m_source_mappings
argument_list|(
argument|rhs.m_source_mappings
argument_list|)
block|{     }
name|ModuleSpec
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ModuleSpec
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|rhs
condition|)
block|{
name|m_file
operator|=
name|rhs
operator|.
name|m_file
expr_stmt|;
name|m_platform_file
operator|=
name|rhs
operator|.
name|m_platform_file
expr_stmt|;
name|m_symbol_file
operator|=
name|rhs
operator|.
name|m_symbol_file
expr_stmt|;
name|m_arch
operator|=
name|rhs
operator|.
name|m_arch
expr_stmt|;
name|m_uuid
operator|=
name|rhs
operator|.
name|m_uuid
expr_stmt|;
name|m_object_name
operator|=
name|rhs
operator|.
name|m_object_name
expr_stmt|;
name|m_object_offset
operator|=
name|rhs
operator|.
name|m_object_offset
expr_stmt|;
name|m_object_mod_time
operator|=
name|rhs
operator|.
name|m_object_mod_time
expr_stmt|;
name|m_source_mappings
operator|=
name|rhs
operator|.
name|m_source_mappings
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
name|FileSpec
modifier|*
name|GetFileSpecPtr
parameter_list|()
block|{
if|if
condition|(
name|m_file
condition|)
return|return
operator|&
name|m_file
return|;
return|return
name|NULL
return|;
block|}
specifier|const
name|FileSpec
operator|*
name|GetFileSpecPtr
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_file
condition|)
return|return
operator|&
name|m_file
return|;
return|return
name|NULL
return|;
block|}
name|FileSpec
modifier|&
name|GetFileSpec
parameter_list|()
block|{
return|return
name|m_file
return|;
block|}
specifier|const
name|FileSpec
operator|&
name|GetFileSpec
argument_list|()
specifier|const
block|{
return|return
name|m_file
return|;
block|}
name|FileSpec
modifier|*
name|GetPlatformFileSpecPtr
parameter_list|()
block|{
if|if
condition|(
name|m_platform_file
condition|)
return|return
operator|&
name|m_platform_file
return|;
return|return
name|NULL
return|;
block|}
specifier|const
name|FileSpec
operator|*
name|GetPlatformFileSpecPtr
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_platform_file
condition|)
return|return
operator|&
name|m_platform_file
return|;
return|return
name|NULL
return|;
block|}
end_decl_stmt

begin_function
name|FileSpec
modifier|&
name|GetPlatformFileSpec
parameter_list|()
block|{
return|return
name|m_platform_file
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|FileSpec
operator|&
name|GetPlatformFileSpec
argument_list|()
specifier|const
block|{
return|return
name|m_platform_file
return|;
block|}
end_expr_stmt

begin_function
name|FileSpec
modifier|*
name|GetSymbolFileSpecPtr
parameter_list|()
block|{
if|if
condition|(
name|m_symbol_file
condition|)
return|return
operator|&
name|m_symbol_file
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|FileSpec
operator|*
name|GetSymbolFileSpecPtr
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_symbol_file
condition|)
return|return
operator|&
name|m_symbol_file
return|;
end_expr_stmt

begin_return
return|return
name|NULL
return|;
end_return

begin_expr_stmt
unit|}          FileSpec
operator|&
name|GetSymbolFileSpec
argument_list|()
block|{
return|return
name|m_symbol_file
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|FileSpec
operator|&
name|GetSymbolFileSpec
argument_list|()
specifier|const
block|{
return|return
name|m_symbol_file
return|;
block|}
end_expr_stmt

begin_function
name|ArchSpec
modifier|*
name|GetArchitecturePtr
parameter_list|()
block|{
if|if
condition|(
name|m_arch
operator|.
name|IsValid
argument_list|()
condition|)
return|return
operator|&
name|m_arch
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|ArchSpec
operator|*
name|GetArchitecturePtr
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_arch
operator|.
name|IsValid
argument_list|()
condition|)
return|return
operator|&
name|m_arch
return|;
end_expr_stmt

begin_return
return|return
name|NULL
return|;
end_return

begin_expr_stmt
unit|}          ArchSpec
operator|&
name|GetArchitecture
argument_list|()
block|{
return|return
name|m_arch
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|ArchSpec
operator|&
name|GetArchitecture
argument_list|()
specifier|const
block|{
return|return
name|m_arch
return|;
block|}
end_expr_stmt

begin_function
name|UUID
modifier|*
name|GetUUIDPtr
parameter_list|()
block|{
if|if
condition|(
name|m_uuid
operator|.
name|IsValid
argument_list|()
condition|)
return|return
operator|&
name|m_uuid
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|UUID
operator|*
name|GetUUIDPtr
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_uuid
operator|.
name|IsValid
argument_list|()
condition|)
return|return
operator|&
name|m_uuid
return|;
end_expr_stmt

begin_return
return|return
name|NULL
return|;
end_return

begin_expr_stmt
unit|}          UUID
operator|&
name|GetUUID
argument_list|()
block|{
return|return
name|m_uuid
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|const
name|UUID
operator|&
name|GetUUID
argument_list|()
specifier|const
block|{
return|return
name|m_uuid
return|;
block|}
end_expr_stmt

begin_function
name|ConstString
modifier|&
name|GetObjectName
parameter_list|()
block|{
return|return
name|m_object_name
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|ConstString
operator|&
name|GetObjectName
argument_list|()
specifier|const
block|{
return|return
name|m_object_name
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|uint64_t
name|GetObjectOffset
argument_list|()
specifier|const
block|{
return|return
name|m_object_offset
return|;
block|}
end_expr_stmt

begin_function
name|void
name|SetObjectOffset
parameter_list|(
name|uint64_t
name|object_offset
parameter_list|)
block|{
name|m_object_offset
operator|=
name|object_offset
expr_stmt|;
block|}
end_function

begin_function
name|TimeValue
modifier|&
name|GetObjectModificationTime
parameter_list|()
block|{
return|return
name|m_object_mod_time
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|TimeValue
operator|&
name|GetObjectModificationTime
argument_list|()
specifier|const
block|{
return|return
name|m_object_mod_time
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|PathMappingList
operator|&
name|GetSourceMappingList
argument_list|()
specifier|const
block|{
return|return
name|m_source_mappings
return|;
block|}
end_expr_stmt

begin_function
name|void
name|Clear
parameter_list|()
block|{
name|m_file
operator|.
name|Clear
argument_list|()
expr_stmt|;
name|m_platform_file
operator|.
name|Clear
argument_list|()
expr_stmt|;
name|m_symbol_file
operator|.
name|Clear
argument_list|()
expr_stmt|;
name|m_arch
operator|.
name|Clear
argument_list|()
expr_stmt|;
name|m_uuid
operator|.
name|Clear
argument_list|()
expr_stmt|;
name|m_object_name
operator|.
name|Clear
argument_list|()
expr_stmt|;
name|m_object_offset
operator|=
literal|0
expr_stmt|;
name|m_source_mappings
operator|.
name|Clear
argument_list|(
name|false
argument_list|)
expr_stmt|;
name|m_object_mod_time
operator|.
name|Clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|operator
name|bool
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_file
condition|)
return|return
name|true
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|m_platform_file
condition|)
return|return
name|true
return|;
end_if

begin_if
if|if
condition|(
name|m_symbol_file
condition|)
return|return
name|true
return|;
end_if

begin_if
if|if
condition|(
name|m_arch
operator|.
name|IsValid
argument_list|()
condition|)
return|return
name|true
return|;
end_if

begin_if
if|if
condition|(
name|m_uuid
operator|.
name|IsValid
argument_list|()
condition|)
return|return
name|true
return|;
end_if

begin_if
if|if
condition|(
name|m_object_name
condition|)
return|return
name|true
return|;
end_if

begin_if
if|if
condition|(
name|m_object_mod_time
operator|.
name|IsValid
argument_list|()
condition|)
return|return
name|true
return|;
end_if

begin_return
return|return
name|false
return|;
end_return

begin_macro
unit|}      void
name|Dump
argument_list|(
argument|Stream&strm
argument_list|)
end_macro

begin_block
block|{
name|bool
name|dumped_something
init|=
name|false
decl_stmt|;
if|if
condition|(
name|m_file
condition|)
block|{
name|strm
operator|.
name|PutCString
argument_list|(
literal|"file = '"
argument_list|)
expr_stmt|;
name|strm
operator|<<
name|m_file
expr_stmt|;
name|strm
operator|.
name|PutCString
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|dumped_something
operator|=
name|true
expr_stmt|;
block|}
if|if
condition|(
name|m_platform_file
condition|)
block|{
if|if
condition|(
name|dumped_something
condition|)
name|strm
operator|.
name|PutCString
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|strm
operator|.
name|PutCString
argument_list|(
literal|"platform_file = '"
argument_list|)
expr_stmt|;
name|strm
operator|<<
name|m_platform_file
expr_stmt|;
name|strm
operator|.
name|PutCString
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|dumped_something
operator|=
name|true
expr_stmt|;
block|}
if|if
condition|(
name|m_symbol_file
condition|)
block|{
if|if
condition|(
name|dumped_something
condition|)
name|strm
operator|.
name|PutCString
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|strm
operator|.
name|PutCString
argument_list|(
literal|"symbol_file = '"
argument_list|)
expr_stmt|;
name|strm
operator|<<
name|m_symbol_file
expr_stmt|;
name|strm
operator|.
name|PutCString
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|dumped_something
operator|=
name|true
expr_stmt|;
block|}
if|if
condition|(
name|m_arch
operator|.
name|IsValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|dumped_something
condition|)
name|strm
operator|.
name|PutCString
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|strm
operator|.
name|Printf
argument_list|(
literal|"arch = %s"
argument_list|,
name|m_arch
operator|.
name|GetTriple
argument_list|()
operator|.
name|str
argument_list|()
operator|.
name|c_str
argument_list|()
argument_list|)
expr_stmt|;
name|dumped_something
operator|=
name|true
expr_stmt|;
block|}
if|if
condition|(
name|m_uuid
operator|.
name|IsValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|dumped_something
condition|)
name|strm
operator|.
name|PutCString
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|strm
operator|.
name|PutCString
argument_list|(
literal|"uuid = "
argument_list|)
expr_stmt|;
name|m_uuid
operator|.
name|Dump
argument_list|(
operator|&
name|strm
argument_list|)
expr_stmt|;
name|dumped_something
operator|=
name|true
expr_stmt|;
block|}
if|if
condition|(
name|m_object_name
condition|)
block|{
if|if
condition|(
name|dumped_something
condition|)
name|strm
operator|.
name|PutCString
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|strm
operator|.
name|Printf
argument_list|(
literal|"object_name = %s"
argument_list|,
name|m_object_name
operator|.
name|GetCString
argument_list|()
argument_list|)
expr_stmt|;
name|dumped_something
operator|=
name|true
expr_stmt|;
block|}
if|if
condition|(
name|m_object_offset
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|dumped_something
condition|)
name|strm
operator|.
name|PutCString
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|strm
operator|.
name|Printf
argument_list|(
literal|"object_offset = 0x%"
name|PRIx64
argument_list|,
name|m_object_offset
argument_list|)
expr_stmt|;
name|dumped_something
operator|=
name|true
expr_stmt|;
block|}
if|if
condition|(
name|m_object_mod_time
operator|.
name|IsValid
argument_list|()
condition|)
block|{
if|if
condition|(
name|dumped_something
condition|)
name|strm
operator|.
name|PutCString
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|strm
operator|.
name|Printf
argument_list|(
literal|"object_mod_time = 0x%"
name|PRIx64
argument_list|,
name|m_object_mod_time
operator|.
name|GetAsSecondsSinceJan1_1970
argument_list|()
argument_list|)
expr_stmt|;
name|dumped_something
operator|=
name|true
expr_stmt|;
block|}
block|}
end_block

begin_decl_stmt
name|bool
name|Matches
argument_list|(
specifier|const
name|ModuleSpec
operator|&
name|match_module_spec
argument_list|,
name|bool
name|exact_arch_match
argument_list|)
decl|const
block|{
if|if
condition|(
name|match_module_spec
operator|.
name|GetUUIDPtr
argument_list|()
operator|&&
name|match_module_spec
operator|.
name|GetUUID
argument_list|()
operator|!=
name|GetUUID
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
name|match_module_spec
operator|.
name|GetObjectName
argument_list|()
operator|&&
name|match_module_spec
operator|.
name|GetObjectName
argument_list|()
operator|!=
name|GetObjectName
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
name|match_module_spec
operator|.
name|GetFileSpecPtr
argument_list|()
condition|)
block|{
specifier|const
name|FileSpec
modifier|&
name|fspec
init|=
name|match_module_spec
operator|.
name|GetFileSpec
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|FileSpec
operator|::
name|Equal
argument_list|(
name|fspec
argument_list|,
name|GetFileSpec
argument_list|()
argument_list|,
name|fspec
operator|.
name|GetDirectory
argument_list|()
operator|.
name|IsEmpty
argument_list|()
operator|==
name|false
argument_list|)
condition|)
return|return
name|false
return|;
block|}
if|if
condition|(
name|match_module_spec
operator|.
name|GetPlatformFileSpecPtr
argument_list|()
condition|)
block|{
specifier|const
name|FileSpec
modifier|&
name|fspec
init|=
name|match_module_spec
operator|.
name|GetPlatformFileSpec
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|FileSpec
operator|::
name|Equal
argument_list|(
name|fspec
argument_list|,
name|GetPlatformFileSpec
argument_list|()
argument_list|,
name|fspec
operator|.
name|GetDirectory
argument_list|()
operator|.
name|IsEmpty
argument_list|()
operator|==
name|false
argument_list|)
condition|)
return|return
name|false
return|;
block|}
if|if
condition|(
name|match_module_spec
operator|.
name|GetSymbolFileSpecPtr
argument_list|()
condition|)
block|{
specifier|const
name|FileSpec
modifier|&
name|fspec
init|=
name|match_module_spec
operator|.
name|GetSymbolFileSpec
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|FileSpec
operator|::
name|Equal
argument_list|(
name|fspec
argument_list|,
name|GetSymbolFileSpec
argument_list|()
argument_list|,
name|fspec
operator|.
name|GetDirectory
argument_list|()
operator|.
name|IsEmpty
argument_list|()
operator|==
name|false
argument_list|)
condition|)
return|return
name|false
return|;
block|}
if|if
condition|(
name|match_module_spec
operator|.
name|GetArchitecturePtr
argument_list|()
condition|)
block|{
if|if
condition|(
name|exact_arch_match
condition|)
block|{
if|if
condition|(
operator|!
name|GetArchitecture
argument_list|()
operator|.
name|IsExactMatch
argument_list|(
name|match_module_spec
operator|.
name|GetArchitecture
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|GetArchitecture
argument_list|()
operator|.
name|IsCompatibleMatch
argument_list|(
name|match_module_spec
operator|.
name|GetArchitecture
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
block|}
block|}
return|return
name|true
return|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|FileSpec
name|m_file
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|FileSpec
name|m_platform_file
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|FileSpec
name|m_symbol_file
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ArchSpec
name|m_arch
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|UUID
name|m_uuid
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ConstString
name|m_object_name
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|m_object_offset
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TimeValue
name|m_object_mod_time
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|mutable
name|PathMappingList
name|m_source_mappings
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|ModuleSpecList
block|{
name|public
label|:
name|ModuleSpecList
argument_list|()
operator|:
name|m_specs
argument_list|()
operator|,
name|m_mutex
argument_list|(
argument|Mutex::eMutexTypeRecursive
argument_list|)
block|{     }
name|ModuleSpecList
argument_list|(
specifier|const
name|ModuleSpecList
operator|&
name|rhs
argument_list|)
operator|:
name|m_specs
argument_list|()
operator|,
name|m_mutex
argument_list|(
argument|Mutex::eMutexTypeRecursive
argument_list|)
block|{
name|Mutex
operator|::
name|Locker
name|lhs_locker
argument_list|(
name|m_mutex
argument_list|)
block|;
name|Mutex
operator|::
name|Locker
name|rhs_locker
argument_list|(
name|rhs
operator|.
name|m_mutex
argument_list|)
block|;
name|m_specs
operator|=
name|rhs
operator|.
name|m_specs
block|;     }
operator|~
name|ModuleSpecList
argument_list|()
block|{     }
name|ModuleSpecList
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ModuleSpecList
operator|&
name|rhs
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|rhs
condition|)
block|{
name|Mutex
operator|::
name|Locker
name|lhs_locker
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
name|Mutex
operator|::
name|Locker
name|rhs_locker
argument_list|(
name|rhs
operator|.
name|m_mutex
argument_list|)
expr_stmt|;
name|m_specs
operator|=
name|rhs
operator|.
name|m_specs
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
name|size_t
name|GetSize
argument_list|()
specifier|const
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
block|;
return|return
name|m_specs
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
name|m_specs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|void
name|Append
parameter_list|(
specifier|const
name|ModuleSpec
modifier|&
name|spec
parameter_list|)
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
name|m_specs
operator|.
name|push_back
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
name|void
name|Append
parameter_list|(
specifier|const
name|ModuleSpecList
modifier|&
name|rhs
parameter_list|)
block|{
name|Mutex
operator|::
name|Locker
name|lhs_locker
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
name|Mutex
operator|::
name|Locker
name|rhs_locker
argument_list|(
name|rhs
operator|.
name|m_mutex
argument_list|)
expr_stmt|;
name|m_specs
operator|.
name|insert
argument_list|(
name|m_specs
operator|.
name|end
argument_list|()
argument_list|,
name|rhs
operator|.
name|m_specs
operator|.
name|begin
argument_list|()
argument_list|,
name|rhs
operator|.
name|m_specs
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The index "i" must be valid and this can't be used in
comment|// multi-threaded code as no mutex lock is taken.
name|ModuleSpec
modifier|&
name|GetModuleSpecRefAtIndex
parameter_list|(
name|size_t
name|i
parameter_list|)
block|{
return|return
name|m_specs
index|[
name|i
index|]
return|;
block|}
name|bool
name|GetModuleSpecAtIndex
argument_list|(
name|size_t
name|i
argument_list|,
name|ModuleSpec
operator|&
name|module_spec
argument_list|)
decl|const
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|m_specs
operator|.
name|size
argument_list|()
condition|)
block|{
name|module_spec
operator|=
name|m_specs
index|[
name|i
index|]
expr_stmt|;
return|return
name|true
return|;
block|}
name|module_spec
operator|.
name|Clear
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
name|bool
name|FindMatchingModuleSpec
argument_list|(
specifier|const
name|ModuleSpec
operator|&
name|module_spec
argument_list|,
name|ModuleSpec
operator|&
name|match_module_spec
argument_list|)
decl|const
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
name|bool
name|exact_arch_match
init|=
name|true
decl_stmt|;
for|for
control|(
name|auto
name|spec
range|:
name|m_specs
control|)
block|{
if|if
condition|(
name|spec
operator|.
name|Matches
argument_list|(
name|module_spec
argument_list|,
name|exact_arch_match
argument_list|)
condition|)
block|{
name|match_module_spec
operator|=
name|spec
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
comment|// If there was an architecture, retry with a compatible arch
if|if
condition|(
name|module_spec
operator|.
name|GetArchitecturePtr
argument_list|()
condition|)
block|{
name|exact_arch_match
operator|=
name|false
expr_stmt|;
for|for
control|(
name|auto
name|spec
range|:
name|m_specs
control|)
block|{
if|if
condition|(
name|spec
operator|.
name|Matches
argument_list|(
name|module_spec
argument_list|,
name|exact_arch_match
argument_list|)
condition|)
block|{
name|match_module_spec
operator|=
name|spec
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
block|}
name|match_module_spec
operator|.
name|Clear
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
name|size_t
name|FindMatchingModuleSpecs
argument_list|(
specifier|const
name|ModuleSpec
operator|&
name|module_spec
argument_list|,
name|ModuleSpecList
operator|&
name|matching_list
argument_list|)
decl|const
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
name|bool
name|exact_arch_match
init|=
name|true
decl_stmt|;
specifier|const
name|size_t
name|initial_match_count
init|=
name|matching_list
operator|.
name|GetSize
argument_list|()
decl_stmt|;
for|for
control|(
name|auto
name|spec
range|:
name|m_specs
control|)
block|{
if|if
condition|(
name|spec
operator|.
name|Matches
argument_list|(
name|module_spec
argument_list|,
name|exact_arch_match
argument_list|)
condition|)
name|matching_list
operator|.
name|Append
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
comment|// If there was an architecture, retry with a compatible arch if no matches were found
if|if
condition|(
name|module_spec
operator|.
name|GetArchitecturePtr
argument_list|()
operator|&&
operator|(
name|initial_match_count
operator|==
name|matching_list
operator|.
name|GetSize
argument_list|()
operator|)
condition|)
block|{
name|exact_arch_match
operator|=
name|false
expr_stmt|;
for|for
control|(
name|auto
name|spec
range|:
name|m_specs
control|)
block|{
if|if
condition|(
name|spec
operator|.
name|Matches
argument_list|(
name|module_spec
argument_list|,
name|exact_arch_match
argument_list|)
condition|)
name|matching_list
operator|.
name|Append
argument_list|(
name|spec
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|matching_list
operator|.
name|GetSize
argument_list|()
operator|-
name|initial_match_count
return|;
block|}
name|void
name|Dump
parameter_list|(
name|Stream
modifier|&
name|strm
parameter_list|)
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
name|uint32_t
name|idx
init|=
literal|0
decl_stmt|;
for|for
control|(
name|auto
name|spec
range|:
name|m_specs
control|)
block|{
name|strm
operator|.
name|Printf
argument_list|(
literal|"[%u] "
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|spec
operator|.
name|Dump
argument_list|(
name|strm
argument_list|)
expr_stmt|;
name|strm
operator|.
name|EOL
argument_list|()
expr_stmt|;
operator|++
name|idx
expr_stmt|;
block|}
block|}
name|protected
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ModuleSpec
operator|>
name|collection
expr_stmt|;
comment|///< The module collection type.
name|collection
name|m_specs
decl_stmt|;
comment|///< The collection of modules.
name|mutable
name|Mutex
name|m_mutex
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_ModuleSpec_h_
end_comment

end_unit

