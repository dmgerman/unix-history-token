begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LoadedModuleInfoList.h ----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_LoadedModuleInfoList_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_LoadedModuleInfoList_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private-forward.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|LoadedModuleInfoList
block|{
name|public
label|:
name|class
name|LoadedModuleInfo
block|{
name|public
label|:
enum|enum
name|e_data_point
block|{
name|e_has_name
init|=
literal|0
block|,
name|e_has_base
block|,
name|e_has_dynamic
block|,
name|e_has_link_map
block|,
name|e_num
block|}
enum|;
name|LoadedModuleInfo
argument_list|()
block|{
for|for
control|(
name|uint32_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e_num
condition|;
operator|++
name|i
control|)
name|m_has
index|[
name|i
index|]
operator|=
name|false
expr_stmt|;
block|}
empty_stmt|;
name|void
name|set_name
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|name
argument_list|)
block|{
name|m_name
operator|=
name|name
expr_stmt|;
name|m_has
index|[
name|e_has_name
index|]
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|get_name
argument_list|(
name|std
operator|::
name|string
operator|&
name|out
argument_list|)
decl|const
block|{
name|out
operator|=
name|m_name
expr_stmt|;
return|return
name|m_has
index|[
name|e_has_name
index|]
return|;
block|}
name|void
name|set_base
argument_list|(
specifier|const
name|lldb
operator|::
name|addr_t
name|base
argument_list|)
block|{
name|m_base
operator|=
name|base
expr_stmt|;
name|m_has
index|[
name|e_has_base
index|]
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|get_base
argument_list|(
name|lldb
operator|::
name|addr_t
operator|&
name|out
argument_list|)
decl|const
block|{
name|out
operator|=
name|m_base
expr_stmt|;
return|return
name|m_has
index|[
name|e_has_base
index|]
return|;
block|}
name|void
name|set_base_is_offset
parameter_list|(
name|bool
name|is_offset
parameter_list|)
block|{
name|m_base_is_offset
operator|=
name|is_offset
expr_stmt|;
block|}
name|bool
name|get_base_is_offset
argument_list|(
name|bool
operator|&
name|out
argument_list|)
decl|const
block|{
name|out
operator|=
name|m_base_is_offset
expr_stmt|;
return|return
name|m_has
index|[
name|e_has_base
index|]
return|;
block|}
name|void
name|set_link_map
argument_list|(
specifier|const
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
block|{
name|m_link_map
operator|=
name|addr
expr_stmt|;
name|m_has
index|[
name|e_has_link_map
index|]
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|get_link_map
argument_list|(
name|lldb
operator|::
name|addr_t
operator|&
name|out
argument_list|)
decl|const
block|{
name|out
operator|=
name|m_link_map
expr_stmt|;
return|return
name|m_has
index|[
name|e_has_link_map
index|]
return|;
block|}
name|void
name|set_dynamic
argument_list|(
specifier|const
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
block|{
name|m_dynamic
operator|=
name|addr
expr_stmt|;
name|m_has
index|[
name|e_has_dynamic
index|]
operator|=
name|true
expr_stmt|;
block|}
name|bool
name|get_dynamic
argument_list|(
name|lldb
operator|::
name|addr_t
operator|&
name|out
argument_list|)
decl|const
block|{
name|out
operator|=
name|m_dynamic
expr_stmt|;
return|return
name|m_has
index|[
name|e_has_dynamic
index|]
return|;
block|}
name|bool
name|has_info
argument_list|(
name|e_data_point
name|datum
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|datum
operator|<
name|e_num
argument_list|)
expr_stmt|;
return|return
name|m_has
index|[
name|datum
index|]
return|;
block|}
name|bool
name|operator
operator|==
operator|(
name|LoadedModuleInfo
specifier|const
operator|&
name|rhs
operator|)
specifier|const
block|{
if|if
condition|(
name|e_num
operator|!=
name|rhs
operator|.
name|e_num
condition|)
return|return
name|false
return|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|e_num
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_has
index|[
name|i
index|]
operator|!=
name|rhs
operator|.
name|m_has
index|[
name|i
index|]
condition|)
return|return
name|false
return|;
block|}
return|return
operator|(
name|m_base
operator|==
name|rhs
operator|.
name|m_base
operator|)
operator|&&
operator|(
name|m_link_map
operator|==
name|rhs
operator|.
name|m_link_map
operator|)
operator|&&
operator|(
name|m_dynamic
operator|==
name|rhs
operator|.
name|m_dynamic
operator|)
operator|&&
operator|(
name|m_name
operator|==
name|rhs
operator|.
name|m_name
operator|)
return|;
block|}
name|protected
label|:
name|bool
name|m_has
index|[
name|e_num
index|]
decl_stmt|;
name|std
operator|::
name|string
name|m_name
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_link_map
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_base
expr_stmt|;
name|bool
name|m_base_is_offset
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|m_dynamic
expr_stmt|;
block|}
empty_stmt|;
name|LoadedModuleInfoList
argument_list|()
operator|:
name|m_list
argument_list|()
operator|,
name|m_link_map
argument_list|(
argument|LLDB_INVALID_ADDRESS
argument_list|)
block|{}
name|void
name|add
argument_list|(
argument|const LoadedModuleInfo&mod
argument_list|)
block|{
name|m_list
operator|.
name|push_back
argument_list|(
name|mod
argument_list|)
block|; }
name|void
name|clear
argument_list|()
block|{
name|m_list
operator|.
name|clear
argument_list|()
block|; }
name|std
operator|::
name|vector
operator|<
name|LoadedModuleInfo
operator|>
name|m_list
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_link_map
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_LoadedModuleInfoList_h_
end_comment

end_unit

