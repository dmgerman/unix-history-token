begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ThreadSafeSTLMap.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ThreadSafeSTLMap_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ThreadSafeSTLMap_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<mutex>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-defines.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Tp
operator|>
name|class
name|ThreadSafeSTLMap
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|_Key
operator|,
name|_Tp
operator|>
name|collection
expr_stmt|;
typedef|typedef
name|typename
name|collection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|typename
name|collection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|ThreadSafeSTLMap
argument_list|()
operator|:
name|m_collection
argument_list|()
operator|,
name|m_mutex
argument_list|()
block|{}
operator|~
name|ThreadSafeSTLMap
argument_list|()
block|{}
name|bool
name|IsEmpty
argument_list|()
specifier|const
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
block|;
return|return
name|m_collection
operator|.
name|empty
argument_list|()
return|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
return|return
name|m_collection
operator|.
name|clear
argument_list|()
return|;
block|}
name|size_t
name|Erase
parameter_list|(
specifier|const
name|_Key
modifier|&
name|key
parameter_list|)
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
return|return
name|EraseNoLock
argument_list|(
name|key
argument_list|)
return|;
block|}
name|size_t
name|EraseNoLock
parameter_list|(
specifier|const
name|_Key
modifier|&
name|key
parameter_list|)
block|{
return|return
name|m_collection
operator|.
name|erase
argument_list|(
name|key
argument_list|)
return|;
block|}
name|bool
name|GetValueForKey
argument_list|(
specifier|const
name|_Key
operator|&
name|key
argument_list|,
name|_Tp
operator|&
name|value
argument_list|)
decl|const
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
return|return
name|GetValueForKeyNoLock
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|// Call this if you have already manually locked the mutex using the
comment|// GetMutex() accessor
name|bool
name|GetValueForKeyNoLock
argument_list|(
specifier|const
name|_Key
operator|&
name|key
argument_list|,
name|_Tp
operator|&
name|value
argument_list|)
decl|const
block|{
name|const_iterator
name|pos
init|=
name|m_collection
operator|.
name|find
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
name|m_collection
operator|.
name|end
argument_list|()
condition|)
block|{
name|value
operator|=
name|pos
operator|->
name|second
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|GetFirstKeyForValue
argument_list|(
specifier|const
name|_Tp
operator|&
name|value
argument_list|,
name|_Key
operator|&
name|key
argument_list|)
decl|const
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
return|return
name|GetFirstKeyForValueNoLock
argument_list|(
name|value
argument_list|,
name|key
argument_list|)
return|;
block|}
name|bool
name|GetFirstKeyForValueNoLock
argument_list|(
specifier|const
name|_Tp
operator|&
name|value
argument_list|,
name|_Key
operator|&
name|key
argument_list|)
decl|const
block|{
name|const_iterator
name|pos
decl_stmt|,
name|end
init|=
name|m_collection
operator|.
name|end
argument_list|()
decl_stmt|;
for|for
control|(
name|pos
operator|=
name|m_collection
operator|.
name|begin
argument_list|()
init|;
name|pos
operator|!=
name|end
condition|;
operator|++
name|pos
control|)
block|{
if|if
condition|(
name|pos
operator|->
name|second
operator|==
name|value
condition|)
block|{
name|key
operator|=
name|pos
operator|->
name|first
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
name|bool
name|LowerBound
argument_list|(
specifier|const
name|_Key
operator|&
name|key
argument_list|,
name|_Key
operator|&
name|match_key
argument_list|,
name|_Tp
operator|&
name|match_value
argument_list|,
name|bool
name|decrement_if_not_equal
argument_list|)
decl|const
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
return|return
name|LowerBoundNoLock
argument_list|(
name|key
argument_list|,
name|match_key
argument_list|,
name|match_value
argument_list|,
name|decrement_if_not_equal
argument_list|)
return|;
block|}
name|bool
name|LowerBoundNoLock
argument_list|(
specifier|const
name|_Key
operator|&
name|key
argument_list|,
name|_Key
operator|&
name|match_key
argument_list|,
name|_Tp
operator|&
name|match_value
argument_list|,
name|bool
name|decrement_if_not_equal
argument_list|)
decl|const
block|{
name|const_iterator
name|pos
init|=
name|m_collection
operator|.
name|lower_bound
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|!=
name|m_collection
operator|.
name|end
argument_list|()
condition|)
block|{
name|match_key
operator|=
name|pos
operator|->
name|first
expr_stmt|;
if|if
condition|(
name|decrement_if_not_equal
operator|&&
name|key
operator|!=
name|match_key
operator|&&
name|pos
operator|!=
name|m_collection
operator|.
name|begin
argument_list|()
condition|)
block|{
operator|--
name|pos
expr_stmt|;
name|match_key
operator|=
name|pos
operator|->
name|first
expr_stmt|;
block|}
name|match_value
operator|=
name|pos
operator|->
name|second
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|iterator
name|lower_bound_unsafe
parameter_list|(
specifier|const
name|_Key
modifier|&
name|key
parameter_list|)
block|{
return|return
name|m_collection
operator|.
name|lower_bound
argument_list|(
name|key
argument_list|)
return|;
block|}
name|void
name|SetValueForKey
parameter_list|(
specifier|const
name|_Key
modifier|&
name|key
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|value
parameter_list|)
block|{
name|std
operator|::
name|lock_guard
operator|<
name|std
operator|::
name|recursive_mutex
operator|>
name|guard
argument_list|(
name|m_mutex
argument_list|)
expr_stmt|;
name|SetValueForKeyNoLock
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Call this if you have already manually locked the mutex using the
comment|// GetMutex() accessor
name|void
name|SetValueForKeyNoLock
parameter_list|(
specifier|const
name|_Key
modifier|&
name|key
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|value
parameter_list|)
block|{
name|m_collection
index|[
name|key
index|]
operator|=
name|value
expr_stmt|;
block|}
name|std
operator|::
name|recursive_mutex
operator|&
name|GetMutex
argument_list|()
block|{
return|return
name|m_mutex
return|;
block|}
name|private
label|:
name|collection
name|m_collection
decl_stmt|;
name|mutable
name|std
operator|::
name|recursive_mutex
name|m_mutex
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// For ThreadSafeSTLMap only
comment|//------------------------------------------------------------------
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|ThreadSafeSTLMap
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_ThreadSafeSTLMap_h_
end_comment

end_unit

