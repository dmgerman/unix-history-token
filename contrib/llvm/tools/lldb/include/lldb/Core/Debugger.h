begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Debugger.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Debugger_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Debugger_h_
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<stack>
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-public.h"
end_include

begin_include
include|#
directive|include
file|"lldb/API/SBDefines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Broadcaster.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Communication.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/InputReaderStack.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Listener.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/StreamFile.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/SourceManager.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/UserID.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/UserSettingsController.h"
end_include

begin_include
include|#
directive|include
file|"lldb/DataFormatters/FormatManager.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Terminal.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/OptionValueProperties.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/ExecutionContext.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/Platform.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/TargetList.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|/// @class Debugger Debugger.h "lldb/Core/Debugger.h"
comment|/// @brief A class to manage flag bits.
comment|///
comment|/// Provides a global root objects for the debugger core.
comment|//----------------------------------------------------------------------
name|class
name|Debugger
range|:
name|public
name|std
operator|::
name|enable_shared_from_this
operator|<
name|Debugger
operator|>
decl_stmt|,
name|public
name|UserID
decl_stmt|,
name|public
name|Properties
decl_stmt|,
name|public
name|BroadcasterManager
block|{
name|friend
name|class
name|SourceManager
decl_stmt|;
comment|// For GetSourceFileCache.
name|public
label|:
specifier|static
name|lldb
operator|::
name|DebuggerSP
name|CreateInstance
argument_list|(
argument|lldb::LogOutputCallback log_callback = NULL
argument_list|,
argument|void *baton = NULL
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|TargetSP
name|FindTargetWithProcessID
argument_list|(
argument|lldb::pid_t pid
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|TargetSP
name|FindTargetWithProcess
argument_list|(
name|Process
operator|*
name|process
argument_list|)
expr_stmt|;
specifier|static
name|void
name|Initialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|Terminate
parameter_list|()
function_decl|;
specifier|static
name|void
name|SettingsInitialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|SettingsTerminate
parameter_list|()
function_decl|;
specifier|static
name|void
name|Destroy
argument_list|(
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger_sp
argument_list|)
decl_stmt|;
name|virtual
operator|~
name|Debugger
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|bool
name|GetAsyncExecution
parameter_list|()
function_decl|;
name|void
name|SetAsyncExecution
parameter_list|(
name|bool
name|async
parameter_list|)
function_decl|;
name|File
modifier|&
name|GetInputFile
parameter_list|()
block|{
return|return
name|m_input_file
operator|.
name|GetFile
argument_list|()
return|;
block|}
name|File
modifier|&
name|GetOutputFile
parameter_list|()
block|{
return|return
name|m_output_file
operator|.
name|GetFile
argument_list|()
return|;
block|}
name|File
modifier|&
name|GetErrorFile
parameter_list|()
block|{
return|return
name|m_error_file
operator|.
name|GetFile
argument_list|()
return|;
block|}
name|void
name|SetInputFileHandle
parameter_list|(
name|FILE
modifier|*
name|fh
parameter_list|,
name|bool
name|tranfer_ownership
parameter_list|)
function_decl|;
name|void
name|SetOutputFileHandle
parameter_list|(
name|FILE
modifier|*
name|fh
parameter_list|,
name|bool
name|tranfer_ownership
parameter_list|)
function_decl|;
name|void
name|SetErrorFileHandle
parameter_list|(
name|FILE
modifier|*
name|fh
parameter_list|,
name|bool
name|tranfer_ownership
parameter_list|)
function_decl|;
name|void
name|SaveInputTerminalState
parameter_list|()
function_decl|;
name|void
name|RestoreInputTerminalState
parameter_list|()
function_decl|;
name|Stream
modifier|&
name|GetOutputStream
parameter_list|()
block|{
return|return
name|m_output_file
return|;
block|}
name|Stream
modifier|&
name|GetErrorStream
parameter_list|()
block|{
return|return
name|m_error_file
return|;
block|}
name|lldb
operator|::
name|StreamSP
name|GetAsyncOutputStream
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|StreamSP
name|GetAsyncErrorStream
argument_list|()
expr_stmt|;
name|CommandInterpreter
modifier|&
name|GetCommandInterpreter
parameter_list|()
block|{
name|assert
argument_list|(
name|m_command_interpreter_ap
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|m_command_interpreter_ap
return|;
block|}
name|Listener
modifier|&
name|GetListener
parameter_list|()
block|{
return|return
name|m_listener
return|;
block|}
comment|// This returns the Debugger's scratch source manager.  It won't be able to look up files in debug
comment|// information, but it can look up files by absolute path and display them to you.
comment|// To get the target's source manager, call GetSourceManager on the target instead.
name|SourceManager
modifier|&
name|GetSourceManager
parameter_list|()
function_decl|;
name|public
label|:
name|lldb
operator|::
name|TargetSP
name|GetSelectedTarget
argument_list|()
block|{
return|return
name|m_target_list
operator|.
name|GetSelectedTarget
argument_list|()
return|;
block|}
name|ExecutionContext
name|GetSelectedExecutionContext
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------
comment|/// Get accessor for the target list.
comment|///
comment|/// The target list is part of the global debugger object. This
comment|/// the single debugger shared instance to control where targets
comment|/// get created and to allow for tracking and searching for targets
comment|/// based on certain criteria.
comment|///
comment|/// @return
comment|///     A global shared target list.
comment|//------------------------------------------------------------------
name|TargetList
modifier|&
name|GetTargetList
parameter_list|()
block|{
return|return
name|m_target_list
return|;
block|}
name|PlatformList
modifier|&
name|GetPlatformList
parameter_list|()
block|{
return|return
name|m_platform_list
return|;
block|}
name|void
name|DispatchInputInterrupt
parameter_list|()
function_decl|;
name|void
name|DispatchInputEndOfFile
parameter_list|()
function_decl|;
name|void
name|DispatchInput
parameter_list|(
specifier|const
name|char
modifier|*
name|bytes
parameter_list|,
name|size_t
name|bytes_len
parameter_list|)
function_decl|;
name|void
name|WriteToDefaultReader
parameter_list|(
specifier|const
name|char
modifier|*
name|bytes
parameter_list|,
name|size_t
name|bytes_len
parameter_list|)
function_decl|;
name|void
name|PushInputReader
argument_list|(
specifier|const
name|lldb
operator|::
name|InputReaderSP
operator|&
name|reader_sp
argument_list|)
decl_stmt|;
name|bool
name|PopInputReader
argument_list|(
specifier|const
name|lldb
operator|::
name|InputReaderSP
operator|&
name|reader_sp
argument_list|)
decl_stmt|;
name|void
name|NotifyTopInputReader
argument_list|(
name|lldb
operator|::
name|InputReaderAction
name|notification
argument_list|)
decl_stmt|;
name|bool
name|InputReaderIsTopReader
argument_list|(
specifier|const
name|lldb
operator|::
name|InputReaderSP
operator|&
name|reader_sp
argument_list|)
decl_stmt|;
specifier|static
name|lldb
operator|::
name|DebuggerSP
name|FindDebuggerWithID
argument_list|(
argument|lldb::user_id_t id
argument_list|)
expr_stmt|;
specifier|static
name|lldb
operator|::
name|DebuggerSP
name|FindDebuggerWithInstanceName
argument_list|(
specifier|const
name|ConstString
operator|&
name|instance_name
argument_list|)
expr_stmt|;
specifier|static
name|size_t
name|GetNumDebuggers
parameter_list|()
function_decl|;
specifier|static
name|lldb
operator|::
name|DebuggerSP
name|GetDebuggerAtIndex
argument_list|(
argument|size_t index
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|FormatPrompt
parameter_list|(
specifier|const
name|char
modifier|*
name|format
parameter_list|,
specifier|const
name|SymbolContext
modifier|*
name|sc
parameter_list|,
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
specifier|const
name|Address
modifier|*
name|addr
parameter_list|,
name|Stream
modifier|&
name|s
parameter_list|,
name|ValueObject
modifier|*
name|valobj
init|=
name|NULL
parameter_list|)
function_decl|;
name|void
name|CleanUpInputReaders
parameter_list|()
function_decl|;
specifier|static
name|int
name|TestDebuggerRefCount
parameter_list|()
function_decl|;
name|bool
name|GetCloseInputOnEOF
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetCloseInputOnEOF
parameter_list|(
name|bool
name|b
parameter_list|)
function_decl|;
name|bool
name|EnableLog
parameter_list|(
specifier|const
name|char
modifier|*
name|channel
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|categories
parameter_list|,
specifier|const
name|char
modifier|*
name|log_file
parameter_list|,
name|uint32_t
name|log_options
parameter_list|,
name|Stream
modifier|&
name|error_stream
parameter_list|)
function_decl|;
name|void
name|SetLoggingCallback
argument_list|(
name|lldb
operator|::
name|LogOutputCallback
name|log_callback
argument_list|,
name|void
operator|*
name|baton
argument_list|)
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Properties Functions
comment|//----------------------------------------------------------------------
enum|enum
name|StopDisassemblyType
block|{
name|eStopDisassemblyTypeNever
init|=
literal|0
block|,
name|eStopDisassemblyTypeNoSource
block|,
name|eStopDisassemblyTypeAlways
block|}
enum|;
name|virtual
name|Error
name|SetPropertyValue
parameter_list|(
specifier|const
name|ExecutionContext
modifier|*
name|exe_ctx
parameter_list|,
name|VarSetOperationType
name|op
parameter_list|,
specifier|const
name|char
modifier|*
name|property_path
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
name|bool
name|GetAutoConfirm
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|GetFrameFormat
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|GetThreadFormat
argument_list|()
specifier|const
expr_stmt|;
name|lldb
operator|::
name|ScriptLanguage
name|GetScriptLanguage
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|SetScriptLanguage
argument_list|(
name|lldb
operator|::
name|ScriptLanguage
name|script_lang
argument_list|)
decl_stmt|;
name|uint32_t
name|GetTerminalWidth
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|SetTerminalWidth
parameter_list|(
name|uint32_t
name|term_width
parameter_list|)
function_decl|;
specifier|const
name|char
operator|*
name|GetPrompt
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetPrompt
parameter_list|(
specifier|const
name|char
modifier|*
name|p
parameter_list|)
function_decl|;
name|bool
name|GetUseExternalEditor
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|SetUseExternalEditor
parameter_list|(
name|bool
name|use_external_editor_p
parameter_list|)
function_decl|;
name|bool
name|GetUseColor
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|SetUseColor
parameter_list|(
name|bool
name|use_color
parameter_list|)
function_decl|;
name|uint32_t
name|GetStopSourceLineCount
argument_list|(
name|bool
name|before
argument_list|)
decl|const
decl_stmt|;
name|StopDisassemblyType
name|GetStopDisassemblyDisplay
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|GetDisassemblyLineCount
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|GetNotifyVoid
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|ConstString
modifier|&
name|GetInstanceName
parameter_list|()
block|{
return|return
name|m_instance_name
return|;
block|}
typedef|typedef
name|bool
argument_list|(
operator|*
name|LLDBCommandPluginInit
argument_list|)
argument_list|(
name|lldb
operator|::
name|SBDebugger
operator|&
name|debugger
argument_list|)
expr_stmt|;
name|bool
name|LoadPlugin
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|spec
parameter_list|,
name|Error
modifier|&
name|error
parameter_list|)
function_decl|;
name|protected
label|:
specifier|static
name|void
name|DispatchInputCallback
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|void
modifier|*
name|bytes
parameter_list|,
name|size_t
name|bytes_len
parameter_list|)
function_decl|;
name|lldb
operator|::
name|InputReaderSP
name|GetCurrentInputReader
argument_list|()
expr_stmt|;
name|void
name|ActivateInputReader
argument_list|(
specifier|const
name|lldb
operator|::
name|InputReaderSP
operator|&
name|reader_sp
argument_list|)
decl_stmt|;
name|bool
name|CheckIfTopInputReaderIsDone
parameter_list|()
function_decl|;
name|SourceManager
operator|::
name|SourceFileCache
operator|&
name|GetSourceFileCache
argument_list|()
block|{
return|return
name|m_source_file_cache
return|;
block|}
name|Communication
name|m_input_comm
decl_stmt|;
name|StreamFile
name|m_input_file
decl_stmt|;
name|StreamFile
name|m_output_file
decl_stmt|;
name|StreamFile
name|m_error_file
decl_stmt|;
name|TerminalState
name|m_terminal_state
decl_stmt|;
name|TargetList
name|m_target_list
decl_stmt|;
name|PlatformList
name|m_platform_list
decl_stmt|;
name|Listener
name|m_listener
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|SourceManager
operator|>
name|m_source_manager_ap
expr_stmt|;
comment|// This is a scratch source manager that we return if we have no targets.
name|SourceManager
operator|::
name|SourceFileCache
name|m_source_file_cache
expr_stmt|;
comment|// All the source managers for targets created in this debugger used this shared
comment|// source file cache.
name|std
operator|::
name|unique_ptr
operator|<
name|CommandInterpreter
operator|>
name|m_command_interpreter_ap
expr_stmt|;
name|InputReaderStack
name|m_input_reader_stack
decl_stmt|;
name|std
operator|::
name|string
name|m_input_reader_data
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|lldb
operator|::
name|StreamWP
operator|>
name|LogStreamMap
expr_stmt|;
name|LogStreamMap
name|m_log_streams
decl_stmt|;
name|lldb
operator|::
name|StreamSP
name|m_log_callback_stream_sp
expr_stmt|;
name|ConstString
name|m_instance_name
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|lldb
operator|::
name|DynamicLibrarySP
operator|>
name|LoadedPluginsList
expr_stmt|;
name|LoadedPluginsList
name|m_loaded_plugins
decl_stmt|;
name|void
name|InstanceInitialize
parameter_list|()
function_decl|;
name|private
label|:
comment|// Use Debugger::CreateInstance() to get a shared pointer to a new
comment|// debugger object
name|Debugger
argument_list|(
argument|lldb::LogOutputCallback m_log_callback
argument_list|,
argument|void *baton
argument_list|)
empty_stmt|;
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Debugger
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #if defined(__cplusplus)
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_Debugger_h_
end_comment

end_unit

