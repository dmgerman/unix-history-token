begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SourceManager.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_SourceManager_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_SourceManager_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/FileSpec.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|SourceManager
block|{
name|public
label|:
ifndef|#
directive|ifndef
name|SWIG
name|class
name|File
block|{
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SourceManager
operator|::
name|File
operator|&
name|lhs
operator|,
specifier|const
name|SourceManager
operator|::
name|File
operator|&
name|rhs
operator|)
expr_stmt|;
name|public
label|:
name|File
argument_list|(
specifier|const
name|FileSpec
operator|&
name|file_spec
argument_list|,
name|Target
operator|*
name|target
argument_list|)
expr_stmt|;
operator|~
name|File
argument_list|()
expr_stmt|;
name|void
name|UpdateIfNeeded
parameter_list|()
function_decl|;
name|size_t
name|DisplaySourceLines
parameter_list|(
name|uint32_t
name|line
parameter_list|,
name|uint32_t
name|context_before
parameter_list|,
name|uint32_t
name|context_after
parameter_list|,
name|Stream
modifier|*
name|s
parameter_list|)
function_decl|;
name|void
name|FindLinesMatchingRegex
argument_list|(
name|RegularExpression
operator|&
name|regex
argument_list|,
name|uint32_t
name|start_line
argument_list|,
name|uint32_t
name|end_line
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|match_lines
argument_list|)
decl_stmt|;
name|bool
name|GetLine
argument_list|(
name|uint32_t
name|line_no
argument_list|,
name|std
operator|::
name|string
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|uint32_t
name|GetLineOffset
parameter_list|(
name|uint32_t
name|line
parameter_list|)
function_decl|;
name|bool
name|LineIsValid
parameter_list|(
name|uint32_t
name|line
parameter_list|)
function_decl|;
name|bool
name|FileSpecMatches
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|file_spec
parameter_list|)
function_decl|;
specifier|const
name|FileSpec
modifier|&
name|GetFileSpec
parameter_list|()
block|{
return|return
name|m_file_spec
return|;
block|}
name|uint32_t
name|GetSourceMapModificationID
argument_list|()
specifier|const
block|{
return|return
name|m_source_map_mod_id
return|;
block|}
specifier|const
name|char
modifier|*
name|PeekLineData
parameter_list|(
name|uint32_t
name|line
parameter_list|)
function_decl|;
name|uint32_t
name|GetLineLength
parameter_list|(
name|uint32_t
name|line
parameter_list|,
name|bool
name|include_newline_chars
parameter_list|)
function_decl|;
name|uint32_t
name|GetNumLines
parameter_list|()
function_decl|;
name|protected
label|:
name|bool
name|CalculateLineOffsets
parameter_list|(
name|uint32_t
name|line
init|=
name|UINT32_MAX
parameter_list|)
function_decl|;
name|FileSpec
name|m_file_spec_orig
decl_stmt|;
comment|// The original file spec that was used (can be different from m_file_spec)
name|FileSpec
name|m_file_spec
decl_stmt|;
comment|// The actually file spec being used (if the target has source mappings, this might be different from m_file_spec_orig)
name|TimeValue
name|m_mod_time
decl_stmt|;
comment|// Keep the modification time that this file data is valid for
name|uint32_t
name|m_source_map_mod_id
decl_stmt|;
comment|// If the target uses path remappings, be sure to clear our notion of a source file if the path modification ID changes
name|lldb
operator|::
name|DataBufferSP
name|m_data_sp
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|LineOffsets
expr_stmt|;
name|LineOffsets
name|m_offsets
decl_stmt|;
block|}
empty_stmt|;
endif|#
directive|endif
comment|// SWIG
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|File
operator|>
name|FileSP
expr_stmt|;
ifndef|#
directive|ifndef
name|SWIG
comment|// The SourceFileCache class separates the source manager from the cache of source files, so the
comment|// cache can be stored in the Debugger, but the source managers can be per target.
name|class
name|SourceFileCache
block|{
name|public
label|:
name|SourceFileCache
argument_list|()
operator|=
expr|default
expr_stmt|;
operator|~
name|SourceFileCache
argument_list|()
operator|=
expr|default
expr_stmt|;
name|void
name|AddSourceFile
parameter_list|(
specifier|const
name|FileSP
modifier|&
name|file_sp
parameter_list|)
function_decl|;
name|FileSP
name|FindSourceFile
argument_list|(
specifier|const
name|FileSpec
operator|&
name|file_spec
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|FileSpec
operator|,
name|FileSP
operator|>
name|FileCache
expr_stmt|;
name|FileCache
name|m_file_cache
decl_stmt|;
block|}
empty_stmt|;
endif|#
directive|endif
comment|// SWIG
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
comment|// A source manager can be made with a non-null target, in which case it can use the path remappings to find
comment|// source files that are not in their build locations.  With no target it won't be able to do this.
name|SourceManager
argument_list|(
specifier|const
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger_sp
argument_list|)
expr_stmt|;
name|SourceManager
argument_list|(
specifier|const
name|lldb
operator|::
name|TargetSP
operator|&
name|target_sp
argument_list|)
expr_stmt|;
operator|~
name|SourceManager
argument_list|()
expr_stmt|;
name|FileSP
name|GetLastFile
parameter_list|()
block|{
return|return
name|m_last_file_sp
return|;
block|}
name|size_t
name|DisplaySourceLinesWithLineNumbers
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|file
parameter_list|,
name|uint32_t
name|line
parameter_list|,
name|uint32_t
name|context_before
parameter_list|,
name|uint32_t
name|context_after
parameter_list|,
specifier|const
name|char
modifier|*
name|current_line_cstr
parameter_list|,
name|Stream
modifier|*
name|s
parameter_list|,
specifier|const
name|SymbolContextList
modifier|*
name|bp_locs
init|=
name|nullptr
parameter_list|)
function_decl|;
comment|// This variant uses the last file we visited.
name|size_t
name|DisplaySourceLinesWithLineNumbersUsingLastFile
parameter_list|(
name|uint32_t
name|start_line
parameter_list|,
name|uint32_t
name|count
parameter_list|,
name|uint32_t
name|curr_line
parameter_list|,
specifier|const
name|char
modifier|*
name|current_line_cstr
parameter_list|,
name|Stream
modifier|*
name|s
parameter_list|,
specifier|const
name|SymbolContextList
modifier|*
name|bp_locs
init|=
name|nullptr
parameter_list|)
function_decl|;
name|size_t
name|DisplayMoreWithLineNumbers
parameter_list|(
name|Stream
modifier|*
name|s
parameter_list|,
name|uint32_t
name|count
parameter_list|,
name|bool
name|reverse
parameter_list|,
specifier|const
name|SymbolContextList
modifier|*
name|bp_locs
init|=
name|nullptr
parameter_list|)
function_decl|;
name|bool
name|SetDefaultFileAndLine
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|file_spec
parameter_list|,
name|uint32_t
name|line
parameter_list|)
function_decl|;
name|bool
name|GetDefaultFileAndLine
parameter_list|(
name|FileSpec
modifier|&
name|file_spec
parameter_list|,
name|uint32_t
modifier|&
name|line
parameter_list|)
function_decl|;
name|bool
name|DefaultFileAndLineSet
parameter_list|()
block|{
return|return
operator|(
name|m_last_file_sp
operator|.
name|get
argument_list|()
operator|!=
name|nullptr
operator|)
return|;
block|}
name|void
name|FindLinesMatchingRegex
argument_list|(
name|FileSpec
operator|&
name|file_spec
argument_list|,
name|RegularExpression
operator|&
name|regex
argument_list|,
name|uint32_t
name|start_line
argument_list|,
name|uint32_t
name|end_line
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
operator|&
name|match_lines
argument_list|)
decl_stmt|;
name|FileSP
name|GetFile
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|file_spec
parameter_list|)
function_decl|;
name|protected
label|:
name|FileSP
name|m_last_file_sp
decl_stmt|;
name|uint32_t
name|m_last_line
decl_stmt|;
name|uint32_t
name|m_last_count
decl_stmt|;
name|bool
name|m_default_set
decl_stmt|;
name|lldb
operator|::
name|TargetWP
name|m_target_wp
expr_stmt|;
name|lldb
operator|::
name|DebuggerWP
name|m_debugger_wp
expr_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|SourceManager
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|SourceManager
operator|::
name|File
operator|&
name|lhs
operator|,
specifier|const
name|SourceManager
operator|::
name|File
operator|&
name|rhs
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_SourceManager_h_
end_comment

end_unit

