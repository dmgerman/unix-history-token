begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- StructuredData.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_StructuredData_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_StructuredData_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-defines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Stream.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|/// @class StructuredData StructuredData.h "lldb/Core/StructuredData.h"
comment|/// @brief A class which can hold structured data
comment|///
comment|/// The StructuredData class is designed to hold the data from a JSON
comment|/// or plist style file -- a serialized data structure with dictionaries
comment|/// (maps, hashes), arrays, and concrete values like integers, floating
comment|/// point numbers, strings, booleans.
comment|///
comment|/// StructuredData does not presuppose any knowledge of the schema for
comment|/// the data it is holding; it can parse JSON data, for instance, and
comment|/// other parts of lldb can iterate through the parsed data set to find
comment|/// keys and values that may be present.
comment|//----------------------------------------------------------------------
name|class
name|StructuredData
block|{
name|public
label|:
name|class
name|Object
decl_stmt|;
name|class
name|Array
decl_stmt|;
name|class
name|Integer
decl_stmt|;
name|class
name|Float
decl_stmt|;
name|class
name|Boolean
decl_stmt|;
name|class
name|String
decl_stmt|;
name|class
name|Dictionary
decl_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Object
operator|>
name|ObjectSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Array
operator|>
name|ArraySP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|Dictionary
operator|>
name|DictionarySP
expr_stmt|;
name|enum
name|class
name|Type
block|{
name|eTypeInvalid
operator|=
operator|-
literal|1
operator|,
name|eTypeNull
operator|=
literal|0
operator|,
name|eTypeArray
operator|,
name|eTypeInteger
operator|,
name|eTypeFloat
operator|,
name|eTypeBoolean
operator|,
name|eTypeString
operator|,
name|eTypeDictionary
block|}
empty_stmt|;
name|class
name|Object
range|:
name|public
name|std
operator|::
name|enable_shared_from_this
operator|<
name|Object
operator|>
block|{
name|public
operator|:
name|Object
argument_list|(
argument|Type t = Type::eTypeInvalid
argument_list|)
operator|:
name|m_type
argument_list|(
argument|t
argument_list|)
block|{         }
name|virtual
operator|~
name|Object
argument_list|()
block|{         }
name|virtual
name|void
name|Clear
argument_list|()
block|{
name|m_type
operator|=
name|Type
operator|::
name|eTypeInvalid
block|;         }
name|Type
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type
return|;
block|}
name|void
name|SetType
argument_list|(
argument|Type t
argument_list|)
block|{
name|m_type
operator|=
name|t
block|;         }
name|Array
operator|*
name|GetAsArray
argument_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeArray
condition|)
return|return
operator|(
name|Array
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Dictionary
modifier|*
name|GetAsDictionary
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeDictionary
condition|)
return|return
operator|(
name|Dictionary
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Integer
modifier|*
name|GetAsInteger
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeInteger
condition|)
return|return
operator|(
name|Integer
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Float
modifier|*
name|GetAsFloat
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeFloat
condition|)
return|return
operator|(
name|Float
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|Boolean
modifier|*
name|GetAsBoolean
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeBoolean
condition|)
return|return
operator|(
name|Boolean
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|String
modifier|*
name|GetAsString
parameter_list|()
block|{
if|if
condition|(
name|m_type
operator|==
name|Type
operator|::
name|eTypeString
condition|)
return|return
operator|(
name|String
operator|*
operator|)
name|this
return|;
return|return
name|NULL
return|;
block|}
name|ObjectSP
name|GetObjectForDotSeparatedPath
argument_list|(
name|llvm
operator|::
name|StringRef
name|path
argument_list|)
decl_stmt|;
name|virtual
name|void
name|Dump
argument_list|(
name|Stream
operator|&
name|s
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
name|private
label|:
name|Type
name|m_type
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Array
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Array
argument_list|()
operator|:
name|Object
argument_list|(
argument|Type::eTypeArray
argument_list|)
block|{         }
name|virtual
operator|~
name|Array
argument_list|()
block|{         }
name|size_t
name|GetSize
argument_list|()
block|{
return|return
name|m_items
operator|.
name|size
argument_list|()
return|;
block|}
name|ObjectSP
name|operator
index|[]
operator|(
name|size_t
name|idx
operator|)
block|{
if|if
condition|(
name|idx
operator|<
name|m_items
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_items
index|[
name|idx
index|]
return|;
return|return
name|ObjectSP
argument_list|()
return|;
block|}
name|ObjectSP
name|GetItemAtIndex
parameter_list|(
name|size_t
name|idx
parameter_list|)
block|{
if|if
condition|(
name|idx
operator|<
name|m_items
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_items
index|[
name|idx
index|]
return|;
return|return
name|ObjectSP
argument_list|()
return|;
block|}
name|void
name|Push
parameter_list|(
name|ObjectSP
name|item
parameter_list|)
block|{
name|m_items
operator|.
name|push_back
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|void
name|AddItem
parameter_list|(
name|ObjectSP
name|item
parameter_list|)
block|{
name|m_items
operator|.
name|push_back
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|virtual
name|void
name|Dump
argument_list|(
name|Stream
operator|&
name|s
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ObjectSP
operator|>
name|collection
expr_stmt|;
name|collection
name|m_items
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|Integer
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Integer
argument_list|()
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeInteger
argument_list|)
block|,
name|m_value
argument_list|()
block|{         }
name|virtual
operator|~
name|Integer
argument_list|()
block|{         }
name|void
name|SetValue
argument_list|(
argument|uint64_t value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|;         }
name|uint64_t
name|GetValue
argument_list|()
block|{
return|return
name|m_value
return|;
block|}
name|virtual
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|uint64_t
name|m_value
block|;     }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Float
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Float
argument_list|()
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeFloat
argument_list|)
block|,
name|m_value
argument_list|()
block|{         }
name|virtual
operator|~
name|Float
argument_list|()
block|{         }
name|void
name|SetValue
argument_list|(
argument|double value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|;         }
name|double
name|GetValue
argument_list|()
block|{
return|return
name|m_value
return|;
block|}
name|virtual
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|double
name|m_value
block|;     }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Boolean
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Boolean
argument_list|()
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeBoolean
argument_list|)
block|,
name|m_value
argument_list|()
block|{         }
name|virtual
operator|~
name|Boolean
argument_list|()
block|{         }
name|void
name|SetValue
argument_list|(
argument|bool value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|;         }
name|bool
name|GetValue
argument_list|()
block|{
return|return
name|m_value
return|;
block|}
name|virtual
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|bool
name|m_value
block|;     }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|String
range|:
name|public
name|Object
block|{
name|public
operator|:
name|String
argument_list|()
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeString
argument_list|)
block|,
name|m_value
argument_list|()
block|{         }
name|void
name|SetValue
argument_list|(
argument|std::string string
argument_list|)
block|{
name|m_value
operator|=
name|string
block|;         }
name|std
operator|::
name|string
name|GetValue
argument_list|()
block|{
return|return
name|m_value
return|;
block|}
name|virtual
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|std
operator|::
name|string
name|m_value
block|;     }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|Dictionary
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Dictionary
argument_list|()
operator|:
name|Object
argument_list|(
name|Type
operator|::
name|eTypeDictionary
argument_list|)
block|,
name|m_dict
argument_list|()
block|{         }
name|virtual
operator|~
name|Dictionary
argument_list|()
block|{         }
name|size_t
name|GetSize
argument_list|()
block|{
return|return
name|m_dict
operator|.
name|size
argument_list|()
return|;
block|}
name|ObjectSP
name|GetKeys
argument_list|()
block|{
name|ObjectSP
name|object_sp
argument_list|(
argument|new Array ()
argument_list|)
block|;
name|Array
operator|*
name|array
operator|=
name|object_sp
operator|->
name|GetAsArray
argument_list|()
block|;
name|collection
operator|::
name|const_iterator
name|iter
block|;
for|for
control|(
name|iter
operator|=
name|m_dict
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|m_dict
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
name|ObjectSP
name|key_object_sp
parameter_list|(
name|new
name|String
parameter_list|()
parameter_list|)
function_decl|;
name|key_object_sp
operator|->
name|GetAsString
argument_list|()
operator|->
name|SetValue
argument_list|(
name|iter
operator|->
name|first
operator|.
name|AsCString
argument_list|()
argument_list|)
expr_stmt|;
name|array
operator|->
name|Push
argument_list|(
name|key_object_sp
argument_list|)
expr_stmt|;
block|}
return|return
name|object_sp
return|;
block|}
name|ObjectSP
name|GetValueForKey
argument_list|(
argument|const char *key
argument_list|)
block|{
name|ObjectSP
name|value_sp
block|;
if|if
condition|(
name|key
condition|)
block|{
name|ConstString
name|key_cs
parameter_list|(
name|key
parameter_list|)
function_decl|;
for|for
control|(
name|collection
operator|::
name|const_iterator
name|iter
operator|=
name|m_dict
operator|.
name|begin
argument_list|()
init|;
name|iter
operator|!=
name|m_dict
operator|.
name|end
argument_list|()
condition|;
operator|++
name|iter
control|)
block|{
if|if
condition|(
name|key_cs
operator|==
name|iter
operator|->
name|first
condition|)
block|{
name|value_sp
operator|=
name|iter
operator|->
name|second
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|value_sp
return|;
block|}
name|bool
name|HasKey
argument_list|(
argument|const char *key
argument_list|)
block|{
name|ConstString
name|key_cs
argument_list|(
name|key
argument_list|)
block|;
name|collection
operator|::
name|const_iterator
name|search
operator|=
name|m_dict
operator|.
name|find
argument_list|(
name|key_cs
argument_list|)
block|;
if|if
condition|(
name|search
operator|!=
name|m_dict
operator|.
name|end
argument_list|()
condition|)
block|{
return|return
name|true
return|;
block|}
else|else
block|{
return|return
name|false
return|;
block|}
block|}
name|void
name|AddItem
argument_list|(
argument|const char *key
argument_list|,
argument|ObjectSP value
argument_list|)
block|{
name|ConstString
name|key_cs
argument_list|(
name|key
argument_list|)
block|;
name|m_dict
index|[
name|key_cs
index|]
operator|=
name|value
block|;         }
name|void
name|AddIntegerItem
argument_list|(
argument|const char *key
argument_list|,
argument|uint64_t value
argument_list|)
block|{
name|ObjectSP
name|val_obj
argument_list|(
argument|new Integer()
argument_list|)
block|;
name|val_obj
operator|->
name|GetAsInteger
argument_list|()
operator|->
name|SetValue
argument_list|(
name|value
argument_list|)
block|;
name|AddItem
argument_list|(
name|key
argument_list|,
name|val_obj
argument_list|)
block|;         }
name|void
name|AddFloatItem
argument_list|(
argument|const char *key
argument_list|,
argument|double value
argument_list|)
block|{
name|ObjectSP
name|val_obj
argument_list|(
argument|new Float()
argument_list|)
block|;
name|val_obj
operator|->
name|GetAsFloat
argument_list|()
operator|->
name|SetValue
argument_list|(
name|value
argument_list|)
block|;
name|AddItem
argument_list|(
name|key
argument_list|,
name|val_obj
argument_list|)
block|;         }
name|void
name|AddStringItem
argument_list|(
argument|const char *key
argument_list|,
argument|std::string value
argument_list|)
block|{
name|ObjectSP
name|val_obj
argument_list|(
argument|new String()
argument_list|)
block|;
name|val_obj
operator|->
name|GetAsString
argument_list|()
operator|->
name|SetValue
argument_list|(
name|value
argument_list|)
block|;
name|AddItem
argument_list|(
name|key
argument_list|,
name|val_obj
argument_list|)
block|;         }
name|void
name|AddBooleanItem
argument_list|(
argument|const char *key
argument_list|,
argument|bool value
argument_list|)
block|{
name|ObjectSP
name|val_obj
argument_list|(
argument|new Boolean()
argument_list|)
block|;
name|val_obj
operator|->
name|GetAsBoolean
argument_list|()
operator|->
name|SetValue
argument_list|(
name|value
argument_list|)
block|;
name|AddItem
argument_list|(
name|key
argument_list|,
name|val_obj
argument_list|)
block|;         }
name|virtual
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|)
specifier|const
block|;
name|protected
operator|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|ConstString
operator|,
name|ObjectSP
operator|>
name|collection
expr_stmt|;
name|collection
name|m_dict
decl_stmt|;
end_decl_stmt

begin_decl_stmt
unit|};
name|class
name|Null
range|:
name|public
name|Object
block|{
name|public
operator|:
name|Null
argument_list|()
operator|:
name|Object
argument_list|(
argument|Type::eTypeNull
argument_list|)
block|{         }
name|virtual
operator|~
name|Null
argument_list|()
block|{         }
name|virtual
name|void
name|Dump
argument_list|(
argument|Stream&s
argument_list|)
specifier|const
block|;
name|protected
operator|:
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|ObjectSP
name|ParseJSON
argument_list|(
name|std
operator|::
name|string
name|json_text
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// class StructuredData
end_comment

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_StructuredData_h_
end_comment

end_unit

