begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- VMRange.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_VMRange_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_VMRange_h_
end_define

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|// A vm address range. These can represent offsets ranges or actual
comment|// addresses.
comment|//----------------------------------------------------------------------
name|class
name|VMRange
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|VMRange
operator|>
name|collection
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|VMRange
argument_list|()
operator|:
name|m_base_addr
argument_list|(
literal|0
argument_list|)
operator|,
name|m_byte_size
argument_list|(
literal|0
argument_list|)
block|{}
name|VMRange
argument_list|(
argument|lldb::addr_t start_addr
argument_list|,
argument|lldb::addr_t end_addr
argument_list|)
operator|:
name|m_base_addr
argument_list|(
name|start_addr
argument_list|)
operator|,
name|m_byte_size
argument_list|(
argument|end_addr> start_addr ? end_addr - start_addr :
literal|0
argument_list|)
block|{}
operator|~
name|VMRange
argument_list|()
block|{}
name|void
name|Clear
argument_list|()
block|{
name|m_base_addr
operator|=
literal|0
block|;
name|m_byte_size
operator|=
literal|0
block|;   }
comment|// Set the start and end values
name|void
name|Reset
argument_list|(
argument|lldb::addr_t start_addr
argument_list|,
argument|lldb::addr_t end_addr
argument_list|)
block|{
name|SetBaseAddress
argument_list|(
name|start_addr
argument_list|)
block|;
name|SetEndAddress
argument_list|(
name|end_addr
argument_list|)
block|;   }
comment|// Set the start value for the range, and keep the same size
name|void
name|SetBaseAddress
argument_list|(
argument|lldb::addr_t base_addr
argument_list|)
block|{
name|m_base_addr
operator|=
name|base_addr
block|; }
name|void
name|SetEndAddress
argument_list|(
argument|lldb::addr_t end_addr
argument_list|)
block|{
specifier|const
name|lldb
operator|::
name|addr_t
name|base_addr
operator|=
name|GetBaseAddress
argument_list|()
block|;
if|if
condition|(
name|end_addr
operator|>
name|base_addr
condition|)
name|m_byte_size
operator|=
name|end_addr
operator|-
name|base_addr
expr_stmt|;
else|else
name|m_byte_size
operator|=
literal|0
expr_stmt|;
block|}
name|lldb
operator|::
name|addr_t
name|GetByteSize
argument_list|()
specifier|const
block|{
return|return
name|m_byte_size
return|;
block|}
name|void
name|SetByteSize
argument_list|(
name|lldb
operator|::
name|addr_t
name|byte_size
argument_list|)
block|{
name|m_byte_size
operator|=
name|byte_size
expr_stmt|;
block|}
name|lldb
operator|::
name|addr_t
name|GetBaseAddress
argument_list|()
specifier|const
block|{
return|return
name|m_base_addr
return|;
block|}
name|lldb
operator|::
name|addr_t
name|GetEndAddress
argument_list|()
specifier|const
block|{
return|return
name|GetBaseAddress
argument_list|()
operator|+
name|m_byte_size
return|;
block|}
name|bool
name|IsValid
argument_list|()
specifier|const
block|{
return|return
name|m_byte_size
operator|>
literal|0
return|;
block|}
name|bool
name|Contains
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl|const
block|{
return|return
operator|(
name|GetBaseAddress
argument_list|()
operator|<=
name|addr
operator|)
operator|&&
operator|(
name|addr
operator|<
name|GetEndAddress
argument_list|()
operator|)
return|;
block|}
name|bool
name|Contains
argument_list|(
specifier|const
name|VMRange
operator|&
name|range
argument_list|)
decl|const
block|{
if|if
condition|(
name|Contains
argument_list|(
name|range
operator|.
name|GetBaseAddress
argument_list|()
argument_list|)
condition|)
block|{
name|lldb
operator|::
name|addr_t
name|range_end
operator|=
name|range
operator|.
name|GetEndAddress
argument_list|()
expr_stmt|;
return|return
operator|(
name|GetBaseAddress
argument_list|()
operator|<=
name|range_end
operator|)
operator|&&
operator|(
name|range_end
operator|<=
name|GetEndAddress
argument_list|()
operator|)
return|;
block|}
return|return
name|false
return|;
block|}
name|void
name|Dump
argument_list|(
name|Stream
operator|*
name|s
argument_list|,
name|lldb
operator|::
name|addr_t
name|base_addr
operator|=
literal|0
argument_list|,
name|uint32_t
name|addr_width
operator|=
literal|8
argument_list|)
decl|const
decl_stmt|;
name|class
name|ValueInRangeUnaryPredicate
block|{
name|public
label|:
name|ValueInRangeUnaryPredicate
argument_list|(
argument|lldb::addr_t value
argument_list|)
block|:
name|_value
argument_list|(
argument|value
argument_list|)
block|{}
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|VMRange
operator|&
name|range
operator|)
specifier|const
block|{
return|return
name|range
operator|.
name|Contains
argument_list|(
name|_value
argument_list|)
return|;
block|}
name|lldb
operator|::
name|addr_t
name|_value
expr_stmt|;
block|}
empty_stmt|;
name|class
name|RangeInRangeUnaryPredicate
block|{
name|public
label|:
name|RangeInRangeUnaryPredicate
argument_list|(
argument|VMRange range
argument_list|)
block|:
name|_range
argument_list|(
argument|range
argument_list|)
block|{}
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|VMRange
operator|&
name|range
operator|)
specifier|const
block|{
return|return
name|range
operator|.
name|Contains
argument_list|(
name|_range
argument_list|)
return|;
block|}
specifier|const
name|VMRange
modifier|&
name|_range
decl_stmt|;
block|}
empty_stmt|;
specifier|static
name|bool
name|ContainsValue
argument_list|(
specifier|const
name|VMRange
operator|::
name|collection
operator|&
name|coll
argument_list|,
name|lldb
operator|::
name|addr_t
name|value
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|ContainsRange
argument_list|(
specifier|const
name|VMRange
operator|::
name|collection
operator|&
name|coll
argument_list|,
specifier|const
name|VMRange
operator|&
name|range
argument_list|)
decl_stmt|;
comment|// Returns a valid index into coll when a match is found, else UINT32_MAX
comment|// is returned
specifier|static
name|size_t
name|FindRangeIndexThatContainsValue
argument_list|(
specifier|const
name|VMRange
operator|::
name|collection
operator|&
name|coll
argument_list|,
name|lldb
operator|::
name|addr_t
name|value
argument_list|)
decl_stmt|;
name|protected
label|:
name|lldb
operator|::
name|addr_t
name|m_base_addr
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|m_byte_size
expr_stmt|;
block|}
empty_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|VMRange
operator|&
name|lhs
operator|,
specifier|const
name|VMRange
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|VMRange
operator|&
name|lhs
operator|,
specifier|const
name|VMRange
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
specifier|const
name|VMRange
operator|&
name|lhs
operator|,
specifier|const
name|VMRange
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|VMRange
operator|&
name|lhs
operator|,
specifier|const
name|VMRange
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|>
operator|(
specifier|const
name|VMRange
operator|&
name|lhs
operator|,
specifier|const
name|VMRange
operator|&
name|rhs
operator|)
expr_stmt|;
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|VMRange
operator|&
name|lhs
operator|,
specifier|const
name|VMRange
operator|&
name|rhs
operator|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_VMRange_h_
end_comment

end_unit

