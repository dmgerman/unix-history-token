begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MemoryRegionInfo.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_MemoryRegionInfo_h
end_ifndef

begin_define
define|#
directive|define
name|lldb_MemoryRegionInfo_h
end_define

begin_include
include|#
directive|include
file|"lldb/Core/RangeMap.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/Range.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|MemoryRegionInfo
block|{
name|public
label|:
typedef|typedef
name|Range
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|lldb
operator|::
name|addr_t
operator|>
name|RangeType
expr_stmt|;
enum|enum
name|OptionalBool
block|{
name|eDontKnow
init|=
operator|-
literal|1
block|,
name|eNo
init|=
literal|0
block|,
name|eYes
init|=
literal|1
block|}
enum|;
name|MemoryRegionInfo
argument_list|()
operator|:
name|m_range
argument_list|()
operator|,
name|m_read
argument_list|(
name|eDontKnow
argument_list|)
operator|,
name|m_write
argument_list|(
name|eDontKnow
argument_list|)
operator|,
name|m_execute
argument_list|(
argument|eDontKnow
argument_list|)
block|{         }
operator|~
name|MemoryRegionInfo
argument_list|()
block|{         }
name|RangeType
operator|&
name|GetRange
argument_list|()
block|{
return|return
name|m_range
return|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|m_range
operator|.
name|Clear
argument_list|()
expr_stmt|;
name|m_read
operator|=
name|m_write
operator|=
name|m_execute
operator|=
name|eDontKnow
expr_stmt|;
block|}
specifier|const
name|RangeType
operator|&
name|GetRange
argument_list|()
specifier|const
block|{
return|return
name|m_range
return|;
block|}
name|OptionalBool
name|GetReadable
argument_list|()
specifier|const
block|{
return|return
name|m_read
return|;
block|}
name|OptionalBool
name|GetWritable
argument_list|()
specifier|const
block|{
return|return
name|m_write
return|;
block|}
name|OptionalBool
name|GetExecutable
argument_list|()
specifier|const
block|{
return|return
name|m_execute
return|;
block|}
name|void
name|SetReadable
parameter_list|(
name|OptionalBool
name|val
parameter_list|)
block|{
name|m_read
operator|=
name|val
expr_stmt|;
block|}
name|void
name|SetWritable
parameter_list|(
name|OptionalBool
name|val
parameter_list|)
block|{
name|m_write
operator|=
name|val
expr_stmt|;
block|}
name|void
name|SetExecutable
parameter_list|(
name|OptionalBool
name|val
parameter_list|)
block|{
name|m_execute
operator|=
name|val
expr_stmt|;
block|}
name|protected
label|:
name|RangeType
name|m_range
decl_stmt|;
name|OptionalBool
name|m_read
decl_stmt|;
name|OptionalBool
name|m_write
decl_stmt|;
name|OptionalBool
name|m_execute
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef lldb_MemoryRegionInfo_h
end_comment

end_unit

