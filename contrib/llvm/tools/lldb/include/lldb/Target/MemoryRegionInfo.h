begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MemoryRegionInfo.h ---------------------------------------*- C++
end_comment

begin_comment
comment|//-*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_MemoryRegionInfo_h
end_ifndef

begin_define
define|#
directive|define
name|lldb_MemoryRegionInfo_h
end_define

begin_include
include|#
directive|include
file|"lldb/Core/RangeMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormatProviders.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/Range.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|MemoryRegionInfo
block|{
name|public
label|:
typedef|typedef
name|Range
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|lldb
operator|::
name|addr_t
operator|>
name|RangeType
expr_stmt|;
enum|enum
name|OptionalBool
block|{
name|eDontKnow
init|=
operator|-
literal|1
block|,
name|eNo
init|=
literal|0
block|,
name|eYes
init|=
literal|1
block|}
enum|;
name|MemoryRegionInfo
argument_list|()
operator|:
name|m_range
argument_list|()
operator|,
name|m_read
argument_list|(
name|eDontKnow
argument_list|)
operator|,
name|m_write
argument_list|(
name|eDontKnow
argument_list|)
operator|,
name|m_execute
argument_list|(
name|eDontKnow
argument_list|)
operator|,
name|m_mapped
argument_list|(
argument|eDontKnow
argument_list|)
block|{}
operator|~
name|MemoryRegionInfo
argument_list|()
block|{}
name|RangeType
operator|&
name|GetRange
argument_list|()
block|{
return|return
name|m_range
return|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|m_range
operator|.
name|Clear
argument_list|()
expr_stmt|;
name|m_read
operator|=
name|m_write
operator|=
name|m_execute
operator|=
name|eDontKnow
expr_stmt|;
block|}
specifier|const
name|RangeType
operator|&
name|GetRange
argument_list|()
specifier|const
block|{
return|return
name|m_range
return|;
block|}
name|OptionalBool
name|GetReadable
argument_list|()
specifier|const
block|{
return|return
name|m_read
return|;
block|}
name|OptionalBool
name|GetWritable
argument_list|()
specifier|const
block|{
return|return
name|m_write
return|;
block|}
name|OptionalBool
name|GetExecutable
argument_list|()
specifier|const
block|{
return|return
name|m_execute
return|;
block|}
name|OptionalBool
name|GetMapped
argument_list|()
specifier|const
block|{
return|return
name|m_mapped
return|;
block|}
specifier|const
name|ConstString
operator|&
name|GetName
argument_list|()
specifier|const
block|{
return|return
name|m_name
return|;
block|}
name|void
name|SetReadable
parameter_list|(
name|OptionalBool
name|val
parameter_list|)
block|{
name|m_read
operator|=
name|val
expr_stmt|;
block|}
name|void
name|SetWritable
parameter_list|(
name|OptionalBool
name|val
parameter_list|)
block|{
name|m_write
operator|=
name|val
expr_stmt|;
block|}
name|void
name|SetExecutable
parameter_list|(
name|OptionalBool
name|val
parameter_list|)
block|{
name|m_execute
operator|=
name|val
expr_stmt|;
block|}
name|void
name|SetMapped
parameter_list|(
name|OptionalBool
name|val
parameter_list|)
block|{
name|m_mapped
operator|=
name|val
expr_stmt|;
block|}
name|void
name|SetName
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|m_name
operator|=
name|ConstString
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
comment|//----------------------------------------------------------------------
comment|// Get permissions as a uint32_t that is a mask of one or more bits from
comment|// the lldb::Permissions
comment|//----------------------------------------------------------------------
name|uint32_t
name|GetLLDBPermissions
argument_list|()
specifier|const
block|{
name|uint32_t
name|permissions
operator|=
literal|0
block|;
if|if
condition|(
name|m_read
condition|)
name|permissions
operator||=
name|lldb
operator|::
name|ePermissionsReadable
expr_stmt|;
if|if
condition|(
name|m_write
condition|)
name|permissions
operator||=
name|lldb
operator|::
name|ePermissionsWritable
expr_stmt|;
if|if
condition|(
name|m_execute
condition|)
name|permissions
operator||=
name|lldb
operator|::
name|ePermissionsExecutable
expr_stmt|;
return|return
name|permissions
return|;
block|}
comment|//----------------------------------------------------------------------
comment|// Set permissions from a uint32_t that contains one or more bits from
comment|// the lldb::Permissions
comment|//----------------------------------------------------------------------
name|void
name|SetLLDBPermissions
parameter_list|(
name|uint32_t
name|permissions
parameter_list|)
block|{
name|m_read
operator|=
operator|(
name|permissions
operator|&
name|lldb
operator|::
name|ePermissionsReadable
operator|)
condition|?
name|eYes
else|:
name|eNo
expr_stmt|;
name|m_write
operator|=
operator|(
name|permissions
operator|&
name|lldb
operator|::
name|ePermissionsWritable
operator|)
condition|?
name|eYes
else|:
name|eNo
expr_stmt|;
name|m_execute
operator|=
operator|(
name|permissions
operator|&
name|lldb
operator|::
name|ePermissionsExecutable
operator|)
condition|?
name|eYes
else|:
name|eNo
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|MemoryRegionInfo
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
name|m_range
operator|==
name|rhs
operator|.
name|m_range
operator|&&
name|m_read
operator|==
name|rhs
operator|.
name|m_read
operator|&&
name|m_write
operator|==
name|rhs
operator|.
name|m_write
operator|&&
name|m_execute
operator|==
name|rhs
operator|.
name|m_execute
operator|&&
name|m_mapped
operator|==
name|rhs
operator|.
name|m_mapped
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|MemoryRegionInfo
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|rhs
operator|)
return|;
block|}
name|protected
label|:
name|RangeType
name|m_range
decl_stmt|;
name|OptionalBool
name|m_read
decl_stmt|;
name|OptionalBool
name|m_write
decl_stmt|;
name|OptionalBool
name|m_execute
decl_stmt|;
name|OptionalBool
name|m_mapped
decl_stmt|;
name|ConstString
name|m_name
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_macro
unit|}  namespace
name|llvm
end_macro

begin_block
block|{
name|template
operator|<
operator|>
expr|struct
name|format_provider
operator|<
name|lldb_private
operator|::
name|MemoryRegionInfo
operator|::
name|OptionalBool
operator|>
block|{
specifier|static
name|void
name|format
argument_list|(
argument|const lldb_private::MemoryRegionInfo::OptionalBool&B
argument_list|,
argument|raw_ostream&OS
argument_list|,
argument|StringRef Options
argument_list|)
block|{
switch|switch
condition|(
name|B
condition|)
block|{
case|case
name|lldb_private
operator|::
name|MemoryRegionInfo
operator|::
name|eNo
case|:
name|OS
operator|<<
literal|"no"
expr_stmt|;
return|return;
case|case
name|lldb_private
operator|::
name|MemoryRegionInfo
operator|::
name|eYes
case|:
name|OS
operator|<<
literal|"yes"
expr_stmt|;
return|return;
case|case
name|lldb_private
operator|::
name|MemoryRegionInfo
operator|::
name|eDontKnow
case|:
name|OS
operator|<<
literal|"don't know"
expr_stmt|;
return|return;
block|}
block|}
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef lldb_MemoryRegionInfo_h
end_comment

end_unit

