begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Memory.h ------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Memory_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Memory_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/RangeMap.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Mutex.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|// A class to track memory that was read from a live process between
comment|// runs.
comment|//----------------------------------------------------------------------
name|class
name|MemoryCache
block|{
name|public
label|:
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|MemoryCache
argument_list|(
name|Process
operator|&
name|process
argument_list|)
expr_stmt|;
operator|~
name|MemoryCache
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|(
name|bool
name|clear_invalid_ranges
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|Flush
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|size_t
name|size
argument_list|)
decl_stmt|;
name|size_t
name|Read
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|void
operator|*
name|dst
argument_list|,
name|size_t
name|dst_len
argument_list|,
name|Error
operator|&
name|error
argument_list|)
decl_stmt|;
name|uint32_t
name|GetMemoryCacheLineSize
argument_list|()
specifier|const
block|{
return|return
name|m_L2_cache_line_byte_size
return|;
block|}
name|void
name|AddInvalidRange
argument_list|(
name|lldb
operator|::
name|addr_t
name|base_addr
argument_list|,
name|lldb
operator|::
name|addr_t
name|byte_size
argument_list|)
decl_stmt|;
name|bool
name|RemoveInvalidRange
argument_list|(
name|lldb
operator|::
name|addr_t
name|base_addr
argument_list|,
name|lldb
operator|::
name|addr_t
name|byte_size
argument_list|)
decl_stmt|;
comment|// Allow external sources to populate data into the L1 memory cache
name|void
name|AddL1CacheData
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
specifier|const
name|void
operator|*
name|src
argument_list|,
name|size_t
name|src_len
argument_list|)
decl_stmt|;
name|void
name|AddL1CacheData
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
specifier|const
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_buffer_sp
argument_list|)
decl_stmt|;
name|protected
label|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|lldb
operator|::
name|DataBufferSP
operator|>
name|BlockMap
expr_stmt|;
typedef|typedef
name|RangeArray
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|lldb
operator|::
name|addr_t
operator|,
literal|4
operator|>
name|InvalidRanges
expr_stmt|;
typedef|typedef
name|Range
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|lldb
operator|::
name|addr_t
operator|>
name|AddrRange
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// Classes that inherit from MemoryCache can see and modify these
comment|//------------------------------------------------------------------
name|Mutex
name|m_mutex
decl_stmt|;
name|BlockMap
name|m_L1_cache
decl_stmt|;
comment|// A first level memory cache whose chunk sizes vary that will be used only if the memory read fits entirely in a chunk
name|BlockMap
name|m_L2_cache
decl_stmt|;
comment|// A memory cache of fixed size chinks (m_L2_cache_line_byte_size bytes in size each)
name|InvalidRanges
name|m_invalid_ranges
decl_stmt|;
name|Process
modifier|&
name|m_process
decl_stmt|;
name|uint32_t
name|m_L2_cache_line_byte_size
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|MemoryCache
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|class
name|AllocatedBlock
block|{
name|public
label|:
name|AllocatedBlock
argument_list|(
argument|lldb::addr_t addr
argument_list|,
argument|uint32_t byte_size
argument_list|,
argument|uint32_t permissions
argument_list|,
argument|uint32_t chunk_size
argument_list|)
empty_stmt|;
operator|~
name|AllocatedBlock
argument_list|()
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|ReserveBlock
argument_list|(
argument|uint32_t size
argument_list|)
expr_stmt|;
name|bool
name|FreeBlock
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|GetBaseAddress
argument_list|()
specifier|const
block|{
return|return
name|m_addr
return|;
block|}
name|uint32_t
name|GetByteSize
argument_list|()
specifier|const
block|{
return|return
name|m_byte_size
return|;
block|}
name|uint32_t
name|GetPermissions
argument_list|()
specifier|const
block|{
return|return
name|m_permissions
return|;
block|}
name|uint32_t
name|GetChunkSize
argument_list|()
specifier|const
block|{
return|return
name|m_chunk_size
return|;
block|}
name|bool
name|Contains
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
decl|const
block|{
return|return
operator|(
operator|(
name|addr
operator|>=
name|m_addr
operator|)
operator|&&
name|addr
operator|<
operator|(
name|m_addr
operator|+
name|m_byte_size
operator|)
operator|)
return|;
block|}
name|protected
label|:
name|uint32_t
name|TotalChunks
argument_list|()
specifier|const
block|{
return|return
name|m_byte_size
operator|/
name|m_chunk_size
return|;
block|}
name|uint32_t
name|CalculateChunksNeededForSize
argument_list|(
name|uint32_t
name|size
argument_list|)
decl|const
block|{
return|return
operator|(
name|size
operator|+
name|m_chunk_size
operator|-
literal|1
operator|)
operator|/
name|m_chunk_size
return|;
block|}
specifier|const
name|lldb
operator|::
name|addr_t
name|m_addr
expr_stmt|;
comment|// Base address of this block of memory
specifier|const
name|uint32_t
name|m_byte_size
decl_stmt|;
comment|// 4GB of chunk should be enough...
specifier|const
name|uint32_t
name|m_permissions
decl_stmt|;
comment|// Permissions for this memory (logical OR of lldb::Permissions bits)
specifier|const
name|uint32_t
name|m_chunk_size
decl_stmt|;
comment|// The size of chunks that the memory at m_addr is divied up into
typedef|typedef
name|std
operator|::
name|map
operator|<
name|uint32_t
operator|,
name|uint32_t
operator|>
name|OffsetToChunkSize
expr_stmt|;
name|OffsetToChunkSize
name|m_offset_to_chunk_size
decl_stmt|;
block|}
empty_stmt|;
comment|//----------------------------------------------------------------------
comment|// A class that can track allocated memory and give out allocated memory
comment|// without us having to make an allocate/deallocate call every time we
comment|// need some memory in a process that is being debugged.
comment|//----------------------------------------------------------------------
name|class
name|AllocatedMemoryCache
block|{
name|public
label|:
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|AllocatedMemoryCache
argument_list|(
name|Process
operator|&
name|process
argument_list|)
expr_stmt|;
operator|~
name|AllocatedMemoryCache
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|lldb
operator|::
name|addr_t
name|AllocateMemory
argument_list|(
argument|size_t byte_size
argument_list|,
argument|uint32_t permissions
argument_list|,
argument|Error&error
argument_list|)
expr_stmt|;
name|bool
name|DeallocateMemory
argument_list|(
name|lldb
operator|::
name|addr_t
name|ptr
argument_list|)
decl_stmt|;
name|protected
label|:
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|AllocatedBlock
operator|>
name|AllocatedBlockSP
expr_stmt|;
name|AllocatedBlockSP
name|AllocatePage
parameter_list|(
name|uint32_t
name|byte_size
parameter_list|,
name|uint32_t
name|permissions
parameter_list|,
name|uint32_t
name|chunk_size
parameter_list|,
name|Error
modifier|&
name|error
parameter_list|)
function_decl|;
comment|//------------------------------------------------------------------
comment|// Classes that inherit from MemoryCache can see and modify these
comment|//------------------------------------------------------------------
name|Process
modifier|&
name|m_process
decl_stmt|;
name|Mutex
name|m_mutex
decl_stmt|;
typedef|typedef
name|std
operator|::
name|multimap
operator|<
name|uint32_t
operator|,
name|AllocatedBlockSP
operator|>
name|PermissionsToBlockMap
expr_stmt|;
name|PermissionsToBlockMap
name|m_memory_map
decl_stmt|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|AllocatedMemoryCache
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_Memory_h_
end_comment

end_unit

