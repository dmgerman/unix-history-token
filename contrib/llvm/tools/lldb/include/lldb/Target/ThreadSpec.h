begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ThreadSpec.h ------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ThreadSpec_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ThreadSpec_h_
end_define

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|// Note: For now the thread spec has only fixed elements -
comment|//   Thread ID
comment|//   Thread Index
comment|//   Thread Name
comment|//   Thread Queue Name
comment|//
comment|//  But if we need more generality, we can hang a key/value map off of this structure.
comment|//  That's why the thread matches spec test is done as a virtual method in Thread::MatchesSpec,
comment|//  since it is the native thread that would know how to interpret the keys.
comment|//  I was going to do the Queue Name this way out of sheer orneriness, but that seems a
comment|//  sufficiently general concept, so I put it in here on its own.
name|class
name|ThreadSpec
block|{
name|public
label|:
name|ThreadSpec
argument_list|()
expr_stmt|;
name|ThreadSpec
argument_list|(
specifier|const
name|ThreadSpec
operator|&
name|rhs
argument_list|)
expr_stmt|;
specifier|const
name|ThreadSpec
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ThreadSpec
operator|&
name|rhs
operator|)
decl_stmt|;
name|void
name|SetIndex
parameter_list|(
name|uint32_t
name|index
parameter_list|)
block|{
name|m_index
operator|=
name|index
expr_stmt|;
block|}
name|void
name|SetTID
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|)
block|{
name|m_tid
operator|=
name|tid
expr_stmt|;
block|}
name|void
name|SetName
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
name|m_name
operator|=
name|name
expr_stmt|;
block|}
name|void
name|SetQueueName
parameter_list|(
specifier|const
name|char
modifier|*
name|queue_name
parameter_list|)
block|{
name|m_queue_name
operator|=
name|queue_name
expr_stmt|;
block|}
name|uint32_t
name|GetIndex
argument_list|()
specifier|const
block|{
return|return
name|m_index
return|;
block|}
name|lldb
operator|::
name|tid_t
name|GetTID
argument_list|()
specifier|const
block|{
return|return
name|m_tid
return|;
block|}
specifier|const
name|char
operator|*
name|GetName
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|char
operator|*
name|GetQueueName
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|TIDMatches
argument_list|(
name|lldb
operator|::
name|tid_t
name|thread_id
argument_list|)
decl|const
block|{
if|if
condition|(
name|m_tid
operator|==
name|LLDB_INVALID_THREAD_ID
operator|||
name|thread_id
operator|==
name|LLDB_INVALID_THREAD_ID
condition|)
return|return
name|true
return|;
else|else
return|return
name|thread_id
operator|==
name|m_tid
return|;
block|}
name|bool
name|TIDMatches
argument_list|(
name|Thread
operator|&
name|thread
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IndexMatches
argument_list|(
name|uint32_t
name|index
argument_list|)
decl|const
block|{
if|if
condition|(
name|m_index
operator|==
name|UINT32_MAX
operator|||
name|index
operator|==
name|UINT32_MAX
condition|)
return|return
name|true
return|;
else|else
return|return
name|index
operator|==
name|m_index
return|;
block|}
name|bool
name|IndexMatches
argument_list|(
name|Thread
operator|&
name|thread
argument_list|)
decl|const
decl_stmt|;
name|bool
name|NameMatches
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
decl|const
block|{
if|if
condition|(
name|m_name
operator|.
name|empty
argument_list|()
condition|)
return|return
name|true
return|;
elseif|else
if|if
condition|(
name|name
operator|==
name|NULL
condition|)
return|return
name|false
return|;
else|else
return|return
name|m_name
operator|==
name|name
return|;
block|}
name|bool
name|NameMatches
argument_list|(
name|Thread
operator|&
name|thread
argument_list|)
decl|const
decl_stmt|;
name|bool
name|QueueNameMatches
argument_list|(
specifier|const
name|char
operator|*
name|queue_name
argument_list|)
decl|const
block|{
if|if
condition|(
name|m_queue_name
operator|.
name|empty
argument_list|()
condition|)
return|return
name|true
return|;
elseif|else
if|if
condition|(
name|queue_name
operator|==
name|NULL
condition|)
return|return
name|false
return|;
else|else
return|return
name|m_queue_name
operator|==
name|queue_name
return|;
block|}
name|bool
name|QueueNameMatches
argument_list|(
name|Thread
operator|&
name|thread
argument_list|)
decl|const
decl_stmt|;
name|bool
name|ThreadPassesBasicTests
argument_list|(
name|Thread
operator|&
name|thread
argument_list|)
decl|const
decl_stmt|;
name|bool
name|HasSpecification
argument_list|()
specifier|const
expr_stmt|;
name|void
name|GetDescription
argument_list|(
name|Stream
operator|*
name|s
argument_list|,
name|lldb
operator|::
name|DescriptionLevel
name|level
argument_list|)
decl|const
decl_stmt|;
name|protected
label|:
name|private
label|:
name|uint32_t
name|m_index
decl_stmt|;
name|lldb
operator|::
name|tid_t
name|m_tid
expr_stmt|;
name|std
operator|::
name|string
name|m_name
expr_stmt|;
name|std
operator|::
name|string
name|m_queue_name
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_ThreadSpec_h_
end_comment

end_unit

