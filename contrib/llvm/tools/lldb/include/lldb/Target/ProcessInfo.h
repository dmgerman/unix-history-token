begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ProcessInfo.h -------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_ProcessInfo_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_ProcessInfo_h_
end_define

begin_comment
comment|// LLDB headers
end_comment

begin_include
include|#
directive|include
file|"lldb/Core/ArchSpec.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/Args.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Utility/FileSpec.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|// ProcessInfo
comment|//
comment|// A base class for information for a process. This can be used to fill
comment|// out information for a process prior to launching it, or it can be
comment|// used for an instance of a process and can be filled in with the
comment|// existing values for that process.
comment|//----------------------------------------------------------------------
name|class
name|ProcessInfo
block|{
name|public
label|:
name|ProcessInfo
argument_list|()
expr_stmt|;
name|ProcessInfo
argument_list|(
argument|const char *name
argument_list|,
argument|const ArchSpec&arch
argument_list|,
argument|lldb::pid_t pid
argument_list|)
empty_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
specifier|const
name|char
operator|*
name|GetName
argument_list|()
specifier|const
expr_stmt|;
name|size_t
name|GetNameLength
argument_list|()
specifier|const
expr_stmt|;
name|FileSpec
modifier|&
name|GetExecutableFile
parameter_list|()
block|{
return|return
name|m_executable
return|;
block|}
name|void
name|SetExecutableFile
parameter_list|(
specifier|const
name|FileSpec
modifier|&
name|exe_file
parameter_list|,
name|bool
name|add_exe_file_as_first_arg
parameter_list|)
function_decl|;
specifier|const
name|FileSpec
operator|&
name|GetExecutableFile
argument_list|()
specifier|const
block|{
return|return
name|m_executable
return|;
block|}
name|uint32_t
name|GetUserID
argument_list|()
specifier|const
block|{
return|return
name|m_uid
return|;
block|}
name|uint32_t
name|GetGroupID
argument_list|()
specifier|const
block|{
return|return
name|m_gid
return|;
block|}
name|bool
name|UserIDIsValid
argument_list|()
specifier|const
block|{
return|return
name|m_uid
operator|!=
name|UINT32_MAX
return|;
block|}
name|bool
name|GroupIDIsValid
argument_list|()
specifier|const
block|{
return|return
name|m_gid
operator|!=
name|UINT32_MAX
return|;
block|}
name|void
name|SetUserID
parameter_list|(
name|uint32_t
name|uid
parameter_list|)
block|{
name|m_uid
operator|=
name|uid
expr_stmt|;
block|}
name|void
name|SetGroupID
parameter_list|(
name|uint32_t
name|gid
parameter_list|)
block|{
name|m_gid
operator|=
name|gid
expr_stmt|;
block|}
name|ArchSpec
modifier|&
name|GetArchitecture
parameter_list|()
block|{
return|return
name|m_arch
return|;
block|}
specifier|const
name|ArchSpec
operator|&
name|GetArchitecture
argument_list|()
specifier|const
block|{
return|return
name|m_arch
return|;
block|}
name|void
name|SetArchitecture
parameter_list|(
specifier|const
name|ArchSpec
modifier|&
name|arch
parameter_list|)
block|{
name|m_arch
operator|=
name|arch
expr_stmt|;
block|}
name|lldb
operator|::
name|pid_t
name|GetProcessID
argument_list|()
specifier|const
block|{
return|return
name|m_pid
return|;
block|}
name|void
name|SetProcessID
argument_list|(
name|lldb
operator|::
name|pid_t
name|pid
argument_list|)
block|{
name|m_pid
operator|=
name|pid
expr_stmt|;
block|}
name|bool
name|ProcessIDIsValid
argument_list|()
specifier|const
block|{
return|return
name|m_pid
operator|!=
name|LLDB_INVALID_PROCESS_ID
return|;
block|}
name|void
name|Dump
argument_list|(
name|Stream
operator|&
name|s
argument_list|,
name|Platform
operator|*
name|platform
argument_list|)
decl|const
decl_stmt|;
name|Args
modifier|&
name|GetArguments
parameter_list|()
block|{
return|return
name|m_arguments
return|;
block|}
specifier|const
name|Args
operator|&
name|GetArguments
argument_list|()
specifier|const
block|{
return|return
name|m_arguments
return|;
block|}
name|llvm
operator|::
name|StringRef
name|GetArg0
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetArg0
argument_list|(
name|llvm
operator|::
name|StringRef
name|arg
argument_list|)
decl_stmt|;
name|void
name|SetArguments
parameter_list|(
specifier|const
name|Args
modifier|&
name|args
parameter_list|,
name|bool
name|first_arg_is_executable
parameter_list|)
function_decl|;
name|void
name|SetArguments
parameter_list|(
name|char
specifier|const
modifier|*
modifier|*
name|argv
parameter_list|,
name|bool
name|first_arg_is_executable
parameter_list|)
function_decl|;
name|Args
modifier|&
name|GetEnvironmentEntries
parameter_list|()
block|{
return|return
name|m_environment
return|;
block|}
specifier|const
name|Args
operator|&
name|GetEnvironmentEntries
argument_list|()
specifier|const
block|{
return|return
name|m_environment
return|;
block|}
name|protected
label|:
name|FileSpec
name|m_executable
decl_stmt|;
name|std
operator|::
name|string
name|m_arg0
expr_stmt|;
comment|// argv[0] if supported. If empty, then use m_executable.
comment|// Not all process plug-ins support specifying an argv[0]
comment|// that differs from the resolved platform executable
comment|// (which is in m_executable)
name|Args
name|m_arguments
decl_stmt|;
comment|// All program arguments except argv[0]
name|Args
name|m_environment
decl_stmt|;
name|uint32_t
name|m_uid
decl_stmt|;
name|uint32_t
name|m_gid
decl_stmt|;
name|ArchSpec
name|m_arch
decl_stmt|;
name|lldb
operator|::
name|pid_t
name|m_pid
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef liblldb_ProcessInfo_h_
end_comment

end_unit

