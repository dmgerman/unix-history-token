begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Debug.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Debug_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Debug_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//------------------------------------------------------------------
comment|// Tells a thread what it needs to do when the process is resumed.
comment|//------------------------------------------------------------------
struct|struct
name|ResumeAction
block|{
name|lldb
operator|::
name|tid_t
name|tid
expr_stmt|;
comment|// The thread ID that this action applies to,
comment|// LLDB_INVALID_THREAD_ID for the default thread action
name|lldb
operator|::
name|StateType
name|state
expr_stmt|;
comment|// Valid values are eStateStopped/eStateSuspended,
comment|// eStateRunning, and eStateStepping.
name|int
name|signal
decl_stmt|;
comment|// When resuming this thread, resume it with this signal if this
comment|// value is> 0
block|}
struct|;
comment|//------------------------------------------------------------------
comment|// A class that contains instructions for all threads for
comment|// NativeProcessProtocol::Resume(). Each thread can either run, stay
comment|// suspended, or step when the process is resumed. We optionally
comment|// have the ability to also send a signal to the thread when the
comment|// action is run or step.
comment|//------------------------------------------------------------------
name|class
name|ResumeActionList
block|{
name|public
label|:
name|ResumeActionList
argument_list|()
operator|:
name|m_actions
argument_list|()
operator|,
name|m_signal_handled
argument_list|()
block|{}
name|ResumeActionList
argument_list|(
argument|lldb::StateType default_action
argument_list|,
argument|int signal
argument_list|)
operator|:
name|m_actions
argument_list|()
operator|,
name|m_signal_handled
argument_list|()
block|{
name|SetDefaultThreadActionIfNeeded
argument_list|(
name|default_action
argument_list|,
name|signal
argument_list|)
block|;   }
name|ResumeActionList
argument_list|(
argument|const ResumeAction *actions
argument_list|,
argument|size_t num_actions
argument_list|)
operator|:
name|m_actions
argument_list|()
operator|,
name|m_signal_handled
argument_list|()
block|{
if|if
condition|(
name|actions
operator|&&
name|num_actions
condition|)
block|{
name|m_actions
operator|.
name|assign
argument_list|(
name|actions
argument_list|,
name|actions
operator|+
name|num_actions
argument_list|)
expr_stmt|;
name|m_signal_handled
operator|.
name|assign
argument_list|(
name|num_actions
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
block|}
operator|~
name|ResumeActionList
argument_list|()
operator|=
expr|default
expr_stmt|;
name|bool
name|IsEmpty
argument_list|()
specifier|const
block|{
return|return
name|m_actions
operator|.
name|empty
argument_list|()
return|;
block|}
name|void
name|Append
parameter_list|(
specifier|const
name|ResumeAction
modifier|&
name|action
parameter_list|)
block|{
name|m_actions
operator|.
name|push_back
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|m_signal_handled
operator|.
name|push_back
argument_list|(
name|false
argument_list|)
expr_stmt|;
block|}
name|void
name|AppendAction
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|,
name|lldb
operator|::
name|StateType
name|state
argument_list|,
name|int
name|signal
operator|=
literal|0
argument_list|)
block|{
name|ResumeAction
name|action
init|=
block|{
name|tid
block|,
name|state
block|,
name|signal
block|}
decl_stmt|;
name|Append
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
name|void
name|AppendResumeAll
parameter_list|()
block|{
name|AppendAction
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|lldb
operator|::
name|eStateRunning
argument_list|)
expr_stmt|;
block|}
name|void
name|AppendSuspendAll
parameter_list|()
block|{
name|AppendAction
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|lldb
operator|::
name|eStateStopped
argument_list|)
expr_stmt|;
block|}
name|void
name|AppendStepAll
parameter_list|()
block|{
name|AppendAction
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|lldb
operator|::
name|eStateStepping
argument_list|)
expr_stmt|;
block|}
specifier|const
name|ResumeAction
modifier|*
name|GetActionForThread
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|,
name|bool
name|default_ok
argument_list|)
decl|const
block|{
specifier|const
name|size_t
name|num_actions
init|=
name|m_actions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_actions
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_actions
index|[
name|i
index|]
operator|.
name|tid
operator|==
name|tid
condition|)
return|return
operator|&
name|m_actions
index|[
name|i
index|]
return|;
block|}
if|if
condition|(
name|default_ok
operator|&&
name|tid
operator|!=
name|LLDB_INVALID_THREAD_ID
condition|)
return|return
name|GetActionForThread
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|false
argument_list|)
return|;
return|return
name|nullptr
return|;
block|}
name|size_t
name|NumActionsWithState
argument_list|(
name|lldb
operator|::
name|StateType
name|state
argument_list|)
decl|const
block|{
name|size_t
name|count
init|=
literal|0
decl_stmt|;
specifier|const
name|size_t
name|num_actions
init|=
name|m_actions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_actions
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_actions
index|[
name|i
index|]
operator|.
name|state
operator|==
name|state
condition|)
operator|++
name|count
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
name|bool
name|SetDefaultThreadActionIfNeeded
argument_list|(
name|lldb
operator|::
name|StateType
name|action
argument_list|,
name|int
name|signal
argument_list|)
block|{
if|if
condition|(
name|GetActionForThread
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|true
argument_list|)
operator|==
name|nullptr
condition|)
block|{
comment|// There isn't a default action so we do need to set it.
name|ResumeAction
name|default_action
init|=
block|{
name|LLDB_INVALID_THREAD_ID
block|,
name|action
block|,
name|signal
block|}
decl_stmt|;
name|m_actions
operator|.
name|push_back
argument_list|(
name|default_action
argument_list|)
expr_stmt|;
name|m_signal_handled
operator|.
name|push_back
argument_list|(
name|false
argument_list|)
expr_stmt|;
return|return
name|true
return|;
comment|// Return true as we did add the default action
block|}
return|return
name|false
return|;
block|}
name|void
name|SetSignalHandledForThread
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|)
decl|const
block|{
if|if
condition|(
name|tid
operator|!=
name|LLDB_INVALID_THREAD_ID
condition|)
block|{
specifier|const
name|size_t
name|num_actions
init|=
name|m_actions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_actions
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_actions
index|[
name|i
index|]
operator|.
name|tid
operator|==
name|tid
condition|)
name|m_signal_handled
index|[
name|i
index|]
operator|=
name|true
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|ResumeAction
operator|*
name|GetFirst
argument_list|()
specifier|const
block|{
return|return
name|m_actions
operator|.
name|data
argument_list|()
return|;
block|}
name|size_t
name|GetSize
argument_list|()
specifier|const
block|{
return|return
name|m_actions
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|m_actions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_signal_handled
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|protected
label|:
name|std
operator|::
name|vector
operator|<
name|ResumeAction
operator|>
name|m_actions
expr_stmt|;
name|mutable
name|std
operator|::
name|vector
operator|<
name|bool
operator|>
name|m_signal_handled
expr_stmt|;
block|}
empty_stmt|;
struct|struct
name|ThreadStopInfo
block|{
name|lldb
operator|::
name|StopReason
name|reason
expr_stmt|;
union|union
block|{
comment|// eStopReasonSignal
struct|struct
block|{
name|uint32_t
name|signo
decl_stmt|;
block|}
name|signal
struct|;
comment|// eStopReasonException
struct|struct
block|{
name|uint64_t
name|type
decl_stmt|;
name|uint32_t
name|data_count
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|data
index|[
literal|8
index|]
expr_stmt|;
block|}
name|exception
struct|;
block|}
name|details
union|;
block|}
struct|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_Debug_h_
end_comment

end_unit

