begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Debug.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Debug_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Debug_h_
end_define

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/StreamString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Mutex.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//------------------------------------------------------------------
comment|// Tells a thread what it needs to do when the process is resumed.
comment|//------------------------------------------------------------------
struct|struct
name|ResumeAction
block|{
name|lldb
operator|::
name|tid_t
name|tid
expr_stmt|;
comment|// The thread ID that this action applies to, LLDB_INVALID_THREAD_ID for the default thread action
name|lldb
operator|::
name|StateType
name|state
expr_stmt|;
comment|// Valid values are eStateStopped/eStateSuspended, eStateRunning, and eStateStepping.
name|int
name|signal
decl_stmt|;
comment|// When resuming this thread, resume it with this signal if this value is> 0
block|}
struct|;
comment|//------------------------------------------------------------------
comment|// A class that contains instructions for all threads for
comment|// NativeProcessProtocol::Resume(). Each thread can either run, stay
comment|// suspended, or step when the process is resumed. We optionally
comment|// have the ability to also send a signal to the thread when the
comment|// action is run or step.
comment|//------------------------------------------------------------------
name|class
name|ResumeActionList
block|{
name|public
label|:
name|ResumeActionList
argument_list|()
operator|:
name|m_actions
argument_list|()
operator|,
name|m_signal_handled
argument_list|()
block|{         }
name|ResumeActionList
argument_list|(
argument|lldb::StateType default_action
argument_list|,
argument|int signal
argument_list|)
operator|:
name|m_actions
argument_list|()
operator|,
name|m_signal_handled
argument_list|()
block|{
name|SetDefaultThreadActionIfNeeded
argument_list|(
name|default_action
argument_list|,
name|signal
argument_list|)
block|;         }
name|ResumeActionList
argument_list|(
argument|const ResumeAction *actions
argument_list|,
argument|size_t num_actions
argument_list|)
operator|:
name|m_actions
argument_list|()
operator|,
name|m_signal_handled
argument_list|()
block|{
if|if
condition|(
name|actions
operator|&&
name|num_actions
condition|)
block|{
name|m_actions
operator|.
name|assign
argument_list|(
name|actions
argument_list|,
name|actions
operator|+
name|num_actions
argument_list|)
expr_stmt|;
name|m_signal_handled
operator|.
name|assign
argument_list|(
name|num_actions
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
block|}
operator|~
name|ResumeActionList
argument_list|()
block|{         }
name|bool
name|IsEmpty
argument_list|()
specifier|const
block|{
return|return
name|m_actions
operator|.
name|empty
argument_list|()
return|;
block|}
name|void
name|Append
parameter_list|(
specifier|const
name|ResumeAction
modifier|&
name|action
parameter_list|)
block|{
name|m_actions
operator|.
name|push_back
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|m_signal_handled
operator|.
name|push_back
argument_list|(
name|false
argument_list|)
expr_stmt|;
block|}
name|void
name|AppendAction
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|,
name|lldb
operator|::
name|StateType
name|state
argument_list|,
name|int
name|signal
operator|=
literal|0
argument_list|)
block|{
name|ResumeAction
name|action
init|=
block|{
name|tid
block|,
name|state
block|,
name|signal
block|}
decl_stmt|;
name|Append
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
name|void
name|AppendResumeAll
parameter_list|()
block|{
name|AppendAction
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|lldb
operator|::
name|eStateRunning
argument_list|)
expr_stmt|;
block|}
name|void
name|AppendSuspendAll
parameter_list|()
block|{
name|AppendAction
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|lldb
operator|::
name|eStateStopped
argument_list|)
expr_stmt|;
block|}
name|void
name|AppendStepAll
parameter_list|()
block|{
name|AppendAction
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|lldb
operator|::
name|eStateStepping
argument_list|)
expr_stmt|;
block|}
specifier|const
name|ResumeAction
modifier|*
name|GetActionForThread
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|,
name|bool
name|default_ok
argument_list|)
decl|const
block|{
specifier|const
name|size_t
name|num_actions
init|=
name|m_actions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_actions
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_actions
index|[
name|i
index|]
operator|.
name|tid
operator|==
name|tid
condition|)
return|return
operator|&
name|m_actions
index|[
name|i
index|]
return|;
block|}
if|if
condition|(
name|default_ok
operator|&&
name|tid
operator|!=
name|LLDB_INVALID_THREAD_ID
condition|)
return|return
name|GetActionForThread
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|false
argument_list|)
return|;
return|return
name|NULL
return|;
block|}
name|size_t
name|NumActionsWithState
argument_list|(
name|lldb
operator|::
name|StateType
name|state
argument_list|)
decl|const
block|{
name|size_t
name|count
init|=
literal|0
decl_stmt|;
specifier|const
name|size_t
name|num_actions
init|=
name|m_actions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_actions
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_actions
index|[
name|i
index|]
operator|.
name|state
operator|==
name|state
condition|)
operator|++
name|count
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
name|bool
name|SetDefaultThreadActionIfNeeded
argument_list|(
name|lldb
operator|::
name|StateType
name|action
argument_list|,
name|int
name|signal
argument_list|)
block|{
if|if
condition|(
name|GetActionForThread
argument_list|(
name|LLDB_INVALID_THREAD_ID
argument_list|,
name|true
argument_list|)
operator|==
name|NULL
condition|)
block|{
comment|// There isn't a default action so we do need to set it.
name|ResumeAction
name|default_action
init|=
block|{
name|LLDB_INVALID_THREAD_ID
block|,
name|action
block|,
name|signal
block|}
decl_stmt|;
name|m_actions
operator|.
name|push_back
argument_list|(
name|default_action
argument_list|)
expr_stmt|;
name|m_signal_handled
operator|.
name|push_back
argument_list|(
name|false
argument_list|)
expr_stmt|;
return|return
name|true
return|;
comment|// Return true as we did add the default action
block|}
return|return
name|false
return|;
block|}
name|void
name|SetSignalHandledForThread
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|)
decl|const
block|{
if|if
condition|(
name|tid
operator|!=
name|LLDB_INVALID_THREAD_ID
condition|)
block|{
specifier|const
name|size_t
name|num_actions
init|=
name|m_actions
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_actions
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|m_actions
index|[
name|i
index|]
operator|.
name|tid
operator|==
name|tid
condition|)
name|m_signal_handled
index|[
name|i
index|]
operator|=
name|true
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|ResumeAction
operator|*
name|GetFirst
argument_list|()
specifier|const
block|{
return|return
name|m_actions
operator|.
name|data
argument_list|()
return|;
block|}
name|size_t
name|GetSize
argument_list|()
specifier|const
block|{
return|return
name|m_actions
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|Clear
parameter_list|()
block|{
name|m_actions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_signal_handled
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|protected
label|:
name|std
operator|::
name|vector
operator|<
name|ResumeAction
operator|>
name|m_actions
expr_stmt|;
name|mutable
name|std
operator|::
name|vector
operator|<
name|bool
operator|>
name|m_signal_handled
expr_stmt|;
block|}
empty_stmt|;
struct|struct
name|ThreadStopInfo
block|{
name|lldb
operator|::
name|StopReason
name|reason
expr_stmt|;
union|union
block|{
comment|// eStopTypeSignal
struct|struct
block|{
name|uint32_t
name|signo
decl_stmt|;
block|}
name|signal
struct|;
comment|// eStopTypeException
struct|struct
block|{
name|uint64_t
name|type
decl_stmt|;
name|uint32_t
name|data_count
decl_stmt|;
name|lldb
operator|::
name|addr_t
name|data
index|[
literal|2
index|]
expr_stmt|;
block|}
name|exception
struct|;
block|}
name|details
union|;
block|}
struct|;
comment|//------------------------------------------------------------------
comment|// NativeThreadProtocol
comment|//------------------------------------------------------------------
name|class
name|NativeThreadProtocol
block|{
name|public
label|:
name|NativeThreadProtocol
argument_list|(
argument|NativeProcessProtocol *process
argument_list|,
argument|lldb::tid_t tid
argument_list|)
block|:
name|m_process
argument_list|(
name|process
argument_list|)
operator|,
name|m_tid
argument_list|(
argument|tid
argument_list|)
block|{         }
name|virtual
operator|~
name|NativeThreadProtocol
argument_list|()
block|{         }
name|virtual
specifier|const
name|char
operator|*
name|GetName
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|lldb
operator|::
name|StateType
name|GetState
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|Error
name|ReadRegister
parameter_list|(
name|uint32_t
name|reg
parameter_list|,
name|RegisterValue
modifier|&
name|reg_value
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|WriteRegister
parameter_list|(
name|uint32_t
name|reg
parameter_list|,
specifier|const
name|RegisterValue
modifier|&
name|reg_value
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|SaveAllRegisters
argument_list|(
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_sp
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|RestoreAllRegisters
argument_list|(
name|lldb
operator|::
name|DataBufferSP
operator|&
name|data_sp
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|GetStopReason
parameter_list|(
name|ThreadStopInfo
modifier|&
name|stop_info
parameter_list|)
init|=
literal|0
function_decl|;
name|lldb
operator|::
name|tid_t
name|GetID
argument_list|()
specifier|const
block|{
return|return
name|m_tid
return|;
block|}
name|protected
label|:
name|NativeProcessProtocol
modifier|*
name|m_process
decl_stmt|;
name|lldb
operator|::
name|tid_t
name|m_tid
expr_stmt|;
block|}
empty_stmt|;
comment|//------------------------------------------------------------------
comment|// NativeProcessProtocol
comment|//------------------------------------------------------------------
name|class
name|NativeProcessProtocol
block|{
name|public
label|:
specifier|static
name|NativeProcessProtocol
modifier|*
name|CreateInstance
argument_list|(
name|lldb
operator|::
name|pid_t
name|pid
argument_list|)
decl_stmt|;
comment|// lldb_private::Host calls should be used to launch a process for debugging, and
comment|// then the process should be attached to. When attaching to a process
comment|// lldb_private::Host calls should be used to locate the process to attach to,
comment|// and then this function should be called.
name|NativeProcessProtocol
argument_list|(
argument|lldb::pid_t pid
argument_list|)
block|:
name|m_pid
argument_list|(
name|pid
argument_list|)
operator|,
name|m_threads
argument_list|()
operator|,
name|m_threads_mutex
argument_list|(
name|Mutex
operator|::
name|eMutexTypeRecursive
argument_list|)
operator|,
name|m_state
argument_list|(
name|lldb
operator|::
name|eStateInvalid
argument_list|)
operator|,
name|m_exit_status
argument_list|(
literal|0
argument_list|)
operator|,
name|m_exit_description
argument_list|()
block|{         }
name|public
operator|:
name|virtual
operator|~
name|NativeProcessProtocol
argument_list|()
block|{         }
name|virtual
name|Error
name|Resume
argument_list|(
specifier|const
name|ResumeActionList
operator|&
name|resume_actions
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|Error
name|Halt
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|Detach
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|Signal
parameter_list|(
name|int
name|signo
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|Kill
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|ReadMemory
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|void
operator|*
name|buf
argument_list|,
name|lldb
operator|::
name|addr_t
name|size
argument_list|,
name|lldb
operator|::
name|addr_t
operator|&
name|bytes_read
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|WriteMemory
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
specifier|const
name|void
operator|*
name|buf
argument_list|,
name|lldb
operator|::
name|addr_t
name|size
argument_list|,
name|lldb
operator|::
name|addr_t
operator|&
name|bytes_written
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|AllocateMemory
argument_list|(
name|lldb
operator|::
name|addr_t
name|size
argument_list|,
name|uint32_t
name|permissions
argument_list|,
name|lldb
operator|::
name|addr_t
operator|&
name|addr
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|DeallocateMemory
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|lldb
operator|::
name|addr_t
name|GetSharedLibraryInfoAddress
argument_list|()
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|IsAlive
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|size_t
name|UpdateThreads
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|GetArchitecture
parameter_list|(
name|ArchSpec
modifier|&
name|arch
parameter_list|)
init|=
literal|0
function_decl|;
comment|//----------------------------------------------------------------------
comment|// Breakpoint functions
comment|//----------------------------------------------------------------------
name|virtual
name|Error
name|SetBreakpoint
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|size_t
name|size
argument_list|,
name|bool
name|hardware
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|RemoveBreakpoint
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|size_t
name|size
argument_list|)
init|=
literal|0
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Watchpoint functions
comment|//----------------------------------------------------------------------
name|virtual
name|uint32_t
name|GetMaxWatchpoints
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|SetWatchpoint
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|size_t
name|size
argument_list|,
name|uint32_t
name|watch_flags
argument_list|,
name|bool
name|hardware
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|RemoveWatchpoint
argument_list|(
name|lldb
operator|::
name|addr_t
name|addr
argument_list|)
init|=
literal|0
decl_stmt|;
comment|//----------------------------------------------------------------------
comment|// Accessors
comment|//----------------------------------------------------------------------
name|lldb
operator|::
name|pid_t
name|GetID
argument_list|()
specifier|const
block|{
return|return
name|m_pid
return|;
block|}
name|lldb
operator|::
name|StateType
name|GetState
argument_list|()
specifier|const
block|{
return|return
name|m_state
return|;
block|}
name|bool
name|IsRunning
argument_list|()
specifier|const
block|{
return|return
name|m_state
operator|==
name|lldb
operator|::
name|eStateRunning
operator|||
name|IsStepping
argument_list|()
return|;
block|}
name|bool
name|IsStepping
argument_list|()
specifier|const
block|{
return|return
name|m_state
operator|==
name|lldb
operator|::
name|eStateStepping
return|;
block|}
name|bool
name|CanResume
argument_list|()
specifier|const
block|{
return|return
name|m_state
operator|==
name|lldb
operator|::
name|eStateStopped
return|;
block|}
name|void
name|SetState
argument_list|(
name|lldb
operator|::
name|StateType
name|state
argument_list|)
block|{
name|m_state
operator|=
name|state
expr_stmt|;
block|}
comment|//----------------------------------------------------------------------
comment|// Exit Status
comment|//----------------------------------------------------------------------
name|virtual
name|bool
name|GetExitStatus
parameter_list|(
name|int
modifier|*
name|status
parameter_list|)
block|{
if|if
condition|(
name|m_state
operator|==
name|lldb
operator|::
name|eStateExited
condition|)
block|{
operator|*
name|status
operator|=
name|m_exit_status
expr_stmt|;
return|return
name|true
return|;
block|}
operator|*
name|status
operator|=
literal|0
expr_stmt|;
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|SetExitStatus
parameter_list|(
name|int
name|status
parameter_list|,
specifier|const
name|char
modifier|*
name|exit_description
parameter_list|)
block|{
comment|// Exit status already set
if|if
condition|(
name|m_state
operator|==
name|lldb
operator|::
name|eStateExited
condition|)
return|return
name|false
return|;
name|m_state
operator|=
name|lldb
operator|::
name|eStateExited
expr_stmt|;
name|m_exit_status
operator|=
name|status
expr_stmt|;
if|if
condition|(
name|exit_description
operator|&&
name|exit_description
index|[
literal|0
index|]
condition|)
name|m_exit_description
operator|=
name|exit_description
expr_stmt|;
else|else
name|m_exit_description
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
comment|//----------------------------------------------------------------------
comment|// Access to threads
comment|//----------------------------------------------------------------------
name|lldb
operator|::
name|NativeThreadProtocolSP
name|GetThreadAtIndex
argument_list|(
argument|uint32_t idx
argument_list|)
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_threads_mutex
argument_list|)
block|;
if|if
condition|(
name|idx
operator|<
name|m_threads
operator|.
name|size
argument_list|()
condition|)
return|return
name|m_threads
index|[
name|idx
index|]
return|;
return|return
name|lldb
operator|::
name|NativeThreadProtocolSP
argument_list|()
return|;
block|}
name|lldb
operator|::
name|NativeThreadProtocolSP
name|GetThreadByID
argument_list|(
argument|lldb::tid_t tid
argument_list|)
block|{
name|Mutex
operator|::
name|Locker
name|locker
argument_list|(
name|m_threads_mutex
argument_list|)
block|;
for|for
control|(
name|auto
name|thread_sp
range|:
name|m_threads
control|)
block|{
if|if
condition|(
name|thread_sp
operator|->
name|GetID
argument_list|()
operator|==
name|tid
condition|)
return|return
name|thread_sp
return|;
block|}
return|return
name|lldb
operator|::
name|NativeThreadProtocolSP
argument_list|()
return|;
block|}
name|protected
label|:
name|lldb
operator|::
name|pid_t
name|m_pid
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|lldb
operator|::
name|NativeThreadProtocolSP
operator|>
name|m_threads
expr_stmt|;
name|mutable
name|Mutex
name|m_threads_mutex
decl_stmt|;
name|lldb
operator|::
name|StateType
name|m_state
expr_stmt|;
name|int
name|m_exit_status
decl_stmt|;
name|std
operator|::
name|string
name|m_exit_description
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// #ifndef liblldb_Debug_h_
end_comment

end_unit

