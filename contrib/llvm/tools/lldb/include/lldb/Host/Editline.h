begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Editline.h ----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Editline_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Editline_h_
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_WIN32
end_ifdef

begin_include
include|#
directive|include
file|"lldb/Host/windows/editlinewin.h"
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<histedit.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ConnectionFileDescriptor.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Condition.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/FileSpec.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Mutex.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Predicate.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|//----------------------------------------------------------------------
comment|/// @class Editline Editline.h "lldb/Host/Editline.h"
comment|/// @brief A class that encapsulates editline functionality.
comment|//----------------------------------------------------------------------
name|class
name|EditlineHistory
decl_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|EditlineHistory
operator|>
name|EditlineHistorySP
expr_stmt|;
name|class
name|Editline
block|{
name|public
label|:
typedef|typedef
name|LineStatus
function_decl|(
modifier|*
name|LineCompletedCallbackType
function_decl|)
parameter_list|(
name|Editline
modifier|*
name|editline
parameter_list|,
name|StringList
modifier|&
name|lines
parameter_list|,
name|uint32_t
name|line_idx
parameter_list|,
name|Error
modifier|&
name|error
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
typedef|typedef
name|int
function_decl|(
modifier|*
name|CompleteCallbackType
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|current_line
parameter_list|,
specifier|const
name|char
modifier|*
name|cursor
parameter_list|,
specifier|const
name|char
modifier|*
name|last_char
parameter_list|,
name|int
name|skip_first_n_matches
parameter_list|,
name|int
name|max_matches
parameter_list|,
name|StringList
modifier|&
name|matches
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
function_decl|;
typedef|typedef
name|int
argument_list|(
operator|*
name|GetCharCallbackType
argument_list|)
argument_list|(
operator|::
name|EditLine
operator|*
argument_list|,
name|char
operator|*
name|c
argument_list|)
expr_stmt|;
name|Editline
argument_list|(
argument|const char *prog
argument_list|,
comment|// Used for the history file and for editrc program name
argument|const char *prompt
argument_list|,
argument|bool configure_for_multiline
argument_list|,
argument|FILE *fin
argument_list|,
argument|FILE *fout
argument_list|,
argument|FILE *ferr
argument_list|)
empty_stmt|;
operator|~
name|Editline
argument_list|()
expr_stmt|;
name|Error
name|GetLine
argument_list|(
name|std
operator|::
name|string
operator|&
name|line
argument_list|,
name|bool
operator|&
name|interrupted
argument_list|)
decl_stmt|;
name|Error
name|GetLines
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|end_line
argument_list|,
name|StringList
operator|&
name|lines
argument_list|,
name|bool
operator|&
name|interrupted
argument_list|)
decl_stmt|;
name|bool
name|LoadHistory
parameter_list|()
function_decl|;
name|bool
name|SaveHistory
parameter_list|()
function_decl|;
name|FILE
modifier|*
name|GetInputFile
parameter_list|()
function_decl|;
name|FILE
modifier|*
name|GetOutputFile
parameter_list|()
function_decl|;
name|FILE
modifier|*
name|GetErrorFile
parameter_list|()
function_decl|;
name|bool
name|GettingLine
argument_list|()
specifier|const
block|{
return|return
name|m_getting_line
return|;
block|}
name|void
name|Hide
parameter_list|()
function_decl|;
name|void
name|Refresh
parameter_list|()
function_decl|;
name|bool
name|Interrupt
parameter_list|()
function_decl|;
name|void
name|SetAutoCompleteCallback
parameter_list|(
name|CompleteCallbackType
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
block|{
name|m_completion_callback
operator|=
name|callback
expr_stmt|;
name|m_completion_callback_baton
operator|=
name|baton
expr_stmt|;
block|}
name|void
name|SetLineCompleteCallback
parameter_list|(
name|LineCompletedCallbackType
name|callback
parameter_list|,
name|void
modifier|*
name|baton
parameter_list|)
block|{
name|m_line_complete_callback
operator|=
name|callback
expr_stmt|;
name|m_line_complete_callback_baton
operator|=
name|baton
expr_stmt|;
block|}
name|size_t
name|Push
parameter_list|(
specifier|const
name|char
modifier|*
name|bytes
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
specifier|static
name|int
name|GetCharFromInputFileCallback
argument_list|(
operator|::
name|EditLine
operator|*
name|e
argument_list|,
name|char
operator|*
name|c
argument_list|)
decl_stmt|;
name|void
name|SetGetCharCallback
parameter_list|(
name|GetCharCallbackType
name|callback
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetPrompt
parameter_list|()
function_decl|;
name|void
name|SetPrompt
parameter_list|(
specifier|const
name|char
modifier|*
name|p
parameter_list|)
function_decl|;
name|void
name|ShowLineNumbers
parameter_list|(
name|bool
name|enable
parameter_list|,
name|uint32_t
name|line_offset
parameter_list|)
block|{
name|m_prompt_with_line_numbers
operator|=
name|enable
expr_stmt|;
name|m_line_offset
operator|=
name|line_offset
expr_stmt|;
block|}
name|private
label|:
name|Error
name|PrivateGetLine
argument_list|(
name|std
operator|::
name|string
operator|&
name|line
argument_list|)
decl_stmt|;
name|unsigned
name|char
name|HandleCompletion
parameter_list|(
name|int
name|ch
parameter_list|)
function_decl|;
specifier|static
name|unsigned
name|char
name|CallbackEditPrevLine
argument_list|(
operator|::
name|EditLine
operator|*
name|e
argument_list|,
name|int
name|ch
argument_list|)
decl_stmt|;
specifier|static
name|unsigned
name|char
name|CallbackEditNextLine
argument_list|(
operator|::
name|EditLine
operator|*
name|e
argument_list|,
name|int
name|ch
argument_list|)
decl_stmt|;
specifier|static
name|unsigned
name|char
name|CallbackComplete
argument_list|(
operator|::
name|EditLine
operator|*
name|e
argument_list|,
name|int
name|ch
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetPromptCallback
argument_list|(
operator|::
name|EditLine
operator|*
name|e
argument_list|)
decl_stmt|;
specifier|static
name|Editline
modifier|*
name|GetClientData
argument_list|(
operator|::
name|EditLine
operator|*
name|e
argument_list|)
decl_stmt|;
specifier|static
name|FILE
modifier|*
name|GetFilePointer
argument_list|(
operator|::
name|EditLine
operator|*
name|e
argument_list|,
name|int
name|fd
argument_list|)
decl_stmt|;
name|enum
name|class
name|Command
block|{
name|None
operator|=
literal|0
operator|,
name|EditPrevLine
operator|,
name|EditNextLine
operator|,
block|}
empty_stmt|;
operator|::
name|EditLine
operator|*
name|m_editline
expr_stmt|;
name|EditlineHistorySP
name|m_history_sp
decl_stmt|;
name|std
operator|::
name|string
name|m_prompt
expr_stmt|;
name|std
operator|::
name|string
name|m_lines_prompt
expr_stmt|;
name|lldb_private
operator|::
name|Predicate
operator|<
name|bool
operator|>
name|m_getting_char
expr_stmt|;
name|CompleteCallbackType
name|m_completion_callback
decl_stmt|;
name|void
modifier|*
name|m_completion_callback_baton
decl_stmt|;
name|LineCompletedCallbackType
name|m_line_complete_callback
decl_stmt|;
name|void
modifier|*
name|m_line_complete_callback_baton
decl_stmt|;
name|Command
name|m_lines_command
decl_stmt|;
name|uint32_t
name|m_line_offset
decl_stmt|;
name|uint32_t
name|m_lines_curr_line
decl_stmt|;
name|uint32_t
name|m_lines_max_line
decl_stmt|;
name|ConnectionFileDescriptor
name|m_file
decl_stmt|;
name|bool
name|m_prompt_with_line_numbers
decl_stmt|;
name|bool
name|m_getting_line
decl_stmt|;
name|bool
name|m_got_eof
decl_stmt|;
comment|// Set to true when we detect EOF
name|bool
name|m_interrupted
decl_stmt|;
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|Editline
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// #if defined(__cplusplus)
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_Host_h_
end_comment

end_unit

