begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Socket.h ------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Host_Socket_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Host_Socket_h_
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/IOObject.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Predicate.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/SocketAddress.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|_WIN32
end_ifdef

begin_include
include|#
directive|include
file|"lldb/Host/windows/windows.h"
end_include

begin_include
include|#
directive|include
file|<winsock2.h>
end_include

begin_include
include|#
directive|include
file|<ws2tcpip.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|StringRef
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|lldb_private
block|{
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
typedef|typedef
name|SOCKET
name|NativeSocket
typedef|;
else|#
directive|else
typedef|typedef
name|int
name|NativeSocket
typedef|;
endif|#
directive|endif
name|class
name|Socket
range|:
name|public
name|IOObject
block|{
name|public
operator|:
typedef|typedef
enum|enum
block|{
name|ProtocolTcp
block|,
name|ProtocolUdp
block|,
name|ProtocolUnixDomain
decl|}
name|SocketProtocol
empty_stmt|;
specifier|static
specifier|const
name|NativeSocket
name|kInvalidSocketValue
block|;
name|Socket
argument_list|(
argument|NativeSocket socket
argument_list|,
argument|SocketProtocol protocol
argument_list|,
argument|bool should_close
argument_list|)
empty_stmt|;
operator|~
name|Socket
argument_list|()
expr_stmt|;
comment|// Initialize a Tcp Socket object in listening mode.  listen and accept are implemented
comment|// separately because the caller may wish to manipulate or query the socket after it is
comment|// initialized, but before entering a blocking accept.
specifier|static
name|Error
name|TcpListen
argument_list|(
name|llvm
operator|::
name|StringRef
name|host_and_port
argument_list|,
name|Socket
operator|*
operator|&
name|socket
argument_list|,
name|Predicate
operator|<
name|uint16_t
operator|>
operator|*
name|predicate
argument_list|)
block|;
specifier|static
name|Error
name|TcpConnect
argument_list|(
name|llvm
operator|::
name|StringRef
name|host_and_port
argument_list|,
name|Socket
operator|*
operator|&
name|socket
argument_list|)
block|;
specifier|static
name|Error
name|UdpConnect
argument_list|(
name|llvm
operator|::
name|StringRef
name|host_and_port
argument_list|,
name|Socket
operator|*
operator|&
name|send_socket
argument_list|,
name|Socket
operator|*
operator|&
name|recv_socket
argument_list|)
block|;
specifier|static
name|Error
name|UnixDomainConnect
argument_list|(
name|llvm
operator|::
name|StringRef
name|host_and_port
argument_list|,
name|Socket
operator|*
operator|&
name|socket
argument_list|)
block|;
specifier|static
name|Error
name|UnixDomainAccept
argument_list|(
name|llvm
operator|::
name|StringRef
name|host_and_port
argument_list|,
name|Socket
operator|*
operator|&
name|socket
argument_list|)
block|;
comment|// Blocks on a listening socket until a connection is received.  This method assumes that
comment|// |this->m_socket| is a listening socket, created via either TcpListen() or via the native
comment|// constructor that takes a NativeSocket, which itself was created via a call to |listen()|
name|Error
name|BlockingAccept
argument_list|(
name|llvm
operator|::
name|StringRef
name|host_and_port
argument_list|,
name|Socket
operator|*
operator|&
name|socket
argument_list|)
block|;
name|int
name|GetOption
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|option_name
parameter_list|,
name|int
modifier|&
name|option_value
parameter_list|)
function_decl|;
name|int
name|SetOption
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|option_name
parameter_list|,
name|int
name|option_value
parameter_list|)
function_decl|;
specifier|static
name|uint16_t
name|GetPortNumber
parameter_list|(
specifier|const
name|NativeSocket
modifier|&
name|socket
parameter_list|)
function_decl|;
name|uint16_t
name|GetPortNumber
argument_list|()
decl|const
empty_stmt|;
name|NativeSocket
name|GetNativeSocket
argument_list|()
decl|const
block|{
return|return
name|m_socket
return|;
block|}
name|SocketProtocol
name|GetSocketProtocol
argument_list|()
decl|const
block|{
return|return
name|m_protocol
return|;
block|}
name|virtual
name|Error
name|Read
argument_list|(
name|void
operator|*
name|buf
argument_list|,
name|size_t
operator|&
name|num_bytes
argument_list|)
empty_stmt|;
name|virtual
name|Error
name|Write
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
modifier|&
name|num_bytes
parameter_list|)
function_decl|;
name|virtual
name|Error
name|PreDisconnect
parameter_list|()
function_decl|;
name|virtual
name|Error
name|Close
parameter_list|()
function_decl|;
name|virtual
name|bool
name|IsValid
argument_list|()
decl|const
block|{
return|return
name|m_socket
operator|!=
name|kInvalidSocketValue
return|;
block|}
name|virtual
name|WaitableHandle
name|GetWaitableHandle
argument_list|()
empty_stmt|;
name|protected
label|:
specifier|static
name|bool
name|DecodeHostAndPort
argument_list|(
name|llvm
operator|::
name|StringRef
name|host_and_port
argument_list|,
name|std
operator|::
name|string
operator|&
name|host_str
argument_list|,
name|std
operator|::
name|string
operator|&
name|port_str
argument_list|,
name|int32_t
operator|&
name|port
argument_list|,
name|Error
operator|*
name|error_ptr
argument_list|)
block|;
name|SocketProtocol
name|m_protocol
block|;
name|NativeSocket
name|m_socket
block|;
name|SocketAddress
name|m_udp_send_sockaddr
block|;
comment|// Send address used for UDP connections.
block|}
enum|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

