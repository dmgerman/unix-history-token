begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- PipeBase.h -----------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Host_PipeBase_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Host_PipeBase_h_
end_define

begin_include
include|#
directive|include
file|<chrono>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|PipeBase
block|{
name|public
label|:
name|virtual
operator|~
name|PipeBase
argument_list|()
expr_stmt|;
name|virtual
name|Error
name|CreateNew
parameter_list|(
name|bool
name|child_process_inherit
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|CreateNew
argument_list|(
name|llvm
operator|::
name|StringRef
name|name
argument_list|,
name|bool
name|child_process_inherit
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|CreateWithUniqueName
argument_list|(
name|llvm
operator|::
name|StringRef
name|prefix
argument_list|,
name|bool
name|child_process_inherit
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|char
operator|>
operator|&
name|name
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|OpenAsReader
argument_list|(
name|llvm
operator|::
name|StringRef
name|name
argument_list|,
name|bool
name|child_process_inherit
argument_list|)
init|=
literal|0
decl_stmt|;
name|Error
name|OpenAsWriter
argument_list|(
name|llvm
operator|::
name|StringRef
name|name
argument_list|,
name|bool
name|child_process_inherit
argument_list|)
decl_stmt|;
name|virtual
name|Error
name|OpenAsWriterWithTimeout
argument_list|(
name|llvm
operator|::
name|StringRef
name|name
argument_list|,
name|bool
name|child_process_inherit
argument_list|,
specifier|const
name|std
operator|::
name|chrono
operator|::
name|microseconds
operator|&
name|timeout
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|bool
name|CanRead
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|bool
name|CanWrite
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|GetReadFileDescriptor
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|GetWriteFileDescriptor
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|virtual
name|int
name|ReleaseReadFileDescriptor
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|int
name|ReleaseWriteFileDescriptor
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|CloseReadFileDescriptor
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|CloseWriteFileDescriptor
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Close both descriptors
name|virtual
name|void
name|Close
parameter_list|()
init|=
literal|0
function_decl|;
comment|// Delete named pipe.
name|virtual
name|Error
name|Delete
argument_list|(
name|llvm
operator|::
name|StringRef
name|name
argument_list|)
init|=
literal|0
decl_stmt|;
name|virtual
name|Error
name|Write
parameter_list|(
specifier|const
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
modifier|&
name|bytes_written
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|ReadWithTimeout
argument_list|(
name|void
operator|*
name|buf
argument_list|,
name|size_t
name|size
argument_list|,
specifier|const
name|std
operator|::
name|chrono
operator|::
name|microseconds
operator|&
name|timeout
argument_list|,
name|size_t
operator|&
name|bytes_read
argument_list|)
init|=
literal|0
decl_stmt|;
name|Error
name|Read
parameter_list|(
name|void
modifier|*
name|buf
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
modifier|&
name|bytes_read
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

