begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LockFileBase.h ------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_Host_LockFileBase_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_Host_LockFileBase_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Utility/Error.h"
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|LockFileBase
block|{
name|public
label|:
name|virtual
operator|~
name|LockFileBase
argument_list|()
operator|=
expr|default
expr_stmt|;
name|bool
name|IsLocked
argument_list|()
specifier|const
expr_stmt|;
name|Error
name|WriteLock
parameter_list|(
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
function_decl|;
name|Error
name|TryWriteLock
parameter_list|(
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
function_decl|;
name|Error
name|ReadLock
parameter_list|(
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
function_decl|;
name|Error
name|TryReadLock
parameter_list|(
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
function_decl|;
name|Error
name|Unlock
parameter_list|()
function_decl|;
name|protected
label|:
name|using
name|Locker
init|=
name|std
operator|::
name|function
operator|<
name|Error
argument_list|(
specifier|const
name|uint64_t
argument_list|,
specifier|const
name|uint64_t
argument_list|)
operator|>
decl_stmt|;
name|LockFileBase
argument_list|(
argument|int fd
argument_list|)
empty_stmt|;
name|virtual
name|bool
name|IsValidFile
argument_list|()
specifier|const
expr_stmt|;
name|virtual
name|Error
name|DoWriteLock
parameter_list|(
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|DoTryWriteLock
parameter_list|(
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|DoReadLock
parameter_list|(
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|DoTryReadLock
parameter_list|(
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|Error
name|DoUnlock
parameter_list|()
init|=
literal|0
function_decl|;
name|Error
name|DoLock
parameter_list|(
specifier|const
name|Locker
modifier|&
name|locker
parameter_list|,
specifier|const
name|uint64_t
name|start
parameter_list|,
specifier|const
name|uint64_t
name|len
parameter_list|)
function_decl|;
name|int
name|m_fd
decl_stmt|;
comment|// not owned.
name|bool
name|m_locked
decl_stmt|;
name|uint64_t
name|m_start
decl_stmt|;
name|uint64_t
name|m_len
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

