begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- IOChannel.h ---------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_IOChannel_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_IOChannel_h_
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<queue>
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__FreeBSD__
argument_list|)
end_if

begin_include
include|#
directive|include
file|<readline/readline.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<editline/readline.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<histedit.h>
end_include

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_include
include|#
directive|include
file|"Driver.h"
end_include

begin_decl_stmt
name|class
name|IOChannel
range|:
name|public
name|lldb
operator|::
name|SBBroadcaster
block|{
name|public
operator|:
expr|enum
block|{
name|eBroadcastBitHasUserInput
operator|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|eBroadcastBitUserInterrupt
operator|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|eBroadcastBitThreadShouldExit
operator|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|eBroadcastBitThreadDidExit
operator|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|eBroadcastBitThreadDidStart
operator|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
name|eBroadcastBitsSTDOUT
operator|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
name|eBroadcastBitsSTDERR
operator|=
operator|(
literal|1
operator|<<
literal|6
operator|)
block|,
name|eBroadcastBitsSTDIN
operator|=
operator|(
literal|1
operator|<<
literal|7
operator|)
block|,
name|eAllEventBits
operator|=
literal|0xffffffff
block|}
block|;          enum
name|LibeditGetInputResult
block|{
name|eLibeditGetInputEOF
operator|=
literal|0
block|,
name|eLibeditGetInputValid
operator|=
literal|1
block|,
name|eLibeditGetInputEmpty
operator|=
literal|2
block|,
name|eLibeditGetInputResultError
operator|=
literal|4
block|,
name|eLibeditGetInputResultUnknown
operator|=
literal|0xffffffff
block|}
block|;
name|IOChannel
argument_list|(
name|FILE
operator|*
name|editline_in
argument_list|,
name|FILE
operator|*
name|editline_out
argument_list|,
name|FILE
operator|*
name|out
argument_list|,
name|FILE
operator|*
name|err
argument_list|,
name|Driver
operator|*
name|driver
operator|=
name|NULL
argument_list|)
block|;
name|virtual
operator|~
name|IOChannel
argument_list|()
block|;
name|bool
name|Start
argument_list|()
block|;
name|bool
name|Stop
argument_list|()
block|;
specifier|static
name|void
operator|*
name|IOReadThread
argument_list|(
name|void
operator|*
argument_list|)
block|;
name|void
name|Run
argument_list|()
block|;
name|void
name|OutWrite
argument_list|(
argument|const char *buffer
argument_list|,
argument|size_t len
argument_list|,
argument|bool asynchronous
argument_list|)
block|;
name|void
name|ErrWrite
argument_list|(
argument|const char *buffer
argument_list|,
argument|size_t len
argument_list|,
argument|bool asynchronous
argument_list|)
block|;
name|LibeditGetInputResult
name|LibeditGetInput
argument_list|(
name|std
operator|::
name|string
operator|&
argument_list|)
block|;
specifier|static
name|void
name|LibeditOutputBytesReceived
argument_list|(
argument|void *baton
argument_list|,
argument|const void *src
argument_list|,
argument|size_t src_len
argument_list|)
block|;
name|void
name|SetPrompt
argument_list|()
block|;
name|void
name|RefreshPrompt
argument_list|()
block|;
name|void
name|AddCommandToQueue
argument_list|(
specifier|const
name|char
operator|*
name|command
argument_list|)
block|;
name|bool
name|GetCommandFromQueue
argument_list|(
name|std
operator|::
name|string
operator|&
name|cmd
argument_list|)
block|;
name|int
name|CommandQueueSize
argument_list|()
specifier|const
block|;
name|void
name|ClearCommandQueue
argument_list|()
block|;
name|bool
name|CommandQueueIsEmpty
argument_list|()
specifier|const
block|;
specifier|const
name|char
operator|*
name|GetPrompt
argument_list|()
block|;
name|bool
name|EditLineHasCharacters
argument_list|()
block|;
name|void
name|EraseCharsBeforeCursor
argument_list|()
block|;
specifier|static
name|unsigned
name|char
name|ElCompletionFn
argument_list|(
argument|EditLine *e
argument_list|,
argument|int ch
argument_list|)
block|;
name|void
name|ElResize
argument_list|()
block|;
name|protected
operator|:
name|bool
name|IsGettingCommand
argument_list|()
specifier|const
block|;
name|void
name|SetGettingCommand
argument_list|(
argument|bool new_value
argument_list|)
block|;
name|private
operator|:
name|pthread_mutex_t
name|m_output_mutex
block|;     struct
name|timeval
name|m_enter_elgets_time
block|;
name|Driver
operator|*
name|m_driver
block|;
name|lldb
operator|::
name|thread_t
name|m_read_thread
block|;
name|bool
name|m_read_thread_should_exit
block|;
name|FILE
operator|*
name|m_out_file
block|;
name|FILE
operator|*
name|m_err_file
block|;
name|std
operator|::
name|queue
operator|<
name|std
operator|::
name|string
operator|>
name|m_command_queue
block|;
specifier|const
name|char
operator|*
name|m_completion_key
block|;
name|EditLine
operator|*
name|m_edit_line
block|;
name|History
operator|*
name|m_history
block|;
name|HistEvent
name|m_history_event
block|;
name|bool
name|m_getting_command
block|;
name|bool
name|m_expecting_prompt
block|;
name|std
operator|::
name|string
name|m_prompt_str
block|;
comment|// for accumlating the prompt as it gets written out by editline
name|bool
name|m_refresh_request_pending
block|;
name|void
name|HistorySaveLoad
argument_list|(
argument|bool save
argument_list|)
block|;
name|unsigned
name|char
name|HandleCompletion
argument_list|(
argument|EditLine *e
argument_list|,
argument|int ch
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|IOLocker
block|{
name|public
label|:
name|IOLocker
argument_list|(
name|pthread_mutex_t
operator|&
name|mutex
argument_list|)
expr_stmt|;
operator|~
name|IOLocker
argument_list|()
expr_stmt|;
name|protected
label|:
name|pthread_mutex_t
modifier|*
name|m_mutex_ptr
decl_stmt|;
name|private
label|:
name|IOLocker
argument_list|(
specifier|const
name|IOLocker
operator|&
argument_list|)
expr_stmt|;
specifier|const
name|IOLocker
modifier|&
name|operator
init|=
operator|(
specifier|const
name|IOLocker
operator|&
operator|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_IOChannel_h_
end_comment

end_unit

