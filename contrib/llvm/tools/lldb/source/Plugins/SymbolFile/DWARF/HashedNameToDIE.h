begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- HashedNameToDIE.h ---------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SymbolFileDWARF_HashedNameToDIE_h_
end_ifndef

begin_define
define|#
directive|define
name|SymbolFileDWARF_HashedNameToDIE_h_
end_define

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-defines.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/dwarf.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/RegularExpression.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/MappedHash.h"
end_include

begin_include
include|#
directive|include
file|"DWARFDefines.h"
end_include

begin_include
include|#
directive|include
file|"DWARFFormValue.h"
end_include

begin_include
include|#
directive|include
file|"NameToDIE.h"
end_include

begin_decl_stmt
name|class
name|SymbolFileDWARF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFCompileUnit
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugInfoEntry
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFMappedHash
block|{
name|public
label|:
enum|enum
name|AtomType
enum|:
name|uint16_t
block|{
name|eAtomTypeNULL
init|=
literal|0u
block|,
name|eAtomTypeDIEOffset
init|=
literal|1u
block|,
comment|// DIE offset, check form for encoding
name|eAtomTypeCUOffset
init|=
literal|2u
block|,
comment|// DIE offset of the compiler unit header that contains the item in question
name|eAtomTypeTag
init|=
literal|3u
block|,
comment|// DW_TAG_xxx value, should be encoded as DW_FORM_data1 (if no tags exceed 255) or DW_FORM_data2
name|eAtomTypeNameFlags
init|=
literal|4u
block|,
comment|// Flags from enum NameFlags
name|eAtomTypeTypeFlags
init|=
literal|5u
block|,
comment|// Flags from enum TypeFlags,
name|eAtomTypeQualNameHash
init|=
literal|6u
comment|// A 32 bit hash of the full qualified name (since all hash entries are basename only)
comment|// For example a type like "std::vector<int>::iterator" would have a name of "iterator"
comment|// and a 32 bit hash for "std::vector<int>::iterator" to allow us to not have to pull
comment|// in debug info for a type when we know the fully qualified name.
block|}
enum|;
comment|// Bit definitions for the eAtomTypeTypeFlags flags
enum|enum
name|TypeFlags
block|{
comment|// Always set for C++, only set for ObjC if this is the
comment|// @implementation for class
name|eTypeFlagClassIsImplementation
init|=
operator|(
literal|1u
operator|<<
literal|1
operator|)
block|}
enum|;
struct|struct
name|DIEInfo
block|{
name|dw_offset_t
name|cu_offset
decl_stmt|;
name|dw_offset_t
name|offset
decl_stmt|;
comment|// The DIE offset
name|dw_tag_t
name|tag
decl_stmt|;
name|uint32_t
name|type_flags
decl_stmt|;
comment|// Any flags for this DIEInfo
name|uint32_t
name|qualified_name_hash
decl_stmt|;
comment|// A 32 bit hash of the fully qualified name
name|DIEInfo
argument_list|()
expr_stmt|;
name|DIEInfo
argument_list|(
argument|dw_offset_t c
argument_list|,
argument|dw_offset_t o
argument_list|,
argument|dw_tag_t t
argument_list|,
argument|uint32_t f
argument_list|,
argument|uint32_t h
argument_list|)
empty_stmt|;
block|}
struct|;
struct|struct
name|Atom
block|{
name|AtomType
name|type
decl_stmt|;
name|dw_form_t
name|form
decl_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|DIEInfo
operator|>
name|DIEInfoArray
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Atom
operator|>
name|AtomArray
expr_stmt|;
name|class
name|Prologue
block|{
name|public
label|:
name|Prologue
argument_list|(
argument|dw_offset_t _die_base_offset =
literal|0
argument_list|)
empty_stmt|;
name|void
name|ClearAtoms
parameter_list|()
function_decl|;
name|bool
name|ContainsAtom
argument_list|(
name|AtomType
name|atom_type
argument_list|)
decl|const
decl_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|void
name|AppendAtom
parameter_list|(
name|AtomType
name|type
parameter_list|,
name|dw_form_t
name|form
parameter_list|)
function_decl|;
name|lldb
operator|::
name|offset_t
name|Read
argument_list|(
argument|const lldb_private::DataExtractor&data
argument_list|,
argument|lldb::offset_t offset
argument_list|)
expr_stmt|;
name|size_t
name|GetByteSize
argument_list|()
specifier|const
expr_stmt|;
name|size_t
name|GetMinimumHashDataByteSize
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|HashDataHasFixedByteSize
argument_list|()
specifier|const
expr_stmt|;
comment|// DIE offset base so die offsets in hash_data can be CU relative
name|dw_offset_t
name|die_base_offset
decl_stmt|;
name|AtomArray
name|atoms
decl_stmt|;
name|uint32_t
name|atom_mask
decl_stmt|;
name|size_t
name|min_hash_data_byte_size
decl_stmt|;
name|bool
name|hash_data_has_fixed_byte_size
decl_stmt|;
block|}
empty_stmt|;
name|class
name|Header
range|:
name|public
name|MappedHash
operator|::
name|Header
operator|<
name|Prologue
operator|>
block|{
name|public
operator|:
name|size_t
name|GetByteSize
argument_list|(
argument|const HeaderData&header_data
argument_list|)
name|override
block|;
name|lldb
operator|::
name|offset_t
name|Read
argument_list|(
argument|lldb_private::DataExtractor&data
argument_list|,
argument|lldb::offset_t offset
argument_list|)
name|override
block|;
name|bool
name|Read
argument_list|(
argument|const lldb_private::DWARFDataExtractor&data
argument_list|,
argument|lldb::offset_t *offset_ptr
argument_list|,
argument|DIEInfo&hash_data
argument_list|)
specifier|const
block|;
name|void
name|Dump
argument_list|(
argument|lldb_private::Stream& strm
argument_list|,
argument|const DIEInfo&hash_data
argument_list|)
specifier|const
block|;     }
decl_stmt|;
comment|// A class for reading and using a saved hash table from a block of data
comment|// in memory
name|class
name|MemoryTable
range|:
name|public
name|MappedHash
operator|::
name|MemoryTable
operator|<
name|uint32_t
decl_stmt|,
name|DWARFMappedHash
decl|::
name|Header
decl_stmt|,
name|DIEInfoArray
decl|>
block|{
name|public
label|:
name|MemoryTable
argument_list|(
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|table_data
argument_list|,
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|string_table
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|GetStringForKeyType
argument_list|(
name|KeyType
name|key
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|ReadHashData
argument_list|(
name|uint32_t
name|hash_data_offset
argument_list|,
name|HashData
operator|&
name|hash_data
argument_list|)
decl|const
name|override
decl_stmt|;
name|size_t
name|AppendAllDIEsThatMatchingRegex
argument_list|(
specifier|const
name|lldb_private
operator|::
name|RegularExpression
operator|&
name|regex
argument_list|,
name|DIEInfoArray
operator|&
name|die_info_array
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|AppendAllDIEsInRange
argument_list|(
specifier|const
name|uint32_t
name|die_offset_start
argument_list|,
specifier|const
name|uint32_t
name|die_offset_end
argument_list|,
name|DIEInfoArray
operator|&
name|die_info_array
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|FindByName
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|)
function_decl|;
name|size_t
name|FindByNameAndTag
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|dw_tag_t
name|tag
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|)
function_decl|;
name|size_t
name|FindByNameAndTagAndQualifiedNameHash
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|dw_tag_t
name|tag
parameter_list|,
specifier|const
name|uint32_t
name|qualified_name_hash
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|)
function_decl|;
name|size_t
name|FindCompleteObjCClassByName
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|,
name|bool
name|must_be_implementation
parameter_list|)
function_decl|;
name|protected
label|:
name|Result
name|AppendHashDataForRegularExpression
argument_list|(
specifier|const
name|lldb_private
operator|::
name|RegularExpression
operator|&
name|regex
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|hash_data_offset_ptr
argument_list|,
name|Pair
operator|&
name|pair
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|FindByName
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|DIEInfoArray
modifier|&
name|die_info_array
parameter_list|)
function_decl|;
name|Result
name|GetHashDataForName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|hash_data_offset_ptr
argument_list|,
name|Pair
operator|&
name|pair
argument_list|)
decl|const
name|override
decl_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|m_data
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|m_string_table
expr_stmt|;
name|std
operator|::
name|string
name|m_name
expr_stmt|;
block|}
empty_stmt|;
specifier|static
name|void
name|ExtractDIEArray
parameter_list|(
specifier|const
name|DIEInfoArray
modifier|&
name|die_info_array
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|)
function_decl|;
name|protected
label|:
specifier|static
name|void
name|ExtractDIEArray
parameter_list|(
specifier|const
name|DIEInfoArray
modifier|&
name|die_info_array
parameter_list|,
specifier|const
name|dw_tag_t
name|tag
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|)
function_decl|;
specifier|static
name|void
name|ExtractDIEArray
parameter_list|(
specifier|const
name|DIEInfoArray
modifier|&
name|die_info_array
parameter_list|,
specifier|const
name|dw_tag_t
name|tag
parameter_list|,
specifier|const
name|uint32_t
name|qualified_name_hash
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|)
function_decl|;
specifier|static
name|void
name|ExtractClassOrStructDIEArray
parameter_list|(
specifier|const
name|DIEInfoArray
modifier|&
name|die_info_array
parameter_list|,
name|bool
name|return_implementation_only_if_available
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|)
function_decl|;
specifier|static
name|void
name|ExtractTypesFromDIEArray
parameter_list|(
specifier|const
name|DIEInfoArray
modifier|&
name|die_info_array
parameter_list|,
name|uint32_t
name|type_flag_mask
parameter_list|,
name|uint32_t
name|type_flag_value
parameter_list|,
name|DIEArray
modifier|&
name|die_offsets
parameter_list|)
function_decl|;
specifier|static
specifier|const
name|char
modifier|*
name|GetAtomTypeName
parameter_list|(
name|uint16_t
name|atom
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SymbolFileDWARF_HashedNameToDIE_h_
end_comment

end_unit

