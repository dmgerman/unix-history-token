begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SymbolFileDWARF.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SymbolFileDWARF_SymbolFileDWARF_h_
end_ifndef

begin_define
define|#
directive|define
name|SymbolFileDWARF_SymbolFileDWARF_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<list>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"clang/AST/CharUnits.h"
end_include

begin_include
include|#
directive|include
file|"clang/AST/ExternalASTSource.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ClangForward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/dwarf.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Flags.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/UniqueCStringMap.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/ClangASTContext.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/SymbolFile.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Symbol/SymbolContext.h"
end_include

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"DWARFDefines.h"
end_include

begin_include
include|#
directive|include
file|"DWARFDataExtractor.h"
end_include

begin_include
include|#
directive|include
file|"HashedNameToDIE.h"
end_include

begin_include
include|#
directive|include
file|"NameToDIE.h"
end_include

begin_include
include|#
directive|include
file|"UniqueDWARFASTType.h"
end_include

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_comment
comment|// Forward Declarations for this DWARF plugin
end_comment

begin_comment
comment|//----------------------------------------------------------------------
end_comment

begin_decl_stmt
name|class
name|DebugMapModule
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFAbbreviationDeclaration
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFAbbreviationDeclarationSet
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFileUnit
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugAbbrev
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugAranges
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugInfo
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugInfoEntry
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugLine
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugPubnames
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugRanges
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDeclContext
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDIECollection
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFFormValue
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|SymbolFileDWARFDebugMap
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|SymbolFileDWARF
range|:
name|public
name|lldb_private
operator|::
name|SymbolFile
decl_stmt|,
name|public
name|lldb_private
decl|::
name|UserID
block|{
name|public
label|:
name|friend
name|class
name|SymbolFileDWARFDebugMap
decl_stmt|;
name|friend
name|class
name|DebugMapModule
decl_stmt|;
name|friend
name|class
name|DWARFCompileUnit
decl_stmt|;
comment|//------------------------------------------------------------------
comment|// Static Functions
comment|//------------------------------------------------------------------
specifier|static
name|void
name|Initialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|Terminate
parameter_list|()
function_decl|;
specifier|static
name|lldb_private
operator|::
name|ConstString
name|GetPluginNameStatic
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetPluginDescriptionStatic
parameter_list|()
function_decl|;
specifier|static
name|lldb_private
operator|::
name|SymbolFile
operator|*
name|CreateInstance
argument_list|(
name|lldb_private
operator|::
name|ObjectFile
operator|*
name|obj_file
argument_list|)
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|SymbolFileDWARF
argument_list|(
name|lldb_private
operator|::
name|ObjectFile
operator|*
name|ofile
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|SymbolFileDWARF
argument_list|()
expr_stmt|;
name|virtual
name|uint32_t
name|CalculateAbilities
parameter_list|()
function_decl|;
name|virtual
name|void
name|InitializeObject
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------
comment|// Compile Unit function calls
comment|//------------------------------------------------------------------
name|virtual
name|uint32_t
name|GetNumCompileUnits
parameter_list|()
function_decl|;
name|virtual
name|lldb
operator|::
name|CompUnitSP
name|ParseCompileUnitAtIndex
argument_list|(
argument|uint32_t index
argument_list|)
expr_stmt|;
name|virtual
name|lldb
operator|::
name|LanguageType
name|ParseCompileUnitLanguage
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|)
expr_stmt|;
name|virtual
name|size_t
name|ParseCompileUnitFunctions
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|)
decl_stmt|;
name|virtual
name|bool
name|ParseCompileUnitLineTable
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|)
decl_stmt|;
name|virtual
name|bool
name|ParseCompileUnitSupportFiles
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|lldb_private
operator|::
name|FileSpecList
operator|&
name|support_files
argument_list|)
decl_stmt|;
name|virtual
name|size_t
name|ParseFunctionBlocks
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|)
decl_stmt|;
name|virtual
name|size_t
name|ParseTypes
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|)
decl_stmt|;
name|virtual
name|size_t
name|ParseVariablesForContext
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|)
decl_stmt|;
name|virtual
name|lldb_private
operator|::
name|Type
operator|*
name|ResolveTypeUID
argument_list|(
argument|lldb::user_id_t type_uid
argument_list|)
expr_stmt|;
name|virtual
name|bool
name|ResolveClangOpaqueTypeDefinition
argument_list|(
name|lldb_private
operator|::
name|ClangASTType
operator|&
name|clang_type
argument_list|)
decl_stmt|;
name|virtual
name|lldb_private
operator|::
name|Type
operator|*
name|ResolveType
argument_list|(
argument|DWARFCompileUnit* dwarf_cu
argument_list|,
argument|const DWARFDebugInfoEntry* type_die
argument_list|,
argument|bool assert_not_being_parsed = true
argument_list|)
expr_stmt|;
name|virtual
name|clang
operator|::
name|DeclContext
operator|*
name|GetClangDeclContextContainingTypeUID
argument_list|(
argument|lldb::user_id_t type_uid
argument_list|)
expr_stmt|;
name|virtual
name|clang
operator|::
name|DeclContext
operator|*
name|GetClangDeclContextForTypeUID
argument_list|(
argument|const lldb_private::SymbolContext&sc
argument_list|,
argument|lldb::user_id_t type_uid
argument_list|)
expr_stmt|;
name|virtual
name|uint32_t
name|ResolveSymbolContext
argument_list|(
specifier|const
name|lldb_private
operator|::
name|Address
operator|&
name|so_addr
argument_list|,
name|uint32_t
name|resolve_scope
argument_list|,
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|)
decl_stmt|;
name|virtual
name|uint32_t
name|ResolveSymbolContext
argument_list|(
specifier|const
name|lldb_private
operator|::
name|FileSpec
operator|&
name|file_spec
argument_list|,
name|uint32_t
name|line
argument_list|,
name|bool
name|check_inlines
argument_list|,
name|uint32_t
name|resolve_scope
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|virtual
name|uint32_t
name|FindGlobalVariables
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ConstString
operator|&
name|name
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ClangNamespaceDecl
operator|*
name|namespace_decl
argument_list|,
name|bool
name|append
argument_list|,
name|uint32_t
name|max_matches
argument_list|,
name|lldb_private
operator|::
name|VariableList
operator|&
name|variables
argument_list|)
decl_stmt|;
name|virtual
name|uint32_t
name|FindGlobalVariables
argument_list|(
specifier|const
name|lldb_private
operator|::
name|RegularExpression
operator|&
name|regex
argument_list|,
name|bool
name|append
argument_list|,
name|uint32_t
name|max_matches
argument_list|,
name|lldb_private
operator|::
name|VariableList
operator|&
name|variables
argument_list|)
decl_stmt|;
name|virtual
name|uint32_t
name|FindFunctions
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ConstString
operator|&
name|name
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ClangNamespaceDecl
operator|*
name|namespace_decl
argument_list|,
name|uint32_t
name|name_type_mask
argument_list|,
name|bool
name|include_inlines
argument_list|,
name|bool
name|append
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|virtual
name|uint32_t
name|FindFunctions
argument_list|(
specifier|const
name|lldb_private
operator|::
name|RegularExpression
operator|&
name|regex
argument_list|,
name|bool
name|include_inlines
argument_list|,
name|bool
name|append
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|virtual
name|uint32_t
name|FindTypes
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ConstString
operator|&
name|name
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ClangNamespaceDecl
operator|*
name|namespace_decl
argument_list|,
name|bool
name|append
argument_list|,
name|uint32_t
name|max_matches
argument_list|,
name|lldb_private
operator|::
name|TypeList
operator|&
name|types
argument_list|)
decl_stmt|;
name|virtual
name|lldb_private
operator|::
name|TypeList
operator|*
name|GetTypeList
argument_list|()
expr_stmt|;
name|virtual
name|size_t
name|GetTypes
argument_list|(
name|lldb_private
operator|::
name|SymbolContextScope
operator|*
name|sc_scope
argument_list|,
name|uint32_t
name|type_mask
argument_list|,
name|lldb_private
operator|::
name|TypeList
operator|&
name|type_list
argument_list|)
decl_stmt|;
name|virtual
name|lldb_private
operator|::
name|ClangASTContext
operator|&
name|GetClangASTContext
argument_list|()
expr_stmt|;
name|virtual
name|lldb_private
operator|::
name|ClangNamespaceDecl
name|FindNamespace
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ConstString
operator|&
name|name
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ClangNamespaceDecl
operator|*
name|parent_namespace_decl
argument_list|)
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// ClangASTContext callbacks for external source lookups.
comment|//------------------------------------------------------------------
specifier|static
name|void
name|CompleteTagDecl
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|TagDecl
operator|*
argument_list|)
decl_stmt|;
specifier|static
name|void
name|CompleteObjCInterfaceDecl
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|clang
operator|::
name|ObjCInterfaceDecl
operator|*
argument_list|)
decl_stmt|;
specifier|static
name|void
name|FindExternalVisibleDeclsByName
argument_list|(
name|void
operator|*
name|baton
argument_list|,
specifier|const
name|clang
operator|::
name|DeclContext
operator|*
name|DC
argument_list|,
name|clang
operator|::
name|DeclarationName
name|Name
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|clang
operator|::
name|NamedDecl
operator|*
operator|>
operator|*
name|results
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|LayoutRecordType
argument_list|(
name|void
operator|*
name|baton
argument_list|,
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|record_decl
argument_list|,
name|uint64_t
operator|&
name|size
argument_list|,
name|uint64_t
operator|&
name|alignment
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|FieldDecl
operator|*
argument_list|,
name|uint64_t
operator|>
operator|&
name|field_offsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|base_offsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|vbase_offsets
argument_list|)
decl_stmt|;
name|bool
name|LayoutRecordType
argument_list|(
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
name|record_decl
argument_list|,
name|uint64_t
operator|&
name|size
argument_list|,
name|uint64_t
operator|&
name|alignment
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|FieldDecl
operator|*
argument_list|,
name|uint64_t
operator|>
operator|&
name|field_offsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|base_offsets
argument_list|,
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
argument_list|,
name|clang
operator|::
name|CharUnits
operator|>
operator|&
name|vbase_offsets
argument_list|)
decl_stmt|;
struct|struct
name|LayoutInfo
block|{
name|LayoutInfo
argument_list|()
operator|:
name|bit_size
argument_list|(
literal|0
argument_list|)
operator|,
name|alignment
argument_list|(
literal|0
argument_list|)
operator|,
name|field_offsets
argument_list|()
operator|,
name|base_offsets
argument_list|()
operator|,
name|vbase_offsets
argument_list|()
block|{         }
name|uint64_t
name|bit_size
expr_stmt|;
name|uint64_t
name|alignment
decl_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|FieldDecl
operator|*
operator|,
name|uint64_t
operator|>
name|field_offsets
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
operator|,
name|clang
operator|::
name|CharUnits
operator|>
name|base_offsets
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|CXXRecordDecl
operator|*
operator|,
name|clang
operator|::
name|CharUnits
operator|>
name|vbase_offsets
expr_stmt|;
block|}
struct|;
comment|//------------------------------------------------------------------
comment|// PluginInterface protocol
comment|//------------------------------------------------------------------
name|virtual
name|lldb_private
operator|::
name|ConstString
name|GetPluginName
argument_list|()
expr_stmt|;
name|virtual
name|uint32_t
name|GetPluginVersion
parameter_list|()
function_decl|;
comment|// Approach 2 - count + accessor
comment|// Index compile units would scan the initial compile units and register
comment|// them with the module. This would only be done on demand if and only if
comment|// the compile units were needed.
comment|//virtual size_t        GetCompUnitCount() = 0;
comment|//virtual CompUnitSP    GetCompUnitAtIndex(size_t cu_idx) = 0;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_debug_abbrev_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_debug_aranges_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_debug_frame_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_debug_info_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_debug_line_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_debug_loc_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_debug_ranges_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_debug_str_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_apple_names_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_apple_types_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_apple_namespaces_data
argument_list|()
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|get_apple_objc_data
argument_list|()
expr_stmt|;
name|DWARFDebugAbbrev
modifier|*
name|DebugAbbrev
parameter_list|()
function_decl|;
specifier|const
name|DWARFDebugAbbrev
operator|*
name|DebugAbbrev
argument_list|()
specifier|const
expr_stmt|;
name|DWARFDebugInfo
modifier|*
name|DebugInfo
parameter_list|()
function_decl|;
specifier|const
name|DWARFDebugInfo
operator|*
name|DebugInfo
argument_list|()
specifier|const
expr_stmt|;
name|DWARFDebugRanges
modifier|*
name|DebugRanges
parameter_list|()
function_decl|;
specifier|const
name|DWARFDebugRanges
operator|*
name|DebugRanges
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|GetCachedSectionData
argument_list|(
argument|uint32_t got_flag
argument_list|,
argument|lldb::SectionType sect_type
argument_list|,
argument|lldb_private::DWARFDataExtractor&data
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|SupportedVersion
parameter_list|(
name|uint16_t
name|version
parameter_list|)
function_decl|;
name|clang
operator|::
name|DeclContext
operator|*
name|GetCachedClangDeclContextForDIE
argument_list|(
argument|const DWARFDebugInfoEntry *die
argument_list|)
block|{
name|DIEToDeclContextMap
operator|::
name|iterator
name|pos
operator|=
name|m_die_to_decl_ctx
operator|.
name|find
argument_list|(
name|die
argument_list|)
block|;
if|if
condition|(
name|pos
operator|!=
name|m_die_to_decl_ctx
operator|.
name|end
argument_list|()
condition|)
return|return
name|pos
operator|->
name|second
return|;
else|else
return|return
name|NULL
return|;
block|}
name|clang
operator|::
name|DeclContext
operator|*
name|GetClangDeclContextForDIE
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|)
expr_stmt|;
name|clang
operator|::
name|DeclContext
operator|*
name|GetClangDeclContextForDIEOffset
argument_list|(
argument|const lldb_private::SymbolContext&sc
argument_list|,
argument|dw_offset_t die_offset
argument_list|)
expr_stmt|;
name|clang
operator|::
name|DeclContext
operator|*
name|GetClangDeclContextContainingDIE
argument_list|(
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|*
name|decl_ctx_die
argument_list|)
expr_stmt|;
name|clang
operator|::
name|DeclContext
operator|*
name|GetClangDeclContextContainingDIEOffset
argument_list|(
argument|dw_offset_t die_offset
argument_list|)
expr_stmt|;
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|GetDeclContextDIEContainingDIE
parameter_list|(
name|DWARFCompileUnit
modifier|*
name|cu
parameter_list|,
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|die
parameter_list|)
function_decl|;
name|void
name|SearchDeclContext
argument_list|(
specifier|const
name|clang
operator|::
name|DeclContext
operator|*
name|decl_context
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
name|clang
operator|::
name|NamedDecl
operator|*
operator|>
operator|*
name|results
argument_list|)
decl_stmt|;
name|lldb_private
operator|::
name|Flags
operator|&
name|GetFlags
argument_list|()
block|{
return|return
name|m_flags
return|;
block|}
specifier|const
name|lldb_private
operator|::
name|Flags
operator|&
name|GetFlags
argument_list|()
specifier|const
block|{
return|return
name|m_flags
return|;
block|}
name|bool
name|HasForwardDeclForClangType
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ClangASTType
operator|&
name|clang_type
argument_list|)
decl_stmt|;
name|protected
label|:
enum|enum
block|{
name|flagsGotDebugAbbrevData
init|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|flagsGotDebugArangesData
init|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|flagsGotDebugFrameData
init|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|flagsGotDebugInfoData
init|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|flagsGotDebugLineData
init|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
name|flagsGotDebugLocData
init|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
name|flagsGotDebugMacInfoData
init|=
operator|(
literal|1
operator|<<
literal|6
operator|)
block|,
name|flagsGotDebugPubNamesData
init|=
operator|(
literal|1
operator|<<
literal|7
operator|)
block|,
name|flagsGotDebugPubTypesData
init|=
operator|(
literal|1
operator|<<
literal|8
operator|)
block|,
name|flagsGotDebugRangesData
init|=
operator|(
literal|1
operator|<<
literal|9
operator|)
block|,
name|flagsGotDebugStrData
init|=
operator|(
literal|1
operator|<<
literal|10
operator|)
block|,
name|flagsGotAppleNamesData
init|=
operator|(
literal|1
operator|<<
literal|11
operator|)
block|,
name|flagsGotAppleTypesData
init|=
operator|(
literal|1
operator|<<
literal|12
operator|)
block|,
name|flagsGotAppleNamespacesData
init|=
operator|(
literal|1
operator|<<
literal|13
operator|)
block|,
name|flagsGotAppleObjCData
init|=
operator|(
literal|1
operator|<<
literal|14
operator|)
block|}
enum|;
name|bool
name|NamespaceDeclMatchesThisSymbolFile
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ClangNamespaceDecl
operator|*
name|namespace_decl
argument_list|)
decl_stmt|;
name|bool
name|DIEIsInNamespace
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ClangNamespaceDecl
operator|*
name|namespace_decl
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|)
decl_stmt|;
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|SymbolFileDWARF
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|CompUnitSP
name|ParseCompileUnit
argument_list|(
argument|DWARFCompileUnit* dwarf_cu
argument_list|,
argument|uint32_t cu_idx
argument_list|)
expr_stmt|;
name|DWARFCompileUnit
modifier|*
name|GetDWARFCompileUnit
argument_list|(
name|lldb_private
operator|::
name|CompileUnit
operator|*
name|comp_unit
argument_list|)
decl_stmt|;
name|DWARFCompileUnit
modifier|*
name|GetNextUnparsedDWARFCompileUnit
parameter_list|(
name|DWARFCompileUnit
modifier|*
name|prev_cu
parameter_list|)
function_decl|;
name|lldb_private
operator|::
name|CompileUnit
operator|*
name|GetCompUnitForDWARFCompUnit
argument_list|(
argument|DWARFCompileUnit* dwarf_cu
argument_list|,
argument|uint32_t cu_idx = UINT32_MAX
argument_list|)
expr_stmt|;
name|bool
name|GetFunction
argument_list|(
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|func_die
argument_list|,
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|)
decl_stmt|;
name|lldb_private
operator|::
name|Function
operator|*
name|ParseCompileUnitFunction
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|)
expr_stmt|;
name|size_t
name|ParseFunctionBlocks
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|lldb_private
operator|::
name|Block
operator|*
name|parent_block
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
name|lldb
operator|::
name|addr_t
name|subprogram_low_pc
argument_list|,
name|uint32_t
name|depth
argument_list|)
decl_stmt|;
name|size_t
name|ParseTypes
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
name|bool
name|parse_siblings
argument_list|,
name|bool
name|parse_children
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|TypeSP
name|ParseType
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
name|bool
operator|*
name|type_is_new
argument_list|)
expr_stmt|;
name|lldb_private
operator|::
name|Type
operator|*
name|ResolveTypeUID
argument_list|(
argument|DWARFCompileUnit* dwarf_cu
argument_list|,
argument|const DWARFDebugInfoEntry* die
argument_list|,
argument|bool assert_not_being_parsed
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|VariableSP
name|ParseVariableDIE
argument_list|(
argument|const lldb_private::SymbolContext& sc
argument_list|,
argument|DWARFCompileUnit* dwarf_cu
argument_list|,
argument|const DWARFDebugInfoEntry *die
argument_list|,
argument|const lldb::addr_t func_low_pc
argument_list|)
expr_stmt|;
name|size_t
name|ParseVariables
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|lldb
operator|::
name|addr_t
name|func_low_pc
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
name|bool
name|parse_siblings
argument_list|,
name|bool
name|parse_children
argument_list|,
name|lldb_private
operator|::
name|VariableList
operator|*
name|cc_variable_list
operator|=
name|NULL
argument_list|)
decl_stmt|;
name|class
name|DelayedAddObjCClassProperty
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|DelayedAddObjCClassProperty
operator|>
name|DelayedPropertyList
expr_stmt|;
name|bool
name|ClassOrStructIsVirtual
parameter_list|(
name|DWARFCompileUnit
modifier|*
name|dwarf_cu
parameter_list|,
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|parent_die
parameter_list|)
function_decl|;
name|size_t
name|ParseChildMembers
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
name|lldb_private
operator|::
name|ClangASTType
operator|&
name|class_clang_type
argument_list|,
specifier|const
name|lldb
operator|::
name|LanguageType
name|class_language
argument_list|,
name|std
operator|::
name|vector
operator|<
name|clang
operator|::
name|CXXBaseSpecifier
operator|*
operator|>
operator|&
name|base_classes
argument_list|,
name|std
operator|::
name|vector
operator|<
name|int
operator|>
operator|&
name|member_accessibilities
argument_list|,
name|DWARFDIECollection
operator|&
name|member_function_dies
argument_list|,
name|DelayedPropertyList
operator|&
name|delayed_properties
argument_list|,
name|lldb
operator|::
name|AccessType
operator|&
name|default_accessibility
argument_list|,
name|bool
operator|&
name|is_a_class
argument_list|,
name|LayoutInfo
operator|&
name|layout_info
argument_list|)
decl_stmt|;
name|size_t
name|ParseChildParameters
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|clang
operator|::
name|DeclContext
operator|*
name|containing_decl_ctx
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|parent_die
argument_list|,
name|bool
name|skip_artificial
argument_list|,
name|bool
operator|&
name|is_static
argument_list|,
name|lldb_private
operator|::
name|TypeList
operator|*
name|type_list
argument_list|,
name|std
operator|::
name|vector
operator|<
name|lldb_private
operator|::
name|ClangASTType
operator|>
operator|&
name|function_args
argument_list|,
name|std
operator|::
name|vector
operator|<
name|clang
operator|::
name|ParmVarDecl
operator|*
operator|>
operator|&
name|function_param_decls
argument_list|,
name|unsigned
operator|&
name|type_quals
argument_list|,
name|lldb_private
operator|::
name|ClangASTContext
operator|::
name|TemplateParameterInfos
operator|&
name|template_param_infos
argument_list|)
decl_stmt|;
name|size_t
name|ParseChildEnumerators
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|lldb_private
operator|::
name|ClangASTType
operator|&
name|clang_type
argument_list|,
name|bool
name|is_signed
argument_list|,
name|uint32_t
name|enumerator_byte_size
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|enum_die
argument_list|)
decl_stmt|;
name|void
name|ParseChildArrayInfo
argument_list|(
specifier|const
name|lldb_private
operator|::
name|SymbolContext
operator|&
name|sc
argument_list|,
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|parent_die
argument_list|,
name|int64_t
operator|&
name|first_index
argument_list|,
name|std
operator|::
name|vector
operator|<
name|uint64_t
operator|>
operator|&
name|element_orders
argument_list|,
name|uint32_t
operator|&
name|byte_stride
argument_list|,
name|uint32_t
operator|&
name|bit_stride
argument_list|)
decl_stmt|;
comment|// Given a die_offset, figure out the symbol context representing that die.
name|bool
name|ResolveFunction
argument_list|(
name|dw_offset_t
name|offset
argument_list|,
name|DWARFCompileUnit
operator|*
operator|&
name|dwarf_cu
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|bool
name|ResolveFunction
argument_list|(
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|bool
name|FunctionDieMatchesPartialName
parameter_list|(
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|die
parameter_list|,
specifier|const
name|DWARFCompileUnit
modifier|*
name|dwarf_cu
parameter_list|,
name|uint32_t
name|name_type_mask
parameter_list|,
specifier|const
name|char
modifier|*
name|partial_name
parameter_list|,
specifier|const
name|char
modifier|*
name|base_name_start
parameter_list|,
specifier|const
name|char
modifier|*
name|base_name_end
parameter_list|)
function_decl|;
name|void
name|FindFunctions
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ConstString
operator|&
name|name
argument_list|,
specifier|const
name|NameToDIE
operator|&
name|name_to_die
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|void
name|FindFunctions
argument_list|(
specifier|const
name|lldb_private
operator|::
name|RegularExpression
operator|&
name|regex
argument_list|,
specifier|const
name|NameToDIE
operator|&
name|name_to_die
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|void
name|FindFunctions
argument_list|(
specifier|const
name|lldb_private
operator|::
name|RegularExpression
operator|&
name|regex
argument_list|,
specifier|const
name|DWARFMappedHash
operator|::
name|MemoryTable
operator|&
name|memory_table
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|TypeSP
name|FindDefinitionTypeForDIE
argument_list|(
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ConstString
operator|&
name|type_name
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|TypeSP
name|FindDefinitionTypeForDWARFDeclContext
argument_list|(
specifier|const
name|DWARFDeclContext
operator|&
name|die_decl_ctx
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|TypeSP
name|FindCompleteObjCDefinitionTypeForDIE
argument_list|(
argument|const DWARFDebugInfoEntry *die
argument_list|,
argument|const lldb_private::ConstString&type_name
argument_list|,
argument|bool must_be_implementation
argument_list|)
expr_stmt|;
name|bool
name|Supports_DW_AT_APPLE_objc_complete_type
parameter_list|(
name|DWARFCompileUnit
modifier|*
name|cu
parameter_list|)
function_decl|;
name|lldb
operator|::
name|TypeSP
name|FindCompleteObjCDefinitionType
argument_list|(
argument|const lldb_private::ConstString&type_name
argument_list|,
argument|bool header_definition_ok
argument_list|)
expr_stmt|;
name|lldb_private
operator|::
name|Symbol
operator|*
name|GetObjCClassSymbol
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ConstString
operator|&
name|objc_class_name
argument_list|)
expr_stmt|;
name|void
name|ParseFunctions
argument_list|(
specifier|const
name|DIEArray
operator|&
name|die_offsets
argument_list|,
name|lldb_private
operator|::
name|SymbolContextList
operator|&
name|sc_list
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|TypeSP
name|GetTypeForDIE
argument_list|(
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|)
expr_stmt|;
name|uint32_t
name|FindTypes
argument_list|(
name|std
operator|::
name|vector
operator|<
name|dw_offset_t
operator|>
name|die_offsets
argument_list|,
name|uint32_t
name|max_matches
argument_list|,
name|lldb_private
operator|::
name|TypeList
operator|&
name|types
argument_list|)
decl_stmt|;
name|void
name|Index
parameter_list|()
function_decl|;
name|void
name|DumpIndexes
parameter_list|()
function_decl|;
name|void
name|SetDebugMapModule
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|)
block|{
name|m_debug_map_module_wp
operator|=
name|module_sp
expr_stmt|;
block|}
name|SymbolFileDWARFDebugMap
modifier|*
name|GetDebugMapSymfile
parameter_list|()
function_decl|;
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|FindBlockContainingSpecification
parameter_list|(
name|dw_offset_t
name|func_die_offset
parameter_list|,
name|dw_offset_t
name|spec_block_die_offset
parameter_list|,
name|DWARFCompileUnit
modifier|*
modifier|*
name|dwarf_cu_handle
parameter_list|)
function_decl|;
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|FindBlockContainingSpecification
parameter_list|(
name|DWARFCompileUnit
modifier|*
name|dwarf_cu
parameter_list|,
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|die
parameter_list|,
name|dw_offset_t
name|spec_block_die_offset
parameter_list|,
name|DWARFCompileUnit
modifier|*
modifier|*
name|dwarf_cu_handle
parameter_list|)
function_decl|;
name|clang
operator|::
name|NamespaceDecl
operator|*
name|ResolveNamespaceDIE
argument_list|(
name|DWARFCompileUnit
operator|*
name|curr_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|)
expr_stmt|;
name|UniqueDWARFASTTypeMap
modifier|&
name|GetUniqueDWARFASTTypeMap
parameter_list|()
function_decl|;
name|void
name|LinkDeclContextToDIE
argument_list|(
name|clang
operator|::
name|DeclContext
operator|*
name|decl_ctx
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|)
block|{
name|m_die_to_decl_ctx
index|[
name|die
index|]
operator|=
name|decl_ctx
expr_stmt|;
comment|// There can be many DIEs for a single decl context
name|m_decl_ctx_to_die
index|[
name|decl_ctx
index|]
operator|.
name|insert
argument_list|(
name|die
argument_list|)
expr_stmt|;
block|}
name|bool
name|UserIDMatches
argument_list|(
name|lldb
operator|::
name|user_id_t
name|uid
argument_list|)
decl|const
block|{
specifier|const
name|lldb
operator|::
name|user_id_t
name|high_uid
operator|=
name|uid
operator|&
literal|0xffffffff00000000ull
expr_stmt|;
if|if
condition|(
name|high_uid
condition|)
return|return
name|high_uid
operator|==
name|GetID
argument_list|()
return|;
return|return
name|true
return|;
block|}
name|lldb
operator|::
name|user_id_t
name|MakeUserID
argument_list|(
argument|dw_offset_t die_offset
argument_list|)
specifier|const
block|{
return|return
name|GetID
argument_list|()
operator||
name|die_offset
return|;
block|}
specifier|static
name|bool
name|DeclKindIsCXXClass
argument_list|(
name|clang
operator|::
name|Decl
operator|::
name|Kind
name|decl_kind
argument_list|)
block|{
switch|switch
condition|(
name|decl_kind
condition|)
block|{
case|case
name|clang
operator|::
name|Decl
operator|::
name|CXXRecord
case|:
case|case
name|clang
operator|::
name|Decl
operator|::
name|ClassTemplateSpecialization
case|:
return|return
name|true
return|;
default|default:
break|break;
block|}
return|return
name|false
return|;
block|}
name|bool
name|ParseTemplateParameterInfos
argument_list|(
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|parent_die
argument_list|,
name|lldb_private
operator|::
name|ClangASTContext
operator|::
name|TemplateParameterInfos
operator|&
name|template_param_infos
argument_list|)
decl_stmt|;
name|bool
name|ParseTemplateDIE
argument_list|(
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|die
argument_list|,
name|lldb_private
operator|::
name|ClangASTContext
operator|::
name|TemplateParameterInfos
operator|&
name|template_param_infos
argument_list|)
decl_stmt|;
name|clang
operator|::
name|ClassTemplateDecl
operator|*
name|ParseClassTemplateDecl
argument_list|(
argument|clang::DeclContext *decl_ctx
argument_list|,
argument|lldb::AccessType access_type
argument_list|,
argument|const char *parent_name
argument_list|,
argument|int tag_decl_kind
argument_list|,
argument|const lldb_private::ClangASTContext::TemplateParameterInfos&template_param_infos
argument_list|)
expr_stmt|;
name|bool
name|DIEDeclContextsMatch
parameter_list|(
name|DWARFCompileUnit
modifier|*
name|cu1
parameter_list|,
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|die1
parameter_list|,
name|DWARFCompileUnit
modifier|*
name|cu2
parameter_list|,
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|die2
parameter_list|)
function_decl|;
name|bool
name|ClassContainsSelector
argument_list|(
name|DWARFCompileUnit
operator|*
name|dwarf_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|class_die
argument_list|,
specifier|const
name|lldb_private
operator|::
name|ConstString
operator|&
name|selector
argument_list|)
decl_stmt|;
name|bool
name|CopyUniqueClassMethodTypes
argument_list|(
name|SymbolFileDWARF
operator|*
name|class_symfile
argument_list|,
name|lldb_private
operator|::
name|Type
operator|*
name|class_type
argument_list|,
name|DWARFCompileUnit
operator|*
name|src_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|src_class_die
argument_list|,
name|DWARFCompileUnit
operator|*
name|dst_cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|dst_class_die
argument_list|,
name|llvm
operator|::
name|SmallVectorImpl
operator|<
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|>
operator|&
name|failures
argument_list|)
decl_stmt|;
name|bool
name|FixupAddress
argument_list|(
name|lldb_private
operator|::
name|Address
operator|&
name|addr
argument_list|)
decl_stmt|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|lldb_private
operator|::
name|Type
operator|*
operator|>
name|TypeSet
expr_stmt|;
name|void
name|GetTypes
parameter_list|(
name|DWARFCompileUnit
modifier|*
name|dwarf_cu
parameter_list|,
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|die
parameter_list|,
name|dw_offset_t
name|min_die_offset
parameter_list|,
name|dw_offset_t
name|max_die_offset
parameter_list|,
name|uint32_t
name|type_mask
parameter_list|,
name|TypeSet
modifier|&
name|type_set
parameter_list|)
function_decl|;
name|lldb
operator|::
name|ModuleWP
name|m_debug_map_module_wp
expr_stmt|;
name|SymbolFileDWARFDebugMap
modifier|*
name|m_debug_map_symfile
decl_stmt|;
name|clang
operator|::
name|TranslationUnitDecl
operator|*
name|m_clang_tu_decl
expr_stmt|;
name|lldb_private
operator|::
name|Flags
name|m_flags
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_dwarf_data
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_debug_abbrev
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_debug_aranges
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_debug_frame
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_debug_info
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_debug_line
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_debug_loc
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_debug_ranges
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_debug_str
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_apple_names
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_apple_types
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_apple_namespaces
expr_stmt|;
name|lldb_private
operator|::
name|DWARFDataExtractor
name|m_data_apple_objc
expr_stmt|;
comment|// The unique pointer items below are generated on demand if and when someone accesses
comment|// them through a non const version of this class.
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugAbbrev
operator|>
name|m_abbr
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugInfo
operator|>
name|m_info
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugLine
operator|>
name|m_line
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFMappedHash
operator|::
name|MemoryTable
operator|>
name|m_apple_names_ap
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFMappedHash
operator|::
name|MemoryTable
operator|>
name|m_apple_types_ap
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFMappedHash
operator|::
name|MemoryTable
operator|>
name|m_apple_namespaces_ap
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFMappedHash
operator|::
name|MemoryTable
operator|>
name|m_apple_objc_ap
expr_stmt|;
name|NameToDIE
name|m_function_basename_index
decl_stmt|;
comment|// All concrete functions
name|NameToDIE
name|m_function_fullname_index
decl_stmt|;
comment|// All concrete functions
name|NameToDIE
name|m_function_method_index
decl_stmt|;
comment|// All inlined functions
name|NameToDIE
name|m_function_selector_index
decl_stmt|;
comment|// All method names for functions of classes
name|NameToDIE
name|m_objc_class_selectors_index
decl_stmt|;
comment|// Given a class name, find all selectors for the class
name|NameToDIE
name|m_global_index
decl_stmt|;
comment|// Global and static variables
name|NameToDIE
name|m_type_index
decl_stmt|;
comment|// All type DIE offsets
name|NameToDIE
name|m_namespace_index
decl_stmt|;
comment|// All type DIE offsets
name|bool
name|m_indexed
range|:
literal|1
decl_stmt|,
name|m_is_external_ast_source
range|:
literal|1
decl_stmt|,
name|m_using_apple_tables
range|:
literal|1
decl_stmt|;
name|lldb_private
operator|::
name|LazyBool
name|m_supports_DW_AT_APPLE_objc_complete_type
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugRanges
operator|>
name|m_ranges
expr_stmt|;
name|UniqueDWARFASTTypeMap
name|m_unique_ast_type_map
decl_stmt|;
typedef|typedef
name|llvm
operator|::
name|SmallPtrSet
operator|<
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|,
literal|4
operator|>
name|DIEPointerSet
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|,
name|clang
operator|::
name|DeclContext
operator|*
operator|>
name|DIEToDeclContextMap
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|DeclContext
operator|*
operator|,
name|DIEPointerSet
operator|>
name|DeclContextToDIEMap
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|,
name|lldb_private
operator|::
name|Type
operator|*
operator|>
name|DIEToTypePtr
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|,
name|lldb
operator|::
name|VariableSP
operator|>
name|DIEToVariableSP
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|,
name|lldb
operator|::
name|clang_type_t
operator|>
name|DIEToClangType
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|lldb
operator|::
name|clang_type_t
operator|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|>
name|ClangTypeToDIE
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|clang
operator|::
name|RecordDecl
operator|*
operator|,
name|LayoutInfo
operator|>
name|RecordDeclToLayoutMap
expr_stmt|;
name|DIEToDeclContextMap
name|m_die_to_decl_ctx
decl_stmt|;
name|DeclContextToDIEMap
name|m_decl_ctx_to_die
decl_stmt|;
name|DIEToTypePtr
name|m_die_to_type
decl_stmt|;
name|DIEToVariableSP
name|m_die_to_variable_sp
decl_stmt|;
name|DIEToClangType
name|m_forward_decl_die_to_clang_type
decl_stmt|;
name|ClangTypeToDIE
name|m_forward_decl_clang_type_to_die
decl_stmt|;
name|RecordDeclToLayoutMap
name|m_record_decl_to_layout_map
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SymbolFileDWARF_SymbolFileDWARF_h_
end_comment

end_unit

