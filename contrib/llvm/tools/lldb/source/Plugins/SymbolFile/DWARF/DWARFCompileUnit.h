begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFCompileUnit.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SymbolFileDWARF_DWARFCompileUnit_h_
end_ifndef

begin_define
define|#
directive|define
name|SymbolFileDWARF_DWARFCompileUnit_h_
end_define

begin_include
include|#
directive|include
file|"DWARFDebugInfoEntry.h"
end_include

begin_include
include|#
directive|include
file|"SymbolFileDWARF.h"
end_include

begin_decl_stmt
name|class
name|NameToDIE
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFCompileUnit
block|{
name|public
label|:
enum|enum
name|Producer
block|{
name|eProducerInvalid
init|=
literal|0
block|,
name|eProducerClang
block|,
name|eProducerGCC
block|,
name|eProducerLLVMGCC
block|,
name|eProcucerOther
block|}
enum|;
name|DWARFCompileUnit
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|)
expr_stmt|;
name|bool
name|Extract
argument_list|(
specifier|const
name|lldb_private
operator|::
name|DataExtractor
operator|&
name|debug_info
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl_stmt|;
name|dw_offset_t
name|Extract
argument_list|(
name|lldb
operator|::
name|offset_t
name|offset
argument_list|,
specifier|const
name|lldb_private
operator|::
name|DataExtractor
operator|&
name|debug_info_data
argument_list|,
specifier|const
name|DWARFAbbreviationDeclarationSet
operator|*
name|abbrevs
argument_list|)
decl_stmt|;
name|size_t
name|ExtractDIEsIfNeeded
parameter_list|(
name|bool
name|cu_die_only
parameter_list|)
function_decl|;
name|bool
name|LookupAddress
parameter_list|(
specifier|const
name|dw_addr_t
name|address
parameter_list|,
name|DWARFDebugInfoEntry
modifier|*
modifier|*
name|function_die
parameter_list|,
name|DWARFDebugInfoEntry
modifier|*
modifier|*
name|block_die
parameter_list|)
function_decl|;
name|size_t
name|AppendDIEsWithTag
argument_list|(
specifier|const
name|dw_tag_t
name|tag
argument_list|,
name|DWARFDIECollection
operator|&
name|matching_dies
argument_list|,
name|uint32_t
name|depth
operator|=
name|UINT32_MAX
argument_list|)
decl|const
decl_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|bool
name|Verify
argument_list|(
name|lldb_private
operator|::
name|Stream
operator|*
name|s
argument_list|)
decl|const
decl_stmt|;
name|void
name|Dump
argument_list|(
name|lldb_private
operator|::
name|Stream
operator|*
name|s
argument_list|)
decl|const
decl_stmt|;
name|dw_offset_t
name|GetOffset
argument_list|()
specifier|const
block|{
return|return
name|m_offset
return|;
block|}
name|uint32_t
name|Size
argument_list|()
specifier|const
block|{
return|return
literal|11
return|;
comment|/* Size in bytes of the compile unit header */
block|}
name|bool
name|ContainsDIEOffset
argument_list|(
name|dw_offset_t
name|die_offset
argument_list|)
decl|const
block|{
return|return
name|die_offset
operator|>=
name|GetFirstDIEOffset
argument_list|()
operator|&&
name|die_offset
operator|<
name|GetNextCompileUnitOffset
argument_list|()
return|;
block|}
name|dw_offset_t
name|GetFirstDIEOffset
argument_list|()
specifier|const
block|{
return|return
name|m_offset
operator|+
name|Size
argument_list|()
return|;
block|}
name|dw_offset_t
name|GetNextCompileUnitOffset
argument_list|()
specifier|const
block|{
return|return
name|m_offset
operator|+
name|m_length
operator|+
literal|4
return|;
block|}
name|size_t
name|GetDebugInfoSize
argument_list|()
specifier|const
block|{
return|return
name|m_length
operator|+
literal|4
operator|-
name|Size
argument_list|()
return|;
comment|/* Size in bytes of the .debug_info data associated with this compile unit. */
block|}
name|uint32_t
name|GetLength
argument_list|()
specifier|const
block|{
return|return
name|m_length
return|;
block|}
name|uint16_t
name|GetVersion
argument_list|()
specifier|const
block|{
return|return
name|m_version
return|;
block|}
specifier|const
name|DWARFAbbreviationDeclarationSet
operator|*
name|GetAbbreviations
argument_list|()
specifier|const
block|{
return|return
name|m_abbrevs
return|;
block|}
name|dw_offset_t
name|GetAbbrevOffset
argument_list|()
specifier|const
expr_stmt|;
name|uint8_t
name|GetAddressByteSize
argument_list|()
specifier|const
block|{
return|return
name|m_addr_size
return|;
block|}
name|dw_addr_t
name|GetBaseAddress
argument_list|()
specifier|const
block|{
return|return
name|m_base_addr
return|;
block|}
name|void
name|ClearDIEs
parameter_list|(
name|bool
name|keep_compile_unit_die
parameter_list|)
function_decl|;
name|void
name|BuildAddressRangeTable
parameter_list|(
name|SymbolFileDWARF
modifier|*
name|dwarf2Data
parameter_list|,
name|DWARFDebugAranges
modifier|*
name|debug_aranges
parameter_list|,
name|bool
name|clear_dies_if_already_not_parsed
parameter_list|)
function_decl|;
name|void
name|SetBaseAddress
parameter_list|(
name|dw_addr_t
name|base_addr
parameter_list|)
block|{
name|m_base_addr
operator|=
name|base_addr
expr_stmt|;
block|}
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|GetCompileUnitDIEOnly
parameter_list|()
block|{
name|ExtractDIEsIfNeeded
argument_list|(
name|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_die_array
operator|.
name|empty
argument_list|()
condition|)
return|return
name|NULL
return|;
return|return
operator|&
name|m_die_array
index|[
literal|0
index|]
return|;
block|}
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|DIE
parameter_list|()
block|{
name|ExtractDIEsIfNeeded
argument_list|(
name|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_die_array
operator|.
name|empty
argument_list|()
condition|)
return|return
name|NULL
return|;
return|return
operator|&
name|m_die_array
index|[
literal|0
index|]
return|;
block|}
name|void
name|AddDIE
parameter_list|(
name|DWARFDebugInfoEntry
modifier|&
name|die
parameter_list|)
block|{
comment|// The average bytes per DIE entry has been seen to be
comment|// around 14-20 so lets pre-reserve half of that since
comment|// we are now stripping the NULL tags.
comment|// Only reserve the memory if we are adding children of
comment|// the main compile unit DIE. The compile unit DIE is always
comment|// the first entry, so if our size is 1, then we are adding
comment|// the first compile unit child DIE and should reserve
comment|// the memory.
if|if
condition|(
name|m_die_array
operator|.
name|empty
argument_list|()
condition|)
name|m_die_array
operator|.
name|reserve
argument_list|(
name|GetDebugInfoSize
argument_list|()
operator|/
literal|24
argument_list|)
expr_stmt|;
name|m_die_array
operator|.
name|push_back
argument_list|(
name|die
argument_list|)
expr_stmt|;
block|}
name|bool
name|HasDIEsParsed
argument_list|()
specifier|const
block|{
return|return
name|m_die_array
operator|.
name|size
argument_list|()
operator|>
literal|1
return|;
block|}
name|DWARFDebugInfoEntry
modifier|*
name|GetDIEAtIndexUnchecked
parameter_list|(
name|uint32_t
name|idx
parameter_list|)
block|{
return|return
operator|&
name|m_die_array
index|[
name|idx
index|]
return|;
block|}
name|DWARFDebugInfoEntry
modifier|*
name|GetDIEPtr
parameter_list|(
name|dw_offset_t
name|die_offset
parameter_list|)
function_decl|;
specifier|const
name|DWARFDebugInfoEntry
modifier|*
name|GetDIEPtrContainingOffset
parameter_list|(
name|dw_offset_t
name|die_offset
parameter_list|)
function_decl|;
specifier|static
name|uint8_t
name|GetAddressByteSize
parameter_list|(
specifier|const
name|DWARFCompileUnit
modifier|*
name|cu
parameter_list|)
function_decl|;
specifier|static
name|uint8_t
name|GetDefaultAddressSize
parameter_list|()
function_decl|;
specifier|static
name|void
name|SetDefaultAddressSize
parameter_list|(
name|uint8_t
name|addr_size
parameter_list|)
function_decl|;
name|void
operator|*
name|GetUserData
argument_list|()
specifier|const
block|{
return|return
name|m_user_data
return|;
block|}
name|void
name|SetUserData
parameter_list|(
name|void
modifier|*
name|d
parameter_list|)
block|{
name|m_user_data
operator|=
name|d
expr_stmt|;
block|}
name|bool
name|Supports_DW_AT_APPLE_objc_complete_type
parameter_list|()
function_decl|;
name|bool
name|DW_AT_decl_file_attributes_are_invalid
parameter_list|()
function_decl|;
name|bool
name|Supports_unnamed_objc_bitfields
parameter_list|()
function_decl|;
comment|//    void
comment|//    AddGlobalDIEByIndex (uint32_t die_idx);
comment|//
comment|//    void
comment|//    AddGlobal (const DWARFDebugInfoEntry* die);
comment|//
name|void
name|Index
parameter_list|(
specifier|const
name|uint32_t
name|cu_idx
parameter_list|,
name|NameToDIE
modifier|&
name|func_basenames
parameter_list|,
name|NameToDIE
modifier|&
name|func_fullnames
parameter_list|,
name|NameToDIE
modifier|&
name|func_methods
parameter_list|,
name|NameToDIE
modifier|&
name|func_selectors
parameter_list|,
name|NameToDIE
modifier|&
name|objc_class_selectors
parameter_list|,
name|NameToDIE
modifier|&
name|globals
parameter_list|,
name|NameToDIE
modifier|&
name|types
parameter_list|,
name|NameToDIE
modifier|&
name|namespaces
parameter_list|)
function_decl|;
specifier|const
name|DWARFDebugAranges
modifier|&
name|GetFunctionAranges
parameter_list|()
function_decl|;
name|SymbolFileDWARF
operator|*
name|GetSymbolFileDWARF
argument_list|()
specifier|const
block|{
return|return
name|m_dwarf2Data
return|;
block|}
name|Producer
name|GetProducer
parameter_list|()
function_decl|;
name|uint32_t
name|GetProducerVersionMajor
parameter_list|()
function_decl|;
name|uint32_t
name|GetProducerVersionMinor
parameter_list|()
function_decl|;
name|uint32_t
name|GetProducerVersionUpdate
parameter_list|()
function_decl|;
name|protected
label|:
name|SymbolFileDWARF
modifier|*
name|m_dwarf2Data
decl_stmt|;
specifier|const
name|DWARFAbbreviationDeclarationSet
modifier|*
name|m_abbrevs
decl_stmt|;
name|void
modifier|*
name|m_user_data
decl_stmt|;
name|DWARFDebugInfoEntry
operator|::
name|collection
name|m_die_array
expr_stmt|;
comment|// The compile unit debug information entry item
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFDebugAranges
operator|>
name|m_func_aranges_ap
expr_stmt|;
comment|// A table similar to the .debug_aranges table, but this one points to the exact DW_TAG_subprogram DIEs
name|dw_addr_t
name|m_base_addr
decl_stmt|;
name|dw_offset_t
name|m_offset
decl_stmt|;
name|uint32_t
name|m_length
decl_stmt|;
name|uint16_t
name|m_version
decl_stmt|;
name|uint8_t
name|m_addr_size
decl_stmt|;
name|Producer
name|m_producer
decl_stmt|;
name|uint32_t
name|m_producer_version_major
decl_stmt|;
name|uint32_t
name|m_producer_version_minor
decl_stmt|;
name|uint32_t
name|m_producer_version_update
decl_stmt|;
name|void
name|ParseProducerInfo
parameter_list|()
function_decl|;
name|private
label|:
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|DWARFCompileUnit
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SymbolFileDWARF_DWARFCompileUnit_h_
end_comment

end_unit

