begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFDebugAranges.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SymbolFileDWARF_DWARFDebugAranges_h_
end_ifndef

begin_define
define|#
directive|define
name|SymbolFileDWARF_DWARFDebugAranges_h_
end_define

begin_include
include|#
directive|include
file|"DWARFDebugArangeSet.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_include
include|#
directive|include
file|"lldb/Core/RangeMap.h"
end_include

begin_decl_stmt
name|class
name|SymbolFileDWARF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugAranges
block|{
name|protected
label|:
typedef|typedef
name|lldb_private
operator|::
name|RangeDataArray
operator|<
name|dw_addr_t
operator|,
name|uint32_t
operator|,
name|dw_offset_t
operator|,
literal|1
operator|>
name|RangeToDIE
expr_stmt|;
name|public
label|:
typedef|typedef
name|RangeToDIE
operator|::
name|Entry
name|Range
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|RangeToDIE
operator|::
name|Entry
operator|>
name|RangeColl
expr_stmt|;
name|DWARFDebugAranges
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
block|{
name|m_aranges
operator|.
name|Clear
argument_list|()
expr_stmt|;
block|}
name|bool
name|Extract
argument_list|(
specifier|const
name|lldb_private
operator|::
name|DataExtractor
operator|&
name|debug_aranges_data
argument_list|)
decl_stmt|;
name|bool
name|Generate
parameter_list|(
name|SymbolFileDWARF
modifier|*
name|dwarf2Data
parameter_list|)
function_decl|;
comment|// Use append range multiple times and then call sort
name|void
name|AppendRange
parameter_list|(
name|dw_offset_t
name|cu_offset
parameter_list|,
name|dw_addr_t
name|low_pc
parameter_list|,
name|dw_addr_t
name|high_pc
parameter_list|)
function_decl|;
name|void
name|Sort
parameter_list|(
name|bool
name|minimize
parameter_list|)
function_decl|;
specifier|const
name|Range
modifier|*
name|RangeAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
return|return
name|m_aranges
operator|.
name|GetEntryAtIndex
argument_list|(
name|idx
argument_list|)
return|;
block|}
name|void
name|Dump
argument_list|(
name|lldb_private
operator|::
name|Log
operator|*
name|log
argument_list|)
decl|const
decl_stmt|;
name|dw_offset_t
name|FindAddress
argument_list|(
name|dw_addr_t
name|address
argument_list|)
decl|const
decl_stmt|;
name|bool
name|IsEmpty
argument_list|()
specifier|const
block|{
return|return
name|m_aranges
operator|.
name|IsEmpty
argument_list|()
return|;
block|}
name|size_t
name|GetNumRanges
argument_list|()
specifier|const
block|{
return|return
name|m_aranges
operator|.
name|GetSize
argument_list|()
return|;
block|}
name|dw_offset_t
name|OffsetAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
specifier|const
name|Range
modifier|*
name|range
init|=
name|m_aranges
operator|.
name|GetEntryAtIndex
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|range
condition|)
return|return
name|range
operator|->
name|data
return|;
return|return
name|DW_INVALID_OFFSET
return|;
block|}
specifier|static
name|void
name|Dump
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|*
name|s
argument_list|)
decl_stmt|;
name|protected
label|:
name|RangeToDIE
name|m_aranges
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SymbolFileDWARF_DWARFDebugAranges_h_
end_comment

end_unit

