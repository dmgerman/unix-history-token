begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFDebugArangeSet.h -----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SymbolFileDWARF_DWARFDebugArangeSet_h_
end_ifndef

begin_define
define|#
directive|define
name|SymbolFileDWARF_DWARFDebugArangeSet_h_
end_define

begin_include
include|#
directive|include
file|"SymbolFileDWARF.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|class
name|SymbolFileDWARF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFDebugArangeSet
block|{
name|public
label|:
struct|struct
name|Header
block|{
name|uint32_t
name|length
decl_stmt|;
comment|// The total length of the entries for that set, not including the length field itself.
name|uint16_t
name|version
decl_stmt|;
comment|// The DWARF version number
name|uint32_t
name|cu_offset
decl_stmt|;
comment|// The offset from the beginning of the .debug_info section of the compilation unit entry referenced by the table.
name|uint8_t
name|addr_size
decl_stmt|;
comment|// The size in bytes of an address on the target architecture. For segmented addressing, this is the size of the offset portion of the address
name|uint8_t
name|seg_size
decl_stmt|;
comment|// The size in bytes of a segment descriptor on the target architecture. If the target system uses a flat address space, this value is 0.
block|}
struct|;
struct|struct
name|Descriptor
block|{
name|dw_addr_t
name|address
decl_stmt|;
name|dw_addr_t
name|length
decl_stmt|;
name|dw_addr_t
name|end_address
argument_list|()
specifier|const
block|{
return|return
name|address
operator|+
name|length
return|;
block|}
block|}
struct|;
name|DWARFDebugArangeSet
argument_list|()
expr_stmt|;
name|void
name|Clear
parameter_list|()
function_decl|;
name|void
name|SetOffset
parameter_list|(
name|uint32_t
name|offset
parameter_list|)
block|{
name|m_offset
operator|=
name|offset
expr_stmt|;
block|}
name|void
name|SetHeader
parameter_list|(
name|uint16_t
name|version
parameter_list|,
name|uint32_t
name|cu_offset
parameter_list|,
name|uint8_t
name|addr_size
parameter_list|,
name|uint8_t
name|seg_size
parameter_list|)
function_decl|;
name|void
name|AddDescriptor
argument_list|(
specifier|const
name|DWARFDebugArangeSet
operator|::
name|Descriptor
operator|&
name|range
argument_list|)
decl_stmt|;
name|void
name|Compact
parameter_list|()
function_decl|;
name|bool
name|Extract
argument_list|(
specifier|const
name|lldb_private
operator|::
name|DataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl_stmt|;
name|void
name|Dump
argument_list|(
name|lldb_private
operator|::
name|Stream
operator|*
name|s
argument_list|)
decl|const
decl_stmt|;
name|dw_offset_t
name|GetCompileUnitDIEOffset
argument_list|()
specifier|const
block|{
return|return
name|m_header
operator|.
name|cu_offset
return|;
block|}
name|dw_offset_t
name|GetOffsetOfNextEntry
argument_list|()
specifier|const
expr_stmt|;
name|dw_offset_t
name|FindAddress
argument_list|(
name|dw_addr_t
name|address
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|NumDescriptors
argument_list|()
specifier|const
block|{
return|return
name|m_arange_descriptors
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|Header
operator|&
name|GetHeader
argument_list|()
specifier|const
block|{
return|return
name|m_header
return|;
block|}
specifier|const
name|Descriptor
modifier|*
name|GetDescriptor
argument_list|(
name|uint32_t
name|i
argument_list|)
decl|const
block|{
if|if
condition|(
name|i
operator|<
name|m_arange_descriptors
operator|.
name|size
argument_list|()
condition|)
return|return
operator|&
name|m_arange_descriptors
index|[
name|i
index|]
return|;
return|return
name|NULL
return|;
block|}
specifier|const
name|Descriptor
modifier|&
name|GetDescriptorRef
argument_list|(
name|uint32_t
name|i
argument_list|)
decl|const
block|{
return|return
name|m_arange_descriptors
index|[
name|i
index|]
return|;
block|}
name|protected
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Descriptor
operator|>
name|DescriptorColl
expr_stmt|;
typedef|typedef
name|DescriptorColl
operator|::
name|iterator
name|DescriptorIter
expr_stmt|;
typedef|typedef
name|DescriptorColl
operator|::
name|const_iterator
name|DescriptorConstIter
expr_stmt|;
name|uint32_t
name|m_offset
decl_stmt|;
name|Header
name|m_header
decl_stmt|;
name|DescriptorColl
name|m_arange_descriptors
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SymbolFileDWARF_DWARFDebugArangeSet_h_
end_comment

end_unit

