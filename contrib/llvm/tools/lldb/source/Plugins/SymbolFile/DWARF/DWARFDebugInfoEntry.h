begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFDebugInfoEntry.h -----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SymbolFileDWARF_DWARFDebugInfoEntry_h_
end_ifndef

begin_define
define|#
directive|define
name|SymbolFileDWARF_DWARFDebugInfoEntry_h_
end_define

begin_include
include|#
directive|include
file|"SymbolFileDWARF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"DWARFDebugAbbrev.h"
end_include

begin_include
include|#
directive|include
file|"DWARFAbbreviationDeclaration.h"
end_include

begin_include
include|#
directive|include
file|"DWARFDebugRanges.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|,
name|dw_addr_t
operator|>
name|DIEToAddressMap
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|DIEToAddressMap
operator|::
name|iterator
name|DIEToAddressMapIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|DIEToAddressMap
operator|::
name|const_iterator
name|DIEToAddressMapConstIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|dw_addr_t
operator|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|>
name|AddressToDIEMap
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AddressToDIEMap
operator|::
name|iterator
name|AddressToDIEMapIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|AddressToDIEMap
operator|::
name|const_iterator
name|AddressToDIEMapConstIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|dw_offset_t
operator|,
name|dw_offset_t
operator|>
name|DIEToDIEMap
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|DIEToDIEMap
operator|::
name|iterator
name|DIEToDIEMapIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|DIEToDIEMap
operator|::
name|const_iterator
name|DIEToDIEMapConstIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|map
operator|<
name|uint32_t
operator|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|>
name|UInt32ToDIEMap
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|UInt32ToDIEMap
operator|::
name|iterator
name|UInt32ToDIEMapIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|UInt32ToDIEMap
operator|::
name|const_iterator
name|UInt32ToDIEMapConstIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|multimap
operator|<
name|uint32_t
operator|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
operator|>
name|UInt32ToDIEMMap
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|UInt32ToDIEMMap
operator|::
name|iterator
name|UInt32ToDIEMMapIter
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|UInt32ToDIEMMap
operator|::
name|const_iterator
name|UInt32ToDIEMMapConstIter
expr_stmt|;
end_typedef

begin_decl_stmt
name|class
name|DWARFDeclContext
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|DIE_SIBLING_IDX_BITSIZE
value|31
end_define

begin_define
define|#
directive|define
name|DIE_ABBR_IDX_BITSIZE
value|15
end_define

begin_decl_stmt
name|class
name|DWARFDebugInfoEntry
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|DWARFDebugInfoEntry
operator|>
name|collection
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|dw_offset_t
operator|>
name|offset_collection
expr_stmt|;
typedef|typedef
name|offset_collection
operator|::
name|iterator
name|offset_collection_iterator
expr_stmt|;
typedef|typedef
name|offset_collection
operator|::
name|const_iterator
name|offset_collection_const_iterator
expr_stmt|;
name|DWARFDebugInfoEntry
argument_list|()
operator|:
name|m_offset
argument_list|(
name|DW_INVALID_OFFSET
argument_list|)
operator|,
name|m_parent_idx
argument_list|(
literal|0
argument_list|)
operator|,
name|m_sibling_idx
argument_list|(
literal|0
argument_list|)
operator|,
name|m_empty_children
argument_list|(
name|false
argument_list|)
operator|,
name|m_abbr_idx
argument_list|(
literal|0
argument_list|)
operator|,
name|m_has_children
argument_list|(
name|false
argument_list|)
operator|,
name|m_tag
argument_list|(
literal|0
argument_list|)
block|{                 }
name|void
name|Clear
argument_list|()
block|{
name|m_offset
operator|=
name|DW_INVALID_OFFSET
block|;
name|m_parent_idx
operator|=
literal|0
block|;
name|m_sibling_idx
operator|=
literal|0
block|;
name|m_empty_children
operator|=
name|false
block|;
name|m_abbr_idx
operator|=
literal|0
block|;
name|m_has_children
operator|=
name|false
block|;
name|m_tag
operator|=
literal|0
block|;                 }
name|bool
name|Contains
argument_list|(
argument|const DWARFDebugInfoEntry *die
argument_list|)
specifier|const
expr_stmt|;
name|void
name|BuildAddressRangeTable
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|DWARFDebugAranges
operator|*
name|debug_aranges
argument_list|)
decl|const
decl_stmt|;
name|void
name|BuildFunctionAddressRangeTable
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|DWARFDebugAranges
operator|*
name|debug_aranges
argument_list|)
decl|const
decl_stmt|;
name|bool
name|FastExtract
argument_list|(
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|debug_info_data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFFormValue
operator|::
name|FixedFormSizes
operator|&
name|fixed_form_sizes
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl_stmt|;
name|bool
name|Extract
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl_stmt|;
name|bool
name|LookupAddress
parameter_list|(
specifier|const
name|dw_addr_t
name|address
parameter_list|,
name|SymbolFileDWARF
modifier|*
name|dwarf2Data
parameter_list|,
specifier|const
name|DWARFCompileUnit
modifier|*
name|cu
parameter_list|,
name|DWARFDebugInfoEntry
modifier|*
modifier|*
name|function_die
parameter_list|,
name|DWARFDebugInfoEntry
modifier|*
modifier|*
name|block_die
parameter_list|)
function_decl|;
name|size_t
name|GetAttributes
argument_list|(
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|DWARFFormValue
operator|::
name|FixedFormSizes
name|fixed_form_sizes
argument_list|,
name|DWARFAttributes
operator|&
name|attrs
argument_list|,
name|uint32_t
name|curr_depth
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
comment|// "curr_depth" for internal use only, don't set this yourself!!!
name|dw_offset_t
name|GetAttributeValue
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|dw_attr_t
name|attr
argument_list|,
name|DWARFFormValue
operator|&
name|formValue
argument_list|,
name|dw_offset_t
operator|*
name|end_attr_offset_ptr
operator|=
name|nullptr
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetAttributeValueAsString
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|dw_attr_t
name|attr
argument_list|,
specifier|const
name|char
operator|*
name|fail_value
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|GetAttributeValueAsUnsigned
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|dw_attr_t
name|attr
argument_list|,
name|uint64_t
name|fail_value
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|GetAttributeValueAsReference
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|dw_attr_t
name|attr
argument_list|,
name|uint64_t
name|fail_value
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|int64_t
name|GetAttributeValueAsSigned
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|dw_attr_t
name|attr
argument_list|,
name|int64_t
name|fail_value
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|GetAttributeValueAsAddress
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|dw_attr_t
name|attr
argument_list|,
name|uint64_t
name|fail_value
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|dw_addr_t
name|GetAttributeHighPC
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|dw_addr_t
name|lo_pc
argument_list|,
name|uint64_t
name|fail_value
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetAttributeAddressRange
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|dw_addr_t
operator|&
name|lo_pc
argument_list|,
name|dw_addr_t
operator|&
name|hi_pc
argument_list|,
name|uint64_t
name|fail_value
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|size_t
name|GetAttributeAddressRanges
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|DWARFRangeList
operator|&
name|ranges
argument_list|,
name|bool
name|check_hi_lo_pc
argument_list|,
name|bool
name|check_specification_or_abstract_origin
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetName
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetMangledName
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|bool
name|substitute_name_allowed
operator|=
name|true
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetPubname
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|bool
name|GetName
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|dw_offset_t
name|die_offset
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|&
name|s
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|AppendTypeName
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|dw_offset_t
name|die_offset
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|&
name|s
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetQualifiedName
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|std
operator|::
name|string
operator|&
name|storage
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|char
modifier|*
name|GetQualifiedName
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFAttributes
operator|&
name|attributes
argument_list|,
name|std
operator|::
name|string
operator|&
name|storage
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|bool
name|OffsetLessThan
parameter_list|(
specifier|const
name|DWARFDebugInfoEntry
modifier|&
name|a
parameter_list|,
specifier|const
name|DWARFDebugInfoEntry
modifier|&
name|b
parameter_list|)
function_decl|;
name|void
name|Dump
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|&
name|s
argument_list|,
name|uint32_t
name|recurse_depth
argument_list|)
decl|const
decl_stmt|;
name|void
name|DumpAncestry
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|oldest
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|&
name|s
argument_list|,
name|uint32_t
name|recurse_depth
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|void
name|DumpAttribute
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|debug_info_data
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|offset_ptr
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|&
name|s
argument_list|,
name|dw_attr_t
name|attr
argument_list|,
name|dw_form_t
name|form
argument_list|)
decl_stmt|;
comment|// This one dumps the comp unit name, objfile name and die offset for this die so the stream S.
name|void
name|DumpLocation
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|lldb_private
operator|::
name|Stream
operator|&
name|s
argument_list|)
decl|const
decl_stmt|;
name|bool
name|GetDIENamesAndRanges
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|char
operator|*
operator|&
name|name
argument_list|,
specifier|const
name|char
operator|*
operator|&
name|mangled
argument_list|,
name|DWARFRangeList
operator|&
name|rangeList
argument_list|,
name|int
operator|&
name|decl_file
argument_list|,
name|int
operator|&
name|decl_line
argument_list|,
name|int
operator|&
name|decl_column
argument_list|,
name|int
operator|&
name|call_file
argument_list|,
name|int
operator|&
name|call_line
argument_list|,
name|int
operator|&
name|call_column
argument_list|,
name|lldb_private
operator|::
name|DWARFExpression
operator|*
name|frame_base
operator|=
name|NULL
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|DWARFAbbreviationDeclaration
modifier|*
name|GetAbbreviationDeclarationPtr
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|lldb
operator|::
name|offset_t
operator|&
name|offset
argument_list|)
decl|const
decl_stmt|;
name|dw_tag_t
name|Tag
argument_list|()
specifier|const
block|{
return|return
name|m_tag
return|;
block|}
name|bool
name|IsNULL
argument_list|()
specifier|const
block|{
return|return
name|m_abbr_idx
operator|==
literal|0
return|;
block|}
name|dw_offset_t
name|GetOffset
argument_list|()
specifier|const
block|{
return|return
name|m_offset
return|;
block|}
name|void
name|SetOffset
parameter_list|(
name|dw_offset_t
name|offset
parameter_list|)
block|{
name|m_offset
operator|=
name|offset
expr_stmt|;
block|}
name|bool
name|HasChildren
argument_list|()
specifier|const
block|{
return|return
name|m_has_children
return|;
block|}
name|void
name|SetHasChildren
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|m_has_children
operator|=
name|b
expr_stmt|;
block|}
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our parent will be some index behind "this".
name|DWARFDebugInfoEntry
modifier|*
name|GetParent
parameter_list|()
block|{
return|return
name|m_parent_idx
operator|>
literal|0
condition|?
name|this
operator|-
name|m_parent_idx
else|:
name|NULL
return|;
block|}
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|GetParent
argument_list|()
specifier|const
block|{
return|return
name|m_parent_idx
operator|>
literal|0
operator|?
name|this
operator|-
name|m_parent_idx
operator|:
name|NULL
return|;
block|}
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our sibling will be some index after "this".
name|DWARFDebugInfoEntry
modifier|*
name|GetSibling
parameter_list|()
block|{
return|return
name|m_sibling_idx
operator|>
literal|0
condition|?
name|this
operator|+
name|m_sibling_idx
else|:
name|NULL
return|;
block|}
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|GetSibling
argument_list|()
specifier|const
block|{
return|return
name|m_sibling_idx
operator|>
literal|0
operator|?
name|this
operator|+
name|m_sibling_idx
operator|:
name|NULL
return|;
block|}
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// we don't need to store our child pointer, if we have a child it will
comment|// be the next entry in the list...
name|DWARFDebugInfoEntry
modifier|*
name|GetFirstChild
parameter_list|()
block|{
return|return
operator|(
name|HasChildren
argument_list|()
operator|&&
operator|!
name|m_empty_children
operator|)
condition|?
name|this
operator|+
literal|1
else|:
name|NULL
return|;
block|}
specifier|const
name|DWARFDebugInfoEntry
operator|*
name|GetFirstChild
argument_list|()
specifier|const
block|{
return|return
operator|(
name|HasChildren
argument_list|()
operator|&&
operator|!
name|m_empty_children
operator|)
operator|?
name|this
operator|+
literal|1
operator|:
name|NULL
return|;
block|}
name|void
name|GetDeclContextDIEs
argument_list|(
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|DWARFDIECollection
operator|&
name|decl_context_dies
argument_list|)
decl|const
decl_stmt|;
name|void
name|GetDWARFDeclContext
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
name|DWARFDeclContext
operator|&
name|dwarf_decl_ctx
argument_list|)
decl|const
decl_stmt|;
name|bool
name|MatchesDWARFDeclContext
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFDeclContext
operator|&
name|dwarf_decl_ctx
argument_list|)
decl|const
decl_stmt|;
name|DWARFDIE
name|GetParentDeclContextDIE
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
name|DWARFCompileUnit
operator|*
name|cu
argument_list|)
decl|const
decl_stmt|;
name|DWARFDIE
name|GetParentDeclContextDIE
argument_list|(
name|SymbolFileDWARF
operator|*
name|dwarf2Data
argument_list|,
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|DWARFAttributes
operator|&
name|attributes
argument_list|)
decl|const
decl_stmt|;
name|void
name|SetParent
parameter_list|(
name|DWARFDebugInfoEntry
modifier|*
name|parent
parameter_list|)
block|{
if|if
condition|(
name|parent
condition|)
block|{
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our parent will be some index behind "this".
name|m_parent_idx
operator|=
name|this
operator|-
name|parent
expr_stmt|;
block|}
else|else
name|m_parent_idx
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|SetSibling
parameter_list|(
name|DWARFDebugInfoEntry
modifier|*
name|sibling
parameter_list|)
block|{
if|if
condition|(
name|sibling
condition|)
block|{
comment|// We know we are kept in a vector of contiguous entries, so we know
comment|// our sibling will be some index after "this".
name|m_sibling_idx
operator|=
name|sibling
operator|-
name|this
expr_stmt|;
name|sibling
operator|->
name|SetParent
argument_list|(
name|GetParent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|m_sibling_idx
operator|=
literal|0
expr_stmt|;
block|}
name|void
name|SetSiblingIndex
parameter_list|(
name|uint32_t
name|idx
parameter_list|)
block|{
name|m_sibling_idx
operator|=
name|idx
expr_stmt|;
block|}
name|void
name|SetParentIndex
parameter_list|(
name|uint32_t
name|idx
parameter_list|)
block|{
name|m_parent_idx
operator|=
name|idx
expr_stmt|;
block|}
name|bool
name|GetEmptyChildren
argument_list|()
specifier|const
block|{
return|return
name|m_empty_children
return|;
block|}
name|void
name|SetEmptyChildren
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|m_empty_children
operator|=
name|b
expr_stmt|;
block|}
specifier|static
name|void
name|DumpDIECollection
argument_list|(
name|lldb_private
operator|::
name|Stream
operator|&
name|strm
argument_list|,
name|DWARFDebugInfoEntry
operator|::
name|collection
operator|&
name|die_collection
argument_list|)
decl_stmt|;
name|protected
label|:
name|dw_offset_t
name|m_offset
decl_stmt|;
comment|// Offset within the .debug_info of the start of this entry
name|uint32_t
name|m_parent_idx
decl_stmt|;
comment|// How many to subtract from "this" to get the parent. If zero this die has no parent
name|uint32_t
name|m_sibling_idx
range|:
literal|31
decl_stmt|,
comment|// How many to add to "this" to get the sibling.
name|m_empty_children
range|:
literal|1
decl_stmt|;
comment|// If a DIE says it had children, yet it just contained a NULL tag, this will be set.
name|uint32_t
name|m_abbr_idx
range|:
name|DIE_ABBR_IDX_BITSIZE
decl_stmt|,
name|m_has_children
range|:
literal|1
decl_stmt|,
comment|// Set to 1 if this DIE has children
name|m_tag
range|:
literal|16
decl_stmt|;
comment|// A copy of the DW_TAG value so we don't have to go through the compile unit abbrev table
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SymbolFileDWARF_DWARFDebugInfoEntry_h_
end_comment

end_unit

