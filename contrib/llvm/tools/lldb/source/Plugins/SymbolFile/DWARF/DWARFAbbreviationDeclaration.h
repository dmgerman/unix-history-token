begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFAbbreviationDeclaration.h --------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_DWARFAbbreviationDeclaration_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_DWARFAbbreviationDeclaration_h_
end_define

begin_include
include|#
directive|include
file|"SymbolFileDWARF.h"
end_include

begin_include
include|#
directive|include
file|"DWARFAttribute.h"
end_include

begin_decl_stmt
name|class
name|DWARFCompileUnit
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFAbbreviationDeclaration
block|{
name|public
label|:
enum|enum
block|{
name|InvalidCode
init|=
literal|0
block|}
enum|;
name|DWARFAbbreviationDeclaration
argument_list|()
expr_stmt|;
comment|// For hand crafting an abbreviation declaration
name|DWARFAbbreviationDeclaration
argument_list|(
argument|dw_tag_t tag
argument_list|,
argument|uint8_t has_children
argument_list|)
empty_stmt|;
name|void
name|AddAttribute
parameter_list|(
specifier|const
name|DWARFAttribute
modifier|&
name|attr
parameter_list|)
block|{
name|m_attributes
operator|.
name|push_back
argument_list|(
name|attr
argument_list|)
expr_stmt|;
block|}
name|dw_uleb128_t
name|Code
argument_list|()
specifier|const
block|{
return|return
name|m_code
return|;
block|}
name|void
name|SetCode
parameter_list|(
name|dw_uleb128_t
name|code
parameter_list|)
block|{
name|m_code
operator|=
name|code
expr_stmt|;
block|}
name|dw_tag_t
name|Tag
argument_list|()
specifier|const
block|{
return|return
name|m_tag
return|;
block|}
name|bool
name|HasChildren
argument_list|()
specifier|const
block|{
return|return
name|m_has_children
return|;
block|}
name|size_t
name|NumAttributes
argument_list|()
specifier|const
block|{
return|return
name|m_attributes
operator|.
name|size
argument_list|()
return|;
block|}
name|dw_attr_t
name|GetAttrByIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
return|return
name|m_attributes
operator|.
name|size
argument_list|()
operator|>
name|idx
condition|?
name|m_attributes
index|[
name|idx
index|]
operator|.
name|get_attr
argument_list|()
else|:
literal|0
return|;
block|}
name|dw_form_t
name|GetFormByIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
return|return
name|m_attributes
operator|.
name|size
argument_list|()
operator|>
name|idx
condition|?
name|m_attributes
index|[
name|idx
index|]
operator|.
name|get_form
argument_list|()
else|:
literal|0
return|;
block|}
name|bool
name|GetAttrAndFormByIndex
argument_list|(
name|uint32_t
name|idx
argument_list|,
name|dw_attr_t
operator|&
name|attr
argument_list|,
name|dw_form_t
operator|&
name|form
argument_list|)
decl|const
block|{
if|if
condition|(
name|m_attributes
operator|.
name|size
argument_list|()
operator|>
name|idx
condition|)
block|{
name|m_attributes
index|[
name|idx
index|]
operator|.
name|get
argument_list|(
name|attr
argument_list|,
name|form
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|attr
operator|=
name|form
operator|=
literal|0
expr_stmt|;
return|return
name|false
return|;
block|}
comment|// idx is assumed to be valid when calling GetAttrAndFormByIndexUnchecked()
name|void
name|GetAttrAndFormByIndexUnchecked
argument_list|(
name|uint32_t
name|idx
argument_list|,
name|dw_attr_t
operator|&
name|attr
argument_list|,
name|dw_form_t
operator|&
name|form
argument_list|)
decl|const
block|{
name|m_attributes
index|[
name|idx
index|]
operator|.
name|get
argument_list|(
name|attr
argument_list|,
name|form
argument_list|)
expr_stmt|;
block|}
name|dw_form_t
name|GetFormByIndexUnchecked
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
return|return
name|m_attributes
index|[
name|idx
index|]
operator|.
name|get_form
argument_list|()
return|;
block|}
name|void
name|CopyExcludingAddressAttributes
parameter_list|(
specifier|const
name|DWARFAbbreviationDeclaration
modifier|&
name|abbr_decl
parameter_list|,
specifier|const
name|uint32_t
name|idx
parameter_list|)
function_decl|;
name|void
name|CopyChangingStringToStrp
argument_list|(
specifier|const
name|DWARFAbbreviationDeclaration
operator|&
name|abbr_decl
argument_list|,
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|debug_info_data
argument_list|,
name|dw_offset_t
name|debug_info_offset
argument_list|,
specifier|const
name|DWARFCompileUnit
operator|*
name|cu
argument_list|,
specifier|const
name|uint32_t
name|strp_min_len
argument_list|)
decl_stmt|;
name|uint32_t
name|FindAttributeIndex
argument_list|(
name|dw_attr_t
name|attr
argument_list|)
decl|const
decl_stmt|;
name|bool
name|Extract
argument_list|(
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|offset_ptr
argument_list|)
decl_stmt|;
name|bool
name|Extract
argument_list|(
specifier|const
name|lldb_private
operator|::
name|DWARFDataExtractor
operator|&
name|data
argument_list|,
name|lldb
operator|::
name|offset_t
operator|*
name|offset_ptr
argument_list|,
name|dw_uleb128_t
name|code
argument_list|)
decl_stmt|;
comment|//  void            Append(BinaryStreamBuf& out_buff) const;
name|bool
name|IsValid
parameter_list|()
function_decl|;
name|void
name|Dump
argument_list|(
name|lldb_private
operator|::
name|Stream
operator|*
name|s
argument_list|)
decl|const
decl_stmt|;
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DWARFAbbreviationDeclaration
operator|&
name|rhs
operator|)
specifier|const
expr_stmt|;
comment|//  DWARFAttribute::collection& Attributes() { return m_attributes; }
specifier|const
name|DWARFAttribute
operator|::
name|collection
operator|&
name|Attributes
argument_list|()
specifier|const
block|{
return|return
name|m_attributes
return|;
block|}
name|protected
label|:
name|dw_uleb128_t
name|m_code
decl_stmt|;
name|dw_tag_t
name|m_tag
decl_stmt|;
name|uint8_t
name|m_has_children
decl_stmt|;
name|DWARFAttribute
operator|::
name|collection
name|m_attributes
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_DWARFAbbreviationDeclaration_h_
end_comment

end_unit

