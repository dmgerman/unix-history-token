begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFAttribute.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SymbolFileDWARF_DWARFAttribute_h_
end_ifndef

begin_define
define|#
directive|define
name|SymbolFileDWARF_DWARFAttribute_h_
end_define

begin_include
include|#
directive|include
file|"DWARFDefines.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|class
name|DWARFCompileUnit
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFFormValue
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|DWARFAttribute
block|{
name|public
label|:
name|DWARFAttribute
argument_list|(
argument|dw_attr_t attr
argument_list|,
argument|dw_form_t form
argument_list|)
block|:
name|m_attr
argument_list|(
name|attr
argument_list|)
operator|,
name|m_form
argument_list|(
argument|form
argument_list|)
block|{}
name|void
name|set
argument_list|(
argument|dw_attr_t attr
argument_list|,
argument|dw_form_t form
argument_list|)
block|{
name|m_attr
operator|=
name|attr
block|;
name|m_form
operator|=
name|form
block|;   }
name|void
name|set_attr
argument_list|(
argument|dw_attr_t attr
argument_list|)
block|{
name|m_attr
operator|=
name|attr
block|; }
name|void
name|set_form
argument_list|(
argument|dw_form_t form
argument_list|)
block|{
name|m_form
operator|=
name|form
block|; }
name|dw_attr_t
name|get_attr
argument_list|()
specifier|const
block|{
return|return
name|m_attr
return|;
block|}
name|dw_form_t
name|get_form
argument_list|()
specifier|const
block|{
return|return
name|m_form
return|;
block|}
name|void
name|get
argument_list|(
name|dw_attr_t
operator|&
name|attr
argument_list|,
name|dw_form_t
operator|&
name|form
argument_list|)
decl|const
block|{
name|attr
operator|=
name|m_attr
expr_stmt|;
name|form
operator|=
name|m_form
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|DWARFAttribute
operator|&
name|rhs
operator|)
specifier|const
block|{
return|return
name|m_attr
operator|==
name|rhs
operator|.
name|m_attr
operator|&&
name|m_form
operator|==
name|rhs
operator|.
name|m_form
return|;
block|}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|DWARFAttribute
operator|>
name|collection
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|collection
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|protected
label|:
name|dw_attr_t
name|m_attr
decl_stmt|;
name|dw_form_t
name|m_form
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|class
name|DWARFAttributes
block|{
name|public
label|:
name|DWARFAttributes
argument_list|()
expr_stmt|;
operator|~
name|DWARFAttributes
argument_list|()
expr_stmt|;
name|void
name|Append
parameter_list|(
specifier|const
name|DWARFCompileUnit
modifier|*
name|cu
parameter_list|,
name|dw_offset_t
name|attr_die_offset
parameter_list|,
name|dw_attr_t
name|attr
parameter_list|,
name|dw_form_t
name|form
parameter_list|)
function_decl|;
specifier|const
name|DWARFCompileUnit
modifier|*
name|CompileUnitAtIndex
argument_list|(
name|uint32_t
name|i
argument_list|)
decl|const
block|{
return|return
name|m_infos
index|[
name|i
index|]
operator|.
name|cu
return|;
block|}
name|dw_offset_t
name|DIEOffsetAtIndex
argument_list|(
name|uint32_t
name|i
argument_list|)
decl|const
block|{
return|return
name|m_infos
index|[
name|i
index|]
operator|.
name|die_offset
return|;
block|}
name|dw_attr_t
name|AttributeAtIndex
argument_list|(
name|uint32_t
name|i
argument_list|)
decl|const
block|{
return|return
name|m_infos
index|[
name|i
index|]
operator|.
name|attr
operator|.
name|get_attr
argument_list|()
return|;
block|}
name|dw_attr_t
name|FormAtIndex
argument_list|(
name|uint32_t
name|i
argument_list|)
decl|const
block|{
return|return
name|m_infos
index|[
name|i
index|]
operator|.
name|attr
operator|.
name|get_form
argument_list|()
return|;
block|}
name|bool
name|ExtractFormValueAtIndex
argument_list|(
name|uint32_t
name|i
argument_list|,
name|DWARFFormValue
operator|&
name|form_value
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|FormValueAsUnsignedAtIndex
argument_list|(
name|uint32_t
name|i
argument_list|,
name|uint64_t
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|FormValueAsUnsigned
argument_list|(
name|dw_attr_t
name|attr
argument_list|,
name|uint64_t
name|fail_value
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|FindAttributeIndex
argument_list|(
name|dw_attr_t
name|attr
argument_list|)
decl|const
decl_stmt|;
name|bool
name|ContainsAttribute
argument_list|(
name|dw_attr_t
name|attr
argument_list|)
decl|const
decl_stmt|;
name|bool
name|RemoveAttribute
parameter_list|(
name|dw_attr_t
name|attr
parameter_list|)
function_decl|;
name|void
name|Clear
parameter_list|()
block|{
name|m_infos
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|size_t
name|Size
argument_list|()
specifier|const
block|{
return|return
name|m_infos
operator|.
name|size
argument_list|()
return|;
block|}
name|protected
label|:
struct|struct
name|AttributeValue
block|{
specifier|const
name|DWARFCompileUnit
modifier|*
name|cu
decl_stmt|;
comment|// Keep the compile unit with each attribute in
comment|// case we have DW_FORM_ref_addr values
name|dw_offset_t
name|die_offset
decl_stmt|;
name|DWARFAttribute
name|attr
decl_stmt|;
block|}
struct|;
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|AttributeValue
operator|,
literal|8
operator|>
name|collection
expr_stmt|;
name|collection
name|m_infos
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SymbolFileDWARF_DWARFAttribute_h_
end_comment

end_unit

