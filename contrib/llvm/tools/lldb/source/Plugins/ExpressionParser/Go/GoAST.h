begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- GoAST.h -------------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// DO NOT EDIT.
end_comment

begin_comment
comment|// Generated by gen_go_ast.py
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_GoAST_h
end_ifndef

begin_define
define|#
directive|define
name|liblldb_GoAST_h
end_define

begin_include
include|#
directive|include
file|"lldb/lldb-forward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"Plugins/ExpressionParser/Go/GoLexer.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|GoASTNode
block|{
name|public
label|:
typedef|typedef
name|GoLexer
operator|::
name|TokenType
name|TokenType
expr_stmt|;
typedef|typedef
name|GoLexer
operator|::
name|Token
name|Token
expr_stmt|;
enum|enum
name|ChanDir
block|{
name|eChanBidir
block|,
name|eChanSend
block|,
name|eChanRecv
block|,     }
enum|;
enum|enum
name|NodeKind
block|{
name|eBadDecl
block|,
name|eFuncDecl
block|,
name|eGenDecl
block|,
name|eArrayType
block|,
name|eBadExpr
block|,
name|eBasicLit
block|,
name|eBinaryExpr
block|,
name|eIdent
block|,
name|eCallExpr
block|,
name|eChanType
block|,
name|eCompositeLit
block|,
name|eEllipsis
block|,
name|eFuncType
block|,
name|eFuncLit
block|,
name|eIndexExpr
block|,
name|eInterfaceType
block|,
name|eKeyValueExpr
block|,
name|eMapType
block|,
name|eParenExpr
block|,
name|eSelectorExpr
block|,
name|eSliceExpr
block|,
name|eStarExpr
block|,
name|eStructType
block|,
name|eTypeAssertExpr
block|,
name|eUnaryExpr
block|,
name|eImportSpec
block|,
name|eTypeSpec
block|,
name|eValueSpec
block|,
name|eAssignStmt
block|,
name|eBadStmt
block|,
name|eBlockStmt
block|,
name|eBranchStmt
block|,
name|eCaseClause
block|,
name|eCommClause
block|,
name|eDeclStmt
block|,
name|eDeferStmt
block|,
name|eEmptyStmt
block|,
name|eExprStmt
block|,
name|eForStmt
block|,
name|eGoStmt
block|,
name|eIfStmt
block|,
name|eIncDecStmt
block|,
name|eLabeledStmt
block|,
name|eRangeStmt
block|,
name|eReturnStmt
block|,
name|eSelectStmt
block|,
name|eSendStmt
block|,
name|eSwitchStmt
block|,
name|eTypeSwitchStmt
block|,
name|eField
block|,
name|eFieldList
block|,     }
enum|;
name|virtual
operator|~
name|GoASTNode
argument_list|()
operator|=
expr|default
expr_stmt|;
name|NodeKind
name|GetKind
argument_list|()
specifier|const
block|{
return|return
name|m_kind
return|;
block|}
name|virtual
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
operator|=
literal|0
expr_stmt|;
name|template
operator|<
name|typename
name|V
operator|>
name|void
name|WalkChildren
argument_list|(
name|V
operator|&
name|v
argument_list|)
expr_stmt|;
name|protected
label|:
name|explicit
name|GoASTNode
argument_list|(
argument|NodeKind kind
argument_list|)
block|:
name|m_kind
argument_list|(
argument|kind
argument_list|)
block|{ }
name|private
label|:
specifier|const
name|NodeKind
name|m_kind
decl_stmt|;
name|GoASTNode
argument_list|(
specifier|const
name|GoASTNode
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
specifier|const
name|GoASTNode
modifier|&
name|operator
init|=
operator|(
specifier|const
name|GoASTNode
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
block|}
empty_stmt|;
name|class
name|GoASTDecl
range|:
name|public
name|GoASTNode
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|V
operator|>
name|R
name|Visit
argument_list|(
argument|V *v
argument_list|)
specifier|const
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|>=
name|eBadDecl
operator|&&
name|n
operator|->
name|GetKind
argument_list|()
operator|<=
name|eGenDecl
return|;
block|}
name|protected
operator|:
name|explicit
name|GoASTDecl
argument_list|(
argument|NodeKind kind
argument_list|)
operator|:
name|GoASTNode
argument_list|(
argument|kind
argument_list|)
block|{ }
name|private
operator|:
name|GoASTDecl
argument_list|(
specifier|const
name|GoASTDecl
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTDecl
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTDecl
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTExpr
range|:
name|public
name|GoASTNode
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|V
operator|>
name|R
name|Visit
argument_list|(
argument|V *v
argument_list|)
specifier|const
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|>=
name|eArrayType
operator|&&
name|n
operator|->
name|GetKind
argument_list|()
operator|<=
name|eUnaryExpr
return|;
block|}
name|protected
operator|:
name|explicit
name|GoASTExpr
argument_list|(
argument|NodeKind kind
argument_list|)
operator|:
name|GoASTNode
argument_list|(
argument|kind
argument_list|)
block|{ }
name|private
operator|:
name|GoASTExpr
argument_list|(
specifier|const
name|GoASTExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTSpec
range|:
name|public
name|GoASTNode
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|V
operator|>
name|R
name|Visit
argument_list|(
argument|V *v
argument_list|)
specifier|const
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|>=
name|eImportSpec
operator|&&
name|n
operator|->
name|GetKind
argument_list|()
operator|<=
name|eValueSpec
return|;
block|}
name|protected
operator|:
name|explicit
name|GoASTSpec
argument_list|(
argument|NodeKind kind
argument_list|)
operator|:
name|GoASTNode
argument_list|(
argument|kind
argument_list|)
block|{ }
name|private
operator|:
name|GoASTSpec
argument_list|(
specifier|const
name|GoASTSpec
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTSpec
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTSpec
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTStmt
range|:
name|public
name|GoASTNode
block|{
name|public
operator|:
name|template
operator|<
name|typename
name|R
block|,
name|typename
name|V
operator|>
name|R
name|Visit
argument_list|(
argument|V *v
argument_list|)
specifier|const
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|>=
name|eAssignStmt
operator|&&
name|n
operator|->
name|GetKind
argument_list|()
operator|<=
name|eTypeSwitchStmt
return|;
block|}
name|protected
operator|:
name|explicit
name|GoASTStmt
argument_list|(
argument|NodeKind kind
argument_list|)
operator|:
name|GoASTNode
argument_list|(
argument|kind
argument_list|)
block|{ }
name|private
operator|:
name|GoASTStmt
argument_list|(
specifier|const
name|GoASTStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTArrayType
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTArrayType
argument_list|(
name|GoASTExpr
operator|*
name|len
argument_list|,
name|GoASTExpr
operator|*
name|elt
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eArrayType
argument_list|)
block|,
name|m_len_up
argument_list|(
name|len
argument_list|)
block|,
name|m_elt_up
argument_list|(
argument|elt
argument_list|)
block|{}
operator|~
name|GoASTArrayType
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"ArrayType"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eArrayType
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetLen
argument_list|()
specifier|const
block|{
return|return
name|m_len_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetLen
argument_list|(
argument|GoASTExpr *len
argument_list|)
block|{
name|m_len_up
operator|.
name|reset
argument_list|(
name|len
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetElt
argument_list|()
specifier|const
block|{
return|return
name|m_elt_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetElt
argument_list|(
argument|GoASTExpr *elt
argument_list|)
block|{
name|m_elt_up
operator|.
name|reset
argument_list|(
name|elt
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_len_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_elt_up
block|;
name|GoASTArrayType
argument_list|(
specifier|const
name|GoASTArrayType
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTArrayType
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTArrayType
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTAssignStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|explicit
name|GoASTAssignStmt
argument_list|(
argument|bool define
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eAssignStmt
argument_list|)
block|,
name|m_define
argument_list|(
argument|define
argument_list|)
block|{}
operator|~
name|GoASTAssignStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"AssignStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eAssignStmt
return|;
block|}
name|size_t
name|NumLhs
argument_list|()
specifier|const
block|{
return|return
name|m_lhs
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetLhs
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_lhs
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddLhs
argument_list|(
argument|GoASTExpr *lhs
argument_list|)
block|{
name|m_lhs
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
operator|(
name|lhs
operator|)
argument_list|)
block|;     }
name|size_t
name|NumRhs
argument_list|()
specifier|const
block|{
return|return
name|m_rhs
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetRhs
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_rhs
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddRhs
argument_list|(
argument|GoASTExpr *rhs
argument_list|)
block|{
name|m_rhs
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
operator|(
name|rhs
operator|)
argument_list|)
block|;     }
name|bool
name|GetDefine
argument_list|()
specifier|const
block|{
return|return
name|m_define
return|;
block|}
name|void
name|SetDefine
argument_list|(
argument|bool define
argument_list|)
block|{
name|m_define
operator|=
name|define
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
expr|>
name|m_lhs
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
expr|>
name|m_rhs
block|;
name|bool
name|m_define
block|;
name|GoASTAssignStmt
argument_list|(
specifier|const
name|GoASTAssignStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTAssignStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTAssignStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTBadDecl
range|:
name|public
name|GoASTDecl
block|{
name|public
operator|:
name|GoASTBadDecl
argument_list|()
operator|:
name|GoASTDecl
argument_list|(
argument|eBadDecl
argument_list|)
block|{}
operator|~
name|GoASTBadDecl
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"BadDecl"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eBadDecl
return|;
block|}
name|GoASTBadDecl
argument_list|(
specifier|const
name|GoASTBadDecl
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTBadDecl
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTBadDecl
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTBadExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTBadExpr
argument_list|()
operator|:
name|GoASTExpr
argument_list|(
argument|eBadExpr
argument_list|)
block|{}
operator|~
name|GoASTBadExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"BadExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eBadExpr
return|;
block|}
name|GoASTBadExpr
argument_list|(
specifier|const
name|GoASTBadExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTBadExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTBadExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTBadStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTBadStmt
argument_list|()
operator|:
name|GoASTStmt
argument_list|(
argument|eBadStmt
argument_list|)
block|{}
operator|~
name|GoASTBadStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"BadStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eBadStmt
return|;
block|}
name|GoASTBadStmt
argument_list|(
specifier|const
name|GoASTBadStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTBadStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTBadStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTBasicLit
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|explicit
name|GoASTBasicLit
argument_list|(
argument|Token value
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eBasicLit
argument_list|)
block|,
name|m_value
argument_list|(
argument|value
argument_list|)
block|{}
operator|~
name|GoASTBasicLit
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"BasicLit"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eBasicLit
return|;
block|}
name|Token
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_value
return|;
block|}
name|void
name|SetValue
argument_list|(
argument|Token value
argument_list|)
block|{
name|m_value
operator|=
name|value
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|Token
name|m_value
block|;
name|GoASTBasicLit
argument_list|(
specifier|const
name|GoASTBasicLit
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTBasicLit
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTBasicLit
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTBinaryExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTBinaryExpr
argument_list|(
argument|GoASTExpr *x
argument_list|,
argument|GoASTExpr *y
argument_list|,
argument|TokenType op
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eBinaryExpr
argument_list|)
block|,
name|m_x_up
argument_list|(
name|x
argument_list|)
block|,
name|m_y_up
argument_list|(
name|y
argument_list|)
block|,
name|m_op
argument_list|(
argument|op
argument_list|)
block|{}
operator|~
name|GoASTBinaryExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"BinaryExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eBinaryExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetY
argument_list|()
specifier|const
block|{
return|return
name|m_y_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetY
argument_list|(
argument|GoASTExpr *y
argument_list|)
block|{
name|m_y_up
operator|.
name|reset
argument_list|(
name|y
argument_list|)
block|;     }
name|TokenType
name|GetOp
argument_list|()
specifier|const
block|{
return|return
name|m_op
return|;
block|}
name|void
name|SetOp
argument_list|(
argument|TokenType op
argument_list|)
block|{
name|m_op
operator|=
name|op
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_y_up
block|;
name|TokenType
name|m_op
block|;
name|GoASTBinaryExpr
argument_list|(
specifier|const
name|GoASTBinaryExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTBinaryExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTBinaryExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTBlockStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTBlockStmt
argument_list|()
operator|:
name|GoASTStmt
argument_list|(
argument|eBlockStmt
argument_list|)
block|{}
operator|~
name|GoASTBlockStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"BlockStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eBlockStmt
return|;
block|}
name|size_t
name|NumList
argument_list|()
specifier|const
block|{
return|return
name|m_list
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTStmt
operator|*
name|GetList
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_list
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddList
argument_list|(
argument|GoASTStmt *list
argument_list|)
block|{
name|m_list
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
operator|(
name|list
operator|)
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
expr|>
name|m_list
block|;
name|GoASTBlockStmt
argument_list|(
specifier|const
name|GoASTBlockStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTBlockStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTBlockStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTIdent
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|explicit
name|GoASTIdent
argument_list|(
argument|Token name
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eIdent
argument_list|)
block|,
name|m_name
argument_list|(
argument|name
argument_list|)
block|{}
operator|~
name|GoASTIdent
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"Ident"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eIdent
return|;
block|}
name|Token
name|GetName
argument_list|()
specifier|const
block|{
return|return
name|m_name
return|;
block|}
name|void
name|SetName
argument_list|(
argument|Token name
argument_list|)
block|{
name|m_name
operator|=
name|name
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|Token
name|m_name
block|;
name|GoASTIdent
argument_list|(
specifier|const
name|GoASTIdent
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTIdent
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTIdent
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTBranchStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTBranchStmt
argument_list|(
argument|GoASTIdent *label
argument_list|,
argument|TokenType tok
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eBranchStmt
argument_list|)
block|,
name|m_label_up
argument_list|(
name|label
argument_list|)
block|,
name|m_tok
argument_list|(
argument|tok
argument_list|)
block|{}
operator|~
name|GoASTBranchStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"BranchStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eBranchStmt
return|;
block|}
specifier|const
name|GoASTIdent
operator|*
name|GetLabel
argument_list|()
specifier|const
block|{
return|return
name|m_label_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetLabel
argument_list|(
argument|GoASTIdent *label
argument_list|)
block|{
name|m_label_up
operator|.
name|reset
argument_list|(
name|label
argument_list|)
block|;     }
name|TokenType
name|GetTok
argument_list|()
specifier|const
block|{
return|return
name|m_tok
return|;
block|}
name|void
name|SetTok
argument_list|(
argument|TokenType tok
argument_list|)
block|{
name|m_tok
operator|=
name|tok
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
name|m_label_up
block|;
name|TokenType
name|m_tok
block|;
name|GoASTBranchStmt
argument_list|(
specifier|const
name|GoASTBranchStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTBranchStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTBranchStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTCallExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|explicit
name|GoASTCallExpr
argument_list|(
argument|bool ellipsis
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eCallExpr
argument_list|)
block|,
name|m_ellipsis
argument_list|(
argument|ellipsis
argument_list|)
block|{}
operator|~
name|GoASTCallExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"CallExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eCallExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetFun
argument_list|()
specifier|const
block|{
return|return
name|m_fun_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetFun
argument_list|(
argument|GoASTExpr *fun
argument_list|)
block|{
name|m_fun_up
operator|.
name|reset
argument_list|(
name|fun
argument_list|)
block|;     }
name|size_t
name|NumArgs
argument_list|()
specifier|const
block|{
return|return
name|m_args
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetArgs
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_args
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddArgs
argument_list|(
argument|GoASTExpr *args
argument_list|)
block|{
name|m_args
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
operator|(
name|args
operator|)
argument_list|)
block|;     }
name|bool
name|GetEllipsis
argument_list|()
specifier|const
block|{
return|return
name|m_ellipsis
return|;
block|}
name|void
name|SetEllipsis
argument_list|(
argument|bool ellipsis
argument_list|)
block|{
name|m_ellipsis
operator|=
name|ellipsis
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_fun_up
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
expr|>
name|m_args
block|;
name|bool
name|m_ellipsis
block|;
name|GoASTCallExpr
argument_list|(
specifier|const
name|GoASTCallExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTCallExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTCallExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTCaseClause
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTCaseClause
argument_list|()
operator|:
name|GoASTStmt
argument_list|(
argument|eCaseClause
argument_list|)
block|{}
operator|~
name|GoASTCaseClause
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"CaseClause"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eCaseClause
return|;
block|}
name|size_t
name|NumList
argument_list|()
specifier|const
block|{
return|return
name|m_list
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetList
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_list
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddList
argument_list|(
argument|GoASTExpr *list
argument_list|)
block|{
name|m_list
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
operator|(
name|list
operator|)
argument_list|)
block|;     }
name|size_t
name|NumBody
argument_list|()
specifier|const
block|{
return|return
name|m_body
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTStmt
operator|*
name|GetBody
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_body
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddBody
argument_list|(
argument|GoASTStmt *body
argument_list|)
block|{
name|m_body
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
operator|(
name|body
operator|)
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
expr|>
name|m_list
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
expr|>
name|m_body
block|;
name|GoASTCaseClause
argument_list|(
specifier|const
name|GoASTCaseClause
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTCaseClause
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTCaseClause
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTChanType
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTChanType
argument_list|(
argument|ChanDir dir
argument_list|,
argument|GoASTExpr *value
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eChanType
argument_list|)
block|,
name|m_dir
argument_list|(
name|dir
argument_list|)
block|,
name|m_value_up
argument_list|(
argument|value
argument_list|)
block|{}
operator|~
name|GoASTChanType
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"ChanType"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eChanType
return|;
block|}
name|ChanDir
name|GetDir
argument_list|()
specifier|const
block|{
return|return
name|m_dir
return|;
block|}
name|void
name|SetDir
argument_list|(
argument|ChanDir dir
argument_list|)
block|{
name|m_dir
operator|=
name|dir
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_value_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetValue
argument_list|(
argument|GoASTExpr *value
argument_list|)
block|{
name|m_value_up
operator|.
name|reset
argument_list|(
name|value
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|ChanDir
name|m_dir
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_value_up
block|;
name|GoASTChanType
argument_list|(
specifier|const
name|GoASTChanType
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTChanType
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTChanType
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTCommClause
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTCommClause
argument_list|()
operator|:
name|GoASTStmt
argument_list|(
argument|eCommClause
argument_list|)
block|{}
operator|~
name|GoASTCommClause
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"CommClause"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eCommClause
return|;
block|}
specifier|const
name|GoASTStmt
operator|*
name|GetComm
argument_list|()
specifier|const
block|{
return|return
name|m_comm_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetComm
argument_list|(
argument|GoASTStmt *comm
argument_list|)
block|{
name|m_comm_up
operator|.
name|reset
argument_list|(
name|comm
argument_list|)
block|;     }
name|size_t
name|NumBody
argument_list|()
specifier|const
block|{
return|return
name|m_body
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTStmt
operator|*
name|GetBody
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_body
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddBody
argument_list|(
argument|GoASTStmt *body
argument_list|)
block|{
name|m_body
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
operator|(
name|body
operator|)
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_comm_up
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
expr|>
name|m_body
block|;
name|GoASTCommClause
argument_list|(
specifier|const
name|GoASTCommClause
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTCommClause
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTCommClause
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTCompositeLit
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTCompositeLit
argument_list|()
operator|:
name|GoASTExpr
argument_list|(
argument|eCompositeLit
argument_list|)
block|{}
operator|~
name|GoASTCompositeLit
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"CompositeLit"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eCompositeLit
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetType
argument_list|(
argument|GoASTExpr *type
argument_list|)
block|{
name|m_type_up
operator|.
name|reset
argument_list|(
name|type
argument_list|)
block|;     }
name|size_t
name|NumElts
argument_list|()
specifier|const
block|{
return|return
name|m_elts
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetElts
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_elts
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddElts
argument_list|(
argument|GoASTExpr *elts
argument_list|)
block|{
name|m_elts
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
operator|(
name|elts
operator|)
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_type_up
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
expr|>
name|m_elts
block|;
name|GoASTCompositeLit
argument_list|(
specifier|const
name|GoASTCompositeLit
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTCompositeLit
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTCompositeLit
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTDeclStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|explicit
name|GoASTDeclStmt
argument_list|(
name|GoASTDecl
operator|*
name|decl
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eDeclStmt
argument_list|)
block|,
name|m_decl_up
argument_list|(
argument|decl
argument_list|)
block|{}
operator|~
name|GoASTDeclStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"DeclStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eDeclStmt
return|;
block|}
specifier|const
name|GoASTDecl
operator|*
name|GetDecl
argument_list|()
specifier|const
block|{
return|return
name|m_decl_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetDecl
argument_list|(
argument|GoASTDecl *decl
argument_list|)
block|{
name|m_decl_up
operator|.
name|reset
argument_list|(
name|decl
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTDecl
operator|>
name|m_decl_up
block|;
name|GoASTDeclStmt
argument_list|(
specifier|const
name|GoASTDeclStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTDeclStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTDeclStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTDeferStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|explicit
name|GoASTDeferStmt
argument_list|(
name|GoASTCallExpr
operator|*
name|call
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eDeferStmt
argument_list|)
block|,
name|m_call_up
argument_list|(
argument|call
argument_list|)
block|{}
operator|~
name|GoASTDeferStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"DeferStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eDeferStmt
return|;
block|}
specifier|const
name|GoASTCallExpr
operator|*
name|GetCall
argument_list|()
specifier|const
block|{
return|return
name|m_call_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetCall
argument_list|(
argument|GoASTCallExpr *call
argument_list|)
block|{
name|m_call_up
operator|.
name|reset
argument_list|(
name|call
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTCallExpr
operator|>
name|m_call_up
block|;
name|GoASTDeferStmt
argument_list|(
specifier|const
name|GoASTDeferStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTDeferStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTDeferStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTEllipsis
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|explicit
name|GoASTEllipsis
argument_list|(
name|GoASTExpr
operator|*
name|elt
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eEllipsis
argument_list|)
block|,
name|m_elt_up
argument_list|(
argument|elt
argument_list|)
block|{}
operator|~
name|GoASTEllipsis
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"Ellipsis"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eEllipsis
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetElt
argument_list|()
specifier|const
block|{
return|return
name|m_elt_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetElt
argument_list|(
argument|GoASTExpr *elt
argument_list|)
block|{
name|m_elt_up
operator|.
name|reset
argument_list|(
name|elt
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_elt_up
block|;
name|GoASTEllipsis
argument_list|(
specifier|const
name|GoASTEllipsis
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTEllipsis
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTEllipsis
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTEmptyStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTEmptyStmt
argument_list|()
operator|:
name|GoASTStmt
argument_list|(
argument|eEmptyStmt
argument_list|)
block|{}
operator|~
name|GoASTEmptyStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"EmptyStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eEmptyStmt
return|;
block|}
name|GoASTEmptyStmt
argument_list|(
specifier|const
name|GoASTEmptyStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTEmptyStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTEmptyStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTExprStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|explicit
name|GoASTExprStmt
argument_list|(
name|GoASTExpr
operator|*
name|x
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eExprStmt
argument_list|)
block|,
name|m_x_up
argument_list|(
argument|x
argument_list|)
block|{}
operator|~
name|GoASTExprStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"ExprStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eExprStmt
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|GoASTExprStmt
argument_list|(
specifier|const
name|GoASTExprStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTExprStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTExprStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTField
range|:
name|public
name|GoASTNode
block|{
name|public
operator|:
name|GoASTField
argument_list|()
operator|:
name|GoASTNode
argument_list|(
argument|eField
argument_list|)
block|{}
operator|~
name|GoASTField
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"Field"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eField
return|;
block|}
name|size_t
name|NumNames
argument_list|()
specifier|const
block|{
return|return
name|m_names
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTIdent
operator|*
name|GetNames
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_names
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddNames
argument_list|(
argument|GoASTIdent *names
argument_list|)
block|{
name|m_names
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
operator|(
name|names
operator|)
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetType
argument_list|(
argument|GoASTExpr *type
argument_list|)
block|{
name|m_type_up
operator|.
name|reset
argument_list|(
name|type
argument_list|)
block|;     }
specifier|const
name|GoASTBasicLit
operator|*
name|GetTag
argument_list|()
specifier|const
block|{
return|return
name|m_tag_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetTag
argument_list|(
argument|GoASTBasicLit *tag
argument_list|)
block|{
name|m_tag_up
operator|.
name|reset
argument_list|(
name|tag
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
expr|>
name|m_names
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_type_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBasicLit
operator|>
name|m_tag_up
block|;
name|GoASTField
argument_list|(
specifier|const
name|GoASTField
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTField
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTField
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTFieldList
range|:
name|public
name|GoASTNode
block|{
name|public
operator|:
name|GoASTFieldList
argument_list|()
operator|:
name|GoASTNode
argument_list|(
argument|eFieldList
argument_list|)
block|{}
operator|~
name|GoASTFieldList
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"FieldList"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eFieldList
return|;
block|}
name|size_t
name|NumList
argument_list|()
specifier|const
block|{
return|return
name|m_list
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTField
operator|*
name|GetList
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_list
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddList
argument_list|(
argument|GoASTField *list
argument_list|)
block|{
name|m_list
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTField
operator|>
operator|(
name|list
operator|)
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTField
operator|>
expr|>
name|m_list
block|;
name|GoASTFieldList
argument_list|(
specifier|const
name|GoASTFieldList
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTFieldList
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTFieldList
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTForStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTForStmt
argument_list|(
name|GoASTStmt
operator|*
name|init
argument_list|,
name|GoASTExpr
operator|*
name|cond
argument_list|,
name|GoASTStmt
operator|*
name|post
argument_list|,
name|GoASTBlockStmt
operator|*
name|body
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eForStmt
argument_list|)
block|,
name|m_init_up
argument_list|(
name|init
argument_list|)
block|,
name|m_cond_up
argument_list|(
name|cond
argument_list|)
block|,
name|m_post_up
argument_list|(
name|post
argument_list|)
block|,
name|m_body_up
argument_list|(
argument|body
argument_list|)
block|{}
operator|~
name|GoASTForStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"ForStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eForStmt
return|;
block|}
specifier|const
name|GoASTStmt
operator|*
name|GetInit
argument_list|()
specifier|const
block|{
return|return
name|m_init_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetInit
argument_list|(
argument|GoASTStmt *init
argument_list|)
block|{
name|m_init_up
operator|.
name|reset
argument_list|(
name|init
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetCond
argument_list|()
specifier|const
block|{
return|return
name|m_cond_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetCond
argument_list|(
argument|GoASTExpr *cond
argument_list|)
block|{
name|m_cond_up
operator|.
name|reset
argument_list|(
name|cond
argument_list|)
block|;     }
specifier|const
name|GoASTStmt
operator|*
name|GetPost
argument_list|()
specifier|const
block|{
return|return
name|m_post_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetPost
argument_list|(
argument|GoASTStmt *post
argument_list|)
block|{
name|m_post_up
operator|.
name|reset
argument_list|(
name|post
argument_list|)
block|;     }
specifier|const
name|GoASTBlockStmt
operator|*
name|GetBody
argument_list|()
specifier|const
block|{
return|return
name|m_body_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetBody
argument_list|(
argument|GoASTBlockStmt *body
argument_list|)
block|{
name|m_body_up
operator|.
name|reset
argument_list|(
name|body
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_init_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_cond_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_post_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBlockStmt
operator|>
name|m_body_up
block|;
name|GoASTForStmt
argument_list|(
specifier|const
name|GoASTForStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTForStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTForStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTFuncType
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTFuncType
argument_list|(
name|GoASTFieldList
operator|*
name|params
argument_list|,
name|GoASTFieldList
operator|*
name|results
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eFuncType
argument_list|)
block|,
name|m_params_up
argument_list|(
name|params
argument_list|)
block|,
name|m_results_up
argument_list|(
argument|results
argument_list|)
block|{}
operator|~
name|GoASTFuncType
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"FuncType"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eFuncType
return|;
block|}
specifier|const
name|GoASTFieldList
operator|*
name|GetParams
argument_list|()
specifier|const
block|{
return|return
name|m_params_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetParams
argument_list|(
argument|GoASTFieldList *params
argument_list|)
block|{
name|m_params_up
operator|.
name|reset
argument_list|(
name|params
argument_list|)
block|;     }
specifier|const
name|GoASTFieldList
operator|*
name|GetResults
argument_list|()
specifier|const
block|{
return|return
name|m_results_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetResults
argument_list|(
argument|GoASTFieldList *results
argument_list|)
block|{
name|m_results_up
operator|.
name|reset
argument_list|(
name|results
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTFieldList
operator|>
name|m_params_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTFieldList
operator|>
name|m_results_up
block|;
name|GoASTFuncType
argument_list|(
specifier|const
name|GoASTFuncType
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTFuncType
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTFuncType
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTFuncDecl
range|:
name|public
name|GoASTDecl
block|{
name|public
operator|:
name|GoASTFuncDecl
argument_list|(
name|GoASTFieldList
operator|*
name|recv
argument_list|,
name|GoASTIdent
operator|*
name|name
argument_list|,
name|GoASTFuncType
operator|*
name|type
argument_list|,
name|GoASTBlockStmt
operator|*
name|body
argument_list|)
operator|:
name|GoASTDecl
argument_list|(
name|eFuncDecl
argument_list|)
block|,
name|m_recv_up
argument_list|(
name|recv
argument_list|)
block|,
name|m_name_up
argument_list|(
name|name
argument_list|)
block|,
name|m_type_up
argument_list|(
name|type
argument_list|)
block|,
name|m_body_up
argument_list|(
argument|body
argument_list|)
block|{}
operator|~
name|GoASTFuncDecl
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"FuncDecl"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eFuncDecl
return|;
block|}
specifier|const
name|GoASTFieldList
operator|*
name|GetRecv
argument_list|()
specifier|const
block|{
return|return
name|m_recv_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetRecv
argument_list|(
argument|GoASTFieldList *recv
argument_list|)
block|{
name|m_recv_up
operator|.
name|reset
argument_list|(
name|recv
argument_list|)
block|;     }
specifier|const
name|GoASTIdent
operator|*
name|GetName
argument_list|()
specifier|const
block|{
return|return
name|m_name_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetName
argument_list|(
argument|GoASTIdent *name
argument_list|)
block|{
name|m_name_up
operator|.
name|reset
argument_list|(
name|name
argument_list|)
block|;     }
specifier|const
name|GoASTFuncType
operator|*
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetType
argument_list|(
argument|GoASTFuncType *type
argument_list|)
block|{
name|m_type_up
operator|.
name|reset
argument_list|(
name|type
argument_list|)
block|;     }
specifier|const
name|GoASTBlockStmt
operator|*
name|GetBody
argument_list|()
specifier|const
block|{
return|return
name|m_body_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetBody
argument_list|(
argument|GoASTBlockStmt *body
argument_list|)
block|{
name|m_body_up
operator|.
name|reset
argument_list|(
name|body
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTFieldList
operator|>
name|m_recv_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
name|m_name_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTFuncType
operator|>
name|m_type_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBlockStmt
operator|>
name|m_body_up
block|;
name|GoASTFuncDecl
argument_list|(
specifier|const
name|GoASTFuncDecl
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTFuncDecl
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTFuncDecl
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTFuncLit
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTFuncLit
argument_list|(
name|GoASTFuncType
operator|*
name|type
argument_list|,
name|GoASTBlockStmt
operator|*
name|body
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eFuncLit
argument_list|)
block|,
name|m_type_up
argument_list|(
name|type
argument_list|)
block|,
name|m_body_up
argument_list|(
argument|body
argument_list|)
block|{}
operator|~
name|GoASTFuncLit
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"FuncLit"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eFuncLit
return|;
block|}
specifier|const
name|GoASTFuncType
operator|*
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetType
argument_list|(
argument|GoASTFuncType *type
argument_list|)
block|{
name|m_type_up
operator|.
name|reset
argument_list|(
name|type
argument_list|)
block|;     }
specifier|const
name|GoASTBlockStmt
operator|*
name|GetBody
argument_list|()
specifier|const
block|{
return|return
name|m_body_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetBody
argument_list|(
argument|GoASTBlockStmt *body
argument_list|)
block|{
name|m_body_up
operator|.
name|reset
argument_list|(
name|body
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTFuncType
operator|>
name|m_type_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBlockStmt
operator|>
name|m_body_up
block|;
name|GoASTFuncLit
argument_list|(
specifier|const
name|GoASTFuncLit
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTFuncLit
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTFuncLit
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTGenDecl
range|:
name|public
name|GoASTDecl
block|{
name|public
operator|:
name|explicit
name|GoASTGenDecl
argument_list|(
argument|TokenType tok
argument_list|)
operator|:
name|GoASTDecl
argument_list|(
name|eGenDecl
argument_list|)
block|,
name|m_tok
argument_list|(
argument|tok
argument_list|)
block|{}
operator|~
name|GoASTGenDecl
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"GenDecl"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eGenDecl
return|;
block|}
name|TokenType
name|GetTok
argument_list|()
specifier|const
block|{
return|return
name|m_tok
return|;
block|}
name|void
name|SetTok
argument_list|(
argument|TokenType tok
argument_list|)
block|{
name|m_tok
operator|=
name|tok
block|;     }
name|size_t
name|NumSpecs
argument_list|()
specifier|const
block|{
return|return
name|m_specs
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTSpec
operator|*
name|GetSpecs
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_specs
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddSpecs
argument_list|(
argument|GoASTSpec *specs
argument_list|)
block|{
name|m_specs
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTSpec
operator|>
operator|(
name|specs
operator|)
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|TokenType
name|m_tok
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTSpec
operator|>
expr|>
name|m_specs
block|;
name|GoASTGenDecl
argument_list|(
specifier|const
name|GoASTGenDecl
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTGenDecl
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTGenDecl
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTGoStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|explicit
name|GoASTGoStmt
argument_list|(
name|GoASTCallExpr
operator|*
name|call
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eGoStmt
argument_list|)
block|,
name|m_call_up
argument_list|(
argument|call
argument_list|)
block|{}
operator|~
name|GoASTGoStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"GoStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eGoStmt
return|;
block|}
specifier|const
name|GoASTCallExpr
operator|*
name|GetCall
argument_list|()
specifier|const
block|{
return|return
name|m_call_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetCall
argument_list|(
argument|GoASTCallExpr *call
argument_list|)
block|{
name|m_call_up
operator|.
name|reset
argument_list|(
name|call
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTCallExpr
operator|>
name|m_call_up
block|;
name|GoASTGoStmt
argument_list|(
specifier|const
name|GoASTGoStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTGoStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTGoStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTIfStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTIfStmt
argument_list|(
name|GoASTStmt
operator|*
name|init
argument_list|,
name|GoASTExpr
operator|*
name|cond
argument_list|,
name|GoASTBlockStmt
operator|*
name|body
argument_list|,
name|GoASTStmt
operator|*
name|els
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eIfStmt
argument_list|)
block|,
name|m_init_up
argument_list|(
name|init
argument_list|)
block|,
name|m_cond_up
argument_list|(
name|cond
argument_list|)
block|,
name|m_body_up
argument_list|(
name|body
argument_list|)
block|,
name|m_els_up
argument_list|(
argument|els
argument_list|)
block|{}
operator|~
name|GoASTIfStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"IfStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eIfStmt
return|;
block|}
specifier|const
name|GoASTStmt
operator|*
name|GetInit
argument_list|()
specifier|const
block|{
return|return
name|m_init_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetInit
argument_list|(
argument|GoASTStmt *init
argument_list|)
block|{
name|m_init_up
operator|.
name|reset
argument_list|(
name|init
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetCond
argument_list|()
specifier|const
block|{
return|return
name|m_cond_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetCond
argument_list|(
argument|GoASTExpr *cond
argument_list|)
block|{
name|m_cond_up
operator|.
name|reset
argument_list|(
name|cond
argument_list|)
block|;     }
specifier|const
name|GoASTBlockStmt
operator|*
name|GetBody
argument_list|()
specifier|const
block|{
return|return
name|m_body_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetBody
argument_list|(
argument|GoASTBlockStmt *body
argument_list|)
block|{
name|m_body_up
operator|.
name|reset
argument_list|(
name|body
argument_list|)
block|;     }
specifier|const
name|GoASTStmt
operator|*
name|GetEls
argument_list|()
specifier|const
block|{
return|return
name|m_els_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetEls
argument_list|(
argument|GoASTStmt *els
argument_list|)
block|{
name|m_els_up
operator|.
name|reset
argument_list|(
name|els
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_init_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_cond_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBlockStmt
operator|>
name|m_body_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_els_up
block|;
name|GoASTIfStmt
argument_list|(
specifier|const
name|GoASTIfStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTIfStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTIfStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTImportSpec
range|:
name|public
name|GoASTSpec
block|{
name|public
operator|:
name|GoASTImportSpec
argument_list|(
name|GoASTIdent
operator|*
name|name
argument_list|,
name|GoASTBasicLit
operator|*
name|path
argument_list|)
operator|:
name|GoASTSpec
argument_list|(
name|eImportSpec
argument_list|)
block|,
name|m_name_up
argument_list|(
name|name
argument_list|)
block|,
name|m_path_up
argument_list|(
argument|path
argument_list|)
block|{}
operator|~
name|GoASTImportSpec
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"ImportSpec"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eImportSpec
return|;
block|}
specifier|const
name|GoASTIdent
operator|*
name|GetName
argument_list|()
specifier|const
block|{
return|return
name|m_name_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetName
argument_list|(
argument|GoASTIdent *name
argument_list|)
block|{
name|m_name_up
operator|.
name|reset
argument_list|(
name|name
argument_list|)
block|;     }
specifier|const
name|GoASTBasicLit
operator|*
name|GetPath
argument_list|()
specifier|const
block|{
return|return
name|m_path_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetPath
argument_list|(
argument|GoASTBasicLit *path
argument_list|)
block|{
name|m_path_up
operator|.
name|reset
argument_list|(
name|path
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
name|m_name_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBasicLit
operator|>
name|m_path_up
block|;
name|GoASTImportSpec
argument_list|(
specifier|const
name|GoASTImportSpec
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTImportSpec
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTImportSpec
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTIncDecStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTIncDecStmt
argument_list|(
argument|GoASTExpr *x
argument_list|,
argument|TokenType tok
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eIncDecStmt
argument_list|)
block|,
name|m_x_up
argument_list|(
name|x
argument_list|)
block|,
name|m_tok
argument_list|(
argument|tok
argument_list|)
block|{}
operator|~
name|GoASTIncDecStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"IncDecStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eIncDecStmt
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
name|TokenType
name|GetTok
argument_list|()
specifier|const
block|{
return|return
name|m_tok
return|;
block|}
name|void
name|SetTok
argument_list|(
argument|TokenType tok
argument_list|)
block|{
name|m_tok
operator|=
name|tok
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|TokenType
name|m_tok
block|;
name|GoASTIncDecStmt
argument_list|(
specifier|const
name|GoASTIncDecStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTIncDecStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTIncDecStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTIndexExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTIndexExpr
argument_list|(
name|GoASTExpr
operator|*
name|x
argument_list|,
name|GoASTExpr
operator|*
name|index
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eIndexExpr
argument_list|)
block|,
name|m_x_up
argument_list|(
name|x
argument_list|)
block|,
name|m_index_up
argument_list|(
argument|index
argument_list|)
block|{}
operator|~
name|GoASTIndexExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"IndexExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eIndexExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetIndex
argument_list|()
specifier|const
block|{
return|return
name|m_index_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetIndex
argument_list|(
argument|GoASTExpr *index
argument_list|)
block|{
name|m_index_up
operator|.
name|reset
argument_list|(
name|index
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_index_up
block|;
name|GoASTIndexExpr
argument_list|(
specifier|const
name|GoASTIndexExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTIndexExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTIndexExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTInterfaceType
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|explicit
name|GoASTInterfaceType
argument_list|(
name|GoASTFieldList
operator|*
name|methods
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eInterfaceType
argument_list|)
block|,
name|m_methods_up
argument_list|(
argument|methods
argument_list|)
block|{}
operator|~
name|GoASTInterfaceType
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"InterfaceType"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eInterfaceType
return|;
block|}
specifier|const
name|GoASTFieldList
operator|*
name|GetMethods
argument_list|()
specifier|const
block|{
return|return
name|m_methods_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetMethods
argument_list|(
argument|GoASTFieldList *methods
argument_list|)
block|{
name|m_methods_up
operator|.
name|reset
argument_list|(
name|methods
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTFieldList
operator|>
name|m_methods_up
block|;
name|GoASTInterfaceType
argument_list|(
specifier|const
name|GoASTInterfaceType
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTInterfaceType
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTInterfaceType
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTKeyValueExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTKeyValueExpr
argument_list|(
name|GoASTExpr
operator|*
name|key
argument_list|,
name|GoASTExpr
operator|*
name|value
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eKeyValueExpr
argument_list|)
block|,
name|m_key_up
argument_list|(
name|key
argument_list|)
block|,
name|m_value_up
argument_list|(
argument|value
argument_list|)
block|{}
operator|~
name|GoASTKeyValueExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"KeyValueExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eKeyValueExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetKey
argument_list|()
specifier|const
block|{
return|return
name|m_key_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetKey
argument_list|(
argument|GoASTExpr *key
argument_list|)
block|{
name|m_key_up
operator|.
name|reset
argument_list|(
name|key
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_value_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetValue
argument_list|(
argument|GoASTExpr *value
argument_list|)
block|{
name|m_value_up
operator|.
name|reset
argument_list|(
name|value
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_key_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_value_up
block|;
name|GoASTKeyValueExpr
argument_list|(
specifier|const
name|GoASTKeyValueExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTKeyValueExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTKeyValueExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTLabeledStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTLabeledStmt
argument_list|(
name|GoASTIdent
operator|*
name|label
argument_list|,
name|GoASTStmt
operator|*
name|stmt
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eLabeledStmt
argument_list|)
block|,
name|m_label_up
argument_list|(
name|label
argument_list|)
block|,
name|m_stmt_up
argument_list|(
argument|stmt
argument_list|)
block|{}
operator|~
name|GoASTLabeledStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"LabeledStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eLabeledStmt
return|;
block|}
specifier|const
name|GoASTIdent
operator|*
name|GetLabel
argument_list|()
specifier|const
block|{
return|return
name|m_label_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetLabel
argument_list|(
argument|GoASTIdent *label
argument_list|)
block|{
name|m_label_up
operator|.
name|reset
argument_list|(
name|label
argument_list|)
block|;     }
specifier|const
name|GoASTStmt
operator|*
name|GetStmt
argument_list|()
specifier|const
block|{
return|return
name|m_stmt_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetStmt
argument_list|(
argument|GoASTStmt *stmt
argument_list|)
block|{
name|m_stmt_up
operator|.
name|reset
argument_list|(
name|stmt
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
name|m_label_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_stmt_up
block|;
name|GoASTLabeledStmt
argument_list|(
specifier|const
name|GoASTLabeledStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTLabeledStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTLabeledStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTMapType
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTMapType
argument_list|(
name|GoASTExpr
operator|*
name|key
argument_list|,
name|GoASTExpr
operator|*
name|value
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eMapType
argument_list|)
block|,
name|m_key_up
argument_list|(
name|key
argument_list|)
block|,
name|m_value_up
argument_list|(
argument|value
argument_list|)
block|{}
operator|~
name|GoASTMapType
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"MapType"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eMapType
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetKey
argument_list|()
specifier|const
block|{
return|return
name|m_key_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetKey
argument_list|(
argument|GoASTExpr *key
argument_list|)
block|{
name|m_key_up
operator|.
name|reset
argument_list|(
name|key
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_value_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetValue
argument_list|(
argument|GoASTExpr *value
argument_list|)
block|{
name|m_value_up
operator|.
name|reset
argument_list|(
name|value
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_key_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_value_up
block|;
name|GoASTMapType
argument_list|(
specifier|const
name|GoASTMapType
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTMapType
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTMapType
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTParenExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|explicit
name|GoASTParenExpr
argument_list|(
name|GoASTExpr
operator|*
name|x
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eParenExpr
argument_list|)
block|,
name|m_x_up
argument_list|(
argument|x
argument_list|)
block|{}
operator|~
name|GoASTParenExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"ParenExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eParenExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|GoASTParenExpr
argument_list|(
specifier|const
name|GoASTParenExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTParenExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTParenExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTRangeStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTRangeStmt
argument_list|(
argument|GoASTExpr *key
argument_list|,
argument|GoASTExpr *value
argument_list|,
argument|bool define
argument_list|,
argument|GoASTExpr *x
argument_list|,
argument|GoASTBlockStmt *body
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eRangeStmt
argument_list|)
block|,
name|m_key_up
argument_list|(
name|key
argument_list|)
block|,
name|m_value_up
argument_list|(
name|value
argument_list|)
block|,
name|m_define
argument_list|(
name|define
argument_list|)
block|,
name|m_x_up
argument_list|(
name|x
argument_list|)
block|,
name|m_body_up
argument_list|(
argument|body
argument_list|)
block|{}
operator|~
name|GoASTRangeStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"RangeStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eRangeStmt
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetKey
argument_list|()
specifier|const
block|{
return|return
name|m_key_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetKey
argument_list|(
argument|GoASTExpr *key
argument_list|)
block|{
name|m_key_up
operator|.
name|reset
argument_list|(
name|key
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_value_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetValue
argument_list|(
argument|GoASTExpr *value
argument_list|)
block|{
name|m_value_up
operator|.
name|reset
argument_list|(
name|value
argument_list|)
block|;     }
name|bool
name|GetDefine
argument_list|()
specifier|const
block|{
return|return
name|m_define
return|;
block|}
name|void
name|SetDefine
argument_list|(
argument|bool define
argument_list|)
block|{
name|m_define
operator|=
name|define
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
specifier|const
name|GoASTBlockStmt
operator|*
name|GetBody
argument_list|()
specifier|const
block|{
return|return
name|m_body_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetBody
argument_list|(
argument|GoASTBlockStmt *body
argument_list|)
block|{
name|m_body_up
operator|.
name|reset
argument_list|(
name|body
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_key_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_value_up
block|;
name|bool
name|m_define
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBlockStmt
operator|>
name|m_body_up
block|;
name|GoASTRangeStmt
argument_list|(
specifier|const
name|GoASTRangeStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTRangeStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTRangeStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTReturnStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTReturnStmt
argument_list|()
operator|:
name|GoASTStmt
argument_list|(
argument|eReturnStmt
argument_list|)
block|{}
operator|~
name|GoASTReturnStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"ReturnStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eReturnStmt
return|;
block|}
name|size_t
name|NumResults
argument_list|()
specifier|const
block|{
return|return
name|m_results
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetResults
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_results
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddResults
argument_list|(
argument|GoASTExpr *results
argument_list|)
block|{
name|m_results
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
operator|(
name|results
operator|)
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
expr|>
name|m_results
block|;
name|GoASTReturnStmt
argument_list|(
specifier|const
name|GoASTReturnStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTReturnStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTReturnStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTSelectStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|explicit
name|GoASTSelectStmt
argument_list|(
name|GoASTBlockStmt
operator|*
name|body
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eSelectStmt
argument_list|)
block|,
name|m_body_up
argument_list|(
argument|body
argument_list|)
block|{}
operator|~
name|GoASTSelectStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"SelectStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eSelectStmt
return|;
block|}
specifier|const
name|GoASTBlockStmt
operator|*
name|GetBody
argument_list|()
specifier|const
block|{
return|return
name|m_body_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetBody
argument_list|(
argument|GoASTBlockStmt *body
argument_list|)
block|{
name|m_body_up
operator|.
name|reset
argument_list|(
name|body
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBlockStmt
operator|>
name|m_body_up
block|;
name|GoASTSelectStmt
argument_list|(
specifier|const
name|GoASTSelectStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTSelectStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTSelectStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTSelectorExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTSelectorExpr
argument_list|(
name|GoASTExpr
operator|*
name|x
argument_list|,
name|GoASTIdent
operator|*
name|sel
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eSelectorExpr
argument_list|)
block|,
name|m_x_up
argument_list|(
name|x
argument_list|)
block|,
name|m_sel_up
argument_list|(
argument|sel
argument_list|)
block|{}
operator|~
name|GoASTSelectorExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"SelectorExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eSelectorExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
specifier|const
name|GoASTIdent
operator|*
name|GetSel
argument_list|()
specifier|const
block|{
return|return
name|m_sel_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetSel
argument_list|(
argument|GoASTIdent *sel
argument_list|)
block|{
name|m_sel_up
operator|.
name|reset
argument_list|(
name|sel
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
name|m_sel_up
block|;
name|GoASTSelectorExpr
argument_list|(
specifier|const
name|GoASTSelectorExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTSelectorExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTSelectorExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTSendStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTSendStmt
argument_list|(
name|GoASTExpr
operator|*
name|chan
argument_list|,
name|GoASTExpr
operator|*
name|value
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eSendStmt
argument_list|)
block|,
name|m_chan_up
argument_list|(
name|chan
argument_list|)
block|,
name|m_value_up
argument_list|(
argument|value
argument_list|)
block|{}
operator|~
name|GoASTSendStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"SendStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eSendStmt
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetChan
argument_list|()
specifier|const
block|{
return|return
name|m_chan_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetChan
argument_list|(
argument|GoASTExpr *chan
argument_list|)
block|{
name|m_chan_up
operator|.
name|reset
argument_list|(
name|chan
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetValue
argument_list|()
specifier|const
block|{
return|return
name|m_value_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetValue
argument_list|(
argument|GoASTExpr *value
argument_list|)
block|{
name|m_value_up
operator|.
name|reset
argument_list|(
name|value
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_chan_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_value_up
block|;
name|GoASTSendStmt
argument_list|(
specifier|const
name|GoASTSendStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTSendStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTSendStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTSliceExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTSliceExpr
argument_list|(
argument|GoASTExpr *x
argument_list|,
argument|GoASTExpr *low
argument_list|,
argument|GoASTExpr *high
argument_list|,
argument|GoASTExpr *max
argument_list|,
argument|bool slice3
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eSliceExpr
argument_list|)
block|,
name|m_x_up
argument_list|(
name|x
argument_list|)
block|,
name|m_low_up
argument_list|(
name|low
argument_list|)
block|,
name|m_high_up
argument_list|(
name|high
argument_list|)
block|,
name|m_max_up
argument_list|(
name|max
argument_list|)
block|,
name|m_slice3
argument_list|(
argument|slice3
argument_list|)
block|{}
operator|~
name|GoASTSliceExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"SliceExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eSliceExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetLow
argument_list|()
specifier|const
block|{
return|return
name|m_low_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetLow
argument_list|(
argument|GoASTExpr *low
argument_list|)
block|{
name|m_low_up
operator|.
name|reset
argument_list|(
name|low
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetHigh
argument_list|()
specifier|const
block|{
return|return
name|m_high_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetHigh
argument_list|(
argument|GoASTExpr *high
argument_list|)
block|{
name|m_high_up
operator|.
name|reset
argument_list|(
name|high
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetMax
argument_list|()
specifier|const
block|{
return|return
name|m_max_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetMax
argument_list|(
argument|GoASTExpr *max
argument_list|)
block|{
name|m_max_up
operator|.
name|reset
argument_list|(
name|max
argument_list|)
block|;     }
name|bool
name|GetSlice3
argument_list|()
specifier|const
block|{
return|return
name|m_slice3
return|;
block|}
name|void
name|SetSlice3
argument_list|(
argument|bool slice3
argument_list|)
block|{
name|m_slice3
operator|=
name|slice3
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_low_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_high_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_max_up
block|;
name|bool
name|m_slice3
block|;
name|GoASTSliceExpr
argument_list|(
specifier|const
name|GoASTSliceExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTSliceExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTSliceExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTStarExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|explicit
name|GoASTStarExpr
argument_list|(
name|GoASTExpr
operator|*
name|x
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eStarExpr
argument_list|)
block|,
name|m_x_up
argument_list|(
argument|x
argument_list|)
block|{}
operator|~
name|GoASTStarExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"StarExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eStarExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|GoASTStarExpr
argument_list|(
specifier|const
name|GoASTStarExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTStarExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTStarExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTStructType
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|explicit
name|GoASTStructType
argument_list|(
name|GoASTFieldList
operator|*
name|fields
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eStructType
argument_list|)
block|,
name|m_fields_up
argument_list|(
argument|fields
argument_list|)
block|{}
operator|~
name|GoASTStructType
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"StructType"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eStructType
return|;
block|}
specifier|const
name|GoASTFieldList
operator|*
name|GetFields
argument_list|()
specifier|const
block|{
return|return
name|m_fields_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetFields
argument_list|(
argument|GoASTFieldList *fields
argument_list|)
block|{
name|m_fields_up
operator|.
name|reset
argument_list|(
name|fields
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTFieldList
operator|>
name|m_fields_up
block|;
name|GoASTStructType
argument_list|(
specifier|const
name|GoASTStructType
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTStructType
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTStructType
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTSwitchStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTSwitchStmt
argument_list|(
name|GoASTStmt
operator|*
name|init
argument_list|,
name|GoASTExpr
operator|*
name|tag
argument_list|,
name|GoASTBlockStmt
operator|*
name|body
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eSwitchStmt
argument_list|)
block|,
name|m_init_up
argument_list|(
name|init
argument_list|)
block|,
name|m_tag_up
argument_list|(
name|tag
argument_list|)
block|,
name|m_body_up
argument_list|(
argument|body
argument_list|)
block|{}
operator|~
name|GoASTSwitchStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"SwitchStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eSwitchStmt
return|;
block|}
specifier|const
name|GoASTStmt
operator|*
name|GetInit
argument_list|()
specifier|const
block|{
return|return
name|m_init_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetInit
argument_list|(
argument|GoASTStmt *init
argument_list|)
block|{
name|m_init_up
operator|.
name|reset
argument_list|(
name|init
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetTag
argument_list|()
specifier|const
block|{
return|return
name|m_tag_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetTag
argument_list|(
argument|GoASTExpr *tag
argument_list|)
block|{
name|m_tag_up
operator|.
name|reset
argument_list|(
name|tag
argument_list|)
block|;     }
specifier|const
name|GoASTBlockStmt
operator|*
name|GetBody
argument_list|()
specifier|const
block|{
return|return
name|m_body_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetBody
argument_list|(
argument|GoASTBlockStmt *body
argument_list|)
block|{
name|m_body_up
operator|.
name|reset
argument_list|(
name|body
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_init_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_tag_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBlockStmt
operator|>
name|m_body_up
block|;
name|GoASTSwitchStmt
argument_list|(
specifier|const
name|GoASTSwitchStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTSwitchStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTSwitchStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTTypeAssertExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTTypeAssertExpr
argument_list|(
name|GoASTExpr
operator|*
name|x
argument_list|,
name|GoASTExpr
operator|*
name|type
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eTypeAssertExpr
argument_list|)
block|,
name|m_x_up
argument_list|(
name|x
argument_list|)
block|,
name|m_type_up
argument_list|(
argument|type
argument_list|)
block|{}
operator|~
name|GoASTTypeAssertExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"TypeAssertExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eTypeAssertExpr
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetType
argument_list|(
argument|GoASTExpr *type
argument_list|)
block|{
name|m_type_up
operator|.
name|reset
argument_list|(
name|type
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_type_up
block|;
name|GoASTTypeAssertExpr
argument_list|(
specifier|const
name|GoASTTypeAssertExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTTypeAssertExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTTypeAssertExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTTypeSpec
range|:
name|public
name|GoASTSpec
block|{
name|public
operator|:
name|GoASTTypeSpec
argument_list|(
name|GoASTIdent
operator|*
name|name
argument_list|,
name|GoASTExpr
operator|*
name|type
argument_list|)
operator|:
name|GoASTSpec
argument_list|(
name|eTypeSpec
argument_list|)
block|,
name|m_name_up
argument_list|(
name|name
argument_list|)
block|,
name|m_type_up
argument_list|(
argument|type
argument_list|)
block|{}
operator|~
name|GoASTTypeSpec
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"TypeSpec"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eTypeSpec
return|;
block|}
specifier|const
name|GoASTIdent
operator|*
name|GetName
argument_list|()
specifier|const
block|{
return|return
name|m_name_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetName
argument_list|(
argument|GoASTIdent *name
argument_list|)
block|{
name|m_name_up
operator|.
name|reset
argument_list|(
name|name
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetType
argument_list|(
argument|GoASTExpr *type
argument_list|)
block|{
name|m_type_up
operator|.
name|reset
argument_list|(
name|type
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
name|m_name_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_type_up
block|;
name|GoASTTypeSpec
argument_list|(
specifier|const
name|GoASTTypeSpec
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTTypeSpec
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTTypeSpec
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTTypeSwitchStmt
range|:
name|public
name|GoASTStmt
block|{
name|public
operator|:
name|GoASTTypeSwitchStmt
argument_list|(
name|GoASTStmt
operator|*
name|init
argument_list|,
name|GoASTStmt
operator|*
name|assign
argument_list|,
name|GoASTBlockStmt
operator|*
name|body
argument_list|)
operator|:
name|GoASTStmt
argument_list|(
name|eTypeSwitchStmt
argument_list|)
block|,
name|m_init_up
argument_list|(
name|init
argument_list|)
block|,
name|m_assign_up
argument_list|(
name|assign
argument_list|)
block|,
name|m_body_up
argument_list|(
argument|body
argument_list|)
block|{}
operator|~
name|GoASTTypeSwitchStmt
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"TypeSwitchStmt"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eTypeSwitchStmt
return|;
block|}
specifier|const
name|GoASTStmt
operator|*
name|GetInit
argument_list|()
specifier|const
block|{
return|return
name|m_init_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetInit
argument_list|(
argument|GoASTStmt *init
argument_list|)
block|{
name|m_init_up
operator|.
name|reset
argument_list|(
name|init
argument_list|)
block|;     }
specifier|const
name|GoASTStmt
operator|*
name|GetAssign
argument_list|()
specifier|const
block|{
return|return
name|m_assign_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetAssign
argument_list|(
argument|GoASTStmt *assign
argument_list|)
block|{
name|m_assign_up
operator|.
name|reset
argument_list|(
name|assign
argument_list|)
block|;     }
specifier|const
name|GoASTBlockStmt
operator|*
name|GetBody
argument_list|()
specifier|const
block|{
return|return
name|m_body_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetBody
argument_list|(
argument|GoASTBlockStmt *body
argument_list|)
block|{
name|m_body_up
operator|.
name|reset
argument_list|(
name|body
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_init_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTStmt
operator|>
name|m_assign_up
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTBlockStmt
operator|>
name|m_body_up
block|;
name|GoASTTypeSwitchStmt
argument_list|(
specifier|const
name|GoASTTypeSwitchStmt
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTTypeSwitchStmt
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTTypeSwitchStmt
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTUnaryExpr
range|:
name|public
name|GoASTExpr
block|{
name|public
operator|:
name|GoASTUnaryExpr
argument_list|(
argument|TokenType op
argument_list|,
argument|GoASTExpr *x
argument_list|)
operator|:
name|GoASTExpr
argument_list|(
name|eUnaryExpr
argument_list|)
block|,
name|m_op
argument_list|(
name|op
argument_list|)
block|,
name|m_x_up
argument_list|(
argument|x
argument_list|)
block|{}
operator|~
name|GoASTUnaryExpr
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"UnaryExpr"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eUnaryExpr
return|;
block|}
name|TokenType
name|GetOp
argument_list|()
specifier|const
block|{
return|return
name|m_op
return|;
block|}
name|void
name|SetOp
argument_list|(
argument|TokenType op
argument_list|)
block|{
name|m_op
operator|=
name|op
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetX
argument_list|()
specifier|const
block|{
return|return
name|m_x_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetX
argument_list|(
argument|GoASTExpr *x
argument_list|)
block|{
name|m_x_up
operator|.
name|reset
argument_list|(
name|x
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|TokenType
name|m_op
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_x_up
block|;
name|GoASTUnaryExpr
argument_list|(
specifier|const
name|GoASTUnaryExpr
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTUnaryExpr
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTUnaryExpr
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|class
name|GoASTValueSpec
range|:
name|public
name|GoASTSpec
block|{
name|public
operator|:
name|GoASTValueSpec
argument_list|()
operator|:
name|GoASTSpec
argument_list|(
argument|eValueSpec
argument_list|)
block|{}
operator|~
name|GoASTValueSpec
argument_list|()
name|override
operator|=
expr|default
block|;
specifier|const
name|char
operator|*
name|GetKindName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"ValueSpec"
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const GoASTNode *n
argument_list|)
block|{
return|return
name|n
operator|->
name|GetKind
argument_list|()
operator|==
name|eValueSpec
return|;
block|}
name|size_t
name|NumNames
argument_list|()
specifier|const
block|{
return|return
name|m_names
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTIdent
operator|*
name|GetNames
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_names
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddNames
argument_list|(
argument|GoASTIdent *names
argument_list|)
block|{
name|m_names
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
operator|(
name|names
operator|)
argument_list|)
block|;     }
specifier|const
name|GoASTExpr
operator|*
name|GetType
argument_list|()
specifier|const
block|{
return|return
name|m_type_up
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|SetType
argument_list|(
argument|GoASTExpr *type
argument_list|)
block|{
name|m_type_up
operator|.
name|reset
argument_list|(
name|type
argument_list|)
block|;     }
name|size_t
name|NumValues
argument_list|()
specifier|const
block|{
return|return
name|m_values
operator|.
name|size
argument_list|()
return|;
block|}
specifier|const
name|GoASTExpr
operator|*
name|GetValues
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
return|return
name|m_values
index|[
name|i
index|]
operator|.
name|get
argument_list|()
return|;
block|}
name|void
name|AddValues
argument_list|(
argument|GoASTExpr *values
argument_list|)
block|{
name|m_values
operator|.
name|push_back
argument_list|(
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
operator|(
name|values
operator|)
argument_list|)
block|;     }
name|private
operator|:
name|friend
name|class
name|GoASTNode
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTIdent
operator|>
expr|>
name|m_names
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
name|m_type_up
block|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|unique_ptr
operator|<
name|GoASTExpr
operator|>
expr|>
name|m_values
block|;
name|GoASTValueSpec
argument_list|(
specifier|const
name|GoASTValueSpec
operator|&
argument_list|)
operator|=
name|delete
block|;
specifier|const
name|GoASTValueSpec
operator|&
name|operator
operator|=
operator|(
specifier|const
name|GoASTValueSpec
operator|&
operator|)
operator|=
name|delete
block|; }
decl_stmt|;
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|V
operator|>
name|R
name|GoASTDecl
operator|::
name|Visit
argument_list|(
argument|V* v
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|GetKind
argument_list|()
condition|)
block|{
case|case
name|eBadDecl
case|:
return|return
name|v
operator|->
name|VisitBadDecl
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTBadDecl
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eFuncDecl
case|:
return|return
name|v
operator|->
name|VisitFuncDecl
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTFuncDecl
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eGenDecl
case|:
return|return
name|v
operator|->
name|VisitGenDecl
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTGenDecl
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
default|default:
name|assert
argument_list|(
name|false
operator|&&
literal|"Invalid kind"
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|V
operator|>
name|R
name|GoASTExpr
operator|::
name|Visit
argument_list|(
argument|V* v
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|GetKind
argument_list|()
condition|)
block|{
case|case
name|eArrayType
case|:
return|return
name|v
operator|->
name|VisitArrayType
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTArrayType
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eBadExpr
case|:
return|return
name|v
operator|->
name|VisitBadExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTBadExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eBasicLit
case|:
return|return
name|v
operator|->
name|VisitBasicLit
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTBasicLit
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eBinaryExpr
case|:
return|return
name|v
operator|->
name|VisitBinaryExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTBinaryExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eIdent
case|:
return|return
name|v
operator|->
name|VisitIdent
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTIdent
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eCallExpr
case|:
return|return
name|v
operator|->
name|VisitCallExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTCallExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eChanType
case|:
return|return
name|v
operator|->
name|VisitChanType
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTChanType
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eCompositeLit
case|:
return|return
name|v
operator|->
name|VisitCompositeLit
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTCompositeLit
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eEllipsis
case|:
return|return
name|v
operator|->
name|VisitEllipsis
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTEllipsis
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eFuncType
case|:
return|return
name|v
operator|->
name|VisitFuncType
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTFuncType
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eFuncLit
case|:
return|return
name|v
operator|->
name|VisitFuncLit
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTFuncLit
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eIndexExpr
case|:
return|return
name|v
operator|->
name|VisitIndexExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTIndexExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eInterfaceType
case|:
return|return
name|v
operator|->
name|VisitInterfaceType
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTInterfaceType
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eKeyValueExpr
case|:
return|return
name|v
operator|->
name|VisitKeyValueExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTKeyValueExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eMapType
case|:
return|return
name|v
operator|->
name|VisitMapType
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTMapType
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eParenExpr
case|:
return|return
name|v
operator|->
name|VisitParenExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTParenExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eSelectorExpr
case|:
return|return
name|v
operator|->
name|VisitSelectorExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTSelectorExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eSliceExpr
case|:
return|return
name|v
operator|->
name|VisitSliceExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTSliceExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eStarExpr
case|:
return|return
name|v
operator|->
name|VisitStarExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTStarExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eStructType
case|:
return|return
name|v
operator|->
name|VisitStructType
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTStructType
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eTypeAssertExpr
case|:
return|return
name|v
operator|->
name|VisitTypeAssertExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTTypeAssertExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eUnaryExpr
case|:
return|return
name|v
operator|->
name|VisitUnaryExpr
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTUnaryExpr
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
default|default:
name|assert
argument_list|(
name|false
operator|&&
literal|"Invalid kind"
argument_list|)
expr_stmt|;
return|return
name|R
argument_list|()
return|;
block|}
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|V
operator|>
name|R
name|GoASTSpec
operator|::
name|Visit
argument_list|(
argument|V* v
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|GetKind
argument_list|()
condition|)
block|{
case|case
name|eImportSpec
case|:
return|return
name|v
operator|->
name|VisitImportSpec
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTImportSpec
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eTypeSpec
case|:
return|return
name|v
operator|->
name|VisitTypeSpec
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTTypeSpec
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eValueSpec
case|:
return|return
name|v
operator|->
name|VisitValueSpec
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTValueSpec
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
default|default:
name|assert
argument_list|(
name|false
operator|&&
literal|"Invalid kind"
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|typename
name|R
operator|,
name|typename
name|V
operator|>
name|R
name|GoASTStmt
operator|::
name|Visit
argument_list|(
argument|V* v
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|GetKind
argument_list|()
condition|)
block|{
case|case
name|eAssignStmt
case|:
return|return
name|v
operator|->
name|VisitAssignStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTAssignStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eBadStmt
case|:
return|return
name|v
operator|->
name|VisitBadStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTBadStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eBlockStmt
case|:
return|return
name|v
operator|->
name|VisitBlockStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTBlockStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eBranchStmt
case|:
return|return
name|v
operator|->
name|VisitBranchStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTBranchStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eCaseClause
case|:
return|return
name|v
operator|->
name|VisitCaseClause
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTCaseClause
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eCommClause
case|:
return|return
name|v
operator|->
name|VisitCommClause
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTCommClause
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eDeclStmt
case|:
return|return
name|v
operator|->
name|VisitDeclStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTDeclStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eDeferStmt
case|:
return|return
name|v
operator|->
name|VisitDeferStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTDeferStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eEmptyStmt
case|:
return|return
name|v
operator|->
name|VisitEmptyStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTEmptyStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eExprStmt
case|:
return|return
name|v
operator|->
name|VisitExprStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTExprStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eForStmt
case|:
return|return
name|v
operator|->
name|VisitForStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTForStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eGoStmt
case|:
return|return
name|v
operator|->
name|VisitGoStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTGoStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eIfStmt
case|:
return|return
name|v
operator|->
name|VisitIfStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTIfStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eIncDecStmt
case|:
return|return
name|v
operator|->
name|VisitIncDecStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTIncDecStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eLabeledStmt
case|:
return|return
name|v
operator|->
name|VisitLabeledStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTLabeledStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eRangeStmt
case|:
return|return
name|v
operator|->
name|VisitRangeStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTRangeStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eReturnStmt
case|:
return|return
name|v
operator|->
name|VisitReturnStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTReturnStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eSelectStmt
case|:
return|return
name|v
operator|->
name|VisitSelectStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTSelectStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eSendStmt
case|:
return|return
name|v
operator|->
name|VisitSendStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTSendStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eSwitchStmt
case|:
return|return
name|v
operator|->
name|VisitSwitchStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTSwitchStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
case|case
name|eTypeSwitchStmt
case|:
return|return
name|v
operator|->
name|VisitTypeSwitchStmt
argument_list|(
name|llvm
operator|::
name|cast
operator|<
specifier|const
name|GoASTTypeSwitchStmt
operator|>
operator|(
name|this
operator|)
argument_list|)
return|;
default|default:
name|assert
argument_list|(
name|false
operator|&&
literal|"Invalid kind"
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|typename
name|V
operator|>
name|void
name|GoASTNode
operator|::
name|WalkChildren
argument_list|(
argument|V&v
argument_list|)
block|{
switch|switch
condition|(
name|m_kind
condition|)
block|{
case|case
name|eArrayType
case|:
block|{
name|GoASTArrayType
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTArrayType
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_len_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_elt_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eAssignStmt
case|:
block|{
name|GoASTAssignStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTAssignStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_lhs
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_rhs
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eBasicLit
case|:
block|{
name|GoASTBasicLit
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTBasicLit
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
return|return;
block|}
case|case
name|eBinaryExpr
case|:
block|{
name|GoASTBinaryExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTBinaryExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_y_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eBlockStmt
case|:
block|{
name|GoASTBlockStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTBlockStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_list
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eIdent
case|:
block|{
name|GoASTIdent
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTIdent
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
return|return;
block|}
case|case
name|eBranchStmt
case|:
block|{
name|GoASTBranchStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTBranchStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_label_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eCallExpr
case|:
block|{
name|GoASTCallExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTCallExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_fun_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_args
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eCaseClause
case|:
block|{
name|GoASTCaseClause
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTCaseClause
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_list
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_body
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eChanType
case|:
block|{
name|GoASTChanType
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTChanType
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_value_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eCommClause
case|:
block|{
name|GoASTCommClause
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTCommClause
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_comm_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_body
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eCompositeLit
case|:
block|{
name|GoASTCompositeLit
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTCompositeLit
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_type_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_elts
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eDeclStmt
case|:
block|{
name|GoASTDeclStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTDeclStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_decl_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eDeferStmt
case|:
block|{
name|GoASTDeferStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTDeferStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_call_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eEllipsis
case|:
block|{
name|GoASTEllipsis
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTEllipsis
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_elt_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eExprStmt
case|:
block|{
name|GoASTExprStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTExprStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eField
case|:
block|{
name|GoASTField
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTField
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_names
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|v
argument_list|(
name|n
operator|->
name|m_type_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_tag_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eFieldList
case|:
block|{
name|GoASTFieldList
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTFieldList
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_list
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eForStmt
case|:
block|{
name|GoASTForStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTForStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_init_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_cond_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_post_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_body_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eFuncType
case|:
block|{
name|GoASTFuncType
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTFuncType
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_params_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_results_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eFuncDecl
case|:
block|{
name|GoASTFuncDecl
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTFuncDecl
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_recv_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_name_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_type_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_body_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eFuncLit
case|:
block|{
name|GoASTFuncLit
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTFuncLit
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_type_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_body_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eGenDecl
case|:
block|{
name|GoASTGenDecl
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTGenDecl
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_specs
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eGoStmt
case|:
block|{
name|GoASTGoStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTGoStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_call_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eIfStmt
case|:
block|{
name|GoASTIfStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTIfStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_init_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_cond_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_body_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_els_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eImportSpec
case|:
block|{
name|GoASTImportSpec
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTImportSpec
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_name_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_path_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eIncDecStmt
case|:
block|{
name|GoASTIncDecStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTIncDecStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eIndexExpr
case|:
block|{
name|GoASTIndexExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTIndexExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_index_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eInterfaceType
case|:
block|{
name|GoASTInterfaceType
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTInterfaceType
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_methods_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eKeyValueExpr
case|:
block|{
name|GoASTKeyValueExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTKeyValueExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_key_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_value_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eLabeledStmt
case|:
block|{
name|GoASTLabeledStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTLabeledStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_label_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_stmt_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eMapType
case|:
block|{
name|GoASTMapType
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTMapType
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_key_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_value_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eParenExpr
case|:
block|{
name|GoASTParenExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTParenExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eRangeStmt
case|:
block|{
name|GoASTRangeStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTRangeStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_key_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_value_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_body_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eReturnStmt
case|:
block|{
name|GoASTReturnStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTReturnStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_results
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eSelectStmt
case|:
block|{
name|GoASTSelectStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTSelectStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_body_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eSelectorExpr
case|:
block|{
name|GoASTSelectorExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTSelectorExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_sel_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eSendStmt
case|:
block|{
name|GoASTSendStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTSendStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_chan_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_value_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eSliceExpr
case|:
block|{
name|GoASTSliceExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTSliceExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_low_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_high_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_max_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eStarExpr
case|:
block|{
name|GoASTStarExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTStarExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eStructType
case|:
block|{
name|GoASTStructType
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTStructType
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_fields_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eSwitchStmt
case|:
block|{
name|GoASTSwitchStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTSwitchStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_init_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_tag_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_body_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eTypeAssertExpr
case|:
block|{
name|GoASTTypeAssertExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTTypeAssertExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_type_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eTypeSpec
case|:
block|{
name|GoASTTypeSpec
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTTypeSpec
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_name_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_type_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eTypeSwitchStmt
case|:
block|{
name|GoASTTypeSwitchStmt
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTTypeSwitchStmt
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_init_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_assign_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_body_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eUnaryExpr
case|:
block|{
name|GoASTUnaryExpr
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTUnaryExpr
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
name|v
argument_list|(
name|n
operator|->
name|m_x_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|eValueSpec
case|:
block|{
name|GoASTValueSpec
modifier|*
name|n
init|=
name|llvm
operator|::
name|cast
operator|<
name|GoASTValueSpec
operator|>
operator|(
name|this
operator|)
decl_stmt|;
operator|(
name|void
operator|)
name|n
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_names
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|v
argument_list|(
name|n
operator|->
name|m_type_up
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|e
operator|:
name|n
operator|->
name|m_values
control|)
block|{
name|v
argument_list|(
name|e
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|eEmptyStmt
case|:
case|case
name|eBadDecl
case|:
case|case
name|eBadExpr
case|:
case|case
name|eBadStmt
case|:
break|break;
block|}
block|}
end_decl_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

