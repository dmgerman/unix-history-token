begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- GoParser.h -----------------------------------------------*- C++
end_comment

begin_comment
comment|//-*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_GoParser_h
end_ifndef

begin_define
define|#
directive|define
name|liblldb_GoParser_h
end_define

begin_include
include|#
directive|include
file|"Plugins/ExpressionParser/Go/GoAST.h"
end_include

begin_include
include|#
directive|include
file|"Plugins/ExpressionParser/Go/GoLexer.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|GoParser
block|{
name|public
label|:
name|explicit
name|GoParser
parameter_list|(
specifier|const
name|char
modifier|*
name|src
parameter_list|)
function_decl|;
name|GoASTStmt
modifier|*
name|Statement
parameter_list|()
function_decl|;
name|GoASTStmt
modifier|*
name|GoStmt
parameter_list|()
function_decl|;
name|GoASTStmt
modifier|*
name|ReturnStmt
parameter_list|()
function_decl|;
name|GoASTStmt
modifier|*
name|BranchStmt
parameter_list|()
function_decl|;
name|GoASTStmt
modifier|*
name|EmptyStmt
parameter_list|()
function_decl|;
name|GoASTStmt
modifier|*
name|ExpressionStmt
parameter_list|(
name|GoASTExpr
modifier|*
name|e
parameter_list|)
function_decl|;
name|GoASTStmt
modifier|*
name|IncDecStmt
parameter_list|(
name|GoASTExpr
modifier|*
name|e
parameter_list|)
function_decl|;
name|GoASTStmt
modifier|*
name|Assignment
parameter_list|(
name|GoASTExpr
modifier|*
name|e
parameter_list|)
function_decl|;
name|GoASTBlockStmt
modifier|*
name|Block
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|MoreExpressionList
parameter_list|()
function_decl|;
comment|// ["," Expression]
name|GoASTIdent
modifier|*
name|MoreIdentifierList
parameter_list|()
function_decl|;
comment|// ["," Identifier]
name|GoASTExpr
modifier|*
name|Expression
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|UnaryExpr
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|OrExpr
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|AndExpr
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|RelExpr
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|AddExpr
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|MulExpr
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|PrimaryExpr
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|Operand
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|Conversion
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|Selector
parameter_list|(
name|GoASTExpr
modifier|*
name|e
parameter_list|)
function_decl|;
name|GoASTExpr
modifier|*
name|IndexOrSlice
parameter_list|(
name|GoASTExpr
modifier|*
name|e
parameter_list|)
function_decl|;
name|GoASTExpr
modifier|*
name|TypeAssertion
parameter_list|(
name|GoASTExpr
modifier|*
name|e
parameter_list|)
function_decl|;
name|GoASTExpr
modifier|*
name|Arguments
parameter_list|(
name|GoASTExpr
modifier|*
name|e
parameter_list|)
function_decl|;
name|GoASTExpr
modifier|*
name|Type
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|Type2
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|ArrayOrSliceType
parameter_list|(
name|bool
name|allowEllipsis
parameter_list|)
function_decl|;
name|GoASTExpr
modifier|*
name|StructType
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|FunctionType
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|InterfaceType
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|MapType
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|ChanType
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|ChanType2
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|Name
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|QualifiedIdent
parameter_list|(
name|GoASTIdent
modifier|*
name|p
parameter_list|)
function_decl|;
name|GoASTIdent
modifier|*
name|Identifier
parameter_list|()
function_decl|;
name|GoASTField
modifier|*
name|FieldDecl
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|AnonymousFieldType
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|FieldNamesAndType
parameter_list|(
name|GoASTField
modifier|*
name|f
parameter_list|)
function_decl|;
name|GoASTFieldList
modifier|*
name|Params
parameter_list|()
function_decl|;
name|GoASTField
modifier|*
name|ParamDecl
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|ParamType
parameter_list|()
function_decl|;
name|GoASTFuncType
modifier|*
name|Signature
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|CompositeLit
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|FunctionLit
parameter_list|()
function_decl|;
name|GoASTExpr
modifier|*
name|Element
parameter_list|()
function_decl|;
name|GoASTCompositeLit
modifier|*
name|LiteralValue
parameter_list|()
function_decl|;
name|bool
name|Failed
argument_list|()
specifier|const
block|{
return|return
name|m_failed
return|;
block|}
name|bool
name|AtEOF
argument_list|()
specifier|const
block|{
return|return
name|m_lexer
operator|.
name|BytesRemaining
argument_list|()
operator|==
literal|0
operator|&&
name|m_pos
operator|==
name|m_tokens
operator|.
name|size
argument_list|()
return|;
block|}
name|void
name|GetError
parameter_list|(
name|Error
modifier|&
name|error
parameter_list|)
function_decl|;
name|private
label|:
name|class
name|Rule
decl_stmt|;
name|friend
name|class
name|Rule
decl_stmt|;
name|std
operator|::
name|nullptr_t
name|syntaxerror
argument_list|()
block|{
name|m_failed
operator|=
name|true
block|;
return|return
name|nullptr
return|;
block|}
name|GoLexer
operator|::
name|Token
operator|&
name|next
argument_list|()
block|{
if|if
condition|(
name|m_pos
operator|>=
name|m_tokens
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_pos
operator|!=
literal|0
operator|&&
operator|(
name|m_tokens
operator|.
name|back
argument_list|()
operator|.
name|m_type
operator|==
name|GoLexer
operator|::
name|TOK_EOF
operator|||
name|m_tokens
operator|.
name|back
argument_list|()
operator|.
name|m_type
operator|==
name|GoLexer
operator|::
name|TOK_INVALID
operator|)
condition|)
return|return
name|m_tokens
operator|.
name|back
argument_list|()
return|;
name|m_pos
operator|=
name|m_tokens
operator|.
name|size
argument_list|()
expr_stmt|;
name|m_tokens
operator|.
name|push_back
argument_list|(
name|m_lexer
operator|.
name|Lex
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|m_tokens
index|[
name|m_pos
operator|++
index|]
return|;
block|}
name|GoLexer
operator|::
name|TokenType
name|peek
argument_list|()
block|{
name|GoLexer
operator|::
name|Token
operator|&
name|tok
operator|=
name|next
argument_list|()
block|;
operator|--
name|m_pos
block|;
return|return
name|tok
operator|.
name|m_type
return|;
block|}
name|GoLexer
operator|::
name|Token
operator|*
name|match
argument_list|(
argument|GoLexer::TokenType t
argument_list|)
block|{
name|GoLexer
operator|::
name|Token
operator|&
name|tok
operator|=
name|next
argument_list|()
block|;
if|if
condition|(
name|tok
operator|.
name|m_type
operator|==
name|t
condition|)
return|return
operator|&
name|tok
return|;
operator|--
name|m_pos
expr_stmt|;
name|m_last_tok
operator|=
name|t
expr_stmt|;
return|return
name|nullptr
return|;
block|}
name|GoLexer
operator|::
name|Token
operator|*
name|mustMatch
argument_list|(
argument|GoLexer::TokenType t
argument_list|)
block|{
name|GoLexer
operator|::
name|Token
operator|*
name|tok
operator|=
name|match
argument_list|(
name|t
argument_list|)
block|;
if|if
condition|(
name|tok
condition|)
return|return
name|tok
return|;
return|return
name|syntaxerror
argument_list|()
return|;
block|}
end_decl_stmt

begin_function_decl
name|bool
name|Semicolon
parameter_list|()
function_decl|;
end_function_decl

begin_function
name|GoASTStmt
modifier|*
name|FinishStmt
parameter_list|(
name|GoASTStmt
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Semicolon
argument_list|()
condition|)
name|m_failed
operator|=
name|true
expr_stmt|;
return|return
name|s
return|;
block|}
end_function

begin_expr_stmt
name|llvm
operator|::
name|StringRef
name|CopyString
argument_list|(
argument|llvm::StringRef s
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|GoLexer
name|m_lexer
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|GoLexer
operator|::
name|Token
operator|>
name|m_tokens
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|size_t
name|m_pos
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|llvm
operator|::
name|StringRef
name|m_error
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|StringRef
name|m_last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|GoLexer
operator|::
name|TokenType
name|m_last_tok
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|StringMap
operator|<
name|uint8_t
operator|>
name|m_strings
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|bool
name|m_failed
decl_stmt|;
end_decl_stmt

begin_endif
unit|}; }
endif|#
directive|endif
end_endif

end_unit

