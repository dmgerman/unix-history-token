begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ScriptInterpreterPython.h -------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_PLUGINS_SCRIPTINTERPRETER_PYTHON_SCRIPTINTERPRETERPYTHON_H
end_ifndef

begin_define
define|#
directive|define
name|LLDB_PLUGINS_SCRIPTINTERPRETER_PYTHON_SCRIPTINTERPRETERPYTHON_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|LLDB_DISABLE_PYTHON
end_ifdef

begin_comment
comment|// Python is disabled in this build
end_comment

begin_else
else|#
directive|else
end_else

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<memory>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"PythonDataObjects.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/IOHandler.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/ScriptInterpreter.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Terminal.h"
end_include

begin_decl_stmt
name|class
name|IOHandlerPythonInterpreter
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|class
name|ScriptInterpreterPython
range|:
name|public
name|ScriptInterpreter
decl_stmt|,
name|public
name|IOHandlerDelegateMultiline
block|{
name|public
label|:
if|#
directive|if
name|PY_MAJOR_VERSION
operator|>=
literal|3
typedef|typedef
name|PyObject
modifier|*
function_decl|(
modifier|*
name|SWIGInitCallback
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
else|#
directive|else
typedef|typedef
name|void
function_decl|(
modifier|*
name|SWIGInitCallback
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
endif|#
directive|endif
typedef|typedef
name|bool
argument_list|(
operator|*
name|SWIGBreakpointCallbackFunction
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame_sp
argument_list|,
specifier|const
name|lldb
operator|::
name|BreakpointLocationSP
operator|&
name|bp_loc_sp
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|SWIGWatchpointCallbackFunction
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame_sp
argument_list|,
specifier|const
name|lldb
operator|::
name|WatchpointSP
operator|&
name|wp_sp
argument_list|)
expr_stmt|;
typedef|typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonTypeScriptCallbackFunction
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
name|void
operator|*
name|session_dictionary
argument_list|,
specifier|const
name|lldb
operator|::
name|ValueObjectSP
operator|&
name|valobj_sp
argument_list|,
name|void
operator|*
operator|*
name|pyfunct_wrapper
argument_list|,
specifier|const
name|lldb
operator|::
name|TypeSummaryOptionsSP
operator|&
name|options
argument_list|,
name|std
operator|::
name|string
operator|&
name|retval
argument_list|)
expr_stmt|;
typedef|typedef
name|void
argument_list|*
call|(
modifier|*
name|SWIGPythonCreateSyntheticProvider
call|)
argument_list|(
specifier|const
name|char
operator|*
name|python_class_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|ValueObjectSP
operator|&
name|valobj_sp
argument_list|)
argument_list|;      typedef
name|void
operator|*
operator|(
operator|*
name|SWIGPythonCreateCommandObject
operator|)
operator|(
specifier|const
name|char
operator|*
name|python_class_name
operator|,
specifier|const
name|char
operator|*
name|session_dictionary_name
operator|,
specifier|const
name|lldb
operator|::
name|DebuggerSP
name|debugger_sp
operator|)
argument_list|;          typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPythonCreateScriptedThreadPlan
call|)
argument_list|(
specifier|const
name|char
operator|*
name|python_class_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|ThreadPlanSP
operator|&
name|thread_plan_sp
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonCallThreadPlan
argument_list|)
argument_list|(
name|void
operator|*
name|implementor
argument_list|,
specifier|const
name|char
operator|*
name|method_name
argument_list|,
name|Event
operator|*
name|event_sp
argument_list|,
name|bool
operator|&
name|got_error
argument_list|)
argument_list|;      typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPythonCreateOSPlugin
call|)
argument_list|(
specifier|const
name|char
operator|*
name|python_class_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|process_sp
argument_list|)
argument_list|;          typedef
name|size_t
argument_list|(
argument|*SWIGPythonCalculateNumChildren
argument_list|)
operator|(
name|void
operator|*
name|implementor
operator|,
name|uint32_t
name|max
operator|)
argument_list|;      typedef
name|void
operator|*
operator|(
operator|*
name|SWIGPythonGetChildAtIndex
operator|)
operator|(
name|void
operator|*
name|implementor
operator|,
name|uint32_t
name|idx
operator|)
argument_list|;      typedef
name|int
argument_list|(
operator|*
name|SWIGPythonGetIndexOfChildWithName
argument_list|)
argument_list|(
name|void
operator|*
name|implementor
argument_list|,
specifier|const
name|char
operator|*
name|child_name
argument_list|)
argument_list|;      typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPythonCastPyObjectToSBValue
call|)
argument_list|(
name|void
operator|*
name|data
argument_list|)
argument_list|;      typedef
name|lldb
operator|::
name|ValueObjectSP
argument_list|(
operator|*
name|SWIGPythonGetValueObjectSPFromSBValue
argument_list|)
argument_list|(
name|void
operator|*
name|data
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonUpdateSynthProviderInstance
argument_list|)
argument_list|(
name|void
operator|*
name|data
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonMightHaveChildrenSynthProviderInstance
argument_list|)
argument_list|(
name|void
operator|*
name|data
argument_list|)
argument_list|;      typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPythonGetValueSynthProviderInstance
call|)
argument_list|(
name|void
operator|*
name|implementor
argument_list|)
argument_list|;          typedef
name|bool
argument_list|(
argument|*SWIGPythonCallCommand
argument_list|)
operator|(
specifier|const
name|char
operator|*
name|python_function_name
operator|,
specifier|const
name|char
operator|*
name|session_dictionary_name
operator|,
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger
operator|,
specifier|const
name|char
operator|*
name|args
operator|,
name|lldb_private
operator|::
name|CommandReturnObject
operator|&
name|cmd_retobj
operator|,
name|lldb
operator|::
name|ExecutionContextRefSP
name|exe_ctx_ref_sp
operator|)
argument_list|;      typedef
name|bool
argument_list|(
argument|*SWIGPythonCallCommandObject
argument_list|)
operator|(
name|void
operator|*
name|implementor
operator|,
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger
operator|,
specifier|const
name|char
operator|*
name|args
operator|,
name|lldb_private
operator|::
name|CommandReturnObject
operator|&
name|cmd_retobj
operator|,
name|lldb
operator|::
name|ExecutionContextRefSP
name|exe_ctx_ref_sp
operator|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonCallModuleInit
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_module_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|DebuggerSP
operator|&
name|debugger
argument_list|)
argument_list|;          typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Process
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|ProcessSP
operator|&
name|process
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Thread
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|ThreadSP
operator|&
name|thread
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;          typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Target
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|TargetSP
operator|&
name|target
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Frame
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|StackFrameSP
operator|&
name|frame
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;      typedef
name|bool
argument_list|(
operator|*
name|SWIGPythonScriptKeyword_Value
argument_list|)
argument_list|(
specifier|const
name|char
operator|*
name|python_function_name
argument_list|,
specifier|const
name|char
operator|*
name|session_dictionary_name
argument_list|,
name|lldb
operator|::
name|ValueObjectSP
operator|&
name|value
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|)
argument_list|;          typedef
name|void
operator|*
call|(
modifier|*
name|SWIGPython_GetDynamicSetting
call|)
argument_list|(
name|void
operator|*
name|module
argument_list|,
specifier|const
name|char
operator|*
name|setting
argument_list|,
specifier|const
name|lldb
operator|::
name|TargetSP
operator|&
name|target_sp
argument_list|)
argument_list|;
name|friend
name|class
operator|::
name|IOHandlerPythonInterpreter
argument_list|;
name|ScriptInterpreterPython
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|)
argument_list|;
operator|~
name|ScriptInterpreterPython
argument_list|()
name|override
argument_list|;
name|bool
name|Interrupt
argument_list|()
name|override
argument_list|;
name|bool
name|ExecuteOneLine
argument_list|(
argument|const char *command
argument_list|,
argument|CommandReturnObject *result
argument_list|,
argument|const ExecuteScriptOptions&options = ExecuteScriptOptions()
argument_list|)
name|override
argument_list|;
name|void
name|ExecuteInterpreterLoop
argument_list|()
name|override
argument_list|;
name|bool
name|ExecuteOneLineWithReturn
argument_list|(
argument|const char *in_string
argument_list|,
argument|ScriptInterpreter::ScriptReturnType return_type
argument_list|,
argument|void *ret_value
argument_list|,
argument|const ExecuteScriptOptions&options = ExecuteScriptOptions()
argument_list|)
name|override
argument_list|;
name|lldb_private
operator|::
name|Error
name|ExecuteMultipleLines
argument_list|(
argument|const char *in_string
argument_list|,
argument|const ExecuteScriptOptions&options = ExecuteScriptOptions()
argument_list|)
name|override
argument_list|;
name|Error
name|ExportFunctionDefinitionToInterpreter
argument_list|(
argument|StringList&function_def
argument_list|)
name|override
argument_list|;
name|bool
name|GenerateTypeScriptFunction
argument_list|(
argument|StringList&input
argument_list|,
argument|std::string& output
argument_list|,
argument|const void* name_token = nullptr
argument_list|)
name|override
argument_list|;
name|bool
name|GenerateTypeSynthClass
argument_list|(
argument|StringList&input
argument_list|,
argument|std::string& output
argument_list|,
argument|const void* name_token = nullptr
argument_list|)
name|override
argument_list|;
name|bool
name|GenerateTypeSynthClass
argument_list|(
argument|const char* oneliner
argument_list|,
argument|std::string& output
argument_list|,
argument|const void* name_token = nullptr
argument_list|)
name|override
argument_list|;
comment|// use this if the function code is just a one-liner script
name|bool
name|GenerateTypeScriptFunction
argument_list|(
argument|const char* oneliner
argument_list|,
argument|std::string& output
argument_list|,
argument|const void* name_token = nullptr
argument_list|)
name|override
argument_list|;
name|bool
name|GenerateScriptAliasFunction
argument_list|(
argument|StringList&input
argument_list|,
argument|std::string& output
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|ObjectSP
name|CreateSyntheticScriptedProvider
argument_list|(
argument|const char *class_name
argument_list|,
argument|lldb::ValueObjectSP valobj
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|GenericSP
name|CreateScriptCommandObject
argument_list|(
argument|const char *class_name
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|ObjectSP
name|CreateScriptedThreadPlan
argument_list|(
argument|const char *class_name
argument_list|,
argument|lldb::ThreadPlanSP thread_plan
argument_list|)
name|override
argument_list|;
name|bool
name|ScriptedThreadPlanExplainsStop
argument_list|(
argument|StructuredData::ObjectSP implementor_sp
argument_list|,
argument|Event *event
argument_list|,
argument|bool&script_error
argument_list|)
name|override
argument_list|;
name|bool
name|ScriptedThreadPlanShouldStop
argument_list|(
argument|StructuredData::ObjectSP implementor_sp
argument_list|,
argument|Event *event
argument_list|,
argument|bool&script_error
argument_list|)
name|override
argument_list|;
name|lldb
operator|::
name|StateType
name|ScriptedThreadPlanGetRunState
argument_list|(
argument|StructuredData::ObjectSP implementor_sp
argument_list|,
argument|bool&script_error
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|GenericSP
name|OSPlugin_CreatePluginObject
argument_list|(
argument|const char *class_name
argument_list|,
argument|lldb::ProcessSP process_sp
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|DictionarySP
name|OSPlugin_RegisterInfo
argument_list|(
argument|StructuredData::ObjectSP os_plugin_object_sp
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|ArraySP
name|OSPlugin_ThreadsInfo
argument_list|(
argument|StructuredData::ObjectSP os_plugin_object_sp
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|StringSP
name|OSPlugin_RegisterContextData
argument_list|(
argument|StructuredData::ObjectSP os_plugin_object_sp
argument_list|,
argument|lldb::tid_t thread_id
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|DictionarySP
name|OSPlugin_CreateThread
argument_list|(
argument|StructuredData::ObjectSP os_plugin_object_sp
argument_list|,
argument|lldb::tid_t tid
argument_list|,
argument|lldb::addr_t context
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|ObjectSP
name|LoadPluginModule
argument_list|(
argument|const FileSpec&file_spec
argument_list|,
argument|lldb_private::Error&error
argument_list|)
name|override
argument_list|;
name|StructuredData
operator|::
name|DictionarySP
name|GetDynamicSettings
argument_list|(
argument|StructuredData::ObjectSP plugin_module_sp
argument_list|,
argument|Target *target
argument_list|,
argument|const char *setting_name
argument_list|,
argument|lldb_private::Error&error
argument_list|)
name|override
argument_list|;
name|size_t
name|CalculateNumChildren
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|,
argument|uint32_t max
argument_list|)
name|override
argument_list|;
name|lldb
operator|::
name|ValueObjectSP
name|GetChildAtIndex
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|,
argument|uint32_t idx
argument_list|)
name|override
argument_list|;
name|int
name|GetIndexOfChildWithName
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|,
argument|const char *child_name
argument_list|)
name|override
argument_list|;
name|bool
name|UpdateSynthProviderInstance
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|)
name|override
argument_list|;
name|bool
name|MightHaveChildrenSynthProviderInstance
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|)
name|override
argument_list|;
name|lldb
operator|::
name|ValueObjectSP
name|GetSyntheticValue
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|)
name|override
argument_list|;
name|ConstString
name|GetSyntheticTypeName
argument_list|(
argument|const StructuredData::ObjectSP&implementor
argument_list|)
name|override
argument_list|;
name|bool
name|RunScriptBasedCommand
argument_list|(
argument|const char* impl_function
argument_list|,
argument|const char* args
argument_list|,
argument|ScriptedCommandSynchronicity synchronicity
argument_list|,
argument|lldb_private::CommandReturnObject& cmd_retobj
argument_list|,
argument|Error& error
argument_list|,
argument|const lldb_private::ExecutionContext& exe_ctx
argument_list|)
name|override
argument_list|;
name|bool
name|RunScriptBasedCommand
argument_list|(
argument|StructuredData::GenericSP impl_obj_sp
argument_list|,
argument|const char* args
argument_list|,
argument|ScriptedCommandSynchronicity synchronicity
argument_list|,
argument|lldb_private::CommandReturnObject& cmd_retobj
argument_list|,
argument|Error& error
argument_list|,
argument|const lldb_private::ExecutionContext& exe_ctx
argument_list|)
name|override
argument_list|;
name|Error
name|GenerateFunction
argument_list|(
argument|const char *signature
argument_list|,
argument|const StringList&input
argument_list|)
name|override
argument_list|;
name|Error
name|GenerateBreakpointCommandCallbackData
argument_list|(
argument|StringList&input
argument_list|,
argument|std::string& output
argument_list|)
name|override
argument_list|;
name|bool
name|GenerateWatchpointCommandCallbackData
argument_list|(
argument|StringList&input
argument_list|,
argument|std::string& output
argument_list|)
name|override
argument_list|;
comment|//    static size_t
comment|//    GenerateBreakpointOptionsCommandCallback (void *baton,
comment|//                                              InputReader&reader,
comment|//                                              lldb::InputReaderAction notification,
comment|//                                              const char *bytes,
comment|//                                              size_t bytes_len);
comment|//
comment|//    static size_t
comment|//    GenerateWatchpointOptionsCommandCallback (void *baton,
comment|//                                              InputReader&reader,
comment|//                                              lldb::InputReaderAction notification,
comment|//                                              const char *bytes,
comment|//                                              size_t bytes_len);
specifier|static
name|bool
name|BreakpointCallbackFunction
argument_list|(
argument|void *baton
argument_list|,
argument|StoppointCallbackContext *context
argument_list|,
argument|lldb::user_id_t break_id
argument_list|,
argument|lldb::user_id_t break_loc_id
argument_list|)
argument_list|;
specifier|static
name|bool
name|WatchpointCallbackFunction
argument_list|(
argument|void *baton
argument_list|,
argument|StoppointCallbackContext *context
argument_list|,
argument|lldb::user_id_t watch_id
argument_list|)
argument_list|;
name|bool
name|GetScriptedSummary
argument_list|(
argument|const char *function_name
argument_list|,
argument|lldb::ValueObjectSP valobj
argument_list|,
argument|StructuredData::ObjectSP&callee_wrapper_sp
argument_list|,
argument|const TypeSummaryOptions&options
argument_list|,
argument|std::string&retval
argument_list|)
name|override
argument_list|;
name|void
name|Clear
argument_list|()
name|override
argument_list|;
name|bool
name|GetDocumentationForItem
argument_list|(
argument|const char* item
argument_list|,
argument|std::string& dest
argument_list|)
name|override
argument_list|;
name|bool
name|GetShortHelpForCommandObject
argument_list|(
argument|StructuredData::GenericSP cmd_obj_sp
argument_list|,
argument|std::string& dest
argument_list|)
name|override
argument_list|;
name|uint32_t
name|GetFlagsForCommandObject
argument_list|(
argument|StructuredData::GenericSP cmd_obj_sp
argument_list|)
name|override
argument_list|;
name|bool
name|GetLongHelpForCommandObject
argument_list|(
argument|StructuredData::GenericSP cmd_obj_sp
argument_list|,
argument|std::string& dest
argument_list|)
name|override
argument_list|;
name|bool
name|CheckObjectExists
argument_list|(
argument|const char* name
argument_list|)
name|override
block|{
if|if
condition|(
operator|!
name|name
operator|||
operator|!
name|name
index|[
literal|0
index|]
condition|)
return|return
name|false
return|;
name|std
operator|::
name|string
name|temp
argument_list|;         return
name|GetDocumentationForItem
argument_list|(
name|name
argument_list|,
name|temp
argument_list|)
argument_list|;
block|}
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Process
operator|*
name|process
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Thread
operator|*
name|thread
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|Target
operator|*
name|target
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|StackFrame
operator|*
name|frame
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|bool
name|RunScriptFormatKeyword
argument_list|(
specifier|const
name|char
operator|*
name|impl_function
argument_list|,
name|ValueObject
operator|*
name|value
argument_list|,
name|std
operator|::
name|string
operator|&
name|output
argument_list|,
name|Error
operator|&
name|error
argument_list|)
name|override
decl_stmt|;
name|bool
name|LoadScriptingModule
argument_list|(
specifier|const
name|char
operator|*
name|filename
argument_list|,
name|bool
name|can_reload
argument_list|,
name|bool
name|init_session
argument_list|,
name|lldb_private
operator|::
name|Error
operator|&
name|error
argument_list|,
name|StructuredData
operator|::
name|ObjectSP
operator|*
name|module_sp
operator|=
name|nullptr
argument_list|)
name|override
decl_stmt|;
name|bool
name|IsReservedWord
argument_list|(
specifier|const
name|char
operator|*
name|word
argument_list|)
name|override
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|ScriptInterpreterLocker
operator|>
name|AcquireInterpreterLock
argument_list|()
name|override
expr_stmt|;
name|void
name|CollectDataForBreakpointCommandCallback
argument_list|(
name|std
operator|::
name|vector
operator|<
name|BreakpointOptions
operator|*
operator|>
operator|&
name|bp_options_vec
argument_list|,
name|CommandReturnObject
operator|&
name|result
argument_list|)
name|override
decl_stmt|;
name|void
name|CollectDataForWatchpointCommandCallback
argument_list|(
name|WatchpointOptions
operator|*
name|wp_options
argument_list|,
name|CommandReturnObject
operator|&
name|result
argument_list|)
name|override
decl_stmt|;
comment|/// Set the callback body text into the callback for the breakpoint.
name|Error
name|SetBreakpointCommandCallback
argument_list|(
name|BreakpointOptions
operator|*
name|bp_options
argument_list|,
specifier|const
name|char
operator|*
name|callback_body
argument_list|)
name|override
decl_stmt|;
name|void
name|SetBreakpointCommandCallbackFunction
argument_list|(
name|BreakpointOptions
operator|*
name|bp_options
argument_list|,
specifier|const
name|char
operator|*
name|function_name
argument_list|)
name|override
decl_stmt|;
comment|/// Set a one-liner as the callback for the watchpoint.
name|void
name|SetWatchpointCommandCallback
argument_list|(
name|WatchpointOptions
operator|*
name|wp_options
argument_list|,
specifier|const
name|char
operator|*
name|oneliner
argument_list|)
name|override
decl_stmt|;
name|StringList
name|ReadCommandInputFromUser
parameter_list|(
name|FILE
modifier|*
name|in_file
parameter_list|)
function_decl|;
name|void
name|ResetOutputFileHandle
argument_list|(
name|FILE
operator|*
name|new_fh
argument_list|)
name|override
decl_stmt|;
specifier|static
name|void
name|InitializePrivate
parameter_list|()
function_decl|;
specifier|static
name|void
name|InitializeInterpreter
parameter_list|(
name|SWIGInitCallback
name|python_swig_init_callback
parameter_list|,
name|SWIGBreakpointCallbackFunction
name|swig_breakpoint_callback
parameter_list|,
name|SWIGWatchpointCallbackFunction
name|swig_watchpoint_callback
parameter_list|,
name|SWIGPythonTypeScriptCallbackFunction
name|swig_typescript_callback
parameter_list|,
name|SWIGPythonCreateSyntheticProvider
name|swig_synthetic_script
parameter_list|,
name|SWIGPythonCreateCommandObject
name|swig_create_cmd
parameter_list|,
name|SWIGPythonCalculateNumChildren
name|swig_calc_children
parameter_list|,
name|SWIGPythonGetChildAtIndex
name|swig_get_child_index
parameter_list|,
name|SWIGPythonGetIndexOfChildWithName
name|swig_get_index_child
parameter_list|,
name|SWIGPythonCastPyObjectToSBValue
name|swig_cast_to_sbvalue
parameter_list|,
name|SWIGPythonGetValueObjectSPFromSBValue
name|swig_get_valobj_sp_from_sbvalue
parameter_list|,
name|SWIGPythonUpdateSynthProviderInstance
name|swig_update_provider
parameter_list|,
name|SWIGPythonMightHaveChildrenSynthProviderInstance
name|swig_mighthavechildren_provider
parameter_list|,
name|SWIGPythonGetValueSynthProviderInstance
name|swig_getvalue_provider
parameter_list|,
name|SWIGPythonCallCommand
name|swig_call_command
parameter_list|,
name|SWIGPythonCallCommandObject
name|swig_call_command_object
parameter_list|,
name|SWIGPythonCallModuleInit
name|swig_call_module_init
parameter_list|,
name|SWIGPythonCreateOSPlugin
name|swig_create_os_plugin
parameter_list|,
name|SWIGPythonScriptKeyword_Process
name|swig_run_script_keyword_process
parameter_list|,
name|SWIGPythonScriptKeyword_Thread
name|swig_run_script_keyword_thread
parameter_list|,
name|SWIGPythonScriptKeyword_Target
name|swig_run_script_keyword_target
parameter_list|,
name|SWIGPythonScriptKeyword_Frame
name|swig_run_script_keyword_frame
parameter_list|,
name|SWIGPythonScriptKeyword_Value
name|swig_run_script_keyword_value
parameter_list|,
name|SWIGPython_GetDynamicSetting
name|swig_plugin_get
parameter_list|,
name|SWIGPythonCreateScriptedThreadPlan
name|swig_thread_plan_script
parameter_list|,
name|SWIGPythonCallThreadPlan
name|swig_call_thread_plan
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|GetDictionaryName
parameter_list|()
block|{
return|return
name|m_dictionary_name
operator|.
name|c_str
argument_list|()
return|;
block|}
name|PyThreadState
modifier|*
name|GetThreadState
parameter_list|()
block|{
return|return
name|m_command_thread_state
return|;
block|}
name|void
name|SetThreadState
parameter_list|(
name|PyThreadState
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
condition|)
name|m_command_thread_state
operator|=
name|s
expr_stmt|;
block|}
comment|//----------------------------------------------------------------------
comment|// IOHandlerDelegate
comment|//----------------------------------------------------------------------
name|void
name|IOHandlerActivated
argument_list|(
name|IOHandler
operator|&
name|io_handler
argument_list|)
name|override
decl_stmt|;
name|void
name|IOHandlerInputComplete
argument_list|(
name|IOHandler
operator|&
name|io_handler
argument_list|,
name|std
operator|::
name|string
operator|&
name|data
argument_list|)
name|override
decl_stmt|;
comment|//------------------------------------------------------------------
comment|// Static Functions
comment|//------------------------------------------------------------------
specifier|static
name|void
name|Initialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|Terminate
parameter_list|()
function_decl|;
specifier|static
name|lldb
operator|::
name|ScriptInterpreterSP
name|CreateInstance
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|)
expr_stmt|;
specifier|static
name|lldb_private
operator|::
name|ConstString
name|GetPluginNameStatic
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetPluginDescriptionStatic
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------
comment|// PluginInterface protocol
comment|//------------------------------------------------------------------
name|lldb_private
operator|::
name|ConstString
name|GetPluginName
argument_list|()
name|override
expr_stmt|;
name|uint32_t
name|GetPluginVersion
argument_list|()
name|override
expr_stmt|;
name|class
name|Locker
range|:
name|public
name|ScriptInterpreterLocker
block|{
name|public
operator|:
expr|enum
name|OnEntry
block|{
name|AcquireLock
operator|=
literal|0x0001
block|,
name|InitSession
operator|=
literal|0x0002
block|,
name|InitGlobals
operator|=
literal|0x0004
block|,
name|NoSTDIN
operator|=
literal|0x0008
block|}
block|;                  enum
name|OnLeave
block|{
name|FreeLock
operator|=
literal|0x0001
block|,
name|FreeAcquiredLock
operator|=
literal|0x0002
block|,
comment|// do not free the lock if we already held it when calling constructor
name|TearDownSession
operator|=
literal|0x0004
block|}
block|;
name|Locker
argument_list|(
argument|ScriptInterpreterPython *py_interpreter = nullptr
argument_list|,
argument|uint16_t on_entry = AcquireLock | InitSession
argument_list|,
argument|uint16_t on_leave = FreeLock | TearDownSession
argument_list|,
argument|FILE *in = nullptr
argument_list|,
argument|FILE *out = nullptr
argument_list|,
argument|FILE *err = nullptr
argument_list|)
block|;
operator|~
name|Locker
argument_list|()
name|override
block|;
name|private
operator|:
name|bool
name|DoAcquireLock
argument_list|()
block|;
name|bool
name|DoInitSession
argument_list|(
argument|uint16_t on_entry_flags
argument_list|,
argument|FILE *in
argument_list|,
argument|FILE *out
argument_list|,
argument|FILE *err
argument_list|)
block|;
name|bool
name|DoFreeLock
argument_list|()
block|;
name|bool
name|DoTearDownSession
argument_list|()
block|;
specifier|static
name|void
name|ReleasePythonLock
argument_list|()
block|;
name|bool
name|m_teardown_session
block|;
name|ScriptInterpreterPython
operator|*
name|m_python_interpreter
block|;
comment|//    	FILE*                    m_tmp_fh;
name|PyGILState_STATE
name|m_GILState
block|;     }
decl_stmt|;
name|protected
label|:
name|class
name|SynchronicityHandler
block|{
name|private
label|:
name|lldb
operator|::
name|DebuggerSP
name|m_debugger_sp
expr_stmt|;
name|ScriptedCommandSynchronicity
name|m_synch_wanted
decl_stmt|;
name|bool
name|m_old_asynch
decl_stmt|;
name|public
label|:
name|SynchronicityHandler
argument_list|(
name|lldb
operator|::
name|DebuggerSP
argument_list|,
name|ScriptedCommandSynchronicity
argument_list|)
expr_stmt|;
operator|~
name|SynchronicityHandler
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
name|enum
name|class
name|AddLocation
block|{
name|Beginning
operator|,
name|End
block|}
empty_stmt|;
specifier|static
name|void
name|AddToSysPath
argument_list|(
name|AddLocation
name|location
argument_list|,
name|std
operator|::
name|string
name|path
argument_list|)
decl_stmt|;
name|bool
name|EnterSession
parameter_list|(
name|uint16_t
name|on_entry_flags
parameter_list|,
name|FILE
modifier|*
name|in
parameter_list|,
name|FILE
modifier|*
name|out
parameter_list|,
name|FILE
modifier|*
name|err
parameter_list|)
function_decl|;
name|void
name|LeaveSession
parameter_list|()
function_decl|;
name|void
name|SaveTerminalState
parameter_list|(
name|int
name|fd
parameter_list|)
function_decl|;
name|void
name|RestoreTerminalState
parameter_list|()
function_decl|;
name|uint32_t
name|IsExecutingPython
argument_list|()
specifier|const
block|{
return|return
name|m_lock_count
operator|>
literal|0
return|;
block|}
name|uint32_t
name|IncrementLockCount
parameter_list|()
block|{
return|return
operator|++
name|m_lock_count
return|;
block|}
name|uint32_t
name|DecrementLockCount
parameter_list|()
block|{
if|if
condition|(
name|m_lock_count
operator|>
literal|0
condition|)
operator|--
name|m_lock_count
expr_stmt|;
return|return
name|m_lock_count
return|;
block|}
enum|enum
name|ActiveIOHandler
block|{
name|eIOHandlerNone
block|,
name|eIOHandlerBreakpoint
block|,
name|eIOHandlerWatchpoint
block|}
enum|;
name|PythonObject
modifier|&
name|GetMainModule
parameter_list|()
function_decl|;
name|PythonDictionary
modifier|&
name|GetSessionDictionary
parameter_list|()
function_decl|;
name|PythonDictionary
modifier|&
name|GetSysModuleDictionary
parameter_list|()
function_decl|;
name|bool
name|GetEmbeddedInterpreterModuleObjects
parameter_list|()
function_decl|;
name|bool
name|SetStdHandle
parameter_list|(
name|File
modifier|&
name|file
parameter_list|,
specifier|const
name|char
modifier|*
name|py_name
parameter_list|,
name|PythonFile
modifier|&
name|save_file
parameter_list|,
specifier|const
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
name|PythonFile
name|m_saved_stdin
decl_stmt|;
name|PythonFile
name|m_saved_stdout
decl_stmt|;
name|PythonFile
name|m_saved_stderr
decl_stmt|;
name|PythonObject
name|m_main_module
decl_stmt|;
name|PythonObject
name|m_lldb_module
decl_stmt|;
name|PythonDictionary
name|m_session_dict
decl_stmt|;
name|PythonDictionary
name|m_sys_module_dict
decl_stmt|;
name|PythonObject
name|m_run_one_line_function
decl_stmt|;
name|PythonObject
name|m_run_one_line_str_global
decl_stmt|;
name|std
operator|::
name|string
name|m_dictionary_name
expr_stmt|;
name|TerminalState
name|m_terminal_state
decl_stmt|;
name|ActiveIOHandler
name|m_active_io_handler
decl_stmt|;
name|bool
name|m_session_is_active
decl_stmt|;
name|bool
name|m_pty_slave_is_open
decl_stmt|;
name|bool
name|m_valid_session
decl_stmt|;
name|uint32_t
name|m_lock_count
decl_stmt|;
name|PyThreadState
modifier|*
name|m_command_thread_state
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_DISABLE_PYTHON
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLDB_PLUGINS_SCRIPTINTERPRETER_PYTHON_SCRIPTINTERPRETERPYTHON_H
end_comment

end_unit

