begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RenderScriptExpressionOpts.h ----------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLDB_RENDERSCRIPT_EXPROPTS_H
end_ifndef

begin_define
define|#
directive|define
name|LLDB_RENDERSCRIPT_EXPROPTS_H
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"llvm/IR/Module.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TargetRegistry.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetOptions.h"
end_include

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Target/LanguageRuntime.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/Process.h"
end_include

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"RenderScriptRuntime.h"
end_include

begin_include
include|#
directive|include
file|"RenderScriptx86ABIFixups.h"
end_include

begin_comment
comment|// RenderScriptRuntimeModulePass is a simple llvm::ModulesPass that is used
end_comment

begin_comment
comment|// during expression evaluation to apply RenderScript-specific fixes for
end_comment

begin_comment
comment|// expression evaluation. In particular this is used to make expression IR
end_comment

begin_comment
comment|// conformant with the ABI generated by the slang frontend. This ModulePass is
end_comment

begin_comment
comment|// executed in ClangExpressionParser::PrepareForExecution whenever an
end_comment

begin_comment
comment|// expression's DWARF language is eLanguageTypeExtRenderscript
end_comment

begin_decl_stmt
name|class
name|RenderScriptRuntimeModulePass
range|:
name|public
name|llvm
operator|::
name|ModulePass
block|{
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|RenderScriptRuntimeModulePass
argument_list|(
specifier|const
name|lldb_private
operator|::
name|Process
operator|*
name|process
argument_list|)
operator|:
name|ModulePass
argument_list|(
name|ID
argument_list|)
block|,
name|m_process_ptr
argument_list|(
argument|process
argument_list|)
block|{}
name|bool
name|runOnModule
argument_list|(
name|llvm
operator|::
name|Module
operator|&
name|module
argument_list|)
block|;
name|private
operator|:
specifier|const
name|lldb_private
operator|::
name|Process
operator|*
name|m_process_ptr
block|; }
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|lldb_renderscript
block|{
name|struct
name|RSIRPasses
range|:
name|public
name|lldb_private
operator|::
name|LLVMUserExpression
operator|::
name|IRPasses
block|{
name|RSIRPasses
argument_list|(
name|lldb_private
operator|::
name|Process
operator|*
name|process
argument_list|)
block|;
operator|~
name|RSIRPasses
argument_list|()
block|; }
decl_stmt|;
block|}
comment|// namespace lldb_renderscript
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

