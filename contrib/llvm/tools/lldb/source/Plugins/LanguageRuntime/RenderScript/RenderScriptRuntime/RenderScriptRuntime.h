begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RenderScriptRuntime.h -----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_RenderScriptRuntime_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_RenderScriptRuntime_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/LanguageRuntime.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/CPPLanguageRuntime.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Module.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
typedef|typedef
name|uint32_t
name|RSSlot
typedef|;
name|class
name|RSModuleDescriptor
decl_stmt|;
struct_decl|struct
name|RSGlobalDescriptor
struct_decl|;
struct_decl|struct
name|RSKernelDescriptor
struct_decl|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RSModuleDescriptor
operator|>
name|RSModuleDescriptorSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RSGlobalDescriptor
operator|>
name|RSGlobalDescriptorSP
expr_stmt|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RSKernelDescriptor
operator|>
name|RSKernelDescriptorSP
expr_stmt|;
struct|struct
name|RSKernelDescriptor
block|{
name|public
label|:
name|RSKernelDescriptor
argument_list|(
argument|const RSModuleDescriptor *module
argument_list|,
argument|const char *name
argument_list|,
argument|uint32_t slot
argument_list|)
block|:
name|m_module
argument_list|(
name|module
argument_list|)
operator|,
name|m_name
argument_list|(
name|name
argument_list|)
operator|,
name|m_slot
argument_list|(
argument|slot
argument_list|)
block|{     }
name|void
name|Dump
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
expr_stmt|;
specifier|const
name|RSModuleDescriptor
modifier|*
name|m_module
decl_stmt|;
name|ConstString
name|m_name
decl_stmt|;
name|RSSlot
name|m_slot
decl_stmt|;
block|}
struct|;
struct|struct
name|RSGlobalDescriptor
block|{
name|public
label|:
name|RSGlobalDescriptor
argument_list|(
specifier|const
name|RSModuleDescriptor
operator|*
name|module
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|)
operator|:
name|m_module
argument_list|(
name|module
argument_list|)
operator|,
name|m_name
argument_list|(
argument|name
argument_list|)
block|{     }
name|void
name|Dump
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
expr_stmt|;
specifier|const
name|RSModuleDescriptor
modifier|*
name|m_module
decl_stmt|;
name|ConstString
name|m_name
decl_stmt|;
block|}
struct|;
name|class
name|RSModuleDescriptor
block|{
name|public
label|:
name|RSModuleDescriptor
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module
argument_list|)
operator|:
name|m_module
argument_list|(
argument|module
argument_list|)
block|{     }
operator|~
name|RSModuleDescriptor
argument_list|()
block|{}
name|bool
name|ParseRSInfo
argument_list|()
expr_stmt|;
name|void
name|Dump
argument_list|(
name|Stream
operator|&
name|strm
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|lldb
operator|::
name|ModuleSP
name|m_module
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|RSKernelDescriptor
operator|>
name|m_kernels
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|RSGlobalDescriptor
operator|>
name|m_globals
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|std
operator|::
name|string
operator|>
name|m_pragmas
expr_stmt|;
name|std
operator|::
name|string
name|m_resname
expr_stmt|;
block|}
empty_stmt|;
name|class
name|RenderScriptRuntime
range|:
name|public
name|lldb_private
operator|::
name|CPPLanguageRuntime
block|{
name|public
operator|:
expr|enum
name|ModuleKind
block|{
name|eModuleKindIgnored
block|,
name|eModuleKindLibRS
block|,
name|eModuleKindDriver
block|,
name|eModuleKindImpl
block|,
name|eModuleKindKernelObj
block|}
block|;
operator|~
name|RenderScriptRuntime
argument_list|()
block|{}
comment|//------------------------------------------------------------------
comment|// Static Functions
comment|//------------------------------------------------------------------
specifier|static
name|void
name|Initialize
argument_list|()
block|;
specifier|static
name|void
name|Terminate
argument_list|()
block|;
specifier|static
name|lldb_private
operator|::
name|LanguageRuntime
operator|*
name|CreateInstance
argument_list|(
argument|Process *process
argument_list|,
argument|lldb::LanguageType language
argument_list|)
block|;
specifier|static
name|lldb
operator|::
name|CommandObjectSP
name|GetCommandObject
argument_list|(
name|CommandInterpreter
operator|&
name|interpreter
argument_list|)
block|;
specifier|static
name|lldb_private
operator|::
name|ConstString
name|GetPluginNameStatic
argument_list|()
block|;
specifier|static
name|bool
name|IsRenderScriptModule
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|)
block|;
specifier|static
name|ModuleKind
name|GetModuleKind
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|)
block|;
specifier|static
name|void
name|ModulesDidLoad
argument_list|(
specifier|const
name|lldb
operator|::
name|ProcessSP
operator|&
name|process_sp
argument_list|,
specifier|const
name|ModuleList
operator|&
name|module_list
argument_list|)
block|;
comment|//------------------------------------------------------------------
comment|// PluginInterface protocol
comment|//------------------------------------------------------------------
name|virtual
name|lldb_private
operator|::
name|ConstString
name|GetPluginName
argument_list|()
block|;
name|virtual
name|uint32_t
name|GetPluginVersion
argument_list|()
block|;
name|virtual
name|bool
name|IsVTableName
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
block|;
name|virtual
name|bool
name|GetDynamicTypeAndAddress
argument_list|(
argument|ValueObject&in_value
argument_list|,
argument|lldb::DynamicValueType use_dynamic
argument_list|,
argument|TypeAndOrName&class_type_or_name
argument_list|,
argument|Address&address
argument_list|)
block|;
name|virtual
name|bool
name|CouldHaveDynamicValue
argument_list|(
name|ValueObject
operator|&
name|in_value
argument_list|)
block|;
name|virtual
name|lldb
operator|::
name|BreakpointResolverSP
name|CreateExceptionResolver
argument_list|(
argument|Breakpoint *bkpt
argument_list|,
argument|bool catch_bp
argument_list|,
argument|bool throw_bp
argument_list|)
block|;
name|bool
name|LoadModule
argument_list|(
specifier|const
name|lldb
operator|::
name|ModuleSP
operator|&
name|module_sp
argument_list|)
block|;
name|bool
name|ProbeModules
argument_list|(
argument|const ModuleList module_list
argument_list|)
block|;
name|void
name|DumpModules
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
block|;
name|void
name|DumpContexts
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
block|;
name|void
name|DumpKernels
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
block|;
name|void
name|AttemptBreakpointAtKernelName
argument_list|(
name|Stream
operator|&
name|strm
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|Error
operator|&
name|error
argument_list|)
block|;
name|void
name|Status
argument_list|(
argument|Stream&strm
argument_list|)
specifier|const
block|;
name|virtual
name|size_t
name|GetAlternateManglings
argument_list|(
argument|const ConstString&mangled
argument_list|,
argument|std::vector<ConstString>&alternates
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|size_t
operator|>
operator|(
literal|0
operator|)
return|;
block|}
name|virtual
name|void
name|ModulesDidLoad
argument_list|(
specifier|const
name|ModuleList
operator|&
name|module_list
argument_list|)
block|;
name|void
name|Update
argument_list|()
block|;
name|void
name|Initiate
argument_list|()
block|;
name|protected
operator|:
name|void
name|FixupScriptDetails
argument_list|(
argument|RSModuleDescriptorSP rsmodule_sp
argument_list|)
block|;
name|void
name|LoadRuntimeHooks
argument_list|(
argument|lldb::ModuleSP module
argument_list|,
argument|ModuleKind kind
argument_list|)
block|;          struct
name|RuntimeHook
block|;
typedef|typedef
name|void
argument_list|(
name|RenderScriptRuntime
operator|::
operator|*
name|CaptureStateFn
argument_list|)
argument_list|(
name|RuntimeHook
operator|*
name|hook_info
argument_list|,
name|ExecutionContext
operator|&
name|context
argument_list|)
expr_stmt|;
comment|// Please do this!
block|struct
name|HookDefn
block|{
specifier|const
name|char
operator|*
name|name
block|;
specifier|const
name|char
operator|*
name|symbol_name
block|;
name|uint32_t
name|version
block|;
name|ModuleKind
name|kind
block|;
name|CaptureStateFn
name|grabber
block|;     }
decl_stmt|;
struct|struct
name|RuntimeHook
block|{
name|lldb
operator|::
name|addr_t
name|address
expr_stmt|;
specifier|const
name|HookDefn
modifier|*
name|defn
decl_stmt|;
name|lldb
operator|::
name|BreakpointSP
name|bp_sp
expr_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|shared_ptr
operator|<
name|RuntimeHook
operator|>
name|RuntimeHookSP
expr_stmt|;
struct|struct
name|ScriptDetails
block|{
name|std
operator|::
name|string
name|resname
expr_stmt|;
name|std
operator|::
name|string
name|scriptDyLib
expr_stmt|;
name|std
operator|::
name|string
name|cachedir
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|context
expr_stmt|;
name|lldb
operator|::
name|addr_t
name|script
expr_stmt|;
block|}
struct|;
name|lldb
operator|::
name|ModuleSP
name|m_libRS
expr_stmt|;
name|lldb
operator|::
name|ModuleSP
name|m_libRSDriver
expr_stmt|;
name|lldb
operator|::
name|ModuleSP
name|m_libRSCpuRef
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|RSModuleDescriptorSP
operator|>
name|m_rsmodules
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ScriptDetails
operator|>
name|m_scripts
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|RSModuleDescriptorSP
operator|>
name|m_scriptMappings
expr_stmt|;
name|std
operator|::
name|map
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|RuntimeHookSP
operator|>
name|m_runtimeHooks
expr_stmt|;
name|bool
name|m_initiated
decl_stmt|;
name|bool
name|m_debuggerPresentFlagged
decl_stmt|;
specifier|static
specifier|const
name|HookDefn
name|s_runtimeHookDefns
index|[]
decl_stmt|;
specifier|static
specifier|const
name|size_t
name|s_runtimeHookCount
decl_stmt|;
name|private
label|:
name|RenderScriptRuntime
argument_list|(
name|Process
operator|*
name|process
argument_list|)
expr_stmt|;
comment|// Call CreateInstance instead.
specifier|static
name|bool
name|HookCallback
argument_list|(
name|void
operator|*
name|baton
argument_list|,
name|StoppointCallbackContext
operator|*
name|ctx
argument_list|,
name|lldb
operator|::
name|user_id_t
name|break_id
argument_list|,
name|lldb
operator|::
name|user_id_t
name|break_loc_id
argument_list|)
decl_stmt|;
name|void
name|HookCallback
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|bool
name|GetArg32Simple
parameter_list|(
name|ExecutionContext
modifier|&
name|context
parameter_list|,
name|uint32_t
name|arg
parameter_list|,
name|uint32_t
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
name|CaptureScriptInit1
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|void
name|CaptureAllocationInit1
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
name|void
name|CaptureSetGlobalVar1
parameter_list|(
name|RuntimeHook
modifier|*
name|hook_info
parameter_list|,
name|ExecutionContext
modifier|&
name|context
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_RenderScriptRuntime_h_
end_comment

end_unit

