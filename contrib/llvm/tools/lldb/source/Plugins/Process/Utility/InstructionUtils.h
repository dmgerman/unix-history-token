begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- InstructionUtils.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_InstructionUtils_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_InstructionUtils_h_
end_define

begin_comment
comment|// Common utilities for manipulating instruction bit fields.
end_comment

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|// Return the bit field(s) from the most significant bit (msbit) to the
comment|// least significant bit (lsbit) of a 64-bit unsigned value.
specifier|static
specifier|inline
name|uint64_t
name|Bits64
parameter_list|(
specifier|const
name|uint64_t
name|bits
parameter_list|,
specifier|const
name|uint32_t
name|msbit
parameter_list|,
specifier|const
name|uint32_t
name|lsbit
parameter_list|)
block|{
name|assert
argument_list|(
name|msbit
operator|<
literal|64
operator|&&
name|lsbit
operator|<=
name|msbit
argument_list|)
expr_stmt|;
return|return
operator|(
name|bits
operator|>>
name|lsbit
operator|)
operator|&
operator|(
operator|(
literal|1u
operator|<<
operator|(
name|msbit
operator|-
name|lsbit
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
return|;
block|}
comment|// Return the bit field(s) from the most significant bit (msbit) to the
comment|// least significant bit (lsbit) of a 32-bit unsigned value.
specifier|static
specifier|inline
name|uint32_t
name|Bits32
parameter_list|(
specifier|const
name|uint32_t
name|bits
parameter_list|,
specifier|const
name|uint32_t
name|msbit
parameter_list|,
specifier|const
name|uint32_t
name|lsbit
parameter_list|)
block|{
name|assert
argument_list|(
name|msbit
operator|<
literal|32
operator|&&
name|lsbit
operator|<=
name|msbit
argument_list|)
expr_stmt|;
return|return
operator|(
name|bits
operator|>>
name|lsbit
operator|)
operator|&
operator|(
operator|(
literal|1u
operator|<<
operator|(
name|msbit
operator|-
name|lsbit
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
return|;
block|}
comment|// Return the bit value from the 'bit' position of a 32-bit unsigned value.
specifier|static
specifier|inline
name|uint32_t
name|Bit32
parameter_list|(
specifier|const
name|uint32_t
name|bits
parameter_list|,
specifier|const
name|uint32_t
name|bit
parameter_list|)
block|{
return|return
operator|(
name|bits
operator|>>
name|bit
operator|)
operator|&
literal|1u
return|;
block|}
specifier|static
specifier|inline
name|uint64_t
name|Bit64
parameter_list|(
specifier|const
name|uint64_t
name|bits
parameter_list|,
specifier|const
name|uint32_t
name|bit
parameter_list|)
block|{
return|return
operator|(
name|bits
operator|>>
name|bit
operator|)
operator|&
literal|1ull
return|;
block|}
comment|// Set the bit field(s) from the most significant bit (msbit) to the
comment|// least significant bit (lsbit) of a 32-bit unsigned value to 'val'.
specifier|static
specifier|inline
name|void
name|SetBits32
parameter_list|(
name|uint32_t
modifier|&
name|bits
parameter_list|,
specifier|const
name|uint32_t
name|msbit
parameter_list|,
specifier|const
name|uint32_t
name|lsbit
parameter_list|,
specifier|const
name|uint32_t
name|val
parameter_list|)
block|{
name|assert
argument_list|(
name|msbit
operator|<
literal|32
operator|&&
name|lsbit
operator|<
literal|32
operator|&&
name|msbit
operator|>=
name|lsbit
argument_list|)
expr_stmt|;
name|uint32_t
name|mask
init|=
operator|(
operator|(
literal|1u
operator|<<
operator|(
name|msbit
operator|-
name|lsbit
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|bits
operator|&=
operator|~
operator|(
name|mask
operator|<<
name|lsbit
operator|)
expr_stmt|;
name|bits
operator||=
operator|(
name|val
operator|&
name|mask
operator|)
operator|<<
name|lsbit
expr_stmt|;
block|}
comment|// Set the 'bit' position of a 32-bit unsigned value to 'val'.
specifier|static
specifier|inline
name|void
name|SetBit32
parameter_list|(
name|uint32_t
modifier|&
name|bits
parameter_list|,
specifier|const
name|uint32_t
name|bit
parameter_list|,
specifier|const
name|uint32_t
name|val
parameter_list|)
block|{
name|SetBits32
argument_list|(
name|bits
argument_list|,
name|bit
argument_list|,
name|bit
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
comment|// Rotate a 32-bit unsigned value right by the specified amount.
specifier|static
specifier|inline
name|uint32_t
name|Rotr32
parameter_list|(
name|uint32_t
name|bits
parameter_list|,
name|uint32_t
name|amt
parameter_list|)
block|{
name|assert
argument_list|(
name|amt
operator|<
literal|32
operator|&&
literal|"Invalid rotate amount"
argument_list|)
expr_stmt|;
return|return
operator|(
name|bits
operator|>>
name|amt
operator|)
operator||
operator|(
name|bits
operator|<<
operator|(
operator|(
literal|32
operator|-
name|amt
operator|)
operator|&
literal|31
operator|)
operator|)
return|;
block|}
comment|// Rotate a 32-bit unsigned value left by the specified amount.
specifier|static
specifier|inline
name|uint32_t
name|Rotl32
parameter_list|(
name|uint32_t
name|bits
parameter_list|,
name|uint32_t
name|amt
parameter_list|)
block|{
name|assert
argument_list|(
name|amt
operator|<
literal|32
operator|&&
literal|"Invalid rotate amount"
argument_list|)
expr_stmt|;
return|return
operator|(
name|bits
operator|<<
name|amt
operator|)
operator||
operator|(
name|bits
operator|>>
operator|(
operator|(
literal|32
operator|-
name|amt
operator|)
operator|&
literal|31
operator|)
operator|)
return|;
block|}
comment|// Create a mask that starts at bit zero and includes "bit"
specifier|static
specifier|inline
name|uint64_t
name|MaskUpToBit
parameter_list|(
specifier|const
name|uint64_t
name|bit
parameter_list|)
block|{
if|if
condition|(
name|bit
operator|>=
literal|63
condition|)
return|return
operator|-
literal|1ll
return|;
return|return
operator|(
literal|1ull
operator|<<
operator|(
name|bit
operator|+
literal|1ull
operator|)
operator|)
operator|-
literal|1ull
return|;
block|}
comment|// Return an integer result equal to the number of bits of x that are ones.
specifier|static
specifier|inline
name|uint32_t
name|BitCount
parameter_list|(
name|uint64_t
name|x
parameter_list|)
block|{
comment|// c accumulates the total bits set in x
name|uint32_t
name|c
decl_stmt|;
for|for
control|(
name|c
operator|=
literal|0
init|;
name|x
condition|;
operator|++
name|c
control|)
block|{
name|x
operator|&=
name|x
operator|-
literal|1
expr_stmt|;
comment|// clear the least significant bit set
block|}
return|return
name|c
return|;
block|}
specifier|static
specifier|inline
name|bool
name|BitIsSet
parameter_list|(
specifier|const
name|uint64_t
name|value
parameter_list|,
specifier|const
name|uint64_t
name|bit
parameter_list|)
block|{
return|return
operator|(
name|value
operator|&
operator|(
literal|1ull
operator|<<
name|bit
operator|)
operator|)
operator|!=
literal|0
return|;
block|}
specifier|static
specifier|inline
name|bool
name|BitIsClear
parameter_list|(
specifier|const
name|uint64_t
name|value
parameter_list|,
specifier|const
name|uint64_t
name|bit
parameter_list|)
block|{
return|return
operator|(
name|value
operator|&
operator|(
literal|1ull
operator|<<
name|bit
operator|)
operator|)
operator|==
literal|0
return|;
block|}
specifier|static
specifier|inline
name|uint64_t
name|UnsignedBits
parameter_list|(
specifier|const
name|uint64_t
name|value
parameter_list|,
specifier|const
name|uint64_t
name|msbit
parameter_list|,
specifier|const
name|uint64_t
name|lsbit
parameter_list|)
block|{
name|uint64_t
name|result
init|=
name|value
operator|>>
name|lsbit
decl_stmt|;
name|result
operator|&=
name|MaskUpToBit
argument_list|(
name|msbit
operator|-
name|lsbit
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
specifier|inline
name|int64_t
name|SignedBits
parameter_list|(
specifier|const
name|uint64_t
name|value
parameter_list|,
specifier|const
name|uint64_t
name|msbit
parameter_list|,
specifier|const
name|uint64_t
name|lsbit
parameter_list|)
block|{
name|uint64_t
name|result
init|=
name|UnsignedBits
argument_list|(
name|value
argument_list|,
name|msbit
argument_list|,
name|lsbit
argument_list|)
decl_stmt|;
if|if
condition|(
name|BitIsSet
argument_list|(
name|value
argument_list|,
name|msbit
argument_list|)
condition|)
block|{
comment|// Sign extend
name|result
operator||=
operator|~
name|MaskUpToBit
argument_list|(
name|msbit
operator|-
name|lsbit
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_InstructionUtils_h_
end_comment

end_unit

