begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RegisterInfos_i386.h -----------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===---------------------------------------------------------------------===//
end_comment

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|DECLARE_REGISTER_INFOS_I386_STRUCT
end_ifdef

begin_comment
comment|// Computes the offset of the given GPR in the user data area.
end_comment

begin_define
define|#
directive|define
name|GPR_OFFSET
parameter_list|(
name|regname
parameter_list|)
define|\
value|(LLVM_EXTENSION offsetof(GPR, regname))
end_define

begin_comment
comment|// Computes the offset of the given FPR in the extended data area.
end_comment

begin_define
define|#
directive|define
name|FPR_OFFSET
parameter_list|(
name|regname
parameter_list|)
define|\
value|(LLVM_EXTENSION offsetof(FPR, xstate) + \      LLVM_EXTENSION offsetof(FXSAVE, regname))
end_define

begin_comment
comment|// Computes the offset of the YMM register assembled from register halves.
end_comment

begin_define
define|#
directive|define
name|YMM_OFFSET
parameter_list|(
name|regname
parameter_list|)
define|\
value|(LLVM_EXTENSION offsetof(YMM, regname))
end_define

begin_comment
comment|// Number of bytes needed to represent a FPR.
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|FPR_SIZE
argument_list|)
end_if

begin_define
define|#
directive|define
name|FPR_SIZE
parameter_list|(
name|reg
parameter_list|)
value|sizeof(((FXSAVE*)NULL)->reg)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// Number of bytes needed to represent the i'th FP register.
end_comment

begin_define
define|#
directive|define
name|FP_SIZE
value|sizeof(((MMSReg*)NULL)->bytes)
end_define

begin_comment
comment|// Number of bytes needed to represent an XMM register.
end_comment

begin_define
define|#
directive|define
name|XMM_SIZE
value|sizeof(XMMReg)
end_define

begin_comment
comment|// Number of bytes needed to represent a YMM register.
end_comment

begin_define
define|#
directive|define
name|YMM_SIZE
value|sizeof(YMMReg)
end_define

begin_comment
comment|// Note that the size and offset will be updated by platform-specific classes.
end_comment

begin_define
define|#
directive|define
name|DEFINE_GPR
parameter_list|(
name|reg
parameter_list|,
name|alt
parameter_list|,
name|kind1
parameter_list|,
name|kind2
parameter_list|,
name|kind3
parameter_list|,
name|kind4
parameter_list|)
define|\
value|{ #reg, alt, sizeof(((GPR*)NULL)->reg), GPR_OFFSET(reg), eEncodingUint,  \       eFormatHex, { kind1, kind2, kind3, kind4, lldb_##reg##_i386 }, NULL, NULL }
end_define

begin_define
define|#
directive|define
name|DEFINE_FPR
parameter_list|(
name|name
parameter_list|,
name|reg
parameter_list|,
name|kind1
parameter_list|,
name|kind2
parameter_list|,
name|kind3
parameter_list|,
name|kind4
parameter_list|)
define|\
value|{ #name, NULL, FPR_SIZE(reg), FPR_OFFSET(reg), eEncodingUint,   \       eFormatHex, { kind1, kind2, kind3, kind4, lldb_##name##_i386 }, NULL, NULL }
end_define

begin_comment
comment|// RegisterKind: GCC, DWARF, Generic, GDB, LLDB
end_comment

begin_define
define|#
directive|define
name|DEFINE_FP_ST
parameter_list|(
name|reg
parameter_list|,
name|i
parameter_list|)
define|\
value|{ #reg#i, NULL, FP_SIZE, LLVM_EXTENSION FPR_OFFSET(stmm[i]),    \       eEncodingVector, eFormatVectorOfUInt8,                       \       { gcc_st##i##_i386, dwarf_st##i##_i386, LLDB_INVALID_REGNUM, gdb_st##i##_i386, lldb_st##i##_i386 }, \       NULL, NULL }
end_define

begin_define
define|#
directive|define
name|DEFINE_FP_MM
parameter_list|(
name|reg
parameter_list|,
name|i
parameter_list|)
define|\
value|{ #reg#i, NULL, sizeof(uint64_t), LLVM_EXTENSION FPR_OFFSET(stmm[i]),   \       eEncodingUint, eFormatHex,                                            \       { gcc_mm##i##_i386, dwarf_mm##i##_i386, LLDB_INVALID_REGNUM, gdb_mm##i##_i386, lldb_mm##i##_i386 }, \       NULL, NULL }
end_define

begin_define
define|#
directive|define
name|DEFINE_XMM
parameter_list|(
name|reg
parameter_list|,
name|i
parameter_list|)
define|\
value|{ #reg#i, NULL, XMM_SIZE, LLVM_EXTENSION FPR_OFFSET(reg[i]),   \       eEncodingVector, eFormatVectorOfUInt8,                       \       { gcc_##reg##i##_i386, dwarf_##reg##i##_i386, LLDB_INVALID_REGNUM, gdb_##reg##i##_i386, lldb_##reg##i##_i386}, \       NULL, NULL }
end_define

begin_comment
comment|// I believe the YMM registers use dwarf_xmm_%_i386 register numbers and then differentiate based on register size.
end_comment

begin_define
define|#
directive|define
name|DEFINE_YMM
parameter_list|(
name|reg
parameter_list|,
name|i
parameter_list|)
define|\
value|{ #reg#i, NULL, YMM_SIZE, LLVM_EXTENSION YMM_OFFSET(reg[i]),   \       eEncodingVector, eFormatVectorOfUInt8,                       \       { LLDB_INVALID_REGNUM, dwarf_xmm##i##_i386, LLDB_INVALID_REGNUM, gdb_##reg##i##h_i386, lldb_##reg##i##_i386 }, \       NULL, NULL }
end_define

begin_define
define|#
directive|define
name|DEFINE_DR
parameter_list|(
name|reg
parameter_list|,
name|i
parameter_list|)
define|\
value|{ #reg#i, NULL, DR_SIZE, DR_OFFSET(i), eEncodingUint, eFormatHex,   \       { LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM,  \         LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM }, NULL, NULL }
end_define

begin_define
define|#
directive|define
name|DEFINE_GPR_PSEUDO_16
parameter_list|(
name|reg16
parameter_list|,
name|reg32
parameter_list|)
define|\
value|{ #reg16, NULL, 2, GPR_OFFSET(reg32), eEncodingUint,    \       eFormatHex, { LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, lldb_##reg16##_i386 }, RegisterContextPOSIX_x86::g_contained_##reg32, RegisterContextPOSIX_x86::g_invalidate_##reg32 }
end_define

begin_define
define|#
directive|define
name|DEFINE_GPR_PSEUDO_8H
parameter_list|(
name|reg8
parameter_list|,
name|reg32
parameter_list|)
define|\
value|{ #reg8, NULL, 1, GPR_OFFSET(reg32)+1, eEncodingUint,   \       eFormatHex, { LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, lldb_##reg8##_i386 }, RegisterContextPOSIX_x86::g_contained_##reg32, RegisterContextPOSIX_x86::g_invalidate_##reg32 }
end_define

begin_define
define|#
directive|define
name|DEFINE_GPR_PSEUDO_8L
parameter_list|(
name|reg8
parameter_list|,
name|reg32
parameter_list|)
define|\
value|{ #reg8, NULL, 1, GPR_OFFSET(reg32), eEncodingUint,     \       eFormatHex, { LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, LLDB_INVALID_REGNUM, lldb_##reg8##_i386 }, RegisterContextPOSIX_x86::g_contained_##reg32, RegisterContextPOSIX_x86::g_invalidate_##reg32 }
end_define

begin_decl_stmt
specifier|static
name|RegisterInfo
name|g_register_infos_i386
index|[]
init|=
block|{
comment|// General purpose registers.
name|DEFINE_GPR
argument_list|(
name|eax
argument_list|,
name|NULL
argument_list|,
name|gcc_eax_i386
argument_list|,
name|dwarf_eax_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_eax_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|ebx
argument_list|,
name|NULL
argument_list|,
name|gcc_ebx_i386
argument_list|,
name|dwarf_ebx_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_ebx_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|ecx
argument_list|,
name|NULL
argument_list|,
name|gcc_ecx_i386
argument_list|,
name|dwarf_ecx_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_ecx_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|edx
argument_list|,
name|NULL
argument_list|,
name|gcc_edx_i386
argument_list|,
name|dwarf_edx_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_edx_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|edi
argument_list|,
name|NULL
argument_list|,
name|gcc_edi_i386
argument_list|,
name|dwarf_edi_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_edi_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|esi
argument_list|,
name|NULL
argument_list|,
name|gcc_esi_i386
argument_list|,
name|dwarf_esi_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_esi_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|ebp
argument_list|,
literal|"fp"
argument_list|,
name|gcc_ebp_i386
argument_list|,
name|dwarf_ebp_i386
argument_list|,
name|LLDB_REGNUM_GENERIC_FP
argument_list|,
name|gdb_ebp_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|esp
argument_list|,
literal|"sp"
argument_list|,
name|gcc_esp_i386
argument_list|,
name|dwarf_esp_i386
argument_list|,
name|LLDB_REGNUM_GENERIC_SP
argument_list|,
name|gdb_esp_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|eip
argument_list|,
literal|"pc"
argument_list|,
name|gcc_eip_i386
argument_list|,
name|dwarf_eip_i386
argument_list|,
name|LLDB_REGNUM_GENERIC_PC
argument_list|,
name|gdb_eip_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|eflags
argument_list|,
literal|"flags"
argument_list|,
name|gcc_eflags_i386
argument_list|,
name|dwarf_eflags_i386
argument_list|,
name|LLDB_REGNUM_GENERIC_FLAGS
argument_list|,
name|gdb_eflags_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|cs
argument_list|,
name|NULL
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_cs_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_cs_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|fs
argument_list|,
name|NULL
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_fs_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_fs_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|gs
argument_list|,
name|NULL
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_gs_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_gs_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|ss
argument_list|,
name|NULL
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_ss_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_ss_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|ds
argument_list|,
name|NULL
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_ds_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_ds_i386
argument_list|)
block|,
name|DEFINE_GPR
argument_list|(
name|es
argument_list|,
name|NULL
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_es_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_es_i386
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_16
argument_list|(
name|ax
argument_list|,
name|eax
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_16
argument_list|(
name|bx
argument_list|,
name|ebx
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_16
argument_list|(
name|cx
argument_list|,
name|ecx
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_16
argument_list|(
name|dx
argument_list|,
name|edx
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_16
argument_list|(
name|di
argument_list|,
name|edi
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_16
argument_list|(
name|si
argument_list|,
name|esi
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_16
argument_list|(
name|bp
argument_list|,
name|ebp
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_16
argument_list|(
name|sp
argument_list|,
name|esp
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_8H
argument_list|(
name|ah
argument_list|,
name|eax
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_8H
argument_list|(
name|bh
argument_list|,
name|ebx
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_8H
argument_list|(
name|ch
argument_list|,
name|ecx
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_8H
argument_list|(
name|dh
argument_list|,
name|edx
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_8L
argument_list|(
name|al
argument_list|,
name|eax
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_8L
argument_list|(
name|bl
argument_list|,
name|ebx
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_8L
argument_list|(
name|cl
argument_list|,
name|ecx
argument_list|)
block|,
name|DEFINE_GPR_PSEUDO_8L
argument_list|(
name|dl
argument_list|,
name|edx
argument_list|)
block|,
comment|// i387 Floating point registers.
name|DEFINE_FPR
argument_list|(
name|fctrl
argument_list|,
name|fctrl
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_fctrl_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_fctrl_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|fstat
argument_list|,
name|fstat
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_fstat_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_fstat_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|ftag
argument_list|,
name|ftag
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_ftag_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|fop
argument_list|,
name|fop
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_fop_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|fiseg
argument_list|,
name|ptr
operator|.
name|i386_
operator|.
name|fiseg
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_fiseg_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|fioff
argument_list|,
name|ptr
operator|.
name|i386_
operator|.
name|fioff
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_fioff_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|foseg
argument_list|,
name|ptr
operator|.
name|i386_
operator|.
name|foseg
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_foseg_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|fooff
argument_list|,
name|ptr
operator|.
name|i386_
operator|.
name|fooff
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_fooff_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|mxcsr
argument_list|,
name|mxcsr
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|dwarf_mxcsr_i386
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|gdb_mxcsr_i386
argument_list|)
block|,
name|DEFINE_FPR
argument_list|(
name|mxcsrmask
argument_list|,
name|mxcsrmask
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|,
name|LLDB_INVALID_REGNUM
argument_list|)
block|,
comment|// FP registers.
name|DEFINE_FP_ST
argument_list|(
name|st
argument_list|,
literal|0
argument_list|)
block|,
name|DEFINE_FP_ST
argument_list|(
name|st
argument_list|,
literal|1
argument_list|)
block|,
name|DEFINE_FP_ST
argument_list|(
name|st
argument_list|,
literal|2
argument_list|)
block|,
name|DEFINE_FP_ST
argument_list|(
name|st
argument_list|,
literal|3
argument_list|)
block|,
name|DEFINE_FP_ST
argument_list|(
name|st
argument_list|,
literal|4
argument_list|)
block|,
name|DEFINE_FP_ST
argument_list|(
name|st
argument_list|,
literal|5
argument_list|)
block|,
name|DEFINE_FP_ST
argument_list|(
name|st
argument_list|,
literal|6
argument_list|)
block|,
name|DEFINE_FP_ST
argument_list|(
name|st
argument_list|,
literal|7
argument_list|)
block|,
name|DEFINE_FP_MM
argument_list|(
name|mm
argument_list|,
literal|0
argument_list|)
block|,
name|DEFINE_FP_MM
argument_list|(
name|mm
argument_list|,
literal|1
argument_list|)
block|,
name|DEFINE_FP_MM
argument_list|(
name|mm
argument_list|,
literal|2
argument_list|)
block|,
name|DEFINE_FP_MM
argument_list|(
name|mm
argument_list|,
literal|3
argument_list|)
block|,
name|DEFINE_FP_MM
argument_list|(
name|mm
argument_list|,
literal|4
argument_list|)
block|,
name|DEFINE_FP_MM
argument_list|(
name|mm
argument_list|,
literal|5
argument_list|)
block|,
name|DEFINE_FP_MM
argument_list|(
name|mm
argument_list|,
literal|6
argument_list|)
block|,
name|DEFINE_FP_MM
argument_list|(
name|mm
argument_list|,
literal|7
argument_list|)
block|,
comment|// XMM registers
name|DEFINE_XMM
argument_list|(
name|xmm
argument_list|,
literal|0
argument_list|)
block|,
name|DEFINE_XMM
argument_list|(
name|xmm
argument_list|,
literal|1
argument_list|)
block|,
name|DEFINE_XMM
argument_list|(
name|xmm
argument_list|,
literal|2
argument_list|)
block|,
name|DEFINE_XMM
argument_list|(
name|xmm
argument_list|,
literal|3
argument_list|)
block|,
name|DEFINE_XMM
argument_list|(
name|xmm
argument_list|,
literal|4
argument_list|)
block|,
name|DEFINE_XMM
argument_list|(
name|xmm
argument_list|,
literal|5
argument_list|)
block|,
name|DEFINE_XMM
argument_list|(
name|xmm
argument_list|,
literal|6
argument_list|)
block|,
name|DEFINE_XMM
argument_list|(
name|xmm
argument_list|,
literal|7
argument_list|)
block|,
comment|// Copy of YMM registers assembled from xmm and ymmh
name|DEFINE_YMM
argument_list|(
name|ymm
argument_list|,
literal|0
argument_list|)
block|,
name|DEFINE_YMM
argument_list|(
name|ymm
argument_list|,
literal|1
argument_list|)
block|,
name|DEFINE_YMM
argument_list|(
name|ymm
argument_list|,
literal|2
argument_list|)
block|,
name|DEFINE_YMM
argument_list|(
name|ymm
argument_list|,
literal|3
argument_list|)
block|,
name|DEFINE_YMM
argument_list|(
name|ymm
argument_list|,
literal|4
argument_list|)
block|,
name|DEFINE_YMM
argument_list|(
name|ymm
argument_list|,
literal|5
argument_list|)
block|,
name|DEFINE_YMM
argument_list|(
name|ymm
argument_list|,
literal|6
argument_list|)
block|,
name|DEFINE_YMM
argument_list|(
name|ymm
argument_list|,
literal|7
argument_list|)
block|,
comment|// Debug registers for lldb internal use
name|DEFINE_DR
argument_list|(
name|dr
argument_list|,
literal|0
argument_list|)
block|,
name|DEFINE_DR
argument_list|(
name|dr
argument_list|,
literal|1
argument_list|)
block|,
name|DEFINE_DR
argument_list|(
name|dr
argument_list|,
literal|2
argument_list|)
block|,
name|DEFINE_DR
argument_list|(
name|dr
argument_list|,
literal|3
argument_list|)
block|,
name|DEFINE_DR
argument_list|(
name|dr
argument_list|,
literal|4
argument_list|)
block|,
name|DEFINE_DR
argument_list|(
name|dr
argument_list|,
literal|5
argument_list|)
block|,
name|DEFINE_DR
argument_list|(
name|dr
argument_list|,
literal|6
argument_list|)
block|,
name|DEFINE_DR
argument_list|(
argument|dr
argument_list|,
literal|7
argument_list|)
block|}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|static_assert
argument_list|(
operator|(
sizeof|sizeof
argument_list|(
name|g_register_infos_i386
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|g_register_infos_i386
index|[
literal|0
index|]
argument_list|)
operator|)
operator|==
name|k_num_registers_i386
argument_list|,
literal|"g_register_infos_x86_64 has wrong number of register infos"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_undef
undef|#
directive|undef
name|GPR_OFFSET
end_undef

begin_undef
undef|#
directive|undef
name|FPR_OFFSET
end_undef

begin_undef
undef|#
directive|undef
name|YMM_OFFSET
end_undef

begin_undef
undef|#
directive|undef
name|FPR_SIZE
end_undef

begin_undef
undef|#
directive|undef
name|FP_SIZE
end_undef

begin_undef
undef|#
directive|undef
name|XMM_SIZE
end_undef

begin_undef
undef|#
directive|undef
name|YMM_SIZE
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_GPR
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_FPR
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_FP
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_XMM
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_YMM
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_DR
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_GPR_PSEUDO_16
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_GPR_PSEUDO_8H
end_undef

begin_undef
undef|#
directive|undef
name|DEFINE_GPR_PSEUDO_8L
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// DECLARE_REGISTER_INFOS_I386_STRUCT
end_comment

end_unit

