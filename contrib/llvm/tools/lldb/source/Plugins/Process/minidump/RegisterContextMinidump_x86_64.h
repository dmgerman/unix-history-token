begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RegisterContextMinidump_x86_64.h ------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_RegisterContextMinidump_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_RegisterContextMinidump_h_
end_define

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"MinidumpTypes.h"
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"Plugins/Process/Utility/RegisterInfoInterface.h"
end_include

begin_include
include|#
directive|include
file|"Plugins/Process/Utility/lldb-x86-register-enums.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/RegisterContext.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/BitmaskEnum.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_comment
comment|// C includes
end_comment

begin_comment
comment|// C++ includes
end_comment

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|minidump
block|{
comment|// This function receives an ArrayRef pointing to the bytes of the Minidump
comment|// register context and returns a DataBuffer that's ordered by the offsets
comment|// specified in the RegisterInfoInterface argument
comment|// This way we can reuse the already existing register contexts
name|lldb
operator|::
name|DataBufferSP
name|ConvertMinidumpContext_x86_64
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
name|source_data
argument_list|,
name|RegisterInfoInterface
operator|*
name|target_reg_interface
argument_list|)
expr_stmt|;
struct|struct
name|Uint128
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|high
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|low
expr_stmt|;
block|}
struct|;
comment|// Reference: see breakpad/crashpad source or WinNT.h
struct|struct
name|MinidumpXMMSaveArea32AMD64
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|control_word
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|status_word
expr_stmt|;
name|uint8_t
name|tag_word
decl_stmt|;
name|uint8_t
name|reserved1
decl_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|error_opcode
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|error_offset
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|error_selector
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|reserved2
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|data_offset
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|data_selector
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|reserved3
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|mx_csr
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|mx_csr_mask
expr_stmt|;
name|Uint128
name|float_registers
index|[
literal|8
index|]
decl_stmt|;
name|Uint128
name|xmm_registers
index|[
literal|16
index|]
decl_stmt|;
name|uint8_t
name|reserved4
index|[
literal|96
index|]
decl_stmt|;
block|}
struct|;
struct|struct
name|MinidumpContext_x86_64
block|{
comment|// Register parameter home addresses.
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|p1_home
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|p2_home
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|p3_home
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|p4_home
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|p5_home
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|p6_home
expr_stmt|;
comment|// The context_flags field determines which parts
comment|// of the structure are populated (have valid values)
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|context_flags
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|mx_csr
expr_stmt|;
comment|// The next register is included with
comment|// MinidumpContext_x86_64_Flags::Control
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|cs
expr_stmt|;
comment|// The next 4 registers are included with
comment|// MinidumpContext_x86_64_Flags::Segments
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|ds
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|es
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|fs
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|gs
expr_stmt|;
comment|// The next 2 registers are included with
comment|// MinidumpContext_x86_64_Flags::Control
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|ss
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|eflags
expr_stmt|;
comment|// The next 6 registers are included with
comment|// MinidumpContext_x86_64_Flags::DebugRegisters
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|dr0
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|dr1
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|dr2
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|dr3
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|dr6
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|dr7
expr_stmt|;
comment|// The next 4 registers are included with
comment|// MinidumpContext_x86_64_Flags::Integer
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rax
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rcx
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rdx
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rbx
expr_stmt|;
comment|// The next register is included with
comment|// MinidumpContext_x86_64_Flags::Control
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rsp
expr_stmt|;
comment|// The next 11 registers are included with
comment|// MinidumpContext_x86_64_Flags::Integer
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rbp
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rsi
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rdi
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|r8
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|r9
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|r10
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|r11
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|r12
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|r13
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|r14
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|r15
expr_stmt|;
comment|// The next register is included with
comment|// MinidumpContext_x86_64_Flags::Control
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|rip
expr_stmt|;
comment|// The next set of registers are included with
comment|// MinidumpContext_x86_64_Flags:FloatingPoint
union|union
name|FPR
block|{
name|MinidumpXMMSaveArea32AMD64
name|flt_save
decl_stmt|;
struct|struct
block|{
name|Uint128
name|header
index|[
literal|2
index|]
decl_stmt|;
name|Uint128
name|legacy
index|[
literal|8
index|]
decl_stmt|;
name|Uint128
name|xmm
index|[
literal|16
index|]
decl_stmt|;
block|}
name|sse_registers
struct|;
block|}
union|;
enum|enum
block|{
name|VRCount
init|=
literal|26
block|,   }
enum|;
name|Uint128
name|vector_register
index|[
name|VRCount
index|]
decl_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|vector_control
expr_stmt|;
comment|// The next 5 registers are included with
comment|// MinidumpContext_x86_64_Flags::DebugRegisters
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|debug_control
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|last_branch_to_rip
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|last_branch_from_rip
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|last_exception_to_rip
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|last_exception_from_rip
expr_stmt|;
block|}
struct|;
comment|// For context_flags. These values indicate the type of
comment|// context stored in the structure. The high 24 bits identify the CPU, the
comment|// low 8 bits identify the type of context saved.
name|LLVM_ENABLE_BITMASK_ENUMS_IN_NAMESPACE
argument_list|()
expr_stmt|;
name|enum
name|class
name|MinidumpContext_x86_64_Flags
range|:
name|uint32_t
block|{
name|x86_64_Flag
operator|=
literal|0x00100000
block|,
name|Control
operator|=
name|x86_64_Flag
operator||
literal|0x00000001
block|,
name|Integer
operator|=
name|x86_64_Flag
operator||
literal|0x00000002
block|,
name|Segments
operator|=
name|x86_64_Flag
operator||
literal|0x00000004
block|,
name|FloatingPoint
operator|=
name|x86_64_Flag
operator||
literal|0x00000008
block|,
name|DebugRegisters
operator|=
name|x86_64_Flag
operator||
literal|0x00000010
block|,
name|XState
operator|=
name|x86_64_Flag
operator||
literal|0x00000040
block|,
name|Full
operator|=
name|Control
operator||
name|Integer
operator||
name|FloatingPoint
block|,
name|All
operator|=
name|Full
operator||
name|Segments
operator||
name|DebugRegisters
block|,
name|LLVM_MARK_AS_BITMASK_ENUM
argument_list|(
comment|/* LargestValue = */
argument|All
argument_list|)
block|}
decl_stmt|;
block|}
comment|// end namespace minidump
block|}
end_decl_stmt

begin_comment
comment|// end namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_RegisterContextMinidump_h_
end_comment

end_unit

