begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MinidumpTypes.h -----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_MinidumpTypes_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_MinidumpTypes_h_
end_define

begin_comment
comment|// Project includes
end_comment

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_include
include|#
directive|include
file|"lldb/Utility/Error.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/BitmaskEnum.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ConvertUTF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_comment
comment|// C includes
end_comment

begin_comment
comment|// C++ includes
end_comment

begin_comment
comment|// Reference:
end_comment

begin_comment
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms679293(v=vs.85).aspx
end_comment

begin_comment
comment|// https://chromium.googlesource.com/breakpad/breakpad/
end_comment

begin_decl_stmt
name|namespace
name|lldb_private
block|{
name|namespace
name|minidump
block|{
name|LLVM_ENABLE_BITMASK_ENUMS_IN_NAMESPACE
argument_list|()
expr_stmt|;
name|enum
name|class
name|MinidumpHeaderConstants
range|:
name|uint32_t
block|{
name|Signature
operator|=
literal|0x504d444d
block|,
comment|// 'PMDM'
name|Version
operator|=
literal|0x0000a793
block|,
comment|// 42899
name|LLVM_MARK_AS_BITMASK_ENUM
argument_list|(
comment|/* LargestValue = */
argument|Signature
argument_list|)
block|}
decl_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680394.aspx
name|enum
name|class
name|MinidumpStreamType
range|:
name|uint32_t
block|{
name|Unused
operator|=
literal|0
block|,
name|Reserved0
operator|=
literal|1
block|,
name|Reserved1
operator|=
literal|2
block|,
name|ThreadList
operator|=
literal|3
block|,
name|ModuleList
operator|=
literal|4
block|,
name|MemoryList
operator|=
literal|5
block|,
name|Exception
operator|=
literal|6
block|,
name|SystemInfo
operator|=
literal|7
block|,
name|ThreadExList
operator|=
literal|8
block|,
name|Memory64List
operator|=
literal|9
block|,
name|CommentA
operator|=
literal|10
block|,
name|CommentW
operator|=
literal|11
block|,
name|HandleData
operator|=
literal|12
block|,
name|FunctionTable
operator|=
literal|13
block|,
name|UnloadedModuleList
operator|=
literal|14
block|,
name|MiscInfo
operator|=
literal|15
block|,
name|MemoryInfoList
operator|=
literal|16
block|,
name|ThreadInfoList
operator|=
literal|17
block|,
name|HandleOperationList
operator|=
literal|18
block|,
name|Token
operator|=
literal|19
block|,
name|JavascriptData
operator|=
literal|20
block|,
name|SystemMemoryInfo
operator|=
literal|21
block|,
name|ProcessVMCounters
operator|=
literal|22
block|,
name|LastReserved
operator|=
literal|0x0000ffff
block|,
comment|/* Breakpad extension types.  0x4767 = "Gg" */
name|BreakpadInfo
operator|=
literal|0x47670001
block|,
name|AssertionInfo
operator|=
literal|0x47670002
block|,
comment|/* These are additional minidump stream values which are specific to    * the linux breakpad implementation.   */
name|LinuxCPUInfo
operator|=
literal|0x47670003
block|,
comment|/* /proc/cpuinfo      */
name|LinuxProcStatus
operator|=
literal|0x47670004
block|,
comment|/* /proc/$x/status    */
name|LinuxLSBRelease
operator|=
literal|0x47670005
block|,
comment|/* /etc/lsb-release   */
name|LinuxCMDLine
operator|=
literal|0x47670006
block|,
comment|/* /proc/$x/cmdline   */
name|LinuxEnviron
operator|=
literal|0x47670007
block|,
comment|/* /proc/$x/environ   */
name|LinuxAuxv
operator|=
literal|0x47670008
block|,
comment|/* /proc/$x/auxv      */
name|LinuxMaps
operator|=
literal|0x47670009
block|,
comment|/* /proc/$x/maps      */
name|LinuxDSODebug
operator|=
literal|0x4767000A
block|}
decl_stmt|;
comment|// for MinidumpSystemInfo.processor_arch
name|enum
name|class
name|MinidumpCPUArchitecture
range|:
name|uint16_t
block|{
name|X86
operator|=
literal|0
block|,
comment|/* PROCESSOR_ARCHITECTURE_INTEL */
name|MIPS
operator|=
literal|1
block|,
comment|/* PROCESSOR_ARCHITECTURE_MIPS */
name|Alpha
operator|=
literal|2
block|,
comment|/* PROCESSOR_ARCHITECTURE_ALPHA */
name|PPC
operator|=
literal|3
block|,
comment|/* PROCESSOR_ARCHITECTURE_PPC */
name|SHX
operator|=
literal|4
block|,
comment|/* PROCESSOR_ARCHITECTURE_SHX (Super-H) */
name|ARM
operator|=
literal|5
block|,
comment|/* PROCESSOR_ARCHITECTURE_ARM */
name|IA64
operator|=
literal|6
block|,
comment|/* PROCESSOR_ARCHITECTURE_IA64 */
name|Alpha64
operator|=
literal|7
block|,
comment|/* PROCESSOR_ARCHITECTURE_ALPHA64 */
name|MSIL
operator|=
literal|8
block|,
comment|/* PROCESSOR_ARCHITECTURE_MSIL                                               * (Microsoft Intermediate Language) */
name|AMD64
operator|=
literal|9
block|,
comment|/* PROCESSOR_ARCHITECTURE_AMD64 */
name|X86Win64
operator|=
literal|10
block|,
comment|/* PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 (WoW64) */
name|SPARC
operator|=
literal|0x8001
block|,
comment|/* Breakpad-defined value for SPARC */
name|PPC64
operator|=
literal|0x8002
block|,
comment|/* Breakpad-defined value for PPC64 */
name|ARM64
operator|=
literal|0x8003
block|,
comment|/* Breakpad-defined value for ARM64 */
name|MIPS64
operator|=
literal|0x8004
block|,
comment|/* Breakpad-defined value for MIPS64 */
name|Unknown
operator|=
literal|0xffff
comment|/* PROCESSOR_ARCHITECTURE_UNKNOWN */
block|}
decl_stmt|;
comment|// for MinidumpSystemInfo.platform_id
name|enum
name|class
name|MinidumpOSPlatform
range|:
name|uint32_t
block|{
name|Win32S
operator|=
literal|0
block|,
comment|/* VER_PLATFORM_WIN32s (Windows 3.1) */
name|Win32Windows
operator|=
literal|1
block|,
comment|/* VER_PLATFORM_WIN32_WINDOWS (Windows 95-98-Me) */
name|Win32NT
operator|=
literal|2
block|,
comment|/* VER_PLATFORM_WIN32_NT (Windows NT, 2000+) */
name|Win32CE
operator|=
literal|3
block|,
comment|/* VER_PLATFORM_WIN32_CE, VER_PLATFORM_WIN32_HH                                   * (Windows CE, Windows Mobile, "Handheld") */
comment|/* The following values are Breakpad-defined. */
name|Unix
operator|=
literal|0x8000
block|,
comment|/* Generic Unix-ish */
name|MacOSX
operator|=
literal|0x8101
block|,
comment|/* Mac OS X/Darwin */
name|IOS
operator|=
literal|0x8102
block|,
comment|/* iOS */
name|Linux
operator|=
literal|0x8201
block|,
comment|/* Linux */
name|Solaris
operator|=
literal|0x8202
block|,
comment|/* Solaris */
name|Android
operator|=
literal|0x8203
block|,
comment|/* Android */
name|PS3
operator|=
literal|0x8204
block|,
comment|/* PS3 */
name|NaCl
operator|=
literal|0x8205
comment|/* Native Client (NaCl) */
block|}
decl_stmt|;
comment|// For MinidumpCPUInfo.arm_cpu_info.elf_hwcaps.
comment|// This matches the Linux kernel definitions from<asm/hwcaps.h>
name|enum
name|class
name|MinidumpPCPUInformationARMElfHwCaps
range|:
name|uint32_t
block|{
name|SWP
operator|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|Half
operator|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|Thumb
operator|=
operator|(
literal|1
operator|<<
literal|2
operator|)
block|,
name|_26BIT
operator|=
operator|(
literal|1
operator|<<
literal|3
operator|)
block|,
name|FastMult
operator|=
operator|(
literal|1
operator|<<
literal|4
operator|)
block|,
name|FPA
operator|=
operator|(
literal|1
operator|<<
literal|5
operator|)
block|,
name|VFP
operator|=
operator|(
literal|1
operator|<<
literal|6
operator|)
block|,
name|EDSP
operator|=
operator|(
literal|1
operator|<<
literal|7
operator|)
block|,
name|Java
operator|=
operator|(
literal|1
operator|<<
literal|8
operator|)
block|,
name|IWMMXT
operator|=
operator|(
literal|1
operator|<<
literal|9
operator|)
block|,
name|Crunch
operator|=
operator|(
literal|1
operator|<<
literal|10
operator|)
block|,
name|ThumbEE
operator|=
operator|(
literal|1
operator|<<
literal|11
operator|)
block|,
name|Neon
operator|=
operator|(
literal|1
operator|<<
literal|12
operator|)
block|,
name|VFPv3
operator|=
operator|(
literal|1
operator|<<
literal|13
operator|)
block|,
name|VFPv3D16
operator|=
operator|(
literal|1
operator|<<
literal|14
operator|)
block|,
name|TLS
operator|=
operator|(
literal|1
operator|<<
literal|15
operator|)
block|,
name|VFPv4
operator|=
operator|(
literal|1
operator|<<
literal|16
operator|)
block|,
name|IDIVA
operator|=
operator|(
literal|1
operator|<<
literal|17
operator|)
block|,
name|IDIVT
operator|=
operator|(
literal|1
operator|<<
literal|18
operator|)
block|,
name|LLVM_MARK_AS_BITMASK_ENUM
argument_list|(
comment|/* LargestValue = */
argument|IDIVT
argument_list|)
block|}
decl_stmt|;
name|enum
name|class
name|MinidumpMiscInfoFlags
range|:
name|uint32_t
block|{
name|ProcessID
operator|=
operator|(
literal|1
operator|<<
literal|0
operator|)
block|,
name|ProcessTimes
operator|=
operator|(
literal|1
operator|<<
literal|1
operator|)
block|,
name|LLVM_MARK_AS_BITMASK_ENUM
argument_list|(
comment|/* LargestValue = */
argument|ProcessTimes
argument_list|)
block|}
decl_stmt|;
name|template
operator|<
name|typename
name|T
operator|>
name|Error
name|consumeObject
argument_list|(
argument|llvm::ArrayRef<uint8_t>&Buffer
argument_list|,
argument|const T *&Object
argument_list|)
block|{
name|Error
name|error
block|;
if|if
condition|(
name|Buffer
operator|.
name|size
argument_list|()
operator|<
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|)
block|{
name|error
operator|.
name|SetErrorString
argument_list|(
literal|"Insufficient buffer!"
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
name|Object
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|T
operator|*
operator|>
operator|(
name|Buffer
operator|.
name|data
argument_list|()
operator|)
expr_stmt|;
name|Buffer
operator|=
name|Buffer
operator|.
name|drop_front
argument_list|(
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|error
return|;
block|}
comment|// parse a MinidumpString which is with UTF-16
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680395(v=vs.85).aspx
name|llvm
operator|::
name|Optional
operator|<
name|std
operator|::
name|string
operator|>
name|parseMinidumpString
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
expr_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680378(v=vs.85).aspx
struct|struct
name|MinidumpHeader
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|signature
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|version
expr_stmt|;
comment|// The high 16 bits of version field are implementation specific
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|streams_count
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|stream_directory_rva
expr_stmt|;
comment|// offset of the stream directory
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|checksum
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|time_date_stamp
expr_stmt|;
comment|// time_t format
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|flags
expr_stmt|;
specifier|static
specifier|const
name|MinidumpHeader
modifier|*
name|Parse
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
decl_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpHeader
argument_list|)
operator|==
literal|32
argument_list|,
literal|"sizeof MinidumpHeader is not correct!"
argument_list|)
expr_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680383.aspx
struct|struct
name|MinidumpLocationDescriptor
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|data_size
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|rva
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpLocationDescriptor
argument_list|)
operator|==
literal|8
argument_list|,
literal|"sizeof MinidumpLocationDescriptor is not correct!"
argument_list|)
expr_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680384(v=vs.85).aspx
struct|struct
name|MinidumpMemoryDescriptor
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|start_of_memory_range
expr_stmt|;
name|MinidumpLocationDescriptor
name|memory
decl_stmt|;
specifier|static
name|llvm
operator|::
name|ArrayRef
operator|<
name|MinidumpMemoryDescriptor
operator|>
name|ParseMemoryList
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpMemoryDescriptor
argument_list|)
operator|==
literal|16
argument_list|,
literal|"sizeof MinidumpMemoryDescriptor is not correct!"
argument_list|)
expr_stmt|;
struct|struct
name|MinidumpMemoryDescriptor64
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|start_of_memory_range
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|data_size
expr_stmt|;
specifier|static
name|std
operator|::
name|pair
operator|<
name|llvm
operator|::
name|ArrayRef
operator|<
name|MinidumpMemoryDescriptor64
operator|>
operator|,
name|uint64_t
operator|>
name|ParseMemory64List
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpMemoryDescriptor64
argument_list|)
operator|==
literal|16
argument_list|,
literal|"sizeof MinidumpMemoryDescriptor64 is not correct!"
argument_list|)
expr_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680365.aspx
struct|struct
name|MinidumpDirectory
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|stream_type
expr_stmt|;
name|MinidumpLocationDescriptor
name|location
decl_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpDirectory
argument_list|)
operator|==
literal|12
argument_list|,
literal|"sizeof MinidumpDirectory is not correct!"
argument_list|)
expr_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680385(v=vs.85).aspx
struct|struct
name|MinidumpMemoryInfoListHeader
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|size_of_header
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|size_of_entry
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|num_of_entries
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpMemoryInfoListHeader
argument_list|)
operator|==
literal|16
argument_list|,
literal|"sizeof MinidumpMemoryInfoListHeader is not correct!"
argument_list|)
expr_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680386(v=vs.85).aspx
struct|struct
name|MinidumpMemoryInfo
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|base_address
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|allocation_base
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|allocation_protect
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|alignment1
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|region_size
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|state
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|protect
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|type
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|alignment2
expr_stmt|;
specifier|static
name|std
operator|::
name|vector
operator|<
specifier|const
name|MinidumpMemoryInfo
operator|*
operator|>
name|ParseMemoryInfoList
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpMemoryInfo
argument_list|)
operator|==
literal|48
argument_list|,
literal|"sizeof MinidumpMemoryInfo is not correct!"
argument_list|)
expr_stmt|;
name|enum
name|class
name|MinidumpMemoryInfoState
range|:
name|uint32_t
block|{
name|MemCommit
operator|=
literal|0x1000
block|,
name|MemFree
operator|=
literal|0x10000
block|,
name|MemReserve
operator|=
literal|0x2000
block|,
name|LLVM_MARK_AS_BITMASK_ENUM
argument_list|(
comment|/* LargestValue = */
argument|MemFree
argument_list|)
block|}
decl_stmt|;
name|enum
name|class
name|MinidumpMemoryInfoType
range|:
name|uint32_t
block|{
name|MemImage
operator|=
literal|0x1000000
block|,
name|MemMapped
operator|=
literal|0x40000
block|,
name|MemPrivate
operator|=
literal|0x20000
block|,
name|LLVM_MARK_AS_BITMASK_ENUM
argument_list|(
comment|/* LargestValue = */
argument|MemImage
argument_list|)
block|}
decl_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/aa366786(v=vs.85).aspx
name|enum
name|class
name|MinidumpMemoryProtectionContants
range|:
name|uint32_t
block|{
name|PageExecute
operator|=
literal|0x10
block|,
name|PageExecuteRead
operator|=
literal|0x20
block|,
name|PageExecuteReadWrite
operator|=
literal|0x40
block|,
name|PageExecuteWriteCopy
operator|=
literal|0x80
block|,
name|PageNoAccess
operator|=
literal|0x01
block|,
name|PageReadOnly
operator|=
literal|0x02
block|,
name|PageReadWrite
operator|=
literal|0x04
block|,
name|PageWriteCopy
operator|=
literal|0x08
block|,
name|PageTargetsInvalid
operator|=
literal|0x40000000
block|,
name|PageTargetsNoUpdate
operator|=
literal|0x40000000
block|,
name|PageWritable
operator|=
name|PageExecuteReadWrite
operator||
name|PageExecuteWriteCopy
operator||
name|PageReadWrite
operator||
name|PageWriteCopy
block|,
name|PageExecutable
operator|=
name|PageExecute
operator||
name|PageExecuteRead
operator||
name|PageExecuteReadWrite
operator||
name|PageExecuteWriteCopy
block|,
name|LLVM_MARK_AS_BITMASK_ENUM
argument_list|(
comment|/* LargestValue = */
argument|PageTargetsInvalid
argument_list|)
block|}
decl_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680517(v=vs.85).aspx
struct|struct
name|MinidumpThread
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|thread_id
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|suspend_count
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|priority_class
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|priority
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|teb
expr_stmt|;
name|MinidumpMemoryDescriptor
name|stack
decl_stmt|;
name|MinidumpLocationDescriptor
name|thread_context
decl_stmt|;
specifier|static
specifier|const
name|MinidumpThread
modifier|*
name|Parse
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
decl_stmt|;
specifier|static
name|llvm
operator|::
name|ArrayRef
operator|<
name|MinidumpThread
operator|>
name|ParseThreadList
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpThread
argument_list|)
operator|==
literal|48
argument_list|,
literal|"sizeof MinidumpThread is not correct!"
argument_list|)
expr_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680396(v=vs.85).aspx
union|union
name|MinidumpCPUInfo
block|{
struct|struct
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|vendor_id
index|[
literal|3
index|]
expr_stmt|;
comment|/* cpuid 0: ebx, edx, ecx */
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|version_information
expr_stmt|;
comment|/* cpuid 1: eax */
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|feature_information
expr_stmt|;
comment|/* cpuid 1: edx */
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|amd_extended_cpu_features
expr_stmt|;
comment|/* cpuid 0x80000001, ebx */
block|}
name|x86_cpu_info
struct|;
struct|struct
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|cpuid
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|elf_hwcaps
expr_stmt|;
comment|/* linux specific, 0 otherwise */
block|}
name|arm_cpu_info
struct|;
struct|struct
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|processor_features
index|[
literal|2
index|]
expr_stmt|;
block|}
name|other_cpu_info
struct|;
block|}
union|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpCPUInfo
argument_list|)
operator|==
literal|24
argument_list|,
literal|"sizeof MinidumpCPUInfo is not correct!"
argument_list|)
expr_stmt|;
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680396(v=vs.85).aspx
struct|struct
name|MinidumpSystemInfo
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|processor_arch
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|processor_level
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|processor_revision
expr_stmt|;
name|uint8_t
name|number_of_processors
decl_stmt|;
name|uint8_t
name|product_type
decl_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|major_version
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|minor_version
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|build_number
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|platform_id
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|csd_version_rva
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|suit_mask
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle16_t
name|reserved2
expr_stmt|;
name|MinidumpCPUInfo
name|cpu
decl_stmt|;
specifier|static
specifier|const
name|MinidumpSystemInfo
modifier|*
name|Parse
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
decl_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpSystemInfo
argument_list|)
operator|==
literal|56
argument_list|,
literal|"sizeof MinidumpSystemInfo is not correct!"
argument_list|)
expr_stmt|;
comment|// TODO misc2, misc3 ?
comment|// Reference:
comment|// https://msdn.microsoft.com/en-us/library/windows/desktop/ms680389(v=vs.85).aspx
struct|struct
name|MinidumpMiscInfo
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|size
expr_stmt|;
comment|// flags1 represents what info in the struct is valid
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|flags1
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|process_id
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|process_create_time
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|process_user_time
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|process_kernel_time
expr_stmt|;
specifier|static
specifier|const
name|MinidumpMiscInfo
modifier|*
name|Parse
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
decl_stmt|;
name|llvm
operator|::
name|Optional
operator|<
name|lldb
operator|::
name|pid_t
operator|>
name|GetPid
argument_list|()
specifier|const
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpMiscInfo
argument_list|)
operator|==
literal|24
argument_list|,
literal|"sizeof MinidumpMiscInfo is not correct!"
argument_list|)
expr_stmt|;
comment|// The /proc/pid/status is saved as an ascii string in the file
name|class
name|LinuxProcStatus
block|{
name|public
label|:
name|llvm
operator|::
name|StringRef
name|proc_status
expr_stmt|;
name|lldb
operator|::
name|pid_t
name|pid
expr_stmt|;
specifier|static
name|llvm
operator|::
name|Optional
operator|<
name|LinuxProcStatus
operator|>
name|Parse
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
expr_stmt|;
name|lldb
operator|::
name|pid_t
name|GetPid
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|LinuxProcStatus
argument_list|()
operator|=
expr|default
expr_stmt|;
block|}
empty_stmt|;
comment|// MinidumpModule stuff
struct|struct
name|MinidumpVSFixedFileInfo
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|signature
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|struct_version
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_version_hi
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_version_lo
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|product_version_hi
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|product_version_lo
expr_stmt|;
comment|// file_flags_mask - identifies valid bits in fileFlags
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_flags_mask
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_flags
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_os
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_type
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_subtype
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_date_hi
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|file_date_lo
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpVSFixedFileInfo
argument_list|)
operator|==
literal|52
argument_list|,
literal|"sizeof MinidumpVSFixedFileInfo is not correct!"
argument_list|)
expr_stmt|;
struct|struct
name|MinidumpModule
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|base_of_image
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|size_of_image
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|checksum
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|time_date_stamp
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|module_name_rva
expr_stmt|;
name|MinidumpVSFixedFileInfo
name|version_info
decl_stmt|;
name|MinidumpLocationDescriptor
name|CV_record
decl_stmt|;
name|MinidumpLocationDescriptor
name|misc_record
decl_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|reserved0
index|[
literal|2
index|]
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|reserved1
index|[
literal|2
index|]
expr_stmt|;
specifier|static
specifier|const
name|MinidumpModule
modifier|*
name|Parse
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
decl_stmt|;
specifier|static
name|llvm
operator|::
name|ArrayRef
operator|<
name|MinidumpModule
operator|>
name|ParseModuleList
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpModule
argument_list|)
operator|==
literal|108
argument_list|,
literal|"sizeof MinidumpVSFixedFileInfo is not correct!"
argument_list|)
expr_stmt|;
comment|// Exception stuff
struct|struct
name|MinidumpException
block|{
enum_decl|enum :
name|unsigned
block|{
name|ExceptonInfoMaxParams
init|=
literal|15
block|,
name|DumpRequested
init|=
literal|0xFFFFFFFF
block|,   }
enum_decl|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|exception_code
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|exception_flags
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|exception_record
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|exception_address
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|number_parameters
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|unused_alignment
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle64_t
name|exception_information
index|[
name|ExceptonInfoMaxParams
index|]
expr_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpException
argument_list|)
operator|==
literal|152
argument_list|,
literal|"sizeof MinidumpException is not correct!"
argument_list|)
expr_stmt|;
struct|struct
name|MinidumpExceptionStream
block|{
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|thread_id
expr_stmt|;
name|llvm
operator|::
name|support
operator|::
name|ulittle32_t
name|alignment
expr_stmt|;
name|MinidumpException
name|exception_record
decl_stmt|;
name|MinidumpLocationDescriptor
name|thread_context
decl_stmt|;
specifier|static
specifier|const
name|MinidumpExceptionStream
modifier|*
name|Parse
argument_list|(
name|llvm
operator|::
name|ArrayRef
operator|<
name|uint8_t
operator|>
operator|&
name|data
argument_list|)
decl_stmt|;
block|}
struct|;
name|static_assert
argument_list|(
sizeof|sizeof
argument_list|(
name|MinidumpExceptionStream
argument_list|)
operator|==
literal|168
argument_list|,
literal|"sizeof MinidumpExceptionStream is not correct!"
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace minidump
end_comment

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_MinidumpTypes_h_
end_comment

end_unit

