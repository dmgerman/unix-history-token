begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- GDBRemoteCommunicationServer.h --------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|liblldb_GDBRemoteCommunicationServer_h_
end_ifndef

begin_define
define|#
directive|define
name|liblldb_GDBRemoteCommunicationServer_h_
end_define

begin_comment
comment|// C Includes
end_comment

begin_comment
comment|// C++ Includes
end_comment

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<unordered_map>
end_include

begin_comment
comment|// Other libraries and framework includes
end_comment

begin_comment
comment|// Project includes
end_comment

begin_include
include|#
directive|include
file|"lldb/lldb-private-forward.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Communication.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Host/Mutex.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Target/Process.h"
end_include

begin_include
include|#
directive|include
file|"GDBRemoteCommunication.h"
end_include

begin_include
include|#
directive|include
file|"../../../Host/common/NativeProcessProtocol.h"
end_include

begin_decl_stmt
name|class
name|ProcessGDBRemote
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|StringExtractorGDBRemote
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|GDBRemoteCommunicationServer
range|:
name|public
name|GDBRemoteCommunication
decl_stmt|,
name|public
name|lldb_private
decl|::
name|NativeProcessProtocol
decl|::
name|NativeDelegate
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|uint16_t
operator|,
name|lldb
operator|::
name|pid_t
operator|>
name|PortMap
expr_stmt|;
enum|enum
block|{
name|eBroadcastBitRunPacketSent
init|=
name|kLoUserBroadcastBit
block|}
enum|;
comment|//------------------------------------------------------------------
comment|// Constructors and Destructors
comment|//------------------------------------------------------------------
name|GDBRemoteCommunicationServer
argument_list|(
argument|bool is_platform
argument_list|)
empty_stmt|;
name|GDBRemoteCommunicationServer
argument_list|(
argument|bool is_platform
argument_list|,
argument|const lldb::PlatformSP& platform_sp
argument_list|,
argument|lldb::DebuggerSP& debugger_sp
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|GDBRemoteCommunicationServer
argument_list|()
expr_stmt|;
name|PacketResult
name|GetPacketAndSendResponse
argument_list|(
name|uint32_t
name|timeout_usec
argument_list|,
name|lldb_private
operator|::
name|Error
operator|&
name|error
argument_list|,
name|bool
operator|&
name|interrupt
argument_list|,
name|bool
operator|&
name|quit
argument_list|)
decl_stmt|;
name|virtual
name|bool
name|GetThreadSuffixSupported
parameter_list|()
block|{
return|return
name|true
return|;
block|}
comment|// After connecting, do a little handshake with the client to make sure
comment|// we are at least communicating
name|bool
name|HandshakeWithClient
argument_list|(
name|lldb_private
operator|::
name|Error
operator|*
name|error_ptr
argument_list|)
decl_stmt|;
comment|// Set both ports to zero to let the platform automatically bind to
comment|// a port chosen by the OS.
name|void
name|SetPortMap
argument_list|(
name|PortMap
operator|&&
name|port_map
argument_list|)
block|{
name|m_port_map
operator|=
name|port_map
expr_stmt|;
block|}
comment|//----------------------------------------------------------------------
comment|// If we are using a port map where we can only use certain ports,
comment|// get the next available port.
comment|//
comment|// If we are using a port map and we are out of ports, return UINT16_MAX
comment|//
comment|// If we aren't using a port map, return 0 to indicate we should bind to
comment|// port 0 and then figure out which port we used.
comment|//----------------------------------------------------------------------
name|uint16_t
name|GetNextAvailablePort
parameter_list|()
block|{
if|if
condition|(
name|m_port_map
operator|.
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// Bind to port zero and get a port, we didn't have any limitations
for|for
control|(
name|auto
operator|&
name|pair
operator|:
name|m_port_map
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|second
operator|==
name|LLDB_INVALID_PROCESS_ID
condition|)
block|{
name|pair
operator|.
name|second
operator|=
operator|~
operator|(
name|lldb
operator|::
name|pid_t
operator|)
name|LLDB_INVALID_PROCESS_ID
expr_stmt|;
return|return
name|pair
operator|.
name|first
return|;
block|}
block|}
return|return
name|UINT16_MAX
return|;
block|}
name|bool
name|AssociatePortWithProcess
argument_list|(
name|uint16_t
name|port
argument_list|,
name|lldb
operator|::
name|pid_t
name|pid
argument_list|)
block|{
name|PortMap
operator|::
name|iterator
name|pos
operator|=
name|m_port_map
operator|.
name|find
argument_list|(
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
name|m_port_map
operator|.
name|end
argument_list|()
condition|)
block|{
name|pos
operator|->
name|second
operator|=
name|pid
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|FreePort
parameter_list|(
name|uint16_t
name|port
parameter_list|)
block|{
name|PortMap
operator|::
name|iterator
name|pos
operator|=
name|m_port_map
operator|.
name|find
argument_list|(
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|!=
name|m_port_map
operator|.
name|end
argument_list|()
condition|)
block|{
name|pos
operator|->
name|second
operator|=
name|LLDB_INVALID_PROCESS_ID
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
name|bool
name|FreePortForProcess
argument_list|(
name|lldb
operator|::
name|pid_t
name|pid
argument_list|)
block|{
if|if
condition|(
operator|!
name|m_port_map
operator|.
name|empty
argument_list|()
condition|)
block|{
for|for
control|(
name|auto
operator|&
name|pair
operator|:
name|m_port_map
control|)
block|{
if|if
condition|(
name|pair
operator|.
name|second
operator|==
name|pid
condition|)
block|{
name|pair
operator|.
name|second
operator|=
name|LLDB_INVALID_PROCESS_ID
expr_stmt|;
return|return
name|true
return|;
block|}
block|}
block|}
return|return
name|false
return|;
block|}
name|void
name|SetPortOffset
parameter_list|(
name|uint16_t
name|port_offset
parameter_list|)
block|{
name|m_port_offset
operator|=
name|port_offset
expr_stmt|;
block|}
comment|//------------------------------------------------------------------
comment|/// Specify the program to launch and its arguments.
comment|///
comment|/// The LaunchProcess () command can be executed to do the lauching.
comment|///
comment|/// @param[in] args
comment|///     The command line to launch.
comment|///
comment|/// @param[in] argc
comment|///     The number of elements in the args array of cstring pointers.
comment|///
comment|/// @return
comment|///     An Error object indicating the success or failure of making
comment|///     the setting.
comment|//------------------------------------------------------------------
name|lldb_private
operator|::
name|Error
name|SetLaunchArguments
argument_list|(
argument|const char *const args[]
argument_list|,
argument|int argc
argument_list|)
expr_stmt|;
comment|//------------------------------------------------------------------
comment|/// Specify the launch flags for the process.
comment|///
comment|/// The LaunchProcess () command can be executed to do the lauching.
comment|///
comment|/// @param[in] launch_flags
comment|///     The launch flags to use when launching this process.
comment|///
comment|/// @return
comment|///     An Error object indicating the success or failure of making
comment|///     the setting.
comment|//------------------------------------------------------------------
name|lldb_private
operator|::
name|Error
name|SetLaunchFlags
argument_list|(
argument|unsigned int launch_flags
argument_list|)
expr_stmt|;
comment|//------------------------------------------------------------------
comment|/// Launch a process with the current launch settings.
comment|///
comment|/// This method supports running an lldb-gdbserver or similar
comment|/// server in a situation where the startup code has been provided
comment|/// with all the information for a child process to be launched.
comment|///
comment|/// @return
comment|///     An Error object indicating the success or failure of the
comment|///     launch.
comment|//------------------------------------------------------------------
name|lldb_private
operator|::
name|Error
name|LaunchProcess
argument_list|()
expr_stmt|;
comment|//------------------------------------------------------------------
comment|/// Attach to a process.
comment|///
comment|/// This method supports attaching llgs to a process accessible via the
comment|/// configured Platform.
comment|///
comment|/// @return
comment|///     An Error object indicating the success or failure of the
comment|///     attach operation.
comment|//------------------------------------------------------------------
name|lldb_private
operator|::
name|Error
name|AttachToProcess
argument_list|(
argument|lldb::pid_t pid
argument_list|)
expr_stmt|;
comment|//------------------------------------------------------------------
comment|// NativeProcessProtocol::NativeDelegate overrides
comment|//------------------------------------------------------------------
name|void
name|InitializeDelegate
argument_list|(
name|lldb_private
operator|::
name|NativeProcessProtocol
operator|*
name|process
argument_list|)
name|override
decl_stmt|;
name|void
name|ProcessStateChanged
argument_list|(
name|lldb_private
operator|::
name|NativeProcessProtocol
operator|*
name|process
argument_list|,
name|lldb
operator|::
name|StateType
name|state
argument_list|)
name|override
decl_stmt|;
name|void
name|DidExec
argument_list|(
name|lldb_private
operator|::
name|NativeProcessProtocol
operator|*
name|process
argument_list|)
name|override
decl_stmt|;
name|protected
label|:
name|lldb
operator|::
name|PlatformSP
name|m_platform_sp
expr_stmt|;
name|lldb
operator|::
name|thread_t
name|m_async_thread
expr_stmt|;
name|lldb_private
operator|::
name|ProcessLaunchInfo
name|m_process_launch_info
expr_stmt|;
name|lldb_private
operator|::
name|Error
name|m_process_launch_error
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|lldb
operator|::
name|pid_t
operator|>
name|m_spawned_pids
expr_stmt|;
name|lldb_private
operator|::
name|Mutex
name|m_spawned_pids_mutex
expr_stmt|;
name|lldb_private
operator|::
name|ProcessInstanceInfoList
name|m_proc_infos
expr_stmt|;
name|uint32_t
name|m_proc_infos_index
decl_stmt|;
name|PortMap
name|m_port_map
decl_stmt|;
name|uint16_t
name|m_port_offset
decl_stmt|;
name|lldb
operator|::
name|tid_t
name|m_current_tid
expr_stmt|;
name|lldb
operator|::
name|tid_t
name|m_continue_tid
expr_stmt|;
name|lldb_private
operator|::
name|Mutex
name|m_debugged_process_mutex
expr_stmt|;
name|lldb_private
operator|::
name|NativeProcessProtocolSP
name|m_debugged_process_sp
expr_stmt|;
name|lldb
operator|::
name|DebuggerSP
name|m_debugger_sp
expr_stmt|;
name|Communication
name|m_stdio_communication
decl_stmt|;
name|bool
name|m_exit_now
decl_stmt|;
comment|// use in asynchronous handling to indicate process should exit.
name|lldb
operator|::
name|StateType
name|m_inferior_prev_state
expr_stmt|;
name|bool
name|m_thread_suffix_supported
decl_stmt|;
name|bool
name|m_list_threads_in_stop_reply
decl_stmt|;
name|lldb
operator|::
name|DataBufferSP
name|m_active_auxv_buffer_sp
expr_stmt|;
name|lldb_private
operator|::
name|Mutex
name|m_saved_registers_mutex
expr_stmt|;
name|std
operator|::
name|unordered_map
operator|<
name|uint32_t
operator|,
name|lldb
operator|::
name|DataBufferSP
operator|>
name|m_saved_registers_map
expr_stmt|;
name|uint32_t
name|m_next_saved_registers_id
decl_stmt|;
name|PacketResult
name|SendUnimplementedResponse
parameter_list|(
specifier|const
name|char
modifier|*
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|SendErrorResponse
parameter_list|(
name|uint8_t
name|error
parameter_list|)
function_decl|;
name|PacketResult
name|SendIllFormedResponse
parameter_list|(
specifier|const
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|,
specifier|const
name|char
modifier|*
name|error_message
parameter_list|)
function_decl|;
name|PacketResult
name|SendOKResponse
parameter_list|()
function_decl|;
name|PacketResult
name|SendONotification
parameter_list|(
specifier|const
name|char
modifier|*
name|buffer
parameter_list|,
name|uint32_t
name|len
parameter_list|)
function_decl|;
name|PacketResult
name|SendWResponse
argument_list|(
name|lldb_private
operator|::
name|NativeProcessProtocol
operator|*
name|process
argument_list|)
decl_stmt|;
name|PacketResult
name|SendStopReplyPacketForThread
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|)
decl_stmt|;
name|PacketResult
name|SendStopReasonForState
argument_list|(
name|lldb
operator|::
name|StateType
name|process_state
argument_list|,
name|bool
name|flush_on_exit
argument_list|)
decl_stmt|;
name|PacketResult
name|Handle_A
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qLaunchSuccess
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qHostInfo
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qLaunchGDBServer
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qKillSpawnedProcess
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_k
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qPlatform_mkdir
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qPlatform_chmod
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qProcessInfo
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qProcessInfoPID
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qfProcessInfo
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qsProcessInfo
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qC
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qUserName
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qGroupName
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qSpeedTest
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QEnvironment
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QLaunchArch
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QSetDisableASLR
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QSetDetachOnError
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QSetWorkingDir
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qGetWorkingDir
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QStartNoAckMode
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QSetSTDIN
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QSetSTDOUT
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QSetSTDERR
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_C
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_c
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|,
name|bool
name|skip_file_pos_adjustment
init|=
name|false
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vCont
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vCont_actions
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_stop_reason
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_Open
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_Close
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_pRead
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_pWrite
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_Size
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_Mode
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_Exists
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_symlink
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_unlink
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_Stat
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vFile_MD5
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qPlatform_shell
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qRegisterInfo
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qfThreadInfo
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qsThreadInfo
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_p
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_P
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_H
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_interrupt
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_m
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_M
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qMemoryRegionInfoSupported
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qMemoryRegionInfo
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_Z
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_z
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_s
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qSupported
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QThreadSuffixSupported
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QListThreadsInStopReply
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_qXfer_auxv_read
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QSaveRegisterState
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_QRestoreRegisterState
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|PacketResult
name|Handle_vAttach
parameter_list|(
name|StringExtractorGDBRemote
modifier|&
name|packet
parameter_list|)
function_decl|;
name|void
name|SetCurrentThreadID
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|tid_t
name|GetCurrentThreadID
argument_list|()
specifier|const
expr_stmt|;
name|void
name|SetContinueThreadID
argument_list|(
name|lldb
operator|::
name|tid_t
name|tid
argument_list|)
decl_stmt|;
name|lldb
operator|::
name|tid_t
name|GetContinueThreadID
argument_list|()
specifier|const
block|{
return|return
name|m_continue_tid
return|;
block|}
name|lldb_private
operator|::
name|Error
name|SetSTDIOFileDescriptor
argument_list|(
argument|int fd
argument_list|)
expr_stmt|;
specifier|static
name|void
name|STDIOReadThreadBytesReceived
parameter_list|(
name|void
modifier|*
name|baton
parameter_list|,
specifier|const
name|void
modifier|*
name|src
parameter_list|,
name|size_t
name|src_len
parameter_list|)
function_decl|;
name|private
label|:
name|bool
name|DebugserverProcessReaped
argument_list|(
name|lldb
operator|::
name|pid_t
name|pid
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|ReapDebugserverProcess
argument_list|(
name|void
operator|*
name|callback_baton
argument_list|,
name|lldb
operator|::
name|pid_t
name|pid
argument_list|,
name|bool
name|exited
argument_list|,
name|int
name|signal
argument_list|,
name|int
name|status
argument_list|)
decl_stmt|;
name|bool
name|DebuggedProcessReaped
argument_list|(
name|lldb
operator|::
name|pid_t
name|pid
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|ReapDebuggedProcess
argument_list|(
name|void
operator|*
name|callback_baton
argument_list|,
name|lldb
operator|::
name|pid_t
name|pid
argument_list|,
name|bool
name|exited
argument_list|,
name|int
name|signal
argument_list|,
name|int
name|status
argument_list|)
decl_stmt|;
name|bool
name|KillSpawnedProcess
argument_list|(
name|lldb
operator|::
name|pid_t
name|pid
argument_list|)
decl_stmt|;
name|bool
name|IsGdbServer
parameter_list|()
block|{
return|return
operator|!
name|m_is_platform
return|;
block|}
comment|/// Launch a process from lldb-gdbserver
name|lldb_private
operator|::
name|Error
name|LaunchDebugServerProcess
argument_list|()
expr_stmt|;
comment|/// Launch a process from lldb-platform
name|lldb_private
operator|::
name|Error
name|LaunchPlatformProcess
argument_list|()
expr_stmt|;
name|void
name|HandleInferiorState_Exited
argument_list|(
name|lldb_private
operator|::
name|NativeProcessProtocol
operator|*
name|process
argument_list|)
decl_stmt|;
name|void
name|HandleInferiorState_Stopped
argument_list|(
name|lldb_private
operator|::
name|NativeProcessProtocol
operator|*
name|process
argument_list|)
decl_stmt|;
name|void
name|FlushInferiorOutput
parameter_list|()
function_decl|;
name|lldb_private
operator|::
name|NativeThreadProtocolSP
name|GetThreadFromSuffix
argument_list|(
name|StringExtractorGDBRemote
operator|&
name|packet
argument_list|)
expr_stmt|;
name|uint32_t
name|GetNextSavedRegistersID
parameter_list|()
function_decl|;
name|void
name|MaybeCloseInferiorTerminalConnection
parameter_list|()
function_decl|;
name|void
name|ClearProcessSpecificData
parameter_list|()
function_decl|;
comment|//------------------------------------------------------------------
comment|// For GDBRemoteCommunicationServer only
comment|//------------------------------------------------------------------
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|GDBRemoteCommunicationServer
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// liblldb_GDBRemoteCommunicationServer_h_
end_comment

end_unit

