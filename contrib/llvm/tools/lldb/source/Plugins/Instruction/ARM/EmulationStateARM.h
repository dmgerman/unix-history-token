begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- lldb_EmulationStateARM.h --------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_EmulationStateARM_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_EmulationStateARM_h_
end_define

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|"lldb/Core/EmulateInstruction.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Opcode.h"
end_include

begin_decl_stmt
name|class
name|EmulationStateARM
block|{
name|public
label|:
name|EmulationStateARM
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|EmulationStateARM
argument_list|()
expr_stmt|;
name|bool
name|StorePseudoRegisterValue
parameter_list|(
name|uint32_t
name|reg_num
parameter_list|,
name|uint64_t
name|value
parameter_list|)
function_decl|;
name|uint64_t
name|ReadPseudoRegisterValue
parameter_list|(
name|uint32_t
name|reg_num
parameter_list|,
name|bool
modifier|&
name|success
parameter_list|)
function_decl|;
name|bool
name|StoreToPseudoAddress
argument_list|(
name|lldb
operator|::
name|addr_t
name|p_address
argument_list|,
name|uint64_t
name|value
argument_list|,
name|uint32_t
name|size
argument_list|)
decl_stmt|;
name|uint32_t
name|ReadFromPseudoAddress
argument_list|(
name|lldb
operator|::
name|addr_t
name|p_address
argument_list|,
name|uint32_t
name|size
argument_list|,
name|bool
operator|&
name|success
argument_list|)
decl_stmt|;
name|void
name|ClearPseudoRegisters
parameter_list|()
function_decl|;
name|void
name|ClearPseudoMemory
parameter_list|()
function_decl|;
name|bool
name|LoadPseudoRegistersFromFrame
argument_list|(
name|lldb_private
operator|::
name|StackFrame
operator|&
name|frame
argument_list|)
decl_stmt|;
name|bool
name|LoadStateFromDictionary
argument_list|(
name|lldb_private
operator|::
name|OptionValueDictionary
operator|*
name|test_data
argument_list|)
decl_stmt|;
name|bool
name|CompareState
parameter_list|(
name|EmulationStateARM
modifier|&
name|other_state
parameter_list|)
function_decl|;
specifier|static
name|size_t
name|ReadPseudoMemory
argument_list|(
name|lldb_private
operator|::
name|EmulateInstruction
operator|*
name|instruction
argument_list|,
name|void
operator|*
name|baton
argument_list|,
specifier|const
name|lldb_private
operator|::
name|EmulateInstruction
operator|::
name|Context
operator|&
name|context
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
name|void
operator|*
name|dst
argument_list|,
name|size_t
name|length
argument_list|)
decl_stmt|;
specifier|static
name|size_t
name|WritePseudoMemory
argument_list|(
name|lldb_private
operator|::
name|EmulateInstruction
operator|*
name|instruction
argument_list|,
name|void
operator|*
name|baton
argument_list|,
specifier|const
name|lldb_private
operator|::
name|EmulateInstruction
operator|::
name|Context
operator|&
name|context
argument_list|,
name|lldb
operator|::
name|addr_t
name|addr
argument_list|,
specifier|const
name|void
operator|*
name|dst
argument_list|,
name|size_t
name|length
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|ReadPseudoRegister
argument_list|(
name|lldb_private
operator|::
name|EmulateInstruction
operator|*
name|instruction
argument_list|,
name|void
operator|*
name|baton
argument_list|,
specifier|const
name|lldb_private
operator|::
name|RegisterInfo
operator|*
name|reg_info
argument_list|,
name|lldb_private
operator|::
name|RegisterValue
operator|&
name|reg_value
argument_list|)
decl_stmt|;
specifier|static
name|bool
name|WritePseudoRegister
argument_list|(
name|lldb_private
operator|::
name|EmulateInstruction
operator|*
name|instruction
argument_list|,
name|void
operator|*
name|baton
argument_list|,
specifier|const
name|lldb_private
operator|::
name|EmulateInstruction
operator|::
name|Context
operator|&
name|context
argument_list|,
specifier|const
name|lldb_private
operator|::
name|RegisterInfo
operator|*
name|reg_info
argument_list|,
specifier|const
name|lldb_private
operator|::
name|RegisterValue
operator|&
name|reg_value
argument_list|)
decl_stmt|;
name|private
label|:
name|uint32_t
name|m_gpr
index|[
literal|17
index|]
decl_stmt|;
struct|struct
name|_sd_regs
block|{
union|union
block|{
name|uint32_t
name|s_reg
index|[
literal|2
index|]
decl_stmt|;
name|uint64_t
name|d_reg
decl_stmt|;
block|}
name|sd_regs
index|[
literal|16
index|]
union|;
comment|// sregs 0 - 31& dregs 0 - 15
name|uint64_t
name|d_regs
index|[
literal|16
index|]
decl_stmt|;
comment|// dregs 16-31
block|}
name|m_vfp_regs
struct|;
name|std
operator|::
name|map
operator|<
name|lldb
operator|::
name|addr_t
operator|,
name|uint32_t
operator|>
name|m_memory
expr_stmt|;
comment|// Eventually will want to change uint32_t to a data buffer heap type.
name|DISALLOW_COPY_AND_ASSIGN
argument_list|(
name|EmulationStateARM
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_EmulationStateARM_h_
end_comment

end_unit

