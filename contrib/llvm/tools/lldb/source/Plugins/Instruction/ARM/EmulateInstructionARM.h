begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- lldb_EmulateInstructionARM.h ------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|lldb_EmulateInstructionARM_h_
end_ifndef

begin_define
define|#
directive|define
name|lldb_EmulateInstructionARM_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Core/EmulateInstruction.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/ConstString.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"Plugins/Process/Utility/ARMDefines.h"
end_include

begin_decl_stmt
name|namespace
name|lldb_private
block|{
comment|// ITSession - Keep track of the IT Block progression.
name|class
name|ITSession
block|{
name|public
label|:
name|ITSession
argument_list|()
operator|:
name|ITCounter
argument_list|(
literal|0
argument_list|)
operator|,
name|ITState
argument_list|(
literal|0
argument_list|)
block|{}
operator|~
name|ITSession
argument_list|()
block|{}
comment|// InitIT - Initializes ITCounter/ITState.
name|bool
name|InitIT
argument_list|(
argument|uint32_t bits7_0
argument_list|)
expr_stmt|;
comment|// ITAdvance - Updates ITCounter/ITState as IT Block progresses.
name|void
name|ITAdvance
parameter_list|()
function_decl|;
comment|// InITBlock - Returns true if we're inside an IT Block.
name|bool
name|InITBlock
parameter_list|()
function_decl|;
comment|// LastInITBlock - Returns true if we're the last instruction inside an IT Block.
name|bool
name|LastInITBlock
parameter_list|()
function_decl|;
comment|// GetCond - Gets condition bits for the current thumb instruction.
name|uint32_t
name|GetCond
parameter_list|()
function_decl|;
name|private
label|:
name|uint32_t
name|ITCounter
decl_stmt|;
comment|// Possible values: 0, 1, 2, 3, 4.
name|uint32_t
name|ITState
decl_stmt|;
comment|// A2.5.2 Consists of IT[7:5] and IT[4:0] initially.
block|}
empty_stmt|;
name|class
name|EmulateInstructionARM
range|:
name|public
name|EmulateInstruction
block|{
name|public
operator|:
typedef|typedef
enum|enum
block|{
name|eEncodingA1
block|,
name|eEncodingA2
block|,
name|eEncodingA3
block|,
name|eEncodingA4
block|,
name|eEncodingA5
block|,
name|eEncodingT1
block|,
name|eEncodingT2
block|,
name|eEncodingT3
block|,
name|eEncodingT4
block|,
name|eEncodingT5
decl|}
name|ARMEncoding
empty_stmt|;
specifier|static
name|void
name|Initialize
parameter_list|()
function_decl|;
specifier|static
name|void
name|Terminate
parameter_list|()
function_decl|;
specifier|static
name|lldb_private
operator|::
name|ConstString
name|GetPluginNameStatic
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|GetPluginDescriptionStatic
parameter_list|()
function_decl|;
specifier|static
name|lldb_private
operator|::
name|EmulateInstruction
operator|*
name|CreateInstance
argument_list|(
argument|const lldb_private::ArchSpec&arch
argument_list|,
argument|InstructionType inst_type
argument_list|)
expr_stmt|;
specifier|static
name|bool
name|SupportsEmulatingIntructionsOfTypeStatic
parameter_list|(
name|InstructionType
name|inst_type
parameter_list|)
block|{
switch|switch
condition|(
name|inst_type
condition|)
block|{
case|case
name|eInstructionTypeAny
case|:
case|case
name|eInstructionTypePrologueEpilogue
case|:
case|case
name|eInstructionTypePCModifying
case|:
return|return
name|true
return|;
case|case
name|eInstructionTypeAll
case|:
return|return
name|false
return|;
block|}
return|return
name|false
return|;
block|}
function|virtual lldb_private::ConstString     GetPluginName
parameter_list|()
block|{
return|return
name|GetPluginNameStatic
argument_list|()
return|;
block|}
function|virtual uint32_t     GetPluginVersion
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
function|bool     SetTargetTriple
parameter_list|(
specifier|const
name|ArchSpec
modifier|&
name|arch
parameter_list|)
function|;
enum|enum
name|Mode
block|{
name|eModeInvalid
init|=
operator|-
literal|1
block|,
name|eModeARM
block|,
name|eModeThumb
decl|}
empty_stmt|;
name|EmulateInstructionARM
argument_list|(
specifier|const
name|ArchSpec
operator|&
name|arch
argument_list|)
range|:
name|EmulateInstruction
argument_list|(
name|arch
argument_list|)
block|,
name|m_arm_isa
argument_list|(
literal|0
argument_list|)
block|,
name|m_opcode_mode
argument_list|(
name|eModeInvalid
argument_list|)
block|,
name|m_opcode_cpsr
argument_list|(
literal|0
argument_list|)
block|,
name|m_it_session
argument_list|()
block|,
name|m_ignore_conditions
argument_list|(
argument|false
argument_list|)
block|{
name|SetArchitecture
argument_list|(
name|arch
argument_list|)
empty_stmt|;
block|}
comment|//    EmulateInstructionARM (const ArchSpec&arch,
comment|//                           bool ignore_conditions,
comment|//                           void *baton,
comment|//                           ReadMemory read_mem_callback,
comment|//                           WriteMemory write_mem_callback,
comment|//                           ReadRegister read_reg_callback,
comment|//                           WriteRegister write_reg_callback) :
comment|//        EmulateInstruction (arch,
comment|//                            ignore_conditions,
comment|//                            baton,
comment|//                            read_mem_callback,
comment|//                            write_mem_callback,
comment|//                            read_reg_callback,
comment|//                            write_reg_callback),
comment|//        m_arm_isa (0),
comment|//        m_opcode_mode (eModeInvalid),
comment|//        m_opcode_cpsr (0),
comment|//        m_it_session ()
comment|//    {
comment|//    }
name|virtual
name|bool
name|SupportsEmulatingIntructionsOfType
parameter_list|(
name|InstructionType
name|inst_type
parameter_list|)
block|{
return|return
name|SupportsEmulatingIntructionsOfTypeStatic
argument_list|(
name|inst_type
argument_list|)
return|;
block|}
function|virtual bool     SetArchitecture
parameter_list|(
specifier|const
name|ArchSpec
modifier|&
name|arch
parameter_list|)
function|;
name|virtual
name|bool
name|ReadInstruction
parameter_list|()
function_decl|;
name|virtual
name|bool
name|SetInstruction
parameter_list|(
specifier|const
name|Opcode
modifier|&
name|insn_opcode
parameter_list|,
specifier|const
name|Address
modifier|&
name|inst_addr
parameter_list|,
name|Target
modifier|*
name|target
parameter_list|)
function_decl|;
name|virtual
name|bool
name|EvaluateInstruction
parameter_list|(
name|uint32_t
name|evaluate_options
parameter_list|)
function_decl|;
name|virtual
name|bool
name|TestEmulation
parameter_list|(
name|Stream
modifier|*
name|out_stream
parameter_list|,
name|ArchSpec
modifier|&
name|arch
parameter_list|,
name|OptionValueDictionary
modifier|*
name|test_data
parameter_list|)
function_decl|;
name|virtual
name|bool
name|GetRegisterInfo
parameter_list|(
name|uint32_t
name|reg_kind
parameter_list|,
name|uint32_t
name|reg_num
parameter_list|,
name|RegisterInfo
modifier|&
name|reg_info
parameter_list|)
function_decl|;
name|virtual
name|bool
name|CreateFunctionEntryUnwind
parameter_list|(
name|UnwindPlan
modifier|&
name|unwind_plan
parameter_list|)
function_decl|;
name|uint32_t
name|ArchVersion
parameter_list|()
function_decl|;
name|bool
name|ConditionPassed
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
name|bool
modifier|*
name|is_conditional
init|=
name|NULL
parameter_list|)
function_decl|;
comment|// Filled in with true if the opcode is a conditional opcode
comment|// Filled in with false if the opcode is always executed
name|uint32_t
name|CurrentCond
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
comment|// InITBlock - Returns true if we're in Thumb mode and inside an IT Block.
name|bool
name|InITBlock
parameter_list|()
function_decl|;
comment|// LastInITBlock - Returns true if we're in Thumb mode and the last instruction inside an IT Block.
name|bool
name|LastInITBlock
parameter_list|()
function_decl|;
name|bool
name|BadMode
parameter_list|(
name|uint32_t
name|mode
parameter_list|)
function_decl|;
name|bool
name|CurrentModeIsPrivileged
parameter_list|()
function_decl|;
name|void
name|CPSRWriteByInstr
parameter_list|(
name|uint32_t
name|value
parameter_list|,
name|uint32_t
name|bytemask
parameter_list|,
name|bool
name|affect_execstate
parameter_list|)
function_decl|;
name|bool
name|BranchWritePC
parameter_list|(
specifier|const
name|Context
modifier|&
name|context
parameter_list|,
name|uint32_t
name|addr
parameter_list|)
function_decl|;
name|bool
name|BXWritePC
parameter_list|(
name|Context
modifier|&
name|context
parameter_list|,
name|uint32_t
name|addr
parameter_list|)
function_decl|;
name|bool
name|LoadWritePC
parameter_list|(
name|Context
modifier|&
name|context
parameter_list|,
name|uint32_t
name|addr
parameter_list|)
function_decl|;
name|bool
name|ALUWritePC
parameter_list|(
name|Context
modifier|&
name|context
parameter_list|,
name|uint32_t
name|addr
parameter_list|)
function_decl|;
name|Mode
name|CurrentInstrSet
parameter_list|()
function_decl|;
name|bool
name|SelectInstrSet
parameter_list|(
name|Mode
name|arm_or_thumb
parameter_list|)
function_decl|;
name|bool
name|WriteBits32Unknown
parameter_list|(
name|int
name|n
parameter_list|)
function_decl|;
name|bool
name|WriteBits32UnknownToMemory
argument_list|(
name|lldb
operator|::
name|addr_t
name|address
argument_list|)
block|;
name|bool
name|UnalignedSupport
parameter_list|()
function_decl|;
typedef|typedef
struct|struct
block|{
name|uint32_t
name|result
decl_stmt|;
name|uint8_t
name|carry_out
decl_stmt|;
name|uint8_t
name|overflow
decl_stmt|;
block|}
name|AddWithCarryResult
expr_stmt|;
name|AddWithCarryResult
name|AddWithCarry
parameter_list|(
name|uint32_t
name|x
parameter_list|,
name|uint32_t
name|y
parameter_list|,
name|uint8_t
name|carry_in
parameter_list|)
function_decl|;
comment|// Helper method to read the content of an ARM core register.
name|uint32_t
name|ReadCoreReg
parameter_list|(
name|uint32_t
name|regnum
parameter_list|,
name|bool
modifier|*
name|success
parameter_list|)
function_decl|;
comment|// See A8.6.96 MOV (immediate) Operation.
comment|// Default arguments are specified for carry and overflow parameters, which means
comment|// not to update the respective flags even if setflags is true.
name|bool
name|WriteCoreRegOptionalFlags
parameter_list|(
name|Context
modifier|&
name|context
parameter_list|,
specifier|const
name|uint32_t
name|result
parameter_list|,
specifier|const
name|uint32_t
name|Rd
parameter_list|,
name|bool
name|setflags
parameter_list|,
specifier|const
name|uint32_t
name|carry
init|=
operator|~
literal|0u
parameter_list|,
specifier|const
name|uint32_t
name|overflow
init|=
operator|~
literal|0u
parameter_list|)
function_decl|;
name|bool
name|WriteCoreReg
parameter_list|(
name|Context
modifier|&
name|context
parameter_list|,
specifier|const
name|uint32_t
name|result
parameter_list|,
specifier|const
name|uint32_t
name|Rd
parameter_list|)
block|{
comment|// Don't set the flags.
return|return
name|WriteCoreRegOptionalFlags
argument_list|(
name|context
argument_list|,
name|result
argument_list|,
name|Rd
argument_list|,
name|false
argument_list|)
return|;
block|}
comment|// See A8.6.35 CMP (immediate) Operation.
comment|// Default arguments are specified for carry and overflow parameters, which means
comment|// not to update the respective flags.
function|bool     WriteFlags
parameter_list|(
name|Context
modifier|&
name|context
parameter_list|,
specifier|const
name|uint32_t
name|result
parameter_list|,
specifier|const
name|uint32_t
name|carry
init|=
operator|~
literal|0u
parameter_list|,
specifier|const
name|uint32_t
name|overflow
init|=
operator|~
literal|0u
parameter_list|)
function|;
specifier|inline
name|uint64_t
name|MemARead
argument_list|(
name|EmulateInstruction
operator|::
name|Context
operator|&
name|context
argument_list|,
name|lldb
operator|::
name|addr_t
name|address
argument_list|,
name|uint32_t
name|size
argument_list|,
name|uint64_t
name|fail_value
argument_list|,
name|bool
operator|*
name|success_ptr
argument_list|)
block|{
comment|// This is a stub function corresponding to "MemA[]" in the ARM manual pseudocode, for
comment|// aligned reads from memory.  Since we are not trying to write a full hardware simulator, and since
comment|// we are running in User mode (rather than Kernel mode) and therefore won't have access to many of the
comment|// system registers we would need in order to fully implement this function, we will just call
comment|// ReadMemoryUnsigned from here.  In the future, if we decide we do need to do more faithful emulation of
comment|// the hardware, we can update this function appropriately.
return|return
name|ReadMemoryUnsigned
argument_list|(
name|context
argument_list|,
name|address
argument_list|,
name|size
argument_list|,
name|fail_value
argument_list|,
name|success_ptr
argument_list|)
return|;
block|}
specifier|inline
namespace|bool
name|MemAWrite
namespace|(
name|EmulateInstruction
namespace|::
name|Context
namespace|&
name|context
operator|,
name|lldb
namespace|::
name|addr_t
name|address
operator|,
name|uint64_t
name|data_val
operator|,
name|uint32_t
name|size
block|)
block|{
comment|// This is a stub function corresponding to "MemA[]" in the ARM manual pseudocode, for
comment|// aligned writes to memory.  Since we are not trying to write a full hardware simulator, and since
comment|// we are running in User mode (rather than Kernel mode) and therefore won't have access to many of the
comment|// system registers we would need in order to fully implement this function, we will just call
comment|// WriteMemoryUnsigned from here.  In the future, if we decide we do need to do more faithful emulation of
comment|// the hardware, we can update this function appropriately.
return|return
name|WriteMemoryUnsigned
argument_list|(
name|context
argument_list|,
name|address
argument_list|,
name|data_val
argument_list|,
name|size
argument_list|)
return|;
block|}
specifier|inline
namespace|uint64_t
name|MemURead
namespace|(
name|EmulateInstruction
namespace|::
name|Context
namespace|&
name|context
operator|,
name|lldb
namespace|::
name|addr_t
name|address
operator|,
name|uint32_t
name|size
operator|,
name|uint64_t
name|fail_value
operator|,
name|bool
namespace|*
name|success_ptr
block|)
block|{
comment|// This is a stub function corresponding to "MemU[]" in the ARM manual pseudocode, for
comment|// unaligned reads from memory.  Since we are not trying to write a full hardware simulator, and since
comment|// we are running in User mode (rather than Kernel mode) and therefore won't have access to many of the
comment|// system registers we would need in order to fully implement this function, we will just call
comment|// ReadMemoryUnsigned from here.  In the future, if we decide we do need to do more faithful emulation of
comment|// the hardware, we can update this function appropriately.
return|return
name|ReadMemoryUnsigned
argument_list|(
name|context
argument_list|,
name|address
argument_list|,
name|size
argument_list|,
name|fail_value
argument_list|,
name|success_ptr
argument_list|)
return|;
block|}
specifier|inline
name|bool
name|MemUWrite
argument_list|(
name|EmulateInstruction
operator|::
name|Context
operator|&
name|context
argument_list|,
name|lldb
operator|::
name|addr_t
name|address
argument_list|,
name|uint64_t
name|data_val
argument_list|,
name|uint32_t
name|size
argument_list|)
block|{
comment|// This is a stub function corresponding to "MemU[]" in the ARM manual pseudocode, for
comment|// unaligned writes to memory.  Since we are not trying to write a full hardware simulator, and since
comment|// we are running in User mode (rather than Kernel mode) and therefore won't have access to many of the
comment|// system registers we would need in order to fully implement this function, we will just call
comment|// WriteMemoryUnsigned from here.  In the future, if we decide we do need to do more faithful emulation of
comment|// the hardware, we can update this function appropriately.
return|return
name|WriteMemoryUnsigned
argument_list|(
name|context
argument_list|,
name|address
argument_list|,
name|data_val
argument_list|,
name|size
argument_list|)
return|;
block|}
name|protected
range|:
comment|// Typedef for the callback function used during the emulation.
comment|// Pass along (ARMEncoding)encoding as the callback data.
typedef|typedef
enum|enum
block|{
name|eSize16
block|,
name|eSize32
block|}
name|ARMInstrSize
typedef|;
typedef|typedef
struct|struct
block|{
name|uint32_t
name|mask
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
name|uint32_t
name|variants
decl_stmt|;
name|EmulateInstructionARM
operator|::
name|ARMEncoding
name|encoding
expr_stmt|;
name|uint32_t
name|vfp_variants
decl_stmt|;
name|ARMInstrSize
name|size
decl_stmt|;
name|bool
argument_list|(
argument|EmulateInstructionARM::*callback
argument_list|)
operator|(
specifier|const
name|uint32_t
name|opcode
operator|,
specifier|const
name|EmulateInstructionARM
operator|::
name|ARMEncoding
name|encoding
operator|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
name|ARMOpcode
typedef|;
name|uint32_t
name|GetFramePointerRegisterNumber
argument_list|()
specifier|const
expr_stmt|;
name|uint32_t
name|GetFramePointerDWARFRegisterNumber
argument_list|()
specifier|const
expr_stmt|;
specifier|static
name|ARMOpcode
modifier|*
name|GetARMOpcodeForInstruction
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
name|uint32_t
name|isa_mask
parameter_list|)
function_decl|;
specifier|static
name|ARMOpcode
modifier|*
name|GetThumbOpcodeForInstruction
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
name|uint32_t
name|isa_mask
parameter_list|)
function_decl|;
comment|// A8.6.123 PUSH
name|bool
name|EmulatePUSH
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.122 POP
name|bool
name|EmulatePOP
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.8 ADD (SP plus immediate)
name|bool
name|EmulateADDRdSPImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.97 MOV (register) -- Rd == r7|ip and Rm == sp
name|bool
name|EmulateMOVRdSP
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.97 MOV (register) -- move from r8-r15 to r0-r7
name|bool
name|EmulateMOVLowHigh
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.59 LDR (literal)
name|bool
name|EmulateLDRRtPCRelative
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.8 ADD (SP plus immediate)
name|bool
name|EmulateADDSPImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.9 ADD (SP plus register)
name|bool
name|EmulateADDSPRm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.23 BL, BLX (immediate)
name|bool
name|EmulateBLXImmediate
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.24 BLX (register)
name|bool
name|EmulateBLXRm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.25 BX
name|bool
name|EmulateBXRm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.26 BXJ
name|bool
name|EmulateBXJRm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.212 SUB (immediate, ARM) -- Rd == r7 and Rm == ip
name|bool
name|EmulateSUBR7IPImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.215 SUB (SP minus immediate) -- Rd == ip
name|bool
name|EmulateSUBIPSPImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.215 SUB (SP minus immediate)
name|bool
name|EmulateSUBSPImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.216 SUB (SP minus register)
name|bool
name|EmulateSUBSPReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.194 STR (immediate, ARM) -- Rn == sp
name|bool
name|EmulateSTRRtSP
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.355 VPUSH
name|bool
name|EmulateVPUSH
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.354 VPOP
name|bool
name|EmulateVPOP
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.218 SVC (previously SWI)
name|bool
name|EmulateSVC
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.50 IT
name|bool
name|EmulateIT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// NOP
name|bool
name|EmulateNop
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.16 B
name|bool
name|EmulateB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.27 CBNZ, CBZ
name|bool
name|EmulateCB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.226 TBB, TBH
name|bool
name|EmulateTB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.4 ADD (immediate, Thumb)
name|bool
name|EmulateADDImmThumb
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.5 ADD (immediate, ARM)
name|bool
name|EmulateADDImmARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.6 ADD (register)
name|bool
name|EmulateADDReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.7 ADD (register-shifted register)
name|bool
name|EmulateADDRegShift
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.97 MOV (register)
name|bool
name|EmulateMOVRdRm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.96 MOV (immediate)
name|bool
name|EmulateMOVRdImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.35 CMP (immediate)
name|bool
name|EmulateCMPImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.36 CMP (register)
name|bool
name|EmulateCMPReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.14 ASR (immediate)
name|bool
name|EmulateASRImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.15 ASR (register)
name|bool
name|EmulateASRReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.88 LSL (immediate)
name|bool
name|EmulateLSLImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.89 LSL (register)
name|bool
name|EmulateLSLReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.90 LSR (immediate)
name|bool
name|EmulateLSRImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.91 LSR (register)
name|bool
name|EmulateLSRReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.139 ROR (immediate)
name|bool
name|EmulateRORImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.140 ROR (register)
name|bool
name|EmulateRORReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.141 RRX
name|bool
name|EmulateRRX
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// Helper method for ASR, LSL, LSR, ROR (immediate), and RRX
name|bool
name|EmulateShiftImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|,
name|ARM_ShifterType
name|shift_type
parameter_list|)
function_decl|;
comment|// Helper method for ASR, LSL, LSR, and ROR (register)
name|bool
name|EmulateShiftReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|,
name|ARM_ShifterType
name|shift_type
parameter_list|)
function_decl|;
comment|// LOAD FUNCTIONS
comment|// A8.6.53 LDM/LDMIA/LDMFD
name|bool
name|EmulateLDM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.54 LDMDA/LDMFA
name|bool
name|EmulateLDMDA
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.55 LDMDB/LDMEA
name|bool
name|EmulateLDMDB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.56 LDMIB/LDMED
name|bool
name|EmulateLDMIB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.57 LDR (immediate, Thumb) -- Encoding T1
name|bool
name|EmulateLDRRtRnImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.58 LDR (immediate, ARM) - Encoding A1
name|bool
name|EmulateLDRImmediateARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.59 LDR (literal)
name|bool
name|EmulateLDRLiteral
parameter_list|(
specifier|const
name|uint32_t
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.60 LDR (register) - Encoding T1, T2, A1
name|bool
name|EmulateLDRRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.61 LDRB (immediate, Thumb) - Encoding T1, T2, T3
name|bool
name|EmulateLDRBImmediate
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.62 LDRB (immediate, ARM)
name|bool
name|EmulateLDRBImmediateARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.63 LDRB (literal) - Encoding T1, A1
name|bool
name|EmulateLDRBLiteral
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.64 LDRB (register) - Encoding T1, T2, A1
name|bool
name|EmulateLDRBRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.65 LDRBT
name|bool
name|EmulateLDRBT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.66 LDRD (immediate)
name|bool
name|EmulateLDRDImmediate
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.67
name|bool
name|EmulateLDRDLiteral
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.68 LDRD (register)
name|bool
name|EmulateLDRDRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.69 LDREX
name|bool
name|EmulateLDREX
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.70 LDREXB
name|bool
name|EmulateLDREXB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.71 LDREXD
name|bool
name|EmulateLDREXD
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.72 LDREXH
name|bool
name|EmulateLDREXH
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.73 LDRH (immediate, Thumb) - Encoding T1, T2, T3
name|bool
name|EmulateLDRHImmediate
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.74 LDRS (immediate, ARM)
name|bool
name|EmulateLDRHImmediateARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.75 LDRH (literal) - Encoding T1, A1
name|bool
name|EmulateLDRHLiteral
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.76 LDRH (register) - Encoding T1, T2, A1
name|bool
name|EmulateLDRHRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.77 LDRHT
name|bool
name|EmulateLDRHT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.78 LDRSB (immediate) - Encoding T1, T2, A1
name|bool
name|EmulateLDRSBImmediate
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.79 LDRSB (literal) - Encoding T1, A1
name|bool
name|EmulateLDRSBLiteral
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.80 LDRSB (register) - Encoding T1, T2, A1
name|bool
name|EmulateLDRSBRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.81 LDRSBT
name|bool
name|EmulateLDRSBT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.82 LDRSH (immediate) - Encoding T1, T2, A1
name|bool
name|EmulateLDRSHImmediate
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.83 LDRSH (literal) - Encoding T1, A1
name|bool
name|EmulateLDRSHLiteral
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.84 LDRSH (register) - Encoding T1, T2, A1
name|bool
name|EmulateLDRSHRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.85 LDRSHT
name|bool
name|EmulateLDRSHT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.86
name|bool
name|EmulateLDRT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// STORE FUNCTIONS
comment|// A8.6.189 STM/STMIA/STMEA
name|bool
name|EmulateSTM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.190 STMDA/STMED
name|bool
name|EmulateSTMDA
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.191 STMDB/STMFD
name|bool
name|EmulateSTMDB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.192 STMIB/STMFA
name|bool
name|EmulateSTMIB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.193 STR (immediate, Thumb)
name|bool
name|EmulateSTRThumb
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.194 STR (immediate, ARM)
name|bool
name|EmulateSTRImmARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.195 STR (register)
name|bool
name|EmulateSTRRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.196 STRB (immediate, Thumb)
name|bool
name|EmulateSTRBThumb
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.197 STRB (immediate, ARM)
name|bool
name|EmulateSTRBImmARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.198 STRB (register)
name|bool
name|EmulateSTRBReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.199 STRBT
name|bool
name|EmulateSTRBT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.200 STRD (immediate)
name|bool
name|EmulateSTRDImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.201 STRD (register)
name|bool
name|EmulateSTRDReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.202 STREX
name|bool
name|EmulateSTREX
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.203 STREXB
name|bool
name|EmulateSTREXB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.204 STREXD
name|bool
name|EmulateSTREXD
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.205 STREXH
name|bool
name|EmulateSTREXH
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.206 STRH (immediate, Thumb)
name|bool
name|EmulateSTRHImmThumb
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.207 STRH (immediate, ARM)
name|bool
name|EmulateSTRHImmARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.208 STRH (register)
name|bool
name|EmulateSTRHRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.209 STRHT
name|bool
name|EmulateSTRHT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.210 STRT
name|bool
name|EmulateSTRT
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.1 ADC (immediate)
name|bool
name|EmulateADCImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.2 ADC (Register)
name|bool
name|EmulateADCReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.10 ADR
name|bool
name|EmulateADR
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.11 AND (immediate)
name|bool
name|EmulateANDImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.12 AND (register)
name|bool
name|EmulateANDReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.19 BIC (immediate)
name|bool
name|EmulateBICImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.20 BIC (register)
name|bool
name|EmulateBICReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.26 BXJ
name|bool
name|EmulateBXJ
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.32 CMN (immediate)
name|bool
name|EmulateCMNImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.33 CMN (register)
name|bool
name|EmulateCMNReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.44 EOR (immediate)
name|bool
name|EmulateEORImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.45 EOR (register)
name|bool
name|EmulateEORReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.105 MUL
name|bool
name|EmulateMUL
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.106 MVN (immediate)
name|bool
name|EmulateMVNImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.107 MVN (register)
name|bool
name|EmulateMVNReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.113 ORR (immediate)
name|bool
name|EmulateORRImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.114 ORR (register)
name|bool
name|EmulateORRReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.117 PLD (immediate, literal) - Encoding T1, T2, T3, A1
name|bool
name|EmulatePLDImmediate
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.119 PLI (immediate,literal) - Encoding T3, A1
name|bool
name|EmulatePLIImmediate
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.120 PLI (register) - Encoding T1, A1
name|bool
name|EmulatePLIRegister
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.141 RSB (immediate)
name|bool
name|EmulateRSBImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.142 RSB (register)
name|bool
name|EmulateRSBReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.144 RSC (immediate)
name|bool
name|EmulateRSCImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.145 RSC (register)
name|bool
name|EmulateRSCReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.150 SBC (immediate)
name|bool
name|EmulateSBCImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.151 SBC (register)
name|bool
name|EmulateSBCReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.211 SUB (immediate, Thumb)
name|bool
name|EmulateSUBImmThumb
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.212 SUB (immediate, ARM)
name|bool
name|EmulateSUBImmARM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.213 SUB (register)
name|bool
name|EmulateSUBReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.214 SUB (register-shifted register)
name|bool
name|EmulateSUBRegShift
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.222 SXTB  - Encoding T1
name|bool
name|EmulateSXTB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.224 SXTH  - EncodingT1
name|bool
name|EmulateSXTH
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.227 TEQ (immediate) - Encoding A1
name|bool
name|EmulateTEQImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.228 TEQ (register)  - Encoding A1
name|bool
name|EmulateTEQReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.230 TST (immediate) - Encoding A1
name|bool
name|EmulateTSTImm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.231 TST (register)  - Encoding T1, A1
name|bool
name|EmulateTSTReg
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.262 UXTB  - Encoding T1
name|bool
name|EmulateUXTB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.264 UXTH  - Encoding T1
name|bool
name|EmulateUXTH
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// B6.1.8  RFE
name|bool
name|EmulateRFE
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.319 VLDM
name|bool
name|EmulateVLDM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.399 VSTM
name|bool
name|EmulateVSTM
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.307 VLD1 (multiple single elements)
name|bool
name|EmulateVLD1Multiple
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.308 VLD1 (single element to one lane)
name|bool
name|EmulateVLD1Single
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.309 VLD1 (single element to all lanes)
name|bool
name|EmulateVLD1SingleAll
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.391 VST1 (multiple single elements)
name|bool
name|EmulateVST1Multiple
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.392 VST1 (single element from one lane)
name|bool
name|EmulateVST1Single
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.317 VLDR
name|bool
name|EmulateVLDR
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// A8.6.400 VSTR
name|bool
name|EmulateVSTR
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
comment|// B6.2.13 SUBS PC, LR and related instructions
name|bool
name|EmulateSUBSPcLrEtc
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
specifier|const
name|ARMEncoding
name|encoding
parameter_list|)
function_decl|;
name|uint32_t
name|m_arm_isa
decl_stmt|;
name|Mode
name|m_opcode_mode
decl_stmt|;
name|uint32_t
name|m_opcode_cpsr
decl_stmt|;
name|uint32_t
name|m_new_inst_cpsr
decl_stmt|;
comment|// This can get updated by the opcode.
name|ITSession
name|m_it_session
decl_stmt|;
name|bool
name|m_ignore_conditions
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace lldb_private
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// lldb_EmulateInstructionARM_h_
end_comment

end_unit

