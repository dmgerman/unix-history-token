begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- EmulateInstructionARM64.h ------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EmulateInstructionARM64_h_
end_ifndef

begin_define
define|#
directive|define
name|EmulateInstructionARM64_h_
end_define

begin_include
include|#
directive|include
file|"lldb/Core/EmulateInstruction.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Core/Error.h"
end_include

begin_include
include|#
directive|include
file|"lldb/Interpreter/OptionValue.h"
end_include

begin_include
include|#
directive|include
file|"Plugins/Process/Utility/ARMDefines.h"
end_include

begin_decl_stmt
name|class
name|EmulateInstructionARM64
range|:
name|public
name|lldb_private
operator|::
name|EmulateInstruction
block|{
name|public
operator|:
specifier|static
name|void
name|Initialize
argument_list|()
block|;
specifier|static
name|void
name|Terminate
argument_list|()
block|;
specifier|static
name|lldb_private
operator|::
name|ConstString
name|GetPluginNameStatic
argument_list|()
block|;
specifier|static
specifier|const
name|char
operator|*
name|GetPluginDescriptionStatic
argument_list|()
block|;
specifier|static
name|lldb_private
operator|::
name|EmulateInstruction
operator|*
name|CreateInstance
argument_list|(
argument|const lldb_private::ArchSpec&arch
argument_list|,
argument|lldb_private::InstructionType inst_type
argument_list|)
block|;
specifier|static
name|bool
name|SupportsEmulatingInstructionsOfTypeStatic
argument_list|(
argument|lldb_private::InstructionType inst_type
argument_list|)
block|{
switch|switch
condition|(
name|inst_type
condition|)
block|{
case|case
name|lldb_private
operator|::
name|eInstructionTypeAny
case|:
case|case
name|lldb_private
operator|::
name|eInstructionTypePrologueEpilogue
case|:
return|return
name|true
return|;
case|case
name|lldb_private
operator|::
name|eInstructionTypePCModifying
case|:
case|case
name|lldb_private
operator|::
name|eInstructionTypeAll
case|:
return|return
name|false
return|;
block|}
return|return
name|false
return|;
block|}
name|virtual
name|lldb_private
operator|::
name|ConstString
name|GetPluginName
argument_list|()
block|;
name|virtual
name|lldb_private
operator|::
name|ConstString
name|GetShortPluginName
argument_list|()
block|{
return|return
name|GetPluginNameStatic
argument_list|()
return|;
block|}
name|virtual
name|uint32_t
name|GetPluginVersion
argument_list|()
block|{
return|return
literal|1
return|;
block|}
name|bool
name|SetTargetTriple
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ArchSpec
operator|&
name|arch
argument_list|)
block|;
name|EmulateInstructionARM64
argument_list|(
specifier|const
name|lldb_private
operator|::
name|ArchSpec
operator|&
name|arch
argument_list|)
operator|:
name|EmulateInstruction
argument_list|(
name|arch
argument_list|)
block|,
name|m_opcode_pstate
argument_list|()
block|,
name|m_emulated_pstate
argument_list|()
block|,
name|m_ignore_conditions
argument_list|(
argument|false
argument_list|)
block|{     }
name|virtual
name|bool
name|SupportsEmulatingInstructionsOfType
argument_list|(
argument|lldb_private::InstructionType inst_type
argument_list|)
block|{
return|return
name|SupportsEmulatingInstructionsOfTypeStatic
argument_list|(
name|inst_type
argument_list|)
return|;
block|}
name|virtual
name|bool
name|ReadInstruction
argument_list|()
block|;
name|virtual
name|bool
name|EvaluateInstruction
argument_list|(
argument|uint32_t evaluate_options
argument_list|)
block|;
name|virtual
name|bool
name|TestEmulation
argument_list|(
argument|lldb_private::Stream *out_stream
argument_list|,
argument|lldb_private::ArchSpec&arch
argument_list|,
argument|lldb_private::OptionValueDictionary *test_data
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|GetRegisterInfo
argument_list|(
argument|lldb::RegisterKind reg_kind
argument_list|,
argument|uint32_t reg_num
argument_list|,
argument|lldb_private::RegisterInfo&reg_info
argument_list|)
block|;
name|virtual
name|bool
name|CreateFunctionEntryUnwind
argument_list|(
name|lldb_private
operator|::
name|UnwindPlan
operator|&
name|unwind_plan
argument_list|)
block|;
typedef|typedef
enum|enum
block|{
name|AddrMode_OFF
block|,
name|AddrMode_PRE
block|,
name|AddrMode_POST
decl|}
name|AddrMode
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|BranchType_CALL
block|,
name|BranchType_ERET
block|,
name|BranchType_DRET
block|,
name|BranchType_RET
block|,
name|BranchType_JMP
decl|}
name|BranchType
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|CountOp_CLZ
block|,
name|CountOp_CLS
block|,
name|CountOp_CNT
decl|}
name|CountOp
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|RevOp_RBIT
block|,
name|RevOp_REV16
block|,
name|RevOp_REV32
block|,
name|RevOp_REV64
decl|}
name|RevOp
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|BitwiseOp_NOT
block|,
name|BitwiseOp_RBIT
decl|}
name|BitwiseOp
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|EL0
init|=
literal|0
block|,
name|EL1
init|=
literal|1
block|,
name|EL2
init|=
literal|2
block|,
name|EL3
init|=
literal|3
init|}
name|ExceptionLevel
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|ExtendType_SXTB
block|,
name|ExtendType_SXTH
block|,
name|ExtendType_SXTW
block|,
name|ExtendType_SXTX
block|,
name|ExtendType_UXTB
block|,
name|ExtendType_UXTH
block|,
name|ExtendType_UXTW
block|,
name|ExtendType_UXTX
decl|}
name|ExtendType
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|ExtractType_LEFT
block|,
name|ExtractType_RIGHT
decl|}
name|ExtractType
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|LogicalOp_AND
block|,
name|LogicalOp_EOR
block|,
name|LogicalOp_ORR
decl|}
name|LogicalOp
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|MemOp_LOAD
block|,
name|MemOp_STORE
block|,
name|MemOp_PREFETCH
block|,
name|MemOp_NOP
decl|}
name|MemOp
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|MoveWideOp_N
block|,
name|MoveWideOp_Z
block|,
name|MoveWideOp_K
decl|}
name|MoveWideOp
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|ShiftType_LSL
block|,
name|ShiftType_LSR
block|,
name|ShiftType_ASR
block|,
name|ShiftType_ROR
decl|}
name|ShiftType
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|SP0
init|=
literal|0
block|,
name|SPx
init|=
literal|1
init|}
name|StackPointerSelection
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|Unpredictable_WBOVERLAP
block|,
name|Unpredictable_LDPOVERLAP
decl|}
name|Unpredictable
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|Constraint_NONE
block|,
name|Constraint_UNKNOWN
block|,
name|Constraint_SUPPRESSWB
block|,
name|Constraint_NOP
decl|}
name|ConstraintType
empty_stmt|;
typedef|typedef
enum|enum
block|{
name|AccType_NORMAL
block|,
name|AccType_UNPRIV
block|,
name|AccType_STREAM
block|,
name|AccType_ALIGNED
block|,
name|AccType_ORDERED
decl|}
name|AccType
empty_stmt|;
typedef|typedef
struct|struct
block|{
name|uint32_t
name|N
range|:
literal|1
operator|,
name|V
label|:
literal|1
operator|,
name|C
operator|:
literal|1
operator|,
name|Z
operator|:
literal|1
operator|,
comment|// condition code flags â can also be accessed as PSTATE.[N,Z,C,V]
name|Q
operator|:
literal|1
operator|,
comment|// AArch32 only â CSPR.Q bit
name|IT
operator|:
literal|8
operator|,
comment|// AArch32 only â CPSR.IT bits
name|J
operator|:
literal|1
operator|,
comment|// AArch32 only â CSPR.J bit
name|T
operator|:
literal|1
operator|,
comment|// AArch32 only â CPSR.T bit
name|SS
operator|:
literal|1
operator|,
comment|// Single step process state bit
name|IL
operator|:
literal|1
operator|,
comment|// Illegal state bit
name|D
operator|:
literal|1
operator|,
name|A
operator|:
literal|1
operator|,
name|I
operator|:
literal|1
operator|,
name|F
operator|:
literal|1
operator|,
comment|// Interrupt masks â can also be accessed as PSTATE.[D,A,I,F]
name|E
operator|:
literal|1
operator|,
comment|// AArch32 only â CSPR.E bit
name|M
operator|:
literal|5
operator|,
comment|// AArch32 only â mode encodings
name|RW
operator|:
literal|1
operator|,
comment|// Current register width â 0 is AArch64, 1 is AArch32
name|EL
operator|:
literal|2
operator|,
comment|// Current exception level (see ExceptionLevel enum)
name|SP
operator|:
literal|1
expr_stmt|;
comment|// AArch64 only - Stack Pointer selection (see StackPointerSelection enum)
block|}
name|ProcState
expr_stmt|;
name|protected
label|:
typedef|typedef
struct|struct
block|{
name|uint32_t
name|mask
decl_stmt|;
name|uint32_t
name|value
decl_stmt|;
name|uint32_t
name|vfp_variants
decl_stmt|;
name|bool
argument_list|(
argument|EmulateInstructionARM64::*callback
argument_list|)
operator|(
specifier|const
name|uint32_t
name|opcode
operator|)
expr_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
name|Opcode
expr_stmt|;
specifier|static
name|Opcode
modifier|*
name|GetOpcodeForInstruction
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|uint32_t
name|GetFramePointerRegisterNumber
argument_list|()
decl|const
empty_stmt|;
name|bool
name|BranchTo
argument_list|(
specifier|const
name|Context
operator|&
name|context
argument_list|,
name|uint32_t
name|N
argument_list|,
name|lldb
operator|::
name|addr_t
name|target
argument_list|)
block|;
name|bool
name|ConditionHolds
parameter_list|(
specifier|const
name|uint32_t
name|cond
parameter_list|,
name|bool
modifier|*
name|is_conditional
init|=
name|nullptr
parameter_list|)
function_decl|;
name|bool
name|UsingAArch32
parameter_list|()
function_decl|;
name|bool
name|Emulate_addsub_imm
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|bool
name|Emulate_ldstpair_off
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|bool
name|Emulate_ldstpair_pre
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|bool
name|Emulate_ldstpair_post
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|bool
name|Emulate_ldstpair
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|,
name|AddrMode
name|a_mode
parameter_list|)
function_decl|;
name|bool
name|EmulateB
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|bool
name|EmulateBcond
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|bool
name|EmulateCBZ
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|bool
name|EmulateTBZ
parameter_list|(
specifier|const
name|uint32_t
name|opcode
parameter_list|)
function_decl|;
name|ProcState
name|m_opcode_pstate
block|;
name|ProcState
name|m_emulated_pstate
block|;
comment|// This can get updated by the opcode.
name|bool
name|m_ignore_conditions
block|;
block|}
enum|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// EmulateInstructionARM64_h_
end_comment

end_unit

