begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DifferenceEngine.h - Module comparator ------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This header defines the interface to the LLVM difference engine,
end_comment

begin_comment
comment|// which structurally compares functions within a module.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LLVM_DIFFERENCE_ENGINE_H_
end_ifndef

begin_define
define|#
directive|define
name|_LLVM_DIFFERENCE_ENGINE_H_
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Function
decl_stmt|;
name|class
name|GlobalValue
decl_stmt|;
name|class
name|Instruction
decl_stmt|;
name|class
name|LLVMContext
decl_stmt|;
name|class
name|Module
decl_stmt|;
name|class
name|Twine
decl_stmt|;
name|class
name|Value
decl_stmt|;
comment|/// A class for performing structural comparisons of LLVM assembly.
name|class
name|DifferenceEngine
block|{
name|public
label|:
comment|/// A temporary-object class for building up log messages.
name|class
name|LogBuilder
block|{
name|DifferenceEngine
modifier|&
name|Engine
decl_stmt|;
comment|/// The use of a stored StringRef here is okay because
comment|/// LogBuilder should be used only as a temporary, and as a
comment|/// temporary it will be destructed before whatever temporary
comment|/// might be initializing this format.
name|StringRef
name|Format
decl_stmt|;
name|SmallVector
operator|<
name|Value
operator|*
operator|,
literal|4
operator|>
name|Arguments
expr_stmt|;
name|public
label|:
name|LogBuilder
argument_list|(
argument|DifferenceEngine&Engine
argument_list|,
argument|StringRef Format
argument_list|)
block|:
name|Engine
argument_list|(
name|Engine
argument_list|)
operator|,
name|Format
argument_list|(
argument|Format
argument_list|)
block|{}
name|LogBuilder
operator|&
name|operator
operator|<<
operator|(
name|Value
operator|*
name|V
operator|)
block|{
name|Arguments
operator|.
name|push_back
argument_list|(
name|V
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
operator|~
name|LogBuilder
argument_list|()
block|{
name|Engine
operator|.
name|consumer
operator|.
name|logf
argument_list|(
operator|*
name|this
argument_list|)
block|;       }
name|StringRef
name|getFormat
argument_list|()
specifier|const
block|{
return|return
name|Format
return|;
block|}
name|unsigned
name|getNumArguments
argument_list|()
specifier|const
block|{
return|return
name|Arguments
operator|.
name|size
argument_list|()
return|;
block|}
name|Value
modifier|*
name|getArgument
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
name|Arguments
index|[
name|I
index|]
return|;
block|}
block|}
empty_stmt|;
enum|enum
name|DiffChange
block|{
name|DC_match
block|,
name|DC_left
block|,
name|DC_right
block|}
enum|;
comment|/// A temporary-object class for building up diff messages.
name|class
name|DiffLogBuilder
block|{
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|Instruction
operator|*
operator|,
name|Instruction
operator|*
operator|>
name|DiffRecord
expr_stmt|;
name|SmallVector
operator|<
name|DiffRecord
operator|,
literal|20
operator|>
name|Diff
expr_stmt|;
name|DifferenceEngine
modifier|&
name|Engine
decl_stmt|;
name|public
label|:
name|DiffLogBuilder
argument_list|(
name|DifferenceEngine
operator|&
name|Engine
argument_list|)
operator|:
name|Engine
argument_list|(
argument|Engine
argument_list|)
block|{}
operator|~
name|DiffLogBuilder
argument_list|()
block|{
name|Engine
operator|.
name|consumer
operator|.
name|logd
argument_list|(
operator|*
name|this
argument_list|)
block|; }
name|void
name|addMatch
argument_list|(
argument|Instruction *L
argument_list|,
argument|Instruction *R
argument_list|)
block|{
name|Diff
operator|.
name|push_back
argument_list|(
name|DiffRecord
argument_list|(
name|L
argument_list|,
name|R
argument_list|)
argument_list|)
block|;       }
name|void
name|addLeft
argument_list|(
argument|Instruction *L
argument_list|)
block|{
comment|// HACK: VS 2010 has a bug in the stdlib that requires this.
name|Diff
operator|.
name|push_back
argument_list|(
name|DiffRecord
argument_list|(
name|L
argument_list|,
name|DiffRecord
operator|::
name|second_type
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
block|;       }
name|void
name|addRight
argument_list|(
argument|Instruction *R
argument_list|)
block|{
comment|// HACK: VS 2010 has a bug in the stdlib that requires this.
name|Diff
operator|.
name|push_back
argument_list|(
name|DiffRecord
argument_list|(
name|DiffRecord
operator|::
name|first_type
argument_list|(
literal|0
argument_list|)
argument_list|,
name|R
argument_list|)
argument_list|)
block|;       }
name|unsigned
name|getNumLines
argument_list|()
specifier|const
block|{
return|return
name|Diff
operator|.
name|size
argument_list|()
return|;
block|}
name|DiffChange
name|getLineKind
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
operator|(
name|Diff
index|[
name|I
index|]
operator|.
name|first
condition|?
operator|(
name|Diff
index|[
name|I
index|]
operator|.
name|second
condition|?
name|DC_match
else|:
name|DC_left
operator|)
else|:
name|DC_right
operator|)
return|;
block|}
name|Instruction
modifier|*
name|getLeft
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
name|Diff
index|[
name|I
index|]
operator|.
name|first
return|;
block|}
name|Instruction
modifier|*
name|getRight
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
block|{
return|return
name|Diff
index|[
name|I
index|]
operator|.
name|second
return|;
block|}
block|}
empty_stmt|;
comment|/// The interface for consumers of difference data.
struct|struct
name|Consumer
block|{
comment|/// Record that a local context has been entered.  Left and
comment|/// Right are IR "containers" of some sort which are being
comment|/// considered for structural equivalence: global variables,
comment|/// functions, blocks, instructions, etc.
name|virtual
name|void
name|enterContext
parameter_list|(
name|Value
modifier|*
name|Left
parameter_list|,
name|Value
modifier|*
name|Right
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Record that a local context has been exited.
name|virtual
name|void
name|exitContext
parameter_list|()
init|=
literal|0
function_decl|;
comment|/// Record a difference within the current context.
name|virtual
name|void
name|log
parameter_list|(
name|StringRef
name|Text
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Record a formatted difference within the current context.
name|virtual
name|void
name|logf
parameter_list|(
specifier|const
name|LogBuilder
modifier|&
name|Log
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// Record a line-by-line instruction diff.
name|virtual
name|void
name|logd
parameter_list|(
specifier|const
name|DiffLogBuilder
modifier|&
name|Log
parameter_list|)
init|=
literal|0
function_decl|;
name|protected
label|:
name|virtual
operator|~
name|Consumer
argument_list|()
block|{}
block|}
struct|;
comment|/// A RAII object for recording the current context.
struct|struct
name|Context
block|{
name|Context
argument_list|(
name|DifferenceEngine
operator|&
name|Engine
argument_list|,
name|Value
operator|*
name|L
argument_list|,
name|Value
operator|*
name|R
argument_list|)
operator|:
name|Engine
argument_list|(
argument|Engine
argument_list|)
block|{
name|Engine
operator|.
name|consumer
operator|.
name|enterContext
argument_list|(
name|L
argument_list|,
name|R
argument_list|)
block|;       }
operator|~
name|Context
argument_list|()
block|{
name|Engine
operator|.
name|consumer
operator|.
name|exitContext
argument_list|()
block|;       }
name|private
operator|:
name|DifferenceEngine
operator|&
name|Engine
expr_stmt|;
block|}
struct|;
comment|/// An oracle for answering whether two values are equivalent as
comment|/// operands.
struct|struct
name|Oracle
block|{
name|virtual
name|bool
name|operator
argument_list|()
argument_list|(
name|Value
operator|*
name|L
argument_list|,
name|Value
operator|*
name|R
argument_list|)
operator|=
literal|0
expr_stmt|;
name|protected
label|:
name|virtual
operator|~
name|Oracle
argument_list|()
block|{}
block|}
struct|;
name|DifferenceEngine
argument_list|(
name|LLVMContext
operator|&
name|context
argument_list|,
name|Consumer
operator|&
name|consumer
argument_list|)
operator|:
name|context
argument_list|(
name|context
argument_list|)
operator|,
name|consumer
argument_list|(
name|consumer
argument_list|)
operator|,
name|globalValueOracle
argument_list|(
literal|0
argument_list|)
block|{}
name|void
name|diff
argument_list|(
name|Module
operator|*
name|L
argument_list|,
name|Module
operator|*
name|R
argument_list|)
expr_stmt|;
name|void
name|diff
parameter_list|(
name|Function
modifier|*
name|L
parameter_list|,
name|Function
modifier|*
name|R
parameter_list|)
function_decl|;
name|void
name|log
parameter_list|(
name|StringRef
name|text
parameter_list|)
block|{
name|consumer
operator|.
name|log
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|LogBuilder
name|logf
parameter_list|(
name|StringRef
name|text
parameter_list|)
block|{
return|return
name|LogBuilder
argument_list|(
operator|*
name|this
argument_list|,
name|text
argument_list|)
return|;
block|}
comment|/// Installs an oracle to decide whether two global values are
comment|/// equivalent as operands.  Without an oracle, global values are
comment|/// considered equivalent as operands precisely when they have the
comment|/// same name.
name|void
name|setGlobalValueOracle
parameter_list|(
name|Oracle
modifier|*
name|oracle
parameter_list|)
block|{
name|globalValueOracle
operator|=
name|oracle
expr_stmt|;
block|}
comment|/// Determines whether two global values are equivalent.
name|bool
name|equivalentAsOperands
parameter_list|(
name|GlobalValue
modifier|*
name|L
parameter_list|,
name|GlobalValue
modifier|*
name|R
parameter_list|)
function_decl|;
name|private
label|:
name|LLVMContext
modifier|&
name|context
decl_stmt|;
name|Consumer
modifier|&
name|consumer
decl_stmt|;
name|Oracle
modifier|*
name|globalValueOracle
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

