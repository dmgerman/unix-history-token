begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- ARMEHABIPrinter.h - ARM EHABI Unwind Information Printer ----------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TOOLS_LLVM_READOBJ_ARMEHABIPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TOOLS_LLVM_READOBJ_ARMEHABIPRINTER_H
end_define

begin_include
include|#
directive|include
file|"Error.h"
end_include

begin_include
include|#
directive|include
file|"StreamWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Object/ELFTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ARMEHABI.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Format.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/type_traits.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|ARM
block|{
name|namespace
name|EHABI
block|{
name|class
name|OpcodeDecoder
block|{
name|StreamWriter
modifier|&
name|SW
decl_stmt|;
name|raw_ostream
modifier|&
name|OS
decl_stmt|;
struct|struct
name|RingEntry
block|{
name|uint8_t
name|Mask
decl_stmt|;
name|uint8_t
name|Value
decl_stmt|;
name|void
argument_list|(
name|OpcodeDecoder
operator|::
operator|*
name|Routine
argument_list|)
argument_list|(
specifier|const
name|uint8_t
operator|*
name|Opcodes
argument_list|,
name|unsigned
operator|&
name|OI
argument_list|)
expr_stmt|;
block|}
struct|;
specifier|static
specifier|const
name|RingEntry
name|Ring
index|[]
decl_stmt|;
name|void
name|Decode_00xxxxxx
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_01xxxxxx
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_1000iiii_iiiiiiii
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10011101
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10011111
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_1001nnnn
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10100nnn
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10101nnn
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10110000
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10110001_0000iiii
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10110010_uleb128
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10110011_sssscccc
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_101101nn
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_10111nnn
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_11000110_sssscccc
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_11000111_0000iiii
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_11001000_sssscccc
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_11001001_sssscccc
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_11001yyy
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_11000nnn
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_11010nnn
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|Decode_11xxxyyy
parameter_list|(
specifier|const
name|uint8_t
modifier|*
name|Opcodes
parameter_list|,
name|unsigned
modifier|&
name|OI
parameter_list|)
function_decl|;
name|void
name|PrintGPR
parameter_list|(
name|uint16_t
name|GPRMask
parameter_list|)
function_decl|;
name|void
name|PrintRegisters
parameter_list|(
name|uint32_t
name|Mask
parameter_list|,
name|StringRef
name|Prefix
parameter_list|)
function_decl|;
name|public
label|:
name|OpcodeDecoder
argument_list|(
name|StreamWriter
operator|&
name|SW
argument_list|)
operator|:
name|SW
argument_list|(
name|SW
argument_list|)
operator|,
name|OS
argument_list|(
argument|SW.getOStream()
argument_list|)
block|{}
name|void
name|Decode
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|off_t Offset
argument_list|,
argument|size_t Length
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
specifier|const
name|OpcodeDecoder
operator|::
name|RingEntry
name|OpcodeDecoder
operator|::
name|Ring
index|[]
operator|=
block|{
block|{
literal|0xc0
block|,
literal|0x00
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_00xxxxxx
block|}
block|,
block|{
literal|0xc0
block|,
literal|0x40
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_01xxxxxx
block|}
block|,
block|{
literal|0xf0
block|,
literal|0x80
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_1000iiii_iiiiiiii
block|}
block|,
block|{
literal|0xff
block|,
literal|0x9d
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10011101
block|}
block|,
block|{
literal|0xff
block|,
literal|0x9f
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10011111
block|}
block|,
block|{
literal|0xf0
block|,
literal|0x90
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_1001nnnn
block|}
block|,
block|{
literal|0xf8
block|,
literal|0xa0
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10100nnn
block|}
block|,
block|{
literal|0xf8
block|,
literal|0xa8
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10101nnn
block|}
block|,
block|{
literal|0xff
block|,
literal|0xb0
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10110000
block|}
block|,
block|{
literal|0xff
block|,
literal|0xb1
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10110001_0000iiii
block|}
block|,
block|{
literal|0xff
block|,
literal|0xb2
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10110010_uleb128
block|}
block|,
block|{
literal|0xff
block|,
literal|0xb3
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10110011_sssscccc
block|}
block|,
block|{
literal|0xfc
block|,
literal|0xb4
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_101101nn
block|}
block|,
block|{
literal|0xf8
block|,
literal|0xb8
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_10111nnn
block|}
block|,
block|{
literal|0xff
block|,
literal|0xc6
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_11000110_sssscccc
block|}
block|,
block|{
literal|0xff
block|,
literal|0xc7
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_11000111_0000iiii
block|}
block|,
block|{
literal|0xff
block|,
literal|0xc8
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_11001000_sssscccc
block|}
block|,
block|{
literal|0xff
block|,
literal|0xc9
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_11001001_sssscccc
block|}
block|,
block|{
literal|0xc8
block|,
literal|0xc8
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_11001yyy
block|}
block|,
block|{
literal|0xf8
block|,
literal|0xc0
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_11000nnn
block|}
block|,
block|{
literal|0xf8
block|,
literal|0xd0
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_11010nnn
block|}
block|,
block|{
literal|0xc0
block|,
literal|0xc0
block|,
operator|&
name|OpcodeDecoder
operator|::
name|Decode_11xxxyyy
block|}
block|, }
expr_stmt|;
name|void
name|OpcodeDecoder
operator|::
name|Decode_00xxxxxx
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; vsp = vsp + %u\n"
argument_list|,
name|Opcode
argument_list|,
operator|(
operator|(
name|Opcode
operator|&
literal|0x3f
operator|)
operator|<<
literal|2
operator|)
operator|+
literal|4
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_01xxxxxx
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; vsp = vsp - %u\n"
argument_list|,
name|Opcode
argument_list|,
operator|(
operator|(
name|Opcode
operator|&
literal|0x3f
operator|)
operator|<<
literal|2
operator|)
operator|+
literal|4
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_1000iiii_iiiiiiii
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode0
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|uint8_t
name|Opcode1
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|uint16_t
name|GPRMask
operator|=
operator|(
name|Opcode1
operator|<<
literal|4
operator|)
operator||
operator|(
operator|(
name|Opcode0
operator|&
literal|0x0f
operator|)
operator|<<
literal|12
operator|)
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X 0x%02X ; %s"
argument_list|,
name|Opcode0
argument_list|,
name|Opcode1
argument_list|,
name|GPRMask
condition|?
literal|"pop "
else|:
literal|"refuse to unwind"
argument_list|)
block|;
if|if
condition|(
name|GPRMask
condition|)
name|PrintGPR
argument_list|(
name|GPRMask
argument_list|)
expr_stmt|;
name|OS
operator|<<
literal|'\n'
expr_stmt|;
block|}
name|void
name|OpcodeDecoder
operator|::
name|Decode_10011101
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; reserved (ARM MOVrr)\n"
argument_list|,
name|Opcode
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_10011111
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; reserved (WiMMX MOVrr)\n"
argument_list|,
name|Opcode
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_1001nnnn
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; vsp = r%u\n"
argument_list|,
name|Opcode
argument_list|,
operator|(
name|Opcode
operator|&
literal|0x0f
operator|)
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_10100nnn
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; pop "
argument_list|,
name|Opcode
argument_list|)
block|;
name|PrintGPR
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
operator|(
name|Opcode
operator|&
literal|0x7
operator|)
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
literal|4
operator|)
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_10101nnn
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; pop "
argument_list|,
name|Opcode
argument_list|)
block|;
name|PrintGPR
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
operator|(
name|Opcode
operator|&
literal|0x7
operator|)
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
literal|1
operator|<<
literal|14
operator|)
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_10110000
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; finish\n"
argument_list|,
name|Opcode
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_10110001_0000iiii
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode0
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|uint8_t
name|Opcode1
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X 0x%02X ; %s"
argument_list|,
name|Opcode0
argument_list|,
name|Opcode1
argument_list|,
operator|(
operator|(
name|Opcode1
operator|&
literal|0xf0
operator|)
operator|||
name|Opcode1
operator|==
literal|0x00
operator|)
condition|?
literal|"spare"
else|:
literal|"pop "
argument_list|)
block|;
if|if
condition|(
operator|(
operator|(
name|Opcode1
operator|&
literal|0xf0
operator|)
operator|==
literal|0x00
operator|)
operator|&&
name|Opcode1
condition|)
name|PrintGPR
argument_list|(
operator|(
name|Opcode1
operator|&
literal|0x0f
operator|)
argument_list|)
expr_stmt|;
name|OS
operator|<<
literal|'\n'
expr_stmt|;
block|}
name|void
name|OpcodeDecoder
operator|::
name|Decode_10110010_uleb128
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X "
argument_list|,
name|Opcode
argument_list|)
block|;
name|SmallVector
operator|<
name|uint8_t
block|,
literal|4
operator|>
name|ULEB
block|;
do|do
block|{
name|ULEB
operator|.
name|push_back
argument_list|(
name|Opcodes
index|[
name|OI
operator|^
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
operator|&
literal|0x80
condition|)
empty_stmt|;
do|for (unsigned BI = 0
operator|,
do|BE = ULEB.size(
block|)
expr_stmt|;
name|BI
operator|!=
name|BE
expr_stmt|;
operator|++
name|BI
block|)
name|OS
decl|<<
name|format
argument_list|(
literal|"0x%02X "
argument_list|,
name|ULEB
index|[
name|BI
index|]
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|Value
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|unsigned
name|BI
init|=
literal|0
init|,
name|BE
init|=
name|ULEB
operator|.
name|size
argument_list|()
init|;
name|BI
operator|!=
name|BE
condition|;
operator|++
name|BI
control|)
name|Value
operator|=
name|Value
operator||
operator|(
operator|(
name|ULEB
index|[
name|BI
index|]
operator|&
literal|0x7f
operator|)
operator|<<
operator|(
literal|7
operator|*
name|BI
operator|)
operator|)
expr_stmt|;
end_for

begin_expr_stmt
name|OS
operator|<<
name|format
argument_list|(
literal|"; vsp = vsp + %"
name|PRIu64
literal|"\n"
argument_list|,
literal|0x204
operator|+
operator|(
name|Value
operator|<<
literal|2
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} void
name|OpcodeDecoder
operator|::
name|Decode_10110011_sssscccc
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode0
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|uint8_t
name|Opcode1
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X 0x%02X ; pop "
argument_list|,
name|Opcode0
argument_list|,
name|Opcode1
argument_list|)
block|;
name|uint8_t
name|Start
operator|=
operator|(
operator|(
name|Opcode1
operator|&
literal|0xf0
operator|)
operator|>>
literal|4
operator|)
block|;
name|uint8_t
name|Count
operator|=
operator|(
operator|(
name|Opcode1
operator|&
literal|0x0f
operator|)
operator|>>
literal|0
operator|)
block|;
name|PrintRegisters
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
name|Count
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
name|Start
operator|)
argument_list|,
literal|"d"
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_101101nn
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; spare\n"
argument_list|,
name|Opcode
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_10111nnn
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; pop "
argument_list|,
name|Opcode
argument_list|)
block|;
name|PrintRegisters
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
operator|(
name|Opcode
operator|&
literal|0x07
operator|)
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
literal|8
operator|)
argument_list|,
literal|"d"
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_11000110_sssscccc
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode0
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|uint8_t
name|Opcode1
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X 0x%02X ; pop "
argument_list|,
name|Opcode0
argument_list|,
name|Opcode1
argument_list|)
block|;
name|uint8_t
name|Start
operator|=
operator|(
operator|(
name|Opcode1
operator|&
literal|0xf0
operator|)
operator|>>
literal|4
operator|)
block|;
name|uint8_t
name|Count
operator|=
operator|(
operator|(
name|Opcode1
operator|&
literal|0x0f
operator|)
operator|>>
literal|0
operator|)
block|;
name|PrintRegisters
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
name|Count
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
name|Start
operator|)
argument_list|,
literal|"wR"
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_11000111_0000iiii
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode0
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|uint8_t
name|Opcode1
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X 0x%02X ; %s"
argument_list|,
name|Opcode0
argument_list|,
name|Opcode1
argument_list|,
operator|(
operator|(
name|Opcode1
operator|&
literal|0xf0
operator|)
operator|||
name|Opcode1
operator|==
literal|0x00
operator|)
condition|?
literal|"spare"
else|:
literal|"pop "
argument_list|)
block|;
if|if
condition|(
operator|(
name|Opcode1
operator|&
literal|0xf0
operator|)
operator|==
literal|0x00
operator|&&
name|Opcode1
condition|)
name|PrintRegisters
argument_list|(
name|Opcode1
operator|&
literal|0x0f
argument_list|,
literal|"wCGR"
argument_list|)
expr_stmt|;
name|OS
operator|<<
literal|'\n'
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} void
name|OpcodeDecoder
operator|::
name|Decode_11001000_sssscccc
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode0
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|uint8_t
name|Opcode1
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X 0x%02X ; pop "
argument_list|,
name|Opcode0
argument_list|,
name|Opcode1
argument_list|)
block|;
name|uint8_t
name|Start
operator|=
literal|16
operator|+
operator|(
operator|(
name|Opcode1
operator|&
literal|0xf0
operator|)
operator|>>
literal|4
operator|)
block|;
name|uint8_t
name|Count
operator|=
operator|(
operator|(
name|Opcode1
operator|&
literal|0x0f
operator|)
operator|>>
literal|0
operator|)
block|;
name|PrintRegisters
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
name|Count
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
name|Start
operator|)
argument_list|,
literal|"d"
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_11001001_sssscccc
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode0
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|uint8_t
name|Opcode1
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X 0x%02X ; pop "
argument_list|,
name|Opcode0
argument_list|,
name|Opcode1
argument_list|)
block|;
name|uint8_t
name|Start
operator|=
operator|(
operator|(
name|Opcode1
operator|&
literal|0xf0
operator|)
operator|>>
literal|4
operator|)
block|;
name|uint8_t
name|Count
operator|=
operator|(
operator|(
name|Opcode1
operator|&
literal|0x0f
operator|)
operator|>>
literal|0
operator|)
block|;
name|PrintRegisters
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
name|Count
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
name|Start
operator|)
argument_list|,
literal|"d"
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_11001yyy
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; spare\n"
argument_list|,
name|Opcode
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_11000nnn
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; pop "
argument_list|,
name|Opcode
argument_list|)
block|;
name|PrintRegisters
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
operator|(
name|Opcode
operator|&
literal|0x07
operator|)
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
literal|10
operator|)
argument_list|,
literal|"wR"
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_11010nnn
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; pop "
argument_list|,
name|Opcode
argument_list|)
block|;
name|PrintRegisters
argument_list|(
operator|(
operator|(
operator|(
literal|1
operator|<<
operator|(
operator|(
name|Opcode
operator|&
literal|0x07
operator|)
operator|+
literal|1
operator|)
operator|)
operator|-
literal|1
operator|)
operator|<<
literal|8
operator|)
argument_list|,
literal|"d"
argument_list|)
block|;
name|OS
operator|<<
literal|'\n'
block|; }
name|void
name|OpcodeDecoder
operator|::
name|Decode_11xxxyyy
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|unsigned&OI
argument_list|)
block|{
name|uint8_t
name|Opcode
operator|=
name|Opcodes
index|[
name|OI
operator|++
operator|^
literal|3
index|]
block|;
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; spare\n"
argument_list|,
name|Opcode
argument_list|)
block|; }
name|void
name|OpcodeDecoder
operator|::
name|PrintGPR
argument_list|(
argument|uint16_t GPRMask
argument_list|)
block|{
specifier|static
specifier|const
name|char
operator|*
name|GPRRegisterNames
index|[
literal|16
index|]
operator|=
block|{
literal|"r0"
block|,
literal|"r1"
block|,
literal|"r2"
block|,
literal|"r3"
block|,
literal|"r4"
block|,
literal|"r5"
block|,
literal|"r6"
block|,
literal|"r7"
block|,
literal|"r8"
block|,
literal|"r9"
block|,
literal|"r10"
block|,
literal|"fp"
block|,
literal|"ip"
block|,
literal|"sp"
block|,
literal|"lr"
block|,
literal|"pc"
block|}
block|;
name|OS
operator|<<
literal|'{'
block|;
name|bool
name|Comma
operator|=
name|false
block|;
for|for
control|(
name|unsigned
name|RI
init|=
literal|0
init|,
name|RE
init|=
literal|17
init|;
name|RI
operator|<
name|RE
condition|;
operator|++
name|RI
control|)
block|{
if|if
condition|(
name|GPRMask
operator|&
operator|(
literal|1
operator|<<
name|RI
operator|)
condition|)
block|{
if|if
condition|(
name|Comma
condition|)
name|OS
operator|<<
literal|", "
expr_stmt|;
name|OS
operator|<<
name|GPRRegisterNames
index|[
name|RI
index|]
expr_stmt|;
name|Comma
operator|=
name|true
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   OS
operator|<<
literal|'}'
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  void
name|OpcodeDecoder
operator|::
name|PrintRegisters
argument_list|(
argument|uint32_t VFPMask
argument_list|,
argument|StringRef Prefix
argument_list|)
block|{
name|OS
operator|<<
literal|'{'
block|;
name|bool
name|Comma
operator|=
name|false
block|;
for|for
control|(
name|unsigned
name|RI
init|=
literal|0
init|,
name|RE
init|=
literal|32
init|;
name|RI
operator|<
name|RE
condition|;
operator|++
name|RI
control|)
block|{
if|if
condition|(
name|VFPMask
operator|&
operator|(
literal|1
operator|<<
name|RI
operator|)
condition|)
block|{
if|if
condition|(
name|Comma
condition|)
name|OS
operator|<<
literal|", "
expr_stmt|;
name|OS
operator|<<
name|Prefix
operator|<<
name|RI
expr_stmt|;
name|Comma
operator|=
name|true
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   OS
operator|<<
literal|'}'
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  void
name|OpcodeDecoder
operator|::
name|Decode
argument_list|(
argument|const uint8_t *Opcodes
argument_list|,
argument|off_t Offset
argument_list|,
argument|size_t Length
argument_list|)
block|{
for|for
control|(
name|unsigned
name|OCI
init|=
name|Offset
init|;
name|OCI
operator|<
name|Length
operator|+
name|Offset
condition|;
control|)
block|{
name|bool
name|Decoded
init|=
name|false
decl_stmt|;
for|for
control|(
name|unsigned
name|REI
init|=
literal|0
init|,
name|REE
init|=
name|array_lengthof
argument_list|(
name|Ring
argument_list|)
init|;
name|REI
operator|!=
name|REE
operator|&&
operator|!
name|Decoded
condition|;
operator|++
name|REI
control|)
block|{
if|if
condition|(
operator|(
name|Opcodes
index|[
name|OCI
operator|^
literal|3
index|]
operator|&
name|Ring
index|[
name|REI
index|]
operator|.
name|Mask
operator|)
operator|==
name|Ring
index|[
name|REI
index|]
operator|.
name|Value
condition|)
block|{
operator|(
name|this
operator|->*
name|Ring
index|[
name|REI
index|]
operator|.
name|Routine
operator|)
operator|(
name|Opcodes
operator|,
name|OCI
operator|)
expr_stmt|;
name|Decoded
operator|=
name|true
expr_stmt|;
break|break;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     if
operator|(
operator|!
name|Decoded
operator|)
name|SW
operator|.
name|startLine
argument_list|()
operator|<<
name|format
argument_list|(
literal|"0x%02X      ; reserved\n"
argument_list|,
name|Opcodes
index|[
name|OCI
operator|++
operator|^
literal|3
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|typename
name|ET
operator|>
name|class
name|PrinterContext
block|{
name|StreamWriter
operator|&
name|SW
block|;
specifier|const
name|object
operator|::
name|ELFFile
operator|<
name|ET
operator|>
operator|*
name|ELF
block|;
typedef|typedef
name|typename
name|object
operator|::
name|ELFFile
operator|<
name|ET
operator|>
operator|::
name|Elf_Sym
name|Elf_Sym
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|object
operator|::
name|ELFFile
operator|<
name|ET
operator|>
operator|::
name|Elf_Shdr
name|Elf_Shdr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|object
operator|::
name|ELFFile
operator|<
name|ET
operator|>
operator|::
name|Elf_Rel_Iter
name|Elf_Rel_iterator
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|IndexTableEntrySize
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|uint64_t
name|PREL31
parameter_list|(
name|uint32_t
name|Address
parameter_list|,
name|uint32_t
name|Place
parameter_list|)
block|{
name|uint64_t
name|Location
init|=
name|Address
operator|&
literal|0x7fffffff
decl_stmt|;
if|if
condition|(
name|Location
operator|&
literal|0x04000000
condition|)
name|Location
operator||=
operator|(
name|uint64_t
operator|)
operator|~
literal|0x7fffffff
expr_stmt|;
return|return
name|Location
operator|+
name|Place
return|;
block|}
end_function

begin_expr_stmt
name|ErrorOr
operator|<
name|StringRef
operator|>
name|FunctionAtAddress
argument_list|(
argument|unsigned Section
argument_list|,
argument|uint64_t Address
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|Elf_Shdr
modifier|*
name|FindExceptionTable
argument_list|(
name|unsigned
name|IndexTableIndex
argument_list|,
name|off_t
name|IndexTableOffset
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|PrintIndexTable
argument_list|(
name|unsigned
name|SectionIndex
argument_list|,
specifier|const
name|Elf_Shdr
operator|*
name|IT
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|PrintExceptionTable
argument_list|(
specifier|const
name|Elf_Shdr
operator|*
name|IT
argument_list|,
specifier|const
name|Elf_Shdr
operator|*
name|EHT
argument_list|,
name|uint64_t
name|TableEntryOffset
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|PrintOpcodes
argument_list|(
specifier|const
name|uint8_t
operator|*
name|Entry
argument_list|,
name|size_t
name|Length
argument_list|,
name|off_t
name|Offset
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|PrinterContext
argument_list|(
name|StreamWriter
operator|&
name|Writer
argument_list|,
specifier|const
name|object
operator|::
name|ELFFile
operator|<
name|ET
operator|>
operator|*
name|File
argument_list|)
operator|:
name|SW
argument_list|(
name|Writer
argument_list|)
operator|,
name|ELF
argument_list|(
argument|File
argument_list|)
block|{}
name|void
name|PrintUnwindInformation
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|ET
operator|>
specifier|const
name|size_t
name|PrinterContext
operator|<
name|ET
operator|>
operator|::
name|IndexTableEntrySize
operator|=
literal|8
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|ET
operator|>
name|ErrorOr
operator|<
name|StringRef
operator|>
name|PrinterContext
operator|<
name|ET
operator|>
operator|::
name|FunctionAtAddress
argument_list|(
argument|unsigned Section
argument_list|,
argument|uint64_t Address
argument_list|)
specifier|const
block|{
for|for
control|(
specifier|const
name|Elf_Sym
modifier|&
name|Sym
range|:
name|ELF
operator|->
name|symbols
argument_list|()
control|)
if|if
condition|(
name|Sym
operator|.
name|st_shndx
operator|==
name|Section
operator|&&
name|Sym
operator|.
name|st_value
operator|==
name|Address
operator|&&
name|Sym
operator|.
name|getType
argument_list|()
operator|==
name|ELF
operator|::
name|STT_FUNC
condition|)
return|return
name|ELF
operator|->
name|getSymbolName
argument_list|(
operator|&
name|Sym
argument_list|,
name|false
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|readobj_error
operator|::
name|unknown_symbol
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|ET
operator|>
specifier|const
name|typename
name|object
operator|::
name|ELFFile
operator|<
name|ET
operator|>
operator|::
name|Elf_Shdr
operator|*
name|PrinterContext
operator|<
name|ET
operator|>
operator|::
name|FindExceptionTable
argument_list|(
argument|unsigned IndexSectionIndex
argument_list|,
argument|off_t IndexTableOffset
argument_list|)
specifier|const
block|{
comment|/// Iterate through the sections, searching for the relocation section
comment|/// associated with the unwind index table section specified by
comment|/// IndexSectionIndex.  Iterate the associated section searching for the
comment|/// relocation associated with the index table entry specified by
comment|/// IndexTableOffset.  The symbol is the section symbol for the exception
comment|/// handling table.  Use this symbol to recover the actual exception handling
comment|/// table.
for|for
control|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
range|:
name|ELF
operator|->
name|sections
argument_list|()
control|)
block|{
if|if
condition|(
name|Sec
operator|.
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_REL
operator|&&
name|Sec
operator|.
name|sh_info
operator|==
name|IndexSectionIndex
condition|)
block|{
for|for
control|(
name|Elf_Rel_iterator
name|RI
init|=
name|ELF
operator|->
name|rel_begin
argument_list|(
operator|&
name|Sec
argument_list|)
init|,
name|RE
init|=
name|ELF
operator|->
name|rel_end
argument_list|(
operator|&
name|Sec
argument_list|)
init|;
name|RI
operator|!=
name|RE
condition|;
operator|++
name|RI
control|)
block|{
if|if
condition|(
name|RI
operator|->
name|r_offset
operator|==
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|IndexTableOffset
operator|)
condition|)
block|{
name|typename
name|object
operator|::
name|ELFFile
operator|<
name|ET
operator|>
operator|::
name|Elf_Rela
name|RelA
expr_stmt|;
name|RelA
operator|.
name|r_offset
operator|=
name|RI
operator|->
name|r_offset
expr_stmt|;
name|RelA
operator|.
name|r_info
operator|=
name|RI
operator|->
name|r_info
expr_stmt|;
name|RelA
operator|.
name|r_addend
operator|=
literal|0
expr_stmt|;
name|std
operator|::
name|pair
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|,
specifier|const
name|Elf_Sym
operator|*
operator|>
name|Symbol
operator|=
name|ELF
operator|->
name|getRelocationSymbol
argument_list|(
operator|&
name|Sec
argument_list|,
operator|&
name|RelA
argument_list|)
expr_stmt|;
name|ErrorOr
operator|<
specifier|const
name|Elf_Shdr
operator|*
operator|>
name|Ret
operator|=
name|ELF
operator|->
name|getSection
argument_list|(
name|Symbol
operator|.
name|second
argument_list|)
expr_stmt|;
if|if
condition|(
name|std
operator|::
name|error_code
name|EC
operator|=
name|Ret
operator|.
name|getError
argument_list|()
condition|)
name|report_fatal_error
argument_list|(
name|EC
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|*
name|Ret
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     }   }   return
name|nullptr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|ET
operator|>
name|void
name|PrinterContext
operator|<
name|ET
operator|>
operator|::
name|PrintExceptionTable
argument_list|(
argument|const Elf_Shdr *IT
argument_list|,
argument|const Elf_Shdr *EHT
argument_list|,
argument|uint64_t TableEntryOffset
argument_list|)
specifier|const
block|{
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>
expr|>
name|Contents
operator|=
name|ELF
operator|->
name|getSectionContents
argument_list|(
name|EHT
argument_list|)
block|;
if|if
condition|(
operator|!
name|Contents
condition|)
return|return;
comment|/// ARM EHABI Section 6.2 - The generic model
comment|///
comment|/// An exception-handling table entry for the generic model is laid out as:
comment|///
comment|///  3 3
comment|///  1 0                            0
comment|/// +-+------------------------------+
comment|/// |0|  personality routine offset  |
comment|/// +-+------------------------------+
comment|/// |  personality routine data ...  |
comment|///
comment|///
comment|/// ARM EHABI Section 6.3 - The ARM-defined compact model
comment|///
comment|/// An exception-handling table entry for the compact model looks like:
comment|///
comment|///  3 3 2 2  2 2
comment|///  1 0 8 7  4 3                     0
comment|/// +-+---+----+-----------------------+
comment|/// |1| 0 | Ix | data for pers routine |
comment|/// +-+---+----+-----------------------+
comment|/// |  more personality routine data   |
specifier|const
name|support
operator|::
name|ulittle32_t
name|Word
operator|=
operator|*
name|reinterpret_cast
operator|<
specifier|const
name|support
operator|::
name|ulittle32_t
operator|*
operator|>
operator|(
name|Contents
operator|->
name|data
argument_list|()
operator|+
name|TableEntryOffset
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|Word
operator|&
literal|0x80000000
condition|)
block|{
name|SW
operator|.
name|printString
argument_list|(
literal|"Model"
argument_list|,
name|StringRef
argument_list|(
literal|"Compact"
argument_list|)
argument_list|)
expr_stmt|;
name|unsigned
name|PersonalityIndex
init|=
operator|(
name|Word
operator|&
literal|0x0f000000
operator|)
operator|>>
literal|24
decl_stmt|;
name|SW
operator|.
name|printNumber
argument_list|(
literal|"PersonalityIndex"
argument_list|,
name|PersonalityIndex
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|PersonalityIndex
condition|)
block|{
case|case
name|AEABI_UNWIND_CPP_PR0
case|:
name|PrintOpcodes
argument_list|(
name|Contents
operator|->
name|data
argument_list|()
operator|+
name|TableEntryOffset
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|AEABI_UNWIND_CPP_PR1
case|:
case|case
name|AEABI_UNWIND_CPP_PR2
case|:
name|unsigned
name|AdditionalWords
init|=
operator|(
name|Word
operator|&
literal|0x00ff0000
operator|)
operator|>>
literal|16
decl_stmt|;
name|PrintOpcodes
argument_list|(
name|Contents
operator|->
name|data
argument_list|()
operator|+
name|TableEntryOffset
argument_list|,
literal|2
operator|+
literal|4
operator|*
name|AdditionalWords
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
name|SW
operator|.
name|printString
argument_list|(
literal|"Model"
argument_list|,
name|StringRef
argument_list|(
literal|"Generic"
argument_list|)
argument_list|)
expr_stmt|;
name|uint64_t
name|Address
init|=
name|PREL31
argument_list|(
name|Word
argument_list|,
name|EHT
operator|->
name|sh_addr
argument_list|)
decl_stmt|;
name|SW
operator|.
name|printHex
argument_list|(
literal|"PersonalityRoutineAddress"
argument_list|,
name|Address
argument_list|)
expr_stmt|;
if|if
condition|(
name|ErrorOr
operator|<
name|StringRef
operator|>
name|Name
operator|=
name|FunctionAtAddress
argument_list|(
name|EHT
operator|->
name|sh_link
argument_list|,
name|Address
argument_list|)
condition|)
name|SW
operator|.
name|printString
argument_list|(
literal|"PersonalityRoutineName"
argument_list|,
operator|*
name|Name
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|ET
operator|>
name|void
name|PrinterContext
operator|<
name|ET
operator|>
operator|::
name|PrintOpcodes
argument_list|(
argument|const uint8_t *Entry
argument_list|,
argument|size_t Length
argument_list|,
argument|off_t Offset
argument_list|)
specifier|const
block|{
name|ListScope
name|OCC
argument_list|(
name|SW
argument_list|,
literal|"Opcodes"
argument_list|)
block|;
name|OpcodeDecoder
argument_list|(
name|OCC
operator|.
name|W
argument_list|)
operator|.
name|Decode
argument_list|(
name|Entry
argument_list|,
name|Offset
argument_list|,
name|Length
argument_list|)
block|; }
name|template
operator|<
name|typename
name|ET
operator|>
name|void
name|PrinterContext
operator|<
name|ET
operator|>
operator|::
name|PrintIndexTable
argument_list|(
argument|unsigned SectionIndex
argument_list|,
argument|const Elf_Shdr *IT
argument_list|)
specifier|const
block|{
name|ErrorOr
operator|<
name|ArrayRef
operator|<
name|uint8_t
operator|>
expr|>
name|Contents
operator|=
name|ELF
operator|->
name|getSectionContents
argument_list|(
name|IT
argument_list|)
block|;
if|if
condition|(
operator|!
name|Contents
condition|)
return|return;
comment|/// ARM EHABI Section 5 - Index Table Entries
comment|/// * The first word contains a PREL31 offset to the start of a function with
comment|///   bit 31 clear
comment|/// * The second word contains one of:
comment|///   - The PREL31 offset of the start of the table entry for the function,
comment|///     with bit 31 clear
comment|///   - The exception-handling table entry itself with bit 31 set
comment|///   - The special bit pattern EXIDX_CANTUNWIND, indicating that associated
comment|///     frames cannot be unwound
specifier|const
name|support
operator|::
name|ulittle32_t
operator|*
name|Data
operator|=
name|reinterpret_cast
operator|<
specifier|const
name|support
operator|::
name|ulittle32_t
operator|*
operator|>
operator|(
name|Contents
operator|->
name|data
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|unsigned
name|Entries
init|=
name|IT
operator|->
name|sh_size
operator|/
name|IndexTableEntrySize
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ListScope
name|E
argument_list|(
name|SW
argument_list|,
literal|"Entries"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|unsigned
name|Entry
init|=
literal|0
init|;
name|Entry
operator|<
name|Entries
condition|;
operator|++
name|Entry
control|)
block|{
name|DictScope
name|E
argument_list|(
name|SW
argument_list|,
literal|"Entry"
argument_list|)
decl_stmt|;
specifier|const
name|support
operator|::
name|ulittle32_t
name|Word0
operator|=
name|Data
index|[
name|Entry
operator|*
operator|(
name|IndexTableEntrySize
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|Data
argument_list|)
operator|)
operator|+
literal|0
index|]
expr_stmt|;
specifier|const
name|support
operator|::
name|ulittle32_t
name|Word1
operator|=
name|Data
index|[
name|Entry
operator|*
operator|(
name|IndexTableEntrySize
operator|/
sizeof|sizeof
argument_list|(
operator|*
name|Data
argument_list|)
operator|)
operator|+
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|Word0
operator|&
literal|0x80000000
condition|)
block|{
name|errs
argument_list|()
operator|<<
literal|"corrupt unwind data in section "
operator|<<
name|SectionIndex
operator|<<
literal|"\n"
expr_stmt|;
continue|continue;
block|}
specifier|const
name|uint64_t
name|Offset
init|=
name|PREL31
argument_list|(
name|Word0
argument_list|,
name|IT
operator|->
name|sh_addr
argument_list|)
decl_stmt|;
name|SW
operator|.
name|printHex
argument_list|(
literal|"FunctionAddress"
argument_list|,
name|Offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|ErrorOr
operator|<
name|StringRef
operator|>
name|Name
operator|=
name|FunctionAtAddress
argument_list|(
name|IT
operator|->
name|sh_link
argument_list|,
name|Offset
argument_list|)
condition|)
name|SW
operator|.
name|printString
argument_list|(
literal|"FunctionName"
argument_list|,
operator|*
name|Name
argument_list|)
expr_stmt|;
if|if
condition|(
name|Word1
operator|==
name|EXIDX_CANTUNWIND
condition|)
block|{
name|SW
operator|.
name|printString
argument_list|(
literal|"Model"
argument_list|,
name|StringRef
argument_list|(
literal|"CantUnwind"
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|Word1
operator|&
literal|0x80000000
condition|)
block|{
name|SW
operator|.
name|printString
argument_list|(
literal|"Model"
argument_list|,
name|StringRef
argument_list|(
literal|"Compact (Inline)"
argument_list|)
argument_list|)
expr_stmt|;
name|unsigned
name|PersonalityIndex
init|=
operator|(
name|Word1
operator|&
literal|0x0f000000
operator|)
operator|>>
literal|24
decl_stmt|;
name|SW
operator|.
name|printNumber
argument_list|(
literal|"PersonalityIndex"
argument_list|,
name|PersonalityIndex
argument_list|)
expr_stmt|;
name|PrintOpcodes
argument_list|(
name|Contents
operator|->
name|data
argument_list|()
operator|+
name|Entry
operator|*
name|IndexTableEntrySize
operator|+
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|Elf_Shdr
modifier|*
name|EHT
init|=
name|FindExceptionTable
argument_list|(
name|SectionIndex
argument_list|,
name|Entry
operator|*
name|IndexTableEntrySize
operator|+
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|ErrorOr
operator|<
name|StringRef
operator|>
name|Name
operator|=
name|ELF
operator|->
name|getSectionName
argument_list|(
name|EHT
argument_list|)
condition|)
name|SW
operator|.
name|printString
argument_list|(
literal|"ExceptionHandlingTable"
argument_list|,
operator|*
name|Name
argument_list|)
expr_stmt|;
name|uint64_t
name|TableEntryOffset
init|=
name|PREL31
argument_list|(
name|Word1
argument_list|,
name|IT
operator|->
name|sh_addr
argument_list|)
decl_stmt|;
name|SW
operator|.
name|printHex
argument_list|(
literal|"TableEntryOffset"
argument_list|,
name|TableEntryOffset
argument_list|)
expr_stmt|;
name|PrintExceptionTable
argument_list|(
name|IT
argument_list|,
name|EHT
argument_list|,
name|TableEntryOffset
argument_list|)
expr_stmt|;
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|ET
operator|>
name|void
name|PrinterContext
operator|<
name|ET
operator|>
operator|::
name|PrintUnwindInformation
argument_list|()
specifier|const
block|{
name|DictScope
name|UI
argument_list|(
name|SW
argument_list|,
literal|"UnwindInformation"
argument_list|)
block|;
name|int
name|SectionIndex
operator|=
literal|0
block|;
for|for
control|(
specifier|const
name|Elf_Shdr
modifier|&
name|Sec
range|:
name|ELF
operator|->
name|sections
argument_list|()
control|)
block|{
if|if
condition|(
name|Sec
operator|.
name|sh_type
operator|==
name|ELF
operator|::
name|SHT_ARM_EXIDX
condition|)
block|{
name|DictScope
name|UIT
argument_list|(
name|SW
argument_list|,
literal|"UnwindIndexTable"
argument_list|)
decl_stmt|;
name|SW
operator|.
name|printNumber
argument_list|(
literal|"SectionIndex"
argument_list|,
name|SectionIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|ErrorOr
operator|<
name|StringRef
operator|>
name|SectionName
operator|=
name|ELF
operator|->
name|getSectionName
argument_list|(
operator|&
name|Sec
argument_list|)
condition|)
name|SW
operator|.
name|printString
argument_list|(
literal|"SectionName"
argument_list|,
operator|*
name|SectionName
argument_list|)
expr_stmt|;
name|SW
operator|.
name|printHex
argument_list|(
literal|"SectionOffset"
argument_list|,
name|Sec
operator|.
name|sh_offset
argument_list|)
expr_stmt|;
name|PrintIndexTable
argument_list|(
name|SectionIndex
argument_list|,
operator|&
name|Sec
argument_list|)
expr_stmt|;
block|}
operator|++
name|SectionIndex
expr_stmt|;
end_expr_stmt

begin_endif
unit|} } } } }
endif|#
directive|endif
end_endif

end_unit

