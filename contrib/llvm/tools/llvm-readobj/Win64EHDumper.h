begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- Win64EHDumper.h - Win64 EH Printing ----------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TOOLS_READOBJ_WIN64EHPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TOOLS_READOBJ_WIN64EHPRINTER_H
end_define

begin_include
include|#
directive|include
file|"StreamWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Win64EH.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|class
name|COFFObjectFile
decl_stmt|;
name|class
name|SymbolRef
decl_stmt|;
struct_decl|struct
name|coff_section
struct_decl|;
block|}
name|namespace
name|Win64EH
block|{
name|class
name|Dumper
block|{
name|StreamWriter
modifier|&
name|SW
decl_stmt|;
name|raw_ostream
modifier|&
name|OS
decl_stmt|;
name|public
label|:
typedef|typedef
name|std
operator|::
name|error_code
argument_list|(
operator|*
name|SymbolResolver
argument_list|)
argument_list|(
specifier|const
name|object
operator|::
name|coff_section
operator|*
argument_list|,
name|uint64_t
argument_list|,
name|object
operator|::
name|SymbolRef
operator|&
argument_list|,
name|void
operator|*
argument_list|)
expr_stmt|;
struct|struct
name|Context
block|{
specifier|const
name|object
operator|::
name|COFFObjectFile
operator|&
name|COFF
expr_stmt|;
name|SymbolResolver
name|ResolveSymbol
decl_stmt|;
name|void
modifier|*
name|UserData
decl_stmt|;
name|Context
argument_list|(
argument|const object::COFFObjectFile&COFF
argument_list|,
argument|SymbolResolver Resolver
argument_list|,
argument|void *UserData
argument_list|)
block|:
name|COFF
argument_list|(
name|COFF
argument_list|)
operator|,
name|ResolveSymbol
argument_list|(
name|Resolver
argument_list|)
operator|,
name|UserData
argument_list|(
argument|UserData
argument_list|)
block|{}
block|}
struct|;
name|private
label|:
name|void
name|printRuntimeFunctionEntry
argument_list|(
specifier|const
name|Context
operator|&
name|Ctx
argument_list|,
specifier|const
name|object
operator|::
name|coff_section
operator|*
name|Section
argument_list|,
name|uint64_t
name|SectionOffset
argument_list|,
specifier|const
name|RuntimeFunction
operator|&
name|RF
argument_list|)
decl_stmt|;
name|void
name|printUnwindCode
argument_list|(
specifier|const
name|UnwindInfo
operator|&
name|UI
argument_list|,
name|ArrayRef
operator|<
name|UnwindCode
operator|>
name|UC
argument_list|)
decl_stmt|;
name|void
name|printUnwindInfo
argument_list|(
specifier|const
name|Context
operator|&
name|Ctx
argument_list|,
specifier|const
name|object
operator|::
name|coff_section
operator|*
name|Section
argument_list|,
name|off_t
name|Offset
argument_list|,
specifier|const
name|UnwindInfo
operator|&
name|UI
argument_list|)
decl_stmt|;
name|void
name|printRuntimeFunction
argument_list|(
specifier|const
name|Context
operator|&
name|Ctx
argument_list|,
specifier|const
name|object
operator|::
name|coff_section
operator|*
name|Section
argument_list|,
name|uint64_t
name|SectionOffset
argument_list|,
specifier|const
name|RuntimeFunction
operator|&
name|RF
argument_list|)
decl_stmt|;
name|public
label|:
name|Dumper
argument_list|(
name|StreamWriter
operator|&
name|SW
argument_list|)
operator|:
name|SW
argument_list|(
name|SW
argument_list|)
operator|,
name|OS
argument_list|(
argument|SW.getOStream()
argument_list|)
block|{}
name|void
name|printData
argument_list|(
specifier|const
name|Context
operator|&
name|Ctx
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

