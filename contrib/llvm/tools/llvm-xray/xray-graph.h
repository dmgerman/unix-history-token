begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- xray-graph.h - XRay Function Call Graph Renderer --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Generate a DOT file to represent the function call graph encountered in
end_comment

begin_comment
comment|// the trace.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XRAY_GRAPH_H
end_ifndef

begin_define
define|#
directive|define
name|XRAY_GRAPH_H
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_include
include|#
directive|include
file|"func-id-helper.h"
end_include

begin_include
include|#
directive|include
file|"xray-color-helper.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Errc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Program.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|"llvm/XRay/Graph.h"
end_include

begin_include
include|#
directive|include
file|"llvm/XRay/Trace.h"
end_include

begin_include
include|#
directive|include
file|"llvm/XRay/XRayRecord.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|xray
block|{
comment|/// A class encapsulating the logic related to analyzing XRay traces, producting
comment|/// Graphs from them and then exporting those graphs for review.
name|class
name|GraphRenderer
block|{
name|public
label|:
comment|/// An enum for enumerating the various statistics gathered on latencies
name|enum
name|class
name|StatType
block|{
name|NONE
operator|,
name|COUNT
operator|,
name|MIN
operator|,
name|MED
operator|,
name|PCT90
operator|,
name|PCT99
operator|,
name|MAX
operator|,
name|SUM
block|}
empty_stmt|;
comment|/// An inner struct for common timing statistics information
struct|struct
name|TimeStat
block|{
name|int64_t
name|Count
decl_stmt|;
name|double
name|Min
decl_stmt|;
name|double
name|Median
decl_stmt|;
name|double
name|Pct90
decl_stmt|;
name|double
name|Pct99
decl_stmt|;
name|double
name|Max
decl_stmt|;
name|double
name|Sum
decl_stmt|;
name|std
operator|::
name|string
name|getString
argument_list|(
argument|StatType T
argument_list|)
specifier|const
expr_stmt|;
name|double
name|getDouble
argument_list|(
name|StatType
name|T
argument_list|)
decl|const
decl_stmt|;
block|}
struct|;
name|using
name|TimestampT
init|=
name|uint64_t
decl_stmt|;
comment|/// An inner struct for storing edge attributes for our graph. Here the
comment|/// attributes are mainly function call statistics.
comment|///
comment|/// FIXME: expand to contain more information eg call latencies.
struct|struct
name|CallStats
block|{
name|TimeStat
name|S
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|TimestampT
operator|>
name|Timings
expr_stmt|;
block|}
struct|;
comment|/// An Inner Struct for storing vertex attributes, at the moment just
comment|/// SymbolNames, however in future we could store bulk function statistics.
comment|///
comment|/// FIXME: Store more attributes based on instrumentation map.
struct|struct
name|FunctionStats
block|{
name|std
operator|::
name|string
name|SymbolName
expr_stmt|;
name|TimeStat
name|S
init|=
block|{}
decl_stmt|;
block|}
struct|;
struct|struct
name|FunctionAttr
block|{
name|int32_t
name|FuncId
decl_stmt|;
name|uint64_t
name|TSC
decl_stmt|;
block|}
struct|;
name|using
name|FunctionStack
init|=
name|SmallVector
operator|<
name|FunctionAttr
decl_stmt|, 4>;
name|using
name|PerThreadFunctionStackMap
init|=
name|DenseMap
operator|<
name|llvm
operator|::
name|sys
operator|::
name|ProcessInfo
operator|::
name|ProcessId
decl_stmt|,
name|FunctionStack
decl|>
decl_stmt|;
name|class
name|GraphT
range|:
name|public
name|Graph
operator|<
name|FunctionStats
decl_stmt|,
name|CallStats
decl_stmt|,
name|int32_t
decl|>
block|{
name|public
label|:
name|TimeStat
name|GraphEdgeMax
init|=
block|{}
decl_stmt|;
name|TimeStat
name|GraphVertexMax
init|=
block|{}
decl_stmt|;
block|}
empty_stmt|;
name|GraphT
name|G
decl_stmt|;
name|using
name|VertexIdentifier
init|=
name|typename
name|decltype
argument_list|(
name|G
argument_list|)
operator|::
name|VertexIdentifier
decl_stmt|;
name|using
name|EdgeIdentifier
init|=
name|decltype
argument_list|(
name|G
argument_list|)
operator|::
name|EdgeIdentifier
decl_stmt|;
comment|/// Use a Map to store the Function stack for each thread whilst building the
comment|/// graph.
comment|///
comment|/// FIXME: Perhaps we can Build this into LatencyAccountant? or vise versa?
name|PerThreadFunctionStackMap
name|PerThreadFunctionStack
decl_stmt|;
comment|/// Usefull object for getting human readable Symbol Names.
name|FuncIdConversionHelper
name|FuncIdHelper
decl_stmt|;
name|bool
name|DeduceSiblingCalls
init|=
name|false
decl_stmt|;
name|TimestampT
name|CurrentMaxTSC
init|=
literal|0
decl_stmt|;
comment|/// A private function to help implement the statistic generation functions;
name|template
operator|<
name|typename
name|U
operator|>
name|void
name|getStats
argument_list|(
argument|U begin
argument_list|,
argument|U end
argument_list|,
argument|GraphRenderer::TimeStat&S
argument_list|)
expr_stmt|;
name|void
name|updateMaxStats
parameter_list|(
specifier|const
name|TimeStat
modifier|&
name|S
parameter_list|,
name|TimeStat
modifier|&
name|M
parameter_list|)
function_decl|;
comment|/// Calculates latency statistics for each edge and stores the data in the
comment|/// Graph
name|void
name|calculateEdgeStatistics
parameter_list|()
function_decl|;
comment|/// Calculates latency statistics for each vertex and stores the data in the
comment|/// Graph
name|void
name|calculateVertexStatistics
parameter_list|()
function_decl|;
comment|/// Normalises latency statistics for each edge and vertex by CycleFrequency;
name|void
name|normalizeStatistics
parameter_list|(
name|double
name|CycleFrequency
parameter_list|)
function_decl|;
comment|/// An object to color gradients
name|ColorHelper
name|CHelper
decl_stmt|;
name|public
label|:
comment|/// Takes in a reference to a FuncIdHelper in order to have ready access to
comment|/// Symbol names.
name|explicit
name|GraphRenderer
argument_list|(
argument|const FuncIdConversionHelper&FuncIdHelper
argument_list|,
argument|bool DSC
argument_list|)
block|:
name|FuncIdHelper
argument_list|(
name|FuncIdHelper
argument_list|)
operator|,
name|DeduceSiblingCalls
argument_list|(
name|DSC
argument_list|)
operator|,
name|CHelper
argument_list|(
argument|ColorHelper::SequentialScheme::OrRd
argument_list|)
block|{
name|G
index|[
literal|0
index|]
operator|=
block|{}
block|;   }
comment|/// Process an Xray record and expand the graph.
comment|///
comment|/// This Function will return true on success, or false if records are not
comment|/// presented in per-thread call-tree DFS order. (That is for each thread the
comment|/// Records should be in order runtime on an ideal system.)
comment|///
comment|/// FIXME: Make this more robust against small irregularities.
name|Error
name|accountRecord
argument_list|(
specifier|const
name|XRayRecord
operator|&
name|Record
argument_list|)
expr_stmt|;
specifier|const
name|PerThreadFunctionStackMap
operator|&
name|getPerThreadFunctionStack
argument_list|()
specifier|const
block|{
return|return
name|PerThreadFunctionStack
return|;
block|}
name|class
name|Factory
block|{
name|public
label|:
name|bool
name|KeepGoing
decl_stmt|;
name|bool
name|DeduceSiblingCalls
decl_stmt|;
name|std
operator|::
name|string
name|InstrMap
expr_stmt|;
operator|::
name|llvm
operator|::
name|xray
operator|::
name|Trace
name|Trace
expr_stmt|;
name|Expected
operator|<
name|GraphRenderer
operator|>
name|getGraphRenderer
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
comment|/// Output the Embedded graph in DOT format on \p OS, labeling the edges by
comment|/// \p T
name|void
name|exportGraphAsDOT
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|StatType
name|EdgeLabel
init|=
name|StatType
operator|::
name|NONE
parameter_list|,
name|StatType
name|EdgeColor
init|=
name|StatType
operator|::
name|NONE
parameter_list|,
name|StatType
name|VertexLabel
init|=
name|StatType
operator|::
name|NONE
parameter_list|,
name|StatType
name|VertexColor
init|=
name|StatType
operator|::
name|NONE
parameter_list|)
function_decl|;
comment|/// Get a reference to the internal graph.
specifier|const
name|GraphT
modifier|&
name|getGraph
parameter_list|()
block|{
return|return
name|G
return|;
block|}
block|}
empty_stmt|;
comment|/// Vector Sum of TimeStats
specifier|inline
name|GraphRenderer
operator|::
name|TimeStat
name|operator
operator|+
operator|(
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|A
operator|,
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|B
operator|)
block|{
return|return
block|{
name|A
operator|.
name|Count
operator|+
name|B
operator|.
name|Count
block|,
name|A
operator|.
name|Min
operator|+
name|B
operator|.
name|Min
block|,
name|A
operator|.
name|Median
operator|+
name|B
operator|.
name|Median
block|,
name|A
operator|.
name|Pct90
operator|+
name|B
operator|.
name|Pct90
block|,
name|A
operator|.
name|Pct99
operator|+
name|B
operator|.
name|Pct99
block|,
name|A
operator|.
name|Max
operator|+
name|B
operator|.
name|Max
block|,
name|A
operator|.
name|Sum
operator|+
name|B
operator|.
name|Sum
block|}
return|;
block|}
comment|/// Vector Difference of Timestats
specifier|inline
name|GraphRenderer
operator|::
name|TimeStat
name|operator
operator|-
operator|(
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|A
operator|,
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|B
operator|)
block|{
return|return
block|{
name|A
operator|.
name|Count
operator|-
name|B
operator|.
name|Count
block|,
name|A
operator|.
name|Min
operator|-
name|B
operator|.
name|Min
block|,
name|A
operator|.
name|Median
operator|-
name|B
operator|.
name|Median
block|,
name|A
operator|.
name|Pct90
operator|-
name|B
operator|.
name|Pct90
block|,
name|A
operator|.
name|Pct99
operator|-
name|B
operator|.
name|Pct99
block|,
name|A
operator|.
name|Max
operator|-
name|B
operator|.
name|Max
block|,
name|A
operator|.
name|Sum
operator|-
name|B
operator|.
name|Sum
block|}
return|;
block|}
comment|/// Scalar Diference of TimeStat and double
specifier|inline
name|GraphRenderer
operator|::
name|TimeStat
name|operator
operator|/
operator|(
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|A
operator|,
name|double
name|B
operator|)
block|{
return|return
block|{
name|static_cast
operator|<
name|int64_t
operator|>
operator|(
name|A
operator|.
name|Count
operator|/
name|B
operator|)
block|,
name|A
operator|.
name|Min
operator|/
name|B
block|,
name|A
operator|.
name|Median
operator|/
name|B
block|,
name|A
operator|.
name|Pct90
operator|/
name|B
block|,
name|A
operator|.
name|Pct99
operator|/
name|B
block|,
name|A
operator|.
name|Max
operator|/
name|B
block|,
name|A
operator|.
name|Sum
operator|/
name|B
block|}
return|;
block|}
comment|/// Scalar product of TimeStat and Double
specifier|inline
name|GraphRenderer
operator|::
name|TimeStat
name|operator
operator|*
operator|(
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|A
operator|,
name|double
name|B
operator|)
block|{
return|return
block|{
name|static_cast
operator|<
name|int64_t
operator|>
operator|(
name|A
operator|.
name|Count
operator|*
name|B
operator|)
block|,
name|A
operator|.
name|Min
operator|*
name|B
block|,
name|A
operator|.
name|Median
operator|*
name|B
block|,
name|A
operator|.
name|Pct90
operator|*
name|B
block|,
name|A
operator|.
name|Pct99
operator|*
name|B
block|,
name|A
operator|.
name|Max
operator|*
name|B
block|,
name|A
operator|.
name|Sum
operator|*
name|B
block|}
return|;
block|}
comment|/// Scalar product of double TimeStat
specifier|inline
name|GraphRenderer
operator|::
name|TimeStat
name|operator
operator|*
operator|(
name|double
name|A
operator|,
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|B
operator|)
block|{
return|return
name|B
operator|*
name|A
return|;
block|}
comment|/// Hadamard Product of TimeStats
specifier|inline
name|GraphRenderer
operator|::
name|TimeStat
name|operator
operator|*
operator|(
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|A
operator|,
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|B
operator|)
block|{
return|return
block|{
name|A
operator|.
name|Count
operator|*
name|B
operator|.
name|Count
block|,
name|A
operator|.
name|Min
operator|*
name|B
operator|.
name|Min
block|,
name|A
operator|.
name|Median
operator|*
name|B
operator|.
name|Median
block|,
name|A
operator|.
name|Pct90
operator|*
name|B
operator|.
name|Pct90
block|,
name|A
operator|.
name|Pct99
operator|*
name|B
operator|.
name|Pct99
block|,
name|A
operator|.
name|Max
operator|*
name|B
operator|.
name|Max
block|,
name|A
operator|.
name|Sum
operator|*
name|B
operator|.
name|Sum
block|}
return|;
block|}
comment|/// Hadamard Division of TimeStats
specifier|inline
name|GraphRenderer
operator|::
name|TimeStat
name|operator
operator|/
operator|(
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|A
operator|,
specifier|const
name|GraphRenderer
operator|::
name|TimeStat
operator|&
name|B
operator|)
block|{
return|return
block|{
name|A
operator|.
name|Count
operator|/
name|B
operator|.
name|Count
block|,
name|A
operator|.
name|Min
operator|/
name|B
operator|.
name|Min
block|,
name|A
operator|.
name|Median
operator|/
name|B
operator|.
name|Median
block|,
name|A
operator|.
name|Pct90
operator|/
name|B
operator|.
name|Pct90
block|,
name|A
operator|.
name|Pct99
operator|/
name|B
operator|.
name|Pct99
block|,
name|A
operator|.
name|Max
operator|/
name|B
operator|.
name|Max
block|,
name|A
operator|.
name|Sum
operator|/
name|B
operator|.
name|Sum
block|}
return|;
block|}
block|}
comment|// namespace xray
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// XRAY_GRAPH_H
end_comment

end_unit

