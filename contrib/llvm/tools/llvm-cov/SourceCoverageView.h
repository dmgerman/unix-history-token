begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SourceCoverageView.h - Code coverage view for source code ----------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class implements rendering for code coverage of source code.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_COV_SOURCECOVERAGEVIEW_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_COV_SOURCECOVERAGEVIEW_H
end_define

begin_include
include|#
directive|include
file|"CoverageViewOptions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ProfileData/CoverageMapping.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|SourceCoverageView
decl_stmt|;
comment|/// \brief A view that represents a macro or include expansion
struct|struct
name|ExpansionView
block|{
name|coverage
operator|::
name|CounterMappingRegion
name|Region
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
expr_stmt|;
name|ExpansionView
argument_list|(
specifier|const
name|coverage
operator|::
name|CounterMappingRegion
operator|&
name|Region
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
argument_list|)
operator|:
name|Region
argument_list|(
name|Region
argument_list|)
operator|,
name|View
argument_list|(
argument|std::move(View)
argument_list|)
block|{}
name|ExpansionView
argument_list|(
name|ExpansionView
operator|&&
name|RHS
argument_list|)
operator|:
name|Region
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|Region
argument_list|)
argument_list|)
operator|,
name|View
argument_list|(
argument|std::move(RHS.View)
argument_list|)
block|{}
name|ExpansionView
operator|&
name|operator
operator|=
operator|(
name|ExpansionView
operator|&&
name|RHS
operator|)
block|{
name|Region
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|Region
argument_list|)
block|;
name|View
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|View
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|unsigned
name|getLine
argument_list|()
specifier|const
block|{
return|return
name|Region
operator|.
name|LineStart
return|;
block|}
name|unsigned
name|getStartCol
argument_list|()
specifier|const
block|{
return|return
name|Region
operator|.
name|ColumnStart
return|;
block|}
name|unsigned
name|getEndCol
argument_list|()
specifier|const
block|{
return|return
name|Region
operator|.
name|ColumnEnd
return|;
block|}
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ExpansionView
operator|&
name|LHS
operator|,
specifier|const
name|ExpansionView
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|Region
operator|.
name|startLoc
argument_list|()
operator|<
name|RHS
operator|.
name|Region
operator|.
name|startLoc
argument_list|()
return|;
block|}
block|}
struct|;
comment|/// \brief A view that represents a function instantiation
struct|struct
name|InstantiationView
block|{
name|StringRef
name|FunctionName
decl_stmt|;
name|unsigned
name|Line
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
expr_stmt|;
name|InstantiationView
argument_list|(
argument|StringRef FunctionName
argument_list|,
argument|unsigned Line
argument_list|,
argument|std::unique_ptr<SourceCoverageView> View
argument_list|)
block|:
name|FunctionName
argument_list|(
name|FunctionName
argument_list|)
operator|,
name|Line
argument_list|(
name|Line
argument_list|)
operator|,
name|View
argument_list|(
argument|std::move(View)
argument_list|)
block|{}
name|InstantiationView
argument_list|(
name|InstantiationView
operator|&&
name|RHS
argument_list|)
operator|:
name|FunctionName
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|FunctionName
argument_list|)
argument_list|)
operator|,
name|Line
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|Line
argument_list|)
argument_list|)
operator|,
name|View
argument_list|(
argument|std::move(RHS.View)
argument_list|)
block|{}
name|InstantiationView
operator|&
name|operator
operator|=
operator|(
name|InstantiationView
operator|&&
name|RHS
operator|)
block|{
name|FunctionName
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|FunctionName
argument_list|)
block|;
name|Line
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|Line
argument_list|)
block|;
name|View
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|View
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|InstantiationView
operator|&
name|LHS
operator|,
specifier|const
name|InstantiationView
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|Line
operator|<
name|RHS
operator|.
name|Line
return|;
block|}
block|}
struct|;
comment|/// \brief A code coverage view of a specific source file.
comment|/// It can have embedded coverage views.
name|class
name|SourceCoverageView
block|{
name|private
label|:
comment|/// \brief Coverage information for a single line.
struct|struct
name|LineCoverageInfo
block|{
name|uint64_t
name|ExecutionCount
decl_stmt|;
name|unsigned
name|RegionCount
decl_stmt|;
name|bool
name|Mapped
decl_stmt|;
name|LineCoverageInfo
argument_list|()
operator|:
name|ExecutionCount
argument_list|(
literal|0
argument_list|)
operator|,
name|RegionCount
argument_list|(
literal|0
argument_list|)
operator|,
name|Mapped
argument_list|(
argument|false
argument_list|)
block|{}
name|bool
name|isMapped
argument_list|()
specifier|const
block|{
return|return
name|Mapped
return|;
block|}
name|bool
name|hasMultipleRegions
argument_list|()
specifier|const
block|{
return|return
name|RegionCount
operator|>
literal|1
return|;
block|}
name|void
name|addRegionStartCount
parameter_list|(
name|uint64_t
name|Count
parameter_list|)
block|{
name|Mapped
operator|=
name|true
expr_stmt|;
name|ExecutionCount
operator|=
name|Count
expr_stmt|;
operator|++
name|RegionCount
expr_stmt|;
block|}
name|void
name|addRegionCount
parameter_list|(
name|uint64_t
name|Count
parameter_list|)
block|{
name|Mapped
operator|=
name|true
expr_stmt|;
if|if
condition|(
operator|!
name|RegionCount
condition|)
name|ExecutionCount
operator|=
name|Count
expr_stmt|;
block|}
block|}
struct|;
specifier|const
name|MemoryBuffer
modifier|&
name|File
decl_stmt|;
specifier|const
name|CoverageViewOptions
modifier|&
name|Options
decl_stmt|;
name|coverage
operator|::
name|CoverageData
name|CoverageInfo
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|ExpansionView
operator|>
name|ExpansionSubViews
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|InstantiationView
operator|>
name|InstantiationSubViews
expr_stmt|;
comment|/// \brief Render a source line with highlighting.
name|void
name|renderLine
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|StringRef
name|Line
argument_list|,
name|int64_t
name|LineNumber
argument_list|,
specifier|const
name|coverage
operator|::
name|CoverageSegment
operator|*
name|WrappedSegment
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|coverage
operator|::
name|CoverageSegment
operator|*
operator|>
name|Segments
argument_list|,
name|unsigned
name|ExpansionCol
argument_list|)
decl_stmt|;
name|void
name|renderIndent
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|unsigned
name|Level
parameter_list|)
function_decl|;
name|void
name|renderViewDivider
parameter_list|(
name|unsigned
name|Offset
parameter_list|,
name|unsigned
name|Length
parameter_list|,
name|raw_ostream
modifier|&
name|OS
parameter_list|)
function_decl|;
comment|/// \brief Render the line's execution count column.
name|void
name|renderLineCoverageColumn
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
specifier|const
name|LineCoverageInfo
modifier|&
name|Line
parameter_list|)
function_decl|;
comment|/// \brief Render the line number column.
name|void
name|renderLineNumberColumn
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|unsigned
name|LineNo
parameter_list|)
function_decl|;
comment|/// \brief Render all the region's execution counts on a line.
name|void
name|renderRegionMarkers
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|coverage
operator|::
name|CoverageSegment
operator|*
operator|>
name|Segments
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|LineCoverageColumnWidth
init|=
literal|7
decl_stmt|;
specifier|static
specifier|const
name|unsigned
name|LineNumberColumnWidth
init|=
literal|5
decl_stmt|;
name|public
label|:
name|SourceCoverageView
argument_list|(
specifier|const
name|MemoryBuffer
operator|&
name|File
argument_list|,
specifier|const
name|CoverageViewOptions
operator|&
name|Options
argument_list|,
name|coverage
operator|::
name|CoverageData
operator|&&
name|CoverageInfo
argument_list|)
operator|:
name|File
argument_list|(
name|File
argument_list|)
operator|,
name|Options
argument_list|(
name|Options
argument_list|)
operator|,
name|CoverageInfo
argument_list|(
argument|std::move(CoverageInfo)
argument_list|)
block|{}
specifier|const
name|CoverageViewOptions
operator|&
name|getOptions
argument_list|()
specifier|const
block|{
return|return
name|Options
return|;
block|}
comment|/// \brief Add an expansion subview to this view.
name|void
name|addExpansion
argument_list|(
specifier|const
name|coverage
operator|::
name|CounterMappingRegion
operator|&
name|Region
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
argument_list|)
block|{
name|ExpansionSubViews
operator|.
name|emplace_back
argument_list|(
name|Region
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|View
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// \brief Add a function instantiation subview to this view.
name|void
name|addInstantiation
argument_list|(
name|StringRef
name|FunctionName
argument_list|,
name|unsigned
name|Line
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
argument_list|)
block|{
name|InstantiationSubViews
operator|.
name|emplace_back
argument_list|(
name|FunctionName
argument_list|,
name|Line
argument_list|,
name|std
operator|::
name|move
argument_list|(
name|View
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/// \brief Print the code coverage information for a specific
comment|/// portion of a source file to the output stream.
name|void
name|render
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|bool
name|WholeFile
parameter_list|,
name|unsigned
name|IndentLevel
init|=
literal|0
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_COV_SOURCECOVERAGEVIEW_H
end_comment

end_unit

