begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SourceCoverageView.h - Code coverage view for source code ----------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file This class implements rendering for code coverage of source code.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_COV_SOURCECOVERAGEVIEW_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_COV_SOURCECOVERAGEVIEW_H
end_define

begin_include
include|#
directive|include
file|"CoverageViewOptions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ProfileData/Coverage/CoverageMapping.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MemoryBuffer.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|SourceCoverageView
decl_stmt|;
comment|/// \brief A view that represents a macro or include expansion.
struct|struct
name|ExpansionView
block|{
name|coverage
operator|::
name|CounterMappingRegion
name|Region
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
expr_stmt|;
name|ExpansionView
argument_list|(
specifier|const
name|coverage
operator|::
name|CounterMappingRegion
operator|&
name|Region
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
argument_list|)
operator|:
name|Region
argument_list|(
name|Region
argument_list|)
operator|,
name|View
argument_list|(
argument|std::move(View)
argument_list|)
block|{}
name|ExpansionView
argument_list|(
name|ExpansionView
operator|&&
name|RHS
argument_list|)
operator|:
name|Region
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|Region
argument_list|)
argument_list|)
operator|,
name|View
argument_list|(
argument|std::move(RHS.View)
argument_list|)
block|{}
name|ExpansionView
operator|&
name|operator
operator|=
operator|(
name|ExpansionView
operator|&&
name|RHS
operator|)
block|{
name|Region
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|Region
argument_list|)
block|;
name|View
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|View
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|unsigned
name|getLine
argument_list|()
specifier|const
block|{
return|return
name|Region
operator|.
name|LineStart
return|;
block|}
name|unsigned
name|getStartCol
argument_list|()
specifier|const
block|{
return|return
name|Region
operator|.
name|ColumnStart
return|;
block|}
name|unsigned
name|getEndCol
argument_list|()
specifier|const
block|{
return|return
name|Region
operator|.
name|ColumnEnd
return|;
block|}
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ExpansionView
operator|&
name|LHS
operator|,
specifier|const
name|ExpansionView
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|Region
operator|.
name|startLoc
argument_list|()
operator|<
name|RHS
operator|.
name|Region
operator|.
name|startLoc
argument_list|()
return|;
block|}
block|}
struct|;
comment|/// \brief A view that represents a function instantiation.
struct|struct
name|InstantiationView
block|{
name|StringRef
name|FunctionName
decl_stmt|;
name|unsigned
name|Line
decl_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
expr_stmt|;
name|InstantiationView
argument_list|(
argument|StringRef FunctionName
argument_list|,
argument|unsigned Line
argument_list|,
argument|std::unique_ptr<SourceCoverageView> View
argument_list|)
block|:
name|FunctionName
argument_list|(
name|FunctionName
argument_list|)
operator|,
name|Line
argument_list|(
name|Line
argument_list|)
operator|,
name|View
argument_list|(
argument|std::move(View)
argument_list|)
block|{}
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|InstantiationView
operator|&
name|LHS
operator|,
specifier|const
name|InstantiationView
operator|&
name|RHS
operator|)
block|{
return|return
name|LHS
operator|.
name|Line
operator|<
name|RHS
operator|.
name|Line
return|;
block|}
block|}
struct|;
comment|/// \brief Coverage statistics for a single line.
struct|struct
name|LineCoverageStats
block|{
name|uint64_t
name|ExecutionCount
decl_stmt|;
name|unsigned
name|RegionCount
decl_stmt|;
name|bool
name|Mapped
decl_stmt|;
name|LineCoverageStats
argument_list|()
operator|:
name|ExecutionCount
argument_list|(
literal|0
argument_list|)
operator|,
name|RegionCount
argument_list|(
literal|0
argument_list|)
operator|,
name|Mapped
argument_list|(
argument|false
argument_list|)
block|{}
name|bool
name|isMapped
argument_list|()
specifier|const
block|{
return|return
name|Mapped
return|;
block|}
name|bool
name|hasMultipleRegions
argument_list|()
specifier|const
block|{
return|return
name|RegionCount
operator|>
literal|1
return|;
block|}
name|void
name|addRegionStartCount
parameter_list|(
name|uint64_t
name|Count
parameter_list|)
block|{
comment|// The max of all region starts is the most interesting value.
name|addRegionCount
argument_list|(
name|RegionCount
condition|?
name|std
operator|::
name|max
argument_list|(
name|ExecutionCount
argument_list|,
name|Count
argument_list|)
else|:
name|Count
argument_list|)
expr_stmt|;
operator|++
name|RegionCount
expr_stmt|;
block|}
name|void
name|addRegionCount
parameter_list|(
name|uint64_t
name|Count
parameter_list|)
block|{
name|Mapped
operator|=
name|true
expr_stmt|;
name|ExecutionCount
operator|=
name|Count
expr_stmt|;
block|}
block|}
struct|;
comment|/// \brief A file manager that handles format-aware file creation.
name|class
name|CoveragePrinter
block|{
name|public
label|:
struct|struct
name|StreamDestructor
block|{
name|void
name|operator
argument_list|()
operator|(
name|raw_ostream
operator|*
name|OS
operator|)
specifier|const
expr_stmt|;
block|}
struct|;
name|using
name|OwnedStream
init|=
name|std
operator|::
name|unique_ptr
operator|<
name|raw_ostream
decl_stmt|,
name|StreamDestructor
decl|>
decl_stmt|;
name|protected
label|:
specifier|const
name|CoverageViewOptions
modifier|&
name|Opts
decl_stmt|;
name|CoveragePrinter
argument_list|(
specifier|const
name|CoverageViewOptions
operator|&
name|Opts
argument_list|)
operator|:
name|Opts
argument_list|(
argument|Opts
argument_list|)
block|{}
comment|/// \brief Return `OutputDir/ToplevelDir/Path.Extension`. If \p InToplevel is
comment|/// false, skip the ToplevelDir component. If \p Relative is false, skip the
comment|/// OutputDir component.
name|std
operator|::
name|string
name|getOutputPath
argument_list|(
argument|StringRef Path
argument_list|,
argument|StringRef Extension
argument_list|,
argument|bool InToplevel
argument_list|,
argument|bool Relative = true
argument_list|)
specifier|const
expr_stmt|;
comment|/// \brief If directory output is enabled, create a file in that directory
comment|/// at the path given by getOutputPath(). Otherwise, return stdout.
name|Expected
operator|<
name|OwnedStream
operator|>
name|createOutputStream
argument_list|(
argument|StringRef Path
argument_list|,
argument|StringRef Extension
argument_list|,
argument|bool InToplevel
argument_list|)
specifier|const
expr_stmt|;
comment|/// \brief Return the sub-directory name for file coverage reports.
specifier|static
name|StringRef
name|getCoverageDir
parameter_list|()
block|{
return|return
literal|"coverage"
return|;
block|}
name|public
label|:
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|CoveragePrinter
operator|>
name|create
argument_list|(
specifier|const
name|CoverageViewOptions
operator|&
name|Opts
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|CoveragePrinter
argument_list|()
block|{}
comment|/// @name File Creation Interface
comment|/// @{
comment|/// \brief Create a file to print a coverage view into.
name|virtual
name|Expected
operator|<
name|OwnedStream
operator|>
name|createViewFile
argument_list|(
argument|StringRef Path
argument_list|,
argument|bool InToplevel
argument_list|)
operator|=
literal|0
expr_stmt|;
comment|/// \brief Close a file which has been used to print a coverage view.
name|virtual
name|void
name|closeViewFile
parameter_list|(
name|OwnedStream
name|OS
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Create an index which lists reports for the given source files.
name|virtual
name|Error
name|createIndexFile
argument_list|(
name|ArrayRef
operator|<
name|std
operator|::
name|string
operator|>
name|SourceFiles
argument_list|,
specifier|const
name|coverage
operator|::
name|CoverageMapping
operator|&
name|Coverage
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// @}
block|}
empty_stmt|;
comment|/// \brief A code coverage view of a source file or function.
comment|///
comment|/// A source coverage view and its nested sub-views form a file-oriented
comment|/// representation of code coverage data. This view can be printed out by a
comment|/// renderer which implements the Rendering Interface.
name|class
name|SourceCoverageView
block|{
comment|/// A function or file name.
name|StringRef
name|SourceName
decl_stmt|;
comment|/// A memory buffer backing the source on display.
specifier|const
name|MemoryBuffer
modifier|&
name|File
decl_stmt|;
comment|/// Various options to guide the coverage renderer.
specifier|const
name|CoverageViewOptions
modifier|&
name|Options
decl_stmt|;
comment|/// Complete coverage information about the source on display.
name|coverage
operator|::
name|CoverageData
name|CoverageInfo
expr_stmt|;
comment|/// A container for all expansions (e.g macros) in the source on display.
name|std
operator|::
name|vector
operator|<
name|ExpansionView
operator|>
name|ExpansionSubViews
expr_stmt|;
comment|/// A container for all instantiations (e.g template functions) in the source
comment|/// on display.
name|std
operator|::
name|vector
operator|<
name|InstantiationView
operator|>
name|InstantiationSubViews
expr_stmt|;
comment|/// Get the first uncovered line number for the source file.
name|unsigned
name|getFirstUncoveredLineNo
parameter_list|()
function_decl|;
name|protected
label|:
struct|struct
name|LineRef
block|{
name|StringRef
name|Line
decl_stmt|;
name|int64_t
name|LineNo
decl_stmt|;
name|LineRef
argument_list|(
argument|StringRef Line
argument_list|,
argument|int64_t LineNo
argument_list|)
block|:
name|Line
argument_list|(
name|Line
argument_list|)
operator|,
name|LineNo
argument_list|(
argument|LineNo
argument_list|)
block|{}
block|}
struct|;
name|using
name|CoverageSegmentArray
init|=
name|ArrayRef
operator|<
specifier|const
name|coverage
operator|::
name|CoverageSegment
operator|*
operator|>
decl_stmt|;
comment|/// @name Rendering Interface
comment|/// @{
comment|/// \brief Render a header for the view.
name|virtual
name|void
name|renderViewHeader
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render a footer for the view.
name|virtual
name|void
name|renderViewFooter
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render the source name for the view.
name|virtual
name|void
name|renderSourceName
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|bool
name|WholeFile
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render the line prefix at the given \p ViewDepth.
name|virtual
name|void
name|renderLinePrefix
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|unsigned
name|ViewDepth
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render the line suffix at the given \p ViewDepth.
name|virtual
name|void
name|renderLineSuffix
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|unsigned
name|ViewDepth
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render a view divider at the given \p ViewDepth.
name|virtual
name|void
name|renderViewDivider
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|unsigned
name|ViewDepth
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render a source line with highlighting.
name|virtual
name|void
name|renderLine
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|LineRef
name|L
argument_list|,
specifier|const
name|coverage
operator|::
name|CoverageSegment
operator|*
name|WrappedSegment
argument_list|,
name|CoverageSegmentArray
name|Segments
argument_list|,
name|unsigned
name|ExpansionCol
argument_list|,
name|unsigned
name|ViewDepth
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// \brief Render the line's execution count column.
name|virtual
name|void
name|renderLineCoverageColumn
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
specifier|const
name|LineCoverageStats
modifier|&
name|Line
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render the line number column.
name|virtual
name|void
name|renderLineNumberColumn
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|unsigned
name|LineNo
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render all the region's execution counts on a line.
name|virtual
name|void
name|renderRegionMarkers
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|CoverageSegmentArray
name|Segments
parameter_list|,
name|unsigned
name|ViewDepth
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render the site of an expansion.
name|virtual
name|void
name|renderExpansionSite
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
name|LineRef
name|L
argument_list|,
specifier|const
name|coverage
operator|::
name|CoverageSegment
operator|*
name|WrappedSegment
argument_list|,
name|CoverageSegmentArray
name|Segments
argument_list|,
name|unsigned
name|ExpansionCol
argument_list|,
name|unsigned
name|ViewDepth
argument_list|)
init|=
literal|0
decl_stmt|;
comment|/// \brief Render an expansion view and any nested views.
name|virtual
name|void
name|renderExpansionView
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|ExpansionView
modifier|&
name|ESV
parameter_list|,
name|unsigned
name|ViewDepth
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render an instantiation view and any nested views.
name|virtual
name|void
name|renderInstantiationView
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|InstantiationView
modifier|&
name|ISV
parameter_list|,
name|unsigned
name|ViewDepth
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render \p Title, a project title if one is available, and the
comment|/// created time.
name|virtual
name|void
name|renderTitle
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|StringRef
name|CellText
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// \brief Render the table header for a given source file.
name|virtual
name|void
name|renderTableHeader
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|unsigned
name|FirstUncoveredLineNo
parameter_list|,
name|unsigned
name|IndentLevel
parameter_list|)
init|=
literal|0
function_decl|;
comment|/// @}
comment|/// \brief Format a count using engineering notation with 3 significant
comment|/// digits.
specifier|static
name|std
operator|::
name|string
name|formatCount
argument_list|(
argument|uint64_t N
argument_list|)
expr_stmt|;
comment|/// \brief Check if region marker output is expected for a line.
name|bool
name|shouldRenderRegionMarkers
argument_list|(
name|bool
name|LineHasMultipleRegions
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Check if there are any sub-views attached to this view.
name|bool
name|hasSubViews
argument_list|()
specifier|const
decl_stmt|;
name|SourceCoverageView
argument_list|(
argument|StringRef SourceName
argument_list|,
argument|const MemoryBuffer&File
argument_list|,
argument|const CoverageViewOptions&Options
argument_list|,
argument|coverage::CoverageData&&CoverageInfo
argument_list|)
block|:
name|SourceName
argument_list|(
name|SourceName
argument_list|)
operator|,
name|File
argument_list|(
name|File
argument_list|)
operator|,
name|Options
argument_list|(
name|Options
argument_list|)
operator|,
name|CoverageInfo
argument_list|(
argument|std::move(CoverageInfo)
argument_list|)
block|{}
name|public
operator|:
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|create
argument_list|(
argument|StringRef SourceName
argument_list|,
argument|const MemoryBuffer&File
argument_list|,
argument|const CoverageViewOptions&Options
argument_list|,
argument|coverage::CoverageData&&CoverageInfo
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|SourceCoverageView
argument_list|()
block|{}
comment|/// \brief Return the source name formatted for the host OS.
name|std
operator|::
name|string
name|getSourceName
argument_list|()
specifier|const
expr_stmt|;
specifier|const
name|CoverageViewOptions
operator|&
name|getOptions
argument_list|()
specifier|const
block|{
return|return
name|Options
return|;
block|}
comment|/// \brief Add an expansion subview to this view.
name|void
name|addExpansion
argument_list|(
specifier|const
name|coverage
operator|::
name|CounterMappingRegion
operator|&
name|Region
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
argument_list|)
decl_stmt|;
comment|/// \brief Add a function instantiation subview to this view.
name|void
name|addInstantiation
argument_list|(
name|StringRef
name|FunctionName
argument_list|,
name|unsigned
name|Line
argument_list|,
name|std
operator|::
name|unique_ptr
operator|<
name|SourceCoverageView
operator|>
name|View
argument_list|)
decl_stmt|;
comment|/// \brief Print the code coverage information for a specific portion of a
comment|/// source file to the output stream.
name|void
name|print
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|,
name|bool
name|WholeFile
parameter_list|,
name|bool
name|ShowSourceName
parameter_list|,
name|unsigned
name|ViewDepth
init|=
literal|0
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_COV_SOURCECOVERAGEVIEW_H
end_comment

end_unit

