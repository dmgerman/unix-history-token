begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- FormatUtil.h ------------------------------------------- *- C++ --*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_TOOLS_LLVMPDBUTIL_FORMAT_UTIL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_TOOLS_LLVMPDBUTIL_FORMAT_UTIL_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Endian.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormatAdapters.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormatVariadic.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<type_traits>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|pdb
block|{
name|std
operator|::
name|string
name|truncateStringBack
argument_list|(
argument|StringRef S
argument_list|,
argument|uint32_t MaxLen
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|truncateStringMiddle
argument_list|(
argument|StringRef S
argument_list|,
argument|uint32_t MaxLen
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|truncateStringFront
argument_list|(
argument|StringRef S
argument_list|,
argument|uint32_t MaxLen
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|truncateQuotedNameFront
argument_list|(
argument|StringRef Label
argument_list|,
argument|StringRef Name
argument_list|,
argument|uint32_t MaxLen
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|truncateQuotedNameBack
argument_list|(
argument|StringRef Label
argument_list|,
argument|StringRef Name
argument_list|,
argument|uint32_t MaxLen
argument_list|)
expr_stmt|;
define|#
directive|define
name|PUSH_MASKED_FLAG
parameter_list|(
name|Enum
parameter_list|,
name|Mask
parameter_list|,
name|TheOpt
parameter_list|,
name|Value
parameter_list|,
name|Text
parameter_list|)
define|\
value|if (Enum::TheOpt == (Value& Mask))                                          \     Opts.push_back(Text);
define|#
directive|define
name|PUSH_FLAG
parameter_list|(
name|Enum
parameter_list|,
name|TheOpt
parameter_list|,
name|Value
parameter_list|,
name|Text
parameter_list|)
define|\
value|PUSH_MASKED_FLAG(Enum, Enum::TheOpt, TheOpt, Value, Text)
define|#
directive|define
name|RETURN_CASE
parameter_list|(
name|Enum
parameter_list|,
name|X
parameter_list|,
name|Ret
parameter_list|)
define|\
value|case Enum::X:                                                                \     return Ret;
name|template
operator|<
name|typename
name|T
operator|>
name|std
operator|::
name|string
name|formatUnknownEnum
argument_list|(
argument|T Value
argument_list|)
block|{
return|return
name|formatv
argument_list|(
literal|"unknown ({0})"
argument_list|,
argument|static_cast<typename std::underlying_type<T>::type>(Value)
argument_list|)
operator|.
name|str
argument_list|()
return|;
block|}
name|std
operator|::
name|string
name|formatSegmentOffset
argument_list|(
argument|uint16_t Segment
argument_list|,
argument|uint32_t Offset
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|typesetItemList
argument_list|(
argument|ArrayRef<std::string> Opts
argument_list|,
argument|uint32_t IndentLevel
argument_list|,
argument|uint32_t GroupSize
argument_list|,
argument|StringRef Sep
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|typesetStringList
argument_list|(
argument|uint32_t IndentLevel
argument_list|,
argument|ArrayRef<StringRef> Strings
argument_list|)
expr_stmt|;
comment|/// Returns the number of digits in the given integer.
specifier|inline
name|int
name|NumDigits
parameter_list|(
name|uint64_t
name|N
parameter_list|)
block|{
if|if
condition|(
name|N
operator|<
literal|10ULL
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|N
operator|<
literal|100ULL
condition|)
return|return
literal|2
return|;
if|if
condition|(
name|N
operator|<
literal|1000ULL
condition|)
return|return
literal|3
return|;
if|if
condition|(
name|N
operator|<
literal|10000ULL
condition|)
return|return
literal|4
return|;
if|if
condition|(
name|N
operator|<
literal|100000ULL
condition|)
return|return
literal|5
return|;
if|if
condition|(
name|N
operator|<
literal|1000000ULL
condition|)
return|return
literal|6
return|;
if|if
condition|(
name|N
operator|<
literal|10000000ULL
condition|)
return|return
literal|7
return|;
if|if
condition|(
name|N
operator|<
literal|100000000ULL
condition|)
return|return
literal|8
return|;
if|if
condition|(
name|N
operator|<
literal|1000000000ULL
condition|)
return|return
literal|9
return|;
if|if
condition|(
name|N
operator|<
literal|10000000000ULL
condition|)
return|return
literal|10
return|;
if|if
condition|(
name|N
operator|<
literal|100000000000ULL
condition|)
return|return
literal|11
return|;
if|if
condition|(
name|N
operator|<
literal|1000000000000ULL
condition|)
return|return
literal|12
return|;
if|if
condition|(
name|N
operator|<
literal|10000000000000ULL
condition|)
return|return
literal|13
return|;
if|if
condition|(
name|N
operator|<
literal|100000000000000ULL
condition|)
return|return
literal|14
return|;
if|if
condition|(
name|N
operator|<
literal|1000000000000000ULL
condition|)
return|return
literal|15
return|;
if|if
condition|(
name|N
operator|<
literal|10000000000000000ULL
condition|)
return|return
literal|16
return|;
if|if
condition|(
name|N
operator|<
literal|100000000000000000ULL
condition|)
return|return
literal|17
return|;
if|if
condition|(
name|N
operator|<
literal|1000000000000000000ULL
condition|)
return|return
literal|18
return|;
if|if
condition|(
name|N
operator|<
literal|10000000000000000000ULL
condition|)
return|return
literal|19
return|;
return|return
literal|20
return|;
block|}
name|namespace
name|detail
block|{
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|EndianAdapter
name|final
operator|:
name|public
name|FormatAdapter
operator|<
name|support
operator|::
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|T
operator|,
name|support
operator|::
name|little
operator|,
name|support
operator|::
name|unaligned
operator|>>
block|{
name|using
name|EndianType
operator|=
name|support
operator|::
name|detail
operator|::
name|packed_endian_specific_integral
operator|<
name|T
block|,
name|support
operator|::
name|little
block|,
name|support
operator|::
name|unaligned
operator|>
block|;
name|explicit
name|EndianAdapter
argument_list|(
name|EndianType
operator|&&
name|Item
argument_list|)
operator|:
name|FormatAdapter
operator|<
name|EndianType
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|Item
argument_list|)
operator|)
block|{}
name|void
name|format
argument_list|(
argument|llvm::raw_ostream&Stream
argument_list|,
argument|StringRef Style
argument_list|)
block|{
name|format_provider
operator|<
name|T
operator|>
operator|::
name|format
argument_list|(
name|static_cast
operator|<
name|T
operator|>
operator|(
name|this
operator|->
name|Item
operator|)
argument_list|,
name|Stream
argument_list|,
name|Style
argument_list|)
block|;   }
block|}
expr_stmt|;
block|}
comment|// namespace detail
name|template
operator|<
name|typename
name|T
operator|>
name|detail
operator|::
name|EndianAdapter
operator|<
name|T
operator|>
name|fmtle
argument_list|(
argument|support::detail::packed_endian_specific_integral<T
argument_list|,
argument|support::little
argument_list|,
argument|support::unaligned>           Value
argument_list|)
block|{
return|return
name|detail
operator|::
name|EndianAdapter
operator|<
name|T
operator|>
operator|(
name|std
operator|::
name|move
argument_list|(
name|Value
argument_list|)
operator|)
return|;
block|}
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

