begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- LLLexer.h - Lexer for LLVM Assembly Files ----------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class represents the Lexer for .ll files.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LIB_ASMPARSER_LLLEXER_H
end_ifndef

begin_define
define|#
directive|define
name|LIB_ASMPARSER_LLLEXER_H
end_define

begin_include
include|#
directive|include
file|"LLToken.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/APFloat.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/SourceMgr.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MemoryBuffer
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|class
name|SMDiagnostic
decl_stmt|;
name|class
name|LLVMContext
decl_stmt|;
name|class
name|LLLexer
block|{
specifier|const
name|char
modifier|*
name|CurPtr
decl_stmt|;
name|MemoryBuffer
modifier|*
name|CurBuf
decl_stmt|;
name|SMDiagnostic
modifier|&
name|ErrorInfo
decl_stmt|;
name|SourceMgr
modifier|&
name|SM
decl_stmt|;
name|LLVMContext
modifier|&
name|Context
decl_stmt|;
comment|// Information about the current token.
specifier|const
name|char
modifier|*
name|TokStart
decl_stmt|;
name|lltok
operator|::
name|Kind
name|CurKind
expr_stmt|;
name|std
operator|::
name|string
name|StrVal
expr_stmt|;
name|unsigned
name|UIntVal
decl_stmt|;
name|Type
modifier|*
name|TyVal
decl_stmt|;
name|APFloat
name|APFloatVal
decl_stmt|;
name|APSInt
name|APSIntVal
decl_stmt|;
name|std
operator|::
name|string
name|TheError
expr_stmt|;
name|public
label|:
name|explicit
name|LLLexer
parameter_list|(
name|MemoryBuffer
modifier|*
name|StartBuf
parameter_list|,
name|SourceMgr
modifier|&
name|SM
parameter_list|,
name|SMDiagnostic
modifier|&
parameter_list|,
name|LLVMContext
modifier|&
name|C
parameter_list|)
function_decl|;
operator|~
name|LLLexer
argument_list|()
block|{}
name|lltok
operator|::
name|Kind
name|Lex
argument_list|()
block|{
return|return
name|CurKind
operator|=
name|LexToken
argument_list|()
return|;
block|}
typedef|typedef
name|SMLoc
name|LocTy
typedef|;
name|LocTy
name|getLoc
argument_list|()
specifier|const
block|{
return|return
name|SMLoc
operator|::
name|getFromPointer
argument_list|(
name|TokStart
argument_list|)
return|;
block|}
name|lltok
operator|::
name|Kind
name|getKind
argument_list|()
specifier|const
block|{
return|return
name|CurKind
return|;
block|}
specifier|const
name|std
operator|::
name|string
operator|&
name|getStrVal
argument_list|()
specifier|const
block|{
return|return
name|StrVal
return|;
block|}
name|Type
operator|*
name|getTyVal
argument_list|()
specifier|const
block|{
return|return
name|TyVal
return|;
block|}
name|unsigned
name|getUIntVal
argument_list|()
specifier|const
block|{
return|return
name|UIntVal
return|;
block|}
specifier|const
name|APSInt
operator|&
name|getAPSIntVal
argument_list|()
specifier|const
block|{
return|return
name|APSIntVal
return|;
block|}
specifier|const
name|APFloat
operator|&
name|getAPFloatVal
argument_list|()
specifier|const
block|{
return|return
name|APFloatVal
return|;
block|}
name|bool
name|Error
argument_list|(
name|LocTy
name|L
argument_list|,
specifier|const
name|Twine
operator|&
name|Msg
argument_list|)
decl|const
decl_stmt|;
name|bool
name|Error
argument_list|(
specifier|const
name|Twine
operator|&
name|Msg
argument_list|)
decl|const
block|{
return|return
name|Error
argument_list|(
name|getLoc
argument_list|()
argument_list|,
name|Msg
argument_list|)
return|;
block|}
name|std
operator|::
name|string
name|getFilename
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|lltok
operator|::
name|Kind
name|LexToken
argument_list|()
expr_stmt|;
name|int
name|getNextChar
parameter_list|()
function_decl|;
name|void
name|SkipLineComment
parameter_list|()
function_decl|;
name|lltok
operator|::
name|Kind
name|ReadString
argument_list|(
argument|lltok::Kind kind
argument_list|)
expr_stmt|;
name|bool
name|ReadVarName
parameter_list|()
function_decl|;
name|lltok
operator|::
name|Kind
name|LexIdentifier
argument_list|()
expr_stmt|;
name|lltok
operator|::
name|Kind
name|LexDigitOrNegative
argument_list|()
expr_stmt|;
name|lltok
operator|::
name|Kind
name|LexPositive
argument_list|()
expr_stmt|;
name|lltok
operator|::
name|Kind
name|LexAt
argument_list|()
expr_stmt|;
name|lltok
operator|::
name|Kind
name|LexExclaim
argument_list|()
expr_stmt|;
name|lltok
operator|::
name|Kind
name|LexPercent
argument_list|()
expr_stmt|;
name|lltok
operator|::
name|Kind
name|LexQuote
argument_list|()
expr_stmt|;
name|lltok
operator|::
name|Kind
name|Lex0x
argument_list|()
expr_stmt|;
name|uint64_t
name|atoull
parameter_list|(
specifier|const
name|char
modifier|*
name|Buffer
parameter_list|,
specifier|const
name|char
modifier|*
name|End
parameter_list|)
function_decl|;
name|uint64_t
name|HexIntToVal
parameter_list|(
specifier|const
name|char
modifier|*
name|Buffer
parameter_list|,
specifier|const
name|char
modifier|*
name|End
parameter_list|)
function_decl|;
name|void
name|HexToIntPair
parameter_list|(
specifier|const
name|char
modifier|*
name|Buffer
parameter_list|,
specifier|const
name|char
modifier|*
name|End
parameter_list|,
name|uint64_t
name|Pair
index|[
literal|2
index|]
parameter_list|)
function_decl|;
name|void
name|FP80HexToIntPair
parameter_list|(
specifier|const
name|char
modifier|*
name|Buff
parameter_list|,
specifier|const
name|char
modifier|*
name|End
parameter_list|,
name|uint64_t
name|Pair
index|[
literal|2
index|]
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

