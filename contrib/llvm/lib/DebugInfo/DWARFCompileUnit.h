begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFCompileUnit.h --------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARFCOMPILEUNIT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARFCOMPILEUNIT_H
end_define

begin_include
include|#
directive|include
file|"DWARFDebugAbbrev.h"
end_include

begin_include
include|#
directive|include
file|"DWARFDebugInfoEntry.h"
end_include

begin_include
include|#
directive|include
file|"DWARFDebugRangeList.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DWARFContext
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|DWARFCompileUnit
block|{
name|DWARFContext
modifier|&
name|Context
decl_stmt|;
name|uint32_t
name|Offset
decl_stmt|;
name|uint32_t
name|Length
decl_stmt|;
name|uint16_t
name|Version
decl_stmt|;
specifier|const
name|DWARFAbbreviationDeclarationSet
modifier|*
name|Abbrevs
decl_stmt|;
name|uint8_t
name|AddrSize
decl_stmt|;
name|uint64_t
name|BaseAddr
decl_stmt|;
comment|// The compile unit debug information entry item.
name|std
operator|::
name|vector
operator|<
name|DWARFDebugInfoEntryMinimal
operator|>
name|DieArray
expr_stmt|;
name|public
label|:
name|DWARFCompileUnit
argument_list|(
name|DWARFContext
operator|&
name|context
argument_list|)
operator|:
name|Context
argument_list|(
argument|context
argument_list|)
block|{
name|clear
argument_list|()
block|;   }
name|DWARFContext
operator|&
name|getContext
argument_list|()
specifier|const
block|{
return|return
name|Context
return|;
block|}
name|DataExtractor
name|getDebugInfoExtractor
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|extract
parameter_list|(
name|DataExtractor
name|debug_info
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|)
function_decl|;
name|uint32_t
name|extract
parameter_list|(
name|uint32_t
name|offset
parameter_list|,
name|DataExtractor
name|debug_info_data
parameter_list|,
specifier|const
name|DWARFAbbreviationDeclarationSet
modifier|*
name|abbrevs
parameter_list|)
function_decl|;
comment|/// extractDIEsIfNeeded - Parses a compile unit and indexes its DIEs if it
comment|/// hasn't already been done. Returns the number of DIEs parsed at this call.
name|size_t
name|extractDIEsIfNeeded
parameter_list|(
name|bool
name|cu_die_only
parameter_list|)
function_decl|;
comment|/// extractRangeList - extracts the range list referenced by this compile
comment|/// unit from .debug_ranges section. Returns true on success.
comment|/// Requires that compile unit is already extracted.
name|bool
name|extractRangeList
argument_list|(
name|uint32_t
name|RangeListOffset
argument_list|,
name|DWARFDebugRangeList
operator|&
name|RangeList
argument_list|)
decl|const
decl_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|dump
parameter_list|(
name|raw_ostream
modifier|&
name|OS
parameter_list|)
function_decl|;
name|uint32_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
comment|/// Size in bytes of the compile unit header.
name|uint32_t
name|getSize
argument_list|()
specifier|const
block|{
return|return
literal|11
return|;
block|}
name|bool
name|containsDIEOffset
argument_list|(
name|uint32_t
name|die_offset
argument_list|)
decl|const
block|{
return|return
name|die_offset
operator|>=
name|getFirstDIEOffset
argument_list|()
operator|&&
name|die_offset
operator|<
name|getNextCompileUnitOffset
argument_list|()
return|;
block|}
name|uint32_t
name|getFirstDIEOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
operator|+
name|getSize
argument_list|()
return|;
block|}
name|uint32_t
name|getNextCompileUnitOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
operator|+
name|Length
operator|+
literal|4
return|;
block|}
comment|/// Size in bytes of the .debug_info data associated with this compile unit.
name|size_t
name|getDebugInfoSize
argument_list|()
specifier|const
block|{
return|return
name|Length
operator|+
literal|4
operator|-
name|getSize
argument_list|()
return|;
block|}
name|uint32_t
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|Length
return|;
block|}
name|uint16_t
name|getVersion
argument_list|()
specifier|const
block|{
return|return
name|Version
return|;
block|}
specifier|const
name|DWARFAbbreviationDeclarationSet
operator|*
name|getAbbreviations
argument_list|()
specifier|const
block|{
return|return
name|Abbrevs
return|;
block|}
name|uint8_t
name|getAddressByteSize
argument_list|()
specifier|const
block|{
return|return
name|AddrSize
return|;
block|}
name|uint64_t
name|getBaseAddress
argument_list|()
specifier|const
block|{
return|return
name|BaseAddr
return|;
block|}
name|void
name|setBaseAddress
parameter_list|(
name|uint64_t
name|base_addr
parameter_list|)
block|{
name|BaseAddr
operator|=
name|base_addr
expr_stmt|;
block|}
specifier|const
name|DWARFDebugInfoEntryMinimal
modifier|*
name|getCompileUnitDIE
parameter_list|(
name|bool
name|extract_cu_die_only
init|=
name|true
parameter_list|)
block|{
name|extractDIEsIfNeeded
argument_list|(
name|extract_cu_die_only
argument_list|)
expr_stmt|;
if|if
condition|(
name|DieArray
operator|.
name|empty
argument_list|()
condition|)
return|return
name|NULL
return|;
return|return
operator|&
name|DieArray
index|[
literal|0
index|]
return|;
block|}
specifier|const
name|char
modifier|*
name|getCompilationDir
parameter_list|()
function_decl|;
comment|/// setDIERelations - We read in all of the DIE entries into our flat list
comment|/// of DIE entries and now we need to go back through all of them and set the
comment|/// parent, sibling and child pointers for quick DIE navigation.
name|void
name|setDIERelations
parameter_list|()
function_decl|;
name|void
name|addDIE
parameter_list|(
name|DWARFDebugInfoEntryMinimal
modifier|&
name|die
parameter_list|)
block|{
comment|// The average bytes per DIE entry has been seen to be
comment|// around 14-20 so lets pre-reserve the needed memory for
comment|// our DIE entries accordingly. Search forward for "Compute
comment|// average bytes per DIE" to see #if'ed out code that does
comment|// that determination.
comment|// Only reserve the memory if we are adding children of
comment|// the main compile unit DIE. The compile unit DIE is always
comment|// the first entry, so if our size is 1, then we are adding
comment|// the first compile unit child DIE and should reserve
comment|// the memory.
if|if
condition|(
name|DieArray
operator|.
name|empty
argument_list|()
condition|)
name|DieArray
operator|.
name|reserve
argument_list|(
name|getDebugInfoSize
argument_list|()
operator|/
literal|14
argument_list|)
expr_stmt|;
name|DieArray
operator|.
name|push_back
argument_list|(
name|die
argument_list|)
expr_stmt|;
block|}
name|void
name|clearDIEs
parameter_list|(
name|bool
name|keep_compile_unit_die
parameter_list|)
function_decl|;
name|void
name|buildAddressRangeTable
parameter_list|(
name|DWARFDebugAranges
modifier|*
name|debug_aranges
parameter_list|,
name|bool
name|clear_dies_if_already_not_parsed
parameter_list|)
function_decl|;
comment|/// getInlinedChainForAddress - fetches inlined chain for a given address.
comment|/// Returns empty chain if there is no subprogram containing address.
name|DWARFDebugInfoEntryMinimal
operator|::
name|InlinedChain
name|getInlinedChainForAddress
argument_list|(
argument|uint64_t Address
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

