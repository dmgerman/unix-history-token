begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFUnit.h ---------------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARFUNIT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARFUNIT_H
end_define

begin_include
include|#
directive|include
file|"DWARFDebugAbbrev.h"
end_include

begin_include
include|#
directive|include
file|"DWARFDebugInfoEntry.h"
end_include

begin_include
include|#
directive|include
file|"DWARFDebugRangeList.h"
end_include

begin_include
include|#
directive|include
file|"DWARFRelocMap.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|object
block|{
name|class
name|ObjectFile
decl_stmt|;
block|}
name|class
name|DWARFDebugAbbrev
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|DWARFUnit
block|{
specifier|const
name|DWARFDebugAbbrev
modifier|*
name|Abbrev
decl_stmt|;
name|StringRef
name|InfoSection
decl_stmt|;
name|StringRef
name|RangeSection
decl_stmt|;
name|uint32_t
name|RangeSectionBase
decl_stmt|;
name|StringRef
name|StringSection
decl_stmt|;
name|StringRef
name|StringOffsetSection
decl_stmt|;
name|StringRef
name|AddrOffsetSection
decl_stmt|;
name|uint32_t
name|AddrOffsetSectionBase
decl_stmt|;
specifier|const
name|RelocAddrMap
modifier|*
name|RelocMap
decl_stmt|;
name|bool
name|isLittleEndian
decl_stmt|;
name|uint32_t
name|Offset
decl_stmt|;
name|uint32_t
name|Length
decl_stmt|;
name|uint16_t
name|Version
decl_stmt|;
specifier|const
name|DWARFAbbreviationDeclarationSet
modifier|*
name|Abbrevs
decl_stmt|;
name|uint8_t
name|AddrSize
decl_stmt|;
name|uint64_t
name|BaseAddr
decl_stmt|;
comment|// The compile unit debug information entry items.
name|std
operator|::
name|vector
operator|<
name|DWARFDebugInfoEntryMinimal
operator|>
name|DieArray
expr_stmt|;
name|class
name|DWOHolder
block|{
name|std
operator|::
name|unique_ptr
operator|<
name|object
operator|::
name|ObjectFile
operator|>
name|DWOFile
expr_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWARFContext
operator|>
name|DWOContext
expr_stmt|;
name|DWARFUnit
modifier|*
name|DWOU
decl_stmt|;
name|public
label|:
name|DWOHolder
argument_list|(
name|object
operator|::
name|ObjectFile
operator|*
name|DWOFile
argument_list|)
expr_stmt|;
name|DWARFUnit
operator|*
name|getUnit
argument_list|()
specifier|const
block|{
return|return
name|DWOU
return|;
block|}
block|}
empty_stmt|;
name|std
operator|::
name|unique_ptr
operator|<
name|DWOHolder
operator|>
name|DWO
expr_stmt|;
name|protected
label|:
name|virtual
name|bool
name|extractImpl
parameter_list|(
name|DataExtractor
name|debug_info
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|)
function_decl|;
comment|/// Size in bytes of the unit header.
name|virtual
name|uint32_t
name|getHeaderSize
argument_list|()
specifier|const
block|{
return|return
literal|11
return|;
block|}
name|public
label|:
name|DWARFUnit
argument_list|(
argument|const DWARFDebugAbbrev *DA
argument_list|,
argument|StringRef IS
argument_list|,
argument|StringRef RS
argument_list|,
argument|StringRef SS
argument_list|,
argument|StringRef SOS
argument_list|,
argument|StringRef AOS
argument_list|,
argument|const RelocAddrMap *M
argument_list|,
argument|bool LE
argument_list|)
empty_stmt|;
name|virtual
operator|~
name|DWARFUnit
argument_list|()
expr_stmt|;
name|StringRef
name|getStringSection
argument_list|()
specifier|const
block|{
return|return
name|StringSection
return|;
block|}
name|StringRef
name|getStringOffsetSection
argument_list|()
specifier|const
block|{
return|return
name|StringOffsetSection
return|;
block|}
name|void
name|setAddrOffsetSection
parameter_list|(
name|StringRef
name|AOS
parameter_list|,
name|uint32_t
name|Base
parameter_list|)
block|{
name|AddrOffsetSection
operator|=
name|AOS
expr_stmt|;
name|AddrOffsetSectionBase
operator|=
name|Base
expr_stmt|;
block|}
name|void
name|setRangesSection
parameter_list|(
name|StringRef
name|RS
parameter_list|,
name|uint32_t
name|Base
parameter_list|)
block|{
name|RangeSection
operator|=
name|RS
expr_stmt|;
name|RangeSectionBase
operator|=
name|Base
expr_stmt|;
block|}
name|bool
name|getAddrOffsetSectionItem
argument_list|(
name|uint32_t
name|Index
argument_list|,
name|uint64_t
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
comment|// FIXME: Result should be uint64_t in DWARF64.
name|bool
name|getStringOffsetSectionItem
argument_list|(
name|uint32_t
name|Index
argument_list|,
name|uint32_t
operator|&
name|Result
argument_list|)
decl|const
decl_stmt|;
name|DataExtractor
name|getDebugInfoExtractor
argument_list|()
specifier|const
block|{
return|return
name|DataExtractor
argument_list|(
name|InfoSection
argument_list|,
name|isLittleEndian
argument_list|,
name|AddrSize
argument_list|)
return|;
block|}
name|DataExtractor
name|getStringExtractor
argument_list|()
specifier|const
block|{
return|return
name|DataExtractor
argument_list|(
name|StringSection
argument_list|,
name|false
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|const
name|RelocAddrMap
operator|*
name|getRelocMap
argument_list|()
specifier|const
block|{
return|return
name|RelocMap
return|;
block|}
name|bool
name|extract
parameter_list|(
name|DataExtractor
name|debug_info
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|)
function_decl|;
comment|/// extractRangeList - extracts the range list referenced by this compile
comment|/// unit from .debug_ranges section. Returns true on success.
comment|/// Requires that compile unit is already extracted.
name|bool
name|extractRangeList
argument_list|(
name|uint32_t
name|RangeListOffset
argument_list|,
name|DWARFDebugRangeList
operator|&
name|RangeList
argument_list|)
decl|const
decl_stmt|;
name|void
name|clear
parameter_list|()
function_decl|;
name|uint32_t
name|getOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
return|;
block|}
name|uint32_t
name|getNextUnitOffset
argument_list|()
specifier|const
block|{
return|return
name|Offset
operator|+
name|Length
operator|+
literal|4
return|;
block|}
name|uint32_t
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|Length
return|;
block|}
name|uint16_t
name|getVersion
argument_list|()
specifier|const
block|{
return|return
name|Version
return|;
block|}
specifier|const
name|DWARFAbbreviationDeclarationSet
operator|*
name|getAbbreviations
argument_list|()
specifier|const
block|{
return|return
name|Abbrevs
return|;
block|}
name|uint8_t
name|getAddressByteSize
argument_list|()
specifier|const
block|{
return|return
name|AddrSize
return|;
block|}
name|uint64_t
name|getBaseAddress
argument_list|()
specifier|const
block|{
return|return
name|BaseAddr
return|;
block|}
name|void
name|setBaseAddress
parameter_list|(
name|uint64_t
name|base_addr
parameter_list|)
block|{
name|BaseAddr
operator|=
name|base_addr
expr_stmt|;
block|}
specifier|const
name|DWARFDebugInfoEntryMinimal
modifier|*
name|getCompileUnitDIE
parameter_list|(
name|bool
name|extract_cu_die_only
init|=
name|true
parameter_list|)
block|{
name|extractDIEsIfNeeded
argument_list|(
name|extract_cu_die_only
argument_list|)
expr_stmt|;
return|return
name|DieArray
operator|.
name|empty
argument_list|()
condition|?
name|nullptr
else|:
operator|&
name|DieArray
index|[
literal|0
index|]
return|;
block|}
specifier|const
name|char
modifier|*
name|getCompilationDir
parameter_list|()
function_decl|;
name|uint64_t
name|getDWOId
parameter_list|()
function_decl|;
name|void
name|collectAddressRanges
parameter_list|(
name|DWARFAddressRangesVector
modifier|&
name|CURanges
parameter_list|)
function_decl|;
comment|/// getInlinedChainForAddress - fetches inlined chain for a given address.
comment|/// Returns empty chain if there is no subprogram containing address. The
comment|/// chain is valid as long as parsed compile unit DIEs are not cleared.
name|DWARFDebugInfoEntryInlinedChain
name|getInlinedChainForAddress
parameter_list|(
name|uint64_t
name|Address
parameter_list|)
function_decl|;
name|private
label|:
comment|/// Size in bytes of the .debug_info data associated with this compile unit.
name|size_t
name|getDebugInfoSize
argument_list|()
specifier|const
block|{
return|return
name|Length
operator|+
literal|4
operator|-
name|getHeaderSize
argument_list|()
return|;
block|}
comment|/// extractDIEsIfNeeded - Parses a compile unit and indexes its DIEs if it
comment|/// hasn't already been done. Returns the number of DIEs parsed at this call.
name|size_t
name|extractDIEsIfNeeded
parameter_list|(
name|bool
name|CUDieOnly
parameter_list|)
function_decl|;
comment|/// extractDIEsToVector - Appends all parsed DIEs to a vector.
name|void
name|extractDIEsToVector
argument_list|(
name|bool
name|AppendCUDie
argument_list|,
name|bool
name|AppendNonCUDIEs
argument_list|,
name|std
operator|::
name|vector
operator|<
name|DWARFDebugInfoEntryMinimal
operator|>
operator|&
name|DIEs
argument_list|)
decl|const
decl_stmt|;
comment|/// setDIERelations - We read in all of the DIE entries into our flat list
comment|/// of DIE entries and now we need to go back through all of them and set the
comment|/// parent, sibling and child pointers for quick DIE navigation.
name|void
name|setDIERelations
parameter_list|()
function_decl|;
comment|/// clearDIEs - Clear parsed DIEs to keep memory usage low.
name|void
name|clearDIEs
parameter_list|(
name|bool
name|KeepCUDie
parameter_list|)
function_decl|;
comment|/// parseDWO - Parses .dwo file for current compile unit. Returns true if
comment|/// it was actually constructed.
name|bool
name|parseDWO
parameter_list|()
function_decl|;
comment|/// getSubprogramForAddress - Returns subprogram DIE with address range
comment|/// encompassing the provided address. The pointer is alive as long as parsed
comment|/// compile unit DIEs are not cleared.
specifier|const
name|DWARFDebugInfoEntryMinimal
modifier|*
name|getSubprogramForAddress
parameter_list|(
name|uint64_t
name|Address
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

