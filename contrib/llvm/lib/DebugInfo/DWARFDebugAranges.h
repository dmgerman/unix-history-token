begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFDebugAranges.h -------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARFDEBUGARANGES_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARFDEBUGARANGES_H
end_define

begin_include
include|#
directive|include
file|"DWARFDebugArangeSet.h"
end_include

begin_include
include|#
directive|include
file|<list>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|DWARFContext
decl_stmt|;
name|class
name|DWARFDebugAranges
block|{
name|public
label|:
struct|struct
name|Range
block|{
name|explicit
name|Range
argument_list|(
argument|uint64_t lo = -
literal|1ULL
argument_list|,
argument|uint64_t hi = -
literal|1ULL
argument_list|,
argument|uint32_t off = -
literal|1U
argument_list|)
block|:
name|LoPC
argument_list|(
name|lo
argument_list|)
operator|,
name|Length
argument_list|(
name|hi
operator|-
name|lo
argument_list|)
operator|,
name|Offset
argument_list|(
argument|off
argument_list|)
block|{}
name|void
name|clear
argument_list|()
block|{
name|LoPC
operator|=
operator|-
literal|1ULL
block|;
name|Length
operator|=
literal|0
block|;
name|Offset
operator|=
operator|-
literal|1U
block|;     }
name|void
name|setHiPC
argument_list|(
argument|uint64_t HiPC
argument_list|)
block|{
if|if
condition|(
name|HiPC
operator|==
operator|-
literal|1ULL
operator|||
name|HiPC
operator|<=
name|LoPC
condition|)
name|Length
operator|=
literal|0
expr_stmt|;
else|else
name|Length
operator|=
name|HiPC
operator|-
name|LoPC
expr_stmt|;
block|}
name|uint64_t
name|HiPC
argument_list|()
specifier|const
block|{
if|if
condition|(
name|Length
condition|)
return|return
name|LoPC
operator|+
name|Length
return|;
return|return
operator|-
literal|1ULL
return|;
block|}
name|bool
name|isValidRange
argument_list|()
decl|const
block|{
return|return
name|Length
operator|>
literal|0
return|;
block|}
decl|static
name|bool
name|SortedOverlapCheck
argument_list|(
specifier|const
name|Range
operator|&
name|curr_range
argument_list|,
specifier|const
name|Range
operator|&
name|next_range
argument_list|,
name|uint32_t
name|n
argument_list|)
block|{
if|if
condition|(
name|curr_range
operator|.
name|Offset
operator|!=
name|next_range
operator|.
name|Offset
condition|)
return|return
name|false
return|;
return|return
name|curr_range
operator|.
name|HiPC
argument_list|()
operator|+
name|n
operator|>=
name|next_range
operator|.
name|LoPC
return|;
block|}
name|bool
name|contains
argument_list|(
specifier|const
name|Range
operator|&
name|range
argument_list|)
decl|const
block|{
return|return
name|LoPC
operator|<=
name|range
operator|.
name|LoPC
operator|&&
name|range
operator|.
name|HiPC
argument_list|()
operator|<=
name|HiPC
argument_list|()
return|;
block|}
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
struct|;
name|uint64_t
name|LoPC
decl_stmt|;
comment|// Start of address range
name|uint32_t
name|Length
decl_stmt|;
comment|// End of address range (not including this address)
name|uint32_t
name|Offset
decl_stmt|;
comment|// Offset of the compile unit or die
block|}
empty_stmt|;
name|void
name|clear
parameter_list|()
block|{
name|Aranges
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bool
name|allRangesAreContiguous
argument_list|(
name|uint64_t
operator|&
name|LoPC
argument_list|,
name|uint64_t
operator|&
name|HiPC
argument_list|)
decl|const
decl_stmt|;
name|bool
name|getMaxRange
argument_list|(
name|uint64_t
operator|&
name|LoPC
argument_list|,
name|uint64_t
operator|&
name|HiPC
argument_list|)
decl|const
decl_stmt|;
name|bool
name|extract
parameter_list|(
name|DataExtractor
name|debug_aranges_data
parameter_list|)
function_decl|;
name|bool
name|generate
parameter_list|(
name|DWARFContext
modifier|*
name|ctx
parameter_list|)
function_decl|;
comment|// Use append range multiple times and then call sort
name|void
name|appendRange
parameter_list|(
name|uint32_t
name|cu_offset
parameter_list|,
name|uint64_t
name|low_pc
parameter_list|,
name|uint64_t
name|high_pc
parameter_list|)
function_decl|;
name|void
name|sort
parameter_list|(
name|bool
name|minimize
parameter_list|,
name|uint32_t
name|n
parameter_list|)
function_decl|;
specifier|const
name|Range
modifier|*
name|rangeAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
if|if
condition|(
name|idx
operator|<
name|Aranges
operator|.
name|size
argument_list|()
condition|)
return|return
operator|&
name|Aranges
index|[
name|idx
index|]
return|;
return|return
name|NULL
return|;
block|}
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|uint32_t
name|findAddress
argument_list|(
name|uint64_t
name|address
argument_list|)
decl|const
decl_stmt|;
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|Aranges
operator|.
name|empty
argument_list|()
return|;
block|}
name|uint32_t
name|getNumRanges
argument_list|()
specifier|const
block|{
return|return
name|Aranges
operator|.
name|size
argument_list|()
return|;
block|}
name|uint32_t
name|offsetAtIndex
argument_list|(
name|uint32_t
name|idx
argument_list|)
decl|const
block|{
if|if
condition|(
name|idx
operator|<
name|Aranges
operator|.
name|size
argument_list|()
condition|)
return|return
name|Aranges
index|[
name|idx
index|]
operator|.
name|Offset
return|;
return|return
operator|-
literal|1U
return|;
block|}
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Range
operator|>
name|RangeColl
expr_stmt|;
typedef|typedef
name|RangeColl
operator|::
name|const_iterator
name|RangeCollIterator
expr_stmt|;
name|private
label|:
name|RangeColl
name|Aranges
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

