begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- DWARFDebugLine.h ----------------------------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_DEBUGINFO_DWARFDEBUGLINE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_DEBUGINFO_DWARFDEBUGLINE_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataExtractor.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|raw_ostream
decl_stmt|;
name|class
name|DWARFDebugLine
block|{
name|public
label|:
struct|struct
name|FileNameEntry
block|{
name|FileNameEntry
argument_list|()
operator|:
name|Name
argument_list|(
literal|0
argument_list|)
operator|,
name|DirIdx
argument_list|(
literal|0
argument_list|)
operator|,
name|ModTime
argument_list|(
literal|0
argument_list|)
operator|,
name|Length
argument_list|(
literal|0
argument_list|)
block|{}
specifier|const
name|char
operator|*
name|Name
expr_stmt|;
name|uint64_t
name|DirIdx
decl_stmt|;
name|uint64_t
name|ModTime
decl_stmt|;
name|uint64_t
name|Length
decl_stmt|;
block|}
struct|;
struct|struct
name|Prologue
block|{
name|Prologue
argument_list|()
operator|:
name|TotalLength
argument_list|(
literal|0
argument_list|)
operator|,
name|Version
argument_list|(
literal|0
argument_list|)
operator|,
name|PrologueLength
argument_list|(
literal|0
argument_list|)
operator|,
name|MinInstLength
argument_list|(
literal|0
argument_list|)
operator|,
name|DefaultIsStmt
argument_list|(
literal|0
argument_list|)
operator|,
name|LineBase
argument_list|(
literal|0
argument_list|)
operator|,
name|LineRange
argument_list|(
literal|0
argument_list|)
operator|,
name|OpcodeBase
argument_list|(
literal|0
argument_list|)
block|{}
comment|// The size in bytes of the statement information for this compilation unit
comment|// (not including the total_length field itself).
name|uint32_t
name|TotalLength
expr_stmt|;
comment|// Version identifier for the statement information format.
name|uint16_t
name|Version
decl_stmt|;
comment|// The number of bytes following the prologue_length field to the beginning
comment|// of the first byte of the statement program itself.
name|uint32_t
name|PrologueLength
decl_stmt|;
comment|// The size in bytes of the smallest target machine instruction. Statement
comment|// program opcodes that alter the address register first multiply their
comment|// operands by this value.
name|uint8_t
name|MinInstLength
decl_stmt|;
comment|// The initial value of theis_stmtregister.
name|uint8_t
name|DefaultIsStmt
decl_stmt|;
comment|// This parameter affects the meaning of the special opcodes. See below.
name|int8_t
name|LineBase
decl_stmt|;
comment|// This parameter affects the meaning of the special opcodes. See below.
name|uint8_t
name|LineRange
decl_stmt|;
comment|// The number assigned to the first special opcode.
name|uint8_t
name|OpcodeBase
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint8_t
operator|>
name|StandardOpcodeLengths
expr_stmt|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|char
operator|*
operator|>
name|IncludeDirectories
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|FileNameEntry
operator|>
name|FileNames
expr_stmt|;
comment|// Length of the prologue in bytes.
name|uint32_t
name|getLength
argument_list|()
specifier|const
block|{
return|return
name|PrologueLength
operator|+
sizeof|sizeof
argument_list|(
name|TotalLength
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|Version
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|PrologueLength
argument_list|)
return|;
block|}
comment|// Length of the line table data in bytes (not including the prologue).
name|uint32_t
name|getStatementTableLength
argument_list|()
specifier|const
block|{
return|return
name|TotalLength
operator|+
sizeof|sizeof
argument_list|(
name|TotalLength
argument_list|)
operator|-
name|getLength
argument_list|()
return|;
block|}
name|int32_t
name|getMaxLineIncrementForSpecialOpcode
argument_list|()
specifier|const
block|{
return|return
name|LineBase
operator|+
operator|(
name|int8_t
operator|)
name|LineRange
operator|-
literal|1
return|;
block|}
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|void
name|clear
parameter_list|()
block|{
name|TotalLength
operator|=
name|Version
operator|=
name|PrologueLength
operator|=
literal|0
expr_stmt|;
name|MinInstLength
operator|=
name|LineBase
operator|=
name|LineRange
operator|=
name|OpcodeBase
operator|=
literal|0
expr_stmt|;
name|StandardOpcodeLengths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|IncludeDirectories
operator|.
name|clear
argument_list|()
expr_stmt|;
name|FileNames
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
struct|;
comment|// Standard .debug_line state machine structure.
struct|struct
name|Row
block|{
name|Row
argument_list|(
argument|bool default_is_stmt = false
argument_list|)
block|{
name|reset
argument_list|(
name|default_is_stmt
argument_list|)
expr_stmt|;
block|}
comment|/// Called after a row is appended to the matrix.
name|void
name|postAppend
parameter_list|()
function_decl|;
name|void
name|reset
parameter_list|(
name|bool
name|default_is_stmt
parameter_list|)
function_decl|;
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
specifier|static
name|bool
name|orderByAddress
parameter_list|(
specifier|const
name|Row
modifier|&
name|LHS
parameter_list|,
specifier|const
name|Row
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|.
name|Address
operator|<
name|RHS
operator|.
name|Address
return|;
block|}
comment|// The program-counter value corresponding to a machine instruction
comment|// generated by the compiler.
name|uint64_t
name|Address
decl_stmt|;
comment|// An unsigned integer indicating a source line number. Lines are numbered
comment|// beginning at 1. The compiler may emit the value 0 in cases where an
comment|// instruction cannot be attributed to any source line.
name|uint32_t
name|Line
decl_stmt|;
comment|// An unsigned integer indicating a column number within a source line.
comment|// Columns are numbered beginning at 1. The value 0 is reserved to indicate
comment|// that a statement begins at the 'left edge' of the line.
name|uint16_t
name|Column
decl_stmt|;
comment|// An unsigned integer indicating the identity of the source file
comment|// corresponding to a machine instruction.
name|uint16_t
name|File
decl_stmt|;
comment|// An unsigned integer whose value encodes the applicable instruction set
comment|// architecture for the current instruction.
name|uint8_t
name|Isa
decl_stmt|;
comment|// A boolean indicating that the current instruction is the beginning of a
comment|// statement.
name|uint8_t
name|IsStmt
range|:
literal|1
decl_stmt|,
comment|// A boolean indicating that the current instruction is the
comment|// beginning of a basic block.
name|BasicBlock
range|:
literal|1
decl_stmt|,
comment|// A boolean indicating that the current address is that of the
comment|// first byte after the end of a sequence of target machine
comment|// instructions.
name|EndSequence
range|:
literal|1
decl_stmt|,
comment|// A boolean indicating that the current address is one (of possibly
comment|// many) where execution should be suspended for an entry breakpoint
comment|// of a function.
name|PrologueEnd
range|:
literal|1
decl_stmt|,
comment|// A boolean indicating that the current address is one (of possibly
comment|// many) where execution should be suspended for an exit breakpoint
comment|// of a function.
name|EpilogueBegin
range|:
literal|1
decl_stmt|;
block|}
struct|;
comment|// Represents a series of contiguous machine instructions. Line table for each
comment|// compilation unit may consist of multiple sequences, which are not
comment|// guaranteed to be in the order of ascending instruction address.
struct|struct
name|Sequence
block|{
comment|// Sequence describes instructions at address range [LowPC, HighPC)
comment|// and is described by line table rows [FirstRowIndex, LastRowIndex).
name|uint64_t
name|LowPC
decl_stmt|;
name|uint64_t
name|HighPC
decl_stmt|;
name|unsigned
name|FirstRowIndex
decl_stmt|;
name|unsigned
name|LastRowIndex
decl_stmt|;
name|bool
name|Empty
decl_stmt|;
name|Sequence
argument_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
name|void
name|reset
parameter_list|()
block|{
name|LowPC
operator|=
literal|0
expr_stmt|;
name|HighPC
operator|=
literal|0
expr_stmt|;
name|FirstRowIndex
operator|=
literal|0
expr_stmt|;
name|LastRowIndex
operator|=
literal|0
expr_stmt|;
name|Empty
operator|=
name|true
expr_stmt|;
block|}
specifier|static
name|bool
name|orderByLowPC
parameter_list|(
specifier|const
name|Sequence
modifier|&
name|LHS
parameter_list|,
specifier|const
name|Sequence
modifier|&
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|.
name|LowPC
operator|<
name|RHS
operator|.
name|LowPC
return|;
block|}
name|bool
name|isValid
argument_list|()
specifier|const
block|{
return|return
operator|!
name|Empty
operator|&&
operator|(
name|LowPC
operator|<
name|HighPC
operator|)
operator|&&
operator|(
name|FirstRowIndex
operator|<
name|LastRowIndex
operator|)
return|;
block|}
name|bool
name|containsPC
argument_list|(
name|uint64_t
name|pc
argument_list|)
decl|const
block|{
return|return
operator|(
name|LowPC
operator|<=
name|pc
operator|&&
name|pc
operator|<
name|HighPC
operator|)
return|;
block|}
block|}
struct|;
struct|struct
name|LineTable
block|{
name|void
name|appendRow
argument_list|(
specifier|const
name|DWARFDebugLine
operator|::
name|Row
operator|&
name|state
argument_list|)
block|{
name|Rows
operator|.
name|push_back
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
name|void
name|appendSequence
argument_list|(
specifier|const
name|DWARFDebugLine
operator|::
name|Sequence
operator|&
name|sequence
argument_list|)
block|{
name|Sequences
operator|.
name|push_back
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
block|}
name|void
name|clear
parameter_list|()
block|{
name|Prologue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Rows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Sequences
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Returns the index of the row with file/line info for a given address,
comment|// or -1 if there is no such row.
name|uint32_t
name|lookupAddress
argument_list|(
name|uint64_t
name|address
argument_list|)
decl|const
decl_stmt|;
name|void
name|dump
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|struct
name|Prologue
name|Prologue
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Row
operator|>
name|RowVector
expr_stmt|;
typedef|typedef
name|RowVector
operator|::
name|const_iterator
name|RowIter
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Sequence
operator|>
name|SequenceVector
expr_stmt|;
typedef|typedef
name|SequenceVector
operator|::
name|const_iterator
name|SequenceIter
expr_stmt|;
name|RowVector
name|Rows
decl_stmt|;
name|SequenceVector
name|Sequences
decl_stmt|;
block|}
struct|;
name|struct
name|State
range|:
name|public
name|Row
decl_stmt|,
name|public
name|Sequence
decl_stmt|,
name|public
name|LineTable
block|{
comment|// Special row codes.
enum|enum
block|{
name|StartParsingLineTable
init|=
literal|0
block|,
name|DoneParsingLineTable
init|=
operator|-
literal|1
block|}
enum|;
name|State
argument_list|()
operator|:
name|row
argument_list|(
argument|StartParsingLineTable
argument_list|)
block|{}
name|virtual
operator|~
name|State
argument_list|()
expr_stmt|;
name|virtual
name|void
name|appendRowToMatrix
parameter_list|(
name|uint32_t
name|offset
parameter_list|)
function_decl|;
name|virtual
name|void
name|finalize
parameter_list|()
function_decl|;
name|virtual
name|void
name|reset
parameter_list|()
block|{
name|Row
operator|::
name|reset
argument_list|(
name|Prologue
operator|.
name|DefaultIsStmt
argument_list|)
expr_stmt|;
name|Sequence
operator|::
name|reset
argument_list|()
expr_stmt|;
block|}
comment|// The row number that starts at zero for the prologue, and increases for
comment|// each row added to the matrix.
name|unsigned
name|row
decl_stmt|;
block|}
empty_stmt|;
name|struct
name|DumpingState
range|:
name|public
name|State
block|{
name|DumpingState
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
operator|:
name|OS
argument_list|(
argument|OS
argument_list|)
block|{}
name|virtual
operator|~
name|DumpingState
argument_list|()
block|;
name|virtual
name|void
name|finalize
argument_list|()
block|;
name|private
operator|:
name|raw_ostream
operator|&
name|OS
block|;   }
decl_stmt|;
specifier|static
name|bool
name|parsePrologue
parameter_list|(
name|DataExtractor
name|debug_line_data
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|,
name|Prologue
modifier|*
name|prologue
parameter_list|)
function_decl|;
comment|/// Parse a single line table (prologue and all rows).
specifier|static
name|bool
name|parseStatementTable
parameter_list|(
name|DataExtractor
name|debug_line_data
parameter_list|,
name|uint32_t
modifier|*
name|offset_ptr
parameter_list|,
name|State
modifier|&
name|state
parameter_list|)
function_decl|;
specifier|const
name|LineTable
modifier|*
name|getLineTable
argument_list|(
name|uint32_t
name|offset
argument_list|)
decl|const
decl_stmt|;
specifier|const
name|LineTable
modifier|*
name|getOrParseLineTable
parameter_list|(
name|DataExtractor
name|debug_line_data
parameter_list|,
name|uint32_t
name|offset
parameter_list|)
function_decl|;
name|private
label|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|uint32_t
operator|,
name|LineTable
operator|>
name|LineTableMapTy
expr_stmt|;
typedef|typedef
name|LineTableMapTy
operator|::
name|iterator
name|LineTableIter
expr_stmt|;
typedef|typedef
name|LineTableMapTy
operator|::
name|const_iterator
name|LineTableConstIter
expr_stmt|;
name|LineTableMapTy
name|LineTableMap
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

