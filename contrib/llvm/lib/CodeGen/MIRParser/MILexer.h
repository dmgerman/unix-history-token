begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MILexer.h - Lexer for machine instructions -------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the function that lexes the machine instruction source
end_comment

begin_comment
comment|// string.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_CODEGEN_MIRPARSER_MILEXER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_CODEGEN_MIRPARSER_MILEXER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/APSInt.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Twine
decl_stmt|;
comment|/// A token produced by the machine instruction lexer.
struct|struct
name|MIToken
block|{
enum|enum
name|TokenKind
block|{
comment|// Markers
name|Eof
block|,
name|Error
block|,
name|Newline
block|,
comment|// Tokens with no info.
name|comma
block|,
name|equal
block|,
name|underscore
block|,
name|colon
block|,
name|coloncolon
block|,
name|exclaim
block|,
name|lparen
block|,
name|rparen
block|,
name|lbrace
block|,
name|rbrace
block|,
name|plus
block|,
name|minus
block|,
comment|// Keywords
name|kw_implicit
block|,
name|kw_implicit_define
block|,
name|kw_def
block|,
name|kw_dead
block|,
name|kw_killed
block|,
name|kw_undef
block|,
name|kw_internal
block|,
name|kw_early_clobber
block|,
name|kw_debug_use
block|,
name|kw_tied_def
block|,
name|kw_frame_setup
block|,
name|kw_debug_location
block|,
name|kw_cfi_same_value
block|,
name|kw_cfi_offset
block|,
name|kw_cfi_def_cfa_register
block|,
name|kw_cfi_def_cfa_offset
block|,
name|kw_cfi_def_cfa
block|,
name|kw_blockaddress
block|,
name|kw_target_index
block|,
name|kw_half
block|,
name|kw_float
block|,
name|kw_double
block|,
name|kw_x86_fp80
block|,
name|kw_fp128
block|,
name|kw_ppc_fp128
block|,
name|kw_target_flags
block|,
name|kw_volatile
block|,
name|kw_non_temporal
block|,
name|kw_invariant
block|,
name|kw_align
block|,
name|kw_stack
block|,
name|kw_got
block|,
name|kw_jump_table
block|,
name|kw_constant_pool
block|,
name|kw_call_entry
block|,
name|kw_liveout
block|,
name|kw_address_taken
block|,
name|kw_landing_pad
block|,
name|kw_liveins
block|,
name|kw_successors
block|,
comment|// Named metadata keywords
name|md_tbaa
block|,
name|md_alias_scope
block|,
name|md_noalias
block|,
name|md_range
block|,
comment|// Identifier tokens
name|Identifier
block|,
name|IntegerType
block|,
name|NamedRegister
block|,
name|MachineBasicBlockLabel
block|,
name|MachineBasicBlock
block|,
name|StackObject
block|,
name|FixedStackObject
block|,
name|NamedGlobalValue
block|,
name|GlobalValue
block|,
name|ExternalSymbol
block|,
comment|// Other tokens
name|IntegerLiteral
block|,
name|FloatingPointLiteral
block|,
name|VirtualRegister
block|,
name|ConstantPoolItem
block|,
name|JumpTableIndex
block|,
name|NamedIRBlock
block|,
name|IRBlock
block|,
name|NamedIRValue
block|,
name|IRValue
block|,
name|QuotedIRValue
comment|// `<constant value>`
block|}
enum|;
name|private
label|:
name|TokenKind
name|Kind
decl_stmt|;
name|StringRef
name|Range
decl_stmt|;
name|StringRef
name|StringValue
decl_stmt|;
name|std
operator|::
name|string
name|StringValueStorage
expr_stmt|;
name|APSInt
name|IntVal
decl_stmt|;
name|public
label|:
name|MIToken
argument_list|()
operator|:
name|Kind
argument_list|(
argument|Error
argument_list|)
block|{}
name|MIToken
operator|&
name|reset
argument_list|(
argument|TokenKind Kind
argument_list|,
argument|StringRef Range
argument_list|)
expr_stmt|;
name|MIToken
modifier|&
name|setStringValue
parameter_list|(
name|StringRef
name|StrVal
parameter_list|)
function_decl|;
name|MIToken
modifier|&
name|setOwnedStringValue
argument_list|(
name|std
operator|::
name|string
name|StrVal
argument_list|)
decl_stmt|;
name|MIToken
modifier|&
name|setIntegerValue
parameter_list|(
name|APSInt
name|IntVal
parameter_list|)
function_decl|;
name|TokenKind
name|kind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|bool
name|isError
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Error
return|;
block|}
name|bool
name|isNewlineOrEOF
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Newline
operator|||
name|Kind
operator|==
name|Eof
return|;
block|}
name|bool
name|isErrorOrEOF
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Error
operator|||
name|Kind
operator|==
name|Eof
return|;
block|}
name|bool
name|isRegister
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|NamedRegister
operator|||
name|Kind
operator|==
name|underscore
operator|||
name|Kind
operator|==
name|VirtualRegister
return|;
block|}
name|bool
name|isRegisterFlag
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|kw_implicit
operator|||
name|Kind
operator|==
name|kw_implicit_define
operator|||
name|Kind
operator|==
name|kw_def
operator|||
name|Kind
operator|==
name|kw_dead
operator|||
name|Kind
operator|==
name|kw_killed
operator|||
name|Kind
operator|==
name|kw_undef
operator|||
name|Kind
operator|==
name|kw_internal
operator|||
name|Kind
operator|==
name|kw_early_clobber
operator|||
name|Kind
operator|==
name|kw_debug_use
return|;
block|}
name|bool
name|isMemoryOperandFlag
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|kw_volatile
operator|||
name|Kind
operator|==
name|kw_non_temporal
operator|||
name|Kind
operator|==
name|kw_invariant
return|;
block|}
name|bool
name|is
argument_list|(
name|TokenKind
name|K
argument_list|)
decl|const
block|{
return|return
name|Kind
operator|==
name|K
return|;
block|}
name|bool
name|isNot
argument_list|(
name|TokenKind
name|K
argument_list|)
decl|const
block|{
return|return
name|Kind
operator|!=
name|K
return|;
block|}
name|StringRef
operator|::
name|iterator
name|location
argument_list|()
specifier|const
block|{
return|return
name|Range
operator|.
name|begin
argument_list|()
return|;
block|}
name|StringRef
name|range
argument_list|()
specifier|const
block|{
return|return
name|Range
return|;
block|}
comment|/// Return the token's string value.
name|StringRef
name|stringValue
argument_list|()
specifier|const
block|{
return|return
name|StringValue
return|;
block|}
specifier|const
name|APSInt
operator|&
name|integerValue
argument_list|()
specifier|const
block|{
return|return
name|IntVal
return|;
block|}
name|bool
name|hasIntegerValue
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|IntegerLiteral
operator|||
name|Kind
operator|==
name|MachineBasicBlock
operator|||
name|Kind
operator|==
name|MachineBasicBlockLabel
operator|||
name|Kind
operator|==
name|StackObject
operator|||
name|Kind
operator|==
name|FixedStackObject
operator|||
name|Kind
operator|==
name|GlobalValue
operator|||
name|Kind
operator|==
name|VirtualRegister
operator|||
name|Kind
operator|==
name|ConstantPoolItem
operator|||
name|Kind
operator|==
name|JumpTableIndex
operator|||
name|Kind
operator|==
name|IRBlock
operator|||
name|Kind
operator|==
name|IRValue
return|;
block|}
block|}
struct|;
comment|/// Consume a single machine instruction token in the given source and return
comment|/// the remaining source string.
name|StringRef
name|lexMIToken
argument_list|(
name|StringRef
name|Source
argument_list|,
name|MIToken
operator|&
name|Token
argument_list|,
name|function_ref
operator|<
name|void
argument_list|(
name|StringRef
operator|::
name|iterator
argument_list|,
specifier|const
name|Twine
operator|&
argument_list|)
operator|>
name|ErrorCallback
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

