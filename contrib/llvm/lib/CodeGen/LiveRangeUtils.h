begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LiveRangeUtils.h - Live Range modification utilities ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// This file contains helper functions to modify live ranges.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_CODEGEN_LIVERANGEUTILS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_CODEGEN_LIVERANGEUTILS_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/LiveInterval.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// Helper function that distributes live range value numbers and the
comment|/// corresponding segments of a master live range \p LR to a list of newly
comment|/// created live ranges \p SplitLRs. \p VNIClasses maps each value number in \p
comment|/// LR to 0 meaning it should stay or to 1..N meaning it should go to a specific
comment|/// live range in the \p SplitLRs array.
name|template
operator|<
name|typename
name|LiveRangeT
operator|,
name|typename
name|EqClassesT
operator|>
specifier|static
name|void
name|DistributeRange
argument_list|(
argument|LiveRangeT&LR
argument_list|,
argument|LiveRangeT *SplitLRs[]
argument_list|,
argument|EqClassesT VNIClasses
argument_list|)
block|{
comment|// Move segments to new intervals.
name|typename
name|LiveRangeT
operator|::
name|iterator
name|J
operator|=
name|LR
operator|.
name|begin
argument_list|()
block|,
name|E
operator|=
name|LR
operator|.
name|end
argument_list|()
block|;
while|while
condition|(
name|J
operator|!=
name|E
operator|&&
name|VNIClasses
index|[
name|J
operator|->
name|valno
operator|->
name|id
index|]
operator|==
literal|0
condition|)
operator|++
name|J
expr_stmt|;
for|for
control|(
name|typename
name|LiveRangeT
operator|::
name|iterator
name|I
operator|=
name|J
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
block|{
if|if
condition|(
name|unsigned
name|eq
init|=
name|VNIClasses
index|[
name|I
operator|->
name|valno
operator|->
name|id
index|]
condition|)
block|{
name|assert
argument_list|(
operator|(
name|SplitLRs
index|[
name|eq
operator|-
literal|1
index|]
operator|->
name|empty
argument_list|()
operator|||
name|SplitLRs
index|[
name|eq
operator|-
literal|1
index|]
operator|->
name|expiredAt
argument_list|(
name|I
operator|->
name|start
argument_list|)
operator|)
operator|&&
literal|"New intervals should be empty"
argument_list|)
expr_stmt|;
name|SplitLRs
index|[
name|eq
operator|-
literal|1
index|]
operator|->
name|segments
operator|.
name|push_back
argument_list|(
operator|*
name|I
argument_list|)
expr_stmt|;
block|}
else|else
operator|*
name|J
operator|++
operator|=
operator|*
name|I
expr_stmt|;
block|}
name|LR
operator|.
name|segments
operator|.
name|erase
argument_list|(
name|J
argument_list|,
name|E
argument_list|)
expr_stmt|;
comment|// Transfer VNInfos to their new owners and renumber them.
name|unsigned
name|j
init|=
literal|0
decl_stmt|,
name|e
init|=
name|LR
operator|.
name|getNumValNums
argument_list|()
decl_stmt|;
while|while
condition|(
name|j
operator|!=
name|e
operator|&&
name|VNIClasses
index|[
name|j
index|]
operator|==
literal|0
condition|)
operator|++
name|j
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
name|j
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
name|VNInfo
modifier|*
name|VNI
init|=
name|LR
operator|.
name|getValNumInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|unsigned
name|eq
init|=
name|VNIClasses
index|[
name|i
index|]
condition|)
block|{
name|VNI
operator|->
name|id
operator|=
name|SplitLRs
index|[
name|eq
operator|-
literal|1
index|]
operator|->
name|getNumValNums
argument_list|()
expr_stmt|;
name|SplitLRs
index|[
name|eq
operator|-
literal|1
index|]
operator|->
name|valnos
operator|.
name|push_back
argument_list|(
name|VNI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|VNI
operator|->
name|id
operator|=
name|j
expr_stmt|;
name|LR
operator|.
name|valnos
index|[
name|j
operator|++
index|]
operator|=
name|VNI
expr_stmt|;
block|}
block|}
name|LR
operator|.
name|valnos
operator|.
name|resize
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

