begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ELFWriter.h - Target-independent ELF writer support -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the ELFWriter class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ELFWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|ELFWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SetVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunctionPass.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BinaryObject
decl_stmt|;
name|class
name|Constant
decl_stmt|;
name|class
name|ConstantInt
decl_stmt|;
name|class
name|ConstantStruct
decl_stmt|;
name|class
name|ELFCodeEmitter
decl_stmt|;
name|class
name|ELFRelocation
decl_stmt|;
name|class
name|ELFSection
decl_stmt|;
struct_decl|struct
name|ELFSym
struct_decl|;
name|class
name|GlobalVariable
decl_stmt|;
name|class
name|JITDebugRegisterer
decl_stmt|;
name|class
name|Mangler
decl_stmt|;
name|class
name|MachineCodeEmitter
decl_stmt|;
name|class
name|MachineConstantPoolEntry
decl_stmt|;
name|class
name|ObjectCodeEmitter
decl_stmt|;
name|class
name|MCAsmInfo
decl_stmt|;
name|class
name|TargetELFWriterInfo
decl_stmt|;
name|class
name|TargetLoweringObjectFile
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|SectionKind
decl_stmt|;
name|class
name|MCContext
decl_stmt|;
name|class
name|TargetMachine
decl_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ELFSym
operator|*
operator|>
operator|::
name|iterator
name|ELFSymIter
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|ELFSection
operator|*
operator|>
operator|::
name|iterator
name|ELFSectionIter
expr_stmt|;
typedef|typedef
name|SetVector
operator|<
specifier|const
name|GlobalValue
operator|*
operator|>
operator|::
name|const_iterator
name|PendingGblsIter
expr_stmt|;
typedef|typedef
name|SetVector
operator|<
specifier|const
name|char
operator|*
operator|>
operator|::
name|const_iterator
name|PendingExtsIter
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|Constant
operator|*
operator|,
name|int64_t
operator|>
name|CstExprResTy
expr_stmt|;
comment|/// ELFWriter - This class implements the common target-independent code for
comment|/// writing ELF files.  Targets should derive a class from this to
comment|/// parameterize the output format.
comment|///
name|class
name|ELFWriter
range|:
name|public
name|MachineFunctionPass
block|{
name|friend
name|class
name|ELFCodeEmitter
block|;
name|friend
name|class
name|JITDebugRegisterer
block|;
name|public
operator|:
specifier|static
name|char
name|ID
block|;
comment|/// Return the ELFCodeEmitter as an instance of ObjectCodeEmitter
name|ObjectCodeEmitter
operator|*
name|getObjectCodeEmitter
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|ObjectCodeEmitter
operator|*
operator|>
operator|(
name|ElfCE
operator|)
return|;
block|}
name|ELFWriter
argument_list|(
name|raw_ostream
operator|&
name|O
argument_list|,
name|TargetMachine
operator|&
name|TM
argument_list|)
block|;
operator|~
name|ELFWriter
argument_list|()
block|;
name|protected
operator|:
comment|/// Output stream to send the resultant object file to.
name|raw_ostream
operator|&
name|O
block|;
comment|/// Target machine description.
name|TargetMachine
operator|&
name|TM
block|;
comment|/// Context object for machine code objects.
name|MCContext
operator|&
name|OutContext
block|;
comment|/// Target Elf Writer description.
specifier|const
name|TargetELFWriterInfo
operator|*
name|TEW
block|;
comment|/// Mang - The object used to perform name mangling for this module.
name|Mangler
operator|*
name|Mang
block|;
comment|/// MCE - The MachineCodeEmitter object that we are exposing to emit machine
comment|/// code for functions to the .o file.
name|ELFCodeEmitter
operator|*
name|ElfCE
block|;
comment|/// TLOF - Target Lowering Object File, provide section names for globals
comment|/// and other object file specific stuff
specifier|const
name|TargetLoweringObjectFile
operator|&
name|TLOF
block|;
comment|/// MAI - Target Asm Info, provide information about section names for
comment|/// globals and other target specific stuff.
specifier|const
name|MCAsmInfo
operator|*
name|MAI
block|;
comment|//===------------------------------------------------------------------===//
comment|// Properties inferred automatically from the target machine.
comment|//===------------------------------------------------------------------===//
comment|/// is64Bit/isLittleEndian - This information is inferred from the target
comment|/// machine directly, indicating whether to emit a 32- or 64-bit ELF file.
name|bool
name|is64Bit
block|,
name|isLittleEndian
block|;
comment|/// doInitialization - Emit the file header and all of the global variables
comment|/// for the module to the ELF file.
name|bool
name|doInitialization
argument_list|(
name|Module
operator|&
name|M
argument_list|)
block|;
name|bool
name|runOnMachineFunction
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
block|;
comment|/// doFinalization - Now that the module has been completely processed, emit
comment|/// the ELF file to 'O'.
name|bool
name|doFinalization
argument_list|(
name|Module
operator|&
name|M
argument_list|)
block|;
name|private
operator|:
comment|/// Blob containing the Elf header
name|BinaryObject
name|ElfHdr
block|;
comment|/// SectionList - This is the list of sections that we have emitted to the
comment|/// file. Once the file has been completely built, the section header table
comment|/// is constructed from this info.
name|std
operator|::
name|vector
operator|<
name|ELFSection
operator|*
operator|>
name|SectionList
block|;
name|unsigned
name|NumSections
block|;
comment|// Always = SectionList.size()
comment|/// SectionLookup - This is a mapping from section name to section number in
comment|/// the SectionList. Used to quickly gather the Section Index from MAI names
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
block|,
name|ELFSection
operator|*
operator|>
name|SectionLookup
block|;
comment|/// PendingGlobals - Globals not processed as symbols yet.
name|SetVector
operator|<
specifier|const
name|GlobalValue
operator|*
operator|>
name|PendingGlobals
block|;
comment|/// GblSymLookup - This is a mapping from global value to a symbol index
comment|/// in the symbol table or private symbols list. This is useful since reloc
comment|/// symbol references must be quickly mapped to their indices on the lists.
name|std
operator|::
name|map
operator|<
specifier|const
name|GlobalValue
operator|*
block|,
name|uint32_t
operator|>
name|GblSymLookup
block|;
comment|/// PendingExternals - Externals not processed as symbols yet.
name|SetVector
operator|<
specifier|const
name|char
operator|*
operator|>
name|PendingExternals
block|;
comment|/// ExtSymLookup - This is a mapping from externals to a symbol index
comment|/// in the symbol table list. This is useful since reloc symbol references
comment|/// must be quickly mapped to their symbol table indices.
name|std
operator|::
name|map
operator|<
specifier|const
name|char
operator|*
block|,
name|uint32_t
operator|>
name|ExtSymLookup
block|;
comment|/// SymbolList - This is the list of symbols emitted to the symbol table.
comment|/// When the SymbolList is finally built, local symbols must be placed in
comment|/// the beginning while non-locals at the end.
name|std
operator|::
name|vector
operator|<
name|ELFSym
operator|*
operator|>
name|SymbolList
block|;
comment|/// PrivateSyms - Record private symbols, every symbol here must never be
comment|/// present in the SymbolList.
name|std
operator|::
name|vector
operator|<
name|ELFSym
operator|*
operator|>
name|PrivateSyms
block|;
comment|/// getSection - Return the section with the specified name, creating a new
comment|/// section if one does not already exist.
name|ELFSection
operator|&
name|getSection
argument_list|(
argument|const std::string&Name
argument_list|,
argument|unsigned Type
argument_list|,
argument|unsigned Flags =
literal|0
argument_list|,
argument|unsigned Align =
literal|0
argument_list|)
block|{
name|ELFSection
operator|*
operator|&
name|SN
operator|=
name|SectionLookup
index|[
name|Name
index|]
block|;
if|if
condition|(
name|SN
condition|)
return|return
operator|*
name|SN
return|;
name|SectionList
operator|.
name|push_back
argument_list|(
argument|new ELFSection(Name, isLittleEndian, is64Bit)
argument_list|)
block|;
name|SN
operator|=
name|SectionList
operator|.
name|back
argument_list|()
block|;
name|SN
operator|->
name|SectionIdx
operator|=
name|NumSections
operator|++
block|;
name|SN
operator|->
name|Type
operator|=
name|Type
block|;
name|SN
operator|->
name|Flags
operator|=
name|Flags
block|;
name|SN
operator|->
name|Link
operator|=
name|ELF
operator|::
name|SHN_UNDEF
block|;
name|SN
operator|->
name|Align
operator|=
name|Align
block|;
return|return
operator|*
name|SN
return|;
block|}
name|ELFSection
modifier|&
name|getNonExecStackSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".note.GNU-stack"
argument_list|,
name|ELF
operator|::
name|SHT_PROGBITS
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getSymbolTableSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".symtab"
argument_list|,
name|ELF
operator|::
name|SHT_SYMTAB
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getStringTableSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".strtab"
argument_list|,
name|ELF
operator|::
name|SHT_STRTAB
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getSectionHeaderStringTableSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|".shstrtab"
argument_list|,
name|ELF
operator|::
name|SHT_STRTAB
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getNullSection
parameter_list|()
block|{
return|return
name|getSection
argument_list|(
literal|""
argument_list|,
name|ELF
operator|::
name|SHT_NULL
argument_list|,
literal|0
argument_list|)
return|;
block|}
name|ELFSection
modifier|&
name|getDataSection
parameter_list|()
function_decl|;
name|ELFSection
modifier|&
name|getBSSSection
parameter_list|()
function_decl|;
name|ELFSection
modifier|&
name|getCtorSection
parameter_list|()
function_decl|;
name|ELFSection
modifier|&
name|getDtorSection
parameter_list|()
function_decl|;
name|ELFSection
modifier|&
name|getJumpTableSection
parameter_list|()
function_decl|;
name|ELFSection
modifier|&
name|getConstantPoolSection
parameter_list|(
name|MachineConstantPoolEntry
modifier|&
name|CPE
parameter_list|)
function_decl|;
name|ELFSection
modifier|&
name|getTextSection
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
function_decl|;
name|ELFSection
modifier|&
name|getRelocSection
parameter_list|(
name|ELFSection
modifier|&
name|S
parameter_list|)
function_decl|;
comment|// Helpers for obtaining ELF specific info.
name|unsigned
name|getGlobalELFBinding
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|)
function_decl|;
name|unsigned
name|getGlobalELFType
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|)
function_decl|;
name|unsigned
name|getGlobalELFVisibility
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|)
function_decl|;
comment|// AddPendingGlobalSymbol - Add a global to be processed and to
comment|// the global symbol lookup, use a zero index because the table
comment|// index will be determined later.
name|void
name|AddPendingGlobalSymbol
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|,
name|bool
name|AddToLookup
init|=
name|false
parameter_list|)
function_decl|;
comment|// AddPendingExternalSymbol - Add the external to be processed
comment|// and to the external symbol lookup, use a zero index because
comment|// the symbol table index will be determined later.
name|void
name|AddPendingExternalSymbol
parameter_list|(
specifier|const
name|char
modifier|*
name|External
parameter_list|)
function_decl|;
comment|// AddToSymbolList - Update the symbol lookup and If the symbol is
comment|// private add it to PrivateSyms list, otherwise to SymbolList.
name|void
name|AddToSymbolList
parameter_list|(
name|ELFSym
modifier|*
name|GblSym
parameter_list|)
function_decl|;
comment|// As we complete the ELF file, we need to update fields in the ELF header
comment|// (e.g. the location of the section table).  These members keep track of
comment|// the offset in ELFHeader of these various pieces to update and other
comment|// locations in the file.
name|unsigned
name|ELFHdr_e_shoff_Offset
decl_stmt|;
comment|// e_shoff    in ELF header.
name|unsigned
name|ELFHdr_e_shstrndx_Offset
decl_stmt|;
comment|// e_shstrndx in ELF header.
name|unsigned
name|ELFHdr_e_shnum_Offset
decl_stmt|;
comment|// e_shnum    in ELF header.
name|private
label|:
name|void
name|EmitGlobal
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|)
function_decl|;
name|void
name|EmitGlobalConstant
parameter_list|(
specifier|const
name|Constant
modifier|*
name|C
parameter_list|,
name|ELFSection
modifier|&
name|GblS
parameter_list|)
function_decl|;
name|void
name|EmitGlobalConstantStruct
parameter_list|(
specifier|const
name|ConstantStruct
modifier|*
name|CVS
parameter_list|,
name|ELFSection
modifier|&
name|GblS
parameter_list|)
function_decl|;
name|void
name|EmitGlobalConstantLargeInt
parameter_list|(
specifier|const
name|ConstantInt
modifier|*
name|CI
parameter_list|,
name|ELFSection
modifier|&
name|S
parameter_list|)
function_decl|;
name|void
name|EmitGlobalDataRelocation
parameter_list|(
specifier|const
name|GlobalValue
modifier|*
name|GV
parameter_list|,
name|unsigned
name|Size
parameter_list|,
name|ELFSection
modifier|&
name|GblS
parameter_list|,
name|int64_t
name|Offset
init|=
literal|0
parameter_list|)
function_decl|;
name|bool
name|EmitSpecialLLVMGlobal
parameter_list|(
specifier|const
name|GlobalVariable
modifier|*
name|GV
parameter_list|)
function_decl|;
name|void
name|EmitXXStructorList
parameter_list|(
specifier|const
name|Constant
modifier|*
name|List
parameter_list|,
name|ELFSection
modifier|&
name|Xtor
parameter_list|)
function_decl|;
name|void
name|EmitRelocations
parameter_list|()
function_decl|;
name|void
name|EmitRelocation
parameter_list|(
name|BinaryObject
modifier|&
name|RelSec
parameter_list|,
name|ELFRelocation
modifier|&
name|Rel
parameter_list|,
name|bool
name|HasRelA
parameter_list|)
function_decl|;
name|void
name|EmitSectionHeader
parameter_list|(
name|BinaryObject
modifier|&
name|SHdrTab
parameter_list|,
specifier|const
name|ELFSection
modifier|&
name|SHdr
parameter_list|)
function_decl|;
name|void
name|EmitSectionTableStringTable
parameter_list|()
function_decl|;
name|void
name|EmitSymbol
parameter_list|(
name|BinaryObject
modifier|&
name|SymbolTable
parameter_list|,
name|ELFSym
modifier|&
name|Sym
parameter_list|)
function_decl|;
name|void
name|EmitSymbolTable
parameter_list|()
function_decl|;
name|void
name|EmitStringTable
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|ModuleName
argument_list|)
decl_stmt|;
name|void
name|OutputSectionsAndSectionTable
parameter_list|()
function_decl|;
name|void
name|RelocateField
parameter_list|(
name|BinaryObject
modifier|&
name|BO
parameter_list|,
name|uint32_t
name|Offset
parameter_list|,
name|int64_t
name|Value
parameter_list|,
name|unsigned
name|Size
parameter_list|)
function_decl|;
name|unsigned
name|SortSymbols
parameter_list|()
function_decl|;
name|CstExprResTy
name|ResolveConstantExpr
parameter_list|(
specifier|const
name|Constant
modifier|*
name|CV
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

