begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/CodeGen/RenderMachineFunction.h - MF->HTML -*- C++ -*---------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_CODEGEN_RENDERMACHINEFUNCTION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_CODEGEN_RENDERMACHINEFUNCTION_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/LiveInterval.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunctionPass.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SlotIndexes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|LiveInterval
decl_stmt|;
name|class
name|LiveIntervals
decl_stmt|;
name|class
name|MachineInstr
decl_stmt|;
name|class
name|MachineRegisterInfo
decl_stmt|;
name|class
name|RenderMachineFunction
decl_stmt|;
name|class
name|TargetRegisterClass
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|VirtRegMap
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
comment|/// \brief Helper class to process rendering options. Tries to be as lazy as
comment|///        possible.
name|class
name|MFRenderingOptions
block|{
name|public
label|:
struct|struct
name|RegClassComp
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|TargetRegisterClass
operator|*
name|trc1
operator|,
specifier|const
name|TargetRegisterClass
operator|*
name|trc2
operator|)
specifier|const
block|{
name|std
operator|::
name|string
name|trc1Name
argument_list|(
name|trc1
operator|->
name|getName
argument_list|()
argument_list|)
block|,
name|trc2Name
argument_list|(
name|trc2
operator|->
name|getName
argument_list|()
argument_list|)
block|;
return|return
name|std
operator|::
name|lexicographical_compare
argument_list|(
name|trc1Name
operator|.
name|begin
argument_list|()
argument_list|,
name|trc1Name
operator|.
name|end
argument_list|()
argument_list|,
name|trc2Name
operator|.
name|begin
argument_list|()
argument_list|,
name|trc2Name
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
block|}
struct|;
typedef|typedef
name|std
operator|::
name|set
operator|<
specifier|const
name|TargetRegisterClass
operator|*
operator|,
name|RegClassComp
operator|>
name|RegClassSet
expr_stmt|;
struct|struct
name|IntervalComp
block|{
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|LiveInterval
operator|*
name|li1
operator|,
specifier|const
name|LiveInterval
operator|*
name|li2
operator|)
specifier|const
block|{
return|return
name|li1
operator|->
name|reg
operator|<
name|li2
operator|->
name|reg
return|;
block|}
block|}
struct|;
typedef|typedef
name|std
operator|::
name|set
operator|<
specifier|const
name|LiveInterval
operator|*
operator|,
name|IntervalComp
operator|>
name|IntervalSet
expr_stmt|;
comment|/// Initialise the rendering options.
name|void
name|setup
parameter_list|(
name|MachineFunction
modifier|*
name|mf
parameter_list|,
specifier|const
name|TargetRegisterInfo
modifier|*
name|tri
parameter_list|,
name|LiveIntervals
modifier|*
name|lis
parameter_list|,
specifier|const
name|RenderMachineFunction
modifier|*
name|rmf
parameter_list|)
function_decl|;
comment|/// Clear translations of options to the current function.
name|void
name|clear
parameter_list|()
function_decl|;
comment|/// Reset any options computed for this specific rendering.
name|void
name|resetRenderSpecificOptions
parameter_list|()
function_decl|;
comment|/// Should we render the current function.
name|bool
name|shouldRenderCurrentMachineFunction
argument_list|()
specifier|const
expr_stmt|;
comment|/// Return the set of register classes to render pressure for.
specifier|const
name|RegClassSet
operator|&
name|regClasses
argument_list|()
specifier|const
expr_stmt|;
comment|/// Return the set of live intervals to render liveness for.
specifier|const
name|IntervalSet
operator|&
name|intervals
argument_list|()
specifier|const
expr_stmt|;
comment|/// Render indexes which are not associated with instructions / MBB starts.
name|bool
name|renderEmptyIndexes
argument_list|()
specifier|const
expr_stmt|;
comment|/// Return whether or not to render using SVG for fancy vertical text.
name|bool
name|fancyVerticals
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
specifier|static
name|bool
name|renderingOptionsProcessed
decl_stmt|;
specifier|static
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|mfNamesToRender
expr_stmt|;
specifier|static
name|bool
name|renderAllMFs
decl_stmt|;
specifier|static
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|string
operator|>
name|classNamesToRender
expr_stmt|;
specifier|static
name|bool
name|renderAllClasses
decl_stmt|;
specifier|static
name|std
operator|::
name|set
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
expr|>
name|intervalNumsToRender
expr_stmt|;
typedef|typedef
enum|enum
block|{
name|ExplicitOnly
init|=
literal|0
block|,
name|AllPhys
init|=
literal|1
block|,
name|VirtNoSpills
init|=
literal|2
block|,
name|VirtSpills
init|=
literal|4
block|,
name|AllVirt
init|=
literal|6
block|,
name|All
init|=
literal|7
block|}
name|IntervalTypesToRender
typedef|;
specifier|static
name|unsigned
name|intervalTypesToRender
decl_stmt|;
name|template
operator|<
name|typename
name|OutputItr
operator|>
specifier|static
name|void
name|splitComaSeperatedList
argument_list|(
argument|const std::string&s
argument_list|,
argument|OutputItr outItr
argument_list|)
expr_stmt|;
specifier|static
name|void
name|processOptions
parameter_list|()
function_decl|;
specifier|static
name|void
name|processFuncNames
parameter_list|()
function_decl|;
specifier|static
name|void
name|processRegClassNames
parameter_list|()
function_decl|;
specifier|static
name|void
name|processIntervalNumbers
parameter_list|()
function_decl|;
specifier|static
name|void
name|processIntervalRange
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|intervalRangeStr
argument_list|)
decl_stmt|;
name|MachineFunction
modifier|*
name|mf
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|*
name|tri
decl_stmt|;
name|LiveIntervals
modifier|*
name|lis
decl_stmt|;
specifier|const
name|RenderMachineFunction
modifier|*
name|rmf
decl_stmt|;
name|mutable
name|bool
name|regClassesTranslatedToCurrentFunction
decl_stmt|;
name|mutable
name|RegClassSet
name|regClassSet
decl_stmt|;
name|mutable
name|bool
name|intervalsTranslatedToCurrentFunction
decl_stmt|;
name|mutable
name|IntervalSet
name|intervalSet
decl_stmt|;
name|void
name|translateRegClassNamesToCurrentFunction
argument_list|()
specifier|const
expr_stmt|;
name|void
name|translateIntervalNumbersToCurrentFunction
argument_list|()
specifier|const
expr_stmt|;
block|}
empty_stmt|;
comment|/// \brief Provide extra information about the physical and virtual registers
comment|///        in the function being compiled.
name|class
name|TargetRegisterExtraInfo
block|{
name|public
label|:
name|TargetRegisterExtraInfo
argument_list|()
expr_stmt|;
comment|/// \brief Set up TargetRegisterExtraInfo with pointers to necessary
comment|///        sources of information.
name|void
name|setup
parameter_list|(
name|MachineFunction
modifier|*
name|mf
parameter_list|,
name|MachineRegisterInfo
modifier|*
name|mri
parameter_list|,
specifier|const
name|TargetRegisterInfo
modifier|*
name|tri
parameter_list|,
name|LiveIntervals
modifier|*
name|lis
parameter_list|)
function_decl|;
comment|/// \brief Recompute tables for changed function.
name|void
name|reset
parameter_list|()
function_decl|;
comment|/// \brief Free all tables in TargetRegisterExtraInfo.
name|void
name|clear
parameter_list|()
function_decl|;
comment|/// \brief Maximum number of registers from trc which alias reg.
name|unsigned
name|getWorst
argument_list|(
name|unsigned
name|reg
argument_list|,
specifier|const
name|TargetRegisterClass
operator|*
name|trc
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Returns the number of allocable registers in trc.
name|unsigned
name|getCapacity
argument_list|(
specifier|const
name|TargetRegisterClass
operator|*
name|trc
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Return the number of registers of class trc that may be
comment|///        needed at slot i.
name|unsigned
name|getPressureAtSlot
argument_list|(
specifier|const
name|TargetRegisterClass
operator|*
name|trc
argument_list|,
name|SlotIndex
name|i
argument_list|)
decl|const
decl_stmt|;
comment|/// \brief Return true if the number of registers of type trc that may be
comment|///        needed at slot i is greater than the capacity of trc.
name|bool
name|classOverCapacityAtSlot
argument_list|(
specifier|const
name|TargetRegisterClass
operator|*
name|trc
argument_list|,
name|SlotIndex
name|i
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|MachineFunction
modifier|*
name|mf
decl_stmt|;
name|MachineRegisterInfo
modifier|*
name|mri
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|*
name|tri
decl_stmt|;
name|LiveIntervals
modifier|*
name|lis
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|TargetRegisterClass
operator|*
operator|,
name|unsigned
operator|>
name|WorstMapLine
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|TargetRegisterClass
operator|*
operator|,
name|WorstMapLine
operator|>
name|VRWorstMap
expr_stmt|;
name|VRWorstMap
name|vrWorst
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|unsigned
operator|,
name|WorstMapLine
operator|>
name|PRWorstMap
expr_stmt|;
name|PRWorstMap
name|prWorst
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|TargetRegisterClass
operator|*
operator|,
name|unsigned
operator|>
name|CapacityMap
expr_stmt|;
name|CapacityMap
name|capacityMap
decl_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|TargetRegisterClass
operator|*
operator|,
name|unsigned
operator|>
name|PressureMapLine
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|SlotIndex
operator|,
name|PressureMapLine
operator|>
name|PressureMap
expr_stmt|;
name|PressureMap
name|pressureMap
decl_stmt|;
name|bool
name|mapsPopulated
decl_stmt|;
comment|/// \brief Initialise the 'worst' table.
name|void
name|initWorst
parameter_list|()
function_decl|;
comment|/// \brief Initialise the 'capacity' table.
name|void
name|initCapacity
parameter_list|()
function_decl|;
comment|/// \brief Initialise/Reset the 'pressure' and live states tables.
name|void
name|resetPressureAndLiveStates
parameter_list|()
function_decl|;
block|}
empty_stmt|;
comment|/// \brief Render MachineFunction objects and related information to a HTML
comment|///        page.
name|class
name|RenderMachineFunction
range|:
name|public
name|MachineFunctionPass
block|{
name|public
operator|:
specifier|static
name|char
name|ID
block|;
name|RenderMachineFunction
argument_list|()
operator|:
name|MachineFunctionPass
argument_list|(
argument|ID
argument_list|)
block|{}
name|virtual
name|void
name|getAnalysisUsage
argument_list|(
argument|AnalysisUsage&au
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|runOnMachineFunction
argument_list|(
name|MachineFunction
operator|&
name|fn
argument_list|)
block|;
name|virtual
name|void
name|releaseMemory
argument_list|()
block|;
name|void
name|rememberUseDefs
argument_list|(
specifier|const
name|LiveInterval
operator|*
name|li
argument_list|)
block|;
name|void
name|rememberSpills
argument_list|(
specifier|const
name|LiveInterval
operator|*
name|li
argument_list|,
specifier|const
name|std
operator|::
name|vector
operator|<
name|LiveInterval
operator|*
operator|>
operator|&
name|spills
argument_list|)
block|;
name|bool
name|isSpill
argument_list|(
argument|const LiveInterval *li
argument_list|)
specifier|const
block|;
comment|/// \brief Render this machine function to HTML.
comment|///
comment|/// @param renderContextStr This parameter will be included in the top of
comment|///                         the html file to explain where (in the
comment|///                         codegen pipeline) this function was rendered
comment|///                         from. Set it to something like
comment|///                         "Pre-register-allocation".
comment|/// @param vrm              If non-null the VRM will be queried to determine
comment|///                         whether a virtual register was allocated to a
comment|///                         physical register or spilled.
comment|/// @param renderFilePrefix This string will be appended to the function
comment|///                         name (before the output file suffix) to enable
comment|///                         multiple renderings from the same function.
name|void
name|renderMachineFunction
argument_list|(
specifier|const
name|char
operator|*
name|renderContextStr
argument_list|,
specifier|const
name|VirtRegMap
operator|*
name|vrm
operator|=
literal|0
argument_list|,
specifier|const
name|char
operator|*
name|renderSuffix
operator|=
literal|0
argument_list|)
block|;
name|private
operator|:
name|class
name|Spacer
block|;
name|friend
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|os
expr|,
specifier|const
name|Spacer
operator|&
name|s
operator|)
block|;
name|std
operator|::
name|string
name|fqn
block|;
name|MachineFunction
operator|*
name|mf
block|;
name|MachineRegisterInfo
operator|*
name|mri
block|;
specifier|const
name|TargetRegisterInfo
operator|*
name|tri
block|;
name|LiveIntervals
operator|*
name|lis
block|;
name|SlotIndexes
operator|*
name|sis
block|;
specifier|const
name|VirtRegMap
operator|*
name|vrm
block|;
name|TargetRegisterExtraInfo
name|trei
block|;
name|MFRenderingOptions
name|ro
block|;
comment|// Utilities.
typedef|typedef
enum|enum
block|{
name|Dead
block|,
name|Defined
block|,
name|Used
block|,
name|AliveReg
block|,
name|AliveStack
decl|}
name|LiveState
empty_stmt|;
name|LiveState
name|getLiveStateAt
argument_list|(
specifier|const
name|LiveInterval
operator|*
name|li
argument_list|,
name|SlotIndex
name|i
argument_list|)
block|const;
typedef|typedef
enum|enum
block|{
name|Zero
block|,
name|Low
block|,
name|High
decl|}
name|PressureState
empty_stmt|;
name|PressureState
name|getPressureStateAt
argument_list|(
specifier|const
name|TargetRegisterClass
operator|*
name|trc
argument_list|,
name|SlotIndex
name|i
argument_list|)
block|const;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|LiveInterval
operator|*
operator|,
name|std
operator|::
name|set
operator|<
specifier|const
name|LiveInterval
operator|*
operator|>
expr|>
name|SpillIntervals
expr_stmt|;
name|SpillIntervals
name|spillIntervals
block|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|LiveInterval
operator|*
operator|,
specifier|const
name|LiveInterval
operator|*
operator|>
name|SpillForMap
expr_stmt|;
name|SpillForMap
name|spillFor
block|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|SlotIndex
operator|>
name|SlotSet
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
specifier|const
name|LiveInterval
operator|*
operator|,
name|SlotSet
operator|>
name|UseDefs
expr_stmt|;
name|UseDefs
name|useDefs
block|;
comment|// ---------- Rendering methods ----------
comment|/// For inserting spaces when pretty printing.
name|class
name|Spacer
block|{
name|public
label|:
name|explicit
name|Spacer
argument_list|(
argument|unsigned numSpaces
argument_list|)
block|:
name|ns
argument_list|(
argument|numSpaces
argument_list|)
block|{
block|}
name|Spacer
name|operator
block|+
argument_list|(
specifier|const
name|Spacer
operator|&
name|o
argument_list|)
block|const
block|{
return|return
name|Spacer
argument_list|(
name|ns
operator|+
name|o
operator|.
name|ns
argument_list|)
return|;
block|}
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|os
argument_list|)
block|const;
name|private
label|:
name|unsigned
name|ns
block|;
block|}
enum|;
name|Spacer
name|s
argument_list|(
name|unsigned
name|ns
argument_list|)
block|const;
name|template
decl|<
name|typename
name|Iterator
decl|>
name|std
decl|::
name|string
name|escapeChars
argument_list|(
name|Iterator
name|sBegin
argument_list|,
name|Iterator
name|sEnd
argument_list|)
decl|const
empty_stmt|;
comment|/// \brief Render a machine instruction.
name|void
name|renderMachineInstr
argument_list|(
name|raw_ostream
operator|&
name|os
argument_list|,
specifier|const
name|MachineInstr
operator|*
name|mi
argument_list|)
block|const;
comment|/// \brief Render vertical text.
name|template
decl|<
name|typename
name|T
decl|>
name|void
name|renderVertical
argument_list|(
specifier|const
name|Spacer
operator|&
name|indent
argument_list|,
name|raw_ostream
operator|&
name|os
argument_list|,
specifier|const
name|T
operator|&
name|t
argument_list|)
decl|const
empty_stmt|;
comment|/// \brief Insert CSS layout info.
name|void
name|insertCSS
argument_list|(
specifier|const
name|Spacer
operator|&
name|indent
argument_list|,
name|raw_ostream
operator|&
name|os
argument_list|)
block|const;
comment|/// \brief Render a brief summary of the function (including rendering
comment|///        context).
name|void
name|renderFunctionSummary
argument_list|(
specifier|const
name|Spacer
operator|&
name|indent
argument_list|,
name|raw_ostream
operator|&
name|os
argument_list|,
specifier|const
name|char
operator|*
specifier|const
name|renderContextStr
argument_list|)
block|const;
comment|/// \brief Render a legend for the pressure table.
name|void
name|renderPressureTableLegend
argument_list|(
specifier|const
name|Spacer
operator|&
name|indent
argument_list|,
name|raw_ostream
operator|&
name|os
argument_list|)
block|const;
comment|/// \brief Render a consecutive set of HTML cells of the same class using
comment|/// the colspan attribute for run-length encoding.
name|template
decl|<
name|typename
name|CellType
decl|>
name|void
name|renderCellsWithRLE
argument_list|(
specifier|const
name|Spacer
operator|&
name|indent
argument_list|,
name|raw_ostream
operator|&
name|os
argument_list|,
specifier|const
name|std
operator|::
name|pair
operator|<
name|CellType
argument_list|,
name|unsigned
operator|>
operator|&
name|rleAccumulator
argument_list|,
specifier|const
name|std
operator|::
name|map
operator|<
name|CellType
argument_list|,
name|std
operator|::
name|string
operator|>
operator|&
name|cellTypeStrs
argument_list|)
decl|const
empty_stmt|;
comment|/// \brief Render code listing, potentially with register pressure
comment|///        and live intervals shown alongside.
name|void
name|renderCodeTablePlusPI
argument_list|(
specifier|const
name|Spacer
operator|&
name|indent
argument_list|,
name|raw_ostream
operator|&
name|os
argument_list|)
block|const;
comment|/// \brief Render the HTML page representing the MachineFunction.
name|void
name|renderFunctionPage
argument_list|(
name|raw_ostream
operator|&
name|os
argument_list|,
specifier|const
name|char
operator|*
specifier|const
name|renderContextStr
argument_list|)
block|const;
name|std
decl|::
name|string
name|escapeChars
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|s
argument_list|)
decl|const
empty_stmt|;
block|}
enum|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* LLVM_CODEGEN_RENDERMACHINEFUNCTION_H */
end_comment

end_unit

