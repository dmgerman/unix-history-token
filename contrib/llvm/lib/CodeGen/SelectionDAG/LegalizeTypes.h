begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LegalizeTypes.h - Definition of the DAG Type Legalizer class ------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the DAGTypeLegalizer class.  This is a private interface
end_comment

begin_comment
comment|// shared between the code that implements the SelectionDAG::LegalizeTypes
end_comment

begin_comment
comment|// method.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SELECTIONDAG_LEGALIZETYPES_H
end_ifndef

begin_define
define|#
directive|define
name|SELECTIONDAG_LEGALIZETYPES_H
end_define

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"legalize-types"
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SelectionDAG.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|//===----------------------------------------------------------------------===//
comment|/// DAGTypeLegalizer - This takes an arbitrary SelectionDAG as input and hacks
comment|/// on it until only value types the target machine can handle are left.  This
comment|/// involves promoting small sizes to large sizes or splitting up large values
comment|/// into small values.
comment|///
name|class
name|LLVM_LIBRARY_VISIBILITY
name|DAGTypeLegalizer
block|{
specifier|const
name|TargetLowering
modifier|&
name|TLI
decl_stmt|;
name|SelectionDAG
modifier|&
name|DAG
decl_stmt|;
name|public
label|:
comment|// NodeIdFlags - This pass uses the NodeId on the SDNodes to hold information
comment|// about the state of the node.  The enum has all the values.
enum|enum
name|NodeIdFlags
block|{
comment|/// ReadyToProcess - All operands have been processed, so this node is ready
comment|/// to be handled.
name|ReadyToProcess
init|=
literal|0
block|,
comment|/// NewNode - This is a new node, not before seen, that was created in the
comment|/// process of legalizing some other node.
name|NewNode
init|=
operator|-
literal|1
block|,
comment|/// Unanalyzed - This node's ID needs to be set to the number of its
comment|/// unprocessed operands.
name|Unanalyzed
init|=
operator|-
literal|2
block|,
comment|/// Processed - This is a node that has already been processed.
name|Processed
init|=
operator|-
literal|3
comment|// 1+ - This is a node which has this many unprocessed operands.
block|}
enum|;
name|private
label|:
comment|/// ValueTypeActions - This is a bitvector that contains two bits for each
comment|/// simple value type, where the two bits correspond to the LegalizeAction
comment|/// enum from TargetLowering.  This can be queried with "getTypeAction(VT)".
name|TargetLowering
operator|::
name|ValueTypeActionImpl
name|ValueTypeActions
expr_stmt|;
comment|/// getTypeAction - Return how we should legalize values of this type.
name|TargetLowering
operator|::
name|LegalizeTypeAction
name|getTypeAction
argument_list|(
argument|EVT VT
argument_list|)
specifier|const
block|{
return|return
name|TLI
operator|.
name|getTypeAction
argument_list|(
operator|*
name|DAG
operator|.
name|getContext
argument_list|()
argument_list|,
name|VT
argument_list|)
return|;
block|}
comment|/// isTypeLegal - Return true if this type is legal on this target.
name|bool
name|isTypeLegal
argument_list|(
name|EVT
name|VT
argument_list|)
decl|const
block|{
return|return
name|TLI
operator|.
name|getTypeAction
argument_list|(
operator|*
name|DAG
operator|.
name|getContext
argument_list|()
argument_list|,
name|VT
argument_list|)
operator|==
name|TargetLowering
operator|::
name|TypeLegal
return|;
block|}
comment|/// IgnoreNodeResults - Pretend all of this node's results are legal.
name|bool
name|IgnoreNodeResults
argument_list|(
name|SDNode
operator|*
name|N
argument_list|)
decl|const
block|{
return|return
name|N
operator|->
name|getOpcode
argument_list|()
operator|==
name|ISD
operator|::
name|TargetConstant
return|;
block|}
comment|/// PromotedIntegers - For integer nodes that are below legal width, this map
comment|/// indicates what promoted value to use.
name|SmallDenseMap
operator|<
name|SDValue
operator|,
name|SDValue
operator|,
literal|8
operator|>
name|PromotedIntegers
expr_stmt|;
comment|/// ExpandedIntegers - For integer nodes that need to be expanded this map
comment|/// indicates which operands are the expanded version of the input.
name|SmallDenseMap
operator|<
name|SDValue
operator|,
name|std
operator|::
name|pair
operator|<
name|SDValue
operator|,
name|SDValue
operator|>
operator|,
literal|8
operator|>
name|ExpandedIntegers
expr_stmt|;
comment|/// SoftenedFloats - For floating point nodes converted to integers of
comment|/// the same size, this map indicates the converted value to use.
name|SmallDenseMap
operator|<
name|SDValue
operator|,
name|SDValue
operator|,
literal|8
operator|>
name|SoftenedFloats
expr_stmt|;
comment|/// ExpandedFloats - For float nodes that need to be expanded this map
comment|/// indicates which operands are the expanded version of the input.
name|SmallDenseMap
operator|<
name|SDValue
operator|,
name|std
operator|::
name|pair
operator|<
name|SDValue
operator|,
name|SDValue
operator|>
operator|,
literal|8
operator|>
name|ExpandedFloats
expr_stmt|;
comment|/// ScalarizedVectors - For nodes that are<1 x ty>, this map indicates the
comment|/// scalar value of type 'ty' to use.
name|SmallDenseMap
operator|<
name|SDValue
operator|,
name|SDValue
operator|,
literal|8
operator|>
name|ScalarizedVectors
expr_stmt|;
comment|/// SplitVectors - For nodes that need to be split this map indicates
comment|/// which operands are the expanded version of the input.
name|SmallDenseMap
operator|<
name|SDValue
operator|,
name|std
operator|::
name|pair
operator|<
name|SDValue
operator|,
name|SDValue
operator|>
operator|,
literal|8
operator|>
name|SplitVectors
expr_stmt|;
comment|/// WidenedVectors - For vector nodes that need to be widened, indicates
comment|/// the widened value to use.
name|SmallDenseMap
operator|<
name|SDValue
operator|,
name|SDValue
operator|,
literal|8
operator|>
name|WidenedVectors
expr_stmt|;
comment|/// ReplacedValues - For values that have been replaced with another,
comment|/// indicates the replacement value to use.
name|SmallDenseMap
operator|<
name|SDValue
operator|,
name|SDValue
operator|,
literal|8
operator|>
name|ReplacedValues
expr_stmt|;
comment|/// Worklist - This defines a worklist of nodes to process.  In order to be
comment|/// pushed onto this worklist, all operands of a node must have already been
comment|/// processed.
name|SmallVector
operator|<
name|SDNode
operator|*
operator|,
literal|128
operator|>
name|Worklist
expr_stmt|;
name|public
label|:
name|explicit
name|DAGTypeLegalizer
argument_list|(
name|SelectionDAG
operator|&
name|dag
argument_list|)
operator|:
name|TLI
argument_list|(
name|dag
operator|.
name|getTargetLoweringInfo
argument_list|()
argument_list|)
operator|,
name|DAG
argument_list|(
name|dag
argument_list|)
operator|,
name|ValueTypeActions
argument_list|(
argument|TLI.getValueTypeActions()
argument_list|)
block|{
name|assert
argument_list|(
name|MVT
operator|::
name|LAST_VALUETYPE
operator|<=
name|MVT
operator|::
name|MAX_ALLOWED_VALUETYPE
operator|&&
literal|"Too many value types for ValueTypeActions to hold!"
argument_list|)
block|;   }
comment|/// run - This is the main entry point for the type legalizer.  This does a
comment|/// top-down traversal of the dag, legalizing types as it goes.  Returns
comment|/// "true" if it made any changes.
name|bool
name|run
argument_list|()
expr_stmt|;
name|void
name|NoteDeletion
parameter_list|(
name|SDNode
modifier|*
name|Old
parameter_list|,
name|SDNode
modifier|*
name|New
parameter_list|)
block|{
name|ExpungeNode
argument_list|(
name|Old
argument_list|)
expr_stmt|;
name|ExpungeNode
argument_list|(
name|New
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|Old
operator|->
name|getNumValues
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
name|ReplacedValues
index|[
name|SDValue
argument_list|(
name|Old
argument_list|,
name|i
argument_list|)
index|]
operator|=
name|SDValue
argument_list|(
name|New
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|SelectionDAG
operator|&
name|getDAG
argument_list|()
specifier|const
block|{
return|return
name|DAG
return|;
block|}
name|private
label|:
name|SDNode
modifier|*
name|AnalyzeNewNode
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|AnalyzeNewValue
parameter_list|(
name|SDValue
modifier|&
name|Val
parameter_list|)
function_decl|;
name|void
name|ExpungeNode
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|PerformExpensiveChecks
parameter_list|()
function_decl|;
name|void
name|RemapValue
parameter_list|(
name|SDValue
modifier|&
name|N
parameter_list|)
function_decl|;
comment|// Common routines.
name|SDValue
name|BitConvertToInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|)
function_decl|;
name|SDValue
name|BitConvertVectorToIntegerVector
parameter_list|(
name|SDValue
name|Op
parameter_list|)
function_decl|;
name|SDValue
name|CreateStackStoreLoad
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|EVT
name|DestVT
parameter_list|)
function_decl|;
name|bool
name|CustomLowerNode
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|EVT
name|VT
parameter_list|,
name|bool
name|LegalizeResult
parameter_list|)
function_decl|;
name|bool
name|CustomWidenLowerNode
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
comment|/// DisintegrateMERGE_VALUES - Replace each result of the given MERGE_VALUES
comment|/// node with the corresponding input operand, except for the result 'ResNo',
comment|/// for which the corresponding input operand is returned.
name|SDValue
name|DisintegrateMERGE_VALUES
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|GetVectorElementPointer
parameter_list|(
name|SDValue
name|VecPtr
parameter_list|,
name|EVT
name|EltVT
parameter_list|,
name|SDValue
name|Index
parameter_list|)
function_decl|;
name|SDValue
name|JoinIntegers
parameter_list|(
name|SDValue
name|Lo
parameter_list|,
name|SDValue
name|Hi
parameter_list|)
function_decl|;
name|SDValue
name|LibCallify
argument_list|(
name|RTLIB
operator|::
name|Libcall
name|LC
argument_list|,
name|SDNode
operator|*
name|N
argument_list|,
name|bool
name|isSigned
argument_list|)
decl_stmt|;
name|std
operator|::
name|pair
operator|<
name|SDValue
operator|,
name|SDValue
operator|>
name|ExpandChainLibCall
argument_list|(
argument|RTLIB::Libcall LC
argument_list|,
argument|SDNode *Node
argument_list|,
argument|bool isSigned
argument_list|)
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|SDValue
operator|,
name|SDValue
operator|>
name|ExpandAtomic
argument_list|(
name|SDNode
operator|*
name|Node
argument_list|)
expr_stmt|;
name|SDValue
name|PromoteTargetBoolean
parameter_list|(
name|SDValue
name|Bool
parameter_list|,
name|EVT
name|VT
parameter_list|)
function_decl|;
name|void
name|ReplaceValueWith
parameter_list|(
name|SDValue
name|From
parameter_list|,
name|SDValue
name|To
parameter_list|)
function_decl|;
name|void
name|SplitInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|EVT
name|LoVT
parameter_list|,
name|EVT
name|HiVT
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Integer Promotion Support: LegalizeIntegerTypes.cpp
comment|//===--------------------------------------------------------------------===//
comment|/// GetPromotedInteger - Given a processed operand Op which was promoted to a
comment|/// larger integer type, this returns the promoted value.  The low bits of the
comment|/// promoted value corresponding to the original type are exactly equal to Op.
comment|/// The extra bits contain rubbish, so the promoted value may need to be zero-
comment|/// or sign-extended from the original type before it is usable (the helpers
comment|/// SExtPromotedInteger and ZExtPromotedInteger can do this for you).
comment|/// For example, if Op is an i16 and was promoted to an i32, then this method
comment|/// returns an i32, the lower 16 bits of which coincide with Op, and the upper
comment|/// 16 bits of which contain rubbish.
name|SDValue
name|GetPromotedInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|)
block|{
name|SDValue
modifier|&
name|PromotedOp
init|=
name|PromotedIntegers
index|[
name|Op
index|]
decl_stmt|;
name|RemapValue
argument_list|(
name|PromotedOp
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|PromotedOp
operator|.
name|getNode
argument_list|()
operator|&&
literal|"Operand wasn't promoted?"
argument_list|)
expr_stmt|;
return|return
name|PromotedOp
return|;
block|}
name|void
name|SetPromotedInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
name|Result
parameter_list|)
function_decl|;
comment|/// SExtPromotedInteger - Get a promoted operand and sign extend it to the
comment|/// final size.
name|SDValue
name|SExtPromotedInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|)
block|{
name|EVT
name|OldVT
init|=
name|Op
operator|.
name|getValueType
argument_list|()
decl_stmt|;
name|DebugLoc
name|dl
init|=
name|Op
operator|.
name|getDebugLoc
argument_list|()
decl_stmt|;
name|Op
operator|=
name|GetPromotedInteger
argument_list|(
name|Op
argument_list|)
expr_stmt|;
return|return
name|DAG
operator|.
name|getNode
argument_list|(
name|ISD
operator|::
name|SIGN_EXTEND_INREG
argument_list|,
name|dl
argument_list|,
name|Op
operator|.
name|getValueType
argument_list|()
argument_list|,
name|Op
argument_list|,
name|DAG
operator|.
name|getValueType
argument_list|(
name|OldVT
argument_list|)
argument_list|)
return|;
block|}
comment|/// ZExtPromotedInteger - Get a promoted operand and zero extend it to the
comment|/// final size.
name|SDValue
name|ZExtPromotedInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|)
block|{
name|EVT
name|OldVT
init|=
name|Op
operator|.
name|getValueType
argument_list|()
decl_stmt|;
name|DebugLoc
name|dl
init|=
name|Op
operator|.
name|getDebugLoc
argument_list|()
decl_stmt|;
name|Op
operator|=
name|GetPromotedInteger
argument_list|(
name|Op
argument_list|)
expr_stmt|;
return|return
name|DAG
operator|.
name|getZeroExtendInReg
argument_list|(
name|Op
argument_list|,
name|dl
argument_list|,
name|OldVT
operator|.
name|getScalarType
argument_list|()
argument_list|)
return|;
block|}
comment|// Integer Result Promotion.
name|void
name|PromoteIntegerResult
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_MERGE_VALUES
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_AssertSext
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_AssertZext
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_Atomic0
parameter_list|(
name|AtomicSDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_Atomic1
parameter_list|(
name|AtomicSDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_Atomic2
parameter_list|(
name|AtomicSDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_EXTRACT_SUBVECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_VECTOR_SHUFFLE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_BUILD_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SCALAR_TO_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_INSERT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_CONCAT_VECTORS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_BSWAP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_BUILD_PAIR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_Constant
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_CONVERT_RNDSAT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_CTLZ
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_CTPOP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_CTTZ
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_EXTRACT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_FP_TO_XINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_FP32_TO_FP16
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_INT_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_LOAD
parameter_list|(
name|LoadSDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_Overflow
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SADDSUBO
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SDIV
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_VSELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SHL
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SimpleIntBinOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SIGN_EXTEND_INREG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SRA
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_SRL
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_TRUNCATE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_UADDSUBO
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_UDIV
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_UNDEF
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_VAARG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntRes_XMULO
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
comment|// Integer Operand Promotion.
name|bool
name|PromoteIntegerOperand
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OperandNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_ANY_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_ATOMIC_STORE
parameter_list|(
name|AtomicSDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_BUILD_PAIR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_BR_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_BRCOND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_BUILD_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_CONVERT_RNDSAT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_INSERT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_EXTRACT_ELEMENT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_EXTRACT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_CONCAT_VECTORS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_SCALAR_TO_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_SELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_VSETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_Shift
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_SIGN_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_SINT_TO_FP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_STORE
parameter_list|(
name|StoreSDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_TRUNCATE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_UINT_TO_FP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|PromoteIntOp_ZERO_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|PromoteSetCCOperands
argument_list|(
name|SDValue
operator|&
name|LHS
argument_list|,
name|SDValue
operator|&
name|RHS
argument_list|,
name|ISD
operator|::
name|CondCode
name|Code
argument_list|)
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// Integer Expansion Support: LegalizeIntegerTypes.cpp
comment|//===--------------------------------------------------------------------===//
comment|/// GetExpandedInteger - Given a processed operand Op which was expanded into
comment|/// two integers of half the size, this returns the two halves.  The low bits
comment|/// of Op are exactly equal to the bits of Lo; the high bits exactly equal Hi.
comment|/// For example, if Op is an i64 which was expanded into two i32's, then this
comment|/// method returns the two i32's, with Lo being equal to the lower 32 bits of
comment|/// Op, and Hi being equal to the upper 32 bits.
name|void
name|GetExpandedInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SetExpandedInteger
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
name|Lo
parameter_list|,
name|SDValue
name|Hi
parameter_list|)
function_decl|;
comment|// Integer Result Expansion.
name|void
name|ExpandIntegerResult
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_MERGE_VALUES
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_ANY_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_AssertSext
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_AssertZext
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_Constant
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_CTLZ
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_CTPOP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_CTTZ
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_LOAD
parameter_list|(
name|LoadSDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_SIGN_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_SIGN_EXTEND_INREG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_TRUNCATE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_ZERO_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_FP_TO_SINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_FP_TO_UINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_Logical
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_ADDSUB
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_ADDSUBC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_ADDSUBE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_BSWAP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_MUL
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_SDIV
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_SREM
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_UDIV
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_UREM
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_Shift
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_SADDSUBO
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_UADDSUBO
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_XMULO
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandIntRes_ATOMIC_LOAD
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandShiftByConstant
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|Amt
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|bool
name|ExpandShiftWithKnownAmountBit
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|bool
name|ExpandShiftWithUnknownAmountBit
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
comment|// Integer Operand Expansion.
name|bool
name|ExpandIntegerOperand
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OperandNo
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_BR_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_BUILD_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_EXTRACT_ELEMENT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_Shift
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_SINT_TO_FP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_STORE
parameter_list|(
name|StoreSDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_TRUNCATE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_UINT_TO_FP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_RETURNADDR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandIntOp_ATOMIC_STORE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|IntegerExpandSetCCOperands
argument_list|(
name|SDValue
operator|&
name|NewLHS
argument_list|,
name|SDValue
operator|&
name|NewRHS
argument_list|,
name|ISD
operator|::
name|CondCode
operator|&
name|CCCode
argument_list|,
name|DebugLoc
name|dl
argument_list|)
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// Float to Integer Conversion Support: LegalizeFloatTypes.cpp
comment|//===--------------------------------------------------------------------===//
comment|/// GetSoftenedFloat - Given a processed operand Op which was converted to an
comment|/// integer of the same size, this returns the integer.  The integer contains
comment|/// exactly the same bits as Op - only the type changed.  For example, if Op
comment|/// is an f32 which was softened to an i32, then this method returns an i32,
comment|/// the bits of which coincide with those of Op.
name|SDValue
name|GetSoftenedFloat
parameter_list|(
name|SDValue
name|Op
parameter_list|)
block|{
name|SDValue
modifier|&
name|SoftenedOp
init|=
name|SoftenedFloats
index|[
name|Op
index|]
decl_stmt|;
name|RemapValue
argument_list|(
name|SoftenedOp
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|SoftenedOp
operator|.
name|getNode
argument_list|()
operator|&&
literal|"Operand wasn't converted to integer?"
argument_list|)
expr_stmt|;
return|return
name|SoftenedOp
return|;
block|}
name|void
name|SetSoftenedFloat
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
name|Result
parameter_list|)
function_decl|;
comment|// Result Float to Integer Conversion.
name|void
name|SoftenFloatResult
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_MERGE_VALUES
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_BUILD_PAIR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_ConstantFP
parameter_list|(
name|ConstantFPSDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_EXTRACT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FABS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FADD
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FCEIL
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FCOPYSIGN
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FCOS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FDIV
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FEXP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FEXP2
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FFLOOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FLOG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FLOG2
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FLOG10
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FMA
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FMUL
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FNEARBYINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FNEG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FP_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FP16_TO_FP32
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FP_ROUND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FPOW
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FPOWI
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FREM
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FRINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FSIN
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FSQRT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FSUB
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_FTRUNC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_LOAD
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_SELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_UNDEF
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_VAARG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatRes_XINT_TO_FP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|// Operand Float to Integer Conversion.
name|bool
name|SoftenFloatOperand
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_BR_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_FP_ROUND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_FP_TO_SINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_FP_TO_UINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_FP32_TO_FP16
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SoftenFloatOp_STORE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Float Expansion Support: LegalizeFloatTypes.cpp
comment|//===--------------------------------------------------------------------===//
comment|/// GetExpandedFloat - Given a processed operand Op which was expanded into
comment|/// two floating point values of half the size, this returns the two halves.
comment|/// The low bits of Op are exactly equal to the bits of Lo; the high bits
comment|/// exactly equal Hi.  For example, if Op is a ppcf128 which was expanded
comment|/// into two f64's, then this method returns the two f64's, with Lo being
comment|/// equal to the lower 64 bits of Op, and Hi to the upper 64 bits.
name|void
name|GetExpandedFloat
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SetExpandedFloat
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
name|Lo
parameter_list|,
name|SDValue
name|Hi
parameter_list|)
function_decl|;
comment|// Float Result Expansion.
name|void
name|ExpandFloatResult
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_ConstantFP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FABS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FADD
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FCEIL
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FCOPYSIGN
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FCOS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FDIV
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FEXP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FEXP2
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FFLOOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FLOG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FLOG2
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FLOG10
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FMA
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FMUL
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FNEARBYINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FNEG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FP_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FPOW
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FPOWI
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FREM
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FRINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FSIN
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FSQRT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FSUB
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_FTRUNC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_LOAD
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandFloatRes_XINT_TO_FP
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
comment|// Float Operand Expansion.
name|bool
name|ExpandFloatOperand
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OperandNo
parameter_list|)
function_decl|;
name|SDValue
name|ExpandFloatOp_BR_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandFloatOp_FP_ROUND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandFloatOp_FP_TO_SINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandFloatOp_FP_TO_UINT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandFloatOp_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandFloatOp_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandFloatOp_STORE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|void
name|FloatExpandSetCCOperands
argument_list|(
name|SDValue
operator|&
name|NewLHS
argument_list|,
name|SDValue
operator|&
name|NewRHS
argument_list|,
name|ISD
operator|::
name|CondCode
operator|&
name|CCCode
argument_list|,
name|DebugLoc
name|dl
argument_list|)
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// Scalarization Support: LegalizeVectorTypes.cpp
comment|//===--------------------------------------------------------------------===//
comment|/// GetScalarizedVector - Given a processed one-element vector Op which was
comment|/// scalarized to its element type, this returns the element.  For example,
comment|/// if Op is a v1i32, Op =< i32 val>, this method returns val, an i32.
name|SDValue
name|GetScalarizedVector
parameter_list|(
name|SDValue
name|Op
parameter_list|)
block|{
name|SDValue
modifier|&
name|ScalarizedOp
init|=
name|ScalarizedVectors
index|[
name|Op
index|]
decl_stmt|;
name|RemapValue
argument_list|(
name|ScalarizedOp
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ScalarizedOp
operator|.
name|getNode
argument_list|()
operator|&&
literal|"Operand wasn't scalarized?"
argument_list|)
expr_stmt|;
return|return
name|ScalarizedOp
return|;
block|}
name|void
name|SetScalarizedVector
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
name|Result
parameter_list|)
function_decl|;
comment|// Vector Result Scalarization:<1 x ty> -> ty.
name|void
name|ScalarizeVectorResult
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_MERGE_VALUES
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_BinOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_TernaryOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_UnaryOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_InregOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_BUILD_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_CONVERT_RNDSAT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_EXTRACT_SUBVECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_FP_ROUND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_FPOWI
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_INSERT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_LOAD
parameter_list|(
name|LoadSDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_SCALAR_TO_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_SIGN_EXTEND_INREG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_VSELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_SELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_UNDEF
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_VECTOR_SHUFFLE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecRes_VSETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|// Vector Operand Scalarization:<1 x ty> -> ty.
name|bool
name|ScalarizeVectorOperand
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecOp_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecOp_EXTEND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecOp_CONCAT_VECTORS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecOp_EXTRACT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ScalarizeVecOp_STORE
parameter_list|(
name|StoreSDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Vector Splitting Support: LegalizeVectorTypes.cpp
comment|//===--------------------------------------------------------------------===//
comment|/// GetSplitVector - Given a processed vector Op which was split into vectors
comment|/// of half the size, this method returns the halves.  The first elements of
comment|/// Op coincide with the elements of Lo; the remaining elements of Op coincide
comment|/// with the elements of Hi: Op is what you would get by concatenating Lo and
comment|/// Hi.  For example, if Op is a v8i32 that was split into two v4i32's, then
comment|/// this method returns the two v4i32's, with Lo corresponding to the first 4
comment|/// elements of Op, and Hi to the last 4 elements.
name|void
name|GetSplitVector
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SetSplitVector
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
name|Lo
parameter_list|,
name|SDValue
name|Hi
parameter_list|)
function_decl|;
comment|// Vector Result Splitting:<128 x ty> -> 2 x<64 x ty>.
name|void
name|SplitVectorResult
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_BinOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_TernaryOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_UnaryOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_InregOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_BUILD_PAIR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_BUILD_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_CONCAT_VECTORS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_EXTRACT_SUBVECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_FPOWI
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_INSERT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_LOAD
parameter_list|(
name|LoadSDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_SCALAR_TO_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_SIGN_EXTEND_INREG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_UNDEF
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitVecRes_VECTOR_SHUFFLE
parameter_list|(
name|ShuffleVectorSDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
comment|// Vector Operand Splitting:<128 x ty> -> 2 x<64 x ty>.
name|bool
name|SplitVectorOperand
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_VSELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_UnaryOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_EXTRACT_SUBVECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_EXTRACT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_STORE
parameter_list|(
name|StoreSDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_CONCAT_VECTORS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_TRUNCATE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_VSETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|SplitVecOp_FP_ROUND
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Vector Widening Support: LegalizeVectorTypes.cpp
comment|//===--------------------------------------------------------------------===//
comment|/// GetWidenedVector - Given a processed vector Op which was widened into a
comment|/// larger vector, this method returns the larger vector.  The elements of
comment|/// the returned vector consist of the elements of Op followed by elements
comment|/// containing rubbish.  For example, if Op is a v2i32 that was widened to a
comment|/// v4i32, then this method returns a v4i32 for which the first two elements
comment|/// are the same as those of Op, while the last two elements contain rubbish.
name|SDValue
name|GetWidenedVector
parameter_list|(
name|SDValue
name|Op
parameter_list|)
block|{
name|SDValue
modifier|&
name|WidenedOp
init|=
name|WidenedVectors
index|[
name|Op
index|]
decl_stmt|;
name|RemapValue
argument_list|(
name|WidenedOp
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|WidenedOp
operator|.
name|getNode
argument_list|()
operator|&&
literal|"Operand wasn't widened?"
argument_list|)
expr_stmt|;
return|return
name|WidenedOp
return|;
block|}
name|void
name|SetWidenedVector
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
name|Result
parameter_list|)
function_decl|;
comment|// Widen Vector Result Promotion.
name|void
name|WidenVectorResult
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_MERGE_VALUES
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_BUILD_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_CONCAT_VECTORS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_CONVERT_RNDSAT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_EXTRACT_SUBVECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_INSERT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_LOAD
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_SCALAR_TO_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_SIGN_EXTEND_INREG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_SELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_UNDEF
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_VECTOR_SHUFFLE
parameter_list|(
name|ShuffleVectorSDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_VSETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_Ternary
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_Binary
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_Convert
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_POWI
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_Shift
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_Unary
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecRes_InregOp
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|// Widen Vector Operand.
name|bool
name|WidenVectorOperand
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecOp_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecOp_CONCAT_VECTORS
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecOp_EXTRACT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecOp_EXTRACT_SUBVECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecOp_STORE
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecOp_SETCC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|WidenVecOp_Convert
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Vector Widening Utilities Support: LegalizeVectorTypes.cpp
comment|//===--------------------------------------------------------------------===//
comment|/// Helper GenWidenVectorLoads - Helper function to generate a set of
comment|/// loads to load a vector with a resulting wider type. It takes
comment|///   LdChain: list of chains for the load to be generated.
comment|///   Ld:      load to widen
name|SDValue
name|GenWidenVectorLoads
argument_list|(
name|SmallVector
operator|<
name|SDValue
argument_list|,
literal|16
operator|>
operator|&
name|LdChain
argument_list|,
name|LoadSDNode
operator|*
name|LD
argument_list|)
decl_stmt|;
comment|/// GenWidenVectorExtLoads - Helper function to generate a set of extension
comment|/// loads to load a ector with a resulting wider type.  It takes
comment|///   LdChain: list of chains for the load to be generated.
comment|///   Ld:      load to widen
comment|///   ExtType: extension element type
name|SDValue
name|GenWidenVectorExtLoads
argument_list|(
name|SmallVector
operator|<
name|SDValue
argument_list|,
literal|16
operator|>
operator|&
name|LdChain
argument_list|,
name|LoadSDNode
operator|*
name|LD
argument_list|,
name|ISD
operator|::
name|LoadExtType
name|ExtType
argument_list|)
decl_stmt|;
comment|/// Helper genWidenVectorStores - Helper function to generate a set of
comment|/// stores to store a widen vector into non widen memory
comment|///   StChain: list of chains for the stores we have generated
comment|///   ST:      store of a widen value
name|void
name|GenWidenVectorStores
argument_list|(
name|SmallVector
operator|<
name|SDValue
argument_list|,
literal|16
operator|>
operator|&
name|StChain
argument_list|,
name|StoreSDNode
operator|*
name|ST
argument_list|)
decl_stmt|;
comment|/// Helper genWidenVectorTruncStores - Helper function to generate a set of
comment|/// stores to store a truncate widen vector into non widen memory
comment|///   StChain: list of chains for the stores we have generated
comment|///   ST:      store of a widen value
name|void
name|GenWidenVectorTruncStores
argument_list|(
name|SmallVector
operator|<
name|SDValue
argument_list|,
literal|16
operator|>
operator|&
name|StChain
argument_list|,
name|StoreSDNode
operator|*
name|ST
argument_list|)
decl_stmt|;
comment|/// Modifies a vector input (widen or narrows) to a vector of NVT.  The
comment|/// input vector must have the same element type as NVT.
name|SDValue
name|ModifyToType
parameter_list|(
name|SDValue
name|InOp
parameter_list|,
name|EVT
name|WidenVT
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Generic Splitting: LegalizeTypesGeneric.cpp
comment|//===--------------------------------------------------------------------===//
comment|// Legalization methods which only use that the illegal type is split into two
comment|// not necessarily identical types.  As such they can be used for splitting
comment|// vectors and expanding integers and floats.
name|void
name|GetSplitOp
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
block|{
if|if
condition|(
name|Op
operator|.
name|getValueType
argument_list|()
operator|.
name|isVector
argument_list|()
condition|)
name|GetSplitVector
argument_list|(
name|Op
argument_list|,
name|Lo
argument_list|,
name|Hi
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|Op
operator|.
name|getValueType
argument_list|()
operator|.
name|isInteger
argument_list|()
condition|)
name|GetExpandedInteger
argument_list|(
name|Op
argument_list|,
name|Lo
argument_list|,
name|Hi
argument_list|)
expr_stmt|;
else|else
name|GetExpandedFloat
argument_list|(
name|Op
argument_list|,
name|Lo
argument_list|,
name|Hi
argument_list|)
expr_stmt|;
block|}
comment|/// GetSplitDestVTs - Compute the VTs needed for the low/hi parts of a type
comment|/// which is split (or expanded) into two not necessarily identical pieces.
name|void
name|GetSplitDestVTs
parameter_list|(
name|EVT
name|InVT
parameter_list|,
name|EVT
modifier|&
name|LoVT
parameter_list|,
name|EVT
modifier|&
name|HiVT
parameter_list|)
function_decl|;
comment|/// GetPairElements - Use ISD::EXTRACT_ELEMENT nodes to extract the low and
comment|/// high parts of the given value.
name|void
name|GetPairElements
parameter_list|(
name|SDValue
name|Pair
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
comment|// Generic Result Splitting.
name|void
name|SplitRes_MERGE_VALUES
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitRes_SELECT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitRes_SELECT_CC
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|SplitRes_UNDEF
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
comment|//===--------------------------------------------------------------------===//
comment|// Generic Expansion: LegalizeTypesGeneric.cpp
comment|//===--------------------------------------------------------------------===//
comment|// Legalization methods which only use that the illegal type is split into two
comment|// identical types of half the size, and that the Lo/Hi part is stored first
comment|// in memory on little/big-endian machines, followed by the Hi/Lo part.  As
comment|// such they can be used for expanding integers and floats.
name|void
name|GetExpandedOp
parameter_list|(
name|SDValue
name|Op
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
block|{
if|if
condition|(
name|Op
operator|.
name|getValueType
argument_list|()
operator|.
name|isInteger
argument_list|()
condition|)
name|GetExpandedInteger
argument_list|(
name|Op
argument_list|,
name|Lo
argument_list|,
name|Hi
argument_list|)
expr_stmt|;
else|else
name|GetExpandedFloat
argument_list|(
name|Op
argument_list|,
name|Lo
argument_list|,
name|Hi
argument_list|)
expr_stmt|;
block|}
comment|// Generic Result Expansion.
name|void
name|ExpandRes_MERGE_VALUES
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|ResNo
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandRes_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandRes_BUILD_PAIR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandRes_EXTRACT_ELEMENT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandRes_EXTRACT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandRes_NormalLoad
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
name|void
name|ExpandRes_VAARG
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|SDValue
modifier|&
name|Lo
parameter_list|,
name|SDValue
modifier|&
name|Hi
parameter_list|)
function_decl|;
comment|// Generic Operand Expansion.
name|SDValue
name|ExpandOp_BITCAST
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandOp_BUILD_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandOp_EXTRACT_ELEMENT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandOp_INSERT_VECTOR_ELT
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandOp_SCALAR_TO_VECTOR
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|SDValue
name|ExpandOp_NormalStore
parameter_list|(
name|SDNode
modifier|*
name|N
parameter_list|,
name|unsigned
name|OpNo
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

