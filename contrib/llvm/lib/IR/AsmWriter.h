begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- llvm/IR/AsmWriter.h - Printing LLVM IR as an assembly file - C++ --===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This files defines the interface for the AssemblyWriter class used to print
end_comment

begin_comment
comment|// LLVM IR and various helper classes that are used in printing.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_ASSEMBLYWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_ASSEMBLYWRITER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Attributes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Instructions.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/TypeFinder.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/FormattedStream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|BasicBlock
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|GlobalValue
decl_stmt|;
name|class
name|Module
decl_stmt|;
name|class
name|NamedMDNode
decl_stmt|;
name|class
name|Value
decl_stmt|;
name|class
name|SlotTracker
decl_stmt|;
comment|/// Create a new SlotTracker for a Module
name|SlotTracker
modifier|*
name|createSlotTracker
parameter_list|(
specifier|const
name|Module
modifier|*
name|M
parameter_list|)
function_decl|;
comment|//===----------------------------------------------------------------------===//
comment|// TypePrinting Class: Type printing machinery
comment|//===----------------------------------------------------------------------===//
name|class
name|TypePrinting
block|{
name|TypePrinting
argument_list|(
argument|const TypePrinting&
argument_list|)
name|LLVM_DELETED_FUNCTION
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|TypePrinting
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
decl_stmt|;
name|public
label|:
comment|/// NamedTypes - The named types that are used by the current module.
name|TypeFinder
name|NamedTypes
decl_stmt|;
comment|/// NumberedTypes - The numbered types, along with their value.
name|DenseMap
operator|<
name|StructType
operator|*
operator|,
name|unsigned
operator|>
name|NumberedTypes
expr_stmt|;
name|TypePrinting
argument_list|()
block|{}
operator|~
name|TypePrinting
argument_list|()
block|{}
name|void
name|incorporateTypes
argument_list|(
specifier|const
name|Module
operator|&
name|M
argument_list|)
expr_stmt|;
name|void
name|print
parameter_list|(
name|Type
modifier|*
name|Ty
parameter_list|,
name|raw_ostream
modifier|&
name|OS
parameter_list|)
function_decl|;
name|void
name|printStructBody
parameter_list|(
name|StructType
modifier|*
name|Ty
parameter_list|,
name|raw_ostream
modifier|&
name|OS
parameter_list|)
function_decl|;
block|}
empty_stmt|;
name|class
name|AssemblyWriter
block|{
name|protected
label|:
name|formatted_raw_ostream
modifier|&
name|Out
decl_stmt|;
specifier|const
name|Module
modifier|*
name|TheModule
decl_stmt|;
name|private
label|:
name|OwningPtr
operator|<
name|SlotTracker
operator|>
name|ModuleSlotTracker
expr_stmt|;
name|SlotTracker
modifier|&
name|Machine
decl_stmt|;
name|TypePrinting
name|TypePrinter
decl_stmt|;
name|AssemblyAnnotationWriter
modifier|*
name|AnnotationWriter
decl_stmt|;
name|public
label|:
comment|/// Construct an AssemblyWriter with an external SlotTracker
name|AssemblyWriter
argument_list|(
name|formatted_raw_ostream
operator|&
name|o
argument_list|,
name|SlotTracker
operator|&
name|Mac
argument_list|,
specifier|const
name|Module
operator|*
name|M
argument_list|,
name|AssemblyAnnotationWriter
operator|*
name|AAW
argument_list|)
expr_stmt|;
comment|/// Construct an AssemblyWriter with an internally allocated SlotTracker
name|AssemblyWriter
argument_list|(
name|formatted_raw_ostream
operator|&
name|o
argument_list|,
specifier|const
name|Module
operator|*
name|M
argument_list|,
name|AssemblyAnnotationWriter
operator|*
name|AAW
argument_list|)
expr_stmt|;
name|virtual
operator|~
name|AssemblyWriter
argument_list|()
expr_stmt|;
name|void
name|printMDNodeBody
parameter_list|(
specifier|const
name|MDNode
modifier|*
name|MD
parameter_list|)
function_decl|;
name|void
name|printNamedMDNode
parameter_list|(
specifier|const
name|NamedMDNode
modifier|*
name|NMD
parameter_list|)
function_decl|;
name|void
name|printModule
parameter_list|(
specifier|const
name|Module
modifier|*
name|M
parameter_list|)
function_decl|;
name|void
name|writeOperand
parameter_list|(
specifier|const
name|Value
modifier|*
name|Op
parameter_list|,
name|bool
name|PrintType
parameter_list|)
function_decl|;
name|void
name|writeParamOperand
parameter_list|(
specifier|const
name|Value
modifier|*
name|Operand
parameter_list|,
name|AttributeSet
name|Attrs
parameter_list|,
name|unsigned
name|Idx
parameter_list|)
function_decl|;
name|void
name|writeAtomic
parameter_list|(
name|AtomicOrdering
name|Ordering
parameter_list|,
name|SynchronizationScope
name|SynchScope
parameter_list|)
function_decl|;
name|void
name|writeAllMDNodes
parameter_list|()
function_decl|;
name|void
name|writeMDNode
parameter_list|(
name|unsigned
name|Slot
parameter_list|,
specifier|const
name|MDNode
modifier|*
name|Node
parameter_list|)
function_decl|;
name|void
name|writeAllAttributeGroups
parameter_list|()
function_decl|;
name|void
name|printTypeIdentities
parameter_list|()
function_decl|;
name|void
name|printGlobal
parameter_list|(
specifier|const
name|GlobalVariable
modifier|*
name|GV
parameter_list|)
function_decl|;
name|void
name|printAlias
parameter_list|(
specifier|const
name|GlobalAlias
modifier|*
name|GV
parameter_list|)
function_decl|;
name|void
name|printFunction
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|)
function_decl|;
name|void
name|printArgument
parameter_list|(
specifier|const
name|Argument
modifier|*
name|FA
parameter_list|,
name|AttributeSet
name|Attrs
parameter_list|,
name|unsigned
name|Idx
parameter_list|)
function_decl|;
name|void
name|printBasicBlock
parameter_list|(
specifier|const
name|BasicBlock
modifier|*
name|BB
parameter_list|)
function_decl|;
name|void
name|printInstructionLine
parameter_list|(
specifier|const
name|Instruction
modifier|&
name|I
parameter_list|)
function_decl|;
name|void
name|printInstruction
parameter_list|(
specifier|const
name|Instruction
modifier|&
name|I
parameter_list|)
function_decl|;
name|private
label|:
name|void
name|init
parameter_list|()
function_decl|;
comment|// printInfoComment - Print a little comment after the instruction indicating
comment|// which slot it occupies.
name|void
name|printInfoComment
parameter_list|(
specifier|const
name|Value
modifier|&
name|V
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|//LLVM_IR_ASMWRITER_H
end_comment

end_unit

