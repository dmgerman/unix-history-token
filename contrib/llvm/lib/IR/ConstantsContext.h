begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ConstantsContext.h - Constants-related Context Interals -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//  This file defines various helper methods and classes used by
end_comment

begin_comment
comment|// LLVMContextImpl for creating and managing constants.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_IR_CONSTANTSCONTEXT_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_IR_CONSTANTSCONTEXT_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMapInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Hashing.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/None.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constant.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Constants.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DerivedTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/InlineAsm.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Instruction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/OperandTraits.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"ir"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// UnaryConstantExpr - This class is private to Constants.cpp, and is used
comment|/// behind the scenes to implement unary constant exprs.
name|class
name|UnaryConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|UnaryConstantExpr
argument_list|(
argument|unsigned Opcode
argument_list|,
argument|Constant *C
argument_list|,
argument|Type *Ty
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|Ty
argument_list|,
argument|Opcode
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|1
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C
block|;   }
comment|// allocate space for exactly one operand
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// BinaryConstantExpr - This class is private to Constants.cpp, and is used
comment|/// behind the scenes to implement binary constant exprs.
name|class
name|BinaryConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|BinaryConstantExpr
argument_list|(
argument|unsigned Opcode
argument_list|,
argument|Constant *C1
argument_list|,
argument|Constant *C2
argument_list|,
argument|unsigned Flags
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|C1->getType()
argument_list|,
argument|Opcode
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|2
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;
name|SubclassOptionalData
operator|=
name|Flags
block|;   }
comment|// allocate space for exactly two operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// SelectConstantExpr - This class is private to Constants.cpp, and is used
comment|/// behind the scenes to implement select constant exprs.
name|class
name|SelectConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|SelectConstantExpr
argument_list|(
name|Constant
operator|*
name|C1
argument_list|,
name|Constant
operator|*
name|C2
argument_list|,
name|Constant
operator|*
name|C3
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|C2->getType()
argument_list|,
argument|Instruction::Select
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|3
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;
name|Op
operator|<
literal|2
operator|>
operator|(
operator|)
operator|=
name|C3
block|;   }
comment|// allocate space for exactly three operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|3
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// ExtractElementConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// extractelement constant exprs.
name|class
name|ExtractElementConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|ExtractElementConstantExpr
argument_list|(
name|Constant
operator|*
name|C1
argument_list|,
name|Constant
operator|*
name|C2
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|cast<VectorType>(C1->getType())->getElementType()
argument_list|,
argument|Instruction::ExtractElement
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|2
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;   }
comment|// allocate space for exactly two operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// InsertElementConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// insertelement constant exprs.
name|class
name|InsertElementConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|InsertElementConstantExpr
argument_list|(
name|Constant
operator|*
name|C1
argument_list|,
name|Constant
operator|*
name|C2
argument_list|,
name|Constant
operator|*
name|C3
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|C1->getType()
argument_list|,
argument|Instruction::InsertElement
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|3
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;
name|Op
operator|<
literal|2
operator|>
operator|(
operator|)
operator|=
name|C3
block|;   }
comment|// allocate space for exactly three operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|3
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// ShuffleVectorConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// shufflevector constant exprs.
name|class
name|ShuffleVectorConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|ShuffleVectorConstantExpr
argument_list|(
name|Constant
operator|*
name|C1
argument_list|,
name|Constant
operator|*
name|C2
argument_list|,
name|Constant
operator|*
name|C3
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
argument|VectorType::get(                    cast<VectorType>(C1->getType())->getElementType(),                    cast<VectorType>(C3->getType())->getNumElements())
argument_list|,
argument|Instruction::ShuffleVector
argument_list|,
argument|&Op<
literal|0
argument|>()
argument_list|,
literal|3
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|C1
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|C2
block|;
name|Op
operator|<
literal|2
operator|>
operator|(
operator|)
operator|=
name|C3
block|;   }
comment|// allocate space for exactly three operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|3
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|; }
decl_stmt|;
comment|/// ExtractValueConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// extractvalue constant exprs.
name|class
name|ExtractValueConstantExpr
range|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|ExtractValueConstantExpr
argument_list|(
name|Constant
operator|*
name|Agg
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|IdxList
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
name|DestTy
argument_list|,
name|Instruction
operator|::
name|ExtractValue
argument_list|,
operator|&
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
argument_list|,
literal|1
argument_list|)
block|,
name|Indices
argument_list|(
argument|IdxList.begin()
argument_list|,
argument|IdxList.end()
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|Agg
block|;   }
comment|// allocate space for exactly one operand
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|1
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
comment|/// Indices - These identify which value to extract.
specifier|const
name|SmallVector
operator|<
name|unsigned
block|,
literal|4
operator|>
name|Indices
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const ConstantExpr *CE
argument_list|)
block|{
return|return
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|ExtractValue
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// InsertValueConstantExpr - This class is private to
comment|/// Constants.cpp, and is used behind the scenes to implement
comment|/// insertvalue constant exprs.
name|class
name|InsertValueConstantExpr
operator|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|InsertValueConstantExpr
argument_list|(
name|Constant
operator|*
name|Agg
argument_list|,
name|Constant
operator|*
name|Val
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|IdxList
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
name|DestTy
argument_list|,
name|Instruction
operator|::
name|InsertValue
argument_list|,
operator|&
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
argument_list|,
literal|2
argument_list|)
block|,
name|Indices
argument_list|(
argument|IdxList.begin()
argument_list|,
argument|IdxList.end()
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|Agg
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|Val
block|;   }
comment|// allocate space for exactly one operand
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
comment|/// Indices - These identify the position for the insertion.
specifier|const
name|SmallVector
operator|<
name|unsigned
block|,
literal|4
operator|>
name|Indices
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const ConstantExpr *CE
argument_list|)
block|{
return|return
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|InsertValue
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|/// GetElementPtrConstantExpr - This class is private to Constants.cpp, and is
comment|/// used behind the scenes to implement getelementpr constant exprs.
name|class
name|GetElementPtrConstantExpr
operator|:
name|public
name|ConstantExpr
block|{
name|Type
operator|*
name|SrcElementTy
block|;
name|Type
operator|*
name|ResElementTy
block|;
name|GetElementPtrConstantExpr
argument_list|(
name|Type
operator|*
name|SrcElementTy
argument_list|,
name|Constant
operator|*
name|C
argument_list|,
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|IdxList
argument_list|,
name|Type
operator|*
name|DestTy
argument_list|)
block|;
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
specifier|static
name|GetElementPtrConstantExpr
operator|*
name|Create
argument_list|(
argument|Type *SrcElementTy
argument_list|,
argument|Constant *C
argument_list|,
argument|ArrayRef<Constant *> IdxList
argument_list|,
argument|Type *DestTy
argument_list|,
argument|unsigned Flags
argument_list|)
block|{
name|GetElementPtrConstantExpr
operator|*
name|Result
operator|=
name|new
argument_list|(
argument|IdxList.size() +
literal|1
argument_list|)
name|GetElementPtrConstantExpr
argument_list|(
name|SrcElementTy
argument_list|,
name|C
argument_list|,
name|IdxList
argument_list|,
name|DestTy
argument_list|)
block|;
name|Result
operator|->
name|SubclassOptionalData
operator|=
name|Flags
block|;
return|return
name|Result
return|;
block|}
name|Type
operator|*
name|getSourceElementType
argument_list|()
specifier|const
block|;
name|Type
operator|*
name|getResultElementType
argument_list|()
specifier|const
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const ConstantExpr *CE
argument_list|)
block|{
return|return
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|GetElementPtr
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
comment|// CompareConstantExpr - This class is private to Constants.cpp, and is used
comment|// behind the scenes to implement ICmp and FCmp constant expressions. This is
comment|// needed in order to store the predicate value for these instructions.
name|class
name|CompareConstantExpr
operator|:
name|public
name|ConstantExpr
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|public
operator|:
name|unsigned
name|short
name|predicate
block|;
name|CompareConstantExpr
argument_list|(
argument|Type *ty
argument_list|,
argument|Instruction::OtherOps opc
argument_list|,
argument|unsigned short pred
argument_list|,
argument|Constant* LHS
argument_list|,
argument|Constant* RHS
argument_list|)
operator|:
name|ConstantExpr
argument_list|(
name|ty
argument_list|,
name|opc
argument_list|,
operator|&
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
argument_list|,
literal|2
argument_list|)
block|,
name|predicate
argument_list|(
argument|pred
argument_list|)
block|{
name|Op
operator|<
literal|0
operator|>
operator|(
operator|)
operator|=
name|LHS
block|;
name|Op
operator|<
literal|1
operator|>
operator|(
operator|)
operator|=
name|RHS
block|;   }
comment|// allocate space for exactly two operands
name|void
operator|*
name|operator
name|new
argument_list|(
argument|size_t s
argument_list|)
block|{
return|return
name|User
operator|::
name|operator
name|new
argument_list|(
name|s
argument_list|,
literal|2
argument_list|)
return|;
block|}
name|void
operator|*
name|operator
name|new
argument_list|(
name|size_t
argument_list|,
name|unsigned
argument_list|)
operator|=
name|delete
block|;
comment|/// Transparently provide more efficient getOperand methods.
name|DECLARE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
name|Value
argument_list|)
block|;
specifier|static
name|bool
name|classof
argument_list|(
argument|const ConstantExpr *CE
argument_list|)
block|{
return|return
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|ICmp
operator|||
name|CE
operator|->
name|getOpcode
argument_list|()
operator|==
name|Instruction
operator|::
name|FCmp
return|;
block|}
specifier|static
name|bool
name|classof
argument_list|(
argument|const Value *V
argument_list|)
block|{
return|return
name|isa
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
operator|&&
name|classof
argument_list|(
name|cast
operator|<
name|ConstantExpr
operator|>
operator|(
name|V
operator|)
argument_list|)
return|;
block|}
expr|}
block|;
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|UnaryConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|UnaryConstantExpr
block|,
literal|1
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|UnaryConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|BinaryConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|BinaryConstantExpr
block|,
literal|2
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|BinaryConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|SelectConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|SelectConstantExpr
block|,
literal|3
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|SelectConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|ExtractElementConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|ExtractElementConstantExpr
block|,
literal|2
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|ExtractElementConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|InsertElementConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|InsertElementConstantExpr
block|,
literal|3
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|InsertElementConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|ShuffleVectorConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|ShuffleVectorConstantExpr
block|,
literal|3
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|ShuffleVectorConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|ExtractValueConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|ExtractValueConstantExpr
block|,
literal|1
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|ExtractValueConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|InsertValueConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|InsertValueConstantExpr
block|,
literal|2
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|InsertValueConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|GetElementPtrConstantExpr
operator|>
operator|:
name|public
name|VariadicOperandTraits
operator|<
name|GetElementPtrConstantExpr
block|,
literal|1
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|GetElementPtrConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
operator|>
expr|struct
name|OperandTraits
operator|<
name|CompareConstantExpr
operator|>
operator|:
name|public
name|FixedNumOperandTraits
operator|<
name|CompareConstantExpr
block|,
literal|2
operator|>
block|{}
block|;
name|DEFINE_TRANSPARENT_OPERAND_ACCESSORS
argument_list|(
argument|CompareConstantExpr
argument_list|,
argument|Value
argument_list|)
name|template
operator|<
name|class
name|ConstantClass
operator|>
expr|struct
name|ConstantAggrKeyType
block|; struct
name|InlineAsmKeyType
block|; struct
name|ConstantExprKeyType
block|;
name|template
operator|<
name|class
name|ConstantClass
operator|>
expr|struct
name|ConstantInfo
block|;
name|template
operator|<
operator|>
expr|struct
name|ConstantInfo
operator|<
name|ConstantExpr
operator|>
block|{
name|using
name|ValType
operator|=
name|ConstantExprKeyType
block|;
name|using
name|TypeClass
operator|=
name|Type
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ConstantInfo
operator|<
name|InlineAsm
operator|>
block|{
name|using
name|ValType
operator|=
name|InlineAsmKeyType
block|;
name|using
name|TypeClass
operator|=
name|PointerType
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ConstantInfo
operator|<
name|ConstantArray
operator|>
block|{
name|using
name|ValType
operator|=
name|ConstantAggrKeyType
operator|<
name|ConstantArray
operator|>
block|;
name|using
name|TypeClass
operator|=
name|ArrayType
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ConstantInfo
operator|<
name|ConstantStruct
operator|>
block|{
name|using
name|ValType
operator|=
name|ConstantAggrKeyType
operator|<
name|ConstantStruct
operator|>
block|;
name|using
name|TypeClass
operator|=
name|StructType
block|; }
block|;
name|template
operator|<
operator|>
expr|struct
name|ConstantInfo
operator|<
name|ConstantVector
operator|>
block|{
name|using
name|ValType
operator|=
name|ConstantAggrKeyType
operator|<
name|ConstantVector
operator|>
block|;
name|using
name|TypeClass
operator|=
name|VectorType
block|; }
block|;
name|template
operator|<
name|class
name|ConstantClass
operator|>
expr|struct
name|ConstantAggrKeyType
block|{
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|Operands
block|;
name|ConstantAggrKeyType
argument_list|(
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|Operands
argument_list|)
operator|:
name|Operands
argument_list|(
argument|Operands
argument_list|)
block|{}
name|ConstantAggrKeyType
argument_list|(
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|Operands
argument_list|,
specifier|const
name|ConstantClass
operator|*
argument_list|)
operator|:
name|Operands
argument_list|(
argument|Operands
argument_list|)
block|{}
name|ConstantAggrKeyType
argument_list|(
argument|const ConstantClass *C
argument_list|,
argument|SmallVectorImpl<Constant *>&Storage
argument_list|)
block|{
name|assert
argument_list|(
name|Storage
operator|.
name|empty
argument_list|()
operator|&&
literal|"Expected empty storage"
argument_list|)
block|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|C
operator|->
name|getNumOperands
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|Storage
operator|.
name|push_back
argument_list|(
name|C
operator|->
name|getOperand
argument_list|(
name|I
argument_list|)
argument_list|)
expr_stmt|;
name|Operands
operator|=
name|Storage
block|;   }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ConstantAggrKeyType
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|Operands
operator|==
name|X
operator|.
name|Operands
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ConstantClass
operator|*
name|C
operator|)
specifier|const
block|{
if|if
condition|(
name|Operands
operator|.
name|size
argument_list|()
operator|!=
name|C
operator|->
name|getNumOperands
argument_list|()
condition|)
return|return
name|false
return|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|Operands
operator|.
name|size
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|Operands
index|[
name|I
index|]
operator|!=
name|C
operator|->
name|getOperand
argument_list|(
name|I
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
name|unsigned
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|hash_combine_range
argument_list|(
name|Operands
operator|.
name|begin
argument_list|()
argument_list|,
name|Operands
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
name|using
name|TypeClass
operator|=
name|typename
name|ConstantInfo
operator|<
name|ConstantClass
operator|>
operator|::
name|TypeClass
block|;
name|ConstantClass
operator|*
name|create
argument_list|(
argument|TypeClass *Ty
argument_list|)
specifier|const
block|{
return|return
name|new
argument_list|(
argument|Operands.size()
argument_list|)
name|ConstantClass
argument_list|(
name|Ty
argument_list|,
name|Operands
argument_list|)
return|;
block|}
expr|}
block|;  struct
name|InlineAsmKeyType
block|{
name|StringRef
name|AsmString
block|;
name|StringRef
name|Constraints
block|;
name|FunctionType
operator|*
name|FTy
block|;
name|bool
name|HasSideEffects
block|;
name|bool
name|IsAlignStack
block|;
name|InlineAsm
operator|::
name|AsmDialect
name|AsmDialect
block|;
name|InlineAsmKeyType
argument_list|(
argument|StringRef AsmString
argument_list|,
argument|StringRef Constraints
argument_list|,
argument|FunctionType *FTy
argument_list|,
argument|bool HasSideEffects
argument_list|,
argument|bool IsAlignStack
argument_list|,
argument|InlineAsm::AsmDialect AsmDialect
argument_list|)
operator|:
name|AsmString
argument_list|(
name|AsmString
argument_list|)
block|,
name|Constraints
argument_list|(
name|Constraints
argument_list|)
block|,
name|FTy
argument_list|(
name|FTy
argument_list|)
block|,
name|HasSideEffects
argument_list|(
name|HasSideEffects
argument_list|)
block|,
name|IsAlignStack
argument_list|(
name|IsAlignStack
argument_list|)
block|,
name|AsmDialect
argument_list|(
argument|AsmDialect
argument_list|)
block|{}
name|InlineAsmKeyType
argument_list|(
specifier|const
name|InlineAsm
operator|*
name|Asm
argument_list|,
name|SmallVectorImpl
operator|<
name|Constant
operator|*
operator|>
operator|&
argument_list|)
operator|:
name|AsmString
argument_list|(
name|Asm
operator|->
name|getAsmString
argument_list|()
argument_list|)
block|,
name|Constraints
argument_list|(
name|Asm
operator|->
name|getConstraintString
argument_list|()
argument_list|)
block|,
name|FTy
argument_list|(
name|Asm
operator|->
name|getFunctionType
argument_list|()
argument_list|)
block|,
name|HasSideEffects
argument_list|(
name|Asm
operator|->
name|hasSideEffects
argument_list|()
argument_list|)
block|,
name|IsAlignStack
argument_list|(
name|Asm
operator|->
name|isAlignStack
argument_list|()
argument_list|)
block|,
name|AsmDialect
argument_list|(
argument|Asm->getDialect()
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|InlineAsmKeyType
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|HasSideEffects
operator|==
name|X
operator|.
name|HasSideEffects
operator|&&
name|IsAlignStack
operator|==
name|X
operator|.
name|IsAlignStack
operator|&&
name|AsmDialect
operator|==
name|X
operator|.
name|AsmDialect
operator|&&
name|AsmString
operator|==
name|X
operator|.
name|AsmString
operator|&&
name|Constraints
operator|==
name|X
operator|.
name|Constraints
operator|&&
name|FTy
operator|==
name|X
operator|.
name|FTy
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|InlineAsm
operator|*
name|Asm
operator|)
specifier|const
block|{
return|return
name|HasSideEffects
operator|==
name|Asm
operator|->
name|hasSideEffects
argument_list|()
operator|&&
name|IsAlignStack
operator|==
name|Asm
operator|->
name|isAlignStack
argument_list|()
operator|&&
name|AsmDialect
operator|==
name|Asm
operator|->
name|getDialect
argument_list|()
operator|&&
name|AsmString
operator|==
name|Asm
operator|->
name|getAsmString
argument_list|()
operator|&&
name|Constraints
operator|==
name|Asm
operator|->
name|getConstraintString
argument_list|()
operator|&&
name|FTy
operator|==
name|Asm
operator|->
name|getFunctionType
argument_list|()
return|;
block|}
name|unsigned
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|AsmString
argument_list|,
name|Constraints
argument_list|,
name|HasSideEffects
argument_list|,
name|IsAlignStack
argument_list|,
name|AsmDialect
argument_list|,
name|FTy
argument_list|)
return|;
block|}
name|using
name|TypeClass
operator|=
name|ConstantInfo
operator|<
name|InlineAsm
operator|>
operator|::
name|TypeClass
block|;
name|InlineAsm
operator|*
name|create
argument_list|(
argument|TypeClass *Ty
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|PointerType
operator|::
name|getUnqual
argument_list|(
name|FTy
argument_list|)
operator|==
name|Ty
argument_list|)
block|;
return|return
name|new
name|InlineAsm
argument_list|(
name|FTy
argument_list|,
name|AsmString
argument_list|,
name|Constraints
argument_list|,
name|HasSideEffects
argument_list|,
name|IsAlignStack
argument_list|,
name|AsmDialect
argument_list|)
return|;
block|}
expr|}
block|;  struct
name|ConstantExprKeyType
block|{
name|uint8_t
name|Opcode
block|;
name|uint8_t
name|SubclassOptionalData
block|;
name|uint16_t
name|SubclassData
block|;
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|Ops
block|;
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Indexes
block|;
name|Type
operator|*
name|ExplicitTy
block|;
name|ConstantExprKeyType
argument_list|(
argument|unsigned Opcode
argument_list|,
argument|ArrayRef<Constant *> Ops
argument_list|,
argument|unsigned short SubclassData =
literal|0
argument_list|,
argument|unsigned short SubclassOptionalData =
literal|0
argument_list|,
argument|ArrayRef<unsigned> Indexes = None
argument_list|,
argument|Type *ExplicitTy = nullptr
argument_list|)
operator|:
name|Opcode
argument_list|(
name|Opcode
argument_list|)
block|,
name|SubclassOptionalData
argument_list|(
name|SubclassOptionalData
argument_list|)
block|,
name|SubclassData
argument_list|(
name|SubclassData
argument_list|)
block|,
name|Ops
argument_list|(
name|Ops
argument_list|)
block|,
name|Indexes
argument_list|(
name|Indexes
argument_list|)
block|,
name|ExplicitTy
argument_list|(
argument|ExplicitTy
argument_list|)
block|{}
name|ConstantExprKeyType
argument_list|(
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|Operands
argument_list|,
specifier|const
name|ConstantExpr
operator|*
name|CE
argument_list|)
operator|:
name|Opcode
argument_list|(
name|CE
operator|->
name|getOpcode
argument_list|()
argument_list|)
block|,
name|SubclassOptionalData
argument_list|(
name|CE
operator|->
name|getRawSubclassOptionalData
argument_list|()
argument_list|)
block|,
name|SubclassData
argument_list|(
name|CE
operator|->
name|isCompare
argument_list|()
operator|?
name|CE
operator|->
name|getPredicate
argument_list|()
operator|:
literal|0
argument_list|)
block|,
name|Ops
argument_list|(
name|Operands
argument_list|)
block|,
name|Indexes
argument_list|(
argument|CE->hasIndices() ? CE->getIndices() : ArrayRef<unsigned>()
argument_list|)
block|{}
name|ConstantExprKeyType
argument_list|(
specifier|const
name|ConstantExpr
operator|*
name|CE
argument_list|,
name|SmallVectorImpl
operator|<
name|Constant
operator|*
operator|>
operator|&
name|Storage
argument_list|)
operator|:
name|Opcode
argument_list|(
name|CE
operator|->
name|getOpcode
argument_list|()
argument_list|)
block|,
name|SubclassOptionalData
argument_list|(
name|CE
operator|->
name|getRawSubclassOptionalData
argument_list|()
argument_list|)
block|,
name|SubclassData
argument_list|(
name|CE
operator|->
name|isCompare
argument_list|()
operator|?
name|CE
operator|->
name|getPredicate
argument_list|()
operator|:
literal|0
argument_list|)
block|,
name|Indexes
argument_list|(
argument|CE->hasIndices() ? CE->getIndices() : ArrayRef<unsigned>()
argument_list|)
block|{
name|assert
argument_list|(
name|Storage
operator|.
name|empty
argument_list|()
operator|&&
literal|"Expected empty storage"
argument_list|)
block|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|CE
operator|->
name|getNumOperands
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|Storage
operator|.
name|push_back
argument_list|(
name|CE
operator|->
name|getOperand
argument_list|(
name|I
argument_list|)
argument_list|)
expr_stmt|;
name|Ops
operator|=
name|Storage
block|;   }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ConstantExprKeyType
operator|&
name|X
operator|)
specifier|const
block|{
return|return
name|Opcode
operator|==
name|X
operator|.
name|Opcode
operator|&&
name|SubclassData
operator|==
name|X
operator|.
name|SubclassData
operator|&&
name|SubclassOptionalData
operator|==
name|X
operator|.
name|SubclassOptionalData
operator|&&
name|Ops
operator|==
name|X
operator|.
name|Ops
operator|&&
name|Indexes
operator|==
name|X
operator|.
name|Indexes
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ConstantExpr
operator|*
name|CE
operator|)
specifier|const
block|{
if|if
condition|(
name|Opcode
operator|!=
name|CE
operator|->
name|getOpcode
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
name|SubclassOptionalData
operator|!=
name|CE
operator|->
name|getRawSubclassOptionalData
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
name|Ops
operator|.
name|size
argument_list|()
operator|!=
name|CE
operator|->
name|getNumOperands
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
name|SubclassData
operator|!=
operator|(
name|CE
operator|->
name|isCompare
argument_list|()
condition|?
name|CE
operator|->
name|getPredicate
argument_list|()
else|:
literal|0
operator|)
condition|)
return|return
name|false
return|;
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|Ops
operator|.
name|size
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|Ops
index|[
name|I
index|]
operator|!=
name|CE
operator|->
name|getOperand
argument_list|(
name|I
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|Indexes
operator|!=
operator|(
name|CE
operator|->
name|hasIndices
argument_list|()
condition|?
name|CE
operator|->
name|getIndices
argument_list|()
else|:
name|ArrayRef
operator|<
name|unsigned
operator|>
operator|(
operator|)
operator|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|unsigned
name|getHash
argument_list|()
specifier|const
block|{
return|return
name|hash_combine
argument_list|(
name|Opcode
argument_list|,
name|SubclassOptionalData
argument_list|,
name|SubclassData
argument_list|,
name|hash_combine_range
argument_list|(
name|Ops
operator|.
name|begin
argument_list|()
argument_list|,
name|Ops
operator|.
name|end
argument_list|()
argument_list|)
argument_list|,
name|hash_combine_range
argument_list|(
name|Indexes
operator|.
name|begin
argument_list|()
argument_list|,
name|Indexes
operator|.
name|end
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|using
name|TypeClass
init|=
name|ConstantInfo
operator|<
name|ConstantExpr
operator|>
operator|::
name|TypeClass
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ConstantExpr
modifier|*
name|create
argument_list|(
name|TypeClass
operator|*
name|Ty
argument_list|)
decl|const
block|{
switch|switch
condition|(
name|Opcode
condition|)
block|{
default|default:
if|if
condition|(
name|Instruction
operator|::
name|isCast
argument_list|(
name|Opcode
argument_list|)
condition|)
return|return
name|new
name|UnaryConstantExpr
argument_list|(
name|Opcode
argument_list|,
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ty
argument_list|)
return|;
if|if
condition|(
operator|(
name|Opcode
operator|>=
name|Instruction
operator|::
name|BinaryOpsBegin
operator|&&
name|Opcode
operator|<
name|Instruction
operator|::
name|BinaryOpsEnd
operator|)
condition|)
return|return
name|new
name|BinaryConstantExpr
argument_list|(
name|Opcode
argument_list|,
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
index|[
literal|1
index|]
argument_list|,
name|SubclassOptionalData
argument_list|)
return|;
name|llvm_unreachable
argument_list|(
literal|"Invalid ConstantExpr!"
argument_list|)
expr_stmt|;
case|case
name|Instruction
operator|::
name|Select
case|:
return|return
name|new
name|SelectConstantExpr
argument_list|(
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
index|[
literal|1
index|]
argument_list|,
name|Ops
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|Instruction
operator|::
name|ExtractElement
case|:
return|return
name|new
name|ExtractElementConstantExpr
argument_list|(
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
index|[
literal|1
index|]
argument_list|)
return|;
case|case
name|Instruction
operator|::
name|InsertElement
case|:
return|return
name|new
name|InsertElementConstantExpr
argument_list|(
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
index|[
literal|1
index|]
argument_list|,
name|Ops
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|Instruction
operator|::
name|ShuffleVector
case|:
return|return
name|new
name|ShuffleVectorConstantExpr
argument_list|(
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
index|[
literal|1
index|]
argument_list|,
name|Ops
index|[
literal|2
index|]
argument_list|)
return|;
case|case
name|Instruction
operator|::
name|InsertValue
case|:
return|return
name|new
name|InsertValueConstantExpr
argument_list|(
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
index|[
literal|1
index|]
argument_list|,
name|Indexes
argument_list|,
name|Ty
argument_list|)
return|;
case|case
name|Instruction
operator|::
name|ExtractValue
case|:
return|return
name|new
name|ExtractValueConstantExpr
argument_list|(
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Indexes
argument_list|,
name|Ty
argument_list|)
return|;
case|case
name|Instruction
operator|::
name|GetElementPtr
case|:
return|return
name|GetElementPtrConstantExpr
operator|::
name|Create
argument_list|(
name|ExplicitTy
condition|?
name|ExplicitTy
else|:
name|cast
operator|<
name|PointerType
operator|>
operator|(
name|Ops
index|[
literal|0
index|]
operator|->
name|getType
argument_list|()
operator|->
name|getScalarType
argument_list|()
operator|)
operator|->
name|getElementType
argument_list|()
argument_list|,
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
operator|.
name|slice
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Ty
argument_list|,
name|SubclassOptionalData
argument_list|)
return|;
case|case
name|Instruction
operator|::
name|ICmp
case|:
return|return
name|new
name|CompareConstantExpr
argument_list|(
name|Ty
argument_list|,
name|Instruction
operator|::
name|ICmp
argument_list|,
name|SubclassData
argument_list|,
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
index|[
literal|1
index|]
argument_list|)
return|;
case|case
name|Instruction
operator|::
name|FCmp
case|:
return|return
name|new
name|CompareConstantExpr
argument_list|(
name|Ty
argument_list|,
name|Instruction
operator|::
name|FCmp
argument_list|,
name|SubclassData
argument_list|,
name|Ops
index|[
literal|0
index|]
argument_list|,
name|Ops
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|ConstantClass
operator|>
name|class
name|ConstantUniqueMap
block|{
name|public
operator|:
name|using
name|ValType
operator|=
name|typename
name|ConstantInfo
operator|<
name|ConstantClass
operator|>
operator|::
name|ValType
block|;
name|using
name|TypeClass
operator|=
name|typename
name|ConstantInfo
operator|<
name|ConstantClass
operator|>
operator|::
name|TypeClass
block|;
name|using
name|LookupKey
operator|=
name|std
operator|::
name|pair
operator|<
name|TypeClass
operator|*
block|,
name|ValType
operator|>
block|;
comment|/// Key and hash together, so that we compute the hash only once and reuse it.
name|using
name|LookupKeyHashed
operator|=
name|std
operator|::
name|pair
operator|<
name|unsigned
block|,
name|LookupKey
operator|>
block|;
name|private
operator|:
expr|struct
name|MapInfo
block|{
name|using
name|ConstantClassInfo
operator|=
name|DenseMapInfo
operator|<
name|ConstantClass
operator|*
operator|>
block|;
specifier|static
specifier|inline
name|ConstantClass
operator|*
name|getEmptyKey
argument_list|()
block|{
return|return
name|ConstantClassInfo
operator|::
name|getEmptyKey
argument_list|()
return|;
block|}
specifier|static
specifier|inline
name|ConstantClass
operator|*
name|getTombstoneKey
argument_list|()
block|{
return|return
name|ConstantClassInfo
operator|::
name|getTombstoneKey
argument_list|()
return|;
block|}
specifier|static
name|unsigned
name|getHashValue
argument_list|(
argument|const ConstantClass *CP
argument_list|)
block|{
name|SmallVector
operator|<
name|Constant
operator|*
block|,
literal|32
operator|>
name|Storage
block|;
return|return
name|getHashValue
argument_list|(
name|LookupKey
argument_list|(
name|CP
operator|->
name|getType
argument_list|()
argument_list|,
name|ValType
argument_list|(
name|CP
argument_list|,
name|Storage
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|ConstantClass
modifier|*
name|LHS
parameter_list|,
specifier|const
name|ConstantClass
modifier|*
name|RHS
parameter_list|)
block|{
return|return
name|LHS
operator|==
name|RHS
return|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|LookupKey
modifier|&
name|Val
parameter_list|)
block|{
return|return
name|hash_combine
argument_list|(
name|Val
operator|.
name|first
argument_list|,
name|Val
operator|.
name|second
operator|.
name|getHash
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|getHashValue
parameter_list|(
specifier|const
name|LookupKeyHashed
modifier|&
name|Val
parameter_list|)
block|{
return|return
name|Val
operator|.
name|first
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|LookupKey
modifier|&
name|LHS
parameter_list|,
specifier|const
name|ConstantClass
modifier|*
name|RHS
parameter_list|)
block|{
if|if
condition|(
name|RHS
operator|==
name|getEmptyKey
argument_list|()
operator|||
name|RHS
operator|==
name|getTombstoneKey
argument_list|()
condition|)
return|return
name|false
return|;
if|if
condition|(
name|LHS
operator|.
name|first
operator|!=
name|RHS
operator|->
name|getType
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|LHS
operator|.
name|second
operator|==
name|RHS
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|isEqual
parameter_list|(
specifier|const
name|LookupKeyHashed
modifier|&
name|LHS
parameter_list|,
specifier|const
name|ConstantClass
modifier|*
name|RHS
parameter_list|)
block|{
return|return
name|isEqual
argument_list|(
name|LHS
operator|.
name|second
argument_list|,
name|RHS
argument_list|)
return|;
block|}
end_function

begin_label
unit|};
name|public
label|:
end_label

begin_decl_stmt
name|using
name|MapTy
init|=
name|DenseSet
operator|<
name|ConstantClass
operator|*
decl_stmt|,
name|MapInfo
decl|>
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|MapTy
name|Map
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|typename
name|MapTy
operator|::
name|iterator
name|begin
argument_list|()
block|{
return|return
name|Map
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|MapTy
operator|::
name|iterator
name|end
argument_list|()
block|{
return|return
name|Map
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|freeConstants
parameter_list|()
block|{
for|for
control|(
name|auto
operator|&
name|I
operator|:
name|Map
control|)
name|delete
name|I
decl_stmt|;
comment|// Asserts that use_empty().
block|}
end_function

begin_label
name|private
label|:
end_label

begin_function
name|ConstantClass
modifier|*
name|create
parameter_list|(
name|TypeClass
modifier|*
name|Ty
parameter_list|,
name|ValType
name|V
parameter_list|,
name|LookupKeyHashed
modifier|&
name|HashKey
parameter_list|)
block|{
name|ConstantClass
modifier|*
name|Result
init|=
name|V
operator|.
name|create
argument_list|(
name|Ty
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|Result
operator|->
name|getType
argument_list|()
operator|==
name|Ty
operator|&&
literal|"Type specified is not correct!"
argument_list|)
expr_stmt|;
name|Map
operator|.
name|insert_as
argument_list|(
name|Result
argument_list|,
name|HashKey
argument_list|)
expr_stmt|;
return|return
name|Result
return|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|/// Return the specified constant from the map, creating it if necessary.
end_comment

begin_function
name|ConstantClass
modifier|*
name|getOrCreate
parameter_list|(
name|TypeClass
modifier|*
name|Ty
parameter_list|,
name|ValType
name|V
parameter_list|)
block|{
name|LookupKey
name|Key
argument_list|(
name|Ty
argument_list|,
name|V
argument_list|)
decl_stmt|;
comment|/// Hash once, and reuse it for the lookup and the insertion if needed.
name|LookupKeyHashed
name|Lookup
argument_list|(
name|MapInfo
operator|::
name|getHashValue
argument_list|(
name|Key
argument_list|)
argument_list|,
name|Key
argument_list|)
decl_stmt|;
name|ConstantClass
modifier|*
name|Result
init|=
name|nullptr
decl_stmt|;
name|auto
name|I
init|=
name|Map
operator|.
name|find_as
argument_list|(
name|Lookup
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|==
name|Map
operator|.
name|end
argument_list|()
condition|)
name|Result
operator|=
name|create
argument_list|(
name|Ty
argument_list|,
name|V
argument_list|,
name|Lookup
argument_list|)
expr_stmt|;
else|else
name|Result
operator|=
operator|*
name|I
expr_stmt|;
name|assert
argument_list|(
name|Result
operator|&&
literal|"Unexpected nullptr"
argument_list|)
expr_stmt|;
return|return
name|Result
return|;
block|}
end_function

begin_comment
comment|/// Remove this constant from the map
end_comment

begin_function
name|void
name|remove
parameter_list|(
name|ConstantClass
modifier|*
name|CP
parameter_list|)
block|{
name|typename
name|MapTy
operator|::
name|iterator
name|I
operator|=
name|Map
operator|.
name|find
argument_list|(
name|CP
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
operator|&&
literal|"Constant not found in constant table!"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|*
name|I
operator|==
name|CP
operator|&&
literal|"Didn't find correct element?"
argument_list|)
expr_stmt|;
name|Map
operator|.
name|erase
argument_list|(
name|I
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|ConstantClass
modifier|*
name|replaceOperandsInPlace
argument_list|(
name|ArrayRef
operator|<
name|Constant
operator|*
operator|>
name|Operands
argument_list|,
name|ConstantClass
operator|*
name|CP
argument_list|,
name|Value
operator|*
name|From
argument_list|,
name|Constant
operator|*
name|To
argument_list|,
name|unsigned
name|NumUpdated
operator|=
literal|0
argument_list|,
name|unsigned
name|OperandNo
operator|=
operator|~
literal|0u
argument_list|)
block|{
name|LookupKey
name|Key
argument_list|(
name|CP
operator|->
name|getType
argument_list|()
argument_list|,
name|ValType
argument_list|(
name|Operands
argument_list|,
name|CP
argument_list|)
argument_list|)
decl_stmt|;
comment|/// Hash once, and reuse it for the lookup and the insertion if needed.
name|LookupKeyHashed
name|Lookup
argument_list|(
name|MapInfo
operator|::
name|getHashValue
argument_list|(
name|Key
argument_list|)
argument_list|,
name|Key
argument_list|)
decl_stmt|;
name|auto
name|I
init|=
name|Map
operator|.
name|find_as
argument_list|(
name|Lookup
argument_list|)
decl_stmt|;
if|if
condition|(
name|I
operator|!=
name|Map
operator|.
name|end
argument_list|()
condition|)
return|return
operator|*
name|I
return|;
comment|// Update to the new value.  Optimize for the case when we have a single
comment|// operand that we're changing, but handle bulk updates efficiently.
name|remove
argument_list|(
name|CP
argument_list|)
expr_stmt|;
if|if
condition|(
name|NumUpdated
operator|==
literal|1
condition|)
block|{
name|assert
argument_list|(
name|OperandNo
operator|<
name|CP
operator|->
name|getNumOperands
argument_list|()
operator|&&
literal|"Invalid index"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|CP
operator|->
name|getOperand
argument_list|(
name|OperandNo
argument_list|)
operator|!=
name|To
operator|&&
literal|"I didn't contain From!"
argument_list|)
expr_stmt|;
name|CP
operator|->
name|setOperand
argument_list|(
name|OperandNo
argument_list|,
name|To
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|CP
operator|->
name|getNumOperands
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
if|if
condition|(
name|CP
operator|->
name|getOperand
argument_list|(
name|I
argument_list|)
operator|==
name|From
condition|)
name|CP
operator|->
name|setOperand
argument_list|(
name|I
argument_list|,
name|To
argument_list|)
expr_stmt|;
block|}
name|Map
operator|.
name|insert_as
argument_list|(
name|CP
argument_list|,
name|Lookup
argument_list|)
expr_stmt|;
return|return
name|nullptr
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|void
name|dump
argument_list|()
specifier|const
block|{
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Constant.cpp: ConstantUniqueMap\n"
argument_list|)
block|; }
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_IR_CONSTANTSCONTEXT_H
end_comment

end_unit

