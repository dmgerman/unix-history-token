begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AttributeImpl.h - Attribute Internals -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file defines various helper methods and classes used by
end_comment

begin_comment
comment|/// LLVMContextImpl for creating and managing attributes.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_IR_ATTRIBUTEIMPL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_IR_ATTRIBUTEIMPL_H
end_define

begin_include
include|#
directive|include
file|"AttributeSetNode.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Attributes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TrailingObjects.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<climits>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|LLVMContext
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|/// \class
comment|/// \brief This class represents a single, uniqued attribute. That attribute
comment|/// could be a single enum, a tuple, or a string.
name|class
name|AttributeImpl
range|:
name|public
name|FoldingSetNode
block|{
name|unsigned
name|char
name|KindID
block|;
comment|///< Holds the AttrEntryKind of the attribute
name|protected
operator|:
expr|enum
name|AttrEntryKind
block|{
name|EnumAttrEntry
block|,
name|IntAttrEntry
block|,
name|StringAttrEntry
block|}
block|;
name|AttributeImpl
argument_list|(
argument|AttrEntryKind KindID
argument_list|)
operator|:
name|KindID
argument_list|(
argument|KindID
argument_list|)
block|{}
name|public
operator|:
comment|// AttributesImpl is uniqued, these should not be available.
name|AttributeImpl
argument_list|(
specifier|const
name|AttributeImpl
operator|&
argument_list|)
operator|=
name|delete
block|;
name|AttributeImpl
operator|&
name|operator
operator|=
operator|(
specifier|const
name|AttributeImpl
operator|&
operator|)
operator|=
name|delete
block|;
name|virtual
operator|~
name|AttributeImpl
argument_list|()
block|;
name|bool
name|isEnumAttribute
argument_list|()
specifier|const
block|{
return|return
name|KindID
operator|==
name|EnumAttrEntry
return|;
block|}
name|bool
name|isIntAttribute
argument_list|()
specifier|const
block|{
return|return
name|KindID
operator|==
name|IntAttrEntry
return|;
block|}
name|bool
name|isStringAttribute
argument_list|()
specifier|const
block|{
return|return
name|KindID
operator|==
name|StringAttrEntry
return|;
block|}
name|bool
name|hasAttribute
argument_list|(
argument|Attribute::AttrKind A
argument_list|)
specifier|const
block|;
name|bool
name|hasAttribute
argument_list|(
argument|StringRef Kind
argument_list|)
specifier|const
block|;
name|Attribute
operator|::
name|AttrKind
name|getKindAsEnum
argument_list|()
specifier|const
block|;
name|uint64_t
name|getValueAsInt
argument_list|()
specifier|const
block|;
name|StringRef
name|getKindAsString
argument_list|()
specifier|const
block|;
name|StringRef
name|getValueAsString
argument_list|()
specifier|const
block|;
comment|/// \brief Used when sorting the attributes.
name|bool
name|operator
operator|<
operator|(
specifier|const
name|AttributeImpl
operator|&
name|AI
operator|)
specifier|const
block|;
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|)
specifier|const
block|{
if|if
condition|(
name|isEnumAttribute
argument_list|()
condition|)
name|Profile
argument_list|(
name|ID
argument_list|,
name|getKindAsEnum
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|isIntAttribute
argument_list|()
condition|)
name|Profile
argument_list|(
name|ID
argument_list|,
name|getKindAsEnum
argument_list|()
argument_list|,
name|getValueAsInt
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|Profile
argument_list|(
name|ID
argument_list|,
name|getKindAsString
argument_list|()
argument_list|,
name|getValueAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|,
argument|Attribute::AttrKind Kind
argument_list|,
argument|uint64_t Val
argument_list|)
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
name|Kind
argument_list|)
block|;
if|if
condition|(
name|Val
condition|)
name|ID
operator|.
name|AddInteger
argument_list|(
name|Val
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|,
argument|StringRef Kind
argument_list|,
argument|StringRef Values
argument_list|)
block|{
name|ID
operator|.
name|AddString
argument_list|(
name|Kind
argument_list|)
block|;
if|if
condition|(
operator|!
name|Values
operator|.
name|empty
argument_list|()
condition|)
name|ID
operator|.
name|AddString
argument_list|(
name|Values
argument_list|)
expr_stmt|;
block|}
expr|}
block|;
comment|//===----------------------------------------------------------------------===//
comment|/// \class
comment|/// \brief A set of classes that contain the value of the
comment|/// attribute object. There are three main categories: enum attribute entries,
comment|/// represented by Attribute::AttrKind; alignment attribute entries; and string
comment|/// attribute enties, which are for target-dependent attributes.
name|class
name|EnumAttributeImpl
operator|:
name|public
name|AttributeImpl
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|Attribute
operator|::
name|AttrKind
name|Kind
block|;
name|protected
operator|:
name|EnumAttributeImpl
argument_list|(
argument|AttrEntryKind ID
argument_list|,
argument|Attribute::AttrKind Kind
argument_list|)
operator|:
name|AttributeImpl
argument_list|(
name|ID
argument_list|)
block|,
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|public
operator|:
name|EnumAttributeImpl
argument_list|(
argument|Attribute::AttrKind Kind
argument_list|)
operator|:
name|AttributeImpl
argument_list|(
name|EnumAttrEntry
argument_list|)
block|,
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|Attribute
operator|::
name|AttrKind
name|getEnumKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
expr|}
block|;
name|class
name|IntAttributeImpl
operator|:
name|public
name|EnumAttributeImpl
block|{
name|void
name|anchor
argument_list|()
name|override
block|;
name|uint64_t
name|Val
block|;
name|public
operator|:
name|IntAttributeImpl
argument_list|(
argument|Attribute::AttrKind Kind
argument_list|,
argument|uint64_t Val
argument_list|)
operator|:
name|EnumAttributeImpl
argument_list|(
name|IntAttrEntry
argument_list|,
name|Kind
argument_list|)
block|,
name|Val
argument_list|(
argument|Val
argument_list|)
block|{
name|assert
argument_list|(
operator|(
name|Kind
operator|==
name|Attribute
operator|::
name|Alignment
operator|||
name|Kind
operator|==
name|Attribute
operator|::
name|StackAlignment
operator|||
name|Kind
operator|==
name|Attribute
operator|::
name|Dereferenceable
operator|||
name|Kind
operator|==
name|Attribute
operator|::
name|DereferenceableOrNull
operator|||
name|Kind
operator|==
name|Attribute
operator|::
name|AllocSize
operator|)
operator|&&
literal|"Wrong kind for int attribute!"
argument_list|)
block|;   }
name|uint64_t
name|getValue
argument_list|()
specifier|const
block|{
return|return
name|Val
return|;
block|}
expr|}
block|;
name|class
name|StringAttributeImpl
operator|:
name|public
name|AttributeImpl
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|std
operator|::
name|string
name|Kind
block|;
name|std
operator|::
name|string
name|Val
block|;
name|public
operator|:
name|StringAttributeImpl
argument_list|(
argument|StringRef Kind
argument_list|,
argument|StringRef Val = StringRef()
argument_list|)
operator|:
name|AttributeImpl
argument_list|(
name|StringAttrEntry
argument_list|)
block|,
name|Kind
argument_list|(
name|Kind
argument_list|)
block|,
name|Val
argument_list|(
argument|Val
argument_list|)
block|{}
name|StringRef
name|getStringKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|StringRef
name|getStringValue
argument_list|()
specifier|const
block|{
return|return
name|Val
return|;
block|}
expr|}
block|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|AttributeSetNode
operator|*
operator|>
name|IndexAttrPair
expr_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|/// \class
comment|/// \brief This class represents a set of attributes that apply to the function,
comment|/// return type, and parameters.
name|class
name|AttributeSetImpl
name|final
operator|:
name|public
name|FoldingSetNode
block|,
name|private
name|TrailingObjects
operator|<
name|AttributeSetImpl
block|,
name|IndexAttrPair
operator|>
block|{
name|friend
name|class
name|AttributeSet
block|;
name|friend
name|TrailingObjects
block|;
name|private
operator|:
name|LLVMContext
operator|&
name|Context
block|;
name|unsigned
name|NumSlots
block|;
comment|///< Number of entries in this set.
comment|/// Bitset with a bit for each available attribute Attribute::AttrKind.
name|uint64_t
name|AvailableFunctionAttrs
block|;
comment|// Helper fn for TrailingObjects class.
name|size_t
name|numTrailingObjects
argument_list|(
argument|OverloadToken<IndexAttrPair>
argument_list|)
block|{
return|return
name|NumSlots
return|;
block|}
comment|/// \brief Return a pointer to the IndexAttrPair for the specified slot.
specifier|const
name|IndexAttrPair
operator|*
name|getNode
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|getTrailingObjects
operator|<
name|IndexAttrPair
operator|>
operator|(
operator|)
operator|+
name|Slot
return|;
block|}
name|public
operator|:
name|AttributeSetImpl
argument_list|(
name|LLVMContext
operator|&
name|C
argument_list|,
name|ArrayRef
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
argument_list|,
name|AttributeSetNode
operator|*
operator|>>
name|Slots
argument_list|)
operator|:
name|Context
argument_list|(
name|C
argument_list|)
block|,
name|NumSlots
argument_list|(
name|Slots
operator|.
name|size
argument_list|()
argument_list|)
block|,
name|AvailableFunctionAttrs
argument_list|(
literal|0
argument_list|)
block|{
name|static_assert
argument_list|(
name|Attribute
operator|::
name|EndAttrKinds
operator|<=
sizeof|sizeof
argument_list|(
name|AvailableFunctionAttrs
argument_list|)
operator|*
name|CHAR_BIT
argument_list|,
literal|"Too many attributes"
argument_list|)
block|;
ifndef|#
directive|ifndef
name|NDEBUG
if|if
condition|(
name|Slots
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
for|for
control|(
specifier|const
name|std
operator|::
name|pair
operator|<
name|unsigned
init|,
name|AttributeSetNode
operator|*
operator|>
operator|*
name|i
operator|=
name|Slots
operator|.
name|begin
argument_list|()
operator|+
literal|1
init|,
operator|*
name|e
operator|=
name|Slots
operator|.
name|end
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
name|assert
argument_list|(
operator|(
name|i
operator|-
literal|1
operator|)
operator|->
name|first
operator|<=
name|i
operator|->
name|first
operator|&&
literal|"Attribute set not ordered!"
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// There's memory after the node where we can store the entries in.
name|std
operator|::
name|copy
argument_list|(
name|Slots
operator|.
name|begin
argument_list|()
argument_list|,
name|Slots
operator|.
name|end
argument_list|()
argument_list|,
name|getTrailingObjects
operator|<
name|IndexAttrPair
operator|>
operator|(
operator|)
argument_list|)
expr_stmt|;
comment|// Initialize AvailableFunctionAttrs summary bitset.
if|if
condition|(
name|NumSlots
operator|>
literal|0
condition|)
block|{
name|static_assert
argument_list|(
name|AttributeSet
operator|::
name|FunctionIndex
operator|==
operator|~
literal|0u
argument_list|,
literal|"FunctionIndex should be biggest possible index"
argument_list|)
expr_stmt|;
specifier|const
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|AttributeSetNode
operator|*
operator|>
operator|&
name|Last
operator|=
name|Slots
operator|.
name|back
argument_list|()
expr_stmt|;
if|if
condition|(
name|Last
operator|.
name|first
operator|==
name|AttributeSet
operator|::
name|FunctionIndex
condition|)
block|{
specifier|const
name|AttributeSetNode
modifier|*
name|Node
init|=
name|Last
operator|.
name|second
decl_stmt|;
for|for
control|(
name|Attribute
name|I
range|:
operator|*
name|Node
control|)
block|{
if|if
condition|(
operator|!
name|I
operator|.
name|isStringAttribute
argument_list|()
condition|)
name|AvailableFunctionAttrs
operator||=
operator|(
operator|(
name|uint64_t
operator|)
literal|1
operator|)
operator|<<
name|I
operator|.
name|getKindAsEnum
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// AttributesSetImpt is uniqued, these should not be available.
name|AttributeSetImpl
argument_list|(
specifier|const
name|AttributeSetImpl
operator|&
argument_list|)
operator|=
name|delete
block|;
name|AttributeSetImpl
operator|&
name|operator
operator|=
operator|(
specifier|const
name|AttributeSetImpl
operator|&
operator|)
operator|=
name|delete
block|;
name|void
name|operator
name|delete
argument_list|(
argument|void *p
argument_list|)
block|{
operator|::
name|operator
name|delete
argument_list|(
name|p
argument_list|)
block|; }
comment|/// \brief Get the context that created this AttributeSetImpl.
name|LLVMContext
operator|&
name|getContext
argument_list|()
block|{
return|return
name|Context
return|;
block|}
comment|/// \brief Return the number of slots used in this attribute list. This is
comment|/// the number of arguments that have an attribute set on them (including the
comment|/// function itself).
name|unsigned
name|getNumSlots
argument_list|()
specifier|const
block|{
return|return
name|NumSlots
return|;
block|}
comment|/// \brief Get the index of the given "slot" in the AttrNodes list. This index
comment|/// is the index of the return, parameter, or function object that the
comment|/// attributes are applied to, not the index into the AttrNodes list where the
comment|/// attributes reside.
name|unsigned
name|getSlotIndex
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|getNode
argument_list|(
name|Slot
argument_list|)
operator|->
name|first
return|;
block|}
comment|/// \brief Retrieve the attributes for the given "slot" in the AttrNode list.
comment|/// \p Slot is an index into the AttrNodes list, not the index of the return /
comment|/// parameter/ function which the attributes apply to.
name|AttributeSet
name|getSlotAttributes
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|AttributeSet
operator|::
name|get
argument_list|(
name|Context
argument_list|,
operator|*
name|getNode
argument_list|(
name|Slot
argument_list|)
argument_list|)
return|;
block|}
comment|/// \brief Retrieve the attribute set node for the given "slot" in the
comment|/// AttrNode list.
name|AttributeSetNode
operator|*
name|getSlotNode
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|getNode
argument_list|(
name|Slot
argument_list|)
operator|->
name|second
return|;
block|}
comment|/// \brief Return true if the AttributeSetNode for the FunctionIndex has an
comment|/// enum attribute of the given kind.
name|bool
name|hasFnAttribute
argument_list|(
argument|Attribute::AttrKind Kind
argument_list|)
specifier|const
block|{
return|return
name|AvailableFunctionAttrs
operator|&
operator|(
operator|(
name|uint64_t
operator|)
literal|1
operator|)
operator|<<
name|Kind
return|;
block|}
typedef|typedef
name|AttributeSetNode
operator|::
name|iterator
name|iterator
expr_stmt|;
name|iterator
name|begin
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|getSlotNode
argument_list|(
name|Slot
argument_list|)
operator|->
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|getSlotNode
argument_list|(
name|Slot
argument_list|)
operator|->
name|end
argument_list|()
return|;
block|}
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|)
specifier|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|makeArrayRef
argument_list|(
name|getNode
argument_list|(
literal|0
argument_list|)
argument_list|,
name|getNumSlots
argument_list|()
argument_list|)
argument_list|)
block|;   }
specifier|static
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|,
argument|ArrayRef<std::pair<unsigned
argument_list|,
argument|AttributeSetNode*>> Nodes
argument_list|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|Node
range|:
name|Nodes
control|)
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
name|Node
operator|.
name|first
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|Node
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|dump
argument_list|()
specifier|const
block|; }
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_IR_ATTRIBUTEIMPL_H
end_comment

end_unit

