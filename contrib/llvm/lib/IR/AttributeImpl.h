begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AttributeImpl.h - Attribute Internals -------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file defines various helper methods and classes used by
end_comment

begin_comment
comment|/// LLVMContextImpl for creating and managing attributes.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_ATTRIBUTESIMPL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_ATTRIBUTESIMPL_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Attributes.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Constant
decl_stmt|;
name|class
name|LLVMContext
decl_stmt|;
comment|//===----------------------------------------------------------------------===//
comment|/// \class
comment|/// \brief A set of classes that contain the kind and (optional) value of the
comment|/// attribute object. There are three main categories: enum attribute entries,
comment|/// represented by Attribute::AttrKind; alignment attribute entries; and string
comment|/// attribute enties, which are for target-dependent attributes.
name|class
name|AttributeEntry
block|{
name|unsigned
name|char
name|KindID
decl_stmt|;
name|protected
label|:
enum|enum
name|AttrEntryKind
block|{
name|EnumAttrEntry
block|,
name|AlignAttrEntry
block|,
name|StringAttrEntry
block|}
enum|;
name|public
label|:
name|AttributeEntry
argument_list|(
argument|AttrEntryKind Kind
argument_list|)
block|:
name|KindID
argument_list|(
argument|Kind
argument_list|)
block|{}
name|virtual
operator|~
name|AttributeEntry
argument_list|()
block|{}
name|unsigned
name|getKindID
argument_list|()
specifier|const
block|{
return|return
name|KindID
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
parameter_list|(
specifier|const
name|AttributeEntry
modifier|*
parameter_list|)
block|{
return|return
name|true
return|;
block|}
block|}
empty_stmt|;
name|class
name|EnumAttributeEntry
range|:
name|public
name|AttributeEntry
block|{
name|Attribute
operator|::
name|AttrKind
name|Kind
block|;
name|public
operator|:
name|EnumAttributeEntry
argument_list|(
argument|Attribute::AttrKind Kind
argument_list|)
operator|:
name|AttributeEntry
argument_list|(
name|EnumAttrEntry
argument_list|)
block|,
name|Kind
argument_list|(
argument|Kind
argument_list|)
block|{}
name|Attribute
operator|::
name|AttrKind
name|getEnumKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const AttributeEntry *AE
argument_list|)
block|{
return|return
name|AE
operator|->
name|getKindID
argument_list|()
operator|==
name|EnumAttrEntry
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const EnumAttributeEntry *
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
name|class
name|AlignAttributeEntry
operator|:
name|public
name|AttributeEntry
block|{
name|Attribute
operator|::
name|AttrKind
name|Kind
block|;
name|unsigned
name|Align
block|;
name|public
operator|:
name|AlignAttributeEntry
argument_list|(
argument|Attribute::AttrKind Kind
argument_list|,
argument|unsigned Align
argument_list|)
operator|:
name|AttributeEntry
argument_list|(
name|AlignAttrEntry
argument_list|)
block|,
name|Kind
argument_list|(
name|Kind
argument_list|)
block|,
name|Align
argument_list|(
argument|Align
argument_list|)
block|{}
name|Attribute
operator|::
name|AttrKind
name|getEnumKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|unsigned
name|getAlignment
argument_list|()
specifier|const
block|{
return|return
name|Align
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const AttributeEntry *AE
argument_list|)
block|{
return|return
name|AE
operator|->
name|getKindID
argument_list|()
operator|==
name|AlignAttrEntry
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const AlignAttributeEntry *
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
name|class
name|StringAttributeEntry
operator|:
name|public
name|AttributeEntry
block|{
name|std
operator|::
name|string
name|Kind
block|;
name|std
operator|::
name|string
name|Val
block|;
name|public
operator|:
name|StringAttributeEntry
argument_list|(
argument|StringRef Kind
argument_list|,
argument|StringRef Val = StringRef()
argument_list|)
operator|:
name|AttributeEntry
argument_list|(
name|StringAttrEntry
argument_list|)
block|,
name|Kind
argument_list|(
name|Kind
argument_list|)
block|,
name|Val
argument_list|(
argument|Val
argument_list|)
block|{}
name|StringRef
name|getStringKind
argument_list|()
specifier|const
block|{
return|return
name|Kind
return|;
block|}
name|StringRef
name|getStringValue
argument_list|()
specifier|const
block|{
return|return
name|Val
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const AttributeEntry *AE
argument_list|)
block|{
return|return
name|AE
operator|->
name|getKindID
argument_list|()
operator|==
name|StringAttrEntry
return|;
block|}
specifier|static
specifier|inline
name|bool
name|classof
argument_list|(
argument|const StringAttributeEntry *
argument_list|)
block|{
return|return
name|true
return|;
block|}
expr|}
block|;
comment|//===----------------------------------------------------------------------===//
comment|/// \class
comment|/// \brief This class represents a single, uniqued attribute. That attribute
comment|/// could be a single enum, a tuple, or a string.
name|class
name|AttributeImpl
operator|:
name|public
name|FoldingSetNode
block|{
name|LLVMContext
operator|&
name|Context
block|;
comment|///< Global context for uniquing objects
name|AttributeEntry
operator|*
name|Entry
block|;
comment|///< Holds the kind and value of the attribute
comment|// AttributesImpl is uniqued, these should not be publicly available.
name|void
name|operator
operator|=
operator|(
specifier|const
name|AttributeImpl
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
block|;
name|AttributeImpl
argument_list|(
argument|const AttributeImpl&
argument_list|)
name|LLVM_DELETED_FUNCTION
block|;
name|public
operator|:
name|AttributeImpl
argument_list|(
argument|LLVMContext&C
argument_list|,
argument|Attribute::AttrKind Kind
argument_list|)
block|;
name|AttributeImpl
argument_list|(
argument|LLVMContext&C
argument_list|,
argument|Attribute::AttrKind Kind
argument_list|,
argument|unsigned Align
argument_list|)
block|;
name|AttributeImpl
argument_list|(
argument|LLVMContext&C
argument_list|,
argument|StringRef Kind
argument_list|,
argument|StringRef Val = StringRef()
argument_list|)
block|;
operator|~
name|AttributeImpl
argument_list|()
block|;
name|LLVMContext
operator|&
name|getContext
argument_list|()
block|{
return|return
name|Context
return|;
block|}
name|bool
name|isEnumAttribute
argument_list|()
specifier|const
block|;
name|bool
name|isAlignAttribute
argument_list|()
specifier|const
block|;
name|bool
name|isStringAttribute
argument_list|()
specifier|const
block|;
name|bool
name|hasAttribute
argument_list|(
argument|Attribute::AttrKind A
argument_list|)
specifier|const
block|;
name|bool
name|hasAttribute
argument_list|(
argument|StringRef Kind
argument_list|)
specifier|const
block|;
name|Attribute
operator|::
name|AttrKind
name|getKindAsEnum
argument_list|()
specifier|const
block|;
name|uint64_t
name|getValueAsInt
argument_list|()
specifier|const
block|;
name|StringRef
name|getKindAsString
argument_list|()
specifier|const
block|;
name|StringRef
name|getValueAsString
argument_list|()
specifier|const
block|;
comment|/// \brief Used when sorting the attributes.
name|bool
name|operator
operator|<
operator|(
specifier|const
name|AttributeImpl
operator|&
name|AI
operator|)
specifier|const
block|;
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|)
specifier|const
block|{
if|if
condition|(
name|isEnumAttribute
argument_list|()
condition|)
name|Profile
argument_list|(
name|ID
argument_list|,
name|getKindAsEnum
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|isAlignAttribute
argument_list|()
condition|)
name|Profile
argument_list|(
name|ID
argument_list|,
name|getKindAsEnum
argument_list|()
argument_list|,
name|getValueAsInt
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|Profile
argument_list|(
name|ID
argument_list|,
name|getKindAsString
argument_list|()
argument_list|,
name|getValueAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|,
argument|Attribute::AttrKind Kind
argument_list|,
argument|uint64_t Val
argument_list|)
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
name|Kind
argument_list|)
block|;
if|if
condition|(
name|Val
condition|)
name|ID
operator|.
name|AddInteger
argument_list|(
name|Val
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|,
argument|StringRef Kind
argument_list|,
argument|StringRef Values
argument_list|)
block|{
name|ID
operator|.
name|AddString
argument_list|(
name|Kind
argument_list|)
block|;
if|if
condition|(
operator|!
name|Values
operator|.
name|empty
argument_list|()
condition|)
name|ID
operator|.
name|AddString
argument_list|(
name|Values
argument_list|)
expr_stmt|;
block|}
comment|// FIXME: Remove this!
specifier|static
name|uint64_t
name|getAttrMask
argument_list|(
argument|Attribute::AttrKind Val
argument_list|)
block|; }
block|;
comment|//===----------------------------------------------------------------------===//
comment|/// \class
comment|/// \brief This class represents a group of attributes that apply to one
comment|/// element: function, return type, or parameter.
name|class
name|AttributeSetNode
operator|:
name|public
name|FoldingSetNode
block|{
name|SmallVector
operator|<
name|Attribute
block|,
literal|4
operator|>
name|AttrList
block|;
name|AttributeSetNode
argument_list|(
name|ArrayRef
operator|<
name|Attribute
operator|>
name|Attrs
argument_list|)
operator|:
name|AttrList
argument_list|(
argument|Attrs.begin()
argument_list|,
argument|Attrs.end()
argument_list|)
block|{}
comment|// AttributesSetNode is uniqued, these should not be publicly available.
name|void
name|operator
operator|=
operator|(
specifier|const
name|AttributeSetNode
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
block|;
name|AttributeSetNode
argument_list|(
argument|const AttributeSetNode&
argument_list|)
name|LLVM_DELETED_FUNCTION
block|;
name|public
operator|:
specifier|static
name|AttributeSetNode
operator|*
name|get
argument_list|(
name|LLVMContext
operator|&
name|C
argument_list|,
name|ArrayRef
operator|<
name|Attribute
operator|>
name|Attrs
argument_list|)
block|;
name|bool
name|hasAttribute
argument_list|(
argument|Attribute::AttrKind Kind
argument_list|)
specifier|const
block|;
name|bool
name|hasAttribute
argument_list|(
argument|StringRef Kind
argument_list|)
specifier|const
block|;
name|bool
name|hasAttributes
argument_list|()
specifier|const
block|{
return|return
operator|!
name|AttrList
operator|.
name|empty
argument_list|()
return|;
block|}
name|Attribute
name|getAttribute
argument_list|(
argument|Attribute::AttrKind Kind
argument_list|)
specifier|const
block|;
name|Attribute
name|getAttribute
argument_list|(
argument|StringRef Kind
argument_list|)
specifier|const
block|;
name|unsigned
name|getAlignment
argument_list|()
specifier|const
block|;
name|unsigned
name|getStackAlignment
argument_list|()
specifier|const
block|;
name|std
operator|::
name|string
name|getAsString
argument_list|(
argument|bool InAttrGrp
argument_list|)
specifier|const
block|;
typedef|typedef
name|SmallVectorImpl
operator|<
name|Attribute
operator|>
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|SmallVectorImpl
operator|<
name|Attribute
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|iterator
name|begin
argument_list|()
block|{
return|return
name|AttrList
operator|.
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|()
block|{
return|return
name|AttrList
operator|.
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|AttrList
operator|.
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|AttrList
operator|.
name|end
argument_list|()
return|;
block|}
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|)
specifier|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|AttrList
argument_list|)
block|;   }
specifier|static
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|,
argument|ArrayRef<Attribute> AttrList
argument_list|)
block|{
for|for
control|(
name|unsigned
name|I
init|=
literal|0
init|,
name|E
init|=
name|AttrList
operator|.
name|size
argument_list|()
init|;
name|I
operator|!=
name|E
condition|;
operator|++
name|I
control|)
name|AttrList
index|[
name|I
index|]
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
expr|}
block|;
comment|//===----------------------------------------------------------------------===//
comment|/// \class
comment|/// \brief This class represents a set of attributes that apply to the function,
comment|/// return type, and parameters.
name|class
name|AttributeSetImpl
operator|:
name|public
name|FoldingSetNode
block|{
name|friend
name|class
name|AttributeSet
block|;
name|LLVMContext
operator|&
name|Context
block|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|AttributeSetNode
operator|*
operator|>
name|IndexAttrPair
expr_stmt|;
name|SmallVector
operator|<
name|IndexAttrPair
block|,
literal|4
operator|>
name|AttrNodes
block|;
comment|// AttributesSet is uniqued, these should not be publicly available.
name|void
name|operator
operator|=
operator|(
specifier|const
name|AttributeSetImpl
operator|&
operator|)
name|LLVM_DELETED_FUNCTION
block|;
name|AttributeSetImpl
argument_list|(
argument|const AttributeSetImpl&
argument_list|)
name|LLVM_DELETED_FUNCTION
block|;
name|public
operator|:
name|AttributeSetImpl
argument_list|(
name|LLVMContext
operator|&
name|C
argument_list|,
name|ArrayRef
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
argument_list|,
name|AttributeSetNode
operator|*
operator|>
expr|>
name|attrs
argument_list|)
operator|:
name|Context
argument_list|(
name|C
argument_list|)
block|,
name|AttrNodes
argument_list|(
argument|attrs.begin()
argument_list|,
argument|attrs.end()
argument_list|)
block|{}
comment|/// \brief Get the context that created this AttributeSetImpl.
name|LLVMContext
operator|&
name|getContext
argument_list|()
block|{
return|return
name|Context
return|;
block|}
comment|/// \brief Return the number of attributes this AttributeSet contains.
name|unsigned
name|getNumAttributes
argument_list|()
specifier|const
block|{
return|return
name|AttrNodes
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// \brief Get the index of the given "slot" in the AttrNodes list. This index
comment|/// is the index of the return, parameter, or function object that the
comment|/// attributes are applied to, not the index into the AttrNodes list where the
comment|/// attributes reside.
name|uint64_t
name|getSlotIndex
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|AttrNodes
index|[
name|Slot
index|]
operator|.
name|first
return|;
block|}
comment|/// \brief Retrieve the attributes for the given "slot" in the AttrNode list.
comment|/// \p Slot is an index into the AttrNodes list, not the index of the return /
comment|/// parameter/ function which the attributes apply to.
name|AttributeSet
name|getSlotAttributes
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|AttributeSet
operator|::
name|get
argument_list|(
name|Context
argument_list|,
name|AttrNodes
index|[
name|Slot
index|]
argument_list|)
return|;
block|}
comment|/// \brief Retrieve the attribute set node for the given "slot" in the
comment|/// AttrNode list.
name|AttributeSetNode
operator|*
name|getSlotNode
argument_list|(
argument|unsigned Slot
argument_list|)
specifier|const
block|{
return|return
name|AttrNodes
index|[
name|Slot
index|]
operator|.
name|second
return|;
block|}
typedef|typedef
name|AttributeSetNode
operator|::
name|iterator
name|iterator
expr_stmt|;
typedef|typedef
name|AttributeSetNode
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|iterator
name|begin
argument_list|(
argument|unsigned Idx
argument_list|)
block|{
return|return
name|AttrNodes
index|[
name|Idx
index|]
operator|.
name|second
operator|->
name|begin
argument_list|()
return|;
block|}
name|iterator
name|end
argument_list|(
argument|unsigned Idx
argument_list|)
block|{
return|return
name|AttrNodes
index|[
name|Idx
index|]
operator|.
name|second
operator|->
name|end
argument_list|()
return|;
block|}
name|const_iterator
name|begin
argument_list|(
argument|unsigned Idx
argument_list|)
specifier|const
block|{
return|return
name|AttrNodes
index|[
name|Idx
index|]
operator|.
name|second
operator|->
name|begin
argument_list|()
return|;
block|}
name|const_iterator
name|end
argument_list|(
argument|unsigned Idx
argument_list|)
specifier|const
block|{
return|return
name|AttrNodes
index|[
name|Idx
index|]
operator|.
name|second
operator|->
name|end
argument_list|()
return|;
block|}
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|)
specifier|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|AttrNodes
argument_list|)
block|;   }
specifier|static
name|void
name|Profile
argument_list|(
argument|FoldingSetNodeID&ID
argument_list|,
argument|ArrayRef<std::pair<unsigned
argument_list|,
argument|AttributeSetNode*>> Nodes
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|,
name|e
init|=
name|Nodes
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|e
condition|;
operator|++
name|i
control|)
block|{
name|ID
operator|.
name|AddInteger
argument_list|(
name|Nodes
index|[
name|i
index|]
operator|.
name|first
argument_list|)
expr_stmt|;
name|ID
operator|.
name|AddPointer
argument_list|(
name|Nodes
index|[
name|i
index|]
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
block|}
comment|// FIXME: This atrocity is temporary.
name|uint64_t
name|Raw
argument_list|(
argument|uint64_t Index
argument_list|)
specifier|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

