begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AttributeSetNode.h - AttributeSet Internal Node ---------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief This file defines the node class used internally by AttributeSet.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_IR_ATTRIBUTESETNODE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_IR_ATTRIBUTESETNODE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/FoldingSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Optional.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Attributes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/TrailingObjects.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<climits>
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|//===----------------------------------------------------------------------===//
comment|/// \class
comment|/// \brief This class represents a group of attributes that apply to one
comment|/// element: function, return type, or parameter.
name|class
name|AttributeSetNode
name|final
range|:
name|public
name|FoldingSetNode
decl_stmt|,
name|private
name|TrailingObjects
decl|<
name|AttributeSetNode
decl_stmt|,
name|Attribute
decl|>
block|{
name|friend
name|TrailingObjects
decl_stmt|;
name|unsigned
name|NumAttrs
decl_stmt|;
comment|///< Number of attributes in this node.
comment|/// Bitset with a bit for each available attribute Attribute::AttrKind.
name|uint64_t
name|AvailableAttrs
decl_stmt|;
name|AttributeSetNode
argument_list|(
name|ArrayRef
operator|<
name|Attribute
operator|>
name|Attrs
argument_list|)
operator|:
name|NumAttrs
argument_list|(
name|Attrs
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|AvailableAttrs
argument_list|(
literal|0
argument_list|)
block|{
name|static_assert
argument_list|(
name|Attribute
operator|::
name|EndAttrKinds
operator|<=
sizeof|sizeof
argument_list|(
name|AvailableAttrs
argument_list|)
operator|*
name|CHAR_BIT
argument_list|,
literal|"Too many attributes for AvailableAttrs"
argument_list|)
block|;
comment|// There's memory after the node where we can store the entries in.
name|std
operator|::
name|copy
argument_list|(
name|Attrs
operator|.
name|begin
argument_list|()
argument_list|,
name|Attrs
operator|.
name|end
argument_list|()
argument_list|,
name|getTrailingObjects
operator|<
name|Attribute
operator|>
operator|(
operator|)
argument_list|)
block|;
for|for
control|(
name|Attribute
name|I
range|:
operator|*
name|this
control|)
block|{
if|if
condition|(
operator|!
name|I
operator|.
name|isStringAttribute
argument_list|()
condition|)
block|{
name|AvailableAttrs
operator||=
operator|(
operator|(
name|uint64_t
operator|)
literal|1
operator|)
operator|<<
name|I
operator|.
name|getKindAsEnum
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|public
operator|:
comment|// AttributesSetNode is uniqued, these should not be available.
name|AttributeSetNode
argument_list|(
specifier|const
name|AttributeSetNode
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|AttributeSetNode
modifier|&
name|operator
init|=
operator|(
specifier|const
name|AttributeSetNode
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
block|{
operator|::
name|operator
name|delete
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
specifier|static
name|AttributeSetNode
modifier|*
name|get
argument_list|(
name|LLVMContext
operator|&
name|C
argument_list|,
name|ArrayRef
operator|<
name|Attribute
operator|>
name|Attrs
argument_list|)
decl_stmt|;
specifier|static
name|AttributeSetNode
modifier|*
name|get
parameter_list|(
name|AttributeSet
name|AS
parameter_list|,
name|unsigned
name|Index
parameter_list|)
block|{
return|return
name|AS
operator|.
name|getAttributes
argument_list|(
name|Index
argument_list|)
return|;
block|}
comment|/// \brief Return the number of attributes this AttributeSet contains.
name|unsigned
name|getNumAttributes
argument_list|()
specifier|const
block|{
return|return
name|NumAttrs
return|;
block|}
name|bool
name|hasAttribute
argument_list|(
name|Attribute
operator|::
name|AttrKind
name|Kind
argument_list|)
decl|const
block|{
return|return
name|AvailableAttrs
operator|&
operator|(
operator|(
name|uint64_t
operator|)
literal|1
operator|)
operator|<<
name|Kind
return|;
block|}
name|bool
name|hasAttribute
argument_list|(
name|StringRef
name|Kind
argument_list|)
decl|const
decl_stmt|;
name|bool
name|hasAttributes
argument_list|()
specifier|const
block|{
return|return
name|NumAttrs
operator|!=
literal|0
return|;
block|}
name|Attribute
name|getAttribute
argument_list|(
name|Attribute
operator|::
name|AttrKind
name|Kind
argument_list|)
decl|const
decl_stmt|;
name|Attribute
name|getAttribute
argument_list|(
name|StringRef
name|Kind
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getAlignment
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|getStackAlignment
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|getDereferenceableBytes
argument_list|()
specifier|const
expr_stmt|;
name|uint64_t
name|getDereferenceableOrNullBytes
argument_list|()
specifier|const
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|Optional
operator|<
name|unsigned
operator|>>
name|getAllocSizeArgs
argument_list|()
specifier|const
expr_stmt|;
name|std
operator|::
name|string
name|getAsString
argument_list|(
argument|bool InAttrGrp
argument_list|)
specifier|const
expr_stmt|;
typedef|typedef
specifier|const
name|Attribute
modifier|*
name|iterator
typedef|;
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|getTrailingObjects
operator|<
name|Attribute
operator|>
operator|(
operator|)
return|;
block|}
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|+
name|NumAttrs
return|;
block|}
name|void
name|Profile
argument_list|(
name|FoldingSetNodeID
operator|&
name|ID
argument_list|)
decl|const
block|{
name|Profile
argument_list|(
name|ID
argument_list|,
name|makeArrayRef
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|Profile
argument_list|(
name|FoldingSetNodeID
operator|&
name|ID
argument_list|,
name|ArrayRef
operator|<
name|Attribute
operator|>
name|AttrList
argument_list|)
block|{
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|Attr
range|:
name|AttrList
control|)
name|Attr
operator|.
name|Profile
argument_list|(
name|ID
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_IR_ATTRIBUTESETNODE_H
end_comment

end_unit

