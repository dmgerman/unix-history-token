begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- lib/MC/ELFObjectWriter.h - ELF File Writer -------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file implements ELF object file writer information.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_MC_ELFOBJECTWRITER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_MC_ELFOBJECTWRITER_H
end_define

begin_include
include|#
directive|include
file|"MCELF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/OwningPtr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallPtrSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallString.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCAssembler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCELFObjectWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCELFSymbolFlags.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCObjectWriter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCExpr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSymbol.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCSection
decl_stmt|;
name|class
name|MCDataFragment
decl_stmt|;
name|class
name|MCSectionELF
decl_stmt|;
name|class
name|ELFObjectWriter
range|:
name|public
name|MCObjectWriter
block|{
name|protected
operator|:
specifier|static
name|bool
name|isFixupKindPCRel
argument_list|(
argument|const MCAssembler&Asm
argument_list|,
argument|unsigned Kind
argument_list|)
block|;
specifier|static
name|bool
name|RelocNeedsGOT
argument_list|(
argument|MCSymbolRefExpr::VariantKind Variant
argument_list|)
block|;
specifier|static
name|uint64_t
name|SymbolValue
argument_list|(
name|MCSymbolData
operator|&
name|Data
argument_list|,
specifier|const
name|MCAsmLayout
operator|&
name|Layout
argument_list|)
block|;
specifier|static
name|bool
name|isInSymtab
argument_list|(
argument|const MCAssembler&Asm
argument_list|,
argument|const MCSymbolData&Data
argument_list|,
argument|bool Used
argument_list|,
argument|bool Renamed
argument_list|)
block|;
specifier|static
name|bool
name|isLocal
argument_list|(
argument|const MCSymbolData&Data
argument_list|,
argument|bool isSignature
argument_list|,
argument|bool isUsedInReloc
argument_list|)
block|;
specifier|static
name|bool
name|IsELFMetaDataSection
argument_list|(
specifier|const
name|MCSectionData
operator|&
name|SD
argument_list|)
block|;
specifier|static
name|uint64_t
name|DataSectionSize
argument_list|(
specifier|const
name|MCSectionData
operator|&
name|SD
argument_list|)
block|;
specifier|static
name|uint64_t
name|GetSectionFileSize
argument_list|(
specifier|const
name|MCAsmLayout
operator|&
name|Layout
argument_list|,
specifier|const
name|MCSectionData
operator|&
name|SD
argument_list|)
block|;
specifier|static
name|uint64_t
name|GetSectionAddressSize
argument_list|(
specifier|const
name|MCAsmLayout
operator|&
name|Layout
argument_list|,
specifier|const
name|MCSectionData
operator|&
name|SD
argument_list|)
block|;
name|void
name|WriteDataSectionData
argument_list|(
name|MCAssembler
operator|&
name|Asm
argument_list|,
specifier|const
name|MCAsmLayout
operator|&
name|Layout
argument_list|,
specifier|const
name|MCSectionELF
operator|&
name|Section
argument_list|)
block|;
comment|/*static bool isFixupKindX86RIPRel(unsigned Kind) {       return Kind == X86::reloc_riprel_4byte ||         Kind == X86::reloc_riprel_4byte_movq_load;     }*/
comment|/// ELFSymbolData - Helper struct for containing some precomputed
comment|/// information on symbols.
block|struct
name|ELFSymbolData
block|{
name|MCSymbolData
operator|*
name|SymbolData
block|;
name|uint64_t
name|StringIndex
block|;
name|uint32_t
name|SectionIndex
block|;
comment|// Support lexicographic sorting.
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ELFSymbolData
operator|&
name|RHS
operator|)
specifier|const
block|{
if|if
condition|(
name|MCELF
operator|::
name|GetType
argument_list|(
operator|*
name|SymbolData
argument_list|)
operator|==
name|ELF
operator|::
name|STT_FILE
condition|)
return|return
name|true
return|;
if|if
condition|(
name|MCELF
operator|::
name|GetType
argument_list|(
operator|*
name|RHS
operator|.
name|SymbolData
argument_list|)
operator|==
name|ELF
operator|::
name|STT_FILE
condition|)
return|return
name|false
return|;
return|return
name|SymbolData
operator|->
name|getSymbol
argument_list|()
operator|.
name|getName
argument_list|()
operator|<
name|RHS
operator|.
name|SymbolData
operator|->
name|getSymbol
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/// @name Relocation Data
end_comment

begin_comment
comment|/// @{
end_comment

begin_struct
struct|struct
name|ELFRelocationEntry
block|{
comment|// Make these big enough for both 32-bit and 64-bit
name|uint64_t
name|r_offset
decl_stmt|;
name|int
name|Index
decl_stmt|;
name|unsigned
name|Type
decl_stmt|;
specifier|const
name|MCSymbol
modifier|*
name|Symbol
decl_stmt|;
name|uint64_t
name|r_addend
decl_stmt|;
name|ELFRelocationEntry
argument_list|()
operator|:
name|r_offset
argument_list|(
literal|0
argument_list|)
operator|,
name|Index
argument_list|(
literal|0
argument_list|)
operator|,
name|Type
argument_list|(
literal|0
argument_list|)
operator|,
name|Symbol
argument_list|(
literal|0
argument_list|)
operator|,
name|r_addend
argument_list|(
literal|0
argument_list|)
block|{}
name|ELFRelocationEntry
argument_list|(
argument|uint64_t RelocOffset
argument_list|,
argument|int Idx
argument_list|,
argument|unsigned RelType
argument_list|,
argument|const MCSymbol *Sym
argument_list|,
argument|uint64_t Addend
argument_list|)
operator|:
name|r_offset
argument_list|(
name|RelocOffset
argument_list|)
operator|,
name|Index
argument_list|(
name|Idx
argument_list|)
operator|,
name|Type
argument_list|(
name|RelType
argument_list|)
operator|,
name|Symbol
argument_list|(
name|Sym
argument_list|)
operator|,
name|r_addend
argument_list|(
argument|Addend
argument_list|)
block|{}
comment|// Support lexicographic sorting.
name|bool
name|operator
operator|<
operator|(
specifier|const
name|ELFRelocationEntry
operator|&
name|RE
operator|)
specifier|const
block|{
return|return
name|RE
operator|.
name|r_offset
operator|<
name|r_offset
return|;
block|}
block|}
struct|;
end_struct

begin_comment
comment|/// The target specific ELF writer instance.
end_comment

begin_expr_stmt
name|llvm
operator|::
name|OwningPtr
operator|<
name|MCELFObjectTargetWriter
operator|>
name|TargetObjectWriter
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SmallPtrSet
operator|<
specifier|const
name|MCSymbol
operator|*
operator|,
literal|16
operator|>
name|UsedInReloc
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|SmallPtrSet
operator|<
specifier|const
name|MCSymbol
operator|*
operator|,
literal|16
operator|>
name|WeakrefUsedInReloc
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|DenseMap
operator|<
specifier|const
name|MCSymbol
operator|*
operator|,
specifier|const
name|MCSymbol
operator|*
operator|>
name|Renames
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|llvm
operator|::
name|DenseMap
operator|<
specifier|const
name|MCSectionData
operator|*
operator|,
name|std
operator|::
name|vector
operator|<
name|ELFRelocationEntry
operator|>
expr|>
name|Relocations
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|DenseMap
operator|<
specifier|const
name|MCSection
operator|*
operator|,
name|uint64_t
operator|>
name|SectionStringTableIndex
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// @}
end_comment

begin_comment
comment|/// @name Symbol Table Data
end_comment

begin_comment
comment|/// @{
end_comment

begin_expr_stmt
name|SmallString
operator|<
literal|256
operator|>
name|StringTable
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|ELFSymbolData
operator|>
name|LocalSymbolData
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|ELFSymbolData
operator|>
name|ExternalSymbolData
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|vector
operator|<
name|ELFSymbolData
operator|>
name|UndefinedSymbolData
expr_stmt|;
end_expr_stmt

begin_comment
comment|/// @}
end_comment

begin_decl_stmt
name|bool
name|NeedsGOT
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bool
name|NeedsSymtabShndx
decl_stmt|;
end_decl_stmt

begin_comment
comment|// This holds the symbol table index of the last local symbol.
end_comment

begin_decl_stmt
name|unsigned
name|LastLocalSymbolIndex
decl_stmt|;
end_decl_stmt

begin_comment
comment|// This holds the .strtab section index.
end_comment

begin_decl_stmt
name|unsigned
name|StringTableIndex
decl_stmt|;
end_decl_stmt

begin_comment
comment|// This holds the .symtab section index.
end_comment

begin_decl_stmt
name|unsigned
name|SymbolTableIndex
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|ShstrtabIndex
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|MCSymbol
modifier|*
name|SymbolToReloc
argument_list|(
specifier|const
name|MCAssembler
operator|&
name|Asm
argument_list|,
specifier|const
name|MCValue
operator|&
name|Target
argument_list|,
specifier|const
name|MCFragment
operator|&
name|F
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|// For arch-specific emission of explicit reloc symbol
end_comment

begin_decl_stmt
name|virtual
specifier|const
name|MCSymbol
modifier|*
name|ExplicitRelSym
argument_list|(
specifier|const
name|MCAssembler
operator|&
name|Asm
argument_list|,
specifier|const
name|MCValue
operator|&
name|Target
argument_list|,
specifier|const
name|MCFragment
operator|&
name|F
argument_list|,
name|bool
name|IsBSS
argument_list|)
decl|const
block|{
return|return
name|NULL
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|is64Bit
argument_list|()
specifier|const
block|{
return|return
name|TargetObjectWriter
operator|->
name|is64Bit
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|hasRelocationAddend
argument_list|()
specifier|const
block|{
return|return
name|TargetObjectWriter
operator|->
name|hasRelocationAddend
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|ELFObjectWriter
argument_list|(
argument|MCELFObjectTargetWriter *MOTW
argument_list|,
argument|raw_ostream&_OS
argument_list|,
argument|bool IsLittleEndian
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|MCObjectWriter
argument_list|(
name|_OS
argument_list|,
name|IsLittleEndian
argument_list|)
operator|,
name|TargetObjectWriter
argument_list|(
name|MOTW
argument_list|)
operator|,
name|NeedsGOT
argument_list|(
name|false
argument_list|)
operator|,
name|NeedsSymtabShndx
argument_list|(
argument|false
argument_list|)
block|{     }
name|virtual
operator|~
name|ELFObjectWriter
argument_list|()
expr_stmt|;
end_expr_stmt

begin_function
name|void
name|WriteWord
parameter_list|(
name|uint64_t
name|W
parameter_list|)
block|{
if|if
condition|(
name|is64Bit
argument_list|()
condition|)
name|Write64
argument_list|(
name|W
argument_list|)
expr_stmt|;
else|else
name|Write32
argument_list|(
name|W
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|StringLE16
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|uint16_t
name|Value
parameter_list|)
block|{
name|buf
index|[
literal|0
index|]
operator|=
name|char
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
expr_stmt|;
name|buf
index|[
literal|1
index|]
operator|=
name|char
argument_list|(
name|Value
operator|>>
literal|8
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|StringLE32
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|uint32_t
name|Value
parameter_list|)
block|{
name|StringLE16
argument_list|(
name|buf
argument_list|,
name|uint16_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|StringLE16
argument_list|(
name|buf
operator|+
literal|2
argument_list|,
name|uint16_t
argument_list|(
name|Value
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|StringLE64
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|StringLE32
argument_list|(
name|buf
argument_list|,
name|uint32_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|StringLE32
argument_list|(
name|buf
operator|+
literal|4
argument_list|,
name|uint32_t
argument_list|(
name|Value
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|StringBE16
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|uint16_t
name|Value
parameter_list|)
block|{
name|buf
index|[
literal|0
index|]
operator|=
name|char
argument_list|(
name|Value
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|buf
index|[
literal|1
index|]
operator|=
name|char
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|StringBE32
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|uint32_t
name|Value
parameter_list|)
block|{
name|StringBE16
argument_list|(
name|buf
argument_list|,
name|uint16_t
argument_list|(
name|Value
operator|>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|StringBE16
argument_list|(
name|buf
operator|+
literal|2
argument_list|,
name|uint16_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|StringBE64
parameter_list|(
name|char
modifier|*
name|buf
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|StringBE32
argument_list|(
name|buf
argument_list|,
name|uint32_t
argument_list|(
name|Value
operator|>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|StringBE32
argument_list|(
name|buf
operator|+
literal|4
argument_list|,
name|uint32_t
argument_list|(
name|Value
operator|>>
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|String8
parameter_list|(
name|MCDataFragment
modifier|&
name|F
parameter_list|,
name|uint8_t
name|Value
parameter_list|)
block|{
name|char
name|buf
index|[
literal|1
index|]
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
name|Value
expr_stmt|;
name|F
operator|.
name|getContents
argument_list|()
operator|+=
name|StringRef
argument_list|(
name|buf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|String16
parameter_list|(
name|MCDataFragment
modifier|&
name|F
parameter_list|,
name|uint16_t
name|Value
parameter_list|)
block|{
name|char
name|buf
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
name|isLittleEndian
argument_list|()
condition|)
name|StringLE16
argument_list|(
name|buf
argument_list|,
name|Value
argument_list|)
expr_stmt|;
else|else
name|StringBE16
argument_list|(
name|buf
argument_list|,
name|Value
argument_list|)
expr_stmt|;
name|F
operator|.
name|getContents
argument_list|()
operator|+=
name|StringRef
argument_list|(
name|buf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|String32
parameter_list|(
name|MCDataFragment
modifier|&
name|F
parameter_list|,
name|uint32_t
name|Value
parameter_list|)
block|{
name|char
name|buf
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|isLittleEndian
argument_list|()
condition|)
name|StringLE32
argument_list|(
name|buf
argument_list|,
name|Value
argument_list|)
expr_stmt|;
else|else
name|StringBE32
argument_list|(
name|buf
argument_list|,
name|Value
argument_list|)
expr_stmt|;
name|F
operator|.
name|getContents
argument_list|()
operator|+=
name|StringRef
argument_list|(
name|buf
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|String64
parameter_list|(
name|MCDataFragment
modifier|&
name|F
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|char
name|buf
index|[
literal|8
index|]
decl_stmt|;
if|if
condition|(
name|isLittleEndian
argument_list|()
condition|)
name|StringLE64
argument_list|(
name|buf
argument_list|,
name|Value
argument_list|)
expr_stmt|;
else|else
name|StringBE64
argument_list|(
name|buf
argument_list|,
name|Value
argument_list|)
expr_stmt|;
name|F
operator|.
name|getContents
argument_list|()
operator|+=
name|StringRef
argument_list|(
name|buf
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|virtual
name|void
name|WriteHeader
parameter_list|(
name|uint64_t
name|SectionDataSize
parameter_list|,
name|unsigned
name|NumberOfSections
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/// Default e_flags = 0
end_comment

begin_function
name|virtual
name|void
name|WriteEFlags
parameter_list|()
block|{
name|Write32
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|virtual
name|void
name|WriteSymbolEntry
parameter_list|(
name|MCDataFragment
modifier|*
name|SymtabF
parameter_list|,
name|MCDataFragment
modifier|*
name|ShndxF
parameter_list|,
name|uint64_t
name|name
parameter_list|,
name|uint8_t
name|info
parameter_list|,
name|uint64_t
name|value
parameter_list|,
name|uint64_t
name|size
parameter_list|,
name|uint8_t
name|other
parameter_list|,
name|uint32_t
name|shndx
parameter_list|,
name|bool
name|Reserved
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|void
name|WriteSymbol
parameter_list|(
name|MCDataFragment
modifier|*
name|SymtabF
parameter_list|,
name|MCDataFragment
modifier|*
name|ShndxF
parameter_list|,
name|ELFSymbolData
modifier|&
name|MSD
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|MCSectionELF
operator|*
operator|,
name|uint32_t
operator|>
name|SectionIndexMapTy
expr_stmt|;
end_typedef

begin_function_decl
name|virtual
name|void
name|WriteSymbolTable
parameter_list|(
name|MCDataFragment
modifier|*
name|SymtabF
parameter_list|,
name|MCDataFragment
modifier|*
name|ShndxF
parameter_list|,
specifier|const
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
specifier|const
name|SectionIndexMapTy
modifier|&
name|SectionIndexMap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|void
name|RecordRelocation
parameter_list|(
specifier|const
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
specifier|const
name|MCFragment
modifier|*
name|Fragment
parameter_list|,
specifier|const
name|MCFixup
modifier|&
name|Fixup
parameter_list|,
name|MCValue
name|Target
parameter_list|,
name|uint64_t
modifier|&
name|FixedValue
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|uint64_t
name|getSymbolIndexInSymbolTable
parameter_list|(
specifier|const
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCSymbol
modifier|*
name|S
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// Map from a group section to the signature symbol
end_comment

begin_typedef
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|MCSectionELF
operator|*
operator|,
specifier|const
name|MCSymbol
operator|*
operator|>
name|GroupMapTy
expr_stmt|;
end_typedef

begin_comment
comment|// Map from a signature symbol to the group section
end_comment

begin_typedef
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|MCSymbol
operator|*
operator|,
specifier|const
name|MCSectionELF
operator|*
operator|>
name|RevGroupMapTy
expr_stmt|;
end_typedef

begin_comment
comment|// Map from a section to the section with the relocations
end_comment

begin_typedef
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|MCSectionELF
operator|*
operator|,
specifier|const
name|MCSectionELF
operator|*
operator|>
name|RelMapTy
expr_stmt|;
end_typedef

begin_comment
comment|// Map from a section to its offset
end_comment

begin_typedef
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|MCSectionELF
operator|*
operator|,
name|uint64_t
operator|>
name|SectionOffsetMapTy
expr_stmt|;
end_typedef

begin_comment
comment|/// ComputeSymbolTable - Compute the symbol table data
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// \param StringTable [out] - The string table data.
end_comment

begin_comment
comment|/// \param StringIndexMap [out] - Map from symbol names to offsets in the
end_comment

begin_comment
comment|/// string table.
end_comment

begin_function_decl
name|virtual
name|void
name|ComputeSymbolTable
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|SectionIndexMapTy
modifier|&
name|SectionIndexMap
parameter_list|,
name|RevGroupMapTy
name|RevGroupMap
parameter_list|,
name|unsigned
name|NumRegularSections
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|void
name|ComputeIndexMap
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
name|SectionIndexMapTy
modifier|&
name|SectionIndexMap
parameter_list|,
specifier|const
name|RelMapTy
modifier|&
name|RelMap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|CreateRelocationSections
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
name|RelMapTy
modifier|&
name|RelMap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|WriteRelocations
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
specifier|const
name|RelMapTy
modifier|&
name|RelMap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|void
name|CreateMetadataSections
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
name|SectionIndexMapTy
modifier|&
name|SectionIndexMap
parameter_list|,
specifier|const
name|RelMapTy
modifier|&
name|RelMap
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// Create the sections that show up in the symbol table. Currently
end_comment

begin_comment
comment|// those are the .note.GNU-stack section and the group sections.
end_comment

begin_function_decl
name|virtual
name|void
name|CreateIndexedSections
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
name|GroupMapTy
modifier|&
name|GroupMap
parameter_list|,
name|RevGroupMapTy
modifier|&
name|RevGroupMap
parameter_list|,
name|SectionIndexMapTy
modifier|&
name|SectionIndexMap
parameter_list|,
specifier|const
name|RelMapTy
modifier|&
name|RelMap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|void
name|ExecutePostLayoutBinding
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|WriteSectionHeader
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|GroupMapTy
modifier|&
name|GroupMap
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|,
specifier|const
name|SectionIndexMapTy
modifier|&
name|SectionIndexMap
parameter_list|,
specifier|const
name|SectionOffsetMapTy
modifier|&
name|SectionOffsetMap
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|ComputeSectionOrder
argument_list|(
name|MCAssembler
operator|&
name|Asm
argument_list|,
name|std
operator|::
name|vector
operator|<
specifier|const
name|MCSectionELF
operator|*
operator|>
operator|&
name|Sections
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|virtual
name|void
name|WriteSecHdrEntry
parameter_list|(
name|uint32_t
name|Name
parameter_list|,
name|uint32_t
name|Type
parameter_list|,
name|uint64_t
name|Flags
parameter_list|,
name|uint64_t
name|Address
parameter_list|,
name|uint64_t
name|Offset
parameter_list|,
name|uint64_t
name|Size
parameter_list|,
name|uint32_t
name|Link
parameter_list|,
name|uint32_t
name|Info
parameter_list|,
name|uint64_t
name|Alignment
parameter_list|,
name|uint64_t
name|EntrySize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|void
name|WriteRelocationsFragment
parameter_list|(
specifier|const
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
name|MCDataFragment
modifier|*
name|F
parameter_list|,
specifier|const
name|MCSectionData
modifier|*
name|SD
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|virtual
name|bool
name|IsSymbolRefDifferenceFullyResolvedImpl
argument_list|(
specifier|const
name|MCAssembler
operator|&
name|Asm
argument_list|,
specifier|const
name|MCSymbolData
operator|&
name|DataA
argument_list|,
specifier|const
name|MCFragment
operator|&
name|FB
argument_list|,
name|bool
name|InSet
argument_list|,
name|bool
name|IsPCRel
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_function_decl
name|virtual
name|void
name|WriteObject
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|MCAsmLayout
modifier|&
name|Layout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|virtual
name|void
name|WriteSection
parameter_list|(
name|MCAssembler
modifier|&
name|Asm
parameter_list|,
specifier|const
name|SectionIndexMapTy
modifier|&
name|SectionIndexMap
parameter_list|,
name|uint32_t
name|GroupSymbolIndex
parameter_list|,
name|uint64_t
name|Offset
parameter_list|,
name|uint64_t
name|Size
parameter_list|,
name|uint64_t
name|Alignment
parameter_list|,
specifier|const
name|MCSectionELF
modifier|&
name|Section
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_function_decl
name|virtual
name|unsigned
name|GetRelocType
parameter_list|(
specifier|const
name|MCValue
modifier|&
name|Target
parameter_list|,
specifier|const
name|MCFixup
modifier|&
name|Fixup
parameter_list|,
name|bool
name|IsPCRel
parameter_list|,
name|bool
name|IsRelocWithSymbol
parameter_list|,
name|int64_t
name|Addend
parameter_list|)
init|=
literal|0
function_decl|;
end_function_decl

begin_comment
unit|};
comment|//===- X86ELFObjectWriter -------------------------------------------===//
end_comment

begin_decl_stmt
name|class
name|X86ELFObjectWriter
range|:
name|public
name|ELFObjectWriter
block|{
name|public
operator|:
name|X86ELFObjectWriter
argument_list|(
argument|MCELFObjectTargetWriter *MOTW
argument_list|,
argument|raw_ostream&_OS
argument_list|,
argument|bool IsLittleEndian
argument_list|)
block|;
name|virtual
operator|~
name|X86ELFObjectWriter
argument_list|()
block|;
name|protected
operator|:
name|virtual
name|unsigned
name|GetRelocType
argument_list|(
argument|const MCValue&Target
argument_list|,
argument|const MCFixup&Fixup
argument_list|,
argument|bool IsPCRel
argument_list|,
argument|bool IsRelocWithSymbol
argument_list|,
argument|int64_t Addend
argument_list|)
block|;   }
decl_stmt|;
end_decl_stmt

begin_comment
comment|//===- ARMELFObjectWriter -------------------------------------------===//
end_comment

begin_decl_stmt
name|class
name|ARMELFObjectWriter
range|:
name|public
name|ELFObjectWriter
block|{
name|public
operator|:
comment|// FIXME: MCAssembler can't yet return the Subtarget,
expr|enum
block|{
name|DefaultEABIVersion
operator|=
literal|0x05000000U
block|}
block|;
name|ARMELFObjectWriter
argument_list|(
argument|MCELFObjectTargetWriter *MOTW
argument_list|,
argument|raw_ostream&_OS
argument_list|,
argument|bool IsLittleEndian
argument_list|)
block|;
name|virtual
operator|~
name|ARMELFObjectWriter
argument_list|()
block|;
name|virtual
name|void
name|WriteEFlags
argument_list|()
block|;
name|protected
operator|:
name|virtual
specifier|const
name|MCSymbol
operator|*
name|ExplicitRelSym
argument_list|(
argument|const MCAssembler&Asm
argument_list|,
argument|const MCValue&Target
argument_list|,
argument|const MCFragment&F
argument_list|,
argument|bool IsBSS
argument_list|)
specifier|const
block|;
name|virtual
name|unsigned
name|GetRelocType
argument_list|(
argument|const MCValue&Target
argument_list|,
argument|const MCFixup&Fixup
argument_list|,
argument|bool IsPCRel
argument_list|,
argument|bool IsRelocWithSymbol
argument_list|,
argument|int64_t Addend
argument_list|)
block|;   }
decl_stmt|;
end_decl_stmt

begin_comment
comment|//===- MBlazeELFObjectWriter -------------------------------------------===//
end_comment

begin_decl_stmt
name|class
name|MBlazeELFObjectWriter
range|:
name|public
name|ELFObjectWriter
block|{
name|public
operator|:
name|MBlazeELFObjectWriter
argument_list|(
argument|MCELFObjectTargetWriter *MOTW
argument_list|,
argument|raw_ostream&_OS
argument_list|,
argument|bool IsLittleEndian
argument_list|)
block|;
name|virtual
operator|~
name|MBlazeELFObjectWriter
argument_list|()
block|;
name|protected
operator|:
name|virtual
name|unsigned
name|GetRelocType
argument_list|(
argument|const MCValue&Target
argument_list|,
argument|const MCFixup&Fixup
argument_list|,
argument|bool IsPCRel
argument_list|,
argument|bool IsRelocWithSymbol
argument_list|,
argument|int64_t Addend
argument_list|)
block|;   }
decl_stmt|;
end_decl_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

