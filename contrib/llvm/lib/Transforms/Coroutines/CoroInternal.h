begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- CoroInternal.h - Internal Coroutine interfaces ---------*- C++ -*---===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Common definitions/declarations used internally by coroutine lowering passes.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TRANSFORMS_COROUTINES_COROINTERNAL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TRANSFORMS_COROUTINES_COROINTERNAL_H
end_define

begin_include
include|#
directive|include
file|"CoroInstr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Transforms/Coroutines.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|CallGraph
decl_stmt|;
name|class
name|CallGraphSCC
decl_stmt|;
name|class
name|PassRegistry
decl_stmt|;
name|void
name|initializeCoroEarlyPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
name|void
name|initializeCoroSplitPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
name|void
name|initializeCoroElidePass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
name|void
name|initializeCoroCleanupPass
parameter_list|(
name|PassRegistry
modifier|&
parameter_list|)
function_decl|;
comment|// CoroEarly pass marks every function that has coro.begin with a string
comment|// attribute "coroutine.presplit"="0". CoroSplit pass processes the coroutine
comment|// twice. First, it lets it go through complete IPO optimization pipeline as a
comment|// single function. It forces restart of the pipeline by inserting an indirect
comment|// call to an empty function "coro.devirt.trigger" which is devirtualized by
comment|// CoroElide pass that triggers a restart of the pipeline by CGPassManager.
comment|// When CoroSplit pass sees the same coroutine the second time, it splits it up,
comment|// adds coroutine subfunctions to the SCC to be processed by IPO pipeline.
define|#
directive|define
name|CORO_PRESPLIT_ATTR
value|"coroutine.presplit"
define|#
directive|define
name|UNPREPARED_FOR_SPLIT
value|"0"
define|#
directive|define
name|PREPARED_FOR_SPLIT
value|"1"
define|#
directive|define
name|CORO_DEVIRT_TRIGGER_FN
value|"coro.devirt.trigger"
name|namespace
name|coro
block|{
name|bool
name|declaresIntrinsics
argument_list|(
name|Module
operator|&
name|M
argument_list|,
name|std
operator|::
name|initializer_list
operator|<
name|StringRef
operator|>
argument_list|)
decl_stmt|;
name|void
name|replaceAllCoroAllocs
parameter_list|(
name|CoroBeginInst
modifier|*
name|CB
parameter_list|,
name|bool
name|Replacement
parameter_list|)
function_decl|;
name|void
name|replaceAllCoroFrees
parameter_list|(
name|CoroBeginInst
modifier|*
name|CB
parameter_list|,
name|Value
modifier|*
name|Replacement
parameter_list|)
function_decl|;
name|void
name|replaceCoroFree
parameter_list|(
name|CoroIdInst
modifier|*
name|CoroId
parameter_list|,
name|bool
name|Elide
parameter_list|)
function_decl|;
name|void
name|updateCallGraph
argument_list|(
name|Function
operator|&
name|Caller
argument_list|,
name|ArrayRef
operator|<
name|Function
operator|*
operator|>
name|Funcs
argument_list|,
name|CallGraph
operator|&
name|CG
argument_list|,
name|CallGraphSCC
operator|&
name|SCC
argument_list|)
decl_stmt|;
comment|// Keeps data and helper functions for lowering coroutine intrinsics.
struct|struct
name|LowererBase
block|{
name|Module
modifier|&
name|TheModule
decl_stmt|;
name|LLVMContext
modifier|&
name|Context
decl_stmt|;
name|PointerType
modifier|*
specifier|const
name|Int8Ptr
decl_stmt|;
name|FunctionType
modifier|*
specifier|const
name|ResumeFnType
decl_stmt|;
name|ConstantPointerNull
modifier|*
specifier|const
name|NullPtr
decl_stmt|;
name|LowererBase
argument_list|(
name|Module
operator|&
name|M
argument_list|)
expr_stmt|;
name|Value
modifier|*
name|makeSubFnCall
parameter_list|(
name|Value
modifier|*
name|Arg
parameter_list|,
name|int
name|Index
parameter_list|,
name|Instruction
modifier|*
name|InsertPt
parameter_list|)
function_decl|;
block|}
struct|;
comment|// Holds structural Coroutine Intrinsics for a particular function and other
comment|// values used during CoroSplit pass.
struct|struct
name|LLVM_LIBRARY_VISIBILITY
name|Shape
block|{
name|CoroBeginInst
modifier|*
name|CoroBegin
decl_stmt|;
name|SmallVector
operator|<
name|CoroEndInst
operator|*
operator|,
literal|4
operator|>
name|CoroEnds
expr_stmt|;
name|SmallVector
operator|<
name|CoroSizeInst
operator|*
operator|,
literal|2
operator|>
name|CoroSizes
expr_stmt|;
name|SmallVector
operator|<
name|CoroSuspendInst
operator|*
operator|,
literal|4
operator|>
name|CoroSuspends
expr_stmt|;
comment|// Field Indexes for known coroutine frame fields.
enum|enum
block|{
name|ResumeField
block|,
name|DestroyField
block|,
name|PromiseField
block|,
name|IndexField
block|,
name|LastKnownField
init|=
name|IndexField
block|}
enum|;
name|StructType
modifier|*
name|FrameTy
decl_stmt|;
name|Instruction
modifier|*
name|FramePtr
decl_stmt|;
name|BasicBlock
modifier|*
name|AllocaSpillBlock
decl_stmt|;
name|SwitchInst
modifier|*
name|ResumeSwitch
decl_stmt|;
name|AllocaInst
modifier|*
name|PromiseAlloca
decl_stmt|;
name|bool
name|HasFinalSuspend
decl_stmt|;
name|IntegerType
operator|*
name|getIndexType
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|FrameTy
operator|&&
literal|"frame type not assigned"
argument_list|)
block|;
return|return
name|cast
operator|<
name|IntegerType
operator|>
operator|(
name|FrameTy
operator|->
name|getElementType
argument_list|(
name|IndexField
argument_list|)
operator|)
return|;
block|}
name|ConstantInt
modifier|*
name|getIndex
argument_list|(
name|uint64_t
name|Value
argument_list|)
decl|const
block|{
return|return
name|ConstantInt
operator|::
name|get
argument_list|(
name|getIndexType
argument_list|()
argument_list|,
name|Value
argument_list|)
return|;
block|}
name|Shape
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|Shape
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|)
block|{
name|buildFrom
argument_list|(
name|F
argument_list|)
expr_stmt|;
block|}
name|void
name|buildFrom
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|)
function_decl|;
block|}
struct|;
name|void
name|buildCoroutineFrame
parameter_list|(
name|Function
modifier|&
name|F
parameter_list|,
name|Shape
modifier|&
name|Shape
parameter_list|)
function_decl|;
block|}
comment|// End namespace coro.
block|}
end_decl_stmt

begin_comment
comment|// End namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

