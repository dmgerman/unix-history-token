begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- llvm/Analysis/MaximumSpanningTree.h - Interface ----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This module provides means for calculating a maximum spanning tree for a
end_comment

begin_comment
comment|// given set of weighted edges. The type parameter T is the type of a node.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TRANSFORMS_INSTRUMENTATION_MAXIMUMSPANNINGTREE_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TRANSFORMS_INSTRUMENTATION_MAXIMUMSPANNINGTREE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/EquivalenceClasses.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/BasicBlock.h"
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// MaximumSpanningTree - A MST implementation.
comment|/// The type parameter T determines the type of the nodes of the graph.
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|MaximumSpanningTree
block|{
name|public
operator|:
typedef|typedef
name|std
operator|::
name|pair
operator|<
specifier|const
name|T
operator|*
operator|,
specifier|const
name|T
operator|*
operator|>
name|Edge
expr_stmt|;
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|Edge
operator|,
name|double
operator|>
name|EdgeWeight
expr_stmt|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|EdgeWeight
operator|>
name|EdgeWeights
expr_stmt|;
name|protected
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Edge
operator|>
name|MaxSpanTree
expr_stmt|;
name|MaxSpanTree
name|MST
decl_stmt|;
name|private
label|:
comment|// A comparing class for comparing weighted edges.
struct|struct
name|EdgeWeightCompare
block|{
specifier|static
name|bool
name|getBlockSize
parameter_list|(
specifier|const
name|T
modifier|*
name|X
parameter_list|)
block|{
specifier|const
name|BasicBlock
modifier|*
name|BB
init|=
name|dyn_cast_or_null
operator|<
name|BasicBlock
operator|>
operator|(
name|X
operator|)
decl_stmt|;
return|return
name|BB
condition|?
name|BB
operator|->
name|size
argument_list|()
else|:
literal|0
return|;
block|}
name|bool
name|operator
argument_list|()
operator|(
name|EdgeWeight
name|X
operator|,
name|EdgeWeight
name|Y
operator|)
specifier|const
block|{
if|if
condition|(
name|X
operator|.
name|second
operator|>
name|Y
operator|.
name|second
condition|)
return|return
name|true
return|;
if|if
condition|(
name|X
operator|.
name|second
operator|<
name|Y
operator|.
name|second
condition|)
return|return
name|false
return|;
comment|// Equal edge weights: break ties by comparing block sizes.
name|size_t
name|XSizeA
init|=
name|getBlockSize
argument_list|(
name|X
operator|.
name|first
operator|.
name|first
argument_list|)
decl_stmt|;
name|size_t
name|YSizeA
init|=
name|getBlockSize
argument_list|(
name|Y
operator|.
name|first
operator|.
name|first
argument_list|)
decl_stmt|;
if|if
condition|(
name|XSizeA
operator|>
name|YSizeA
condition|)
return|return
name|true
return|;
if|if
condition|(
name|XSizeA
operator|<
name|YSizeA
condition|)
return|return
name|false
return|;
name|size_t
name|XSizeB
init|=
name|getBlockSize
argument_list|(
name|X
operator|.
name|first
operator|.
name|second
argument_list|)
decl_stmt|;
name|size_t
name|YSizeB
init|=
name|getBlockSize
argument_list|(
name|Y
operator|.
name|first
operator|.
name|second
argument_list|)
decl_stmt|;
if|if
condition|(
name|XSizeB
operator|>
name|YSizeB
condition|)
return|return
name|true
return|;
if|if
condition|(
name|XSizeB
operator|<
name|YSizeB
condition|)
return|return
name|false
return|;
return|return
name|false
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_label
name|public
label|:
end_label

begin_decl_stmt
specifier|static
name|char
name|ID
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Class identification, replacement for typeinfo
end_comment

begin_comment
comment|/// MaximumSpanningTree() - Takes a vector of weighted edges and returns a
end_comment

begin_comment
comment|/// spanning tree.
end_comment

begin_macro
name|MaximumSpanningTree
argument_list|(
argument|EdgeWeights&EdgeVector
argument_list|)
end_macro

begin_block
block|{
name|std
operator|::
name|stable_sort
argument_list|(
name|EdgeVector
operator|.
name|begin
argument_list|()
argument_list|,
name|EdgeVector
operator|.
name|end
argument_list|()
argument_list|,
name|EdgeWeightCompare
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create spanning tree, Forest contains a special data structure
comment|// that makes checking if two nodes are already in a common (sub-)tree
comment|// fast and cheap.
name|EquivalenceClasses
operator|<
specifier|const
name|T
operator|*
operator|>
name|Forest
expr_stmt|;
for|for
control|(
name|typename
name|EdgeWeights
operator|::
name|iterator
name|EWi
operator|=
name|EdgeVector
operator|.
name|begin
argument_list|()
operator|,
name|EWe
operator|=
name|EdgeVector
operator|.
name|end
argument_list|()
init|;
name|EWi
operator|!=
name|EWe
condition|;
operator|++
name|EWi
control|)
block|{
name|Edge
name|e
init|=
operator|(
operator|*
name|EWi
operator|)
operator|.
name|first
decl_stmt|;
name|Forest
operator|.
name|insert
argument_list|(
name|e
operator|.
name|first
argument_list|)
expr_stmt|;
name|Forest
operator|.
name|insert
argument_list|(
name|e
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
comment|// Iterate over the sorted edges, biggest first.
for|for
control|(
name|typename
name|EdgeWeights
operator|::
name|iterator
name|EWi
operator|=
name|EdgeVector
operator|.
name|begin
argument_list|()
operator|,
name|EWe
operator|=
name|EdgeVector
operator|.
name|end
argument_list|()
init|;
name|EWi
operator|!=
name|EWe
condition|;
operator|++
name|EWi
control|)
block|{
name|Edge
name|e
init|=
operator|(
operator|*
name|EWi
operator|)
operator|.
name|first
decl_stmt|;
if|if
condition|(
name|Forest
operator|.
name|findLeader
argument_list|(
name|e
operator|.
name|first
argument_list|)
operator|!=
name|Forest
operator|.
name|findLeader
argument_list|(
name|e
operator|.
name|second
argument_list|)
condition|)
block|{
name|Forest
operator|.
name|unionSets
argument_list|(
name|e
operator|.
name|first
argument_list|,
name|e
operator|.
name|second
argument_list|)
expr_stmt|;
comment|// So we know now that the edge is not already in a subtree, so we push
comment|// the edge to the MST.
name|MST
operator|.
name|push_back
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_block

begin_expr_stmt
name|typename
name|MaxSpanTree
operator|::
name|iterator
name|begin
argument_list|()
block|{
return|return
name|MST
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|typename
name|MaxSpanTree
operator|::
name|iterator
name|end
argument_list|()
block|{
return|return
name|MST
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
unit|};  }
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TRANSFORMS_INSTRUMENTATION_MAXIMUMSPANNINGTREE_H
end_comment

end_unit

