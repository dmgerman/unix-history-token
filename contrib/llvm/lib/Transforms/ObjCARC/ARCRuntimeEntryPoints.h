begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ARCRuntimeEntryPoints.h - ObjC ARC Optimization --*- C++ -*---------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file contains a class ARCRuntimeEntryPoints for use in
end_comment

begin_comment
comment|/// creating/managing references to entry points to the arc objective c runtime.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// WARNING: This file knows about certain library functions. It recognizes them
end_comment

begin_comment
comment|/// by name, and hardwires knowledge of their semantics.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|/// WARNING: This file knows about how certain Objective-C library functions are
end_comment

begin_comment
comment|/// used. Naive LLVM IR transformations which would otherwise be
end_comment

begin_comment
comment|/// behavior-preserving may break these assumptions.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TRANSFORMS_OBJCARC_ARCRUNTIMEENTRYPOINTS_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TRANSFORMS_OBJCARC_ARCRUNTIMEENTRYPOINTS_H
end_define

begin_include
include|#
directive|include
file|"ObjCARC.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|objcarc
block|{
name|enum
name|class
name|ARCRuntimeEntryPointKind
block|{
name|AutoreleaseRV
operator|,
name|Release
operator|,
name|Retain
operator|,
name|RetainBlock
operator|,
name|Autorelease
operator|,
name|StoreStrong
operator|,
name|RetainRV
operator|,
name|RetainAutorelease
operator|,
name|RetainAutoreleaseRV
operator|,
block|}
empty_stmt|;
comment|/// Declarations for ObjC runtime functions and constants. These are initialized
comment|/// lazily to avoid cluttering up the Module with unused declarations.
name|class
name|ARCRuntimeEntryPoints
block|{
name|public
label|:
name|ARCRuntimeEntryPoints
argument_list|()
operator|:
name|TheModule
argument_list|(
name|nullptr
argument_list|)
operator|,
name|AutoreleaseRV
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Release
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Retain
argument_list|(
name|nullptr
argument_list|)
operator|,
name|RetainBlock
argument_list|(
name|nullptr
argument_list|)
operator|,
name|Autorelease
argument_list|(
name|nullptr
argument_list|)
operator|,
name|StoreStrong
argument_list|(
name|nullptr
argument_list|)
operator|,
name|RetainRV
argument_list|(
name|nullptr
argument_list|)
operator|,
name|RetainAutorelease
argument_list|(
name|nullptr
argument_list|)
operator|,
name|RetainAutoreleaseRV
argument_list|(
argument|nullptr
argument_list|)
block|{ }
name|void
name|init
argument_list|(
argument|Module *M
argument_list|)
block|{
name|TheModule
operator|=
name|M
block|;
name|AutoreleaseRV
operator|=
name|nullptr
block|;
name|Release
operator|=
name|nullptr
block|;
name|Retain
operator|=
name|nullptr
block|;
name|RetainBlock
operator|=
name|nullptr
block|;
name|Autorelease
operator|=
name|nullptr
block|;
name|StoreStrong
operator|=
name|nullptr
block|;
name|RetainRV
operator|=
name|nullptr
block|;
name|RetainAutorelease
operator|=
name|nullptr
block|;
name|RetainAutoreleaseRV
operator|=
name|nullptr
block|;   }
name|Constant
operator|*
name|get
argument_list|(
argument|ARCRuntimeEntryPointKind kind
argument_list|)
block|{
name|assert
argument_list|(
name|TheModule
operator|!=
name|nullptr
operator|&&
literal|"Not initialized."
argument_list|)
block|;
switch|switch
condition|(
name|kind
condition|)
block|{
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|AutoreleaseRV
case|:
return|return
name|getI8XRetI8XEntryPoint
argument_list|(
name|AutoreleaseRV
argument_list|,
literal|"objc_autoreleaseReturnValue"
argument_list|,
name|true
argument_list|)
return|;
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|Release
case|:
return|return
name|getVoidRetI8XEntryPoint
argument_list|(
name|Release
argument_list|,
literal|"objc_release"
argument_list|)
return|;
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|Retain
case|:
return|return
name|getI8XRetI8XEntryPoint
argument_list|(
name|Retain
argument_list|,
literal|"objc_retain"
argument_list|,
name|true
argument_list|)
return|;
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|RetainBlock
case|:
return|return
name|getI8XRetI8XEntryPoint
argument_list|(
name|RetainBlock
argument_list|,
literal|"objc_retainBlock"
argument_list|,
name|false
argument_list|)
return|;
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|Autorelease
case|:
return|return
name|getI8XRetI8XEntryPoint
argument_list|(
name|Autorelease
argument_list|,
literal|"objc_autorelease"
argument_list|,
name|true
argument_list|)
return|;
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|StoreStrong
case|:
return|return
name|getI8XRetI8XXI8XEntryPoint
argument_list|(
name|StoreStrong
argument_list|,
literal|"objc_storeStrong"
argument_list|)
return|;
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|RetainRV
case|:
return|return
name|getI8XRetI8XEntryPoint
argument_list|(
name|RetainRV
argument_list|,
literal|"objc_retainAutoreleasedReturnValue"
argument_list|,
name|true
argument_list|)
return|;
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|RetainAutorelease
case|:
return|return
name|getI8XRetI8XEntryPoint
argument_list|(
name|RetainAutorelease
argument_list|,
literal|"objc_retainAutorelease"
argument_list|,
name|true
argument_list|)
return|;
case|case
name|ARCRuntimeEntryPointKind
operator|::
name|RetainAutoreleaseRV
case|:
return|return
name|getI8XRetI8XEntryPoint
argument_list|(
name|RetainAutoreleaseRV
argument_list|,
literal|"objc_retainAutoreleaseReturnValue"
argument_list|,
name|true
argument_list|)
return|;
block|}
name|llvm_unreachable
argument_list|(
literal|"Switch should be a covered switch."
argument_list|)
expr_stmt|;
block|}
name|private
operator|:
comment|/// Cached reference to the module which we will insert declarations into.
name|Module
operator|*
name|TheModule
expr_stmt|;
comment|/// Declaration for ObjC runtime function objc_autoreleaseReturnValue.
name|Constant
modifier|*
name|AutoreleaseRV
decl_stmt|;
comment|/// Declaration for ObjC runtime function objc_release.
name|Constant
modifier|*
name|Release
decl_stmt|;
comment|/// Declaration for ObjC runtime function objc_retain.
name|Constant
modifier|*
name|Retain
decl_stmt|;
comment|/// Declaration for ObjC runtime function objc_retainBlock.
name|Constant
modifier|*
name|RetainBlock
decl_stmt|;
comment|/// Declaration for ObjC runtime function objc_autorelease.
name|Constant
modifier|*
name|Autorelease
decl_stmt|;
comment|/// Declaration for objc_storeStrong().
name|Constant
modifier|*
name|StoreStrong
decl_stmt|;
comment|/// Declaration for objc_retainAutoreleasedReturnValue().
name|Constant
modifier|*
name|RetainRV
decl_stmt|;
comment|/// Declaration for objc_retainAutorelease().
name|Constant
modifier|*
name|RetainAutorelease
decl_stmt|;
comment|/// Declaration for objc_retainAutoreleaseReturnValue().
name|Constant
modifier|*
name|RetainAutoreleaseRV
decl_stmt|;
name|Constant
modifier|*
name|getVoidRetI8XEntryPoint
parameter_list|(
name|Constant
modifier|*
modifier|&
name|Decl
parameter_list|,
name|StringRef
name|Name
parameter_list|)
block|{
if|if
condition|(
name|Decl
condition|)
return|return
name|Decl
return|;
name|LLVMContext
modifier|&
name|C
init|=
name|TheModule
operator|->
name|getContext
argument_list|()
decl_stmt|;
name|Type
modifier|*
name|Params
index|[]
init|=
block|{
name|PointerType
operator|::
name|getUnqual
argument_list|(
argument|Type::getInt8Ty(C)
argument_list|)
block|}
decl_stmt|;
name|AttributeList
name|Attr
init|=
name|AttributeList
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|C
argument_list|,
name|AttributeList
operator|::
name|FunctionIndex
argument_list|,
name|Attribute
operator|::
name|NoUnwind
argument_list|)
decl_stmt|;
name|FunctionType
modifier|*
name|Fty
init|=
name|FunctionType
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getVoidTy
argument_list|(
name|C
argument_list|)
argument_list|,
name|Params
argument_list|,
comment|/*isVarArg=*/
name|false
argument_list|)
decl_stmt|;
return|return
name|Decl
operator|=
name|TheModule
operator|->
name|getOrInsertFunction
argument_list|(
name|Name
argument_list|,
name|Fty
argument_list|,
name|Attr
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|getI8XRetI8XEntryPoint
parameter_list|(
name|Constant
modifier|*
modifier|&
name|Decl
parameter_list|,
name|StringRef
name|Name
parameter_list|,
name|bool
name|NoUnwind
init|=
name|false
parameter_list|)
block|{
if|if
condition|(
name|Decl
condition|)
return|return
name|Decl
return|;
name|LLVMContext
modifier|&
name|C
init|=
name|TheModule
operator|->
name|getContext
argument_list|()
decl_stmt|;
name|Type
modifier|*
name|I8X
init|=
name|PointerType
operator|::
name|getUnqual
argument_list|(
name|Type
operator|::
name|getInt8Ty
argument_list|(
name|C
argument_list|)
argument_list|)
decl_stmt|;
name|Type
modifier|*
name|Params
index|[]
init|=
block|{
name|I8X
block|}
decl_stmt|;
name|FunctionType
modifier|*
name|Fty
init|=
name|FunctionType
operator|::
name|get
argument_list|(
name|I8X
argument_list|,
name|Params
argument_list|,
comment|/*isVarArg=*/
name|false
argument_list|)
decl_stmt|;
name|AttributeList
name|Attr
init|=
name|AttributeList
argument_list|()
decl_stmt|;
if|if
condition|(
name|NoUnwind
condition|)
name|Attr
operator|=
name|Attr
operator|.
name|addAttribute
argument_list|(
name|C
argument_list|,
name|AttributeList
operator|::
name|FunctionIndex
argument_list|,
name|Attribute
operator|::
name|NoUnwind
argument_list|)
expr_stmt|;
return|return
name|Decl
operator|=
name|TheModule
operator|->
name|getOrInsertFunction
argument_list|(
name|Name
argument_list|,
name|Fty
argument_list|,
name|Attr
argument_list|)
return|;
block|}
name|Constant
modifier|*
name|getI8XRetI8XXI8XEntryPoint
parameter_list|(
name|Constant
modifier|*
modifier|&
name|Decl
parameter_list|,
name|StringRef
name|Name
parameter_list|)
block|{
if|if
condition|(
name|Decl
condition|)
return|return
name|Decl
return|;
name|LLVMContext
modifier|&
name|C
init|=
name|TheModule
operator|->
name|getContext
argument_list|()
decl_stmt|;
name|Type
modifier|*
name|I8X
init|=
name|PointerType
operator|::
name|getUnqual
argument_list|(
name|Type
operator|::
name|getInt8Ty
argument_list|(
name|C
argument_list|)
argument_list|)
decl_stmt|;
name|Type
modifier|*
name|I8XX
init|=
name|PointerType
operator|::
name|getUnqual
argument_list|(
name|I8X
argument_list|)
decl_stmt|;
name|Type
modifier|*
name|Params
index|[]
init|=
block|{
name|I8XX
block|,
name|I8X
block|}
decl_stmt|;
name|AttributeList
name|Attr
init|=
name|AttributeList
argument_list|()
operator|.
name|addAttribute
argument_list|(
name|C
argument_list|,
name|AttributeList
operator|::
name|FunctionIndex
argument_list|,
name|Attribute
operator|::
name|NoUnwind
argument_list|)
decl_stmt|;
name|Attr
operator|=
name|Attr
operator|.
name|addParamAttribute
argument_list|(
name|C
argument_list|,
literal|0
argument_list|,
name|Attribute
operator|::
name|NoCapture
argument_list|)
expr_stmt|;
name|FunctionType
modifier|*
name|Fty
init|=
name|FunctionType
operator|::
name|get
argument_list|(
name|Type
operator|::
name|getVoidTy
argument_list|(
name|C
argument_list|)
argument_list|,
name|Params
argument_list|,
comment|/*isVarArg=*/
name|false
argument_list|)
decl_stmt|;
return|return
name|Decl
operator|=
name|TheModule
operator|->
name|getOrInsertFunction
argument_list|(
name|Name
argument_list|,
name|Fty
argument_list|,
name|Attr
argument_list|)
return|;
block|}
block|}
empty_stmt|;
comment|// class ARCRuntimeEntryPoints
block|}
comment|// namespace objcarc
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

