begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*===-- ittnotify_types.h - JIT Profiling API internal types--------*- C -*-===*  *  *                     The LLVM Compiler Infrastructure  *  * This file is distributed under the University of Illinois Open Source  * License. See LICENSE.TXT for details.  *  *===----------------------------------------------------------------------===*  *  * NOTE: This file comes in a style different from the rest of LLVM  * source base since  this is a piece of code shared from Intel(R)  * products.  Please do not reformat / re-style this code to make  * subsequent merges and contributions from the original source base eaiser.  *  *===----------------------------------------------------------------------===*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ITTNOTIFY_TYPES_H_
end_ifndef

begin_define
define|#
directive|define
name|_ITTNOTIFY_TYPES_H_
end_define

begin_typedef
typedef|typedef
enum|enum
name|___itt_group_id
block|{
name|__itt_group_none
init|=
literal|0
block|,
name|__itt_group_legacy
init|=
literal|1
operator|<<
literal|0
block|,
name|__itt_group_control
init|=
literal|1
operator|<<
literal|1
block|,
name|__itt_group_thread
init|=
literal|1
operator|<<
literal|2
block|,
name|__itt_group_mark
init|=
literal|1
operator|<<
literal|3
block|,
name|__itt_group_sync
init|=
literal|1
operator|<<
literal|4
block|,
name|__itt_group_fsync
init|=
literal|1
operator|<<
literal|5
block|,
name|__itt_group_jit
init|=
literal|1
operator|<<
literal|6
block|,
name|__itt_group_model
init|=
literal|1
operator|<<
literal|7
block|,
name|__itt_group_splitter_min
init|=
literal|1
operator|<<
literal|7
block|,
name|__itt_group_counter
init|=
literal|1
operator|<<
literal|8
block|,
name|__itt_group_frame
init|=
literal|1
operator|<<
literal|9
block|,
name|__itt_group_stitch
init|=
literal|1
operator|<<
literal|10
block|,
name|__itt_group_heap
init|=
literal|1
operator|<<
literal|11
block|,
name|__itt_group_splitter_max
init|=
literal|1
operator|<<
literal|12
block|,
name|__itt_group_structure
init|=
literal|1
operator|<<
literal|12
block|,
name|__itt_group_suppress
init|=
literal|1
operator|<<
literal|13
block|,
name|__itt_group_all
init|=
operator|-
literal|1
block|}
name|__itt_group_id
typedef|;
end_typedef

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|push
name|,
name|8
name|)
end_pragma

begin_typedef
typedef|typedef
struct|struct
name|___itt_group_list
block|{
name|__itt_group_id
name|id
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
name|__itt_group_list
typedef|;
end_typedef

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|pop
name|)
end_pragma

begin_define
define|#
directive|define
name|ITT_GROUP_LIST
parameter_list|(
name|varname
parameter_list|)
define|\
value|static __itt_group_list varname[] = {       \         { __itt_group_all,       "all"       }, \         { __itt_group_control,   "control"   }, \         { __itt_group_thread,    "thread"    }, \         { __itt_group_mark,      "mark"      }, \         { __itt_group_sync,      "sync"      }, \         { __itt_group_fsync,     "fsync"     }, \         { __itt_group_jit,       "jit"       }, \         { __itt_group_model,     "model"     }, \         { __itt_group_counter,   "counter"   }, \         { __itt_group_frame,     "frame"     }, \         { __itt_group_stitch,    "stitch"    }, \         { __itt_group_heap,      "heap"      }, \         { __itt_group_structure, "structure" }, \         { __itt_group_suppress,  "suppress"  }, \         { __itt_group_none,      NULL        }  \     }
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ITTNOTIFY_TYPES_H_ */
end_comment

end_unit

