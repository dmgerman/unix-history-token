begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RuntimeDyldCheckerImpl.h -- RuntimeDyld test framework --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_RUNTIMEDYLDCHECKERIMPL_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_RUNTIMEDYLDCHECKERIMPL_H
end_define

begin_include
include|#
directive|include
file|"RuntimeDyldImpl.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldCheckerImpl
block|{
name|friend
name|class
name|RuntimeDyldChecker
decl_stmt|;
name|friend
name|class
name|RuntimeDyldImpl
decl_stmt|;
name|friend
name|class
name|RuntimeDyldCheckerExprEval
decl_stmt|;
name|friend
name|class
name|RuntimeDyldELF
decl_stmt|;
name|public
label|:
name|RuntimeDyldCheckerImpl
argument_list|(
name|RuntimeDyld
operator|&
name|RTDyld
argument_list|,
name|MCDisassembler
operator|*
name|Disassembler
argument_list|,
name|MCInstPrinter
operator|*
name|InstPrinter
argument_list|,
name|llvm
operator|::
name|raw_ostream
operator|&
name|ErrStream
argument_list|)
expr_stmt|;
name|bool
name|check
argument_list|(
name|StringRef
name|CheckExpr
argument_list|)
decl|const
decl_stmt|;
name|bool
name|checkAllRulesInBuffer
argument_list|(
name|StringRef
name|RulePrefix
argument_list|,
name|MemoryBuffer
operator|*
name|MemBuf
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
comment|// StubMap typedefs.
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|uint64_t
operator|>
name|StubOffsetsMap
expr_stmt|;
struct|struct
name|SectionAddressInfo
block|{
name|uint64_t
name|SectionID
decl_stmt|;
name|StubOffsetsMap
name|StubOffsets
decl_stmt|;
block|}
struct|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|SectionAddressInfo
operator|>
name|SectionMap
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|std
operator|::
name|string
operator|,
name|SectionMap
operator|>
name|StubMap
expr_stmt|;
name|RuntimeDyldImpl
operator|&
name|getRTDyld
argument_list|()
specifier|const
block|{
return|return
operator|*
name|RTDyld
operator|.
name|Dyld
return|;
block|}
name|bool
name|isSymbolValid
argument_list|(
name|StringRef
name|Symbol
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getSymbolLocalAddr
argument_list|(
name|StringRef
name|Symbol
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|getSymbolRemoteAddr
argument_list|(
name|StringRef
name|Symbol
argument_list|)
decl|const
decl_stmt|;
name|uint64_t
name|readMemoryAtAddr
argument_list|(
name|uint64_t
name|Addr
argument_list|,
name|unsigned
name|Size
argument_list|)
decl|const
decl_stmt|;
name|std
operator|::
name|pair
operator|<
specifier|const
name|SectionAddressInfo
operator|*
operator|,
name|std
operator|::
name|string
operator|>
name|findSectionAddrInfo
argument_list|(
argument|StringRef FileName
argument_list|,
argument|StringRef SectionName
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|uint64_t
operator|,
name|std
operator|::
name|string
operator|>
name|getSectionAddr
argument_list|(
argument|StringRef FileName
argument_list|,
argument|StringRef SectionName
argument_list|,
argument|bool IsInsideLoad
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|pair
operator|<
name|uint64_t
operator|,
name|std
operator|::
name|string
operator|>
name|getStubAddrFor
argument_list|(
argument|StringRef FileName
argument_list|,
argument|StringRef SectionName
argument_list|,
argument|StringRef Symbol
argument_list|,
argument|bool IsInsideLoad
argument_list|)
specifier|const
expr_stmt|;
name|StringRef
name|getSubsectionStartingAt
argument_list|(
name|StringRef
name|Name
argument_list|)
decl|const
decl_stmt|;
name|Optional
operator|<
name|uint64_t
operator|>
name|getSectionLoadAddress
argument_list|(
argument|void *LocalAddr
argument_list|)
specifier|const
expr_stmt|;
name|void
name|registerSection
parameter_list|(
name|StringRef
name|FilePath
parameter_list|,
name|unsigned
name|SectionID
parameter_list|)
function_decl|;
name|void
name|registerStubMap
argument_list|(
name|StringRef
name|FilePath
argument_list|,
name|unsigned
name|SectionID
argument_list|,
specifier|const
name|RuntimeDyldImpl
operator|::
name|StubMap
operator|&
name|RTDyldStubs
argument_list|)
decl_stmt|;
name|RuntimeDyld
modifier|&
name|RTDyld
decl_stmt|;
name|MCDisassembler
modifier|*
name|Disassembler
decl_stmt|;
name|MCInstPrinter
modifier|*
name|InstPrinter
decl_stmt|;
name|llvm
operator|::
name|raw_ostream
operator|&
name|ErrStream
expr_stmt|;
name|StubMap
name|Stubs
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

