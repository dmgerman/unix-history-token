begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RuntimeDyldCOFFX86_64.h --- COFF/X86_64 specific code ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// COFF x86_x64 support for MC-JIT runtime dynamic linker.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDCOFF86_64_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDCOFF86_64_H
end_define

begin_include
include|#
directive|include
file|"llvm/Object/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/COFF.h"
end_include

begin_include
include|#
directive|include
file|"../RuntimeDyldCOFF.h"
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"dyld"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldCOFFX86_64
range|:
name|public
name|RuntimeDyldCOFF
block|{
name|private
operator|:
comment|// When a module is loaded we save the SectionID of the unwind
comment|// sections in a table until we receive a request to register all
comment|// unregisteredEH frame sections with the memory manager.
name|SmallVector
operator|<
name|SID
block|,
literal|2
operator|>
name|UnregisteredEHFrameSections
block|;
name|SmallVector
operator|<
name|SID
block|,
literal|2
operator|>
name|RegisteredEHFrameSections
block|;
name|public
operator|:
name|RuntimeDyldCOFFX86_64
argument_list|(
name|RuntimeDyld
operator|::
name|MemoryManager
operator|&
name|MM
argument_list|,
name|JITSymbolResolver
operator|&
name|Resolver
argument_list|)
operator|:
name|RuntimeDyldCOFF
argument_list|(
argument|MM
argument_list|,
argument|Resolver
argument_list|)
block|{}
name|unsigned
name|getMaxStubSize
argument_list|()
name|override
block|{
return|return
literal|6
return|;
comment|// 2-byte jmp instruction + 32-bit relative address
block|}
comment|// The target location for the relocation is described by RE.SectionID and
comment|// RE.Offset.  RE.SectionID can be used to find the SectionEntry.  Each
comment|// SectionEntry has three members describing its location.
comment|// SectionEntry::Address is the address at which the section has been loaded
comment|// into memory in the current (host) process.  SectionEntry::LoadAddress is
comment|// the address that the section will have in the target process.
comment|// SectionEntry::ObjAddress is the address of the bits for this section in the
comment|// original emitted object image (also in the current address space).
comment|//
comment|// Relocations will be applied as if the section were loaded at
comment|// SectionEntry::LoadAddress, but they will be applied at an address based
comment|// on SectionEntry::Address.  SectionEntry::ObjAddress will be used to refer
comment|// to Target memory contents if they are required for value calculations.
comment|//
comment|// The Value parameter here is the load address of the symbol for the
comment|// relocation to be applied.  For relocations which refer to symbols in the
comment|// current object Value will be the LoadAddress of the section in which
comment|// the symbol resides (RE.Addend provides additional information about the
comment|// symbol location).  For external symbols, Value will be the address of the
comment|// symbol in the target address space.
name|void
name|resolveRelocation
argument_list|(
argument|const RelocationEntry&RE
argument_list|,
argument|uint64_t Value
argument_list|)
name|override
block|{
specifier|const
name|SectionEntry
operator|&
name|Section
operator|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
block|;
name|uint8_t
operator|*
name|Target
operator|=
name|Section
operator|.
name|getAddressWithOffset
argument_list|(
name|RE
operator|.
name|Offset
argument_list|)
block|;
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_1
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_2
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_3
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_4
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_5
case|:
block|{
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|getLoadAddressWithOffset
argument_list|(
name|RE
operator|.
name|Offset
argument_list|)
decl_stmt|;
comment|// Delta is the distance from the start of the reloc to the end of the
comment|// instruction with the reloc.
name|uint64_t
name|Delta
init|=
literal|4
operator|+
operator|(
name|RE
operator|.
name|RelType
operator|-
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32
operator|)
decl_stmt|;
name|Value
operator|-=
name|FinalAddress
operator|+
name|Delta
expr_stmt|;
name|uint64_t
name|Result
init|=
name|Value
operator|+
name|RE
operator|.
name|Addend
decl_stmt|;
name|assert
argument_list|(
operator|(
operator|(
name|int64_t
operator|)
name|Result
operator|<=
name|INT32_MAX
operator|)
operator|&&
literal|"Relocation overflow"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
name|int64_t
operator|)
name|Result
operator|>=
name|INT32_MIN
operator|)
operator|&&
literal|"Relocation underflow"
argument_list|)
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|Result
argument_list|,
name|Target
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_ADDR32NB
case|:
block|{
comment|// Note ADDR32NB requires a well-established notion of
comment|// image base. This address must be less than or equal
comment|// to every section's load address, and all sections must be
comment|// within a 32 bit offset from the base.
comment|//
comment|// For now we just set these to zero.
name|writeBytesUnaligned
argument_list|(
literal|0
argument_list|,
name|Target
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_ADDR64
case|:
block|{
name|writeBytesUnaligned
argument_list|(
name|Value
operator|+
name|RE
operator|.
name|Addend
argument_list|,
name|Target
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|llvm_unreachable
argument_list|(
literal|"Relocation type not implemented yet!"
argument_list|)
expr_stmt|;
break|break;
block|}
expr|}
name|Expected
operator|<
name|relocation_iterator
operator|>
name|processRelocationRef
argument_list|(
argument|unsigned SectionID
argument_list|,
argument|relocation_iterator RelI
argument_list|,
argument|const ObjectFile&Obj
argument_list|,
argument|ObjSectionToIDMap&ObjSectionToID
argument_list|,
argument|StubMap&Stubs
argument_list|)
name|override
block|{
comment|// If possible, find the symbol referred to in the relocation,
comment|// and the section that contains it.
name|symbol_iterator
name|Symbol
operator|=
name|RelI
operator|->
name|getSymbol
argument_list|()
block|;
if|if
condition|(
name|Symbol
operator|==
name|Obj
operator|.
name|symbol_end
argument_list|()
condition|)
name|report_fatal_error
argument_list|(
literal|"Unknown symbol in relocation"
argument_list|)
expr_stmt|;
name|auto
name|SectionOrError
operator|=
name|Symbol
operator|->
name|getSection
argument_list|()
block|;
if|if
condition|(
operator|!
name|SectionOrError
condition|)
return|return
name|SectionOrError
operator|.
name|takeError
argument_list|()
return|;
name|section_iterator
name|SecI
operator|=
operator|*
name|SectionOrError
decl_stmt|;
comment|// If there is no section, this must be an external reference.
specifier|const
name|bool
name|IsExtern
init|=
name|SecI
operator|==
name|Obj
operator|.
name|section_end
argument_list|()
decl_stmt|;
comment|// Determine the Addend used to adjust the relocation value.
name|uint64_t
name|RelType
init|=
name|RelI
operator|->
name|getType
argument_list|()
decl_stmt|;
name|uint64_t
name|Offset
init|=
name|RelI
operator|->
name|getOffset
argument_list|()
decl_stmt|;
name|uint64_t
name|Addend
init|=
literal|0
decl_stmt|;
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|SectionID
index|]
decl_stmt|;
name|uintptr_t
name|ObjTarget
init|=
name|Section
operator|.
name|getObjAddress
argument_list|()
operator|+
name|Offset
decl_stmt|;
switch|switch
condition|(
name|RelType
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_1
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_2
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_3
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_4
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_REL32_5
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_ADDR32NB
case|:
block|{
name|uint8_t
modifier|*
name|Displacement
init|=
operator|(
name|uint8_t
operator|*
operator|)
name|ObjTarget
decl_stmt|;
name|Addend
operator|=
name|readBytesUnaligned
argument_list|(
name|Displacement
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COFF
operator|::
name|IMAGE_REL_AMD64_ADDR64
case|:
block|{
name|uint8_t
modifier|*
name|Displacement
init|=
operator|(
name|uint8_t
operator|*
operator|)
name|ObjTarget
decl_stmt|;
name|Addend
operator|=
name|readBytesUnaligned
argument_list|(
name|Displacement
argument_list|,
literal|8
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
name|Expected
operator|<
name|StringRef
operator|>
name|TargetNameOrErr
operator|=
name|Symbol
operator|->
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|TargetNameOrErr
condition|)
return|return
name|TargetNameOrErr
operator|.
name|takeError
argument_list|()
return|;
name|StringRef
name|TargetName
init|=
operator|*
name|TargetNameOrErr
decl_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"\t\tIn Section "
operator|<<
name|SectionID
operator|<<
literal|" Offset "
operator|<<
name|Offset
operator|<<
literal|" RelType: "
operator|<<
name|RelType
operator|<<
literal|" TargetName: "
operator|<<
name|TargetName
operator|<<
literal|" Addend "
operator|<<
name|Addend
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|IsExtern
condition|)
block|{
name|RelocationEntry
name|RE
parameter_list|(
name|SectionID
parameter_list|,
name|Offset
parameter_list|,
name|RelType
parameter_list|,
name|Addend
parameter_list|)
function_decl|;
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|TargetName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bool
name|IsCode
init|=
name|SecI
operator|->
name|isText
argument_list|()
decl_stmt|;
name|unsigned
name|TargetSectionID
decl_stmt|;
if|if
condition|(
name|auto
name|TargetSectionIDOrErr
init|=
name|findOrEmitSection
argument_list|(
name|Obj
argument_list|,
operator|*
name|SecI
argument_list|,
name|IsCode
argument_list|,
name|ObjSectionToID
argument_list|)
condition|)
name|TargetSectionID
operator|=
operator|*
name|TargetSectionIDOrErr
expr_stmt|;
else|else
return|return
name|TargetSectionIDOrErr
operator|.
name|takeError
argument_list|()
return|;
name|uint64_t
name|TargetOffset
init|=
name|getSymbolOffset
argument_list|(
operator|*
name|Symbol
argument_list|)
decl_stmt|;
name|RelocationEntry
name|RE
argument_list|(
name|SectionID
argument_list|,
name|Offset
argument_list|,
name|RelType
argument_list|,
name|TargetOffset
operator|+
name|Addend
argument_list|)
decl_stmt|;
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|TargetSectionID
argument_list|)
expr_stmt|;
block|}
return|return
operator|++
name|RelI
return|;
block|}
end_decl_stmt

begin_function
name|unsigned
name|getStubAlignment
parameter_list|()
function|override
block|{
return|return
literal|1
return|;
block|}
end_function

begin_function
name|void
name|registerEHFrames
parameter_list|()
function|override
block|{
for|for
control|(
specifier|auto
specifier|const
modifier|&
name|EHFrameSID
range|:
name|UnregisteredEHFrameSections
control|)
block|{
name|uint8_t
modifier|*
name|EHFrameAddr
init|=
name|Sections
index|[
name|EHFrameSID
index|]
operator|.
name|getAddress
argument_list|()
decl_stmt|;
name|uint64_t
name|EHFrameLoadAddr
init|=
name|Sections
index|[
name|EHFrameSID
index|]
operator|.
name|getLoadAddress
argument_list|()
decl_stmt|;
name|size_t
name|EHFrameSize
init|=
name|Sections
index|[
name|EHFrameSID
index|]
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|MemMgr
operator|.
name|registerEHFrames
argument_list|(
name|EHFrameAddr
argument_list|,
name|EHFrameLoadAddr
argument_list|,
name|EHFrameSize
argument_list|)
expr_stmt|;
name|RegisteredEHFrameSections
operator|.
name|push_back
argument_list|(
name|EHFrameSID
argument_list|)
expr_stmt|;
block|}
name|UnregisteredEHFrameSections
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|Error
name|finalizeLoad
parameter_list|(
specifier|const
name|ObjectFile
modifier|&
name|Obj
parameter_list|,
name|ObjSectionToIDMap
modifier|&
name|SectionMap
parameter_list|)
function|override
block|{
comment|// Look for and record the EH frame section IDs.
for|for
control|(
specifier|const
specifier|auto
modifier|&
name|SectionPair
range|:
name|SectionMap
control|)
block|{
specifier|const
name|SectionRef
modifier|&
name|Section
init|=
name|SectionPair
operator|.
name|first
decl_stmt|;
name|StringRef
name|Name
decl_stmt|;
if|if
condition|(
name|auto
name|EC
init|=
name|Section
operator|.
name|getName
argument_list|(
name|Name
argument_list|)
condition|)
return|return
name|errorCodeToError
argument_list|(
name|EC
argument_list|)
return|;
comment|// Note unwind info is split across .pdata and .xdata, so this
comment|// may not be sufficiently general for all users.
if|if
condition|(
name|Name
operator|==
literal|".xdata"
condition|)
block|{
name|UnregisteredEHFrameSections
operator|.
name|push_back
argument_list|(
name|SectionPair
operator|.
name|second
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_undef
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

