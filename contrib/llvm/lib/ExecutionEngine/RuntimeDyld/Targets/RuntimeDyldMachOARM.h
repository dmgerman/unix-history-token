begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----- RuntimeDyldMachOARM.h ---- MachO/ARM specific code. ----*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDMACHOARM_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDMACHOARM_H
end_define

begin_include
include|#
directive|include
file|"../RuntimeDyldMachO.h"
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"dyld"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldMachOARM
range|:
name|public
name|RuntimeDyldMachOCRTPBase
operator|<
name|RuntimeDyldMachOARM
operator|>
block|{
name|private
operator|:
typedef|typedef
name|RuntimeDyldMachOCRTPBase
operator|<
name|RuntimeDyldMachOARM
operator|>
name|ParentT
expr_stmt|;
name|public
operator|:
typedef|typedef
name|uint32_t
name|TargetPtrT
typedef|;
name|RuntimeDyldMachOARM
argument_list|(
name|RuntimeDyld
operator|::
name|MemoryManager
operator|&
name|MM
argument_list|,
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|&
name|Resolver
argument_list|)
operator|:
name|RuntimeDyldMachOCRTPBase
argument_list|(
argument|MM
argument_list|,
argument|Resolver
argument_list|)
block|{}
name|unsigned
name|getMaxStubSize
argument_list|()
name|override
block|{
return|return
literal|8
return|;
block|}
name|unsigned
name|getStubAlignment
parameter_list|()
function|override
block|{
return|return
literal|4
return|;
block|}
name|int64_t
name|decodeAddend
argument_list|(
specifier|const
name|RelocationEntry
operator|&
name|RE
argument_list|)
decl|const
block|{
specifier|const
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
default|default:
return|return
name|memcpyAddend
argument_list|(
name|RE
argument_list|)
return|;
case|case
name|MachO
operator|::
name|ARM_RELOC_BR24
case|:
block|{
name|uint32_t
name|Temp
init|=
name|readBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Temp
operator|&=
literal|0x00ffffff
expr_stmt|;
comment|// Mask out the opcode.
comment|// Now we've got the shifted immediate, shift by 2, sign extend and ret.
return|return
name|SignExtend32
operator|<
literal|26
operator|>
operator|(
name|Temp
operator|<<
literal|2
operator|)
return|;
block|}
block|}
block|}
name|relocation_iterator
name|processRelocationRef
parameter_list|(
name|unsigned
name|SectionID
parameter_list|,
name|relocation_iterator
name|RelI
parameter_list|,
specifier|const
name|ObjectFile
modifier|&
name|BaseObjT
parameter_list|,
name|ObjSectionToIDMap
modifier|&
name|ObjSectionToID
parameter_list|,
name|StubMap
modifier|&
name|Stubs
parameter_list|)
function|override
block|{
specifier|const
name|MachOObjectFile
modifier|&
name|Obj
init|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
name|BaseObjT
operator|)
decl_stmt|;
name|MachO
operator|::
name|any_relocation_info
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
name|uint32_t
name|RelType
init|=
name|Obj
operator|.
name|getAnyRelocationType
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|Obj
operator|.
name|isRelocationScattered
argument_list|(
name|RelInfo
argument_list|)
condition|)
block|{
if|if
condition|(
name|RelType
operator|==
name|MachO
operator|::
name|ARM_RELOC_HALF_SECTDIFF
condition|)
return|return
name|processHALFSECTDIFFRelocation
argument_list|(
name|SectionID
argument_list|,
name|RelI
argument_list|,
name|Obj
argument_list|,
name|ObjSectionToID
argument_list|)
return|;
else|else
return|return
operator|++
operator|++
name|RelI
return|;
block|}
name|RelocationEntry
name|RE
argument_list|(
name|getRelocationEntry
argument_list|(
name|SectionID
argument_list|,
name|Obj
argument_list|,
name|RelI
argument_list|)
argument_list|)
decl_stmt|;
name|RE
operator|.
name|Addend
operator|=
name|decodeAddend
argument_list|(
name|RE
argument_list|)
expr_stmt|;
name|RelocationValueRef
name|Value
argument_list|(
name|getRelocationValueRef
argument_list|(
name|Obj
argument_list|,
name|RelI
argument_list|,
name|RE
argument_list|,
name|ObjSectionToID
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|RE
operator|.
name|IsPCRel
condition|)
name|makeValueAddendPCRel
argument_list|(
name|Value
argument_list|,
name|Obj
argument_list|,
name|RelI
argument_list|,
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|RE
operator|.
name|RelType
operator|&
literal|0xf
operator|)
operator|==
name|MachO
operator|::
name|ARM_RELOC_BR24
condition|)
name|processBranchRelocation
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|,
name|Stubs
argument_list|)
expr_stmt|;
else|else
block|{
name|RE
operator|.
name|Addend
operator|=
name|Value
operator|.
name|Offset
expr_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
block|}
return|return
operator|++
name|RelI
return|;
block|}
name|void
name|resolveRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
function|override
block|{
name|DEBUG
argument_list|(
name|dumpRelocationToResolve
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
comment|// If the relocation is PC-relative, the value to be encoded is the
comment|// pointer difference.
if|if
condition|(
name|RE
operator|.
name|IsPCRel
condition|)
block|{
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|LoadAddress
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|Value
operator|-=
name|FinalAddress
expr_stmt|;
comment|// ARM PCRel relocations have an effective-PC offset of two instructions
comment|// (four bytes in Thumb mode, 8 bytes in ARM mode).
comment|// FIXME: For now, assume ARM mode.
name|Value
operator|-=
literal|8
expr_stmt|;
block|}
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Invalid relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM_RELOC_VANILLA
case|:
name|writeBytesUnaligned
argument_list|(
name|Value
operator|+
name|RE
operator|.
name|Addend
argument_list|,
name|LocalAddress
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
break|break;
case|case
name|MachO
operator|::
name|ARM_RELOC_BR24
case|:
block|{
comment|// Mask the value into the target address. We know instructions are
comment|// 32-bit aligned, so we can do it all at once.
name|Value
operator|+=
name|RE
operator|.
name|Addend
expr_stmt|;
comment|// The low two bits of the value are not encoded.
name|Value
operator|>>=
literal|2
expr_stmt|;
comment|// Mask the value to 24 bits.
name|uint64_t
name|FinalValue
init|=
name|Value
operator|&
literal|0xffffff
decl_stmt|;
comment|// FIXME: If the destination is a Thumb function (and the instruction
comment|// is a non-predicated BL instruction), we need to change it to a BLX
comment|// instruction instead.
comment|// Insert the value into the instruction.
name|uint32_t
name|Temp
init|=
name|readBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|writeBytesUnaligned
argument_list|(
operator|(
name|Temp
operator|&
operator|~
literal|0xffffff
operator|)
operator||
name|FinalValue
argument_list|,
name|LocalAddress
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM_RELOC_HALF_SECTDIFF
case|:
block|{
name|uint64_t
name|SectionABase
init|=
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionA
index|]
operator|.
name|LoadAddress
decl_stmt|;
name|uint64_t
name|SectionBBase
init|=
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionB
index|]
operator|.
name|LoadAddress
decl_stmt|;
name|assert
argument_list|(
operator|(
name|Value
operator|==
name|SectionABase
operator|||
name|Value
operator|==
name|SectionBBase
operator|)
operator|&&
literal|"Unexpected HALFSECTDIFF relocation value."
argument_list|)
expr_stmt|;
name|Value
operator|=
name|SectionABase
operator|-
name|SectionBBase
operator|+
name|RE
operator|.
name|Addend
expr_stmt|;
if|if
condition|(
name|RE
operator|.
name|Size
operator|&
literal|0x1
condition|)
comment|// :upper16:
name|Value
operator|=
operator|(
name|Value
operator|>>
literal|16
operator|)
expr_stmt|;
name|Value
operator|&=
literal|0xffff
expr_stmt|;
name|uint32_t
name|Insn
init|=
name|readBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|Insn
operator|=
operator|(
name|Insn
operator|&
literal|0xfff0f000
operator|)
operator||
operator|(
operator|(
name|Value
operator|&
literal|0xf000
operator|)
operator|<<
literal|4
operator|)
operator||
operator|(
name|Value
operator|&
literal|0x0fff
operator|)
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|Insn
argument_list|,
name|LocalAddress
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM_THUMB_RELOC_BR22
case|:
case|case
name|MachO
operator|::
name|ARM_THUMB_32BIT_BRANCH
case|:
case|case
name|MachO
operator|::
name|ARM_RELOC_HALF
case|:
case|case
name|MachO
operator|::
name|ARM_RELOC_PAIR
case|:
case|case
name|MachO
operator|::
name|ARM_RELOC_SECTDIFF
case|:
case|case
name|MachO
operator|::
name|ARM_RELOC_LOCAL_SECTDIFF
case|:
case|case
name|MachO
operator|::
name|ARM_RELOC_PB_LA_PTR
case|:
name|Error
argument_list|(
literal|"Relocation type not implemented yet!"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|void
name|finalizeSection
parameter_list|(
specifier|const
name|ObjectFile
modifier|&
name|Obj
parameter_list|,
name|unsigned
name|SectionID
parameter_list|,
specifier|const
name|SectionRef
modifier|&
name|Section
parameter_list|)
block|{
name|StringRef
name|Name
decl_stmt|;
name|Section
operator|.
name|getName
argument_list|(
name|Name
argument_list|)
expr_stmt|;
if|if
condition|(
name|Name
operator|==
literal|"__nl_symbol_ptr"
condition|)
name|populateIndirectSymbolPointersSection
argument_list|(
name|cast
operator|<
name|MachOObjectFile
operator|>
operator|(
name|Obj
operator|)
argument_list|,
name|Section
argument_list|,
name|SectionID
argument_list|)
expr_stmt|;
block|}
name|private
label|:
name|void
name|processBranchRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
specifier|const
name|RelocationValueRef
modifier|&
name|Value
parameter_list|,
name|StubMap
modifier|&
name|Stubs
parameter_list|)
block|{
comment|// This is an ARM branch relocation, need to use a stub function.
comment|// Look up for existing stub.
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|RuntimeDyldMachO
operator|::
name|StubMap
operator|::
name|const_iterator
name|i
operator|=
name|Stubs
operator|.
name|find
argument_list|(
name|Value
argument_list|)
expr_stmt|;
name|uint8_t
modifier|*
name|Addr
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|Stubs
operator|.
name|end
argument_list|()
condition|)
block|{
name|Addr
operator|=
name|Section
operator|.
name|Address
operator|+
name|i
operator|->
name|second
expr_stmt|;
block|}
else|else
block|{
comment|// Create a new stub function.
name|Stubs
index|[
name|Value
index|]
operator|=
name|Section
operator|.
name|StubOffset
expr_stmt|;
name|uint8_t
modifier|*
name|StubTargetAddr
init|=
name|createStubFunction
argument_list|(
name|Section
operator|.
name|Address
operator|+
name|Section
operator|.
name|StubOffset
argument_list|)
decl_stmt|;
name|RelocationEntry
name|StubRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|StubTargetAddr
operator|-
name|Section
operator|.
name|Address
argument_list|,
name|MachO
operator|::
name|GENERIC_RELOC_VANILLA
argument_list|,
name|Value
operator|.
name|Offset
argument_list|,
name|false
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|StubRE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|StubRE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
name|Addr
operator|=
name|Section
operator|.
name|Address
operator|+
name|Section
operator|.
name|StubOffset
expr_stmt|;
name|Section
operator|.
name|StubOffset
operator|+=
name|getMaxStubSize
argument_list|()
expr_stmt|;
block|}
name|RelocationEntry
name|TargetRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|RE
operator|.
name|Offset
argument_list|,
name|RE
operator|.
name|RelType
argument_list|,
literal|0
argument_list|,
name|RE
operator|.
name|IsPCRel
argument_list|,
name|RE
operator|.
name|Size
argument_list|)
decl_stmt|;
name|resolveRelocation
argument_list|(
name|TargetRE
argument_list|,
operator|(
name|uint64_t
operator|)
name|Addr
argument_list|)
expr_stmt|;
block|}
name|relocation_iterator
name|processHALFSECTDIFFRelocation
parameter_list|(
name|unsigned
name|SectionID
parameter_list|,
name|relocation_iterator
name|RelI
parameter_list|,
specifier|const
name|ObjectFile
modifier|&
name|BaseTObj
parameter_list|,
name|ObjSectionToIDMap
modifier|&
name|ObjSectionToID
parameter_list|)
block|{
specifier|const
name|MachOObjectFile
modifier|&
name|MachO
init|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
name|BaseTObj
operator|)
decl_stmt|;
name|MachO
operator|::
name|any_relocation_info
name|RE
operator|=
name|MachO
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
comment|// For a half-diff relocation the length bits actually record whether this
comment|// is a movw/movt, and whether this is arm or thumb.
comment|// Bit 0 indicates movw (b0 == 0) or movt (b0 == 1).
comment|// Bit 1 indicates arm (b1 == 0) or thumb (b1 == 1).
name|unsigned
name|HalfDiffKindBits
init|=
name|MachO
operator|.
name|getAnyRelocationLength
argument_list|(
name|RE
argument_list|)
decl_stmt|;
if|if
condition|(
name|HalfDiffKindBits
operator|&
literal|0x2
condition|)
name|llvm_unreachable
argument_list|(
literal|"Thumb not yet supported."
argument_list|)
expr_stmt|;
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|SectionID
index|]
decl_stmt|;
name|uint32_t
name|RelocType
init|=
name|MachO
operator|.
name|getAnyRelocationType
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|bool
name|IsPCRel
init|=
name|MachO
operator|.
name|getAnyRelocationPCRel
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|uint64_t
name|Offset
init|=
name|RelI
operator|->
name|getOffset
argument_list|()
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|Offset
decl_stmt|;
name|int64_t
name|Immediate
init|=
name|readBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// Copy the whole instruction out.
name|Immediate
operator|=
operator|(
operator|(
name|Immediate
operator|>>
literal|4
operator|)
operator|&
literal|0xf000
operator|)
operator||
operator|(
name|Immediate
operator|&
literal|0xfff
operator|)
expr_stmt|;
operator|++
name|RelI
expr_stmt|;
name|MachO
operator|::
name|any_relocation_info
name|RE2
operator|=
name|MachO
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
name|uint32_t
name|AddrA
init|=
name|MachO
operator|.
name|getScatteredRelocationValue
argument_list|(
name|RE
argument_list|)
decl_stmt|;
name|section_iterator
name|SAI
init|=
name|getSectionByAddress
argument_list|(
name|MachO
argument_list|,
name|AddrA
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|SAI
operator|!=
name|MachO
operator|.
name|section_end
argument_list|()
operator|&&
literal|"Can't find section for address A"
argument_list|)
expr_stmt|;
name|uint64_t
name|SectionABase
init|=
name|SAI
operator|->
name|getAddress
argument_list|()
decl_stmt|;
name|uint64_t
name|SectionAOffset
init|=
name|AddrA
operator|-
name|SectionABase
decl_stmt|;
name|SectionRef
name|SectionA
init|=
operator|*
name|SAI
decl_stmt|;
name|bool
name|IsCode
init|=
name|SectionA
operator|.
name|isText
argument_list|()
decl_stmt|;
name|uint32_t
name|SectionAID
init|=
name|findOrEmitSection
argument_list|(
name|MachO
argument_list|,
name|SectionA
argument_list|,
name|IsCode
argument_list|,
name|ObjSectionToID
argument_list|)
decl_stmt|;
name|uint32_t
name|AddrB
init|=
name|MachO
operator|.
name|getScatteredRelocationValue
argument_list|(
name|RE2
argument_list|)
decl_stmt|;
name|section_iterator
name|SBI
init|=
name|getSectionByAddress
argument_list|(
name|MachO
argument_list|,
name|AddrB
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|SBI
operator|!=
name|MachO
operator|.
name|section_end
argument_list|()
operator|&&
literal|"Can't find section for address B"
argument_list|)
expr_stmt|;
name|uint64_t
name|SectionBBase
init|=
name|SBI
operator|->
name|getAddress
argument_list|()
decl_stmt|;
name|uint64_t
name|SectionBOffset
init|=
name|AddrB
operator|-
name|SectionBBase
decl_stmt|;
name|SectionRef
name|SectionB
init|=
operator|*
name|SBI
decl_stmt|;
name|uint32_t
name|SectionBID
init|=
name|findOrEmitSection
argument_list|(
name|MachO
argument_list|,
name|SectionB
argument_list|,
name|IsCode
argument_list|,
name|ObjSectionToID
argument_list|)
decl_stmt|;
name|uint32_t
name|OtherHalf
init|=
name|MachO
operator|.
name|getAnyRelocationAddress
argument_list|(
name|RE2
argument_list|)
operator|&
literal|0xffff
decl_stmt|;
name|unsigned
name|Shift
init|=
operator|(
name|HalfDiffKindBits
operator|&
literal|0x1
operator|)
condition|?
literal|16
else|:
literal|0
decl_stmt|;
name|uint32_t
name|FullImmVal
init|=
operator|(
name|Immediate
operator|<<
name|Shift
operator|)
operator||
operator|(
name|OtherHalf
operator|<<
operator|(
literal|16
operator|-
name|Shift
operator|)
operator|)
decl_stmt|;
name|int64_t
name|Addend
init|=
name|FullImmVal
operator|-
operator|(
name|AddrA
operator|-
name|AddrB
operator|)
decl_stmt|;
comment|// addend = Encoded - Expected
comment|//        = Encoded - (AddrA - AddrB)
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"Found SECTDIFF: AddrA: "
operator|<<
name|AddrA
operator|<<
literal|", AddrB: "
operator|<<
name|AddrB
operator|<<
literal|", Addend: "
operator|<<
name|Addend
operator|<<
literal|", SectionA ID: "
operator|<<
name|SectionAID
operator|<<
literal|", SectionAOffset: "
operator|<<
name|SectionAOffset
operator|<<
literal|", SectionB ID: "
operator|<<
name|SectionBID
operator|<<
literal|", SectionBOffset: "
operator|<<
name|SectionBOffset
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|RelocationEntry
name|R
argument_list|(
name|SectionID
argument_list|,
name|Offset
argument_list|,
name|RelocType
argument_list|,
name|Addend
argument_list|,
name|SectionAID
argument_list|,
name|SectionAOffset
argument_list|,
name|SectionBID
argument_list|,
name|SectionBOffset
argument_list|,
name|IsPCRel
argument_list|,
name|HalfDiffKindBits
argument_list|)
decl_stmt|;
name|addRelocationForSection
argument_list|(
name|R
argument_list|,
name|SectionAID
argument_list|)
expr_stmt|;
name|addRelocationForSection
argument_list|(
name|R
argument_list|,
name|SectionBID
argument_list|)
expr_stmt|;
return|return
operator|++
name|RelI
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_undef
unit|}
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

