begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RuntimeDyldMachOX86_64.h ---- MachO/X86_64 specific code. -*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDMACHOX86_64_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDMACHOX86_64_H
end_define

begin_include
include|#
directive|include
file|"../RuntimeDyldMachO.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"dyld"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldMachOX86_64
range|:
name|public
name|RuntimeDyldMachOCRTPBase
operator|<
name|RuntimeDyldMachOX86_64
operator|>
block|{
name|public
operator|:
typedef|typedef
name|uint64_t
name|TargetPtrT
typedef|;
name|RuntimeDyldMachOX86_64
argument_list|(
name|RuntimeDyld
operator|::
name|MemoryManager
operator|&
name|MM
argument_list|,
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|&
name|Resolver
argument_list|)
operator|:
name|RuntimeDyldMachOCRTPBase
argument_list|(
argument|MM
argument_list|,
argument|Resolver
argument_list|)
block|{}
name|unsigned
name|getMaxStubSize
argument_list|()
name|override
block|{
return|return
literal|8
return|;
block|}
name|unsigned
name|getStubAlignment
parameter_list|()
function|override
block|{
return|return
literal|1
return|;
block|}
name|Expected
operator|<
name|relocation_iterator
operator|>
name|processRelocationRef
argument_list|(
argument|unsigned SectionID
argument_list|,
argument|relocation_iterator RelI
argument_list|,
argument|const ObjectFile&BaseObjT
argument_list|,
argument|ObjSectionToIDMap&ObjSectionToID
argument_list|,
argument|StubMap&Stubs
argument_list|)
name|override
block|{
specifier|const
name|MachOObjectFile
operator|&
name|Obj
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
name|BaseObjT
operator|)
block|;
name|MachO
operator|::
name|any_relocation_info
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
block|;
name|uint32_t
name|RelType
operator|=
name|Obj
operator|.
name|getAnyRelocationType
argument_list|(
name|RelInfo
argument_list|)
block|;
if|if
condition|(
name|RelType
operator|==
name|MachO
operator|::
name|X86_64_RELOC_SUBTRACTOR
condition|)
return|return
name|processSubtractRelocation
argument_list|(
name|SectionID
argument_list|,
name|RelI
argument_list|,
name|Obj
argument_list|,
name|ObjSectionToID
argument_list|)
return|;
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|isRelocationScattered
argument_list|(
name|RelInfo
argument_list|)
operator|&&
literal|"Scattered relocations not supported on X86_64"
argument_list|)
expr_stmt|;
name|RelocationEntry
name|RE
argument_list|(
name|getRelocationEntry
argument_list|(
name|SectionID
argument_list|,
name|Obj
argument_list|,
name|RelI
argument_list|)
argument_list|)
decl_stmt|;
name|RE
operator|.
name|Addend
operator|=
name|memcpyAddend
argument_list|(
name|RE
argument_list|)
expr_stmt|;
name|RelocationValueRef
name|Value
decl_stmt|;
if|if
condition|(
name|auto
name|ValueOrErr
init|=
name|getRelocationValueRef
argument_list|(
name|Obj
argument_list|,
name|RelI
argument_list|,
name|RE
argument_list|,
name|ObjSectionToID
argument_list|)
condition|)
name|Value
operator|=
operator|*
name|ValueOrErr
expr_stmt|;
else|else
return|return
name|ValueOrErr
operator|.
name|takeError
argument_list|()
return|;
name|bool
name|IsExtern
init|=
name|Obj
operator|.
name|getPlainRelocationExternal
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|IsExtern
operator|&&
name|RE
operator|.
name|IsPCRel
condition|)
name|makeValueAddendPCRel
argument_list|(
name|Value
argument_list|,
name|RelI
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|RelType
condition|)
block|{
name|UNIMPLEMENTED_RELOC
argument_list|(
name|MachO
operator|::
name|X86_64_RELOC_TLV
argument_list|)
expr_stmt|;
default|default:
if|if
condition|(
name|RelType
operator|>
name|MachO
operator|::
name|X86_64_RELOC_TLV
condition|)
return|return
name|make_error
operator|<
name|RuntimeDyldError
operator|>
operator|(
operator|(
literal|"MachO X86_64 relocation type "
operator|+
name|Twine
argument_list|(
name|RelType
argument_list|)
operator|+
literal|" is out of range"
operator|)
operator|.
name|str
argument_list|()
operator|)
return|;
break|break;
block|}
if|if
condition|(
name|RE
operator|.
name|RelType
operator|==
name|MachO
operator|::
name|X86_64_RELOC_GOT
operator|||
name|RE
operator|.
name|RelType
operator|==
name|MachO
operator|::
name|X86_64_RELOC_GOT_LOAD
condition|)
name|processGOTRelocation
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|,
name|Stubs
argument_list|)
expr_stmt|;
else|else
block|{
name|RE
operator|.
name|Addend
operator|=
name|Value
operator|.
name|Offset
expr_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
block|}
return|return
operator|++
name|RelI
return|;
block|}
end_decl_stmt

begin_function
name|void
name|resolveRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
function|override
block|{
name|DEBUG
argument_list|(
name|dumpRelocationToResolve
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|getAddressWithOffset
argument_list|(
name|RE
operator|.
name|Offset
argument_list|)
decl_stmt|;
comment|// If the relocation is PC-relative, the value to be encoded is the
comment|// pointer difference.
if|if
condition|(
name|RE
operator|.
name|IsPCRel
condition|)
block|{
comment|// FIXME: It seems this value needs to be adjusted by 4 for an effective
comment|// PC address. Is that expected? Only for branches, perhaps?
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|getLoadAddressWithOffset
argument_list|(
name|RE
operator|.
name|Offset
argument_list|)
decl_stmt|;
name|Value
operator|-=
name|FinalAddress
operator|+
literal|4
expr_stmt|;
block|}
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Invalid relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|X86_64_RELOC_SIGNED_1
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_SIGNED_2
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_SIGNED_4
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_SIGNED
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_UNSIGNED
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_BRANCH
case|:
name|writeBytesUnaligned
argument_list|(
name|Value
operator|+
name|RE
operator|.
name|Addend
argument_list|,
name|LocalAddress
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
break|break;
case|case
name|MachO
operator|::
name|X86_64_RELOC_SUBTRACTOR
case|:
block|{
name|uint64_t
name|SectionABase
init|=
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionA
index|]
operator|.
name|getLoadAddress
argument_list|()
decl_stmt|;
name|uint64_t
name|SectionBBase
init|=
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionB
index|]
operator|.
name|getLoadAddress
argument_list|()
decl_stmt|;
name|assert
argument_list|(
operator|(
name|Value
operator|==
name|SectionABase
operator|||
name|Value
operator|==
name|SectionBBase
operator|)
operator|&&
literal|"Unexpected SUBTRACTOR relocation value."
argument_list|)
expr_stmt|;
name|Value
operator|=
name|SectionABase
operator|-
name|SectionBBase
operator|+
name|RE
operator|.
name|Addend
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|Value
argument_list|,
name|LocalAddress
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function

begin_function
name|Error
name|finalizeSection
parameter_list|(
specifier|const
name|ObjectFile
modifier|&
name|Obj
parameter_list|,
name|unsigned
name|SectionID
parameter_list|,
specifier|const
name|SectionRef
modifier|&
name|Section
parameter_list|)
block|{
return|return
name|Error
operator|::
name|success
argument_list|()
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_function
name|void
name|processGOTRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|RelocationValueRef
modifier|&
name|Value
parameter_list|,
name|StubMap
modifier|&
name|Stubs
parameter_list|)
block|{
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|assert
argument_list|(
name|RE
operator|.
name|IsPCRel
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|RE
operator|.
name|Size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Value
operator|.
name|Offset
operator|-=
name|RE
operator|.
name|Addend
expr_stmt|;
name|RuntimeDyldMachO
operator|::
name|StubMap
operator|::
name|const_iterator
name|i
operator|=
name|Stubs
operator|.
name|find
argument_list|(
name|Value
argument_list|)
expr_stmt|;
name|uint8_t
modifier|*
name|Addr
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|Stubs
operator|.
name|end
argument_list|()
condition|)
block|{
name|Addr
operator|=
name|Section
operator|.
name|getAddressWithOffset
argument_list|(
name|i
operator|->
name|second
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Stubs
index|[
name|Value
index|]
operator|=
name|Section
operator|.
name|getStubOffset
argument_list|()
expr_stmt|;
name|uint8_t
modifier|*
name|GOTEntry
init|=
name|Section
operator|.
name|getAddressWithOffset
argument_list|(
name|Section
operator|.
name|getStubOffset
argument_list|()
argument_list|)
decl_stmt|;
name|RelocationEntry
name|GOTRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|Section
operator|.
name|getStubOffset
argument_list|()
argument_list|,
name|MachO
operator|::
name|X86_64_RELOC_UNSIGNED
argument_list|,
name|Value
operator|.
name|Offset
argument_list|,
name|false
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|GOTRE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|GOTRE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
name|Section
operator|.
name|advanceStubOffset
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|Addr
operator|=
name|GOTEntry
expr_stmt|;
block|}
name|RelocationEntry
name|TargetRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|RE
operator|.
name|Offset
argument_list|,
name|MachO
operator|::
name|X86_64_RELOC_UNSIGNED
argument_list|,
name|RE
operator|.
name|Addend
argument_list|,
name|true
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|resolveRelocation
argument_list|(
name|TargetRE
argument_list|,
operator|(
name|uint64_t
operator|)
name|Addr
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|Expected
operator|<
name|relocation_iterator
operator|>
name|processSubtractRelocation
argument_list|(
argument|unsigned SectionID
argument_list|,
argument|relocation_iterator RelI
argument_list|,
argument|const MachOObjectFile&BaseObj
argument_list|,
argument|ObjSectionToIDMap&ObjSectionToID
argument_list|)
block|{
specifier|const
name|MachOObjectFile
operator|&
name|Obj
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
name|BaseObj
operator|)
block|;
name|MachO
operator|::
name|any_relocation_info
name|RE
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
block|;
name|unsigned
name|Size
operator|=
name|Obj
operator|.
name|getAnyRelocationLength
argument_list|(
name|RE
argument_list|)
block|;
name|uint64_t
name|Offset
operator|=
name|RelI
operator|->
name|getOffset
argument_list|()
block|;
name|uint8_t
operator|*
name|LocalAddress
operator|=
name|Sections
index|[
name|SectionID
index|]
operator|.
name|getAddressWithOffset
argument_list|(
name|Offset
argument_list|)
block|;
name|unsigned
name|NumBytes
operator|=
literal|1
operator|<<
name|Size
block|;
name|int64_t
name|Addend
operator|=
name|SignExtend64
argument_list|(
name|readBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
name|NumBytes
argument_list|)
argument_list|,
name|NumBytes
operator|*
literal|8
argument_list|)
block|;
name|unsigned
name|SectionBID
operator|=
operator|~
literal|0U
block|;
name|uint64_t
name|SectionBOffset
operator|=
literal|0
block|;
name|MachO
operator|::
name|any_relocation_info
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
block|;
name|bool
name|AIsExternal
operator|=
name|BaseObj
operator|.
name|getPlainRelocationExternal
argument_list|(
name|RelInfo
argument_list|)
block|;
if|if
condition|(
name|AIsExternal
condition|)
block|{
name|Expected
operator|<
name|StringRef
operator|>
name|SubtrahendNameOrErr
operator|=
name|RelI
operator|->
name|getSymbol
argument_list|()
operator|->
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|SubtrahendNameOrErr
condition|)
return|return
name|SubtrahendNameOrErr
operator|.
name|takeError
argument_list|()
return|;
name|auto
name|SubtrahendI
init|=
name|GlobalSymbolTable
operator|.
name|find
argument_list|(
operator|*
name|SubtrahendNameOrErr
argument_list|)
decl_stmt|;
name|SectionBID
operator|=
name|SubtrahendI
operator|->
name|second
operator|.
name|getSectionID
argument_list|()
expr_stmt|;
name|SectionBOffset
operator|=
name|SubtrahendI
operator|->
name|second
operator|.
name|getOffset
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|SectionRef
name|SecB
init|=
name|Obj
operator|.
name|getAnyRelocationSection
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
name|bool
name|IsCode
init|=
name|SecB
operator|.
name|isText
argument_list|()
decl_stmt|;
name|Expected
operator|<
name|unsigned
operator|>
name|SectionBIDOrErr
operator|=
name|findOrEmitSection
argument_list|(
name|Obj
argument_list|,
name|SecB
argument_list|,
name|IsCode
argument_list|,
name|ObjSectionToID
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|SectionBIDOrErr
condition|)
return|return
name|SectionBIDOrErr
operator|.
name|takeError
argument_list|()
return|;
name|SectionBID
operator|=
operator|*
name|SectionBIDOrErr
expr_stmt|;
name|Addend
operator|+=
name|SecB
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|++
name|RelI
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|unsigned
name|SectionAID
init|=
operator|~
literal|0U
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|uint64_t
name|SectionAOffset
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|bool
name|BIsExternal
init|=
name|BaseObj
operator|.
name|getPlainRelocationExternal
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|BIsExternal
condition|)
block|{
name|Expected
operator|<
name|StringRef
operator|>
name|MinuendNameOrErr
operator|=
name|RelI
operator|->
name|getSymbol
argument_list|()
operator|->
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|MinuendNameOrErr
condition|)
return|return
name|MinuendNameOrErr
operator|.
name|takeError
argument_list|()
return|;
name|auto
name|MinuendI
init|=
name|GlobalSymbolTable
operator|.
name|find
argument_list|(
operator|*
name|MinuendNameOrErr
argument_list|)
decl_stmt|;
name|SectionAID
operator|=
name|MinuendI
operator|->
name|second
operator|.
name|getSectionID
argument_list|()
expr_stmt|;
name|SectionAOffset
operator|=
name|MinuendI
operator|->
name|second
operator|.
name|getOffset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SectionRef
name|SecA
init|=
name|Obj
operator|.
name|getAnyRelocationSection
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
name|bool
name|IsCode
init|=
name|SecA
operator|.
name|isText
argument_list|()
decl_stmt|;
name|Expected
operator|<
name|unsigned
operator|>
name|SectionAIDOrErr
operator|=
name|findOrEmitSection
argument_list|(
name|Obj
argument_list|,
name|SecA
argument_list|,
name|IsCode
argument_list|,
name|ObjSectionToID
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|SectionAIDOrErr
condition|)
return|return
name|SectionAIDOrErr
operator|.
name|takeError
argument_list|()
return|;
name|SectionAID
operator|=
operator|*
name|SectionAIDOrErr
expr_stmt|;
name|Addend
operator|-=
name|SecA
operator|.
name|getAddress
argument_list|()
expr_stmt|;
block|}
end_if

begin_decl_stmt
name|RelocationEntry
name|R
argument_list|(
name|SectionID
argument_list|,
name|Offset
argument_list|,
name|MachO
operator|::
name|X86_64_RELOC_SUBTRACTOR
argument_list|,
operator|(
name|uint64_t
operator|)
name|Addend
argument_list|,
name|SectionAID
argument_list|,
name|SectionAOffset
argument_list|,
name|SectionBID
argument_list|,
name|SectionBOffset
argument_list|,
name|false
argument_list|,
name|Size
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|addRelocationForSection
argument_list|(
name|R
argument_list|,
name|SectionAID
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|++
name|RelI
return|;
end_return

begin_empty_stmt
unit|}  }
empty_stmt|;
end_empty_stmt

begin_undef
unit|}
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

