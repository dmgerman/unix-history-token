begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RuntimeDyldMachOX86_64.h ---- MachO/X86_64 specific code. -*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_RUNTIMEDYLDMACHOX86_64_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_RUNTIMEDYLDMACHOX86_64_H
end_define

begin_include
include|#
directive|include
file|"../RuntimeDyldMachO.h"
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"dyld"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldMachOX86_64
range|:
name|public
name|RuntimeDyldMachOCRTPBase
operator|<
name|RuntimeDyldMachOX86_64
operator|>
block|{
name|public
operator|:
name|RuntimeDyldMachOX86_64
argument_list|(
name|RTDyldMemoryManager
operator|*
name|MM
argument_list|)
operator|:
name|RuntimeDyldMachOCRTPBase
argument_list|(
argument|MM
argument_list|)
block|{}
name|unsigned
name|getMaxStubSize
argument_list|()
name|override
block|{
return|return
literal|8
return|;
block|}
name|unsigned
name|getStubAlignment
argument_list|()
name|override
block|{
return|return
literal|1
return|;
block|}
name|relocation_iterator
name|processRelocationRef
argument_list|(
argument|unsigned SectionID
argument_list|,
argument|relocation_iterator RelI
argument_list|,
argument|ObjectImage&ObjImg
argument_list|,
argument|ObjSectionToIDMap&ObjSectionToID
argument_list|,
argument|const SymbolTableMap&Symbols
argument_list|,
argument|StubMap&Stubs
argument_list|)
name|override
block|{
specifier|const
name|MachOObjectFile
operator|&
name|Obj
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
operator|*
name|ObjImg
operator|.
name|getObjectFile
argument_list|()
operator|)
block|;
name|MachO
operator|::
name|any_relocation_info
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|isRelocationScattered
argument_list|(
name|RelInfo
argument_list|)
operator|&&
literal|"Scattered relocations not supported on X86_64"
argument_list|)
block|;
name|RelocationEntry
name|RE
argument_list|(
name|getBasicRelocationEntry
argument_list|(
name|SectionID
argument_list|,
name|ObjImg
argument_list|,
name|RelI
argument_list|)
argument_list|)
block|;
name|RelocationValueRef
name|Value
argument_list|(
name|getRelocationValueRef
argument_list|(
name|ObjImg
argument_list|,
name|RelI
argument_list|,
name|RE
argument_list|,
name|ObjSectionToID
argument_list|,
name|Symbols
argument_list|)
argument_list|)
block|;
name|bool
name|IsExtern
operator|=
name|Obj
operator|.
name|getPlainRelocationExternal
argument_list|(
name|RelInfo
argument_list|)
block|;
if|if
condition|(
operator|!
name|IsExtern
operator|&&
name|RE
operator|.
name|IsPCRel
condition|)
name|makeValueAddendPCRel
argument_list|(
name|Value
argument_list|,
name|ObjImg
argument_list|,
name|RelI
argument_list|)
expr_stmt|;
if|if
condition|(
name|RE
operator|.
name|RelType
operator|==
name|MachO
operator|::
name|X86_64_RELOC_GOT
operator|||
name|RE
operator|.
name|RelType
operator|==
name|MachO
operator|::
name|X86_64_RELOC_GOT_LOAD
condition|)
name|processGOTRelocation
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|,
name|Stubs
argument_list|)
expr_stmt|;
else|else
block|{
name|RE
operator|.
name|Addend
operator|=
name|Value
operator|.
name|Addend
expr_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
block|}
return|return
operator|++
name|RelI
return|;
block|}
name|void
name|resolveRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|DEBUG
argument_list|(
name|dumpRelocationToResolve
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
comment|// If the relocation is PC-relative, the value to be encoded is the
comment|// pointer difference.
if|if
condition|(
name|RE
operator|.
name|IsPCRel
condition|)
block|{
comment|// FIXME: It seems this value needs to be adjusted by 4 for an effective
comment|// PC address. Is that expected? Only for branches, perhaps?
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|LoadAddress
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|Value
operator|-=
name|FinalAddress
operator|+
literal|4
expr_stmt|;
block|}
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Invalid relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|X86_64_RELOC_SIGNED_1
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_SIGNED_2
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_SIGNED_4
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_SIGNED
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_UNSIGNED
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_BRANCH
case|:
name|writeBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
name|Value
operator|+
name|RE
operator|.
name|Addend
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
break|break;
case|case
name|MachO
operator|::
name|X86_64_RELOC_GOT_LOAD
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_GOT
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_SUBTRACTOR
case|:
case|case
name|MachO
operator|::
name|X86_64_RELOC_TLV
case|:
name|Error
argument_list|(
literal|"Relocation type not implemented yet!"
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|finalizeSection
parameter_list|(
name|ObjectImage
modifier|&
name|ObjImg
parameter_list|,
name|unsigned
name|SectionID
parameter_list|,
specifier|const
name|SectionRef
modifier|&
name|Section
parameter_list|)
block|{}
name|private
label|:
name|void
name|processGOTRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|RelocationValueRef
modifier|&
name|Value
parameter_list|,
name|StubMap
modifier|&
name|Stubs
parameter_list|)
block|{
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|assert
argument_list|(
name|RE
operator|.
name|IsPCRel
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|RE
operator|.
name|Size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Value
operator|.
name|Addend
operator|-=
name|RE
operator|.
name|Addend
expr_stmt|;
name|RuntimeDyldMachO
operator|::
name|StubMap
operator|::
name|const_iterator
name|i
operator|=
name|Stubs
operator|.
name|find
argument_list|(
name|Value
argument_list|)
expr_stmt|;
name|uint8_t
modifier|*
name|Addr
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|Stubs
operator|.
name|end
argument_list|()
condition|)
block|{
name|Addr
operator|=
name|Section
operator|.
name|Address
operator|+
name|i
operator|->
name|second
expr_stmt|;
block|}
else|else
block|{
name|Stubs
index|[
name|Value
index|]
operator|=
name|Section
operator|.
name|StubOffset
expr_stmt|;
name|uint8_t
modifier|*
name|GOTEntry
init|=
name|Section
operator|.
name|Address
operator|+
name|Section
operator|.
name|StubOffset
decl_stmt|;
name|RelocationEntry
name|GOTRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|Section
operator|.
name|StubOffset
argument_list|,
name|MachO
operator|::
name|X86_64_RELOC_UNSIGNED
argument_list|,
name|Value
operator|.
name|Addend
argument_list|,
name|false
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|GOTRE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|GOTRE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
name|Section
operator|.
name|StubOffset
operator|+=
literal|8
expr_stmt|;
name|Addr
operator|=
name|GOTEntry
expr_stmt|;
block|}
name|RelocationEntry
name|TargetRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|RE
operator|.
name|Offset
argument_list|,
name|MachO
operator|::
name|X86_64_RELOC_UNSIGNED
argument_list|,
name|RE
operator|.
name|Addend
argument_list|,
name|true
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|resolveRelocation
argument_list|(
name|TargetRE
argument_list|,
operator|(
name|uint64_t
operator|)
name|Addr
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_undef
unit|}
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_RUNTIMEDYLDMACHOX86_64_H
end_comment

end_unit

