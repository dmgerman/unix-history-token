begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- RuntimeDyldMachOAArch64.h -- MachO/AArch64 specific code. -*- C++ -*-=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_RUNTIMEDYLDMACHOAARCH64_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_RUNTIMEDYLDMACHOAARCH64_H
end_define

begin_include
include|#
directive|include
file|"../RuntimeDyldMachO.h"
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"dyld"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldMachOAArch64
range|:
name|public
name|RuntimeDyldMachOCRTPBase
operator|<
name|RuntimeDyldMachOAArch64
operator|>
block|{
name|public
operator|:
name|RuntimeDyldMachOAArch64
argument_list|(
name|RTDyldMemoryManager
operator|*
name|MM
argument_list|)
operator|:
name|RuntimeDyldMachOCRTPBase
argument_list|(
argument|MM
argument_list|)
block|{}
name|unsigned
name|getMaxStubSize
argument_list|()
name|override
block|{
return|return
literal|8
return|;
block|}
name|unsigned
name|getStubAlignment
argument_list|()
name|override
block|{
return|return
literal|8
return|;
block|}
name|relocation_iterator
name|processRelocationRef
argument_list|(
argument|unsigned SectionID
argument_list|,
argument|relocation_iterator RelI
argument_list|,
argument|ObjectImage&ObjImg
argument_list|,
argument|ObjSectionToIDMap&ObjSectionToID
argument_list|,
argument|const SymbolTableMap&Symbols
argument_list|,
argument|StubMap&Stubs
argument_list|)
name|override
block|{
specifier|const
name|MachOObjectFile
operator|&
name|Obj
operator|=
name|static_cast
operator|<
specifier|const
name|MachOObjectFile
operator|&
operator|>
operator|(
operator|*
name|ObjImg
operator|.
name|getObjectFile
argument_list|()
operator|)
block|;
name|MachO
operator|::
name|any_relocation_info
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
block|;
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|isRelocationScattered
argument_list|(
name|RelInfo
argument_list|)
operator|&&
literal|""
argument_list|)
block|;
comment|// ARM64 has an ARM64_RELOC_ADDEND relocation type that carries an explicit
comment|// addend for the following relocation. If found: (1) store the associated
comment|// addend, (2) consume the next relocation, and (3) use the stored addend to
comment|// override the addend.
name|bool
name|HasExplicitAddend
operator|=
name|false
block|;
name|int64_t
name|ExplicitAddend
operator|=
literal|0
block|;
if|if
condition|(
name|Obj
operator|.
name|getAnyRelocationType
argument_list|(
name|RelInfo
argument_list|)
operator|==
name|MachO
operator|::
name|ARM64_RELOC_ADDEND
condition|)
block|{
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|getPlainRelocationExternal
argument_list|(
name|RelInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|Obj
operator|.
name|getAnyRelocationPCRel
argument_list|(
name|RelInfo
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|Obj
operator|.
name|getAnyRelocationLength
argument_list|(
name|RelInfo
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|HasExplicitAddend
operator|=
name|true
expr_stmt|;
name|int64_t
name|RawAddend
init|=
name|Obj
operator|.
name|getPlainRelocationSymbolNum
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
comment|// Sign-extend the 24-bit to 64-bit.
name|ExplicitAddend
operator|=
operator|(
name|RawAddend
operator|<<
literal|40
operator|)
operator|>>
literal|40
expr_stmt|;
operator|++
name|RelI
expr_stmt|;
name|RelInfo
operator|=
name|Obj
operator|.
name|getRelocation
argument_list|(
name|RelI
operator|->
name|getRawDataRefImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|RelocationEntry
name|RE
argument_list|(
name|getBasicRelocationEntry
argument_list|(
name|SectionID
argument_list|,
name|ObjImg
argument_list|,
name|RelI
argument_list|)
argument_list|)
decl_stmt|;
name|RelocationValueRef
name|Value
argument_list|(
name|getRelocationValueRef
argument_list|(
name|ObjImg
argument_list|,
name|RelI
argument_list|,
name|RE
argument_list|,
name|ObjSectionToID
argument_list|,
name|Symbols
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|HasExplicitAddend
condition|)
block|{
name|RE
operator|.
name|Addend
operator|=
name|ExplicitAddend
expr_stmt|;
name|Value
operator|.
name|Addend
operator|=
name|ExplicitAddend
expr_stmt|;
block|}
name|bool
name|IsExtern
init|=
name|Obj
operator|.
name|getPlainRelocationExternal
argument_list|(
name|RelInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|IsExtern
operator|&&
name|RE
operator|.
name|IsPCRel
condition|)
name|makeValueAddendPCRel
argument_list|(
name|Value
argument_list|,
name|ObjImg
argument_list|,
name|RelI
argument_list|)
expr_stmt|;
name|RE
operator|.
name|Addend
operator|=
name|Value
operator|.
name|Addend
expr_stmt|;
if|if
condition|(
name|RE
operator|.
name|RelType
operator|==
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGE21
operator|||
name|RE
operator|.
name|RelType
operator|==
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
condition|)
name|processGOTRelocation
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|,
name|Stubs
argument_list|)
expr_stmt|;
else|else
block|{
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
block|}
return|return
operator|++
name|RelI
return|;
block|}
end_decl_stmt

begin_function
name|void
name|resolveRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
block|{
name|DEBUG
argument_list|(
name|dumpRelocationToResolve
argument_list|(
name|RE
argument_list|,
name|Value
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|LocalAddress
init|=
name|Section
operator|.
name|Address
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Invalid relocation type!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM64_RELOC_UNSIGNED
case|:
block|{
name|assert
argument_list|(
operator|!
name|RE
operator|.
name|IsPCRel
operator|&&
literal|"PCRel and ARM64_RELOC_UNSIGNED not supported"
argument_list|)
expr_stmt|;
comment|// Mask in the target value a byte at a time (we don't have an alignment
comment|// guarantee for the target address, so this is safest).
if|if
condition|(
name|RE
operator|.
name|Size
operator|<
literal|2
condition|)
name|llvm_unreachable
argument_list|(
literal|"Invalid size for ARM64_RELOC_UNSIGNED"
argument_list|)
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|LocalAddress
argument_list|,
name|Value
operator|+
name|RE
operator|.
name|Addend
argument_list|,
literal|1
operator|<<
name|RE
operator|.
name|Size
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_BRANCH26
case|:
block|{
name|assert
argument_list|(
name|RE
operator|.
name|IsPCRel
operator|&&
literal|"not PCRel and ARM64_RELOC_BRANCH26 not supported"
argument_list|)
expr_stmt|;
comment|// Mask the value into the target address. We know instructions are
comment|// 32-bit aligned, so we can do it all at once.
name|uint32_t
modifier|*
name|p
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|LocalAddress
decl_stmt|;
comment|// Check if the addend is encoded in the instruction.
name|uint32_t
name|EncodedAddend
init|=
operator|*
name|p
operator|&
literal|0x03FFFFFF
decl_stmt|;
if|if
condition|(
name|EncodedAddend
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|RE
operator|.
name|Addend
operator|==
literal|0
condition|)
name|llvm_unreachable
argument_list|(
literal|"branch26 instruction has embedded addend."
argument_list|)
expr_stmt|;
else|else
name|llvm_unreachable
argument_list|(
literal|"branch26 instruction has embedded addend and"
literal|"ARM64_RELOC_ADDEND."
argument_list|)
expr_stmt|;
block|}
comment|// Check if branch is in range.
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|LoadAddress
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|uint64_t
name|PCRelVal
init|=
name|Value
operator|-
name|FinalAddress
operator|+
name|RE
operator|.
name|Addend
decl_stmt|;
name|assert
argument_list|(
name|isInt
operator|<
literal|26
operator|>
operator|(
name|PCRelVal
operator|)
operator|&&
literal|"Branch target out of range!"
argument_list|)
expr_stmt|;
comment|// Insert the value into the instruction.
operator|*
name|p
operator|=
operator|(
operator|*
name|p
operator|&
literal|0xFC000000
operator|)
operator||
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|PCRelVal
operator|>>
literal|2
argument_list|)
operator|&
literal|0x03FFFFFF
operator|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGE21
case|:
block|{
name|assert
argument_list|(
name|RE
operator|.
name|IsPCRel
operator|&&
literal|"not PCRel and ARM64_RELOC_PAGE21 not supported"
argument_list|)
expr_stmt|;
comment|// Mask the value into the target address. We know instructions are
comment|// 32-bit aligned, so we can do it all at once.
name|uint32_t
modifier|*
name|p
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|LocalAddress
decl_stmt|;
comment|// Check if the addend is encoded in the instruction.
name|uint32_t
name|EncodedAddend
init|=
operator|(
operator|(
operator|*
name|p
operator|&
literal|0x60000000
operator|)
operator|>>
literal|29
operator|)
operator||
operator|(
operator|(
operator|*
name|p
operator|&
literal|0x01FFFFE0
operator|)
operator|>>
literal|3
operator|)
decl_stmt|;
if|if
condition|(
name|EncodedAddend
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|RE
operator|.
name|Addend
operator|==
literal|0
condition|)
name|llvm_unreachable
argument_list|(
literal|"adrp instruction has embedded addend."
argument_list|)
expr_stmt|;
else|else
name|llvm_unreachable
argument_list|(
literal|"adrp instruction has embedded addend and"
literal|"ARM64_RELOC_ADDEND."
argument_list|)
expr_stmt|;
block|}
comment|// Adjust for PC-relative relocation and offset.
name|uint64_t
name|FinalAddress
init|=
name|Section
operator|.
name|LoadAddress
operator|+
name|RE
operator|.
name|Offset
decl_stmt|;
name|uint64_t
name|PCRelVal
init|=
operator|(
operator|(
name|Value
operator|+
name|RE
operator|.
name|Addend
operator|)
operator|&
operator|(
operator|-
literal|4096
operator|)
operator|)
operator|-
operator|(
name|FinalAddress
operator|&
operator|(
operator|-
literal|4096
operator|)
operator|)
decl_stmt|;
comment|// Check that the value fits into 21 bits (+ 12 lower bits).
name|assert
argument_list|(
name|isInt
operator|<
literal|33
operator|>
operator|(
name|PCRelVal
operator|)
operator|&&
literal|"Invalid page reloc value!"
argument_list|)
expr_stmt|;
comment|// Insert the value into the instruction.
name|uint32_t
name|ImmLoValue
init|=
call|(
name|uint32_t
call|)
argument_list|(
name|PCRelVal
operator|<<
literal|17
argument_list|)
operator|&
literal|0x60000000
decl_stmt|;
name|uint32_t
name|ImmHiValue
init|=
call|(
name|uint32_t
call|)
argument_list|(
name|PCRelVal
operator|>>
literal|9
argument_list|)
operator|&
literal|0x00FFFFE0
decl_stmt|;
operator|*
name|p
operator|=
operator|(
operator|*
name|p
operator|&
literal|0x9F00001F
operator|)
operator||
name|ImmHiValue
operator||
name|ImmLoValue
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_GOT_LOAD_PAGEOFF12
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_PAGEOFF12
case|:
block|{
name|assert
argument_list|(
operator|!
name|RE
operator|.
name|IsPCRel
operator|&&
literal|"PCRel and ARM64_RELOC_PAGEOFF21 not supported"
argument_list|)
expr_stmt|;
comment|// Mask the value into the target address. We know instructions are
comment|// 32-bit aligned, so we can do it all at once.
name|uint32_t
modifier|*
name|p
init|=
operator|(
name|uint32_t
operator|*
operator|)
name|LocalAddress
decl_stmt|;
comment|// Check if the addend is encoded in the instruction.
name|uint32_t
name|EncodedAddend
init|=
operator|*
name|p
operator|&
literal|0x003FFC00
decl_stmt|;
if|if
condition|(
name|EncodedAddend
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|RE
operator|.
name|Addend
operator|==
literal|0
condition|)
name|llvm_unreachable
argument_list|(
literal|"adrp instruction has embedded addend."
argument_list|)
expr_stmt|;
else|else
name|llvm_unreachable
argument_list|(
literal|"adrp instruction has embedded addend and"
literal|"ARM64_RELOC_ADDEND."
argument_list|)
expr_stmt|;
block|}
comment|// Add the offset from the symbol.
name|Value
operator|+=
name|RE
operator|.
name|Addend
expr_stmt|;
comment|// Mask out the page address and only use the lower 12 bits.
name|Value
operator|&=
literal|0xFFF
expr_stmt|;
comment|// Check which instruction we are updating to obtain the implicit shift
comment|// factor from LDR/STR instructions.
if|if
condition|(
operator|*
name|p
operator|&
literal|0x08000000
condition|)
block|{
name|uint32_t
name|ImplicitShift
init|=
operator|(
operator|(
operator|*
name|p
operator|>>
literal|30
operator|)
operator|&
literal|0x3
operator|)
decl_stmt|;
switch|switch
condition|(
name|ImplicitShift
condition|)
block|{
case|case
literal|0
case|:
comment|// Check if this a vector op.
if|if
condition|(
operator|(
operator|*
name|p
operator|&
literal|0x04800000
operator|)
operator|==
literal|0x04800000
condition|)
block|{
name|ImplicitShift
operator|=
literal|4
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
name|Value
operator|&
literal|0xF
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"128-bit LDR/STR not 16-byte aligned."
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
name|assert
argument_list|(
operator|(
operator|(
name|Value
operator|&
literal|0x1
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"16-bit LDR/STR not 2-byte aligned."
argument_list|)
expr_stmt|;
case|case
literal|2
case|:
name|assert
argument_list|(
operator|(
operator|(
name|Value
operator|&
literal|0x3
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"32-bit LDR/STR not 4-byte aligned."
argument_list|)
expr_stmt|;
case|case
literal|3
case|:
name|assert
argument_list|(
operator|(
operator|(
name|Value
operator|&
literal|0x7
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"64-bit LDR/STR not 8-byte aligned."
argument_list|)
expr_stmt|;
block|}
comment|// Compensate for implicit shift.
name|Value
operator|>>=
name|ImplicitShift
expr_stmt|;
block|}
comment|// Insert the value into the instruction.
operator|*
name|p
operator|=
operator|(
operator|*
name|p
operator|&
literal|0xFFC003FF
operator|)
operator||
operator|(
call|(
name|uint32_t
call|)
argument_list|(
name|Value
operator|<<
literal|10
argument_list|)
operator|&
literal|0x003FFC00
operator|)
expr_stmt|;
break|break;
block|}
case|case
name|MachO
operator|::
name|ARM64_RELOC_SUBTRACTOR
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_POINTER_TO_GOT
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_TLVP_LOAD_PAGE21
case|:
case|case
name|MachO
operator|::
name|ARM64_RELOC_TLVP_LOAD_PAGEOFF12
case|:
name|llvm_unreachable
argument_list|(
literal|"Relocation type not implemented yet!"
argument_list|)
expr_stmt|;
case|case
name|MachO
operator|::
name|ARM64_RELOC_ADDEND
case|:
name|llvm_unreachable
argument_list|(
literal|"ARM64_RELOC_ADDEND should have been handeled by "
literal|"processRelocationRef!"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|finalizeSection
parameter_list|(
name|ObjectImage
modifier|&
name|ObjImg
parameter_list|,
name|unsigned
name|SectionID
parameter_list|,
specifier|const
name|SectionRef
modifier|&
name|Section
parameter_list|)
block|{}
end_function

begin_label
name|private
label|:
end_label

begin_function
name|void
name|processGOTRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|RelocationValueRef
modifier|&
name|Value
parameter_list|,
name|StubMap
modifier|&
name|Stubs
parameter_list|)
block|{
name|assert
argument_list|(
name|RE
operator|.
name|Size
operator|==
literal|2
argument_list|)
expr_stmt|;
name|SectionEntry
modifier|&
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|StubMap
operator|::
name|const_iterator
name|i
operator|=
name|Stubs
operator|.
name|find
argument_list|(
name|Value
argument_list|)
expr_stmt|;
name|uint8_t
modifier|*
name|Addr
decl_stmt|;
if|if
condition|(
name|i
operator|!=
name|Stubs
operator|.
name|end
argument_list|()
condition|)
name|Addr
operator|=
name|Section
operator|.
name|Address
operator|+
name|i
operator|->
name|second
expr_stmt|;
else|else
block|{
comment|// FIXME: There must be a better way to do this then to check and fix the
comment|// alignment every time!!!
name|uintptr_t
name|BaseAddress
init|=
name|uintptr_t
argument_list|(
name|Section
operator|.
name|Address
argument_list|)
decl_stmt|;
name|uintptr_t
name|StubAlignment
init|=
name|getStubAlignment
argument_list|()
decl_stmt|;
name|uintptr_t
name|StubAddress
init|=
operator|(
name|BaseAddress
operator|+
name|Section
operator|.
name|StubOffset
operator|+
name|StubAlignment
operator|-
literal|1
operator|)
operator|&
operator|-
name|StubAlignment
decl_stmt|;
name|unsigned
name|StubOffset
init|=
name|StubAddress
operator|-
name|BaseAddress
decl_stmt|;
name|Stubs
index|[
name|Value
index|]
operator|=
name|StubOffset
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
name|StubAddress
operator|%
name|getStubAlignment
argument_list|()
operator|)
operator|==
literal|0
operator|)
operator|&&
literal|"GOT entry not aligned"
argument_list|)
expr_stmt|;
name|RelocationEntry
name|GOTRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|StubOffset
argument_list|,
name|MachO
operator|::
name|ARM64_RELOC_UNSIGNED
argument_list|,
name|Value
operator|.
name|Addend
argument_list|,
comment|/*IsPCRel=*/
name|false
argument_list|,
comment|/*Size=*/
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|Value
operator|.
name|SymbolName
condition|)
name|addRelocationForSymbol
argument_list|(
name|GOTRE
argument_list|,
name|Value
operator|.
name|SymbolName
argument_list|)
expr_stmt|;
else|else
name|addRelocationForSection
argument_list|(
name|GOTRE
argument_list|,
name|Value
operator|.
name|SectionID
argument_list|)
expr_stmt|;
name|Section
operator|.
name|StubOffset
operator|=
name|StubOffset
operator|+
name|getMaxStubSize
argument_list|()
expr_stmt|;
name|Addr
operator|=
operator|(
name|uint8_t
operator|*
operator|)
name|StubAddress
expr_stmt|;
block|}
name|RelocationEntry
name|TargetRE
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|RE
operator|.
name|Offset
argument_list|,
name|RE
operator|.
name|RelType
argument_list|,
comment|/*Addend=*/
literal|0
argument_list|,
name|RE
operator|.
name|IsPCRel
argument_list|,
name|RE
operator|.
name|Size
argument_list|)
decl_stmt|;
name|resolveRelocation
argument_list|(
name|TargetRE
argument_list|,
operator|(
name|uint64_t
operator|)
name|Addr
argument_list|)
expr_stmt|;
block|}
end_function

begin_undef
unit|}; }
undef|#
directive|undef
name|DEBUG_TYPE
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_RUNTIMEDYLDMACHOAARCH64_H
end_comment

end_unit

