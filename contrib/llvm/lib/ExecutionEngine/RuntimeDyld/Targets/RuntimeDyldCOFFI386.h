begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- RuntimeDyldCOFFI386.h --- COFF/X86_64 specific code ---*- C++ --*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// COFF x86 support for MC-JIT runtime dynamic linker.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDCOFFI386_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_EXECUTIONENGINE_RUNTIMEDYLD_TARGETS_RUNTIMEDYLDCOFFI386_H
end_define

begin_include
include|#
directive|include
file|"llvm/Object/COFF.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/COFF.h"
end_include

begin_include
include|#
directive|include
file|"../RuntimeDyldCOFF.h"
end_include

begin_define
define|#
directive|define
name|DEBUG_TYPE
value|"dyld"
end_define

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|RuntimeDyldCOFFI386
range|:
name|public
name|RuntimeDyldCOFF
block|{
name|public
operator|:
name|RuntimeDyldCOFFI386
argument_list|(
name|RuntimeDyld
operator|::
name|MemoryManager
operator|&
name|MM
argument_list|,
name|RuntimeDyld
operator|::
name|SymbolResolver
operator|&
name|Resolver
argument_list|)
operator|:
name|RuntimeDyldCOFF
argument_list|(
argument|MM
argument_list|,
argument|Resolver
argument_list|)
block|{}
name|unsigned
name|getMaxStubSize
argument_list|()
name|override
block|{
return|return
literal|8
return|;
comment|// 2-byte jmp instruction + 32-bit relative address + 2 byte pad
block|}
name|unsigned
name|getStubAlignment
argument_list|()
name|override
block|{
return|return
literal|1
return|;
block|}
name|Expected
operator|<
name|relocation_iterator
operator|>
name|processRelocationRef
argument_list|(
argument|unsigned SectionID
argument_list|,
argument|relocation_iterator RelI
argument_list|,
argument|const ObjectFile&Obj
argument_list|,
argument|ObjSectionToIDMap&ObjSectionToID
argument_list|,
argument|StubMap&Stubs
argument_list|)
name|override
block|{
name|auto
name|Symbol
operator|=
name|RelI
operator|->
name|getSymbol
argument_list|()
block|;
if|if
condition|(
name|Symbol
operator|==
name|Obj
operator|.
name|symbol_end
argument_list|()
condition|)
name|report_fatal_error
argument_list|(
literal|"Unknown symbol in relocation"
argument_list|)
expr_stmt|;
name|Expected
operator|<
name|StringRef
operator|>
name|TargetNameOrErr
operator|=
name|Symbol
operator|->
name|getName
argument_list|()
block|;
if|if
condition|(
operator|!
name|TargetNameOrErr
condition|)
return|return
name|TargetNameOrErr
operator|.
name|takeError
argument_list|()
return|;
name|StringRef
name|TargetName
operator|=
operator|*
name|TargetNameOrErr
decl_stmt|;
name|auto
name|SectionOrErr
init|=
name|Symbol
operator|->
name|getSection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SectionOrErr
condition|)
return|return
name|SectionOrErr
operator|.
name|takeError
argument_list|()
return|;
name|auto
name|Section
init|=
operator|*
name|SectionOrErr
decl_stmt|;
name|uint64_t
name|RelType
init|=
name|RelI
operator|->
name|getType
argument_list|()
decl_stmt|;
name|uint64_t
name|Offset
init|=
name|RelI
operator|->
name|getOffset
argument_list|()
decl_stmt|;
comment|// Determine the Addend used to adjust the relocation value.
name|uint64_t
name|Addend
init|=
literal|0
decl_stmt|;
name|SectionEntry
modifier|&
name|AddendSection
init|=
name|Sections
index|[
name|SectionID
index|]
decl_stmt|;
name|uintptr_t
name|ObjTarget
init|=
name|AddendSection
operator|.
name|getObjAddress
argument_list|()
operator|+
name|Offset
decl_stmt|;
name|uint8_t
modifier|*
name|Displacement
init|=
operator|(
name|uint8_t
operator|*
operator|)
name|ObjTarget
decl_stmt|;
switch|switch
condition|(
name|RelType
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_DIR32
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_DIR32NB
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_SECREL
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_REL32
case|:
block|{
name|Addend
operator|=
name|readBytesUnaligned
argument_list|(
name|Displacement
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|NDEBUG
argument_list|)
name|SmallString
operator|<
literal|32
operator|>
name|RelTypeName
expr_stmt|;
name|RelI
operator|->
name|getTypeName
argument_list|(
name|RelTypeName
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"\t\tIn Section "
operator|<<
name|SectionID
operator|<<
literal|" Offset "
operator|<<
name|Offset
operator|<<
literal|" RelType: "
operator|<<
name|RelTypeName
operator|<<
literal|" TargetName: "
operator|<<
name|TargetName
operator|<<
literal|" Addend "
operator|<<
name|Addend
operator|<<
literal|"\n"
argument_list|)
expr_stmt|;
name|unsigned
name|TargetSectionID
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|Section
operator|==
name|Obj
operator|.
name|section_end
argument_list|()
condition|)
block|{
name|RelocationEntry
name|RE
argument_list|(
name|SectionID
argument_list|,
name|Offset
argument_list|,
name|RelType
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|addRelocationForSymbol
argument_list|(
name|RE
argument_list|,
name|TargetName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|auto
name|TargetSectionIDOrErr
init|=
name|findOrEmitSection
argument_list|(
name|Obj
argument_list|,
operator|*
name|Section
argument_list|,
name|Section
operator|->
name|isText
argument_list|()
argument_list|,
name|ObjSectionToID
argument_list|)
condition|)
name|TargetSectionID
operator|=
operator|*
name|TargetSectionIDOrErr
expr_stmt|;
else|else
return|return
name|TargetSectionIDOrErr
operator|.
name|takeError
argument_list|()
return|;
switch|switch
condition|(
name|RelType
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_ABSOLUTE
case|:
comment|// This relocation is ignored.
break|break;
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_DIR32
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_DIR32NB
case|:
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_REL32
case|:
block|{
name|RelocationEntry
name|RE
init|=
name|RelocationEntry
argument_list|(
name|SectionID
argument_list|,
name|Offset
argument_list|,
name|RelType
argument_list|,
name|Addend
argument_list|,
name|TargetSectionID
argument_list|,
name|getSymbolOffset
argument_list|(
operator|*
name|Symbol
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|TargetSectionID
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_SECTION
case|:
block|{
name|RelocationEntry
name|RE
init|=
name|RelocationEntry
argument_list|(
name|TargetSectionID
argument_list|,
name|Offset
argument_list|,
name|RelType
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|TargetSectionID
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_SECREL
case|:
block|{
name|RelocationEntry
name|RE
init|=
name|RelocationEntry
argument_list|(
name|SectionID
argument_list|,
name|Offset
argument_list|,
name|RelType
argument_list|,
name|getSymbolOffset
argument_list|(
operator|*
name|Symbol
argument_list|)
operator|+
name|Addend
argument_list|)
decl_stmt|;
name|addRelocationForSection
argument_list|(
name|RE
argument_list|,
name|TargetSectionID
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|llvm_unreachable
argument_list|(
literal|"unsupported relocation type"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|++
name|RelI
return|;
block|}
end_decl_stmt

begin_function
name|void
name|resolveRelocation
parameter_list|(
specifier|const
name|RelocationEntry
modifier|&
name|RE
parameter_list|,
name|uint64_t
name|Value
parameter_list|)
function|override
block|{
specifier|const
specifier|auto
name|Section
init|=
name|Sections
index|[
name|RE
operator|.
name|SectionID
index|]
decl_stmt|;
name|uint8_t
modifier|*
name|Target
init|=
name|Section
operator|.
name|getAddressWithOffset
argument_list|(
name|RE
operator|.
name|Offset
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|RE
operator|.
name|RelType
condition|)
block|{
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_ABSOLUTE
case|:
comment|// This relocation is ignored.
break|break;
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_DIR32
case|:
block|{
comment|// The target's 32-bit VA.
name|uint64_t
name|Result
init|=
name|RE
operator|.
name|Sections
operator|.
name|SectionA
operator|==
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
operator|-
literal|1
operator|)
condition|?
name|Value
else|:
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionA
index|]
operator|.
name|getLoadAddressWithOffset
argument_list|(
name|RE
operator|.
name|Addend
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|Result
operator|)
operator|<=
name|INT32_MAX
operator|&&
literal|"relocation overflow"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|Result
operator|)
operator|>=
name|INT32_MIN
operator|&&
literal|"relocation underflow"
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"\t\tOffset: "
operator|<<
name|RE
operator|.
name|Offset
operator|<<
literal|" RelType: IMAGE_REL_I386_DIR32"
operator|<<
literal|" TargetSection: "
operator|<<
name|RE
operator|.
name|Sections
operator|.
name|SectionA
operator|<<
literal|" Value: "
operator|<<
name|format
argument_list|(
literal|"0x%08"
name|PRIx32
argument_list|,
name|Result
argument_list|)
operator|<<
literal|'\n'
argument_list|)
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|Result
argument_list|,
name|Target
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_DIR32NB
case|:
block|{
comment|// The target's 32-bit RVA.
comment|// NOTE: use Section[0].getLoadAddress() as an approximation of ImageBase
name|uint64_t
name|Result
init|=
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionA
index|]
operator|.
name|getLoadAddressWithOffset
argument_list|(
name|RE
operator|.
name|Addend
argument_list|)
operator|-
name|Sections
index|[
literal|0
index|]
operator|.
name|getLoadAddress
argument_list|()
decl_stmt|;
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|Result
operator|)
operator|<=
name|INT32_MAX
operator|&&
literal|"relocation overflow"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|Result
operator|)
operator|>=
name|INT32_MIN
operator|&&
literal|"relocation underflow"
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"\t\tOffset: "
operator|<<
name|RE
operator|.
name|Offset
operator|<<
literal|" RelType: IMAGE_REL_I386_DIR32NB"
operator|<<
literal|" TargetSection: "
operator|<<
name|RE
operator|.
name|Sections
operator|.
name|SectionA
operator|<<
literal|" Value: "
operator|<<
name|format
argument_list|(
literal|"0x%08"
name|PRIx32
argument_list|,
name|Result
argument_list|)
operator|<<
literal|'\n'
argument_list|)
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|Result
argument_list|,
name|Target
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_REL32
case|:
block|{
comment|// 32-bit relative displacement to the target.
name|uint64_t
name|Result
init|=
name|RE
operator|.
name|Sections
operator|.
name|SectionA
operator|==
name|static_cast
operator|<
name|uint32_t
operator|>
operator|(
operator|-
literal|1
operator|)
condition|?
name|Value
else|:
name|Sections
index|[
name|RE
operator|.
name|Sections
operator|.
name|SectionA
index|]
operator|.
name|getLoadAddress
argument_list|()
decl_stmt|;
name|Result
operator|=
name|Result
operator|-
name|Section
operator|.
name|getLoadAddress
argument_list|()
operator|+
name|RE
operator|.
name|Addend
operator|-
literal|4
operator|-
name|RE
operator|.
name|Offset
expr_stmt|;
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|Result
operator|)
operator|<=
name|INT32_MAX
operator|&&
literal|"relocation overflow"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|Result
operator|)
operator|>=
name|INT32_MIN
operator|&&
literal|"relocation underflow"
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"\t\tOffset: "
operator|<<
name|RE
operator|.
name|Offset
operator|<<
literal|" RelType: IMAGE_REL_I386_REL32"
operator|<<
literal|" TargetSection: "
operator|<<
name|RE
operator|.
name|Sections
operator|.
name|SectionA
operator|<<
literal|" Value: "
operator|<<
name|format
argument_list|(
literal|"0x%08"
name|PRIx32
argument_list|,
name|Result
argument_list|)
operator|<<
literal|'\n'
argument_list|)
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|Result
argument_list|,
name|Target
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_SECTION
case|:
comment|// 16-bit section index of the section that contains the target.
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|RE
operator|.
name|SectionID
operator|)
operator|<=
name|INT16_MAX
operator|&&
literal|"relocation overflow"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|RE
operator|.
name|SectionID
operator|)
operator|>=
name|INT16_MIN
operator|&&
literal|"relocation underflow"
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"\t\tOffset: "
operator|<<
name|RE
operator|.
name|Offset
operator|<<
literal|" RelType: IMAGE_REL_I386_SECTION Value: "
operator|<<
name|RE
operator|.
name|SectionID
operator|<<
literal|'\n'
argument_list|)
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|RE
operator|.
name|SectionID
argument_list|,
name|Target
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
name|COFF
operator|::
name|IMAGE_REL_I386_SECREL
case|:
comment|// 32-bit offset of the target from the beginning of its section.
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|RE
operator|.
name|Addend
operator|)
operator|<=
name|INT32_MAX
operator|&&
literal|"relocation overflow"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|static_cast
operator|<
name|int32_t
operator|>
operator|(
name|RE
operator|.
name|Addend
operator|)
operator|>=
name|INT32_MIN
operator|&&
literal|"relocation underflow"
argument_list|)
expr_stmt|;
name|DEBUG
argument_list|(
name|dbgs
argument_list|()
operator|<<
literal|"\t\tOffset: "
operator|<<
name|RE
operator|.
name|Offset
operator|<<
literal|" RelType: IMAGE_REL_I386_SECREL Value: "
operator|<<
name|RE
operator|.
name|Addend
operator|<<
literal|'\n'
argument_list|)
expr_stmt|;
name|writeBytesUnaligned
argument_list|(
name|RE
operator|.
name|Addend
argument_list|,
name|Target
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
default|default:
name|llvm_unreachable
argument_list|(
literal|"unsupported relocation type"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|registerEHFrames
parameter_list|()
function|override
block|{}
end_function

begin_function
name|void
name|deregisterEHFrames
parameter_list|()
function|override
block|{}
end_function

begin_endif
unit|};  }
endif|#
directive|endif
end_endif

end_unit

