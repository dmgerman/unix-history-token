begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=== ARMCallingConv.h - ARM Custom Calling Convention Routines -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the custom routines for the ARM Calling Convention that
end_comment

begin_comment
comment|// aren't done by tablegen.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_ARM_ARMCALLINGCONV_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_ARM_ARMCALLINGCONV_H
end_define

begin_include
include|#
directive|include
file|"ARM.h"
end_include

begin_include
include|#
directive|include
file|"ARMBaseInstrInfo.h"
end_include

begin_include
include|#
directive|include
file|"ARMSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/CallingConvLower.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/CallingConv.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetInstrInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// APCS f64 is in register pairs, possibly split to stack
specifier|static
name|bool
name|f64AssignAPCS
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|CCState
operator|&
name|State
argument_list|,
name|bool
name|CanFail
argument_list|)
block|{
specifier|static
specifier|const
name|MCPhysReg
name|RegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R1
block|,
name|ARM
operator|::
name|R2
block|,
name|ARM
operator|::
name|R3
block|}
decl_stmt|;
comment|// Try to get the first register.
if|if
condition|(
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList
argument_list|,
literal|4
argument_list|)
condition|)
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|Reg
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
comment|// For the 2nd half of a v2f64, do not fail.
if|if
condition|(
name|CanFail
condition|)
return|return
name|false
return|;
comment|// Put the whole thing on the stack.
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomMem
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|State
operator|.
name|AllocateStack
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|)
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
comment|// Try to get the second register.
if|if
condition|(
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList
argument_list|,
literal|4
argument_list|)
condition|)
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|Reg
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomMem
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|State
operator|.
name|AllocateStack
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|CC_ARM_APCS_Custom_f64
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
if|if
condition|(
operator|!
name|f64AssignAPCS
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|,
name|true
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|v2f64
operator|&&
operator|!
name|f64AssignAPCS
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
comment|// we handled it
block|}
comment|// AAPCS f64 is in aligned register pairs
specifier|static
name|bool
name|f64AssignAAPCS
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|CCState
operator|&
name|State
argument_list|,
name|bool
name|CanFail
argument_list|)
block|{
specifier|static
specifier|const
name|MCPhysReg
name|HiRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R2
block|}
decl_stmt|;
specifier|static
specifier|const
name|MCPhysReg
name|LoRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R1
block|,
name|ARM
operator|::
name|R3
block|}
decl_stmt|;
specifier|static
specifier|const
name|MCPhysReg
name|ShadowRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R1
block|}
decl_stmt|;
specifier|static
specifier|const
name|MCPhysReg
name|GPRArgRegs
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R1
block|,
name|ARM
operator|::
name|R2
block|,
name|ARM
operator|::
name|R3
block|}
decl_stmt|;
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|HiRegList
argument_list|,
name|ShadowRegList
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|Reg
operator|==
literal|0
condition|)
block|{
comment|// If we had R3 unallocated only, now we still must to waste it.
name|Reg
operator|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|GPRArgRegs
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|!
name|Reg
operator|||
name|Reg
operator|==
name|ARM
operator|::
name|R3
operator|)
operator|&&
literal|"Wrong GPRs usage for f64"
argument_list|)
expr_stmt|;
comment|// For the 2nd half of a v2f64, do not just fail.
if|if
condition|(
name|CanFail
condition|)
return|return
name|false
return|;
comment|// Put the whole thing on the stack.
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomMem
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|State
operator|.
name|AllocateStack
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|unsigned
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|HiRegList
index|[
name|i
index|]
operator|==
name|Reg
condition|)
break|break;
name|unsigned
name|T
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|LoRegList
index|[
name|i
index|]
argument_list|)
decl_stmt|;
operator|(
name|void
operator|)
name|T
expr_stmt|;
name|assert
argument_list|(
name|T
operator|==
name|LoRegList
index|[
name|i
index|]
operator|&&
literal|"Could not allocate register"
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|Reg
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LoRegList
index|[
name|i
index|]
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|CC_ARM_AAPCS_Custom_f64
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
if|if
condition|(
operator|!
name|f64AssignAAPCS
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|,
name|true
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|v2f64
operator|&&
operator|!
name|f64AssignAAPCS
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
comment|// we handled it
block|}
specifier|static
name|bool
name|f64RetAssign
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
specifier|static
specifier|const
name|MCPhysReg
name|HiRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R2
block|}
decl_stmt|;
specifier|static
specifier|const
name|MCPhysReg
name|LoRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R1
block|,
name|ARM
operator|::
name|R3
block|}
decl_stmt|;
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|HiRegList
argument_list|,
name|LoRegList
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|Reg
operator|==
literal|0
condition|)
return|return
name|false
return|;
comment|// we didn't handle it
name|unsigned
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|HiRegList
index|[
name|i
index|]
operator|==
name|Reg
condition|)
break|break;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|Reg
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LoRegList
index|[
name|i
index|]
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|RetCC_ARM_APCS_Custom_f64
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
if|if
condition|(
operator|!
name|f64RetAssign
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|v2f64
operator|&&
operator|!
name|f64RetAssign
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
comment|// we handled it
block|}
specifier|static
name|bool
name|RetCC_ARM_AAPCS_Custom_f64
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
return|return
name|RetCC_ARM_APCS_Custom_f64
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|ArgFlags
argument_list|,
name|State
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|uint16_t
name|RRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R1
block|,
name|ARM
operator|::
name|R2
block|,
name|ARM
operator|::
name|R3
block|}
decl_stmt|;
specifier|static
specifier|const
name|uint16_t
name|SRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|S0
block|,
name|ARM
operator|::
name|S1
block|,
name|ARM
operator|::
name|S2
block|,
name|ARM
operator|::
name|S3
block|,
name|ARM
operator|::
name|S4
block|,
name|ARM
operator|::
name|S5
block|,
name|ARM
operator|::
name|S6
block|,
name|ARM
operator|::
name|S7
block|,
name|ARM
operator|::
name|S8
block|,
name|ARM
operator|::
name|S9
block|,
name|ARM
operator|::
name|S10
block|,
name|ARM
operator|::
name|S11
block|,
name|ARM
operator|::
name|S12
block|,
name|ARM
operator|::
name|S13
block|,
name|ARM
operator|::
name|S14
block|,
name|ARM
operator|::
name|S15
block|}
decl_stmt|;
specifier|static
specifier|const
name|uint16_t
name|DRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|D0
block|,
name|ARM
operator|::
name|D1
block|,
name|ARM
operator|::
name|D2
block|,
name|ARM
operator|::
name|D3
block|,
name|ARM
operator|::
name|D4
block|,
name|ARM
operator|::
name|D5
block|,
name|ARM
operator|::
name|D6
block|,
name|ARM
operator|::
name|D7
block|}
decl_stmt|;
specifier|static
specifier|const
name|uint16_t
name|QRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|Q0
block|,
name|ARM
operator|::
name|Q1
block|,
name|ARM
operator|::
name|Q2
block|,
name|ARM
operator|::
name|Q3
block|}
decl_stmt|;
comment|// Allocate part of an AAPCS HFA or HVA. We assume that each member of the HA
comment|// has InConsecutiveRegs set, and that the last member also has
comment|// InConsecutiveRegsLast set. We must process all members of the HA before
comment|// we can allocate it, as we need to know the total number of registers that
comment|// will be needed in order to (attempt to) allocate a contiguous block.
specifier|static
name|bool
name|CC_ARM_AAPCS_Custom_Aggregate
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
name|SmallVectorImpl
operator|<
name|CCValAssign
operator|>
operator|&
name|PendingMembers
operator|=
name|State
operator|.
name|getPendingLocs
argument_list|()
expr_stmt|;
comment|// AAPCS HFAs must have 1-4 elements, all of the same type
if|if
condition|(
name|PendingMembers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|assert
argument_list|(
name|PendingMembers
index|[
literal|0
index|]
operator|.
name|getLocVT
argument_list|()
operator|==
name|LocVT
argument_list|)
expr_stmt|;
comment|// Add the argument to the list to be allocated once we know the size of the
comment|// aggregate. Store the type's required alignmnent as extra info for later: in
comment|// the [N x i64] case all trace has been removed by the time we actually get
comment|// to do allocation.
name|PendingMembers
operator|.
name|push_back
argument_list|(
name|CCValAssign
operator|::
name|getPending
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|ArgFlags
operator|.
name|getOrigAlign
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ArgFlags
operator|.
name|isInConsecutiveRegsLast
argument_list|()
condition|)
return|return
name|true
return|;
comment|// Try to allocate a contiguous block of registers, each of the correct
comment|// size to hold one member.
name|unsigned
name|Align
init|=
name|std
operator|::
name|min
argument_list|(
name|PendingMembers
index|[
literal|0
index|]
operator|.
name|getExtraInfo
argument_list|()
argument_list|,
literal|8U
argument_list|)
decl_stmt|;
name|ArrayRef
operator|<
name|uint16_t
operator|>
name|RegList
expr_stmt|;
switch|switch
condition|(
name|LocVT
operator|.
name|SimpleTy
condition|)
block|{
case|case
name|MVT
operator|::
name|i32
case|:
block|{
name|RegList
operator|=
name|RRegList
expr_stmt|;
name|unsigned
name|RegIdx
init|=
name|State
operator|.
name|getFirstUnallocated
argument_list|(
name|RegList
operator|.
name|data
argument_list|()
argument_list|,
name|RegList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|// First consume all registers that would give an unaligned object. Whether
comment|// we go on stack or in regs, no-one will be using them in future.
name|unsigned
name|RegAlign
init|=
name|RoundUpToAlignment
argument_list|(
name|Align
argument_list|,
literal|4
argument_list|)
operator|/
literal|4
decl_stmt|;
while|while
condition|(
name|RegIdx
operator|%
name|RegAlign
operator|!=
literal|0
operator|&&
name|RegIdx
operator|<
name|RegList
operator|.
name|size
argument_list|()
condition|)
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList
index|[
name|RegIdx
operator|++
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MVT
operator|::
name|f32
case|:
name|RegList
operator|=
name|SRegList
expr_stmt|;
break|break;
case|case
name|MVT
operator|::
name|f64
case|:
name|RegList
operator|=
name|DRegList
expr_stmt|;
break|break;
case|case
name|MVT
operator|::
name|v2f64
case|:
name|RegList
operator|=
name|QRegList
expr_stmt|;
break|break;
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unexpected member type for block aggregate"
argument_list|)
expr_stmt|;
break|break;
block|}
name|unsigned
name|RegResult
init|=
name|State
operator|.
name|AllocateRegBlock
argument_list|(
name|RegList
argument_list|,
name|PendingMembers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|RegResult
condition|)
block|{
for|for
control|(
name|SmallVectorImpl
operator|<
name|CCValAssign
operator|>
operator|::
name|iterator
name|It
operator|=
name|PendingMembers
operator|.
name|begin
argument_list|()
init|;
name|It
operator|!=
name|PendingMembers
operator|.
name|end
argument_list|()
condition|;
operator|++
name|It
control|)
block|{
name|It
operator|->
name|convertToReg
argument_list|(
name|RegResult
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
operator|*
name|It
argument_list|)
expr_stmt|;
operator|++
name|RegResult
expr_stmt|;
block|}
name|PendingMembers
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
comment|// Register allocation failed, we'll be needing the stack
name|unsigned
name|Size
init|=
name|LocVT
operator|.
name|getSizeInBits
argument_list|()
operator|/
literal|8
decl_stmt|;
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|i32
operator|&&
name|State
operator|.
name|getNextStackOffset
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// If nothing else has used the stack until this point, a non-HFA aggregate
comment|// can be split between regs and stack.
name|unsigned
name|RegIdx
init|=
name|State
operator|.
name|getFirstUnallocated
argument_list|(
name|RegList
operator|.
name|data
argument_list|()
argument_list|,
name|RegList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|auto
operator|&
name|It
operator|:
name|PendingMembers
control|)
block|{
if|if
condition|(
name|RegIdx
operator|>=
name|RegList
operator|.
name|size
argument_list|()
condition|)
name|It
operator|.
name|convertToMem
argument_list|(
name|State
operator|.
name|AllocateStack
argument_list|(
name|Size
argument_list|,
name|Size
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|It
operator|.
name|convertToReg
argument_list|(
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList
index|[
name|RegIdx
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|It
argument_list|)
expr_stmt|;
block|}
name|PendingMembers
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
elseif|else
if|if
condition|(
name|LocVT
operator|!=
name|MVT
operator|::
name|i32
condition|)
name|RegList
operator|=
name|SRegList
expr_stmt|;
comment|// Mark all regs as unavailable (AAPCS rule C.2.vfp for VFP, C.6 for core)
for|for
control|(
name|auto
name|Reg
range|:
name|RegList
control|)
name|State
operator|.
name|AllocateReg
argument_list|(
name|Reg
argument_list|)
expr_stmt|;
for|for
control|(
name|auto
operator|&
name|It
operator|:
name|PendingMembers
control|)
block|{
name|It
operator|.
name|convertToMem
argument_list|(
name|State
operator|.
name|AllocateStack
argument_list|(
name|Size
argument_list|,
name|Align
argument_list|)
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|It
argument_list|)
expr_stmt|;
comment|// After the first item has been allocated, the rest are packed as tightly
comment|// as possible. (E.g. an incoming i64 would have starting Align of 8, but
comment|// we'll be allocating a bunch of i32 slots).
name|Align
operator|=
name|Size
expr_stmt|;
block|}
comment|// All pending members have now been allocated
name|PendingMembers
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// This will be allocated by the last member of the aggregate
return|return
name|true
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

