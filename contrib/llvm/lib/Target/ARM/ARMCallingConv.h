begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=== ARMCallingConv.h - ARM Custom Calling Convention Routines -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the custom routines for the ARM Calling Convention that
end_comment

begin_comment
comment|// aren't done by tablegen.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ARMCALLINGCONV_H
end_ifndef

begin_define
define|#
directive|define
name|ARMCALLINGCONV_H
end_define

begin_include
include|#
directive|include
file|"ARM.h"
end_include

begin_include
include|#
directive|include
file|"ARMBaseInstrInfo.h"
end_include

begin_include
include|#
directive|include
file|"ARMSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/CallingConvLower.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/CallingConv.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetInstrInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// APCS f64 is in register pairs, possibly split to stack
specifier|static
name|bool
name|f64AssignAPCS
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|CCState
operator|&
name|State
argument_list|,
name|bool
name|CanFail
argument_list|)
block|{
specifier|static
specifier|const
name|uint16_t
name|RegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R1
block|,
name|ARM
operator|::
name|R2
block|,
name|ARM
operator|::
name|R3
block|}
decl_stmt|;
comment|// Try to get the first register.
if|if
condition|(
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList
argument_list|,
literal|4
argument_list|)
condition|)
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|Reg
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
else|else
block|{
comment|// For the 2nd half of a v2f64, do not fail.
if|if
condition|(
name|CanFail
condition|)
return|return
name|false
return|;
comment|// Put the whole thing on the stack.
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomMem
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|State
operator|.
name|AllocateStack
argument_list|(
literal|8
argument_list|,
literal|4
argument_list|)
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
comment|// Try to get the second register.
if|if
condition|(
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList
argument_list|,
literal|4
argument_list|)
condition|)
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|Reg
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomMem
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|State
operator|.
name|AllocateStack
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|CC_ARM_APCS_Custom_f64
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
if|if
condition|(
operator|!
name|f64AssignAPCS
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|,
name|true
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|v2f64
operator|&&
operator|!
name|f64AssignAPCS
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
comment|// we handled it
block|}
comment|// AAPCS f64 is in aligned register pairs
specifier|static
name|bool
name|f64AssignAAPCS
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|CCState
operator|&
name|State
argument_list|,
name|bool
name|CanFail
argument_list|)
block|{
specifier|static
specifier|const
name|uint16_t
name|HiRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R2
block|}
decl_stmt|;
specifier|static
specifier|const
name|uint16_t
name|LoRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R1
block|,
name|ARM
operator|::
name|R3
block|}
decl_stmt|;
specifier|static
specifier|const
name|uint16_t
name|ShadowRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R1
block|}
decl_stmt|;
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|HiRegList
argument_list|,
name|ShadowRegList
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|Reg
operator|==
literal|0
condition|)
block|{
comment|// For the 2nd half of a v2f64, do not just fail.
if|if
condition|(
name|CanFail
condition|)
return|return
name|false
return|;
comment|// Put the whole thing on the stack.
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomMem
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|State
operator|.
name|AllocateStack
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
name|unsigned
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|HiRegList
index|[
name|i
index|]
operator|==
name|Reg
condition|)
break|break;
name|unsigned
name|T
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|LoRegList
index|[
name|i
index|]
argument_list|)
decl_stmt|;
operator|(
name|void
operator|)
name|T
expr_stmt|;
name|assert
argument_list|(
name|T
operator|==
name|LoRegList
index|[
name|i
index|]
operator|&&
literal|"Could not allocate register"
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|Reg
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LoRegList
index|[
name|i
index|]
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|CC_ARM_AAPCS_Custom_f64
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
if|if
condition|(
operator|!
name|f64AssignAAPCS
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|,
name|true
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|v2f64
operator|&&
operator|!
name|f64AssignAAPCS
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|,
name|false
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
comment|// we handled it
block|}
specifier|static
name|bool
name|f64RetAssign
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
specifier|static
specifier|const
name|uint16_t
name|HiRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R0
block|,
name|ARM
operator|::
name|R2
block|}
decl_stmt|;
specifier|static
specifier|const
name|uint16_t
name|LoRegList
index|[]
init|=
block|{
name|ARM
operator|::
name|R1
block|,
name|ARM
operator|::
name|R3
block|}
decl_stmt|;
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|HiRegList
argument_list|,
name|LoRegList
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|Reg
operator|==
literal|0
condition|)
return|return
name|false
return|;
comment|// we didn't handle it
name|unsigned
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|HiRegList
index|[
name|i
index|]
operator|==
name|Reg
condition|)
break|break;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|Reg
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getCustomReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LoRegList
index|[
name|i
index|]
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
specifier|static
name|bool
name|RetCC_ARM_APCS_Custom_f64
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
if|if
condition|(
operator|!
name|f64RetAssign
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|v2f64
operator|&&
operator|!
name|f64RetAssign
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|State
argument_list|)
condition|)
return|return
name|false
return|;
return|return
name|true
return|;
comment|// we handled it
block|}
specifier|static
name|bool
name|RetCC_ARM_AAPCS_Custom_f64
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
return|return
name|RetCC_ARM_APCS_Custom_f64
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|,
name|ArgFlags
argument_list|,
name|State
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

