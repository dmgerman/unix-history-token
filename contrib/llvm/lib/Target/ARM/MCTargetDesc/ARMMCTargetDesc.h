begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ARMMCTargetDesc.h - ARM Target Descriptions -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file provides ARM specific target descriptions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_ARM_MCTARGETDESC_ARMMCTARGETDESC_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_ARM_MCTARGETDESC_ARMMCTARGETDESC_H
end_define

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|formatted_raw_ostream
decl_stmt|;
name|class
name|MCAsmBackend
decl_stmt|;
name|class
name|MCCodeEmitter
decl_stmt|;
name|class
name|MCContext
decl_stmt|;
name|class
name|MCInstrInfo
decl_stmt|;
name|class
name|MCInstPrinter
decl_stmt|;
name|class
name|MCObjectWriter
decl_stmt|;
name|class
name|MCRegisterInfo
decl_stmt|;
name|class
name|MCSubtargetInfo
decl_stmt|;
name|class
name|MCStreamer
decl_stmt|;
name|class
name|MCTargetOptions
decl_stmt|;
name|class
name|MCRelocationInfo
decl_stmt|;
name|class
name|MCTargetStreamer
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|class
name|Target
decl_stmt|;
name|class
name|Triple
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|raw_pwrite_stream
decl_stmt|;
name|Target
modifier|&
name|getTheARMLETarget
parameter_list|()
function_decl|;
name|Target
modifier|&
name|getTheThumbLETarget
parameter_list|()
function_decl|;
name|Target
modifier|&
name|getTheARMBETarget
parameter_list|()
function_decl|;
name|Target
modifier|&
name|getTheThumbBETarget
parameter_list|()
function_decl|;
name|namespace
name|ARM_MC
block|{
name|std
operator|::
name|string
name|ParseARMTriple
argument_list|(
argument|const Triple&TT
argument_list|,
argument|StringRef CPU
argument_list|)
expr_stmt|;
comment|/// Create a ARM MCSubtargetInfo instance. This is exposed so Asm parser, etc.
comment|/// do not need to go through TargetRegistry.
name|MCSubtargetInfo
modifier|*
name|createARMMCSubtargetInfo
parameter_list|(
specifier|const
name|Triple
modifier|&
name|TT
parameter_list|,
name|StringRef
name|CPU
parameter_list|,
name|StringRef
name|FS
parameter_list|)
function_decl|;
block|}
name|MCTargetStreamer
modifier|*
name|createARMNullTargetStreamer
parameter_list|(
name|MCStreamer
modifier|&
name|S
parameter_list|)
function_decl|;
name|MCTargetStreamer
modifier|*
name|createARMTargetAsmStreamer
parameter_list|(
name|MCStreamer
modifier|&
name|S
parameter_list|,
name|formatted_raw_ostream
modifier|&
name|OS
parameter_list|,
name|MCInstPrinter
modifier|*
name|InstPrint
parameter_list|,
name|bool
name|isVerboseAsm
parameter_list|)
function_decl|;
name|MCTargetStreamer
modifier|*
name|createARMObjectTargetStreamer
parameter_list|(
name|MCStreamer
modifier|&
name|S
parameter_list|,
specifier|const
name|MCSubtargetInfo
modifier|&
name|STI
parameter_list|)
function_decl|;
name|MCCodeEmitter
modifier|*
name|createARMLEMCCodeEmitter
parameter_list|(
specifier|const
name|MCInstrInfo
modifier|&
name|MCII
parameter_list|,
specifier|const
name|MCRegisterInfo
modifier|&
name|MRI
parameter_list|,
name|MCContext
modifier|&
name|Ctx
parameter_list|)
function_decl|;
name|MCCodeEmitter
modifier|*
name|createARMBEMCCodeEmitter
parameter_list|(
specifier|const
name|MCInstrInfo
modifier|&
name|MCII
parameter_list|,
specifier|const
name|MCRegisterInfo
modifier|&
name|MRI
parameter_list|,
name|MCContext
modifier|&
name|Ctx
parameter_list|)
function_decl|;
name|MCAsmBackend
modifier|*
name|createARMAsmBackend
parameter_list|(
specifier|const
name|Target
modifier|&
name|T
parameter_list|,
specifier|const
name|MCRegisterInfo
modifier|&
name|MRI
parameter_list|,
specifier|const
name|Triple
modifier|&
name|TT
parameter_list|,
name|StringRef
name|CPU
parameter_list|,
specifier|const
name|MCTargetOptions
modifier|&
name|Options
parameter_list|,
name|bool
name|IsLittleEndian
parameter_list|)
function_decl|;
name|MCAsmBackend
modifier|*
name|createARMLEAsmBackend
parameter_list|(
specifier|const
name|Target
modifier|&
name|T
parameter_list|,
specifier|const
name|MCRegisterInfo
modifier|&
name|MRI
parameter_list|,
specifier|const
name|Triple
modifier|&
name|TT
parameter_list|,
name|StringRef
name|CPU
parameter_list|,
specifier|const
name|MCTargetOptions
modifier|&
name|Options
parameter_list|)
function_decl|;
name|MCAsmBackend
modifier|*
name|createARMBEAsmBackend
parameter_list|(
specifier|const
name|Target
modifier|&
name|T
parameter_list|,
specifier|const
name|MCRegisterInfo
modifier|&
name|MRI
parameter_list|,
specifier|const
name|Triple
modifier|&
name|TT
parameter_list|,
name|StringRef
name|CPU
parameter_list|,
specifier|const
name|MCTargetOptions
modifier|&
name|Options
parameter_list|)
function_decl|;
name|MCAsmBackend
modifier|*
name|createThumbLEAsmBackend
parameter_list|(
specifier|const
name|Target
modifier|&
name|T
parameter_list|,
specifier|const
name|MCRegisterInfo
modifier|&
name|MRI
parameter_list|,
specifier|const
name|Triple
modifier|&
name|TT
parameter_list|,
name|StringRef
name|CPU
parameter_list|,
specifier|const
name|MCTargetOptions
modifier|&
name|Options
parameter_list|)
function_decl|;
name|MCAsmBackend
modifier|*
name|createThumbBEAsmBackend
parameter_list|(
specifier|const
name|Target
modifier|&
name|T
parameter_list|,
specifier|const
name|MCRegisterInfo
modifier|&
name|MRI
parameter_list|,
specifier|const
name|Triple
modifier|&
name|TT
parameter_list|,
name|StringRef
name|CPU
parameter_list|,
specifier|const
name|MCTargetOptions
modifier|&
name|Options
parameter_list|)
function_decl|;
comment|// Construct a PE/COFF machine code streamer which will generate a PE/COFF
comment|// object file.
name|MCStreamer
modifier|*
name|createARMWinCOFFStreamer
parameter_list|(
name|MCContext
modifier|&
name|Context
parameter_list|,
name|MCAsmBackend
modifier|&
name|MAB
parameter_list|,
name|raw_pwrite_stream
modifier|&
name|OS
parameter_list|,
name|MCCodeEmitter
modifier|*
name|Emitter
parameter_list|,
name|bool
name|RelaxAll
parameter_list|,
name|bool
name|IncrementalLinkerCompatible
parameter_list|)
function_decl|;
comment|/// Construct an ELF Mach-O object writer.
name|MCObjectWriter
modifier|*
name|createARMELFObjectWriter
parameter_list|(
name|raw_pwrite_stream
modifier|&
name|OS
parameter_list|,
name|uint8_t
name|OSABI
parameter_list|,
name|bool
name|IsLittleEndian
parameter_list|)
function_decl|;
comment|/// Construct an ARM Mach-O object writer.
name|MCObjectWriter
modifier|*
name|createARMMachObjectWriter
parameter_list|(
name|raw_pwrite_stream
modifier|&
name|OS
parameter_list|,
name|bool
name|Is64Bit
parameter_list|,
name|uint32_t
name|CPUType
parameter_list|,
name|uint32_t
name|CPUSubtype
parameter_list|)
function_decl|;
comment|/// Construct an ARM PE/COFF object writer.
name|MCObjectWriter
modifier|*
name|createARMWinCOFFObjectWriter
parameter_list|(
name|raw_pwrite_stream
modifier|&
name|OS
parameter_list|,
name|bool
name|Is64Bit
parameter_list|)
function_decl|;
comment|/// Construct ARM Mach-O relocation info.
name|MCRelocationInfo
modifier|*
name|createARMMachORelocationInfo
parameter_list|(
name|MCContext
modifier|&
name|Ctx
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_comment
comment|// Defines symbolic names for ARM registers.  This defines a mapping from
end_comment

begin_comment
comment|// register name to register number.
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|GET_REGINFO_ENUM
end_define

begin_include
include|#
directive|include
file|"ARMGenRegisterInfo.inc"
end_include

begin_comment
comment|// Defines symbolic names for the ARM instructions.
end_comment

begin_comment
comment|//
end_comment

begin_define
define|#
directive|define
name|GET_INSTRINFO_ENUM
end_define

begin_include
include|#
directive|include
file|"ARMGenInstrInfo.inc"
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_ENUM
end_define

begin_include
include|#
directive|include
file|"ARMGenSubtargetInfo.inc"
end_include

begin_endif
endif|#
directive|endif
end_endif

end_unit

