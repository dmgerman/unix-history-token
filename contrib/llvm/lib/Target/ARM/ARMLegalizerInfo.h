begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- ARMLegalizerInfo ------------------------------------------*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file declares the targeting of the Machinelegalizer class for ARM.
end_comment

begin_comment
comment|/// \todo This should be generated by TableGen.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_ARM_ARMMACHINELEGALIZER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_ARM_ARMMACHINELEGALIZER_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/IndexedMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/GlobalISel/LegalizerInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/RuntimeLibcalls.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Instructions.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|ARMSubtarget
decl_stmt|;
comment|/// This class provides the information for the target register banks.
name|class
name|ARMLegalizerInfo
range|:
name|public
name|LegalizerInfo
block|{
name|public
operator|:
name|ARMLegalizerInfo
argument_list|(
specifier|const
name|ARMSubtarget
operator|&
name|ST
argument_list|)
block|;
name|bool
name|legalizeCustom
argument_list|(
argument|MachineInstr&MI
argument_list|,
argument|MachineRegisterInfo&MRI
argument_list|,
argument|MachineIRBuilder&MIRBuilder
argument_list|)
specifier|const
name|override
block|;
name|private
operator|:
name|void
name|setFCmpLibcallsGNU
argument_list|()
block|;
name|void
name|setFCmpLibcallsAEABI
argument_list|()
block|;    struct
name|FCmpLibcallInfo
block|{
comment|// Which libcall this is.
name|RTLIB
operator|::
name|Libcall
name|LibcallID
block|;
comment|// The predicate to be used when comparing the value returned by the
comment|// function with a relevant constant (currently hard-coded to zero). This is
comment|// necessary because often the libcall will return e.g. a value greater than
comment|// 0 to represent 'true' and anything negative to represent 'false', or
comment|// maybe 0 to represent 'true' and non-zero for 'false'. If no comparison is
comment|// needed, this should be CmpInst::BAD_ICMP_PREDICATE.
name|CmpInst
operator|::
name|Predicate
name|Predicate
block|;   }
block|;
name|using
name|FCmpLibcallsList
operator|=
name|SmallVector
operator|<
name|FCmpLibcallInfo
block|,
literal|2
operator|>
block|;
comment|// Map from each FCmp predicate to the corresponding libcall infos. A FCmp
comment|// instruction may be lowered to one or two libcalls, which is why we need a
comment|// list. If two libcalls are needed, their results will be OR'ed.
name|using
name|FCmpLibcallsMapTy
operator|=
name|IndexedMap
operator|<
name|FCmpLibcallsList
operator|>
block|;
name|FCmpLibcallsMapTy
name|FCmp32Libcalls
block|;
name|FCmpLibcallsMapTy
name|FCmp64Libcalls
block|;
comment|// Get the libcall(s) corresponding to \p Predicate for operands of \p Size
comment|// bits.
name|FCmpLibcallsList
name|getFCmpLibcalls
argument_list|(
argument|CmpInst::Predicate
argument_list|,
argument|unsigned Size
argument_list|)
specifier|const
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

