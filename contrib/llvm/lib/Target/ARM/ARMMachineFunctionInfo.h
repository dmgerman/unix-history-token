begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ARMMachineFuctionInfo.h - ARM machine function info -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares ARM-specific per-machine-function information.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_ARM_ARMMACHINEFUNCTIONINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_ARM_ARMMACHINEFUNCTIONINFO_H
end_define

begin_include
include|#
directive|include
file|"ARMSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetRegisterInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// ARMFunctionInfo - This class is derived from MachineFunctionInfo and
comment|/// contains private ARM-specific information for each MachineFunction.
name|class
name|ARMFunctionInfo
range|:
name|public
name|MachineFunctionInfo
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
comment|/// isThumb - True if this function is compiled under Thumb mode.
comment|/// Used to initialized Align, so must precede it.
name|bool
name|isThumb
block|;
comment|/// hasThumb2 - True if the target architecture supports Thumb2. Do not use
comment|/// to determine if function is compiled under Thumb mode, for that use
comment|/// 'isThumb'.
name|bool
name|hasThumb2
block|;
comment|/// StByValParamsPadding - For parameter that is split between
comment|/// GPRs and memory; while recovering GPRs part, when
comment|/// StackAlignment> 4, and GPRs-part-size mod StackAlignment != 0,
comment|/// we need to insert gap before parameter start address. It allows to
comment|/// "attach" GPR-part to the part that was passed via stack.
name|unsigned
name|StByValParamsPadding
block|;
comment|/// VarArgsRegSaveSize - Size of the register save area for vararg functions.
comment|///
name|unsigned
name|ArgRegsSaveSize
block|;
comment|/// ReturnRegsCount - Number of registers used up in the return.
name|unsigned
name|ReturnRegsCount
block|;
comment|/// HasStackFrame - True if this function has a stack frame. Set by
comment|/// processFunctionBeforeCalleeSavedScan().
name|bool
name|HasStackFrame
block|;
comment|/// RestoreSPFromFP - True if epilogue should restore SP from FP. Set by
comment|/// emitPrologue.
name|bool
name|RestoreSPFromFP
block|;
comment|/// LRSpilledForFarJump - True if the LR register has been for spilled to
comment|/// enable far jump.
name|bool
name|LRSpilledForFarJump
block|;
comment|/// FramePtrSpillOffset - If HasStackFrame, this records the frame pointer
comment|/// spill stack offset.
name|unsigned
name|FramePtrSpillOffset
block|;
comment|/// GPRCS1Offset, GPRCS2Offset, DPRCSOffset - Starting offset of callee saved
comment|/// register spills areas. For Mac OS X:
comment|///
comment|/// GPR callee-saved (1) : r4, r5, r6, r7, lr
comment|/// --------------------------------------------
comment|/// GPR callee-saved (2) : r8, r10, r11
comment|/// --------------------------------------------
comment|/// DPR callee-saved : d8 - d15
comment|///
comment|/// Also see AlignedDPRCSRegs below. Not all D-regs need to go in area 3.
comment|/// Some may be spilled after the stack has been realigned.
name|unsigned
name|GPRCS1Offset
block|;
name|unsigned
name|GPRCS2Offset
block|;
name|unsigned
name|DPRCSOffset
block|;
comment|/// GPRCS1Size, GPRCS2Size, DPRCSSize - Sizes of callee saved register spills
comment|/// areas.
name|unsigned
name|GPRCS1Size
block|;
name|unsigned
name|GPRCS2Size
block|;
name|unsigned
name|DPRCSAlignGapSize
block|;
name|unsigned
name|DPRCSSize
block|;
comment|/// NumAlignedDPRCS2Regs - The number of callee-saved DPRs that are saved in
comment|/// the aligned portion of the stack frame.  This is always a contiguous
comment|/// sequence of D-registers starting from d8.
comment|///
comment|/// We do not keep track of the frame indices used for these registers - they
comment|/// behave like any other frame index in the aligned stack frame.  These
comment|/// registers also aren't included in DPRCSSize above.
name|unsigned
name|NumAlignedDPRCS2Regs
block|;
comment|/// JumpTableUId - Unique id for jumptables.
comment|///
name|unsigned
name|JumpTableUId
block|;
name|unsigned
name|PICLabelUId
block|;
comment|/// VarArgsFrameIndex - FrameIndex for start of varargs area.
name|int
name|VarArgsFrameIndex
block|;
comment|/// HasITBlocks - True if IT blocks have been inserted.
name|bool
name|HasITBlocks
block|;
comment|/// CPEClones - Track constant pool entries clones created by Constant Island
comment|/// pass.
name|DenseMap
operator|<
name|unsigned
block|,
name|unsigned
operator|>
name|CPEClones
block|;
comment|/// GlobalBaseReg - keeps track of the virtual register initialized for
comment|/// use as the global base register. This is used for PIC in some PIC
comment|/// relocation models.
name|unsigned
name|GlobalBaseReg
block|;
comment|/// ArgumentStackSize - amount of bytes on stack consumed by the arguments
comment|/// being passed on the stack
name|unsigned
name|ArgumentStackSize
block|;
comment|/// CoalescedWeights - mapping of basic blocks to the rolling counter of
comment|/// coalesced weights.
name|DenseMap
operator|<
specifier|const
name|MachineBasicBlock
operator|*
block|,
name|unsigned
operator|>
name|CoalescedWeights
block|;
name|public
operator|:
name|ARMFunctionInfo
argument_list|()
operator|:
name|isThumb
argument_list|(
name|false
argument_list|)
block|,
name|hasThumb2
argument_list|(
name|false
argument_list|)
block|,
name|ArgRegsSaveSize
argument_list|(
literal|0
argument_list|)
block|,
name|ReturnRegsCount
argument_list|(
literal|0
argument_list|)
block|,
name|HasStackFrame
argument_list|(
name|false
argument_list|)
block|,
name|RestoreSPFromFP
argument_list|(
name|false
argument_list|)
block|,
name|LRSpilledForFarJump
argument_list|(
name|false
argument_list|)
block|,
name|FramePtrSpillOffset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS1Offset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS2Offset
argument_list|(
literal|0
argument_list|)
block|,
name|DPRCSOffset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS1Size
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS2Size
argument_list|(
literal|0
argument_list|)
block|,
name|DPRCSAlignGapSize
argument_list|(
literal|0
argument_list|)
block|,
name|DPRCSSize
argument_list|(
literal|0
argument_list|)
block|,
name|NumAlignedDPRCS2Regs
argument_list|(
literal|0
argument_list|)
block|,
name|JumpTableUId
argument_list|(
literal|0
argument_list|)
block|,
name|PICLabelUId
argument_list|(
literal|0
argument_list|)
block|,
name|VarArgsFrameIndex
argument_list|(
literal|0
argument_list|)
block|,
name|HasITBlocks
argument_list|(
name|false
argument_list|)
block|,
name|GlobalBaseReg
argument_list|(
literal|0
argument_list|)
block|{}
name|explicit
name|ARMFunctionInfo
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
block|;
name|bool
name|isThumbFunction
argument_list|()
specifier|const
block|{
return|return
name|isThumb
return|;
block|}
name|bool
name|isThumb1OnlyFunction
argument_list|()
specifier|const
block|{
return|return
name|isThumb
operator|&&
operator|!
name|hasThumb2
return|;
block|}
name|bool
name|isThumb2Function
argument_list|()
specifier|const
block|{
return|return
name|isThumb
operator|&&
name|hasThumb2
return|;
block|}
name|unsigned
name|getStoredByValParamsPadding
argument_list|()
specifier|const
block|{
return|return
name|StByValParamsPadding
return|;
block|}
name|void
name|setStoredByValParamsPadding
argument_list|(
argument|unsigned p
argument_list|)
block|{
name|StByValParamsPadding
operator|=
name|p
block|; }
name|unsigned
name|getArgRegsSaveSize
argument_list|(
argument|unsigned Align =
literal|0
argument_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|Align
condition|)
return|return
name|ArgRegsSaveSize
return|;
return|return
operator|(
name|ArgRegsSaveSize
operator|+
name|Align
operator|-
literal|1
operator|)
operator|&
operator|~
operator|(
name|Align
operator|-
literal|1
operator|)
return|;
block|}
name|void
name|setArgRegsSaveSize
parameter_list|(
name|unsigned
name|s
parameter_list|)
block|{
name|ArgRegsSaveSize
operator|=
name|s
expr_stmt|;
block|}
name|unsigned
name|getReturnRegsCount
argument_list|()
specifier|const
block|{
return|return
name|ReturnRegsCount
return|;
block|}
name|void
name|setReturnRegsCount
parameter_list|(
name|unsigned
name|s
parameter_list|)
block|{
name|ReturnRegsCount
operator|=
name|s
expr_stmt|;
block|}
name|bool
name|hasStackFrame
argument_list|()
specifier|const
block|{
return|return
name|HasStackFrame
return|;
block|}
name|void
name|setHasStackFrame
parameter_list|(
name|bool
name|s
parameter_list|)
block|{
name|HasStackFrame
operator|=
name|s
expr_stmt|;
block|}
name|bool
name|shouldRestoreSPFromFP
argument_list|()
specifier|const
block|{
return|return
name|RestoreSPFromFP
return|;
block|}
name|void
name|setShouldRestoreSPFromFP
parameter_list|(
name|bool
name|s
parameter_list|)
block|{
name|RestoreSPFromFP
operator|=
name|s
expr_stmt|;
block|}
name|bool
name|isLRSpilledForFarJump
argument_list|()
specifier|const
block|{
return|return
name|LRSpilledForFarJump
return|;
block|}
name|void
name|setLRIsSpilledForFarJump
parameter_list|(
name|bool
name|s
parameter_list|)
block|{
name|LRSpilledForFarJump
operator|=
name|s
expr_stmt|;
block|}
name|unsigned
name|getFramePtrSpillOffset
argument_list|()
specifier|const
block|{
return|return
name|FramePtrSpillOffset
return|;
block|}
name|void
name|setFramePtrSpillOffset
parameter_list|(
name|unsigned
name|o
parameter_list|)
block|{
name|FramePtrSpillOffset
operator|=
name|o
expr_stmt|;
block|}
name|unsigned
name|getNumAlignedDPRCS2Regs
argument_list|()
specifier|const
block|{
return|return
name|NumAlignedDPRCS2Regs
return|;
block|}
name|void
name|setNumAlignedDPRCS2Regs
parameter_list|(
name|unsigned
name|n
parameter_list|)
block|{
name|NumAlignedDPRCS2Regs
operator|=
name|n
expr_stmt|;
block|}
name|unsigned
name|getGPRCalleeSavedArea1Offset
argument_list|()
specifier|const
block|{
return|return
name|GPRCS1Offset
return|;
block|}
name|unsigned
name|getGPRCalleeSavedArea2Offset
argument_list|()
specifier|const
block|{
return|return
name|GPRCS2Offset
return|;
block|}
name|unsigned
name|getDPRCalleeSavedAreaOffset
argument_list|()
specifier|const
block|{
return|return
name|DPRCSOffset
return|;
block|}
name|void
name|setGPRCalleeSavedArea1Offset
parameter_list|(
name|unsigned
name|o
parameter_list|)
block|{
name|GPRCS1Offset
operator|=
name|o
expr_stmt|;
block|}
name|void
name|setGPRCalleeSavedArea2Offset
parameter_list|(
name|unsigned
name|o
parameter_list|)
block|{
name|GPRCS2Offset
operator|=
name|o
expr_stmt|;
block|}
name|void
name|setDPRCalleeSavedAreaOffset
parameter_list|(
name|unsigned
name|o
parameter_list|)
block|{
name|DPRCSOffset
operator|=
name|o
expr_stmt|;
block|}
name|unsigned
name|getGPRCalleeSavedArea1Size
argument_list|()
specifier|const
block|{
return|return
name|GPRCS1Size
return|;
block|}
name|unsigned
name|getGPRCalleeSavedArea2Size
argument_list|()
specifier|const
block|{
return|return
name|GPRCS2Size
return|;
block|}
name|unsigned
name|getDPRCalleeSavedGapSize
argument_list|()
specifier|const
block|{
return|return
name|DPRCSAlignGapSize
return|;
block|}
name|unsigned
name|getDPRCalleeSavedAreaSize
argument_list|()
specifier|const
block|{
return|return
name|DPRCSSize
return|;
block|}
name|void
name|setGPRCalleeSavedArea1Size
parameter_list|(
name|unsigned
name|s
parameter_list|)
block|{
name|GPRCS1Size
operator|=
name|s
expr_stmt|;
block|}
name|void
name|setGPRCalleeSavedArea2Size
parameter_list|(
name|unsigned
name|s
parameter_list|)
block|{
name|GPRCS2Size
operator|=
name|s
expr_stmt|;
block|}
name|void
name|setDPRCalleeSavedGapSize
parameter_list|(
name|unsigned
name|s
parameter_list|)
block|{
name|DPRCSAlignGapSize
operator|=
name|s
expr_stmt|;
block|}
name|void
name|setDPRCalleeSavedAreaSize
parameter_list|(
name|unsigned
name|s
parameter_list|)
block|{
name|DPRCSSize
operator|=
name|s
expr_stmt|;
block|}
name|unsigned
name|getArgumentStackSize
argument_list|()
specifier|const
block|{
return|return
name|ArgumentStackSize
return|;
block|}
name|void
name|setArgumentStackSize
parameter_list|(
name|unsigned
name|size
parameter_list|)
block|{
name|ArgumentStackSize
operator|=
name|size
expr_stmt|;
block|}
name|unsigned
name|createJumpTableUId
parameter_list|()
block|{
return|return
name|JumpTableUId
operator|++
return|;
block|}
name|unsigned
name|getNumJumpTables
argument_list|()
specifier|const
block|{
return|return
name|JumpTableUId
return|;
block|}
name|void
name|initPICLabelUId
parameter_list|(
name|unsigned
name|UId
parameter_list|)
block|{
name|PICLabelUId
operator|=
name|UId
expr_stmt|;
block|}
name|unsigned
name|getNumPICLabels
argument_list|()
specifier|const
block|{
return|return
name|PICLabelUId
return|;
block|}
name|unsigned
name|createPICLabelUId
parameter_list|()
block|{
return|return
name|PICLabelUId
operator|++
return|;
block|}
name|int
name|getVarArgsFrameIndex
argument_list|()
specifier|const
block|{
return|return
name|VarArgsFrameIndex
return|;
block|}
name|void
name|setVarArgsFrameIndex
parameter_list|(
name|int
name|Index
parameter_list|)
block|{
name|VarArgsFrameIndex
operator|=
name|Index
expr_stmt|;
block|}
name|bool
name|hasITBlocks
argument_list|()
specifier|const
block|{
return|return
name|HasITBlocks
return|;
block|}
name|void
name|setHasITBlocks
parameter_list|(
name|bool
name|h
parameter_list|)
block|{
name|HasITBlocks
operator|=
name|h
expr_stmt|;
block|}
name|unsigned
name|getGlobalBaseReg
argument_list|()
specifier|const
block|{
return|return
name|GlobalBaseReg
return|;
block|}
name|void
name|setGlobalBaseReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
name|GlobalBaseReg
operator|=
name|Reg
expr_stmt|;
block|}
name|void
name|recordCPEClone
parameter_list|(
name|unsigned
name|CPIdx
parameter_list|,
name|unsigned
name|CPCloneIdx
parameter_list|)
block|{
if|if
condition|(
operator|!
name|CPEClones
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|CPCloneIdx
argument_list|,
name|CPIdx
argument_list|)
argument_list|)
operator|.
name|second
condition|)
name|llvm_unreachable
argument_list|(
literal|"Duplicate entries!"
argument_list|)
expr_stmt|;
block|}
name|unsigned
name|getOriginalCPIdx
argument_list|(
name|unsigned
name|CloneIdx
argument_list|)
decl|const
block|{
name|DenseMap
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
operator|::
name|const_iterator
name|I
operator|=
name|CPEClones
operator|.
name|find
argument_list|(
name|CloneIdx
argument_list|)
expr_stmt|;
if|if
condition|(
name|I
operator|!=
name|CPEClones
operator|.
name|end
argument_list|()
condition|)
return|return
name|I
operator|->
name|second
return|;
else|else
return|return
operator|-
literal|1U
return|;
block|}
name|DenseMap
operator|<
specifier|const
name|MachineBasicBlock
operator|*
operator|,
name|unsigned
operator|>
operator|::
name|iterator
name|getCoalescedWeight
argument_list|(
argument|MachineBasicBlock* MBB
argument_list|)
block|{
name|auto
name|It
operator|=
name|CoalescedWeights
operator|.
name|find
argument_list|(
name|MBB
argument_list|)
block|;
if|if
condition|(
name|It
operator|==
name|CoalescedWeights
operator|.
name|end
argument_list|()
condition|)
block|{
name|It
operator|=
name|CoalescedWeights
operator|.
name|insert
argument_list|(
name|std
operator|::
name|make_pair
argument_list|(
name|MBB
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|first
expr_stmt|;
block|}
return|return
name|It
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

