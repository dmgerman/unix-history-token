begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//====- ARMMachineFuctionInfo.h - ARM machine function info -----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares ARM-specific per-machine-function information.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ARMMACHINEFUNCTIONINFO_H
end_ifndef

begin_define
define|#
directive|define
name|ARMMACHINEFUNCTIONINFO_H
end_define

begin_include
include|#
directive|include
file|"ARMSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// ARMFunctionInfo - This class is derived from MachineFunction private
comment|/// ARM target-specific information for each MachineFunction.
name|class
name|ARMFunctionInfo
range|:
name|public
name|MachineFunctionInfo
block|{
comment|/// isThumb - True if this function is compiled under Thumb mode.
comment|/// Used to initialized Align, so must precede it.
name|bool
name|isThumb
block|;
comment|/// hasThumb2 - True if the target architecture supports Thumb2. Do not use
comment|/// to determine if function is compiled under Thumb mode, for that use
comment|/// 'isThumb'.
name|bool
name|hasThumb2
block|;
comment|/// VarArgsRegSaveSize - Size of the register save area for vararg functions.
comment|///
name|unsigned
name|VarArgsRegSaveSize
block|;
comment|/// HasStackFrame - True if this function has a stack frame. Set by
comment|/// processFunctionBeforeCalleeSavedScan().
name|bool
name|HasStackFrame
block|;
comment|/// RestoreSPFromFP - True if epilogue should restore SP from FP. Set by
comment|/// emitPrologue.
name|bool
name|RestoreSPFromFP
block|;
comment|/// LRSpilledForFarJump - True if the LR register has been for spilled to
comment|/// enable far jump.
name|bool
name|LRSpilledForFarJump
block|;
comment|/// FramePtrSpillOffset - If HasStackFrame, this records the frame pointer
comment|/// spill stack offset.
name|unsigned
name|FramePtrSpillOffset
block|;
comment|/// GPRCS1Offset, GPRCS2Offset, DPRCSOffset - Starting offset of callee saved
comment|/// register spills areas. For Mac OS X:
comment|///
comment|/// GPR callee-saved (1) : r4, r5, r6, r7, lr
comment|/// --------------------------------------------
comment|/// GPR callee-saved (2) : r8, r10, r11
comment|/// --------------------------------------------
comment|/// DPR callee-saved : d8 - d15
name|unsigned
name|GPRCS1Offset
block|;
name|unsigned
name|GPRCS2Offset
block|;
name|unsigned
name|DPRCSOffset
block|;
comment|/// GPRCS1Size, GPRCS2Size, DPRCSSize - Sizes of callee saved register spills
comment|/// areas.
name|unsigned
name|GPRCS1Size
block|;
name|unsigned
name|GPRCS2Size
block|;
name|unsigned
name|DPRCSSize
block|;
comment|/// GPRCS1Frames, GPRCS2Frames, DPRCSFrames - Keeps track of frame indices
comment|/// which belong to these spill areas.
name|BitVector
name|GPRCS1Frames
block|;
name|BitVector
name|GPRCS2Frames
block|;
name|BitVector
name|DPRCSFrames
block|;
comment|/// SpilledCSRegs - A BitVector mask of all spilled callee-saved registers.
comment|///
name|BitVector
name|SpilledCSRegs
block|;
comment|/// JumpTableUId - Unique id for jumptables.
comment|///
name|unsigned
name|JumpTableUId
block|;
name|unsigned
name|ConstPoolEntryUId
block|;
comment|/// VarArgsFrameIndex - FrameIndex for start of varargs area.
name|int
name|VarArgsFrameIndex
block|;
comment|/// HasITBlocks - True if IT blocks have been inserted.
name|bool
name|HasITBlocks
block|;
name|public
operator|:
name|ARMFunctionInfo
argument_list|()
operator|:
name|isThumb
argument_list|(
name|false
argument_list|)
block|,
name|hasThumb2
argument_list|(
name|false
argument_list|)
block|,
name|VarArgsRegSaveSize
argument_list|(
literal|0
argument_list|)
block|,
name|HasStackFrame
argument_list|(
name|false
argument_list|)
block|,
name|RestoreSPFromFP
argument_list|(
name|false
argument_list|)
block|,
name|LRSpilledForFarJump
argument_list|(
name|false
argument_list|)
block|,
name|FramePtrSpillOffset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS1Offset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS2Offset
argument_list|(
literal|0
argument_list|)
block|,
name|DPRCSOffset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS1Size
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS2Size
argument_list|(
literal|0
argument_list|)
block|,
name|DPRCSSize
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS1Frames
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS2Frames
argument_list|(
literal|0
argument_list|)
block|,
name|DPRCSFrames
argument_list|(
literal|0
argument_list|)
block|,
name|JumpTableUId
argument_list|(
literal|0
argument_list|)
block|,
name|ConstPoolEntryUId
argument_list|(
literal|0
argument_list|)
block|,
name|VarArgsFrameIndex
argument_list|(
literal|0
argument_list|)
block|,
name|HasITBlocks
argument_list|(
argument|false
argument_list|)
block|{}
name|explicit
name|ARMFunctionInfo
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
operator|:
name|isThumb
argument_list|(
name|MF
operator|.
name|getTarget
argument_list|()
operator|.
name|getSubtarget
operator|<
name|ARMSubtarget
operator|>
operator|(
operator|)
operator|.
name|isThumb
argument_list|()
argument_list|)
block|,
name|hasThumb2
argument_list|(
name|MF
operator|.
name|getTarget
argument_list|()
operator|.
name|getSubtarget
operator|<
name|ARMSubtarget
operator|>
operator|(
operator|)
operator|.
name|hasThumb2
argument_list|()
argument_list|)
block|,
name|VarArgsRegSaveSize
argument_list|(
literal|0
argument_list|)
block|,
name|HasStackFrame
argument_list|(
name|false
argument_list|)
block|,
name|RestoreSPFromFP
argument_list|(
name|false
argument_list|)
block|,
name|LRSpilledForFarJump
argument_list|(
name|false
argument_list|)
block|,
name|FramePtrSpillOffset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS1Offset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS2Offset
argument_list|(
literal|0
argument_list|)
block|,
name|DPRCSOffset
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS1Size
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS2Size
argument_list|(
literal|0
argument_list|)
block|,
name|DPRCSSize
argument_list|(
literal|0
argument_list|)
block|,
name|GPRCS1Frames
argument_list|(
literal|32
argument_list|)
block|,
name|GPRCS2Frames
argument_list|(
literal|32
argument_list|)
block|,
name|DPRCSFrames
argument_list|(
literal|32
argument_list|)
block|,
name|SpilledCSRegs
argument_list|(
name|MF
operator|.
name|getTarget
argument_list|()
operator|.
name|getRegisterInfo
argument_list|()
operator|->
name|getNumRegs
argument_list|()
argument_list|)
block|,
name|JumpTableUId
argument_list|(
literal|0
argument_list|)
block|,
name|ConstPoolEntryUId
argument_list|(
literal|0
argument_list|)
block|,
name|VarArgsFrameIndex
argument_list|(
literal|0
argument_list|)
block|,
name|HasITBlocks
argument_list|(
argument|false
argument_list|)
block|{}
name|bool
name|isThumbFunction
argument_list|()
specifier|const
block|{
return|return
name|isThumb
return|;
block|}
name|bool
name|isThumb1OnlyFunction
argument_list|()
specifier|const
block|{
return|return
name|isThumb
operator|&&
operator|!
name|hasThumb2
return|;
block|}
name|bool
name|isThumb2Function
argument_list|()
specifier|const
block|{
return|return
name|isThumb
operator|&&
name|hasThumb2
return|;
block|}
name|unsigned
name|getVarArgsRegSaveSize
argument_list|()
specifier|const
block|{
return|return
name|VarArgsRegSaveSize
return|;
block|}
name|void
name|setVarArgsRegSaveSize
argument_list|(
argument|unsigned s
argument_list|)
block|{
name|VarArgsRegSaveSize
operator|=
name|s
block|; }
name|bool
name|hasStackFrame
argument_list|()
specifier|const
block|{
return|return
name|HasStackFrame
return|;
block|}
name|void
name|setHasStackFrame
argument_list|(
argument|bool s
argument_list|)
block|{
name|HasStackFrame
operator|=
name|s
block|; }
name|bool
name|shouldRestoreSPFromFP
argument_list|()
specifier|const
block|{
return|return
name|RestoreSPFromFP
return|;
block|}
name|void
name|setShouldRestoreSPFromFP
argument_list|(
argument|bool s
argument_list|)
block|{
name|RestoreSPFromFP
operator|=
name|s
block|; }
name|bool
name|isLRSpilledForFarJump
argument_list|()
specifier|const
block|{
return|return
name|LRSpilledForFarJump
return|;
block|}
name|void
name|setLRIsSpilledForFarJump
argument_list|(
argument|bool s
argument_list|)
block|{
name|LRSpilledForFarJump
operator|=
name|s
block|; }
name|unsigned
name|getFramePtrSpillOffset
argument_list|()
specifier|const
block|{
return|return
name|FramePtrSpillOffset
return|;
block|}
name|void
name|setFramePtrSpillOffset
argument_list|(
argument|unsigned o
argument_list|)
block|{
name|FramePtrSpillOffset
operator|=
name|o
block|; }
name|unsigned
name|getGPRCalleeSavedArea1Offset
argument_list|()
specifier|const
block|{
return|return
name|GPRCS1Offset
return|;
block|}
name|unsigned
name|getGPRCalleeSavedArea2Offset
argument_list|()
specifier|const
block|{
return|return
name|GPRCS2Offset
return|;
block|}
name|unsigned
name|getDPRCalleeSavedAreaOffset
argument_list|()
specifier|const
block|{
return|return
name|DPRCSOffset
return|;
block|}
name|void
name|setGPRCalleeSavedArea1Offset
argument_list|(
argument|unsigned o
argument_list|)
block|{
name|GPRCS1Offset
operator|=
name|o
block|; }
name|void
name|setGPRCalleeSavedArea2Offset
argument_list|(
argument|unsigned o
argument_list|)
block|{
name|GPRCS2Offset
operator|=
name|o
block|; }
name|void
name|setDPRCalleeSavedAreaOffset
argument_list|(
argument|unsigned o
argument_list|)
block|{
name|DPRCSOffset
operator|=
name|o
block|; }
name|unsigned
name|getGPRCalleeSavedArea1Size
argument_list|()
specifier|const
block|{
return|return
name|GPRCS1Size
return|;
block|}
name|unsigned
name|getGPRCalleeSavedArea2Size
argument_list|()
specifier|const
block|{
return|return
name|GPRCS2Size
return|;
block|}
name|unsigned
name|getDPRCalleeSavedAreaSize
argument_list|()
specifier|const
block|{
return|return
name|DPRCSSize
return|;
block|}
name|void
name|setGPRCalleeSavedArea1Size
argument_list|(
argument|unsigned s
argument_list|)
block|{
name|GPRCS1Size
operator|=
name|s
block|; }
name|void
name|setGPRCalleeSavedArea2Size
argument_list|(
argument|unsigned s
argument_list|)
block|{
name|GPRCS2Size
operator|=
name|s
block|; }
name|void
name|setDPRCalleeSavedAreaSize
argument_list|(
argument|unsigned s
argument_list|)
block|{
name|DPRCSSize
operator|=
name|s
block|; }
name|bool
name|isGPRCalleeSavedArea1Frame
argument_list|(
argument|int fi
argument_list|)
specifier|const
block|{
if|if
condition|(
name|fi
operator|<
literal|0
operator|||
name|fi
operator|>=
operator|(
name|int
operator|)
name|GPRCS1Frames
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|GPRCS1Frames
index|[
name|fi
index|]
return|;
block|}
name|bool
name|isGPRCalleeSavedArea2Frame
argument_list|(
name|int
name|fi
argument_list|)
decl|const
block|{
if|if
condition|(
name|fi
operator|<
literal|0
operator|||
name|fi
operator|>=
operator|(
name|int
operator|)
name|GPRCS2Frames
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|GPRCS2Frames
index|[
name|fi
index|]
return|;
block|}
name|bool
name|isDPRCalleeSavedAreaFrame
argument_list|(
name|int
name|fi
argument_list|)
decl|const
block|{
if|if
condition|(
name|fi
operator|<
literal|0
operator|||
name|fi
operator|>=
operator|(
name|int
operator|)
name|DPRCSFrames
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
return|return
name|DPRCSFrames
index|[
name|fi
index|]
return|;
block|}
name|void
name|addGPRCalleeSavedArea1Frame
parameter_list|(
name|int
name|fi
parameter_list|)
block|{
if|if
condition|(
name|fi
operator|>=
literal|0
condition|)
block|{
name|int
name|Size
init|=
name|GPRCS1Frames
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|fi
operator|>=
name|Size
condition|)
block|{
name|Size
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|fi
operator|>=
name|Size
condition|)
name|Size
operator|=
name|fi
operator|+
literal|1
expr_stmt|;
name|GPRCS1Frames
operator|.
name|resize
argument_list|(
name|Size
argument_list|)
expr_stmt|;
block|}
name|GPRCS1Frames
index|[
name|fi
index|]
operator|=
name|true
expr_stmt|;
block|}
block|}
name|void
name|addGPRCalleeSavedArea2Frame
parameter_list|(
name|int
name|fi
parameter_list|)
block|{
if|if
condition|(
name|fi
operator|>=
literal|0
condition|)
block|{
name|int
name|Size
init|=
name|GPRCS2Frames
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|fi
operator|>=
name|Size
condition|)
block|{
name|Size
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|fi
operator|>=
name|Size
condition|)
name|Size
operator|=
name|fi
operator|+
literal|1
expr_stmt|;
name|GPRCS2Frames
operator|.
name|resize
argument_list|(
name|Size
argument_list|)
expr_stmt|;
block|}
name|GPRCS2Frames
index|[
name|fi
index|]
operator|=
name|true
expr_stmt|;
block|}
block|}
name|void
name|addDPRCalleeSavedAreaFrame
parameter_list|(
name|int
name|fi
parameter_list|)
block|{
if|if
condition|(
name|fi
operator|>=
literal|0
condition|)
block|{
name|int
name|Size
init|=
name|DPRCSFrames
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|fi
operator|>=
name|Size
condition|)
block|{
name|Size
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|fi
operator|>=
name|Size
condition|)
name|Size
operator|=
name|fi
operator|+
literal|1
expr_stmt|;
name|DPRCSFrames
operator|.
name|resize
argument_list|(
name|Size
argument_list|)
expr_stmt|;
block|}
name|DPRCSFrames
index|[
name|fi
index|]
operator|=
name|true
expr_stmt|;
block|}
block|}
name|void
name|setCSRegisterIsSpilled
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
name|SpilledCSRegs
operator|.
name|set
argument_list|(
name|Reg
argument_list|)
expr_stmt|;
block|}
name|bool
name|isCSRegisterSpilled
argument_list|(
name|unsigned
name|Reg
argument_list|)
decl|const
block|{
return|return
name|SpilledCSRegs
index|[
name|Reg
index|]
return|;
block|}
specifier|const
name|BitVector
operator|&
name|getSpilledCSRegisters
argument_list|()
specifier|const
block|{
return|return
name|SpilledCSRegs
return|;
block|}
name|unsigned
name|createJumpTableUId
parameter_list|()
block|{
return|return
name|JumpTableUId
operator|++
return|;
block|}
name|unsigned
name|getNumJumpTables
argument_list|()
specifier|const
block|{
return|return
name|JumpTableUId
return|;
block|}
name|void
name|initConstPoolEntryUId
parameter_list|(
name|unsigned
name|UId
parameter_list|)
block|{
name|ConstPoolEntryUId
operator|=
name|UId
expr_stmt|;
block|}
name|unsigned
name|getNumConstPoolEntries
argument_list|()
specifier|const
block|{
return|return
name|ConstPoolEntryUId
return|;
block|}
name|unsigned
name|createConstPoolEntryUId
parameter_list|()
block|{
return|return
name|ConstPoolEntryUId
operator|++
return|;
block|}
name|int
name|getVarArgsFrameIndex
argument_list|()
specifier|const
block|{
return|return
name|VarArgsFrameIndex
return|;
block|}
name|void
name|setVarArgsFrameIndex
parameter_list|(
name|int
name|Index
parameter_list|)
block|{
name|VarArgsFrameIndex
operator|=
name|Index
expr_stmt|;
block|}
name|bool
name|hasITBlocks
argument_list|()
specifier|const
block|{
return|return
name|HasITBlocks
return|;
block|}
name|void
name|setHasITBlocks
parameter_list|(
name|bool
name|h
parameter_list|)
block|{
name|HasITBlocks
operator|=
name|h
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// ARMMACHINEFUNCTIONINFO_H
end_comment

end_unit

