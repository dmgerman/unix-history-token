begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- ARMTargetTransformInfo.h - ARM specific TTI -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file a TargetTransformInfo::Concept conforming object specific to the
end_comment

begin_comment
comment|/// ARM target machine. It uses the target's detailed information to
end_comment

begin_comment
comment|/// provide more precise answers to certain TTI queries, while letting the
end_comment

begin_comment
comment|/// target independent and default TTI implementations handle the rest.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_ARM_ARMTARGETTRANSFORMINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_ARM_ARMTARGETTRANSFORMINFO_H
end_define

begin_include
include|#
directive|include
file|"ARM.h"
end_include

begin_include
include|#
directive|include
file|"ARMTargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/TargetTransformInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/BasicTTIImpl.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|ARMTTIImpl
range|:
name|public
name|BasicTTIImplBase
operator|<
name|ARMTTIImpl
operator|>
block|{
typedef|typedef
name|BasicTTIImplBase
operator|<
name|ARMTTIImpl
operator|>
name|BaseT
expr_stmt|;
typedef|typedef
name|TargetTransformInfo
name|TTI
typedef|;
name|friend
name|BaseT
decl_stmt|;
specifier|const
name|ARMSubtarget
modifier|*
name|ST
decl_stmt|;
specifier|const
name|ARMTargetLowering
modifier|*
name|TLI
decl_stmt|;
comment|// Currently the following features are excluded from InlineFeatureWhitelist.
comment|// ModeThumb, FeatureNoARM, ModeSoftFloat, FeatureVFPOnlySP, FeatureD16
comment|// Depending on whether they are set or unset, different
comment|// instructions/registers are available. For example, inlining a callee with
comment|// -thumb-mode in a caller with +thumb-mode, may cause the assembler to
comment|// fail if the callee uses ARM only instructions, e.g. in inline asm.
specifier|const
name|FeatureBitset
name|InlineFeatureWhitelist
init|=
block|{
name|ARM
operator|::
name|FeatureVFP2
block|,
name|ARM
operator|::
name|FeatureVFP3
block|,
name|ARM
operator|::
name|FeatureNEON
block|,
name|ARM
operator|::
name|FeatureThumb2
block|,
name|ARM
operator|::
name|FeatureFP16
block|,
name|ARM
operator|::
name|FeatureVFP4
block|,
name|ARM
operator|::
name|FeatureFPARMv8
block|,
name|ARM
operator|::
name|FeatureFullFP16
block|,
name|ARM
operator|::
name|FeatureHWDivThumb
block|,
name|ARM
operator|::
name|FeatureHWDivARM
block|,
name|ARM
operator|::
name|FeatureDB
block|,
name|ARM
operator|::
name|FeatureV7Clrex
block|,
name|ARM
operator|::
name|FeatureAcquireRelease
block|,
name|ARM
operator|::
name|FeatureSlowFPBrcc
block|,
name|ARM
operator|::
name|FeaturePerfMon
block|,
name|ARM
operator|::
name|FeatureTrustZone
block|,
name|ARM
operator|::
name|Feature8MSecExt
block|,
name|ARM
operator|::
name|FeatureCrypto
block|,
name|ARM
operator|::
name|FeatureCRC
block|,
name|ARM
operator|::
name|FeatureRAS
block|,
name|ARM
operator|::
name|FeatureFPAO
block|,
name|ARM
operator|::
name|FeatureFuseAES
block|,
name|ARM
operator|::
name|FeatureZCZeroing
block|,
name|ARM
operator|::
name|FeatureProfUnpredicate
block|,
name|ARM
operator|::
name|FeatureSlowVGETLNi32
block|,
name|ARM
operator|::
name|FeatureSlowVDUP32
block|,
name|ARM
operator|::
name|FeaturePreferVMOVSR
block|,
name|ARM
operator|::
name|FeaturePrefISHSTBarrier
block|,
name|ARM
operator|::
name|FeatureMuxedUnits
block|,
name|ARM
operator|::
name|FeatureSlowOddRegister
block|,
name|ARM
operator|::
name|FeatureSlowLoadDSubreg
block|,
name|ARM
operator|::
name|FeatureDontWidenVMOVS
block|,
name|ARM
operator|::
name|FeatureExpandMLx
block|,
name|ARM
operator|::
name|FeatureHasVMLxHazards
block|,
name|ARM
operator|::
name|FeatureNEONForFPMovs
block|,
name|ARM
operator|::
name|FeatureNEONForFP
block|,
name|ARM
operator|::
name|FeatureCheckVLDnAlign
block|,
name|ARM
operator|::
name|FeatureHasSlowFPVMLx
block|,
name|ARM
operator|::
name|FeatureVMLxForwarding
block|,
name|ARM
operator|::
name|FeaturePref32BitThumb
block|,
name|ARM
operator|::
name|FeatureAvoidPartialCPSR
block|,
name|ARM
operator|::
name|FeatureCheapPredicableCPSR
block|,
name|ARM
operator|::
name|FeatureAvoidMOVsShOp
block|,
name|ARM
operator|::
name|FeatureHasRetAddrStack
block|,
name|ARM
operator|::
name|FeatureHasNoBranchPredictor
block|,
name|ARM
operator|::
name|FeatureDSP
block|,
name|ARM
operator|::
name|FeatureMP
block|,
name|ARM
operator|::
name|FeatureVirtualization
block|,
name|ARM
operator|::
name|FeatureMClass
block|,
name|ARM
operator|::
name|FeatureRClass
block|,
name|ARM
operator|::
name|FeatureAClass
block|,
name|ARM
operator|::
name|FeatureNaClTrap
block|,
name|ARM
operator|::
name|FeatureStrictAlign
block|,
name|ARM
operator|::
name|FeatureLongCalls
block|,
name|ARM
operator|::
name|FeatureExecuteOnly
block|,
name|ARM
operator|::
name|FeatureReserveR9
block|,
name|ARM
operator|::
name|FeatureNoMovt
block|,
name|ARM
operator|::
name|FeatureNoNegativeImmediates
block|}
decl_stmt|;
specifier|const
name|ARMSubtarget
operator|*
name|getST
argument_list|()
specifier|const
block|{
return|return
name|ST
return|;
block|}
specifier|const
name|ARMTargetLowering
operator|*
name|getTLI
argument_list|()
specifier|const
block|{
return|return
name|TLI
return|;
block|}
name|public
label|:
name|explicit
name|ARMTTIImpl
argument_list|(
specifier|const
name|ARMBaseTargetMachine
operator|*
name|TM
argument_list|,
specifier|const
name|Function
operator|&
name|F
argument_list|)
operator|:
name|BaseT
argument_list|(
name|TM
argument_list|,
name|F
operator|.
name|getParent
argument_list|()
operator|->
name|getDataLayout
argument_list|()
argument_list|)
operator|,
name|ST
argument_list|(
name|TM
operator|->
name|getSubtargetImpl
argument_list|(
name|F
argument_list|)
argument_list|)
operator|,
name|TLI
argument_list|(
argument|ST->getTargetLowering()
argument_list|)
block|{}
name|bool
name|areInlineCompatible
argument_list|(
argument|const Function *Caller
argument_list|,
argument|const Function *Callee
argument_list|)
specifier|const
expr_stmt|;
name|bool
name|enableInterleavedAccessVectorization
parameter_list|()
block|{
return|return
name|true
return|;
block|}
comment|/// Floating-point computation using ARMv8 AArch32 Advanced
comment|/// SIMD instructions remains unchanged from ARMv7. Only AArch64 SIMD
comment|/// is IEEE-754 compliant, but it's not covered in this target.
name|bool
name|isFPVectorizationPotentiallyUnsafe
parameter_list|()
block|{
return|return
operator|!
name|ST
operator|->
name|isTargetDarwin
argument_list|()
return|;
block|}
comment|/// \name Scalar TTI Implementations
comment|/// @{
name|int
name|getIntImmCodeSizeCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|unsigned
name|Idx
parameter_list|,
specifier|const
name|APInt
modifier|&
name|Imm
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|using
name|BaseT
operator|::
name|getIntImmCost
expr_stmt|;
name|int
name|getIntImmCost
parameter_list|(
specifier|const
name|APInt
modifier|&
name|Imm
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|int
name|getIntImmCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|unsigned
name|Idx
parameter_list|,
specifier|const
name|APInt
modifier|&
name|Imm
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
comment|/// @}
comment|/// \name Vector TTI Implementations
comment|/// @{
name|unsigned
name|getNumberOfRegisters
parameter_list|(
name|bool
name|Vector
parameter_list|)
block|{
if|if
condition|(
name|Vector
condition|)
block|{
if|if
condition|(
name|ST
operator|->
name|hasNEON
argument_list|()
condition|)
return|return
literal|16
return|;
return|return
literal|0
return|;
block|}
if|if
condition|(
name|ST
operator|->
name|isThumb1Only
argument_list|()
condition|)
return|return
literal|8
return|;
return|return
literal|13
return|;
block|}
name|unsigned
name|getRegisterBitWidth
argument_list|(
name|bool
name|Vector
argument_list|)
decl|const
block|{
if|if
condition|(
name|Vector
condition|)
block|{
if|if
condition|(
name|ST
operator|->
name|hasNEON
argument_list|()
condition|)
return|return
literal|128
return|;
return|return
literal|0
return|;
block|}
return|return
literal|32
return|;
block|}
name|unsigned
name|getMaxInterleaveFactor
parameter_list|(
name|unsigned
name|VF
parameter_list|)
block|{
return|return
name|ST
operator|->
name|getMaxInterleaveFactor
argument_list|()
return|;
block|}
name|int
name|getShuffleCost
argument_list|(
name|TTI
operator|::
name|ShuffleKind
name|Kind
argument_list|,
name|Type
operator|*
name|Tp
argument_list|,
name|int
name|Index
argument_list|,
name|Type
operator|*
name|SubTp
argument_list|)
decl_stmt|;
name|int
name|getCastInstrCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|Dst
parameter_list|,
name|Type
modifier|*
name|Src
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|I
init|=
name|nullptr
parameter_list|)
function_decl|;
name|int
name|getCmpSelInstrCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|ValTy
parameter_list|,
name|Type
modifier|*
name|CondTy
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|I
init|=
name|nullptr
parameter_list|)
function_decl|;
name|int
name|getVectorInstrCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|Val
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
name|int
name|getAddressComputationCost
parameter_list|(
name|Type
modifier|*
name|Val
parameter_list|,
name|ScalarEvolution
modifier|*
name|SE
parameter_list|,
specifier|const
name|SCEV
modifier|*
name|Ptr
parameter_list|)
function_decl|;
name|int
name|getFPOpCost
parameter_list|(
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|int
name|getArithmeticInstrCost
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|Type
operator|*
name|Ty
argument_list|,
name|TTI
operator|::
name|OperandValueKind
name|Op1Info
operator|=
name|TTI
operator|::
name|OK_AnyValue
argument_list|,
name|TTI
operator|::
name|OperandValueKind
name|Op2Info
operator|=
name|TTI
operator|::
name|OK_AnyValue
argument_list|,
name|TTI
operator|::
name|OperandValueProperties
name|Opd1PropInfo
operator|=
name|TTI
operator|::
name|OP_None
argument_list|,
name|TTI
operator|::
name|OperandValueProperties
name|Opd2PropInfo
operator|=
name|TTI
operator|::
name|OP_None
argument_list|,
name|ArrayRef
operator|<
specifier|const
name|Value
operator|*
operator|>
name|Args
operator|=
name|ArrayRef
operator|<
specifier|const
name|Value
operator|*
operator|>
operator|(
operator|)
argument_list|)
decl_stmt|;
name|int
name|getMemoryOpCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|Src
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|,
specifier|const
name|Instruction
modifier|*
name|I
init|=
name|nullptr
parameter_list|)
function_decl|;
name|int
name|getInterleavedMemoryOpCost
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|Type
operator|*
name|VecTy
argument_list|,
name|unsigned
name|Factor
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Indices
argument_list|,
name|unsigned
name|Alignment
argument_list|,
name|unsigned
name|AddressSpace
argument_list|)
decl_stmt|;
name|bool
name|shouldBuildLookupTablesForConstant
argument_list|(
name|Constant
operator|*
name|C
argument_list|)
decl|const
block|{
comment|// In the ROPI and RWPI relocation models we can't have pointers to global
comment|// variables or functions in constant data, so don't convert switches to
comment|// lookup tables if any of the values would need relocation.
if|if
condition|(
name|ST
operator|->
name|isROPI
argument_list|()
operator|||
name|ST
operator|->
name|isRWPI
argument_list|()
condition|)
return|return
operator|!
name|C
operator|->
name|needsRelocation
argument_list|()
return|;
return|return
name|true
return|;
block|}
comment|/// @}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

