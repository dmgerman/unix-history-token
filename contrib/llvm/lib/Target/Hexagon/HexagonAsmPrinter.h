begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- HexagonAsmPrinter.h - Print machine code to an Hexagon .s file ----===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Hexagon Assembly printer class.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEXAGONASMPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|HEXAGONASMPRINTER_H
end_define

begin_include
include|#
directive|include
file|"Hexagon.h"
end_include

begin_include
include|#
directive|include
file|"HexagonTargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/AsmPrinter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Compiler.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|HexagonAsmPrinter
range|:
name|public
name|AsmPrinter
block|{
specifier|const
name|HexagonSubtarget
operator|*
name|Subtarget
block|;
name|public
operator|:
name|explicit
name|HexagonAsmPrinter
argument_list|(
name|TargetMachine
operator|&
name|TM
argument_list|,
name|MCStreamer
operator|&
name|Streamer
argument_list|)
operator|:
name|AsmPrinter
argument_list|(
argument|TM
argument_list|,
argument|Streamer
argument_list|)
block|{
name|Subtarget
operator|=
operator|&
name|TM
operator|.
name|getSubtarget
operator|<
name|HexagonSubtarget
operator|>
operator|(
operator|)
block|;     }
name|virtual
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
block|{
return|return
literal|"Hexagon Assembly Printer"
return|;
block|}
name|bool
name|isBlockOnlyReachableByFallthrough
argument_list|(
argument|const MachineBasicBlock *MBB
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|EmitInstruction
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|)
block|;
name|virtual
name|void
name|EmitAlignment
argument_list|(
argument|unsigned NumBits
argument_list|,
argument|const GlobalValue *GV =
literal|0
argument_list|)
specifier|const
block|;
name|void
name|printOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|bool
name|PrintAsmOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|unsigned AsmVariant
argument_list|,
argument|const char *ExtraCode
argument_list|,
argument|raw_ostream&OS
argument_list|)
block|;
name|bool
name|PrintAsmMemoryOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|unsigned AsmVariant
argument_list|,
argument|const char *ExtraCode
argument_list|,
argument|raw_ostream&OS
argument_list|)
block|;
comment|/// printInstruction - This method is automatically generated by tablegen
comment|/// from the instruction set description.  This method returns true if the
comment|/// machine instruction was sufficiently described to print it, otherwise it
comment|/// returns false.
name|void
name|printInstruction
argument_list|(
specifier|const
name|MachineInstr
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
comment|//    void printMachineInstruction(const MachineInstr *MI);
name|void
name|printOp
argument_list|(
specifier|const
name|MachineOperand
operator|&
name|MO
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
comment|/// printRegister - Print register according to target requirements.
comment|///
name|void
name|printRegister
argument_list|(
argument|const MachineOperand&MO
argument_list|,
argument|bool R0AsZero
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|unsigned
name|RegNo
operator|=
name|MO
operator|.
name|getReg
argument_list|()
block|;
name|assert
argument_list|(
name|TargetRegisterInfo
operator|::
name|isPhysicalRegister
argument_list|(
name|RegNo
argument_list|)
operator|&&
literal|"Not physreg??"
argument_list|)
block|;
name|O
operator|<<
name|getRegisterName
argument_list|(
name|RegNo
argument_list|)
block|;     }
name|void
name|printImmOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|int
name|value
operator|=
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
operator|.
name|getImm
argument_list|()
block|;
name|O
operator|<<
name|value
block|;     }
name|void
name|printNegImmOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|int
name|value
operator|=
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
operator|.
name|getImm
argument_list|()
block|;
name|O
operator|<<
operator|-
name|value
block|;     }
name|void
name|printMEMriOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
specifier|const
name|MachineOperand
operator|&
name|MO1
operator|=
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
block|;
specifier|const
name|MachineOperand
operator|&
name|MO2
operator|=
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
operator|+
literal|1
argument_list|)
block|;
name|O
operator|<<
name|getRegisterName
argument_list|(
name|MO1
operator|.
name|getReg
argument_list|()
argument_list|)
operator|<<
literal|" + #"
operator|<<
operator|(
name|int
operator|)
name|MO2
operator|.
name|getImm
argument_list|()
block|;     }
name|void
name|printFrameIndexOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
specifier|const
name|MachineOperand
operator|&
name|MO1
operator|=
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
block|;
specifier|const
name|MachineOperand
operator|&
name|MO2
operator|=
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
operator|+
literal|1
argument_list|)
block|;
name|O
operator|<<
name|getRegisterName
argument_list|(
name|MO1
operator|.
name|getReg
argument_list|()
argument_list|)
operator|<<
literal|", #"
operator|<<
name|MO2
operator|.
name|getImm
argument_list|()
block|;     }
name|void
name|printBranchOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
comment|// Branches can take an immediate operand.  This is used by the branch
comment|// selection pass to print $+8, an eight byte displacement from the PC.
if|if
condition|(
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
operator|.
name|isImm
argument_list|()
condition|)
block|{
name|O
operator|<<
literal|"$+"
operator|<<
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
operator|.
name|getImm
argument_list|()
operator|*
literal|4
expr_stmt|;
block|}
else|else
block|{
name|printOp
argument_list|(
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
argument_list|,
name|O
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|printCallOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{     }
name|void
name|printAbsAddrOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{     }
name|void
name|printSymbolHi
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"#HI("
block|;
if|if
condition|(
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
operator|.
name|isImm
argument_list|()
condition|)
block|{
name|printImmOperand
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printOp
argument_list|(
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
argument_list|,
name|O
argument_list|)
expr_stmt|;
block|}
name|O
operator|<<
literal|")"
expr_stmt|;
block|}
name|void
name|printSymbolLo
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"#HI("
block|;
if|if
condition|(
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
operator|.
name|isImm
argument_list|()
condition|)
block|{
name|printImmOperand
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printOp
argument_list|(
name|MI
operator|->
name|getOperand
argument_list|(
name|OpNo
argument_list|)
argument_list|,
name|O
argument_list|)
expr_stmt|;
block|}
name|O
operator|<<
literal|")"
expr_stmt|;
block|}
name|void
name|printPredicateOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
if|#
directive|if
literal|0
block|void printModuleLevelGV(const GlobalVariable* GVar, raw_ostream&O);
endif|#
directive|endif
name|void
name|printAddrModeBasePlusOffset
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|int OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printGlobalOperand
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|int OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printJumpTable
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|int OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printConstantPool
argument_list|(
argument|const MachineInstr *MI
argument_list|,
argument|int OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getRegisterName
argument_list|(
argument|unsigned RegNo
argument_list|)
block|;
if|#
directive|if
literal|0
block|void EmitStartOfAsmFile(Module&M);
endif|#
directive|endif
block|}
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end of llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

