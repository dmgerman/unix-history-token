begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- HexagonBlockRanges.h ---------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEXAGON_BLOCK_RANGES_H
end_ifndef

begin_define
define|#
directive|define
name|HEXAGON_BLOCK_RANGES_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/BitVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCRegisterInfo.h"
end_include

begin_comment
comment|// For MCPhysReg.
end_comment

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Function
decl_stmt|;
name|class
name|HexagonSubtarget
decl_stmt|;
name|class
name|MachineBasicBlock
decl_stmt|;
name|class
name|MachineFunction
decl_stmt|;
name|class
name|MachineInstr
decl_stmt|;
name|class
name|MCInstrDesc
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|TargetInstrInfo
decl_stmt|;
name|class
name|TargetRegisterClass
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|Type
decl_stmt|;
struct|struct
name|HexagonBlockRanges
block|{
name|HexagonBlockRanges
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
expr_stmt|;
struct|struct
name|RegisterRef
block|{
name|unsigned
name|Reg
decl_stmt|,
name|Sub
decl_stmt|;
name|bool
name|operator
operator|<
operator|(
name|RegisterRef
name|R
operator|)
specifier|const
block|{
return|return
name|Reg
operator|<
name|R
operator|.
name|Reg
operator|||
operator|(
name|Reg
operator|==
name|R
operator|.
name|Reg
operator|&&
name|Sub
operator|<
name|R
operator|.
name|Sub
operator|)
return|;
block|}
block|}
struct|;
typedef|typedef
name|std
operator|::
name|set
operator|<
name|RegisterRef
operator|>
name|RegisterSet
expr_stmt|;
comment|// This is to represent an "index", which is an abstraction of a position
comment|// of an instruction within a basic block.
name|class
name|IndexType
block|{
name|public
label|:
enum_decl|enum :
name|unsigned
block|{
name|None
init|=
literal|0
block|,
name|Entry
init|=
literal|1
block|,
name|Exit
init|=
literal|2
block|,
name|First
init|=
literal|11
comment|// 10th + 1st
block|}
enum_decl|;
specifier|static
name|bool
name|isInstr
parameter_list|(
name|IndexType
name|X
parameter_list|)
block|{
return|return
name|X
operator|.
name|Index
operator|>=
name|First
return|;
block|}
name|IndexType
argument_list|()
operator|:
name|Index
argument_list|(
argument|None
argument_list|)
block|{}
name|IndexType
argument_list|(
argument|unsigned Idx
argument_list|)
operator|:
name|Index
argument_list|(
argument|Idx
argument_list|)
block|{}
name|operator
name|unsigned
argument_list|()
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
name|unsigned
name|x
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|==
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
name|unsigned
name|x
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|!=
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
expr_stmt|;
name|IndexType
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
name|unsigned
name|Idx
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|<
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|<=
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
expr_stmt|;
name|private
label|:
name|bool
name|operator
operator|>
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
expr_stmt|;
name|bool
name|operator
operator|>=
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
expr_stmt|;
name|unsigned
name|Index
decl_stmt|;
block|}
empty_stmt|;
comment|// A range of indices, essentially a representation of a live range.
comment|// This is also used to represent "dead ranges", i.e. ranges where a
comment|// register is dead.
name|class
name|IndexRange
range|:
name|public
name|std
operator|::
name|pair
operator|<
name|IndexType
decl_stmt|,
name|IndexType
decl|>
block|{
name|public
label|:
name|IndexRange
argument_list|()
operator|:
name|Fixed
argument_list|(
name|false
argument_list|)
operator|,
name|TiedEnd
argument_list|(
argument|false
argument_list|)
block|{}
name|IndexRange
argument_list|(
argument|IndexType Start
argument_list|,
argument|IndexType End
argument_list|,
argument|bool F = false
argument_list|,
argument|bool T = false
argument_list|)
operator|:
name|std
operator|::
name|pair
operator|<
name|IndexType
operator|,
name|IndexType
operator|>
operator|(
name|Start
operator|,
name|End
operator|)
operator|,
name|Fixed
argument_list|(
name|F
argument_list|)
operator|,
name|TiedEnd
argument_list|(
argument|T
argument_list|)
block|{}
name|IndexType
name|start
argument_list|()
specifier|const
block|{
return|return
name|first
return|;
block|}
name|IndexType
name|end
argument_list|()
specifier|const
block|{
return|return
name|second
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|IndexRange
operator|&
name|A
operator|)
specifier|const
block|{
return|return
name|start
argument_list|()
operator|<
name|A
operator|.
name|start
argument_list|()
return|;
block|}
name|bool
name|overlaps
argument_list|(
specifier|const
name|IndexRange
operator|&
name|A
argument_list|)
decl|const
decl_stmt|;
name|bool
name|contains
argument_list|(
specifier|const
name|IndexRange
operator|&
name|A
argument_list|)
decl|const
decl_stmt|;
name|void
name|merge
parameter_list|(
specifier|const
name|IndexRange
modifier|&
name|A
parameter_list|)
function_decl|;
name|bool
name|Fixed
decl_stmt|;
comment|// Can be renamed?  "Fixed" means "no".
name|bool
name|TiedEnd
decl_stmt|;
comment|// The end is not a use, but a dead def tied to a use.
name|private
label|:
name|void
name|setStart
parameter_list|(
specifier|const
name|IndexType
modifier|&
name|S
parameter_list|)
block|{
name|first
operator|=
name|S
expr_stmt|;
block|}
name|void
name|setEnd
parameter_list|(
specifier|const
name|IndexType
modifier|&
name|E
parameter_list|)
block|{
name|second
operator|=
name|E
expr_stmt|;
block|}
block|}
empty_stmt|;
comment|// A list of index ranges. This represents liveness of a register
comment|// in a basic block.
name|class
name|RangeList
range|:
name|public
name|std
operator|::
name|vector
operator|<
name|IndexRange
operator|>
block|{
name|public
operator|:
name|void
name|add
argument_list|(
argument|IndexType Start
argument_list|,
argument|IndexType End
argument_list|,
argument|bool Fixed
argument_list|,
argument|bool TiedEnd
argument_list|)
block|{
name|push_back
argument_list|(
name|IndexRange
argument_list|(
name|Start
argument_list|,
name|End
argument_list|,
name|Fixed
argument_list|,
name|TiedEnd
argument_list|)
argument_list|)
block|;     }
name|void
name|add
argument_list|(
argument|const IndexRange&Range
argument_list|)
block|{
name|push_back
argument_list|(
name|Range
argument_list|)
block|;     }
name|void
name|include
argument_list|(
specifier|const
name|RangeList
operator|&
name|RL
argument_list|)
block|;
name|void
name|unionize
argument_list|(
argument|bool MergeAdjacent = false
argument_list|)
block|;
name|void
name|subtract
argument_list|(
specifier|const
name|IndexRange
operator|&
name|Range
argument_list|)
block|;
name|private
operator|:
name|void
name|addsub
argument_list|(
specifier|const
name|IndexRange
operator|&
name|A
argument_list|,
specifier|const
name|IndexRange
operator|&
name|B
argument_list|)
block|;   }
decl_stmt|;
name|class
name|InstrIndexMap
block|{
name|public
label|:
name|InstrIndexMap
argument_list|(
name|MachineBasicBlock
operator|&
name|B
argument_list|)
expr_stmt|;
name|MachineInstr
modifier|*
name|getInstr
argument_list|(
name|IndexType
name|Idx
argument_list|)
decl|const
decl_stmt|;
name|IndexType
name|getIndex
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
operator|&
name|getBlock
argument_list|()
specifier|const
block|{
return|return
name|Block
return|;
block|}
name|IndexType
name|getPrevIndex
argument_list|(
name|IndexType
name|Idx
argument_list|)
decl|const
decl_stmt|;
name|IndexType
name|getNextIndex
argument_list|(
name|IndexType
name|Idx
argument_list|)
decl|const
decl_stmt|;
name|void
name|replaceInstr
parameter_list|(
name|MachineInstr
modifier|*
name|OldMI
parameter_list|,
name|MachineInstr
modifier|*
name|NewMI
parameter_list|)
function_decl|;
name|friend
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|InstrIndexMap
operator|&
name|Map
operator|)
expr_stmt|;
name|IndexType
name|First
decl_stmt|,
name|Last
decl_stmt|;
name|private
label|:
name|MachineBasicBlock
modifier|&
name|Block
decl_stmt|;
name|std
operator|::
name|map
operator|<
name|IndexType
operator|,
name|MachineInstr
operator|*
operator|>
name|Map
expr_stmt|;
block|}
empty_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|RegisterRef
operator|,
name|RangeList
operator|>
name|RegToRangeMap
expr_stmt|;
name|RegToRangeMap
name|computeLiveMap
parameter_list|(
name|InstrIndexMap
modifier|&
name|IndexMap
parameter_list|)
function_decl|;
name|RegToRangeMap
name|computeDeadMap
parameter_list|(
name|InstrIndexMap
modifier|&
name|IndexMap
parameter_list|,
name|RegToRangeMap
modifier|&
name|LiveMap
parameter_list|)
function_decl|;
specifier|static
name|RegisterSet
name|expandToSubRegs
parameter_list|(
name|RegisterRef
name|R
parameter_list|,
specifier|const
name|MachineRegisterInfo
modifier|&
name|MRI
parameter_list|,
specifier|const
name|TargetRegisterInfo
modifier|&
name|TRI
parameter_list|)
function_decl|;
struct|struct
name|PrintRangeMap
block|{
name|PrintRangeMap
argument_list|(
specifier|const
name|RegToRangeMap
operator|&
name|M
argument_list|,
specifier|const
name|TargetRegisterInfo
operator|&
name|I
argument_list|)
operator|:
name|Map
argument_list|(
name|M
argument_list|)
operator|,
name|TRI
argument_list|(
argument|I
argument_list|)
block|{}
name|friend
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|PrintRangeMap
operator|&
name|P
operator|)
expr_stmt|;
name|private
label|:
specifier|const
name|RegToRangeMap
modifier|&
name|Map
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|&
name|TRI
decl_stmt|;
block|}
struct|;
name|private
label|:
name|RegisterSet
name|getLiveIns
parameter_list|(
specifier|const
name|MachineBasicBlock
modifier|&
name|B
parameter_list|)
function_decl|;
name|void
name|computeInitialLiveRanges
parameter_list|(
name|InstrIndexMap
modifier|&
name|IndexMap
parameter_list|,
name|RegToRangeMap
modifier|&
name|LiveMap
parameter_list|)
function_decl|;
name|MachineFunction
modifier|&
name|MF
decl_stmt|;
specifier|const
name|HexagonSubtarget
modifier|&
name|HST
decl_stmt|;
specifier|const
name|TargetInstrInfo
modifier|&
name|TII
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|&
name|TRI
decl_stmt|;
name|BitVector
name|Reserved
decl_stmt|;
block|}
struct|;
specifier|inline
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
name|unsigned
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Index
operator|>=
name|First
argument_list|)
block|;
return|return
name|Index
return|;
block|}
specifier|inline
name|bool
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
operator|==
operator|(
name|unsigned
name|x
operator|)
specifier|const
block|{
return|return
name|Index
operator|==
name|x
return|;
block|}
specifier|inline
name|bool
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
operator|==
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
block|{
return|return
name|Index
operator|==
name|Idx
operator|.
name|Index
return|;
block|}
specifier|inline
name|bool
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
operator|!=
operator|(
name|unsigned
name|x
operator|)
specifier|const
block|{
return|return
name|Index
operator|!=
name|x
return|;
block|}
specifier|inline
name|bool
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
operator|!=
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
block|{
return|return
name|Index
operator|!=
name|Idx
operator|.
name|Index
return|;
block|}
specifier|inline
name|HexagonBlockRanges
operator|::
name|IndexType
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
name|assert
argument_list|(
name|Index
operator|!=
name|None
argument_list|)
block|;
name|assert
argument_list|(
name|Index
operator|!=
name|Exit
argument_list|)
block|;
if|if
condition|(
name|Index
operator|==
name|Entry
condition|)
name|Index
operator|=
name|First
expr_stmt|;
else|else
operator|++
name|Index
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|inline
name|bool
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
operator|<
operator|(
name|unsigned
name|Idx
operator|)
specifier|const
block|{
return|return
name|operator
operator|<
operator|(
name|IndexType
argument_list|(
name|Idx
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
operator|<
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
block|{
comment|// !(x< x).
if|if
condition|(
name|Index
operator|==
name|Idx
operator|.
name|Index
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_comment
comment|// !(None< x) for all x.
end_comment

begin_comment
comment|// !(x< None) for all x.
end_comment

begin_if
if|if
condition|(
name|Index
operator|==
name|None
operator|||
name|Idx
operator|.
name|Index
operator|==
name|None
condition|)
return|return
name|false
return|;
end_if

begin_comment
comment|// !(Exit< x) for all x.
end_comment

begin_comment
comment|// !(x< Entry) for all x.
end_comment

begin_if
if|if
condition|(
name|Index
operator|==
name|Exit
operator|||
name|Idx
operator|.
name|Index
operator|==
name|Entry
condition|)
return|return
name|false
return|;
end_if

begin_comment
comment|// Entry< x for all x != Entry.
end_comment

begin_comment
comment|// x< Exit for all x != Exit.
end_comment

begin_if
if|if
condition|(
name|Index
operator|==
name|Entry
operator|||
name|Idx
operator|.
name|Index
operator|==
name|Exit
condition|)
return|return
name|true
return|;
end_if

begin_return
return|return
name|Index
operator|<
name|Idx
operator|.
name|Index
return|;
end_return

begin_expr_stmt
unit|}  inline
name|bool
name|HexagonBlockRanges
operator|::
name|IndexType
operator|::
name|operator
operator|<=
operator|(
name|IndexType
name|Idx
operator|)
specifier|const
block|{
return|return
name|operator
operator|==
operator|(
name|Idx
operator|)
operator|||
name|operator
operator|<
operator|(
name|Idx
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
name|HexagonBlockRanges
operator|::
name|IndexType
name|Idx
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|HexagonBlockRanges
operator|::
name|IndexRange
operator|&
name|IR
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|HexagonBlockRanges
operator|::
name|RangeList
operator|&
name|RL
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|HexagonBlockRanges
operator|::
name|InstrIndexMap
operator|&
name|M
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|raw_ostream
operator|&
name|operator
operator|<<
operator|(
name|raw_ostream
operator|&
name|OS
operator|,
specifier|const
name|HexagonBlockRanges
operator|::
name|PrintRangeMap
operator|&
name|P
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

