begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=- HexagonFrameLowering.h - Define frame lowering for Hexagon --*- C++ -*--=//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_HEXAGON_HEXAGONFRAMELOWERING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_HEXAGON_HEXAGONFRAMELOWERING_H
end_define

begin_include
include|#
directive|include
file|"Hexagon.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetFrameLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|HexagonInstrInfo
decl_stmt|;
name|class
name|HexagonRegisterInfo
decl_stmt|;
name|class
name|HexagonFrameLowering
range|:
name|public
name|TargetFrameLowering
block|{
name|public
operator|:
name|explicit
name|HexagonFrameLowering
argument_list|()
operator|:
name|TargetFrameLowering
argument_list|(
argument|StackGrowsDown
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
argument|true
argument_list|)
block|{}
comment|// All of the prolog/epilog functionality, including saving and restoring
comment|// callee-saved registers is handled in emitPrologue. This is to have the
comment|// logic for shrink-wrapping in one place.
name|void
name|emitPrologue
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|MachineBasicBlock&MBB
argument_list|)
specifier|const
name|override
block|;
name|void
name|emitEpilogue
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|MachineBasicBlock&MBB
argument_list|)
specifier|const
name|override
block|{}
name|bool
name|spillCalleeSavedRegisters
argument_list|(
argument|MachineBasicBlock&MBB
argument_list|,
argument|MachineBasicBlock::iterator MI
argument_list|,
argument|const std::vector<CalleeSavedInfo>&CSI
argument_list|,
argument|const TargetRegisterInfo *TRI
argument_list|)
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|bool
name|restoreCalleeSavedRegisters
argument_list|(
argument|MachineBasicBlock&MBB
argument_list|,
argument|MachineBasicBlock::iterator MI
argument_list|,
argument|const std::vector<CalleeSavedInfo>&CSI
argument_list|,
argument|const TargetRegisterInfo *TRI
argument_list|)
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|void
name|eliminateCallFramePseudoInstr
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|MachineBasicBlock&MBB
argument_list|,
argument|MachineBasicBlock::iterator I
argument_list|)
specifier|const
name|override
block|;
name|void
name|processFunctionBeforeFrameFinalized
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|RegScavenger *RS = nullptr
argument_list|)
specifier|const
name|override
block|;
name|void
name|processFunctionBeforeCalleeSavedScan
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|RegScavenger *RS
argument_list|)
specifier|const
name|override
block|;
name|bool
name|targetHandlesStackFrameRounding
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|int
name|getFrameIndexOffset
argument_list|(
argument|const MachineFunction&MF
argument_list|,
argument|int FI
argument_list|)
specifier|const
name|override
block|;
name|bool
name|hasFP
argument_list|(
argument|const MachineFunction&MF
argument_list|)
specifier|const
name|override
block|;
specifier|const
name|SpillSlot
operator|*
name|getCalleeSavedSpillSlots
argument_list|(
argument|unsigned&NumEntries
argument_list|)
specifier|const
name|override
block|{
specifier|static
specifier|const
name|SpillSlot
name|Offsets
index|[]
operator|=
block|{
block|{
name|Hexagon
operator|::
name|R17
block|,
operator|-
literal|4
block|}
block|,
block|{
name|Hexagon
operator|::
name|R16
block|,
operator|-
literal|8
block|}
block|,
block|{
name|Hexagon
operator|::
name|D8
block|,
operator|-
literal|8
block|}
block|,
block|{
name|Hexagon
operator|::
name|R19
block|,
operator|-
literal|12
block|}
block|,
block|{
name|Hexagon
operator|::
name|R18
block|,
operator|-
literal|16
block|}
block|,
block|{
name|Hexagon
operator|::
name|D9
block|,
operator|-
literal|16
block|}
block|,
block|{
name|Hexagon
operator|::
name|R21
block|,
operator|-
literal|20
block|}
block|,
block|{
name|Hexagon
operator|::
name|R20
block|,
operator|-
literal|24
block|}
block|,
block|{
name|Hexagon
operator|::
name|D10
block|,
operator|-
literal|24
block|}
block|,
block|{
name|Hexagon
operator|::
name|R23
block|,
operator|-
literal|28
block|}
block|,
block|{
name|Hexagon
operator|::
name|R22
block|,
operator|-
literal|32
block|}
block|,
block|{
name|Hexagon
operator|::
name|D11
block|,
operator|-
literal|32
block|}
block|,
block|{
name|Hexagon
operator|::
name|R25
block|,
operator|-
literal|36
block|}
block|,
block|{
name|Hexagon
operator|::
name|R24
block|,
operator|-
literal|40
block|}
block|,
block|{
name|Hexagon
operator|::
name|D12
block|,
operator|-
literal|40
block|}
block|,
block|{
name|Hexagon
operator|::
name|R27
block|,
operator|-
literal|44
block|}
block|,
block|{
name|Hexagon
operator|::
name|R26
block|,
operator|-
literal|48
block|}
block|,
block|{
name|Hexagon
operator|::
name|D13
block|,
operator|-
literal|48
block|}
block|}
block|;
name|NumEntries
operator|=
name|array_lengthof
argument_list|(
name|Offsets
argument_list|)
block|;
return|return
name|Offsets
return|;
block|}
name|bool
name|assignCalleeSavedSpillSlots
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|const TargetRegisterInfo *TRI
argument_list|,
argument|std::vector<CalleeSavedInfo>&CSI
argument_list|)
specifier|const
name|override
block|;
name|bool
name|needsAligna
argument_list|(
argument|const MachineFunction&MF
argument_list|)
specifier|const
block|;
name|MachineInstr
operator|*
name|getAlignaInstr
argument_list|(
argument|MachineFunction&MF
argument_list|)
specifier|const
block|;
name|private
operator|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|CalleeSavedInfo
operator|>
name|CSIVect
expr_stmt|;
name|void
name|expandAlloca
argument_list|(
argument|MachineInstr *AI
argument_list|,
argument|const HexagonInstrInfo&TII
argument_list|,
argument|unsigned SP
argument_list|,
argument|unsigned CF
argument_list|)
specifier|const
decl_stmt|;
name|void
name|insertPrologueInBlock
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|)
decl|const
decl_stmt|;
name|void
name|insertEpilogueInBlock
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|)
decl|const
decl_stmt|;
name|bool
name|insertCSRSpillsInBlock
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
specifier|const
name|CSIVect
operator|&
name|CSI
argument_list|,
specifier|const
name|HexagonRegisterInfo
operator|&
name|HRI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|insertCSRRestoresInBlock
argument_list|(
name|MachineBasicBlock
operator|&
name|MBB
argument_list|,
specifier|const
name|CSIVect
operator|&
name|CSI
argument_list|,
specifier|const
name|HexagonRegisterInfo
operator|&
name|HRI
argument_list|)
decl|const
decl_stmt|;
name|void
name|adjustForCalleeSavedRegsSpillCall
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
decl|const
decl_stmt|;
name|bool
name|replacePredRegPseudoSpillCode
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
decl|const
decl_stmt|;
name|bool
name|replaceVecPredRegPseudoSpillCode
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
decl|const
decl_stmt|;
name|void
name|findShrunkPrologEpilog
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
name|MachineBasicBlock
operator|*
operator|&
name|PrologB
argument_list|,
name|MachineBasicBlock
operator|*
operator|&
name|EpilogB
argument_list|)
decl|const
decl_stmt|;
name|bool
name|shouldInlineCSR
argument_list|(
name|llvm
operator|::
name|MachineFunction
operator|&
argument_list|,
specifier|const
name|CSIVect
operator|&
argument_list|)
decl|const
decl_stmt|;
name|bool
name|useSpillFunction
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
specifier|const
name|CSIVect
operator|&
name|CSI
argument_list|)
decl|const
decl_stmt|;
name|bool
name|useRestoreFunction
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
specifier|const
name|CSIVect
operator|&
name|CSI
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

