begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- RDFLiveness.h ----------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Recalculate the liveness information given a data flow graph.
end_comment

begin_comment
comment|// This includes block live-ins and kill flags.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|RDF_LIVENESS_H
end_ifndef

begin_define
define|#
directive|define
name|RDF_LIVENESS_H
end_define

begin_include
include|#
directive|include
file|"RDFGraph.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|using
name|namespace
name|llvm
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineBasicBlock
decl_stmt|;
name|class
name|MachineFunction
decl_stmt|;
name|class
name|MachineRegisterInfo
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|MachineDominatorTree
decl_stmt|;
name|class
name|MachineDominanceFrontier
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|rdf
block|{
struct|struct
name|Liveness
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|map
operator|<
name|MachineBasicBlock
operator|*
operator|,
name|RegisterSet
operator|>
name|LiveMapType
expr_stmt|;
typedef|typedef
name|std
operator|::
name|map
operator|<
name|RegisterRef
operator|,
name|NodeSet
operator|>
name|RefMap
expr_stmt|;
name|Liveness
argument_list|(
name|MachineRegisterInfo
operator|&
name|mri
argument_list|,
specifier|const
name|DataFlowGraph
operator|&
name|g
argument_list|)
operator|:
name|DFG
argument_list|(
name|g
argument_list|)
operator|,
name|TRI
argument_list|(
name|g
operator|.
name|getTRI
argument_list|()
argument_list|)
operator|,
name|MDT
argument_list|(
name|g
operator|.
name|getDT
argument_list|()
argument_list|)
operator|,
name|MDF
argument_list|(
name|g
operator|.
name|getDF
argument_list|()
argument_list|)
operator|,
name|RAI
argument_list|(
name|g
operator|.
name|getRAI
argument_list|()
argument_list|)
operator|,
name|MRI
argument_list|(
name|mri
argument_list|)
operator|,
name|Empty
argument_list|()
operator|,
name|Trace
argument_list|(
argument|false
argument_list|)
block|{}
name|NodeList
name|getAllReachingDefs
argument_list|(
argument|RegisterRef RefRR
argument_list|,
argument|NodeAddr<RefNode*> RefA
argument_list|,
argument|bool FullChain = false
argument_list|,
argument|const RegisterSet&DefRRs = RegisterSet()
argument_list|)
expr_stmt|;
name|NodeList
name|getAllReachingDefs
argument_list|(
name|NodeAddr
operator|<
name|RefNode
operator|*
operator|>
name|RefA
argument_list|)
decl_stmt|;
name|LiveMapType
modifier|&
name|getLiveMap
parameter_list|()
block|{
return|return
name|LiveMap
return|;
block|}
specifier|const
name|LiveMapType
operator|&
name|getLiveMap
argument_list|()
specifier|const
block|{
return|return
name|LiveMap
return|;
block|}
specifier|const
name|RefMap
modifier|&
name|getRealUses
argument_list|(
name|NodeId
name|P
argument_list|)
decl|const
block|{
name|auto
name|F
init|=
name|RealUseMap
operator|.
name|find
argument_list|(
name|P
argument_list|)
decl_stmt|;
return|return
name|F
operator|==
name|RealUseMap
operator|.
name|end
argument_list|()
condition|?
name|Empty
else|:
name|F
operator|->
name|second
return|;
block|}
name|void
name|computePhiInfo
parameter_list|()
function_decl|;
name|void
name|computeLiveIns
parameter_list|()
function_decl|;
name|void
name|resetLiveIns
parameter_list|()
function_decl|;
name|void
name|resetKills
parameter_list|()
function_decl|;
name|void
name|resetKills
parameter_list|(
name|MachineBasicBlock
modifier|*
name|B
parameter_list|)
function_decl|;
name|void
name|trace
parameter_list|(
name|bool
name|T
parameter_list|)
block|{
name|Trace
operator|=
name|T
expr_stmt|;
block|}
name|private
label|:
specifier|const
name|DataFlowGraph
modifier|&
name|DFG
decl_stmt|;
specifier|const
name|TargetRegisterInfo
modifier|&
name|TRI
decl_stmt|;
specifier|const
name|MachineDominatorTree
modifier|&
name|MDT
decl_stmt|;
specifier|const
name|MachineDominanceFrontier
modifier|&
name|MDF
decl_stmt|;
specifier|const
name|RegisterAliasInfo
modifier|&
name|RAI
decl_stmt|;
name|MachineRegisterInfo
modifier|&
name|MRI
decl_stmt|;
name|LiveMapType
name|LiveMap
decl_stmt|;
specifier|const
name|RefMap
name|Empty
decl_stmt|;
name|bool
name|Trace
decl_stmt|;
comment|// Cache of mapping from node ids (for RefNodes) to the containing
comment|// basic blocks. Not computing it each time for each node reduces
comment|// the liveness calculation time by a large fraction.
typedef|typedef
name|DenseMap
operator|<
name|NodeId
operator|,
name|MachineBasicBlock
operator|*
operator|>
name|NodeBlockMap
expr_stmt|;
name|NodeBlockMap
name|NBMap
decl_stmt|;
comment|// Phi information:
comment|//
comment|// map: NodeId -> (map: RegisterRef -> NodeSet)
comment|//      phi id -> (map: register -> set of reached non-phi uses)
name|std
operator|::
name|map
operator|<
name|NodeId
operator|,
name|RefMap
operator|>
name|RealUseMap
expr_stmt|;
comment|// Inverse iterated dominance frontier.
name|std
operator|::
name|map
operator|<
name|MachineBasicBlock
operator|*
operator|,
name|std
operator|::
name|set
operator|<
name|MachineBasicBlock
operator|*
operator|>>
name|IIDF
expr_stmt|;
comment|// Live on entry.
name|std
operator|::
name|map
operator|<
name|MachineBasicBlock
operator|*
operator|,
name|RefMap
operator|>
name|PhiLON
expr_stmt|;
comment|// Phi uses are considered to be located at the end of the block that
comment|// they are associated with. The reaching def of a phi use dominates the
comment|// block that the use corresponds to, but not the block that contains
comment|// the phi itself. To include these uses in the liveness propagation (up
comment|// the dominator tree), create a map: block -> set of uses live on exit.
name|std
operator|::
name|map
operator|<
name|MachineBasicBlock
operator|*
operator|,
name|RefMap
operator|>
name|PhiLOX
expr_stmt|;
name|bool
name|isRestricted
argument_list|(
name|NodeAddr
operator|<
name|InstrNode
operator|*
operator|>
name|IA
argument_list|,
name|NodeAddr
operator|<
name|RefNode
operator|*
operator|>
name|RA
argument_list|,
name|RegisterRef
name|RR
argument_list|)
decl|const
decl_stmt|;
name|RegisterRef
name|getRestrictedRegRef
argument_list|(
name|NodeAddr
operator|<
name|RefNode
operator|*
operator|>
name|RA
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getPhysReg
argument_list|(
name|RegisterRef
name|RR
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|getBlockWithRef
argument_list|(
name|NodeId
name|RN
argument_list|)
decl|const
decl_stmt|;
name|void
name|traverse
parameter_list|(
name|MachineBasicBlock
modifier|*
name|B
parameter_list|,
name|RefMap
modifier|&
name|LiveIn
parameter_list|)
function_decl|;
name|void
name|emptify
parameter_list|(
name|RefMap
modifier|&
name|M
parameter_list|)
function_decl|;
block|}
struct|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// RDF_LIVENESS_H
end_comment

end_unit

