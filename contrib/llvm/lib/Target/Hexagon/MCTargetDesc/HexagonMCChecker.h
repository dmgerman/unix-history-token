begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----- HexagonMCChecker.h - Instruction bundle checking ---------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This implements the checking of insns inside a bundle according to the
end_comment

begin_comment
comment|// packet constraint rules of the Hexagon ISA.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HEXAGONMCCHECKER_H
end_ifndef

begin_define
define|#
directive|define
name|HEXAGONMCCHECKER_H
end_define

begin_include
include|#
directive|include
file|"MCTargetDesc/HexagonMCShuffler.h"
end_include

begin_include
include|#
directive|include
file|<queue>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_decl_stmt
name|using
name|namespace
name|llvm
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCOperandInfo
decl_stmt|;
comment|/// Check for a valid bundle.
name|class
name|HexagonMCChecker
block|{
name|MCContext
modifier|&
name|Context
decl_stmt|;
name|MCInst
modifier|&
name|MCB
decl_stmt|;
specifier|const
name|MCRegisterInfo
modifier|&
name|RI
decl_stmt|;
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
decl_stmt|;
name|MCSubtargetInfo
specifier|const
modifier|&
name|STI
decl_stmt|;
name|bool
name|ReportErrors
decl_stmt|;
comment|/// Set of definitions: register #, if predicated, if predicated true.
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|bool
operator|>
name|PredSense
expr_stmt|;
specifier|static
specifier|const
name|PredSense
name|Unconditional
decl_stmt|;
typedef|typedef
name|std
operator|::
name|multiset
operator|<
name|PredSense
operator|>
name|PredSet
expr_stmt|;
typedef|typedef
name|std
operator|::
name|multiset
operator|<
name|PredSense
operator|>
operator|::
name|iterator
name|PredSetIterator
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
operator|,
name|PredSet
operator|>
operator|::
name|iterator
name|DefsIterator
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
operator|,
name|PredSet
operator|>
name|Defs
expr_stmt|;
comment|/// Information about how a new-value register is defined or used:
comment|///   PredReg = predicate register, 0 if use/def not predicated,
comment|///   Cond    = true/false for if(PredReg)/if(!PredReg) respectively,
comment|///   IsFloat = true if definition produces a floating point value
comment|///             (not valid for uses),
comment|///   IsNVJ   = true if the use is a new-value branch (not valid for
comment|///             definitions).
struct|struct
name|NewSense
block|{
name|unsigned
name|PredReg
decl_stmt|;
name|bool
name|IsFloat
decl_stmt|,
name|IsNVJ
decl_stmt|,
name|Cond
decl_stmt|;
comment|// The special-case "constructors":
specifier|static
name|NewSense
name|Jmp
parameter_list|(
name|bool
name|isNVJ
parameter_list|)
block|{
name|NewSense
name|NS
init|=
block|{
comment|/*PredReg=*/
literal|0
block|,
comment|/*IsFloat=*/
name|false
block|,
comment|/*IsNVJ=*/
name|isNVJ
block|,
comment|/*Cond=*/
name|false
block|}
decl_stmt|;
return|return
name|NS
return|;
block|}
specifier|static
name|NewSense
name|Use
parameter_list|(
name|unsigned
name|PR
parameter_list|,
name|bool
name|True
parameter_list|)
block|{
name|NewSense
name|NS
init|=
block|{
comment|/*PredReg=*/
name|PR
block|,
comment|/*IsFloat=*/
name|false
block|,
comment|/*IsNVJ=*/
name|false
block|,
comment|/*Cond=*/
name|True
block|}
decl_stmt|;
return|return
name|NS
return|;
block|}
specifier|static
name|NewSense
name|Def
parameter_list|(
name|unsigned
name|PR
parameter_list|,
name|bool
name|True
parameter_list|,
name|bool
name|Float
parameter_list|)
block|{
name|NewSense
name|NS
init|=
block|{
comment|/*PredReg=*/
name|PR
block|,
comment|/*IsFloat=*/
name|Float
block|,
comment|/*IsNVJ=*/
name|false
block|,
comment|/*Cond=*/
name|True
block|}
decl_stmt|;
return|return
name|NS
return|;
block|}
block|}
struct|;
comment|/// Set of definitions that produce new register:
typedef|typedef
name|llvm
operator|::
name|SmallVector
operator|<
name|NewSense
operator|,
literal|2
operator|>
name|NewSenseList
expr_stmt|;
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
operator|,
name|NewSenseList
operator|>
operator|::
name|iterator
name|NewDefsIterator
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
operator|,
name|NewSenseList
operator|>
name|NewDefs
expr_stmt|;
comment|/// Set of weak definitions whose clashes should be enforced selectively.
typedef|typedef
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
operator|::
name|iterator
name|SoftDefsIterator
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
name|SoftDefs
expr_stmt|;
comment|/// Set of temporary definitions not committed to the register file.
typedef|typedef
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
operator|::
name|iterator
name|TmpDefsIterator
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
name|TmpDefs
expr_stmt|;
comment|/// Set of new predicates used.
typedef|typedef
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
operator|::
name|iterator
name|NewPredsIterator
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
name|NewPreds
expr_stmt|;
comment|/// Set of predicates defined late.
typedef|typedef
name|std
operator|::
name|multiset
operator|<
name|unsigned
operator|>
operator|::
name|iterator
name|LatePredsIterator
expr_stmt|;
name|std
operator|::
name|multiset
operator|<
name|unsigned
operator|>
name|LatePreds
expr_stmt|;
comment|/// Set of uses.
typedef|typedef
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
operator|::
name|iterator
name|UsesIterator
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
name|Uses
expr_stmt|;
comment|/// Set of new values used: new register, if new-value jump.
typedef|typedef
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
operator|,
name|NewSense
operator|>
operator|::
name|iterator
name|NewUsesIterator
expr_stmt|;
name|llvm
operator|::
name|DenseMap
operator|<
name|unsigned
operator|,
name|NewSense
operator|>
name|NewUses
expr_stmt|;
comment|/// Pre-defined set of read-only registers.
typedef|typedef
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
operator|::
name|iterator
name|ReadOnlyIterator
expr_stmt|;
name|std
operator|::
name|set
operator|<
name|unsigned
operator|>
name|ReadOnly
expr_stmt|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|(
name|MCInst
specifier|const
modifier|&
parameter_list|)
function_decl|;
name|void
name|initReg
parameter_list|(
name|MCInst
specifier|const
modifier|&
parameter_list|,
name|unsigned
parameter_list|,
name|unsigned
modifier|&
name|PredReg
parameter_list|,
name|bool
modifier|&
name|isTrue
parameter_list|)
function_decl|;
name|bool
name|registerUsed
parameter_list|(
name|unsigned
name|Register
parameter_list|)
function_decl|;
comment|// Checks performed.
name|bool
name|checkBranches
parameter_list|()
function_decl|;
name|bool
name|checkPredicates
parameter_list|()
function_decl|;
name|bool
name|checkNewValues
parameter_list|()
function_decl|;
name|bool
name|checkRegisters
parameter_list|()
function_decl|;
name|bool
name|checkRegistersReadOnly
parameter_list|()
function_decl|;
name|bool
name|checkEndloopBranches
parameter_list|()
function_decl|;
name|void
name|checkRegisterCurDefs
parameter_list|()
function_decl|;
name|bool
name|checkSolo
parameter_list|()
function_decl|;
name|bool
name|checkShuffle
parameter_list|()
function_decl|;
name|bool
name|checkSlots
parameter_list|()
function_decl|;
name|bool
name|checkAXOK
parameter_list|()
function_decl|;
specifier|static
name|void
name|compoundRegisterMap
parameter_list|(
name|unsigned
modifier|&
parameter_list|)
function_decl|;
name|bool
name|isPredicateRegister
argument_list|(
name|unsigned
name|R
argument_list|)
decl|const
block|{
return|return
operator|(
name|Hexagon
operator|::
name|P0
operator|==
name|R
operator|||
name|Hexagon
operator|::
name|P1
operator|==
name|R
operator|||
name|Hexagon
operator|::
name|P2
operator|==
name|R
operator|||
name|Hexagon
operator|::
name|P3
operator|==
name|R
operator|)
return|;
block|}
empty_stmt|;
name|bool
name|isLoopRegister
argument_list|(
name|unsigned
name|R
argument_list|)
decl|const
block|{
return|return
operator|(
name|Hexagon
operator|::
name|SA0
operator|==
name|R
operator|||
name|Hexagon
operator|::
name|LC0
operator|==
name|R
operator|||
name|Hexagon
operator|::
name|SA1
operator|==
name|R
operator|||
name|Hexagon
operator|::
name|LC1
operator|==
name|R
operator|)
return|;
block|}
empty_stmt|;
name|bool
name|hasValidNewValueDef
argument_list|(
specifier|const
name|NewSense
operator|&
name|Use
argument_list|,
specifier|const
name|NewSenseList
operator|&
name|Defs
argument_list|)
decl|const
decl_stmt|;
name|public
label|:
name|explicit
name|HexagonMCChecker
parameter_list|(
name|MCContext
modifier|&
name|Context
parameter_list|,
name|MCInstrInfo
specifier|const
modifier|&
name|MCII
parameter_list|,
name|MCSubtargetInfo
specifier|const
modifier|&
name|STI
parameter_list|,
name|MCInst
modifier|&
name|mcb
parameter_list|,
specifier|const
name|MCRegisterInfo
modifier|&
name|ri
parameter_list|,
name|bool
name|ReportErrors
init|=
name|true
parameter_list|)
function_decl|;
name|bool
name|check
parameter_list|(
name|bool
name|FullCheck
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|reportErrorRegisters
parameter_list|(
name|unsigned
name|Register
parameter_list|)
function_decl|;
name|void
name|reportErrorNewValue
parameter_list|(
name|unsigned
name|Register
parameter_list|)
function_decl|;
name|void
name|reportError
argument_list|(
name|SMLoc
name|Loc
argument_list|,
name|llvm
operator|::
name|Twine
specifier|const
operator|&
name|Msg
argument_list|)
decl_stmt|;
name|void
name|reportError
argument_list|(
name|llvm
operator|::
name|Twine
specifier|const
operator|&
name|Msg
argument_list|)
decl_stmt|;
name|void
name|reportWarning
argument_list|(
name|llvm
operator|::
name|Twine
specifier|const
operator|&
name|Msg
argument_list|)
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// HEXAGONMCCHECKER_H
end_comment

end_unit

