begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- HexagonVarargsCallingConvention.h - Calling Conventions -*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the functions that assign locations to outgoing function
end_comment

begin_comment
comment|// arguments. Adapted from the target independent version but this handles
end_comment

begin_comment
comment|// calls to varargs functions
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_decl_stmt
specifier|static
name|bool
name|RetCC_Hexagon32_VarArgs
argument_list|(
name|unsigned
name|ValNo
argument_list|,
name|EVT
name|ValVT
argument_list|,
name|EVT
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
name|ArgFlags
argument_list|,
name|Hexagon_CCState
operator|&
name|State
argument_list|,
name|int
name|NonVarArgsParams
argument_list|,
name|int
name|CurrentParam
argument_list|,
name|bool
name|ForceMem
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|CC_Hexagon32_VarArgs
argument_list|(
name|unsigned
name|ValNo
argument_list|,
name|EVT
name|ValVT
argument_list|,
name|EVT
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
name|ArgFlags
argument_list|,
name|Hexagon_CCState
operator|&
name|State
argument_list|,
name|int
name|NonVarArgsParams
argument_list|,
name|int
name|CurrentParam
argument_list|,
name|bool
name|ForceMem
argument_list|)
block|{
name|unsigned
name|ByValSize
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|ArgFlags
operator|.
name|isByVal
argument_list|()
operator|&&
operator|(
operator|(
name|ByValSize
operator|=
name|ArgFlags
operator|.
name|getByValSize
argument_list|()
operator|)
operator|>
operator|(
name|MVT
argument_list|(
name|MVT
operator|::
name|i64
argument_list|)
operator|.
name|getSizeInBits
argument_list|()
operator|/
literal|8
operator|)
operator|)
condition|)
block|{
name|ForceMem
operator|=
name|true
expr_stmt|;
block|}
comment|// Only assign registers for named (non-varargs) arguments
if|if
condition|(
operator|!
name|ForceMem
operator|&&
operator|(
operator|(
name|NonVarArgsParams
operator|==
operator|-
literal|1
operator|)
operator|||
operator|(
name|CurrentParam
operator|<=
name|NonVarArgsParams
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|i32
operator|||
name|LocVT
operator|==
name|MVT
operator|::
name|i16
operator|||
name|LocVT
operator|==
name|MVT
operator|::
name|i8
operator|||
name|LocVT
operator|==
name|MVT
operator|::
name|f32
condition|)
block|{
specifier|static
specifier|const
name|unsigned
name|RegList1
index|[]
init|=
block|{
name|Hexagon
operator|::
name|R0
block|,
name|Hexagon
operator|::
name|R1
block|,
name|Hexagon
operator|::
name|R2
block|,
name|Hexagon
operator|::
name|R3
block|,
name|Hexagon
operator|::
name|R4
block|,
name|Hexagon
operator|::
name|R5
block|}
decl_stmt|;
if|if
condition|(
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList1
argument_list|,
literal|6
argument_list|)
condition|)
block|{
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|Reg
argument_list|,
name|LocVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|i64
operator|||
name|LocVT
operator|==
name|MVT
operator|::
name|f64
condition|)
block|{
specifier|static
specifier|const
name|unsigned
name|RegList2
index|[]
init|=
block|{
name|Hexagon
operator|::
name|D0
block|,
name|Hexagon
operator|::
name|D1
block|,
name|Hexagon
operator|::
name|D2
block|}
decl_stmt|;
if|if
condition|(
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList2
argument_list|,
literal|3
argument_list|)
condition|)
block|{
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|Reg
argument_list|,
name|LocVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
block|}
specifier|const
name|Type
modifier|*
name|ArgTy
init|=
name|LocVT
operator|.
name|getTypeForEVT
argument_list|(
name|State
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|unsigned
name|Alignment
init|=
name|State
operator|.
name|getTarget
argument_list|()
operator|.
name|getDataLayout
argument_list|()
operator|->
name|getABITypeAlignment
argument_list|(
name|ArgTy
argument_list|)
decl_stmt|;
name|unsigned
name|Size
init|=
name|State
operator|.
name|getTarget
argument_list|()
operator|.
name|getDataLayout
argument_list|()
operator|->
name|getTypeSizeInBits
argument_list|(
name|ArgTy
argument_list|)
operator|/
literal|8
decl_stmt|;
comment|// If it's passed by value, then we need the size of the aggregate not of
comment|// the pointer.
if|if
condition|(
name|ArgFlags
operator|.
name|isByVal
argument_list|()
condition|)
block|{
name|Size
operator|=
name|ByValSize
expr_stmt|;
comment|// Hexagon_TODO: Get the alignment of the contained type here.
name|Alignment
operator|=
literal|8
expr_stmt|;
block|}
name|unsigned
name|Offset3
init|=
name|State
operator|.
name|AllocateStack
argument_list|(
name|Size
argument_list|,
name|Alignment
argument_list|)
decl_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getMem
argument_list|(
name|ValNo
argument_list|,
name|ValVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|Offset3
argument_list|,
name|LocVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|bool
name|RetCC_Hexagon32_VarArgs
argument_list|(
name|unsigned
name|ValNo
argument_list|,
name|EVT
name|ValVT
argument_list|,
name|EVT
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
name|ArgFlags
argument_list|,
name|Hexagon_CCState
operator|&
name|State
argument_list|,
name|int
name|NonVarArgsParams
argument_list|,
name|int
name|CurrentParam
argument_list|,
name|bool
name|ForceMem
argument_list|)
block|{
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|i32
operator|||
name|LocVT
operator|==
name|MVT
operator|::
name|f32
condition|)
block|{
specifier|static
specifier|const
name|unsigned
name|RegList1
index|[]
init|=
block|{
name|Hexagon
operator|::
name|R0
block|,
name|Hexagon
operator|::
name|R1
block|,
name|Hexagon
operator|::
name|R2
block|,
name|Hexagon
operator|::
name|R3
block|,
name|Hexagon
operator|::
name|R4
block|,
name|Hexagon
operator|::
name|R5
block|}
decl_stmt|;
if|if
condition|(
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList1
argument_list|,
literal|6
argument_list|)
condition|)
block|{
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|Reg
argument_list|,
name|LocVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
if|if
condition|(
name|LocVT
operator|==
name|MVT
operator|::
name|i64
operator|||
name|LocVT
operator|==
name|MVT
operator|::
name|f64
condition|)
block|{
specifier|static
specifier|const
name|unsigned
name|RegList2
index|[]
init|=
block|{
name|Hexagon
operator|::
name|D0
block|,
name|Hexagon
operator|::
name|D1
block|,
name|Hexagon
operator|::
name|D2
block|}
decl_stmt|;
if|if
condition|(
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|RegList2
argument_list|,
literal|3
argument_list|)
condition|)
block|{
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getReg
argument_list|(
name|ValNo
argument_list|,
name|ValVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|Reg
argument_list|,
name|LocVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
specifier|const
name|Type
modifier|*
name|ArgTy
init|=
name|LocVT
operator|.
name|getTypeForEVT
argument_list|(
name|State
operator|.
name|getContext
argument_list|()
argument_list|)
decl_stmt|;
name|unsigned
name|Alignment
init|=
name|State
operator|.
name|getTarget
argument_list|()
operator|.
name|getDataLayout
argument_list|()
operator|->
name|getABITypeAlignment
argument_list|(
name|ArgTy
argument_list|)
decl_stmt|;
name|unsigned
name|Size
init|=
name|State
operator|.
name|getTarget
argument_list|()
operator|.
name|getDataLayout
argument_list|()
operator|->
name|getTypeSizeInBits
argument_list|(
name|ArgTy
argument_list|)
operator|/
literal|8
decl_stmt|;
name|unsigned
name|Offset3
init|=
name|State
operator|.
name|AllocateStack
argument_list|(
name|Size
argument_list|,
name|Alignment
argument_list|)
decl_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|CCValAssign
operator|::
name|getMem
argument_list|(
name|ValNo
argument_list|,
name|ValVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|Offset3
argument_list|,
name|LocVT
operator|.
name|getSimpleVT
argument_list|()
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
end_decl_stmt

end_unit

