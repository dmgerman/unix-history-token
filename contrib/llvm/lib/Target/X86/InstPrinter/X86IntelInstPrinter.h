begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- X86IntelInstPrinter.h - Convert X86 MCInst to assembly syntax -----===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class prints an X86 MCInst to intel style .s file syntax.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|X86_INTEL_INST_PRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|X86_INTEL_INST_PRINTER_H
end_define

begin_include
include|#
directive|include
file|"llvm/MC/MCInstPrinter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCOperand
decl_stmt|;
name|class
name|X86IntelInstPrinter
range|:
name|public
name|MCInstPrinter
block|{
name|public
operator|:
name|X86IntelInstPrinter
argument_list|(
specifier|const
name|MCAsmInfo
operator|&
name|MAI
argument_list|)
operator|:
name|MCInstPrinter
argument_list|(
argument|MAI
argument_list|)
block|{}
name|virtual
name|void
name|printRegName
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|unsigned RegNo
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|printInst
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|OS
argument_list|)
block|;
name|virtual
name|StringRef
name|getOpcodeName
argument_list|(
argument|unsigned Opcode
argument_list|)
specifier|const
block|;
comment|// Autogenerated by tblgen.
name|void
name|printInstruction
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getRegisterName
argument_list|(
argument|unsigned RegNo
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getInstructionName
argument_list|(
argument|unsigned Opcode
argument_list|)
block|;
name|void
name|printOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printMemReference
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned Op
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printSSECC
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned Op
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|print_pcrel_imm
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printopaquemem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"OPAQUE PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printi8mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"BYTE PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printi16mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"WORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printi32mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"DWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printi64mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"QWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printi128mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"XMMWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printi256mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"YMMWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printf32mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"DWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printf64mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"QWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printf80mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"XWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printf128mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"XMMWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printf256mem
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|O
operator|<<
literal|"YMMWORD PTR "
block|;
name|printMemReference
argument_list|(
name|MI
argument_list|,
name|OpNo
argument_list|,
name|O
argument_list|)
block|;   }
block|}
decl_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

