begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- X86RegisterBankInfo ---------------------------------------*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file declares the targeting of the RegisterBankInfo class for X86.
end_comment

begin_comment
comment|/// \todo This should be generated by TableGen.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_X86_X86REGISTERBANKINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_X86_X86REGISTERBANKINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/GlobalISel/RegisterBankInfo.h"
end_include

begin_define
define|#
directive|define
name|GET_REGBANK_DECLARATIONS
end_define

begin_include
include|#
directive|include
file|"X86GenRegisterBank.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|LLT
decl_stmt|;
name|class
name|X86GenRegisterBankInfo
range|:
name|public
name|RegisterBankInfo
block|{
name|protected
operator|:
define|#
directive|define
name|GET_TARGET_REGBANK_CLASS
include|#
directive|include
file|"X86GenRegisterBank.inc"
define|#
directive|define
name|GET_TARGET_REGBANK_INFO_CLASS
include|#
directive|include
file|"X86GenRegisterBankInfo.def"
specifier|static
name|RegisterBankInfo
operator|::
name|PartialMapping
name|PartMappings
index|[]
block|;
specifier|static
name|RegisterBankInfo
operator|::
name|ValueMapping
name|ValMappings
index|[]
block|;
specifier|static
name|PartialMappingIdx
name|getPartialMappingIdx
argument_list|(
argument|const LLT&Ty
argument_list|,
argument|bool isFP
argument_list|)
block|;
specifier|static
specifier|const
name|RegisterBankInfo
operator|::
name|ValueMapping
operator|*
name|getValueMapping
argument_list|(
argument|PartialMappingIdx Idx
argument_list|,
argument|unsigned NumOperands
argument_list|)
block|; }
decl_stmt|;
name|class
name|TargetRegisterInfo
decl_stmt|;
comment|/// This class provides the information for the target register banks.
name|class
name|X86RegisterBankInfo
name|final
range|:
name|public
name|X86GenRegisterBankInfo
block|{
name|private
operator|:
comment|/// Get an instruction mapping.
comment|/// \return An InstructionMappings with a statically allocated
comment|/// OperandsMapping.
specifier|static
name|InstructionMapping
name|getSameOperandsMapping
argument_list|(
argument|const MachineInstr&MI
argument_list|,
argument|bool isFP
argument_list|)
block|;
comment|/// Track the bank of each instruction operand(register)
specifier|static
name|void
name|getInstrPartialMappingIdxs
argument_list|(
argument|const MachineInstr&MI
argument_list|,
argument|const MachineRegisterInfo&MRI
argument_list|,
argument|const bool isFP
argument_list|,
argument|SmallVectorImpl<PartialMappingIdx>&OpRegBankIdx
argument_list|)
block|;
comment|/// Construct the instruction ValueMapping from PartialMappingIdxs
comment|/// \return true if mapping succeeded.
specifier|static
name|bool
name|getInstrValueMapping
argument_list|(
specifier|const
name|MachineInstr
operator|&
name|MI
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|PartialMappingIdx
operator|>
operator|&
name|OpRegBankIdx
argument_list|,
name|SmallVectorImpl
operator|<
specifier|const
name|ValueMapping
operator|*
operator|>
operator|&
name|OpdsMapping
argument_list|)
block|;
name|public
operator|:
name|X86RegisterBankInfo
argument_list|(
specifier|const
name|TargetRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
specifier|const
name|RegisterBank
operator|&
name|getRegBankFromRegClass
argument_list|(
argument|const TargetRegisterClass&RC
argument_list|)
specifier|const
name|override
block|;
name|InstructionMappings
name|getInstrAlternativeMappings
argument_list|(
argument|const MachineInstr&MI
argument_list|)
specifier|const
name|override
block|;
comment|/// See RegisterBankInfo::applyMapping.
name|void
name|applyMappingImpl
argument_list|(
argument|const OperandsMapper&OpdMapper
argument_list|)
specifier|const
name|override
block|;
name|InstructionMapping
name|getInstrMapping
argument_list|(
argument|const MachineInstr&MI
argument_list|)
specifier|const
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

