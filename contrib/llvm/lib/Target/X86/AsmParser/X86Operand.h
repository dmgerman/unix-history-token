begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- X86Operand.h - Parsed X86 machine instruction ------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_X86_ASMPARSER_X86OPERAND_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_X86_ASMPARSER_X86OPERAND_H
end_define

begin_include
include|#
directive|include
file|"X86AsmParserCommon.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCExpr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInst.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCParser/MCParsedAsmOperand.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Casting.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/SMLoc.h"
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// X86Operand - Instances of this class represent a parsed X86 machine
comment|/// instruction.
name|struct
name|X86Operand
range|:
name|public
name|MCParsedAsmOperand
block|{   enum
name|KindTy
block|{
name|Token
block|,
name|Register
block|,
name|Immediate
block|,
name|Memory
block|}
name|Kind
block|;
name|SMLoc
name|StartLoc
block|,
name|EndLoc
block|;
name|SMLoc
name|OffsetOfLoc
block|;
name|StringRef
name|SymName
block|;
name|void
operator|*
name|OpDecl
block|;
name|bool
name|AddressOf
block|;    struct
name|TokOp
block|{
specifier|const
name|char
operator|*
name|Data
block|;
name|unsigned
name|Length
block|;   }
block|;    struct
name|RegOp
block|{
name|unsigned
name|RegNo
block|;   }
block|;    struct
name|ImmOp
block|{
specifier|const
name|MCExpr
operator|*
name|Val
block|;   }
block|;    struct
name|MemOp
block|{
name|unsigned
name|SegReg
block|;
specifier|const
name|MCExpr
operator|*
name|Disp
block|;
name|unsigned
name|BaseReg
block|;
name|unsigned
name|IndexReg
block|;
name|unsigned
name|Scale
block|;
name|unsigned
name|Size
block|;
name|unsigned
name|ModeSize
block|;
comment|/// If the memory operand is unsized and there are multiple instruction
comment|/// matches, prefer the one with this size.
name|unsigned
name|FrontendSize
block|;   }
block|;
expr|union
block|{     struct
name|TokOp
name|Tok
block|;     struct
name|RegOp
name|Reg
block|;     struct
name|ImmOp
name|Imm
block|;     struct
name|MemOp
name|Mem
block|;   }
block|;
name|X86Operand
argument_list|(
argument|KindTy K
argument_list|,
argument|SMLoc Start
argument_list|,
argument|SMLoc End
argument_list|)
operator|:
name|Kind
argument_list|(
name|K
argument_list|)
block|,
name|StartLoc
argument_list|(
name|Start
argument_list|)
block|,
name|EndLoc
argument_list|(
argument|End
argument_list|)
block|{}
name|StringRef
name|getSymName
argument_list|()
name|override
block|{
return|return
name|SymName
return|;
block|}
name|void
operator|*
name|getOpDecl
argument_list|()
name|override
block|{
return|return
name|OpDecl
return|;
block|}
comment|/// getStartLoc - Get the location of the first token of this operand.
name|SMLoc
name|getStartLoc
argument_list|()
specifier|const
name|override
block|{
return|return
name|StartLoc
return|;
block|}
comment|/// getEndLoc - Get the location of the last token of this operand.
name|SMLoc
name|getEndLoc
argument_list|()
specifier|const
name|override
block|{
return|return
name|EndLoc
return|;
block|}
comment|/// getLocRange - Get the range between the first and last token of this
comment|/// operand.
name|SMRange
name|getLocRange
argument_list|()
specifier|const
block|{
return|return
name|SMRange
argument_list|(
name|StartLoc
argument_list|,
name|EndLoc
argument_list|)
return|;
block|}
comment|/// getOffsetOfLoc - Get the location of the offset operator.
name|SMLoc
name|getOffsetOfLoc
argument_list|()
specifier|const
name|override
block|{
return|return
name|OffsetOfLoc
return|;
block|}
name|void
name|print
argument_list|(
argument|raw_ostream&OS
argument_list|)
specifier|const
name|override
block|{}
name|StringRef
name|getToken
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Token
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|StringRef
argument_list|(
name|Tok
operator|.
name|Data
argument_list|,
name|Tok
operator|.
name|Length
argument_list|)
return|;
block|}
name|void
name|setTokenValue
argument_list|(
argument|StringRef Value
argument_list|)
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Token
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
name|Tok
operator|.
name|Data
operator|=
name|Value
operator|.
name|data
argument_list|()
block|;
name|Tok
operator|.
name|Length
operator|=
name|Value
operator|.
name|size
argument_list|()
block|;   }
name|unsigned
name|getReg
argument_list|()
specifier|const
name|override
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Register
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Reg
operator|.
name|RegNo
return|;
block|}
specifier|const
name|MCExpr
operator|*
name|getImm
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Immediate
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Imm
operator|.
name|Val
return|;
block|}
specifier|const
name|MCExpr
operator|*
name|getMemDisp
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Memory
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Mem
operator|.
name|Disp
return|;
block|}
name|unsigned
name|getMemSegReg
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Memory
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Mem
operator|.
name|SegReg
return|;
block|}
name|unsigned
name|getMemBaseReg
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Memory
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Mem
operator|.
name|BaseReg
return|;
block|}
name|unsigned
name|getMemIndexReg
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Memory
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Mem
operator|.
name|IndexReg
return|;
block|}
name|unsigned
name|getMemScale
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Memory
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Mem
operator|.
name|Scale
return|;
block|}
name|unsigned
name|getMemModeSize
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Memory
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Mem
operator|.
name|ModeSize
return|;
block|}
name|unsigned
name|getMemFrontendSize
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Memory
operator|&&
literal|"Invalid access!"
argument_list|)
block|;
return|return
name|Mem
operator|.
name|FrontendSize
return|;
block|}
name|bool
name|isToken
argument_list|()
specifier|const
name|override
block|{
return|return
name|Kind
operator|==
name|Token
return|;
block|}
name|bool
name|isImm
argument_list|()
specifier|const
name|override
block|{
return|return
name|Kind
operator|==
name|Immediate
return|;
block|}
name|bool
name|isImmSExti16i8
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isImm
argument_list|()
condition|)
return|return
name|false
return|;
comment|// If this isn't a constant expr, just assume it fits and let relaxation
comment|// handle it.
specifier|const
name|MCConstantExpr
operator|*
name|CE
operator|=
name|dyn_cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getImm
argument_list|()
operator|)
block|;
if|if
condition|(
operator|!
name|CE
condition|)
return|return
name|true
return|;
comment|// Otherwise, check the value is in a range that makes sense for this
comment|// extension.
return|return
name|isImmSExti16i8Value
argument_list|(
name|CE
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|isImmSExti32i8
argument_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|isImm
argument_list|()
condition|)
return|return
name|false
return|;
comment|// If this isn't a constant expr, just assume it fits and let relaxation
comment|// handle it.
specifier|const
name|MCConstantExpr
operator|*
name|CE
operator|=
name|dyn_cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getImm
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|CE
condition|)
return|return
name|true
return|;
end_if

begin_comment
comment|// Otherwise, check the value is in a range that makes sense for this
end_comment

begin_comment
comment|// extension.
end_comment

begin_return
return|return
name|isImmSExti32i8Value
argument_list|(
name|CE
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
end_return

begin_macro
unit|}   bool
name|isImmSExti64i8
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
operator|!
name|isImm
argument_list|()
condition|)
return|return
name|false
return|;
comment|// If this isn't a constant expr, just assume it fits and let relaxation
comment|// handle it.
specifier|const
name|MCConstantExpr
operator|*
name|CE
operator|=
name|dyn_cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getImm
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|CE
condition|)
return|return
name|true
return|;
end_if

begin_comment
comment|// Otherwise, check the value is in a range that makes sense for this
end_comment

begin_comment
comment|// extension.
end_comment

begin_return
return|return
name|isImmSExti64i8Value
argument_list|(
name|CE
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
end_return

begin_macro
unit|}   bool
name|isImmSExti64i32
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
operator|!
name|isImm
argument_list|()
condition|)
return|return
name|false
return|;
comment|// If this isn't a constant expr, just assume it fits and let relaxation
comment|// handle it.
specifier|const
name|MCConstantExpr
operator|*
name|CE
operator|=
name|dyn_cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getImm
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|CE
condition|)
return|return
name|true
return|;
end_if

begin_comment
comment|// Otherwise, check the value is in a range that makes sense for this
end_comment

begin_comment
comment|// extension.
end_comment

begin_return
return|return
name|isImmSExti64i32Value
argument_list|(
name|CE
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
end_return

begin_macro
unit|}    bool
name|isImmUnsignedi8
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
if|if
condition|(
operator|!
name|isImm
argument_list|()
condition|)
return|return
name|false
return|;
comment|// If this isn't a constant expr, just assume it fits and let relaxation
comment|// handle it.
specifier|const
name|MCConstantExpr
operator|*
name|CE
operator|=
name|dyn_cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getImm
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
operator|!
name|CE
condition|)
return|return
name|true
return|;
end_if

begin_return
return|return
name|isImmUnsignedi8Value
argument_list|(
name|CE
operator|->
name|getValue
argument_list|()
argument_list|)
return|;
end_return

begin_macro
unit|}    bool
name|isOffsetOf
argument_list|()
end_macro

begin_expr_stmt
specifier|const
name|override
block|{
return|return
name|OffsetOfLoc
operator|.
name|getPointer
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|needAddressOf
argument_list|()
specifier|const
name|override
block|{
return|return
name|AddressOf
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem
argument_list|()
specifier|const
name|override
block|{
return|return
name|Kind
operator|==
name|Memory
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemUnsized
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
name|Mem
operator|.
name|Size
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem8
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|8
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem16
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|16
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem32
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|32
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem64
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|64
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem80
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|80
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem128
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|128
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem256
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|256
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem512
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|512
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|bool
name|isMemIndexReg
argument_list|(
name|unsigned
name|LowR
argument_list|,
name|unsigned
name|HighR
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|Kind
operator|==
name|Memory
operator|&&
literal|"Invalid access!"
argument_list|)
expr_stmt|;
return|return
name|Mem
operator|.
name|IndexReg
operator|>=
name|LowR
operator|&&
name|Mem
operator|.
name|IndexReg
operator|<=
name|HighR
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|isMem64_RC128
argument_list|()
specifier|const
block|{
return|return
name|isMem64
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|XMM0
argument_list|,
name|X86
operator|::
name|XMM15
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem128_RC128
argument_list|()
specifier|const
block|{
return|return
name|isMem128
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|XMM0
argument_list|,
name|X86
operator|::
name|XMM15
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem128_RC256
argument_list|()
specifier|const
block|{
return|return
name|isMem128
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|YMM0
argument_list|,
name|X86
operator|::
name|YMM15
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem256_RC128
argument_list|()
specifier|const
block|{
return|return
name|isMem256
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|XMM0
argument_list|,
name|X86
operator|::
name|XMM15
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem256_RC256
argument_list|()
specifier|const
block|{
return|return
name|isMem256
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|YMM0
argument_list|,
name|X86
operator|::
name|YMM15
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem64_RC128X
argument_list|()
specifier|const
block|{
return|return
name|isMem64
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|XMM0
argument_list|,
name|X86
operator|::
name|XMM31
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem128_RC128X
argument_list|()
specifier|const
block|{
return|return
name|isMem128
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|XMM0
argument_list|,
name|X86
operator|::
name|XMM31
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem128_RC256X
argument_list|()
specifier|const
block|{
return|return
name|isMem128
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|YMM0
argument_list|,
name|X86
operator|::
name|YMM31
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem256_RC128X
argument_list|()
specifier|const
block|{
return|return
name|isMem256
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|XMM0
argument_list|,
name|X86
operator|::
name|XMM31
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem256_RC256X
argument_list|()
specifier|const
block|{
return|return
name|isMem256
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|YMM0
argument_list|,
name|X86
operator|::
name|YMM31
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem256_RC512
argument_list|()
specifier|const
block|{
return|return
name|isMem256
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|ZMM0
argument_list|,
name|X86
operator|::
name|ZMM31
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem512_RC256X
argument_list|()
specifier|const
block|{
return|return
name|isMem512
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|YMM0
argument_list|,
name|X86
operator|::
name|YMM31
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMem512_RC512
argument_list|()
specifier|const
block|{
return|return
name|isMem512
argument_list|()
operator|&&
name|isMemIndexReg
argument_list|(
name|X86
operator|::
name|ZMM0
argument_list|,
name|X86
operator|::
name|ZMM31
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isAbsMem
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|!
name|getMemSegReg
argument_list|()
operator|&&
operator|!
name|getMemBaseReg
argument_list|()
operator|&&
operator|!
name|getMemIndexReg
argument_list|()
operator|&&
name|getMemScale
argument_list|()
operator|==
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isAVX512RC
argument_list|()
specifier|const
block|{
return|return
name|isImm
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isAbsMem16
argument_list|()
specifier|const
block|{
return|return
name|isAbsMem
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|16
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isSrcIdx
argument_list|()
specifier|const
block|{
return|return
operator|!
name|getMemIndexReg
argument_list|()
operator|&&
name|getMemScale
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|getMemBaseReg
argument_list|()
operator|==
name|X86
operator|::
name|RSI
operator|||
name|getMemBaseReg
argument_list|()
operator|==
name|X86
operator|::
name|ESI
operator|||
name|getMemBaseReg
argument_list|()
operator|==
name|X86
operator|::
name|SI
operator|)
operator|&&
name|isa
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getMemDisp
argument_list|()
operator|)
operator|&&
name|cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getMemDisp
argument_list|()
operator|)
operator|->
name|getValue
argument_list|()
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isSrcIdx8
argument_list|()
specifier|const
block|{
return|return
name|isMem8
argument_list|()
operator|&&
name|isSrcIdx
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isSrcIdx16
argument_list|()
specifier|const
block|{
return|return
name|isMem16
argument_list|()
operator|&&
name|isSrcIdx
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isSrcIdx32
argument_list|()
specifier|const
block|{
return|return
name|isMem32
argument_list|()
operator|&&
name|isSrcIdx
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isSrcIdx64
argument_list|()
specifier|const
block|{
return|return
name|isMem64
argument_list|()
operator|&&
name|isSrcIdx
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isDstIdx
argument_list|()
specifier|const
block|{
return|return
operator|!
name|getMemIndexReg
argument_list|()
operator|&&
name|getMemScale
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|getMemSegReg
argument_list|()
operator|==
literal|0
operator|||
name|getMemSegReg
argument_list|()
operator|==
name|X86
operator|::
name|ES
operator|)
operator|&&
operator|(
name|getMemBaseReg
argument_list|()
operator|==
name|X86
operator|::
name|RDI
operator|||
name|getMemBaseReg
argument_list|()
operator|==
name|X86
operator|::
name|EDI
operator|||
name|getMemBaseReg
argument_list|()
operator|==
name|X86
operator|::
name|DI
operator|)
operator|&&
name|isa
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getMemDisp
argument_list|()
operator|)
operator|&&
name|cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getMemDisp
argument_list|()
operator|)
operator|->
name|getValue
argument_list|()
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isDstIdx8
argument_list|()
specifier|const
block|{
return|return
name|isMem8
argument_list|()
operator|&&
name|isDstIdx
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isDstIdx16
argument_list|()
specifier|const
block|{
return|return
name|isMem16
argument_list|()
operator|&&
name|isDstIdx
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isDstIdx32
argument_list|()
specifier|const
block|{
return|return
name|isMem32
argument_list|()
operator|&&
name|isDstIdx
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isDstIdx64
argument_list|()
specifier|const
block|{
return|return
name|isMem64
argument_list|()
operator|&&
name|isDstIdx
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Memory
operator|&&
operator|!
name|getMemBaseReg
argument_list|()
operator|&&
operator|!
name|getMemIndexReg
argument_list|()
operator|&&
name|getMemScale
argument_list|()
operator|==
literal|1
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs16_8
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|16
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|8
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs16_16
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|16
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|16
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs16_32
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|16
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|32
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs32_8
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|32
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|8
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs32_16
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|32
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|16
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs32_32
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|32
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|32
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs32_64
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|32
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|64
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs64_8
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|64
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|8
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs64_16
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|64
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|16
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs64_32
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|64
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|32
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isMemOffs64_64
argument_list|()
specifier|const
block|{
return|return
name|isMemOffs
argument_list|()
operator|&&
name|Mem
operator|.
name|ModeSize
operator|==
literal|64
operator|&&
operator|(
operator|!
name|Mem
operator|.
name|Size
operator|||
name|Mem
operator|.
name|Size
operator|==
literal|64
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isReg
argument_list|()
specifier|const
name|override
block|{
return|return
name|Kind
operator|==
name|Register
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|isGR32orGR64
argument_list|()
specifier|const
block|{
return|return
name|Kind
operator|==
name|Register
operator|&&
operator|(
name|X86MCRegisterClasses
index|[
name|X86
operator|::
name|GR32RegClassID
index|]
operator|.
name|contains
argument_list|(
name|getReg
argument_list|()
argument_list|)
operator|||
name|X86MCRegisterClasses
index|[
name|X86
operator|::
name|GR64RegClassID
index|]
operator|.
name|contains
argument_list|(
name|getReg
argument_list|()
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|addExpr
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
specifier|const
name|MCExpr
operator|*
name|Expr
argument_list|)
decl|const
block|{
comment|// Add as immediates when possible.
if|if
condition|(
specifier|const
name|MCConstantExpr
modifier|*
name|CE
init|=
name|dyn_cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|Expr
operator|)
condition|)
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createImm
argument_list|(
name|CE
operator|->
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createExpr
argument_list|(
name|Expr
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|addRegOperands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|N
operator|==
literal|1
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|getReg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
specifier|static
name|unsigned
name|getGR32FromGR64
parameter_list|(
name|unsigned
name|RegNo
parameter_list|)
block|{
switch|switch
condition|(
name|RegNo
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unexpected register"
argument_list|)
expr_stmt|;
case|case
name|X86
operator|::
name|RAX
case|:
return|return
name|X86
operator|::
name|EAX
return|;
case|case
name|X86
operator|::
name|RCX
case|:
return|return
name|X86
operator|::
name|ECX
return|;
case|case
name|X86
operator|::
name|RDX
case|:
return|return
name|X86
operator|::
name|EDX
return|;
case|case
name|X86
operator|::
name|RBX
case|:
return|return
name|X86
operator|::
name|EBX
return|;
case|case
name|X86
operator|::
name|RBP
case|:
return|return
name|X86
operator|::
name|EBP
return|;
case|case
name|X86
operator|::
name|RSP
case|:
return|return
name|X86
operator|::
name|ESP
return|;
case|case
name|X86
operator|::
name|RSI
case|:
return|return
name|X86
operator|::
name|ESI
return|;
case|case
name|X86
operator|::
name|RDI
case|:
return|return
name|X86
operator|::
name|EDI
return|;
case|case
name|X86
operator|::
name|R8
case|:
return|return
name|X86
operator|::
name|R8D
return|;
case|case
name|X86
operator|::
name|R9
case|:
return|return
name|X86
operator|::
name|R9D
return|;
case|case
name|X86
operator|::
name|R10
case|:
return|return
name|X86
operator|::
name|R10D
return|;
case|case
name|X86
operator|::
name|R11
case|:
return|return
name|X86
operator|::
name|R11D
return|;
case|case
name|X86
operator|::
name|R12
case|:
return|return
name|X86
operator|::
name|R12D
return|;
case|case
name|X86
operator|::
name|R13
case|:
return|return
name|X86
operator|::
name|R13D
return|;
case|case
name|X86
operator|::
name|R14
case|:
return|return
name|X86
operator|::
name|R14D
return|;
case|case
name|X86
operator|::
name|R15
case|:
return|return
name|X86
operator|::
name|R15D
return|;
case|case
name|X86
operator|::
name|RIP
case|:
return|return
name|X86
operator|::
name|EIP
return|;
block|}
block|}
end_function

begin_decl_stmt
name|void
name|addGR32orGR64Operands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|N
operator|==
literal|1
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
name|unsigned
name|RegNo
init|=
name|getReg
argument_list|()
decl_stmt|;
if|if
condition|(
name|X86MCRegisterClasses
index|[
name|X86
operator|::
name|GR64RegClassID
index|]
operator|.
name|contains
argument_list|(
name|RegNo
argument_list|)
condition|)
name|RegNo
operator|=
name|getGR32FromGR64
argument_list|(
name|RegNo
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|RegNo
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|addAVX512RCOperands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|N
operator|==
literal|1
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
name|addExpr
argument_list|(
name|Inst
argument_list|,
name|getImm
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|addImmOperands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|N
operator|==
literal|1
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
name|addExpr
argument_list|(
name|Inst
argument_list|,
name|getImm
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|addMemOperands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|(
name|N
operator|==
literal|5
operator|)
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|getMemBaseReg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createImm
argument_list|(
name|getMemScale
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|getMemIndexReg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addExpr
argument_list|(
name|Inst
argument_list|,
name|getMemDisp
argument_list|()
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|getMemSegReg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|addAbsMemOperands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|(
name|N
operator|==
literal|1
operator|)
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
comment|// Add as immediates when possible.
if|if
condition|(
specifier|const
name|MCConstantExpr
modifier|*
name|CE
init|=
name|dyn_cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getMemDisp
argument_list|()
operator|)
condition|)
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createImm
argument_list|(
name|CE
operator|->
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createExpr
argument_list|(
name|getMemDisp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|addSrcIdxOperands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|(
name|N
operator|==
literal|2
operator|)
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|getMemBaseReg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|getMemSegReg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|addDstIdxOperands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|(
name|N
operator|==
literal|1
operator|)
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|getMemBaseReg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|addMemOffsOperands
argument_list|(
name|MCInst
operator|&
name|Inst
argument_list|,
name|unsigned
name|N
argument_list|)
decl|const
block|{
name|assert
argument_list|(
operator|(
name|N
operator|==
literal|2
operator|)
operator|&&
literal|"Invalid number of operands!"
argument_list|)
expr_stmt|;
comment|// Add as immediates when possible.
if|if
condition|(
specifier|const
name|MCConstantExpr
modifier|*
name|CE
init|=
name|dyn_cast
operator|<
name|MCConstantExpr
operator|>
operator|(
name|getMemDisp
argument_list|()
operator|)
condition|)
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createImm
argument_list|(
name|CE
operator|->
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createExpr
argument_list|(
name|getMemDisp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Inst
operator|.
name|addOperand
argument_list|(
name|MCOperand
operator|::
name|createReg
argument_list|(
name|getMemSegReg
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|X86Operand
operator|>
name|CreateToken
argument_list|(
argument|StringRef Str
argument_list|,
argument|SMLoc Loc
argument_list|)
block|{
name|SMLoc
name|EndLoc
operator|=
name|SMLoc
operator|::
name|getFromPointer
argument_list|(
name|Loc
operator|.
name|getPointer
argument_list|()
operator|+
name|Str
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|auto
name|Res
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|X86Operand
operator|>
operator|(
name|Token
operator|,
name|Loc
operator|,
name|EndLoc
operator|)
block|;
name|Res
operator|->
name|Tok
operator|.
name|Data
operator|=
name|Str
operator|.
name|data
argument_list|()
block|;
name|Res
operator|->
name|Tok
operator|.
name|Length
operator|=
name|Str
operator|.
name|size
argument_list|()
block|;
return|return
name|Res
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|X86Operand
operator|>
name|CreateReg
argument_list|(
argument|unsigned RegNo
argument_list|,
argument|SMLoc StartLoc
argument_list|,
argument|SMLoc EndLoc
argument_list|,
argument|bool AddressOf = false
argument_list|,
argument|SMLoc OffsetOfLoc = SMLoc()
argument_list|,
argument|StringRef SymName = StringRef()
argument_list|,
argument|void *OpDecl = nullptr
argument_list|)
block|{
name|auto
name|Res
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|X86Operand
operator|>
operator|(
name|Register
operator|,
name|StartLoc
operator|,
name|EndLoc
operator|)
block|;
name|Res
operator|->
name|Reg
operator|.
name|RegNo
operator|=
name|RegNo
block|;
name|Res
operator|->
name|AddressOf
operator|=
name|AddressOf
block|;
name|Res
operator|->
name|OffsetOfLoc
operator|=
name|OffsetOfLoc
block|;
name|Res
operator|->
name|SymName
operator|=
name|SymName
block|;
name|Res
operator|->
name|OpDecl
operator|=
name|OpDecl
block|;
return|return
name|Res
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|X86Operand
operator|>
name|CreateImm
argument_list|(
argument|const MCExpr *Val
argument_list|,
argument|SMLoc StartLoc
argument_list|,
argument|SMLoc EndLoc
argument_list|)
block|{
name|auto
name|Res
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|X86Operand
operator|>
operator|(
name|Immediate
operator|,
name|StartLoc
operator|,
name|EndLoc
operator|)
block|;
name|Res
operator|->
name|Imm
operator|.
name|Val
operator|=
name|Val
block|;
return|return
name|Res
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Create an absolute memory operand.
end_comment

begin_expr_stmt
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|X86Operand
operator|>
name|CreateMem
argument_list|(
argument|unsigned ModeSize
argument_list|,
argument|const MCExpr *Disp
argument_list|,
argument|SMLoc StartLoc
argument_list|,
argument|SMLoc EndLoc
argument_list|,
argument|unsigned Size =
literal|0
argument_list|,
argument|StringRef SymName = StringRef()
argument_list|,
argument|void *OpDecl = nullptr
argument_list|,
argument|unsigned FrontendSize =
literal|0
argument_list|)
block|{
name|auto
name|Res
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|X86Operand
operator|>
operator|(
name|Memory
operator|,
name|StartLoc
operator|,
name|EndLoc
operator|)
block|;
name|Res
operator|->
name|Mem
operator|.
name|SegReg
operator|=
literal|0
block|;
name|Res
operator|->
name|Mem
operator|.
name|Disp
operator|=
name|Disp
block|;
name|Res
operator|->
name|Mem
operator|.
name|BaseReg
operator|=
literal|0
block|;
name|Res
operator|->
name|Mem
operator|.
name|IndexReg
operator|=
literal|0
block|;
name|Res
operator|->
name|Mem
operator|.
name|Scale
operator|=
literal|1
block|;
name|Res
operator|->
name|Mem
operator|.
name|Size
operator|=
name|Size
block|;
name|Res
operator|->
name|Mem
operator|.
name|ModeSize
operator|=
name|ModeSize
block|;
name|Res
operator|->
name|Mem
operator|.
name|FrontendSize
operator|=
name|FrontendSize
block|;
name|Res
operator|->
name|SymName
operator|=
name|SymName
block|;
name|Res
operator|->
name|OpDecl
operator|=
name|OpDecl
block|;
name|Res
operator|->
name|AddressOf
operator|=
name|false
block|;
return|return
name|Res
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Create a generalized memory operand.
end_comment

begin_expr_stmt
specifier|static
name|std
operator|::
name|unique_ptr
operator|<
name|X86Operand
operator|>
name|CreateMem
argument_list|(
argument|unsigned ModeSize
argument_list|,
argument|unsigned SegReg
argument_list|,
argument|const MCExpr *Disp
argument_list|,
argument|unsigned BaseReg
argument_list|,
argument|unsigned IndexReg
argument_list|,
argument|unsigned Scale
argument_list|,
argument|SMLoc StartLoc
argument_list|,
argument|SMLoc EndLoc
argument_list|,
argument|unsigned Size =
literal|0
argument_list|,
argument|StringRef SymName = StringRef()
argument_list|,
argument|void *OpDecl = nullptr
argument_list|,
argument|unsigned FrontendSize =
literal|0
argument_list|)
block|{
comment|// We should never just have a displacement, that should be parsed as an
comment|// absolute memory operand.
name|assert
argument_list|(
operator|(
name|SegReg
operator|||
name|BaseReg
operator|||
name|IndexReg
operator|)
operator|&&
literal|"Invalid memory operand!"
argument_list|)
block|;
comment|// The scale should always be one of {1,2,4,8}.
name|assert
argument_list|(
operator|(
operator|(
name|Scale
operator|==
literal|1
operator|||
name|Scale
operator|==
literal|2
operator|||
name|Scale
operator|==
literal|4
operator|||
name|Scale
operator|==
literal|8
operator|)
operator|)
operator|&&
literal|"Invalid scale!"
argument_list|)
block|;
name|auto
name|Res
operator|=
name|llvm
operator|::
name|make_unique
operator|<
name|X86Operand
operator|>
operator|(
name|Memory
operator|,
name|StartLoc
operator|,
name|EndLoc
operator|)
block|;
name|Res
operator|->
name|Mem
operator|.
name|SegReg
operator|=
name|SegReg
block|;
name|Res
operator|->
name|Mem
operator|.
name|Disp
operator|=
name|Disp
block|;
name|Res
operator|->
name|Mem
operator|.
name|BaseReg
operator|=
name|BaseReg
block|;
name|Res
operator|->
name|Mem
operator|.
name|IndexReg
operator|=
name|IndexReg
block|;
name|Res
operator|->
name|Mem
operator|.
name|Scale
operator|=
name|Scale
block|;
name|Res
operator|->
name|Mem
operator|.
name|Size
operator|=
name|Size
block|;
name|Res
operator|->
name|Mem
operator|.
name|ModeSize
operator|=
name|ModeSize
block|;
name|Res
operator|->
name|Mem
operator|.
name|FrontendSize
operator|=
name|FrontendSize
block|;
name|Res
operator|->
name|SymName
operator|=
name|SymName
block|;
name|Res
operator|->
name|OpDecl
operator|=
name|OpDecl
block|;
name|Res
operator|->
name|AddressOf
operator|=
name|false
block|;
return|return
name|Res
return|;
block|}
end_expr_stmt

begin_comment
unit|};  }
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_X86_ASMPARSER_X86OPERAND_H
end_comment

end_unit

