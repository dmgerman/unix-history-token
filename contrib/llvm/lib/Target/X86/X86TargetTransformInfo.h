begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- X86TargetTransformInfo.h - X86 specific TTI -------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file a TargetTransformInfo::Concept conforming object specific to the
end_comment

begin_comment
comment|/// X86 target machine. It uses the target's detailed information to
end_comment

begin_comment
comment|/// provide more precise answers to certain TTI queries, while letting the
end_comment

begin_comment
comment|/// target independent and default TTI implementations handle the rest.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_X86_X86TARGETTRANSFORMINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_X86_X86TARGETTRANSFORMINFO_H
end_define

begin_include
include|#
directive|include
file|"X86.h"
end_include

begin_include
include|#
directive|include
file|"X86TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/TargetTransformInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/BasicTTIImpl.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|X86TTIImpl
range|:
name|public
name|BasicTTIImplBase
operator|<
name|X86TTIImpl
operator|>
block|{
typedef|typedef
name|BasicTTIImplBase
operator|<
name|X86TTIImpl
operator|>
name|BaseT
expr_stmt|;
typedef|typedef
name|TargetTransformInfo
name|TTI
typedef|;
name|friend
name|BaseT
decl_stmt|;
specifier|const
name|X86Subtarget
modifier|*
name|ST
decl_stmt|;
specifier|const
name|X86TargetLowering
modifier|*
name|TLI
decl_stmt|;
name|int
name|getScalarizationOverhead
parameter_list|(
name|Type
modifier|*
name|Ty
parameter_list|,
name|bool
name|Insert
parameter_list|,
name|bool
name|Extract
parameter_list|)
function_decl|;
specifier|const
name|X86Subtarget
operator|*
name|getST
argument_list|()
specifier|const
block|{
return|return
name|ST
return|;
block|}
specifier|const
name|X86TargetLowering
operator|*
name|getTLI
argument_list|()
specifier|const
block|{
return|return
name|TLI
return|;
block|}
name|public
label|:
name|explicit
name|X86TTIImpl
argument_list|(
specifier|const
name|X86TargetMachine
operator|*
name|TM
argument_list|,
specifier|const
name|Function
operator|&
name|F
argument_list|)
operator|:
name|BaseT
argument_list|(
name|TM
argument_list|,
name|F
operator|.
name|getParent
argument_list|()
operator|->
name|getDataLayout
argument_list|()
argument_list|)
operator|,
name|ST
argument_list|(
name|TM
operator|->
name|getSubtargetImpl
argument_list|(
name|F
argument_list|)
argument_list|)
operator|,
name|TLI
argument_list|(
argument|ST->getTargetLowering()
argument_list|)
block|{}
comment|/// \name Scalar TTI Implementations
comment|/// @{
name|TTI
operator|::
name|PopcntSupportKind
name|getPopcntSupport
argument_list|(
argument|unsigned TyWidth
argument_list|)
expr_stmt|;
comment|/// @}
comment|/// \name Vector TTI Implementations
comment|/// @{
name|unsigned
name|getNumberOfRegisters
parameter_list|(
name|bool
name|Vector
parameter_list|)
function_decl|;
name|unsigned
name|getRegisterBitWidth
parameter_list|(
name|bool
name|Vector
parameter_list|)
function_decl|;
name|unsigned
name|getMaxInterleaveFactor
parameter_list|(
name|unsigned
name|VF
parameter_list|)
function_decl|;
name|int
name|getArithmeticInstrCost
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|Type
operator|*
name|Ty
argument_list|,
name|TTI
operator|::
name|OperandValueKind
name|Opd1Info
operator|=
name|TTI
operator|::
name|OK_AnyValue
argument_list|,
name|TTI
operator|::
name|OperandValueKind
name|Opd2Info
operator|=
name|TTI
operator|::
name|OK_AnyValue
argument_list|,
name|TTI
operator|::
name|OperandValueProperties
name|Opd1PropInfo
operator|=
name|TTI
operator|::
name|OP_None
argument_list|,
name|TTI
operator|::
name|OperandValueProperties
name|Opd2PropInfo
operator|=
name|TTI
operator|::
name|OP_None
argument_list|)
decl_stmt|;
name|int
name|getShuffleCost
argument_list|(
name|TTI
operator|::
name|ShuffleKind
name|Kind
argument_list|,
name|Type
operator|*
name|Tp
argument_list|,
name|int
name|Index
argument_list|,
name|Type
operator|*
name|SubTp
argument_list|)
decl_stmt|;
name|int
name|getCastInstrCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|Dst
parameter_list|,
name|Type
modifier|*
name|Src
parameter_list|)
function_decl|;
name|int
name|getCmpSelInstrCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|ValTy
parameter_list|,
name|Type
modifier|*
name|CondTy
parameter_list|)
function_decl|;
name|int
name|getVectorInstrCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|Val
parameter_list|,
name|unsigned
name|Index
parameter_list|)
function_decl|;
name|int
name|getMemoryOpCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|Src
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
name|int
name|getMaskedMemoryOpCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|Src
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
name|int
name|getGatherScatterOpCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|DataTy
parameter_list|,
name|Value
modifier|*
name|Ptr
parameter_list|,
name|bool
name|VariableMask
parameter_list|,
name|unsigned
name|Alignment
parameter_list|)
function_decl|;
name|int
name|getAddressComputationCost
parameter_list|(
name|Type
modifier|*
name|PtrTy
parameter_list|,
name|bool
name|IsComplex
parameter_list|)
function_decl|;
name|int
name|getIntrinsicInstrCost
argument_list|(
name|Intrinsic
operator|::
name|ID
name|IID
argument_list|,
name|Type
operator|*
name|RetTy
argument_list|,
name|ArrayRef
operator|<
name|Type
operator|*
operator|>
name|Tys
argument_list|,
name|FastMathFlags
name|FMF
argument_list|)
decl_stmt|;
name|int
name|getIntrinsicInstrCost
argument_list|(
name|Intrinsic
operator|::
name|ID
name|IID
argument_list|,
name|Type
operator|*
name|RetTy
argument_list|,
name|ArrayRef
operator|<
name|Value
operator|*
operator|>
name|Args
argument_list|,
name|FastMathFlags
name|FMF
argument_list|)
decl_stmt|;
name|int
name|getReductionCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|,
name|bool
name|IsPairwiseForm
parameter_list|)
function_decl|;
name|int
name|getInterleavedMemoryOpCost
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|Type
operator|*
name|VecTy
argument_list|,
name|unsigned
name|Factor
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Indices
argument_list|,
name|unsigned
name|Alignment
argument_list|,
name|unsigned
name|AddressSpace
argument_list|)
decl_stmt|;
name|int
name|getInterleavedMemoryOpCostAVX512
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|Type
operator|*
name|VecTy
argument_list|,
name|unsigned
name|Factor
argument_list|,
name|ArrayRef
operator|<
name|unsigned
operator|>
name|Indices
argument_list|,
name|unsigned
name|Alignment
argument_list|,
name|unsigned
name|AddressSpace
argument_list|)
decl_stmt|;
name|int
name|getIntImmCost
parameter_list|(
name|int64_t
parameter_list|)
function_decl|;
name|int
name|getIntImmCost
parameter_list|(
specifier|const
name|APInt
modifier|&
name|Imm
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|int
name|getIntImmCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|unsigned
name|Idx
parameter_list|,
specifier|const
name|APInt
modifier|&
name|Imm
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|)
function_decl|;
name|int
name|getIntImmCost
argument_list|(
name|Intrinsic
operator|::
name|ID
name|IID
argument_list|,
name|unsigned
name|Idx
argument_list|,
specifier|const
name|APInt
operator|&
name|Imm
argument_list|,
name|Type
operator|*
name|Ty
argument_list|)
decl_stmt|;
name|bool
name|isLegalMaskedLoad
parameter_list|(
name|Type
modifier|*
name|DataType
parameter_list|)
function_decl|;
name|bool
name|isLegalMaskedStore
parameter_list|(
name|Type
modifier|*
name|DataType
parameter_list|)
function_decl|;
name|bool
name|isLegalMaskedGather
parameter_list|(
name|Type
modifier|*
name|DataType
parameter_list|)
function_decl|;
name|bool
name|isLegalMaskedScatter
parameter_list|(
name|Type
modifier|*
name|DataType
parameter_list|)
function_decl|;
name|bool
name|areInlineCompatible
argument_list|(
specifier|const
name|Function
operator|*
name|Caller
argument_list|,
specifier|const
name|Function
operator|*
name|Callee
argument_list|)
decl|const
decl_stmt|;
name|bool
name|enableInterleavedAccessVectorization
parameter_list|()
function_decl|;
name|private
label|:
name|int
name|getGSScalarCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|DataTy
parameter_list|,
name|bool
name|VariableMask
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
name|int
name|getGSVectorCost
parameter_list|(
name|unsigned
name|Opcode
parameter_list|,
name|Type
modifier|*
name|DataTy
parameter_list|,
name|Value
modifier|*
name|Ptr
parameter_list|,
name|unsigned
name|Alignment
parameter_list|,
name|unsigned
name|AddressSpace
parameter_list|)
function_decl|;
comment|/// @}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

