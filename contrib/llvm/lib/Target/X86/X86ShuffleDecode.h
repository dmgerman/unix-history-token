begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- X86ShuffleDecode.h - X86 shuffle decode logic ---------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Define several functions to decode x86 specific shuffle semantics into a
end_comment

begin_comment
comment|// generic vector mask.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|X86_SHUFFLE_DECODE_H
end_ifndef

begin_define
define|#
directive|define
name|X86_SHUFFLE_DECODE_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_decl_stmt
name|using
name|namespace
name|llvm
decl_stmt|;
end_decl_stmt

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//  Vector Mask Decoding
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_enum
enum|enum
block|{
name|SM_SentinelZero
init|=
operator|~
literal|0U
block|}
enum|;
end_enum

begin_decl_stmt
specifier|static
specifier|inline
name|void
name|DecodeINSERTPSMask
argument_list|(
name|unsigned
name|Imm
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
comment|// Defaults the copying the dest value.
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// Decode the immediate.
name|unsigned
name|ZMask
init|=
name|Imm
operator|&
literal|15
decl_stmt|;
name|unsigned
name|CountD
init|=
operator|(
name|Imm
operator|>>
literal|4
operator|)
operator|&
literal|3
decl_stmt|;
name|unsigned
name|CountS
init|=
operator|(
name|Imm
operator|>>
literal|6
operator|)
operator|&
literal|3
decl_stmt|;
comment|// CountS selects which input element to use.
name|unsigned
name|InVal
init|=
literal|4
operator|+
name|CountS
decl_stmt|;
comment|// CountD specifies which element of destination to update.
name|ShuffleMask
index|[
name|CountD
index|]
operator|=
name|InVal
expr_stmt|;
comment|// ZMask zaps values, potentially overriding the CountD elt.
if|if
condition|(
name|ZMask
operator|&
literal|1
condition|)
name|ShuffleMask
index|[
literal|0
index|]
operator|=
name|SM_SentinelZero
expr_stmt|;
if|if
condition|(
name|ZMask
operator|&
literal|2
condition|)
name|ShuffleMask
index|[
literal|1
index|]
operator|=
name|SM_SentinelZero
expr_stmt|;
if|if
condition|(
name|ZMask
operator|&
literal|4
condition|)
name|ShuffleMask
index|[
literal|2
index|]
operator|=
name|SM_SentinelZero
expr_stmt|;
if|if
condition|(
name|ZMask
operator|&
literal|8
condition|)
name|ShuffleMask
index|[
literal|3
index|]
operator|=
name|SM_SentinelZero
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|//<3,1> or<6,7,2,3>
end_comment

begin_decl_stmt
specifier|static
name|void
name|DecodeMOVHLPSMask
argument_list|(
name|unsigned
name|NElts
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
name|NElts
operator|/
literal|2
init|;
name|i
operator|!=
name|NElts
condition|;
operator|++
name|i
control|)
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|NElts
operator|+
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
name|NElts
operator|/
literal|2
init|;
name|i
operator|!=
name|NElts
condition|;
operator|++
name|i
control|)
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|//<0,2> or<0,1,4,5>
end_comment

begin_decl_stmt
specifier|static
name|void
name|DecodeMOVLHPSMask
argument_list|(
name|unsigned
name|NElts
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
operator|/
literal|2
condition|;
operator|++
name|i
control|)
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
operator|/
literal|2
condition|;
operator|++
name|i
control|)
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|NElts
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|DecodePSHUFMask
argument_list|(
name|unsigned
name|NElts
argument_list|,
name|unsigned
name|Imm
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|Imm
operator|%
name|NElts
argument_list|)
expr_stmt|;
name|Imm
operator|/=
name|NElts
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|DecodePSHUFHWMask
argument_list|(
name|unsigned
name|Imm
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|4
operator|+
operator|(
name|Imm
operator|&
literal|3
operator|)
argument_list|)
expr_stmt|;
name|Imm
operator|>>=
literal|2
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|DecodePSHUFLWMask
argument_list|(
name|unsigned
name|Imm
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
operator|(
name|Imm
operator|&
literal|3
operator|)
argument_list|)
expr_stmt|;
name|Imm
operator|>>=
literal|2
expr_stmt|;
block|}
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|DecodePUNPCKLMask
argument_list|(
name|unsigned
name|NElts
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
operator|+
name|NElts
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|DecodePUNPCKHMask
argument_list|(
name|unsigned
name|NElts
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
operator|+
name|NElts
operator|/
literal|2
argument_list|)
expr_stmt|;
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
operator|+
name|NElts
operator|+
name|NElts
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|DecodeSHUFPSMask
argument_list|(
name|unsigned
name|NElts
argument_list|,
name|unsigned
name|Imm
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
comment|// Part that reads from dest.
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|Imm
operator|%
name|NElts
argument_list|)
expr_stmt|;
name|Imm
operator|/=
name|NElts
expr_stmt|;
block|}
comment|// Part that reads from src.
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|Imm
operator|%
name|NElts
operator|+
name|NElts
argument_list|)
expr_stmt|;
name|Imm
operator|/=
name|NElts
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|DecodeUNPCKHPMask
argument_list|(
name|unsigned
name|NElts
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
operator|+
name|NElts
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// Reads from dest
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
operator|+
name|NElts
operator|+
name|NElts
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// Reads from src
block|}
block|}
end_decl_stmt

begin_comment
comment|/// DecodeUNPCKLPMask - This decodes the shuffle masks for unpcklps/unpcklpd
end_comment

begin_comment
comment|/// etc.  NElts indicates the number of elements in the vector allowing it to
end_comment

begin_comment
comment|/// handle different datatypes and vector widths.
end_comment

begin_decl_stmt
specifier|static
name|void
name|DecodeUNPCKLPMask
argument_list|(
name|unsigned
name|NElts
argument_list|,
name|SmallVectorImpl
operator|<
name|unsigned
operator|>
operator|&
name|ShuffleMask
argument_list|)
block|{
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|!=
name|NElts
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// Reads from dest
name|ShuffleMask
operator|.
name|push_back
argument_list|(
name|i
operator|+
name|NElts
argument_list|)
expr_stmt|;
comment|// Reads from src
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

