begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- AArch64Subtarget.h - Define Subtarget for the AArch64 -*- C++ -*--===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the AArch64 specific subclass of TargetSubtarget.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AARCH64_AARCH64SUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AARCH64_AARCH64SUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"AArch64FrameLowering.h"
end_include

begin_include
include|#
directive|include
file|"AArch64ISelLowering.h"
end_include

begin_include
include|#
directive|include
file|"AArch64InstrInfo.h"
end_include

begin_include
include|#
directive|include
file|"AArch64RegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"AArch64SelectionDAGInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/GlobalISel/GISelAccessor.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/DataLayout.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"AArch64GenSubtargetInfo.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|GlobalValue
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|class
name|Triple
decl_stmt|;
name|class
name|AArch64Subtarget
name|final
range|:
name|public
name|AArch64GenSubtargetInfo
block|{
name|public
operator|:
expr|enum
name|ARMProcFamilyEnum
operator|:
name|uint8_t
block|{
name|Others
block|,
name|CortexA35
block|,
name|CortexA53
block|,
name|CortexA57
block|,
name|CortexA72
block|,
name|CortexA73
block|,
name|Cyclone
block|,
name|ExynosM1
block|,
name|Falkor
block|,
name|Kryo
block|,
name|Vulcan
block|}
block|;
name|protected
operator|:
comment|/// ARMProcFamily - ARM processor family: Cortex-A53, Cortex-A57, and others.
name|ARMProcFamilyEnum
name|ARMProcFamily
operator|=
name|Others
block|;
name|bool
name|HasV8_1aOps
operator|=
name|false
block|;
name|bool
name|HasV8_2aOps
operator|=
name|false
block|;
name|bool
name|HasFPARMv8
operator|=
name|false
block|;
name|bool
name|HasNEON
operator|=
name|false
block|;
name|bool
name|HasCrypto
operator|=
name|false
block|;
name|bool
name|HasCRC
operator|=
name|false
block|;
name|bool
name|HasLSE
operator|=
name|false
block|;
name|bool
name|HasRAS
operator|=
name|false
block|;
name|bool
name|HasPerfMon
operator|=
name|false
block|;
name|bool
name|HasFullFP16
operator|=
name|false
block|;
name|bool
name|HasSPE
operator|=
name|false
block|;
comment|// HasZeroCycleRegMove - Has zero-cycle register mov instructions.
name|bool
name|HasZeroCycleRegMove
operator|=
name|false
block|;
comment|// HasZeroCycleZeroing - Has zero-cycle zeroing instructions.
name|bool
name|HasZeroCycleZeroing
operator|=
name|false
block|;
comment|// StrictAlign - Disallow unaligned memory accesses.
name|bool
name|StrictAlign
operator|=
name|false
block|;
name|bool
name|UseAA
operator|=
name|false
block|;
name|bool
name|PredictableSelectIsExpensive
operator|=
name|false
block|;
name|bool
name|BalanceFPOps
operator|=
name|false
block|;
name|bool
name|CustomAsCheapAsMove
operator|=
name|false
block|;
name|bool
name|UsePostRAScheduler
operator|=
name|false
block|;
name|bool
name|Misaligned128StoreIsSlow
operator|=
name|false
block|;
name|bool
name|AvoidQuadLdStPairs
operator|=
name|false
block|;
name|bool
name|UseAlternateSExtLoadCVTF32Pattern
operator|=
name|false
block|;
name|bool
name|HasArithmeticBccFusion
operator|=
name|false
block|;
name|bool
name|HasArithmeticCbzFusion
operator|=
name|false
block|;
name|bool
name|DisableLatencySchedHeuristic
operator|=
name|false
block|;
name|bool
name|UseRSqrt
operator|=
name|false
block|;
name|uint8_t
name|MaxInterleaveFactor
operator|=
literal|2
block|;
name|uint8_t
name|VectorInsertExtractBaseCost
operator|=
literal|3
block|;
name|uint16_t
name|CacheLineSize
operator|=
literal|0
block|;
name|uint16_t
name|PrefetchDistance
operator|=
literal|0
block|;
name|uint16_t
name|MinPrefetchStride
operator|=
literal|1
block|;
name|unsigned
name|MaxPrefetchIterationsAhead
operator|=
name|UINT_MAX
block|;
name|unsigned
name|PrefFunctionAlignment
operator|=
literal|0
block|;
name|unsigned
name|PrefLoopAlignment
operator|=
literal|0
block|;
name|unsigned
name|MaxJumpTableSize
operator|=
literal|0
block|;
comment|// ReserveX18 - X18 is not available as a general purpose register.
name|bool
name|ReserveX18
block|;
name|bool
name|IsLittle
block|;
comment|/// TargetTriple - What processor and OS we're targeting.
name|Triple
name|TargetTriple
block|;
name|AArch64FrameLowering
name|FrameLowering
block|;
name|AArch64InstrInfo
name|InstrInfo
block|;
name|AArch64SelectionDAGInfo
name|TSInfo
block|;
name|AArch64TargetLowering
name|TLInfo
block|;
comment|/// Gather the accessor points to GlobalISel-related APIs.
comment|/// This is used to avoid ifndefs spreading around while GISel is
comment|/// an optional library.
name|std
operator|::
name|unique_ptr
operator|<
name|GISelAccessor
operator|>
name|GISel
block|;
name|private
operator|:
comment|/// initializeSubtargetDependencies - Initializes using CPUString and the
comment|/// passed in feature string so that we can use initializer lists for
comment|/// subtarget initialization.
name|AArch64Subtarget
operator|&
name|initializeSubtargetDependencies
argument_list|(
argument|StringRef FS
argument_list|,
argument|StringRef CPUString
argument_list|)
block|;
comment|/// Initialize properties based on the selected processor family.
name|void
name|initializeProperties
argument_list|()
block|;
name|public
operator|:
comment|/// This constructor initializes the data members to match that
comment|/// of the specified triple.
name|AArch64Subtarget
argument_list|(
argument|const Triple&TT
argument_list|,
argument|const std::string&CPU
argument_list|,
argument|const std::string&FS
argument_list|,
argument|const TargetMachine&TM
argument_list|,
argument|bool LittleEndian
argument_list|)
block|;
comment|/// This object will take onwership of \p GISelAccessor.
name|void
name|setGISelAccessor
argument_list|(
argument|GISelAccessor&GISel
argument_list|)
block|{
name|this
operator|->
name|GISel
operator|.
name|reset
argument_list|(
operator|&
name|GISel
argument_list|)
block|;   }
specifier|const
name|AArch64SelectionDAGInfo
operator|*
name|getSelectionDAGInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|TSInfo
return|;
block|}
specifier|const
name|AArch64FrameLowering
operator|*
name|getFrameLowering
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|FrameLowering
return|;
block|}
specifier|const
name|AArch64TargetLowering
operator|*
name|getTargetLowering
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|TLInfo
return|;
block|}
specifier|const
name|AArch64InstrInfo
operator|*
name|getInstrInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrInfo
return|;
block|}
specifier|const
name|AArch64RegisterInfo
operator|*
name|getRegisterInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|getInstrInfo
argument_list|()
operator|->
name|getRegisterInfo
argument_list|()
return|;
block|}
specifier|const
name|CallLowering
operator|*
name|getCallLowering
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|InstructionSelector
operator|*
name|getInstructionSelector
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|LegalizerInfo
operator|*
name|getLegalizerInfo
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|RegisterBankInfo
operator|*
name|getRegBankInfo
argument_list|()
specifier|const
name|override
block|;
specifier|const
name|Triple
operator|&
name|getTargetTriple
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
return|;
block|}
name|bool
name|enableMachineScheduler
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|bool
name|enablePostRAScheduler
argument_list|()
specifier|const
name|override
block|{
return|return
name|UsePostRAScheduler
return|;
block|}
comment|/// Returns ARM processor family.
comment|/// Avoid this function! CPU specifics should be kept local to this class
comment|/// and preferably modeled with SubtargetFeatures or properties in
comment|/// initializeProperties().
name|ARMProcFamilyEnum
name|getProcFamily
argument_list|()
specifier|const
block|{
return|return
name|ARMProcFamily
return|;
block|}
name|bool
name|hasV8_1aOps
argument_list|()
specifier|const
block|{
return|return
name|HasV8_1aOps
return|;
block|}
name|bool
name|hasV8_2aOps
argument_list|()
specifier|const
block|{
return|return
name|HasV8_2aOps
return|;
block|}
name|bool
name|hasZeroCycleRegMove
argument_list|()
specifier|const
block|{
return|return
name|HasZeroCycleRegMove
return|;
block|}
name|bool
name|hasZeroCycleZeroing
argument_list|()
specifier|const
block|{
return|return
name|HasZeroCycleZeroing
return|;
block|}
name|bool
name|requiresStrictAlign
argument_list|()
specifier|const
block|{
return|return
name|StrictAlign
return|;
block|}
name|bool
name|isXRaySupported
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|bool
name|isX18Reserved
argument_list|()
specifier|const
block|{
return|return
name|ReserveX18
return|;
block|}
name|bool
name|hasFPARMv8
argument_list|()
specifier|const
block|{
return|return
name|HasFPARMv8
return|;
block|}
name|bool
name|hasNEON
argument_list|()
specifier|const
block|{
return|return
name|HasNEON
return|;
block|}
name|bool
name|hasCrypto
argument_list|()
specifier|const
block|{
return|return
name|HasCrypto
return|;
block|}
name|bool
name|hasCRC
argument_list|()
specifier|const
block|{
return|return
name|HasCRC
return|;
block|}
name|bool
name|hasLSE
argument_list|()
specifier|const
block|{
return|return
name|HasLSE
return|;
block|}
name|bool
name|hasRAS
argument_list|()
specifier|const
block|{
return|return
name|HasRAS
return|;
block|}
name|bool
name|balanceFPOps
argument_list|()
specifier|const
block|{
return|return
name|BalanceFPOps
return|;
block|}
name|bool
name|predictableSelectIsExpensive
argument_list|()
specifier|const
block|{
return|return
name|PredictableSelectIsExpensive
return|;
block|}
name|bool
name|hasCustomCheapAsMoveHandling
argument_list|()
specifier|const
block|{
return|return
name|CustomAsCheapAsMove
return|;
block|}
name|bool
name|isMisaligned128StoreSlow
argument_list|()
specifier|const
block|{
return|return
name|Misaligned128StoreIsSlow
return|;
block|}
name|bool
name|avoidQuadLdStPairs
argument_list|()
specifier|const
block|{
return|return
name|AvoidQuadLdStPairs
return|;
block|}
name|bool
name|useAlternateSExtLoadCVTF32Pattern
argument_list|()
specifier|const
block|{
return|return
name|UseAlternateSExtLoadCVTF32Pattern
return|;
block|}
name|bool
name|hasArithmeticBccFusion
argument_list|()
specifier|const
block|{
return|return
name|HasArithmeticBccFusion
return|;
block|}
name|bool
name|hasArithmeticCbzFusion
argument_list|()
specifier|const
block|{
return|return
name|HasArithmeticCbzFusion
return|;
block|}
name|bool
name|useRSqrt
argument_list|()
specifier|const
block|{
return|return
name|UseRSqrt
return|;
block|}
name|unsigned
name|getMaxInterleaveFactor
argument_list|()
specifier|const
block|{
return|return
name|MaxInterleaveFactor
return|;
block|}
name|unsigned
name|getVectorInsertExtractBaseCost
argument_list|()
specifier|const
block|{
return|return
name|VectorInsertExtractBaseCost
return|;
block|}
name|unsigned
name|getCacheLineSize
argument_list|()
specifier|const
block|{
return|return
name|CacheLineSize
return|;
block|}
name|unsigned
name|getPrefetchDistance
argument_list|()
specifier|const
block|{
return|return
name|PrefetchDistance
return|;
block|}
name|unsigned
name|getMinPrefetchStride
argument_list|()
specifier|const
block|{
return|return
name|MinPrefetchStride
return|;
block|}
name|unsigned
name|getMaxPrefetchIterationsAhead
argument_list|()
specifier|const
block|{
return|return
name|MaxPrefetchIterationsAhead
return|;
block|}
name|unsigned
name|getPrefFunctionAlignment
argument_list|()
specifier|const
block|{
return|return
name|PrefFunctionAlignment
return|;
block|}
name|unsigned
name|getPrefLoopAlignment
argument_list|()
specifier|const
block|{
return|return
name|PrefLoopAlignment
return|;
block|}
name|unsigned
name|getMaximumJumpTableSize
argument_list|()
specifier|const
block|{
return|return
name|MaxJumpTableSize
return|;
block|}
comment|/// CPU has TBI (top byte of addresses is ignored during HW address
comment|/// translation) and OS enables it.
name|bool
name|supportsAddressTopByteIgnored
argument_list|()
specifier|const
block|;
name|bool
name|hasPerfMon
argument_list|()
specifier|const
block|{
return|return
name|HasPerfMon
return|;
block|}
name|bool
name|hasFullFP16
argument_list|()
specifier|const
block|{
return|return
name|HasFullFP16
return|;
block|}
name|bool
name|hasSPE
argument_list|()
specifier|const
block|{
return|return
name|HasSPE
return|;
block|}
name|bool
name|isLittleEndian
argument_list|()
specifier|const
block|{
return|return
name|IsLittle
return|;
block|}
name|bool
name|isTargetDarwin
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSDarwin
argument_list|()
return|;
block|}
name|bool
name|isTargetIOS
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isiOS
argument_list|()
return|;
block|}
name|bool
name|isTargetLinux
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSLinux
argument_list|()
return|;
block|}
name|bool
name|isTargetWindows
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSWindows
argument_list|()
return|;
block|}
name|bool
name|isTargetAndroid
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isAndroid
argument_list|()
return|;
block|}
name|bool
name|isTargetCOFF
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSBinFormatCOFF
argument_list|()
return|;
block|}
name|bool
name|isTargetELF
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSBinFormatELF
argument_list|()
return|;
block|}
name|bool
name|isTargetMachO
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isOSBinFormatMachO
argument_list|()
return|;
block|}
name|bool
name|useAA
argument_list|()
specifier|const
name|override
block|{
return|return
name|UseAA
return|;
block|}
comment|/// getMaxInlineSizeThreshold - Returns the maximum memset / memcpy size
comment|/// that still makes it profitable to inline the call.
name|unsigned
name|getMaxInlineSizeThreshold
argument_list|()
specifier|const
block|{
return|return
literal|64
return|;
block|}
comment|/// ParseSubtargetFeatures - Parses features string setting specified
comment|/// subtarget options.  Definition of function is auto generated by tblgen.
name|void
name|ParseSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
comment|/// ClassifyGlobalReference - Find the target operand flags that describe
comment|/// how a global value should be referenced for the current subtarget.
name|unsigned
name|char
name|ClassifyGlobalReference
argument_list|(
argument|const GlobalValue *GV
argument_list|,
argument|const TargetMachine&TM
argument_list|)
specifier|const
block|;
comment|/// This function returns the name of a function which has an interface
comment|/// like the non-standard bzero function, if such a function exists on
comment|/// the current subtarget and it is considered prefereable over
comment|/// memset with zero passed as the second argument. Otherwise it
comment|/// returns null.
specifier|const
name|char
operator|*
name|getBZeroEntry
argument_list|()
specifier|const
block|;
name|void
name|overrideSchedPolicy
argument_list|(
argument|MachineSchedPolicy&Policy
argument_list|,
argument|unsigned NumRegionInstrs
argument_list|)
specifier|const
name|override
block|;
name|bool
name|enableEarlyIfConversion
argument_list|()
specifier|const
name|override
block|;
name|std
operator|::
name|unique_ptr
operator|<
name|PBQPRAConstraint
operator|>
name|getCustomPBQPConstraints
argument_list|()
specifier|const
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

