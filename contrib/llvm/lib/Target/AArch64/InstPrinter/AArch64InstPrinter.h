begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AArch64InstPrinter.h - Convert AArch64 MCInst to assembly syntax --===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class prints an AArch64 MCInst to a .s file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_AARCH64INSTPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_AARCH64INSTPRINTER_H
end_define

begin_include
include|#
directive|include
file|"MCTargetDesc/AArch64MCTargetDesc.h"
end_include

begin_include
include|#
directive|include
file|"Utils/AArch64BaseInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInstPrinter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSubtargetInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCOperand
decl_stmt|;
name|class
name|AArch64InstPrinter
range|:
name|public
name|MCInstPrinter
block|{
name|public
operator|:
name|AArch64InstPrinter
argument_list|(
specifier|const
name|MCAsmInfo
operator|&
name|MAI
argument_list|,
specifier|const
name|MCInstrInfo
operator|&
name|MII
argument_list|,
specifier|const
name|MCRegisterInfo
operator|&
name|MRI
argument_list|,
specifier|const
name|MCSubtargetInfo
operator|&
name|STI
argument_list|)
block|;
comment|// Autogenerated by tblgen
name|void
name|printInstruction
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
name|bool
name|printAliasInstr
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getRegisterName
argument_list|(
argument|unsigned RegNo
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getInstructionName
argument_list|(
argument|unsigned Opcode
argument_list|)
block|;
name|void
name|printRegName
argument_list|(
argument|raw_ostream&O
argument_list|,
argument|unsigned RegNum
argument_list|)
specifier|const
block|;
name|template
operator|<
name|unsigned
name|MemSize
block|,
name|unsigned
name|RmSize
operator|>
name|void
name|printAddrRegExtendOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printAddrRegExtendOperand
argument_list|(
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|,
name|MemSize
argument_list|,
name|RmSize
argument_list|)
block|;   }
name|void
name|printAddrRegExtendOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|unsigned MemSize
argument_list|,
argument|unsigned RmSize
argument_list|)
block|;
name|void
name|printAddSubImmLSL0Operand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printAddSubImmLSL12Operand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBareImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|unsigned
name|RegWidth
operator|>
name|void
name|printBFILSBOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBFIWidthOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBFXWidthOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printCondCodeOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printCRxOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printCVTFixedPosOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printFPImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&o
argument_list|)
block|;
name|void
name|printFPZeroOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&o
argument_list|)
block|;
name|template
operator|<
name|int
name|MemScale
operator|>
name|void
name|printOffsetUImm12Operand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&o
argument_list|)
block|{
name|printOffsetUImm12Operand
argument_list|(
name|MI
argument_list|,
name|OpNum
argument_list|,
name|o
argument_list|,
name|MemScale
argument_list|)
block|;   }
name|void
name|printOffsetUImm12Operand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&o
argument_list|,
argument|int MemScale
argument_list|)
block|;
name|template
operator|<
name|unsigned
name|field_width
block|,
name|unsigned
name|scale
operator|>
name|void
name|printLabelOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|unsigned
name|RegWidth
operator|>
name|void
name|printLogicalImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|typename
name|SomeNamedImmMapper
operator|>
name|void
name|printNamedImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printNamedImmOperand
argument_list|(
name|SomeNamedImmMapper
argument_list|()
argument_list|,
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printNamedImmOperand
argument_list|(
argument|const NamedImmMapper&Mapper
argument_list|,
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printSysRegOperand
argument_list|(
argument|const A64SysReg::SysRegMapper&Mapper
argument_list|,
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printMRSOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printSysRegOperand
argument_list|(
name|A64SysReg
operator|::
name|MRSMapper
argument_list|()
argument_list|,
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printMSROperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printSysRegOperand
argument_list|(
name|A64SysReg
operator|::
name|MSRMapper
argument_list|()
argument_list|,
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printShiftOperand
argument_list|(
argument|const char *name
argument_list|,
argument|const MCInst *MI
argument_list|,
argument|unsigned OpIdx
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printLSLOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printLSROperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printShiftOperand
argument_list|(
literal|"lsr"
argument_list|,
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printASROperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printShiftOperand
argument_list|(
literal|"asr"
argument_list|,
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|)
block|;   }
name|void
name|printROROperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printShiftOperand
argument_list|(
literal|"ror"
argument_list|,
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|)
block|;   }
name|template
operator|<
name|A64SE
operator|::
name|ShiftExtSpecifiers
name|Shift
operator|>
name|void
name|printShiftOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printShiftOperand
argument_list|(
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|,
name|Shift
argument_list|)
block|;   }
name|void
name|printShiftOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|A64SE::ShiftExtSpecifiers Sh
argument_list|)
block|;
name|void
name|printMoveWideImmOperand
argument_list|(
argument|const  MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|int
name|MemSize
operator|>
name|void
name|printSImm7ScaledOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printOffsetSImm9Operand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printPRFMOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|A64SE
operator|::
name|ShiftExtSpecifiers
name|EXT
operator|>
name|void
name|printRegExtendOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|{
name|printRegExtendOperand
argument_list|(
name|MI
argument_list|,
name|OpNum
argument_list|,
name|O
argument_list|,
name|EXT
argument_list|)
block|;   }
name|void
name|printRegExtendOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|A64SE::ShiftExtSpecifiers Ext
argument_list|)
block|;
name|void
name|printVPRRegister
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|virtual
name|void
name|printInst
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|StringRef Annot
argument_list|)
block|;
name|bool
name|isStackReg
argument_list|(
argument|unsigned RegNo
argument_list|)
block|{
return|return
name|RegNo
operator|==
name|AArch64
operator|::
name|XSP
operator|||
name|RegNo
operator|==
name|AArch64
operator|::
name|WSP
return|;
block|}
name|template
operator|<
name|A64SE
operator|::
name|ShiftExtSpecifiers
name|Ext
block|,
name|bool
name|IsHalf
operator|>
name|void
name|printNeonMovImmShiftOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printNeonUImm0Operand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printUImmHexOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printUImmBareOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printNeonUImm64MaskOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|template
operator|<
name|A64Layout
operator|::
name|VectorLayout
name|Layout
block|,
name|unsigned
name|Count
operator|>
name|void
name|printVectorList
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

