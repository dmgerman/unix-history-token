begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- AArch64RegisterBankInfo -----------------------------------*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file declares the targeting of the RegisterBankInfo class for AArch64.
end_comment

begin_comment
comment|/// \todo This should be generated by TableGen.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AARCH64_AARCH64REGISTERBANKINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AARCH64_AARCH64REGISTERBANKINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/GlobalISel/RegisterBankInfo.h"
end_include

begin_define
define|#
directive|define
name|GET_REGBANK_DECLARATIONS
end_define

begin_include
include|#
directive|include
file|"AArch64GenRegisterBank.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|TargetRegisterInfo
decl_stmt|;
name|class
name|AArch64GenRegisterBankInfo
range|:
name|public
name|RegisterBankInfo
block|{
name|protected
operator|:
expr|enum
name|PartialMappingIdx
block|{
name|PMI_None
operator|=
operator|-
literal|1
block|,
name|PMI_FPR32
operator|=
literal|1
block|,
name|PMI_FPR64
block|,
name|PMI_FPR128
block|,
name|PMI_FPR256
block|,
name|PMI_FPR512
block|,
name|PMI_GPR32
block|,
name|PMI_GPR64
block|,
name|PMI_FirstGPR
operator|=
name|PMI_GPR32
block|,
name|PMI_LastGPR
operator|=
name|PMI_GPR64
block|,
name|PMI_FirstFPR
operator|=
name|PMI_FPR32
block|,
name|PMI_LastFPR
operator|=
name|PMI_FPR512
block|,
name|PMI_Min
operator|=
name|PMI_FirstFPR
block|,   }
block|;
specifier|static
name|RegisterBankInfo
operator|::
name|PartialMapping
name|PartMappings
index|[]
block|;
specifier|static
name|RegisterBankInfo
operator|::
name|ValueMapping
name|ValMappings
index|[]
block|;
specifier|static
name|PartialMappingIdx
name|BankIDToCopyMapIdx
index|[]
block|;    enum
name|ValueMappingIdx
block|{
name|InvalidIdx
operator|=
literal|0
block|,
name|First3OpsIdx
operator|=
literal|1
block|,
name|Last3OpsIdx
operator|=
literal|19
block|,
name|DistanceBetweenRegBanks
operator|=
literal|3
block|,
name|FirstCrossRegCpyIdx
operator|=
literal|22
block|,
name|LastCrossRegCpyIdx
operator|=
literal|34
block|,
name|DistanceBetweenCrossRegCpy
operator|=
literal|2
block|}
block|;
specifier|static
name|bool
name|checkPartialMap
argument_list|(
argument|unsigned Idx
argument_list|,
argument|unsigned ValStartIdx
argument_list|,
argument|unsigned ValLength
argument_list|,
argument|const RegisterBank&RB
argument_list|)
block|;
specifier|static
name|bool
name|checkValueMapImpl
argument_list|(
argument|unsigned Idx
argument_list|,
argument|unsigned FirstInBank
argument_list|,
argument|unsigned Size
argument_list|,
argument|unsigned Offset
argument_list|)
block|;
specifier|static
name|bool
name|checkPartialMappingIdx
argument_list|(
argument|PartialMappingIdx FirstAlias
argument_list|,
argument|PartialMappingIdx LastAlias
argument_list|,
argument|ArrayRef<PartialMappingIdx> Order
argument_list|)
block|;
specifier|static
name|unsigned
name|getRegBankBaseIdxOffset
argument_list|(
argument|unsigned RBIdx
argument_list|,
argument|unsigned Size
argument_list|)
block|;
comment|/// Get the pointer to the ValueMapping representing the RegisterBank
comment|/// at \p RBIdx with a size of \p Size.
comment|///
comment|/// The returned mapping works for instructions with the same kind of
comment|/// operands for up to 3 operands.
comment|///
comment|/// \pre \p RBIdx != PartialMappingIdx::None
specifier|static
specifier|const
name|RegisterBankInfo
operator|::
name|ValueMapping
operator|*
name|getValueMapping
argument_list|(
argument|PartialMappingIdx RBIdx
argument_list|,
argument|unsigned Size
argument_list|)
block|;
comment|/// Get the pointer to the ValueMapping of the operands of a copy
comment|/// instruction from the \p SrcBankID register bank to the \p DstBankID
comment|/// register bank with a size of \p Size.
specifier|static
specifier|const
name|RegisterBankInfo
operator|::
name|ValueMapping
operator|*
name|getCopyMapping
argument_list|(
argument|unsigned DstBankID
argument_list|,
argument|unsigned SrcBankID
argument_list|,
argument|unsigned Size
argument_list|)
block|;
define|#
directive|define
name|GET_TARGET_REGBANK_CLASS
include|#
directive|include
file|"AArch64GenRegisterBank.inc"
block|}
decl_stmt|;
comment|/// This class provides the information for the target register banks.
name|class
name|AArch64RegisterBankInfo
name|final
range|:
name|public
name|AArch64GenRegisterBankInfo
block|{
comment|/// See RegisterBankInfo::applyMapping.
name|void
name|applyMappingImpl
argument_list|(
argument|const OperandsMapper&OpdMapper
argument_list|)
specifier|const
name|override
block|;
comment|/// Get an instruction mapping where all the operands map to
comment|/// the same register bank and have similar size.
comment|///
comment|/// \pre MI.getNumOperands()<= 3
comment|///
comment|/// \return An InstructionMappings with a statically allocated
comment|/// OperandsMapping.
specifier|const
name|InstructionMapping
operator|&
name|getSameKindOfOperandsMapping
argument_list|(
argument|const MachineInstr&MI
argument_list|)
specifier|const
block|;
name|public
operator|:
name|AArch64RegisterBankInfo
argument_list|(
specifier|const
name|TargetRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|copyCost
argument_list|(
argument|const RegisterBank&A
argument_list|,
argument|const RegisterBank&B
argument_list|,
argument|unsigned Size
argument_list|)
specifier|const
name|override
block|;
specifier|const
name|RegisterBank
operator|&
name|getRegBankFromRegClass
argument_list|(
argument|const TargetRegisterClass&RC
argument_list|)
specifier|const
name|override
block|;
name|InstructionMappings
name|getInstrAlternativeMappings
argument_list|(
argument|const MachineInstr&MI
argument_list|)
specifier|const
name|override
block|;
specifier|const
name|InstructionMapping
operator|&
name|getInstrMapping
argument_list|(
argument|const MachineInstr&MI
argument_list|)
specifier|const
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

