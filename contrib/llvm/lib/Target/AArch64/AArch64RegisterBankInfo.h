begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- AArch64RegisterBankInfo -----------------------------------*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file declares the targeting of the RegisterBankInfo class for AArch64.
end_comment

begin_comment
comment|/// \todo This should be generated by TableGen.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AARCH64_AARCH64REGISTERBANKINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AARCH64_AARCH64REGISTERBANKINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/CodeGen/GlobalISel/RegisterBankInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|TargetRegisterInfo
decl_stmt|;
name|namespace
name|AArch64
block|{
enum|enum
block|{
name|GPRRegBankID
init|=
literal|0
block|,
comment|/// General Purpose Registers: W, X.
name|FPRRegBankID
init|=
literal|1
block|,
comment|/// Floating Point/Vector Registers: B, H, S, D, Q.
name|CCRRegBankID
init|=
literal|2
block|,
comment|/// Conditional register: NZCV.
name|NumRegisterBanks
block|}
enum|;
block|}
comment|// End AArch64 namespace.
comment|/// This class provides the information for the target register banks.
name|class
name|AArch64RegisterBankInfo
range|:
name|public
name|RegisterBankInfo
block|{
comment|/// See RegisterBankInfo::applyMapping.
name|void
name|applyMappingImpl
argument_list|(
argument|const OperandsMapper&OpdMapper
argument_list|)
specifier|const
name|override
block|;
name|public
operator|:
name|AArch64RegisterBankInfo
argument_list|(
specifier|const
name|TargetRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
comment|/// Get the cost of a copy from \p B to \p A, or put differently,
comment|/// get the cost of A = COPY B. Since register banks may cover
comment|/// different size, \p Size specifies what will be the size in bits
comment|/// that will be copied around.
comment|///
comment|/// \note Since this is a copy, both registers have the same size.
name|unsigned
name|copyCost
argument_list|(
argument|const RegisterBank&A
argument_list|,
argument|const RegisterBank&B
argument_list|,
argument|unsigned Size
argument_list|)
specifier|const
name|override
block|;
comment|/// Get a register bank that covers \p RC.
comment|///
comment|/// \pre \p RC is a user-defined register class (as opposed as one
comment|/// generated by TableGen).
comment|///
comment|/// \note The mapping RC -> RegBank could be built while adding the
comment|/// coverage for the register banks. However, we do not do it, because,
comment|/// at least for now, we only need this information for register classes
comment|/// that are used in the description of instruction. In other words,
comment|/// there are just a handful of them and we do not want to waste space.
comment|///
comment|/// \todo This should be TableGen'ed.
specifier|const
name|RegisterBank
operator|&
name|getRegBankFromRegClass
argument_list|(
argument|const TargetRegisterClass&RC
argument_list|)
specifier|const
name|override
block|;
comment|/// Get the alternative mappings for \p MI.
comment|/// Alternative in the sense different from getInstrMapping.
name|InstructionMappings
name|getInstrAlternativeMappings
argument_list|(
argument|const MachineInstr&MI
argument_list|)
specifier|const
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace.
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

