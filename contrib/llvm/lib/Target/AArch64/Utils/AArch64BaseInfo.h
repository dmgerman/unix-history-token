begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AArch64BaseInfo.h - Top level definitions for AArch64 ---*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains small standalone helper functions and enum definitions for
end_comment

begin_comment
comment|// the AArch64 target useful for the compiler back-end and the MC libraries.
end_comment

begin_comment
comment|// As such, it deliberately does not include references to LLVM core
end_comment

begin_comment
comment|// code gen types, passes, etc..
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AARCH64_UTILS_AARCH64BASEINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AARCH64_UTILS_AARCH64BASEINFO_H
end_define

begin_comment
comment|// FIXME: Is it easiest to fix this layering violation by moving the .inc
end_comment

begin_comment
comment|// #includes from AArch64MCTargetDesc.h to here?
end_comment

begin_include
include|#
directive|include
file|"MCTargetDesc/AArch64MCTargetDesc.h"
end_include

begin_comment
comment|// For AArch64::X0 and friends.
end_comment

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringSwitch.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/SubtargetFeature.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
specifier|inline
specifier|static
name|unsigned
name|getWRegFromXReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
switch|switch
condition|(
name|Reg
condition|)
block|{
case|case
name|AArch64
operator|::
name|X0
case|:
return|return
name|AArch64
operator|::
name|W0
return|;
case|case
name|AArch64
operator|::
name|X1
case|:
return|return
name|AArch64
operator|::
name|W1
return|;
case|case
name|AArch64
operator|::
name|X2
case|:
return|return
name|AArch64
operator|::
name|W2
return|;
case|case
name|AArch64
operator|::
name|X3
case|:
return|return
name|AArch64
operator|::
name|W3
return|;
case|case
name|AArch64
operator|::
name|X4
case|:
return|return
name|AArch64
operator|::
name|W4
return|;
case|case
name|AArch64
operator|::
name|X5
case|:
return|return
name|AArch64
operator|::
name|W5
return|;
case|case
name|AArch64
operator|::
name|X6
case|:
return|return
name|AArch64
operator|::
name|W6
return|;
case|case
name|AArch64
operator|::
name|X7
case|:
return|return
name|AArch64
operator|::
name|W7
return|;
case|case
name|AArch64
operator|::
name|X8
case|:
return|return
name|AArch64
operator|::
name|W8
return|;
case|case
name|AArch64
operator|::
name|X9
case|:
return|return
name|AArch64
operator|::
name|W9
return|;
case|case
name|AArch64
operator|::
name|X10
case|:
return|return
name|AArch64
operator|::
name|W10
return|;
case|case
name|AArch64
operator|::
name|X11
case|:
return|return
name|AArch64
operator|::
name|W11
return|;
case|case
name|AArch64
operator|::
name|X12
case|:
return|return
name|AArch64
operator|::
name|W12
return|;
case|case
name|AArch64
operator|::
name|X13
case|:
return|return
name|AArch64
operator|::
name|W13
return|;
case|case
name|AArch64
operator|::
name|X14
case|:
return|return
name|AArch64
operator|::
name|W14
return|;
case|case
name|AArch64
operator|::
name|X15
case|:
return|return
name|AArch64
operator|::
name|W15
return|;
case|case
name|AArch64
operator|::
name|X16
case|:
return|return
name|AArch64
operator|::
name|W16
return|;
case|case
name|AArch64
operator|::
name|X17
case|:
return|return
name|AArch64
operator|::
name|W17
return|;
case|case
name|AArch64
operator|::
name|X18
case|:
return|return
name|AArch64
operator|::
name|W18
return|;
case|case
name|AArch64
operator|::
name|X19
case|:
return|return
name|AArch64
operator|::
name|W19
return|;
case|case
name|AArch64
operator|::
name|X20
case|:
return|return
name|AArch64
operator|::
name|W20
return|;
case|case
name|AArch64
operator|::
name|X21
case|:
return|return
name|AArch64
operator|::
name|W21
return|;
case|case
name|AArch64
operator|::
name|X22
case|:
return|return
name|AArch64
operator|::
name|W22
return|;
case|case
name|AArch64
operator|::
name|X23
case|:
return|return
name|AArch64
operator|::
name|W23
return|;
case|case
name|AArch64
operator|::
name|X24
case|:
return|return
name|AArch64
operator|::
name|W24
return|;
case|case
name|AArch64
operator|::
name|X25
case|:
return|return
name|AArch64
operator|::
name|W25
return|;
case|case
name|AArch64
operator|::
name|X26
case|:
return|return
name|AArch64
operator|::
name|W26
return|;
case|case
name|AArch64
operator|::
name|X27
case|:
return|return
name|AArch64
operator|::
name|W27
return|;
case|case
name|AArch64
operator|::
name|X28
case|:
return|return
name|AArch64
operator|::
name|W28
return|;
case|case
name|AArch64
operator|::
name|FP
case|:
return|return
name|AArch64
operator|::
name|W29
return|;
case|case
name|AArch64
operator|::
name|LR
case|:
return|return
name|AArch64
operator|::
name|W30
return|;
case|case
name|AArch64
operator|::
name|SP
case|:
return|return
name|AArch64
operator|::
name|WSP
return|;
case|case
name|AArch64
operator|::
name|XZR
case|:
return|return
name|AArch64
operator|::
name|WZR
return|;
block|}
comment|// For anything else, return it unchanged.
return|return
name|Reg
return|;
block|}
specifier|inline
specifier|static
name|unsigned
name|getXRegFromWReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
switch|switch
condition|(
name|Reg
condition|)
block|{
case|case
name|AArch64
operator|::
name|W0
case|:
return|return
name|AArch64
operator|::
name|X0
return|;
case|case
name|AArch64
operator|::
name|W1
case|:
return|return
name|AArch64
operator|::
name|X1
return|;
case|case
name|AArch64
operator|::
name|W2
case|:
return|return
name|AArch64
operator|::
name|X2
return|;
case|case
name|AArch64
operator|::
name|W3
case|:
return|return
name|AArch64
operator|::
name|X3
return|;
case|case
name|AArch64
operator|::
name|W4
case|:
return|return
name|AArch64
operator|::
name|X4
return|;
case|case
name|AArch64
operator|::
name|W5
case|:
return|return
name|AArch64
operator|::
name|X5
return|;
case|case
name|AArch64
operator|::
name|W6
case|:
return|return
name|AArch64
operator|::
name|X6
return|;
case|case
name|AArch64
operator|::
name|W7
case|:
return|return
name|AArch64
operator|::
name|X7
return|;
case|case
name|AArch64
operator|::
name|W8
case|:
return|return
name|AArch64
operator|::
name|X8
return|;
case|case
name|AArch64
operator|::
name|W9
case|:
return|return
name|AArch64
operator|::
name|X9
return|;
case|case
name|AArch64
operator|::
name|W10
case|:
return|return
name|AArch64
operator|::
name|X10
return|;
case|case
name|AArch64
operator|::
name|W11
case|:
return|return
name|AArch64
operator|::
name|X11
return|;
case|case
name|AArch64
operator|::
name|W12
case|:
return|return
name|AArch64
operator|::
name|X12
return|;
case|case
name|AArch64
operator|::
name|W13
case|:
return|return
name|AArch64
operator|::
name|X13
return|;
case|case
name|AArch64
operator|::
name|W14
case|:
return|return
name|AArch64
operator|::
name|X14
return|;
case|case
name|AArch64
operator|::
name|W15
case|:
return|return
name|AArch64
operator|::
name|X15
return|;
case|case
name|AArch64
operator|::
name|W16
case|:
return|return
name|AArch64
operator|::
name|X16
return|;
case|case
name|AArch64
operator|::
name|W17
case|:
return|return
name|AArch64
operator|::
name|X17
return|;
case|case
name|AArch64
operator|::
name|W18
case|:
return|return
name|AArch64
operator|::
name|X18
return|;
case|case
name|AArch64
operator|::
name|W19
case|:
return|return
name|AArch64
operator|::
name|X19
return|;
case|case
name|AArch64
operator|::
name|W20
case|:
return|return
name|AArch64
operator|::
name|X20
return|;
case|case
name|AArch64
operator|::
name|W21
case|:
return|return
name|AArch64
operator|::
name|X21
return|;
case|case
name|AArch64
operator|::
name|W22
case|:
return|return
name|AArch64
operator|::
name|X22
return|;
case|case
name|AArch64
operator|::
name|W23
case|:
return|return
name|AArch64
operator|::
name|X23
return|;
case|case
name|AArch64
operator|::
name|W24
case|:
return|return
name|AArch64
operator|::
name|X24
return|;
case|case
name|AArch64
operator|::
name|W25
case|:
return|return
name|AArch64
operator|::
name|X25
return|;
case|case
name|AArch64
operator|::
name|W26
case|:
return|return
name|AArch64
operator|::
name|X26
return|;
case|case
name|AArch64
operator|::
name|W27
case|:
return|return
name|AArch64
operator|::
name|X27
return|;
case|case
name|AArch64
operator|::
name|W28
case|:
return|return
name|AArch64
operator|::
name|X28
return|;
case|case
name|AArch64
operator|::
name|W29
case|:
return|return
name|AArch64
operator|::
name|FP
return|;
case|case
name|AArch64
operator|::
name|W30
case|:
return|return
name|AArch64
operator|::
name|LR
return|;
case|case
name|AArch64
operator|::
name|WSP
case|:
return|return
name|AArch64
operator|::
name|SP
return|;
case|case
name|AArch64
operator|::
name|WZR
case|:
return|return
name|AArch64
operator|::
name|XZR
return|;
block|}
comment|// For anything else, return it unchanged.
return|return
name|Reg
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|getBRegFromDReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
switch|switch
condition|(
name|Reg
condition|)
block|{
case|case
name|AArch64
operator|::
name|D0
case|:
return|return
name|AArch64
operator|::
name|B0
return|;
case|case
name|AArch64
operator|::
name|D1
case|:
return|return
name|AArch64
operator|::
name|B1
return|;
case|case
name|AArch64
operator|::
name|D2
case|:
return|return
name|AArch64
operator|::
name|B2
return|;
case|case
name|AArch64
operator|::
name|D3
case|:
return|return
name|AArch64
operator|::
name|B3
return|;
case|case
name|AArch64
operator|::
name|D4
case|:
return|return
name|AArch64
operator|::
name|B4
return|;
case|case
name|AArch64
operator|::
name|D5
case|:
return|return
name|AArch64
operator|::
name|B5
return|;
case|case
name|AArch64
operator|::
name|D6
case|:
return|return
name|AArch64
operator|::
name|B6
return|;
case|case
name|AArch64
operator|::
name|D7
case|:
return|return
name|AArch64
operator|::
name|B7
return|;
case|case
name|AArch64
operator|::
name|D8
case|:
return|return
name|AArch64
operator|::
name|B8
return|;
case|case
name|AArch64
operator|::
name|D9
case|:
return|return
name|AArch64
operator|::
name|B9
return|;
case|case
name|AArch64
operator|::
name|D10
case|:
return|return
name|AArch64
operator|::
name|B10
return|;
case|case
name|AArch64
operator|::
name|D11
case|:
return|return
name|AArch64
operator|::
name|B11
return|;
case|case
name|AArch64
operator|::
name|D12
case|:
return|return
name|AArch64
operator|::
name|B12
return|;
case|case
name|AArch64
operator|::
name|D13
case|:
return|return
name|AArch64
operator|::
name|B13
return|;
case|case
name|AArch64
operator|::
name|D14
case|:
return|return
name|AArch64
operator|::
name|B14
return|;
case|case
name|AArch64
operator|::
name|D15
case|:
return|return
name|AArch64
operator|::
name|B15
return|;
case|case
name|AArch64
operator|::
name|D16
case|:
return|return
name|AArch64
operator|::
name|B16
return|;
case|case
name|AArch64
operator|::
name|D17
case|:
return|return
name|AArch64
operator|::
name|B17
return|;
case|case
name|AArch64
operator|::
name|D18
case|:
return|return
name|AArch64
operator|::
name|B18
return|;
case|case
name|AArch64
operator|::
name|D19
case|:
return|return
name|AArch64
operator|::
name|B19
return|;
case|case
name|AArch64
operator|::
name|D20
case|:
return|return
name|AArch64
operator|::
name|B20
return|;
case|case
name|AArch64
operator|::
name|D21
case|:
return|return
name|AArch64
operator|::
name|B21
return|;
case|case
name|AArch64
operator|::
name|D22
case|:
return|return
name|AArch64
operator|::
name|B22
return|;
case|case
name|AArch64
operator|::
name|D23
case|:
return|return
name|AArch64
operator|::
name|B23
return|;
case|case
name|AArch64
operator|::
name|D24
case|:
return|return
name|AArch64
operator|::
name|B24
return|;
case|case
name|AArch64
operator|::
name|D25
case|:
return|return
name|AArch64
operator|::
name|B25
return|;
case|case
name|AArch64
operator|::
name|D26
case|:
return|return
name|AArch64
operator|::
name|B26
return|;
case|case
name|AArch64
operator|::
name|D27
case|:
return|return
name|AArch64
operator|::
name|B27
return|;
case|case
name|AArch64
operator|::
name|D28
case|:
return|return
name|AArch64
operator|::
name|B28
return|;
case|case
name|AArch64
operator|::
name|D29
case|:
return|return
name|AArch64
operator|::
name|B29
return|;
case|case
name|AArch64
operator|::
name|D30
case|:
return|return
name|AArch64
operator|::
name|B30
return|;
case|case
name|AArch64
operator|::
name|D31
case|:
return|return
name|AArch64
operator|::
name|B31
return|;
block|}
comment|// For anything else, return it unchanged.
return|return
name|Reg
return|;
block|}
specifier|static
specifier|inline
name|unsigned
name|getDRegFromBReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
switch|switch
condition|(
name|Reg
condition|)
block|{
case|case
name|AArch64
operator|::
name|B0
case|:
return|return
name|AArch64
operator|::
name|D0
return|;
case|case
name|AArch64
operator|::
name|B1
case|:
return|return
name|AArch64
operator|::
name|D1
return|;
case|case
name|AArch64
operator|::
name|B2
case|:
return|return
name|AArch64
operator|::
name|D2
return|;
case|case
name|AArch64
operator|::
name|B3
case|:
return|return
name|AArch64
operator|::
name|D3
return|;
case|case
name|AArch64
operator|::
name|B4
case|:
return|return
name|AArch64
operator|::
name|D4
return|;
case|case
name|AArch64
operator|::
name|B5
case|:
return|return
name|AArch64
operator|::
name|D5
return|;
case|case
name|AArch64
operator|::
name|B6
case|:
return|return
name|AArch64
operator|::
name|D6
return|;
case|case
name|AArch64
operator|::
name|B7
case|:
return|return
name|AArch64
operator|::
name|D7
return|;
case|case
name|AArch64
operator|::
name|B8
case|:
return|return
name|AArch64
operator|::
name|D8
return|;
case|case
name|AArch64
operator|::
name|B9
case|:
return|return
name|AArch64
operator|::
name|D9
return|;
case|case
name|AArch64
operator|::
name|B10
case|:
return|return
name|AArch64
operator|::
name|D10
return|;
case|case
name|AArch64
operator|::
name|B11
case|:
return|return
name|AArch64
operator|::
name|D11
return|;
case|case
name|AArch64
operator|::
name|B12
case|:
return|return
name|AArch64
operator|::
name|D12
return|;
case|case
name|AArch64
operator|::
name|B13
case|:
return|return
name|AArch64
operator|::
name|D13
return|;
case|case
name|AArch64
operator|::
name|B14
case|:
return|return
name|AArch64
operator|::
name|D14
return|;
case|case
name|AArch64
operator|::
name|B15
case|:
return|return
name|AArch64
operator|::
name|D15
return|;
case|case
name|AArch64
operator|::
name|B16
case|:
return|return
name|AArch64
operator|::
name|D16
return|;
case|case
name|AArch64
operator|::
name|B17
case|:
return|return
name|AArch64
operator|::
name|D17
return|;
case|case
name|AArch64
operator|::
name|B18
case|:
return|return
name|AArch64
operator|::
name|D18
return|;
case|case
name|AArch64
operator|::
name|B19
case|:
return|return
name|AArch64
operator|::
name|D19
return|;
case|case
name|AArch64
operator|::
name|B20
case|:
return|return
name|AArch64
operator|::
name|D20
return|;
case|case
name|AArch64
operator|::
name|B21
case|:
return|return
name|AArch64
operator|::
name|D21
return|;
case|case
name|AArch64
operator|::
name|B22
case|:
return|return
name|AArch64
operator|::
name|D22
return|;
case|case
name|AArch64
operator|::
name|B23
case|:
return|return
name|AArch64
operator|::
name|D23
return|;
case|case
name|AArch64
operator|::
name|B24
case|:
return|return
name|AArch64
operator|::
name|D24
return|;
case|case
name|AArch64
operator|::
name|B25
case|:
return|return
name|AArch64
operator|::
name|D25
return|;
case|case
name|AArch64
operator|::
name|B26
case|:
return|return
name|AArch64
operator|::
name|D26
return|;
case|case
name|AArch64
operator|::
name|B27
case|:
return|return
name|AArch64
operator|::
name|D27
return|;
case|case
name|AArch64
operator|::
name|B28
case|:
return|return
name|AArch64
operator|::
name|D28
return|;
case|case
name|AArch64
operator|::
name|B29
case|:
return|return
name|AArch64
operator|::
name|D29
return|;
case|case
name|AArch64
operator|::
name|B30
case|:
return|return
name|AArch64
operator|::
name|D30
return|;
case|case
name|AArch64
operator|::
name|B31
case|:
return|return
name|AArch64
operator|::
name|D31
return|;
block|}
comment|// For anything else, return it unchanged.
return|return
name|Reg
return|;
block|}
name|namespace
name|AArch64CC
block|{
comment|// The CondCodes constants map directly to the 4-bit encoding of the condition
comment|// field for predicated instructions.
enum|enum
name|CondCode
block|{
comment|// Meaning (integer)          Meaning (floating-point)
name|EQ
init|=
literal|0x0
block|,
comment|// Equal                      Equal
name|NE
init|=
literal|0x1
block|,
comment|// Not equal                  Not equal, or unordered
name|HS
init|=
literal|0x2
block|,
comment|// Unsigned higher or same>, ==, or unordered
name|LO
init|=
literal|0x3
block|,
comment|// Unsigned lower             Less than
name|MI
init|=
literal|0x4
block|,
comment|// Minus, negative            Less than
name|PL
init|=
literal|0x5
block|,
comment|// Plus, positive or zero>, ==, or unordered
name|VS
init|=
literal|0x6
block|,
comment|// Overflow                   Unordered
name|VC
init|=
literal|0x7
block|,
comment|// No overflow                Not unordered
name|HI
init|=
literal|0x8
block|,
comment|// Unsigned higher            Greater than, or unordered
name|LS
init|=
literal|0x9
block|,
comment|// Unsigned lower or same     Less than or equal
name|GE
init|=
literal|0xa
block|,
comment|// Greater than or equal      Greater than or equal
name|LT
init|=
literal|0xb
block|,
comment|// Less than                  Less than, or unordered
name|GT
init|=
literal|0xc
block|,
comment|// Greater than               Greater than
name|LE
init|=
literal|0xd
block|,
comment|// Less than or equal<, ==, or unordered
name|AL
init|=
literal|0xe
block|,
comment|// Always (unconditional)     Always (unconditional)
name|NV
init|=
literal|0xf
block|,
comment|// Always (unconditional)     Always (unconditional)
comment|// Note the NV exists purely to disassemble 0b1111. Execution is "always".
name|Invalid
block|}
enum|;
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|getCondCodeName
parameter_list|(
name|CondCode
name|Code
parameter_list|)
block|{
switch|switch
condition|(
name|Code
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown condition code"
argument_list|)
expr_stmt|;
case|case
name|EQ
case|:
return|return
literal|"eq"
return|;
case|case
name|NE
case|:
return|return
literal|"ne"
return|;
case|case
name|HS
case|:
return|return
literal|"hs"
return|;
case|case
name|LO
case|:
return|return
literal|"lo"
return|;
case|case
name|MI
case|:
return|return
literal|"mi"
return|;
case|case
name|PL
case|:
return|return
literal|"pl"
return|;
case|case
name|VS
case|:
return|return
literal|"vs"
return|;
case|case
name|VC
case|:
return|return
literal|"vc"
return|;
case|case
name|HI
case|:
return|return
literal|"hi"
return|;
case|case
name|LS
case|:
return|return
literal|"ls"
return|;
case|case
name|GE
case|:
return|return
literal|"ge"
return|;
case|case
name|LT
case|:
return|return
literal|"lt"
return|;
case|case
name|GT
case|:
return|return
literal|"gt"
return|;
case|case
name|LE
case|:
return|return
literal|"le"
return|;
case|case
name|AL
case|:
return|return
literal|"al"
return|;
case|case
name|NV
case|:
return|return
literal|"nv"
return|;
block|}
block|}
specifier|inline
specifier|static
name|CondCode
name|getInvertedCondCode
parameter_list|(
name|CondCode
name|Code
parameter_list|)
block|{
comment|// To reverse a condition it's necessary to only invert the low bit:
return|return
name|static_cast
operator|<
name|CondCode
operator|>
operator|(
name|static_cast
operator|<
name|unsigned
operator|>
operator|(
name|Code
operator|)
operator|^
literal|0x1
operator|)
return|;
block|}
comment|/// Given a condition code, return NZCV flags that would satisfy that condition.
comment|/// The flag bits are in the format expected by the ccmp instructions.
comment|/// Note that many different flag settings can satisfy a given condition code,
comment|/// this function just returns one of them.
specifier|inline
specifier|static
name|unsigned
name|getNZCVToSatisfyCondCode
parameter_list|(
name|CondCode
name|Code
parameter_list|)
block|{
comment|// NZCV flags encoded as expected by ccmp instructions, ARMv8 ISA 5.5.7.
enum|enum
block|{
name|N
init|=
literal|8
block|,
name|Z
init|=
literal|4
block|,
name|C
init|=
literal|2
block|,
name|V
init|=
literal|1
block|}
enum|;
switch|switch
condition|(
name|Code
condition|)
block|{
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown condition code"
argument_list|)
expr_stmt|;
case|case
name|EQ
case|:
return|return
name|Z
return|;
comment|// Z == 1
case|case
name|NE
case|:
return|return
literal|0
return|;
comment|// Z == 0
case|case
name|HS
case|:
return|return
name|C
return|;
comment|// C == 1
case|case
name|LO
case|:
return|return
literal|0
return|;
comment|// C == 0
case|case
name|MI
case|:
return|return
name|N
return|;
comment|// N == 1
case|case
name|PL
case|:
return|return
literal|0
return|;
comment|// N == 0
case|case
name|VS
case|:
return|return
name|V
return|;
comment|// V == 1
case|case
name|VC
case|:
return|return
literal|0
return|;
comment|// V == 0
case|case
name|HI
case|:
return|return
name|C
return|;
comment|// C == 1&& Z == 0
case|case
name|LS
case|:
return|return
literal|0
return|;
comment|// C == 0 || Z == 1
case|case
name|GE
case|:
return|return
literal|0
return|;
comment|// N == V
case|case
name|LT
case|:
return|return
name|N
return|;
comment|// N != V
case|case
name|GT
case|:
return|return
literal|0
return|;
comment|// Z == 0&& N == V
case|case
name|LE
case|:
return|return
name|Z
return|;
comment|// Z == 1 || N != V
block|}
block|}
block|}
comment|// end namespace AArch64CC
name|namespace
name|AArch64AT
block|{
struct|struct
name|AT
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|GET_AT_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64DB
block|{
struct|struct
name|DB
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|GET_DB_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64DC
block|{
struct|struct
name|DC
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|GET_DC_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64IC
block|{
struct|struct
name|IC
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
name|bool
name|NeedsReg
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|GET_IC_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64ISB
block|{
struct|struct
name|ISB
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|GET_ISB_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64PRFM
block|{
struct|struct
name|PRFM
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|GET_PRFM_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64PState
block|{
struct|struct
name|PState
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
name|FeatureBitset
name|FeaturesRequired
decl_stmt|;
name|bool
name|haveFeatures
argument_list|(
name|FeatureBitset
name|ActiveFeatures
argument_list|)
decl|const
block|{
return|return
operator|(
name|FeaturesRequired
operator|&
name|ActiveFeatures
operator|)
operator|==
name|FeaturesRequired
return|;
block|}
block|}
struct|;
define|#
directive|define
name|GET_PSTATE_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64PSBHint
block|{
struct|struct
name|PSB
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|GET_PSB_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64SE
block|{
enum|enum
name|ShiftExtSpecifiers
block|{
name|Invalid
init|=
operator|-
literal|1
block|,
name|LSL
block|,
name|MSL
block|,
name|LSR
block|,
name|ASR
block|,
name|ROR
block|,
name|UXTB
block|,
name|UXTH
block|,
name|UXTW
block|,
name|UXTX
block|,
name|SXTB
block|,
name|SXTH
block|,
name|SXTW
block|,
name|SXTX
block|}
enum|;
block|}
name|namespace
name|AArch64Layout
block|{
enum|enum
name|VectorLayout
block|{
name|Invalid
init|=
operator|-
literal|1
block|,
name|VL_8B
block|,
name|VL_4H
block|,
name|VL_2S
block|,
name|VL_1D
block|,
name|VL_16B
block|,
name|VL_8H
block|,
name|VL_4S
block|,
name|VL_2D
block|,
comment|// Bare layout for the 128-bit vector
comment|// (only show ".b", ".h", ".s", ".d" without vector number)
name|VL_B
block|,
name|VL_H
block|,
name|VL_S
block|,
name|VL_D
block|}
enum|;
block|}
specifier|inline
specifier|static
specifier|const
name|char
modifier|*
name|AArch64VectorLayoutToString
argument_list|(
name|AArch64Layout
operator|::
name|VectorLayout
name|Layout
argument_list|)
block|{
switch|switch
condition|(
name|Layout
condition|)
block|{
case|case
name|AArch64Layout
operator|::
name|VL_8B
case|:
return|return
literal|".8b"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_4H
case|:
return|return
literal|".4h"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_2S
case|:
return|return
literal|".2s"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_1D
case|:
return|return
literal|".1d"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_16B
case|:
return|return
literal|".16b"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_8H
case|:
return|return
literal|".8h"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_4S
case|:
return|return
literal|".4s"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_2D
case|:
return|return
literal|".2d"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_B
case|:
return|return
literal|".b"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_H
case|:
return|return
literal|".h"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_S
case|:
return|return
literal|".s"
return|;
case|case
name|AArch64Layout
operator|::
name|VL_D
case|:
return|return
literal|".d"
return|;
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown Vector Layout"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|inline
specifier|static
name|AArch64Layout
operator|::
name|VectorLayout
name|AArch64StringToVectorLayout
argument_list|(
argument|StringRef LayoutStr
argument_list|)
block|{
return|return
name|StringSwitch
operator|<
name|AArch64Layout
operator|::
name|VectorLayout
operator|>
operator|(
name|LayoutStr
operator|)
operator|.
name|Case
argument_list|(
literal|".8b"
argument_list|,
name|AArch64Layout
operator|::
name|VL_8B
argument_list|)
operator|.
name|Case
argument_list|(
literal|".4h"
argument_list|,
name|AArch64Layout
operator|::
name|VL_4H
argument_list|)
operator|.
name|Case
argument_list|(
literal|".2s"
argument_list|,
name|AArch64Layout
operator|::
name|VL_2S
argument_list|)
operator|.
name|Case
argument_list|(
literal|".1d"
argument_list|,
name|AArch64Layout
operator|::
name|VL_1D
argument_list|)
operator|.
name|Case
argument_list|(
literal|".16b"
argument_list|,
name|AArch64Layout
operator|::
name|VL_16B
argument_list|)
operator|.
name|Case
argument_list|(
literal|".8h"
argument_list|,
name|AArch64Layout
operator|::
name|VL_8H
argument_list|)
operator|.
name|Case
argument_list|(
literal|".4s"
argument_list|,
name|AArch64Layout
operator|::
name|VL_4S
argument_list|)
operator|.
name|Case
argument_list|(
literal|".2d"
argument_list|,
name|AArch64Layout
operator|::
name|VL_2D
argument_list|)
operator|.
name|Case
argument_list|(
literal|".b"
argument_list|,
name|AArch64Layout
operator|::
name|VL_B
argument_list|)
operator|.
name|Case
argument_list|(
literal|".h"
argument_list|,
name|AArch64Layout
operator|::
name|VL_H
argument_list|)
operator|.
name|Case
argument_list|(
literal|".s"
argument_list|,
name|AArch64Layout
operator|::
name|VL_S
argument_list|)
operator|.
name|Case
argument_list|(
literal|".d"
argument_list|,
name|AArch64Layout
operator|::
name|VL_D
argument_list|)
operator|.
name|Default
argument_list|(
name|AArch64Layout
operator|::
name|Invalid
argument_list|)
return|;
block|}
name|namespace
name|AArch64SysReg
block|{
struct|struct
name|SysReg
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|unsigned
name|Encoding
decl_stmt|;
name|bool
name|Readable
decl_stmt|;
name|bool
name|Writeable
decl_stmt|;
name|FeatureBitset
name|FeaturesRequired
decl_stmt|;
name|bool
name|haveFeatures
argument_list|(
name|FeatureBitset
name|ActiveFeatures
argument_list|)
decl|const
block|{
return|return
operator|(
name|FeaturesRequired
operator|&
name|ActiveFeatures
operator|)
operator|==
name|FeaturesRequired
return|;
block|}
block|}
struct|;
define|#
directive|define
name|GET_SYSREG_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
specifier|const
name|SysReg
modifier|*
name|lookupSysRegByName
parameter_list|(
name|StringRef
parameter_list|)
function_decl|;
specifier|const
name|SysReg
modifier|*
name|lookupSysRegByEncoding
parameter_list|(
name|uint16_t
parameter_list|)
function_decl|;
name|uint32_t
name|parseGenericRegister
parameter_list|(
name|StringRef
name|Name
parameter_list|)
function_decl|;
name|std
operator|::
name|string
name|genericRegisterString
argument_list|(
argument|uint32_t Bits
argument_list|)
expr_stmt|;
block|}
name|namespace
name|AArch64TLBI
block|{
struct|struct
name|TLBI
block|{
specifier|const
name|char
modifier|*
name|Name
decl_stmt|;
name|uint16_t
name|Encoding
decl_stmt|;
name|bool
name|NeedsReg
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|GET_TLBI_DECL
include|#
directive|include
file|"AArch64GenSystemOperands.inc"
block|}
name|namespace
name|AArch64II
block|{
comment|/// Target Operand Flag enum.
enum|enum
name|TOF
block|{
comment|//===------------------------------------------------------------------===//
comment|// AArch64 Specific MachineOperand flags.
name|MO_NO_FLAG
block|,
name|MO_FRAGMENT
init|=
literal|0xf
block|,
comment|/// MO_PAGE - A symbol operand with this flag represents the pc-relative
comment|/// offset of the 4K page containing the symbol.  This is used with the
comment|/// ADRP instruction.
name|MO_PAGE
init|=
literal|1
block|,
comment|/// MO_PAGEOFF - A symbol operand with this flag represents the offset of
comment|/// that symbol within a 4K page.  This offset is added to the page address
comment|/// to produce the complete address.
name|MO_PAGEOFF
init|=
literal|2
block|,
comment|/// MO_G3 - A symbol operand with this flag (granule 3) represents the high
comment|/// 16-bits of a 64-bit address, used in a MOVZ or MOVK instruction
name|MO_G3
init|=
literal|3
block|,
comment|/// MO_G2 - A symbol operand with this flag (granule 2) represents the bits
comment|/// 32-47 of a 64-bit address, used in a MOVZ or MOVK instruction
name|MO_G2
init|=
literal|4
block|,
comment|/// MO_G1 - A symbol operand with this flag (granule 1) represents the bits
comment|/// 16-31 of a 64-bit address, used in a MOVZ or MOVK instruction
name|MO_G1
init|=
literal|5
block|,
comment|/// MO_G0 - A symbol operand with this flag (granule 0) represents the bits
comment|/// 0-15 of a 64-bit address, used in a MOVZ or MOVK instruction
name|MO_G0
init|=
literal|6
block|,
comment|/// MO_HI12 - This flag indicates that a symbol operand represents the bits
comment|/// 13-24 of a 64-bit address, used in a arithmetic immediate-shifted-left-
comment|/// by-12-bits instruction.
name|MO_HI12
init|=
literal|7
block|,
comment|/// MO_GOT - This flag indicates that a symbol operand represents the
comment|/// address of the GOT entry for the symbol, rather than the address of
comment|/// the symbol itself.
name|MO_GOT
init|=
literal|0x10
block|,
comment|/// MO_NC - Indicates whether the linker is expected to check the symbol
comment|/// reference for overflow. For example in an ADRP/ADD pair of relocations
comment|/// the ADRP usually does check, but not the ADD.
name|MO_NC
init|=
literal|0x20
block|,
comment|/// MO_TLS - Indicates that the operand being accessed is some kind of
comment|/// thread-local symbol. On Darwin, only one type of thread-local access
comment|/// exists (pre linker-relaxation), but on ELF the TLSModel used for the
comment|/// referee will affect interpretation.
name|MO_TLS
init|=
literal|0x40
block|}
enum|;
block|}
comment|// end namespace AArch64II
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

