begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- PPCSubtarget.h - Define Subtarget for the PPC ----------*- C++ -*--===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the PowerPC specific subclass of TargetSubtargetInfo.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|POWERPCSUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|POWERPCSUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInstrItineraries.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"PPCGenSubtargetInfo.inc"
end_include

begin_comment
comment|// GCC #defines PPC on Linux but we use it as our namespace name
end_comment

begin_undef
undef|#
directive|undef
name|PPC
end_undef

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|StringRef
decl_stmt|;
name|namespace
name|PPC
block|{
comment|// -m directive values.
enum|enum
block|{
name|DIR_NONE
block|,
name|DIR_32
block|,
name|DIR_440
block|,
name|DIR_601
block|,
name|DIR_602
block|,
name|DIR_603
block|,
name|DIR_7400
block|,
name|DIR_750
block|,
name|DIR_970
block|,
name|DIR_A2
block|,
name|DIR_E500mc
block|,
name|DIR_E5500
block|,
name|DIR_PWR3
block|,
name|DIR_PWR4
block|,
name|DIR_PWR5
block|,
name|DIR_PWR5X
block|,
name|DIR_PWR6
block|,
name|DIR_PWR6X
block|,
name|DIR_PWR7
block|,
name|DIR_64
block|}
enum|;
block|}
name|class
name|GlobalValue
decl_stmt|;
name|class
name|TargetMachine
decl_stmt|;
name|class
name|PPCSubtarget
range|:
name|public
name|PPCGenSubtargetInfo
block|{
name|protected
operator|:
comment|/// stackAlignment - The minimum alignment known to hold of the stack frame on
comment|/// entry to the function and which must be maintained by every function.
name|unsigned
name|StackAlignment
block|;
comment|/// Selected instruction itineraries (one entry per itinerary class.)
name|InstrItineraryData
name|InstrItins
block|;
comment|/// Which cpu directive was used.
name|unsigned
name|DarwinDirective
block|;
comment|/// Used by the ISel to turn in optimizations for POWER4-derived architectures
name|bool
name|HasMFOCRF
block|;
name|bool
name|Has64BitSupport
block|;
name|bool
name|Use64BitRegs
block|;
name|bool
name|IsPPC64
block|;
name|bool
name|HasAltivec
block|;
name|bool
name|HasQPX
block|;
name|bool
name|HasVSX
block|;
name|bool
name|HasFCPSGN
block|;
name|bool
name|HasFSQRT
block|;
name|bool
name|HasFRE
block|,
name|HasFRES
block|,
name|HasFRSQRTE
block|,
name|HasFRSQRTES
block|;
name|bool
name|HasRecipPrec
block|;
name|bool
name|HasSTFIWX
block|;
name|bool
name|HasLFIWAX
block|;
name|bool
name|HasFPRND
block|;
name|bool
name|HasFPCVT
block|;
name|bool
name|HasISEL
block|;
name|bool
name|HasPOPCNTD
block|;
name|bool
name|HasLDBRX
block|;
name|bool
name|IsBookE
block|;
name|bool
name|DeprecatedMFTB
block|;
name|bool
name|DeprecatedDST
block|;
name|bool
name|HasLazyResolverStubs
block|;
name|bool
name|IsJITCodeModel
block|;
name|bool
name|IsLittleEndian
block|;
comment|/// TargetTriple - What processor and OS we're targeting.
name|Triple
name|TargetTriple
block|;
name|public
operator|:
comment|/// This constructor initializes the data members to match that
comment|/// of the specified triple.
comment|///
name|PPCSubtarget
argument_list|(
argument|const std::string&TT
argument_list|,
argument|const std::string&CPU
argument_list|,
argument|const std::string&FS
argument_list|,
argument|bool is64Bit
argument_list|)
block|;
comment|/// ParseSubtargetFeatures - Parses features string setting specified
comment|/// subtarget options.  Definition of function is auto generated by tblgen.
name|void
name|ParseSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
comment|/// SetJITMode - This is called to inform the subtarget info that we are
comment|/// producing code for the JIT.
name|void
name|SetJITMode
argument_list|()
block|;
comment|/// getStackAlignment - Returns the minimum alignment known to hold of the
comment|/// stack frame on entry to the function and which must be maintained by every
comment|/// function for this subtarget.
name|unsigned
name|getStackAlignment
argument_list|()
specifier|const
block|{
return|return
name|StackAlignment
return|;
block|}
comment|/// getDarwinDirective - Returns the -m directive specified for the cpu.
comment|///
name|unsigned
name|getDarwinDirective
argument_list|()
specifier|const
block|{
return|return
name|DarwinDirective
return|;
block|}
comment|/// getInstrItins - Return the instruction itineraies based on subtarget
comment|/// selection.
specifier|const
name|InstrItineraryData
operator|&
name|getInstrItineraryData
argument_list|()
specifier|const
block|{
return|return
name|InstrItins
return|;
block|}
comment|/// \brief Reset the features for the PowerPC target.
name|virtual
name|void
name|resetSubtargetFeatures
argument_list|(
specifier|const
name|MachineFunction
operator|*
name|MF
argument_list|)
block|;
name|private
operator|:
name|void
name|initializeEnvironment
argument_list|()
block|;
name|void
name|resetSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
name|public
operator|:
comment|/// isPPC64 - Return true if we are generating code for 64-bit pointer mode.
comment|///
name|bool
name|isPPC64
argument_list|()
specifier|const
block|{
return|return
name|IsPPC64
return|;
block|}
comment|/// has64BitSupport - Return true if the selected CPU supports 64-bit
comment|/// instructions, regardless of whether we are in 32-bit or 64-bit mode.
name|bool
name|has64BitSupport
argument_list|()
specifier|const
block|{
return|return
name|Has64BitSupport
return|;
block|}
comment|/// use64BitRegs - Return true if in 64-bit mode or if we should use 64-bit
comment|/// registers in 32-bit mode when possible.  This can only true if
comment|/// has64BitSupport() returns true.
name|bool
name|use64BitRegs
argument_list|()
specifier|const
block|{
return|return
name|Use64BitRegs
return|;
block|}
comment|/// hasLazyResolverStub - Return true if accesses to the specified global have
comment|/// to go through a dyld lazy resolution stub.  This means that an extra load
comment|/// is required to get the address of the global.
name|bool
name|hasLazyResolverStub
argument_list|(
argument|const GlobalValue *GV
argument_list|,
argument|const TargetMachine&TM
argument_list|)
specifier|const
block|;
comment|// isJITCodeModel - True if we're generating code for the JIT
name|bool
name|isJITCodeModel
argument_list|()
specifier|const
block|{
return|return
name|IsJITCodeModel
return|;
block|}
comment|// isLittleEndian - True if generating little-endian code
name|bool
name|isLittleEndian
argument_list|()
specifier|const
block|{
return|return
name|IsLittleEndian
return|;
block|}
comment|// Specific obvious features.
name|bool
name|hasFCPSGN
argument_list|()
specifier|const
block|{
return|return
name|HasFCPSGN
return|;
block|}
name|bool
name|hasFSQRT
argument_list|()
specifier|const
block|{
return|return
name|HasFSQRT
return|;
block|}
name|bool
name|hasFRE
argument_list|()
specifier|const
block|{
return|return
name|HasFRE
return|;
block|}
name|bool
name|hasFRES
argument_list|()
specifier|const
block|{
return|return
name|HasFRES
return|;
block|}
name|bool
name|hasFRSQRTE
argument_list|()
specifier|const
block|{
return|return
name|HasFRSQRTE
return|;
block|}
name|bool
name|hasFRSQRTES
argument_list|()
specifier|const
block|{
return|return
name|HasFRSQRTES
return|;
block|}
name|bool
name|hasRecipPrec
argument_list|()
specifier|const
block|{
return|return
name|HasRecipPrec
return|;
block|}
name|bool
name|hasSTFIWX
argument_list|()
specifier|const
block|{
return|return
name|HasSTFIWX
return|;
block|}
name|bool
name|hasLFIWAX
argument_list|()
specifier|const
block|{
return|return
name|HasLFIWAX
return|;
block|}
name|bool
name|hasFPRND
argument_list|()
specifier|const
block|{
return|return
name|HasFPRND
return|;
block|}
name|bool
name|hasFPCVT
argument_list|()
specifier|const
block|{
return|return
name|HasFPCVT
return|;
block|}
name|bool
name|hasAltivec
argument_list|()
specifier|const
block|{
return|return
name|HasAltivec
return|;
block|}
name|bool
name|hasQPX
argument_list|()
specifier|const
block|{
return|return
name|HasQPX
return|;
block|}
name|bool
name|hasMFOCRF
argument_list|()
specifier|const
block|{
return|return
name|HasMFOCRF
return|;
block|}
name|bool
name|hasISEL
argument_list|()
specifier|const
block|{
return|return
name|HasISEL
return|;
block|}
name|bool
name|hasPOPCNTD
argument_list|()
specifier|const
block|{
return|return
name|HasPOPCNTD
return|;
block|}
name|bool
name|hasLDBRX
argument_list|()
specifier|const
block|{
return|return
name|HasLDBRX
return|;
block|}
name|bool
name|isBookE
argument_list|()
specifier|const
block|{
return|return
name|IsBookE
return|;
block|}
name|bool
name|isDeprecatedMFTB
argument_list|()
specifier|const
block|{
return|return
name|DeprecatedMFTB
return|;
block|}
name|bool
name|isDeprecatedDST
argument_list|()
specifier|const
block|{
return|return
name|DeprecatedDST
return|;
block|}
specifier|const
name|Triple
operator|&
name|getTargetTriple
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
return|;
block|}
comment|/// isDarwin - True if this is any darwin platform.
name|bool
name|isDarwin
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|isMacOSX
argument_list|()
return|;
block|}
comment|/// isBGP - True if this is a BG/P platform.
name|bool
name|isBGP
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|getVendor
argument_list|()
operator|==
name|Triple
operator|::
name|BGP
return|;
block|}
comment|/// isBGQ - True if this is a BG/Q platform.
name|bool
name|isBGQ
argument_list|()
specifier|const
block|{
return|return
name|TargetTriple
operator|.
name|getVendor
argument_list|()
operator|==
name|Triple
operator|::
name|BGQ
return|;
block|}
name|bool
name|isDarwinABI
argument_list|()
specifier|const
block|{
return|return
name|isDarwin
argument_list|()
return|;
block|}
name|bool
name|isSVR4ABI
argument_list|()
specifier|const
block|{
return|return
operator|!
name|isDarwin
argument_list|()
return|;
block|}
comment|/// enablePostRAScheduler - True at 'More' optimization.
name|bool
name|enablePostRAScheduler
argument_list|(
argument|CodeGenOpt::Level OptLevel
argument_list|,
argument|TargetSubtargetInfo::AntiDepBreakMode& Mode
argument_list|,
argument|RegClassVector& CriticalPathRCs
argument_list|)
specifier|const
block|;
comment|// Scheduling customization.
name|bool
name|enableMachineScheduler
argument_list|()
specifier|const
block|;
name|void
name|overrideSchedPolicy
argument_list|(
argument|MachineSchedPolicy&Policy
argument_list|,
argument|MachineInstr *begin
argument_list|,
argument|MachineInstr *end
argument_list|,
argument|unsigned NumRegionInstrs
argument_list|)
specifier|const
block|;
name|bool
name|useAA
argument_list|()
specifier|const
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

