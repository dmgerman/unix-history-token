begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==-- PPCFrameLowering.h - Define frame lowering for PowerPC ----*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|POWERPC_FRAMEINFO_H
end_ifndef

begin_define
define|#
directive|define
name|POWERPC_FRAMEINFO_H
end_define

begin_include
include|#
directive|include
file|"PPC.h"
end_include

begin_include
include|#
directive|include
file|"PPCSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetFrameLowering.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/STLExtras.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|PPCSubtarget
decl_stmt|;
name|class
name|PPCFrameLowering
range|:
name|public
name|TargetFrameLowering
block|{
specifier|const
name|PPCSubtarget
operator|&
name|Subtarget
block|;
name|public
operator|:
name|PPCFrameLowering
argument_list|(
specifier|const
name|PPCSubtarget
operator|&
name|sti
argument_list|)
operator|:
name|TargetFrameLowering
argument_list|(
name|TargetFrameLowering
operator|::
name|StackGrowsDown
argument_list|,
literal|16
argument_list|,
literal|0
argument_list|)
block|,
name|Subtarget
argument_list|(
argument|sti
argument_list|)
block|{   }
name|void
name|determineFrameLayout
argument_list|(
argument|MachineFunction&MF
argument_list|)
specifier|const
block|;
comment|/// emitProlog/emitEpilog - These methods insert prolog and epilog code into
comment|/// the function.
name|void
name|emitPrologue
argument_list|(
argument|MachineFunction&MF
argument_list|)
specifier|const
block|;
name|void
name|emitEpilogue
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|MachineBasicBlock&MBB
argument_list|)
specifier|const
block|;
name|bool
name|hasFP
argument_list|(
argument|const MachineFunction&MF
argument_list|)
specifier|const
block|;
name|bool
name|needsFP
argument_list|(
argument|const MachineFunction&MF
argument_list|)
specifier|const
block|;
name|void
name|processFunctionBeforeCalleeSavedScan
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|RegScavenger *RS = NULL
argument_list|)
specifier|const
block|;
name|void
name|processFunctionBeforeFrameFinalized
argument_list|(
argument|MachineFunction&MF
argument_list|)
specifier|const
block|;
comment|/// targetHandlesStackFrameRounding - Returns true if the target is
comment|/// responsible for rounding up the stack frame (probably at emitPrologue
comment|/// time).
name|bool
name|targetHandlesStackFrameRounding
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
comment|/// getReturnSaveOffset - Return the previous frame offset to save the
comment|/// return address.
specifier|static
name|unsigned
name|getReturnSaveOffset
argument_list|(
argument|bool isPPC64
argument_list|,
argument|bool isDarwinABI
argument_list|)
block|{
if|if
condition|(
name|isDarwinABI
condition|)
return|return
name|isPPC64
operator|?
literal|16
operator|:
literal|8
return|;
comment|// SVR4 ABI:
return|return
name|isPPC64
condition|?
literal|16
else|:
literal|4
return|;
block|}
comment|/// getFramePointerSaveOffset - Return the previous frame offset to save the
comment|/// frame pointer.
specifier|static
name|unsigned
name|getFramePointerSaveOffset
parameter_list|(
name|bool
name|isPPC64
parameter_list|,
name|bool
name|isDarwinABI
parameter_list|)
block|{
comment|// For the Darwin ABI:
comment|// We cannot use the TOC save slot (offset +20) in the PowerPC linkage area
comment|// for saving the frame pointer (if needed.)  While the published ABI has
comment|// not used this slot since at least MacOSX 10.2, there is older code
comment|// around that does use it, and that needs to continue to work.
if|if
condition|(
name|isDarwinABI
condition|)
return|return
name|isPPC64
condition|?
operator|-
literal|8U
else|:
operator|-
literal|4U
return|;
comment|// SVR4 ABI: First slot in the general register save area.
return|return
name|isPPC64
condition|?
operator|-
literal|8U
else|:
operator|-
literal|4U
return|;
block|}
comment|/// getLinkageSize - Return the size of the PowerPC ABI linkage area.
comment|///
specifier|static
name|unsigned
name|getLinkageSize
parameter_list|(
name|bool
name|isPPC64
parameter_list|,
name|bool
name|isDarwinABI
parameter_list|)
block|{
if|if
condition|(
name|isDarwinABI
operator|||
name|isPPC64
condition|)
return|return
literal|6
operator|*
operator|(
name|isPPC64
condition|?
literal|8
else|:
literal|4
operator|)
return|;
comment|// SVR4 ABI:
return|return
literal|8
return|;
block|}
comment|/// getMinCallArgumentsSize - Return the size of the minium PowerPC ABI
comment|/// argument area.
specifier|static
name|unsigned
name|getMinCallArgumentsSize
parameter_list|(
name|bool
name|isPPC64
parameter_list|,
name|bool
name|isDarwinABI
parameter_list|)
block|{
comment|// For the Darwin ABI / 64-bit SVR4 ABI:
comment|// The prolog code of the callee may store up to 8 GPR argument registers to
comment|// the stack, allowing va_start to index over them in memory if its varargs.
comment|// Because we cannot tell if this is needed on the caller side, we have to
comment|// conservatively assume that it is needed.  As such, make sure we have at
comment|// least enough stack space for the caller to store the 8 GPRs.
if|if
condition|(
name|isDarwinABI
operator|||
name|isPPC64
condition|)
return|return
literal|8
operator|*
operator|(
name|isPPC64
condition|?
literal|8
else|:
literal|4
operator|)
return|;
comment|// 32-bit SVR4 ABI:
comment|// There is no default stack allocated for the 8 first GPR arguments.
return|return
literal|0
return|;
block|}
comment|/// getMinCallFrameSize - Return the minimum size a call frame can be using
comment|/// the PowerPC ABI.
specifier|static
name|unsigned
name|getMinCallFrameSize
parameter_list|(
name|bool
name|isPPC64
parameter_list|,
name|bool
name|isDarwinABI
parameter_list|)
block|{
comment|// The call frame needs to be at least big enough for linkage and 8 args.
return|return
name|getLinkageSize
argument_list|(
name|isPPC64
argument_list|,
name|isDarwinABI
argument_list|)
operator|+
name|getMinCallArgumentsSize
argument_list|(
name|isPPC64
argument_list|,
name|isDarwinABI
argument_list|)
return|;
block|}
comment|// With the SVR4 ABI, callee-saved registers have fixed offsets on the stack.
specifier|const
name|SpillSlot
modifier|*
name|getCalleeSavedSpillSlots
argument_list|(
name|unsigned
operator|&
name|NumEntries
argument_list|)
decl|const
block|{
if|if
condition|(
name|Subtarget
operator|.
name|isDarwinABI
argument_list|()
condition|)
block|{
name|NumEntries
operator|=
literal|1
expr_stmt|;
if|if
condition|(
name|Subtarget
operator|.
name|isPPC64
argument_list|()
condition|)
block|{
specifier|static
specifier|const
name|SpillSlot
name|darwin64Offsets
init|=
block|{
name|PPC
operator|::
name|X31
block|,
operator|-
literal|8
block|}
decl_stmt|;
return|return
operator|&
name|darwin64Offsets
return|;
block|}
else|else
block|{
specifier|static
specifier|const
name|SpillSlot
name|darwinOffsets
init|=
block|{
name|PPC
operator|::
name|R31
block|,
operator|-
literal|4
block|}
decl_stmt|;
return|return
operator|&
name|darwinOffsets
return|;
block|}
block|}
comment|// Early exit if not using the SVR4 ABI.
if|if
condition|(
operator|!
name|Subtarget
operator|.
name|isSVR4ABI
argument_list|()
condition|)
block|{
name|NumEntries
operator|=
literal|0
expr_stmt|;
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|SpillSlot
name|Offsets
index|[]
init|=
block|{
comment|// Floating-point register save area offsets.
block|{
name|PPC
operator|::
name|F31
block|,
operator|-
literal|8
block|}
block|,
block|{
name|PPC
operator|::
name|F30
block|,
operator|-
literal|16
block|}
block|,
block|{
name|PPC
operator|::
name|F29
block|,
operator|-
literal|24
block|}
block|,
block|{
name|PPC
operator|::
name|F28
block|,
operator|-
literal|32
block|}
block|,
block|{
name|PPC
operator|::
name|F27
block|,
operator|-
literal|40
block|}
block|,
block|{
name|PPC
operator|::
name|F26
block|,
operator|-
literal|48
block|}
block|,
block|{
name|PPC
operator|::
name|F25
block|,
operator|-
literal|56
block|}
block|,
block|{
name|PPC
operator|::
name|F24
block|,
operator|-
literal|64
block|}
block|,
block|{
name|PPC
operator|::
name|F23
block|,
operator|-
literal|72
block|}
block|,
block|{
name|PPC
operator|::
name|F22
block|,
operator|-
literal|80
block|}
block|,
block|{
name|PPC
operator|::
name|F21
block|,
operator|-
literal|88
block|}
block|,
block|{
name|PPC
operator|::
name|F20
block|,
operator|-
literal|96
block|}
block|,
block|{
name|PPC
operator|::
name|F19
block|,
operator|-
literal|104
block|}
block|,
block|{
name|PPC
operator|::
name|F18
block|,
operator|-
literal|112
block|}
block|,
block|{
name|PPC
operator|::
name|F17
block|,
operator|-
literal|120
block|}
block|,
block|{
name|PPC
operator|::
name|F16
block|,
operator|-
literal|128
block|}
block|,
block|{
name|PPC
operator|::
name|F15
block|,
operator|-
literal|136
block|}
block|,
block|{
name|PPC
operator|::
name|F14
block|,
operator|-
literal|144
block|}
block|,
comment|// General register save area offsets.
block|{
name|PPC
operator|::
name|R31
block|,
operator|-
literal|4
block|}
block|,
block|{
name|PPC
operator|::
name|R30
block|,
operator|-
literal|8
block|}
block|,
block|{
name|PPC
operator|::
name|R29
block|,
operator|-
literal|12
block|}
block|,
block|{
name|PPC
operator|::
name|R28
block|,
operator|-
literal|16
block|}
block|,
block|{
name|PPC
operator|::
name|R27
block|,
operator|-
literal|20
block|}
block|,
block|{
name|PPC
operator|::
name|R26
block|,
operator|-
literal|24
block|}
block|,
block|{
name|PPC
operator|::
name|R25
block|,
operator|-
literal|28
block|}
block|,
block|{
name|PPC
operator|::
name|R24
block|,
operator|-
literal|32
block|}
block|,
block|{
name|PPC
operator|::
name|R23
block|,
operator|-
literal|36
block|}
block|,
block|{
name|PPC
operator|::
name|R22
block|,
operator|-
literal|40
block|}
block|,
block|{
name|PPC
operator|::
name|R21
block|,
operator|-
literal|44
block|}
block|,
block|{
name|PPC
operator|::
name|R20
block|,
operator|-
literal|48
block|}
block|,
block|{
name|PPC
operator|::
name|R19
block|,
operator|-
literal|52
block|}
block|,
block|{
name|PPC
operator|::
name|R18
block|,
operator|-
literal|56
block|}
block|,
block|{
name|PPC
operator|::
name|R17
block|,
operator|-
literal|60
block|}
block|,
block|{
name|PPC
operator|::
name|R16
block|,
operator|-
literal|64
block|}
block|,
block|{
name|PPC
operator|::
name|R15
block|,
operator|-
literal|68
block|}
block|,
block|{
name|PPC
operator|::
name|R14
block|,
operator|-
literal|72
block|}
block|,
comment|// CR save area offset.
comment|// FIXME SVR4: Disable CR save area for now.
comment|//      {PPC::CR2, -4},
comment|//      {PPC::CR3, -4},
comment|//      {PPC::CR4, -4},
comment|//      {PPC::CR2LT, -4},
comment|//      {PPC::CR2GT, -4},
comment|//      {PPC::CR2EQ, -4},
comment|//      {PPC::CR2UN, -4},
comment|//      {PPC::CR3LT, -4},
comment|//      {PPC::CR3GT, -4},
comment|//      {PPC::CR3EQ, -4},
comment|//      {PPC::CR3UN, -4},
comment|//      {PPC::CR4LT, -4},
comment|//      {PPC::CR4GT, -4},
comment|//      {PPC::CR4EQ, -4},
comment|//      {PPC::CR4UN, -4},
comment|// VRSAVE save area offset.
block|{
name|PPC
operator|::
name|VRSAVE
block|,
operator|-
literal|4
block|}
block|,
comment|// Vector register save area
block|{
name|PPC
operator|::
name|V31
block|,
operator|-
literal|16
block|}
block|,
block|{
name|PPC
operator|::
name|V30
block|,
operator|-
literal|32
block|}
block|,
block|{
name|PPC
operator|::
name|V29
block|,
operator|-
literal|48
block|}
block|,
block|{
name|PPC
operator|::
name|V28
block|,
operator|-
literal|64
block|}
block|,
block|{
name|PPC
operator|::
name|V27
block|,
operator|-
literal|80
block|}
block|,
block|{
name|PPC
operator|::
name|V26
block|,
operator|-
literal|96
block|}
block|,
block|{
name|PPC
operator|::
name|V25
block|,
operator|-
literal|112
block|}
block|,
block|{
name|PPC
operator|::
name|V24
block|,
operator|-
literal|128
block|}
block|,
block|{
name|PPC
operator|::
name|V23
block|,
operator|-
literal|144
block|}
block|,
block|{
name|PPC
operator|::
name|V22
block|,
operator|-
literal|160
block|}
block|,
block|{
name|PPC
operator|::
name|V21
block|,
operator|-
literal|176
block|}
block|,
block|{
name|PPC
operator|::
name|V20
block|,
operator|-
literal|192
block|}
block|}
decl_stmt|;
specifier|static
specifier|const
name|SpillSlot
name|Offsets64
index|[]
init|=
block|{
comment|// Floating-point register save area offsets.
block|{
name|PPC
operator|::
name|F31
block|,
operator|-
literal|8
block|}
block|,
block|{
name|PPC
operator|::
name|F30
block|,
operator|-
literal|16
block|}
block|,
block|{
name|PPC
operator|::
name|F29
block|,
operator|-
literal|24
block|}
block|,
block|{
name|PPC
operator|::
name|F28
block|,
operator|-
literal|32
block|}
block|,
block|{
name|PPC
operator|::
name|F27
block|,
operator|-
literal|40
block|}
block|,
block|{
name|PPC
operator|::
name|F26
block|,
operator|-
literal|48
block|}
block|,
block|{
name|PPC
operator|::
name|F25
block|,
operator|-
literal|56
block|}
block|,
block|{
name|PPC
operator|::
name|F24
block|,
operator|-
literal|64
block|}
block|,
block|{
name|PPC
operator|::
name|F23
block|,
operator|-
literal|72
block|}
block|,
block|{
name|PPC
operator|::
name|F22
block|,
operator|-
literal|80
block|}
block|,
block|{
name|PPC
operator|::
name|F21
block|,
operator|-
literal|88
block|}
block|,
block|{
name|PPC
operator|::
name|F20
block|,
operator|-
literal|96
block|}
block|,
block|{
name|PPC
operator|::
name|F19
block|,
operator|-
literal|104
block|}
block|,
block|{
name|PPC
operator|::
name|F18
block|,
operator|-
literal|112
block|}
block|,
block|{
name|PPC
operator|::
name|F17
block|,
operator|-
literal|120
block|}
block|,
block|{
name|PPC
operator|::
name|F16
block|,
operator|-
literal|128
block|}
block|,
block|{
name|PPC
operator|::
name|F15
block|,
operator|-
literal|136
block|}
block|,
block|{
name|PPC
operator|::
name|F14
block|,
operator|-
literal|144
block|}
block|,
comment|// General register save area offsets.
comment|// FIXME 64-bit SVR4: Are 32-bit registers actually allocated in 64-bit
comment|//                    mode?
block|{
name|PPC
operator|::
name|R31
block|,
operator|-
literal|4
block|}
block|,
block|{
name|PPC
operator|::
name|R30
block|,
operator|-
literal|12
block|}
block|,
block|{
name|PPC
operator|::
name|R29
block|,
operator|-
literal|20
block|}
block|,
block|{
name|PPC
operator|::
name|R28
block|,
operator|-
literal|28
block|}
block|,
block|{
name|PPC
operator|::
name|R27
block|,
operator|-
literal|36
block|}
block|,
block|{
name|PPC
operator|::
name|R26
block|,
operator|-
literal|44
block|}
block|,
block|{
name|PPC
operator|::
name|R25
block|,
operator|-
literal|52
block|}
block|,
block|{
name|PPC
operator|::
name|R24
block|,
operator|-
literal|60
block|}
block|,
block|{
name|PPC
operator|::
name|R23
block|,
operator|-
literal|68
block|}
block|,
block|{
name|PPC
operator|::
name|R22
block|,
operator|-
literal|76
block|}
block|,
block|{
name|PPC
operator|::
name|R21
block|,
operator|-
literal|84
block|}
block|,
block|{
name|PPC
operator|::
name|R20
block|,
operator|-
literal|92
block|}
block|,
block|{
name|PPC
operator|::
name|R19
block|,
operator|-
literal|100
block|}
block|,
block|{
name|PPC
operator|::
name|R18
block|,
operator|-
literal|108
block|}
block|,
block|{
name|PPC
operator|::
name|R17
block|,
operator|-
literal|116
block|}
block|,
block|{
name|PPC
operator|::
name|R16
block|,
operator|-
literal|124
block|}
block|,
block|{
name|PPC
operator|::
name|R15
block|,
operator|-
literal|132
block|}
block|,
block|{
name|PPC
operator|::
name|R14
block|,
operator|-
literal|140
block|}
block|,
block|{
name|PPC
operator|::
name|X31
block|,
operator|-
literal|8
block|}
block|,
block|{
name|PPC
operator|::
name|X30
block|,
operator|-
literal|16
block|}
block|,
block|{
name|PPC
operator|::
name|X29
block|,
operator|-
literal|24
block|}
block|,
block|{
name|PPC
operator|::
name|X28
block|,
operator|-
literal|32
block|}
block|,
block|{
name|PPC
operator|::
name|X27
block|,
operator|-
literal|40
block|}
block|,
block|{
name|PPC
operator|::
name|X26
block|,
operator|-
literal|48
block|}
block|,
block|{
name|PPC
operator|::
name|X25
block|,
operator|-
literal|56
block|}
block|,
block|{
name|PPC
operator|::
name|X24
block|,
operator|-
literal|64
block|}
block|,
block|{
name|PPC
operator|::
name|X23
block|,
operator|-
literal|72
block|}
block|,
block|{
name|PPC
operator|::
name|X22
block|,
operator|-
literal|80
block|}
block|,
block|{
name|PPC
operator|::
name|X21
block|,
operator|-
literal|88
block|}
block|,
block|{
name|PPC
operator|::
name|X20
block|,
operator|-
literal|96
block|}
block|,
block|{
name|PPC
operator|::
name|X19
block|,
operator|-
literal|104
block|}
block|,
block|{
name|PPC
operator|::
name|X18
block|,
operator|-
literal|112
block|}
block|,
block|{
name|PPC
operator|::
name|X17
block|,
operator|-
literal|120
block|}
block|,
block|{
name|PPC
operator|::
name|X16
block|,
operator|-
literal|128
block|}
block|,
block|{
name|PPC
operator|::
name|X15
block|,
operator|-
literal|136
block|}
block|,
block|{
name|PPC
operator|::
name|X14
block|,
operator|-
literal|144
block|}
block|,
comment|// CR save area offset.
comment|// FIXME SVR4: Disable CR save area for now.
comment|//      {PPC::CR2, -4},
comment|//      {PPC::CR3, -4},
comment|//      {PPC::CR4, -4},
comment|//      {PPC::CR2LT, -4},
comment|//      {PPC::CR2GT, -4},
comment|//      {PPC::CR2EQ, -4},
comment|//      {PPC::CR2UN, -4},
comment|//      {PPC::CR3LT, -4},
comment|//      {PPC::CR3GT, -4},
comment|//      {PPC::CR3EQ, -4},
comment|//      {PPC::CR3UN, -4},
comment|//      {PPC::CR4LT, -4},
comment|//      {PPC::CR4GT, -4},
comment|//      {PPC::CR4EQ, -4},
comment|//      {PPC::CR4UN, -4},
comment|// VRSAVE save area offset.
block|{
name|PPC
operator|::
name|VRSAVE
block|,
operator|-
literal|4
block|}
block|,
comment|// Vector register save area
block|{
name|PPC
operator|::
name|V31
block|,
operator|-
literal|16
block|}
block|,
block|{
name|PPC
operator|::
name|V30
block|,
operator|-
literal|32
block|}
block|,
block|{
name|PPC
operator|::
name|V29
block|,
operator|-
literal|48
block|}
block|,
block|{
name|PPC
operator|::
name|V28
block|,
operator|-
literal|64
block|}
block|,
block|{
name|PPC
operator|::
name|V27
block|,
operator|-
literal|80
block|}
block|,
block|{
name|PPC
operator|::
name|V26
block|,
operator|-
literal|96
block|}
block|,
block|{
name|PPC
operator|::
name|V25
block|,
operator|-
literal|112
block|}
block|,
block|{
name|PPC
operator|::
name|V24
block|,
operator|-
literal|128
block|}
block|,
block|{
name|PPC
operator|::
name|V23
block|,
operator|-
literal|144
block|}
block|,
block|{
name|PPC
operator|::
name|V22
block|,
operator|-
literal|160
block|}
block|,
block|{
name|PPC
operator|::
name|V21
block|,
operator|-
literal|176
block|}
block|,
block|{
name|PPC
operator|::
name|V20
block|,
operator|-
literal|192
block|}
block|}
decl_stmt|;
if|if
condition|(
name|Subtarget
operator|.
name|isPPC64
argument_list|()
condition|)
block|{
name|NumEntries
operator|=
name|array_lengthof
argument_list|(
name|Offsets64
argument_list|)
expr_stmt|;
return|return
name|Offsets64
return|;
block|}
else|else
block|{
name|NumEntries
operator|=
name|array_lengthof
argument_list|(
name|Offsets
argument_list|)
expr_stmt|;
return|return
name|Offsets
return|;
block|}
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

