begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- LanaiBaseInfo.h - Top level definitions for Lanai MC ----*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains small standalone helper functions and enum definitions for
end_comment

begin_comment
comment|// the Lanai target useful for the compiler back-end and the MC libraries.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_LANAI_MCTARGETDESC_LANAIBASEINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_LANAI_MCTARGETDESC_LANAIBASEINFO_H
end_define

begin_include
include|#
directive|include
file|"LanaiMCTargetDesc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCExpr.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/DataTypes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// LanaiII - This namespace holds all of the target specific flags that
comment|// instruction info tracks.
name|namespace
name|LanaiII
block|{
comment|// Target Operand Flag enum.
enum|enum
name|TOF
block|{
comment|//===------------------------------------------------------------------===//
comment|// Lanai Specific MachineOperand flags.
name|MO_NO_FLAG
block|,
comment|// MO_ABS_HI/LO - Represents the hi or low part of an absolute symbol
comment|// address.
name|MO_ABS_HI
block|,
name|MO_ABS_LO
block|, }
enum|;
block|}
comment|// namespace LanaiII
specifier|static
specifier|inline
name|unsigned
name|getLanaiRegisterNumbering
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
switch|switch
condition|(
name|Reg
condition|)
block|{
case|case
name|Lanai
operator|::
name|R0
case|:
return|return
literal|0
return|;
case|case
name|Lanai
operator|::
name|R1
case|:
return|return
literal|1
return|;
case|case
name|Lanai
operator|::
name|R2
case|:
case|case
name|Lanai
operator|::
name|PC
case|:
return|return
literal|2
return|;
case|case
name|Lanai
operator|::
name|R3
case|:
return|return
literal|3
return|;
case|case
name|Lanai
operator|::
name|R4
case|:
case|case
name|Lanai
operator|::
name|SP
case|:
return|return
literal|4
return|;
case|case
name|Lanai
operator|::
name|R5
case|:
case|case
name|Lanai
operator|::
name|FP
case|:
return|return
literal|5
return|;
case|case
name|Lanai
operator|::
name|R6
case|:
return|return
literal|6
return|;
case|case
name|Lanai
operator|::
name|R7
case|:
return|return
literal|7
return|;
case|case
name|Lanai
operator|::
name|R8
case|:
case|case
name|Lanai
operator|::
name|RV
case|:
return|return
literal|8
return|;
case|case
name|Lanai
operator|::
name|R9
case|:
return|return
literal|9
return|;
case|case
name|Lanai
operator|::
name|R10
case|:
case|case
name|Lanai
operator|::
name|RR1
case|:
return|return
literal|10
return|;
case|case
name|Lanai
operator|::
name|R11
case|:
case|case
name|Lanai
operator|::
name|RR2
case|:
return|return
literal|11
return|;
case|case
name|Lanai
operator|::
name|R12
case|:
return|return
literal|12
return|;
case|case
name|Lanai
operator|::
name|R13
case|:
return|return
literal|13
return|;
case|case
name|Lanai
operator|::
name|R14
case|:
return|return
literal|14
return|;
case|case
name|Lanai
operator|::
name|R15
case|:
case|case
name|Lanai
operator|::
name|RCA
case|:
return|return
literal|15
return|;
case|case
name|Lanai
operator|::
name|R16
case|:
return|return
literal|16
return|;
case|case
name|Lanai
operator|::
name|R17
case|:
return|return
literal|17
return|;
case|case
name|Lanai
operator|::
name|R18
case|:
return|return
literal|18
return|;
case|case
name|Lanai
operator|::
name|R19
case|:
return|return
literal|19
return|;
case|case
name|Lanai
operator|::
name|R20
case|:
return|return
literal|20
return|;
case|case
name|Lanai
operator|::
name|R21
case|:
return|return
literal|21
return|;
case|case
name|Lanai
operator|::
name|R22
case|:
return|return
literal|22
return|;
case|case
name|Lanai
operator|::
name|R23
case|:
return|return
literal|23
return|;
case|case
name|Lanai
operator|::
name|R24
case|:
return|return
literal|24
return|;
case|case
name|Lanai
operator|::
name|R25
case|:
return|return
literal|25
return|;
case|case
name|Lanai
operator|::
name|R26
case|:
return|return
literal|26
return|;
case|case
name|Lanai
operator|::
name|R27
case|:
return|return
literal|27
return|;
case|case
name|Lanai
operator|::
name|R28
case|:
return|return
literal|28
return|;
case|case
name|Lanai
operator|::
name|R29
case|:
return|return
literal|29
return|;
case|case
name|Lanai
operator|::
name|R30
case|:
return|return
literal|30
return|;
case|case
name|Lanai
operator|::
name|R31
case|:
return|return
literal|31
return|;
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown register number!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_LANAI_MCTARGETDESC_LANAIBASEINFO_H
end_comment

end_unit

