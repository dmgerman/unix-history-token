begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--------- GCNIterativeScheduler.h - GCN Scheduler -*- C++ -*----------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AMDGPU_GCNITERATIVESCHEDULER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AMDGPU_GCNITERATIVESCHEDULER_H
end_define

begin_include
include|#
directive|include
file|"GCNRegPressure.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineScheduler.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|GCNIterativeScheduler
range|:
name|public
name|ScheduleDAGMILive
block|{
typedef|typedef
name|ScheduleDAGMILive
name|BaseClass
typedef|;
name|public
operator|:
block|enum
name|StrategyKind
block|{
name|SCHEDULE_MINREGONLY
block|,
name|SCHEDULE_MINREGFORCED
block|,
name|SCHEDULE_LEGACYMAXOCCUPANCY
block|}
decl_stmt|;
name|GCNIterativeScheduler
argument_list|(
argument|MachineSchedContext *C
argument_list|,
argument|StrategyKind S
argument_list|)
empty_stmt|;
name|void
name|schedule
argument_list|()
name|override
expr_stmt|;
name|void
name|enterRegion
argument_list|(
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|Begin
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|End
argument_list|,
name|unsigned
name|RegionInstrs
argument_list|)
name|override
decl_stmt|;
name|void
name|finalizeSchedule
argument_list|()
name|override
expr_stmt|;
name|protected
label|:
typedef|typedef
name|ArrayRef
operator|<
specifier|const
name|SUnit
operator|*
operator|>
name|ScheduleRef
expr_stmt|;
struct|struct
name|TentativeSchedule
block|{
name|std
operator|::
name|vector
operator|<
name|MachineInstr
operator|*
operator|>
name|Schedule
expr_stmt|;
name|GCNRegPressure
name|MaxPressure
decl_stmt|;
block|}
struct|;
struct|struct
name|Region
block|{
comment|// Fields except for BestSchedule are supposed to reflect current IR state
comment|// `const` fields are to emphasize they shouldn't change for any schedule.
name|MachineBasicBlock
operator|::
name|iterator
name|Begin
expr_stmt|;
comment|// End is either a boundary instruction or end of basic block
specifier|const
name|MachineBasicBlock
operator|::
name|iterator
name|End
expr_stmt|;
specifier|const
name|unsigned
name|NumRegionInstrs
decl_stmt|;
name|GCNRegPressure
name|MaxPressure
decl_stmt|;
comment|// best schedule for the region so far (not scheduled yet)
name|std
operator|::
name|unique_ptr
operator|<
name|TentativeSchedule
operator|>
name|BestSchedule
expr_stmt|;
block|}
struct|;
name|SpecificBumpPtrAllocator
operator|<
name|Region
operator|>
name|Alloc
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|Region
operator|*
operator|>
name|Regions
expr_stmt|;
name|MachineSchedContext
modifier|*
name|Context
decl_stmt|;
specifier|const
name|StrategyKind
name|Strategy
decl_stmt|;
name|mutable
name|GCNUpwardRPTracker
name|UPTracker
decl_stmt|;
name|class
name|BuildDAG
decl_stmt|;
name|class
name|OverrideLegacyStrategy
decl_stmt|;
name|template
operator|<
name|typename
name|Range
operator|>
name|GCNRegPressure
name|getSchedulePressure
argument_list|(
argument|const Region&R
argument_list|,
argument|Range&&Schedule
argument_list|)
specifier|const
expr_stmt|;
name|GCNRegPressure
name|getRegionPressure
argument_list|(
name|MachineBasicBlock
operator|::
name|iterator
name|Begin
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|End
argument_list|)
decl|const
decl_stmt|;
name|GCNRegPressure
name|getRegionPressure
argument_list|(
specifier|const
name|Region
operator|&
name|R
argument_list|)
decl|const
block|{
return|return
name|getRegionPressure
argument_list|(
name|R
operator|.
name|Begin
argument_list|,
name|R
operator|.
name|End
argument_list|)
return|;
block|}
name|void
name|setBestSchedule
parameter_list|(
name|Region
modifier|&
name|R
parameter_list|,
name|ScheduleRef
name|Schedule
parameter_list|,
specifier|const
name|GCNRegPressure
modifier|&
name|MaxRP
init|=
name|GCNRegPressure
argument_list|()
parameter_list|)
function_decl|;
name|void
name|scheduleBest
parameter_list|(
name|Region
modifier|&
name|R
parameter_list|)
function_decl|;
name|std
operator|::
name|vector
operator|<
name|MachineInstr
operator|*
operator|>
name|detachSchedule
argument_list|(
argument|ScheduleRef Schedule
argument_list|)
specifier|const
expr_stmt|;
name|void
name|sortRegionsByPressure
parameter_list|(
name|unsigned
name|TargetOcc
parameter_list|)
function_decl|;
name|template
operator|<
name|typename
name|Range
operator|>
name|void
name|scheduleRegion
argument_list|(
name|Region
operator|&
name|R
argument_list|,
name|Range
operator|&&
name|Schedule
argument_list|,
specifier|const
name|GCNRegPressure
operator|&
name|MaxRP
operator|=
name|GCNRegPressure
argument_list|()
argument_list|)
expr_stmt|;
name|unsigned
name|tryMaximizeOccupancy
parameter_list|(
name|unsigned
name|TargetOcc
init|=
name|std
operator|::
name|numeric_limits
operator|<
name|unsigned
operator|>
operator|::
name|max
argument_list|()
parameter_list|)
function_decl|;
name|void
name|scheduleLegacyMaxOccupancy
parameter_list|(
name|bool
name|TryMaximizeOccupancy
init|=
name|true
parameter_list|)
function_decl|;
name|void
name|scheduleMinReg
parameter_list|(
name|bool
name|force
init|=
name|false
parameter_list|)
function_decl|;
name|void
name|printRegions
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|)
decl|const
decl_stmt|;
name|void
name|printSchedResult
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|Region
operator|*
name|R
argument_list|,
specifier|const
name|GCNRegPressure
operator|&
name|RP
argument_list|)
decl|const
decl_stmt|;
name|void
name|printSchedRP
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|GCNRegPressure
operator|&
name|Before
argument_list|,
specifier|const
name|GCNRegPressure
operator|&
name|After
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_AMDGPU_GCNITERATIVESCHEDULER_H
end_comment

end_unit

