begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SIMachineFunctionInfo.h - SIMachineFunctionInfo interface -*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_R600_SIMACHINEFUNCTIONINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_R600_SIMACHINEFUNCTIONINFO_H
end_define

begin_include
include|#
directive|include
file|"AMDGPUMachineFunction.h"
end_include

begin_include
include|#
directive|include
file|"SIRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MachineRegisterInfo
decl_stmt|;
comment|/// This class keeps track of the SPI_SP_INPUT_ADDR config register, which
comment|/// tells the hardware which interpolation parameters to load.
name|class
name|SIMachineFunctionInfo
range|:
name|public
name|AMDGPUMachineFunction
block|{
comment|// FIXME: This should be removed and getPreloadedValue moved here.
name|friend
expr|struct
name|SIRegisterInfo
block|;
name|void
name|anchor
argument_list|()
name|override
block|;
name|unsigned
name|TIDReg
block|;
comment|// Registers that may be reserved for spilling purposes. These may be the same
comment|// as the input registers.
name|unsigned
name|ScratchRSrcReg
block|;
name|unsigned
name|ScratchWaveOffsetReg
block|;
comment|// Input registers setup for the HSA ABI.
comment|// User SGPRs in allocation order.
name|unsigned
name|PrivateSegmentBufferUserSGPR
block|;
name|unsigned
name|DispatchPtrUserSGPR
block|;
name|unsigned
name|QueuePtrUserSGPR
block|;
name|unsigned
name|KernargSegmentPtrUserSGPR
block|;
name|unsigned
name|DispatchIDUserSGPR
block|;
name|unsigned
name|FlatScratchInitUserSGPR
block|;
name|unsigned
name|PrivateSegmentSizeUserSGPR
block|;
name|unsigned
name|GridWorkGroupCountXUserSGPR
block|;
name|unsigned
name|GridWorkGroupCountYUserSGPR
block|;
name|unsigned
name|GridWorkGroupCountZUserSGPR
block|;
comment|// System SGPRs in allocation order.
name|unsigned
name|WorkGroupIDXSystemSGPR
block|;
name|unsigned
name|WorkGroupIDYSystemSGPR
block|;
name|unsigned
name|WorkGroupIDZSystemSGPR
block|;
name|unsigned
name|WorkGroupInfoSystemSGPR
block|;
name|unsigned
name|PrivateSegmentWaveByteOffsetSystemSGPR
block|;
comment|// Graphics info.
name|unsigned
name|PSInputAddr
block|;
name|bool
name|ReturnsVoid
block|;
name|public
operator|:
comment|// FIXME: Make private
name|unsigned
name|LDSWaveSpillSize
block|;
name|unsigned
name|PSInputEna
block|;
name|std
operator|::
name|map
operator|<
name|unsigned
block|,
name|unsigned
operator|>
name|LaneVGPRs
block|;
name|unsigned
name|ScratchOffsetReg
block|;
name|unsigned
name|NumUserSGPRs
block|;
name|unsigned
name|NumSystemSGPRs
block|;
name|private
operator|:
name|bool
name|HasSpilledSGPRs
block|;
name|bool
name|HasSpilledVGPRs
block|;
comment|// Feature bits required for inputs passed in user SGPRs.
name|bool
name|PrivateSegmentBuffer
operator|:
literal|1
block|;
name|bool
name|DispatchPtr
operator|:
literal|1
block|;
name|bool
name|QueuePtr
operator|:
literal|1
block|;
name|bool
name|DispatchID
operator|:
literal|1
block|;
name|bool
name|KernargSegmentPtr
operator|:
literal|1
block|;
name|bool
name|FlatScratchInit
operator|:
literal|1
block|;
name|bool
name|GridWorkgroupCountX
operator|:
literal|1
block|;
name|bool
name|GridWorkgroupCountY
operator|:
literal|1
block|;
name|bool
name|GridWorkgroupCountZ
operator|:
literal|1
block|;
comment|// Feature bits required for inputs passed in system SGPRs.
name|bool
name|WorkGroupIDX
operator|:
literal|1
block|;
comment|// Always initialized.
name|bool
name|WorkGroupIDY
operator|:
literal|1
block|;
name|bool
name|WorkGroupIDZ
operator|:
literal|1
block|;
name|bool
name|WorkGroupInfo
operator|:
literal|1
block|;
name|bool
name|PrivateSegmentWaveByteOffset
operator|:
literal|1
block|;
name|bool
name|WorkItemIDX
operator|:
literal|1
block|;
comment|// Always initialized.
name|bool
name|WorkItemIDY
operator|:
literal|1
block|;
name|bool
name|WorkItemIDZ
operator|:
literal|1
block|;
name|MCPhysReg
name|getNextUserSGPR
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|NumSystemSGPRs
operator|==
literal|0
operator|&&
literal|"System SGPRs must be added after user SGPRs"
argument_list|)
block|;
return|return
name|AMDGPU
operator|::
name|SGPR0
operator|+
name|NumUserSGPRs
return|;
block|}
name|MCPhysReg
name|getNextSystemSGPR
argument_list|()
specifier|const
block|{
return|return
name|AMDGPU
operator|::
name|SGPR0
operator|+
name|NumUserSGPRs
operator|+
name|NumSystemSGPRs
return|;
block|}
name|public
operator|:
expr|struct
name|SpilledReg
block|{
name|unsigned
name|VGPR
block|;
name|int
name|Lane
block|;
name|SpilledReg
argument_list|(
argument|unsigned R
argument_list|,
argument|int L
argument_list|)
operator|:
name|VGPR
argument_list|(
name|R
argument_list|)
block|,
name|Lane
argument_list|(
argument|L
argument_list|)
block|{ }
name|SpilledReg
argument_list|()
operator|:
name|VGPR
argument_list|(
literal|0
argument_list|)
block|,
name|Lane
argument_list|(
argument|-
literal|1
argument_list|)
block|{ }
name|bool
name|hasLane
argument_list|()
block|{
return|return
name|Lane
operator|!=
operator|-
literal|1
return|;
block|}
expr|}
block|;
comment|// SIMachineFunctionInfo definition
name|SIMachineFunctionInfo
argument_list|(
specifier|const
name|MachineFunction
operator|&
name|MF
argument_list|)
block|;
name|SpilledReg
name|getSpilledReg
argument_list|(
argument|MachineFunction *MF
argument_list|,
argument|unsigned FrameIndex
argument_list|,
argument|unsigned SubIdx
argument_list|)
block|;
name|bool
name|hasCalculatedTID
argument_list|()
specifier|const
block|{
return|return
name|TIDReg
operator|!=
name|AMDGPU
operator|::
name|NoRegister
return|;
block|}
block|;
name|unsigned
name|getTIDReg
argument_list|()
specifier|const
block|{
return|return
name|TIDReg
return|;
block|}
block|;
name|void
name|setTIDReg
argument_list|(
argument|unsigned Reg
argument_list|)
block|{
name|TIDReg
operator|=
name|Reg
block|; }
comment|// Add user SGPRs.
name|unsigned
name|addPrivateSegmentBuffer
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addDispatchPtr
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addQueuePtr
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addKernargSegmentPtr
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
comment|// Add system SGPRs.
name|unsigned
name|addWorkGroupIDX
argument_list|()
block|{
name|WorkGroupIDXSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|WorkGroupIDXSystemSGPR
return|;
block|}
name|unsigned
name|addWorkGroupIDY
argument_list|()
block|{
name|WorkGroupIDYSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|WorkGroupIDYSystemSGPR
return|;
block|}
name|unsigned
name|addWorkGroupIDZ
argument_list|()
block|{
name|WorkGroupIDZSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|WorkGroupIDZSystemSGPR
return|;
block|}
name|unsigned
name|addWorkGroupInfo
argument_list|()
block|{
name|WorkGroupInfoSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|WorkGroupInfoSystemSGPR
return|;
block|}
name|unsigned
name|addPrivateSegmentWaveByteOffset
argument_list|()
block|{
name|PrivateSegmentWaveByteOffsetSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|PrivateSegmentWaveByteOffsetSystemSGPR
return|;
block|}
name|bool
name|hasPrivateSegmentBuffer
argument_list|()
specifier|const
block|{
return|return
name|PrivateSegmentBuffer
return|;
block|}
name|bool
name|hasDispatchPtr
argument_list|()
specifier|const
block|{
return|return
name|DispatchPtr
return|;
block|}
name|bool
name|hasQueuePtr
argument_list|()
specifier|const
block|{
return|return
name|QueuePtr
return|;
block|}
name|bool
name|hasDispatchID
argument_list|()
specifier|const
block|{
return|return
name|DispatchID
return|;
block|}
name|bool
name|hasKernargSegmentPtr
argument_list|()
specifier|const
block|{
return|return
name|KernargSegmentPtr
return|;
block|}
name|bool
name|hasFlatScratchInit
argument_list|()
specifier|const
block|{
return|return
name|FlatScratchInit
return|;
block|}
name|bool
name|hasGridWorkgroupCountX
argument_list|()
specifier|const
block|{
return|return
name|GridWorkgroupCountX
return|;
block|}
name|bool
name|hasGridWorkgroupCountY
argument_list|()
specifier|const
block|{
return|return
name|GridWorkgroupCountY
return|;
block|}
name|bool
name|hasGridWorkgroupCountZ
argument_list|()
specifier|const
block|{
return|return
name|GridWorkgroupCountZ
return|;
block|}
name|bool
name|hasWorkGroupIDX
argument_list|()
specifier|const
block|{
return|return
name|WorkGroupIDX
return|;
block|}
name|bool
name|hasWorkGroupIDY
argument_list|()
specifier|const
block|{
return|return
name|WorkGroupIDY
return|;
block|}
name|bool
name|hasWorkGroupIDZ
argument_list|()
specifier|const
block|{
return|return
name|WorkGroupIDZ
return|;
block|}
name|bool
name|hasWorkGroupInfo
argument_list|()
specifier|const
block|{
return|return
name|WorkGroupInfo
return|;
block|}
name|bool
name|hasPrivateSegmentWaveByteOffset
argument_list|()
specifier|const
block|{
return|return
name|PrivateSegmentWaveByteOffset
return|;
block|}
name|bool
name|hasWorkItemIDX
argument_list|()
specifier|const
block|{
return|return
name|WorkItemIDX
return|;
block|}
name|bool
name|hasWorkItemIDY
argument_list|()
specifier|const
block|{
return|return
name|WorkItemIDY
return|;
block|}
name|bool
name|hasWorkItemIDZ
argument_list|()
specifier|const
block|{
return|return
name|WorkItemIDZ
return|;
block|}
name|unsigned
name|getNumUserSGPRs
argument_list|()
specifier|const
block|{
return|return
name|NumUserSGPRs
return|;
block|}
name|unsigned
name|getNumPreloadedSGPRs
argument_list|()
specifier|const
block|{
return|return
name|NumUserSGPRs
operator|+
name|NumSystemSGPRs
return|;
block|}
name|unsigned
name|getPrivateSegmentWaveByteOffsetSystemSGPR
argument_list|()
specifier|const
block|{
return|return
name|PrivateSegmentWaveByteOffsetSystemSGPR
return|;
block|}
comment|/// \brief Returns the physical register reserved for use as the resource
comment|/// descriptor for scratch accesses.
name|unsigned
name|getScratchRSrcReg
argument_list|()
specifier|const
block|{
return|return
name|ScratchRSrcReg
return|;
block|}
name|void
name|setScratchRSrcReg
argument_list|(
argument|unsigned Reg
argument_list|)
block|{
name|assert
argument_list|(
name|Reg
operator|!=
name|AMDGPU
operator|::
name|NoRegister
operator|&&
literal|"Should never be unset"
argument_list|)
block|;
name|ScratchRSrcReg
operator|=
name|Reg
block|;   }
name|unsigned
name|getScratchWaveOffsetReg
argument_list|()
specifier|const
block|{
return|return
name|ScratchWaveOffsetReg
return|;
block|}
name|void
name|setScratchWaveOffsetReg
argument_list|(
argument|unsigned Reg
argument_list|)
block|{
name|assert
argument_list|(
name|Reg
operator|!=
name|AMDGPU
operator|::
name|NoRegister
operator|&&
literal|"Should never be unset"
argument_list|)
block|;
name|ScratchWaveOffsetReg
operator|=
name|Reg
block|;   }
name|bool
name|hasSpilledSGPRs
argument_list|()
specifier|const
block|{
return|return
name|HasSpilledSGPRs
return|;
block|}
name|void
name|setHasSpilledSGPRs
argument_list|(
argument|bool Spill = true
argument_list|)
block|{
name|HasSpilledSGPRs
operator|=
name|Spill
block|;   }
name|bool
name|hasSpilledVGPRs
argument_list|()
specifier|const
block|{
return|return
name|HasSpilledVGPRs
return|;
block|}
name|void
name|setHasSpilledVGPRs
argument_list|(
argument|bool Spill = true
argument_list|)
block|{
name|HasSpilledVGPRs
operator|=
name|Spill
block|;   }
name|unsigned
name|getPSInputAddr
argument_list|()
specifier|const
block|{
return|return
name|PSInputAddr
return|;
block|}
name|bool
name|isPSInputAllocated
argument_list|(
argument|unsigned Index
argument_list|)
specifier|const
block|{
return|return
name|PSInputAddr
operator|&
operator|(
literal|1
operator|<<
name|Index
operator|)
return|;
block|}
name|void
name|markPSInputAllocated
argument_list|(
argument|unsigned Index
argument_list|)
block|{
name|PSInputAddr
operator||=
literal|1
operator|<<
name|Index
block|;   }
name|bool
name|returnsVoid
argument_list|()
specifier|const
block|{
return|return
name|ReturnsVoid
return|;
block|}
name|void
name|setIfReturnsVoid
argument_list|(
argument|bool Value
argument_list|)
block|{
name|ReturnsVoid
operator|=
name|Value
block|;   }
name|unsigned
name|getMaximumWorkGroupSize
argument_list|(
argument|const MachineFunction&MF
argument_list|)
specifier|const
block|; }
block|;  }
end_decl_stmt

begin_comment
comment|// End namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

