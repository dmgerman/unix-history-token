begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- SIMachineFunctionInfo.h - SIMachineFunctionInfo interface -*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AMDGPU_SIMACHINEFUNCTIONINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AMDGPU_SIMACHINEFUNCTIONINFO_H
end_define

begin_include
include|#
directive|include
file|"AMDGPUMachineFunction.h"
end_include

begin_include
include|#
directive|include
file|"SIRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"MCTargetDesc/AMDGPUMCTargetDesc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/PseudoSourceValue.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|<array>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<map>
end_include

begin_include
include|#
directive|include
file|<utility>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|AMDGPUImagePseudoSourceValue
range|:
name|public
name|PseudoSourceValue
block|{
name|public
operator|:
name|explicit
name|AMDGPUImagePseudoSourceValue
argument_list|()
operator|:
name|PseudoSourceValue
argument_list|(
argument|PseudoSourceValue::TargetCustom
argument_list|)
block|{ }
name|bool
name|isConstant
argument_list|(
argument|const MachineFrameInfo *
argument_list|)
specifier|const
name|override
block|{
comment|// This should probably be true for most images, but we will start by being
comment|// conservative.
return|return
name|false
return|;
block|}
name|bool
name|isAliased
argument_list|(
argument|const MachineFrameInfo *
argument_list|)
specifier|const
name|override
block|{
comment|// FIXME: If we ever change image intrinsics to accept fat pointers, then
comment|// this could be true for some cases.
return|return
name|false
return|;
block|}
name|bool
name|mayAlias
argument_list|(
argument|const MachineFrameInfo*
argument_list|)
specifier|const
name|override
block|{
comment|// FIXME: If we ever change image intrinsics to accept fat pointers, then
comment|// this could be true for some cases.
return|return
name|false
return|;
block|}
expr|}
block|;
name|class
name|AMDGPUBufferPseudoSourceValue
operator|:
name|public
name|PseudoSourceValue
block|{
name|public
operator|:
name|explicit
name|AMDGPUBufferPseudoSourceValue
argument_list|()
operator|:
name|PseudoSourceValue
argument_list|(
argument|PseudoSourceValue::TargetCustom
argument_list|)
block|{ }
name|bool
name|isConstant
argument_list|(
argument|const MachineFrameInfo *
argument_list|)
specifier|const
name|override
block|{
comment|// This should probably be true for most images, but we will start by being
comment|// conservative.
return|return
name|false
return|;
block|}
name|bool
name|isAliased
argument_list|(
argument|const MachineFrameInfo *
argument_list|)
specifier|const
name|override
block|{
comment|// FIXME: If we ever change image intrinsics to accept fat pointers, then
comment|// this could be true for some cases.
return|return
name|false
return|;
block|}
name|bool
name|mayAlias
argument_list|(
argument|const MachineFrameInfo*
argument_list|)
specifier|const
name|override
block|{
comment|// FIXME: If we ever change image intrinsics to accept fat pointers, then
comment|// this could be true for some cases.
return|return
name|false
return|;
block|}
expr|}
block|;
comment|/// This class keeps track of the SPI_SP_INPUT_ADDR config register, which
comment|/// tells the hardware which interpolation parameters to load.
name|class
name|SIMachineFunctionInfo
name|final
operator|:
name|public
name|AMDGPUMachineFunction
block|{
comment|// FIXME: This should be removed and getPreloadedValue moved here.
name|friend
name|class
name|SIRegisterInfo
block|;
name|unsigned
name|TIDReg
block|;
comment|// Registers that may be reserved for spilling purposes. These may be the same
comment|// as the input registers.
name|unsigned
name|ScratchRSrcReg
block|;
name|unsigned
name|ScratchWaveOffsetReg
block|;
comment|// This is the current function's incremented size from the kernel's scratch
comment|// wave offset register. For an entry function, this is exactly the same as
comment|// the ScratchWaveOffsetReg.
name|unsigned
name|FrameOffsetReg
block|;
comment|// Top of the stack SGPR offset derived from the ScratchWaveOffsetReg.
name|unsigned
name|StackPtrOffsetReg
block|;
comment|// Input registers for non-HSA ABI
name|unsigned
name|PrivateMemoryPtrUserSGPR
block|;
comment|// Input registers setup for the HSA ABI.
comment|// User SGPRs in allocation order.
name|unsigned
name|PrivateSegmentBufferUserSGPR
block|;
name|unsigned
name|DispatchPtrUserSGPR
block|;
name|unsigned
name|QueuePtrUserSGPR
block|;
name|unsigned
name|KernargSegmentPtrUserSGPR
block|;
name|unsigned
name|DispatchIDUserSGPR
block|;
name|unsigned
name|FlatScratchInitUserSGPR
block|;
name|unsigned
name|PrivateSegmentSizeUserSGPR
block|;
name|unsigned
name|GridWorkGroupCountXUserSGPR
block|;
name|unsigned
name|GridWorkGroupCountYUserSGPR
block|;
name|unsigned
name|GridWorkGroupCountZUserSGPR
block|;
comment|// System SGPRs in allocation order.
name|unsigned
name|WorkGroupIDXSystemSGPR
block|;
name|unsigned
name|WorkGroupIDYSystemSGPR
block|;
name|unsigned
name|WorkGroupIDZSystemSGPR
block|;
name|unsigned
name|WorkGroupInfoSystemSGPR
block|;
name|unsigned
name|PrivateSegmentWaveByteOffsetSystemSGPR
block|;
comment|// Graphics info.
name|unsigned
name|PSInputAddr
block|;
name|unsigned
name|PSInputEnable
block|;
name|bool
name|ReturnsVoid
block|;
comment|// A pair of default/requested minimum/maximum flat work group sizes.
comment|// Minimum - first, maximum - second.
name|std
operator|::
name|pair
operator|<
name|unsigned
block|,
name|unsigned
operator|>
name|FlatWorkGroupSizes
block|;
comment|// A pair of default/requested minimum/maximum number of waves per execution
comment|// unit. Minimum - first, maximum - second.
name|std
operator|::
name|pair
operator|<
name|unsigned
block|,
name|unsigned
operator|>
name|WavesPerEU
block|;
comment|// Stack object indices for work group IDs.
name|std
operator|::
name|array
operator|<
name|int
block|,
literal|3
operator|>
name|DebuggerWorkGroupIDStackObjectIndices
block|;
comment|// Stack object indices for work item IDs.
name|std
operator|::
name|array
operator|<
name|int
block|,
literal|3
operator|>
name|DebuggerWorkItemIDStackObjectIndices
block|;
name|AMDGPUBufferPseudoSourceValue
name|BufferPSV
block|;
name|AMDGPUImagePseudoSourceValue
name|ImagePSV
block|;
name|private
operator|:
name|unsigned
name|LDSWaveSpillSize
block|;
name|unsigned
name|ScratchOffsetReg
block|;
name|unsigned
name|NumUserSGPRs
block|;
name|unsigned
name|NumSystemSGPRs
block|;
name|bool
name|HasSpilledSGPRs
block|;
name|bool
name|HasSpilledVGPRs
block|;
name|bool
name|HasNonSpillStackObjects
block|;
name|unsigned
name|NumSpilledSGPRs
block|;
name|unsigned
name|NumSpilledVGPRs
block|;
comment|// Feature bits required for inputs passed in user SGPRs.
name|bool
name|PrivateSegmentBuffer
operator|:
literal|1
block|;
name|bool
name|DispatchPtr
operator|:
literal|1
block|;
name|bool
name|QueuePtr
operator|:
literal|1
block|;
name|bool
name|KernargSegmentPtr
operator|:
literal|1
block|;
name|bool
name|DispatchID
operator|:
literal|1
block|;
name|bool
name|FlatScratchInit
operator|:
literal|1
block|;
name|bool
name|GridWorkgroupCountX
operator|:
literal|1
block|;
name|bool
name|GridWorkgroupCountY
operator|:
literal|1
block|;
name|bool
name|GridWorkgroupCountZ
operator|:
literal|1
block|;
comment|// Feature bits required for inputs passed in system SGPRs.
name|bool
name|WorkGroupIDX
operator|:
literal|1
block|;
comment|// Always initialized.
name|bool
name|WorkGroupIDY
operator|:
literal|1
block|;
name|bool
name|WorkGroupIDZ
operator|:
literal|1
block|;
name|bool
name|WorkGroupInfo
operator|:
literal|1
block|;
name|bool
name|PrivateSegmentWaveByteOffset
operator|:
literal|1
block|;
name|bool
name|WorkItemIDX
operator|:
literal|1
block|;
comment|// Always initialized.
name|bool
name|WorkItemIDY
operator|:
literal|1
block|;
name|bool
name|WorkItemIDZ
operator|:
literal|1
block|;
comment|// Private memory buffer
comment|// Compute directly in sgpr[0:1]
comment|// Other shaders indirect 64-bits at sgpr[0:1]
name|bool
name|PrivateMemoryInputPtr
operator|:
literal|1
block|;
name|MCPhysReg
name|getNextUserSGPR
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|NumSystemSGPRs
operator|==
literal|0
operator|&&
literal|"System SGPRs must be added after user SGPRs"
argument_list|)
block|;
return|return
name|AMDGPU
operator|::
name|SGPR0
operator|+
name|NumUserSGPRs
return|;
block|}
name|MCPhysReg
name|getNextSystemSGPR
argument_list|()
specifier|const
block|{
return|return
name|AMDGPU
operator|::
name|SGPR0
operator|+
name|NumUserSGPRs
operator|+
name|NumSystemSGPRs
return|;
block|}
name|public
operator|:
expr|struct
name|SpilledReg
block|{
name|unsigned
name|VGPR
operator|=
name|AMDGPU
operator|::
name|NoRegister
block|;
name|int
name|Lane
operator|=
operator|-
literal|1
block|;
name|SpilledReg
argument_list|()
operator|=
expr|default
block|;
name|SpilledReg
argument_list|(
argument|unsigned R
argument_list|,
argument|int L
argument_list|)
operator|:
name|VGPR
argument_list|(
name|R
argument_list|)
block|,
name|Lane
argument_list|(
argument|L
argument_list|)
block|{ }
name|bool
name|hasLane
argument_list|()
block|{
return|return
name|Lane
operator|!=
operator|-
literal|1
return|;
block|}
name|bool
name|hasReg
argument_list|()
block|{
return|return
name|VGPR
operator|!=
name|AMDGPU
operator|::
name|NoRegister
return|;
block|}
expr|}
block|;
name|private
operator|:
comment|// SGPR->VGPR spilling support.
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|unsigned
operator|>
name|SpillRegMask
expr_stmt|;
comment|// Track VGPR + wave index for each subregister of the SGPR spilled to
comment|// frameindex key.
name|DenseMap
operator|<
name|int
block|,
name|std
operator|::
name|vector
operator|<
name|SpilledReg
operator|>>
name|SGPRToVGPRSpills
block|;
name|unsigned
name|NumVGPRSpillLanes
operator|=
literal|0
block|;
name|SmallVector
operator|<
name|unsigned
block|,
literal|2
operator|>
name|SpillVGPRs
block|;
name|public
operator|:
name|SIMachineFunctionInfo
argument_list|(
specifier|const
name|MachineFunction
operator|&
name|MF
argument_list|)
block|;
name|ArrayRef
operator|<
name|SpilledReg
operator|>
name|getSGPRToVGPRSpills
argument_list|(
argument|int FrameIndex
argument_list|)
specifier|const
block|{
name|auto
name|I
operator|=
name|SGPRToVGPRSpills
operator|.
name|find
argument_list|(
name|FrameIndex
argument_list|)
block|;
return|return
operator|(
name|I
operator|==
name|SGPRToVGPRSpills
operator|.
name|end
argument_list|()
operator|)
condition|?
name|ArrayRef
operator|<
name|SpilledReg
operator|>
operator|(
operator|)
else|:
name|makeArrayRef
argument_list|(
name|I
operator|->
name|second
argument_list|)
return|;
block|}
name|bool
name|allocateSGPRSpillToVGPR
argument_list|(
argument|MachineFunction&MF
argument_list|,
argument|int FI
argument_list|)
block|;
name|void
name|removeSGPRToVGPRFrameIndices
argument_list|(
name|MachineFrameInfo
operator|&
name|MFI
argument_list|)
block|;
name|bool
name|hasCalculatedTID
argument_list|()
specifier|const
block|{
return|return
name|TIDReg
operator|!=
name|AMDGPU
operator|::
name|NoRegister
return|;
block|}
block|;
name|unsigned
name|getTIDReg
argument_list|()
specifier|const
block|{
return|return
name|TIDReg
return|;
block|}
block|;
name|void
name|setTIDReg
argument_list|(
argument|unsigned Reg
argument_list|)
block|{
name|TIDReg
operator|=
name|Reg
block|; }
comment|// Add user SGPRs.
name|unsigned
name|addPrivateSegmentBuffer
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addDispatchPtr
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addQueuePtr
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addKernargSegmentPtr
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addDispatchID
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addFlatScratchInit
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
name|unsigned
name|addPrivateMemoryPtr
argument_list|(
specifier|const
name|SIRegisterInfo
operator|&
name|TRI
argument_list|)
block|;
comment|// Add system SGPRs.
name|unsigned
name|addWorkGroupIDX
argument_list|()
block|{
name|WorkGroupIDXSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|WorkGroupIDXSystemSGPR
return|;
block|}
name|unsigned
name|addWorkGroupIDY
argument_list|()
block|{
name|WorkGroupIDYSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|WorkGroupIDYSystemSGPR
return|;
block|}
name|unsigned
name|addWorkGroupIDZ
argument_list|()
block|{
name|WorkGroupIDZSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|WorkGroupIDZSystemSGPR
return|;
block|}
name|unsigned
name|addWorkGroupInfo
argument_list|()
block|{
name|WorkGroupInfoSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|WorkGroupInfoSystemSGPR
return|;
block|}
name|unsigned
name|addPrivateSegmentWaveByteOffset
argument_list|()
block|{
name|PrivateSegmentWaveByteOffsetSystemSGPR
operator|=
name|getNextSystemSGPR
argument_list|()
block|;
name|NumSystemSGPRs
operator|+=
literal|1
block|;
return|return
name|PrivateSegmentWaveByteOffsetSystemSGPR
return|;
block|}
name|void
name|setPrivateSegmentWaveByteOffset
argument_list|(
argument|unsigned Reg
argument_list|)
block|{
name|PrivateSegmentWaveByteOffsetSystemSGPR
operator|=
name|Reg
block|;   }
name|bool
name|hasPrivateSegmentBuffer
argument_list|()
specifier|const
block|{
return|return
name|PrivateSegmentBuffer
return|;
block|}
name|bool
name|hasDispatchPtr
argument_list|()
specifier|const
block|{
return|return
name|DispatchPtr
return|;
block|}
name|bool
name|hasQueuePtr
argument_list|()
specifier|const
block|{
return|return
name|QueuePtr
return|;
block|}
name|bool
name|hasKernargSegmentPtr
argument_list|()
specifier|const
block|{
return|return
name|KernargSegmentPtr
return|;
block|}
name|bool
name|hasDispatchID
argument_list|()
specifier|const
block|{
return|return
name|DispatchID
return|;
block|}
name|bool
name|hasFlatScratchInit
argument_list|()
specifier|const
block|{
return|return
name|FlatScratchInit
return|;
block|}
name|bool
name|hasGridWorkgroupCountX
argument_list|()
specifier|const
block|{
return|return
name|GridWorkgroupCountX
return|;
block|}
name|bool
name|hasGridWorkgroupCountY
argument_list|()
specifier|const
block|{
return|return
name|GridWorkgroupCountY
return|;
block|}
name|bool
name|hasGridWorkgroupCountZ
argument_list|()
specifier|const
block|{
return|return
name|GridWorkgroupCountZ
return|;
block|}
name|bool
name|hasWorkGroupIDX
argument_list|()
specifier|const
block|{
return|return
name|WorkGroupIDX
return|;
block|}
name|bool
name|hasWorkGroupIDY
argument_list|()
specifier|const
block|{
return|return
name|WorkGroupIDY
return|;
block|}
name|bool
name|hasWorkGroupIDZ
argument_list|()
specifier|const
block|{
return|return
name|WorkGroupIDZ
return|;
block|}
name|bool
name|hasWorkGroupInfo
argument_list|()
specifier|const
block|{
return|return
name|WorkGroupInfo
return|;
block|}
name|bool
name|hasPrivateSegmentWaveByteOffset
argument_list|()
specifier|const
block|{
return|return
name|PrivateSegmentWaveByteOffset
return|;
block|}
name|bool
name|hasWorkItemIDX
argument_list|()
specifier|const
block|{
return|return
name|WorkItemIDX
return|;
block|}
name|bool
name|hasWorkItemIDY
argument_list|()
specifier|const
block|{
return|return
name|WorkItemIDY
return|;
block|}
name|bool
name|hasWorkItemIDZ
argument_list|()
specifier|const
block|{
return|return
name|WorkItemIDZ
return|;
block|}
name|bool
name|hasPrivateMemoryInputPtr
argument_list|()
specifier|const
block|{
return|return
name|PrivateMemoryInputPtr
return|;
block|}
name|unsigned
name|getNumUserSGPRs
argument_list|()
specifier|const
block|{
return|return
name|NumUserSGPRs
return|;
block|}
name|unsigned
name|getNumPreloadedSGPRs
argument_list|()
specifier|const
block|{
return|return
name|NumUserSGPRs
operator|+
name|NumSystemSGPRs
return|;
block|}
name|unsigned
name|getPrivateSegmentWaveByteOffsetSystemSGPR
argument_list|()
specifier|const
block|{
return|return
name|PrivateSegmentWaveByteOffsetSystemSGPR
return|;
block|}
comment|/// \brief Returns the physical register reserved for use as the resource
comment|/// descriptor for scratch accesses.
name|unsigned
name|getScratchRSrcReg
argument_list|()
specifier|const
block|{
return|return
name|ScratchRSrcReg
return|;
block|}
name|void
name|setScratchRSrcReg
argument_list|(
argument|unsigned Reg
argument_list|)
block|{
name|assert
argument_list|(
name|Reg
operator|!=
name|AMDGPU
operator|::
name|NoRegister
operator|&&
literal|"Should never be unset"
argument_list|)
block|;
name|ScratchRSrcReg
operator|=
name|Reg
block|;   }
name|unsigned
name|getScratchWaveOffsetReg
argument_list|()
specifier|const
block|{
return|return
name|ScratchWaveOffsetReg
return|;
block|}
name|unsigned
name|getFrameOffsetReg
argument_list|()
specifier|const
block|{
return|return
name|FrameOffsetReg
return|;
block|}
name|void
name|setStackPtrOffsetReg
argument_list|(
argument|unsigned Reg
argument_list|)
block|{
name|assert
argument_list|(
name|Reg
operator|!=
name|AMDGPU
operator|::
name|NoRegister
operator|&&
literal|"Should never be unset"
argument_list|)
block|;
name|StackPtrOffsetReg
operator|=
name|Reg
block|;   }
name|unsigned
name|getStackPtrOffsetReg
argument_list|()
specifier|const
block|{
return|return
name|StackPtrOffsetReg
return|;
block|}
name|void
name|setScratchWaveOffsetReg
argument_list|(
argument|unsigned Reg
argument_list|)
block|{
name|assert
argument_list|(
name|Reg
operator|!=
name|AMDGPU
operator|::
name|NoRegister
operator|&&
literal|"Should never be unset"
argument_list|)
block|;
name|ScratchWaveOffsetReg
operator|=
name|Reg
block|;
comment|// FIXME: Only for entry functions.
name|FrameOffsetReg
operator|=
name|ScratchWaveOffsetReg
block|;   }
name|unsigned
name|getQueuePtrUserSGPR
argument_list|()
specifier|const
block|{
return|return
name|QueuePtrUserSGPR
return|;
block|}
name|unsigned
name|getPrivateMemoryPtrUserSGPR
argument_list|()
specifier|const
block|{
return|return
name|PrivateMemoryPtrUserSGPR
return|;
block|}
name|bool
name|hasSpilledSGPRs
argument_list|()
specifier|const
block|{
return|return
name|HasSpilledSGPRs
return|;
block|}
name|void
name|setHasSpilledSGPRs
argument_list|(
argument|bool Spill = true
argument_list|)
block|{
name|HasSpilledSGPRs
operator|=
name|Spill
block|;   }
name|bool
name|hasSpilledVGPRs
argument_list|()
specifier|const
block|{
return|return
name|HasSpilledVGPRs
return|;
block|}
name|void
name|setHasSpilledVGPRs
argument_list|(
argument|bool Spill = true
argument_list|)
block|{
name|HasSpilledVGPRs
operator|=
name|Spill
block|;   }
name|bool
name|hasNonSpillStackObjects
argument_list|()
specifier|const
block|{
return|return
name|HasNonSpillStackObjects
return|;
block|}
name|void
name|setHasNonSpillStackObjects
argument_list|(
argument|bool StackObject = true
argument_list|)
block|{
name|HasNonSpillStackObjects
operator|=
name|StackObject
block|;   }
name|unsigned
name|getNumSpilledSGPRs
argument_list|()
specifier|const
block|{
return|return
name|NumSpilledSGPRs
return|;
block|}
name|unsigned
name|getNumSpilledVGPRs
argument_list|()
specifier|const
block|{
return|return
name|NumSpilledVGPRs
return|;
block|}
name|void
name|addToSpilledSGPRs
argument_list|(
argument|unsigned num
argument_list|)
block|{
name|NumSpilledSGPRs
operator|+=
name|num
block|;   }
name|void
name|addToSpilledVGPRs
argument_list|(
argument|unsigned num
argument_list|)
block|{
name|NumSpilledVGPRs
operator|+=
name|num
block|;   }
name|unsigned
name|getPSInputAddr
argument_list|()
specifier|const
block|{
return|return
name|PSInputAddr
return|;
block|}
name|unsigned
name|getPSInputEnable
argument_list|()
specifier|const
block|{
return|return
name|PSInputEnable
return|;
block|}
name|bool
name|isPSInputAllocated
argument_list|(
argument|unsigned Index
argument_list|)
specifier|const
block|{
return|return
name|PSInputAddr
operator|&
operator|(
literal|1
operator|<<
name|Index
operator|)
return|;
block|}
name|void
name|markPSInputAllocated
argument_list|(
argument|unsigned Index
argument_list|)
block|{
name|PSInputAddr
operator||=
literal|1
operator|<<
name|Index
block|;   }
name|void
name|markPSInputEnabled
argument_list|(
argument|unsigned Index
argument_list|)
block|{
name|PSInputEnable
operator||=
literal|1
operator|<<
name|Index
block|;   }
name|bool
name|returnsVoid
argument_list|()
specifier|const
block|{
return|return
name|ReturnsVoid
return|;
block|}
name|void
name|setIfReturnsVoid
argument_list|(
argument|bool Value
argument_list|)
block|{
name|ReturnsVoid
operator|=
name|Value
block|;   }
comment|/// \returns A pair of default/requested minimum/maximum flat work group sizes
comment|/// for this function.
name|std
operator|::
name|pair
operator|<
name|unsigned
block|,
name|unsigned
operator|>
name|getFlatWorkGroupSizes
argument_list|()
specifier|const
block|{
return|return
name|FlatWorkGroupSizes
return|;
block|}
comment|/// \returns Default/requested minimum flat work group size for this function.
name|unsigned
name|getMinFlatWorkGroupSize
argument_list|()
specifier|const
block|{
return|return
name|FlatWorkGroupSizes
operator|.
name|first
return|;
block|}
comment|/// \returns Default/requested maximum flat work group size for this function.
name|unsigned
name|getMaxFlatWorkGroupSize
argument_list|()
specifier|const
block|{
return|return
name|FlatWorkGroupSizes
operator|.
name|second
return|;
block|}
comment|/// \returns A pair of default/requested minimum/maximum number of waves per
comment|/// execution unit.
name|std
operator|::
name|pair
operator|<
name|unsigned
block|,
name|unsigned
operator|>
name|getWavesPerEU
argument_list|()
specifier|const
block|{
return|return
name|WavesPerEU
return|;
block|}
comment|/// \returns Default/requested minimum number of waves per execution unit.
name|unsigned
name|getMinWavesPerEU
argument_list|()
specifier|const
block|{
return|return
name|WavesPerEU
operator|.
name|first
return|;
block|}
comment|/// \returns Default/requested maximum number of waves per execution unit.
name|unsigned
name|getMaxWavesPerEU
argument_list|()
specifier|const
block|{
return|return
name|WavesPerEU
operator|.
name|second
return|;
block|}
comment|/// \returns Stack object index for \p Dim's work group ID.
name|int
name|getDebuggerWorkGroupIDStackObjectIndex
argument_list|(
argument|unsigned Dim
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Dim
operator|<
literal|3
argument_list|)
block|;
return|return
name|DebuggerWorkGroupIDStackObjectIndices
index|[
name|Dim
index|]
return|;
block|}
comment|/// \brief Sets stack object index for \p Dim's work group ID to \p ObjectIdx.
name|void
name|setDebuggerWorkGroupIDStackObjectIndex
argument_list|(
argument|unsigned Dim
argument_list|,
argument|int ObjectIdx
argument_list|)
block|{
name|assert
argument_list|(
name|Dim
operator|<
literal|3
argument_list|)
block|;
name|DebuggerWorkGroupIDStackObjectIndices
index|[
name|Dim
index|]
operator|=
name|ObjectIdx
block|;   }
comment|/// \returns Stack object index for \p Dim's work item ID.
name|int
name|getDebuggerWorkItemIDStackObjectIndex
argument_list|(
argument|unsigned Dim
argument_list|)
specifier|const
block|{
name|assert
argument_list|(
name|Dim
operator|<
literal|3
argument_list|)
block|;
return|return
name|DebuggerWorkItemIDStackObjectIndices
index|[
name|Dim
index|]
return|;
block|}
comment|/// \brief Sets stack object index for \p Dim's work item ID to \p ObjectIdx.
name|void
name|setDebuggerWorkItemIDStackObjectIndex
argument_list|(
argument|unsigned Dim
argument_list|,
argument|int ObjectIdx
argument_list|)
block|{
name|assert
argument_list|(
name|Dim
operator|<
literal|3
argument_list|)
block|;
name|DebuggerWorkItemIDStackObjectIndices
index|[
name|Dim
index|]
operator|=
name|ObjectIdx
block|;   }
comment|/// \returns SGPR used for \p Dim's work group ID.
name|unsigned
name|getWorkGroupIDSGPR
argument_list|(
argument|unsigned Dim
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|Dim
condition|)
block|{
case|case
literal|0
case|:
name|assert
argument_list|(
name|hasWorkGroupIDX
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|WorkGroupIDXSystemSGPR
return|;
case|case
literal|1
case|:
name|assert
argument_list|(
name|hasWorkGroupIDY
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|WorkGroupIDYSystemSGPR
return|;
case|case
literal|2
case|:
name|assert
argument_list|(
name|hasWorkGroupIDZ
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|WorkGroupIDZSystemSGPR
return|;
block|}
name|llvm_unreachable
argument_list|(
literal|"unexpected dimension"
argument_list|)
expr_stmt|;
block|}
comment|/// \returns VGPR used for \p Dim' work item ID.
name|unsigned
name|getWorkItemIDVGPR
argument_list|(
argument|unsigned Dim
argument_list|)
specifier|const
block|{
switch|switch
condition|(
name|Dim
condition|)
block|{
case|case
literal|0
case|:
name|assert
argument_list|(
name|hasWorkItemIDX
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|AMDGPU
operator|::
name|VGPR0
return|;
case|case
literal|1
case|:
name|assert
argument_list|(
name|hasWorkItemIDY
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|AMDGPU
operator|::
name|VGPR1
return|;
case|case
literal|2
case|:
name|assert
argument_list|(
name|hasWorkItemIDZ
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|AMDGPU
operator|::
name|VGPR2
return|;
block|}
name|llvm_unreachable
argument_list|(
literal|"unexpected dimension"
argument_list|)
expr_stmt|;
block|}
name|unsigned
name|getLDSWaveSpillSize
argument_list|()
specifier|const
block|{
return|return
name|LDSWaveSpillSize
return|;
block|}
specifier|const
name|AMDGPUBufferPseudoSourceValue
operator|*
name|getBufferPSV
argument_list|()
specifier|const
block|{
return|return
operator|&
name|BufferPSV
return|;
block|}
specifier|const
name|AMDGPUImagePseudoSourceValue
operator|*
name|getImagePSV
argument_list|()
specifier|const
block|{
return|return
operator|&
name|ImagePSV
return|;
block|}
expr|}
block|;  }
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_AMDGPU_SIMACHINEFUNCTIONINFO_H
end_comment

end_unit

