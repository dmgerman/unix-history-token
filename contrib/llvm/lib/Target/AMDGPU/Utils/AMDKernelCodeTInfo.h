begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--------------------- AMDKernelCodeTInfo.h ---------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file - specifies tables for amd_kernel_code_t structure parsing/printing
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_define
define|#
directive|define
name|QNAME
parameter_list|(
name|name
parameter_list|)
value|amd_kernel_code_t::name
end_define

begin_define
define|#
directive|define
name|FLD_T
parameter_list|(
name|name
parameter_list|)
value|decltype(QNAME(name)),&QNAME(name)
end_define

begin_define
define|#
directive|define
name|FIELD2
parameter_list|(
name|sname
parameter_list|,
name|aname
parameter_list|,
name|name
parameter_list|)
define|\
value|RECORD(sname, aname, printField<FLD_T(name)>, parseField<FLD_T(name)>)
end_define

begin_define
define|#
directive|define
name|FIELD
parameter_list|(
name|name
parameter_list|)
value|FIELD2(name, name, name)
end_define

begin_define
define|#
directive|define
name|PRINTCODEPROP
parameter_list|(
name|name
parameter_list|)
define|\
value|printBitField<FLD_T(code_properties),\                 AMD_CODE_PROPERTY_##name##_SHIFT,\                 AMD_CODE_PROPERTY_##name##_WIDTH>
end_define

begin_define
define|#
directive|define
name|PARSECODEPROP
parameter_list|(
name|name
parameter_list|)
define|\
value|parseBitField<FLD_T(code_properties),\                 AMD_CODE_PROPERTY_##name##_SHIFT,\                 AMD_CODE_PROPERTY_##name##_WIDTH>
end_define

begin_define
define|#
directive|define
name|CODEPROP
parameter_list|(
name|name
parameter_list|,
name|shift
parameter_list|)
define|\
value|RECORD(name, name, PRINTCODEPROP(shift), PARSECODEPROP(shift))
end_define

begin_comment
comment|// have to define these lambdas because of Set/GetMacro
end_comment

begin_define
define|#
directive|define
name|PRINTCOMP
parameter_list|(
name|GetMacro
parameter_list|,
name|Shift
parameter_list|)
define|\
value|[](StringRef Name, const amd_kernel_code_t&C, raw_ostream&OS) { \    printName(OS, Name)<< \      (int)GetMacro(C.compute_pgm_resource_registers>> Shift); \ }
end_define

begin_define
define|#
directive|define
name|PARSECOMP
parameter_list|(
name|SetMacro
parameter_list|,
name|Shift
parameter_list|)
define|\
value|[](amd_kernel_code_t&C, MCAsmParser&MCParser, raw_ostream&Err) { \    int64_t Value = 0; \    if (!expectAbsExpression(MCParser, Value, Err)) \      return false; \    C.compute_pgm_resource_registers |= SetMacro(Value)<< Shift; \    return true; \ }
end_define

begin_define
define|#
directive|define
name|COMPPGM
parameter_list|(
name|name
parameter_list|,
name|aname
parameter_list|,
name|GetMacro
parameter_list|,
name|SetMacro
parameter_list|,
name|Shift
parameter_list|)
define|\
value|RECORD(name, aname, PRINTCOMP(GetMacro, Shift), PARSECOMP(SetMacro, Shift))
end_define

begin_define
define|#
directive|define
name|COMPPGM1
parameter_list|(
name|name
parameter_list|,
name|aname
parameter_list|,
name|AccMacro
parameter_list|)
define|\
value|COMPPGM(name, aname, G_00B848_##AccMacro, S_00B848_##AccMacro, 0)
end_define

begin_define
define|#
directive|define
name|COMPPGM2
parameter_list|(
name|name
parameter_list|,
name|aname
parameter_list|,
name|AccMacro
parameter_list|)
define|\
value|COMPPGM(name, aname, G_00B84C_##AccMacro, S_00B84C_##AccMacro, 32)
end_define

begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment

begin_comment
comment|// Begin of the table
end_comment

begin_comment
comment|// Define RECORD(name, print, parse) in your code to get field definitions
end_comment

begin_comment
comment|// and include this file
end_comment

begin_expr_stmt
name|FIELD2
argument_list|(
name|amd_code_version_major
argument_list|,
name|kernel_code_version_major
argument_list|,
name|amd_kernel_code_version_major
argument_list|)
operator|,
name|FIELD2
argument_list|(
name|amd_code_version_minor
argument_list|,
name|kernel_code_version_minor
argument_list|,
name|amd_kernel_code_version_minor
argument_list|)
operator|,
name|FIELD2
argument_list|(
name|amd_machine_kind
argument_list|,
name|machine_kind
argument_list|,
name|amd_machine_kind
argument_list|)
operator|,
name|FIELD2
argument_list|(
name|amd_machine_version_major
argument_list|,
name|machine_version_major
argument_list|,
name|amd_machine_version_major
argument_list|)
operator|,
name|FIELD2
argument_list|(
name|amd_machine_version_minor
argument_list|,
name|machine_version_minor
argument_list|,
name|amd_machine_version_minor
argument_list|)
operator|,
name|FIELD2
argument_list|(
name|amd_machine_version_stepping
argument_list|,
name|machine_version_stepping
argument_list|,
name|amd_machine_version_stepping
argument_list|)
operator|,
name|FIELD
argument_list|(
name|kernel_code_entry_byte_offset
argument_list|)
operator|,
name|FIELD
argument_list|(
name|kernel_code_prefetch_byte_size
argument_list|)
operator|,
name|FIELD
argument_list|(
name|max_scratch_backing_memory_byte_size
argument_list|)
operator|,
name|COMPPGM1
argument_list|(
name|granulated_workitem_vgpr_count
argument_list|,
name|compute_pgm_rsrc1_vgprs
argument_list|,
name|VGPRS
argument_list|)
operator|,
name|COMPPGM1
argument_list|(
name|granulated_wavefront_sgpr_count
argument_list|,
name|compute_pgm_rsrc1_sgprs
argument_list|,
name|SGPRS
argument_list|)
operator|,
name|COMPPGM1
argument_list|(
name|priority
argument_list|,
name|compute_pgm_rsrc1_priority
argument_list|,
name|PRIORITY
argument_list|)
operator|,
name|COMPPGM1
argument_list|(
name|float_mode
argument_list|,
name|compute_pgm_rsrc1_float_mode
argument_list|,
name|FLOAT_MODE
argument_list|)
operator|,
comment|// TODO: split float_mode
name|COMPPGM1
argument_list|(
name|priv
argument_list|,
name|compute_pgm_rsrc1_priv
argument_list|,
name|PRIV
argument_list|)
operator|,
name|COMPPGM1
argument_list|(
name|enable_dx10_clamp
argument_list|,
name|compute_pgm_rsrc1_dx10_clamp
argument_list|,
name|DX10_CLAMP
argument_list|)
operator|,
name|COMPPGM1
argument_list|(
name|debug_mode
argument_list|,
name|compute_pgm_rsrc1_debug_mode
argument_list|,
name|DEBUG_MODE
argument_list|)
operator|,
name|COMPPGM1
argument_list|(
name|enable_ieee_mode
argument_list|,
name|compute_pgm_rsrc1_ieee_mode
argument_list|,
name|IEEE_MODE
argument_list|)
operator|,
comment|// TODO: bulky
comment|// TODO: cdbg_user
name|COMPPGM2
argument_list|(
name|enable_sgpr_private_segment_wave_byte_offset
argument_list|,
name|compute_pgm_rsrc2_scratch_en
argument_list|,
name|SCRATCH_EN
argument_list|)
operator|,
name|COMPPGM2
argument_list|(
name|user_sgpr_count
argument_list|,
name|compute_pgm_rsrc2_user_sgpr
argument_list|,
name|USER_SGPR
argument_list|)
operator|,
comment|// TODO: enable_trap_handler
name|COMPPGM2
argument_list|(
name|enable_sgpr_workgroup_id_x
argument_list|,
name|compute_pgm_rsrc2_tgid_x_en
argument_list|,
name|TGID_X_EN
argument_list|)
operator|,
name|COMPPGM2
argument_list|(
name|enable_sgpr_workgroup_id_y
argument_list|,
name|compute_pgm_rsrc2_tgid_y_en
argument_list|,
name|TGID_Y_EN
argument_list|)
operator|,
name|COMPPGM2
argument_list|(
name|enable_sgpr_workgroup_id_z
argument_list|,
name|compute_pgm_rsrc2_tgid_z_en
argument_list|,
name|TGID_Z_EN
argument_list|)
operator|,
name|COMPPGM2
argument_list|(
name|enable_sgpr_workgroup_info
argument_list|,
name|compute_pgm_rsrc2_tg_size_en
argument_list|,
name|TG_SIZE_EN
argument_list|)
operator|,
name|COMPPGM2
argument_list|(
name|enable_vgpr_workitem_id
argument_list|,
name|compute_pgm_rsrc2_tidig_comp_cnt
argument_list|,
name|TIDIG_COMP_CNT
argument_list|)
operator|,
name|COMPPGM2
argument_list|(
name|enable_exception_msb
argument_list|,
name|compute_pgm_rsrc2_excp_en_msb
argument_list|,
name|EXCP_EN_MSB
argument_list|)
operator|,
comment|// TODO: split enable_exception_msb
name|COMPPGM2
argument_list|(
name|granulated_lds_size
argument_list|,
name|compute_pgm_rsrc2_lds_size
argument_list|,
name|LDS_SIZE
argument_list|)
operator|,
name|COMPPGM2
argument_list|(
name|enable_exception
argument_list|,
name|compute_pgm_rsrc2_excp_en
argument_list|,
name|EXCP_EN
argument_list|)
operator|,
comment|// TODO: split enable_exception
name|CODEPROP
argument_list|(
name|enable_sgpr_private_segment_buffer
argument_list|,
name|ENABLE_SGPR_PRIVATE_SEGMENT_BUFFER
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_dispatch_ptr
argument_list|,
name|ENABLE_SGPR_DISPATCH_PTR
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_queue_ptr
argument_list|,
name|ENABLE_SGPR_QUEUE_PTR
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_kernarg_segment_ptr
argument_list|,
name|ENABLE_SGPR_KERNARG_SEGMENT_PTR
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_dispatch_id
argument_list|,
name|ENABLE_SGPR_DISPATCH_ID
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_flat_scratch_init
argument_list|,
name|ENABLE_SGPR_FLAT_SCRATCH_INIT
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_private_segment_size
argument_list|,
name|ENABLE_SGPR_PRIVATE_SEGMENT_SIZE
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_grid_workgroup_count_x
argument_list|,
name|ENABLE_SGPR_GRID_WORKGROUP_COUNT_X
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_grid_workgroup_count_y
argument_list|,
name|ENABLE_SGPR_GRID_WORKGROUP_COUNT_Y
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_sgpr_grid_workgroup_count_z
argument_list|,
name|ENABLE_SGPR_GRID_WORKGROUP_COUNT_Z
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|enable_ordered_append_gds
argument_list|,
name|ENABLE_ORDERED_APPEND_GDS
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|private_element_size
argument_list|,
name|PRIVATE_ELEMENT_SIZE
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|is_ptr64
argument_list|,
name|IS_PTR64
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|is_dynamic_callstack
argument_list|,
name|IS_DYNAMIC_CALLSTACK
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|is_debug_enabled
argument_list|,
name|IS_DEBUG_SUPPORTED
argument_list|)
operator|,
name|CODEPROP
argument_list|(
name|is_xnack_enabled
argument_list|,
name|IS_XNACK_SUPPORTED
argument_list|)
operator|,
name|FIELD
argument_list|(
name|workitem_private_segment_byte_size
argument_list|)
operator|,
name|FIELD
argument_list|(
name|workgroup_group_segment_byte_size
argument_list|)
operator|,
name|FIELD
argument_list|(
name|gds_segment_byte_size
argument_list|)
operator|,
name|FIELD
argument_list|(
name|kernarg_segment_byte_size
argument_list|)
operator|,
name|FIELD
argument_list|(
name|workgroup_fbarrier_count
argument_list|)
operator|,
name|FIELD
argument_list|(
name|wavefront_sgpr_count
argument_list|)
operator|,
name|FIELD
argument_list|(
name|workitem_vgpr_count
argument_list|)
operator|,
name|FIELD
argument_list|(
name|reserved_vgpr_first
argument_list|)
operator|,
name|FIELD
argument_list|(
name|reserved_vgpr_count
argument_list|)
operator|,
name|FIELD
argument_list|(
name|reserved_sgpr_first
argument_list|)
operator|,
name|FIELD
argument_list|(
name|reserved_sgpr_count
argument_list|)
operator|,
name|FIELD
argument_list|(
name|debug_wavefront_private_segment_offset_sgpr
argument_list|)
operator|,
name|FIELD
argument_list|(
name|debug_private_segment_buffer_sgpr
argument_list|)
operator|,
name|FIELD
argument_list|(
name|kernarg_segment_alignment
argument_list|)
operator|,
name|FIELD
argument_list|(
name|group_segment_alignment
argument_list|)
operator|,
name|FIELD
argument_list|(
name|private_segment_alignment
argument_list|)
operator|,
name|FIELD
argument_list|(
name|wavefront_size
argument_list|)
operator|,
name|FIELD
argument_list|(
name|call_convention
argument_list|)
operator|,
name|FIELD
argument_list|(
argument|runtime_loader_kernel_symbol
argument_list|)
end_expr_stmt

begin_comment
comment|// TODO: control_directive
end_comment

begin_comment
comment|// end of the table
end_comment

begin_comment
comment|///////////////////////////////////////////////////////////////////////////////
end_comment

begin_undef
undef|#
directive|undef
name|QNAME
end_undef

begin_undef
undef|#
directive|undef
name|FLD_T
end_undef

begin_undef
undef|#
directive|undef
name|FIELD2
end_undef

begin_undef
undef|#
directive|undef
name|FIELD
end_undef

begin_undef
undef|#
directive|undef
name|PRINTCODEPROP
end_undef

begin_undef
undef|#
directive|undef
name|PARSECODEPROP
end_undef

begin_undef
undef|#
directive|undef
name|CODEPROP
end_undef

begin_undef
undef|#
directive|undef
name|PRINTCOMP
end_undef

begin_undef
undef|#
directive|undef
name|PAPSECOMP
end_undef

begin_undef
undef|#
directive|undef
name|COMPPGM
end_undef

begin_undef
undef|#
directive|undef
name|COMPPGM1
end_undef

begin_undef
undef|#
directive|undef
name|COMPPGM2
end_undef

end_unit

