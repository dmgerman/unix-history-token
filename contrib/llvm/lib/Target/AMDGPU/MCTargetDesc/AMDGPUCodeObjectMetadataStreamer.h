begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===--- AMDGPUCodeObjectMetadataStreamer.h ---------------------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// \brief AMDGPU Code Object Metadata Streamer.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_AMDGPU_MCTARGETDESC_AMDGPUCODEOBJECTMETADATASTREAMER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_AMDGPU_MCTARGETDESC_AMDGPUCODEOBJECTMETADATASTREAMER_H
end_define

begin_include
include|#
directive|include
file|"AMDGPU.h"
end_include

begin_include
include|#
directive|include
file|"AMDKernelCodeT.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/AMDGPUCodeObjectMetadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorOr.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Argument
decl_stmt|;
name|class
name|DataLayout
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|MDNode
decl_stmt|;
name|class
name|Module
decl_stmt|;
name|class
name|Type
decl_stmt|;
name|namespace
name|AMDGPU
block|{
name|namespace
name|CodeObject
block|{
name|class
name|MetadataStreamer
name|final
block|{
name|private
label|:
name|Metadata
name|CodeObjectMetadata
decl_stmt|;
name|AMDGPUAS
name|AMDGPUASI
decl_stmt|;
name|void
name|dump
argument_list|(
name|StringRef
name|YamlString
argument_list|)
decl|const
decl_stmt|;
name|void
name|verify
argument_list|(
name|StringRef
name|YamlString
argument_list|)
decl|const
decl_stmt|;
name|AccessQualifier
name|getAccessQualifier
argument_list|(
name|StringRef
name|AccQual
argument_list|)
decl|const
decl_stmt|;
name|AddressSpaceQualifier
name|getAddressSpaceQualifer
argument_list|(
name|unsigned
name|AddressSpace
argument_list|)
decl|const
decl_stmt|;
name|ValueKind
name|getValueKind
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|StringRef
name|TypeQual
argument_list|,
name|StringRef
name|BaseTypeName
argument_list|)
decl|const
decl_stmt|;
name|ValueType
name|getValueType
argument_list|(
name|Type
operator|*
name|Ty
argument_list|,
name|StringRef
name|TypeName
argument_list|)
decl|const
decl_stmt|;
name|std
operator|::
name|string
name|getTypeName
argument_list|(
argument|Type *Ty
argument_list|,
argument|bool Signed
argument_list|)
specifier|const
expr_stmt|;
name|std
operator|::
name|vector
operator|<
name|uint32_t
operator|>
name|getWorkGroupDimensions
argument_list|(
argument|MDNode *Node
argument_list|)
specifier|const
expr_stmt|;
name|void
name|emitVersion
parameter_list|()
function_decl|;
name|void
name|emitPrintf
parameter_list|(
specifier|const
name|Module
modifier|&
name|Mod
parameter_list|)
function_decl|;
name|void
name|emitKernelLanguage
parameter_list|(
specifier|const
name|Function
modifier|&
name|Func
parameter_list|)
function_decl|;
name|void
name|emitKernelAttrs
parameter_list|(
specifier|const
name|Function
modifier|&
name|Func
parameter_list|)
function_decl|;
name|void
name|emitKernelArgs
parameter_list|(
specifier|const
name|Function
modifier|&
name|Func
parameter_list|)
function_decl|;
name|void
name|emitKernelArg
parameter_list|(
specifier|const
name|Argument
modifier|&
name|Arg
parameter_list|)
function_decl|;
name|void
name|emitKernelArg
parameter_list|(
specifier|const
name|DataLayout
modifier|&
name|DL
parameter_list|,
name|Type
modifier|*
name|Ty
parameter_list|,
name|ValueKind
name|ValueKind
parameter_list|,
name|StringRef
name|TypeQual
init|=
literal|""
parameter_list|,
name|StringRef
name|BaseTypeName
init|=
literal|""
parameter_list|,
name|StringRef
name|AccQual
init|=
literal|""
parameter_list|,
name|StringRef
name|Name
init|=
literal|""
parameter_list|,
name|StringRef
name|TypeName
init|=
literal|""
parameter_list|)
function_decl|;
name|void
name|emitKernelCodeProps
parameter_list|(
specifier|const
name|amd_kernel_code_t
modifier|&
name|KernelCode
parameter_list|)
function_decl|;
name|void
name|emitKernelDebugProps
parameter_list|(
specifier|const
name|amd_kernel_code_t
modifier|&
name|KernelCode
parameter_list|)
function_decl|;
name|public
label|:
name|MetadataStreamer
argument_list|()
operator|=
expr|default
expr_stmt|;
operator|~
name|MetadataStreamer
argument_list|()
operator|=
expr|default
expr_stmt|;
name|void
name|begin
parameter_list|(
specifier|const
name|Module
modifier|&
name|Mod
parameter_list|)
function_decl|;
name|void
name|end
parameter_list|()
block|{}
name|void
name|emitKernel
parameter_list|(
specifier|const
name|Function
modifier|&
name|Func
parameter_list|,
specifier|const
name|amd_kernel_code_t
modifier|&
name|KernelCode
parameter_list|)
function_decl|;
name|ErrorOr
operator|<
name|std
operator|::
name|string
operator|>
name|toYamlString
argument_list|()
expr_stmt|;
name|ErrorOr
operator|<
name|std
operator|::
name|string
operator|>
name|toYamlString
argument_list|(
argument|StringRef YamlString
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
comment|// end namespace CodeObject
block|}
comment|// end namespace AMDGPU
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_AMDGPU_MCTARGETDESC_AMDGPUCODEOBJECTMETADATASTREAMER_H
end_comment

end_unit

