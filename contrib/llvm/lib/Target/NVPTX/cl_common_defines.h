begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|__CL_COMMON_DEFINES_H__
end_ifndef

begin_define
define|#
directive|define
name|__CL_COMMON_DEFINES_H__
end_define

begin_comment
comment|// This file includes defines that are common to both kernel code and
end_comment

begin_comment
comment|// the NVPTX back-end.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Common defines for Image intrinsics
end_comment

begin_comment
comment|// Channel order
end_comment

begin_enum
enum|enum
block|{
name|CLK_R
init|=
literal|0x10B0
block|,
name|CLK_A
init|=
literal|0x10B1
block|,
name|CLK_RG
init|=
literal|0x10B2
block|,
name|CLK_RA
init|=
literal|0x10B3
block|,
name|CLK_RGB
init|=
literal|0x10B4
block|,
name|CLK_RGBA
init|=
literal|0x10B5
block|,
name|CLK_BGRA
init|=
literal|0x10B6
block|,
name|CLK_ARGB
init|=
literal|0x10B7
block|,
if|#
directive|if
operator|(
name|__NV_CL_C_VERSION
operator|==
name|__NV_CL_C_VERSION_1_0
operator|)
name|CLK_xRGB
init|=
literal|0x10B7
block|,
endif|#
directive|endif
name|CLK_INTENSITY
init|=
literal|0x10B8
block|,
name|CLK_LUMINANCE
init|=
literal|0x10B9
if|#
directive|if
operator|(
name|__NV_CL_C_VERSION
operator|>=
name|__NV_CL_C_VERSION_1_1
operator|)
block|,
name|CLK_Rx
init|=
literal|0x10BA
block|,
name|CLK_RGx
init|=
literal|0x10BB
block|,
name|CLK_RGBx
init|=
literal|0x10BC
endif|#
directive|endif
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
enum|enum
name|clk_channel_type
block|{
comment|// valid formats for float return types
name|CLK_SNORM_INT8
init|=
literal|0x10D0
block|,
comment|// four channel RGBA unorm8
name|CLK_SNORM_INT16
init|=
literal|0x10D1
block|,
comment|// four channel RGBA unorm16
name|CLK_UNORM_INT8
init|=
literal|0x10D2
block|,
comment|// four channel RGBA unorm8
name|CLK_UNORM_INT16
init|=
literal|0x10D3
block|,
comment|// four channel RGBA unorm16
name|CLK_HALF_FLOAT
init|=
literal|0x10DD
block|,
comment|// four channel RGBA half
name|CLK_FLOAT
init|=
literal|0x10DE
block|,
comment|// four channel RGBA float
if|#
directive|if
operator|(
name|__NV_CL_C_VERSION
operator|>=
name|__NV_CL_C_VERSION_1_1
operator|)
name|CLK_UNORM_SHORT_565
init|=
literal|0x10D4
block|,
name|CLK_UNORM_SHORT_555
init|=
literal|0x10D5
block|,
name|CLK_UNORM_INT_101010
init|=
literal|0x10D6
block|,
endif|#
directive|endif
comment|// valid only for integer return types
name|CLK_SIGNED_INT8
init|=
literal|0x10D7
block|,
name|CLK_SIGNED_INT16
init|=
literal|0x10D8
block|,
name|CLK_SIGNED_INT32
init|=
literal|0x10D9
block|,
name|CLK_UNSIGNED_INT8
init|=
literal|0x10DA
block|,
name|CLK_UNSIGNED_INT16
init|=
literal|0x10DB
block|,
name|CLK_UNSIGNED_INT32
init|=
literal|0x10DC
block|,
comment|// CI SPI for CPU
name|__CLK_UNORM_INT8888
block|,
comment|// four channel ARGB unorm8
name|__CLK_UNORM_INT8888R
block|,
comment|// four channel BGRA unorm8
name|__CLK_VALID_IMAGE_TYPE_COUNT
block|,
name|__CLK_INVALID_IMAGE_TYPE
init|=
name|__CLK_VALID_IMAGE_TYPE_COUNT
block|,
name|__CLK_VALID_IMAGE_TYPE_MASK_BITS
init|=
literal|4
block|,
comment|// number of bits required to
comment|// represent any image type
name|__CLK_VALID_IMAGE_TYPE_MASK
init|=
operator|(
literal|1
operator|<<
name|__CLK_VALID_IMAGE_TYPE_MASK_BITS
operator|)
operator|-
literal|1
block|}
name|clk_channel_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
name|clk_sampler_type
block|{
name|__CLK_ADDRESS_BASE
init|=
literal|0
block|,
name|CLK_ADDRESS_NONE
init|=
literal|0
operator|<<
name|__CLK_ADDRESS_BASE
block|,
name|CLK_ADDRESS_CLAMP
init|=
literal|1
operator|<<
name|__CLK_ADDRESS_BASE
block|,
name|CLK_ADDRESS_CLAMP_TO_EDGE
init|=
literal|2
operator|<<
name|__CLK_ADDRESS_BASE
block|,
name|CLK_ADDRESS_REPEAT
init|=
literal|3
operator|<<
name|__CLK_ADDRESS_BASE
block|,
name|CLK_ADDRESS_MIRROR
init|=
literal|4
operator|<<
name|__CLK_ADDRESS_BASE
block|,
if|#
directive|if
operator|(
name|__NV_CL_C_VERSION
operator|>=
name|__NV_CL_C_VERSION_1_1
operator|)
name|CLK_ADDRESS_MIRRORED_REPEAT
init|=
name|CLK_ADDRESS_MIRROR
block|,
endif|#
directive|endif
name|__CLK_ADDRESS_MASK
init|=
name|CLK_ADDRESS_NONE
operator||
name|CLK_ADDRESS_CLAMP
operator||
name|CLK_ADDRESS_CLAMP_TO_EDGE
operator||
name|CLK_ADDRESS_REPEAT
operator||
name|CLK_ADDRESS_MIRROR
block|,
name|__CLK_ADDRESS_BITS
init|=
literal|3
block|,
comment|// number of bits required to
comment|// represent address info
name|__CLK_NORMALIZED_BASE
init|=
name|__CLK_ADDRESS_BITS
block|,
name|CLK_NORMALIZED_COORDS_FALSE
init|=
literal|0
block|,
name|CLK_NORMALIZED_COORDS_TRUE
init|=
literal|1
operator|<<
name|__CLK_NORMALIZED_BASE
block|,
name|__CLK_NORMALIZED_MASK
init|=
name|CLK_NORMALIZED_COORDS_FALSE
operator||
name|CLK_NORMALIZED_COORDS_TRUE
block|,
name|__CLK_NORMALIZED_BITS
init|=
literal|1
block|,
comment|// number of bits required to
comment|// represent normalization
name|__CLK_FILTER_BASE
init|=
name|__CLK_NORMALIZED_BASE
operator|+
name|__CLK_NORMALIZED_BITS
block|,
name|CLK_FILTER_NEAREST
init|=
literal|0
operator|<<
name|__CLK_FILTER_BASE
block|,
name|CLK_FILTER_LINEAR
init|=
literal|1
operator|<<
name|__CLK_FILTER_BASE
block|,
name|CLK_FILTER_ANISOTROPIC
init|=
literal|2
operator|<<
name|__CLK_FILTER_BASE
block|,
name|__CLK_FILTER_MASK
init|=
name|CLK_FILTER_NEAREST
operator||
name|CLK_FILTER_LINEAR
operator||
name|CLK_FILTER_ANISOTROPIC
block|,
name|__CLK_FILTER_BITS
init|=
literal|2
block|,
comment|// number of bits required to
comment|// represent address info
name|__CLK_MIP_BASE
init|=
name|__CLK_FILTER_BASE
operator|+
name|__CLK_FILTER_BITS
block|,
name|CLK_MIP_NEAREST
init|=
literal|0
operator|<<
name|__CLK_MIP_BASE
block|,
name|CLK_MIP_LINEAR
init|=
literal|1
operator|<<
name|__CLK_MIP_BASE
block|,
name|CLK_MIP_ANISOTROPIC
init|=
literal|2
operator|<<
name|__CLK_MIP_BASE
block|,
name|__CLK_MIP_MASK
init|=
name|CLK_MIP_NEAREST
operator||
name|CLK_MIP_LINEAR
operator||
name|CLK_MIP_ANISOTROPIC
block|,
name|__CLK_MIP_BITS
init|=
literal|2
block|,
name|__CLK_SAMPLER_BITS
init|=
name|__CLK_MIP_BASE
operator|+
name|__CLK_MIP_BITS
block|,
name|__CLK_SAMPLER_MASK
init|=
name|__CLK_MIP_MASK
operator||
name|__CLK_FILTER_MASK
operator||
name|__CLK_NORMALIZED_MASK
operator||
name|__CLK_ADDRESS_MASK
block|,
name|__CLK_ANISOTROPIC_RATIO_BITS
init|=
literal|5
block|,
name|__CLK_ANISOTROPIC_RATIO_MASK
init|=
operator|(
name|int
operator|)
literal|0x80000000
operator|>>
operator|(
name|__CLK_ANISOTROPIC_RATIO_BITS
operator|-
literal|1
operator|)
block|}
name|clk_sampler_type
typedef|;
end_typedef

begin_comment
comment|// Memory synchronization
end_comment

begin_define
define|#
directive|define
name|CLK_LOCAL_MEM_FENCE
value|(1<< 0)
end_define

begin_define
define|#
directive|define
name|CLK_GLOBAL_MEM_FENCE
value|(1<< 1)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __CL_COMMON_DEFINES_H__
end_comment

end_unit

