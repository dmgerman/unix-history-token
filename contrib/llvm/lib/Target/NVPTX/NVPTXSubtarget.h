begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=====-- NVPTXSubtarget.h - Define Subtarget for the NVPTX ---*- C++ -*--====//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the NVPTX specific subclass of TargetSubtarget.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NVPTXSUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|NVPTXSUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"NVPTX.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"NVPTXGenSubtargetInfo.inc"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|NVPTXSubtarget
range|:
name|public
name|NVPTXGenSubtargetInfo
block|{
name|virtual
name|void
name|anchor
argument_list|()
block|;
name|std
operator|::
name|string
name|TargetName
block|;
name|NVPTX
operator|::
name|DrvInterface
name|drvInterface
block|;
name|bool
name|Is64Bit
block|;
comment|// PTX version x.y is represented as 10*x+y, e.g. 3.1 == 31
name|unsigned
name|PTXVersion
block|;
comment|// SM version x.y is represented as 10*x+y, e.g. 3.1 == 31
name|unsigned
name|int
name|SmVersion
block|;
name|public
operator|:
comment|/// This constructor initializes the data members to match that
comment|/// of the specified module.
comment|///
name|NVPTXSubtarget
argument_list|(
argument|const std::string&TT
argument_list|,
argument|const std::string&CPU
argument_list|,
argument|const std::string&FS
argument_list|,
argument|bool is64Bit
argument_list|)
block|;
name|bool
name|hasBrkPt
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|11
return|;
block|}
name|bool
name|hasAtomRedG32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|11
return|;
block|}
name|bool
name|hasAtomRedS32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|12
return|;
block|}
name|bool
name|hasAtomRedG64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|12
return|;
block|}
name|bool
name|hasAtomRedS64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasAtomRedGen32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasAtomRedGen64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasAtomAddF32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasVote
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|12
return|;
block|}
name|bool
name|hasDouble
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|13
return|;
block|}
name|bool
name|reqPTX20
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasF32FTZ
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasFMAF32
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasFMAF64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|13
return|;
block|}
name|bool
name|hasLDG
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|32
return|;
block|}
name|bool
name|hasLDU
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|hasGenericLdSt
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
specifier|inline
name|bool
name|hasHWROT32
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
specifier|inline
name|bool
name|hasSWROT32
argument_list|()
specifier|const
block|{
return|return
name|true
return|;
block|}
specifier|inline
name|bool
name|hasROT32
argument_list|()
specifier|const
block|{
return|return
name|hasHWROT32
argument_list|()
operator|||
name|hasSWROT32
argument_list|()
return|;
block|}
specifier|inline
name|bool
name|hasROT64
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
operator|>=
literal|20
return|;
block|}
name|bool
name|is64Bit
argument_list|()
specifier|const
block|{
return|return
name|Is64Bit
return|;
block|}
name|unsigned
name|int
name|getSmVersion
argument_list|()
specifier|const
block|{
return|return
name|SmVersion
return|;
block|}
name|NVPTX
operator|::
name|DrvInterface
name|getDrvInterface
argument_list|()
specifier|const
block|{
return|return
name|drvInterface
return|;
block|}
name|std
operator|::
name|string
name|getTargetName
argument_list|()
specifier|const
block|{
return|return
name|TargetName
return|;
block|}
name|unsigned
name|getPTXVersion
argument_list|()
specifier|const
block|{
return|return
name|PTXVersion
return|;
block|}
name|void
name|ParseSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
name|std
operator|::
name|string
name|getDataLayout
argument_list|()
specifier|const
block|{
specifier|const
name|char
operator|*
name|p
block|;
if|if
condition|(
name|is64Bit
argument_list|()
condition|)
name|p
operator|=
literal|"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-"
literal|"f32:32:32-f64:64:64-v16:16:16-v32:32:32-v64:64:64-v128:128:128-"
literal|"n16:32:64"
expr_stmt|;
else|else
name|p
operator|=
literal|"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-"
literal|"f32:32:32-f64:64:64-v16:16:16-v32:32:32-v64:64:64-v128:128:128-"
literal|"n16:32:64"
expr_stmt|;
return|return
name|std
operator|::
name|string
argument_list|(
name|p
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// NVPTXSUBTARGET_H
end_comment

end_unit

