begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- NVPTXISelLowering.h - NVPTX DAG Lowering Interface ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the interfaces that NVPTX uses to lower LLVM code into a
end_comment

begin_comment
comment|// selection DAG.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NVPTXISELLOWERING_H
end_ifndef

begin_define
define|#
directive|define
name|NVPTXISELLOWERING_H
end_define

begin_include
include|#
directive|include
file|"NVPTX.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SelectionDAG.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|NVPTXISD
block|{
enum|enum
name|NodeType
block|{
comment|// Start the numbering from where ISD NodeType finishes.
name|FIRST_NUMBER
init|=
name|ISD
operator|::
name|BUILTIN_OP_END
block|,
name|Wrapper
block|,
name|CALL
block|,
name|RET_FLAG
block|,
name|LOAD_PARAM
block|,
name|DeclareParam
block|,
name|DeclareScalarParam
block|,
name|DeclareRetParam
block|,
name|DeclareRet
block|,
name|DeclareScalarRet
block|,
name|PrintCall
block|,
name|PrintCallUni
block|,
name|CallArgBegin
block|,
name|CallArg
block|,
name|LastCallArg
block|,
name|CallArgEnd
block|,
name|CallVoid
block|,
name|CallVal
block|,
name|CallSymbol
block|,
name|Prototype
block|,
name|MoveParam
block|,
name|PseudoUseParam
block|,
name|RETURN
block|,
name|CallSeqBegin
block|,
name|CallSeqEnd
block|,
name|CallPrototype
block|,
name|FUN_SHFL_CLAMP
block|,
name|FUN_SHFR_CLAMP
block|,
name|MUL_WIDE_SIGNED
block|,
name|MUL_WIDE_UNSIGNED
block|,
name|IMAD
block|,
name|Dummy
block|,
name|LoadV2
init|=
name|ISD
operator|::
name|FIRST_TARGET_MEMORY_OPCODE
block|,
name|LoadV4
block|,
name|LDGV2
block|,
comment|// LDG.v2
name|LDGV4
block|,
comment|// LDG.v4
name|LDUV2
block|,
comment|// LDU.v2
name|LDUV4
block|,
comment|// LDU.v4
name|StoreV2
block|,
name|StoreV4
block|,
name|LoadParam
block|,
name|LoadParamV2
block|,
name|LoadParamV4
block|,
name|StoreParam
block|,
name|StoreParamV2
block|,
name|StoreParamV4
block|,
name|StoreParamS32
block|,
comment|// to sext and store a<32bit value, not used currently
name|StoreParamU32
block|,
comment|// to zext and store a<32bit value, not used currently
name|StoreRetval
block|,
name|StoreRetvalV2
block|,
name|StoreRetvalV4
block|,
comment|// Texture intrinsics
name|Tex1DFloatS32
block|,
name|Tex1DFloatFloat
block|,
name|Tex1DFloatFloatLevel
block|,
name|Tex1DFloatFloatGrad
block|,
name|Tex1DS32S32
block|,
name|Tex1DS32Float
block|,
name|Tex1DS32FloatLevel
block|,
name|Tex1DS32FloatGrad
block|,
name|Tex1DU32S32
block|,
name|Tex1DU32Float
block|,
name|Tex1DU32FloatLevel
block|,
name|Tex1DU32FloatGrad
block|,
name|Tex1DArrayFloatS32
block|,
name|Tex1DArrayFloatFloat
block|,
name|Tex1DArrayFloatFloatLevel
block|,
name|Tex1DArrayFloatFloatGrad
block|,
name|Tex1DArrayS32S32
block|,
name|Tex1DArrayS32Float
block|,
name|Tex1DArrayS32FloatLevel
block|,
name|Tex1DArrayS32FloatGrad
block|,
name|Tex1DArrayU32S32
block|,
name|Tex1DArrayU32Float
block|,
name|Tex1DArrayU32FloatLevel
block|,
name|Tex1DArrayU32FloatGrad
block|,
name|Tex2DFloatS32
block|,
name|Tex2DFloatFloat
block|,
name|Tex2DFloatFloatLevel
block|,
name|Tex2DFloatFloatGrad
block|,
name|Tex2DS32S32
block|,
name|Tex2DS32Float
block|,
name|Tex2DS32FloatLevel
block|,
name|Tex2DS32FloatGrad
block|,
name|Tex2DU32S32
block|,
name|Tex2DU32Float
block|,
name|Tex2DU32FloatLevel
block|,
name|Tex2DU32FloatGrad
block|,
name|Tex2DArrayFloatS32
block|,
name|Tex2DArrayFloatFloat
block|,
name|Tex2DArrayFloatFloatLevel
block|,
name|Tex2DArrayFloatFloatGrad
block|,
name|Tex2DArrayS32S32
block|,
name|Tex2DArrayS32Float
block|,
name|Tex2DArrayS32FloatLevel
block|,
name|Tex2DArrayS32FloatGrad
block|,
name|Tex2DArrayU32S32
block|,
name|Tex2DArrayU32Float
block|,
name|Tex2DArrayU32FloatLevel
block|,
name|Tex2DArrayU32FloatGrad
block|,
name|Tex3DFloatS32
block|,
name|Tex3DFloatFloat
block|,
name|Tex3DFloatFloatLevel
block|,
name|Tex3DFloatFloatGrad
block|,
name|Tex3DS32S32
block|,
name|Tex3DS32Float
block|,
name|Tex3DS32FloatLevel
block|,
name|Tex3DS32FloatGrad
block|,
name|Tex3DU32S32
block|,
name|Tex3DU32Float
block|,
name|Tex3DU32FloatLevel
block|,
name|Tex3DU32FloatGrad
block|,
name|TexCubeFloatFloat
block|,
name|TexCubeFloatFloatLevel
block|,
name|TexCubeS32Float
block|,
name|TexCubeS32FloatLevel
block|,
name|TexCubeU32Float
block|,
name|TexCubeU32FloatLevel
block|,
name|TexCubeArrayFloatFloat
block|,
name|TexCubeArrayFloatFloatLevel
block|,
name|TexCubeArrayS32Float
block|,
name|TexCubeArrayS32FloatLevel
block|,
name|TexCubeArrayU32Float
block|,
name|TexCubeArrayU32FloatLevel
block|,
name|Tld4R2DFloatFloat
block|,
name|Tld4G2DFloatFloat
block|,
name|Tld4B2DFloatFloat
block|,
name|Tld4A2DFloatFloat
block|,
name|Tld4R2DS64Float
block|,
name|Tld4G2DS64Float
block|,
name|Tld4B2DS64Float
block|,
name|Tld4A2DS64Float
block|,
name|Tld4R2DU64Float
block|,
name|Tld4G2DU64Float
block|,
name|Tld4B2DU64Float
block|,
name|Tld4A2DU64Float
block|,
name|TexUnified1DFloatS32
block|,
name|TexUnified1DFloatFloat
block|,
name|TexUnified1DFloatFloatLevel
block|,
name|TexUnified1DFloatFloatGrad
block|,
name|TexUnified1DS32S32
block|,
name|TexUnified1DS32Float
block|,
name|TexUnified1DS32FloatLevel
block|,
name|TexUnified1DS32FloatGrad
block|,
name|TexUnified1DU32S32
block|,
name|TexUnified1DU32Float
block|,
name|TexUnified1DU32FloatLevel
block|,
name|TexUnified1DU32FloatGrad
block|,
name|TexUnified1DArrayFloatS32
block|,
name|TexUnified1DArrayFloatFloat
block|,
name|TexUnified1DArrayFloatFloatLevel
block|,
name|TexUnified1DArrayFloatFloatGrad
block|,
name|TexUnified1DArrayS32S32
block|,
name|TexUnified1DArrayS32Float
block|,
name|TexUnified1DArrayS32FloatLevel
block|,
name|TexUnified1DArrayS32FloatGrad
block|,
name|TexUnified1DArrayU32S32
block|,
name|TexUnified1DArrayU32Float
block|,
name|TexUnified1DArrayU32FloatLevel
block|,
name|TexUnified1DArrayU32FloatGrad
block|,
name|TexUnified2DFloatS32
block|,
name|TexUnified2DFloatFloat
block|,
name|TexUnified2DFloatFloatLevel
block|,
name|TexUnified2DFloatFloatGrad
block|,
name|TexUnified2DS32S32
block|,
name|TexUnified2DS32Float
block|,
name|TexUnified2DS32FloatLevel
block|,
name|TexUnified2DS32FloatGrad
block|,
name|TexUnified2DU32S32
block|,
name|TexUnified2DU32Float
block|,
name|TexUnified2DU32FloatLevel
block|,
name|TexUnified2DU32FloatGrad
block|,
name|TexUnified2DArrayFloatS32
block|,
name|TexUnified2DArrayFloatFloat
block|,
name|TexUnified2DArrayFloatFloatLevel
block|,
name|TexUnified2DArrayFloatFloatGrad
block|,
name|TexUnified2DArrayS32S32
block|,
name|TexUnified2DArrayS32Float
block|,
name|TexUnified2DArrayS32FloatLevel
block|,
name|TexUnified2DArrayS32FloatGrad
block|,
name|TexUnified2DArrayU32S32
block|,
name|TexUnified2DArrayU32Float
block|,
name|TexUnified2DArrayU32FloatLevel
block|,
name|TexUnified2DArrayU32FloatGrad
block|,
name|TexUnified3DFloatS32
block|,
name|TexUnified3DFloatFloat
block|,
name|TexUnified3DFloatFloatLevel
block|,
name|TexUnified3DFloatFloatGrad
block|,
name|TexUnified3DS32S32
block|,
name|TexUnified3DS32Float
block|,
name|TexUnified3DS32FloatLevel
block|,
name|TexUnified3DS32FloatGrad
block|,
name|TexUnified3DU32S32
block|,
name|TexUnified3DU32Float
block|,
name|TexUnified3DU32FloatLevel
block|,
name|TexUnified3DU32FloatGrad
block|,
name|TexUnifiedCubeFloatFloat
block|,
name|TexUnifiedCubeFloatFloatLevel
block|,
name|TexUnifiedCubeS32Float
block|,
name|TexUnifiedCubeS32FloatLevel
block|,
name|TexUnifiedCubeU32Float
block|,
name|TexUnifiedCubeU32FloatLevel
block|,
name|TexUnifiedCubeArrayFloatFloat
block|,
name|TexUnifiedCubeArrayFloatFloatLevel
block|,
name|TexUnifiedCubeArrayS32Float
block|,
name|TexUnifiedCubeArrayS32FloatLevel
block|,
name|TexUnifiedCubeArrayU32Float
block|,
name|TexUnifiedCubeArrayU32FloatLevel
block|,
name|Tld4UnifiedR2DFloatFloat
block|,
name|Tld4UnifiedG2DFloatFloat
block|,
name|Tld4UnifiedB2DFloatFloat
block|,
name|Tld4UnifiedA2DFloatFloat
block|,
name|Tld4UnifiedR2DS64Float
block|,
name|Tld4UnifiedG2DS64Float
block|,
name|Tld4UnifiedB2DS64Float
block|,
name|Tld4UnifiedA2DS64Float
block|,
name|Tld4UnifiedR2DU64Float
block|,
name|Tld4UnifiedG2DU64Float
block|,
name|Tld4UnifiedB2DU64Float
block|,
name|Tld4UnifiedA2DU64Float
block|,
comment|// Surface intrinsics
name|Suld1DI8Clamp
block|,
name|Suld1DI16Clamp
block|,
name|Suld1DI32Clamp
block|,
name|Suld1DI64Clamp
block|,
name|Suld1DV2I8Clamp
block|,
name|Suld1DV2I16Clamp
block|,
name|Suld1DV2I32Clamp
block|,
name|Suld1DV2I64Clamp
block|,
name|Suld1DV4I8Clamp
block|,
name|Suld1DV4I16Clamp
block|,
name|Suld1DV4I32Clamp
block|,
name|Suld1DArrayI8Clamp
block|,
name|Suld1DArrayI16Clamp
block|,
name|Suld1DArrayI32Clamp
block|,
name|Suld1DArrayI64Clamp
block|,
name|Suld1DArrayV2I8Clamp
block|,
name|Suld1DArrayV2I16Clamp
block|,
name|Suld1DArrayV2I32Clamp
block|,
name|Suld1DArrayV2I64Clamp
block|,
name|Suld1DArrayV4I8Clamp
block|,
name|Suld1DArrayV4I16Clamp
block|,
name|Suld1DArrayV4I32Clamp
block|,
name|Suld2DI8Clamp
block|,
name|Suld2DI16Clamp
block|,
name|Suld2DI32Clamp
block|,
name|Suld2DI64Clamp
block|,
name|Suld2DV2I8Clamp
block|,
name|Suld2DV2I16Clamp
block|,
name|Suld2DV2I32Clamp
block|,
name|Suld2DV2I64Clamp
block|,
name|Suld2DV4I8Clamp
block|,
name|Suld2DV4I16Clamp
block|,
name|Suld2DV4I32Clamp
block|,
name|Suld2DArrayI8Clamp
block|,
name|Suld2DArrayI16Clamp
block|,
name|Suld2DArrayI32Clamp
block|,
name|Suld2DArrayI64Clamp
block|,
name|Suld2DArrayV2I8Clamp
block|,
name|Suld2DArrayV2I16Clamp
block|,
name|Suld2DArrayV2I32Clamp
block|,
name|Suld2DArrayV2I64Clamp
block|,
name|Suld2DArrayV4I8Clamp
block|,
name|Suld2DArrayV4I16Clamp
block|,
name|Suld2DArrayV4I32Clamp
block|,
name|Suld3DI8Clamp
block|,
name|Suld3DI16Clamp
block|,
name|Suld3DI32Clamp
block|,
name|Suld3DI64Clamp
block|,
name|Suld3DV2I8Clamp
block|,
name|Suld3DV2I16Clamp
block|,
name|Suld3DV2I32Clamp
block|,
name|Suld3DV2I64Clamp
block|,
name|Suld3DV4I8Clamp
block|,
name|Suld3DV4I16Clamp
block|,
name|Suld3DV4I32Clamp
block|,
name|Suld1DI8Trap
block|,
name|Suld1DI16Trap
block|,
name|Suld1DI32Trap
block|,
name|Suld1DI64Trap
block|,
name|Suld1DV2I8Trap
block|,
name|Suld1DV2I16Trap
block|,
name|Suld1DV2I32Trap
block|,
name|Suld1DV2I64Trap
block|,
name|Suld1DV4I8Trap
block|,
name|Suld1DV4I16Trap
block|,
name|Suld1DV4I32Trap
block|,
name|Suld1DArrayI8Trap
block|,
name|Suld1DArrayI16Trap
block|,
name|Suld1DArrayI32Trap
block|,
name|Suld1DArrayI64Trap
block|,
name|Suld1DArrayV2I8Trap
block|,
name|Suld1DArrayV2I16Trap
block|,
name|Suld1DArrayV2I32Trap
block|,
name|Suld1DArrayV2I64Trap
block|,
name|Suld1DArrayV4I8Trap
block|,
name|Suld1DArrayV4I16Trap
block|,
name|Suld1DArrayV4I32Trap
block|,
name|Suld2DI8Trap
block|,
name|Suld2DI16Trap
block|,
name|Suld2DI32Trap
block|,
name|Suld2DI64Trap
block|,
name|Suld2DV2I8Trap
block|,
name|Suld2DV2I16Trap
block|,
name|Suld2DV2I32Trap
block|,
name|Suld2DV2I64Trap
block|,
name|Suld2DV4I8Trap
block|,
name|Suld2DV4I16Trap
block|,
name|Suld2DV4I32Trap
block|,
name|Suld2DArrayI8Trap
block|,
name|Suld2DArrayI16Trap
block|,
name|Suld2DArrayI32Trap
block|,
name|Suld2DArrayI64Trap
block|,
name|Suld2DArrayV2I8Trap
block|,
name|Suld2DArrayV2I16Trap
block|,
name|Suld2DArrayV2I32Trap
block|,
name|Suld2DArrayV2I64Trap
block|,
name|Suld2DArrayV4I8Trap
block|,
name|Suld2DArrayV4I16Trap
block|,
name|Suld2DArrayV4I32Trap
block|,
name|Suld3DI8Trap
block|,
name|Suld3DI16Trap
block|,
name|Suld3DI32Trap
block|,
name|Suld3DI64Trap
block|,
name|Suld3DV2I8Trap
block|,
name|Suld3DV2I16Trap
block|,
name|Suld3DV2I32Trap
block|,
name|Suld3DV2I64Trap
block|,
name|Suld3DV4I8Trap
block|,
name|Suld3DV4I16Trap
block|,
name|Suld3DV4I32Trap
block|,
name|Suld1DI8Zero
block|,
name|Suld1DI16Zero
block|,
name|Suld1DI32Zero
block|,
name|Suld1DI64Zero
block|,
name|Suld1DV2I8Zero
block|,
name|Suld1DV2I16Zero
block|,
name|Suld1DV2I32Zero
block|,
name|Suld1DV2I64Zero
block|,
name|Suld1DV4I8Zero
block|,
name|Suld1DV4I16Zero
block|,
name|Suld1DV4I32Zero
block|,
name|Suld1DArrayI8Zero
block|,
name|Suld1DArrayI16Zero
block|,
name|Suld1DArrayI32Zero
block|,
name|Suld1DArrayI64Zero
block|,
name|Suld1DArrayV2I8Zero
block|,
name|Suld1DArrayV2I16Zero
block|,
name|Suld1DArrayV2I32Zero
block|,
name|Suld1DArrayV2I64Zero
block|,
name|Suld1DArrayV4I8Zero
block|,
name|Suld1DArrayV4I16Zero
block|,
name|Suld1DArrayV4I32Zero
block|,
name|Suld2DI8Zero
block|,
name|Suld2DI16Zero
block|,
name|Suld2DI32Zero
block|,
name|Suld2DI64Zero
block|,
name|Suld2DV2I8Zero
block|,
name|Suld2DV2I16Zero
block|,
name|Suld2DV2I32Zero
block|,
name|Suld2DV2I64Zero
block|,
name|Suld2DV4I8Zero
block|,
name|Suld2DV4I16Zero
block|,
name|Suld2DV4I32Zero
block|,
name|Suld2DArrayI8Zero
block|,
name|Suld2DArrayI16Zero
block|,
name|Suld2DArrayI32Zero
block|,
name|Suld2DArrayI64Zero
block|,
name|Suld2DArrayV2I8Zero
block|,
name|Suld2DArrayV2I16Zero
block|,
name|Suld2DArrayV2I32Zero
block|,
name|Suld2DArrayV2I64Zero
block|,
name|Suld2DArrayV4I8Zero
block|,
name|Suld2DArrayV4I16Zero
block|,
name|Suld2DArrayV4I32Zero
block|,
name|Suld3DI8Zero
block|,
name|Suld3DI16Zero
block|,
name|Suld3DI32Zero
block|,
name|Suld3DI64Zero
block|,
name|Suld3DV2I8Zero
block|,
name|Suld3DV2I16Zero
block|,
name|Suld3DV2I32Zero
block|,
name|Suld3DV2I64Zero
block|,
name|Suld3DV4I8Zero
block|,
name|Suld3DV4I16Zero
block|,
name|Suld3DV4I32Zero
block|}
enum|;
block|}
name|class
name|NVPTXSubtarget
decl_stmt|;
comment|//===--------------------------------------------------------------------===//
comment|// TargetLowering Implementation
comment|//===--------------------------------------------------------------------===//
name|class
name|NVPTXTargetLowering
range|:
name|public
name|TargetLowering
block|{
name|public
operator|:
name|explicit
name|NVPTXTargetLowering
argument_list|(
name|NVPTXTargetMachine
operator|&
name|TM
argument_list|)
block|;
name|SDValue
name|LowerOperation
argument_list|(
argument|SDValue Op
argument_list|,
argument|SelectionDAG&DAG
argument_list|)
specifier|const
name|override
block|;
name|SDValue
name|LowerGlobalAddress
argument_list|(
argument|SDValue Op
argument_list|,
argument|SelectionDAG&DAG
argument_list|)
specifier|const
block|;
name|SDValue
name|LowerGlobalAddress
argument_list|(
argument|const GlobalValue *GV
argument_list|,
argument|int64_t Offset
argument_list|,
argument|SelectionDAG&DAG
argument_list|)
specifier|const
block|;
specifier|const
name|char
operator|*
name|getTargetNodeName
argument_list|(
argument|unsigned Opcode
argument_list|)
specifier|const
name|override
block|;
name|bool
name|isTypeSupportedInIntrinsic
argument_list|(
argument|MVT VT
argument_list|)
specifier|const
block|;
name|bool
name|getTgtMemIntrinsic
argument_list|(
argument|IntrinsicInfo&Info
argument_list|,
argument|const CallInst&I
argument_list|,
argument|unsigned Intrinsic
argument_list|)
specifier|const
name|override
block|;
comment|/// isLegalAddressingMode - Return true if the addressing mode represented
comment|/// by AM is legal for this target, for a load/store of the specified type
comment|/// Used to guide target specific optimizations, like loop strength
comment|/// reduction (LoopStrengthReduce.cpp) and memory optimization for
comment|/// address mode (CodeGenPrepare.cpp)
name|bool
name|isLegalAddressingMode
argument_list|(
argument|const AddrMode&AM
argument_list|,
argument|Type *Ty
argument_list|)
specifier|const
name|override
block|;
comment|/// getFunctionAlignment - Return the Log2 alignment of this function.
name|unsigned
name|getFunctionAlignment
argument_list|(
argument|const Function *F
argument_list|)
specifier|const
block|;
name|EVT
name|getSetCCResultType
argument_list|(
argument|LLVMContext&Ctx
argument_list|,
argument|EVT VT
argument_list|)
specifier|const
name|override
block|{
if|if
condition|(
name|VT
operator|.
name|isVector
argument_list|()
condition|)
return|return
name|EVT
operator|::
name|getVectorVT
argument_list|(
name|Ctx
argument_list|,
name|MVT
operator|::
name|i1
argument_list|,
name|VT
operator|.
name|getVectorNumElements
argument_list|()
argument_list|)
return|;
return|return
name|MVT
operator|::
name|i1
return|;
block|}
name|ConstraintType
name|getConstraintType
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Constraint
argument_list|)
decl|const
name|override
decl_stmt|;
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
specifier|const
name|TargetRegisterClass
operator|*
operator|>
name|getRegForInlineAsmConstraint
argument_list|(
argument|const std::string&Constraint
argument_list|,
argument|MVT VT
argument_list|)
specifier|const
name|override
expr_stmt|;
name|SDValue
name|LowerFormalArguments
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|InputArg
operator|>
operator|&
name|Ins
argument_list|,
name|SDLoc
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerCall
argument_list|(
name|CallLoweringInfo
operator|&
name|CLI
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
name|override
decl_stmt|;
name|std
operator|::
name|string
name|getPrototype
argument_list|(
argument|Type *
argument_list|,
argument|const ArgListTy&
argument_list|,
argument|const SmallVectorImpl<ISD::OutputArg>&
argument_list|,
argument|unsigned retAlignment
argument_list|,
argument|const ImmutableCallSite *CS
argument_list|)
specifier|const
expr_stmt|;
name|SDValue
name|LowerReturn
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|OutVals
argument_list|,
name|SDLoc
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|void
name|LowerAsmOperandForConstraint
argument_list|(
name|SDValue
name|Op
argument_list|,
name|std
operator|::
name|string
operator|&
name|Constraint
argument_list|,
name|std
operator|::
name|vector
operator|<
name|SDValue
operator|>
operator|&
name|Ops
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|NVPTXTargetMachine
modifier|*
name|nvTM
decl_stmt|;
comment|// PTX always uses 32-bit shift amounts
name|MVT
name|getScalarShiftAmountTy
argument_list|(
name|EVT
name|LHSTy
argument_list|)
decl|const
name|override
block|{
return|return
name|MVT
operator|::
name|i32
return|;
block|}
name|TargetLoweringBase
operator|::
name|LegalizeTypeAction
name|getPreferredVectorAction
argument_list|(
argument|EVT VT
argument_list|)
specifier|const
name|override
expr_stmt|;
name|bool
name|allowFMA
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|,
name|CodeGenOpt
operator|::
name|Level
name|OptLevel
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isFMAFasterThanFMulAndFAdd
argument_list|(
name|EVT
argument_list|)
decl|const
block|{
return|return
name|true
return|;
block|}
name|private
label|:
specifier|const
name|NVPTXSubtarget
modifier|&
name|nvptxSubtarget
decl_stmt|;
comment|// cache the subtarget here
name|SDValue
name|getExtSymb
argument_list|(
name|SelectionDAG
operator|&
name|DAG
argument_list|,
specifier|const
name|char
operator|*
name|name
argument_list|,
name|int
name|idx
argument_list|,
name|EVT
operator|=
name|MVT
operator|::
name|i32
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|getParamSymbol
argument_list|(
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|int
name|idx
argument_list|,
name|EVT
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|getParamHelpSymbol
parameter_list|(
name|SelectionDAG
modifier|&
name|DAG
parameter_list|,
name|int
name|idx
parameter_list|)
function_decl|;
name|SDValue
name|LowerCONCAT_VECTORS
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerLOAD
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerLOADi1
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerSTORE
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerSTOREi1
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerSTOREVector
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerShiftRightParts
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerShiftLeftParts
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|void
name|ReplaceNodeResults
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|Results
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|PerformDAGCombine
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
name|override
decl_stmt|;
name|unsigned
name|getArgumentAlignment
argument_list|(
name|SDValue
name|Callee
argument_list|,
specifier|const
name|ImmutableCallSite
operator|*
name|CS
argument_list|,
name|Type
operator|*
name|Ty
argument_list|,
name|unsigned
name|Idx
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// NVPTXISELLOWERING_H
end_comment

end_unit

