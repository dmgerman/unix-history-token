begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- NVPTXTargetTransformInfo.h - NVPTX specific TTI ---------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|/// \file
end_comment

begin_comment
comment|/// This file a TargetTransformInfo::Concept conforming object specific to the
end_comment

begin_comment
comment|/// NVPTX target machine. It uses the target's detailed information to
end_comment

begin_comment
comment|/// provide more precise answers to certain TTI queries, while letting the
end_comment

begin_comment
comment|/// target independent and default TTI implementations handle the rest.
end_comment

begin_comment
comment|///
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_NVPTX_NVPTXTARGETTRANSFORMINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_NVPTX_NVPTXTARGETTRANSFORMINFO_H
end_define

begin_include
include|#
directive|include
file|"NVPTX.h"
end_include

begin_include
include|#
directive|include
file|"NVPTXTargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Analysis/TargetTransformInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/BasicTTIImpl.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|NVPTXTTIImpl
range|:
name|public
name|BasicTTIImplBase
operator|<
name|NVPTXTTIImpl
operator|>
block|{
typedef|typedef
name|BasicTTIImplBase
operator|<
name|NVPTXTTIImpl
operator|>
name|BaseT
expr_stmt|;
typedef|typedef
name|TargetTransformInfo
name|TTI
typedef|;
name|friend
name|BaseT
decl_stmt|;
specifier|const
name|NVPTXSubtarget
modifier|*
name|ST
decl_stmt|;
specifier|const
name|NVPTXTargetLowering
modifier|*
name|TLI
decl_stmt|;
specifier|const
name|NVPTXSubtarget
operator|*
name|getST
argument_list|()
specifier|const
block|{
return|return
name|ST
return|;
block|}
empty_stmt|;
specifier|const
name|NVPTXTargetLowering
operator|*
name|getTLI
argument_list|()
specifier|const
block|{
return|return
name|TLI
return|;
block|}
empty_stmt|;
name|public
label|:
name|explicit
name|NVPTXTTIImpl
argument_list|(
specifier|const
name|NVPTXTargetMachine
operator|*
name|TM
argument_list|)
operator|:
name|BaseT
argument_list|(
name|TM
argument_list|)
operator|,
name|ST
argument_list|(
name|TM
operator|->
name|getSubtargetImpl
argument_list|()
argument_list|)
operator|,
name|TLI
argument_list|(
argument|ST->getTargetLowering()
argument_list|)
block|{}
comment|// Provide value semantics. MSVC requires that we spell all of these out.
name|NVPTXTTIImpl
argument_list|(
specifier|const
name|NVPTXTTIImpl
operator|&
name|Arg
argument_list|)
operator|:
name|BaseT
argument_list|(
name|static_cast
operator|<
specifier|const
name|BaseT
operator|&
operator|>
operator|(
name|Arg
operator|)
argument_list|)
operator|,
name|ST
argument_list|(
name|Arg
operator|.
name|ST
argument_list|)
operator|,
name|TLI
argument_list|(
argument|Arg.TLI
argument_list|)
block|{}
name|NVPTXTTIImpl
argument_list|(
name|NVPTXTTIImpl
operator|&&
name|Arg
argument_list|)
operator|:
name|BaseT
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|static_cast
operator|<
name|BaseT
operator|&
operator|>
operator|(
name|Arg
operator|)
argument_list|)
argument_list|)
operator|,
name|ST
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|Arg
operator|.
name|ST
argument_list|)
argument_list|)
operator|,
name|TLI
argument_list|(
argument|std::move(Arg.TLI)
argument_list|)
block|{}
name|NVPTXTTIImpl
operator|&
name|operator
operator|=
operator|(
specifier|const
name|NVPTXTTIImpl
operator|&
name|RHS
operator|)
block|{
name|BaseT
operator|::
name|operator
operator|=
operator|(
name|static_cast
operator|<
specifier|const
name|BaseT
operator|&
operator|>
operator|(
name|RHS
operator|)
operator|)
block|;
name|ST
operator|=
name|RHS
operator|.
name|ST
block|;
name|TLI
operator|=
name|RHS
operator|.
name|TLI
block|;
return|return
operator|*
name|this
return|;
block|}
name|NVPTXTTIImpl
modifier|&
name|operator
init|=
operator|(
name|NVPTXTTIImpl
operator|&&
name|RHS
operator|)
block|{
name|BaseT
operator|::
name|operator
operator|=
operator|(
name|std
operator|::
name|move
argument_list|(
name|static_cast
operator|<
name|BaseT
operator|&
operator|>
operator|(
name|RHS
operator|)
argument_list|)
operator|)
block|;
name|ST
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|ST
argument_list|)
block|;
name|TLI
operator|=
name|std
operator|::
name|move
argument_list|(
name|RHS
operator|.
name|TLI
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|bool
name|hasBranchDivergence
parameter_list|()
block|{
return|return
name|true
return|;
block|}
name|bool
name|isSourceOfDivergence
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|unsigned
name|getArithmeticInstrCost
argument_list|(
name|unsigned
name|Opcode
argument_list|,
name|Type
operator|*
name|Ty
argument_list|,
name|TTI
operator|::
name|OperandValueKind
name|Opd1Info
operator|=
name|TTI
operator|::
name|OK_AnyValue
argument_list|,
name|TTI
operator|::
name|OperandValueKind
name|Opd2Info
operator|=
name|TTI
operator|::
name|OK_AnyValue
argument_list|,
name|TTI
operator|::
name|OperandValueProperties
name|Opd1PropInfo
operator|=
name|TTI
operator|::
name|OP_None
argument_list|,
name|TTI
operator|::
name|OperandValueProperties
name|Opd2PropInfo
operator|=
name|TTI
operator|::
name|OP_None
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

