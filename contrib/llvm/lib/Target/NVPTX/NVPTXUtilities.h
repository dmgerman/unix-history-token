begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- NVPTXUtilities - Utilities -----------------------------*- C++ -*-====//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the declaration of the NVVM specific utility functions.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_NVPTX_NVPTXUTILITIES_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_NVPTX_NVPTXUTILITIES_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/Function.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/GlobalVariable.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/IntrinsicInst.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Value.h"
end_include

begin_include
include|#
directive|include
file|<cstdarg>
end_include

begin_include
include|#
directive|include
file|<set>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
define|#
directive|define
name|NVCL_IMAGE2D_READONLY_FUNCNAME
value|"__is_image2D_readonly"
define|#
directive|define
name|NVCL_IMAGE3D_READONLY_FUNCNAME
value|"__is_image3D_readonly"
name|void
name|clearAnnotationCache
argument_list|(
specifier|const
name|llvm
operator|::
name|Module
operator|*
argument_list|)
decl_stmt|;
name|bool
name|findOneNVVMAnnotation
argument_list|(
specifier|const
name|llvm
operator|::
name|GlobalValue
operator|*
argument_list|,
name|std
operator|::
name|string
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|findAllNVVMAnnotation
argument_list|(
specifier|const
name|llvm
operator|::
name|GlobalValue
operator|*
argument_list|,
name|std
operator|::
name|string
argument_list|,
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isTexture
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isSurface
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isSampler
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isImage
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isImageReadOnly
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isImageWriteOnly
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isImageReadWrite
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isManaged
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
decl_stmt|;
name|std
operator|::
name|string
name|getTextureName
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|getSurfaceName
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|getSamplerName
argument_list|(
specifier|const
name|llvm
operator|::
name|Value
operator|&
argument_list|)
expr_stmt|;
name|bool
name|getMaxNTIDx
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|getMaxNTIDy
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|getMaxNTIDz
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|getReqNTIDx
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|getReqNTIDy
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|getReqNTIDz
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|getMinCTASm
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isKernelFunction
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|)
decl_stmt|;
name|bool
name|getAlign
argument_list|(
specifier|const
name|llvm
operator|::
name|Function
operator|&
argument_list|,
name|unsigned
name|index
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|getAlign
argument_list|(
specifier|const
name|llvm
operator|::
name|CallInst
operator|&
argument_list|,
name|unsigned
name|index
argument_list|,
name|unsigned
operator|&
argument_list|)
decl_stmt|;
name|bool
name|isBarrierIntrinsic
argument_list|(
name|llvm
operator|::
name|Intrinsic
operator|::
name|ID
argument_list|)
decl_stmt|;
comment|/// make_vector - Helper function which is useful for building temporary vectors
comment|/// to pass into type construction of CallInst ctors.  This turns a null
comment|/// terminated list of pointers (or other value types) into a real live vector.
comment|///
name|template
operator|<
name|typename
name|T
operator|>
specifier|inline
name|std
operator|::
name|vector
operator|<
name|T
operator|>
name|make_vector
argument_list|(
argument|T A
argument_list|,
argument|...
argument_list|)
block|{
name|va_list
name|Args
block|;
name|va_start
argument_list|(
name|Args
argument_list|,
name|A
argument_list|)
block|;
name|std
operator|::
name|vector
operator|<
name|T
operator|>
name|Result
block|;
name|Result
operator|.
name|push_back
argument_list|(
name|A
argument_list|)
block|;
while|while
condition|(
name|T
name|Val
init|=
name|va_arg
argument_list|(
name|Args
argument_list|,
name|T
argument_list|)
condition|)
name|Result
operator|.
name|push_back
argument_list|(
name|Val
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|Args
argument_list|)
expr_stmt|;
return|return
name|Result
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|bool
name|isMemorySpaceTransferIntrinsic
argument_list|(
name|Intrinsic
operator|::
name|ID
name|id
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|const
name|Value
modifier|*
name|skipPointerTransfer
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|,
name|bool
name|ignore_GEP_indices
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|const
name|Value
modifier|*
name|skipPointerTransfer
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|,
name|std
operator|::
name|set
operator|<
specifier|const
name|Value
operator|*
operator|>
operator|&
name|processed
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|BasicBlock
modifier|*
name|getParentBlock
parameter_list|(
name|Value
modifier|*
name|v
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Function
modifier|*
name|getParentFunction
parameter_list|(
name|Value
modifier|*
name|v
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dumpBlock
parameter_list|(
name|Value
modifier|*
name|v
parameter_list|,
name|char
modifier|*
name|blockName
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|Instruction
modifier|*
name|getInst
parameter_list|(
name|Value
modifier|*
name|base
parameter_list|,
name|char
modifier|*
name|instName
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dumpInst
parameter_list|(
name|Value
modifier|*
name|base
parameter_list|,
name|char
modifier|*
name|instName
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|dumpInstRec
argument_list|(
name|Value
operator|*
name|v
argument_list|,
name|std
operator|::
name|set
operator|<
name|Instruction
operator|*
operator|>
operator|*
name|visited
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|dumpInstRec
parameter_list|(
name|Value
modifier|*
name|v
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dumpParent
parameter_list|(
name|Value
modifier|*
name|v
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

