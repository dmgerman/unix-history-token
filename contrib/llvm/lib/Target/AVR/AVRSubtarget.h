begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- AVRSubtarget.h - Define Subtarget for the AVR -----------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the AVR specific subclass of TargetSubtargetInfo.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_AVR_SUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_AVR_SUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"llvm/IR/DataLayout.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_include
include|#
directive|include
file|"AVRFrameLowering.h"
end_include

begin_include
include|#
directive|include
file|"AVRISelLowering.h"
end_include

begin_include
include|#
directive|include
file|"AVRInstrInfo.h"
end_include

begin_include
include|#
directive|include
file|"AVRSelectionDAGInfo.h"
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"AVRGenSubtargetInfo.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// A specific AVR target MCU.
name|class
name|AVRSubtarget
range|:
name|public
name|AVRGenSubtargetInfo
block|{
name|public
operator|:
comment|//! Creates an AVR subtarget.
comment|//! \param TT  The target triple.
comment|//! \param CPU The CPU to target.
comment|//! \param FS  The feature string.
comment|//! \param TM  The target machine.
name|AVRSubtarget
argument_list|(
specifier|const
name|Triple
operator|&
name|TT
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|CPU
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|FS
argument_list|,
name|AVRTargetMachine
operator|&
name|TM
argument_list|)
block|;
specifier|const
name|AVRInstrInfo
operator|*
name|getInstrInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrInfo
return|;
block|}
specifier|const
name|TargetFrameLowering
operator|*
name|getFrameLowering
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|FrameLowering
return|;
block|}
specifier|const
name|AVRTargetLowering
operator|*
name|getTargetLowering
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|TLInfo
return|;
block|}
specifier|const
name|AVRSelectionDAGInfo
operator|*
name|getSelectionDAGInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|TSInfo
return|;
block|}
specifier|const
name|AVRRegisterInfo
operator|*
name|getRegisterInfo
argument_list|()
specifier|const
name|override
block|{
return|return
operator|&
name|InstrInfo
operator|.
name|getRegisterInfo
argument_list|()
return|;
block|}
comment|/// Parses a subtarget feature string, setting appropriate options.
comment|/// \note Definition of function is auto generated by `tblgen`.
name|void
name|ParseSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
comment|// Subtarget feature getters.
comment|// See AVR.td for details.
name|bool
name|hasSRAM
argument_list|()
specifier|const
block|{
return|return
name|m_hasSRAM
return|;
block|}
name|bool
name|hasJMPCALL
argument_list|()
specifier|const
block|{
return|return
name|m_hasJMPCALL
return|;
block|}
name|bool
name|hasIJMPCALL
argument_list|()
specifier|const
block|{
return|return
name|m_hasIJMPCALL
return|;
block|}
name|bool
name|hasEIJMPCALL
argument_list|()
specifier|const
block|{
return|return
name|m_hasEIJMPCALL
return|;
block|}
name|bool
name|hasADDSUBIW
argument_list|()
specifier|const
block|{
return|return
name|m_hasADDSUBIW
return|;
block|}
name|bool
name|hasSmallStack
argument_list|()
specifier|const
block|{
return|return
name|m_hasSmallStack
return|;
block|}
name|bool
name|hasMOVW
argument_list|()
specifier|const
block|{
return|return
name|m_hasMOVW
return|;
block|}
name|bool
name|hasLPM
argument_list|()
specifier|const
block|{
return|return
name|m_hasLPM
return|;
block|}
name|bool
name|hasLPMX
argument_list|()
specifier|const
block|{
return|return
name|m_hasLPMX
return|;
block|}
name|bool
name|hasELPM
argument_list|()
specifier|const
block|{
return|return
name|m_hasELPM
return|;
block|}
name|bool
name|hasELPMX
argument_list|()
specifier|const
block|{
return|return
name|m_hasELPMX
return|;
block|}
name|bool
name|hasSPM
argument_list|()
specifier|const
block|{
return|return
name|m_hasSPM
return|;
block|}
name|bool
name|hasSPMX
argument_list|()
specifier|const
block|{
return|return
name|m_hasSPMX
return|;
block|}
name|bool
name|hasDES
argument_list|()
specifier|const
block|{
return|return
name|m_hasDES
return|;
block|}
name|bool
name|supportsRMW
argument_list|()
specifier|const
block|{
return|return
name|m_supportsRMW
return|;
block|}
name|bool
name|supportsMultiplication
argument_list|()
specifier|const
block|{
return|return
name|m_supportsMultiplication
return|;
block|}
name|bool
name|hasBREAK
argument_list|()
specifier|const
block|{
return|return
name|m_hasBREAK
return|;
block|}
name|bool
name|hasTinyEncoding
argument_list|()
specifier|const
block|{
return|return
name|m_hasTinyEncoding
return|;
block|}
comment|/// Gets the ELF architecture for the e_flags field
comment|/// of an ELF object file.
name|unsigned
name|getELFArch
argument_list|()
specifier|const
block|{
name|assert
argument_list|(
name|ELFArch
operator|!=
literal|0
operator|&&
literal|"every device must have an associate ELF architecture"
argument_list|)
block|;
return|return
name|ELFArch
return|;
block|}
name|private
operator|:
name|AVRInstrInfo
name|InstrInfo
block|;
name|AVRFrameLowering
name|FrameLowering
block|;
name|AVRTargetLowering
name|TLInfo
block|;
name|AVRSelectionDAGInfo
name|TSInfo
block|;
comment|// Subtarget feature settings
comment|// See AVR.td for details.
name|bool
name|m_hasSRAM
block|;
name|bool
name|m_hasJMPCALL
block|;
name|bool
name|m_hasIJMPCALL
block|;
name|bool
name|m_hasEIJMPCALL
block|;
name|bool
name|m_hasADDSUBIW
block|;
name|bool
name|m_hasSmallStack
block|;
name|bool
name|m_hasMOVW
block|;
name|bool
name|m_hasLPM
block|;
name|bool
name|m_hasLPMX
block|;
name|bool
name|m_hasELPM
block|;
name|bool
name|m_hasELPMX
block|;
name|bool
name|m_hasSPM
block|;
name|bool
name|m_hasSPMX
block|;
name|bool
name|m_hasDES
block|;
name|bool
name|m_supportsRMW
block|;
name|bool
name|m_supportsMultiplication
block|;
name|bool
name|m_hasBREAK
block|;
name|bool
name|m_hasTinyEncoding
block|;
comment|/// The ELF e_flags architecture.
name|unsigned
name|ELFArch
block|;
comment|// Dummy member, used by FeatureSet's. We cannot have a SubtargetFeature with
comment|// no variable, so we instead bind pseudo features to this variable.
name|bool
name|m_FeatureSetDummy
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_AVR_SUBTARGET_H
end_comment

end_unit

