begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SparcInstPrinter.h - Convert Sparc MCInst to assembly syntax ------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class prints an Sparc MCInst to a .s file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_SPARC_INSTPRINTER_SPARCINSTPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_SPARC_INSTPRINTER_SPARCINSTPRINTER_H
end_define

begin_include
include|#
directive|include
file|"llvm/MC/MCInstPrinter.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCSubtargetInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCOperand
decl_stmt|;
name|class
name|SparcInstPrinter
range|:
name|public
name|MCInstPrinter
block|{
specifier|const
name|MCSubtargetInfo
operator|&
name|STI
block|;
name|public
operator|:
name|SparcInstPrinter
argument_list|(
specifier|const
name|MCAsmInfo
operator|&
name|MAI
argument_list|,
specifier|const
name|MCInstrInfo
operator|&
name|MII
argument_list|,
specifier|const
name|MCRegisterInfo
operator|&
name|MRI
argument_list|,
specifier|const
name|MCSubtargetInfo
operator|&
name|sti
argument_list|)
operator|:
name|MCInstPrinter
argument_list|(
name|MAI
argument_list|,
name|MII
argument_list|,
name|MRI
argument_list|)
block|,
name|STI
argument_list|(
argument|sti
argument_list|)
block|{}
name|void
name|printRegName
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|unsigned RegNo
argument_list|)
specifier|const
name|override
block|;
name|void
name|printInst
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|StringRef Annot
argument_list|)
name|override
block|;
name|bool
name|printSparcAliasInstr
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|OS
argument_list|)
block|;
name|bool
name|isV9
argument_list|()
specifier|const
block|;
comment|// Autogenerated by tblgen.
name|void
name|printInstruction
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
name|bool
name|printAliasInstr
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
name|void
name|printCustomAliasOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpIdx
argument_list|,
argument|unsigned PrintMethodIdx
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getRegisterName
argument_list|(
argument|unsigned RegNo
argument_list|)
block|;
name|void
name|printOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&OS
argument_list|)
block|;
name|void
name|printMemOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&OS
argument_list|,
argument|const char *Modifier = nullptr
argument_list|)
block|;
name|void
name|printCCOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&OS
argument_list|)
block|;
name|bool
name|printGetPCX
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&OS
argument_list|)
block|;  }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

