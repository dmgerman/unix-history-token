begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SparcISelLowering.h - Sparc DAG Lowering Interface ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the interfaces that Sparc uses to lower LLVM code into a
end_comment

begin_comment
comment|// selection DAG.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_SPARC_SPARCISELLOWERING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_SPARC_SPARCISELLOWERING_H
end_define

begin_include
include|#
directive|include
file|"Sparc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|SparcSubtarget
decl_stmt|;
name|namespace
name|SPISD
block|{
enum|enum
name|NodeType
enum|:
name|unsigned
block|{
name|FIRST_NUMBER
init|=
name|ISD
operator|::
name|BUILTIN_OP_END
block|,
name|CMPICC
block|,
comment|// Compare two GPR operands, set icc+xcc.
name|CMPFCC
block|,
comment|// Compare two FP operands, set fcc.
name|BRICC
block|,
comment|// Branch to dest on icc condition
name|BRXCC
block|,
comment|// Branch to dest on xcc condition (64-bit only).
name|BRFCC
block|,
comment|// Branch to dest on fcc condition
name|SELECT_ICC
block|,
comment|// Select between two values using the current ICC flags.
name|SELECT_XCC
block|,
comment|// Select between two values using the current XCC flags.
name|SELECT_FCC
block|,
comment|// Select between two values using the current FCC flags.
name|EH_SJLJ_SETJMP
block|,
comment|// builtin setjmp operation
name|EH_SJLJ_LONGJMP
block|,
comment|// builtin longjmp operation
name|Hi
block|,
name|Lo
block|,
comment|// Hi/Lo operations, typically on a global address.
name|FTOI
block|,
comment|// FP to Int within a FP register.
name|ITOF
block|,
comment|// Int to FP within a FP register.
name|FTOX
block|,
comment|// FP to Int64 within a FP register.
name|XTOF
block|,
comment|// Int64 to FP within a FP register.
name|CALL
block|,
comment|// A call instruction.
name|RET_FLAG
block|,
comment|// Return with a flag operand.
name|GLOBAL_BASE_REG
block|,
comment|// Global base reg for PIC.
name|FLUSHW
block|,
comment|// FLUSH register windows to stack.
name|TLS_ADD
block|,
comment|// For Thread Local Storage (TLS).
name|TLS_LD
block|,
name|TLS_CALL
block|}
enum|;
block|}
name|class
name|SparcTargetLowering
range|:
name|public
name|TargetLowering
block|{
specifier|const
name|SparcSubtarget
operator|*
name|Subtarget
block|;
name|public
operator|:
name|SparcTargetLowering
argument_list|(
specifier|const
name|TargetMachine
operator|&
name|TM
argument_list|,
specifier|const
name|SparcSubtarget
operator|&
name|STI
argument_list|)
block|;
name|SDValue
name|LowerOperation
argument_list|(
argument|SDValue Op
argument_list|,
argument|SelectionDAG&DAG
argument_list|)
specifier|const
name|override
block|;
name|bool
name|useSoftFloat
argument_list|()
specifier|const
name|override
block|;
comment|/// computeKnownBitsForTargetNode - Determine which of the bits specified
comment|/// in Mask are known to be either zero or one and return them in the
comment|/// KnownZero/KnownOne bitsets.
name|void
name|computeKnownBitsForTargetNode
argument_list|(
argument|const SDValue Op
argument_list|,
argument|KnownBits&Known
argument_list|,
argument|const APInt&DemandedElts
argument_list|,
argument|const SelectionDAG&DAG
argument_list|,
argument|unsigned Depth =
literal|0
argument_list|)
specifier|const
name|override
block|;
name|MachineBasicBlock
operator|*
name|EmitInstrWithCustomInserter
argument_list|(
argument|MachineInstr&MI
argument_list|,
argument|MachineBasicBlock *MBB
argument_list|)
specifier|const
name|override
block|;
specifier|const
name|char
operator|*
name|getTargetNodeName
argument_list|(
argument|unsigned Opcode
argument_list|)
specifier|const
name|override
block|;
name|ConstraintType
name|getConstraintType
argument_list|(
argument|StringRef Constraint
argument_list|)
specifier|const
name|override
block|;
name|ConstraintWeight
name|getSingleConstraintMatchWeight
argument_list|(
argument|AsmOperandInfo&info
argument_list|,
argument|const char *constraint
argument_list|)
specifier|const
name|override
block|;
name|void
name|LowerAsmOperandForConstraint
argument_list|(
argument|SDValue Op
argument_list|,
argument|std::string&Constraint
argument_list|,
argument|std::vector<SDValue>&Ops
argument_list|,
argument|SelectionDAG&DAG
argument_list|)
specifier|const
name|override
block|;
name|unsigned
name|getInlineAsmMemConstraint
argument_list|(
argument|StringRef ConstraintCode
argument_list|)
specifier|const
name|override
block|{
if|if
condition|(
name|ConstraintCode
operator|==
literal|"o"
condition|)
return|return
name|InlineAsm
operator|::
name|Constraint_o
return|;
return|return
name|TargetLowering
operator|::
name|getInlineAsmMemConstraint
argument_list|(
name|ConstraintCode
argument_list|)
return|;
block|}
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
specifier|const
name|TargetRegisterClass
operator|*
operator|>
name|getRegForInlineAsmConstraint
argument_list|(
argument|const TargetRegisterInfo *TRI
argument_list|,
argument|StringRef Constraint
argument_list|,
argument|MVT VT
argument_list|)
specifier|const
name|override
expr_stmt|;
name|bool
name|isOffsetFoldingLegal
argument_list|(
specifier|const
name|GlobalAddressSDNode
operator|*
name|GA
argument_list|)
decl|const
name|override
decl_stmt|;
name|MVT
name|getScalarShiftAmountTy
argument_list|(
specifier|const
name|DataLayout
operator|&
argument_list|,
name|EVT
argument_list|)
decl|const
name|override
block|{
return|return
name|MVT
operator|::
name|i32
return|;
block|}
name|unsigned
name|getRegisterByName
argument_list|(
specifier|const
name|char
operator|*
name|RegName
argument_list|,
name|EVT
name|VT
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
comment|/// If a physical register, this returns the register that receives the
comment|/// exception address on entry to an EH pad.
name|unsigned
name|getExceptionPointerRegister
argument_list|(
specifier|const
name|Constant
operator|*
name|PersonalityFn
argument_list|)
decl|const
name|override
block|{
return|return
name|SP
operator|::
name|I0
return|;
block|}
comment|/// If a physical register, this returns the register that receives the
comment|/// exception typeid on entry to a landing pad.
name|unsigned
name|getExceptionSelectorRegister
argument_list|(
specifier|const
name|Constant
operator|*
name|PersonalityFn
argument_list|)
decl|const
name|override
block|{
return|return
name|SP
operator|::
name|I1
return|;
block|}
comment|/// Override to support customized stack guard loading.
name|bool
name|useLoadStackGuardNode
argument_list|()
specifier|const
name|override
expr_stmt|;
name|void
name|insertSSPDeclarations
argument_list|(
name|Module
operator|&
name|M
argument_list|)
decl|const
name|override
decl_stmt|;
comment|/// getSetCCResultType - Return the ISD::SETCC ValueType
name|EVT
name|getSetCCResultType
argument_list|(
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
name|LLVMContext
operator|&
name|Context
argument_list|,
name|EVT
name|VT
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerFormalArguments
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|InputArg
operator|>
operator|&
name|Ins
argument_list|,
specifier|const
name|SDLoc
operator|&
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerFormalArguments_32
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|InputArg
operator|>
operator|&
name|Ins
argument_list|,
specifier|const
name|SDLoc
operator|&
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerFormalArguments_64
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|InputArg
operator|>
operator|&
name|Ins
argument_list|,
specifier|const
name|SDLoc
operator|&
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerCall
argument_list|(
name|TargetLowering
operator|::
name|CallLoweringInfo
operator|&
name|CLI
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerCall_32
argument_list|(
name|TargetLowering
operator|::
name|CallLoweringInfo
operator|&
name|CLI
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerCall_64
argument_list|(
name|TargetLowering
operator|::
name|CallLoweringInfo
operator|&
name|CLI
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerReturn
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|OutVals
argument_list|,
specifier|const
name|SDLoc
operator|&
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerReturn_32
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|IsVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|OutVals
argument_list|,
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerReturn_64
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|IsVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|OutVals
argument_list|,
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerGlobalAddress
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerGlobalTLSAddress
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerConstantPool
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerBlockAddress
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerEH_SJLJ_SETJMP
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
specifier|const
name|SparcTargetLowering
operator|&
name|TLI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerEH_SJLJ_LONGJMP
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
specifier|const
name|SparcTargetLowering
operator|&
name|TLI
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getSRetArgSize
argument_list|(
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SDValue
name|Callee
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|withTargetFlags
argument_list|(
name|SDValue
name|Op
argument_list|,
name|unsigned
name|TF
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|makeHiLoPair
argument_list|(
name|SDValue
name|Op
argument_list|,
name|unsigned
name|HiTF
argument_list|,
name|unsigned
name|LoTF
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|makeAddress
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerF128_LibCallArg
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|ArgListTy
operator|&
name|Args
argument_list|,
name|SDValue
name|Arg
argument_list|,
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerF128Op
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
specifier|const
name|char
operator|*
name|LibFuncName
argument_list|,
name|unsigned
name|numArgs
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerF128Compare
argument_list|(
name|SDValue
name|LHS
argument_list|,
name|SDValue
name|RHS
argument_list|,
name|unsigned
operator|&
name|SPCC
argument_list|,
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerINTRINSIC_WO_CHAIN
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|bool
name|ShouldShrinkFPConstant
argument_list|(
name|EVT
name|VT
argument_list|)
decl|const
name|override
block|{
comment|// Do not shrink FP constpool if VT == MVT::f128.
comment|// (ldd, call _Q_fdtoq) is more expensive than two ldds.
return|return
name|VT
operator|!=
name|MVT
operator|::
name|f128
return|;
block|}
name|bool
name|shouldInsertFencesForAtomic
argument_list|(
specifier|const
name|Instruction
operator|*
name|I
argument_list|)
decl|const
name|override
block|{
comment|// FIXME: We insert fences for each atomics and generate
comment|// sub-optimal code for PSO/TSO. (Approximately nobody uses any
comment|// mode but TSO, which makes this even more silly)
return|return
name|true
return|;
block|}
name|AtomicExpansionKind
name|shouldExpandAtomicRMWInIR
argument_list|(
name|AtomicRMWInst
operator|*
name|AI
argument_list|)
decl|const
name|override
decl_stmt|;
name|void
name|ReplaceNodeResults
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|Results
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|expandSelectCC
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|BROpcode
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitEHSjLjSetJmp
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|MBB
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitEHSjLjLongJmp
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|MBB
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// SPARC_ISELLOWERING_H
end_comment

end_unit

