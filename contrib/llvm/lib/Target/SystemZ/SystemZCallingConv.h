begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SystemZCallingConv.h - Calling conventions for SystemZ --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_SYSTEMZ_SYSTEMZCALLINGCONV_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_SYSTEMZ_SYSTEMZCALLINGCONV_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/CallingConvLower.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCRegisterInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|SystemZ
block|{
specifier|const
name|unsigned
name|NumArgGPRs
init|=
literal|5
decl_stmt|;
specifier|extern
specifier|const
name|MCPhysReg
name|ArgGPRs
index|[
name|NumArgGPRs
index|]
decl_stmt|;
specifier|const
name|unsigned
name|NumArgFPRs
init|=
literal|4
decl_stmt|;
specifier|extern
specifier|const
name|MCPhysReg
name|ArgFPRs
index|[
name|NumArgFPRs
index|]
decl_stmt|;
block|}
comment|// end namespace SystemZ
name|class
name|SystemZCCState
range|:
name|public
name|CCState
block|{
name|private
operator|:
comment|/// Records whether the value was a fixed argument.
comment|/// See ISD::OutputArg::IsFixed.
name|SmallVector
operator|<
name|bool
block|,
literal|4
operator|>
name|ArgIsFixed
block|;
comment|/// Records whether the value was widened from a short vector type.
name|SmallVector
operator|<
name|bool
block|,
literal|4
operator|>
name|ArgIsShortVector
block|;
comment|// Check whether ArgVT is a short vector type.
name|bool
name|IsShortVectorType
argument_list|(
argument|EVT ArgVT
argument_list|)
block|{
return|return
name|ArgVT
operator|.
name|isVector
argument_list|()
operator|&&
name|ArgVT
operator|.
name|getStoreSize
argument_list|()
operator|<=
literal|8
return|;
block|}
name|public
operator|:
name|SystemZCCState
argument_list|(
argument|CallingConv::ID CC
argument_list|,
argument|bool isVarArg
argument_list|,
argument|MachineFunction&MF
argument_list|,
argument|SmallVectorImpl<CCValAssign>&locs
argument_list|,
argument|LLVMContext&C
argument_list|)
operator|:
name|CCState
argument_list|(
argument|CC
argument_list|,
argument|isVarArg
argument_list|,
argument|MF
argument_list|,
argument|locs
argument_list|,
argument|C
argument_list|)
block|{}
name|void
name|AnalyzeFormalArguments
argument_list|(
argument|const SmallVectorImpl<ISD::InputArg>&Ins
argument_list|,
argument|CCAssignFn Fn
argument_list|)
block|{
comment|// Formal arguments are always fixed.
name|ArgIsFixed
operator|.
name|clear
argument_list|()
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Ins
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ArgIsFixed
operator|.
name|push_back
argument_list|(
name|true
argument_list|)
expr_stmt|;
comment|// Record whether the call operand was a short vector.
name|ArgIsShortVector
operator|.
name|clear
argument_list|()
block|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Ins
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ArgIsShortVector
operator|.
name|push_back
argument_list|(
name|IsShortVectorType
argument_list|(
name|Ins
index|[
name|i
index|]
operator|.
name|ArgVT
argument_list|)
argument_list|)
expr_stmt|;
name|CCState
operator|::
name|AnalyzeFormalArguments
argument_list|(
name|Ins
argument_list|,
name|Fn
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|AnalyzeCallOperands
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
name|CCAssignFn
name|Fn
argument_list|)
block|{
comment|// Record whether the call operand was a fixed argument.
name|ArgIsFixed
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Outs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ArgIsFixed
operator|.
name|push_back
argument_list|(
name|Outs
index|[
name|i
index|]
operator|.
name|IsFixed
argument_list|)
expr_stmt|;
comment|// Record whether the call operand was a short vector.
name|ArgIsShortVector
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Outs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ArgIsShortVector
operator|.
name|push_back
argument_list|(
name|IsShortVectorType
argument_list|(
name|Outs
index|[
name|i
index|]
operator|.
name|ArgVT
argument_list|)
argument_list|)
expr_stmt|;
name|CCState
operator|::
name|AnalyzeCallOperands
argument_list|(
name|Outs
argument_list|,
name|Fn
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// This version of AnalyzeCallOperands in the base class is not usable
end_comment

begin_comment
comment|// since we must provide a means of accessing ISD::OutputArg::IsFixed.
end_comment

begin_decl_stmt
name|void
name|AnalyzeCallOperands
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|MVT
operator|>
operator|&
name|Outs
argument_list|,
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|ArgFlagsTy
operator|>
operator|&
name|Flags
argument_list|,
name|CCAssignFn
name|Fn
argument_list|)
init|=
name|delete
decl_stmt|;
end_decl_stmt

begin_function
name|bool
name|IsFixed
parameter_list|(
name|unsigned
name|ValNo
parameter_list|)
block|{
return|return
name|ArgIsFixed
index|[
name|ValNo
index|]
return|;
block|}
end_function

begin_function
name|bool
name|IsShortVector
parameter_list|(
name|unsigned
name|ValNo
parameter_list|)
block|{
return|return
name|ArgIsShortVector
index|[
name|ValNo
index|]
return|;
block|}
end_function

begin_comment
unit|};
comment|// Handle i128 argument types.  These need to be passed by implicit
end_comment

begin_comment
comment|// reference.  This could be as simple as the following .td line:
end_comment

begin_comment
comment|//    CCIfType<[i128], CCPassIndirect<i64>>,
end_comment

begin_comment
comment|// except that i128 is not a legal type, and therefore gets split by
end_comment

begin_comment
comment|// common code into a pair of i64 arguments.
end_comment

begin_decl_stmt
specifier|inline
name|bool
name|CC_SystemZ_I128Indirect
argument_list|(
name|unsigned
operator|&
name|ValNo
argument_list|,
name|MVT
operator|&
name|ValVT
argument_list|,
name|MVT
operator|&
name|LocVT
argument_list|,
name|CCValAssign
operator|::
name|LocInfo
operator|&
name|LocInfo
argument_list|,
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|ArgFlags
argument_list|,
name|CCState
operator|&
name|State
argument_list|)
block|{
name|SmallVectorImpl
operator|<
name|CCValAssign
operator|>
operator|&
name|PendingMembers
operator|=
name|State
operator|.
name|getPendingLocs
argument_list|()
expr_stmt|;
comment|// ArgFlags.isSplit() is true on the first part of a i128 argument;
comment|// PendingMembers.empty() is false on all subsequent parts.
if|if
condition|(
operator|!
name|ArgFlags
operator|.
name|isSplit
argument_list|()
operator|&&
name|PendingMembers
operator|.
name|empty
argument_list|()
condition|)
return|return
name|false
return|;
comment|// Push a pending Indirect value location for each part.
name|LocVT
operator|=
name|MVT
operator|::
name|i64
expr_stmt|;
name|LocInfo
operator|=
name|CCValAssign
operator|::
name|Indirect
expr_stmt|;
name|PendingMembers
operator|.
name|push_back
argument_list|(
name|CCValAssign
operator|::
name|getPending
argument_list|(
name|ValNo
argument_list|,
name|ValVT
argument_list|,
name|LocVT
argument_list|,
name|LocInfo
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ArgFlags
operator|.
name|isSplitEnd
argument_list|()
condition|)
return|return
name|true
return|;
comment|// OK, we've collected all parts in the pending list.  Allocate
comment|// the location (register or stack slot) for the indirect pointer.
comment|// (This duplicates the usual i64 calling convention rules.)
name|unsigned
name|Reg
init|=
name|State
operator|.
name|AllocateReg
argument_list|(
name|SystemZ
operator|::
name|ArgGPRs
argument_list|)
decl_stmt|;
name|unsigned
name|Offset
init|=
name|Reg
condition|?
literal|0
else|:
name|State
operator|.
name|AllocateStack
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
decl_stmt|;
comment|// Use that same location for all the pending parts.
for|for
control|(
name|auto
operator|&
name|It
operator|:
name|PendingMembers
control|)
block|{
if|if
condition|(
name|Reg
condition|)
name|It
operator|.
name|convertToReg
argument_list|(
name|Reg
argument_list|)
expr_stmt|;
else|else
name|It
operator|.
name|convertToMem
argument_list|(
name|Offset
argument_list|)
expr_stmt|;
name|State
operator|.
name|addLoc
argument_list|(
name|It
argument_list|)
expr_stmt|;
block|}
name|PendingMembers
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|true
return|;
block|}
end_decl_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

