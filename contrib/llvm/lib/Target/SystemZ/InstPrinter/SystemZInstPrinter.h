begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==- SystemZInstPrinter.h - Convert SystemZ MCInst to assembly --*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class prints a SystemZ MCInst to a .s file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_SYSTEMZ_INSTPRINTER_SYSTEMZINSTPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_SYSTEMZ_INSTPRINTER_SYSTEMZINSTPRINTER_H
end_define

begin_include
include|#
directive|include
file|"llvm/MC/MCInstPrinter.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCOperand
decl_stmt|;
name|class
name|SystemZInstPrinter
range|:
name|public
name|MCInstPrinter
block|{
name|public
operator|:
name|SystemZInstPrinter
argument_list|(
specifier|const
name|MCAsmInfo
operator|&
name|MAI
argument_list|,
specifier|const
name|MCInstrInfo
operator|&
name|MII
argument_list|,
specifier|const
name|MCRegisterInfo
operator|&
name|MRI
argument_list|)
operator|:
name|MCInstPrinter
argument_list|(
argument|MAI
argument_list|,
argument|MII
argument_list|,
argument|MRI
argument_list|)
block|{}
comment|// Automatically generated by tblgen.
name|void
name|printInstruction
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getRegisterName
argument_list|(
argument|unsigned RegNo
argument_list|)
block|;
comment|// Print an address with the given base, displacement and index.
specifier|static
name|void
name|printAddress
argument_list|(
argument|unsigned Base
argument_list|,
argument|int64_t Disp
argument_list|,
argument|unsigned Index
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
comment|// Print the given operand.
specifier|static
name|void
name|printOperand
argument_list|(
specifier|const
name|MCOperand
operator|&
name|MO
argument_list|,
specifier|const
name|MCAsmInfo
operator|*
name|MAI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
comment|// Override MCInstPrinter.
name|void
name|printRegName
argument_list|(
argument|raw_ostream&O
argument_list|,
argument|unsigned RegNo
argument_list|)
specifier|const
name|override
block|;
name|void
name|printInst
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|StringRef Annot
argument_list|,
argument|const MCSubtargetInfo&STI
argument_list|)
name|override
block|;
name|private
operator|:
comment|// Print various types of operand.
name|void
name|printOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBDAddrOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBDXAddrOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBDLAddrOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBDRAddrOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printBDVAddrOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU1ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU2ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU3ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU4ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU6ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printS8ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU8ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU12ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printS16ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU16ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printS32ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU32ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printU48ImmOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printPCRelOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printPCRelTLSOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
comment|// Print the mnemonic for a condition-code mask ("ne", "lh", etc.)
comment|// This forms part of the instruction name rather than the operand list.
name|void
name|printCond4Operand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int OpNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_SYSTEMZ_INSTPRINTER_SYSTEMZINSTPRINTER_H
end_comment

end_unit

