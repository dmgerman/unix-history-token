begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SystemZISelLowering.h - SystemZ DAG lowering interface --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the interfaces that SystemZ uses to lower LLVM code into a
end_comment

begin_comment
comment|// selection DAG.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_SYSTEMZ_SYSTEMZISELLOWERING_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_SYSTEMZ_SYSTEMZISELLOWERING_H
end_define

begin_include
include|#
directive|include
file|"SystemZ.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineBasicBlock.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SelectionDAG.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|SystemZISD
block|{
enum|enum
name|NodeType
enum|:
name|unsigned
block|{
name|FIRST_NUMBER
init|=
name|ISD
operator|::
name|BUILTIN_OP_END
block|,
comment|// Return with a flag operand.  Operand 0 is the chain operand.
name|RET_FLAG
block|,
comment|// Calls a function.  Operand 0 is the chain operand and operand 1
comment|// is the target address.  The arguments start at operand 2.
comment|// There is an optional glue operand at the end.
name|CALL
block|,
name|SIBCALL
block|,
comment|// TLS calls.  Like regular calls, except operand 1 is the TLS symbol.
comment|// (The call target is implicitly __tls_get_offset.)
name|TLS_GDCALL
block|,
name|TLS_LDCALL
block|,
comment|// Wraps a TargetGlobalAddress that should be loaded using PC-relative
comment|// accesses (LARL).  Operand 0 is the address.
name|PCREL_WRAPPER
block|,
comment|// Used in cases where an offset is applied to a TargetGlobalAddress.
comment|// Operand 0 is the full TargetGlobalAddress and operand 1 is a
comment|// PCREL_WRAPPER for an anchor point.  This is used so that we can
comment|// cheaply refer to either the full address or the anchor point
comment|// as a register base.
name|PCREL_OFFSET
block|,
comment|// Integer absolute.
name|IABS
block|,
comment|// Integer comparisons.  There are three operands: the two values
comment|// to compare, and an integer of type SystemZICMP.
name|ICMP
block|,
comment|// Floating-point comparisons.  The two operands are the values to compare.
name|FCMP
block|,
comment|// Test under mask.  The first operand is ANDed with the second operand
comment|// and the condition codes are set on the result.  The third operand is
comment|// a boolean that is true if the condition codes need to distinguish
comment|// between CCMASK_TM_MIXED_MSB_0 and CCMASK_TM_MIXED_MSB_1 (which the
comment|// register forms do but the memory forms don't).
name|TM
block|,
comment|// Branches if a condition is true.  Operand 0 is the chain operand;
comment|// operand 1 is the 4-bit condition-code mask, with bit N in
comment|// big-endian order meaning "branch if CC=N"; operand 2 is the
comment|// target block and operand 3 is the flag operand.
name|BR_CCMASK
block|,
comment|// Selects between operand 0 and operand 1.  Operand 2 is the
comment|// mask of condition-code values for which operand 0 should be
comment|// chosen over operand 1; it has the same form as BR_CCMASK.
comment|// Operand 3 is the flag operand.
name|SELECT_CCMASK
block|,
comment|// Evaluates to the gap between the stack pointer and the
comment|// base of the dynamically-allocatable area.
name|ADJDYNALLOC
block|,
comment|// Count number of bits set in operand 0 per byte.
name|POPCNT
block|,
comment|// Wrappers around the ISD opcodes of the same name.  The output and
comment|// first input operands are GR128s.  The trailing numbers are the
comment|// widths of the second operand in bits.
name|UMUL_LOHI64
block|,
name|SDIVREM32
block|,
name|SDIVREM64
block|,
name|UDIVREM32
block|,
name|UDIVREM64
block|,
comment|// Use a series of MVCs to copy bytes from one memory location to another.
comment|// The operands are:
comment|// - the target address
comment|// - the source address
comment|// - the constant length
comment|//
comment|// This isn't a memory opcode because we'd need to attach two
comment|// MachineMemOperands rather than one.
name|MVC
block|,
comment|// Like MVC, but implemented as a loop that handles X*256 bytes
comment|// followed by straight-line code to handle the rest (if any).
comment|// The value of X is passed as an additional operand.
name|MVC_LOOP
block|,
comment|// Similar to MVC and MVC_LOOP, but for logic operations (AND, OR, XOR).
name|NC
block|,
name|NC_LOOP
block|,
name|OC
block|,
name|OC_LOOP
block|,
name|XC
block|,
name|XC_LOOP
block|,
comment|// Use CLC to compare two blocks of memory, with the same comments
comment|// as for MVC and MVC_LOOP.
name|CLC
block|,
name|CLC_LOOP
block|,
comment|// Use an MVST-based sequence to implement stpcpy().
name|STPCPY
block|,
comment|// Use a CLST-based sequence to implement strcmp().  The two input operands
comment|// are the addresses of the strings to compare.
name|STRCMP
block|,
comment|// Use an SRST-based sequence to search a block of memory.  The first
comment|// operand is the end address, the second is the start, and the third
comment|// is the character to search for.  CC is set to 1 on success and 2
comment|// on failure.
name|SEARCH_STRING
block|,
comment|// Store the CC value in bits 29 and 28 of an integer.
name|IPM
block|,
comment|// Perform a serialization operation.  (BCR 15,0 or BCR 14,0.)
name|SERIALIZE
block|,
comment|// Compiler barrier only; generate a no-op.
name|MEMBARRIER
block|,
comment|// Transaction begin.  The first operand is the chain, the second
comment|// the TDB pointer, and the third the immediate control field.
comment|// Returns chain and glue.
name|TBEGIN
block|,
name|TBEGIN_NOFLOAT
block|,
comment|// Transaction end.  Just the chain operand.  Returns chain and glue.
name|TEND
block|,
comment|// Create a vector constant by filling byte N of the result with bit
comment|// 15-N of the single operand.
name|BYTE_MASK
block|,
comment|// Create a vector constant by replicating an element-sized RISBG-style mask.
comment|// The first operand specifies the starting set bit and the second operand
comment|// specifies the ending set bit.  Both operands count from the MSB of the
comment|// element.
name|ROTATE_MASK
block|,
comment|// Replicate a GPR scalar value into all elements of a vector.
name|REPLICATE
block|,
comment|// Create a vector from two i64 GPRs.
name|JOIN_DWORDS
block|,
comment|// Replicate one element of a vector into all elements.  The first operand
comment|// is the vector and the second is the index of the element to replicate.
name|SPLAT
block|,
comment|// Interleave elements from the high half of operand 0 and the high half
comment|// of operand 1.
name|MERGE_HIGH
block|,
comment|// Likewise for the low halves.
name|MERGE_LOW
block|,
comment|// Concatenate the vectors in the first two operands, shift them left
comment|// by the third operand, and take the first half of the result.
name|SHL_DOUBLE
block|,
comment|// Take one element of the first v2i64 operand and the one element of
comment|// the second v2i64 operand and concatenate them to form a v2i64 result.
comment|// The third operand is a 4-bit value of the form 0A0B, where A and B
comment|// are the element selectors for the first operand and second operands
comment|// respectively.
name|PERMUTE_DWORDS
block|,
comment|// Perform a general vector permute on vector operands 0 and 1.
comment|// Each byte of operand 2 controls the corresponding byte of the result,
comment|// in the same way as a byte-level VECTOR_SHUFFLE mask.
name|PERMUTE
block|,
comment|// Pack vector operands 0 and 1 into a single vector with half-sized elements.
name|PACK
block|,
comment|// Likewise, but saturate the result and set CC.  PACKS_CC does signed
comment|// saturation and PACKLS_CC does unsigned saturation.
name|PACKS_CC
block|,
name|PACKLS_CC
block|,
comment|// Unpack the first half of vector operand 0 into double-sized elements.
comment|// UNPACK_HIGH sign-extends and UNPACKL_HIGH zero-extends.
name|UNPACK_HIGH
block|,
name|UNPACKL_HIGH
block|,
comment|// Likewise for the second half.
name|UNPACK_LOW
block|,
name|UNPACKL_LOW
block|,
comment|// Shift each element of vector operand 0 by the number of bits specified
comment|// by scalar operand 1.
name|VSHL_BY_SCALAR
block|,
name|VSRL_BY_SCALAR
block|,
name|VSRA_BY_SCALAR
block|,
comment|// For each element of the output type, sum across all sub-elements of
comment|// operand 0 belonging to the corresponding element, and add in the
comment|// rightmost sub-element of the corresponding element of operand 1.
name|VSUM
block|,
comment|// Compare integer vector operands 0 and 1 to produce the usual 0/-1
comment|// vector result.  VICMPE is for equality, VICMPH for "signed greater than"
comment|// and VICMPHL for "unsigned greater than".
name|VICMPE
block|,
name|VICMPH
block|,
name|VICMPHL
block|,
comment|// Likewise, but also set the condition codes on the result.
name|VICMPES
block|,
name|VICMPHS
block|,
name|VICMPHLS
block|,
comment|// Compare floating-point vector operands 0 and 1 to preoduce the usual 0/-1
comment|// vector result.  VFCMPE is for "ordered and equal", VFCMPH for "ordered and
comment|// greater than" and VFCMPHE for "ordered and greater than or equal to".
name|VFCMPE
block|,
name|VFCMPH
block|,
name|VFCMPHE
block|,
comment|// Likewise, but also set the condition codes on the result.
name|VFCMPES
block|,
name|VFCMPHS
block|,
name|VFCMPHES
block|,
comment|// Test floating-point data class for vectors.
name|VFTCI
block|,
comment|// Extend the even f32 elements of vector operand 0 to produce a vector
comment|// of f64 elements.
name|VEXTEND
block|,
comment|// Round the f64 elements of vector operand 0 to f32s and store them in the
comment|// even elements of the result.
name|VROUND
block|,
comment|// AND the two vector operands together and set CC based on the result.
name|VTM
block|,
comment|// String operations that set CC as a side-effect.
name|VFAE_CC
block|,
name|VFAEZ_CC
block|,
name|VFEE_CC
block|,
name|VFEEZ_CC
block|,
name|VFENE_CC
block|,
name|VFENEZ_CC
block|,
name|VISTR_CC
block|,
name|VSTRC_CC
block|,
name|VSTRCZ_CC
block|,
comment|// Test Data Class.
comment|//
comment|// Operand 0: the value to test
comment|// Operand 1: the bit mask
name|TDC
block|,
comment|// Wrappers around the inner loop of an 8- or 16-bit ATOMIC_SWAP or
comment|// ATOMIC_LOAD_<op>.
comment|//
comment|// Operand 0: the address of the containing 32-bit-aligned field
comment|// Operand 1: the second operand of<op>, in the high bits of an i32
comment|//            for everything except ATOMIC_SWAPW
comment|// Operand 2: how many bits to rotate the i32 left to bring the first
comment|//            operand into the high bits
comment|// Operand 3: the negative of operand 2, for rotating the other way
comment|// Operand 4: the width of the field in bits (8 or 16)
name|ATOMIC_SWAPW
init|=
name|ISD
operator|::
name|FIRST_TARGET_MEMORY_OPCODE
block|,
name|ATOMIC_LOADW_ADD
block|,
name|ATOMIC_LOADW_SUB
block|,
name|ATOMIC_LOADW_AND
block|,
name|ATOMIC_LOADW_OR
block|,
name|ATOMIC_LOADW_XOR
block|,
name|ATOMIC_LOADW_NAND
block|,
name|ATOMIC_LOADW_MIN
block|,
name|ATOMIC_LOADW_MAX
block|,
name|ATOMIC_LOADW_UMIN
block|,
name|ATOMIC_LOADW_UMAX
block|,
comment|// A wrapper around the inner loop of an ATOMIC_CMP_SWAP.
comment|//
comment|// Operand 0: the address of the containing 32-bit-aligned field
comment|// Operand 1: the compare value, in the low bits of an i32
comment|// Operand 2: the swap value, in the low bits of an i32
comment|// Operand 3: how many bits to rotate the i32 left to bring the first
comment|//            operand into the high bits
comment|// Operand 4: the negative of operand 2, for rotating the other way
comment|// Operand 5: the width of the field in bits (8 or 16)
name|ATOMIC_CMP_SWAPW
block|,
comment|// Byte swapping load.
comment|//
comment|// Operand 0: the address to load from
comment|// Operand 1: the type of load (i16, i32, i64)
name|LRV
block|,
comment|// Byte swapping store.
comment|//
comment|// Operand 0: the value to store
comment|// Operand 1: the address to store to
comment|// Operand 2: the type of store (i16, i32, i64)
name|STRV
block|,
comment|// Prefetch from the second operand using the 4-bit control code in
comment|// the first operand.  The code is 1 for a load prefetch and 2 for
comment|// a store prefetch.
name|PREFETCH
block|}
enum|;
comment|// Return true if OPCODE is some kind of PC-relative address.
specifier|inline
name|bool
name|isPCREL
parameter_list|(
name|unsigned
name|Opcode
parameter_list|)
block|{
return|return
name|Opcode
operator|==
name|PCREL_WRAPPER
operator|||
name|Opcode
operator|==
name|PCREL_OFFSET
return|;
block|}
block|}
comment|// end namespace SystemZISD
name|namespace
name|SystemZICMP
block|{
comment|// Describes whether an integer comparison needs to be signed or unsigned,
comment|// or whether either type is OK.
enum|enum
block|{
name|Any
block|,
name|UnsignedOnly
block|,
name|SignedOnly
block|}
enum|;
block|}
comment|// end namespace SystemZICMP
name|class
name|SystemZSubtarget
decl_stmt|;
name|class
name|SystemZTargetMachine
decl_stmt|;
name|class
name|SystemZTargetLowering
range|:
name|public
name|TargetLowering
block|{
name|public
operator|:
name|explicit
name|SystemZTargetLowering
argument_list|(
specifier|const
name|TargetMachine
operator|&
name|TM
argument_list|,
specifier|const
name|SystemZSubtarget
operator|&
name|STI
argument_list|)
block|;
comment|// Override TargetLowering.
name|MVT
name|getScalarShiftAmountTy
argument_list|(
argument|const DataLayout&
argument_list|,
argument|EVT
argument_list|)
specifier|const
name|override
block|{
return|return
name|MVT
operator|::
name|i32
return|;
block|}
name|MVT
name|getVectorIdxTy
argument_list|(
argument|const DataLayout&DL
argument_list|)
specifier|const
name|override
block|{
comment|// Only the lower 12 bits of an element index are used, so we don't
comment|// want to clobber the upper 32 bits of a GPR unnecessarily.
return|return
name|MVT
operator|::
name|i32
return|;
block|}
name|TargetLoweringBase
operator|::
name|LegalizeTypeAction
name|getPreferredVectorAction
argument_list|(
argument|EVT VT
argument_list|)
specifier|const
name|override
block|{
comment|// Widen subvectors to the full width rather than promoting integer
comment|// elements.  This is better because:
comment|//
comment|// (a) it means that we can handle the ABI for passing and returning
comment|//     sub-128 vectors without having to handle them as legal types.
comment|//
comment|// (b) we don't have instructions to extend on load and truncate on store,
comment|//     so promoting the integers is less efficient.
comment|//
comment|// (c) there are no multiplication instructions for the widest integer
comment|//     type (v2i64).
if|if
condition|(
name|VT
operator|.
name|getScalarSizeInBits
argument_list|()
operator|%
literal|8
operator|==
literal|0
condition|)
return|return
name|TypeWidenVector
return|;
return|return
name|TargetLoweringBase
operator|::
name|getPreferredVectorAction
argument_list|(
name|VT
argument_list|)
return|;
block|}
name|EVT
name|getSetCCResultType
argument_list|(
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
name|LLVMContext
operator|&
argument_list|,
name|EVT
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isFMAFasterThanFMulAndFAdd
argument_list|(
name|EVT
name|VT
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isFPImmLegal
argument_list|(
specifier|const
name|APFloat
operator|&
name|Imm
argument_list|,
name|EVT
name|VT
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isLegalICmpImmediate
argument_list|(
name|int64_t
name|Imm
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isLegalAddImmediate
argument_list|(
name|int64_t
name|Imm
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isLegalAddressingMode
argument_list|(
specifier|const
name|DataLayout
operator|&
name|DL
argument_list|,
specifier|const
name|AddrMode
operator|&
name|AM
argument_list|,
name|Type
operator|*
name|Ty
argument_list|,
name|unsigned
name|AS
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isFoldableMemAccessOffset
argument_list|(
name|Instruction
operator|*
name|I
argument_list|,
name|int64_t
name|Offset
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|allowsMisalignedMemoryAccesses
argument_list|(
name|EVT
name|VT
argument_list|,
name|unsigned
name|AS
argument_list|,
name|unsigned
name|Align
argument_list|,
name|bool
operator|*
name|Fast
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isTruncateFree
argument_list|(
name|Type
operator|*
argument_list|,
name|Type
operator|*
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|isTruncateFree
argument_list|(
name|EVT
argument_list|,
name|EVT
argument_list|)
decl|const
name|override
decl_stmt|;
specifier|const
name|char
modifier|*
name|getTargetNodeName
argument_list|(
name|unsigned
name|Opcode
argument_list|)
decl|const
name|override
decl_stmt|;
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
specifier|const
name|TargetRegisterClass
operator|*
operator|>
name|getRegForInlineAsmConstraint
argument_list|(
argument|const TargetRegisterInfo *TRI
argument_list|,
argument|StringRef Constraint
argument_list|,
argument|MVT VT
argument_list|)
specifier|const
name|override
expr_stmt|;
name|TargetLowering
operator|::
name|ConstraintType
name|getConstraintType
argument_list|(
argument|StringRef Constraint
argument_list|)
specifier|const
name|override
expr_stmt|;
name|TargetLowering
operator|::
name|ConstraintWeight
name|getSingleConstraintMatchWeight
argument_list|(
argument|AsmOperandInfo&info
argument_list|,
argument|const char *constraint
argument_list|)
specifier|const
name|override
expr_stmt|;
name|void
name|LowerAsmOperandForConstraint
argument_list|(
name|SDValue
name|Op
argument_list|,
name|std
operator|::
name|string
operator|&
name|Constraint
argument_list|,
name|std
operator|::
name|vector
operator|<
name|SDValue
operator|>
operator|&
name|Ops
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|unsigned
name|getInlineAsmMemConstraint
argument_list|(
name|StringRef
name|ConstraintCode
argument_list|)
decl|const
name|override
block|{
if|if
condition|(
name|ConstraintCode
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
switch|switch
condition|(
name|ConstraintCode
index|[
literal|0
index|]
condition|)
block|{
default|default:
break|break;
case|case
literal|'Q'
case|:
return|return
name|InlineAsm
operator|::
name|Constraint_Q
return|;
case|case
literal|'R'
case|:
return|return
name|InlineAsm
operator|::
name|Constraint_R
return|;
case|case
literal|'S'
case|:
return|return
name|InlineAsm
operator|::
name|Constraint_S
return|;
case|case
literal|'T'
case|:
return|return
name|InlineAsm
operator|::
name|Constraint_T
return|;
block|}
block|}
return|return
name|TargetLowering
operator|::
name|getInlineAsmMemConstraint
argument_list|(
name|ConstraintCode
argument_list|)
return|;
block|}
comment|/// If a physical register, this returns the register that receives the
comment|/// exception address on entry to an EH pad.
name|unsigned
name|getExceptionPointerRegister
argument_list|(
specifier|const
name|Constant
operator|*
name|PersonalityFn
argument_list|)
decl|const
name|override
block|{
return|return
name|SystemZ
operator|::
name|R6D
return|;
block|}
comment|/// If a physical register, this returns the register that receives the
comment|/// exception typeid on entry to a landing pad.
name|unsigned
name|getExceptionSelectorRegister
argument_list|(
specifier|const
name|Constant
operator|*
name|PersonalityFn
argument_list|)
decl|const
name|override
block|{
return|return
name|SystemZ
operator|::
name|R7D
return|;
block|}
comment|/// Override to support customized stack guard loading.
name|bool
name|useLoadStackGuardNode
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|void
name|insertSSPDeclarations
argument_list|(
name|Module
operator|&
name|M
argument_list|)
decl|const
name|override
block|{   }
name|MachineBasicBlock
modifier|*
name|EmitInstrWithCustomInserter
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerOperation
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|allowTruncateForTailCall
argument_list|(
name|Type
operator|*
argument_list|,
name|Type
operator|*
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|mayBeEmittedAsTailCall
argument_list|(
specifier|const
name|CallInst
operator|*
name|CI
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerFormalArguments
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|InputArg
operator|>
operator|&
name|Ins
argument_list|,
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerCall
argument_list|(
name|CallLoweringInfo
operator|&
name|CLI
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
name|override
decl_stmt|;
name|bool
name|CanLowerReturn
argument_list|(
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|MachineFunction
operator|&
name|MF
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
name|LLVMContext
operator|&
name|Context
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|LowerReturn
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|IsVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|OutVals
argument_list|,
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|prepareVolatileOrAtomicLoad
argument_list|(
name|SDValue
name|Chain
argument_list|,
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
name|override
decl_stmt|;
name|SDValue
name|PerformDAGCombine
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
name|override
decl_stmt|;
name|ISD
operator|::
name|NodeType
name|getExtendForAtomicOps
argument_list|()
specifier|const
name|override
block|{
return|return
name|ISD
operator|::
name|ANY_EXTEND
return|;
block|}
name|bool
name|supportSwiftError
argument_list|()
specifier|const
name|override
block|{
return|return
name|true
return|;
block|}
name|private
label|:
specifier|const
name|SystemZSubtarget
modifier|&
name|Subtarget
decl_stmt|;
comment|// Implement LowerOperation for individual opcodes.
name|SDValue
name|lowerSETCC
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerBR_CC
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerSELECT_CC
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerGlobalAddress
argument_list|(
name|GlobalAddressSDNode
operator|*
name|Node
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerTLSGetOffset
argument_list|(
name|GlobalAddressSDNode
operator|*
name|Node
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|unsigned
name|Opcode
argument_list|,
name|SDValue
name|GOTOffset
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerThreadPointer
argument_list|(
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerGlobalTLSAddress
argument_list|(
name|GlobalAddressSDNode
operator|*
name|Node
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerBlockAddress
argument_list|(
name|BlockAddressSDNode
operator|*
name|Node
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerJumpTable
argument_list|(
name|JumpTableSDNode
operator|*
name|JT
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerConstantPool
argument_list|(
name|ConstantPoolSDNode
operator|*
name|CP
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerFRAMEADDR
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerRETURNADDR
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerVASTART
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerVACOPY
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerDYNAMIC_STACKALLOC
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerGET_DYNAMIC_AREA_OFFSET
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerSMUL_LOHI
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerUMUL_LOHI
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerSDIVREM
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerUDIVREM
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerBITCAST
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerOR
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerCTPOP
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerATOMIC_FENCE
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerATOMIC_LOAD
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerATOMIC_STORE
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerATOMIC_LOAD_OP
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|unsigned
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerATOMIC_LOAD_SUB
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerATOMIC_CMP_SWAP
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerLOAD_SEQUENCE_POINT
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerSTACKSAVE
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerSTACKRESTORE
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerPREFETCH
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerINTRINSIC_W_CHAIN
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerINTRINSIC_WO_CHAIN
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerBUILD_VECTOR
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerVECTOR_SHUFFLE
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerSCALAR_TO_VECTOR
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerINSERT_VECTOR_ELT
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerEXTRACT_VECTOR_ELT
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerExtendVectorInreg
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|unsigned
name|UnpackHigh
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|lowerShift
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|unsigned
name|ByScalar
argument_list|)
decl|const
decl_stmt|;
name|bool
name|canTreatAsByteVector
argument_list|(
name|EVT
name|VT
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineExtract
argument_list|(
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|EVT
name|ElemVT
argument_list|,
name|EVT
name|VecVT
argument_list|,
name|SDValue
name|OrigOp
argument_list|,
name|unsigned
name|Index
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|,
name|bool
name|Force
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineTruncateExtract
argument_list|(
specifier|const
name|SDLoc
operator|&
name|DL
argument_list|,
name|EVT
name|TruncVT
argument_list|,
name|SDValue
name|Op
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineSIGN_EXTEND
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineMERGE
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineSTORE
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineEXTRACT_VECTOR_ELT
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineJOIN_DWORDS
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineFP_ROUND
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineBSWAP
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|combineSHIFTROT
argument_list|(
name|SDNode
operator|*
name|N
argument_list|,
name|DAGCombinerInfo
operator|&
name|DCI
argument_list|)
decl|const
decl_stmt|;
comment|// If the last instruction before MBBI in MBB was some form of COMPARE,
comment|// try to replace it with a COMPARE AND BRANCH just before MBBI.
comment|// CCMask and Target are the BRC-like operands for the branch.
comment|// Return true if the change was made.
name|bool
name|convertPrevCompareToBranch
argument_list|(
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
name|MachineBasicBlock
operator|::
name|iterator
name|MBBI
argument_list|,
name|unsigned
name|CCMask
argument_list|,
name|MachineBasicBlock
operator|*
name|Target
argument_list|)
decl|const
decl_stmt|;
comment|// Implement EmitInstrWithCustomInserter for individual operation types.
name|MachineBasicBlock
modifier|*
name|emitSelect
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|LOCROpcode
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitCondStore
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|StoreOpcode
argument_list|,
name|unsigned
name|STOCOpcode
argument_list|,
name|bool
name|Invert
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitExt128
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
name|bool
name|ClearEven
argument_list|,
name|unsigned
name|SubReg
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitAtomicLoadBinary
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|BinOpcode
argument_list|,
name|unsigned
name|BitSize
argument_list|,
name|bool
name|Invert
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitAtomicLoadMinMax
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
name|unsigned
name|CompareOpcode
argument_list|,
name|unsigned
name|KeepOldMask
argument_list|,
name|unsigned
name|BitSize
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitAtomicCmpSwapW
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitMemMemWrapper
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitStringWrapper
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|Opcode
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitTransactionBegin
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
name|unsigned
name|Opcode
argument_list|,
name|bool
name|NoFloat
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|emitLoadAndTestCmp0
argument_list|(
name|MachineInstr
operator|&
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|MBB
argument_list|,
name|unsigned
name|Opcode
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

