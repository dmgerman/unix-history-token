begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//==- SystemZ.h - Top-Level Interface for SystemZ representation -*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains the entry points for global functions defined in
end_comment

begin_comment
comment|// the LLVM SystemZ backend.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_SYSTEMZ_SYSTEMZ_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_SYSTEMZ_SYSTEMZ_H
end_define

begin_include
include|#
directive|include
file|"MCTargetDesc/SystemZMCTargetDesc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/CodeGen.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|SystemZTargetMachine
decl_stmt|;
name|class
name|FunctionPass
decl_stmt|;
name|namespace
name|SystemZ
block|{
comment|// Condition-code mask values.
specifier|const
name|unsigned
name|CCMASK_0
init|=
literal|1
operator|<<
literal|3
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_1
init|=
literal|1
operator|<<
literal|2
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_2
init|=
literal|1
operator|<<
literal|1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_3
init|=
literal|1
operator|<<
literal|0
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_ANY
init|=
name|CCMASK_0
operator||
name|CCMASK_1
operator||
name|CCMASK_2
operator||
name|CCMASK_3
decl_stmt|;
comment|// Condition-code mask assignments for integer and floating-point
comment|// comparisons.
specifier|const
name|unsigned
name|CCMASK_CMP_EQ
init|=
name|CCMASK_0
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_CMP_LT
init|=
name|CCMASK_1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_CMP_GT
init|=
name|CCMASK_2
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_CMP_NE
init|=
name|CCMASK_CMP_LT
operator||
name|CCMASK_CMP_GT
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_CMP_LE
init|=
name|CCMASK_CMP_EQ
operator||
name|CCMASK_CMP_LT
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_CMP_GE
init|=
name|CCMASK_CMP_EQ
operator||
name|CCMASK_CMP_GT
decl_stmt|;
comment|// Condition-code mask assignments for floating-point comparisons only.
specifier|const
name|unsigned
name|CCMASK_CMP_UO
init|=
name|CCMASK_3
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_CMP_O
init|=
name|CCMASK_ANY
operator|^
name|CCMASK_CMP_UO
decl_stmt|;
comment|// All condition-code values produced by comparisons.
specifier|const
name|unsigned
name|CCMASK_ICMP
init|=
name|CCMASK_0
operator||
name|CCMASK_1
operator||
name|CCMASK_2
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_FCMP
init|=
name|CCMASK_0
operator||
name|CCMASK_1
operator||
name|CCMASK_2
operator||
name|CCMASK_3
decl_stmt|;
comment|// Condition-code mask assignments for CS.
specifier|const
name|unsigned
name|CCMASK_CS_EQ
init|=
name|CCMASK_0
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_CS_NE
init|=
name|CCMASK_1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_CS
init|=
name|CCMASK_0
operator||
name|CCMASK_1
decl_stmt|;
comment|// Condition-code mask assignments for a completed SRST loop.
specifier|const
name|unsigned
name|CCMASK_SRST_FOUND
init|=
name|CCMASK_1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_SRST_NOTFOUND
init|=
name|CCMASK_2
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_SRST
init|=
name|CCMASK_1
operator||
name|CCMASK_2
decl_stmt|;
comment|// Condition-code mask assignments for TEST UNDER MASK.
specifier|const
name|unsigned
name|CCMASK_TM_ALL_0
init|=
name|CCMASK_0
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TM_MIXED_MSB_0
init|=
name|CCMASK_1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TM_MIXED_MSB_1
init|=
name|CCMASK_2
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TM_ALL_1
init|=
name|CCMASK_3
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TM_SOME_0
init|=
name|CCMASK_TM_ALL_1
operator|^
name|CCMASK_ANY
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TM_SOME_1
init|=
name|CCMASK_TM_ALL_0
operator|^
name|CCMASK_ANY
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TM_MSB_0
init|=
name|CCMASK_0
operator||
name|CCMASK_1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TM_MSB_1
init|=
name|CCMASK_2
operator||
name|CCMASK_3
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TM
init|=
name|CCMASK_ANY
decl_stmt|;
comment|// Condition-code mask assignments for TRANSACTION_BEGIN.
specifier|const
name|unsigned
name|CCMASK_TBEGIN_STARTED
init|=
name|CCMASK_0
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TBEGIN_INDETERMINATE
init|=
name|CCMASK_1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TBEGIN_TRANSIENT
init|=
name|CCMASK_2
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TBEGIN_PERSISTENT
init|=
name|CCMASK_3
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TBEGIN
init|=
name|CCMASK_ANY
decl_stmt|;
comment|// Condition-code mask assignments for TRANSACTION_END.
specifier|const
name|unsigned
name|CCMASK_TEND_TX
init|=
name|CCMASK_0
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TEND_NOTX
init|=
name|CCMASK_2
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TEND
init|=
name|CCMASK_TEND_TX
operator||
name|CCMASK_TEND_NOTX
decl_stmt|;
comment|// Condition-code mask assignments for vector comparisons (and similar
comment|// operations).
specifier|const
name|unsigned
name|CCMASK_VCMP_ALL
init|=
name|CCMASK_0
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_VCMP_MIXED
init|=
name|CCMASK_1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_VCMP_NONE
init|=
name|CCMASK_3
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_VCMP
init|=
name|CCMASK_0
operator||
name|CCMASK_1
operator||
name|CCMASK_3
decl_stmt|;
comment|// Condition-code mask assignments for Test Data Class.
specifier|const
name|unsigned
name|CCMASK_TDC_NOMATCH
init|=
name|CCMASK_0
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TDC_MATCH
init|=
name|CCMASK_1
decl_stmt|;
specifier|const
name|unsigned
name|CCMASK_TDC
init|=
name|CCMASK_TDC_NOMATCH
operator||
name|CCMASK_TDC_MATCH
decl_stmt|;
comment|// The position of the low CC bit in an IPM result.
specifier|const
name|unsigned
name|IPM_CC
init|=
literal|28
decl_stmt|;
comment|// Mask assignments for PFD.
specifier|const
name|unsigned
name|PFD_READ
init|=
literal|1
decl_stmt|;
specifier|const
name|unsigned
name|PFD_WRITE
init|=
literal|2
decl_stmt|;
comment|// Mask assignments for TDC
specifier|const
name|unsigned
name|TDCMASK_ZERO_PLUS
init|=
literal|0x800
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_ZERO_MINUS
init|=
literal|0x400
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_NORMAL_PLUS
init|=
literal|0x200
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_NORMAL_MINUS
init|=
literal|0x100
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_SUBNORMAL_PLUS
init|=
literal|0x080
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_SUBNORMAL_MINUS
init|=
literal|0x040
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_INFINITY_PLUS
init|=
literal|0x020
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_INFINITY_MINUS
init|=
literal|0x010
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_QNAN_PLUS
init|=
literal|0x008
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_QNAN_MINUS
init|=
literal|0x004
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_SNAN_PLUS
init|=
literal|0x002
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_SNAN_MINUS
init|=
literal|0x001
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_ZERO
init|=
name|TDCMASK_ZERO_PLUS
operator||
name|TDCMASK_ZERO_MINUS
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_POSITIVE
init|=
name|TDCMASK_NORMAL_PLUS
operator||
name|TDCMASK_SUBNORMAL_PLUS
operator||
name|TDCMASK_INFINITY_PLUS
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_NEGATIVE
init|=
name|TDCMASK_NORMAL_MINUS
operator||
name|TDCMASK_SUBNORMAL_MINUS
operator||
name|TDCMASK_INFINITY_MINUS
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_NAN
init|=
name|TDCMASK_QNAN_PLUS
operator||
name|TDCMASK_QNAN_MINUS
operator||
name|TDCMASK_SNAN_PLUS
operator||
name|TDCMASK_SNAN_MINUS
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_PLUS
init|=
name|TDCMASK_POSITIVE
operator||
name|TDCMASK_ZERO_PLUS
operator||
name|TDCMASK_QNAN_PLUS
operator||
name|TDCMASK_SNAN_PLUS
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_MINUS
init|=
name|TDCMASK_NEGATIVE
operator||
name|TDCMASK_ZERO_MINUS
operator||
name|TDCMASK_QNAN_MINUS
operator||
name|TDCMASK_SNAN_MINUS
decl_stmt|;
specifier|const
name|unsigned
name|TDCMASK_ALL
init|=
name|TDCMASK_PLUS
operator||
name|TDCMASK_MINUS
decl_stmt|;
comment|// Number of bits in a vector register.
specifier|const
name|unsigned
name|VectorBits
init|=
literal|128
decl_stmt|;
comment|// Number of bytes in a vector register (and consequently the number of
comment|// bytes in a general permute vector).
specifier|const
name|unsigned
name|VectorBytes
init|=
name|VectorBits
operator|/
literal|8
decl_stmt|;
comment|// Return true if Val fits an LLILL operand.
specifier|static
specifier|inline
name|bool
name|isImmLL
parameter_list|(
name|uint64_t
name|Val
parameter_list|)
block|{
return|return
operator|(
name|Val
operator|&
operator|~
literal|0x000000000000ffffULL
operator|)
operator|==
literal|0
return|;
block|}
comment|// Return true if Val fits an LLILH operand.
specifier|static
specifier|inline
name|bool
name|isImmLH
parameter_list|(
name|uint64_t
name|Val
parameter_list|)
block|{
return|return
operator|(
name|Val
operator|&
operator|~
literal|0x00000000ffff0000ULL
operator|)
operator|==
literal|0
return|;
block|}
comment|// Return true if Val fits an LLIHL operand.
specifier|static
specifier|inline
name|bool
name|isImmHL
parameter_list|(
name|uint64_t
name|Val
parameter_list|)
block|{
return|return
operator|(
name|Val
operator|&
operator|~
literal|0x00000ffff00000000ULL
operator|)
operator|==
literal|0
return|;
block|}
comment|// Return true if Val fits an LLIHH operand.
specifier|static
specifier|inline
name|bool
name|isImmHH
parameter_list|(
name|uint64_t
name|Val
parameter_list|)
block|{
return|return
operator|(
name|Val
operator|&
operator|~
literal|0xffff000000000000ULL
operator|)
operator|==
literal|0
return|;
block|}
comment|// Return true if Val fits an LLILF operand.
specifier|static
specifier|inline
name|bool
name|isImmLF
parameter_list|(
name|uint64_t
name|Val
parameter_list|)
block|{
return|return
operator|(
name|Val
operator|&
operator|~
literal|0x00000000ffffffffULL
operator|)
operator|==
literal|0
return|;
block|}
comment|// Return true if Val fits an LLIHF operand.
specifier|static
specifier|inline
name|bool
name|isImmHF
parameter_list|(
name|uint64_t
name|Val
parameter_list|)
block|{
return|return
operator|(
name|Val
operator|&
operator|~
literal|0xffffffff00000000ULL
operator|)
operator|==
literal|0
return|;
block|}
block|}
comment|// end namespace SystemZ
name|FunctionPass
modifier|*
name|createSystemZISelDag
argument_list|(
name|SystemZTargetMachine
operator|&
name|TM
argument_list|,
name|CodeGenOpt
operator|::
name|Level
name|OptLevel
argument_list|)
decl_stmt|;
name|FunctionPass
modifier|*
name|createSystemZElimComparePass
parameter_list|(
name|SystemZTargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createSystemZExpandPseudoPass
parameter_list|(
name|SystemZTargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createSystemZShortenInstPass
parameter_list|(
name|SystemZTargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createSystemZLongBranchPass
parameter_list|(
name|SystemZTargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createSystemZLDCleanupPass
parameter_list|(
name|SystemZTargetMachine
modifier|&
name|TM
parameter_list|)
function_decl|;
name|FunctionPass
modifier|*
name|createSystemZTDCPass
parameter_list|()
function_decl|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

