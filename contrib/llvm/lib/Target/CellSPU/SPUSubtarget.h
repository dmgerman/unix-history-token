begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- SPUSubtarget.h - Define Subtarget for the Cell SPU ------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the Cell SPU-specific subclass of TargetSubtargetInfo.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CELLSUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|CELLSUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtargetInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCInstrItineraries.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_define
define|#
directive|define
name|GET_SUBTARGETINFO_HEADER
end_define

begin_include
include|#
directive|include
file|"SPUGenSubtargetInfo.inc"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|GlobalValue
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|namespace
name|SPU
block|{
enum|enum
block|{
name|PROC_NONE
block|,
name|DEFAULT_PROC
block|}
enum|;
block|}
name|class
name|SPUSubtarget
range|:
name|public
name|SPUGenSubtargetInfo
block|{
name|protected
operator|:
comment|/// stackAlignment - The minimum alignment known to hold of the stack frame
comment|/// on entry to the function and which must be maintained by every function.
name|unsigned
name|StackAlignment
block|;
comment|/// Selected instruction itineraries (one entry per itinerary class.)
name|InstrItineraryData
name|InstrItins
block|;
comment|/// Which SPU processor (this isn't really used, but it's there to keep
comment|/// the C compiler happy)
name|unsigned
name|ProcDirective
block|;
comment|/// Use (assume) large memory -- effectively disables the LQA/STQA
comment|/// instructions that assume 259K local store.
name|bool
name|UseLargeMem
block|;
name|public
operator|:
comment|/// This constructor initializes the data members to match that
comment|/// of the specified triple.
comment|///
name|SPUSubtarget
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|TT
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|CPU
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|FS
argument_list|)
block|;
comment|/// ParseSubtargetFeatures - Parses features string setting specified
comment|/// subtarget options.  Definition of function is auto generated by tblgen.
name|void
name|ParseSubtargetFeatures
argument_list|(
argument|StringRef CPU
argument_list|,
argument|StringRef FS
argument_list|)
block|;
comment|/// SetJITMode - This is called to inform the subtarget info that we are
comment|/// producing code for the JIT.
name|void
name|SetJITMode
argument_list|()
block|;
comment|/// getStackAlignment - Returns the minimum alignment known to hold of the
comment|/// stack frame on entry to the function and which must be maintained by
comment|/// every function for this subtarget.
name|unsigned
name|getStackAlignment
argument_list|()
specifier|const
block|{
return|return
name|StackAlignment
return|;
block|}
comment|/// getInstrItins - Return the instruction itineraies based on subtarget
comment|/// selection.
specifier|const
name|InstrItineraryData
operator|&
name|getInstrItineraryData
argument_list|()
specifier|const
block|{
return|return
name|InstrItins
return|;
block|}
comment|/// Use large memory addressing predicate
name|bool
name|usingLargeMem
argument_list|()
specifier|const
block|{
return|return
name|UseLargeMem
return|;
block|}
comment|/// getDataLayoutString - Return the pointer size and type alignment
comment|/// properties of this subtarget.
specifier|const
name|char
operator|*
name|getDataLayoutString
argument_list|()
specifier|const
block|{
return|return
literal|"E-p:32:32:128-f64:64:128-f32:32:128-i64:32:128-i32:32:128"
literal|"-i16:16:128-i8:8:128-i1:8:128-a:0:128-v64:64:128-v128:128:128"
literal|"-s:128:128-n32:64"
return|;
block|}
name|bool
name|enablePostRAScheduler
argument_list|(
argument|CodeGenOpt::Level OptLevel
argument_list|,
argument|TargetSubtargetInfo::AntiDepBreakMode& Mode
argument_list|,
argument|RegClassVector& CriticalPathRCs
argument_list|)
specifier|const
block|;   }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

