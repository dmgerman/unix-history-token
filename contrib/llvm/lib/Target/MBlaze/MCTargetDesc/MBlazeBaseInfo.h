begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MBlazeBaseInfo.h - Top level definitions for MBlaze -- --*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file contains small standalone helper functions and enum definitions for
end_comment

begin_comment
comment|// the MBlaze target useful for the compiler back-end and the MC libraries.
end_comment

begin_comment
comment|// As such, it deliberately does not include references to LLVM core
end_comment

begin_comment
comment|// code gen types, passes, etc..
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MBlazeBASEINFO_H
end_ifndef

begin_define
define|#
directive|define
name|MBlazeBASEINFO_H
end_define

begin_include
include|#
directive|include
file|"MBlazeMCTargetDesc.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// MBlazeII - This namespace holds all of the target specific flags that
comment|/// instruction info tracks.
comment|///
name|namespace
name|MBlazeII
block|{
enum|enum
block|{
comment|// PseudoFrm - This represents an instruction that is a pseudo instruction
comment|// or one that has not been implemented yet.  It is illegal to code generate
comment|// it, but tolerated for intermediate implementation stages.
name|FPseudo
init|=
literal|0
block|,
name|FRRR
block|,
name|FRRI
block|,
name|FCRR
block|,
name|FCRI
block|,
name|FRCR
block|,
name|FRCI
block|,
name|FCCR
block|,
name|FCCI
block|,
name|FRRCI
block|,
name|FRRC
block|,
name|FRCX
block|,
name|FRCS
block|,
name|FCRCS
block|,
name|FCRCX
block|,
name|FCX
block|,
name|FCR
block|,
name|FRIR
block|,
name|FRRRR
block|,
name|FRI
block|,
name|FC
block|,
name|FRR
block|,
name|FormMask
init|=
literal|63
comment|//===------------------------------------------------------------------===//
comment|// MBlaze Specific MachineOperand flags.
comment|// MO_NO_FLAG,
comment|/// MO_GOT - Represents the offset into the global offset table at which
comment|/// the address the relocation entry symbol resides during execution.
comment|// MO_GOT,
comment|/// MO_GOT_CALL - Represents the offset into the global offset table at
comment|/// which the address of a call site relocation entry symbol resides
comment|/// during execution. This is different from the above since this flag
comment|/// can only be present in call instructions.
comment|// MO_GOT_CALL,
comment|/// MO_GPREL - Represents the offset from the current gp value to be used
comment|/// for the relocatable object file being produced.
comment|// MO_GPREL,
comment|/// MO_ABS_HILO - Represents the hi or low part of an absolute symbol
comment|/// address.
comment|// MO_ABS_HILO
block|}
enum|;
block|}
specifier|static
specifier|inline
name|bool
name|isMBlazeRegister
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
return|return
name|Reg
operator|<=
literal|31
return|;
block|}
specifier|static
specifier|inline
name|bool
name|isSpecialMBlazeRegister
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
switch|switch
condition|(
name|Reg
condition|)
block|{
case|case
literal|0x0000
case|:
case|case
literal|0x0001
case|:
case|case
literal|0x0003
case|:
case|case
literal|0x0005
case|:
case|case
literal|0x0007
case|:
case|case
literal|0x000B
case|:
case|case
literal|0x000D
case|:
case|case
literal|0x1000
case|:
case|case
literal|0x1001
case|:
case|case
literal|0x1002
case|:
case|case
literal|0x1003
case|:
case|case
literal|0x1004
case|:
case|case
literal|0x2000
case|:
case|case
literal|0x2001
case|:
case|case
literal|0x2002
case|:
case|case
literal|0x2003
case|:
case|case
literal|0x2004
case|:
case|case
literal|0x2005
case|:
case|case
literal|0x2006
case|:
case|case
literal|0x2007
case|:
case|case
literal|0x2008
case|:
case|case
literal|0x2009
case|:
case|case
literal|0x200A
case|:
case|case
literal|0x200B
case|:
return|return
name|true
return|;
default|default:
return|return
name|false
return|;
block|}
block|}
comment|/// getMBlazeRegisterNumbering - Given the enum value for some register, e.g.
comment|/// MBlaze::R0, return the number that it corresponds to (e.g. 0).
specifier|static
specifier|inline
name|unsigned
name|getMBlazeRegisterNumbering
parameter_list|(
name|unsigned
name|RegEnum
parameter_list|)
block|{
switch|switch
condition|(
name|RegEnum
condition|)
block|{
case|case
name|MBlaze
operator|::
name|R0
case|:
return|return
literal|0
return|;
case|case
name|MBlaze
operator|::
name|R1
case|:
return|return
literal|1
return|;
case|case
name|MBlaze
operator|::
name|R2
case|:
return|return
literal|2
return|;
case|case
name|MBlaze
operator|::
name|R3
case|:
return|return
literal|3
return|;
case|case
name|MBlaze
operator|::
name|R4
case|:
return|return
literal|4
return|;
case|case
name|MBlaze
operator|::
name|R5
case|:
return|return
literal|5
return|;
case|case
name|MBlaze
operator|::
name|R6
case|:
return|return
literal|6
return|;
case|case
name|MBlaze
operator|::
name|R7
case|:
return|return
literal|7
return|;
case|case
name|MBlaze
operator|::
name|R8
case|:
return|return
literal|8
return|;
case|case
name|MBlaze
operator|::
name|R9
case|:
return|return
literal|9
return|;
case|case
name|MBlaze
operator|::
name|R10
case|:
return|return
literal|10
return|;
case|case
name|MBlaze
operator|::
name|R11
case|:
return|return
literal|11
return|;
case|case
name|MBlaze
operator|::
name|R12
case|:
return|return
literal|12
return|;
case|case
name|MBlaze
operator|::
name|R13
case|:
return|return
literal|13
return|;
case|case
name|MBlaze
operator|::
name|R14
case|:
return|return
literal|14
return|;
case|case
name|MBlaze
operator|::
name|R15
case|:
return|return
literal|15
return|;
case|case
name|MBlaze
operator|::
name|R16
case|:
return|return
literal|16
return|;
case|case
name|MBlaze
operator|::
name|R17
case|:
return|return
literal|17
return|;
case|case
name|MBlaze
operator|::
name|R18
case|:
return|return
literal|18
return|;
case|case
name|MBlaze
operator|::
name|R19
case|:
return|return
literal|19
return|;
case|case
name|MBlaze
operator|::
name|R20
case|:
return|return
literal|20
return|;
case|case
name|MBlaze
operator|::
name|R21
case|:
return|return
literal|21
return|;
case|case
name|MBlaze
operator|::
name|R22
case|:
return|return
literal|22
return|;
case|case
name|MBlaze
operator|::
name|R23
case|:
return|return
literal|23
return|;
case|case
name|MBlaze
operator|::
name|R24
case|:
return|return
literal|24
return|;
case|case
name|MBlaze
operator|::
name|R25
case|:
return|return
literal|25
return|;
case|case
name|MBlaze
operator|::
name|R26
case|:
return|return
literal|26
return|;
case|case
name|MBlaze
operator|::
name|R27
case|:
return|return
literal|27
return|;
case|case
name|MBlaze
operator|::
name|R28
case|:
return|return
literal|28
return|;
case|case
name|MBlaze
operator|::
name|R29
case|:
return|return
literal|29
return|;
case|case
name|MBlaze
operator|::
name|R30
case|:
return|return
literal|30
return|;
case|case
name|MBlaze
operator|::
name|R31
case|:
return|return
literal|31
return|;
case|case
name|MBlaze
operator|::
name|RPC
case|:
return|return
literal|0x0000
return|;
case|case
name|MBlaze
operator|::
name|RMSR
case|:
return|return
literal|0x0001
return|;
case|case
name|MBlaze
operator|::
name|REAR
case|:
return|return
literal|0x0003
return|;
case|case
name|MBlaze
operator|::
name|RESR
case|:
return|return
literal|0x0005
return|;
case|case
name|MBlaze
operator|::
name|RFSR
case|:
return|return
literal|0x0007
return|;
case|case
name|MBlaze
operator|::
name|RBTR
case|:
return|return
literal|0x000B
return|;
case|case
name|MBlaze
operator|::
name|REDR
case|:
return|return
literal|0x000D
return|;
case|case
name|MBlaze
operator|::
name|RPID
case|:
return|return
literal|0x1000
return|;
case|case
name|MBlaze
operator|::
name|RZPR
case|:
return|return
literal|0x1001
return|;
case|case
name|MBlaze
operator|::
name|RTLBX
case|:
return|return
literal|0x1002
return|;
case|case
name|MBlaze
operator|::
name|RTLBLO
case|:
return|return
literal|0x1003
return|;
case|case
name|MBlaze
operator|::
name|RTLBHI
case|:
return|return
literal|0x1004
return|;
case|case
name|MBlaze
operator|::
name|RPVR0
case|:
return|return
literal|0x2000
return|;
case|case
name|MBlaze
operator|::
name|RPVR1
case|:
return|return
literal|0x2001
return|;
case|case
name|MBlaze
operator|::
name|RPVR2
case|:
return|return
literal|0x2002
return|;
case|case
name|MBlaze
operator|::
name|RPVR3
case|:
return|return
literal|0x2003
return|;
case|case
name|MBlaze
operator|::
name|RPVR4
case|:
return|return
literal|0x2004
return|;
case|case
name|MBlaze
operator|::
name|RPVR5
case|:
return|return
literal|0x2005
return|;
case|case
name|MBlaze
operator|::
name|RPVR6
case|:
return|return
literal|0x2006
return|;
case|case
name|MBlaze
operator|::
name|RPVR7
case|:
return|return
literal|0x2007
return|;
case|case
name|MBlaze
operator|::
name|RPVR8
case|:
return|return
literal|0x2008
return|;
case|case
name|MBlaze
operator|::
name|RPVR9
case|:
return|return
literal|0x2009
return|;
case|case
name|MBlaze
operator|::
name|RPVR10
case|:
return|return
literal|0x200A
return|;
case|case
name|MBlaze
operator|::
name|RPVR11
case|:
return|return
literal|0x200B
return|;
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown register number!"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/// getRegisterFromNumbering - Given the enum value for some register, e.g.
comment|/// MBlaze::R0, return the number that it corresponds to (e.g. 0).
specifier|static
specifier|inline
name|unsigned
name|getMBlazeRegisterFromNumbering
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
switch|switch
condition|(
name|Reg
condition|)
block|{
case|case
literal|0
case|:
return|return
name|MBlaze
operator|::
name|R0
return|;
case|case
literal|1
case|:
return|return
name|MBlaze
operator|::
name|R1
return|;
case|case
literal|2
case|:
return|return
name|MBlaze
operator|::
name|R2
return|;
case|case
literal|3
case|:
return|return
name|MBlaze
operator|::
name|R3
return|;
case|case
literal|4
case|:
return|return
name|MBlaze
operator|::
name|R4
return|;
case|case
literal|5
case|:
return|return
name|MBlaze
operator|::
name|R5
return|;
case|case
literal|6
case|:
return|return
name|MBlaze
operator|::
name|R6
return|;
case|case
literal|7
case|:
return|return
name|MBlaze
operator|::
name|R7
return|;
case|case
literal|8
case|:
return|return
name|MBlaze
operator|::
name|R8
return|;
case|case
literal|9
case|:
return|return
name|MBlaze
operator|::
name|R9
return|;
case|case
literal|10
case|:
return|return
name|MBlaze
operator|::
name|R10
return|;
case|case
literal|11
case|:
return|return
name|MBlaze
operator|::
name|R11
return|;
case|case
literal|12
case|:
return|return
name|MBlaze
operator|::
name|R12
return|;
case|case
literal|13
case|:
return|return
name|MBlaze
operator|::
name|R13
return|;
case|case
literal|14
case|:
return|return
name|MBlaze
operator|::
name|R14
return|;
case|case
literal|15
case|:
return|return
name|MBlaze
operator|::
name|R15
return|;
case|case
literal|16
case|:
return|return
name|MBlaze
operator|::
name|R16
return|;
case|case
literal|17
case|:
return|return
name|MBlaze
operator|::
name|R17
return|;
case|case
literal|18
case|:
return|return
name|MBlaze
operator|::
name|R18
return|;
case|case
literal|19
case|:
return|return
name|MBlaze
operator|::
name|R19
return|;
case|case
literal|20
case|:
return|return
name|MBlaze
operator|::
name|R20
return|;
case|case
literal|21
case|:
return|return
name|MBlaze
operator|::
name|R21
return|;
case|case
literal|22
case|:
return|return
name|MBlaze
operator|::
name|R22
return|;
case|case
literal|23
case|:
return|return
name|MBlaze
operator|::
name|R23
return|;
case|case
literal|24
case|:
return|return
name|MBlaze
operator|::
name|R24
return|;
case|case
literal|25
case|:
return|return
name|MBlaze
operator|::
name|R25
return|;
case|case
literal|26
case|:
return|return
name|MBlaze
operator|::
name|R26
return|;
case|case
literal|27
case|:
return|return
name|MBlaze
operator|::
name|R27
return|;
case|case
literal|28
case|:
return|return
name|MBlaze
operator|::
name|R28
return|;
case|case
literal|29
case|:
return|return
name|MBlaze
operator|::
name|R29
return|;
case|case
literal|30
case|:
return|return
name|MBlaze
operator|::
name|R30
return|;
case|case
literal|31
case|:
return|return
name|MBlaze
operator|::
name|R31
return|;
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown register number!"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|inline
name|unsigned
name|getSpecialMBlazeRegisterFromNumbering
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
switch|switch
condition|(
name|Reg
condition|)
block|{
case|case
literal|0x0000
case|:
return|return
name|MBlaze
operator|::
name|RPC
return|;
case|case
literal|0x0001
case|:
return|return
name|MBlaze
operator|::
name|RMSR
return|;
case|case
literal|0x0003
case|:
return|return
name|MBlaze
operator|::
name|REAR
return|;
case|case
literal|0x0005
case|:
return|return
name|MBlaze
operator|::
name|RESR
return|;
case|case
literal|0x0007
case|:
return|return
name|MBlaze
operator|::
name|RFSR
return|;
case|case
literal|0x000B
case|:
return|return
name|MBlaze
operator|::
name|RBTR
return|;
case|case
literal|0x000D
case|:
return|return
name|MBlaze
operator|::
name|REDR
return|;
case|case
literal|0x1000
case|:
return|return
name|MBlaze
operator|::
name|RPID
return|;
case|case
literal|0x1001
case|:
return|return
name|MBlaze
operator|::
name|RZPR
return|;
case|case
literal|0x1002
case|:
return|return
name|MBlaze
operator|::
name|RTLBX
return|;
case|case
literal|0x1003
case|:
return|return
name|MBlaze
operator|::
name|RTLBLO
return|;
case|case
literal|0x1004
case|:
return|return
name|MBlaze
operator|::
name|RTLBHI
return|;
case|case
literal|0x2000
case|:
return|return
name|MBlaze
operator|::
name|RPVR0
return|;
case|case
literal|0x2001
case|:
return|return
name|MBlaze
operator|::
name|RPVR1
return|;
case|case
literal|0x2002
case|:
return|return
name|MBlaze
operator|::
name|RPVR2
return|;
case|case
literal|0x2003
case|:
return|return
name|MBlaze
operator|::
name|RPVR3
return|;
case|case
literal|0x2004
case|:
return|return
name|MBlaze
operator|::
name|RPVR4
return|;
case|case
literal|0x2005
case|:
return|return
name|MBlaze
operator|::
name|RPVR5
return|;
case|case
literal|0x2006
case|:
return|return
name|MBlaze
operator|::
name|RPVR6
return|;
case|case
literal|0x2007
case|:
return|return
name|MBlaze
operator|::
name|RPVR7
return|;
case|case
literal|0x2008
case|:
return|return
name|MBlaze
operator|::
name|RPVR8
return|;
case|case
literal|0x2009
case|:
return|return
name|MBlaze
operator|::
name|RPVR9
return|;
case|case
literal|0x200A
case|:
return|return
name|MBlaze
operator|::
name|RPVR10
return|;
case|case
literal|0x200B
case|:
return|return
name|MBlaze
operator|::
name|RPVR11
return|;
default|default:
name|llvm_unreachable
argument_list|(
literal|"Unknown register number!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm;
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

