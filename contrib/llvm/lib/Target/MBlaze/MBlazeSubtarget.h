begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=====-- MBlazeSubtarget.h - Define Subtarget for the MBlaze -*- C++ -*--====//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares the MBlaze specific subclass of TargetSubtarget.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MBLAZESUBTARGET_H
end_ifndef

begin_define
define|#
directive|define
name|MBLAZESUBTARGET_H
end_define

begin_include
include|#
directive|include
file|"llvm/Target/TargetSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetMachine.h"
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MBlazeSubtarget
range|:
name|public
name|TargetSubtarget
block|{
name|protected
operator|:
name|bool
name|HasBarrel
block|;
name|bool
name|HasDiv
block|;
name|bool
name|HasMul
block|;
name|bool
name|HasPatCmp
block|;
name|bool
name|HasFPU
block|;
name|bool
name|HasMul64
block|;
name|bool
name|HasSqrt
block|;
name|bool
name|HasItin
block|;
name|InstrItineraryData
name|InstrItins
block|;
name|public
operator|:
comment|/// This constructor initializes the data members to match that
comment|/// of the specified triple.
name|MBlazeSubtarget
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|TT
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|FS
argument_list|)
block|;
comment|/// ParseSubtargetFeatures - Parses features string setting specified
comment|/// subtarget options.  Definition of function is auto generated by tblgen.
name|std
operator|::
name|string
name|ParseSubtargetFeatures
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|FS
argument_list|,
specifier|const
name|std
operator|::
name|string
operator|&
name|CPU
argument_list|)
block|;
comment|/// Compute the number of maximum number of issues per cycle for the
comment|/// MBlaze scheduling itineraries.
name|void
name|computeIssueWidth
argument_list|()
block|;
comment|/// enablePostRAScheduler - True at 'More' optimization.
name|bool
name|enablePostRAScheduler
argument_list|(
argument|CodeGenOpt::Level OptLevel
argument_list|,
argument|TargetSubtarget::AntiDepBreakMode& Mode
argument_list|,
argument|RegClassVector& CriticalPathRCs
argument_list|)
specifier|const
block|;
comment|/// getInstrItins - Return the instruction itineraies based on subtarget.
specifier|const
name|InstrItineraryData
operator|&
name|getInstrItineraryData
argument_list|()
specifier|const
block|{
return|return
name|InstrItins
return|;
block|}
name|bool
name|hasItin
argument_list|()
specifier|const
block|{
return|return
name|HasItin
return|;
block|}
name|bool
name|hasPCMP
argument_list|()
specifier|const
block|{
return|return
name|HasPatCmp
return|;
block|}
name|bool
name|hasFPU
argument_list|()
specifier|const
block|{
return|return
name|HasFPU
return|;
block|}
name|bool
name|hasSqrt
argument_list|()
specifier|const
block|{
return|return
name|HasSqrt
return|;
block|}
name|bool
name|hasMul
argument_list|()
specifier|const
block|{
return|return
name|HasMul
return|;
block|}
name|bool
name|hasMul64
argument_list|()
specifier|const
block|{
return|return
name|HasMul64
return|;
block|}
name|bool
name|hasDiv
argument_list|()
specifier|const
block|{
return|return
name|HasDiv
return|;
block|}
name|bool
name|hasBarrel
argument_list|()
specifier|const
block|{
return|return
name|HasBarrel
return|;
block|}
expr|}
block|; }
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

