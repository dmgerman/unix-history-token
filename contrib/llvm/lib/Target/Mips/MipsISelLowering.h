begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- MipsISelLowering.h - Mips DAG Lowering Interface --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines the interfaces that Mips uses to lower LLVM code into a
end_comment

begin_comment
comment|// selection DAG.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MipsISELLOWERING_H
end_ifndef

begin_define
define|#
directive|define
name|MipsISELLOWERING_H
end_define

begin_include
include|#
directive|include
file|"Mips.h"
end_include

begin_include
include|#
directive|include
file|"MipsSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/CallingConvLower.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SelectionDAG.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Target/TargetLowering.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|namespace
name|MipsISD
block|{
enum|enum
name|NodeType
block|{
comment|// Start the numbering from where ISD NodeType finishes.
name|FIRST_NUMBER
init|=
name|ISD
operator|::
name|BUILTIN_OP_END
block|,
comment|// Jump and link (call)
name|JmpLink
block|,
comment|// Tail call
name|TailCall
block|,
comment|// Get the Higher 16 bits from a 32-bit immediate
comment|// No relation with Mips Hi register
name|Hi
block|,
comment|// Get the Lower 16 bits from a 32-bit immediate
comment|// No relation with Mips Lo register
name|Lo
block|,
comment|// Handle gp_rel (small data/bss sections) relocation.
name|GPRel
block|,
comment|// Thread Pointer
name|ThreadPointer
block|,
comment|// Floating Point Branch Conditional
name|FPBrcond
block|,
comment|// Floating Point Compare
name|FPCmp
block|,
comment|// Floating Point Conditional Moves
name|CMovFP_T
block|,
name|CMovFP_F
block|,
comment|// Floating Point Rounding
name|FPRound
block|,
comment|// Return
name|Ret
block|,
comment|// MAdd/Sub nodes
name|MAdd
block|,
name|MAddu
block|,
name|MSub
block|,
name|MSubu
block|,
comment|// DivRem(u)
name|DivRem
block|,
name|DivRemU
block|,
name|BuildPairF64
block|,
name|ExtractElementF64
block|,
name|Wrapper
block|,
name|DynAlloc
block|,
name|Sync
block|,
name|Ext
block|,
name|Ins
block|,
comment|// EXTR.W instrinsic nodes.
name|EXTP
block|,
name|EXTPDP
block|,
name|EXTR_S_H
block|,
name|EXTR_W
block|,
name|EXTR_R_W
block|,
name|EXTR_RS_W
block|,
name|SHILO
block|,
name|MTHLIP
block|,
comment|// DPA.W intrinsic nodes.
name|MULSAQ_S_W_PH
block|,
name|MAQ_S_W_PHL
block|,
name|MAQ_S_W_PHR
block|,
name|MAQ_SA_W_PHL
block|,
name|MAQ_SA_W_PHR
block|,
name|DPAU_H_QBL
block|,
name|DPAU_H_QBR
block|,
name|DPSU_H_QBL
block|,
name|DPSU_H_QBR
block|,
name|DPAQ_S_W_PH
block|,
name|DPSQ_S_W_PH
block|,
name|DPAQ_SA_L_W
block|,
name|DPSQ_SA_L_W
block|,
name|DPA_W_PH
block|,
name|DPS_W_PH
block|,
name|DPAQX_S_W_PH
block|,
name|DPAQX_SA_W_PH
block|,
name|DPAX_W_PH
block|,
name|DPSX_W_PH
block|,
name|DPSQX_S_W_PH
block|,
name|DPSQX_SA_W_PH
block|,
name|MULSA_W_PH
block|,
name|MULT
block|,
name|MULTU
block|,
name|MADD_DSP
block|,
name|MADDU_DSP
block|,
name|MSUB_DSP
block|,
name|MSUBU_DSP
block|,
comment|// Load/Store Left/Right nodes.
name|LWL
init|=
name|ISD
operator|::
name|FIRST_TARGET_MEMORY_OPCODE
block|,
name|LWR
block|,
name|SWL
block|,
name|SWR
block|,
name|LDL
block|,
name|LDR
block|,
name|SDL
block|,
name|SDR
block|}
enum|;
block|}
comment|//===--------------------------------------------------------------------===//
comment|// TargetLowering Implementation
comment|//===--------------------------------------------------------------------===//
name|class
name|MipsFunctionInfo
decl_stmt|;
name|class
name|MipsTargetLowering
range|:
name|public
name|TargetLowering
block|{
name|public
operator|:
name|explicit
name|MipsTargetLowering
argument_list|(
name|MipsTargetMachine
operator|&
name|TM
argument_list|)
block|;
name|virtual
name|MVT
name|getShiftAmountTy
argument_list|(
argument|EVT LHSTy
argument_list|)
specifier|const
block|{
return|return
name|MVT
operator|::
name|i32
return|;
block|}
name|virtual
name|bool
name|allowsUnalignedMemoryAccesses
argument_list|(
argument|EVT VT
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|LowerOperationWrapper
argument_list|(
argument|SDNode *N
argument_list|,
argument|SmallVectorImpl<SDValue>&Results
argument_list|,
argument|SelectionDAG&DAG
argument_list|)
specifier|const
block|;
comment|/// LowerOperation - Provide custom lowering hooks for some operations.
name|virtual
name|SDValue
name|LowerOperation
argument_list|(
argument|SDValue Op
argument_list|,
argument|SelectionDAG&DAG
argument_list|)
specifier|const
block|;
comment|/// ReplaceNodeResults - Replace the results of node with an illegal result
comment|/// type with new values built out of custom code.
comment|///
name|virtual
name|void
name|ReplaceNodeResults
argument_list|(
argument|SDNode *N
argument_list|,
argument|SmallVectorImpl<SDValue>&Results
argument_list|,
argument|SelectionDAG&DAG
argument_list|)
specifier|const
block|;
comment|/// getTargetNodeName - This method returns the name of a target specific
comment|//  DAG node.
name|virtual
specifier|const
name|char
operator|*
name|getTargetNodeName
argument_list|(
argument|unsigned Opcode
argument_list|)
specifier|const
block|;
comment|/// getSetCCResultType - get the ISD::SETCC result ValueType
name|EVT
name|getSetCCResultType
argument_list|(
argument|EVT VT
argument_list|)
specifier|const
block|;
name|virtual
name|SDValue
name|PerformDAGCombine
argument_list|(
argument|SDNode *N
argument_list|,
argument|DAGCombinerInfo&DCI
argument_list|)
specifier|const
block|;
name|private
operator|:
comment|/// ByValArgInfo - Byval argument information.
expr|struct
name|ByValArgInfo
block|{
name|unsigned
name|FirstIdx
block|;
comment|// Index of the first register used.
name|unsigned
name|NumRegs
block|;
comment|// Number of registers used for this argument.
name|unsigned
name|Address
block|;
comment|// Offset of the stack area used to pass this argument.
name|ByValArgInfo
argument_list|()
operator|:
name|FirstIdx
argument_list|(
literal|0
argument_list|)
block|,
name|NumRegs
argument_list|(
literal|0
argument_list|)
block|,
name|Address
argument_list|(
literal|0
argument_list|)
block|{}
block|}
block|;
comment|/// MipsCC - This class provides methods used to analyze formal and call
comment|/// arguments and inquire about calling convention information.
name|class
name|MipsCC
block|{
name|public
operator|:
name|MipsCC
argument_list|(
argument|CallingConv::ID CallConv
argument_list|,
argument|bool IsVarArg
argument_list|,
argument|bool IsO32
argument_list|,
argument|CCState&Info
argument_list|)
block|;
name|void
name|analyzeCallOperands
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|)
block|;
name|void
name|analyzeFormalArguments
argument_list|(
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|InputArg
operator|>
operator|&
name|Ins
argument_list|)
block|;
name|void
name|handleByValArg
argument_list|(
argument|unsigned ValNo
argument_list|,
argument|MVT ValVT
argument_list|,
argument|MVT LocVT
argument_list|,
argument|CCValAssign::LocInfo LocInfo
argument_list|,
argument|ISD::ArgFlagsTy ArgFlags
argument_list|)
block|;
specifier|const
name|CCState
operator|&
name|getCCInfo
argument_list|()
specifier|const
block|{
return|return
name|CCInfo
return|;
block|}
comment|/// hasByValArg - Returns true if function has byval arguments.
name|bool
name|hasByValArg
argument_list|()
specifier|const
block|{
return|return
operator|!
name|ByValArgs
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/// useRegsForByval - Returns true if the calling convention allows the
comment|/// use of registers to pass byval arguments.
name|bool
name|useRegsForByval
argument_list|()
specifier|const
block|{
return|return
name|UseRegsForByval
return|;
block|}
comment|/// regSize - Size (in number of bits) of integer registers.
name|unsigned
name|regSize
argument_list|()
specifier|const
block|{
return|return
name|RegSize
return|;
block|}
comment|/// numIntArgRegs - Number of integer registers available for calls.
name|unsigned
name|numIntArgRegs
argument_list|()
specifier|const
block|{
return|return
name|NumIntArgRegs
return|;
block|}
comment|/// reservedArgArea - The size of the area the caller reserves for
comment|/// register arguments. This is 16-byte if ABI is O32.
name|unsigned
name|reservedArgArea
argument_list|()
specifier|const
block|{
return|return
name|ReservedArgArea
return|;
block|}
comment|/// intArgRegs - Pointer to array of integer registers.
specifier|const
name|uint16_t
operator|*
name|intArgRegs
argument_list|()
specifier|const
block|{
return|return
name|IntArgRegs
return|;
block|}
typedef|typedef
name|SmallVector
operator|<
name|ByValArgInfo
operator|,
literal|2
operator|>
operator|::
name|const_iterator
name|byval_iterator
expr_stmt|;
name|byval_iterator
name|byval_begin
argument_list|()
specifier|const
block|{
return|return
name|ByValArgs
operator|.
name|begin
argument_list|()
return|;
block|}
name|byval_iterator
name|byval_end
argument_list|()
specifier|const
block|{
return|return
name|ByValArgs
operator|.
name|end
argument_list|()
return|;
block|}
name|private
operator|:
name|void
name|allocateRegs
argument_list|(
argument|ByValArgInfo&ByVal
argument_list|,
argument|unsigned ByValSize
argument_list|,
argument|unsigned Align
argument_list|)
block|;
name|CCState
operator|&
name|CCInfo
block|;
name|bool
name|UseRegsForByval
block|;
name|unsigned
name|RegSize
block|;
name|unsigned
name|NumIntArgRegs
block|;
name|unsigned
name|ReservedArgArea
block|;
specifier|const
name|uint16_t
operator|*
name|IntArgRegs
block|,
operator|*
name|ShadowRegs
block|;
name|SmallVector
operator|<
name|ByValArgInfo
block|,
literal|2
operator|>
name|ByValArgs
block|;
name|llvm
operator|::
name|CCAssignFn
operator|*
name|FixedFn
block|,
operator|*
name|VarFn
block|;     }
decl_stmt|;
comment|// Subtarget Info
specifier|const
name|MipsSubtarget
modifier|*
name|Subtarget
decl_stmt|;
name|bool
name|HasMips64
decl_stmt|,
name|IsN64
decl_stmt|,
name|IsO32
decl_stmt|;
comment|// Lower Operand helpers
name|SDValue
name|LowerCallResult
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|SDValue
name|InFlag
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|InputArg
operator|>
operator|&
name|Ins
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
decl_stmt|;
comment|// Lower Operand specifics
name|SDValue
name|LowerBRCOND
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerConstantPool
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerGlobalAddress
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerBlockAddress
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerGlobalTLSAddress
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerJumpTable
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerSELECT
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerSELECT_CC
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerSETCC
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerVASTART
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerFCOPYSIGN
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerFABS
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerFRAMEADDR
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerRETURNADDR
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerMEMBARRIER
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerATOMIC_FENCE
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerShiftLeftParts
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerShiftRightParts
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|bool
name|IsSRA
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerLOAD
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerSTORE
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerINTRINSIC_WO_CHAIN
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerINTRINSIC_W_CHAIN
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|LowerADD
argument_list|(
name|SDValue
name|Op
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
comment|/// IsEligibleForTailCallOptimization - Check whether the call is eligible
comment|/// for tail call optimization.
name|bool
name|IsEligibleForTailCallOptimization
argument_list|(
specifier|const
name|MipsCC
operator|&
name|MipsCCInfo
argument_list|,
name|unsigned
name|NextStackOffset
argument_list|,
specifier|const
name|MipsFunctionInfo
operator|&
name|FI
argument_list|)
decl|const
decl_stmt|;
comment|/// copyByValArg - Copy argument registers which were used to pass a byval
comment|/// argument to the stack. Create a stack frame object for the byval
comment|/// argument.
name|void
name|copyByValRegs
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|DebugLoc
name|DL
argument_list|,
name|std
operator|::
name|vector
operator|<
name|SDValue
operator|>
operator|&
name|OutChains
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
specifier|const
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|Flags
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|,
specifier|const
name|Argument
operator|*
name|FuncArg
argument_list|,
specifier|const
name|MipsCC
operator|&
name|CC
argument_list|,
specifier|const
name|ByValArgInfo
operator|&
name|ByVal
argument_list|)
decl|const
decl_stmt|;
comment|/// passByValArg - Pass a byval argument in registers or on stack.
name|void
name|passByValArg
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|DebugLoc
name|DL
argument_list|,
name|SmallVector
operator|<
name|std
operator|::
name|pair
operator|<
name|unsigned
argument_list|,
name|SDValue
operator|>
argument_list|,
literal|16
operator|>
operator|&
name|RegsToPass
argument_list|,
name|SmallVector
operator|<
name|SDValue
argument_list|,
literal|8
operator|>
operator|&
name|MemOpChains
argument_list|,
name|SDValue
name|StackPtr
argument_list|,
name|MachineFrameInfo
operator|*
name|MFI
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SDValue
name|Arg
argument_list|,
specifier|const
name|MipsCC
operator|&
name|CC
argument_list|,
specifier|const
name|ByValArgInfo
operator|&
name|ByVal
argument_list|,
specifier|const
name|ISD
operator|::
name|ArgFlagsTy
operator|&
name|Flags
argument_list|,
name|bool
name|isLittle
argument_list|)
decl|const
decl_stmt|;
comment|/// writeVarArgRegs - Write variable function arguments passed in registers
comment|/// to the stack. Also create a stack frame object for the first variable
comment|/// argument.
name|void
name|writeVarArgRegs
argument_list|(
name|std
operator|::
name|vector
operator|<
name|SDValue
operator|>
operator|&
name|OutChains
argument_list|,
specifier|const
name|MipsCC
operator|&
name|CC
argument_list|,
name|SDValue
name|Chain
argument_list|,
name|DebugLoc
name|DL
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|SDValue
name|LowerFormalArguments
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|InputArg
operator|>
operator|&
name|Ins
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
decl_stmt|;
name|SDValue
name|passArgOnStack
argument_list|(
name|SDValue
name|StackPtr
argument_list|,
name|unsigned
name|Offset
argument_list|,
name|SDValue
name|Chain
argument_list|,
name|SDValue
name|Arg
argument_list|,
name|DebugLoc
name|DL
argument_list|,
name|bool
name|IsTailCall
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|SDValue
name|LowerCall
argument_list|(
name|TargetLowering
operator|::
name|CallLoweringInfo
operator|&
name|CLI
argument_list|,
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|InVals
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|CanLowerReturn
argument_list|(
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|MachineFunction
operator|&
name|MF
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
name|LLVMContext
operator|&
name|Context
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|SDValue
name|LowerReturn
argument_list|(
name|SDValue
name|Chain
argument_list|,
name|CallingConv
operator|::
name|ID
name|CallConv
argument_list|,
name|bool
name|isVarArg
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|ISD
operator|::
name|OutputArg
operator|>
operator|&
name|Outs
argument_list|,
specifier|const
name|SmallVectorImpl
operator|<
name|SDValue
operator|>
operator|&
name|OutVals
argument_list|,
name|DebugLoc
name|dl
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|MachineBasicBlock
modifier|*
name|EmitInstrWithCustomInserter
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|MBB
argument_list|)
decl|const
decl_stmt|;
comment|// Inline asm support
name|ConstraintType
name|getConstraintType
argument_list|(
specifier|const
name|std
operator|::
name|string
operator|&
name|Constraint
argument_list|)
decl|const
decl_stmt|;
comment|/// Examine constraint string and operand type and determine a weight value.
comment|/// The operand object must already have been set up with the operand type.
name|ConstraintWeight
name|getSingleConstraintMatchWeight
argument_list|(
name|AsmOperandInfo
operator|&
name|info
argument_list|,
specifier|const
name|char
operator|*
name|constraint
argument_list|)
decl|const
decl_stmt|;
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
specifier|const
name|TargetRegisterClass
operator|*
operator|>
name|getRegForInlineAsmConstraint
argument_list|(
argument|const std::string&Constraint
argument_list|,
argument|EVT VT
argument_list|)
specifier|const
expr_stmt|;
comment|/// LowerAsmOperandForConstraint - Lower the specified operand into the Ops
comment|/// vector.  If it is invalid, don't add anything to Ops. If hasMemory is
comment|/// true it means one of the asm constraint of the inline asm instruction
comment|/// being processed is 'm'.
name|virtual
name|void
name|LowerAsmOperandForConstraint
argument_list|(
name|SDValue
name|Op
argument_list|,
name|std
operator|::
name|string
operator|&
name|Constraint
argument_list|,
name|std
operator|::
name|vector
operator|<
name|SDValue
operator|>
operator|&
name|Ops
argument_list|,
name|SelectionDAG
operator|&
name|DAG
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|bool
name|isOffsetFoldingLegal
argument_list|(
specifier|const
name|GlobalAddressSDNode
operator|*
name|GA
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|EVT
name|getOptimalMemOpType
argument_list|(
name|uint64_t
name|Size
argument_list|,
name|unsigned
name|DstAlign
argument_list|,
name|unsigned
name|SrcAlign
argument_list|,
name|bool
name|IsZeroVal
argument_list|,
name|bool
name|MemcpyStrSrc
argument_list|,
name|MachineFunction
operator|&
name|MF
argument_list|)
decl|const
decl_stmt|;
comment|/// isFPImmLegal - Returns true if the target can instruction select the
comment|/// specified FP immediate natively. If false, the legalizer will
comment|/// materialize the FP immediate as a load from a constant pool.
name|virtual
name|bool
name|isFPImmLegal
argument_list|(
specifier|const
name|APFloat
operator|&
name|Imm
argument_list|,
name|EVT
name|VT
argument_list|)
decl|const
decl_stmt|;
name|virtual
name|unsigned
name|getJumpTableEncoding
argument_list|()
specifier|const
expr_stmt|;
name|MachineBasicBlock
modifier|*
name|EmitBPOSGE32
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|EmitAtomicBinary
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|Size
argument_list|,
name|unsigned
name|BinOpcode
argument_list|,
name|bool
name|Nand
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|EmitAtomicBinaryPartword
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|Size
argument_list|,
name|unsigned
name|BinOpcode
argument_list|,
name|bool
name|Nand
operator|=
name|false
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|EmitAtomicCmpSwap
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|Size
argument_list|)
decl|const
decl_stmt|;
name|MachineBasicBlock
modifier|*
name|EmitAtomicCmpSwapPartword
argument_list|(
name|MachineInstr
operator|*
name|MI
argument_list|,
name|MachineBasicBlock
operator|*
name|BB
argument_list|,
name|unsigned
name|Size
argument_list|)
decl|const
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|// MipsISELLOWERING_H
end_comment

end_unit

