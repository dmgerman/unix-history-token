begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---- MipsISelDAGToDAG.h - A Dag to Dag Inst Selector for Mips --------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file defines an instruction selector for the MIPS target.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_MIPS_MIPSISELDAGTODAG_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_MIPS_MIPSISELDAGTODAG_H
end_define

begin_include
include|#
directive|include
file|"Mips.h"
end_include

begin_include
include|#
directive|include
file|"MipsSubtarget.h"
end_include

begin_include
include|#
directive|include
file|"MipsTargetMachine.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/SelectionDAGISel.h"
end_include

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// Instruction Selector Implementation
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|// MipsDAGToDAGISel - MIPS specific code to select MIPS machine
end_comment

begin_comment
comment|// instructions for SelectionDAG operations.
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MipsDAGToDAGISel
range|:
name|public
name|SelectionDAGISel
block|{
name|public
operator|:
name|explicit
name|MipsDAGToDAGISel
argument_list|(
name|MipsTargetMachine
operator|&
name|TM
argument_list|)
operator|:
name|SelectionDAGISel
argument_list|(
name|TM
argument_list|)
block|,
name|Subtarget
argument_list|(
argument|nullptr
argument_list|)
block|{}
comment|// Pass Name
specifier|const
name|char
operator|*
name|getPassName
argument_list|()
specifier|const
name|override
block|{
return|return
literal|"MIPS DAG->DAG Pattern Instruction Selection"
return|;
block|}
name|bool
name|runOnMachineFunction
argument_list|(
argument|MachineFunction&MF
argument_list|)
name|override
block|;
name|protected
operator|:
name|SDNode
operator|*
name|getGlobalBaseReg
argument_list|()
block|;
comment|/// Keep a pointer to the MipsSubtarget around so that we can make the right
comment|/// decision when generating code for different targets.
specifier|const
name|MipsSubtarget
operator|*
name|Subtarget
block|;
name|private
operator|:
comment|// Include the pieces autogenerated from the target description.
include|#
directive|include
file|"MipsGenDAGISel.inc"
comment|// Complex Pattern.
comment|/// (reg + imm).
name|virtual
name|bool
name|selectAddrRegImm
argument_list|(
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
specifier|const
block|;
comment|// Complex Pattern.
comment|/// (reg + reg).
name|virtual
name|bool
name|selectAddrRegReg
argument_list|(
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
specifier|const
block|;
comment|/// Fall back on this function if all else fails.
name|virtual
name|bool
name|selectAddrDefault
argument_list|(
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
specifier|const
block|;
comment|/// Match integer address pattern.
name|virtual
name|bool
name|selectIntAddr
argument_list|(
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|selectIntAddrMM
argument_list|(
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|selectIntAddrLSL2MM
argument_list|(
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
specifier|const
block|;
comment|/// Match addr+simm10 and addr
name|virtual
name|bool
name|selectIntAddrMSA
argument_list|(
argument|SDValue Addr
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|)
specifier|const
block|;
name|virtual
name|bool
name|selectAddr16
argument_list|(
argument|SDNode *Parent
argument_list|,
argument|SDValue N
argument_list|,
argument|SDValue&Base
argument_list|,
argument|SDValue&Offset
argument_list|,
argument|SDValue&Alias
argument_list|)
block|;
comment|/// \brief Select constant vector splats.
name|virtual
name|bool
name|selectVSplat
argument_list|(
argument|SDNode *N
argument_list|,
argument|APInt&Imm
argument_list|,
argument|unsigned MinSizeInBits
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value fits in a uimm1.
name|virtual
name|bool
name|selectVSplatUimm1
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value fits in a uimm2.
name|virtual
name|bool
name|selectVSplatUimm2
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value fits in a uimm3.
name|virtual
name|bool
name|selectVSplatUimm3
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value fits in a uimm4.
name|virtual
name|bool
name|selectVSplatUimm4
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value fits in a uimm5.
name|virtual
name|bool
name|selectVSplatUimm5
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value fits in a uimm6.
name|virtual
name|bool
name|selectVSplatUimm6
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value fits in a uimm8.
name|virtual
name|bool
name|selectVSplatUimm8
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value fits in a simm5.
name|virtual
name|bool
name|selectVSplatSimm5
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value is a power of 2.
name|virtual
name|bool
name|selectVSplatUimmPow2
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value is the inverse of a
comment|/// power of 2.
name|virtual
name|bool
name|selectVSplatUimmInvPow2
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value is a run of set bits
comment|/// ending at the most significant bit
name|virtual
name|bool
name|selectVSplatMaskL
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
comment|/// \brief Select constant vector splats whose value is a run of set bits
comment|/// starting at bit zero.
name|virtual
name|bool
name|selectVSplatMaskR
argument_list|(
argument|SDValue N
argument_list|,
argument|SDValue&Imm
argument_list|)
specifier|const
block|;
name|SDNode
operator|*
name|Select
argument_list|(
argument|SDNode *N
argument_list|)
name|override
block|;
name|virtual
name|std
operator|::
name|pair
operator|<
name|bool
block|,
name|SDNode
operator|*
operator|>
name|selectNode
argument_list|(
name|SDNode
operator|*
name|Node
argument_list|)
operator|=
literal|0
block|;
comment|// getImm - Return a target constant with the specified value.
specifier|inline
name|SDValue
name|getImm
argument_list|(
argument|const SDNode *Node
argument_list|,
argument|uint64_t Imm
argument_list|)
block|{
return|return
name|CurDAG
operator|->
name|getTargetConstant
argument_list|(
name|Imm
argument_list|,
name|SDLoc
argument_list|(
name|Node
argument_list|)
argument_list|,
name|Node
operator|->
name|getValueType
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
name|virtual
name|void
name|processFunctionAfterISel
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
operator|=
literal|0
block|;
name|bool
name|SelectInlineAsmMemoryOperand
argument_list|(
argument|const SDValue&Op
argument_list|,
argument|unsigned ConstraintID
argument_list|,
argument|std::vector<SDValue>&OutOps
argument_list|)
name|override
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

