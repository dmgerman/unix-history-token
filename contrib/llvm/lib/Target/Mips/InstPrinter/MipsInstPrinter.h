begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//=== MipsInstPrinter.h - Convert Mips MCInst to assembly syntax -*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class prints a Mips MCInst to a .s file.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|MIPSINSTPRINTER_H
end_ifndef

begin_define
define|#
directive|define
name|MIPSINSTPRINTER_H
end_define

begin_include
include|#
directive|include
file|"llvm/MC/MCInstPrinter.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|// These enumeration declarations were originally in MipsInstrInfo.h but
comment|// had to be moved here to avoid circular dependencies between
comment|// LLVMMipsCodeGen and LLVMMipsAsmPrinter.
name|namespace
name|Mips
block|{
comment|// Mips Branch Codes
enum|enum
name|FPBranchCode
block|{
name|BRANCH_F
block|,
name|BRANCH_T
block|,
name|BRANCH_FL
block|,
name|BRANCH_TL
block|,
name|BRANCH_INVALID
block|}
enum|;
comment|// Mips Condition Codes
enum|enum
name|CondCode
block|{
comment|// To be used with float branch True
name|FCOND_F
block|,
name|FCOND_UN
block|,
name|FCOND_OEQ
block|,
name|FCOND_UEQ
block|,
name|FCOND_OLT
block|,
name|FCOND_ULT
block|,
name|FCOND_OLE
block|,
name|FCOND_ULE
block|,
name|FCOND_SF
block|,
name|FCOND_NGLE
block|,
name|FCOND_SEQ
block|,
name|FCOND_NGL
block|,
name|FCOND_LT
block|,
name|FCOND_NGE
block|,
name|FCOND_LE
block|,
name|FCOND_NGT
block|,
comment|// To be used with float branch False
comment|// This conditions have the same mnemonic as the
comment|// above ones, but are used with a branch False;
name|FCOND_T
block|,
name|FCOND_OR
block|,
name|FCOND_UNE
block|,
name|FCOND_ONE
block|,
name|FCOND_UGE
block|,
name|FCOND_OGE
block|,
name|FCOND_UGT
block|,
name|FCOND_OGT
block|,
name|FCOND_ST
block|,
name|FCOND_GLE
block|,
name|FCOND_SNE
block|,
name|FCOND_GL
block|,
name|FCOND_NLT
block|,
name|FCOND_GE
block|,
name|FCOND_NLE
block|,
name|FCOND_GT
block|}
enum|;
specifier|const
name|char
modifier|*
name|MipsFCCToString
argument_list|(
name|Mips
operator|::
name|CondCode
name|CC
argument_list|)
decl_stmt|;
block|}
comment|// end namespace Mips
name|class
name|TargetMachine
decl_stmt|;
name|class
name|MipsInstPrinter
range|:
name|public
name|MCInstPrinter
block|{
name|public
operator|:
name|MipsInstPrinter
argument_list|(
specifier|const
name|MCAsmInfo
operator|&
name|MAI
argument_list|,
specifier|const
name|MCInstrInfo
operator|&
name|MII
argument_list|,
specifier|const
name|MCRegisterInfo
operator|&
name|MRI
argument_list|)
operator|:
name|MCInstPrinter
argument_list|(
argument|MAI
argument_list|,
argument|MII
argument_list|,
argument|MRI
argument_list|)
block|{}
comment|// Autogenerated by tblgen.
name|void
name|printInstruction
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|O
argument_list|)
block|;
specifier|static
specifier|const
name|char
operator|*
name|getRegisterName
argument_list|(
argument|unsigned RegNo
argument_list|)
block|;
name|virtual
name|void
name|printRegName
argument_list|(
argument|raw_ostream&OS
argument_list|,
argument|unsigned RegNo
argument_list|)
specifier|const
block|;
name|virtual
name|void
name|printInst
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|raw_ostream&O
argument_list|,
argument|StringRef Annot
argument_list|)
block|;
name|bool
name|printAliasInstr
argument_list|(
specifier|const
name|MCInst
operator|*
name|MI
argument_list|,
name|raw_ostream
operator|&
name|OS
argument_list|)
block|;
name|private
operator|:
name|void
name|printOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printUnsignedImm
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printUnsignedImm8
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printMemOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printMemOperandEA
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printFCCOperand
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|void
name|printSHFMask
argument_list|(
argument|const MCInst *MI
argument_list|,
argument|int opNum
argument_list|,
argument|raw_ostream&O
argument_list|)
block|;
name|bool
name|printAlias
argument_list|(
argument|const char *Str
argument_list|,
argument|const MCInst&MI
argument_list|,
argument|unsigned OpNo
argument_list|,
argument|raw_ostream&OS
argument_list|)
block|;
name|bool
name|printAlias
argument_list|(
argument|const char *Str
argument_list|,
argument|const MCInst&MI
argument_list|,
argument|unsigned OpNo0
argument_list|,
argument|unsigned OpNo1
argument_list|,
argument|raw_ostream&OS
argument_list|)
block|;
name|bool
name|printAlias
argument_list|(
specifier|const
name|MCInst
operator|&
name|MI
argument_list|,
name|raw_ostream
operator|&
name|OS
argument_list|)
block|; }
decl_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

