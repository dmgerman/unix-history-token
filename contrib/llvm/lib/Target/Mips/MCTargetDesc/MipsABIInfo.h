begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===---- MipsABIInfo.h - Information about MIPS ABI's --------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_MIPS_MCTARGETDESC_MIPSABIINFO_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_MIPS_MCTARGETDESC_MIPSABIINFO_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/ArrayRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/Triple.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/CallingConv.h"
end_include

begin_include
include|#
directive|include
file|"llvm/MC/MCRegisterInfo.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCTargetOptions
decl_stmt|;
name|class
name|StringRef
decl_stmt|;
name|class
name|TargetRegisterClass
decl_stmt|;
name|class
name|MipsABIInfo
block|{
name|public
label|:
name|enum
name|class
name|ABI
block|{
name|Unknown
operator|,
name|O32
operator|,
name|N32
operator|,
name|N64
operator|,
name|EABI
block|}
empty_stmt|;
name|protected
label|:
name|ABI
name|ThisABI
decl_stmt|;
name|public
label|:
name|MipsABIInfo
argument_list|(
argument|ABI ThisABI
argument_list|)
block|:
name|ThisABI
argument_list|(
argument|ThisABI
argument_list|)
block|{}
specifier|static
name|MipsABIInfo
name|Unknown
parameter_list|()
block|{
return|return
name|MipsABIInfo
argument_list|(
name|ABI
operator|::
name|Unknown
argument_list|)
return|;
block|}
specifier|static
name|MipsABIInfo
name|O32
parameter_list|()
block|{
return|return
name|MipsABIInfo
argument_list|(
name|ABI
operator|::
name|O32
argument_list|)
return|;
block|}
specifier|static
name|MipsABIInfo
name|N32
parameter_list|()
block|{
return|return
name|MipsABIInfo
argument_list|(
name|ABI
operator|::
name|N32
argument_list|)
return|;
block|}
specifier|static
name|MipsABIInfo
name|N64
parameter_list|()
block|{
return|return
name|MipsABIInfo
argument_list|(
name|ABI
operator|::
name|N64
argument_list|)
return|;
block|}
specifier|static
name|MipsABIInfo
name|EABI
parameter_list|()
block|{
return|return
name|MipsABIInfo
argument_list|(
name|ABI
operator|::
name|EABI
argument_list|)
return|;
block|}
specifier|static
name|MipsABIInfo
name|computeTargetABI
parameter_list|(
specifier|const
name|Triple
modifier|&
name|TT
parameter_list|,
name|StringRef
name|CPU
parameter_list|,
specifier|const
name|MCTargetOptions
modifier|&
name|Options
parameter_list|)
function_decl|;
name|bool
name|IsKnown
argument_list|()
specifier|const
block|{
return|return
name|ThisABI
operator|!=
name|ABI
operator|::
name|Unknown
return|;
block|}
name|bool
name|IsO32
argument_list|()
specifier|const
block|{
return|return
name|ThisABI
operator|==
name|ABI
operator|::
name|O32
return|;
block|}
name|bool
name|IsN32
argument_list|()
specifier|const
block|{
return|return
name|ThisABI
operator|==
name|ABI
operator|::
name|N32
return|;
block|}
name|bool
name|IsN64
argument_list|()
specifier|const
block|{
return|return
name|ThisABI
operator|==
name|ABI
operator|::
name|N64
return|;
block|}
name|bool
name|IsEABI
argument_list|()
specifier|const
block|{
return|return
name|ThisABI
operator|==
name|ABI
operator|::
name|EABI
return|;
block|}
name|ABI
name|GetEnumValue
argument_list|()
specifier|const
block|{
return|return
name|ThisABI
return|;
block|}
comment|/// The registers to use for byval arguments.
specifier|const
name|ArrayRef
operator|<
name|MCPhysReg
operator|>
name|GetByValArgRegs
argument_list|()
specifier|const
expr_stmt|;
comment|/// The registers to use for the variable argument list.
specifier|const
name|ArrayRef
operator|<
name|MCPhysReg
operator|>
name|GetVarArgRegs
argument_list|()
specifier|const
expr_stmt|;
comment|/// Obtain the size of the area allocated by the callee for arguments.
comment|/// CallingConv::FastCall affects the value for O32.
name|unsigned
name|GetCalleeAllocdArgSizeInBytes
argument_list|(
name|CallingConv
operator|::
name|ID
name|CC
argument_list|)
decl|const
decl_stmt|;
comment|/// Ordering of ABI's
comment|/// MipsGenSubtargetInfo.inc will use this to resolve conflicts when given
comment|/// multiple ABI options.
name|bool
name|operator
operator|<
operator|(
specifier|const
name|MipsABIInfo
name|Other
operator|)
specifier|const
block|{
return|return
name|ThisABI
operator|<
name|Other
operator|.
name|GetEnumValue
argument_list|()
return|;
block|}
name|unsigned
name|GetStackPtr
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|GetFramePtr
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|GetBasePtr
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|GetNullPtr
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|GetPtrAdduOp
argument_list|()
specifier|const
expr_stmt|;
name|unsigned
name|GetPtrAddiuOp
argument_list|()
specifier|const
expr_stmt|;
specifier|inline
name|bool
name|ArePtrs64bit
argument_list|()
specifier|const
block|{
return|return
name|IsN64
argument_list|()
return|;
block|}
name|unsigned
name|GetEhDataReg
argument_list|(
name|unsigned
name|I
argument_list|)
decl|const
decl_stmt|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

