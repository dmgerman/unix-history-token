begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- MipsABIFlagsSection.h - Mips ELF ABI Flags Section -------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_TARGET_MIPS_MCTARGETDESC_MIPSABIFLAGSSECTION_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_TARGET_MIPS_MCTARGETDESC_MIPSABIFLAGSSECTION_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/StringRef.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/ErrorHandling.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/MipsABIFlags.h"
end_include

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|MCStreamer
decl_stmt|;
struct|struct
name|MipsABIFlagsSection
block|{
comment|// Internal representation of the fp_abi related values used in .module.
name|enum
name|class
name|FpABIKind
block|{
name|ANY
operator|,
name|XX
operator|,
name|S32
operator|,
name|S64
operator|,
name|SOFT
block|}
empty_stmt|;
comment|// Version of flags structure.
name|uint16_t
name|Version
init|=
literal|0
decl_stmt|;
comment|// The level of the ISA: 1-5, 32, 64.
name|uint8_t
name|ISALevel
init|=
literal|0
decl_stmt|;
comment|// The revision of ISA: 0 for MIPS V and below, 1-n otherwise.
name|uint8_t
name|ISARevision
init|=
literal|0
decl_stmt|;
comment|// The size of general purpose registers.
name|Mips
operator|::
name|AFL_REG
name|GPRSize
operator|=
name|Mips
operator|::
name|AFL_REG_NONE
expr_stmt|;
comment|// The size of co-processor 1 registers.
name|Mips
operator|::
name|AFL_REG
name|CPR1Size
operator|=
name|Mips
operator|::
name|AFL_REG_NONE
expr_stmt|;
comment|// The size of co-processor 2 registers.
name|Mips
operator|::
name|AFL_REG
name|CPR2Size
operator|=
name|Mips
operator|::
name|AFL_REG_NONE
expr_stmt|;
comment|// Processor-specific extension.
name|Mips
operator|::
name|AFL_EXT
name|ISAExtension
operator|=
name|Mips
operator|::
name|AFL_EXT_NONE
expr_stmt|;
comment|// Mask of ASEs used.
name|uint32_t
name|ASESet
init|=
literal|0
decl_stmt|;
name|bool
name|OddSPReg
init|=
name|false
decl_stmt|;
name|bool
name|Is32BitABI
init|=
name|false
decl_stmt|;
name|protected
label|:
comment|// The floating-point ABI.
name|FpABIKind
name|FpABI
init|=
name|FpABIKind
operator|::
name|ANY
decl_stmt|;
name|public
label|:
name|MipsABIFlagsSection
argument_list|()
operator|=
expr|default
expr_stmt|;
name|uint16_t
name|getVersionValue
parameter_list|()
block|{
return|return
operator|(
name|uint16_t
operator|)
name|Version
return|;
block|}
name|uint8_t
name|getISALevelValue
parameter_list|()
block|{
return|return
operator|(
name|uint8_t
operator|)
name|ISALevel
return|;
block|}
name|uint8_t
name|getISARevisionValue
parameter_list|()
block|{
return|return
operator|(
name|uint8_t
operator|)
name|ISARevision
return|;
block|}
name|uint8_t
name|getGPRSizeValue
parameter_list|()
block|{
return|return
operator|(
name|uint8_t
operator|)
name|GPRSize
return|;
block|}
name|uint8_t
name|getCPR1SizeValue
parameter_list|()
function_decl|;
name|uint8_t
name|getCPR2SizeValue
parameter_list|()
block|{
return|return
operator|(
name|uint8_t
operator|)
name|CPR2Size
return|;
block|}
name|uint8_t
name|getFpABIValue
parameter_list|()
function_decl|;
name|uint32_t
name|getISAExtensionValue
parameter_list|()
block|{
return|return
operator|(
name|uint32_t
operator|)
name|ISAExtension
return|;
block|}
name|uint32_t
name|getASESetValue
parameter_list|()
block|{
return|return
operator|(
name|uint32_t
operator|)
name|ASESet
return|;
block|}
name|uint32_t
name|getFlags1Value
parameter_list|()
block|{
name|uint32_t
name|Value
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|OddSPReg
condition|)
name|Value
operator||=
operator|(
name|uint32_t
operator|)
name|Mips
operator|::
name|AFL_FLAGS1_ODDSPREG
expr_stmt|;
return|return
name|Value
return|;
block|}
name|uint32_t
name|getFlags2Value
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
name|FpABIKind
name|getFpABI
parameter_list|()
block|{
return|return
name|FpABI
return|;
block|}
name|void
name|setFpABI
parameter_list|(
name|FpABIKind
name|Value
parameter_list|,
name|bool
name|IsABI32Bit
parameter_list|)
block|{
name|FpABI
operator|=
name|Value
expr_stmt|;
name|Is32BitABI
operator|=
name|IsABI32Bit
expr_stmt|;
block|}
name|StringRef
name|getFpABIString
parameter_list|(
name|FpABIKind
name|Value
parameter_list|)
function_decl|;
name|template
operator|<
name|class
name|PredicateLibrary
operator|>
name|void
name|setISALevelAndRevisionFromPredicates
argument_list|(
argument|const PredicateLibrary&P
argument_list|)
block|{
if|if
condition|(
name|P
operator|.
name|hasMips64
argument_list|()
condition|)
block|{
name|ISALevel
operator|=
literal|64
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|hasMips64r6
argument_list|()
condition|)
name|ISARevision
operator|=
literal|6
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips64r5
argument_list|()
condition|)
name|ISARevision
operator|=
literal|5
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips64r3
argument_list|()
condition|)
name|ISARevision
operator|=
literal|3
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips64r2
argument_list|()
condition|)
name|ISARevision
operator|=
literal|2
expr_stmt|;
else|else
name|ISARevision
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips32
argument_list|()
condition|)
block|{
name|ISALevel
operator|=
literal|32
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|hasMips32r6
argument_list|()
condition|)
name|ISARevision
operator|=
literal|6
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips32r5
argument_list|()
condition|)
name|ISARevision
operator|=
literal|5
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips32r3
argument_list|()
condition|)
name|ISARevision
operator|=
literal|3
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips32r2
argument_list|()
condition|)
name|ISARevision
operator|=
literal|2
expr_stmt|;
else|else
name|ISARevision
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|ISARevision
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|hasMips5
argument_list|()
condition|)
name|ISALevel
operator|=
literal|5
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips4
argument_list|()
condition|)
name|ISALevel
operator|=
literal|4
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips3
argument_list|()
condition|)
name|ISALevel
operator|=
literal|3
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips2
argument_list|()
condition|)
name|ISALevel
operator|=
literal|2
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMips1
argument_list|()
condition|)
name|ISALevel
operator|=
literal|1
expr_stmt|;
else|else
name|llvm_unreachable
argument_list|(
literal|"Unknown ISA level!"
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|class
name|PredicateLibrary
operator|>
name|void
name|setGPRSizeFromPredicates
argument_list|(
argument|const PredicateLibrary&P
argument_list|)
block|{
name|GPRSize
operator|=
name|P
operator|.
name|isGP64bit
argument_list|()
operator|?
name|Mips
operator|::
name|AFL_REG_64
operator|:
name|Mips
operator|::
name|AFL_REG_32
block|;   }
name|template
operator|<
name|class
name|PredicateLibrary
operator|>
name|void
name|setCPR1SizeFromPredicates
argument_list|(
argument|const PredicateLibrary&P
argument_list|)
block|{
if|if
condition|(
name|P
operator|.
name|useSoftFloat
argument_list|()
condition|)
name|CPR1Size
operator|=
name|Mips
operator|::
name|AFL_REG_NONE
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|hasMSA
argument_list|()
condition|)
name|CPR1Size
operator|=
name|Mips
operator|::
name|AFL_REG_128
expr_stmt|;
else|else
name|CPR1Size
operator|=
name|P
operator|.
name|isFP64bit
argument_list|()
condition|?
name|Mips
operator|::
name|AFL_REG_64
else|:
name|Mips
operator|::
name|AFL_REG_32
expr_stmt|;
block|}
name|template
operator|<
name|class
name|PredicateLibrary
operator|>
name|void
name|setISAExtensionFromPredicates
argument_list|(
argument|const PredicateLibrary&P
argument_list|)
block|{
if|if
condition|(
name|P
operator|.
name|hasCnMips
argument_list|()
condition|)
name|ISAExtension
operator|=
name|Mips
operator|::
name|AFL_EXT_OCTEON
expr_stmt|;
else|else
name|ISAExtension
operator|=
name|Mips
operator|::
name|AFL_EXT_NONE
expr_stmt|;
block|}
name|template
operator|<
name|class
name|PredicateLibrary
operator|>
name|void
name|setASESetFromPredicates
argument_list|(
argument|const PredicateLibrary&P
argument_list|)
block|{
name|ASESet
operator|=
literal|0
block|;
if|if
condition|(
name|P
operator|.
name|hasDSP
argument_list|()
condition|)
name|ASESet
operator||=
name|Mips
operator|::
name|AFL_ASE_DSP
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|hasDSPR2
argument_list|()
condition|)
name|ASESet
operator||=
name|Mips
operator|::
name|AFL_ASE_DSPR2
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|hasMSA
argument_list|()
condition|)
name|ASESet
operator||=
name|Mips
operator|::
name|AFL_ASE_MSA
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|inMicroMipsMode
argument_list|()
condition|)
name|ASESet
operator||=
name|Mips
operator|::
name|AFL_ASE_MICROMIPS
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|inMips16Mode
argument_list|()
condition|)
name|ASESet
operator||=
name|Mips
operator|::
name|AFL_ASE_MIPS16
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|hasMT
argument_list|()
condition|)
name|ASESet
operator||=
name|Mips
operator|::
name|AFL_ASE_MT
expr_stmt|;
block|}
name|template
decl|<
name|class
name|PredicateLibrary
decl|>
name|void
name|setFpAbiFromPredicates
argument_list|(
specifier|const
name|PredicateLibrary
operator|&
name|P
argument_list|)
block|{
name|Is32BitABI
operator|=
name|P
operator|.
name|isABI_O32
argument_list|()
expr_stmt|;
name|FpABI
operator|=
name|FpABIKind
operator|::
name|ANY
expr_stmt|;
if|if
condition|(
name|P
operator|.
name|useSoftFloat
argument_list|()
condition|)
name|FpABI
operator|=
name|FpABIKind
operator|::
name|SOFT
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|isABI_N32
argument_list|()
operator|||
name|P
operator|.
name|isABI_N64
argument_list|()
condition|)
name|FpABI
operator|=
name|FpABIKind
operator|::
name|S64
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|isABI_O32
argument_list|()
condition|)
block|{
if|if
condition|(
name|P
operator|.
name|isABI_FPXX
argument_list|()
condition|)
name|FpABI
operator|=
name|FpABIKind
operator|::
name|XX
expr_stmt|;
elseif|else
if|if
condition|(
name|P
operator|.
name|isFP64bit
argument_list|()
condition|)
name|FpABI
operator|=
name|FpABIKind
operator|::
name|S64
expr_stmt|;
else|else
name|FpABI
operator|=
name|FpABIKind
operator|::
name|S32
expr_stmt|;
block|}
block|}
name|template
decl|<
name|class
name|PredicateLibrary
decl|>
name|void
name|setAllFromPredicates
argument_list|(
specifier|const
name|PredicateLibrary
operator|&
name|P
argument_list|)
block|{
name|setISALevelAndRevisionFromPredicates
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|setGPRSizeFromPredicates
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|setCPR1SizeFromPredicates
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|setISAExtensionFromPredicates
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|setASESetFromPredicates
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|setFpAbiFromPredicates
argument_list|(
name|P
argument_list|)
expr_stmt|;
name|OddSPReg
operator|=
name|P
operator|.
name|useOddSPReg
argument_list|()
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|MCStreamer
operator|&
name|operator
operator|<<
operator|(
name|MCStreamer
operator|&
name|OS
operator|,
name|MipsABIFlagsSection
operator|&
name|ABIFlagsSection
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// end namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// LLVM_LIB_TARGET_MIPS_MCTARGETDESC_MIPSABIFLAGSSECTION_H
end_comment

end_unit

