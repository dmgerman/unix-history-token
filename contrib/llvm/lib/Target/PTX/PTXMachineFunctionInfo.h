begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===- PTXMachineFuctionInfo.h - PTX machine function info -------*- C++ -*-==//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file declares PTX-specific per-machine-function information.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|PTX_MACHINE_FUNCTION_INFO_H
end_ifndef

begin_define
define|#
directive|define
name|PTX_MACHINE_FUNCTION_INFO_H
end_define

begin_include
include|#
directive|include
file|"PTX.h"
end_include

begin_include
include|#
directive|include
file|"PTXParamManager.h"
end_include

begin_include
include|#
directive|include
file|"PTXRegisterInfo.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/DenseSet.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/StringExtras.h"
end_include

begin_include
include|#
directive|include
file|"llvm/CodeGen/MachineFunction.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/Debug.h"
end_include

begin_include
include|#
directive|include
file|"llvm/Support/raw_ostream.h"
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
comment|/// PTXMachineFunctionInfo - This class is derived from MachineFunction and
comment|/// contains private PTX target-specific information for each MachineFunction.
comment|///
name|class
name|PTXMachineFunctionInfo
range|:
name|public
name|MachineFunctionInfo
block|{
name|private
operator|:
name|bool
name|IsKernel
block|;
name|DenseSet
operator|<
name|unsigned
operator|>
name|RegArgs
block|;
name|DenseSet
operator|<
name|unsigned
operator|>
name|RegRets
block|;
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|unsigned
operator|>
name|RegisterList
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|TargetRegisterClass
operator|*
operator|,
name|RegisterList
operator|>
name|RegisterMap
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|unsigned
operator|,
name|std
operator|::
name|string
operator|>
name|RegisterNameMap
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|int
operator|,
name|std
operator|::
name|string
operator|>
name|FrameMap
expr_stmt|;
name|RegisterMap
name|UsedRegs
decl_stmt|;
name|RegisterNameMap
name|RegNames
decl_stmt|;
name|FrameMap
name|FrameSymbols
decl_stmt|;
name|PTXParamManager
name|ParamManager
decl_stmt|;
name|public
label|:
typedef|typedef
name|DenseSet
operator|<
name|unsigned
operator|>
operator|::
name|const_iterator
name|reg_iterator
expr_stmt|;
name|PTXMachineFunctionInfo
argument_list|(
name|MachineFunction
operator|&
name|MF
argument_list|)
operator|:
name|IsKernel
argument_list|(
argument|false
argument_list|)
block|{
name|UsedRegs
index|[
name|PTX
operator|::
name|RegPredRegisterClass
index|]
operator|=
name|RegisterList
argument_list|()
block|;
name|UsedRegs
index|[
name|PTX
operator|::
name|RegI16RegisterClass
index|]
operator|=
name|RegisterList
argument_list|()
block|;
name|UsedRegs
index|[
name|PTX
operator|::
name|RegI32RegisterClass
index|]
operator|=
name|RegisterList
argument_list|()
block|;
name|UsedRegs
index|[
name|PTX
operator|::
name|RegI64RegisterClass
index|]
operator|=
name|RegisterList
argument_list|()
block|;
name|UsedRegs
index|[
name|PTX
operator|::
name|RegF32RegisterClass
index|]
operator|=
name|RegisterList
argument_list|()
block|;
name|UsedRegs
index|[
name|PTX
operator|::
name|RegF64RegisterClass
index|]
operator|=
name|RegisterList
argument_list|()
block|;     }
comment|/// getParamManager - Returns the PTXParamManager instance for this function.
name|PTXParamManager
operator|&
name|getParamManager
argument_list|()
block|{
return|return
name|ParamManager
return|;
block|}
specifier|const
name|PTXParamManager
operator|&
name|getParamManager
argument_list|()
specifier|const
block|{
return|return
name|ParamManager
return|;
block|}
comment|/// setKernel/isKernel - Gets/sets a flag that indicates if this function is
comment|/// a PTX kernel function.
name|void
name|setKernel
parameter_list|(
name|bool
name|_IsKernel
init|=
name|true
parameter_list|)
block|{
name|IsKernel
operator|=
name|_IsKernel
expr_stmt|;
block|}
name|bool
name|isKernel
argument_list|()
specifier|const
block|{
return|return
name|IsKernel
return|;
block|}
comment|/// argreg_begin/argreg_end - Returns iterators to the set of registers
comment|/// containing function arguments.
name|reg_iterator
name|argreg_begin
argument_list|()
specifier|const
block|{
return|return
name|RegArgs
operator|.
name|begin
argument_list|()
return|;
block|}
name|reg_iterator
name|argreg_end
argument_list|()
specifier|const
block|{
return|return
name|RegArgs
operator|.
name|end
argument_list|()
return|;
block|}
comment|/// retreg_begin/retreg_end - Returns iterators to the set of registers
comment|/// containing the function return values.
name|reg_iterator
name|retreg_begin
argument_list|()
specifier|const
block|{
return|return
name|RegRets
operator|.
name|begin
argument_list|()
return|;
block|}
name|reg_iterator
name|retreg_end
argument_list|()
specifier|const
block|{
return|return
name|RegRets
operator|.
name|end
argument_list|()
return|;
block|}
comment|/// addRetReg - Adds a register to the set of return-value registers.
name|void
name|addRetReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|RegRets
operator|.
name|count
argument_list|(
name|Reg
argument_list|)
condition|)
block|{
name|RegRets
operator|.
name|insert
argument_list|(
name|Reg
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
name|name
operator|=
literal|"%ret"
expr_stmt|;
name|name
operator|+=
name|utostr
argument_list|(
name|RegRets
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|RegNames
index|[
name|Reg
index|]
operator|=
name|name
expr_stmt|;
block|}
block|}
comment|/// addArgReg - Adds a register to the set of function argument registers.
name|void
name|addArgReg
parameter_list|(
name|unsigned
name|Reg
parameter_list|)
block|{
name|RegArgs
operator|.
name|insert
argument_list|(
name|Reg
argument_list|)
expr_stmt|;
name|std
operator|::
name|string
name|name
expr_stmt|;
name|name
operator|=
literal|"%param"
expr_stmt|;
name|name
operator|+=
name|utostr
argument_list|(
name|RegArgs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|RegNames
index|[
name|Reg
index|]
operator|=
name|name
expr_stmt|;
block|}
comment|/// addVirtualRegister - Adds a virtual register to the set of all used
comment|/// registers in the function.
name|void
name|addVirtualRegister
parameter_list|(
specifier|const
name|TargetRegisterClass
modifier|*
name|TRC
parameter_list|,
name|unsigned
name|Reg
parameter_list|)
block|{
name|std
operator|::
name|string
name|name
expr_stmt|;
comment|// Do not count registers that are argument/return registers.
if|if
condition|(
operator|!
name|RegRets
operator|.
name|count
argument_list|(
name|Reg
argument_list|)
operator|&&
operator|!
name|RegArgs
operator|.
name|count
argument_list|(
name|Reg
argument_list|)
condition|)
block|{
name|UsedRegs
index|[
name|TRC
index|]
operator|.
name|push_back
argument_list|(
name|Reg
argument_list|)
expr_stmt|;
if|if
condition|(
name|TRC
operator|==
name|PTX
operator|::
name|RegPredRegisterClass
condition|)
name|name
operator|=
literal|"%p"
expr_stmt|;
elseif|else
if|if
condition|(
name|TRC
operator|==
name|PTX
operator|::
name|RegI16RegisterClass
condition|)
name|name
operator|=
literal|"%rh"
expr_stmt|;
elseif|else
if|if
condition|(
name|TRC
operator|==
name|PTX
operator|::
name|RegI32RegisterClass
condition|)
name|name
operator|=
literal|"%r"
expr_stmt|;
elseif|else
if|if
condition|(
name|TRC
operator|==
name|PTX
operator|::
name|RegI64RegisterClass
condition|)
name|name
operator|=
literal|"%rd"
expr_stmt|;
elseif|else
if|if
condition|(
name|TRC
operator|==
name|PTX
operator|::
name|RegF32RegisterClass
condition|)
name|name
operator|=
literal|"%f"
expr_stmt|;
elseif|else
if|if
condition|(
name|TRC
operator|==
name|PTX
operator|::
name|RegF64RegisterClass
condition|)
name|name
operator|=
literal|"%fd"
expr_stmt|;
else|else
name|llvm_unreachable
argument_list|(
literal|"Invalid register class"
argument_list|)
expr_stmt|;
name|name
operator|+=
name|utostr
argument_list|(
name|UsedRegs
index|[
name|TRC
index|]
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|RegNames
index|[
name|Reg
index|]
operator|=
name|name
expr_stmt|;
block|}
block|}
comment|/// getRegisterName - Returns the name of the specified virtual register. This
comment|/// name is used during PTX emission.
specifier|const
name|char
modifier|*
name|getRegisterName
argument_list|(
name|unsigned
name|Reg
argument_list|)
decl|const
block|{
if|if
condition|(
name|RegNames
operator|.
name|count
argument_list|(
name|Reg
argument_list|)
condition|)
return|return
name|RegNames
operator|.
name|find
argument_list|(
name|Reg
argument_list|)
operator|->
name|second
operator|.
name|c_str
argument_list|()
return|;
elseif|else
if|if
condition|(
name|Reg
operator|==
name|PTX
operator|::
name|NoRegister
condition|)
return|return
literal|"%noreg"
return|;
else|else
name|llvm_unreachable
argument_list|(
literal|"Register not in register name map"
argument_list|)
expr_stmt|;
block|}
comment|/// getNumRegistersForClass - Returns the number of virtual registers that are
comment|/// used for the specified register class.
name|unsigned
name|getNumRegistersForClass
argument_list|(
specifier|const
name|TargetRegisterClass
operator|*
name|TRC
argument_list|)
decl|const
block|{
return|return
name|UsedRegs
operator|.
name|lookup
argument_list|(
name|TRC
argument_list|)
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// getFrameSymbol - Returns the symbol name for the given FrameIndex.
specifier|const
name|char
modifier|*
name|getFrameSymbol
parameter_list|(
name|int
name|FrameIndex
parameter_list|)
block|{
if|if
condition|(
name|FrameSymbols
operator|.
name|count
argument_list|(
name|FrameIndex
argument_list|)
condition|)
block|{
return|return
name|FrameSymbols
operator|.
name|lookup
argument_list|(
name|FrameIndex
argument_list|)
operator|.
name|c_str
argument_list|()
return|;
block|}
else|else
block|{
name|std
operator|::
name|string
name|Name
operator|=
literal|"__local"
expr_stmt|;
name|Name
operator|+=
name|utostr
argument_list|(
name|FrameIndex
argument_list|)
expr_stmt|;
comment|// The whole point of caching this name is to ensure the pointer we pass
comment|// to any getExternalSymbol() calls will remain valid for the lifetime of
comment|// the back-end instance. This is to work around an issue in SelectionDAG
comment|// where symbol names are expected to be life-long strings.
name|FrameSymbols
index|[
name|FrameIndex
index|]
operator|=
name|Name
expr_stmt|;
return|return
name|FrameSymbols
index|[
name|FrameIndex
index|]
operator|.
name|c_str
argument_list|()
return|;
block|}
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// class PTXMachineFunctionInfo
end_comment

begin_comment
unit|}
comment|// namespace llvm
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// PTX_MACHINE_FUNCTION_INFO_H
end_comment

end_unit

