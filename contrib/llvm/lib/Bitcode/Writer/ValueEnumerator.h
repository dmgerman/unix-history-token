begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Bitcode/Writer/ValueEnumerator.h - Number values --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class gives values and types Unique ID's.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_BITCODE_WRITER_VALUEENUMERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_BITCODE_WRITER_VALUEENUMERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/SmallVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/UniqueVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Attributes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/UseListOrder.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
name|class
name|Instruction
decl_stmt|;
name|class
name|BasicBlock
decl_stmt|;
name|class
name|Comdat
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|Module
decl_stmt|;
name|class
name|Metadata
decl_stmt|;
name|class
name|LocalAsMetadata
decl_stmt|;
name|class
name|MDNode
decl_stmt|;
name|class
name|NamedMDNode
decl_stmt|;
name|class
name|AttributeSet
decl_stmt|;
name|class
name|ValueSymbolTable
decl_stmt|;
name|class
name|MDSymbolTable
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|ValueEnumerator
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Type
operator|*
operator|>
name|TypeList
expr_stmt|;
comment|// For each value, we remember its Value* and occurrence frequency.
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|Value
operator|*
operator|,
name|unsigned
operator|>
expr|>
name|ValueList
expr_stmt|;
name|UseListOrderStack
name|UseListOrders
decl_stmt|;
name|private
label|:
typedef|typedef
name|DenseMap
operator|<
name|Type
operator|*
operator|,
name|unsigned
operator|>
name|TypeMapType
expr_stmt|;
name|TypeMapType
name|TypeMap
decl_stmt|;
name|TypeList
name|Types
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Value
operator|*
operator|,
name|unsigned
operator|>
name|ValueMapType
expr_stmt|;
name|ValueMapType
name|ValueMap
decl_stmt|;
name|ValueList
name|Values
decl_stmt|;
typedef|typedef
name|UniqueVector
operator|<
specifier|const
name|Comdat
operator|*
operator|>
name|ComdatSetType
expr_stmt|;
name|ComdatSetType
name|Comdats
decl_stmt|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|Metadata
operator|*
operator|>
name|MDs
expr_stmt|;
name|SmallVector
operator|<
specifier|const
name|LocalAsMetadata
operator|*
operator|,
literal|8
operator|>
name|FunctionLocalMDs
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Metadata
operator|*
operator|,
name|unsigned
operator|>
name|MetadataMapType
expr_stmt|;
name|MetadataMapType
name|MetadataMap
decl_stmt|;
name|bool
name|HasMDString
decl_stmt|;
name|bool
name|HasDILocation
decl_stmt|;
name|bool
name|HasGenericDINode
decl_stmt|;
name|bool
name|ShouldPreserveUseListOrder
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|AttributeSet
operator|,
name|unsigned
operator|>
name|AttributeGroupMapType
expr_stmt|;
name|AttributeGroupMapType
name|AttributeGroupMap
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|AttributeSet
operator|>
name|AttributeGroups
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|AttributeSet
operator|,
name|unsigned
operator|>
name|AttributeMapType
expr_stmt|;
name|AttributeMapType
name|AttributeMap
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|AttributeSet
operator|>
name|Attribute
expr_stmt|;
comment|/// GlobalBasicBlockIDs - This map memoizes the basic block ID's referenced by
comment|/// the "getGlobalBasicBlockID" method.
name|mutable
name|DenseMap
operator|<
specifier|const
name|BasicBlock
operator|*
operator|,
name|unsigned
operator|>
name|GlobalBasicBlockIDs
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Instruction
operator|*
operator|,
name|unsigned
operator|>
name|InstructionMapType
expr_stmt|;
name|InstructionMapType
name|InstructionMap
decl_stmt|;
name|unsigned
name|InstructionCount
decl_stmt|;
comment|/// BasicBlocks - This contains all the basic blocks for the currently
comment|/// incorporated function.  Their reverse mapping is stored in ValueMap.
name|std
operator|::
name|vector
operator|<
specifier|const
name|BasicBlock
operator|*
operator|>
name|BasicBlocks
expr_stmt|;
comment|/// When a function is incorporated, this is the size of the Values list
comment|/// before incorporation.
name|unsigned
name|NumModuleValues
decl_stmt|;
comment|/// When a function is incorporated, this is the size of the Metadatas list
comment|/// before incorporation.
name|unsigned
name|NumModuleMDs
decl_stmt|;
name|unsigned
name|FirstFuncConstantID
decl_stmt|;
name|unsigned
name|FirstInstID
decl_stmt|;
name|ValueEnumerator
argument_list|(
specifier|const
name|ValueEnumerator
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|ValueEnumerator
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|public
label|:
name|ValueEnumerator
argument_list|(
argument|const Module&M
argument_list|,
argument|bool ShouldPreserveUseListOrder
argument_list|)
empty_stmt|;
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|ValueMapType
operator|&
name|Map
argument_list|,
specifier|const
name|char
operator|*
name|Name
argument_list|)
decl|const
decl_stmt|;
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|MetadataMapType
operator|&
name|Map
argument_list|,
specifier|const
name|char
operator|*
name|Name
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getValueID
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getMetadataID
argument_list|(
specifier|const
name|Metadata
operator|*
name|MD
argument_list|)
decl|const
block|{
name|auto
name|ID
init|=
name|getMetadataOrNullID
argument_list|(
name|MD
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ID
operator|!=
literal|0
operator|&&
literal|"Metadata not in slotcalculator!"
argument_list|)
expr_stmt|;
return|return
name|ID
operator|-
literal|1
return|;
block|}
name|unsigned
name|getMetadataOrNullID
argument_list|(
specifier|const
name|Metadata
operator|*
name|MD
argument_list|)
decl|const
block|{
return|return
name|MetadataMap
operator|.
name|lookup
argument_list|(
name|MD
argument_list|)
return|;
block|}
name|unsigned
name|numMDs
argument_list|()
specifier|const
block|{
return|return
name|MDs
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|hasMDString
argument_list|()
specifier|const
block|{
return|return
name|HasMDString
return|;
block|}
name|bool
name|hasDILocation
argument_list|()
specifier|const
block|{
return|return
name|HasDILocation
return|;
block|}
name|bool
name|hasGenericDINode
argument_list|()
specifier|const
block|{
return|return
name|HasGenericDINode
return|;
block|}
name|bool
name|shouldPreserveUseListOrder
argument_list|()
specifier|const
block|{
return|return
name|ShouldPreserveUseListOrder
return|;
block|}
name|unsigned
name|getTypeID
argument_list|(
name|Type
operator|*
name|T
argument_list|)
decl|const
block|{
name|TypeMapType
operator|::
name|const_iterator
name|I
operator|=
name|TypeMap
operator|.
name|find
argument_list|(
name|T
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|TypeMap
operator|.
name|end
argument_list|()
operator|&&
literal|"Type not in ValueEnumerator!"
argument_list|)
expr_stmt|;
return|return
name|I
operator|->
name|second
operator|-
literal|1
return|;
block|}
name|unsigned
name|getInstructionID
argument_list|(
specifier|const
name|Instruction
operator|*
name|I
argument_list|)
decl|const
decl_stmt|;
name|void
name|setInstructionID
parameter_list|(
specifier|const
name|Instruction
modifier|*
name|I
parameter_list|)
function_decl|;
name|unsigned
name|getAttributeID
argument_list|(
name|AttributeSet
name|PAL
argument_list|)
decl|const
block|{
if|if
condition|(
name|PAL
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// Null maps to zero.
name|AttributeMapType
operator|::
name|const_iterator
name|I
operator|=
name|AttributeMap
operator|.
name|find
argument_list|(
name|PAL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|AttributeMap
operator|.
name|end
argument_list|()
operator|&&
literal|"Attribute not in ValueEnumerator!"
argument_list|)
expr_stmt|;
return|return
name|I
operator|->
name|second
return|;
block|}
name|unsigned
name|getAttributeGroupID
argument_list|(
name|AttributeSet
name|PAL
argument_list|)
decl|const
block|{
if|if
condition|(
name|PAL
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// Null maps to zero.
name|AttributeGroupMapType
operator|::
name|const_iterator
name|I
operator|=
name|AttributeGroupMap
operator|.
name|find
argument_list|(
name|PAL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|AttributeGroupMap
operator|.
name|end
argument_list|()
operator|&&
literal|"Attribute not in ValueEnumerator!"
argument_list|)
expr_stmt|;
return|return
name|I
operator|->
name|second
return|;
block|}
comment|/// getFunctionConstantRange - Return the range of values that corresponds to
comment|/// function-local constants.
name|void
name|getFunctionConstantRange
argument_list|(
name|unsigned
operator|&
name|Start
argument_list|,
name|unsigned
operator|&
name|End
argument_list|)
decl|const
block|{
name|Start
operator|=
name|FirstFuncConstantID
expr_stmt|;
name|End
operator|=
name|FirstInstID
expr_stmt|;
block|}
specifier|const
name|ValueList
operator|&
name|getValues
argument_list|()
specifier|const
block|{
return|return
name|Values
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
specifier|const
name|Metadata
operator|*
operator|>
operator|&
name|getMDs
argument_list|()
specifier|const
block|{
return|return
name|MDs
return|;
block|}
specifier|const
name|SmallVectorImpl
operator|<
specifier|const
name|LocalAsMetadata
operator|*
operator|>
operator|&
name|getFunctionLocalMDs
argument_list|()
specifier|const
block|{
return|return
name|FunctionLocalMDs
return|;
block|}
specifier|const
name|TypeList
operator|&
name|getTypes
argument_list|()
specifier|const
block|{
return|return
name|Types
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
specifier|const
name|BasicBlock
operator|*
operator|>
operator|&
name|getBasicBlocks
argument_list|()
specifier|const
block|{
return|return
name|BasicBlocks
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|AttributeSet
operator|>
operator|&
name|getAttributes
argument_list|()
specifier|const
block|{
return|return
name|Attribute
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|AttributeSet
operator|>
operator|&
name|getAttributeGroups
argument_list|()
specifier|const
block|{
return|return
name|AttributeGroups
return|;
block|}
specifier|const
name|ComdatSetType
operator|&
name|getComdats
argument_list|()
specifier|const
block|{
return|return
name|Comdats
return|;
block|}
name|unsigned
name|getComdatID
argument_list|(
specifier|const
name|Comdat
operator|*
name|C
argument_list|)
decl|const
decl_stmt|;
comment|/// getGlobalBasicBlockID - This returns the function-specific ID for the
comment|/// specified basic block.  This is relatively expensive information, so it
comment|/// should only be used by rare constructs such as address-of-label.
name|unsigned
name|getGlobalBasicBlockID
argument_list|(
specifier|const
name|BasicBlock
operator|*
name|BB
argument_list|)
decl|const
decl_stmt|;
comment|/// incorporateFunction/purgeFunction - If you'd like to deal with a function,
comment|/// use these two methods to get its data into the ValueEnumerator!
comment|///
name|void
name|incorporateFunction
parameter_list|(
specifier|const
name|Function
modifier|&
name|F
parameter_list|)
function_decl|;
name|void
name|purgeFunction
parameter_list|()
function_decl|;
name|uint64_t
name|computeBitsRequiredForTypeIndicies
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|void
name|OptimizeConstants
parameter_list|(
name|unsigned
name|CstStart
parameter_list|,
name|unsigned
name|CstEnd
parameter_list|)
function_decl|;
name|void
name|EnumerateMDNodeOperands
parameter_list|(
specifier|const
name|MDNode
modifier|*
name|N
parameter_list|)
function_decl|;
name|void
name|EnumerateMetadata
parameter_list|(
specifier|const
name|Metadata
modifier|*
name|MD
parameter_list|)
function_decl|;
name|void
name|EnumerateFunctionLocalMetadata
parameter_list|(
specifier|const
name|LocalAsMetadata
modifier|*
name|Local
parameter_list|)
function_decl|;
name|void
name|EnumerateNamedMDNode
parameter_list|(
specifier|const
name|NamedMDNode
modifier|*
name|NMD
parameter_list|)
function_decl|;
name|void
name|EnumerateValue
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|void
name|EnumerateType
parameter_list|(
name|Type
modifier|*
name|T
parameter_list|)
function_decl|;
name|void
name|EnumerateOperandType
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|void
name|EnumerateAttributes
parameter_list|(
name|AttributeSet
name|PAL
parameter_list|)
function_decl|;
name|void
name|EnumerateValueSymbolTable
parameter_list|(
specifier|const
name|ValueSymbolTable
modifier|&
name|ST
parameter_list|)
function_decl|;
name|void
name|EnumerateNamedMetadata
parameter_list|(
specifier|const
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

