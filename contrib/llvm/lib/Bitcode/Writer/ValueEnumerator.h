begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===-- Bitcode/Writer/ValueEnumerator.h - Number values --------*- C++ -*-===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is distributed under the University of Illinois Open Source
end_comment

begin_comment
comment|// License. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This class gives values and types Unique ID's.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LLVM_LIB_BITCODE_WRITER_VALUEENUMERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|LLVM_LIB_BITCODE_WRITER_VALUEENUMERATOR_H
end_define

begin_include
include|#
directive|include
file|"llvm/ADT/DenseMap.h"
end_include

begin_include
include|#
directive|include
file|"llvm/ADT/UniqueVector.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Attributes.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Metadata.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/Type.h"
end_include

begin_include
include|#
directive|include
file|"llvm/IR/UseListOrder.h"
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|llvm
block|{
name|class
name|Type
decl_stmt|;
name|class
name|Value
decl_stmt|;
name|class
name|Instruction
decl_stmt|;
name|class
name|BasicBlock
decl_stmt|;
name|class
name|Comdat
decl_stmt|;
name|class
name|Function
decl_stmt|;
name|class
name|Module
decl_stmt|;
name|class
name|Metadata
decl_stmt|;
name|class
name|LocalAsMetadata
decl_stmt|;
name|class
name|MDNode
decl_stmt|;
name|class
name|MDOperand
decl_stmt|;
name|class
name|NamedMDNode
decl_stmt|;
name|class
name|AttributeList
decl_stmt|;
name|class
name|ValueSymbolTable
decl_stmt|;
name|class
name|MDSymbolTable
decl_stmt|;
name|class
name|raw_ostream
decl_stmt|;
name|class
name|ValueEnumerator
block|{
name|public
label|:
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|Type
operator|*
operator|>
name|TypeList
expr_stmt|;
comment|// For each value, we remember its Value* and occurrence frequency.
typedef|typedef
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|pair
operator|<
specifier|const
name|Value
operator|*
operator|,
name|unsigned
operator|>
expr|>
name|ValueList
expr_stmt|;
comment|/// Attribute groups as encoded in bitcode are almost AttributeSets, but they
comment|/// include the AttributeList index, so we have to track that in our map.
typedef|typedef
name|std
operator|::
name|pair
operator|<
name|unsigned
operator|,
name|AttributeSet
operator|>
name|IndexAndAttrSet
expr_stmt|;
name|UseListOrderStack
name|UseListOrders
decl_stmt|;
name|private
label|:
typedef|typedef
name|DenseMap
operator|<
name|Type
operator|*
operator|,
name|unsigned
operator|>
name|TypeMapType
expr_stmt|;
name|TypeMapType
name|TypeMap
decl_stmt|;
name|TypeList
name|Types
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Value
operator|*
operator|,
name|unsigned
operator|>
name|ValueMapType
expr_stmt|;
name|ValueMapType
name|ValueMap
decl_stmt|;
name|ValueList
name|Values
decl_stmt|;
typedef|typedef
name|UniqueVector
operator|<
specifier|const
name|Comdat
operator|*
operator|>
name|ComdatSetType
expr_stmt|;
name|ComdatSetType
name|Comdats
decl_stmt|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|Metadata
operator|*
operator|>
name|MDs
expr_stmt|;
name|std
operator|::
name|vector
operator|<
specifier|const
name|Metadata
operator|*
operator|>
name|FunctionMDs
expr_stmt|;
comment|/// Index of information about a piece of metadata.
struct|struct
name|MDIndex
block|{
name|unsigned
name|F
init|=
literal|0
decl_stmt|;
comment|///< The ID of the function for this metadata, if any.
name|unsigned
name|ID
init|=
literal|0
decl_stmt|;
comment|///< The implicit ID of this metadata in bitcode.
name|MDIndex
argument_list|()
operator|=
expr|default
expr_stmt|;
name|explicit
name|MDIndex
argument_list|(
argument|unsigned F
argument_list|)
block|:
name|F
argument_list|(
argument|F
argument_list|)
block|{}
comment|/// Check if this has a function tag, and it's different from NewF.
name|bool
name|hasDifferentFunction
argument_list|(
name|unsigned
name|NewF
argument_list|)
decl|const
block|{
return|return
name|F
operator|&&
name|F
operator|!=
name|NewF
return|;
block|}
comment|/// Fetch the MD this references out of the given metadata array.
specifier|const
name|Metadata
modifier|*
name|get
argument_list|(
name|ArrayRef
operator|<
specifier|const
name|Metadata
operator|*
operator|>
name|MDs
argument_list|)
decl|const
block|{
name|assert
argument_list|(
name|ID
operator|&&
literal|"Expected non-zero ID"
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ID
operator|<=
name|MDs
operator|.
name|size
argument_list|()
operator|&&
literal|"Expected valid ID"
argument_list|)
expr_stmt|;
return|return
name|MDs
index|[
name|ID
operator|-
literal|1
index|]
return|;
block|}
block|}
struct|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Metadata
operator|*
operator|,
name|MDIndex
operator|>
name|MetadataMapType
expr_stmt|;
name|MetadataMapType
name|MetadataMap
decl_stmt|;
comment|/// Range of metadata IDs, as a half-open range.
struct|struct
name|MDRange
block|{
name|unsigned
name|First
init|=
literal|0
decl_stmt|;
name|unsigned
name|Last
init|=
literal|0
decl_stmt|;
comment|/// Number of strings in the prefix of the metadata range.
name|unsigned
name|NumStrings
init|=
literal|0
decl_stmt|;
name|MDRange
argument_list|()
block|{}
name|explicit
name|MDRange
argument_list|(
argument|unsigned First
argument_list|)
block|:
name|First
argument_list|(
argument|First
argument_list|)
block|{}
block|}
struct|;
name|SmallDenseMap
operator|<
name|unsigned
operator|,
name|MDRange
operator|,
literal|1
operator|>
name|FunctionMDInfo
expr_stmt|;
name|bool
name|ShouldPreserveUseListOrder
decl_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|IndexAndAttrSet
operator|,
name|unsigned
operator|>
name|AttributeGroupMapType
expr_stmt|;
name|AttributeGroupMapType
name|AttributeGroupMap
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|IndexAndAttrSet
operator|>
name|AttributeGroups
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
name|AttributeList
operator|,
name|unsigned
operator|>
name|AttributeListMapType
expr_stmt|;
name|AttributeListMapType
name|AttributeListMap
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|AttributeList
operator|>
name|AttributeLists
expr_stmt|;
comment|/// GlobalBasicBlockIDs - This map memoizes the basic block ID's referenced by
comment|/// the "getGlobalBasicBlockID" method.
name|mutable
name|DenseMap
operator|<
specifier|const
name|BasicBlock
operator|*
operator|,
name|unsigned
operator|>
name|GlobalBasicBlockIDs
expr_stmt|;
typedef|typedef
name|DenseMap
operator|<
specifier|const
name|Instruction
operator|*
operator|,
name|unsigned
operator|>
name|InstructionMapType
expr_stmt|;
name|InstructionMapType
name|InstructionMap
decl_stmt|;
name|unsigned
name|InstructionCount
decl_stmt|;
comment|/// BasicBlocks - This contains all the basic blocks for the currently
comment|/// incorporated function.  Their reverse mapping is stored in ValueMap.
name|std
operator|::
name|vector
operator|<
specifier|const
name|BasicBlock
operator|*
operator|>
name|BasicBlocks
expr_stmt|;
comment|/// When a function is incorporated, this is the size of the Values list
comment|/// before incorporation.
name|unsigned
name|NumModuleValues
decl_stmt|;
comment|/// When a function is incorporated, this is the size of the Metadatas list
comment|/// before incorporation.
name|unsigned
name|NumModuleMDs
init|=
literal|0
decl_stmt|;
name|unsigned
name|NumMDStrings
init|=
literal|0
decl_stmt|;
name|unsigned
name|FirstFuncConstantID
decl_stmt|;
name|unsigned
name|FirstInstID
decl_stmt|;
name|ValueEnumerator
argument_list|(
specifier|const
name|ValueEnumerator
operator|&
argument_list|)
operator|=
name|delete
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|ValueEnumerator
operator|&
operator|)
operator|=
name|delete
decl_stmt|;
name|public
label|:
name|ValueEnumerator
argument_list|(
argument|const Module&M
argument_list|,
argument|bool ShouldPreserveUseListOrder
argument_list|)
empty_stmt|;
name|void
name|dump
argument_list|()
specifier|const
expr_stmt|;
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|ValueMapType
operator|&
name|Map
argument_list|,
specifier|const
name|char
operator|*
name|Name
argument_list|)
decl|const
decl_stmt|;
name|void
name|print
argument_list|(
name|raw_ostream
operator|&
name|OS
argument_list|,
specifier|const
name|MetadataMapType
operator|&
name|Map
argument_list|,
specifier|const
name|char
operator|*
name|Name
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getValueID
argument_list|(
specifier|const
name|Value
operator|*
name|V
argument_list|)
decl|const
decl_stmt|;
name|unsigned
name|getMetadataID
argument_list|(
specifier|const
name|Metadata
operator|*
name|MD
argument_list|)
decl|const
block|{
name|auto
name|ID
init|=
name|getMetadataOrNullID
argument_list|(
name|MD
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ID
operator|!=
literal|0
operator|&&
literal|"Metadata not in slotcalculator!"
argument_list|)
expr_stmt|;
return|return
name|ID
operator|-
literal|1
return|;
block|}
name|unsigned
name|getMetadataOrNullID
argument_list|(
specifier|const
name|Metadata
operator|*
name|MD
argument_list|)
decl|const
block|{
return|return
name|MetadataMap
operator|.
name|lookup
argument_list|(
name|MD
argument_list|)
operator|.
name|ID
return|;
block|}
name|unsigned
name|numMDs
argument_list|()
specifier|const
block|{
return|return
name|MDs
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|shouldPreserveUseListOrder
argument_list|()
specifier|const
block|{
return|return
name|ShouldPreserveUseListOrder
return|;
block|}
name|unsigned
name|getTypeID
argument_list|(
name|Type
operator|*
name|T
argument_list|)
decl|const
block|{
name|TypeMapType
operator|::
name|const_iterator
name|I
operator|=
name|TypeMap
operator|.
name|find
argument_list|(
name|T
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|TypeMap
operator|.
name|end
argument_list|()
operator|&&
literal|"Type not in ValueEnumerator!"
argument_list|)
expr_stmt|;
return|return
name|I
operator|->
name|second
operator|-
literal|1
return|;
block|}
name|unsigned
name|getInstructionID
argument_list|(
specifier|const
name|Instruction
operator|*
name|I
argument_list|)
decl|const
decl_stmt|;
name|void
name|setInstructionID
parameter_list|(
specifier|const
name|Instruction
modifier|*
name|I
parameter_list|)
function_decl|;
name|unsigned
name|getAttributeListID
argument_list|(
name|AttributeList
name|PAL
argument_list|)
decl|const
block|{
if|if
condition|(
name|PAL
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// Null maps to zero.
name|AttributeListMapType
operator|::
name|const_iterator
name|I
operator|=
name|AttributeListMap
operator|.
name|find
argument_list|(
name|PAL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|AttributeListMap
operator|.
name|end
argument_list|()
operator|&&
literal|"Attribute not in ValueEnumerator!"
argument_list|)
expr_stmt|;
return|return
name|I
operator|->
name|second
return|;
block|}
name|unsigned
name|getAttributeGroupID
argument_list|(
name|IndexAndAttrSet
name|Group
argument_list|)
decl|const
block|{
if|if
condition|(
operator|!
name|Group
operator|.
name|second
operator|.
name|hasAttributes
argument_list|()
condition|)
return|return
literal|0
return|;
comment|// Null maps to zero.
name|AttributeGroupMapType
operator|::
name|const_iterator
name|I
operator|=
name|AttributeGroupMap
operator|.
name|find
argument_list|(
name|Group
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|I
operator|!=
name|AttributeGroupMap
operator|.
name|end
argument_list|()
operator|&&
literal|"Attribute not in ValueEnumerator!"
argument_list|)
expr_stmt|;
return|return
name|I
operator|->
name|second
return|;
block|}
comment|/// getFunctionConstantRange - Return the range of values that corresponds to
comment|/// function-local constants.
name|void
name|getFunctionConstantRange
argument_list|(
name|unsigned
operator|&
name|Start
argument_list|,
name|unsigned
operator|&
name|End
argument_list|)
decl|const
block|{
name|Start
operator|=
name|FirstFuncConstantID
expr_stmt|;
name|End
operator|=
name|FirstInstID
expr_stmt|;
block|}
specifier|const
name|ValueList
operator|&
name|getValues
argument_list|()
specifier|const
block|{
return|return
name|Values
return|;
block|}
comment|/// Check whether the current block has any metadata to emit.
name|bool
name|hasMDs
argument_list|()
specifier|const
block|{
return|return
name|NumModuleMDs
operator|<
name|MDs
operator|.
name|size
argument_list|()
return|;
block|}
comment|/// Get the MDString metadata for this block.
name|ArrayRef
operator|<
specifier|const
name|Metadata
operator|*
operator|>
name|getMDStrings
argument_list|()
specifier|const
block|{
return|return
name|makeArrayRef
argument_list|(
name|MDs
argument_list|)
operator|.
name|slice
argument_list|(
name|NumModuleMDs
argument_list|,
name|NumMDStrings
argument_list|)
return|;
block|}
comment|/// Get the non-MDString metadata for this block.
name|ArrayRef
operator|<
specifier|const
name|Metadata
operator|*
operator|>
name|getNonMDStrings
argument_list|()
specifier|const
block|{
return|return
name|makeArrayRef
argument_list|(
name|MDs
argument_list|)
operator|.
name|slice
argument_list|(
name|NumModuleMDs
argument_list|)
operator|.
name|slice
argument_list|(
name|NumMDStrings
argument_list|)
return|;
block|}
specifier|const
name|TypeList
operator|&
name|getTypes
argument_list|()
specifier|const
block|{
return|return
name|Types
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
specifier|const
name|BasicBlock
operator|*
operator|>
operator|&
name|getBasicBlocks
argument_list|()
specifier|const
block|{
return|return
name|BasicBlocks
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|AttributeList
operator|>
operator|&
name|getAttributeLists
argument_list|()
specifier|const
block|{
return|return
name|AttributeLists
return|;
block|}
specifier|const
name|std
operator|::
name|vector
operator|<
name|IndexAndAttrSet
operator|>
operator|&
name|getAttributeGroups
argument_list|()
specifier|const
block|{
return|return
name|AttributeGroups
return|;
block|}
specifier|const
name|ComdatSetType
operator|&
name|getComdats
argument_list|()
specifier|const
block|{
return|return
name|Comdats
return|;
block|}
name|unsigned
name|getComdatID
argument_list|(
specifier|const
name|Comdat
operator|*
name|C
argument_list|)
decl|const
decl_stmt|;
comment|/// getGlobalBasicBlockID - This returns the function-specific ID for the
comment|/// specified basic block.  This is relatively expensive information, so it
comment|/// should only be used by rare constructs such as address-of-label.
name|unsigned
name|getGlobalBasicBlockID
argument_list|(
specifier|const
name|BasicBlock
operator|*
name|BB
argument_list|)
decl|const
decl_stmt|;
comment|/// incorporateFunction/purgeFunction - If you'd like to deal with a function,
comment|/// use these two methods to get its data into the ValueEnumerator!
comment|///
name|void
name|incorporateFunction
parameter_list|(
specifier|const
name|Function
modifier|&
name|F
parameter_list|)
function_decl|;
name|void
name|purgeFunction
parameter_list|()
function_decl|;
name|uint64_t
name|computeBitsRequiredForTypeIndicies
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|void
name|OptimizeConstants
parameter_list|(
name|unsigned
name|CstStart
parameter_list|,
name|unsigned
name|CstEnd
parameter_list|)
function_decl|;
comment|/// Reorder the reachable metadata.
comment|///
comment|/// This is not just an optimization, but is mandatory for emitting MDString
comment|/// correctly.
name|void
name|organizeMetadata
parameter_list|()
function_decl|;
comment|/// Drop the function tag from the transitive operands of the given node.
name|void
name|dropFunctionFromMetadata
argument_list|(
name|MetadataMapType
operator|::
name|value_type
operator|&
name|FirstMD
argument_list|)
decl_stmt|;
comment|/// Incorporate the function metadata.
comment|///
comment|/// This should be called before enumerating LocalAsMetadata for the
comment|/// function.
name|void
name|incorporateFunctionMetadata
parameter_list|(
specifier|const
name|Function
modifier|&
name|F
parameter_list|)
function_decl|;
comment|/// Enumerate a single instance of metadata with the given function tag.
comment|///
comment|/// If \c MD has already been enumerated, check that \c F matches its
comment|/// function tag.  If not, call \a dropFunctionFromMetadata().
comment|///
comment|/// Otherwise, mark \c MD as visited.  Assign it an ID, or just return it if
comment|/// it's an \a MDNode.
specifier|const
name|MDNode
modifier|*
name|enumerateMetadataImpl
parameter_list|(
name|unsigned
name|F
parameter_list|,
specifier|const
name|Metadata
modifier|*
name|MD
parameter_list|)
function_decl|;
name|unsigned
name|getMetadataFunctionID
argument_list|(
specifier|const
name|Function
operator|*
name|F
argument_list|)
decl|const
decl_stmt|;
comment|/// Enumerate reachable metadata in (almost) post-order.
comment|///
comment|/// Enumerate all the metadata reachable from MD.  We want to minimize the
comment|/// cost of reading bitcode records, and so the primary consideration is that
comment|/// operands of uniqued nodes are resolved before the nodes are read.  This
comment|/// avoids re-uniquing them on the context and factors away RAUW support.
comment|///
comment|/// This algorithm guarantees that subgraphs of uniqued nodes are in
comment|/// post-order.  Distinct subgraphs reachable only from a single uniqued node
comment|/// will be in post-order.
comment|///
comment|/// \note The relative order of a distinct and uniqued node is irrelevant.
comment|/// \a organizeMetadata() will later partition distinct nodes ahead of
comment|/// uniqued ones.
comment|///{
name|void
name|EnumerateMetadata
parameter_list|(
specifier|const
name|Function
modifier|*
name|F
parameter_list|,
specifier|const
name|Metadata
modifier|*
name|MD
parameter_list|)
function_decl|;
name|void
name|EnumerateMetadata
parameter_list|(
name|unsigned
name|F
parameter_list|,
specifier|const
name|Metadata
modifier|*
name|MD
parameter_list|)
function_decl|;
comment|///}
name|void
name|EnumerateFunctionLocalMetadata
parameter_list|(
specifier|const
name|Function
modifier|&
name|F
parameter_list|,
specifier|const
name|LocalAsMetadata
modifier|*
name|Local
parameter_list|)
function_decl|;
name|void
name|EnumerateFunctionLocalMetadata
parameter_list|(
name|unsigned
name|F
parameter_list|,
specifier|const
name|LocalAsMetadata
modifier|*
name|Local
parameter_list|)
function_decl|;
name|void
name|EnumerateNamedMDNode
parameter_list|(
specifier|const
name|NamedMDNode
modifier|*
name|NMD
parameter_list|)
function_decl|;
name|void
name|EnumerateValue
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|void
name|EnumerateType
parameter_list|(
name|Type
modifier|*
name|T
parameter_list|)
function_decl|;
name|void
name|EnumerateOperandType
parameter_list|(
specifier|const
name|Value
modifier|*
name|V
parameter_list|)
function_decl|;
name|void
name|EnumerateAttributes
parameter_list|(
name|AttributeList
name|PAL
parameter_list|)
function_decl|;
name|void
name|EnumerateValueSymbolTable
parameter_list|(
specifier|const
name|ValueSymbolTable
modifier|&
name|ST
parameter_list|)
function_decl|;
name|void
name|EnumerateNamedMetadata
parameter_list|(
specifier|const
name|Module
modifier|&
name|M
parameter_list|)
function_decl|;
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// End llvm namespace
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

