begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|//===--------------------------- wchar.h ----------------------------------===//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===//
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__need_wint_t
argument_list|)
operator|||
name|defined
argument_list|(
name|__need_mbstate_t
argument_list|)
end_if

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
argument_list|)
end_if

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_empty
empty|#include_next<wchar.h>
end_empty

begin_elif
elif|#
directive|elif
operator|!
name|defined
argument_list|(
name|_LIBCPP_WCHAR_H
argument_list|)
end_elif

begin_define
define|#
directive|define
name|_LIBCPP_WCHAR_H
end_define

begin_comment
comment|/*     wchar.h synopsis  Macros:      NULL     WCHAR_MAX     WCHAR_MIN     WEOF  Types:      mbstate_t     size_t     tm     wint_t  int fwprintf(FILE* restrict stream, const wchar_t* restrict format, ...); int fwscanf(FILE* restrict stream, const wchar_t* restrict format, ...); int swprintf(wchar_t* restrict s, size_t n, const wchar_t* restrict format, ...); int swscanf(const wchar_t* restrict s, const wchar_t* restrict format, ...); int vfwprintf(FILE* restrict stream, const wchar_t* restrict format, va_list arg); int vfwscanf(FILE* restrict stream, const wchar_t* restrict format, va_list arg);  // C99 int vswprintf(wchar_t* restrict s, size_t n, const wchar_t* restrict format, va_list arg); int vswscanf(const wchar_t* restrict s, const wchar_t* restrict format, va_list arg);  // C99 int vwprintf(const wchar_t* restrict format, va_list arg); int vwscanf(const wchar_t* restrict format, va_list arg);  // C99 int wprintf(const wchar_t* restrict format, ...); int wscanf(const wchar_t* restrict format, ...); wint_t fgetwc(FILE* stream); wchar_t* fgetws(wchar_t* restrict s, int n, FILE* restrict stream); wint_t fputwc(wchar_t c, FILE* stream); int fputws(const wchar_t* restrict s, FILE* restrict stream); int fwide(FILE* stream, int mode); wint_t getwc(FILE* stream); wint_t getwchar(); wint_t putwc(wchar_t c, FILE* stream); wint_t putwchar(wchar_t c); wint_t ungetwc(wint_t c, FILE* stream); double wcstod(const wchar_t* restrict nptr, wchar_t** restrict endptr); float wcstof(const wchar_t* restrict nptr, wchar_t** restrict endptr);         // C99 long double wcstold(const wchar_t* restrict nptr, wchar_t** restrict endptr);  // C99 long wcstol(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base); long long wcstoll(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);  // C99 unsigned long wcstoul(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base); unsigned long long wcstoull(const wchar_t* restrict nptr, wchar_t** restrict endptr, int base);  // C99 wchar_t* wcscpy(wchar_t* restrict s1, const wchar_t* restrict s2); wchar_t* wcsncpy(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n); wchar_t* wcscat(wchar_t* restrict s1, const wchar_t* restrict s2); wchar_t* wcsncat(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n); int wcscmp(const wchar_t* s1, const wchar_t* s2); int wcscoll(const wchar_t* s1, const wchar_t* s2); int wcsncmp(const wchar_t* s1, const wchar_t* s2, size_t n); size_t wcsxfrm(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n); const wchar_t* wcschr(const wchar_t* s, wchar_t c);       wchar_t* wcschr(      wchar_t* s, wchar_t c); size_t wcscspn(const wchar_t* s1, const wchar_t* s2); size_t wcslen(const wchar_t* s); const wchar_t* wcspbrk(const wchar_t* s1, const wchar_t* s2);       wchar_t* wcspbrk(      wchar_t* s1, const wchar_t* s2); const wchar_t* wcsrchr(const wchar_t* s, wchar_t c);       wchar_t* wcsrchr(      wchar_t* s, wchar_t c); size_t wcsspn(const wchar_t* s1, const wchar_t* s2); const wchar_t* wcsstr(const wchar_t* s1, const wchar_t* s2);       wchar_t* wcsstr(      wchar_t* s1, const wchar_t* s2); wchar_t* wcstok(wchar_t* restrict s1, const wchar_t* restrict s2, wchar_t** restrict ptr); const wchar_t* wmemchr(const wchar_t* s, wchar_t c, size_t n);       wchar_t* wmemchr(      wchar_t* s, wchar_t c, size_t n); int wmemcmp(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n); wchar_t* wmemcpy(wchar_t* restrict s1, const wchar_t* restrict s2, size_t n); wchar_t* wmemmove(wchar_t* s1, const wchar_t* s2, size_t n); wchar_t* wmemset(wchar_t* s, wchar_t c, size_t n); size_t wcsftime(wchar_t* restrict s, size_t maxsize, const wchar_t* restrict format,                 const tm* restrict timeptr); wint_t btowc(int c); int wctob(wint_t c); int mbsinit(const mbstate_t* ps); size_t mbrlen(const char* restrict s, size_t n, mbstate_t* restrict ps); size_t mbrtowc(wchar_t* restrict pwc, const char* restrict s, size_t n, mbstate_t* restrict ps); size_t wcrtomb(char* restrict s, wchar_t wc, mbstate_t* restrict ps); size_t mbsrtowcs(wchar_t* restrict dst, const char** restrict src, size_t len,                  mbstate_t* restrict ps); size_t wcsrtombs(char* restrict dst, const wchar_t** restrict src, size_t len,                  mbstate_t* restrict ps);  */
end_comment

begin_include
include|#
directive|include
file|<__config>
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
argument_list|)
end_if

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|__CORRECT_ISO_CPP_WCHAR_H_PROTO
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_empty
empty|#include_next<wchar.h>
end_empty

begin_comment
comment|// Determine whether we have const-correct overloads for wcschr and friends.
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WCHAR_H_CPLUSPLUS_98_CONFORMANCE_
argument_list|)
end_if

begin_define
define|#
directive|define
name|_LIBCPP_WCHAR_H_HAS_CONST_OVERLOADS
value|1
end_define

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|__GLIBC_PREREQ
argument_list|)
end_elif

begin_if
if|#
directive|if
name|__GLIBC_PREREQ
argument_list|(
literal|2
operator|,
literal|10
argument_list|)
end_if

begin_define
define|#
directive|define
name|_LIBCPP_WCHAR_H_HAS_CONST_OVERLOADS
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LIBCPP_WCHAR_H_HAS_CONST_OVERLOADS
argument_list|)
operator|&&
name|defined
argument_list|(
name|_LIBCPP_PREFERRED_OVERLOAD
argument_list|)
end_if

begin_extern
extern|extern
literal|"C++"
block|{
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|wchar_t
modifier|*
name|__libcpp_wcschr
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|)
block|{
return|return
operator|(
name|wchar_t
operator|*
operator|)
name|wcschr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|wchar_t
modifier|*
name|wcschr
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|)
block|{
return|return
name|__libcpp_wcschr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|wchar_t
modifier|*
name|wcschr
parameter_list|(
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|)
block|{
return|return
name|__libcpp_wcschr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|wchar_t
modifier|*
name|__libcpp_wcspbrk
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s1
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|__s2
parameter_list|)
block|{
return|return
operator|(
name|wchar_t
operator|*
operator|)
name|wcspbrk
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|wchar_t
modifier|*
name|wcspbrk
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s1
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|__s2
parameter_list|)
block|{
return|return
name|__libcpp_wcspbrk
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|wchar_t
modifier|*
name|wcspbrk
parameter_list|(
name|wchar_t
modifier|*
name|__s1
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|__s2
parameter_list|)
block|{
return|return
name|__libcpp_wcspbrk
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|wchar_t
modifier|*
name|__libcpp_wcsrchr
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|)
block|{
return|return
operator|(
name|wchar_t
operator|*
operator|)
name|wcsrchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|wchar_t
modifier|*
name|wcsrchr
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|)
block|{
return|return
name|__libcpp_wcsrchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|wchar_t
modifier|*
name|wcsrchr
parameter_list|(
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|)
block|{
return|return
name|__libcpp_wcsrchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|wchar_t
modifier|*
name|__libcpp_wcsstr
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s1
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|__s2
parameter_list|)
block|{
return|return
operator|(
name|wchar_t
operator|*
operator|)
name|wcsstr
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|wchar_t
modifier|*
name|wcsstr
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s1
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|__s2
parameter_list|)
block|{
return|return
name|__libcpp_wcsstr
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|wchar_t
modifier|*
name|wcsstr
parameter_list|(
name|wchar_t
modifier|*
name|__s1
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|__s2
parameter_list|)
block|{
return|return
name|__libcpp_wcsstr
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|wchar_t
modifier|*
name|__libcpp_wmemchr
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
operator|(
name|wchar_t
operator|*
operator|)
name|wmemchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|,
name|__n
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
specifier|const
name|wchar_t
modifier|*
name|wmemchr
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|__libcpp_wmemchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|,
name|__n
argument_list|)
return|;
block|}
specifier|inline
name|_LIBCPP_INLINE_VISIBILITY
name|_LIBCPP_PREFERRED_OVERLOAD
name|wchar_t
modifier|*
name|wmemchr
parameter_list|(
name|wchar_t
modifier|*
name|__s
parameter_list|,
name|wchar_t
name|__c
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|__libcpp_wmemchr
argument_list|(
name|__s
argument_list|,
name|__c
argument_list|,
name|__n
argument_list|)
return|;
block|}
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|&&
operator|(
name|defined
argument_list|(
name|_LIBCPP_MSVCRT
argument_list|)
operator|||
name|defined
argument_list|(
name|__MINGW32__
argument_list|)
operator|)
end_if

begin_extern
extern|extern
literal|"C++"
block|{
include|#
directive|include
file|<support/win32/support.h>
comment|// pull in *swprintf defines
block|}
end_extern

begin_comment
comment|// extern "C++"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __cplusplus&& _LIBCPP_MSVCRT
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _LIBCPP_WCHAR_H
end_comment

end_unit

