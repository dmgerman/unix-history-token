begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|//===----------------------------------------------------------------------===////
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//                     The LLVM Compiler Infrastructure
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is dual licensed under the MIT and the University of Illinois Open
end_comment

begin_comment
comment|// Source Licenses. See LICENSE.TXT for details.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//===----------------------------------------------------------------------===////
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|FILESYSTEM_TIME_HELPER_H
end_ifndef

begin_define
define|#
directive|define
name|FILESYSTEM_TIME_HELPER_H
end_define

begin_include
include|#
directive|include
file|"experimental/__config"
end_include

begin_include
include|#
directive|include
file|"chrono"
end_include

begin_include
include|#
directive|include
file|"cstdlib"
end_include

begin_include
include|#
directive|include
file|"climits"
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|UTIME_OMIT
argument_list|)
end_if

begin_include
include|#
directive|include
file|<sys/time.h>
end_include

begin_comment
comment|// for ::utimes as used in __last_write_time
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|_LIBCPP_BEGIN_NAMESPACE_EXPERIMENTAL_FILESYSTEM
name|namespace
name|time_detail
block|{
name|namespace
block|{
name|using
name|namespace
name|chrono
decl_stmt|;
name|template
operator|<
name|class
name|FileTimeT
operator|,
name|bool
name|IsFloat
operator|=
name|is_floating_point
operator|<
name|typename
name|FileTimeT
operator|::
name|rep
operator|>
operator|::
name|value
operator|>
expr|struct
name|fs_time_util_base
block|{
specifier|static
name|constexpr
name|auto
name|max_seconds
operator|=
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|FileTimeT
operator|::
name|duration
operator|::
name|max
argument_list|()
operator|)
operator|.
name|count
argument_list|()
block|;
specifier|static
name|constexpr
name|auto
name|max_nsec
operator|=
name|duration_cast
operator|<
name|nanoseconds
operator|>
operator|(
name|FileTimeT
operator|::
name|duration
operator|::
name|max
argument_list|()
operator|-
name|seconds
argument_list|(
name|max_seconds
argument_list|)
operator|)
operator|.
name|count
argument_list|()
block|;
specifier|static
name|constexpr
name|auto
name|min_seconds
operator|=
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|FileTimeT
operator|::
name|duration
operator|::
name|min
argument_list|()
operator|)
operator|.
name|count
argument_list|()
block|;
specifier|static
name|constexpr
name|auto
name|min_nsec_timespec
operator|=
name|duration_cast
operator|<
name|nanoseconds
operator|>
operator|(
operator|(
name|FileTimeT
operator|::
name|duration
operator|::
name|min
argument_list|()
operator|-
name|seconds
argument_list|(
name|min_seconds
argument_list|)
operator|)
operator|+
name|seconds
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|count
argument_list|()
block|;
comment|// Static assert that these values properly round trip.
name|static_assert
argument_list|(
operator|(
name|seconds
argument_list|(
name|min_seconds
argument_list|)
operator|+
name|duration_cast
operator|<
name|microseconds
operator|>
operator|(
name|nanoseconds
argument_list|(
name|min_nsec_timespec
argument_list|)
operator|)
operator|)
operator|-
name|duration_cast
operator|<
name|microseconds
operator|>
operator|(
name|seconds
argument_list|(
literal|1
argument_list|)
operator|)
operator|==
name|FileTimeT
operator|::
name|duration
operator|::
name|min
argument_list|()
argument_list|,
literal|""
argument_list|)
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|FileTimeT
operator|>
expr|struct
name|fs_time_util_base
operator|<
name|FileTimeT
operator|,
name|true
operator|>
block|{
specifier|static
specifier|const
name|long
name|long
name|max_seconds
block|;
specifier|static
specifier|const
name|long
name|long
name|max_nsec
block|;
specifier|static
specifier|const
name|long
name|long
name|min_seconds
block|;
specifier|static
specifier|const
name|long
name|long
name|min_nsec_timespec
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|FileTimeT
operator|>
specifier|const
name|long
name|long
name|fs_time_util_base
operator|<
name|FileTimeT
operator|,
name|true
operator|>
operator|::
name|max_seconds
operator|=
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|FileTimeT
operator|::
name|duration
operator|::
name|max
argument_list|()
operator|)
operator|.
name|count
argument_list|()
expr_stmt|;
name|template
operator|<
name|class
name|FileTimeT
operator|>
specifier|const
name|long
name|long
name|fs_time_util_base
operator|<
name|FileTimeT
operator|,
name|true
operator|>
operator|::
name|max_nsec
operator|=
name|duration_cast
operator|<
name|nanoseconds
operator|>
operator|(
name|FileTimeT
operator|::
name|duration
operator|::
name|max
argument_list|()
operator|-
name|seconds
argument_list|(
name|max_seconds
argument_list|)
operator|)
operator|.
name|count
argument_list|()
expr_stmt|;
name|template
operator|<
name|class
name|FileTimeT
operator|>
specifier|const
name|long
name|long
name|fs_time_util_base
operator|<
name|FileTimeT
operator|,
name|true
operator|>
operator|::
name|min_seconds
operator|=
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|FileTimeT
operator|::
name|duration
operator|::
name|min
argument_list|()
operator|)
operator|.
name|count
argument_list|()
expr_stmt|;
name|template
operator|<
name|class
name|FileTimeT
operator|>
specifier|const
name|long
name|long
name|fs_time_util_base
operator|<
name|FileTimeT
operator|,
name|true
operator|>
operator|::
name|min_nsec_timespec
operator|=
name|duration_cast
operator|<
name|nanoseconds
operator|>
operator|(
operator|(
name|FileTimeT
operator|::
name|duration
operator|::
name|min
argument_list|()
operator|-
name|seconds
argument_list|(
name|min_seconds
argument_list|)
operator|)
operator|+
name|seconds
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|count
argument_list|()
expr_stmt|;
name|template
operator|<
name|class
name|FileTimeT
operator|,
name|class
name|TimeT
operator|,
name|class
name|TimeSpecT
operator|>
expr|struct
name|fs_time_util
operator|:
name|fs_time_util_base
operator|<
name|FileTimeT
operator|>
block|{
name|using
name|Base
operator|=
name|fs_time_util_base
operator|<
name|FileTimeT
operator|>
block|;
name|using
name|Base
operator|::
name|max_nsec
block|;
name|using
name|Base
operator|::
name|max_seconds
block|;
name|using
name|Base
operator|::
name|min_nsec_timespec
block|;
name|using
name|Base
operator|::
name|min_seconds
block|;
name|public
operator|:
name|template
operator|<
name|class
name|CType
block|,
name|class
name|ChronoType
operator|>
specifier|static
name|bool
name|checked_set
argument_list|(
argument|CType* out
argument_list|,
argument|ChronoType time
argument_list|)
block|{
name|using
name|Lim
operator|=
name|numeric_limits
operator|<
name|CType
operator|>
block|;
if|if
condition|(
name|time
operator|>
name|Lim
operator|::
name|max
argument_list|()
operator|||
name|time
operator|<
name|Lim
operator|::
name|min
argument_list|()
condition|)
return|return
name|false
return|;
operator|*
name|out
operator|=
name|static_cast
operator|<
name|CType
operator|>
operator|(
name|time
operator|)
block|;
return|return
name|true
return|;
block|}
specifier|static
name|_LIBCPP_CONSTEXPR_AFTER_CXX11
name|bool
name|is_representable
parameter_list|(
name|TimeSpecT
name|tm
parameter_list|)
block|{
if|if
condition|(
name|tm
operator|.
name|tv_sec
operator|>=
literal|0
condition|)
block|{
return|return
operator|(
name|tm
operator|.
name|tv_sec
operator|<
name|max_seconds
operator|)
operator|||
operator|(
name|tm
operator|.
name|tv_sec
operator|==
name|max_seconds
operator|&&
name|tm
operator|.
name|tv_nsec
operator|<=
name|max_nsec
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|tm
operator|.
name|tv_sec
operator|==
operator|(
name|min_seconds
operator|-
literal|1
operator|)
condition|)
block|{
return|return
name|tm
operator|.
name|tv_nsec
operator|>=
name|min_nsec_timespec
return|;
block|}
else|else
block|{
return|return
operator|(
name|tm
operator|.
name|tv_sec
operator|>=
name|min_seconds
operator|)
return|;
block|}
block|}
specifier|static
name|_LIBCPP_CONSTEXPR_AFTER_CXX11
name|bool
name|is_representable
parameter_list|(
name|FileTimeT
name|tm
parameter_list|)
block|{
name|auto
name|secs
init|=
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|tm
operator|.
name|time_since_epoch
argument_list|()
operator|)
decl_stmt|;
name|auto
name|nsecs
init|=
name|duration_cast
operator|<
name|nanoseconds
operator|>
operator|(
name|tm
operator|.
name|time_since_epoch
argument_list|()
operator|-
name|secs
operator|)
decl_stmt|;
if|if
condition|(
name|nsecs
operator|.
name|count
argument_list|()
operator|<
literal|0
condition|)
block|{
name|secs
operator|=
name|secs
operator|+
name|seconds
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nsecs
operator|=
name|nsecs
operator|+
name|seconds
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|using
name|TLim
init|=
name|numeric_limits
operator|<
name|TimeT
operator|>
decl_stmt|;
if|if
condition|(
name|secs
operator|.
name|count
argument_list|()
operator|>=
literal|0
condition|)
return|return
name|secs
operator|.
name|count
argument_list|()
operator|<=
name|TLim
operator|::
name|max
argument_list|()
return|;
return|return
name|secs
operator|.
name|count
argument_list|()
operator|>=
name|TLim
operator|::
name|min
argument_list|()
return|;
block|}
specifier|static
name|_LIBCPP_CONSTEXPR_AFTER_CXX11
name|FileTimeT
name|convert_timespec
parameter_list|(
name|TimeSpecT
name|tm
parameter_list|)
block|{
name|auto
name|adj_msec
init|=
name|duration_cast
operator|<
name|microseconds
operator|>
operator|(
name|nanoseconds
argument_list|(
name|tm
operator|.
name|tv_nsec
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|tm
operator|.
name|tv_sec
operator|>=
literal|0
condition|)
block|{
name|auto
name|Dur
init|=
name|seconds
argument_list|(
name|tm
operator|.
name|tv_sec
argument_list|)
operator|+
name|microseconds
argument_list|(
name|adj_msec
argument_list|)
decl_stmt|;
return|return
name|FileTimeT
argument_list|(
name|Dur
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|duration_cast
operator|<
name|microseconds
operator|>
operator|(
name|nanoseconds
argument_list|(
name|tm
operator|.
name|tv_nsec
argument_list|)
operator|)
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|FileTimeT
argument_list|(
name|seconds
argument_list|(
name|tm
operator|.
name|tv_sec
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|// tm.tv_sec< 0
name|auto
name|adj_subsec
init|=
name|duration_cast
operator|<
name|microseconds
operator|>
operator|(
name|seconds
argument_list|(
literal|1
argument_list|)
operator|-
name|nanoseconds
argument_list|(
name|tm
operator|.
name|tv_nsec
argument_list|)
operator|)
decl_stmt|;
name|auto
name|Dur
init|=
name|seconds
argument_list|(
name|tm
operator|.
name|tv_sec
operator|+
literal|1
argument_list|)
operator|-
name|adj_subsec
decl_stmt|;
return|return
name|FileTimeT
argument_list|(
name|Dur
argument_list|)
return|;
block|}
block|}
name|template
operator|<
name|class
name|SubSecDurT
operator|,
name|class
name|SubSecT
operator|>
specifier|static
name|bool
name|set_times_checked
argument_list|(
argument|TimeT* sec_out
argument_list|,
argument|SubSecT* subsec_out
argument_list|,
argument|FileTimeT tp
argument_list|)
block|{
name|using
name|namespace
name|chrono
block|;
name|auto
name|dur
operator|=
name|tp
operator|.
name|time_since_epoch
argument_list|()
block|;
name|auto
name|sec_dur
operator|=
name|duration_cast
operator|<
name|seconds
operator|>
operator|(
name|dur
operator|)
block|;
name|auto
name|subsec_dur
operator|=
name|duration_cast
operator|<
name|SubSecDurT
operator|>
operator|(
name|dur
operator|-
name|sec_dur
operator|)
block|;
comment|// The tv_nsec and tv_usec fields must not be negative so adjust accordingly
if|if
condition|(
name|subsec_dur
operator|.
name|count
argument_list|()
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|sec_dur
operator|.
name|count
argument_list|()
operator|>
name|min_seconds
condition|)
block|{
name|sec_dur
operator|-=
name|seconds
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|subsec_dur
operator|+=
name|seconds
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|subsec_dur
operator|=
name|SubSecDurT
operator|::
name|zero
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|checked_set
argument_list|(
name|sec_out
argument_list|,
name|sec_dur
operator|.
name|count
argument_list|()
argument_list|)
operator|&&
name|checked_set
argument_list|(
name|subsec_out
argument_list|,
name|subsec_dur
operator|.
name|count
argument_list|()
argument_list|)
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// end namespace
end_comment

begin_comment
unit|}
comment|// end namespace time_detail
end_comment

begin_expr_stmt
unit|using
name|time_detail
operator|::
name|fs_time_util
expr_stmt|;
end_expr_stmt

begin_macro
name|_LIBCPP_END_NAMESPACE_EXPERIMENTAL_FILESYSTEM
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// FILESYSTEM_TIME_HELPER_H
end_comment

end_unit

