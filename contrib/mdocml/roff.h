begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$Id: roff.h,v 1.52 2017/06/07 23:29:49 schwarze Exp $	*/
end_comment

begin_comment
comment|/*  * Copyright (c) 2008, 2009, 2010, 2011 Kristaps Dzonsons<kristaps@bsd.lv>  * Copyright (c) 2013, 2014, 2015, 2017 Ingo Schwarze<schwarze@openbsd.org>  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES  * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR  * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES  * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN  * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_struct_decl
struct_decl|struct
name|ohash
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|mdoc_arg
struct_decl|;
end_struct_decl

begin_union_decl
union_decl|union
name|mdoc_data
union_decl|;
end_union_decl

begin_enum
enum|enum
name|roff_macroset
block|{
name|MACROSET_NONE
init|=
literal|0
block|,
name|MACROSET_MDOC
block|,
name|MACROSET_MAN
block|}
enum|;
end_enum

begin_enum
enum|enum
name|mdoc_os
block|{
name|MDOC_OS_OTHER
init|=
literal|0
block|,
name|MDOC_OS_NETBSD
block|,
name|MDOC_OS_OPENBSD
block|}
enum|;
end_enum

begin_enum
enum|enum
name|roff_sec
block|{
name|SEC_NONE
init|=
literal|0
block|,
name|SEC_NAME
block|,
name|SEC_LIBRARY
block|,
name|SEC_SYNOPSIS
block|,
name|SEC_DESCRIPTION
block|,
name|SEC_CONTEXT
block|,
name|SEC_IMPLEMENTATION
block|,
comment|/* IMPLEMENTATION NOTES */
name|SEC_RETURN_VALUES
block|,
name|SEC_ENVIRONMENT
block|,
name|SEC_FILES
block|,
name|SEC_EXIT_STATUS
block|,
name|SEC_EXAMPLES
block|,
name|SEC_DIAGNOSTICS
block|,
name|SEC_COMPATIBILITY
block|,
name|SEC_ERRORS
block|,
name|SEC_SEE_ALSO
block|,
name|SEC_STANDARDS
block|,
name|SEC_HISTORY
block|,
name|SEC_AUTHORS
block|,
name|SEC_CAVEATS
block|,
name|SEC_BUGS
block|,
name|SEC_SECURITY
block|,
name|SEC_CUSTOM
block|,
name|SEC__MAX
block|}
enum|;
end_enum

begin_enum
enum|enum
name|roff_type
block|{
name|ROFFT_ROOT
block|,
name|ROFFT_BLOCK
block|,
name|ROFFT_HEAD
block|,
name|ROFFT_BODY
block|,
name|ROFFT_TAIL
block|,
name|ROFFT_ELEM
block|,
name|ROFFT_TEXT
block|,
name|ROFFT_TBL
block|,
name|ROFFT_EQN
block|}
enum|;
end_enum

begin_enum
enum|enum
name|roff_tok
block|{
name|ROFF_br
init|=
literal|0
block|,
name|ROFF_ce
block|,
name|ROFF_ft
block|,
name|ROFF_ll
block|,
name|ROFF_mc
block|,
name|ROFF_sp
block|,
name|ROFF_ta
block|,
name|ROFF_ti
block|,
name|ROFF_MAX
block|,
name|ROFF_ab
block|,
name|ROFF_ad
block|,
name|ROFF_af
block|,
name|ROFF_aln
block|,
name|ROFF_als
block|,
name|ROFF_am
block|,
name|ROFF_am1
block|,
name|ROFF_ami
block|,
name|ROFF_ami1
block|,
name|ROFF_as
block|,
name|ROFF_as1
block|,
name|ROFF_asciify
block|,
name|ROFF_backtrace
block|,
name|ROFF_bd
block|,
name|ROFF_bleedat
block|,
name|ROFF_blm
block|,
name|ROFF_box
block|,
name|ROFF_boxa
block|,
name|ROFF_bp
block|,
name|ROFF_BP
block|,
name|ROFF_break
block|,
name|ROFF_breakchar
block|,
name|ROFF_brnl
block|,
name|ROFF_brp
block|,
name|ROFF_brpnl
block|,
name|ROFF_c2
block|,
name|ROFF_cc
block|,
name|ROFF_cf
block|,
name|ROFF_cflags
block|,
name|ROFF_ch
block|,
name|ROFF_char
block|,
name|ROFF_chop
block|,
name|ROFF_class
block|,
name|ROFF_close
block|,
name|ROFF_CL
block|,
name|ROFF_color
block|,
name|ROFF_composite
block|,
name|ROFF_continue
block|,
name|ROFF_cp
block|,
name|ROFF_cropat
block|,
name|ROFF_cs
block|,
name|ROFF_cu
block|,
name|ROFF_da
block|,
name|ROFF_dch
block|,
name|ROFF_Dd
block|,
name|ROFF_de
block|,
name|ROFF_de1
block|,
name|ROFF_defcolor
block|,
name|ROFF_dei
block|,
name|ROFF_dei1
block|,
name|ROFF_device
block|,
name|ROFF_devicem
block|,
name|ROFF_di
block|,
name|ROFF_do
block|,
name|ROFF_ds
block|,
name|ROFF_ds1
block|,
name|ROFF_dwh
block|,
name|ROFF_dt
block|,
name|ROFF_ec
block|,
name|ROFF_ecr
block|,
name|ROFF_ecs
block|,
name|ROFF_el
block|,
name|ROFF_em
block|,
name|ROFF_EN
block|,
name|ROFF_eo
block|,
name|ROFF_EP
block|,
name|ROFF_EQ
block|,
name|ROFF_errprint
block|,
name|ROFF_ev
block|,
name|ROFF_evc
block|,
name|ROFF_ex
block|,
name|ROFF_fallback
block|,
name|ROFF_fam
block|,
name|ROFF_fc
block|,
name|ROFF_fchar
block|,
name|ROFF_fcolor
block|,
name|ROFF_fdeferlig
block|,
name|ROFF_feature
block|,
comment|/* MAN_fi; ignored in mdoc(7) */
name|ROFF_fkern
block|,
name|ROFF_fl
block|,
name|ROFF_flig
block|,
name|ROFF_fp
block|,
name|ROFF_fps
block|,
name|ROFF_fschar
block|,
name|ROFF_fspacewidth
block|,
name|ROFF_fspecial
block|,
name|ROFF_ftr
block|,
name|ROFF_fzoom
block|,
name|ROFF_gcolor
block|,
name|ROFF_hc
block|,
name|ROFF_hcode
block|,
name|ROFF_hidechar
block|,
name|ROFF_hla
block|,
name|ROFF_hlm
block|,
name|ROFF_hpf
block|,
name|ROFF_hpfa
block|,
name|ROFF_hpfcode
block|,
name|ROFF_hw
block|,
name|ROFF_hy
block|,
name|ROFF_hylang
block|,
name|ROFF_hylen
block|,
name|ROFF_hym
block|,
name|ROFF_hypp
block|,
name|ROFF_hys
block|,
name|ROFF_ie
block|,
name|ROFF_if
block|,
name|ROFF_ig
block|,
comment|/* MAN_in; ignored in mdoc(7) */
name|ROFF_index
block|,
name|ROFF_it
block|,
name|ROFF_itc
block|,
name|ROFF_IX
block|,
name|ROFF_kern
block|,
name|ROFF_kernafter
block|,
name|ROFF_kernbefore
block|,
name|ROFF_kernpair
block|,
name|ROFF_lc
block|,
name|ROFF_lc_ctype
block|,
name|ROFF_lds
block|,
name|ROFF_length
block|,
name|ROFF_letadj
block|,
name|ROFF_lf
block|,
name|ROFF_lg
block|,
name|ROFF_lhang
block|,
name|ROFF_linetabs
block|,
name|ROFF_lnr
block|,
name|ROFF_lnrf
block|,
name|ROFF_lpfx
block|,
name|ROFF_ls
block|,
name|ROFF_lsm
block|,
name|ROFF_lt
block|,
name|ROFF_mediasize
block|,
name|ROFF_minss
block|,
name|ROFF_mk
block|,
name|ROFF_mso
block|,
name|ROFF_na
block|,
name|ROFF_ne
block|,
comment|/* MAN_nf; ignored in mdoc(7) */
name|ROFF_nh
block|,
name|ROFF_nhychar
block|,
name|ROFF_nm
block|,
name|ROFF_nn
block|,
name|ROFF_nop
block|,
name|ROFF_nr
block|,
name|ROFF_nrf
block|,
name|ROFF_nroff
block|,
name|ROFF_ns
block|,
name|ROFF_nx
block|,
name|ROFF_open
block|,
name|ROFF_opena
block|,
name|ROFF_os
block|,
name|ROFF_output
block|,
name|ROFF_padj
block|,
name|ROFF_papersize
block|,
name|ROFF_pc
block|,
name|ROFF_pev
block|,
name|ROFF_pi
block|,
name|ROFF_PI
block|,
name|ROFF_pl
block|,
name|ROFF_pm
block|,
name|ROFF_pn
block|,
name|ROFF_pnr
block|,
name|ROFF_po
block|,
name|ROFF_ps
block|,
name|ROFF_psbb
block|,
name|ROFF_pshape
block|,
name|ROFF_pso
block|,
name|ROFF_ptr
block|,
name|ROFF_pvs
block|,
name|ROFF_rchar
block|,
name|ROFF_rd
block|,
name|ROFF_recursionlimit
block|,
name|ROFF_return
block|,
name|ROFF_rfschar
block|,
name|ROFF_rhang
block|,
name|ROFF_rj
block|,
name|ROFF_rm
block|,
name|ROFF_rn
block|,
name|ROFF_rnn
block|,
name|ROFF_rr
block|,
name|ROFF_rs
block|,
name|ROFF_rt
block|,
name|ROFF_schar
block|,
name|ROFF_sentchar
block|,
name|ROFF_shc
block|,
name|ROFF_shift
block|,
name|ROFF_sizes
block|,
name|ROFF_so
block|,
name|ROFF_spacewidth
block|,
name|ROFF_special
block|,
name|ROFF_spreadwarn
block|,
name|ROFF_ss
block|,
name|ROFF_sty
block|,
name|ROFF_substring
block|,
name|ROFF_sv
block|,
name|ROFF_sy
block|,
name|ROFF_T_
block|,
name|ROFF_tc
block|,
name|ROFF_TE
block|,
name|ROFF_TH
block|,
name|ROFF_tkf
block|,
name|ROFF_tl
block|,
name|ROFF_tm
block|,
name|ROFF_tm1
block|,
name|ROFF_tmc
block|,
name|ROFF_tr
block|,
name|ROFF_track
block|,
name|ROFF_transchar
block|,
name|ROFF_trf
block|,
name|ROFF_trimat
block|,
name|ROFF_trin
block|,
name|ROFF_trnt
block|,
name|ROFF_troff
block|,
name|ROFF_TS
block|,
name|ROFF_uf
block|,
name|ROFF_ul
block|,
name|ROFF_unformat
block|,
name|ROFF_unwatch
block|,
name|ROFF_unwatchn
block|,
name|ROFF_vpt
block|,
name|ROFF_vs
block|,
name|ROFF_warn
block|,
name|ROFF_warnscale
block|,
name|ROFF_watch
block|,
name|ROFF_watchlength
block|,
name|ROFF_watchn
block|,
name|ROFF_wh
block|,
name|ROFF_while
block|,
name|ROFF_write
block|,
name|ROFF_writec
block|,
name|ROFF_writem
block|,
name|ROFF_xflag
block|,
name|ROFF_cblock
block|,
name|ROFF_RENAMED
block|,
name|ROFF_USERDEF
block|,
name|TOKEN_NONE
block|,
name|MDOC_Dd
block|,
name|MDOC_Dt
block|,
name|MDOC_Os
block|,
name|MDOC_Sh
block|,
name|MDOC_Ss
block|,
name|MDOC_Pp
block|,
name|MDOC_D1
block|,
name|MDOC_Dl
block|,
name|MDOC_Bd
block|,
name|MDOC_Ed
block|,
name|MDOC_Bl
block|,
name|MDOC_El
block|,
name|MDOC_It
block|,
name|MDOC_Ad
block|,
name|MDOC_An
block|,
name|MDOC_Ap
block|,
name|MDOC_Ar
block|,
name|MDOC_Cd
block|,
name|MDOC_Cm
block|,
name|MDOC_Dv
block|,
name|MDOC_Er
block|,
name|MDOC_Ev
block|,
name|MDOC_Ex
block|,
name|MDOC_Fa
block|,
name|MDOC_Fd
block|,
name|MDOC_Fl
block|,
name|MDOC_Fn
block|,
name|MDOC_Ft
block|,
name|MDOC_Ic
block|,
name|MDOC_In
block|,
name|MDOC_Li
block|,
name|MDOC_Nd
block|,
name|MDOC_Nm
block|,
name|MDOC_Op
block|,
name|MDOC_Ot
block|,
name|MDOC_Pa
block|,
name|MDOC_Rv
block|,
name|MDOC_St
block|,
name|MDOC_Va
block|,
name|MDOC_Vt
block|,
name|MDOC_Xr
block|,
name|MDOC__A
block|,
name|MDOC__B
block|,
name|MDOC__D
block|,
name|MDOC__I
block|,
name|MDOC__J
block|,
name|MDOC__N
block|,
name|MDOC__O
block|,
name|MDOC__P
block|,
name|MDOC__R
block|,
name|MDOC__T
block|,
name|MDOC__V
block|,
name|MDOC_Ac
block|,
name|MDOC_Ao
block|,
name|MDOC_Aq
block|,
name|MDOC_At
block|,
name|MDOC_Bc
block|,
name|MDOC_Bf
block|,
name|MDOC_Bo
block|,
name|MDOC_Bq
block|,
name|MDOC_Bsx
block|,
name|MDOC_Bx
block|,
name|MDOC_Db
block|,
name|MDOC_Dc
block|,
name|MDOC_Do
block|,
name|MDOC_Dq
block|,
name|MDOC_Ec
block|,
name|MDOC_Ef
block|,
name|MDOC_Em
block|,
name|MDOC_Eo
block|,
name|MDOC_Fx
block|,
name|MDOC_Ms
block|,
name|MDOC_No
block|,
name|MDOC_Ns
block|,
name|MDOC_Nx
block|,
name|MDOC_Ox
block|,
name|MDOC_Pc
block|,
name|MDOC_Pf
block|,
name|MDOC_Po
block|,
name|MDOC_Pq
block|,
name|MDOC_Qc
block|,
name|MDOC_Ql
block|,
name|MDOC_Qo
block|,
name|MDOC_Qq
block|,
name|MDOC_Re
block|,
name|MDOC_Rs
block|,
name|MDOC_Sc
block|,
name|MDOC_So
block|,
name|MDOC_Sq
block|,
name|MDOC_Sm
block|,
name|MDOC_Sx
block|,
name|MDOC_Sy
block|,
name|MDOC_Tn
block|,
name|MDOC_Ux
block|,
name|MDOC_Xc
block|,
name|MDOC_Xo
block|,
name|MDOC_Fo
block|,
name|MDOC_Fc
block|,
name|MDOC_Oo
block|,
name|MDOC_Oc
block|,
name|MDOC_Bk
block|,
name|MDOC_Ek
block|,
name|MDOC_Bt
block|,
name|MDOC_Hf
block|,
name|MDOC_Fr
block|,
name|MDOC_Ud
block|,
name|MDOC_Lb
block|,
name|MDOC_Lp
block|,
name|MDOC_Lk
block|,
name|MDOC_Mt
block|,
name|MDOC_Brq
block|,
name|MDOC_Bro
block|,
name|MDOC_Brc
block|,
name|MDOC__C
block|,
name|MDOC_Es
block|,
name|MDOC_En
block|,
name|MDOC_Dx
block|,
name|MDOC__Q
block|,
name|MDOC__U
block|,
name|MDOC_Ta
block|,
name|MDOC_MAX
block|,
name|MAN_TH
block|,
name|MAN_SH
block|,
name|MAN_SS
block|,
name|MAN_TP
block|,
name|MAN_LP
block|,
name|MAN_PP
block|,
name|MAN_P
block|,
name|MAN_IP
block|,
name|MAN_HP
block|,
name|MAN_SM
block|,
name|MAN_SB
block|,
name|MAN_BI
block|,
name|MAN_IB
block|,
name|MAN_BR
block|,
name|MAN_RB
block|,
name|MAN_R
block|,
name|MAN_B
block|,
name|MAN_I
block|,
name|MAN_IR
block|,
name|MAN_RI
block|,
name|MAN_nf
block|,
name|MAN_fi
block|,
name|MAN_RE
block|,
name|MAN_RS
block|,
name|MAN_DT
block|,
name|MAN_UC
block|,
name|MAN_PD
block|,
name|MAN_AT
block|,
name|MAN_in
block|,
name|MAN_OP
block|,
name|MAN_EX
block|,
name|MAN_EE
block|,
name|MAN_UR
block|,
name|MAN_UE
block|,
name|MAN_MAX
block|}
enum|;
end_enum

begin_enum
enum|enum
name|roff_next
block|{
name|ROFF_NEXT_SIBLING
init|=
literal|0
block|,
name|ROFF_NEXT_CHILD
block|}
enum|;
end_enum

begin_comment
comment|/*  * Indicates that a BODY's formatting has ended, but  * the scope is still open.  Used for badly nested blocks.  */
end_comment

begin_enum
enum|enum
name|mdoc_endbody
block|{
name|ENDBODY_NOT
init|=
literal|0
block|,
name|ENDBODY_SPACE
comment|/* Is broken: append a space. */
block|}
enum|;
end_enum

begin_struct
struct|struct
name|roff_node
block|{
name|struct
name|roff_node
modifier|*
name|parent
decl_stmt|;
comment|/* Parent AST node. */
name|struct
name|roff_node
modifier|*
name|child
decl_stmt|;
comment|/* First child AST node. */
name|struct
name|roff_node
modifier|*
name|last
decl_stmt|;
comment|/* Last child AST node. */
name|struct
name|roff_node
modifier|*
name|next
decl_stmt|;
comment|/* Sibling AST node. */
name|struct
name|roff_node
modifier|*
name|prev
decl_stmt|;
comment|/* Prior sibling AST node. */
name|struct
name|roff_node
modifier|*
name|head
decl_stmt|;
comment|/* BLOCK */
name|struct
name|roff_node
modifier|*
name|body
decl_stmt|;
comment|/* BLOCK/ENDBODY */
name|struct
name|roff_node
modifier|*
name|tail
decl_stmt|;
comment|/* BLOCK */
name|struct
name|mdoc_arg
modifier|*
name|args
decl_stmt|;
comment|/* BLOCK/ELEM */
name|union
name|mdoc_data
modifier|*
name|norm
decl_stmt|;
comment|/* Normalized arguments. */
name|char
modifier|*
name|string
decl_stmt|;
comment|/* TEXT */
specifier|const
name|struct
name|tbl_span
modifier|*
name|span
decl_stmt|;
comment|/* TBL */
specifier|const
name|struct
name|eqn
modifier|*
name|eqn
decl_stmt|;
comment|/* EQN */
name|int
name|line
decl_stmt|;
comment|/* Input file line number. */
name|int
name|pos
decl_stmt|;
comment|/* Input file column number. */
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|NODE_VALID
value|(1<< 0)
comment|/* Has been validated. */
define|#
directive|define
name|NODE_ENDED
value|(1<< 1)
comment|/* Gone past body end mark. */
define|#
directive|define
name|NODE_EOS
value|(1<< 2)
comment|/* At sentence boundary. */
define|#
directive|define
name|NODE_LINE
value|(1<< 3)
comment|/* First macro/text on line. */
define|#
directive|define
name|NODE_SYNPRETTY
value|(1<< 4)
comment|/* SYNOPSIS-style formatting. */
define|#
directive|define
name|NODE_BROKEN
value|(1<< 5)
comment|/* Must validate parent when ending. */
define|#
directive|define
name|NODE_DELIMO
value|(1<< 6)
define|#
directive|define
name|NODE_DELIMC
value|(1<< 7)
define|#
directive|define
name|NODE_NOSRC
value|(1<< 8)
comment|/* Generated node, not in input file. */
define|#
directive|define
name|NODE_NOPRT
value|(1<< 9)
comment|/* Shall not print anything. */
name|int
name|prev_font
decl_stmt|;
comment|/* Before entering this node. */
name|int
name|aux
decl_stmt|;
comment|/* Decoded node data, type-dependent. */
name|enum
name|roff_tok
name|tok
decl_stmt|;
comment|/* Request or macro ID. */
name|enum
name|roff_type
name|type
decl_stmt|;
comment|/* AST node type. */
name|enum
name|roff_sec
name|sec
decl_stmt|;
comment|/* Current named section. */
name|enum
name|mdoc_endbody
name|end
decl_stmt|;
comment|/* BODY */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|roff_meta
block|{
name|char
modifier|*
name|msec
decl_stmt|;
comment|/* Manual section, usually a digit. */
name|char
modifier|*
name|vol
decl_stmt|;
comment|/* Manual volume title. */
name|char
modifier|*
name|os
decl_stmt|;
comment|/* Operating system. */
name|char
modifier|*
name|arch
decl_stmt|;
comment|/* Machine architecture. */
name|char
modifier|*
name|title
decl_stmt|;
comment|/* Manual title, usually CAPS. */
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Leading manual name. */
name|char
modifier|*
name|date
decl_stmt|;
comment|/* Normalized date. */
name|int
name|hasbody
decl_stmt|;
comment|/* Document is not empty. */
name|enum
name|mdoc_os
name|os_e
decl_stmt|;
comment|/* Operating system. */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|roff_man
block|{
name|struct
name|roff_meta
name|meta
decl_stmt|;
comment|/* Document meta-data. */
name|struct
name|mparse
modifier|*
name|parse
decl_stmt|;
comment|/* Parse pointer. */
name|struct
name|roff
modifier|*
name|roff
decl_stmt|;
comment|/* Roff parser state data. */
name|struct
name|ohash
modifier|*
name|mdocmac
decl_stmt|;
comment|/* Mdoc macro lookup table. */
name|struct
name|ohash
modifier|*
name|manmac
decl_stmt|;
comment|/* Man macro lookup table. */
specifier|const
name|char
modifier|*
name|defos
decl_stmt|;
comment|/* Default operating system. */
name|struct
name|roff_node
modifier|*
name|first
decl_stmt|;
comment|/* The first node parsed. */
name|struct
name|roff_node
modifier|*
name|last
decl_stmt|;
comment|/* The last node parsed. */
name|struct
name|roff_node
modifier|*
name|last_es
decl_stmt|;
comment|/* The most recent Es node. */
name|int
name|quick
decl_stmt|;
comment|/* Abort parse early. */
name|int
name|flags
decl_stmt|;
comment|/* Parse flags. */
define|#
directive|define
name|MDOC_LITERAL
value|(1<< 1)
comment|/* In a literal scope. */
define|#
directive|define
name|MDOC_PBODY
value|(1<< 2)
comment|/* In the document body. */
define|#
directive|define
name|MDOC_NEWLINE
value|(1<< 3)
comment|/* First macro/text in a line. */
define|#
directive|define
name|MDOC_PHRASE
value|(1<< 4)
comment|/* In a Bl -column phrase. */
define|#
directive|define
name|MDOC_PHRASELIT
value|(1<< 5)
comment|/* Literal within a phrase. */
define|#
directive|define
name|MDOC_FREECOL
value|(1<< 6)
comment|/* `It' invocation should close. */
define|#
directive|define
name|MDOC_SYNOPSIS
value|(1<< 7)
comment|/* SYNOPSIS-style formatting. */
define|#
directive|define
name|MDOC_KEEP
value|(1<< 8)
comment|/* In a word keep. */
define|#
directive|define
name|MDOC_SMOFF
value|(1<< 9)
comment|/* Spacing is off. */
define|#
directive|define
name|MDOC_NODELIMC
value|(1<< 10)
comment|/* Disable closing delimiter handling. */
define|#
directive|define
name|MAN_ELINE
value|(1<< 11)
comment|/* Next-line element scope. */
define|#
directive|define
name|MAN_BLINE
value|(1<< 12)
comment|/* Next-line block scope. */
define|#
directive|define
name|MDOC_PHRASEQF
value|(1<< 13)
comment|/* Quote first word encountered. */
define|#
directive|define
name|MDOC_PHRASEQL
value|(1<< 14)
comment|/* Quote last word of this phrase. */
define|#
directive|define
name|MDOC_PHRASEQN
value|(1<< 15)
comment|/* Quote first word of the next phrase. */
define|#
directive|define
name|MAN_LITERAL
value|MDOC_LITERAL
define|#
directive|define
name|MAN_NEWLINE
value|MDOC_NEWLINE
name|enum
name|roff_macroset
name|macroset
decl_stmt|;
comment|/* Kind of high-level macros used. */
name|enum
name|roff_sec
name|lastsec
decl_stmt|;
comment|/* Last section seen. */
name|enum
name|roff_sec
name|lastnamed
decl_stmt|;
comment|/* Last standard section seen. */
name|enum
name|roff_next
name|next
decl_stmt|;
comment|/* Where to put the next node. */
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
modifier|*
name|roff_name
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|deroff
parameter_list|(
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|struct
name|roff_node
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|ohash
modifier|*
name|roffhash_alloc
parameter_list|(
name|enum
name|roff_tok
parameter_list|,
name|enum
name|roff_tok
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|enum
name|roff_tok
name|roffhash_find
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|roffhash_free
parameter_list|(
name|struct
name|ohash
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|roff_validate
parameter_list|(
name|struct
name|roff_man
modifier|*
parameter_list|)
function_decl|;
end_function_decl

end_unit

