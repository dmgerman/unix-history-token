begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * CDDL HEADER START  *  * The contents of this file are subject to the terms of the  * Common Development and Distribution License (the "License").  * You may not use this file except in compliance with the License.  *  * You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE  * or http://www.opensolaris.org/os/licensing.  * See the License for the specific language governing permissions  * and limitations under the License.  *  * When distributing Covered Code, include this CDDL HEADER in each  * file and include the License file at usr/src/OPENSOLARIS.LICENSE.  * If applicable, add the following below this CDDL HEADER, with the  * fields enclosed by brackets "[]" replaced with your own identifying  * information: Portions Copyright [yyyy] [name of copyright owner]  *  * CDDL HEADER END  */
end_comment

begin_comment
comment|/*  * Copyright 2007 Sun Microsystems, Inc.  All rights reserved.  * Use is subject to license terms.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBZFS_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBZFS_H
end_define

begin_pragma
pragma|#
directive|pragma
name|ident
literal|"%Z%%M%	%I%	%E% SMI"
end_pragma

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_include
include|#
directive|include
file|<libnvpair.h>
end_include

begin_include
include|#
directive|include
file|<sys/param.h>
end_include

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<sys/varargs.h>
end_include

begin_include
include|#
directive|include
file|<sys/fs/zfs.h>
end_include

begin_include
include|#
directive|include
file|<sys/zfs_ioctl.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/*  * Miscellaneous ZFS constants  */
define|#
directive|define
name|ZFS_MAXNAMELEN
value|MAXNAMELEN
define|#
directive|define
name|ZPOOL_MAXNAMELEN
value|MAXNAMELEN
define|#
directive|define
name|ZFS_MAXPROPLEN
value|MAXPATHLEN
comment|/*  * libzfs errors  */
enum|enum
block|{
name|EZFS_NOMEM
init|=
literal|2000
block|,
comment|/* out of memory */
name|EZFS_BADPROP
block|,
comment|/* invalid property value */
name|EZFS_PROPREADONLY
block|,
comment|/* cannot set readonly property */
name|EZFS_PROPTYPE
block|,
comment|/* property does not apply to dataset type */
name|EZFS_PROPNONINHERIT
block|,
comment|/* property is not inheritable */
name|EZFS_PROPSPACE
block|,
comment|/* bad quota or reservation */
name|EZFS_BADTYPE
block|,
comment|/* dataset is not of appropriate type */
name|EZFS_BUSY
block|,
comment|/* pool or dataset is busy */
name|EZFS_EXISTS
block|,
comment|/* pool or dataset already exists */
name|EZFS_NOENT
block|,
comment|/* no such pool or dataset */
name|EZFS_BADSTREAM
block|,
comment|/* bad backup stream */
name|EZFS_DSREADONLY
block|,
comment|/* dataset is readonly */
name|EZFS_VOLTOOBIG
block|,
comment|/* volume is too large for 32-bit system */
name|EZFS_VOLHASDATA
block|,
comment|/* volume already contains data */
name|EZFS_INVALIDNAME
block|,
comment|/* invalid dataset name */
name|EZFS_BADRESTORE
block|,
comment|/* unable to restore to destination */
name|EZFS_BADBACKUP
block|,
comment|/* backup failed */
name|EZFS_BADTARGET
block|,
comment|/* bad attach/detach/replace target */
name|EZFS_NODEVICE
block|,
comment|/* no such device in pool */
name|EZFS_BADDEV
block|,
comment|/* invalid device to add */
name|EZFS_NOREPLICAS
block|,
comment|/* no valid replicas */
name|EZFS_RESILVERING
block|,
comment|/* currently resilvering */
name|EZFS_BADVERSION
block|,
comment|/* unsupported version */
name|EZFS_POOLUNAVAIL
block|,
comment|/* pool is currently unavailable */
name|EZFS_DEVOVERFLOW
block|,
comment|/* too many devices in one vdev */
name|EZFS_BADPATH
block|,
comment|/* must be an absolute path */
name|EZFS_CROSSTARGET
block|,
comment|/* rename or clone across pool or dataset */
name|EZFS_ZONED
block|,
comment|/* used improperly in local zone */
name|EZFS_MOUNTFAILED
block|,
comment|/* failed to mount dataset */
name|EZFS_UMOUNTFAILED
block|,
comment|/* failed to unmount dataset */
name|EZFS_UNSHARENFSFAILED
block|,
comment|/* unshare(1M) failed */
name|EZFS_SHARENFSFAILED
block|,
comment|/* share(1M) failed */
name|EZFS_DEVLINKS
block|,
comment|/* failed to create zvol links */
name|EZFS_PERM
block|,
comment|/* permission denied */
name|EZFS_NOSPC
block|,
comment|/* out of space */
name|EZFS_IO
block|,
comment|/* I/O error */
name|EZFS_INTR
block|,
comment|/* signal received */
name|EZFS_ISSPARE
block|,
comment|/* device is a hot spare */
name|EZFS_INVALCONFIG
block|,
comment|/* invalid vdev configuration */
name|EZFS_RECURSIVE
block|,
comment|/* recursive dependency */
name|EZFS_NOHISTORY
block|,
comment|/* no history object */
name|EZFS_UNSHAREISCSIFAILED
block|,
comment|/* iscsitgtd failed request to unshare */
name|EZFS_SHAREISCSIFAILED
block|,
comment|/* iscsitgtd failed request to share */
name|EZFS_POOLPROPS
block|,
comment|/* couldn't retrieve pool props */
name|EZFS_POOL_NOTSUP
block|,
comment|/* ops not supported for this type of pool */
name|EZFS_POOL_INVALARG
block|,
comment|/* invalid argument for this pool operation */
name|EZFS_NAMETOOLONG
block|,
comment|/* dataset name is too long */
name|EZFS_UNKNOWN
block|}
enum|;
comment|/*  * Basic handle types  */
typedef|typedef
name|struct
name|zfs_handle
name|zfs_handle_t
typedef|;
typedef|typedef
name|struct
name|zpool_handle
name|zpool_handle_t
typedef|;
typedef|typedef
name|struct
name|libzfs_handle
name|libzfs_handle_t
typedef|;
comment|/*  * Library initialization  */
specifier|extern
name|libzfs_handle_t
modifier|*
name|libzfs_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_fini
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|libzfs_handle_t
modifier|*
name|zpool_get_handle
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|libzfs_handle_t
modifier|*
name|zfs_get_handle
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|libzfs_print_on_error
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|libzfs_errno
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|libzfs_error_action
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|libzfs_error_description
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Basic handle functions  */
specifier|extern
name|zpool_handle_t
modifier|*
name|zpool_open
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zpool_handle_t
modifier|*
name|zpool_open_canfail
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_close
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zpool_get_name
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zpool_get_guid
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zpool_get_space_used
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zpool_get_space_total
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_root
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_state
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zpool_get_version
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Iterate over all active pools in the system.  */
typedef|typedef
name|int
function_decl|(
modifier|*
name|zpool_iter_f
function_decl|)
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_iter
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zpool_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Functions to create and destroy pools  */
specifier|extern
name|int
name|zpool_create
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_destroy
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_add
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Functions to manipulate pool and vdev state  */
specifier|extern
name|int
name|zpool_scrub
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|pool_scrub_type_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_online
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_offline
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_attach
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_detach
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_vdev_remove
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_clear
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zpool_find_vdev
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Functions to manage pool properties  */
specifier|extern
name|int
name|zpool_set_prop
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_prop
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
name|proplen
parameter_list|,
name|zfs_source_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zpool_prop_to_name
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zpool_prop_values
parameter_list|(
name|zpool_prop_t
parameter_list|)
function_decl|;
comment|/*  * Pool health statistics.  */
typedef|typedef
enum|enum
block|{
comment|/* 	 * The following correspond to faults as defined in the (fault.fs.zfs.*) 	 * event namespace.  Each is associated with a corresponding message ID. 	 */
name|ZPOOL_STATUS_CORRUPT_CACHE
block|,
comment|/* corrupt /kernel/drv/zpool.cache */
name|ZPOOL_STATUS_MISSING_DEV_R
block|,
comment|/* missing device with replicas */
name|ZPOOL_STATUS_MISSING_DEV_NR
block|,
comment|/* missing device with no replicas */
name|ZPOOL_STATUS_CORRUPT_LABEL_R
block|,
comment|/* bad device label with replicas */
name|ZPOOL_STATUS_CORRUPT_LABEL_NR
block|,
comment|/* bad device label with no replicas */
name|ZPOOL_STATUS_BAD_GUID_SUM
block|,
comment|/* sum of device guids didn't match */
name|ZPOOL_STATUS_CORRUPT_POOL
block|,
comment|/* pool metadata is corrupted */
name|ZPOOL_STATUS_CORRUPT_DATA
block|,
comment|/* data errors in user (meta)data */
name|ZPOOL_STATUS_FAILING_DEV
block|,
comment|/* device experiencing errors */
name|ZPOOL_STATUS_VERSION_NEWER
block|,
comment|/* newer on-disk version */
name|ZPOOL_STATUS_HOSTID_MISMATCH
block|,
comment|/* last accessed by another system */
comment|/* 	 * The following are not faults per se, but still an error possibly 	 * requiring administrative attention.  There is no corresponding 	 * message ID. 	 */
name|ZPOOL_STATUS_VERSION_OLDER
block|,
comment|/* older on-disk version */
name|ZPOOL_STATUS_RESILVERING
block|,
comment|/* device being resilvered */
name|ZPOOL_STATUS_OFFLINE_DEV
block|,
comment|/* device online */
comment|/* 	 * Finally, the following indicates a healthy pool. 	 */
name|ZPOOL_STATUS_OK
block|}
name|zpool_status_t
typedef|;
specifier|extern
name|zpool_status_t
name|zpool_get_status
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zpool_status_t
name|zpool_import_status
parameter_list|(
name|nvlist_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Statistics and configuration functions.  */
specifier|extern
name|nvlist_t
modifier|*
name|zpool_get_config
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_refresh_stats
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_errlog
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Import and export functions  */
specifier|extern
name|int
name|zpool_export
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_import
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Search for pools to import  */
specifier|extern
name|nvlist_t
modifier|*
name|zpool_find_import
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Miscellaneous pool functions  */
specifier|extern
name|char
modifier|*
name|zpool_vdev_name
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_upgrade
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_history
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_log_history
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zpool_obj_to_path
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|uint64_t
parameter_list|,
name|uint64_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
comment|/*  * Basic handle manipulations.  These functions do not create or destroy the  * underlying datasets, only the references to them.  */
specifier|extern
name|zfs_handle_t
modifier|*
name|zfs_open
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_close
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zfs_type_t
name|zfs_get_type
parameter_list|(
specifier|const
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_get_name
parameter_list|(
specifier|const
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Property management functions.  Some functions are shared with the kernel,  * and are found in sys/fs/zfs.h.  */
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_to_name
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_set
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|zfs_source_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_get_numeric
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|,
name|uint64_t
modifier|*
parameter_list|,
name|zfs_source_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zfs_prop_get_int
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_get_string
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_inherit
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_values
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_valid_for_type
parameter_list|(
name|zfs_prop_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_default_string
parameter_list|(
name|zfs_prop_t
name|prop
parameter_list|)
function_decl|;
specifier|extern
name|uint64_t
name|zfs_prop_default_numeric
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_prop_is_string
parameter_list|(
name|zfs_prop_t
name|prop
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_prop_column_name
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_prop_align_right
parameter_list|(
name|zfs_prop_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|nicebool
parameter_list|(
name|int
name|value
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|zfs_proplist
block|{
name|zfs_prop_t
name|pl_prop
decl_stmt|;
name|char
modifier|*
name|pl_user_prop
decl_stmt|;
name|struct
name|zfs_proplist
modifier|*
name|pl_next
decl_stmt|;
name|boolean_t
name|pl_all
decl_stmt|;
name|size_t
name|pl_width
decl_stmt|;
name|boolean_t
name|pl_fixed
decl_stmt|;
block|}
name|zfs_proplist_t
typedef|;
typedef|typedef
name|zfs_proplist_t
name|zpool_proplist_t
typedef|;
specifier|extern
name|int
name|zfs_get_proplist
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|zfs_proplist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_get_proplist
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|zpool_proplist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_expand_proplist
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_proplist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_expand_proplist
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|zpool_proplist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_free_proplist
parameter_list|(
name|zfs_proplist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|nvlist_t
modifier|*
name|zfs_get_user_props
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|ZFS_MOUNTPOINT_NONE
value|"none"
define|#
directive|define
name|ZFS_MOUNTPOINT_LEGACY
value|"legacy"
comment|/*  * Functions for printing properties from zfs/zpool  */
typedef|typedef
struct|struct
name|libzfs_get_cbdata
block|{
name|int
name|cb_sources
decl_stmt|;
name|int
name|cb_columns
index|[
literal|4
index|]
decl_stmt|;
name|int
name|cb_colwidths
index|[
literal|5
index|]
decl_stmt|;
name|boolean_t
name|cb_scripted
decl_stmt|;
name|boolean_t
name|cb_literal
decl_stmt|;
name|boolean_t
name|cb_first
decl_stmt|;
name|zfs_proplist_t
modifier|*
name|cb_proplist
decl_stmt|;
block|}
name|libzfs_get_cbdata_t
typedef|;
name|void
name|libzfs_print_one_property
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|libzfs_get_cbdata_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_source_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|GET_COL_NAME
value|1
define|#
directive|define
name|GET_COL_PROPERTY
value|2
define|#
directive|define
name|GET_COL_VALUE
value|3
define|#
directive|define
name|GET_COL_SOURCE
value|4
comment|/*  * Iterator functions.  */
typedef|typedef
name|int
function_decl|(
modifier|*
name|zfs_iter_f
function_decl|)
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_root
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_children
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_dependents
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_filesystems
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_iter_snapshots
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_iter_f
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Functions to create and destroy datasets.  */
specifier|extern
name|int
name|zfs_create
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_destroy
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_destroy_snaps
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_clone
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|nvlist_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_snapshot
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_rollback
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|zfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_rename
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_send
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_receive
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|boolean_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_promote
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Miscellaneous functions.  */
specifier|extern
specifier|const
name|char
modifier|*
name|zfs_type_to_name
parameter_list|(
name|zfs_type_t
parameter_list|)
function_decl|;
specifier|extern
name|void
name|zfs_refresh_properties
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_name_valid
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_disable
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_enable
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|zfs_handle_t
modifier|*
name|zfs_path_to_zhandle
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|zfs_type_t
parameter_list|)
function_decl|;
comment|/*  * Mount support functions.  */
specifier|extern
name|boolean_t
name|is_mounted
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|special
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_is_mounted
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_mount
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unmount
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unmountall
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/*  * Share support functions.  */
specifier|extern
name|boolean_t
name|zfs_is_shared
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_share
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshare
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Protocol-specifc share support functions.  */
specifier|extern
name|boolean_t
name|zfs_is_shared_nfs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_share_nfs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshare_nfs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshareall_nfs
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|boolean_t
name|zfs_is_shared_iscsi
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_share_iscsi
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_unshare_iscsi
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * FreeBSD-specific jail support function.  */
specifier|extern
name|int
name|zfs_jail
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/*  * When dealing with nvlists, verify() is extremely useful  */
ifndef|#
directive|ifndef
name|verify
ifdef|#
directive|ifdef
name|NDEBUG
define|#
directive|define
name|verify
parameter_list|(
name|EX
parameter_list|)
value|((void)(EX))
else|#
directive|else
define|#
directive|define
name|verify
parameter_list|(
name|EX
parameter_list|)
value|assert(EX)
endif|#
directive|endif
endif|#
directive|endif
comment|/*  * Utility function to convert a number to a human-readable form.  */
specifier|extern
name|void
name|zfs_nicenum
parameter_list|(
name|uint64_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zfs_nicestrtonum
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|uint64_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Pool destroy special.  Remove the device information without destroying  * the underlying dataset.  */
specifier|extern
name|int
name|zfs_remove_link
parameter_list|(
name|zfs_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Given a device or file, determine if it is part of a pool.  */
specifier|extern
name|int
name|zpool_in_use
parameter_list|(
name|libzfs_handle_t
modifier|*
parameter_list|,
name|int
parameter_list|,
name|pool_state_t
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|,
name|boolean_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * ftyp special.  Read the label from a given device.  */
specifier|extern
name|int
name|zpool_read_label
parameter_list|(
name|int
parameter_list|,
name|nvlist_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Create and remove zvol /dev links.  */
specifier|extern
name|int
name|zpool_create_zvol_links
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_remove_zvol_links
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|)
function_decl|;
comment|/*  * Enable and disable datasets within a pool by mounting/unmounting and  * sharing/unsharing them.  */
specifier|extern
name|int
name|zpool_enable_datasets
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|zpool_disable_datasets
parameter_list|(
name|zpool_handle_t
modifier|*
parameter_list|,
name|boolean_t
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__FreeBSD__
specifier|extern
name|int
name|zmount
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBZFS_H */
end_comment

end_unit

