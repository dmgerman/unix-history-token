begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000-2001 Boris Popov  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. All advertising materials mentioning features or use of this software  *    must display the following acknowledgement:  *    This product includes software developed by Boris Popov.  * 4. Neither the name of the author nor the names of any co-contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * $Id: smb_lib.h,v 1.22 2001/04/10 05:37:22 bp Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_NETSMB_SMB_LIB_H_
end_ifndef

begin_define
define|#
directive|define
name|_NETSMB_SMB_LIB_H_
end_define

begin_include
include|#
directive|include
file|<netsmb/smb.h>
end_include

begin_include
include|#
directive|include
file|<netsmb/smb_dev.h>
end_include

begin_define
define|#
directive|define
name|SMB_CFG_FILE
value|"/usr/local/etc/nsmb.conf"
end_define

begin_define
define|#
directive|define
name|STDPARAM_ARGS
value|'A':case 'B':case 'C':case 'E':case 'I': \ 		   case 'L':case 'M': \ 		   case 'N':case 'U':case 'R':case 'S':case 'T': \ 		   case 'W':case 'O':case 'P'
end_define

begin_define
define|#
directive|define
name|STDPARAM_OPT
value|"A:BCE:I:L:M:NO:P:U:R:S:T:W:"
end_define

begin_comment
comment|/*  * bits to indicate the source of error  */
end_comment

begin_define
define|#
directive|define
name|SMB_ERRTYPE_MASK
value|0xf0000
end_define

begin_define
define|#
directive|define
name|SMB_SYS_ERROR
value|0x00000
end_define

begin_define
define|#
directive|define
name|SMB_RAP_ERROR
value|0x10000
end_define

begin_define
define|#
directive|define
name|SMB_NB_ERROR
value|0x20000
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|min
end_ifndef

begin_define
define|#
directive|define
name|min
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|(((a)<(b)) ? (a) : (b))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|getb
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(((const u_int8_t *)(buf))[ofs])
end_define

begin_define
define|#
directive|define
name|setb
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
value|(((u_int8_t*)(buf))[ofs])=val
end_define

begin_define
define|#
directive|define
name|getbw
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|((u_int16_t)(getb(buf,ofs)))
end_define

begin_define
define|#
directive|define
name|getw
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(*((u_int16_t*)(&((u_int8_t*)(buf))[ofs])))
end_define

begin_define
define|#
directive|define
name|getdw
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(*((u_int32_t*)(&((u_int8_t*)(buf))[ofs])))
end_define

begin_if
if|#
directive|if
operator|(
name|BYTE_ORDER
operator|==
name|LITTLE_ENDIAN
operator|)
end_if

begin_define
define|#
directive|define
name|getwle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(*((u_int16_t*)(&((u_int8_t*)(buf))[ofs])))
end_define

begin_define
define|#
directive|define
name|getdle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(*((u_int32_t*)(&((u_int8_t*)(buf))[ofs])))
end_define

begin_define
define|#
directive|define
name|getwbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(ntohs(getwle(buf,ofs)))
end_define

begin_define
define|#
directive|define
name|getdbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(ntohl(getdle(buf,ofs)))
end_define

begin_define
define|#
directive|define
name|setwle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
value|getwle(buf,ofs)=val
end_define

begin_define
define|#
directive|define
name|setwbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
value|getwle(buf,ofs)=htons(val)
end_define

begin_define
define|#
directive|define
name|setdle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
value|getdle(buf,ofs)=val
end_define

begin_define
define|#
directive|define
name|setdbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
value|getdle(buf,ofs)=htonl(val)
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* (BYTE_ORDER == LITTLE_ENDIAN) */
end_comment

begin_error
error|#
directive|error
literal|"Macros for Big-Endians are incomplete"
end_error

begin_define
define|#
directive|define
name|getwle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|((u_int16_t)(getb(buf, ofs) | (getb(buf, ofs + 1)<< 8)))
end_define

begin_define
define|#
directive|define
name|getdle
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|((u_int32_t)(getb(buf, ofs) | \ 				    (getb(buf, ofs + 1)<< 8) | \ 				    (getb(buf, ofs + 2)<< 16) | \ 				    (getb(buf, ofs + 3)<< 24)))
end_define

begin_define
define|#
directive|define
name|getwbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(*((u_int16_t*)(&((u_int8_t*)(buf))[ofs])))
end_define

begin_define
define|#
directive|define
name|getdbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|)
value|(*((u_int32_t*)(&((u_int8_t*)(buf))[ofs])))
end_define

begin_comment
comment|/* #define setwle(buf,ofs,val) getwle(buf,ofs)=val #define setdle(buf,ofs,val) getdle(buf,ofs)=val */
end_comment

begin_define
define|#
directive|define
name|setwbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
value|getwle(buf,ofs)=val
end_define

begin_define
define|#
directive|define
name|setdbe
parameter_list|(
name|buf
parameter_list|,
name|ofs
parameter_list|,
name|val
parameter_list|)
value|getdle(buf,ofs)=val
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* (BYTE_ORDER == LITTLE_ENDIAN) */
end_comment

begin_comment
comment|/*  * SMB work context. Used to store all values which is necessary  * to establish connection to an SMB server.  */
end_comment

begin_struct
struct|struct
name|smb_ctx
block|{
name|int
name|ct_flags
decl_stmt|;
comment|/* SMBCF_ */
name|int
name|ct_fd
decl_stmt|;
comment|/* handle of connection */
name|int
name|ct_parsedlevel
decl_stmt|;
name|int
name|ct_minlevel
decl_stmt|;
name|int
name|ct_maxlevel
decl_stmt|;
name|char
modifier|*
name|ct_srvaddr
decl_stmt|;
comment|/* hostname or IP address of server */
name|char
name|ct_locname
index|[
name|SMB_MAXUSERNAMELEN
operator|+
literal|1
index|]
decl_stmt|;
specifier|const
name|char
modifier|*
name|ct_uncnext
decl_stmt|;
name|struct
name|nb_ctx
modifier|*
name|ct_nb
decl_stmt|;
name|struct
name|smbioc_ossn
name|ct_ssn
decl_stmt|;
name|struct
name|smbioc_oshare
name|ct_sh
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|SMBCF_NOPWD
value|0x0001
end_define

begin_comment
comment|/* don't ask for a password */
end_comment

begin_define
define|#
directive|define
name|SMBCF_SRIGHTS
value|0x0002
end_define

begin_comment
comment|/* share access rights was supplied */
end_comment

begin_define
define|#
directive|define
name|SMBCF_LOCALE
value|0x0004
end_define

begin_comment
comment|/* use current locale */
end_comment

begin_define
define|#
directive|define
name|SMBCF_RESOLVED
value|0x8000
end_define

begin_comment
comment|/* structure has been verified */
end_comment

begin_comment
comment|/*  * request handling structures  */
end_comment

begin_struct
struct|struct
name|mbuf
block|{
name|int
name|m_len
decl_stmt|;
name|int
name|m_maxlen
decl_stmt|;
name|char
modifier|*
name|m_data
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|m_next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mbdata
block|{
name|struct
name|mbuf
modifier|*
name|mb_top
decl_stmt|;
name|struct
name|mbuf
modifier|*
name|mb_cur
decl_stmt|;
name|char
modifier|*
name|mb_pos
decl_stmt|;
name|int
name|mb_count
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|M_ALIGNFACTOR
value|(sizeof(long))
end_define

begin_define
define|#
directive|define
name|M_ALIGN
parameter_list|(
name|len
parameter_list|)
value|(((len) + M_ALIGNFACTOR - 1)& ~(M_ALIGNFACTOR - 1))
end_define

begin_define
define|#
directive|define
name|M_BASESIZE
value|(sizeof(struct mbuf))
end_define

begin_define
define|#
directive|define
name|M_MINSIZE
value|(256 - M_BASESIZE)
end_define

begin_define
define|#
directive|define
name|M_TOP
parameter_list|(
name|m
parameter_list|)
value|((char*)(m) + M_BASESIZE)
end_define

begin_define
define|#
directive|define
name|mtod
parameter_list|(
name|m
parameter_list|,
name|t
parameter_list|)
value|((t)(m)->m_data)
end_define

begin_define
define|#
directive|define
name|M_TRAILINGSPACE
parameter_list|(
name|m
parameter_list|)
value|((m)->m_maxlen - (m)->m_len)
end_define

begin_struct
struct|struct
name|smb_rq
block|{
name|u_char
name|rq_cmd
decl_stmt|;
name|struct
name|mbdata
name|rq_rq
decl_stmt|;
name|struct
name|mbdata
name|rq_rp
decl_stmt|;
name|struct
name|smb_ctx
modifier|*
name|rq_ctx
decl_stmt|;
name|int
name|rq_wcount
decl_stmt|;
name|int
name|rq_bcount
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|smb_bitname
block|{
name|u_int
name|bn_bit
decl_stmt|;
name|char
modifier|*
name|bn_name
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|rcfile
modifier|*
name|smb_rc
decl_stmt|;
end_decl_stmt

begin_macro
name|__BEGIN_DECLS
end_macro

begin_struct_decl
struct_decl|struct
name|sockaddr
struct_decl|;
end_struct_decl

begin_function_decl
name|int
name|smb_lib_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_open_rcfile
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|smb_error
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|smb_printb
parameter_list|(
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|struct
name|smb_bitname
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|smb_dumptree
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Context management  */
end_comment

begin_function_decl
name|int
name|smb_ctx_init
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
index|[]
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|smb_ctx_done
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_parseunc
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setcharset
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setserver
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setuser
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setshare
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setscope
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setworkgroup
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setpassword
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setsrvaddr
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_opt
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_lookup
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_login
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_readrc
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_resolve
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_ctx_setflags
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_smb_open_print_file
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|smbfh
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_smb_close_print_file
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|smbfh
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_read
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|smbfh
parameter_list|,
name|off_t
parameter_list|,
name|size_t
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_write
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|smbfh
parameter_list|,
name|off_t
parameter_list|,
name|size_t
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|smb_rq_getrequest
parameter_list|(
name|rqp
parameter_list|)
value|(&(rqp)->rq_rq)
end_define

begin_define
define|#
directive|define
name|smb_rq_getreply
parameter_list|(
name|rqp
parameter_list|)
value|(&(rqp)->rq_rp)
end_define

begin_function_decl
name|int
name|smb_rq_init
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|u_char
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|smb_rq
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|smb_rq_done
parameter_list|(
name|struct
name|smb_rq
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|smb_rq_wend
parameter_list|(
name|struct
name|smb_rq
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_rq_simple
parameter_list|(
name|struct
name|smb_rq
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_rq_dmem
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_rq_dstring
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_t2_request
parameter_list|(
name|struct
name|smb_ctx
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|smb_simplecrypt
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|smb_simpledecrypt
parameter_list|(
name|char
modifier|*
name|dst
parameter_list|,
specifier|const
name|char
modifier|*
name|src
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|m_getm
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|m_lineup
parameter_list|(
name|struct
name|mbuf
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_init
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_initm
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_done
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_fit
parameter_list|(
name|struct
name|mbdata
modifier|*
name|mbp
parameter_list|,
name|size_t
name|size
parameter_list|,
name|char
modifier|*
modifier|*
name|pp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_uint8
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_uint16be
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_uint16le
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_uint32be
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_uint32le
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_int64be
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_int64le
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|int64_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_mem
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_pstring
parameter_list|(
name|struct
name|mbdata
modifier|*
name|mbp
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_put_mbuf
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|struct
name|mbuf
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_uint8
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_uint16
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int16_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_uint16le
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int16_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_uint16be
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int16_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_uint32
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_uint32be
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_uint32le
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|u_int32_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_int64
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|int64_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_int64be
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|int64_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_int64le
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|int64_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|mb_get_mem
parameter_list|(
name|struct
name|mbdata
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|u_char
name|nls_lower
index|[
literal|256
index|]
decl_stmt|,
name|nls_upper
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|nls_setrecode
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nls_setlocale
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|nls_str_toext
parameter_list|(
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|nls_str_toloc
parameter_list|(
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|nls_mem_toext
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|nls_mem_toloc
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|nls_str_upper
parameter_list|(
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|nls_str_lower
parameter_list|(
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|__END_DECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _NETSMB_SMB_LIB_H_ */
end_comment

end_unit

