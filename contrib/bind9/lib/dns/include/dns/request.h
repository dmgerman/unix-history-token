begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2004  Internet Systems Consortium, Inc. ("ISC")  * Copyright (C) 2000-2002  Internet Software Consortium.  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH  * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY  * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,  * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM  * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE  * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR  * PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_comment
comment|/* $Id: request.h,v 1.17.12.5 2004/03/08 09:04:39 marka Exp $ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DNS_REQUEST_H
end_ifndef

begin_define
define|#
directive|define
name|DNS_REQUEST_H
value|1
end_define

begin_comment
comment|/*****  ***** Module Info  *****/
end_comment

begin_comment
comment|/*  * DNS Request  *  * The request module provides simple request/response services useful for  * sending SOA queries, DNS Notify messages, and dynamic update requests.  *  * MP:  *	The module ensures appropriate synchronization of data structures it  *	creates and manipulates.  *  * Resources:  *<TBS>  *  * Security:  *	No anticipated impact.  */
end_comment

begin_include
include|#
directive|include
file|<isc/lang.h>
end_include

begin_include
include|#
directive|include
file|<isc/event.h>
end_include

begin_include
include|#
directive|include
file|<dns/types.h>
end_include

begin_define
define|#
directive|define
name|DNS_REQUESTOPT_TCP
value|0x00000001U
end_define

begin_typedef
typedef|typedef
struct|struct
name|dns_requestevent
block|{
name|ISC_EVENT_COMMON
argument_list|(
expr|struct
name|dns_requestevent
argument_list|)
expr_stmt|;
name|isc_result_t
name|result
decl_stmt|;
name|dns_request_t
modifier|*
name|request
decl_stmt|;
block|}
name|dns_requestevent_t
typedef|;
end_typedef

begin_function_decl
name|ISC_LANG_BEGINDECLS
name|isc_result_t
name|dns_requestmgr_create
parameter_list|(
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|isc_timermgr_t
modifier|*
name|timermgr
parameter_list|,
name|isc_socketmgr_t
modifier|*
name|socketmgr
parameter_list|,
name|isc_taskmgr_t
modifier|*
name|taskmgr
parameter_list|,
name|dns_dispatchmgr_t
modifier|*
name|dispatchmgr
parameter_list|,
name|dns_dispatch_t
modifier|*
name|dispatchv4
parameter_list|,
name|dns_dispatch_t
modifier|*
name|dispatchv6
parameter_list|,
name|dns_requestmgr_t
modifier|*
modifier|*
name|requestmgrp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Create a request manager.  *  * Requires:  *  *	'mctx' is a valid memory context.  *  *	'timermgr' is a valid timer manager.  *  *	'socketmgr' is a valid socket manager.  *  *	'taskmgr' is a valid task manager.  *  *	'dispatchv4' is a valid dispatcher with an IPv4 UDP socket, or is NULL.  *  *	'dispatchv6' is a valid dispatcher with an IPv6 UDP socket, or is NULL.  *  *	requestmgrp != NULL&& *requestmgrp == NULL  *  * Ensures:  *  *	On success, *requestmgrp is a valid request manager.  *  * Returns:  *  *	ISC_R_SUCCESS  *  *	Any other result indicates failure.  */
end_comment

begin_function_decl
name|void
name|dns_requestmgr_whenshutdown
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|,
name|isc_task_t
modifier|*
name|task
parameter_list|,
name|isc_event_t
modifier|*
modifier|*
name|eventp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Send '*eventp' to 'task' when 'requestmgr' has completed shutdown.  *  * Notes:  *  *	It is not safe to detach the last reference to 'requestmgr' until  *	shutdown is complete.  *  * Requires:  *  *	'requestmgr' is a valid request manager.  *  *	'task' is a valid task.  *  *	*eventp is a valid event.  *  * Ensures:  *  *	*eventp == NULL.  */
end_comment

begin_function_decl
name|void
name|dns_requestmgr_shutdown
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Start the shutdown process for 'requestmgr'.  *  * Notes:  *  *	This call has no effect if the request manager is already shutting  *	down.  *  * Requires:  *  *	'requestmgr' is a valid requestmgr.  */
end_comment

begin_function_decl
name|void
name|dns_requestmgr_attach
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|source
parameter_list|,
name|dns_requestmgr_t
modifier|*
modifier|*
name|targetp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  *	Attach to the request manager.  dns_requestmgr_shutdown() must not  *	have been called on 'source' prior to calling dns_requestmgr_attach().  *  * Requires:  *  *	'source' is a valid requestmgr.  *  *	'targetp' to be non NULL and '*targetp' to be NULL.  */
end_comment

begin_function_decl
name|void
name|dns_requestmgr_detach
parameter_list|(
name|dns_requestmgr_t
modifier|*
modifier|*
name|requestmgrp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  *  *	Detach from the given requestmgr.  If this is the final detach  *	requestmgr will be destroyed.  dns_requestmgr_shutdown() must  *	be called before the final detach.  *  * Requires:  *  *	'*requestmgrp' is a valid requestmgr.  *  * Ensures:  *	'*requestmgrp' is NULL.  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_request_create
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|,
name|dns_message_t
modifier|*
name|message
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|address
parameter_list|,
name|unsigned
name|int
name|options
parameter_list|,
name|dns_tsigkey_t
modifier|*
name|key
parameter_list|,
name|unsigned
name|int
name|timeout
parameter_list|,
name|isc_task_t
modifier|*
name|task
parameter_list|,
name|isc_taskaction_t
name|action
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|dns_request_t
modifier|*
modifier|*
name|requestp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Create and send a request.  *  * Notes:  *  *	'message' will be rendered and sent to 'address'.  If the  *	DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request  *	will timeout after 'timeout' seconds.  *  *	When the request completes, successfully, due to a timeout, or  *	because it was canceled, a completion event will be sent to 'task'.  *  * Requires:  *  *	'message' is a valid DNS message.  *  *	'address' is a valid sockaddr.  *  *	'timeout'> 0  *  *	'task' is a valid task.  *  *	requestp != NULL&& *requestp == NULL  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_request_createvia
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|,
name|dns_message_t
modifier|*
name|message
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|srcaddr
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|destaddr
parameter_list|,
name|unsigned
name|int
name|options
parameter_list|,
name|dns_tsigkey_t
modifier|*
name|key
parameter_list|,
name|unsigned
name|int
name|timeout
parameter_list|,
name|isc_task_t
modifier|*
name|task
parameter_list|,
name|isc_taskaction_t
name|action
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|dns_request_t
modifier|*
modifier|*
name|requestp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dns_request_createvia2
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|,
name|dns_message_t
modifier|*
name|message
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|srcaddr
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|destaddr
parameter_list|,
name|unsigned
name|int
name|options
parameter_list|,
name|dns_tsigkey_t
modifier|*
name|key
parameter_list|,
name|unsigned
name|int
name|timeout
parameter_list|,
name|unsigned
name|int
name|udptimeout
parameter_list|,
name|isc_task_t
modifier|*
name|task
parameter_list|,
name|isc_taskaction_t
name|action
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|dns_request_t
modifier|*
modifier|*
name|requestp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dns_request_createvia3
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|,
name|dns_message_t
modifier|*
name|message
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|srcaddr
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|destaddr
parameter_list|,
name|unsigned
name|int
name|options
parameter_list|,
name|dns_tsigkey_t
modifier|*
name|key
parameter_list|,
name|unsigned
name|int
name|timeout
parameter_list|,
name|unsigned
name|int
name|udptimeout
parameter_list|,
name|unsigned
name|int
name|udpretries
parameter_list|,
name|isc_task_t
modifier|*
name|task
parameter_list|,
name|isc_taskaction_t
name|action
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|dns_request_t
modifier|*
modifier|*
name|requestp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Create and send a request.  *  * Notes:  *  *	'message' will be rendered and sent to 'address'.  If the  *	DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request  *	will timeout after 'timeout' seconds.  UDP requests will be resent  *	at 'udptimeout' intervals if non-zero or 'udpretries' is non-zero.  *  *	When the request completes, successfully, due to a timeout, or  *	because it was canceled, a completion event will be sent to 'task'.  *  * Requires:  *  *	'message' is a valid DNS message.  *  *	'dstaddr' is a valid sockaddr.  *  *	'srcaddr' is a valid sockaddr or NULL.  *  *	'srcaddr' and 'dstaddr' are the same protocol family.  *  *	'timeout'> 0  *  *	'task' is a valid task.  *  *	requestp != NULL&& *requestp == NULL  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_request_createraw
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|,
name|isc_buffer_t
modifier|*
name|msgbuf
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|srcaddr
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|destaddr
parameter_list|,
name|unsigned
name|int
name|options
parameter_list|,
name|unsigned
name|int
name|timeout
parameter_list|,
name|isc_task_t
modifier|*
name|task
parameter_list|,
name|isc_taskaction_t
name|action
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|dns_request_t
modifier|*
modifier|*
name|requestp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dns_request_createraw2
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|,
name|isc_buffer_t
modifier|*
name|msgbuf
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|srcaddr
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|destaddr
parameter_list|,
name|unsigned
name|int
name|options
parameter_list|,
name|unsigned
name|int
name|timeout
parameter_list|,
name|unsigned
name|int
name|udptimeout
parameter_list|,
name|isc_task_t
modifier|*
name|task
parameter_list|,
name|isc_taskaction_t
name|action
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|dns_request_t
modifier|*
modifier|*
name|requestp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dns_request_createraw3
parameter_list|(
name|dns_requestmgr_t
modifier|*
name|requestmgr
parameter_list|,
name|isc_buffer_t
modifier|*
name|msgbuf
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|srcaddr
parameter_list|,
name|isc_sockaddr_t
modifier|*
name|destaddr
parameter_list|,
name|unsigned
name|int
name|options
parameter_list|,
name|unsigned
name|int
name|timeout
parameter_list|,
name|unsigned
name|int
name|udptimeout
parameter_list|,
name|unsigned
name|int
name|udpretries
parameter_list|,
name|isc_task_t
modifier|*
name|task
parameter_list|,
name|isc_taskaction_t
name|action
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|,
name|dns_request_t
modifier|*
modifier|*
name|requestp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Create and send a request.  *  * Notes:  *  *	'msgbuf' will be sent to 'destaddr' after setting the id.  If the  *	DNS_REQUESTOPT_TCP option is set, TCP will be used.  The request  *	will timeout after 'timeout' seconds.   UDP requests will be resent  *	at 'udptimeout' intervals if non-zero or if 'udpretries' is not zero.  *	  *	When the request completes, successfully, due to a timeout, or  *	because it was canceled, a completion event will be sent to 'task'.  *  * Requires:  *  *	'msgbuf' is a valid DNS message in compressed wire format.  *  *	'destaddr' is a valid sockaddr.  *  *	'srcaddr' is a valid sockaddr or NULL.  *  *	'srcaddr' and 'dstaddr' are the same protocol family.  *  *	'timeout'> 0  *  *	'task' is a valid task.  *  *	requestp != NULL&& *requestp == NULL  */
end_comment

begin_function_decl
name|void
name|dns_request_cancel
parameter_list|(
name|dns_request_t
modifier|*
name|request
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Cancel 'request'.  *  * Requires:  *  *	'request' is a valid request.  *  * Ensures:  *  *	If the completion event for 'request' has not yet been sent, it  *	will be sent, and the result code will be ISC_R_CANCELED.  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_request_getresponse
parameter_list|(
name|dns_request_t
modifier|*
name|request
parameter_list|,
name|dns_message_t
modifier|*
name|message
parameter_list|,
name|unsigned
name|int
name|options
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Get the response to 'request' by filling in 'message'.  *  * 'options' is passed to dns_message_parse().  See dns_message_parse()  * for more details.  *  * Requires:  *  *	'request' is a valid request for which the caller has received the  *	completion event.  *  *	The result code of the completion event was ISC_R_SUCCESS.  *  * Returns:  *  *	ISC_R_SUCCESS  *  *	Any result that dns_message_parse() can return.  */
end_comment

begin_function_decl
name|isc_boolean_t
name|dns_request_usedtcp
parameter_list|(
name|dns_request_t
modifier|*
name|request
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Return whether this query used TCP or not.  Setting DNS_REQUESTOPT_TCP  * in the call to dns_request_create() will cause the function to return  * ISC_TRUE, othewise the result is based on the query message size.  *  * Requires:  *	'request' is a valid request.  *  * Returns:  *	ISC_TRUE	if TCP was used.  *	ISC_FALSE	if UDP was used.  */
end_comment

begin_function_decl
name|void
name|dns_request_destroy
parameter_list|(
name|dns_request_t
modifier|*
modifier|*
name|requestp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*  * Destroy 'request'.  *  * Requires:  *  *	'request' is a valid request for which the caller has received the  *	completion event.  *  * Ensures:  *  *	*requestp == NULL  */
end_comment

begin_macro
name|ISC_LANG_ENDDECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DNS_REQUEST_H */
end_comment

end_unit

