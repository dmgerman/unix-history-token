begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2004-2007, 2009-2014  Internet Systems Consortium, Inc. ("ISC")  * Copyright (C) 1999-2002  Internet Software Consortium.  *  * Permission to use, copy, modify, and/or distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND ISC DISCLAIMS ALL WARRANTIES WITH  * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY  * AND FITNESS.  IN NO EVENT SHALL ISC BE LIABLE FOR ANY SPECIAL, DIRECT,  * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM  * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE  * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR  * PERFORMANCE OF THIS SOFTWARE.  */
end_comment

begin_comment
comment|/* $Id$ */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DNS_DNSSEC_H
end_ifndef

begin_define
define|#
directive|define
name|DNS_DNSSEC_H
value|1
end_define

begin_comment
comment|/*! \file dns/dnssec.h */
end_comment

begin_include
include|#
directive|include
file|<isc/lang.h>
end_include

begin_include
include|#
directive|include
file|<isc/stdtime.h>
end_include

begin_include
include|#
directive|include
file|<isc/stats.h>
end_include

begin_include
include|#
directive|include
file|<dns/diff.h>
end_include

begin_include
include|#
directive|include
file|<dns/types.h>
end_include

begin_include
include|#
directive|include
file|<dst/dst.h>
end_include

begin_decl_stmt
name|ISC_LANG_BEGINDECLS
name|LIBDNS_EXTERNAL_DATA
specifier|extern
name|isc_stats_t
modifier|*
name|dns_dnssec_stats
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*%< Maximum number of keys supported in a zone. */
end_comment

begin_define
define|#
directive|define
name|DNS_MAXZONEKEYS
value|32
end_define

begin_comment
comment|/*  * Indicates how the signer found this key: in the key repository, at the  * zone apex, or specified by the user.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|dns_keysource_unknown
block|,
name|dns_keysource_repository
block|,
name|dns_keysource_zoneapex
block|,
name|dns_keysource_user
block|}
name|dns_keysource_t
typedef|;
end_typedef

begin_comment
comment|/*  * A DNSSEC key and hints about its intended use gleaned from metadata  */
end_comment

begin_struct
struct|struct
name|dns_dnsseckey
block|{
name|dst_key_t
modifier|*
name|key
decl_stmt|;
name|isc_boolean_t
name|hint_publish
decl_stmt|;
comment|/*% metadata says to publish */
name|isc_boolean_t
name|force_publish
decl_stmt|;
comment|/*% publish regardless of metadata */
name|isc_boolean_t
name|hint_sign
decl_stmt|;
comment|/*% metadata says to sign with this key */
name|isc_boolean_t
name|force_sign
decl_stmt|;
comment|/*% sign with key regardless of metadata */
name|isc_boolean_t
name|hint_remove
decl_stmt|;
comment|/*% metadata says *don't* publish */
name|isc_boolean_t
name|is_active
decl_stmt|;
comment|/*% key is already active */
name|isc_boolean_t
name|first_sign
decl_stmt|;
comment|/*% key is newly becoming active */
name|unsigned
name|int
name|prepublish
decl_stmt|;
comment|/*% how long until active? */
name|dns_keysource_t
name|source
decl_stmt|;
comment|/*% how the key was found */
name|isc_boolean_t
name|ksk
decl_stmt|;
comment|/*% this is a key-signing key */
name|isc_boolean_t
name|legacy
decl_stmt|;
comment|/*% this is old-style key with no 					 metadata (possibly generated by 					 an older version of BIND9) and 					 should be ignored when searching 					 for keys to import into the zone */
name|unsigned
name|int
name|index
decl_stmt|;
comment|/*% position in list */
name|ISC_LINK
argument_list|(
argument|dns_dnsseckey_t
argument_list|)
name|link
expr_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|isc_result_t
name|dns_dnssec_keyfromrdata
parameter_list|(
name|dns_name_t
modifier|*
name|name
parameter_list|,
name|dns_rdata_t
modifier|*
name|rdata
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|dst_key_t
modifier|*
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  *	Creates a DST key from a DNS record.  Basically a wrapper around  *	dst_key_fromdns().  *  *	Requires:  *\li		'name' is not NULL  *\li		'rdata' is not NULL  *\li		'mctx' is not NULL  *\li		'key' is not NULL  *\li		'*key' is NULL  *  *	Returns:  *\li		#ISC_R_SUCCESS  *\li		#ISC_R_NOMEMORY  *\li		DST_R_INVALIDPUBLICKEY  *\li		various errors from dns_name_totext  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnssec_sign
parameter_list|(
name|dns_name_t
modifier|*
name|name
parameter_list|,
name|dns_rdataset_t
modifier|*
name|set
parameter_list|,
name|dst_key_t
modifier|*
name|key
parameter_list|,
name|isc_stdtime_t
modifier|*
name|inception
parameter_list|,
name|isc_stdtime_t
modifier|*
name|expire
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|isc_buffer_t
modifier|*
name|buffer
parameter_list|,
name|dns_rdata_t
modifier|*
name|sigrdata
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  *	Generates a RRSIG record covering this rdataset.  This has no effect  *	on existing RRSIG records.  *  *	Requires:  *\li		'name' (the owner name of the record) is a valid name  *\li		'set' is a valid rdataset  *\li		'key' is a valid key  *\li		'inception' is not NULL  *\li		'expire' is not NULL  *\li		'mctx' is not NULL  *\li		'buffer' is not NULL  *\li		'sigrdata' is not NULL  *  *	Returns:  *\li		#ISC_R_SUCCESS  *\li		#ISC_R_NOMEMORY  *\li		#ISC_R_NOSPACE  *\li		#DNS_R_INVALIDTIME - the expiration is before the inception  *\li		#DNS_R_KEYUNAUTHORIZED - the key cannot sign this data (either  *			it is not a zone key or its flags prevent  *			authentication)  *\li		DST_R_*  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnssec_verify
parameter_list|(
name|dns_name_t
modifier|*
name|name
parameter_list|,
name|dns_rdataset_t
modifier|*
name|set
parameter_list|,
name|dst_key_t
modifier|*
name|key
parameter_list|,
name|isc_boolean_t
name|ignoretime
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|dns_rdata_t
modifier|*
name|sigrdata
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dns_dnssec_verify2
parameter_list|(
name|dns_name_t
modifier|*
name|name
parameter_list|,
name|dns_rdataset_t
modifier|*
name|set
parameter_list|,
name|dst_key_t
modifier|*
name|key
parameter_list|,
name|isc_boolean_t
name|ignoretime
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|dns_rdata_t
modifier|*
name|sigrdata
parameter_list|,
name|dns_name_t
modifier|*
name|wild
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dns_dnssec_verify3
parameter_list|(
name|dns_name_t
modifier|*
name|name
parameter_list|,
name|dns_rdataset_t
modifier|*
name|set
parameter_list|,
name|dst_key_t
modifier|*
name|key
parameter_list|,
name|isc_boolean_t
name|ignoretime
parameter_list|,
name|unsigned
name|int
name|maxbits
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|dns_rdata_t
modifier|*
name|sigrdata
parameter_list|,
name|dns_name_t
modifier|*
name|wild
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  *	Verifies the RRSIG record covering this rdataset signed by a specific  *	key.  This does not determine if the key's owner is authorized to sign  *	this record, as this requires a resolver or database.  *	If 'ignoretime' is ISC_TRUE, temporal validity will not be checked.  *  *	'maxbits' specifies the maximum number of rsa exponent bits accepted.  *  *	Requires:  *\li		'name' (the owner name of the record) is a valid name  *\li		'set' is a valid rdataset  *\li		'key' is a valid key  *\li		'mctx' is not NULL  *\li		'sigrdata' is a valid rdata containing a SIG record  *\li		'wild' if non-NULL then is a valid and has a buffer.  *  *	Returns:  *\li		#ISC_R_SUCCESS  *\li		#ISC_R_NOMEMORY  *\li		#DNS_R_FROMWILDCARD - the signature is valid and is from  *			a wildcard expansion.  dns_dnssec_verify2() only.  *			'wild' contains the name of the wildcard if non-NULL.  *\li		#DNS_R_SIGINVALID - the signature fails to verify  *\li		#DNS_R_SIGEXPIRED - the signature has expired  *\li		#DNS_R_SIGFUTURE - the signature's validity period has not begun  *\li		#DNS_R_KEYUNAUTHORIZED - the key cannot sign this data (either  *			it is not a zone key or its flags prevent  *			authentication)  *\li		DST_R_*  */
end_comment

begin_comment
comment|/*@{*/
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnssec_findzonekeys
parameter_list|(
name|dns_db_t
modifier|*
name|db
parameter_list|,
name|dns_dbversion_t
modifier|*
name|ver
parameter_list|,
name|dns_dbnode_t
modifier|*
name|node
parameter_list|,
name|dns_name_t
modifier|*
name|name
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|unsigned
name|int
name|maxkeys
parameter_list|,
name|dst_key_t
modifier|*
modifier|*
name|keys
parameter_list|,
name|unsigned
name|int
modifier|*
name|nkeys
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dns_dnssec_findzonekeys2
parameter_list|(
name|dns_db_t
modifier|*
name|db
parameter_list|,
name|dns_dbversion_t
modifier|*
name|ver
parameter_list|,
name|dns_dbnode_t
modifier|*
name|node
parameter_list|,
name|dns_name_t
modifier|*
name|name
parameter_list|,
specifier|const
name|char
modifier|*
name|directory
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|unsigned
name|int
name|maxkeys
parameter_list|,
name|dst_key_t
modifier|*
modifier|*
name|keys
parameter_list|,
name|unsigned
name|int
modifier|*
name|nkeys
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  * 	Finds a set of zone keys.  * 	XXX temporary - this should be handled in dns_zone_t.  */
end_comment

begin_comment
comment|/*@}*/
end_comment

begin_function_decl
name|isc_boolean_t
name|dns_dnssec_keyactive
parameter_list|(
name|dst_key_t
modifier|*
name|key
parameter_list|,
name|isc_stdtime_t
name|now
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  *  * 	Returns ISC_TRUE if 'key' is active as of the time specified  * 	in 'now' (i.e., if the activation date has passed, inactivation or  * 	deletion date has not yet been reached, and the key is not revoked  * 	-- or if it is a legacy key without metadata). Otherwise returns  * 	ISC_FALSE.  *  *	Requires:  *\li		'key' is a valid key  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnssec_signmessage
parameter_list|(
name|dns_message_t
modifier|*
name|msg
parameter_list|,
name|dst_key_t
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  *	Signs a message with a SIG(0) record.  This is implicitly called by  *	dns_message_renderend() if msg->sig0key is not NULL.  *  *	Requires:  *\li		'msg' is a valid message  *\li		'key' is a valid key that can be used for signing  *  *	Returns:  *\li		#ISC_R_SUCCESS  *\li		#ISC_R_NOMEMORY  *\li		DST_R_*  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnssec_verifymessage
parameter_list|(
name|isc_buffer_t
modifier|*
name|source
parameter_list|,
name|dns_message_t
modifier|*
name|msg
parameter_list|,
name|dst_key_t
modifier|*
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  *	Verifies a message signed by a SIG(0) record.  This is not  *	called implicitly by dns_message_parse().  If dns_message_signer()  *	is called before dns_dnssec_verifymessage(), it will return  *	#DNS_R_NOTVERIFIEDYET.  dns_dnssec_verifymessage() will set  *	the verified_sig0 flag in msg if the verify succeeds, and  *	the sig0status field otherwise.  *  *	Requires:  *\li		'source' is a valid buffer containing the unparsed message  *\li		'msg' is a valid message  *\li		'key' is a valid key  *  *	Returns:  *\li		#ISC_R_SUCCESS  *\li		#ISC_R_NOMEMORY  *\li		#ISC_R_NOTFOUND - no SIG(0) was found  *\li		#DNS_R_SIGINVALID - the SIG record is not well-formed or  *				   was not generated by the key.  *\li		DST_R_*  */
end_comment

begin_function_decl
name|isc_boolean_t
name|dns_dnssec_selfsigns
parameter_list|(
name|dns_rdata_t
modifier|*
name|rdata
parameter_list|,
name|dns_name_t
modifier|*
name|name
parameter_list|,
name|dns_rdataset_t
modifier|*
name|rdataset
parameter_list|,
name|dns_rdataset_t
modifier|*
name|sigrdataset
parameter_list|,
name|isc_boolean_t
name|ignoretime
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_boolean_t
name|dns_dnssec_signs
parameter_list|(
name|dns_rdata_t
modifier|*
name|rdata
parameter_list|,
name|dns_name_t
modifier|*
name|name
parameter_list|,
name|dns_rdataset_t
modifier|*
name|rdataset
parameter_list|,
name|dns_rdataset_t
modifier|*
name|sigrdataset
parameter_list|,
name|isc_boolean_t
name|ignoretime
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  * Verify that 'rdataset' is validly signed in 'sigrdataset' by  * the key in 'rdata'.  *  * dns_dnssec_selfsigns() requires that rdataset be a DNSKEY or KEY  * rrset.  dns_dnssec_signs() works on any rrset.  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnsseckey_create
parameter_list|(
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|dst_key_t
modifier|*
modifier|*
name|dstkey
parameter_list|,
name|dns_dnsseckey_t
modifier|*
modifier|*
name|dkp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  * Create and initialize a dns_dnsseckey_t structure.  *  *	Requires:  *\li		'dkp' is not NULL and '*dkp' is NULL.  *  *	Returns:  *\li		#ISC_R_SUCCESS  *\li		#ISC_R_NOMEMORY  */
end_comment

begin_function_decl
name|void
name|dns_dnsseckey_destroy
parameter_list|(
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|dns_dnsseckey_t
modifier|*
modifier|*
name|dkp
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  * Reclaim a dns_dnsseckey_t structure.  *  *	Requires:  *\li		'dkp' is not NULL and '*dkp' is not NULL.  *  *	Ensures:  *\li		'*dkp' is NULL.  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnssec_findmatchingkeys
parameter_list|(
name|dns_name_t
modifier|*
name|origin
parameter_list|,
specifier|const
name|char
modifier|*
name|directory
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|dns_dnsseckeylist_t
modifier|*
name|keylist
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  * Search 'directory' for K* key files matching the name in 'origin'.  * Append all such keys, along with use hints gleaned from their  * metadata, onto 'keylist'.  *  *	Requires:  *\li		'keylist' is not NULL  *  *	Returns:  *\li		#ISC_R_SUCCESS  *\li		#ISC_R_NOTFOUND  *\li		#ISC_R_NOMEMORY  *\li		any error returned by dns_name_totext(), isc_dir_open(), or  *              dst_key_fromnamedfile()  *  *	Ensures:  *\li		On error, keylist is unchanged  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnssec_keylistfromrdataset
parameter_list|(
name|dns_name_t
modifier|*
name|origin
parameter_list|,
specifier|const
name|char
modifier|*
name|directory
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|dns_rdataset_t
modifier|*
name|keyset
parameter_list|,
name|dns_rdataset_t
modifier|*
name|keysigs
parameter_list|,
name|dns_rdataset_t
modifier|*
name|soasigs
parameter_list|,
name|isc_boolean_t
name|savekeys
parameter_list|,
name|isc_boolean_t
name|publickey
parameter_list|,
name|dns_dnsseckeylist_t
modifier|*
name|keylist
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  * Append the contents of a DNSKEY rdataset 'keyset' to 'keylist'.  * Omit duplicates.  If 'publickey' is ISC_FALSE, search 'directory' for  * matching key files, and load the private keys that go with  * the public ones.  If 'savekeys' is ISC_TRUE, mark the keys so  * they will not be deleted or inactivated regardless of metadata.  *  * 'keysigs' and 'soasigs', if not NULL and associated, contain the  * RRSIGS for the DNSKEY and SOA records respectively and are used to mark  * whether a key is already active in the zone.  */
end_comment

begin_function_decl
name|isc_result_t
name|dns_dnssec_updatekeys
parameter_list|(
name|dns_dnsseckeylist_t
modifier|*
name|keys
parameter_list|,
name|dns_dnsseckeylist_t
modifier|*
name|newkeys
parameter_list|,
name|dns_dnsseckeylist_t
modifier|*
name|removed
parameter_list|,
name|dns_name_t
modifier|*
name|origin
parameter_list|,
name|dns_ttl_t
name|hint_ttl
parameter_list|,
name|dns_diff_t
modifier|*
name|diff
parameter_list|,
name|isc_boolean_t
name|allzsk
parameter_list|,
name|isc_mem_t
modifier|*
name|mctx
parameter_list|,
name|void
function_decl|(
modifier|*
name|report
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/*%<  * Update the list of keys in 'keys' with new key information in 'newkeys'.  *  * For each key in 'newkeys', see if it has a match in 'keys'.  * - If not, and if the metadata says the key should be published:  *   add it to 'keys', and place a dns_difftuple into 'diff' so  *   the key can be added to the DNSKEY set.  If the metadata says it  *   should be active, set the first_sign flag.  * - If so, and if the metadata says it should be removed:  *   remove it from 'keys', and place a dns_difftuple into 'diff' so  *   the key can be removed from the DNSKEY set.  if 'removed' is non-NULL,  *   copy the key into that list; otherwise destroy it.  * - Otherwise, make sure keys has current metadata.  *  * If 'allzsk' is true, we are allowing KSK-flagged keys to be used as  * ZSKs.  *  * 'hint_ttl' is the TTL to use for the DNSKEY RRset if there is no  * existing RRset, and if none of the keys to be added has a default TTL  * (in which case we would use the shortest one).  If the TTL is longer  * than the time until a new key will be activated, then we have to delay  * the key's activation.  *  * 'report' points to a function for reporting status.  *  * On completion, any remaining keys in 'newkeys' are freed.  */
end_comment

begin_macro
name|ISC_LANG_ENDDECLS
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DNS_DNSSEC_H */
end_comment

end_unit

