begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|rcsHEADER_H
end_ifndef

begin_define
define|#
directive|define
name|rcsHEADER_H
value|1
end_define

begin_define
define|#
directive|define
name|rcsIN_HEADER
value|1
end_define

begin_line
line|#
directive|line
number|6
file|"rcstokenizer.h"
end_line

begin_define
define|#
directive|define
name|YY_INT_ALIGNED
value|short int
end_define

begin_comment
comment|/* A lexical scanner generated by flex */
end_comment

begin_define
define|#
directive|define
name|FLEX_SCANNER
end_define

begin_define
define|#
directive|define
name|YY_FLEX_MAJOR_VERSION
value|2
end_define

begin_define
define|#
directive|define
name|YY_FLEX_MINOR_VERSION
value|5
end_define

begin_define
define|#
directive|define
name|YY_FLEX_SUBMINOR_VERSION
value|35
end_define

begin_if
if|#
directive|if
name|YY_FLEX_SUBMINOR_VERSION
operator|>
literal|0
end_if

begin_define
define|#
directive|define
name|FLEX_BETA
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* First, we deal with  platform-specific or compiler-specific issues. */
end_comment

begin_comment
comment|/* begin standard C headers. */
end_comment

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<errno.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_comment
comment|/* end standard C headers. */
end_comment

begin_comment
comment|/* flex integer type definitions */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|FLEXINT_H
end_ifndef

begin_define
define|#
directive|define
name|FLEXINT_H
end_define

begin_comment
comment|/* C99 systems have<inttypes.h>. Non-C99 systems may or may not. */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC_VERSION__
argument_list|)
operator|&&
name|__STDC_VERSION__
operator|>=
literal|199901L
end_if

begin_comment
comment|/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,  * if you want the limit (max/min) macros for int types.   */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__STDC_LIMIT_MACROS
end_ifndef

begin_define
define|#
directive|define
name|__STDC_LIMIT_MACROS
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<inttypes.h>
end_include

begin_typedef
typedef|typedef
name|int8_t
name|flex_int8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint8_t
name|flex_uint8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int16_t
name|flex_int16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint16_t
name|flex_uint16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int32_t
name|flex_int32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|uint32_t
name|flex_uint32_t
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|signed
name|char
name|flex_int8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|short
name|int
name|flex_int16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|flex_int32_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|char
name|flex_uint8_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|short
name|int
name|flex_uint16_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|int
name|flex_uint32_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ! C99 */
end_comment

begin_comment
comment|/* Limits of integral types. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|INT8_MIN
end_ifndef

begin_define
define|#
directive|define
name|INT8_MIN
value|(-128)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|INT16_MIN
end_ifndef

begin_define
define|#
directive|define
name|INT16_MIN
value|(-32767-1)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|INT32_MIN
end_ifndef

begin_define
define|#
directive|define
name|INT32_MIN
value|(-2147483647-1)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|INT8_MAX
end_ifndef

begin_define
define|#
directive|define
name|INT8_MAX
value|(127)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|INT16_MAX
end_ifndef

begin_define
define|#
directive|define
name|INT16_MAX
value|(32767)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|INT32_MAX
end_ifndef

begin_define
define|#
directive|define
name|INT32_MAX
value|(2147483647)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|UINT8_MAX
end_ifndef

begin_define
define|#
directive|define
name|UINT8_MAX
value|(255U)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|UINT16_MAX
end_ifndef

begin_define
define|#
directive|define
name|UINT16_MAX
value|(65535U)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|UINT32_MAX
end_ifndef

begin_define
define|#
directive|define
name|UINT32_MAX
value|(4294967295U)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ! FLEXINT_H */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_comment
comment|/* The "const" storage-class-modifier is valid. */
end_comment

begin_define
define|#
directive|define
name|YY_USE_CONST
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* ! __cplusplus */
end_comment

begin_comment
comment|/* C99 requires __STDC__ to be defined as 1. */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
end_if

begin_define
define|#
directive|define
name|YY_USE_CONST
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* defined (__STDC__) */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ! __cplusplus */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|YY_USE_CONST
end_ifdef

begin_define
define|#
directive|define
name|yyconst
value|const
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|yyconst
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* An opaque pointer. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|YY_TYPEDEF_YY_SCANNER_T
end_ifndef

begin_define
define|#
directive|define
name|YY_TYPEDEF_YY_SCANNER_T
end_define

begin_typedef
typedef|typedef
name|void
modifier|*
name|yyscan_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* For convenience, these vars (plus the bison vars far below)    are macros in the reentrant scanner. */
end_comment

begin_define
define|#
directive|define
name|yyin
value|yyg->yyin_r
end_define

begin_define
define|#
directive|define
name|yyout
value|yyg->yyout_r
end_define

begin_define
define|#
directive|define
name|yyextra
value|yyg->yyextra_r
end_define

begin_define
define|#
directive|define
name|yyleng
value|yyg->yyleng_r
end_define

begin_define
define|#
directive|define
name|yytext
value|yyg->yytext_r
end_define

begin_define
define|#
directive|define
name|yylineno
value|(YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
end_define

begin_define
define|#
directive|define
name|yycolumn
value|(YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
end_define

begin_define
define|#
directive|define
name|yy_flex_debug
value|yyg->yy_flex_debug_r
end_define

begin_comment
comment|/* Size of default input buffer. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|YY_BUF_SIZE
end_ifndef

begin_define
define|#
directive|define
name|YY_BUF_SIZE
value|16384
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|YY_TYPEDEF_YY_BUFFER_STATE
end_ifndef

begin_define
define|#
directive|define
name|YY_TYPEDEF_YY_BUFFER_STATE
end_define

begin_typedef
typedef|typedef
name|struct
name|yy_buffer_state
modifier|*
name|YY_BUFFER_STATE
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|YY_TYPEDEF_YY_SIZE_T
end_ifndef

begin_define
define|#
directive|define
name|YY_TYPEDEF_YY_SIZE_T
end_define

begin_typedef
typedef|typedef
name|size_t
name|yy_size_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|YY_STRUCT_YY_BUFFER_STATE
end_ifndef

begin_define
define|#
directive|define
name|YY_STRUCT_YY_BUFFER_STATE
end_define

begin_struct
struct|struct
name|yy_buffer_state
block|{
name|FILE
modifier|*
name|yy_input_file
decl_stmt|;
name|char
modifier|*
name|yy_ch_buf
decl_stmt|;
comment|/* input buffer */
name|char
modifier|*
name|yy_buf_pos
decl_stmt|;
comment|/* current position in input buffer */
comment|/* Size of input buffer in bytes, not including room for EOB 	 * characters. 	 */
name|yy_size_t
name|yy_buf_size
decl_stmt|;
comment|/* Number of characters read into yy_ch_buf, not including EOB 	 * characters. 	 */
name|int
name|yy_n_chars
decl_stmt|;
comment|/* Whether we "own" the buffer - i.e., we know we created it, 	 * and can realloc() it to grow it, and should free() it to 	 * delete it. 	 */
name|int
name|yy_is_our_buffer
decl_stmt|;
comment|/* Whether this is an "interactive" input source; if so, and 	 * if we're using stdio for input, then we want to use getc() 	 * instead of fread(), to make sure we stop fetching input after 	 * each newline. 	 */
name|int
name|yy_is_interactive
decl_stmt|;
comment|/* Whether we're considered to be at the beginning of a line. 	 * If so, '^' rules will be active on the next match, otherwise 	 * not. 	 */
name|int
name|yy_at_bol
decl_stmt|;
name|int
name|yy_bs_lineno
decl_stmt|;
comment|/**< The line count. */
name|int
name|yy_bs_column
decl_stmt|;
comment|/**< The column count. */
comment|/* Whether to try to fill the input buffer when we reach the 	 * end of it. 	 */
name|int
name|yy_fill_buffer
decl_stmt|;
name|int
name|yy_buffer_status
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !YY_STRUCT_YY_BUFFER_STATE */
end_comment

begin_function_decl
name|void
name|rcsrestart
parameter_list|(
name|FILE
modifier|*
name|input_file
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcs_switch_to_buffer
parameter_list|(
name|YY_BUFFER_STATE
name|new_buffer
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|YY_BUFFER_STATE
name|rcs_create_buffer
parameter_list|(
name|FILE
modifier|*
name|file
parameter_list|,
name|int
name|size
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcs_delete_buffer
parameter_list|(
name|YY_BUFFER_STATE
name|b
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcs_flush_buffer
parameter_list|(
name|YY_BUFFER_STATE
name|b
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcspush_buffer_state
parameter_list|(
name|YY_BUFFER_STATE
name|new_buffer
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcspop_buffer_state
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|YY_BUFFER_STATE
name|rcs_scan_buffer
parameter_list|(
name|char
modifier|*
name|base
parameter_list|,
name|yy_size_t
name|size
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|YY_BUFFER_STATE
name|rcs_scan_string
parameter_list|(
name|yyconst
name|char
modifier|*
name|yy_str
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|YY_BUFFER_STATE
name|rcs_scan_bytes
parameter_list|(
name|yyconst
name|char
modifier|*
name|bytes
parameter_list|,
name|int
name|len
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|rcsalloc
parameter_list|(
name|yy_size_t
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|rcsrealloc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|yy_size_t
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcsfree
parameter_list|(
name|void
modifier|*
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Begin user sect3 */
end_comment

begin_define
define|#
directive|define
name|rcswrap
parameter_list|(
name|n
parameter_list|)
value|1
end_define

begin_define
define|#
directive|define
name|YY_SKIP_YYWRAP
end_define

begin_define
define|#
directive|define
name|yytext_ptr
value|yytext_r
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|YY_HEADER_EXPORT_START_CONDITIONS
end_ifdef

begin_define
define|#
directive|define
name|INITIAL
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|YY_NO_UNISTD_H
end_ifndef

begin_comment
comment|/* Special case for "unistd.h", since it is non-ANSI. We include it way  * down here because we want the user's section 1 to have been scanned first.  * The user has a chance to override it with an option.  */
end_comment

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|YY_EXTRA_TYPE
end_ifndef

begin_define
define|#
directive|define
name|YY_EXTRA_TYPE
value|void *
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|rcslex_init
parameter_list|(
name|yyscan_t
modifier|*
name|scanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rcslex_init_extra
parameter_list|(
name|YY_EXTRA_TYPE
name|user_defined
parameter_list|,
name|yyscan_t
modifier|*
name|scanner
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Accessor methods to globals.    These are made visible to non-reentrant scanners for convenience. */
end_comment

begin_function_decl
name|int
name|rcslex_destroy
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rcsget_debug
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcsset_debug
parameter_list|(
name|int
name|debug_flag
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|YY_EXTRA_TYPE
name|rcsget_extra
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcsset_extra
parameter_list|(
name|YY_EXTRA_TYPE
name|user_defined
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|FILE
modifier|*
name|rcsget_in
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcsset_in
parameter_list|(
name|FILE
modifier|*
name|in_str
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|FILE
modifier|*
name|rcsget_out
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcsset_out
parameter_list|(
name|FILE
modifier|*
name|out_str
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rcsget_leng
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|rcsget_text
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|rcsget_lineno
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|rcsset_lineno
parameter_list|(
name|int
name|line_number
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Macros after this point can all be overridden by user definitions in  * section 1.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|YY_SKIP_YYWRAP
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
name|int
name|rcswrap
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_extern

begin_else
else|#
directive|else
end_else

begin_function_decl
specifier|extern
name|int
name|rcswrap
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|yytext_ptr
end_ifndef

begin_function_decl
specifier|static
name|void
name|yy_flex_strncpy
parameter_list|(
name|char
modifier|*
parameter_list|,
name|yyconst
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|YY_NEED_STRLEN
end_ifdef

begin_function_decl
specifier|static
name|int
name|yy_flex_strlen
parameter_list|(
name|yyconst
name|char
modifier|*
parameter_list|,
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|YY_NO_INPUT
end_ifndef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Amount of stuff to slurp up with each read. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|YY_READ_BUF_SIZE
end_ifndef

begin_define
define|#
directive|define
name|YY_READ_BUF_SIZE
value|8192
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Number of entries by which start-condition stack grows. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|YY_START_STACK_INCR
end_ifndef

begin_define
define|#
directive|define
name|YY_START_STACK_INCR
value|25
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Default declaration of generated scanner - a define so the user can  * easily add parameters.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|YY_DECL
end_ifndef

begin_define
define|#
directive|define
name|YY_DECL_IS_OURS
value|1
end_define

begin_function_decl
specifier|extern
name|int
name|rcslex
parameter_list|(
name|yyscan_t
name|yyscanner
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|YY_DECL
value|int rcslex (yyscan_t yyscanner)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !YY_DECL */
end_comment

begin_comment
comment|/* yy_get_previous_state - get the state just before the EOB char was reached */
end_comment

begin_undef
undef|#
directive|undef
name|YY_NEW_FILE
end_undef

begin_undef
undef|#
directive|undef
name|YY_FLUSH_BUFFER
end_undef

begin_undef
undef|#
directive|undef
name|yy_set_bol
end_undef

begin_undef
undef|#
directive|undef
name|yy_new_buffer
end_undef

begin_undef
undef|#
directive|undef
name|yy_set_interactive
end_undef

begin_undef
undef|#
directive|undef
name|YY_DO_BEFORE_ACTION
end_undef

begin_ifdef
ifdef|#
directive|ifdef
name|YY_DECL_IS_OURS
end_ifdef

begin_undef
undef|#
directive|undef
name|YY_DECL_IS_OURS
end_undef

begin_undef
undef|#
directive|undef
name|YY_DECL
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_line
line|#
directive|line
number|73
file|"rcstokenizer.l"
end_line

begin_line
line|#
directive|line
number|332
file|"rcstokenizer.h"
end_line

begin_undef
undef|#
directive|undef
name|rcsIN_HEADER
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* rcsHEADER_H */
end_comment

end_unit

