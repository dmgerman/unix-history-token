begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-------------------------------------------------------------*/
end_comment

begin_comment
comment|/*--- Public header file for the library.                   ---*/
end_comment

begin_comment
comment|/*---                                               bzlib.h ---*/
end_comment

begin_comment
comment|/*-------------------------------------------------------------*/
end_comment

begin_comment
comment|/*--   This file is a part of bzip2 and/or libbzip2, a program and   library for lossless, block-sorting data compression.    Copyright (C) 1996-2000 Julian R Seward.  All rights reserved.    Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions   are met:    1. Redistributions of source code must retain the above copyright      notice, this list of conditions and the following disclaimer.    2. The origin of this software must not be misrepresented; you must       not claim that you wrote the original software.  If you use this       software in a product, an acknowledgment in the product       documentation would be appreciated but is not required.    3. Altered source versions must be plainly marked as such, and must      not be misrepresented as being the original software.    4. The name of the author may not be used to endorse or promote       products derived from this software without specific prior written       permission.    THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    Julian Seward, Cambridge, UK.   jseward@acm.org   bzip2/libbzip2 version 1.0 of 21 March 2000    This program is based on (at least) the work of:      Mike Burrows      David Wheeler      Peter Fenwick      Alistair Moffat      Radford Neal      Ian H. Witten      Robert Sedgewick      Jon L. Bentley    For more information on these sources, see the manual. --*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_BZLIB_H
end_ifndef

begin_define
define|#
directive|define
name|_BZLIB_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|BZ_RUN
value|0
define|#
directive|define
name|BZ_FLUSH
value|1
define|#
directive|define
name|BZ_FINISH
value|2
define|#
directive|define
name|BZ_OK
value|0
define|#
directive|define
name|BZ_RUN_OK
value|1
define|#
directive|define
name|BZ_FLUSH_OK
value|2
define|#
directive|define
name|BZ_FINISH_OK
value|3
define|#
directive|define
name|BZ_STREAM_END
value|4
define|#
directive|define
name|BZ_SEQUENCE_ERROR
value|(-1)
define|#
directive|define
name|BZ_PARAM_ERROR
value|(-2)
define|#
directive|define
name|BZ_MEM_ERROR
value|(-3)
define|#
directive|define
name|BZ_DATA_ERROR
value|(-4)
define|#
directive|define
name|BZ_DATA_ERROR_MAGIC
value|(-5)
define|#
directive|define
name|BZ_IO_ERROR
value|(-6)
define|#
directive|define
name|BZ_UNEXPECTED_EOF
value|(-7)
define|#
directive|define
name|BZ_OUTBUFF_FULL
value|(-8)
define|#
directive|define
name|BZ_CONFIG_ERROR
value|(-9)
typedef|typedef
struct|struct
block|{
name|char
modifier|*
name|next_in
decl_stmt|;
name|unsigned
name|int
name|avail_in
decl_stmt|;
name|unsigned
name|int
name|total_in_lo32
decl_stmt|;
name|unsigned
name|int
name|total_in_hi32
decl_stmt|;
name|char
modifier|*
name|next_out
decl_stmt|;
name|unsigned
name|int
name|avail_out
decl_stmt|;
name|unsigned
name|int
name|total_out_lo32
decl_stmt|;
name|unsigned
name|int
name|total_out_hi32
decl_stmt|;
name|void
modifier|*
name|state
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|bzalloc
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|bzfree
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|opaque
decl_stmt|;
block|}
name|bz_stream
typedef|;
ifndef|#
directive|ifndef
name|BZ_IMPORT
define|#
directive|define
name|BZ_EXPORT
endif|#
directive|endif
ifdef|#
directive|ifdef
name|_WIN32
include|#
directive|include
file|<stdio.h>
include|#
directive|include
file|<windows.h>
ifdef|#
directive|ifdef
name|small
comment|/* windows.h define small to char */
undef|#
directive|undef
name|small
endif|#
directive|endif
ifdef|#
directive|ifdef
name|BZ_EXPORT
define|#
directive|define
name|BZ_API
parameter_list|(
name|func
parameter_list|)
value|WINAPI func
define|#
directive|define
name|BZ_EXTERN
value|extern
else|#
directive|else
comment|/* import windows dll dynamically */
define|#
directive|define
name|BZ_API
parameter_list|(
name|func
parameter_list|)
value|(WINAPI * func)
define|#
directive|define
name|BZ_EXTERN
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|BZ_API
parameter_list|(
name|func
parameter_list|)
value|func
define|#
directive|define
name|BZ_EXTERN
value|extern
endif|#
directive|endif
comment|/*-- Core (low-level) library functions --*/
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzCompressInit
function_decl|)
parameter_list|(
name|bz_stream
modifier|*
name|strm
parameter_list|,
name|int
name|blockSize100k
parameter_list|,
name|int
name|verbosity
parameter_list|,
name|int
name|workFactor
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzCompress
function_decl|)
parameter_list|(
name|bz_stream
modifier|*
name|strm
parameter_list|,
name|int
name|action
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzCompressEnd
function_decl|)
parameter_list|(
name|bz_stream
modifier|*
name|strm
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzDecompressInit
function_decl|)
parameter_list|(
name|bz_stream
modifier|*
name|strm
parameter_list|,
name|int
name|verbosity
parameter_list|,
name|int
name|small
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzDecompress
function_decl|)
parameter_list|(
name|bz_stream
modifier|*
name|strm
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzDecompressEnd
function_decl|)
parameter_list|(
name|bz_stream
modifier|*
name|strm
parameter_list|)
function_decl|;
comment|/*-- High(er) level library functions --*/
ifndef|#
directive|ifndef
name|BZ_NO_STDIO
define|#
directive|define
name|BZ_MAX_UNUSED
value|5000
typedef|typedef
name|void
name|BZFILE
typedef|;
name|BZ_EXTERN
name|BZFILE
modifier|*
name|BZ_API
function_decl|(
name|BZ2_bzReadOpen
function_decl|)
parameter_list|(
name|int
modifier|*
name|bzerror
parameter_list|,
name|FILE
modifier|*
name|f
parameter_list|,
name|int
name|verbosity
parameter_list|,
name|int
name|small
parameter_list|,
name|void
modifier|*
name|unused
parameter_list|,
name|int
name|nUnused
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|void
name|BZ_API
function_decl|(
name|BZ2_bzReadClose
function_decl|)
parameter_list|(
name|int
modifier|*
name|bzerror
parameter_list|,
name|BZFILE
modifier|*
name|b
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|void
name|BZ_API
function_decl|(
name|BZ2_bzReadGetUnused
function_decl|)
parameter_list|(
name|int
modifier|*
name|bzerror
parameter_list|,
name|BZFILE
modifier|*
name|b
parameter_list|,
name|void
modifier|*
modifier|*
name|unused
parameter_list|,
name|int
modifier|*
name|nUnused
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzRead
function_decl|)
parameter_list|(
name|int
modifier|*
name|bzerror
parameter_list|,
name|BZFILE
modifier|*
name|b
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|BZFILE
modifier|*
name|BZ_API
function_decl|(
name|BZ2_bzWriteOpen
function_decl|)
parameter_list|(
name|int
modifier|*
name|bzerror
parameter_list|,
name|FILE
modifier|*
name|f
parameter_list|,
name|int
name|blockSize100k
parameter_list|,
name|int
name|verbosity
parameter_list|,
name|int
name|workFactor
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|void
name|BZ_API
function_decl|(
name|BZ2_bzWrite
function_decl|)
parameter_list|(
name|int
modifier|*
name|bzerror
parameter_list|,
name|BZFILE
modifier|*
name|b
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|void
name|BZ_API
function_decl|(
name|BZ2_bzWriteClose
function_decl|)
parameter_list|(
name|int
modifier|*
name|bzerror
parameter_list|,
name|BZFILE
modifier|*
name|b
parameter_list|,
name|int
name|abandon
parameter_list|,
name|unsigned
name|int
modifier|*
name|nbytes_in
parameter_list|,
name|unsigned
name|int
modifier|*
name|nbytes_out
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|void
name|BZ_API
function_decl|(
name|BZ2_bzWriteClose64
function_decl|)
parameter_list|(
name|int
modifier|*
name|bzerror
parameter_list|,
name|BZFILE
modifier|*
name|b
parameter_list|,
name|int
name|abandon
parameter_list|,
name|unsigned
name|int
modifier|*
name|nbytes_in_lo32
parameter_list|,
name|unsigned
name|int
modifier|*
name|nbytes_in_hi32
parameter_list|,
name|unsigned
name|int
modifier|*
name|nbytes_out_lo32
parameter_list|,
name|unsigned
name|int
modifier|*
name|nbytes_out_hi32
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|/*-- Utility functions --*/
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzBuffToBuffCompress
function_decl|)
parameter_list|(
name|char
modifier|*
name|dest
parameter_list|,
name|unsigned
name|int
modifier|*
name|destLen
parameter_list|,
name|char
modifier|*
name|source
parameter_list|,
name|unsigned
name|int
name|sourceLen
parameter_list|,
name|int
name|blockSize100k
parameter_list|,
name|int
name|verbosity
parameter_list|,
name|int
name|workFactor
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzBuffToBuffDecompress
function_decl|)
parameter_list|(
name|char
modifier|*
name|dest
parameter_list|,
name|unsigned
name|int
modifier|*
name|destLen
parameter_list|,
name|char
modifier|*
name|source
parameter_list|,
name|unsigned
name|int
name|sourceLen
parameter_list|,
name|int
name|small
parameter_list|,
name|int
name|verbosity
parameter_list|)
function_decl|;
comment|/*--    Code contributed by Yoshioka Tsuneo    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),    to support better zlib compatibility.    This code is not _officially_ part of libbzip2 (yet);    I haven't tested it, documented it, or considered the    threading-safeness of it.    If this code breaks, please contact both Yoshioka and me. --*/
name|BZ_EXTERN
specifier|const
name|char
modifier|*
name|BZ_API
function_decl|(
name|BZ2_bzlibVersion
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|BZ_NO_STDIO
name|BZ_EXTERN
name|BZFILE
modifier|*
name|BZ_API
function_decl|(
name|BZ2_bzopen
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|path
parameter_list|,
specifier|const
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|BZFILE
modifier|*
name|BZ_API
function_decl|(
name|BZ2_bzdopen
function_decl|)
parameter_list|(
name|int
name|fd
parameter_list|,
specifier|const
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzread
function_decl|)
parameter_list|(
name|BZFILE
modifier|*
name|b
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzwrite
function_decl|)
parameter_list|(
name|BZFILE
modifier|*
name|b
parameter_list|,
name|void
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|int
name|BZ_API
function_decl|(
name|BZ2_bzflush
function_decl|)
parameter_list|(
name|BZFILE
modifier|*
name|b
parameter_list|)
function_decl|;
name|BZ_EXTERN
name|void
name|BZ_API
function_decl|(
name|BZ2_bzclose
function_decl|)
parameter_list|(
name|BZFILE
modifier|*
name|b
parameter_list|)
function_decl|;
name|BZ_EXTERN
specifier|const
name|char
modifier|*
name|BZ_API
function_decl|(
name|BZ2_bzerror
function_decl|)
parameter_list|(
name|BZFILE
modifier|*
name|b
parameter_list|,
name|int
modifier|*
name|errnum
parameter_list|)
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*-------------------------------------------------------------*/
end_comment

begin_comment
comment|/*--- end                                           bzlib.h ---*/
end_comment

begin_comment
comment|/*-------------------------------------------------------------*/
end_comment

end_unit

