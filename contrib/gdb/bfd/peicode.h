begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Support for the generic parts of most COFF variants, for BFD.    Copyright 1995 Free Software Foundation, Inc.    Written by Cygnus Support.  This file is part of BFD, the Binary File Descriptor library.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* Most of this hacked by  Steve Chamberlain, 			sac@cygnus.com */
end_comment

begin_define
define|#
directive|define
name|coff_bfd_print_private_bfd_data
value|pe_print_private_bfd_data
end_define

begin_define
define|#
directive|define
name|coff_mkobject
value|pe_mkobject
end_define

begin_define
define|#
directive|define
name|coff_mkobject_hook
value|pe_mkobject_hook
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|GET_FCN_LNNOPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_FCN_LNNOPTR
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
define|\
value|bfd_h_get_32(abfd, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_lnnoptr)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_FCN_ENDNDX
end_ifndef

begin_define
define|#
directive|define
name|GET_FCN_ENDNDX
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
define|\
value|bfd_h_get_32(abfd, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_endndx)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_FCN_LNNOPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_FCN_LNNOPTR
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_32(abfd,  in, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_lnnoptr)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_FCN_ENDNDX
end_ifndef

begin_define
define|#
directive|define
name|PUT_FCN_ENDNDX
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_32(abfd, in, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_endndx)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_LNSZ_LNNO
end_ifndef

begin_define
define|#
directive|define
name|GET_LNSZ_LNNO
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *) ext->x_sym.x_misc.x_lnsz.x_lnno)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_LNSZ_SIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_LNSZ_SIZE
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *) ext->x_sym.x_misc.x_lnsz.x_size)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_LNSZ_LNNO
end_ifndef

begin_define
define|#
directive|define
name|PUT_LNSZ_LNNO
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd, in, (bfd_byte *)ext->x_sym.x_misc.x_lnsz.x_lnno)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_LNSZ_SIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_LNSZ_SIZE
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd, in, (bfd_byte*) ext->x_sym.x_misc.x_lnsz.x_size)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCN_SCNLEN
end_ifndef

begin_define
define|#
directive|define
name|GET_SCN_SCNLEN
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_32(abfd, (bfd_byte *) ext->x_scn.x_scnlen)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCN_NRELOC
end_ifndef

begin_define
define|#
directive|define
name|GET_SCN_NRELOC
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *)ext->x_scn.x_nreloc)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCN_NLINNO
end_ifndef

begin_define
define|#
directive|define
name|GET_SCN_NLINNO
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *)ext->x_scn.x_nlinno)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCN_SCNLEN
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCN_SCNLEN
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_32(abfd, in, (bfd_byte *) ext->x_scn.x_scnlen)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCN_NRELOC
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCN_NRELOC
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd, in, (bfd_byte *)ext->x_scn.x_nreloc)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCN_NLINNO
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCN_NLINNO
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd,in, (bfd_byte  *) ext->x_scn.x_nlinno)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_LINENO_LNNO
end_ifndef

begin_define
define|#
directive|define
name|GET_LINENO_LNNO
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *) (ext->l_lnno));
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_LINENO_LNNO
end_ifndef

begin_define
define|#
directive|define
name|PUT_LINENO_LNNO
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd,val,  (bfd_byte *) (ext->l_lnno));
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* The f_symptr field in the filehdr is sometimes 64 bits.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GET_FILEHDR_SYMPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_FILEHDR_SYMPTR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_FILEHDR_SYMPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_FILEHDR_SYMPTR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Some fields in the aouthdr are sometimes 64 bits.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_TSIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_TSIZE
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_TSIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_TSIZE
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_DSIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_DSIZE
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_DSIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_DSIZE
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_BSIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_BSIZE
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_BSIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_BSIZE
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_ENTRY
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_ENTRY
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_ENTRY
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_ENTRY
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_TEXT_START
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_TEXT_START
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_TEXT_START
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_TEXT_START
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_DATA_START
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_DATA_START
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_DATA_START
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_DATA_START
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Some fields in the scnhdr are sometimes 64 bits.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_PADDR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_PADDR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_PADDR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_PADDR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_VADDR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_VADDR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_VADDR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_VADDR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_SIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_SIZE
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_SIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_SIZE
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_SCNPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_SCNPTR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_SCNPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_SCNPTR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_RELPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_RELPTR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_RELPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_RELPTR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_LNNOPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_LNNOPTR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_LNNOPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_LNNOPTR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/**********************************************************************/
end_comment

begin_function
specifier|static
name|void
name|coff_swap_reloc_in
parameter_list|(
name|abfd
parameter_list|,
name|src
parameter_list|,
name|dst
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|src
decl_stmt|;
name|PTR
name|dst
decl_stmt|;
block|{
name|RELOC
modifier|*
name|reloc_src
init|=
operator|(
name|RELOC
operator|*
operator|)
name|src
decl_stmt|;
name|struct
name|internal_reloc
modifier|*
name|reloc_dst
init|=
operator|(
expr|struct
name|internal_reloc
operator|*
operator|)
name|dst
decl_stmt|;
name|reloc_dst
operator|->
name|r_vaddr
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_src
operator|->
name|r_vaddr
argument_list|)
expr_stmt|;
name|reloc_dst
operator|->
name|r_symndx
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_src
operator|->
name|r_symndx
argument_list|)
expr_stmt|;
name|reloc_dst
operator|->
name|r_type
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_src
operator|->
name|r_type
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|SWAP_IN_RELOC_OFFSET
name|reloc_dst
operator|->
name|r_offset
operator|=
name|SWAP_IN_RELOC_OFFSET
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_src
operator|->
name|r_offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_reloc_out
parameter_list|(
name|abfd
parameter_list|,
name|src
parameter_list|,
name|dst
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|src
decl_stmt|;
name|PTR
name|dst
decl_stmt|;
block|{
name|struct
name|internal_reloc
modifier|*
name|reloc_src
init|=
operator|(
expr|struct
name|internal_reloc
operator|*
operator|)
name|src
decl_stmt|;
name|struct
name|external_reloc
modifier|*
name|reloc_dst
init|=
operator|(
expr|struct
name|external_reloc
operator|*
operator|)
name|dst
decl_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_vaddr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_vaddr
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_symndx
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_symndx
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_type
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_type
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|SWAP_OUT_RELOC_OFFSET
name|SWAP_OUT_RELOC_OFFSET
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_offset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SWAP_OUT_RELOC_EXTRA
name|SWAP_OUT_RELOC_EXTRA
argument_list|(
name|abfd
argument_list|,
name|reloc_src
argument_list|,
name|reloc_dst
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
sizeof|sizeof
argument_list|(
expr|struct
name|external_reloc
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|coff_swap_filehdr_in
parameter_list|(
name|abfd
parameter_list|,
name|src
parameter_list|,
name|dst
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|src
decl_stmt|;
name|PTR
name|dst
decl_stmt|;
block|{
name|FILHDR
modifier|*
name|filehdr_src
init|=
operator|(
name|FILHDR
operator|*
operator|)
name|src
decl_stmt|;
name|struct
name|internal_filehdr
modifier|*
name|filehdr_dst
init|=
operator|(
expr|struct
name|internal_filehdr
operator|*
operator|)
name|dst
decl_stmt|;
name|filehdr_dst
operator|->
name|f_magic
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_magic
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_nscns
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_nscns
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_timdat
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_timdat
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_nsyms
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_nsyms
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_flags
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_flags
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_symptr
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_symptr
argument_list|)
expr_stmt|;
comment|/* Other people's tools sometimes generate headers      with an nsyms but a zero symptr. */
if|if
condition|(
name|filehdr_dst
operator|->
name|f_nsyms
operator|&&
name|filehdr_dst
operator|->
name|f_symptr
condition|)
block|{
name|filehdr_dst
operator|->
name|f_flags
operator||=
name|HAS_SYMS
expr_stmt|;
block|}
else|else
block|{
name|filehdr_dst
operator|->
name|f_symptr
operator|=
literal|0
expr_stmt|;
name|filehdr_dst
operator|->
name|f_nsyms
operator|=
literal|0
expr_stmt|;
name|filehdr_dst
operator|->
name|f_flags
operator|&=
operator|~
name|HAS_SYMS
expr_stmt|;
block|}
name|filehdr_dst
operator|->
name|f_opthdr
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_opthdr
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|COFF_IMAGE_WITH_PE
end_ifdef

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_filehdr_out
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|in
decl_stmt|;
name|PTR
name|out
decl_stmt|;
block|{
name|int
name|idx
decl_stmt|;
name|struct
name|internal_filehdr
modifier|*
name|filehdr_in
init|=
operator|(
expr|struct
name|internal_filehdr
operator|*
operator|)
name|in
decl_stmt|;
name|FILHDR
modifier|*
name|filehdr_out
init|=
operator|(
name|FILHDR
operator|*
operator|)
name|out
decl_stmt|;
if|if
condition|(
name|pe_data
argument_list|(
name|abfd
argument_list|)
operator|->
name|has_reloc_section
condition|)
name|filehdr_in
operator|->
name|f_flags
operator|&=
operator|~
name|F_RELFLG
expr_stmt|;
if|if
condition|(
name|pe_data
argument_list|(
name|abfd
argument_list|)
operator|->
name|dll
condition|)
name|filehdr_in
operator|->
name|f_flags
operator||=
name|F_DLL
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_magic
operator|=
name|DOSMAGIC
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_cblp
operator|=
literal|0x90
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_cp
operator|=
literal|0x3
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_crlc
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_cparhdr
operator|=
literal|0x4
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_minalloc
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_maxalloc
operator|=
literal|0xffff
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_ss
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_sp
operator|=
literal|0xb8
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_csum
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_ip
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_cs
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_lfarlc
operator|=
literal|0x40
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_ovno
operator|=
literal|0x0
expr_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|4
condition|;
name|idx
operator|++
control|)
name|filehdr_in
operator|->
name|pe
operator|.
name|e_res
index|[
name|idx
index|]
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_oemid
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_oeminfo
operator|=
literal|0x0
expr_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|10
condition|;
name|idx
operator|++
control|)
name|filehdr_in
operator|->
name|pe
operator|.
name|e_res2
index|[
name|idx
index|]
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|e_lfanew
operator|=
literal|0x80
expr_stmt|;
comment|/* this next collection of data are mostly just characters.  It appears      to be constant within the headers put on NT exes */
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|0
index|]
operator|=
literal|0x0eba1f0e
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|1
index|]
operator|=
literal|0xcd09b400
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|2
index|]
operator|=
literal|0x4c01b821
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|3
index|]
operator|=
literal|0x685421cd
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|4
index|]
operator|=
literal|0x70207369
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|5
index|]
operator|=
literal|0x72676f72
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|6
index|]
operator|=
literal|0x63206d61
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|7
index|]
operator|=
literal|0x6f6e6e61
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|8
index|]
operator|=
literal|0x65622074
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|9
index|]
operator|=
literal|0x6e757220
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|10
index|]
operator|=
literal|0x206e6920
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|11
index|]
operator|=
literal|0x20534f44
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|12
index|]
operator|=
literal|0x65646f6d
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|13
index|]
operator|=
literal|0x0a0d0d2e
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|14
index|]
operator|=
literal|0x24
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
literal|15
index|]
operator|=
literal|0x0
expr_stmt|;
name|filehdr_in
operator|->
name|pe
operator|.
name|nt_signature
operator|=
name|NT_SIGNATURE
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_magic
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_magic
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_nscns
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_nscns
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|time
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_timdat
argument_list|)
expr_stmt|;
name|PUT_FILEHDR_SYMPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_vma
operator|)
name|filehdr_in
operator|->
name|f_symptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_symptr
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_nsyms
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_nsyms
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_opthdr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_opthdr
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_flags
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_flags
argument_list|)
expr_stmt|;
comment|/* put in extra dos header stuff.  This data remains essentially      constant, it just has to be tacked on to the beginning of all exes       for NT */
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_magic
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_magic
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_cblp
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_cblp
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_cp
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_cp
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_crlc
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_crlc
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_cparhdr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_cparhdr
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_minalloc
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_minalloc
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_maxalloc
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_maxalloc
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_ss
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_ss
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_sp
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_sp
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_csum
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_csum
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_ip
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_ip
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_cs
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_cs
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_lfarlc
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_lfarlc
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_ovno
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_ovno
argument_list|)
expr_stmt|;
block|{
name|int
name|idx
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|4
condition|;
name|idx
operator|++
control|)
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_res
index|[
name|idx
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_res
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_oemid
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_oemid
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_oeminfo
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_oeminfo
argument_list|)
expr_stmt|;
block|{
name|int
name|idx
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|10
condition|;
name|idx
operator|++
control|)
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_res2
index|[
name|idx
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_res2
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|e_lfanew
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|e_lfanew
argument_list|)
expr_stmt|;
block|{
name|int
name|idx
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|16
condition|;
name|idx
operator|++
control|)
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|dos_message
index|[
name|idx
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|dos_message
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
comment|/* also put in the NT signature */
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|pe
operator|.
name|nt_signature
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|nt_signature
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|FILHDR
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_filehdr_out
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|in
decl_stmt|;
name|PTR
name|out
decl_stmt|;
block|{
name|struct
name|internal_filehdr
modifier|*
name|filehdr_in
init|=
operator|(
expr|struct
name|internal_filehdr
operator|*
operator|)
name|in
decl_stmt|;
name|FILHDR
modifier|*
name|filehdr_out
init|=
operator|(
name|FILHDR
operator|*
operator|)
name|out
decl_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_magic
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_magic
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_nscns
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_nscns
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_timdat
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_timdat
argument_list|)
expr_stmt|;
name|PUT_FILEHDR_SYMPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_vma
operator|)
name|filehdr_in
operator|->
name|f_symptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_symptr
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_nsyms
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_nsyms
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_opthdr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_opthdr
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_flags
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_flags
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|FILHDR
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|void
name|coff_swap_sym_in
parameter_list|(
name|abfd
parameter_list|,
name|ext1
parameter_list|,
name|in1
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext1
decl_stmt|;
name|PTR
name|in1
decl_stmt|;
block|{
name|SYMENT
modifier|*
name|ext
init|=
operator|(
name|SYMENT
operator|*
operator|)
name|ext1
decl_stmt|;
name|struct
name|internal_syment
modifier|*
name|in
init|=
operator|(
expr|struct
name|internal_syment
operator|*
operator|)
name|in1
decl_stmt|;
if|if
condition|(
name|ext
operator|->
name|e
operator|.
name|e_name
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|in
operator|->
name|_n
operator|.
name|_n_n
operator|.
name|_n_zeroes
operator|=
literal|0
expr_stmt|;
name|in
operator|->
name|_n
operator|.
name|_n_n
operator|.
name|_n_offset
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e
operator|.
name|e
operator|.
name|e_offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|SYMNMLEN
operator|!=
name|E_SYMNMLEN
operator|->
name|Error
operator|,
name|we
name|need
name|to
name|cope
name|with
name|truncating
name|or
name|extending
name|SYMNMLEN
operator|!
expr_stmt|;
else|#
directive|else
name|memcpy
argument_list|(
name|in
operator|->
name|_n
operator|.
name|_n_name
argument_list|,
name|ext
operator|->
name|e
operator|.
name|e_name
argument_list|,
name|SYMNMLEN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|in
operator|->
name|n_value
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_value
argument_list|)
expr_stmt|;
name|in
operator|->
name|n_scnum
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_scnum
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|ext
operator|->
name|e_type
argument_list|)
operator|==
literal|2
condition|)
block|{
name|in
operator|->
name|n_type
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|->
name|n_type
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_type
argument_list|)
expr_stmt|;
block|}
name|in
operator|->
name|n_sclass
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|e_sclass
argument_list|)
expr_stmt|;
name|in
operator|->
name|n_numaux
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|e_numaux
argument_list|)
expr_stmt|;
comment|/* The section symbols for the .idata$ sections have class 68, which MS      documentation indicates is a section symbol.  The problem is that the      value field in the symbol is simply a copy of the .idata section's flags      rather than something useful.  When these symbols are encountered, change      the value to 0 and the section number to 1 so that they will be handled      somewhat correctly in the bfd code. */
if|if
condition|(
name|in
operator|->
name|n_sclass
operator|==
literal|0x68
condition|)
block|{
name|in
operator|->
name|n_value
operator|=
literal|0x0
expr_stmt|;
name|in
operator|->
name|n_scnum
operator|=
literal|1
expr_stmt|;
comment|/* I have tried setting the class to 3 and using the following to set        the section number.  This will put the address of the pointer to the        string kernel32.dll at addresses 0 and 0x10 off start of idata section        which is not correct */
comment|/*    if (strcmp (in->_n._n_name, ".idata$4") == 0) */
comment|/*      in->n_scnum = 3; */
comment|/*    else */
comment|/*      in->n_scnum = 2; */
block|}
ifdef|#
directive|ifdef
name|coff_swap_sym_in_hook
name|coff_swap_sym_in_hook
argument_list|(
name|abfd
argument_list|,
name|ext1
argument_list|,
name|in1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_sym_out
parameter_list|(
name|abfd
parameter_list|,
name|inp
parameter_list|,
name|extp
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|inp
decl_stmt|;
name|PTR
name|extp
decl_stmt|;
block|{
name|struct
name|internal_syment
modifier|*
name|in
init|=
operator|(
expr|struct
name|internal_syment
operator|*
operator|)
name|inp
decl_stmt|;
name|SYMENT
modifier|*
name|ext
init|=
operator|(
name|SYMENT
operator|*
operator|)
name|extp
decl_stmt|;
if|if
condition|(
name|in
operator|->
name|_n
operator|.
name|_n_name
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
literal|0
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e
operator|.
name|e
operator|.
name|e_zeroes
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|_n
operator|.
name|_n_n
operator|.
name|_n_offset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e
operator|.
name|e
operator|.
name|e_offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|SYMNMLEN
operator|!=
name|E_SYMNMLEN
operator|->
name|Error
operator|,
name|we
name|need
name|to
name|cope
name|with
name|truncating
name|or
name|extending
name|SYMNMLEN
operator|!
expr_stmt|;
else|#
directive|else
name|memcpy
argument_list|(
name|ext
operator|->
name|e
operator|.
name|e_name
argument_list|,
name|in
operator|->
name|_n
operator|.
name|_n_name
argument_list|,
name|SYMNMLEN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_value
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_value
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_scnum
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_scnum
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|ext
operator|->
name|e_type
argument_list|)
operator|==
literal|2
condition|)
block|{
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_type
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_type
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_type
argument_list|)
expr_stmt|;
block|}
name|bfd_h_put_8
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_sclass
argument_list|,
name|ext
operator|->
name|e_sclass
argument_list|)
expr_stmt|;
name|bfd_h_put_8
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_numaux
argument_list|,
name|ext
operator|->
name|e_numaux
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|SYMENT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|coff_swap_aux_in
parameter_list|(
name|abfd
parameter_list|,
name|ext1
parameter_list|,
name|type
parameter_list|,
name|class
parameter_list|,
name|indx
parameter_list|,
name|numaux
parameter_list|,
name|in1
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext1
decl_stmt|;
name|int
name|type
decl_stmt|;
name|int
name|class
decl_stmt|;
name|int
name|indx
decl_stmt|;
name|int
name|numaux
decl_stmt|;
name|PTR
name|in1
decl_stmt|;
block|{
name|AUXENT
modifier|*
name|ext
init|=
operator|(
name|AUXENT
operator|*
operator|)
name|ext1
decl_stmt|;
name|union
name|internal_auxent
modifier|*
name|in
init|=
operator|(
expr|union
name|internal_auxent
operator|*
operator|)
name|in1
decl_stmt|;
switch|switch
condition|(
name|class
condition|)
block|{
case|case
name|C_FILE
case|:
if|if
condition|(
name|ext
operator|->
name|x_file
operator|.
name|x_fname
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|in
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_zeroes
operator|=
literal|0
expr_stmt|;
name|in
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_offset
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|FILNMLEN
operator|!=
name|E_FILNMLEN
operator|->
name|Error
operator|,
name|we
name|need
name|to
name|cope
name|with
name|truncating
name|or
name|extending
name|FILNMLEN
operator|!
expr_stmt|;
else|#
directive|else
name|memcpy
argument_list|(
name|in
operator|->
name|x_file
operator|.
name|x_fname
argument_list|,
name|ext
operator|->
name|x_file
operator|.
name|x_fname
argument_list|,
name|FILNMLEN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return;
case|case
name|C_STAT
case|:
ifdef|#
directive|ifdef
name|C_LEAFSTAT
case|case
name|C_LEAFSTAT
case|:
endif|#
directive|endif
case|case
name|C_HIDDEN
case|:
if|if
condition|(
name|type
operator|==
name|T_NULL
condition|)
block|{
name|in
operator|->
name|x_scn
operator|.
name|x_scnlen
operator|=
name|GET_SCN_SCNLEN
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_scn
operator|.
name|x_nreloc
operator|=
name|GET_SCN_NRELOC
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_scn
operator|.
name|x_nlinno
operator|=
name|GET_SCN_NLINNO
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
name|in
operator|->
name|x_sym
operator|.
name|x_tagndx
operator|.
name|l
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_tagndx
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_TVNDX
name|in
operator|->
name|x_sym
operator|.
name|x_tvndx
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_tvndx
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|class
operator|==
name|C_BLOCK
operator|||
name|ISFCN
argument_list|(
name|type
argument_list|)
operator|||
name|ISTAG
argument_list|(
name|class
argument_list|)
condition|)
block|{
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_fcn
operator|.
name|x_lnnoptr
operator|=
name|GET_FCN_LNNOPTR
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_fcn
operator|.
name|x_endndx
operator|.
name|l
operator|=
name|GET_FCN_ENDNDX
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|DIMNUM
operator|!=
name|E_DIMNUM
error|#
directive|error
error|we need to cope with truncating or extending DIMNUM
endif|#
directive|endif
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|0
index|]
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|1
index|]
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|2
index|]
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|3
index|]
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ISFCN
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_fsize
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_fsize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_lnsz
operator|.
name|x_lnno
operator|=
name|GET_LNSZ_LNNO
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_lnsz
operator|.
name|x_size
operator|=
name|GET_LNSZ_SIZE
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_aux_out
parameter_list|(
name|abfd
parameter_list|,
name|inp
parameter_list|,
name|type
parameter_list|,
name|class
parameter_list|,
name|indx
parameter_list|,
name|numaux
parameter_list|,
name|extp
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|inp
decl_stmt|;
name|int
name|type
decl_stmt|;
name|int
name|class
decl_stmt|;
name|int
name|indx
decl_stmt|;
name|int
name|numaux
decl_stmt|;
name|PTR
name|extp
decl_stmt|;
block|{
name|union
name|internal_auxent
modifier|*
name|in
init|=
operator|(
expr|union
name|internal_auxent
operator|*
operator|)
name|inp
decl_stmt|;
name|AUXENT
modifier|*
name|ext
init|=
operator|(
name|AUXENT
operator|*
operator|)
name|extp
decl_stmt|;
name|memset
argument_list|(
operator|(
name|PTR
operator|)
name|ext
argument_list|,
literal|0
argument_list|,
name|AUXESZ
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|class
condition|)
block|{
case|case
name|C_FILE
case|:
if|if
condition|(
name|in
operator|->
name|x_file
operator|.
name|x_fname
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
literal|0
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_zeroes
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_offset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|FILNMLEN
operator|!=
name|E_FILNMLEN
operator|->
name|Error
operator|,
name|we
name|need
name|to
name|cope
name|with
name|truncating
name|or
name|extending
name|FILNMLEN
operator|!
expr_stmt|;
else|#
directive|else
name|memcpy
argument_list|(
name|ext
operator|->
name|x_file
operator|.
name|x_fname
argument_list|,
name|in
operator|->
name|x_file
operator|.
name|x_fname
argument_list|,
name|FILNMLEN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
sizeof|sizeof
argument_list|(
name|AUXENT
argument_list|)
return|;
case|case
name|C_STAT
case|:
ifdef|#
directive|ifdef
name|C_LEAFSTAT
case|case
name|C_LEAFSTAT
case|:
endif|#
directive|endif
case|case
name|C_HIDDEN
case|:
if|if
condition|(
name|type
operator|==
name|T_NULL
condition|)
block|{
name|PUT_SCN_SCNLEN
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_scn
operator|.
name|x_scnlen
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|PUT_SCN_NRELOC
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_scn
operator|.
name|x_nreloc
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|PUT_SCN_NLINNO
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_scn
operator|.
name|x_nlinno
argument_list|,
name|ext
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|AUXENT
argument_list|)
return|;
block|}
break|break;
block|}
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_tagndx
operator|.
name|l
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_tagndx
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_TVNDX
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_tvndx
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_tvndx
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|class
operator|==
name|C_BLOCK
operator|||
name|ISFCN
argument_list|(
name|type
argument_list|)
operator|||
name|ISTAG
argument_list|(
name|class
argument_list|)
condition|)
block|{
name|PUT_FCN_LNNOPTR
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_fcn
operator|.
name|x_lnnoptr
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|PUT_FCN_ENDNDX
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_fcn
operator|.
name|x_endndx
operator|.
name|l
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|DIMNUM
operator|!=
name|E_DIMNUM
error|#
directive|error
error|we need to cope with truncating or extending DIMNUM
endif|#
directive|endif
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|0
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|1
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|2
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|3
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ISFCN
argument_list|(
name|type
argument_list|)
condition|)
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_fsize
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_fsize
argument_list|)
expr_stmt|;
else|else
block|{
name|PUT_LNSZ_LNNO
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_lnsz
operator|.
name|x_lnno
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|PUT_LNSZ_SIZE
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_lnsz
operator|.
name|x_size
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
sizeof|sizeof
argument_list|(
name|AUXENT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|coff_swap_lineno_in
parameter_list|(
name|abfd
parameter_list|,
name|ext1
parameter_list|,
name|in1
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext1
decl_stmt|;
name|PTR
name|in1
decl_stmt|;
block|{
name|LINENO
modifier|*
name|ext
init|=
operator|(
name|LINENO
operator|*
operator|)
name|ext1
decl_stmt|;
name|struct
name|internal_lineno
modifier|*
name|in
init|=
operator|(
expr|struct
name|internal_lineno
operator|*
operator|)
name|in1
decl_stmt|;
name|in
operator|->
name|l_addr
operator|.
name|l_symndx
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|l_addr
operator|.
name|l_symndx
argument_list|)
expr_stmt|;
name|in
operator|->
name|l_lnno
operator|=
name|GET_LINENO_LNNO
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_lineno_out
parameter_list|(
name|abfd
parameter_list|,
name|inp
parameter_list|,
name|outp
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|inp
decl_stmt|;
name|PTR
name|outp
decl_stmt|;
block|{
name|struct
name|internal_lineno
modifier|*
name|in
init|=
operator|(
expr|struct
name|internal_lineno
operator|*
operator|)
name|inp
decl_stmt|;
name|struct
name|external_lineno
modifier|*
name|ext
init|=
operator|(
expr|struct
name|external_lineno
operator|*
operator|)
name|outp
decl_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|l_addr
operator|.
name|l_symndx
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|l_addr
operator|.
name|l_symndx
argument_list|)
expr_stmt|;
name|PUT_LINENO_LNNO
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|l_lnno
argument_list|,
name|ext
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
expr|struct
name|external_lineno
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|coff_swap_aouthdr_in
parameter_list|(
name|abfd
parameter_list|,
name|aouthdr_ext1
parameter_list|,
name|aouthdr_int1
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|aouthdr_ext1
decl_stmt|;
name|PTR
name|aouthdr_int1
decl_stmt|;
block|{
name|struct
name|internal_extra_pe_aouthdr
modifier|*
name|a
decl_stmt|;
name|PEAOUTHDR
modifier|*
name|src
init|=
operator|(
name|PEAOUTHDR
operator|*
operator|)
operator|(
name|aouthdr_ext1
operator|)
decl_stmt|;
name|AOUTHDR
modifier|*
name|aouthdr_ext
init|=
operator|(
name|AOUTHDR
operator|*
operator|)
name|aouthdr_ext1
decl_stmt|;
name|struct
name|internal_aouthdr
modifier|*
name|aouthdr_int
init|=
operator|(
expr|struct
name|internal_aouthdr
operator|*
operator|)
name|aouthdr_int1
decl_stmt|;
name|aouthdr_int
operator|->
name|magic
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|magic
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|vstamp
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|vstamp
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|tsize
operator|=
name|GET_AOUTHDR_TSIZE
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|tsize
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|dsize
operator|=
name|GET_AOUTHDR_DSIZE
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|dsize
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|bsize
operator|=
name|GET_AOUTHDR_BSIZE
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|bsize
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|entry
operator|=
name|GET_AOUTHDR_ENTRY
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|entry
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|text_start
operator|=
name|GET_AOUTHDR_TEXT_START
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|text_start
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|data_start
operator|=
name|GET_AOUTHDR_DATA_START
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|data_start
argument_list|)
expr_stmt|;
name|a
operator|=
operator|&
name|aouthdr_int
operator|->
name|pe
expr_stmt|;
name|a
operator|->
name|ImageBase
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|ImageBase
argument_list|)
expr_stmt|;
name|a
operator|->
name|SectionAlignment
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|SectionAlignment
argument_list|)
expr_stmt|;
name|a
operator|->
name|FileAlignment
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|FileAlignment
argument_list|)
expr_stmt|;
name|a
operator|->
name|MajorOperatingSystemVersion
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|MajorOperatingSystemVersion
argument_list|)
expr_stmt|;
name|a
operator|->
name|MinorOperatingSystemVersion
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|MinorOperatingSystemVersion
argument_list|)
expr_stmt|;
name|a
operator|->
name|MajorImageVersion
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|MajorImageVersion
argument_list|)
expr_stmt|;
name|a
operator|->
name|MinorImageVersion
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|MinorImageVersion
argument_list|)
expr_stmt|;
name|a
operator|->
name|MajorSubsystemVersion
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|MajorSubsystemVersion
argument_list|)
expr_stmt|;
name|a
operator|->
name|MinorSubsystemVersion
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|MinorSubsystemVersion
argument_list|)
expr_stmt|;
name|a
operator|->
name|Reserved1
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|Reserved1
argument_list|)
expr_stmt|;
name|a
operator|->
name|SizeOfImage
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|SizeOfImage
argument_list|)
expr_stmt|;
name|a
operator|->
name|SizeOfHeaders
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|SizeOfHeaders
argument_list|)
expr_stmt|;
name|a
operator|->
name|CheckSum
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|CheckSum
argument_list|)
expr_stmt|;
name|a
operator|->
name|Subsystem
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|Subsystem
argument_list|)
expr_stmt|;
name|a
operator|->
name|DllCharacteristics
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|DllCharacteristics
argument_list|)
expr_stmt|;
name|a
operator|->
name|SizeOfStackReserve
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|SizeOfStackReserve
argument_list|)
expr_stmt|;
name|a
operator|->
name|SizeOfStackCommit
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|SizeOfStackCommit
argument_list|)
expr_stmt|;
name|a
operator|->
name|SizeOfHeapReserve
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|SizeOfHeapReserve
argument_list|)
expr_stmt|;
name|a
operator|->
name|SizeOfHeapCommit
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|SizeOfHeapCommit
argument_list|)
expr_stmt|;
name|a
operator|->
name|LoaderFlags
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|LoaderFlags
argument_list|)
expr_stmt|;
name|a
operator|->
name|NumberOfRvaAndSizes
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|NumberOfRvaAndSizes
argument_list|)
expr_stmt|;
block|{
name|int
name|idx
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|16
condition|;
name|idx
operator|++
control|)
block|{
name|a
operator|->
name|DataDirectory
index|[
name|idx
index|]
operator|.
name|VirtualAddress
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|DataDirectory
index|[
name|idx
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|a
operator|->
name|DataDirectory
index|[
name|idx
index|]
operator|.
name|Size
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|src
operator|->
name|DataDirectory
index|[
name|idx
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|aouthdr_int
operator|->
name|entry
condition|)
name|aouthdr_int
operator|->
name|entry
operator|+=
name|a
operator|->
name|ImageBase
expr_stmt|;
if|if
condition|(
name|aouthdr_int
operator|->
name|tsize
condition|)
name|aouthdr_int
operator|->
name|text_start
operator|+=
name|a
operator|->
name|ImageBase
expr_stmt|;
if|if
condition|(
name|aouthdr_int
operator|->
name|dsize
condition|)
name|aouthdr_int
operator|->
name|data_start
operator|+=
name|a
operator|->
name|ImageBase
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|void
name|add_data_entry
parameter_list|(
name|abfd
parameter_list|,
name|aout
parameter_list|,
name|idx
parameter_list|,
name|name
parameter_list|,
name|base
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|struct
name|internal_extra_pe_aouthdr
modifier|*
name|aout
decl_stmt|;
name|int
name|idx
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|bfd_vma
name|base
decl_stmt|;
block|{
name|asection
modifier|*
name|sec
init|=
name|bfd_get_section_by_name
argument_list|(
name|abfd
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|/* add import directory information if it exists */
if|if
condition|(
name|sec
operator|!=
name|NULL
condition|)
block|{
name|aout
operator|->
name|DataDirectory
index|[
name|idx
index|]
operator|.
name|VirtualAddress
operator|=
name|sec
operator|->
name|vma
operator|-
name|base
expr_stmt|;
name|aout
operator|->
name|DataDirectory
index|[
name|idx
index|]
operator|.
name|Size
operator|=
name|sec
operator|->
name|_cooked_size
expr_stmt|;
name|sec
operator|->
name|flags
operator||=
name|SEC_DATA
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_aouthdr_out
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|in
decl_stmt|;
name|PTR
name|out
decl_stmt|;
block|{
name|struct
name|internal_aouthdr
modifier|*
name|aouthdr_in
init|=
operator|(
expr|struct
name|internal_aouthdr
operator|*
operator|)
name|in
decl_stmt|;
name|struct
name|internal_extra_pe_aouthdr
modifier|*
name|extra
init|=
operator|&
name|pe_data
argument_list|(
name|abfd
argument_list|)
operator|->
name|pe_opthdr
decl_stmt|;
name|PEAOUTHDR
modifier|*
name|aouthdr_out
init|=
operator|(
name|PEAOUTHDR
operator|*
operator|)
name|out
decl_stmt|;
name|bfd_vma
name|sa
init|=
name|extra
operator|->
name|SectionAlignment
decl_stmt|;
name|bfd_vma
name|fa
init|=
name|extra
operator|->
name|FileAlignment
decl_stmt|;
name|bfd_vma
name|ib
init|=
name|extra
operator|->
name|ImageBase
decl_stmt|;
if|if
condition|(
name|aouthdr_in
operator|->
name|tsize
condition|)
name|aouthdr_in
operator|->
name|text_start
operator|-=
name|ib
expr_stmt|;
if|if
condition|(
name|aouthdr_in
operator|->
name|dsize
condition|)
name|aouthdr_in
operator|->
name|data_start
operator|-=
name|ib
expr_stmt|;
if|if
condition|(
name|aouthdr_in
operator|->
name|entry
condition|)
name|aouthdr_in
operator|->
name|entry
operator|-=
name|ib
expr_stmt|;
define|#
directive|define
name|FA
parameter_list|(
name|x
parameter_list|)
value|(((x) + fa -1 )& (- fa))
define|#
directive|define
name|SA
parameter_list|(
name|x
parameter_list|)
value|(((x) + sa -1 )& (- sa))
comment|/* We like to have the sizes aligned */
name|aouthdr_in
operator|->
name|bsize
operator|=
name|FA
argument_list|(
name|aouthdr_in
operator|->
name|bsize
argument_list|)
expr_stmt|;
name|extra
operator|->
name|NumberOfRvaAndSizes
operator|=
name|IMAGE_NUMBEROF_DIRECTORY_ENTRIES
expr_stmt|;
comment|/* first null out all data directory entries .. */
name|memset
argument_list|(
name|extra
operator|->
name|DataDirectory
argument_list|,
sizeof|sizeof
argument_list|(
name|extra
operator|->
name|DataDirectory
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|add_data_entry
argument_list|(
name|abfd
argument_list|,
name|extra
argument_list|,
literal|0
argument_list|,
literal|".edata"
argument_list|,
name|ib
argument_list|)
expr_stmt|;
name|add_data_entry
argument_list|(
name|abfd
argument_list|,
name|extra
argument_list|,
literal|1
argument_list|,
literal|".idata"
argument_list|,
name|ib
argument_list|)
expr_stmt|;
name|add_data_entry
argument_list|(
name|abfd
argument_list|,
name|extra
argument_list|,
literal|2
argument_list|,
literal|".rsrc"
argument_list|,
name|ib
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|POWERPC_LE_PE
comment|/* FIXME: do other PE platforms use this? */
name|add_data_entry
argument_list|(
name|abfd
argument_list|,
name|extra
argument_list|,
literal|3
argument_list|,
literal|".pdata"
argument_list|,
name|ib
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|add_data_entry
argument_list|(
name|abfd
argument_list|,
name|extra
argument_list|,
literal|5
argument_list|,
literal|".reloc"
argument_list|,
name|ib
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|POWERPC_LE_PE
comment|/* On the PPC NT system, this field is set up as follows. It is      not an "officially" reserved field, so it currently has no title.      first_thunk_address is idata$5, and the thunk_size is the size      of the idata$5 chunk of the idata section.   */
name|extra
operator|->
name|DataDirectory
index|[
literal|12
index|]
operator|.
name|VirtualAddress
operator|=
name|first_thunk_address
expr_stmt|;
name|extra
operator|->
name|DataDirectory
index|[
literal|12
index|]
operator|.
name|Size
operator|=
name|thunk_size
expr_stmt|;
comment|/* On the PPC NT system, the size of the directory entry is not the      size of the entire section. It's actually offset to the end of       the idata$3 component of the idata section. This is the size of      the entire import table. (also known as the start of idata$4)   */
name|extra
operator|->
name|DataDirectory
index|[
literal|1
index|]
operator|.
name|Size
operator|=
name|import_table_size
expr_stmt|;
endif|#
directive|endif
block|{
name|asection
modifier|*
name|sec
decl_stmt|;
name|bfd_vma
name|dsize
init|=
literal|0
decl_stmt|;
name|bfd_vma
name|isize
init|=
name|SA
argument_list|(
name|abfd
operator|->
name|sections
operator|->
name|filepos
argument_list|)
decl_stmt|;
name|bfd_vma
name|tsize
init|=
literal|0
decl_stmt|;
for|for
control|(
name|sec
operator|=
name|abfd
operator|->
name|sections
init|;
name|sec
condition|;
name|sec
operator|=
name|sec
operator|->
name|next
control|)
block|{
name|int
name|rounded
init|=
name|FA
argument_list|(
name|sec
operator|->
name|_raw_size
argument_list|)
decl_stmt|;
if|if
condition|(
name|strcmp
argument_list|(
name|sec
operator|->
name|name
argument_list|,
literal|".junk"
argument_list|)
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|sec
operator|->
name|flags
operator|&
name|SEC_DATA
condition|)
name|dsize
operator|+=
name|rounded
expr_stmt|;
if|if
condition|(
name|sec
operator|->
name|flags
operator|&
name|SEC_CODE
condition|)
name|tsize
operator|+=
name|rounded
expr_stmt|;
name|isize
operator|+=
name|SA
argument_list|(
name|rounded
argument_list|)
expr_stmt|;
block|}
name|aouthdr_in
operator|->
name|dsize
operator|=
name|dsize
expr_stmt|;
name|aouthdr_in
operator|->
name|tsize
operator|=
name|tsize
expr_stmt|;
name|extra
operator|->
name|SizeOfImage
operator|=
name|isize
expr_stmt|;
block|}
name|extra
operator|->
name|SizeOfHeaders
operator|=
name|abfd
operator|->
name|sections
operator|->
name|filepos
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|magic
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|magic
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|POWERPC_LE_PE
comment|/* this little piece of magic sets the "linker version" field to 2.60 */
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
literal|2
operator|+
literal|60
operator|*
literal|256
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|vstamp
argument_list|)
expr_stmt|;
else|#
directive|else
comment|/* this little piece of magic sets the "linker version" field to 2.55 */
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
literal|2
operator|+
literal|55
operator|*
literal|256
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|vstamp
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|PUT_AOUTHDR_TSIZE
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|tsize
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|tsize
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_DSIZE
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|dsize
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|dsize
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_BSIZE
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|bsize
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|bsize
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_ENTRY
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|entry
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|entry
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_TEXT_START
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|text_start
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|text_start
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_DATA_START
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|data_start
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|standard
operator|.
name|data_start
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|ImageBase
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|ImageBase
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|SectionAlignment
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|SectionAlignment
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|FileAlignment
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|FileAlignment
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|MajorOperatingSystemVersion
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|MajorOperatingSystemVersion
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|MinorOperatingSystemVersion
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|MinorOperatingSystemVersion
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|MajorImageVersion
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|MajorImageVersion
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|MinorImageVersion
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|MinorImageVersion
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|MajorSubsystemVersion
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|MajorSubsystemVersion
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|MinorSubsystemVersion
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|MinorSubsystemVersion
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|Reserved1
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|Reserved1
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|SizeOfImage
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|SizeOfImage
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|SizeOfHeaders
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|SizeOfHeaders
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|CheckSum
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|CheckSum
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|Subsystem
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|Subsystem
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|DllCharacteristics
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|DllCharacteristics
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|SizeOfStackReserve
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|SizeOfStackReserve
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|SizeOfStackCommit
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|SizeOfStackCommit
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|SizeOfHeapReserve
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|SizeOfHeapReserve
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|SizeOfHeapCommit
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|SizeOfHeapCommit
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|LoaderFlags
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|LoaderFlags
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|NumberOfRvaAndSizes
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|NumberOfRvaAndSizes
argument_list|)
expr_stmt|;
block|{
name|int
name|idx
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|16
condition|;
name|idx
operator|++
control|)
block|{
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|DataDirectory
index|[
name|idx
index|]
operator|.
name|VirtualAddress
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|DataDirectory
index|[
name|idx
index|]
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|extra
operator|->
name|DataDirectory
index|[
name|idx
index|]
operator|.
name|Size
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|DataDirectory
index|[
name|idx
index|]
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
sizeof|sizeof
argument_list|(
name|AOUTHDR
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|coff_swap_scnhdr_in
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|,
name|in
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext
decl_stmt|;
name|PTR
name|in
decl_stmt|;
block|{
name|SCNHDR
modifier|*
name|scnhdr_ext
init|=
operator|(
name|SCNHDR
operator|*
operator|)
name|ext
decl_stmt|;
name|struct
name|internal_scnhdr
modifier|*
name|scnhdr_int
init|=
operator|(
expr|struct
name|internal_scnhdr
operator|*
operator|)
name|in
decl_stmt|;
name|memcpy
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
name|scnhdr_ext
operator|->
name|s_name
argument_list|,
sizeof|sizeof
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|)
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_vaddr
operator|=
name|GET_SCNHDR_VADDR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_vaddr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_paddr
operator|=
name|GET_SCNHDR_PADDR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_paddr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_size
operator|=
name|GET_SCNHDR_SIZE
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_size
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_scnptr
operator|=
name|GET_SCNHDR_SCNPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_scnptr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_relptr
operator|=
name|GET_SCNHDR_RELPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_relptr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_lnnoptr
operator|=
name|GET_SCNHDR_LNNOPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_lnnoptr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_flags
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_flags
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_nreloc
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_nlnno
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
if|if
condition|(
name|scnhdr_int
operator|->
name|s_vaddr
operator|!=
literal|0
condition|)
block|{
name|scnhdr_int
operator|->
name|s_vaddr
operator|+=
name|pe_data
argument_list|(
name|abfd
argument_list|)
operator|->
name|pe_opthdr
operator|.
name|ImageBase
expr_stmt|;
block|}
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
name|_BSS
argument_list|)
operator|==
literal|0
condition|)
block|{
name|scnhdr_int
operator|->
name|s_size
operator|=
name|scnhdr_int
operator|->
name|s_paddr
expr_stmt|;
name|scnhdr_int
operator|->
name|s_paddr
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_scnhdr_out
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|in
decl_stmt|;
name|PTR
name|out
decl_stmt|;
block|{
name|struct
name|internal_scnhdr
modifier|*
name|scnhdr_int
init|=
operator|(
expr|struct
name|internal_scnhdr
operator|*
operator|)
name|in
decl_stmt|;
name|SCNHDR
modifier|*
name|scnhdr_ext
init|=
operator|(
name|SCNHDR
operator|*
operator|)
name|out
decl_stmt|;
name|unsigned
name|int
name|ret
init|=
sizeof|sizeof
argument_list|(
name|SCNHDR
argument_list|)
decl_stmt|;
name|bfd_vma
name|ps
decl_stmt|;
name|bfd_vma
name|ss
decl_stmt|;
name|memcpy
argument_list|(
name|scnhdr_ext
operator|->
name|s_name
argument_list|,
name|scnhdr_int
operator|->
name|s_name
argument_list|,
sizeof|sizeof
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|)
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_VADDR
argument_list|(
name|abfd
argument_list|,
operator|(
name|scnhdr_int
operator|->
name|s_vaddr
operator|-
name|pe_data
argument_list|(
name|abfd
argument_list|)
operator|->
name|pe_opthdr
operator|.
name|ImageBase
operator|)
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_vaddr
argument_list|)
expr_stmt|;
comment|/* NT wants the size data to be rounded up to the next NT_FILE_ALIGNMENT      value except for the BSS section, its s_size should be 0 */
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
name|_BSS
argument_list|)
operator|==
literal|0
condition|)
block|{
name|ps
operator|=
name|scnhdr_int
operator|->
name|s_size
expr_stmt|;
name|ss
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|ps
operator|=
name|scnhdr_int
operator|->
name|s_paddr
expr_stmt|;
name|ss
operator|=
name|scnhdr_int
operator|->
name|s_size
expr_stmt|;
block|}
name|PUT_SCNHDR_SIZE
argument_list|(
name|abfd
argument_list|,
name|ss
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_size
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_PADDR
argument_list|(
name|abfd
argument_list|,
name|ps
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_paddr
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_SCNPTR
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_scnptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_scnptr
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_RELPTR
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_relptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_relptr
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_LNNOPTR
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_lnnoptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_lnnoptr
argument_list|)
expr_stmt|;
comment|/* Extra flags must be set when dealing with NT.  All sections should also      have the IMAGE_SCN_MEM_READ (0x40000000) flag set.  In addition, the      .text section must have IMAGE_SCN_MEM_EXECUTE (0x20000000) and the data      sections (.idata, .data, .bss, .CRT) must have IMAGE_SCN_MEM_WRITE set      (this is especially important when dealing with the .idata section since      the addresses for routines from .dlls must be overwritten).  If .reloc      section data is ever generated, we must add IMAGE_SCN_MEM_DISCARDABLE      (0x02000000).  Also, the resource data should also be read and      writable.  */
comment|/* FIXME: alignment is also encoded in this field, at least on ppc (krk) */
comment|/* FIXME: even worse, I don't see how to get the original alignment field*/
comment|/*        back...                                                        */
block|{
name|int
name|flags
init|=
name|scnhdr_int
operator|->
name|s_flags
decl_stmt|;
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".data"
argument_list|)
operator|==
literal|0
operator|||
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".CRT"
argument_list|)
operator|==
literal|0
operator|||
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".rsrc"
argument_list|)
operator|==
literal|0
operator|||
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".bss"
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator||=
name|IMAGE_SCN_MEM_READ
operator||
name|IMAGE_SCN_MEM_WRITE
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".text"
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator||=
name|IMAGE_SCN_MEM_READ
operator||
name|IMAGE_SCN_MEM_EXECUTE
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".reloc"
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator|=
name|SEC_DATA
operator||
name|IMAGE_SCN_MEM_READ
operator||
name|IMAGE_SCN_MEM_DISCARDABLE
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".idata"
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator|=
name|IMAGE_SCN_MEM_READ
operator||
name|IMAGE_SCN_MEM_WRITE
operator||
name|SEC_DATA
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".rdata"
argument_list|)
operator|==
literal|0
operator|||
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".edata"
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator|=
name|IMAGE_SCN_MEM_READ
operator||
name|SEC_DATA
expr_stmt|;
comment|/* ppc-nt additions */
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".pdata"
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator|=
name|IMAGE_SCN_CNT_INITIALIZED_DATA
operator||
name|IMAGE_SCN_ALIGN_4BYTES
operator||
name|IMAGE_SCN_MEM_READ
expr_stmt|;
comment|/* Remember this field is a max of 8 chars, so the null is _not_ there        for an 8 character name like ".reldata". (yep. Stupid bug) */
elseif|else
if|if
condition|(
name|strncmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".reldata"
argument_list|,
name|strlen
argument_list|(
literal|".reldata"
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator|=
name|IMAGE_SCN_CNT_INITIALIZED_DATA
operator||
name|IMAGE_SCN_ALIGN_8BYTES
operator||
name|IMAGE_SCN_MEM_READ
operator||
name|IMAGE_SCN_MEM_WRITE
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".ydata"
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator|=
name|IMAGE_SCN_CNT_INITIALIZED_DATA
operator||
name|IMAGE_SCN_ALIGN_8BYTES
operator||
name|IMAGE_SCN_MEM_READ
operator||
name|IMAGE_SCN_MEM_WRITE
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".drectve"
argument_list|)
operator|==
literal|0
condition|)
name|flags
operator|=
name|IMAGE_SCN_LNK_INFO
operator||
name|IMAGE_SCN_LNK_REMOVE
expr_stmt|;
comment|/* end of ppc-nt additions */
ifdef|#
directive|ifdef
name|POWERPC_LE_PE
elseif|else
if|if
condition|(
name|strncmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".stabstr"
argument_list|,
name|strlen
argument_list|(
literal|".stabstr"
argument_list|)
argument_list|)
operator|==
literal|0
condition|)
block|{
name|flags
operator|=
name|IMAGE_SCN_LNK_INFO
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
literal|".stab"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|flags
operator|=
name|IMAGE_SCN_LNK_INFO
expr_stmt|;
block|}
endif|#
directive|endif
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|flags
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_flags
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scnhdr_int
operator|->
name|s_nlnno
operator|<=
literal|0xffff
condition|)
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_nlnno
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
else|else
block|{
call|(
modifier|*
name|_bfd_error_handler
call|)
argument_list|(
literal|"%s: line number overflow: 0x%lx> 0xffff"
argument_list|,
name|bfd_get_filename
argument_list|(
name|abfd
argument_list|)
argument_list|,
name|scnhdr_int
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
name|bfd_set_error
argument_list|(
name|bfd_error_file_truncated
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
literal|0xffff
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|scnhdr_int
operator|->
name|s_nreloc
operator|<=
literal|0xffff
condition|)
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_nreloc
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
else|else
block|{
call|(
modifier|*
name|_bfd_error_handler
call|)
argument_list|(
literal|"%s: reloc overflow: 0x%lx> 0xffff"
argument_list|,
name|bfd_get_filename
argument_list|(
name|abfd
argument_list|)
argument_list|,
name|scnhdr_int
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
name|bfd_set_error
argument_list|(
name|bfd_error_file_truncated
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
literal|0xffff
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|char
modifier|*
name|dir_names
index|[
name|IMAGE_NUMBEROF_DIRECTORY_ENTRIES
index|]
init|=
block|{
literal|"Export Directory [.edata]"
block|,
literal|"Import Directory [parts of .idata]"
block|,
literal|"Resource Directory [.rsrc]"
block|,
literal|"Exception Directory [.pdata]"
block|,
literal|"Security Directory"
block|,
literal|"Base Relocation Directory [.reloc]"
block|,
literal|"Debug Directory"
block|,
literal|"Description Directory"
block|,
literal|"Special Directory"
block|,
literal|"Thread Storage Directory [.tls]"
block|,
literal|"Load Configuration Directory"
block|,
literal|"Bound Import Directory"
block|,
literal|"Import Address Table Directory"
block|,
literal|"Reserved"
block|,
literal|"Reserved"
block|,
literal|"Reserved"
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**********************************************************************/
end_comment

begin_function
specifier|static
name|boolean
name|pe_print_idata
parameter_list|(
name|abfd
parameter_list|,
name|vfile
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|void
modifier|*
name|vfile
decl_stmt|;
block|{
name|FILE
modifier|*
name|file
init|=
name|vfile
decl_stmt|;
name|bfd_byte
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|asection
modifier|*
name|section
init|=
name|bfd_get_section_by_name
argument_list|(
name|abfd
argument_list|,
literal|".idata"
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|POWERPC_LE_PE
name|asection
modifier|*
name|rel_section
init|=
name|bfd_get_section_by_name
argument_list|(
name|abfd
argument_list|,
literal|".reldata"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|bfd_size_type
name|datasize
init|=
literal|0
decl_stmt|;
name|bfd_size_type
name|i
decl_stmt|;
name|bfd_size_type
name|start
decl_stmt|,
name|stop
decl_stmt|;
name|int
name|onaline
init|=
literal|20
decl_stmt|;
name|bfd_vma
name|addr_value
decl_stmt|;
name|bfd_vma
name|loadable_toc_address
decl_stmt|;
name|bfd_vma
name|toc_address
decl_stmt|;
name|bfd_vma
name|start_address
decl_stmt|;
name|pe_data_type
modifier|*
name|pe
init|=
name|pe_data
argument_list|(
name|abfd
argument_list|)
decl_stmt|;
name|struct
name|internal_extra_pe_aouthdr
modifier|*
name|extra
init|=
operator|&
name|pe
operator|->
name|pe_opthdr
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|0
condition|)
return|return
name|true
return|;
ifdef|#
directive|ifdef
name|POWERPC_LE_PE
if|if
condition|(
name|rel_section
operator|!=
literal|0
operator|&&
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|rel_section
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|/* The toc address can be found by taking the starting address, 	 which on the PPC locates a function descriptor. The descriptor 	 consists of the function code starting address followed by the 	 address of the toc. The starting address we get from the bfd, 	 and the descriptor is supposed to be in the .reldata section.        */
name|bfd_byte
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|int
name|offset
decl_stmt|;
name|data
operator|=
operator|(
name|bfd_byte
operator|*
operator|)
name|bfd_malloc
argument_list|(
operator|(
name|size_t
operator|)
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|rel_section
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
name|NULL
operator|&&
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|rel_section
argument_list|)
operator|!=
literal|0
condition|)
return|return
name|false
return|;
name|datasize
operator|=
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|rel_section
argument_list|)
expr_stmt|;
name|bfd_get_section_contents
argument_list|(
name|abfd
argument_list|,
name|rel_section
argument_list|,
operator|(
name|PTR
operator|)
name|data
argument_list|,
literal|0
argument_list|,
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|rel_section
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|=
name|abfd
operator|->
name|start_address
operator|-
name|rel_section
operator|->
name|vma
expr_stmt|;
name|start_address
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|offset
argument_list|)
expr_stmt|;
name|loadable_toc_address
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|offset
operator|+
literal|4
argument_list|)
expr_stmt|;
name|toc_address
operator|=
name|loadable_toc_address
operator|-
literal|32768
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nFunction descriptor located at the start address: %04lx\n"
argument_list|,
call|(
name|unsigned
name|long
name|int
call|)
argument_list|(
name|abfd
operator|->
name|start_address
argument_list|)
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tcode-base %08lx toc (loadable/actual) %08lx/%08lx\n"
argument_list|,
name|start_address
argument_list|,
name|loadable_toc_address
argument_list|,
name|toc_address
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|loadable_toc_address
operator|=
literal|0
expr_stmt|;
name|toc_address
operator|=
literal|0
expr_stmt|;
name|start_address
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nThe Import Tables (interpreted .idata section contents)\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|" vma:    Hint    Time      Forward  DLL       First\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"         Table   Stamp     Chain    Name      Thunk\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
operator|==
literal|0
condition|)
return|return
name|true
return|;
name|data
operator|=
operator|(
name|bfd_byte
operator|*
operator|)
name|bfd_malloc
argument_list|(
operator|(
name|size_t
operator|)
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|datasize
operator|=
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
name|NULL
operator|&&
name|datasize
operator|!=
literal|0
condition|)
return|return
name|false
return|;
name|bfd_get_section_contents
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|,
operator|(
name|PTR
operator|)
name|data
argument_list|,
literal|0
argument_list|,
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|stop
operator|=
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|stop
condition|;
name|i
operator|+=
name|onaline
control|)
block|{
name|bfd_vma
name|hint_addr
decl_stmt|;
name|bfd_vma
name|time_stamp
decl_stmt|;
name|bfd_vma
name|forward_chain
decl_stmt|;
name|bfd_vma
name|dll_name
decl_stmt|;
name|bfd_vma
name|first_thunk
decl_stmt|;
name|int
name|idx
decl_stmt|;
name|int
name|j
decl_stmt|;
name|char
modifier|*
name|dll
decl_stmt|;
name|int
name|adj
init|=
name|extra
operator|->
name|ImageBase
operator|-
name|section
operator|->
name|vma
decl_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|" %04lx\t"
argument_list|,
call|(
name|unsigned
name|long
name|int
call|)
argument_list|(
name|i
operator|+
name|section
operator|->
name|vma
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|+
literal|20
operator|>
name|stop
condition|)
block|{
comment|/* check stuff */
empty_stmt|;
block|}
name|hint_addr
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
argument_list|)
expr_stmt|;
name|time_stamp
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|4
argument_list|)
expr_stmt|;
name|forward_chain
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|8
argument_list|)
expr_stmt|;
name|dll_name
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|12
argument_list|)
expr_stmt|;
name|first_thunk
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|16
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"%08lx %08lx %08lx %08lx %08lx\n"
argument_list|,
name|hint_addr
argument_list|,
name|time_stamp
argument_list|,
name|forward_chain
argument_list|,
name|dll_name
argument_list|,
name|first_thunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|hint_addr
operator|==
literal|0
condition|)
block|{
break|break;
block|}
comment|/* the image base is present in the section->vma */
name|dll
operator|=
name|data
operator|+
name|dll_name
operator|+
name|adj
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\n\tDLL Name: %s\n"
argument_list|,
name|dll
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tvma:  Ordinal  Member-Name\n"
argument_list|)
expr_stmt|;
name|idx
operator|=
name|hint_addr
operator|+
name|adj
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|stop
condition|;
name|j
operator|+=
literal|4
control|)
block|{
name|int
name|ordinal
decl_stmt|;
name|char
modifier|*
name|member_name
decl_stmt|;
name|bfd_vma
name|member
init|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|idx
operator|+
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|member
operator|==
literal|0
condition|)
break|break;
name|ordinal
operator|=
name|bfd_get_16
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|member
operator|+
name|adj
argument_list|)
expr_stmt|;
name|member_name
operator|=
name|data
operator|+
name|member
operator|+
name|adj
operator|+
literal|2
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\t%04lx\t %4d  %s\n"
argument_list|,
name|member
argument_list|,
name|ordinal
argument_list|,
name|member_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hint_addr
operator|!=
name|first_thunk
condition|)
block|{
name|int
name|differ
init|=
literal|0
decl_stmt|;
name|int
name|idx2
decl_stmt|;
name|idx2
operator|=
name|first_thunk
operator|+
name|adj
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|stop
condition|;
name|j
operator|+=
literal|4
control|)
block|{
name|int
name|ordinal
decl_stmt|;
name|char
modifier|*
name|member_name
decl_stmt|;
name|bfd_vma
name|hint_member
init|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|idx
operator|+
name|j
argument_list|)
decl_stmt|;
name|bfd_vma
name|iat_member
init|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|idx2
operator|+
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|hint_member
operator|!=
name|iat_member
condition|)
block|{
if|if
condition|(
name|differ
operator|==
literal|0
condition|)
block|{
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tThe Import Address Table (difference found)\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tvma:  Ordinal  Member-Name\n"
argument_list|)
expr_stmt|;
name|differ
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|iat_member
operator|==
literal|0
condition|)
block|{
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\t>>> Ran out of IAT members!\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ordinal
operator|=
name|bfd_get_16
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|iat_member
operator|+
name|adj
argument_list|)
expr_stmt|;
name|member_name
operator|=
name|data
operator|+
name|iat_member
operator|+
name|adj
operator|+
literal|2
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\t%04lx\t %4d  %s\n"
argument_list|,
name|iat_member
argument_list|,
name|ordinal
argument_list|,
name|member_name
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
if|if
condition|(
name|hint_member
operator|==
literal|0
condition|)
break|break;
block|}
if|if
condition|(
name|differ
operator|==
literal|0
condition|)
block|{
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tThe Import Address Table is identical\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|boolean
name|pe_print_edata
parameter_list|(
name|abfd
parameter_list|,
name|vfile
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|void
modifier|*
name|vfile
decl_stmt|;
block|{
name|FILE
modifier|*
name|file
init|=
name|vfile
decl_stmt|;
name|bfd_byte
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|asection
modifier|*
name|section
init|=
name|bfd_get_section_by_name
argument_list|(
name|abfd
argument_list|,
literal|".edata"
argument_list|)
decl_stmt|;
name|bfd_size_type
name|datasize
init|=
literal|0
decl_stmt|;
name|bfd_size_type
name|i
decl_stmt|;
name|int
name|adj
decl_stmt|;
struct|struct
name|EDT_type
block|{
name|long
name|export_flags
decl_stmt|;
comment|/* reserved - should be zero */
name|long
name|time_stamp
decl_stmt|;
name|short
name|major_ver
decl_stmt|;
name|short
name|minor_ver
decl_stmt|;
name|bfd_vma
name|name
decl_stmt|;
comment|/* rva - relative to image base */
name|long
name|base
decl_stmt|;
comment|/* ordinal base */
name|long
name|num_functions
decl_stmt|;
comment|/* Number in the export address table */
name|long
name|num_names
decl_stmt|;
comment|/* Number in the name pointer table */
name|bfd_vma
name|eat_addr
decl_stmt|;
comment|/* rva to the export address table */
name|bfd_vma
name|npt_addr
decl_stmt|;
comment|/* rva to the Export Name Pointer Table */
name|bfd_vma
name|ot_addr
decl_stmt|;
comment|/* rva to the Ordinal Table */
block|}
name|edt
struct|;
name|pe_data_type
modifier|*
name|pe
init|=
name|pe_data
argument_list|(
name|abfd
argument_list|)
decl_stmt|;
name|struct
name|internal_extra_pe_aouthdr
modifier|*
name|extra
init|=
operator|&
name|pe
operator|->
name|pe_opthdr
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|0
condition|)
return|return
name|true
return|;
name|data
operator|=
operator|(
name|bfd_byte
operator|*
operator|)
name|bfd_malloc
argument_list|(
operator|(
name|size_t
operator|)
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|datasize
operator|=
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
name|NULL
operator|&&
name|datasize
operator|!=
literal|0
condition|)
return|return
name|false
return|;
name|bfd_get_section_contents
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|,
operator|(
name|PTR
operator|)
name|data
argument_list|,
literal|0
argument_list|,
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Go get Export Directory Table */
name|edt
operator|.
name|export_flags
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|0
argument_list|)
expr_stmt|;
name|edt
operator|.
name|time_stamp
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|4
argument_list|)
expr_stmt|;
name|edt
operator|.
name|major_ver
operator|=
name|bfd_get_16
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|8
argument_list|)
expr_stmt|;
name|edt
operator|.
name|minor_ver
operator|=
name|bfd_get_16
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|10
argument_list|)
expr_stmt|;
name|edt
operator|.
name|name
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|12
argument_list|)
expr_stmt|;
name|edt
operator|.
name|base
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|16
argument_list|)
expr_stmt|;
name|edt
operator|.
name|num_functions
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|20
argument_list|)
expr_stmt|;
name|edt
operator|.
name|num_names
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|24
argument_list|)
expr_stmt|;
name|edt
operator|.
name|eat_addr
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|28
argument_list|)
expr_stmt|;
name|edt
operator|.
name|npt_addr
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|32
argument_list|)
expr_stmt|;
name|edt
operator|.
name|ot_addr
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
literal|36
argument_list|)
expr_stmt|;
name|adj
operator|=
name|extra
operator|->
name|ImageBase
operator|-
name|section
operator|->
name|vma
expr_stmt|;
comment|/* Dump the EDT first first */
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nThe Export Tables (interpreted .edata section contents)\n\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Export Flags \t\t\t%x\n"
argument_list|,
name|edt
operator|.
name|export_flags
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Time/Date stamp \t\t%x\n"
argument_list|,
name|edt
operator|.
name|time_stamp
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Major/Minor \t\t\t%d/%d\n"
argument_list|,
name|edt
operator|.
name|major_ver
argument_list|,
name|edt
operator|.
name|minor_ver
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Name \t\t\t\t%x %s\n"
argument_list|,
name|edt
operator|.
name|name
argument_list|,
name|data
operator|+
name|edt
operator|.
name|name
operator|+
name|adj
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Ordinal Base \t\t\t%d\n"
argument_list|,
name|edt
operator|.
name|base
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Number in:\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tExport Address Table \t\t%x\n"
argument_list|,
name|edt
operator|.
name|num_functions
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\t[Name Pointer/Ordinal] Table\t%d\n"
argument_list|,
name|edt
operator|.
name|num_names
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Table Addresses\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tExport Address Table \t\t%x\n"
argument_list|,
name|edt
operator|.
name|eat_addr
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tName Pointer Table \t\t%x\n"
argument_list|,
name|edt
operator|.
name|npt_addr
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\tOrdinal Table \t\t\t%x\n"
argument_list|,
name|edt
operator|.
name|ot_addr
argument_list|)
expr_stmt|;
comment|/* The next table to find si the Export Address Table. It's basically      a list of pointers that either locate a function in this dll, or      forward the call to another dll. Something like:       typedef union        {         long export_rva;         long forwarder_rva;       } export_address_table_entry;   */
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nExport Address Table -- Ordinal Base %d\n"
argument_list|,
name|edt
operator|.
name|base
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|edt
operator|.
name|num_functions
condition|;
operator|++
name|i
control|)
block|{
name|bfd_vma
name|eat_member
init|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|edt
operator|.
name|eat_addr
operator|+
operator|(
name|i
operator|*
literal|4
operator|)
operator|+
name|adj
argument_list|)
decl_stmt|;
name|bfd_vma
name|eat_actual
init|=
name|extra
operator|->
name|ImageBase
operator|+
name|eat_member
decl_stmt|;
name|bfd_vma
name|edata_start
init|=
name|bfd_get_section_vma
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
decl_stmt|;
name|bfd_vma
name|edata_end
init|=
name|edata_start
operator|+
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
decl_stmt|;
if|if
condition|(
name|eat_member
operator|==
literal|0
condition|)
continue|continue;
if|if
condition|(
name|edata_start
operator|<
name|eat_actual
operator|&&
name|eat_actual
operator|<
name|edata_end
condition|)
block|{
comment|/* this rva is to a name (forwarding function) in our section */
comment|/* Should locate a function descriptor */
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\t[%4d] +base[%4d] %04lx %s -- %s\n"
argument_list|,
name|i
argument_list|,
name|i
operator|+
name|edt
operator|.
name|base
argument_list|,
name|eat_member
argument_list|,
literal|"Forwarder RVA"
argument_list|,
name|data
operator|+
name|eat_member
operator|+
name|adj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* Should locate a function descriptor in the reldata section */
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\t[%4d] +base[%4d] %04lx %s\n"
argument_list|,
name|i
argument_list|,
name|i
operator|+
name|edt
operator|.
name|base
argument_list|,
name|eat_member
argument_list|,
literal|"Export RVA"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* The Export Name Pointer Table is paired with the Export Ordinal Table */
comment|/* Dump them in parallel for clarity */
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\n[Ordinal/Name Pointer] Table\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|edt
operator|.
name|num_names
condition|;
operator|++
name|i
control|)
block|{
name|bfd_vma
name|name_ptr
init|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|edt
operator|.
name|npt_addr
operator|+
operator|(
name|i
operator|*
literal|4
operator|)
operator|+
name|adj
argument_list|)
decl_stmt|;
name|char
modifier|*
name|name
init|=
name|data
operator|+
name|name_ptr
operator|+
name|adj
decl_stmt|;
name|bfd_vma
name|ord
init|=
name|bfd_get_16
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|edt
operator|.
name|ot_addr
operator|+
operator|(
name|i
operator|*
literal|2
operator|)
operator|+
name|adj
argument_list|)
decl_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\t[%4d] %s\n"
argument_list|,
name|ord
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|boolean
name|pe_print_pdata
parameter_list|(
name|abfd
parameter_list|,
name|vfile
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|void
modifier|*
name|vfile
decl_stmt|;
block|{
name|FILE
modifier|*
name|file
init|=
name|vfile
decl_stmt|;
name|bfd_byte
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|asection
modifier|*
name|section
init|=
name|bfd_get_section_by_name
argument_list|(
name|abfd
argument_list|,
literal|".pdata"
argument_list|)
decl_stmt|;
name|bfd_size_type
name|datasize
init|=
literal|0
decl_stmt|;
name|bfd_size_type
name|i
decl_stmt|;
name|bfd_size_type
name|start
decl_stmt|,
name|stop
decl_stmt|;
name|int
name|onaline
init|=
literal|20
decl_stmt|;
name|bfd_vma
name|addr_value
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|0
condition|)
return|return
name|true
return|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nThe Function Table (interpreted .pdata section contents)\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|" vma:\t\tBegin    End      EH       EH       PrologEnd\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"     \t\tAddress  Address  Handler  Data     Address\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
operator|==
literal|0
condition|)
return|return
name|true
return|;
name|data
operator|=
operator|(
name|bfd_byte
operator|*
operator|)
name|bfd_malloc
argument_list|(
operator|(
name|size_t
operator|)
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|datasize
operator|=
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
name|NULL
operator|&&
name|datasize
operator|!=
literal|0
condition|)
return|return
name|false
return|;
name|bfd_get_section_contents
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|,
operator|(
name|PTR
operator|)
name|data
argument_list|,
literal|0
argument_list|,
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|stop
operator|=
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|stop
condition|;
name|i
operator|+=
name|onaline
control|)
block|{
name|bfd_vma
name|begin_addr
decl_stmt|;
name|bfd_vma
name|end_addr
decl_stmt|;
name|bfd_vma
name|eh_handler
decl_stmt|;
name|bfd_vma
name|eh_data
decl_stmt|;
name|bfd_vma
name|prolog_end_addr
decl_stmt|;
if|if
condition|(
name|i
operator|+
literal|20
operator|>
name|stop
condition|)
break|break;
name|begin_addr
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
argument_list|)
expr_stmt|;
name|end_addr
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|4
argument_list|)
expr_stmt|;
name|eh_handler
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|8
argument_list|)
expr_stmt|;
name|eh_data
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|12
argument_list|)
expr_stmt|;
name|prolog_end_addr
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|16
argument_list|)
expr_stmt|;
if|if
condition|(
name|begin_addr
operator|==
literal|0
operator|&&
name|end_addr
operator|==
literal|0
operator|&&
name|eh_handler
operator|==
literal|0
operator|&&
name|eh_data
operator|==
literal|0
operator|&&
name|prolog_end_addr
operator|==
literal|0
condition|)
block|{
comment|/* We are probably into the padding of the 	     section now */
break|break;
block|}
name|fprintf
argument_list|(
name|file
argument_list|,
literal|" %08lx\t"
argument_list|,
call|(
name|unsigned
name|long
name|int
call|)
argument_list|(
name|i
operator|+
name|section
operator|->
name|vma
argument_list|)
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"%08lx %08lx %08lx %08lx %08lx"
argument_list|,
name|begin_addr
argument_list|,
name|end_addr
argument_list|,
name|eh_handler
argument_list|,
name|eh_data
argument_list|,
name|prolog_end_addr
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|POWERPC_LE_PE
if|if
condition|(
name|eh_handler
operator|==
literal|0
operator|&&
name|eh_data
operator|!=
literal|0
condition|)
block|{
comment|/* Special bits here, although the meaning may */
comment|/* be a little mysterious. The only one I know */
comment|/* for sure is 0x03.                           */
comment|/* Code Significance                           */
comment|/* 0x00 None                                   */
comment|/* 0x01 Register Save Millicode                */
comment|/* 0x02 Register Restore Millicode             */
comment|/* 0x03 Glue Code Sequence                     */
switch|switch
condition|(
name|eh_data
condition|)
block|{
case|case
literal|0x01
case|:
name|fprintf
argument_list|(
name|file
argument_list|,
literal|" Register save millicode"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x02
case|:
name|fprintf
argument_list|(
name|file
argument_list|,
literal|" Register restore millicode"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|0x03
case|:
name|fprintf
argument_list|(
name|file
argument_list|,
literal|" Glue code sequence"
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
endif|#
directive|endif
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
specifier|static
specifier|const
name|char
modifier|*
name|tbl
index|[
literal|6
index|]
init|=
block|{
literal|"ABSOLUTE"
block|,
literal|"HIGH"
block|,
literal|"LOW"
block|,
literal|"HIGHLOW"
block|,
literal|"HIGHADJ"
block|,
literal|"unknown"
block|}
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|boolean
name|pe_print_reloc
parameter_list|(
name|abfd
parameter_list|,
name|vfile
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|void
modifier|*
name|vfile
decl_stmt|;
block|{
name|FILE
modifier|*
name|file
init|=
name|vfile
decl_stmt|;
name|bfd_byte
modifier|*
name|data
init|=
literal|0
decl_stmt|;
name|asection
modifier|*
name|section
init|=
name|bfd_get_section_by_name
argument_list|(
name|abfd
argument_list|,
literal|".reloc"
argument_list|)
decl_stmt|;
name|bfd_size_type
name|datasize
init|=
literal|0
decl_stmt|;
name|bfd_size_type
name|i
decl_stmt|;
name|bfd_size_type
name|start
decl_stmt|,
name|stop
decl_stmt|;
name|int
name|onaline
init|=
literal|20
decl_stmt|;
name|bfd_vma
name|addr_value
decl_stmt|;
if|if
condition|(
name|section
operator|==
literal|0
condition|)
return|return
name|true
return|;
if|if
condition|(
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
operator|==
literal|0
condition|)
return|return
name|true
return|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\n\nPE File Base Relocations (interpreted .reloc"
literal|" section contents)\n"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|(
name|bfd_byte
operator|*
operator|)
name|bfd_malloc
argument_list|(
operator|(
name|size_t
operator|)
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|datasize
operator|=
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|==
name|NULL
operator|&&
name|datasize
operator|!=
literal|0
condition|)
return|return
name|false
return|;
name|bfd_get_section_contents
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|,
operator|(
name|PTR
operator|)
name|data
argument_list|,
literal|0
argument_list|,
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
argument_list|)
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|stop
operator|=
name|bfd_section_size
argument_list|(
name|abfd
argument_list|,
name|section
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
name|start
init|;
name|i
operator|<
name|stop
condition|;
control|)
block|{
name|int
name|j
decl_stmt|;
name|bfd_vma
name|virtual_address
decl_stmt|;
name|long
name|number
decl_stmt|,
name|size
decl_stmt|;
comment|/* The .reloc section is a sequence of blocks, with a header consisting 	 of two 32 bit quantities, followed by a number of 16 bit entries */
name|virtual_address
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
argument_list|)
expr_stmt|;
name|size
operator|=
name|bfd_get_32
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|4
argument_list|)
expr_stmt|;
name|number
operator|=
operator|(
name|size
operator|-
literal|8
operator|)
operator|/
literal|2
expr_stmt|;
if|if
condition|(
name|size
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nVirtual Address: %08lx Chunk size %d (0x%x) "
literal|"Number of fixups %d\n"
argument_list|,
name|virtual_address
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
name|number
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|number
condition|;
operator|++
name|j
control|)
block|{
name|unsigned
name|short
name|e
init|=
name|bfd_get_16
argument_list|(
name|abfd
argument_list|,
name|data
operator|+
name|i
operator|+
literal|8
operator|+
name|j
operator|*
literal|2
argument_list|)
decl_stmt|;
name|int
name|t
init|=
operator|(
name|e
operator|&
literal|0xF000
operator|)
operator|>>
literal|12
decl_stmt|;
name|int
name|off
init|=
name|e
operator|&
literal|0x0FFF
decl_stmt|;
if|if
condition|(
name|t
operator|>
literal|5
condition|)
name|abort
argument_list|()
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\treloc %4d offset %4x [%4x] %s\n"
argument_list|,
name|j
argument_list|,
name|off
argument_list|,
name|off
operator|+
name|virtual_address
argument_list|,
name|tbl
index|[
name|t
index|]
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|size
expr_stmt|;
block|}
name|free
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|boolean
name|pe_print_private_bfd_data
parameter_list|(
name|abfd
parameter_list|,
name|vfile
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|vfile
decl_stmt|;
block|{
name|FILE
modifier|*
name|file
init|=
operator|(
name|FILE
operator|*
operator|)
name|vfile
decl_stmt|;
name|int
name|j
decl_stmt|;
name|pe_data_type
modifier|*
name|pe
init|=
name|pe_data
argument_list|(
name|abfd
argument_list|)
decl_stmt|;
name|struct
name|internal_extra_pe_aouthdr
modifier|*
name|i
init|=
operator|&
name|pe
operator|->
name|pe_opthdr
decl_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nImageBase\t\t"
argument_list|)
expr_stmt|;
name|fprintf_vma
argument_list|(
name|file
argument_list|,
name|i
operator|->
name|ImageBase
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nSectionAlignment\t"
argument_list|)
expr_stmt|;
name|fprintf_vma
argument_list|(
name|file
argument_list|,
name|i
operator|->
name|SectionAlignment
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nFileAlignment\t\t"
argument_list|)
expr_stmt|;
name|fprintf_vma
argument_list|(
name|file
argument_list|,
name|i
operator|->
name|FileAlignment
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nMajorOSystemVersion\t%d\n"
argument_list|,
name|i
operator|->
name|MajorOperatingSystemVersion
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"MinorOSystemVersion\t%d\n"
argument_list|,
name|i
operator|->
name|MinorOperatingSystemVersion
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"MajorImageVersion\t%d\n"
argument_list|,
name|i
operator|->
name|MajorImageVersion
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"MinorImageVersion\t%d\n"
argument_list|,
name|i
operator|->
name|MinorImageVersion
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"MajorSubsystemVersion\t%d\n"
argument_list|,
name|i
operator|->
name|MajorSubsystemVersion
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"MinorSubsystemVersion\t%d\n"
argument_list|,
name|i
operator|->
name|MinorSubsystemVersion
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Reserved1\t\t%08lx\n"
argument_list|,
name|i
operator|->
name|Reserved1
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"SizeOfImage\t\t%08lx\n"
argument_list|,
name|i
operator|->
name|SizeOfImage
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"SizeOfHeaders\t\t%08lx\n"
argument_list|,
name|i
operator|->
name|SizeOfHeaders
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"CheckSum\t\t%08lx\n"
argument_list|,
name|i
operator|->
name|CheckSum
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Subsystem\t\t%08x\n"
argument_list|,
name|i
operator|->
name|Subsystem
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"DllCharacteristics\t%08x\n"
argument_list|,
name|i
operator|->
name|DllCharacteristics
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"SizeOfStackReserve\t"
argument_list|)
expr_stmt|;
name|fprintf_vma
argument_list|(
name|file
argument_list|,
name|i
operator|->
name|SizeOfStackReserve
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nSizeOfStackCommit\t"
argument_list|)
expr_stmt|;
name|fprintf_vma
argument_list|(
name|file
argument_list|,
name|i
operator|->
name|SizeOfStackCommit
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nSizeOfHeapReserve\t"
argument_list|)
expr_stmt|;
name|fprintf_vma
argument_list|(
name|file
argument_list|,
name|i
operator|->
name|SizeOfHeapReserve
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nSizeOfHeapCommit\t"
argument_list|)
expr_stmt|;
name|fprintf_vma
argument_list|(
name|file
argument_list|,
name|i
operator|->
name|SizeOfHeapCommit
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nLoaderFlags\t\t%08lx\n"
argument_list|,
name|i
operator|->
name|LoaderFlags
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"NumberOfRvaAndSizes\t%08lx\n"
argument_list|,
name|i
operator|->
name|NumberOfRvaAndSizes
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"\nThe Data Directory\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|IMAGE_NUMBEROF_DIRECTORY_ENTRIES
condition|;
name|j
operator|++
control|)
block|{
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"Entry %1x "
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|fprintf_vma
argument_list|(
name|file
argument_list|,
name|i
operator|->
name|DataDirectory
index|[
name|j
index|]
operator|.
name|VirtualAddress
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|" %08lx "
argument_list|,
name|i
operator|->
name|DataDirectory
index|[
name|j
index|]
operator|.
name|Size
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|file
argument_list|,
literal|"%s\n"
argument_list|,
name|dir_names
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|pe_print_idata
argument_list|(
name|abfd
argument_list|,
name|vfile
argument_list|)
expr_stmt|;
name|pe_print_edata
argument_list|(
name|abfd
argument_list|,
name|vfile
argument_list|)
expr_stmt|;
name|pe_print_pdata
argument_list|(
name|abfd
argument_list|,
name|vfile
argument_list|)
expr_stmt|;
name|pe_print_reloc
argument_list|(
name|abfd
argument_list|,
name|vfile
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_function
specifier|static
name|boolean
name|pe_mkobject
parameter_list|(
name|abfd
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
block|{
name|pe_data_type
modifier|*
name|pe
decl_stmt|;
name|abfd
operator|->
name|tdata
operator|.
name|pe_obj_data
operator|=
operator|(
expr|struct
name|pe_tdata
operator|*
operator|)
name|bfd_zalloc
argument_list|(
name|abfd
argument_list|,
sizeof|sizeof
argument_list|(
name|pe_data_type
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|abfd
operator|->
name|tdata
operator|.
name|pe_obj_data
operator|==
literal|0
condition|)
return|return
name|false
return|;
name|pe
operator|=
name|pe_data
argument_list|(
name|abfd
argument_list|)
expr_stmt|;
name|pe
operator|->
name|coff
operator|.
name|pe
operator|=
literal|1
expr_stmt|;
name|pe
operator|->
name|in_reloc_p
operator|=
name|in_reloc_p
expr_stmt|;
return|return
name|true
return|;
block|}
end_function

begin_comment
comment|/* Create the COFF backend specific information.  */
end_comment

begin_function
specifier|static
name|PTR
name|pe_mkobject_hook
parameter_list|(
name|abfd
parameter_list|,
name|filehdr
parameter_list|,
name|aouthdr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|filehdr
decl_stmt|;
name|PTR
name|aouthdr
decl_stmt|;
block|{
name|struct
name|internal_filehdr
modifier|*
name|internal_f
init|=
operator|(
expr|struct
name|internal_filehdr
operator|*
operator|)
name|filehdr
decl_stmt|;
name|pe_data_type
modifier|*
name|pe
decl_stmt|;
if|if
condition|(
name|pe_mkobject
argument_list|(
name|abfd
argument_list|)
operator|==
name|false
condition|)
return|return
name|NULL
return|;
name|pe
operator|=
name|pe_data
argument_list|(
name|abfd
argument_list|)
expr_stmt|;
name|pe
operator|->
name|coff
operator|.
name|sym_filepos
operator|=
name|internal_f
operator|->
name|f_symptr
expr_stmt|;
comment|/* These members communicate important constants about the symbol      table to GDB's symbol-reading code.  These `constants'      unfortunately vary among coff implementations...  */
name|pe
operator|->
name|coff
operator|.
name|local_n_btmask
operator|=
name|N_BTMASK
expr_stmt|;
name|pe
operator|->
name|coff
operator|.
name|local_n_btshft
operator|=
name|N_BTSHFT
expr_stmt|;
name|pe
operator|->
name|coff
operator|.
name|local_n_tmask
operator|=
name|N_TMASK
expr_stmt|;
name|pe
operator|->
name|coff
operator|.
name|local_n_tshift
operator|=
name|N_TSHIFT
expr_stmt|;
name|pe
operator|->
name|coff
operator|.
name|local_symesz
operator|=
name|SYMESZ
expr_stmt|;
name|pe
operator|->
name|coff
operator|.
name|local_auxesz
operator|=
name|AUXESZ
expr_stmt|;
name|pe
operator|->
name|coff
operator|.
name|local_linesz
operator|=
name|LINESZ
expr_stmt|;
name|obj_raw_syment_count
argument_list|(
name|abfd
argument_list|)
operator|=
name|obj_conv_table_size
argument_list|(
name|abfd
argument_list|)
operator|=
name|internal_f
operator|->
name|f_nsyms
expr_stmt|;
name|pe
operator|->
name|real_flags
operator|=
name|internal_f
operator|->
name|f_flags
expr_stmt|;
ifdef|#
directive|ifdef
name|COFF_IMAGE_WITH_PE
if|if
condition|(
name|aouthdr
condition|)
block|{
name|pe
operator|->
name|pe_opthdr
operator|=
operator|(
operator|(
expr|struct
name|internal_aouthdr
operator|*
operator|)
name|aouthdr
operator|)
operator|->
name|pe
expr_stmt|;
block|}
endif|#
directive|endif
return|return
operator|(
name|PTR
operator|)
name|pe
return|;
block|}
end_function

begin_comment
comment|/* Copy any private info we understand from the input bfd    to the output bfd.  */
end_comment

begin_define
define|#
directive|define
name|coff_bfd_copy_private_bfd_data
value|pe_bfd_copy_private_bfd_data
end_define

begin_function
specifier|static
name|boolean
name|pe_bfd_copy_private_bfd_data
parameter_list|(
name|ibfd
parameter_list|,
name|obfd
parameter_list|)
name|bfd
modifier|*
name|ibfd
decl_stmt|,
decl|*
name|obfd
decl_stmt|;
end_function

begin_block
block|{
comment|/* One day we may try to grok other private data.  */
if|if
condition|(
name|ibfd
operator|->
name|xvec
operator|->
name|flavour
operator|!=
name|bfd_target_coff_flavour
operator|||
name|obfd
operator|->
name|xvec
operator|->
name|flavour
operator|!=
name|bfd_target_coff_flavour
condition|)
return|return
name|true
return|;
name|pe_data
argument_list|(
name|obfd
argument_list|)
operator|->
name|pe_opthdr
operator|=
name|pe_data
argument_list|(
name|ibfd
argument_list|)
operator|->
name|pe_opthdr
expr_stmt|;
return|return
name|true
return|;
block|}
end_block

end_unit

