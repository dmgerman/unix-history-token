begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Generic COFF swapping routines, for BFD.    Copyright 1990, 1991, 1992, 1993, 1995 Free Software Foundation, Inc.    Written by Cygnus Support.  This file is part of BFD, the Binary File Descriptor library.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* This file contains routines used to swap COFF data.  It is a header    file because the details of swapping depend on the details of the    structures used by each COFF implementation.  This is included by    coffcode.h, as well as by the ECOFF backend.     Any file which uses this must first include "coff/internal.h" and    "coff/CPU.h".  The functions will then be correct for that CPU.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|IMAGE_BASE
end_ifndef

begin_define
define|#
directive|define
name|IMAGE_BASE
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|PUTWORD
value|bfd_h_put_32
end_define

begin_define
define|#
directive|define
name|PUTHALF
value|bfd_h_put_16
end_define

begin_define
define|#
directive|define
name|PUTBYTE
value|bfd_h_put_8
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|GET_FCN_LNNOPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_FCN_LNNOPTR
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_32(abfd, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_lnnoptr)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_FCN_ENDNDX
end_ifndef

begin_define
define|#
directive|define
name|GET_FCN_ENDNDX
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_32(abfd, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_endndx)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_FCN_LNNOPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_FCN_LNNOPTR
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|PUTWORD(abfd,  in, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_lnnoptr)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_FCN_ENDNDX
end_ifndef

begin_define
define|#
directive|define
name|PUT_FCN_ENDNDX
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|PUTWORD(abfd, in, (bfd_byte *) ext->x_sym.x_fcnary.x_fcn.x_endndx)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_LNSZ_LNNO
end_ifndef

begin_define
define|#
directive|define
name|GET_LNSZ_LNNO
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *) ext->x_sym.x_misc.x_lnsz.x_lnno)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_LNSZ_SIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_LNSZ_SIZE
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *) ext->x_sym.x_misc.x_lnsz.x_size)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_LNSZ_LNNO
end_ifndef

begin_define
define|#
directive|define
name|PUT_LNSZ_LNNO
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd, in, (bfd_byte *)ext->x_sym.x_misc.x_lnsz.x_lnno)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_LNSZ_SIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_LNSZ_SIZE
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd, in, (bfd_byte*) ext->x_sym.x_misc.x_lnsz.x_size)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCN_SCNLEN
end_ifndef

begin_define
define|#
directive|define
name|GET_SCN_SCNLEN
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_32(abfd, (bfd_byte *) ext->x_scn.x_scnlen)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCN_NRELOC
end_ifndef

begin_define
define|#
directive|define
name|GET_SCN_NRELOC
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *)ext->x_scn.x_nreloc)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCN_NLINNO
end_ifndef

begin_define
define|#
directive|define
name|GET_SCN_NLINNO
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *)ext->x_scn.x_nlinno)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCN_SCNLEN
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCN_SCNLEN
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_32(abfd, in, (bfd_byte *) ext->x_scn.x_scnlen)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCN_NRELOC
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCN_NRELOC
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd, in, (bfd_byte *)ext->x_scn.x_nreloc)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCN_NLINNO
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCN_NLINNO
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd,in, (bfd_byte  *) ext->x_scn.x_nlinno)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_LINENO_LNNO
end_ifndef

begin_define
define|#
directive|define
name|GET_LINENO_LNNO
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_get_16(abfd, (bfd_byte *) (ext->l_lnno));
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_LINENO_LNNO
end_ifndef

begin_define
define|#
directive|define
name|PUT_LINENO_LNNO
parameter_list|(
name|abfd
parameter_list|,
name|val
parameter_list|,
name|ext
parameter_list|)
value|bfd_h_put_16(abfd,val,  (bfd_byte *) (ext->l_lnno));
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* The f_symptr field in the filehdr is sometimes 64 bits.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GET_FILEHDR_SYMPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_FILEHDR_SYMPTR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_FILEHDR_SYMPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_FILEHDR_SYMPTR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Some fields in the aouthdr are sometimes 64 bits.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_TSIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_TSIZE
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_TSIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_TSIZE
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_DSIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_DSIZE
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_DSIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_DSIZE
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_BSIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_BSIZE
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_BSIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_BSIZE
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_ENTRY
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_ENTRY
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_ENTRY
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_ENTRY
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_TEXT_START
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_TEXT_START
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_TEXT_START
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_TEXT_START
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_AOUTHDR_DATA_START
end_ifndef

begin_define
define|#
directive|define
name|GET_AOUTHDR_DATA_START
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_AOUTHDR_DATA_START
end_ifndef

begin_define
define|#
directive|define
name|PUT_AOUTHDR_DATA_START
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Some fields in the scnhdr are sometimes 64 bits.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_PADDR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_PADDR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_PADDR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_PADDR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_VADDR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_VADDR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_VADDR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_VADDR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_SIZE
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_SIZE
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_SIZE
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_SIZE
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_SCNPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_SCNPTR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_SCNPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_SCNPTR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_RELPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_RELPTR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_RELPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_RELPTR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|GET_SCNHDR_LNNOPTR
end_ifndef

begin_define
define|#
directive|define
name|GET_SCNHDR_LNNOPTR
value|bfd_h_get_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|PUT_SCNHDR_LNNOPTR
end_ifndef

begin_define
define|#
directive|define
name|PUT_SCNHDR_LNNOPTR
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|NO_COFF_RELOCS
end_ifndef

begin_function
specifier|static
name|void
name|coff_swap_reloc_in
parameter_list|(
name|abfd
parameter_list|,
name|src
parameter_list|,
name|dst
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|src
decl_stmt|;
name|PTR
name|dst
decl_stmt|;
block|{
name|RELOC
modifier|*
name|reloc_src
init|=
operator|(
name|RELOC
operator|*
operator|)
name|src
decl_stmt|;
name|struct
name|internal_reloc
modifier|*
name|reloc_dst
init|=
operator|(
expr|struct
name|internal_reloc
operator|*
operator|)
name|dst
decl_stmt|;
name|reloc_dst
operator|->
name|r_vaddr
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_src
operator|->
name|r_vaddr
argument_list|)
expr_stmt|;
name|reloc_dst
operator|->
name|r_symndx
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_src
operator|->
name|r_symndx
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|RS6000COFF_C
name|reloc_dst
operator|->
name|r_type
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_type
argument_list|)
expr_stmt|;
name|reloc_dst
operator|->
name|r_size
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_size
argument_list|)
expr_stmt|;
else|#
directive|else
name|reloc_dst
operator|->
name|r_type
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_src
operator|->
name|r_type
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SWAP_IN_RELOC_OFFSET
name|reloc_dst
operator|->
name|r_offset
operator|=
name|SWAP_IN_RELOC_OFFSET
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_src
operator|->
name|r_offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_reloc_out
parameter_list|(
name|abfd
parameter_list|,
name|src
parameter_list|,
name|dst
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|src
decl_stmt|;
name|PTR
name|dst
decl_stmt|;
block|{
name|struct
name|internal_reloc
modifier|*
name|reloc_src
init|=
operator|(
expr|struct
name|internal_reloc
operator|*
operator|)
name|src
decl_stmt|;
name|struct
name|external_reloc
modifier|*
name|reloc_dst
init|=
operator|(
expr|struct
name|external_reloc
operator|*
operator|)
name|dst
decl_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_vaddr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_vaddr
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_symndx
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_symndx
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|RS6000COFF_C
name|bfd_h_put_8
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_type
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_type
argument_list|)
expr_stmt|;
name|bfd_h_put_8
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_size
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_size
argument_list|)
expr_stmt|;
else|#
directive|else
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_type
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_type
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SWAP_OUT_RELOC_OFFSET
name|SWAP_OUT_RELOC_OFFSET
argument_list|(
name|abfd
argument_list|,
name|reloc_src
operator|->
name|r_offset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|reloc_dst
operator|->
name|r_offset
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SWAP_OUT_RELOC_EXTRA
name|SWAP_OUT_RELOC_EXTRA
argument_list|(
name|abfd
argument_list|,
name|reloc_src
argument_list|,
name|reloc_dst
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
sizeof|sizeof
argument_list|(
expr|struct
name|external_reloc
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NO_COFF_RELOCS */
end_comment

begin_function
specifier|static
name|void
name|coff_swap_filehdr_in
parameter_list|(
name|abfd
parameter_list|,
name|src
parameter_list|,
name|dst
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|src
decl_stmt|;
name|PTR
name|dst
decl_stmt|;
block|{
name|FILHDR
modifier|*
name|filehdr_src
init|=
operator|(
name|FILHDR
operator|*
operator|)
name|src
decl_stmt|;
name|struct
name|internal_filehdr
modifier|*
name|filehdr_dst
init|=
operator|(
expr|struct
name|internal_filehdr
operator|*
operator|)
name|dst
decl_stmt|;
name|filehdr_dst
operator|->
name|f_magic
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_magic
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_nscns
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_nscns
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_timdat
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_timdat
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_symptr
operator|=
name|GET_FILEHDR_SYMPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_symptr
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_nsyms
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_nsyms
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_opthdr
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_opthdr
argument_list|)
expr_stmt|;
name|filehdr_dst
operator|->
name|f_flags
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_src
operator|->
name|f_flags
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_filehdr_out
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|in
decl_stmt|;
name|PTR
name|out
decl_stmt|;
block|{
name|struct
name|internal_filehdr
modifier|*
name|filehdr_in
init|=
operator|(
expr|struct
name|internal_filehdr
operator|*
operator|)
name|in
decl_stmt|;
name|FILHDR
modifier|*
name|filehdr_out
init|=
operator|(
name|FILHDR
operator|*
operator|)
name|out
decl_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_magic
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_magic
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_nscns
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_nscns
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_timdat
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_timdat
argument_list|)
expr_stmt|;
name|PUT_FILEHDR_SYMPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_vma
operator|)
name|filehdr_in
operator|->
name|f_symptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_symptr
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_nsyms
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_nsyms
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_opthdr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_opthdr
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|filehdr_in
operator|->
name|f_flags
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|filehdr_out
operator|->
name|f_flags
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|FILHDR
argument_list|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|NO_COFF_SYMBOLS
end_ifndef

begin_function
specifier|static
name|void
name|coff_swap_sym_in
parameter_list|(
name|abfd
parameter_list|,
name|ext1
parameter_list|,
name|in1
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext1
decl_stmt|;
name|PTR
name|in1
decl_stmt|;
block|{
name|SYMENT
modifier|*
name|ext
init|=
operator|(
name|SYMENT
operator|*
operator|)
name|ext1
decl_stmt|;
name|struct
name|internal_syment
modifier|*
name|in
init|=
operator|(
expr|struct
name|internal_syment
operator|*
operator|)
name|in1
decl_stmt|;
if|if
condition|(
name|ext
operator|->
name|e
operator|.
name|e_name
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|in
operator|->
name|_n
operator|.
name|_n_n
operator|.
name|_n_zeroes
operator|=
literal|0
expr_stmt|;
name|in
operator|->
name|_n
operator|.
name|_n_n
operator|.
name|_n_offset
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e
operator|.
name|e
operator|.
name|e_offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|SYMNMLEN
operator|!=
name|E_SYMNMLEN
operator|->
name|Error
operator|,
name|we
name|need
name|to
name|cope
name|with
name|truncating
name|or
name|extending
name|SYMNMLEN
operator|!
expr_stmt|;
else|#
directive|else
name|memcpy
argument_list|(
name|in
operator|->
name|_n
operator|.
name|_n_name
argument_list|,
name|ext
operator|->
name|e
operator|.
name|e_name
argument_list|,
name|SYMNMLEN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|in
operator|->
name|n_value
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_value
argument_list|)
expr_stmt|;
name|in
operator|->
name|n_scnum
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_scnum
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|ext
operator|->
name|e_type
argument_list|)
operator|==
literal|2
condition|)
block|{
name|in
operator|->
name|n_type
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|->
name|n_type
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_type
argument_list|)
expr_stmt|;
block|}
name|in
operator|->
name|n_sclass
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|e_sclass
argument_list|)
expr_stmt|;
name|in
operator|->
name|n_numaux
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|e_numaux
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_sym_out
parameter_list|(
name|abfd
parameter_list|,
name|inp
parameter_list|,
name|extp
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|inp
decl_stmt|;
name|PTR
name|extp
decl_stmt|;
block|{
name|struct
name|internal_syment
modifier|*
name|in
init|=
operator|(
expr|struct
name|internal_syment
operator|*
operator|)
name|inp
decl_stmt|;
name|SYMENT
modifier|*
name|ext
init|=
operator|(
name|SYMENT
operator|*
operator|)
name|extp
decl_stmt|;
if|if
condition|(
name|in
operator|->
name|_n
operator|.
name|_n_name
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
literal|0
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e
operator|.
name|e
operator|.
name|e_zeroes
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|_n
operator|.
name|_n_n
operator|.
name|_n_offset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e
operator|.
name|e
operator|.
name|e_offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|SYMNMLEN
operator|!=
name|E_SYMNMLEN
operator|->
name|Error
operator|,
name|we
name|need
name|to
name|cope
name|with
name|truncating
name|or
name|extending
name|SYMNMLEN
operator|!
expr_stmt|;
else|#
directive|else
name|memcpy
argument_list|(
name|ext
operator|->
name|e
operator|.
name|e_name
argument_list|,
name|in
operator|->
name|_n
operator|.
name|_n_name
argument_list|,
name|SYMNMLEN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_value
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_value
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_scnum
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_scnum
argument_list|)
expr_stmt|;
if|if
condition|(
sizeof|sizeof
argument_list|(
name|ext
operator|->
name|e_type
argument_list|)
operator|==
literal|2
condition|)
block|{
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_type
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_type
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_type
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|e_type
argument_list|)
expr_stmt|;
block|}
name|bfd_h_put_8
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_sclass
argument_list|,
name|ext
operator|->
name|e_sclass
argument_list|)
expr_stmt|;
name|bfd_h_put_8
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|n_numaux
argument_list|,
name|ext
operator|->
name|e_numaux
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|SYMENT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|coff_swap_aux_in
parameter_list|(
name|abfd
parameter_list|,
name|ext1
parameter_list|,
name|type
parameter_list|,
name|class
parameter_list|,
name|indx
parameter_list|,
name|numaux
parameter_list|,
name|in1
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext1
decl_stmt|;
name|int
name|type
decl_stmt|;
name|int
name|class
decl_stmt|;
name|int
name|indx
decl_stmt|;
name|int
name|numaux
decl_stmt|;
name|PTR
name|in1
decl_stmt|;
block|{
name|AUXENT
modifier|*
name|ext
init|=
operator|(
name|AUXENT
operator|*
operator|)
name|ext1
decl_stmt|;
name|union
name|internal_auxent
modifier|*
name|in
init|=
operator|(
expr|union
name|internal_auxent
operator|*
operator|)
name|in1
decl_stmt|;
switch|switch
condition|(
name|class
condition|)
block|{
case|case
name|C_FILE
case|:
if|if
condition|(
name|ext
operator|->
name|x_file
operator|.
name|x_fname
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|in
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_zeroes
operator|=
literal|0
expr_stmt|;
name|in
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_offset
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|FILNMLEN
operator|!=
name|E_FILNMLEN
operator|->
name|Error
operator|,
name|we
name|need
name|to
name|cope
name|with
name|truncating
name|or
name|extending
name|FILNMLEN
operator|!
expr_stmt|;
else|#
directive|else
name|memcpy
argument_list|(
name|in
operator|->
name|x_file
operator|.
name|x_fname
argument_list|,
name|ext
operator|->
name|x_file
operator|.
name|x_fname
argument_list|,
name|FILNMLEN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return;
comment|/* RS/6000 "csect" auxents */
ifdef|#
directive|ifdef
name|RS6000COFF_C
case|case
name|C_EXT
case|:
case|case
name|C_HIDEXT
case|:
if|if
condition|(
name|indx
operator|+
literal|1
operator|==
name|numaux
condition|)
block|{
name|in
operator|->
name|x_csect
operator|.
name|x_scnlen
operator|.
name|l
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_scnlen
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_csect
operator|.
name|x_parmhash
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_parmhash
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_csect
operator|.
name|x_snhash
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_snhash
argument_list|)
expr_stmt|;
comment|/* We don't have to hack bitfields in x_smtyp because it's 	     defined by shifts-and-ands, which are equivalent on all 	     byte orders.  */
name|in
operator|->
name|x_csect
operator|.
name|x_smtyp
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_smtyp
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_csect
operator|.
name|x_smclas
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_smclas
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_csect
operator|.
name|x_stab
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_stab
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_csect
operator|.
name|x_snstab
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_snstab
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
endif|#
directive|endif
case|case
name|C_STAT
case|:
ifdef|#
directive|ifdef
name|C_LEAFSTAT
case|case
name|C_LEAFSTAT
case|:
endif|#
directive|endif
case|case
name|C_HIDDEN
case|:
if|if
condition|(
name|type
operator|==
name|T_NULL
condition|)
block|{
name|in
operator|->
name|x_scn
operator|.
name|x_scnlen
operator|=
name|GET_SCN_SCNLEN
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_scn
operator|.
name|x_nreloc
operator|=
name|GET_SCN_NRELOC
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_scn
operator|.
name|x_nlinno
operator|=
name|GET_SCN_NLINNO
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
name|in
operator|->
name|x_sym
operator|.
name|x_tagndx
operator|.
name|l
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_tagndx
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_TVNDX
name|in
operator|->
name|x_sym
operator|.
name|x_tvndx
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_tvndx
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|class
operator|==
name|C_BLOCK
operator|||
name|ISFCN
argument_list|(
name|type
argument_list|)
operator|||
name|ISTAG
argument_list|(
name|class
argument_list|)
condition|)
block|{
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_fcn
operator|.
name|x_lnnoptr
operator|=
name|GET_FCN_LNNOPTR
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_fcn
operator|.
name|x_endndx
operator|.
name|l
operator|=
name|GET_FCN_ENDNDX
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|DIMNUM
operator|!=
name|E_DIMNUM
error|#
directive|error
error|we need to cope with truncating or extending DIMNUM
endif|#
directive|endif
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|0
index|]
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|1
index|]
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|2
index|]
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|3
index|]
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ISFCN
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_fsize
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_fsize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_lnsz
operator|.
name|x_lnno
operator|=
name|GET_LNSZ_LNNO
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_lnsz
operator|.
name|x_size
operator|=
name|GET_LNSZ_SIZE
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_aux_out
parameter_list|(
name|abfd
parameter_list|,
name|inp
parameter_list|,
name|type
parameter_list|,
name|class
parameter_list|,
name|indx
parameter_list|,
name|numaux
parameter_list|,
name|extp
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|inp
decl_stmt|;
name|int
name|type
decl_stmt|;
name|int
name|class
decl_stmt|;
name|int
name|indx
decl_stmt|;
name|int
name|numaux
decl_stmt|;
name|PTR
name|extp
decl_stmt|;
block|{
name|union
name|internal_auxent
modifier|*
name|in
init|=
operator|(
expr|union
name|internal_auxent
operator|*
operator|)
name|inp
decl_stmt|;
name|AUXENT
modifier|*
name|ext
init|=
operator|(
name|AUXENT
operator|*
operator|)
name|extp
decl_stmt|;
name|memset
argument_list|(
operator|(
name|PTR
operator|)
name|ext
argument_list|,
literal|0
argument_list|,
name|AUXESZ
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|class
condition|)
block|{
case|case
name|C_FILE
case|:
if|if
condition|(
name|in
operator|->
name|x_file
operator|.
name|x_fname
index|[
literal|0
index|]
operator|==
literal|0
condition|)
block|{
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
literal|0
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_zeroes
argument_list|)
expr_stmt|;
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_offset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_file
operator|.
name|x_n
operator|.
name|x_offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|FILNMLEN
operator|!=
name|E_FILNMLEN
operator|->
name|Error
operator|,
name|we
name|need
name|to
name|cope
name|with
name|truncating
name|or
name|extending
name|FILNMLEN
operator|!
expr_stmt|;
else|#
directive|else
name|memcpy
argument_list|(
name|ext
operator|->
name|x_file
operator|.
name|x_fname
argument_list|,
name|in
operator|->
name|x_file
operator|.
name|x_fname
argument_list|,
name|FILNMLEN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
sizeof|sizeof
argument_list|(
name|AUXENT
argument_list|)
return|;
ifdef|#
directive|ifdef
name|RS6000COFF_C
comment|/* RS/6000 "csect" auxents */
case|case
name|C_EXT
case|:
case|case
name|C_HIDEXT
case|:
if|if
condition|(
name|indx
operator|+
literal|1
operator|==
name|numaux
condition|)
block|{
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_csect
operator|.
name|x_scnlen
operator|.
name|l
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_scnlen
argument_list|)
expr_stmt|;
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_csect
operator|.
name|x_parmhash
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_parmhash
argument_list|)
expr_stmt|;
name|PUTHALF
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_csect
operator|.
name|x_snhash
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_snhash
argument_list|)
expr_stmt|;
comment|/* We don't have to hack bitfields in x_smtyp because it's 	   defined by shifts-and-ands, which are equivalent on all 	   byte orders.  */
name|PUTBYTE
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_csect
operator|.
name|x_smtyp
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_smtyp
argument_list|)
expr_stmt|;
name|PUTBYTE
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_csect
operator|.
name|x_smclas
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_smclas
argument_list|)
expr_stmt|;
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_csect
operator|.
name|x_stab
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_stab
argument_list|)
expr_stmt|;
name|PUTHALF
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_csect
operator|.
name|x_snstab
argument_list|,
name|ext
operator|->
name|x_csect
operator|.
name|x_snstab
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|AUXENT
argument_list|)
return|;
block|}
break|break;
endif|#
directive|endif
case|case
name|C_STAT
case|:
ifdef|#
directive|ifdef
name|C_LEAFSTAT
case|case
name|C_LEAFSTAT
case|:
endif|#
directive|endif
case|case
name|C_HIDDEN
case|:
if|if
condition|(
name|type
operator|==
name|T_NULL
condition|)
block|{
name|PUT_SCN_SCNLEN
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_scn
operator|.
name|x_scnlen
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|PUT_SCN_NRELOC
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_scn
operator|.
name|x_nreloc
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|PUT_SCN_NLINNO
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_scn
operator|.
name|x_nlinno
argument_list|,
name|ext
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
name|AUXENT
argument_list|)
return|;
block|}
break|break;
block|}
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_tagndx
operator|.
name|l
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_tagndx
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|NO_TVNDX
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_tvndx
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_tvndx
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|class
operator|==
name|C_BLOCK
operator|||
name|ISFCN
argument_list|(
name|type
argument_list|)
operator|||
name|ISTAG
argument_list|(
name|class
argument_list|)
condition|)
block|{
name|PUT_FCN_LNNOPTR
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_fcn
operator|.
name|x_lnnoptr
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|PUT_FCN_ENDNDX
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_fcn
operator|.
name|x_endndx
operator|.
name|l
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|DIMNUM
operator|!=
name|E_DIMNUM
error|#
directive|error
error|we need to cope with truncating or extending DIMNUM
endif|#
directive|endif
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|0
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|1
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|2
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|3
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_fcnary
operator|.
name|x_ary
operator|.
name|x_dimen
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ISFCN
argument_list|(
name|type
argument_list|)
condition|)
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_fsize
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_fsize
argument_list|)
expr_stmt|;
else|else
block|{
name|PUT_LNSZ_LNNO
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_lnsz
operator|.
name|x_lnno
argument_list|,
name|ext
argument_list|)
expr_stmt|;
name|PUT_LNSZ_SIZE
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|x_sym
operator|.
name|x_misc
operator|.
name|x_lnsz
operator|.
name|x_size
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
return|return
sizeof|sizeof
argument_list|(
name|AUXENT
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NO_COFF_SYMBOLS */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NO_COFF_LINENOS
end_ifndef

begin_function
specifier|static
name|void
name|coff_swap_lineno_in
parameter_list|(
name|abfd
parameter_list|,
name|ext1
parameter_list|,
name|in1
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext1
decl_stmt|;
name|PTR
name|in1
decl_stmt|;
block|{
name|LINENO
modifier|*
name|ext
init|=
operator|(
name|LINENO
operator|*
operator|)
name|ext1
decl_stmt|;
name|struct
name|internal_lineno
modifier|*
name|in
init|=
operator|(
expr|struct
name|internal_lineno
operator|*
operator|)
name|in1
decl_stmt|;
name|in
operator|->
name|l_addr
operator|.
name|l_symndx
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|l_addr
operator|.
name|l_symndx
argument_list|)
expr_stmt|;
name|in
operator|->
name|l_lnno
operator|=
name|GET_LINENO_LNNO
argument_list|(
name|abfd
argument_list|,
name|ext
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_lineno_out
parameter_list|(
name|abfd
parameter_list|,
name|inp
parameter_list|,
name|outp
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|inp
decl_stmt|;
name|PTR
name|outp
decl_stmt|;
block|{
name|struct
name|internal_lineno
modifier|*
name|in
init|=
operator|(
expr|struct
name|internal_lineno
operator|*
operator|)
name|inp
decl_stmt|;
name|struct
name|external_lineno
modifier|*
name|ext
init|=
operator|(
expr|struct
name|external_lineno
operator|*
operator|)
name|outp
decl_stmt|;
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|l_addr
operator|.
name|l_symndx
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|l_addr
operator|.
name|l_symndx
argument_list|)
expr_stmt|;
name|PUT_LINENO_LNNO
argument_list|(
name|abfd
argument_list|,
name|in
operator|->
name|l_lnno
argument_list|,
name|ext
argument_list|)
expr_stmt|;
return|return
sizeof|sizeof
argument_list|(
expr|struct
name|external_lineno
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NO_COFF_LINENOS */
end_comment

begin_function
specifier|static
name|void
name|coff_swap_aouthdr_in
parameter_list|(
name|abfd
parameter_list|,
name|aouthdr_ext1
parameter_list|,
name|aouthdr_int1
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|aouthdr_ext1
decl_stmt|;
name|PTR
name|aouthdr_int1
decl_stmt|;
block|{
name|AOUTHDR
modifier|*
name|aouthdr_ext
init|=
operator|(
name|AOUTHDR
operator|*
operator|)
name|aouthdr_ext1
decl_stmt|;
name|struct
name|internal_aouthdr
modifier|*
name|aouthdr_int
init|=
operator|(
expr|struct
name|internal_aouthdr
operator|*
operator|)
name|aouthdr_int1
decl_stmt|;
name|aouthdr_int
operator|->
name|magic
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|magic
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|vstamp
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|vstamp
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|tsize
operator|=
name|GET_AOUTHDR_TSIZE
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|tsize
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|dsize
operator|=
name|GET_AOUTHDR_DSIZE
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|dsize
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|bsize
operator|=
name|GET_AOUTHDR_BSIZE
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|bsize
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|entry
operator|=
name|GET_AOUTHDR_ENTRY
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|entry
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|text_start
operator|=
name|GET_AOUTHDR_TEXT_START
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|text_start
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|data_start
operator|=
name|GET_AOUTHDR_DATA_START
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|data_start
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|I960
name|aouthdr_int
operator|->
name|tagentries
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|tagentries
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|APOLLO_M68
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_int
operator|->
name|o_inlib
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|o_inlib
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_int
operator|->
name|o_sri
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|o_sri
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_int
operator|->
name|vid
index|[
literal|0
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|vid
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_int
operator|->
name|vid
index|[
literal|1
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_ext
operator|->
name|vid
operator|+
literal|4
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|RS6000COFF_C
name|aouthdr_int
operator|->
name|o_toc
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_toc
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_snentry
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_snentry
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_sntext
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_sntext
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_sndata
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_sndata
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_sntoc
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_sntoc
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_snloader
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_snloader
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_snbss
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_snbss
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_algntext
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_algntext
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_algndata
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_algndata
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_modtype
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_modtype
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_cputype
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_cputype
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_maxstack
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_maxstack
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|o_maxdata
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|o_maxdata
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|MIPSECOFF
name|aouthdr_int
operator|->
name|bss_start
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|bss_start
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|gp_value
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|gp_value
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|gprmask
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|gprmask
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|cprmask
index|[
literal|0
index|]
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|cprmask
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|cprmask
index|[
literal|1
index|]
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|cprmask
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|cprmask
index|[
literal|2
index|]
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|cprmask
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|cprmask
index|[
literal|3
index|]
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|cprmask
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|ALPHAECOFF
name|aouthdr_int
operator|->
name|bss_start
operator|=
name|bfd_h_get_64
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|bss_start
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|gp_value
operator|=
name|bfd_h_get_64
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|gp_value
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|gprmask
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|gprmask
argument_list|)
expr_stmt|;
name|aouthdr_int
operator|->
name|fprmask
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_ext
operator|->
name|fprmask
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_aouthdr_out
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|in
decl_stmt|;
name|PTR
name|out
decl_stmt|;
block|{
name|struct
name|internal_aouthdr
modifier|*
name|aouthdr_in
init|=
operator|(
expr|struct
name|internal_aouthdr
operator|*
operator|)
name|in
decl_stmt|;
name|AOUTHDR
modifier|*
name|aouthdr_out
init|=
operator|(
name|AOUTHDR
operator|*
operator|)
name|out
decl_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|magic
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|magic
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|vstamp
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|vstamp
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_TSIZE
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|tsize
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|tsize
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_DSIZE
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|dsize
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|dsize
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_BSIZE
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|bsize
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|bsize
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_ENTRY
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|entry
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|entry
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_TEXT_START
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|text_start
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|text_start
argument_list|)
expr_stmt|;
name|PUT_AOUTHDR_DATA_START
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|data_start
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|data_start
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|I960
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|tagentries
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|tagentries
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|RS6000COFF_C
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_toc
argument_list|,
name|aouthdr_out
operator|->
name|o_toc
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_snentry
argument_list|,
name|aouthdr_out
operator|->
name|o_snentry
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_sntext
argument_list|,
name|aouthdr_out
operator|->
name|o_sntext
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_sndata
argument_list|,
name|aouthdr_out
operator|->
name|o_sndata
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_sntoc
argument_list|,
name|aouthdr_out
operator|->
name|o_sntoc
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_snloader
argument_list|,
name|aouthdr_out
operator|->
name|o_snloader
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_snbss
argument_list|,
name|aouthdr_out
operator|->
name|o_snbss
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_algntext
argument_list|,
name|aouthdr_out
operator|->
name|o_algntext
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_algndata
argument_list|,
name|aouthdr_out
operator|->
name|o_algndata
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_modtype
argument_list|,
name|aouthdr_out
operator|->
name|o_modtype
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_cputype
argument_list|,
name|aouthdr_out
operator|->
name|o_cputype
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_maxstack
argument_list|,
name|aouthdr_out
operator|->
name|o_maxstack
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|o_maxdata
argument_list|,
name|aouthdr_out
operator|->
name|o_maxdata
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|aouthdr_out
operator|->
name|o_resv2
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
name|aouthdr_out
operator|->
name|o_resv2
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|MIPSECOFF
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|bss_start
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|bss_start
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|gp_value
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|gp_value
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|gprmask
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|gprmask
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|cprmask
index|[
literal|0
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|cprmask
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|cprmask
index|[
literal|1
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|cprmask
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|cprmask
index|[
literal|2
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|cprmask
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|cprmask
index|[
literal|3
index|]
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|cprmask
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|ALPHAECOFF
comment|/* FIXME: What does bldrev mean?  */
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_vma
operator|)
literal|2
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|bldrev
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_vma
operator|)
literal|0
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|padding
argument_list|)
expr_stmt|;
name|bfd_h_put_64
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|bss_start
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|bss_start
argument_list|)
expr_stmt|;
name|bfd_h_put_64
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|gp_value
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|gp_value
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|gprmask
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|gprmask
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|aouthdr_in
operator|->
name|fprmask
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|aouthdr_out
operator|->
name|fprmask
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
sizeof|sizeof
argument_list|(
name|AOUTHDR
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|coff_swap_scnhdr_in
parameter_list|(
name|abfd
parameter_list|,
name|ext
parameter_list|,
name|in
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext
decl_stmt|;
name|PTR
name|in
decl_stmt|;
block|{
name|SCNHDR
modifier|*
name|scnhdr_ext
init|=
operator|(
name|SCNHDR
operator|*
operator|)
name|ext
decl_stmt|;
name|struct
name|internal_scnhdr
modifier|*
name|scnhdr_int
init|=
operator|(
expr|struct
name|internal_scnhdr
operator|*
operator|)
name|in
decl_stmt|;
name|memcpy
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|,
name|scnhdr_ext
operator|->
name|s_name
argument_list|,
sizeof|sizeof
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|)
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_vaddr
operator|=
name|GET_SCNHDR_VADDR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_vaddr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_paddr
operator|=
name|GET_SCNHDR_PADDR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_paddr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_size
operator|=
name|GET_SCNHDR_SIZE
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_size
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_scnptr
operator|=
name|GET_SCNHDR_SCNPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_scnptr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_relptr
operator|=
name|GET_SCNHDR_RELPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_relptr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_lnnoptr
operator|=
name|GET_SCNHDR_LNNOPTR
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_lnnoptr
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_flags
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_flags
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|M88
argument_list|)
name|scnhdr_int
operator|->
name|s_nreloc
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_nlnno
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
else|#
directive|else
name|scnhdr_int
operator|->
name|s_nreloc
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
name|scnhdr_int
operator|->
name|s_nlnno
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|I960
name|scnhdr_int
operator|->
name|s_align
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_align
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_function
specifier|static
name|unsigned
name|int
name|coff_swap_scnhdr_out
parameter_list|(
name|abfd
parameter_list|,
name|in
parameter_list|,
name|out
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|in
decl_stmt|;
name|PTR
name|out
decl_stmt|;
block|{
name|struct
name|internal_scnhdr
modifier|*
name|scnhdr_int
init|=
operator|(
expr|struct
name|internal_scnhdr
operator|*
operator|)
name|in
decl_stmt|;
name|SCNHDR
modifier|*
name|scnhdr_ext
init|=
operator|(
name|SCNHDR
operator|*
operator|)
name|out
decl_stmt|;
name|unsigned
name|int
name|ret
init|=
sizeof|sizeof
argument_list|(
name|SCNHDR
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|scnhdr_ext
operator|->
name|s_name
argument_list|,
name|scnhdr_int
operator|->
name|s_name
argument_list|,
sizeof|sizeof
argument_list|(
name|scnhdr_int
operator|->
name|s_name
argument_list|)
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_VADDR
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_vaddr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_vaddr
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_PADDR
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_paddr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_paddr
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_SIZE
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_size
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_size
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_SCNPTR
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_scnptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_scnptr
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_RELPTR
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_relptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_relptr
argument_list|)
expr_stmt|;
name|PUT_SCNHDR_LNNOPTR
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_lnnoptr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_lnnoptr
argument_list|)
expr_stmt|;
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_flags
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_flags
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|M88
argument_list|)
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_nlnno
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_nreloc
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|scnhdr_int
operator|->
name|s_nlnno
operator|<=
literal|0xffff
condition|)
name|PUTHALF
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_nlnno
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
else|else
block|{
call|(
modifier|*
name|_bfd_error_handler
call|)
argument_list|(
literal|"%s: line number overflow: 0x%lx> 0xffff"
argument_list|,
name|bfd_get_filename
argument_list|(
name|abfd
argument_list|)
argument_list|,
name|scnhdr_int
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
name|bfd_set_error
argument_list|(
name|bfd_error_file_truncated
argument_list|)
expr_stmt|;
name|PUTHALF
argument_list|(
name|abfd
argument_list|,
literal|0xffff
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nlnno
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|scnhdr_int
operator|->
name|s_nreloc
operator|<=
literal|0xffff
condition|)
name|PUTHALF
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_nreloc
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
else|else
block|{
call|(
modifier|*
name|_bfd_error_handler
call|)
argument_list|(
literal|"%s: reloc overflow: 0x%lx> 0xffff"
argument_list|,
name|bfd_get_filename
argument_list|(
name|abfd
argument_list|)
argument_list|,
name|scnhdr_int
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
name|bfd_set_error
argument_list|(
name|bfd_error_file_truncated
argument_list|)
expr_stmt|;
name|PUTHALF
argument_list|(
name|abfd
argument_list|,
literal|0xffff
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_nreloc
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|0
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|I960
argument_list|)
name|PUTWORD
argument_list|(
name|abfd
argument_list|,
name|scnhdr_int
operator|->
name|s_align
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|scnhdr_ext
operator|->
name|s_align
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function

end_unit

