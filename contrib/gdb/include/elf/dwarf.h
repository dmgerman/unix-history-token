begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Declarations and definitions of codes relating to the DWARF symbolic    debugging information format.     Written by Ron Guilmette (rfg@ncd.com)  Copyright (C) 1992 Free Software Foundation, Inc.  This file is part of GNU CC.  GNU CC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GNU CC; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* This file is derived from the DWARF specification (a public document)    Revision 1.0.1 (April 8, 1992) developed by the UNIX International    Programming Languages Special Interest Group (UI/PLSIG) and distributed    by UNIX International.  Copies of this specification are available from    UNIX International, 20 Waterview Boulevard, Parsippany, NJ, 07054. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ELF_DWARF_H
end_ifndef

begin_define
define|#
directive|define
name|_ELF_DWARF_H
end_define

begin_comment
comment|/* Tag names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_tag
block|{
name|TAG_padding
init|=
literal|0x0000
block|,
name|TAG_array_type
init|=
literal|0x0001
block|,
name|TAG_class_type
init|=
literal|0x0002
block|,
name|TAG_entry_point
init|=
literal|0x0003
block|,
name|TAG_enumeration_type
init|=
literal|0x0004
block|,
name|TAG_formal_parameter
init|=
literal|0x0005
block|,
name|TAG_global_subroutine
init|=
literal|0x0006
block|,
name|TAG_global_variable
init|=
literal|0x0007
block|,
comment|/* 0x0008 -- reserved */
comment|/* 0x0009 -- reserved */
name|TAG_label
init|=
literal|0x000a
block|,
name|TAG_lexical_block
init|=
literal|0x000b
block|,
name|TAG_local_variable
init|=
literal|0x000c
block|,
name|TAG_member
init|=
literal|0x000d
block|,
comment|/* 0x000e -- reserved */
name|TAG_pointer_type
init|=
literal|0x000f
block|,
name|TAG_reference_type
init|=
literal|0x0010
block|,
name|TAG_compile_unit
init|=
literal|0x0011
block|,
name|TAG_string_type
init|=
literal|0x0012
block|,
name|TAG_structure_type
init|=
literal|0x0013
block|,
name|TAG_subroutine
init|=
literal|0x0014
block|,
name|TAG_subroutine_type
init|=
literal|0x0015
block|,
name|TAG_typedef
init|=
literal|0x0016
block|,
name|TAG_union_type
init|=
literal|0x0017
block|,
name|TAG_unspecified_parameters
init|=
literal|0x0018
block|,
name|TAG_variant
init|=
literal|0x0019
block|,
name|TAG_common_block
init|=
literal|0x001a
block|,
name|TAG_common_inclusion
init|=
literal|0x001b
block|,
name|TAG_inheritance
init|=
literal|0x001c
block|,
name|TAG_inlined_subroutine
init|=
literal|0x001d
block|,
name|TAG_module
init|=
literal|0x001e
block|,
name|TAG_ptr_to_member_type
init|=
literal|0x001f
block|,
name|TAG_set_type
init|=
literal|0x0020
block|,
name|TAG_subrange_type
init|=
literal|0x0021
block|,
name|TAG_with_stmt
init|=
literal|0x0022
block|,
comment|/* GNU extensions */
name|TAG_format_label
init|=
literal|0x8000
block|,
comment|/* for FORTRAN 77 and Fortran 90 */
name|TAG_namelist
init|=
literal|0x8001
block|,
comment|/* For Fortran 90 */
name|TAG_function_template
init|=
literal|0x8002
block|,
comment|/* for C++ */
name|TAG_class_template
init|=
literal|0x8003
comment|/* for C++ */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|TAG_lo_user
value|0x8000
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|TAG_hi_user
value|0xffff
end_define

begin_comment
comment|/* implementation-defined range end */
end_comment

begin_define
define|#
directive|define
name|TAG_source_file
value|TAG_compile_unit
end_define

begin_comment
comment|/* for backward compatibility */
end_comment

begin_comment
comment|/* Form names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_form
block|{
name|FORM_ADDR
init|=
literal|0x1
block|,
name|FORM_REF
init|=
literal|0x2
block|,
name|FORM_BLOCK2
init|=
literal|0x3
block|,
name|FORM_BLOCK4
init|=
literal|0x4
block|,
name|FORM_DATA2
init|=
literal|0x5
block|,
name|FORM_DATA4
init|=
literal|0x6
block|,
name|FORM_DATA8
init|=
literal|0x7
block|,
name|FORM_STRING
init|=
literal|0x8
block|}
enum|;
end_enum

begin_comment
comment|/* Attribute names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_attribute
block|{
name|AT_sibling
init|=
operator|(
literal|0x0010
operator||
name|FORM_REF
operator|)
block|,
name|AT_location
init|=
operator|(
literal|0x0020
operator||
name|FORM_BLOCK2
operator|)
block|,
name|AT_name
init|=
operator|(
literal|0x0030
operator||
name|FORM_STRING
operator|)
block|,
name|AT_fund_type
init|=
operator|(
literal|0x0050
operator||
name|FORM_DATA2
operator|)
block|,
name|AT_mod_fund_type
init|=
operator|(
literal|0x0060
operator||
name|FORM_BLOCK2
operator|)
block|,
name|AT_user_def_type
init|=
operator|(
literal|0x0070
operator||
name|FORM_REF
operator|)
block|,
name|AT_mod_u_d_type
init|=
operator|(
literal|0x0080
operator||
name|FORM_BLOCK2
operator|)
block|,
name|AT_ordering
init|=
operator|(
literal|0x0090
operator||
name|FORM_DATA2
operator|)
block|,
name|AT_subscr_data
init|=
operator|(
literal|0x00a0
operator||
name|FORM_BLOCK2
operator|)
block|,
name|AT_byte_size
init|=
operator|(
literal|0x00b0
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_bit_offset
init|=
operator|(
literal|0x00c0
operator||
name|FORM_DATA2
operator|)
block|,
name|AT_bit_size
init|=
operator|(
literal|0x00d0
operator||
name|FORM_DATA4
operator|)
block|,
comment|/* (0x00e0|FORM_xxxx) -- reserved */
name|AT_element_list
init|=
operator|(
literal|0x00f0
operator||
name|FORM_BLOCK4
operator|)
block|,
name|AT_stmt_list
init|=
operator|(
literal|0x0100
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_low_pc
init|=
operator|(
literal|0x0110
operator||
name|FORM_ADDR
operator|)
block|,
name|AT_high_pc
init|=
operator|(
literal|0x0120
operator||
name|FORM_ADDR
operator|)
block|,
name|AT_language
init|=
operator|(
literal|0x0130
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_member
init|=
operator|(
literal|0x0140
operator||
name|FORM_REF
operator|)
block|,
name|AT_discr
init|=
operator|(
literal|0x0150
operator||
name|FORM_REF
operator|)
block|,
name|AT_discr_value
init|=
operator|(
literal|0x0160
operator||
name|FORM_BLOCK2
operator|)
block|,
comment|/* (0x0170|FORM_xxxx) -- reserved */
comment|/* (0x0180|FORM_xxxx) -- reserved */
name|AT_string_length
init|=
operator|(
literal|0x0190
operator||
name|FORM_BLOCK2
operator|)
block|,
name|AT_common_reference
init|=
operator|(
literal|0x01a0
operator||
name|FORM_REF
operator|)
block|,
name|AT_comp_dir
init|=
operator|(
literal|0x01b0
operator||
name|FORM_STRING
operator|)
block|,
name|AT_const_value_string
init|=
operator|(
literal|0x01c0
operator||
name|FORM_STRING
operator|)
block|,
name|AT_const_value_data2
init|=
operator|(
literal|0x01c0
operator||
name|FORM_DATA2
operator|)
block|,
name|AT_const_value_data4
init|=
operator|(
literal|0x01c0
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_const_value_data8
init|=
operator|(
literal|0x01c0
operator||
name|FORM_DATA8
operator|)
block|,
name|AT_const_value_block2
init|=
operator|(
literal|0x01c0
operator||
name|FORM_BLOCK2
operator|)
block|,
name|AT_const_value_block4
init|=
operator|(
literal|0x01c0
operator||
name|FORM_BLOCK4
operator|)
block|,
name|AT_containing_type
init|=
operator|(
literal|0x01d0
operator||
name|FORM_REF
operator|)
block|,
name|AT_default_value_addr
init|=
operator|(
literal|0x01e0
operator||
name|FORM_ADDR
operator|)
block|,
name|AT_default_value_data2
init|=
operator|(
literal|0x01e0
operator||
name|FORM_DATA2
operator|)
block|,
name|AT_default_value_data4
init|=
operator|(
literal|0x01e0
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_default_value_data8
init|=
operator|(
literal|0x01e0
operator||
name|FORM_DATA8
operator|)
block|,
name|AT_default_value_string
init|=
operator|(
literal|0x01e0
operator||
name|FORM_STRING
operator|)
block|,
name|AT_friends
init|=
operator|(
literal|0x01f0
operator||
name|FORM_BLOCK2
operator|)
block|,
name|AT_inline
init|=
operator|(
literal|0x0200
operator||
name|FORM_STRING
operator|)
block|,
name|AT_is_optional
init|=
operator|(
literal|0x0210
operator||
name|FORM_STRING
operator|)
block|,
name|AT_lower_bound_ref
init|=
operator|(
literal|0x0220
operator||
name|FORM_REF
operator|)
block|,
name|AT_lower_bound_data2
init|=
operator|(
literal|0x0220
operator||
name|FORM_DATA2
operator|)
block|,
name|AT_lower_bound_data4
init|=
operator|(
literal|0x0220
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_lower_bound_data8
init|=
operator|(
literal|0x0220
operator||
name|FORM_DATA8
operator|)
block|,
name|AT_private
init|=
operator|(
literal|0x0240
operator||
name|FORM_STRING
operator|)
block|,
name|AT_producer
init|=
operator|(
literal|0x0250
operator||
name|FORM_STRING
operator|)
block|,
name|AT_program
init|=
operator|(
literal|0x0230
operator||
name|FORM_STRING
operator|)
block|,
name|AT_protected
init|=
operator|(
literal|0x0260
operator||
name|FORM_STRING
operator|)
block|,
name|AT_prototyped
init|=
operator|(
literal|0x0270
operator||
name|FORM_STRING
operator|)
block|,
name|AT_public
init|=
operator|(
literal|0x0280
operator||
name|FORM_STRING
operator|)
block|,
name|AT_pure_virtual
init|=
operator|(
literal|0x0290
operator||
name|FORM_STRING
operator|)
block|,
name|AT_return_addr
init|=
operator|(
literal|0x02a0
operator||
name|FORM_BLOCK2
operator|)
block|,
name|AT_abstract_origin
init|=
operator|(
literal|0x02b0
operator||
name|FORM_REF
operator|)
block|,
name|AT_start_scope
init|=
operator|(
literal|0x02c0
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_stride_size
init|=
operator|(
literal|0x02e0
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_upper_bound_ref
init|=
operator|(
literal|0x02f0
operator||
name|FORM_REF
operator|)
block|,
name|AT_upper_bound_data2
init|=
operator|(
literal|0x02f0
operator||
name|FORM_DATA2
operator|)
block|,
name|AT_upper_bound_data4
init|=
operator|(
literal|0x02f0
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_upper_bound_data8
init|=
operator|(
literal|0x02f0
operator||
name|FORM_DATA8
operator|)
block|,
name|AT_virtual
init|=
operator|(
literal|0x0300
operator||
name|FORM_STRING
operator|)
block|,
comment|/* GNU extensions.  */
name|AT_sf_names
init|=
operator|(
literal|0x8000
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_src_info
init|=
operator|(
literal|0x8010
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_mac_info
init|=
operator|(
literal|0x8020
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_src_coords
init|=
operator|(
literal|0x8030
operator||
name|FORM_DATA4
operator|)
block|,
name|AT_body_begin
init|=
operator|(
literal|0x8040
operator||
name|FORM_ADDR
operator|)
block|,
name|AT_body_end
init|=
operator|(
literal|0x8050
operator||
name|FORM_ADDR
operator|)
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|AT_lo_user
value|0x8000
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|AT_hi_user
value|0xffff
end_define

begin_comment
comment|/* implementation-defined range end */
end_comment

begin_comment
comment|/* Location atom names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_location_atom
block|{
name|OP_REG
init|=
literal|0x01
block|,
name|OP_BASEREG
init|=
literal|0x02
block|,
name|OP_ADDR
init|=
literal|0x03
block|,
name|OP_CONST
init|=
literal|0x04
block|,
name|OP_DEREF2
init|=
literal|0x05
block|,
name|OP_DEREF4
init|=
literal|0x06
block|,
name|OP_ADD
init|=
literal|0x07
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|OP_LO_USER
value|0x80
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|OP_HI_USER
value|0xff
end_define

begin_comment
comment|/* implementation-defined range end */
end_comment

begin_comment
comment|/* Fundamental type names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_fundamental_type
block|{
name|FT_char
init|=
literal|0x0001
block|,
name|FT_signed_char
init|=
literal|0x0002
block|,
name|FT_unsigned_char
init|=
literal|0x0003
block|,
name|FT_short
init|=
literal|0x0004
block|,
name|FT_signed_short
init|=
literal|0x0005
block|,
name|FT_unsigned_short
init|=
literal|0x0006
block|,
name|FT_integer
init|=
literal|0x0007
block|,
name|FT_signed_integer
init|=
literal|0x0008
block|,
name|FT_unsigned_integer
init|=
literal|0x0009
block|,
name|FT_long
init|=
literal|0x000a
block|,
name|FT_signed_long
init|=
literal|0x000b
block|,
name|FT_unsigned_long
init|=
literal|0x000c
block|,
name|FT_pointer
init|=
literal|0x000d
block|,
comment|/* an alias for (void *) */
name|FT_float
init|=
literal|0x000e
block|,
name|FT_dbl_prec_float
init|=
literal|0x000f
block|,
name|FT_ext_prec_float
init|=
literal|0x0010
block|,
comment|/* breaks "classic" svr4 SDB */
name|FT_complex
init|=
literal|0x0011
block|,
comment|/* breaks "classic" svr4 SDB */
name|FT_dbl_prec_complex
init|=
literal|0x0012
block|,
comment|/* breaks "classic" svr4 SDB */
comment|/* 0x0013 -- reserved */
name|FT_void
init|=
literal|0x0014
block|,
name|FT_boolean
init|=
literal|0x0015
block|,
comment|/* breaks "classic" svr4 SDB */
name|FT_ext_prec_complex
init|=
literal|0x0016
block|,
comment|/* breaks "classic" svr4 SDB */
name|FT_label
init|=
literal|0x0017
block|,
comment|/* GNU extensions        The low order byte must indicate the size (in bytes) for the type.        All of these types will probably break "classic" svr4 SDB */
name|FT_long_long
init|=
literal|0x8008
block|,
name|FT_signed_long_long
init|=
literal|0x8108
block|,
name|FT_unsigned_long_long
init|=
literal|0x8208
block|,
name|FT_int8
init|=
literal|0x9001
block|,
name|FT_signed_int8
init|=
literal|0x9101
block|,
name|FT_unsigned_int8
init|=
literal|0x9201
block|,
name|FT_int16
init|=
literal|0x9302
block|,
name|FT_signed_int16
init|=
literal|0x9402
block|,
name|FT_unsigned_int16
init|=
literal|0x9502
block|,
name|FT_int32
init|=
literal|0x9604
block|,
name|FT_signed_int32
init|=
literal|0x9704
block|,
name|FT_unsigned_int32
init|=
literal|0x9804
block|,
name|FT_int64
init|=
literal|0x9908
block|,
name|FT_signed_int64
init|=
literal|0x9a08
block|,
name|FT_unsigned_int64
init|=
literal|0x9b08
block|,
name|FT_real32
init|=
literal|0xa004
block|,
name|FT_real64
init|=
literal|0xa108
block|,
name|FT_real96
init|=
literal|0xa20c
block|,
name|FT_real128
init|=
literal|0xa310
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|FT_lo_user
value|0x8000
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|FT_hi_user
value|0xffff
end_define

begin_comment
comment|/* implementation defined range end */
end_comment

begin_comment
comment|/* Type modifier names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_type_modifier
block|{
name|MOD_pointer_to
init|=
literal|0x01
block|,
name|MOD_reference_to
init|=
literal|0x02
block|,
name|MOD_const
init|=
literal|0x03
block|,
name|MOD_volatile
init|=
literal|0x04
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|MOD_lo_user
value|0x80
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|MOD_hi_user
value|0xff
end_define

begin_comment
comment|/* implementation-defined range end */
end_comment

begin_comment
comment|/* Array ordering names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_array_dim_ordering
block|{
name|ORD_row_major
init|=
literal|0
block|,
name|ORD_col_major
init|=
literal|1
block|}
enum|;
end_enum

begin_comment
comment|/* Array subscript format names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_subscr_data_formats
block|{
name|FMT_FT_C_C
init|=
literal|0x0
block|,
name|FMT_FT_C_X
init|=
literal|0x1
block|,
name|FMT_FT_X_C
init|=
literal|0x2
block|,
name|FMT_FT_X_X
init|=
literal|0x3
block|,
name|FMT_UT_C_C
init|=
literal|0x4
block|,
name|FMT_UT_C_X
init|=
literal|0x5
block|,
name|FMT_UT_X_C
init|=
literal|0x6
block|,
name|FMT_UT_X_X
init|=
literal|0x7
block|,
name|FMT_ET
init|=
literal|0x8
block|}
enum|;
end_enum

begin_comment
comment|/* Derived from above for ease of use.  */
end_comment

begin_define
define|#
directive|define
name|FMT_CODE
parameter_list|(
name|_FUNDAMENTAL_TYPE_P
parameter_list|,
name|_UB_CONST_P
parameter_list|,
name|_LB_CONST_P
parameter_list|)
define|\
value|(((_FUNDAMENTAL_TYPE_P) ? 0 : 4)	\   | ((_UB_CONST_P) ? 0 : 2)		\   | ((_LB_CONST_P) ? 0 : 1))
end_define

begin_comment
comment|/* Source language names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_source_language
block|{
name|LANG_C89
init|=
literal|0x00000001
block|,
name|LANG_C
init|=
literal|0x00000002
block|,
name|LANG_ADA83
init|=
literal|0x00000003
block|,
name|LANG_C_PLUS_PLUS
init|=
literal|0x00000004
block|,
name|LANG_COBOL74
init|=
literal|0x00000005
block|,
name|LANG_COBOL85
init|=
literal|0x00000006
block|,
name|LANG_FORTRAN77
init|=
literal|0x00000007
block|,
name|LANG_FORTRAN90
init|=
literal|0x00000008
block|,
name|LANG_PASCAL83
init|=
literal|0x00000009
block|,
name|LANG_MODULA2
init|=
literal|0x0000000a
block|,
comment|/* GNU extensions */
name|LANG_CHILL
init|=
literal|0x00009af3
comment|/* random value for GNU Chill */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|LANG_lo_user
value|0x00008000
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|LANG_hi_user
value|0x0000ffff
end_define

begin_comment
comment|/* implementation-defined range end */
end_comment

begin_comment
comment|/* Names and codes for GNU "macinfo" extension.  */
end_comment

begin_enum
enum|enum
name|dwarf_macinfo_record_type
block|{
name|MACINFO_start
init|=
literal|'s'
block|,
name|MACINFO_resume
init|=
literal|'r'
block|,
name|MACINFO_define
init|=
literal|'d'
block|,
name|MACINFO_undef
init|=
literal|'u'
block|}
enum|;
end_enum

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ELF_DWARF_H */
end_comment

end_unit

