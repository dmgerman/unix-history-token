begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* NLM (NetWare Loadable Module) support for BFD.    Copyright (C) 1993 Free Software Foundation, Inc.     Written by Fred Fish @ Cygnus Support  This file is part of BFD, the Binary File Descriptor library.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* This file is part of NLM support for BFD, and contains the portions    that describe how NLM is represented externally by the BFD library.    I.E. it describes the in-file representation of NLM.  It requires    the nlm/common.h file which contains the portions that are common to    both the internal and external representations.     Note that an NLM header consists of three parts:     (1)	A fixed length header that has specific fields of known length, 	at specific offsets in the file.      (2)  A variable length header that has specific fields in a specific         order, but some fields may be variable length.     (3)	A auxiliary header that has various optional fields in no specific         order.  There is no way to identify the end of the auxiliary headers 	except by finding a header without a recognized 'stamp'.     The exact format of the fixed length header unfortunately varies    from one NLM target to another, due to padding.  Each target    defines the correct external format in a separate header file.  */
end_comment

begin_comment
comment|/* NLM Header */
end_comment

begin_comment
comment|/* The version header is one of the optional auxiliary headers and    follows the fixed length and variable length NLM headers. */
end_comment

begin_typedef
typedef|typedef
name|struct
name|nlmNAME
function|(
name|external_version_header
function|)
block|{
comment|/* The header is recognized by "VeRsIoN#" in the stamp field. */
name|char
name|stamp
index|[
literal|8
index|]
block|;
name|unsigned
name|char
name|majorVersion
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|minorVersion
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|revision
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|year
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|month
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|day
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;  }
end_typedef

begin_expr_stmt
name|NlmNAME
argument_list|(
name|External_Version_Header
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|struct
name|nlmNAME
function|(
name|external_copyright_header
function|)
block|{
comment|/* The header is recognized by "CoPyRiGhT=" in the stamp field. */
name|char
name|stamp
index|[
literal|10
index|]
block|;
name|unsigned
name|char
name|copyrightMessageLength
index|[
literal|1
index|]
block|;
comment|/* There is a variable length field here called 'copyrightMessage'      that is the length specified by copyrightMessageLength. */
block|}
end_typedef

begin_expr_stmt
name|NlmNAME
argument_list|(
name|External_Copyright_Header
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|struct
name|nlmNAME
function|(
name|external_extended_header
function|)
block|{
comment|/* The header is recognized by "MeSsAgEs" in the stamp field. */
name|char
name|stamp
index|[
literal|8
index|]
block|;
name|unsigned
name|char
name|languageID
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|messageFileOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|messageFileLength
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|messageCount
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|helpFileOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|helpFileLength
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|RPCDataOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|RPCDataLength
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedCodeOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedCodeLength
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedDataOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedDataLength
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedRelocationFixupOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedRelocationFixupCount
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedExternalReferenceOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedExternalReferenceCount
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedPublicsOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedPublicsCount
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedDebugRecordOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedDebugRecordCount
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|sharedInitializationOffset
index|[
name|NLM_TARGET_ADDRESS_SIZE
index|]
block|;
name|unsigned
name|char
name|SharedExitProcedureOffset
index|[
name|NLM_TARGET_ADDRESS_SIZE
index|]
block|;
name|unsigned
name|char
name|productID
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|reserved0
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|reserved1
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|reserved2
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|reserved3
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|reserved4
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
name|unsigned
name|char
name|reserved5
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;  }
end_typedef

begin_expr_stmt
name|NlmNAME
argument_list|(
name|External_Extended_Header
argument_list|)
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|struct
name|nlmNAME
function|(
name|external_custom_header
function|)
block|{
comment|/* The header is recognized by "CuStHeAd" in the stamp field. */
name|char
name|stamp
index|[
literal|8
index|]
block|;
comment|/* Length of this header.  */
name|unsigned
name|char
name|length
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
comment|/* Offset to data.  */
name|unsigned
name|char
name|dataOffset
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
comment|/* Length of data.  */
name|unsigned
name|char
name|dataLength
index|[
name|NLM_TARGET_LONG_SIZE
index|]
block|;
comment|/* Stamp for this customer header--we recognize "CyGnUsEx".  */
name|char
name|dataStamp
index|[
literal|8
index|]
block|;  }
end_typedef

begin_expr_stmt
name|NlmNAME
argument_list|(
name|External_Custom_Header
argument_list|)
expr_stmt|;
end_expr_stmt

end_unit

