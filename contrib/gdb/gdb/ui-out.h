begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Output generating routines for GDB.    Copyright 1999, 2000, 2001 Free Software Foundation, Inc.    Contributed by Cygnus Solutions.    Written by Fernando Nasser for Cygnus.     This file is part of GDB.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|UI_OUT_H
end_ifndef

begin_define
define|#
directive|define
name|UI_OUT_H
value|1
end_define

begin_comment
comment|/* The ui_out structure */
end_comment

begin_struct_decl
struct_decl|struct
name|ui_out
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ui_out_data
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ui_file
struct_decl|;
end_struct_decl

begin_comment
comment|/* the current ui_out */
end_comment

begin_comment
comment|/* FIXME: This should not be a global but something passed down from main.c    or top.c */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|ui_out
modifier|*
name|uiout
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* alignment enum */
end_comment

begin_enum
enum|enum
name|ui_align
block|{
name|ui_left
init|=
operator|-
literal|1
block|,
name|ui_center
block|,
name|ui_right
block|,
name|ui_noalign
block|}
enum|;
end_enum

begin_comment
comment|/* flags enum */
end_comment

begin_enum
enum|enum
name|ui_flags
block|{
name|ui_from_tty
init|=
literal|1
block|,
name|ui_source_list
init|=
literal|2
block|}
enum|;
end_enum

begin_comment
comment|/* The ui_out stream structure. */
end_comment

begin_comment
comment|/* NOTE: cagney/2000-02-01: The ui_stream object can be subsumed by    the more generic ui_file object.  */
end_comment

begin_struct
struct|struct
name|ui_stream
block|{
name|struct
name|ui_out
modifier|*
name|uiout
decl_stmt|;
name|struct
name|ui_file
modifier|*
name|stream
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Prototypes for ui-out API. */
end_comment

begin_comment
comment|/* A result is a recursive data structure consisting of lists and    tuples. */
end_comment

begin_enum
enum|enum
name|ui_out_type
block|{
name|ui_out_type_tuple
block|,
name|ui_out_type_list
block|}
enum|;
end_enum

begin_function_decl
specifier|extern
name|void
name|ui_out_begin
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|enum
name|ui_out_type
name|level_type
parameter_list|,
specifier|const
name|char
modifier|*
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_end
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|enum
name|ui_out_type
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cleanup
modifier|*
name|ui_out_begin_cleanup_end
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|enum
name|ui_out_type
name|level_type
parameter_list|,
specifier|const
name|char
modifier|*
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* A table can be considered a special tuple/list combination with the    implied structure: ``table = { hdr = { header, ... } , body = [ {    field, ... }, ... ] }''. If NR_ROWS is negative then there is at    least one row. */
end_comment

begin_function_decl
specifier|extern
name|void
name|ui_out_table_header
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|width
parameter_list|,
name|enum
name|ui_align
name|align
parameter_list|,
specifier|const
name|char
modifier|*
name|col_name
parameter_list|,
specifier|const
name|char
modifier|*
name|colhdr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_table_body
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cleanup
modifier|*
name|make_cleanup_ui_out_table_begin_end
parameter_list|(
name|struct
name|ui_out
modifier|*
name|ui_out
parameter_list|,
name|int
name|nr_cols
parameter_list|,
name|int
name|nr_rows
parameter_list|,
specifier|const
name|char
modifier|*
name|tblid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Compatibility wrappers.  */
end_comment

begin_function_decl
specifier|extern
name|struct
name|cleanup
modifier|*
name|make_cleanup_ui_out_list_begin_end
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|cleanup
modifier|*
name|make_cleanup_ui_out_tuple_begin_end
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_field_int
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_field_fmt_int
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|width
parameter_list|,
name|enum
name|ui_align
name|align
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_field_core_addr
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
name|CORE_ADDR
name|address
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_field_string
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_field_stream
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
name|struct
name|ui_stream
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_field_fmt
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_field_skip
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_spaces
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|numspaces
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_text
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_message
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|verbosity
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|ui_stream
modifier|*
name|ui_out_stream_new
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_stream_delete
parameter_list|(
name|struct
name|ui_stream
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|cleanup
modifier|*
name|make_cleanup_ui_out_stream_delete
parameter_list|(
name|struct
name|ui_stream
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_wrap_hint
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|char
modifier|*
name|identstring
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_flush
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_out_get_field_separator
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ui_out_set_flags
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|mask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ui_out_clear_flags
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|mask
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ui_out_get_verblvl
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ui_out_test_flags
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|mask
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|extern void ui_out_result_begin (struct ui_out *uiout, char *class);  extern void ui_out_result_end (struct ui_out *uiout);  extern void ui_out_info_begin (struct ui_out *uiout, char *class);  extern void ui_out_info_end (struct ui_out *uiout);  extern void ui_out_notify_begin (struct ui_out *uiout, char *class);  extern void ui_out_notify_end (struct ui_out *uiout);  extern void ui_out_error_begin (struct ui_out *uiout, char *class);  extern void ui_out_error_end (struct ui_out *uiout);
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|extern void gdb_error (struct ui_out *uiout, int severity, char *format, ...);  extern void gdb_query (struct ui_out *uiout, int qflags, char *qprompt);
endif|#
directive|endif
end_endif

begin_comment
comment|/* HACK: Code in GDB is currently checking to see the type of ui_out    builder when determining which output to produce.  This function is    a hack to encapsulate that test.  Once GDB manages to separate the    CLI/MI from the core of GDB the problem should just go away ....  */
end_comment

begin_function_decl
specifier|extern
name|int
name|ui_out_is_mi_like_p
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* From here on we have things that are only needed by implementation    routines and main.c.   We should pehaps have a separate file for that,    like a  ui-out-impl.h  file */
end_comment

begin_comment
comment|/* User Interface Output Implementation Function Table */
end_comment

begin_comment
comment|/* Type definition of all implementation functions. */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
name|table_begin_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|nbrofcols
parameter_list|,
name|int
name|nr_rows
parameter_list|,
specifier|const
name|char
modifier|*
name|tblid
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|table_body_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|table_end_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|table_header_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|width
parameter_list|,
name|enum
name|ui_align
name|align
parameter_list|,
specifier|const
name|char
modifier|*
name|col_name
parameter_list|,
specifier|const
name|char
modifier|*
name|colhdr
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* Note: level 0 is the top-level so LEVEL is always greater than    zero. */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_out_begin_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|enum
name|ui_out_type
name|type
parameter_list|,
name|int
name|level
parameter_list|,
specifier|const
name|char
modifier|*
name|id
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_out_end_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|enum
name|ui_out_type
name|type
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|field_int_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|fldno
parameter_list|,
name|int
name|width
parameter_list|,
name|enum
name|ui_align
name|align
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|field_skip_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|fldno
parameter_list|,
name|int
name|width
parameter_list|,
name|enum
name|ui_align
name|align
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|field_string_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|fldno
parameter_list|,
name|int
name|width
parameter_list|,
name|enum
name|ui_align
name|align
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|field_fmt_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|fldno
parameter_list|,
name|int
name|width
parameter_list|,
name|enum
name|ui_align
name|align
parameter_list|,
specifier|const
name|char
modifier|*
name|fldname
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|va_list
name|args
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|spaces_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|numspaces
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|text_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|message_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|int
name|verbosity
parameter_list|,
specifier|const
name|char
modifier|*
name|format
parameter_list|,
name|va_list
name|args
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|wrap_hint_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|char
modifier|*
name|identstring
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|flush_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
name|redirect_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|struct
name|ui_file
modifier|*
name|outstream
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/* ui-out-impl */
end_comment

begin_comment
comment|/* IMPORTANT: If you change this structure, make sure to change the default    initialization in ui-out.c */
end_comment

begin_struct
struct|struct
name|ui_out_impl
block|{
name|table_begin_ftype
modifier|*
name|table_begin
decl_stmt|;
name|table_body_ftype
modifier|*
name|table_body
decl_stmt|;
name|table_end_ftype
modifier|*
name|table_end
decl_stmt|;
name|table_header_ftype
modifier|*
name|table_header
decl_stmt|;
name|ui_out_begin_ftype
modifier|*
name|begin
decl_stmt|;
name|ui_out_end_ftype
modifier|*
name|end
decl_stmt|;
name|field_int_ftype
modifier|*
name|field_int
decl_stmt|;
name|field_skip_ftype
modifier|*
name|field_skip
decl_stmt|;
name|field_string_ftype
modifier|*
name|field_string
decl_stmt|;
name|field_fmt_ftype
modifier|*
name|field_fmt
decl_stmt|;
name|spaces_ftype
modifier|*
name|spaces
decl_stmt|;
name|text_ftype
modifier|*
name|text
decl_stmt|;
name|message_ftype
modifier|*
name|message
decl_stmt|;
name|wrap_hint_ftype
modifier|*
name|wrap_hint
decl_stmt|;
name|flush_ftype
modifier|*
name|flush
decl_stmt|;
name|redirect_ftype
modifier|*
name|redirect
decl_stmt|;
name|int
name|is_mi_like_p
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|struct
name|ui_out_data
modifier|*
name|ui_out_data
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Create a ui_out object */
end_comment

begin_function_decl
specifier|extern
name|struct
name|ui_out
modifier|*
name|ui_out_new
parameter_list|(
name|struct
name|ui_out_impl
modifier|*
name|impl
parameter_list|,
name|struct
name|ui_out_data
modifier|*
name|data
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Redirect the ouptut of a ui_out object temporarily.  */
end_comment

begin_function_decl
specifier|extern
name|int
name|ui_out_redirect
parameter_list|(
name|struct
name|ui_out
modifier|*
name|uiout
parameter_list|,
name|struct
name|ui_file
modifier|*
name|outstream
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* UI_OUT_H */
end_comment

end_unit

