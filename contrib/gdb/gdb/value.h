begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Definitions for values of C expressions, for GDB.    Copyright 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994,    1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002    Free Software Foundation, Inc.     This file is part of GDB.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|VALUE_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|VALUE_H
value|1
end_define

begin_include
include|#
directive|include
file|"doublest.h"
end_include

begin_comment
comment|/*  * The structure which defines the type of a value.  It should never  * be possible for a program lval value to survive over a call to the inferior  * (ie to be put into the history list or an internal variable).  */
end_comment

begin_struct
struct|struct
name|value
block|{
comment|/* Type of value; either not an lval, or one of the various        different possible kinds of lval.  */
name|enum
name|lval_type
name|lval
decl_stmt|;
comment|/* Is it modifiable?  Only relevant if lval != not_lval.  */
name|int
name|modifiable
decl_stmt|;
comment|/* Location of value (if lval).  */
union|union
block|{
comment|/* If lval == lval_memory, this is the address in the inferior. 	   If lval == lval_register, this is the byte offset into the 	   registers structure.  */
name|CORE_ADDR
name|address
decl_stmt|;
comment|/* Pointer to internal variable.  */
name|struct
name|internalvar
modifier|*
name|internalvar
decl_stmt|;
comment|/* Number of register.  Only used with 	   lval_reg_frame_relative.  */
name|int
name|regnum
decl_stmt|;
block|}
name|location
union|;
comment|/* Describes offset of a value within lval of a structure in bytes.        If lval == lval_memory, this is an offset to the address.        If lval == lval_register, this is a further offset from           location.address within the registers structure.          Note also the member embedded_offset below.  */
name|int
name|offset
decl_stmt|;
comment|/* Only used for bitfields; number of bits contained in them.  */
name|int
name|bitsize
decl_stmt|;
comment|/* Only used for bitfields; position of start of field.        For BITS_BIG_ENDIAN=0 targets, it is the position of the LSB.        For BITS_BIG_ENDIAN=1 targets, it is the position of the MSB. */
name|int
name|bitpos
decl_stmt|;
comment|/* Frame value is relative to.  In practice, this address is only        used if the value is stored in several registers in other than        the current frame, and these registers have not all been saved        at the same place in memory.  This will be described in the        lval enum above as "lval_reg_frame_relative".  */
name|CORE_ADDR
name|frame_addr
decl_stmt|;
comment|/* Type of the value.  */
name|struct
name|type
modifier|*
name|type
decl_stmt|;
comment|/* If a value represents a C++ object, then the `type' field gives        the object's compile-time type.  If the object actually belongs        to some class derived from `type', perhaps with other base        classes and additional members, then `type' is just a subobject        of the real thing, and the full object is probably larger than        `type' would suggest.         If `type' is a dynamic class (i.e. one with a vtable), then GDB        can actually determine the object's run-time type by looking at        the run-time type information in the vtable.  When this        information is available, we may elect to read in the entire        object, for several reasons:           - When printing the value, the user would probably rather see            the full object, not just the limited portion apparent from            the compile-time type.           - If `type' has virtual base classes, then even printing            `type' alone may require reaching outside the `type'            portion of the object to wherever the virtual base class            has been stored.         When we store the entire object, `enclosing_type' is the        run-time type --- the complete object --- and `embedded_offset'        is the offset of `type' within that larger type, in bytes.  The        VALUE_CONTENTS macro takes `embedded_offset' into account, so        most GDB code continues to see the `type' portion of the value,        just as the inferior would.         If `type' is a pointer to an object, then `enclosing_type' is a        pointer to the object's run-time type, and `pointed_to_offset'        is the offset in bytes from the full object to the pointed-to        object --- that is, the value `embedded_offset' would have if        we followed the pointer and fetched the complete object.  (I        don't really see the point.  Why not just determine the        run-time type when you indirect, and avoid the special case?        The contents don't matter until you indirect anyway.)         If we're not doing anything fancy, `enclosing_type' is equal to        `type', and `embedded_offset' is zero, so everything works        normally.  */
name|struct
name|type
modifier|*
name|enclosing_type
decl_stmt|;
name|int
name|embedded_offset
decl_stmt|;
name|int
name|pointed_to_offset
decl_stmt|;
comment|/* Values are stored in a chain, so that they can be deleted        easily over calls to the inferior.  Values assigned to internal        variables or put into the value history are taken off this        list.  */
name|struct
name|value
modifier|*
name|next
decl_stmt|;
comment|/* ??? When is this used?  */
union|union
block|{
name|CORE_ADDR
name|memaddr
decl_stmt|;
name|char
modifier|*
name|myaddr
decl_stmt|;
block|}
name|substring_addr
union|;
comment|/* Register number if the value is from a register.  Is not kept        if you take a field of a structure that is stored in a        register.  Shouldn't it be?  */
name|short
name|regno
decl_stmt|;
comment|/* If zero, contents of this value are in the contents field.        If nonzero, contents are in inferior memory at address        in the location.address field plus the offset field        (and the lval field should be lval_memory).         WARNING: This field is used by the code which handles        watchpoints (see breakpoint.c) to decide whether a particular        value can be watched by hardware watchpoints.  If the lazy flag        is set for some member of a value chain, it is assumed that        this member of the chain doesn't need to be watched as part of        watching the value itself.  This is how GDB avoids watching the        entire struct or array when the user wants to watch a single        struct member or array element.  If you ever change the way        lazy flag is set and reset, be sure to consider this use as        well!  */
name|char
name|lazy
decl_stmt|;
comment|/* If nonzero, this is the value of a variable which does not        actually exist in the program.  */
name|char
name|optimized_out
decl_stmt|;
comment|/* The BFD section associated with this value.  */
name|asection
modifier|*
name|bfd_section
decl_stmt|;
comment|/* Actual contents of the value.  For use of this value; setting        it uses the stuff above.  Not valid if lazy is nonzero.        Target byte-order.  We force it to be aligned properly for any        possible value.  Note that a value therefore extends beyond        what is declared here.  */
union|union
block|{
name|long
name|contents
index|[
literal|1
index|]
decl_stmt|;
name|double
name|force_double_align
decl_stmt|;
name|LONGEST
name|force_longlong_align
decl_stmt|;
name|char
modifier|*
name|literal_data
decl_stmt|;
block|}
name|aligner
union|;
comment|/* Do not add any new members here -- contents above will trash them */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|VALUE_TYPE
parameter_list|(
name|val
parameter_list|)
value|(val)->type
end_define

begin_define
define|#
directive|define
name|VALUE_ENCLOSING_TYPE
parameter_list|(
name|val
parameter_list|)
value|(val)->enclosing_type
end_define

begin_define
define|#
directive|define
name|VALUE_LAZY
parameter_list|(
name|val
parameter_list|)
value|(val)->lazy
end_define

begin_comment
comment|/* VALUE_CONTENTS and VALUE_CONTENTS_RAW both return the address of    the gdb buffer used to hold a copy of the contents of the lval.      VALUE_CONTENTS is used when the contents of the buffer are needed --    it uses value_fetch_lazy() to load the buffer from the process being     debugged if it hasn't already been loaded.  VALUE_CONTENTS_RAW is     used when data is being stored into the buffer, or when it is     certain that the contents of the buffer are valid.    Note: The contents pointer is adjusted by the offset required to    get to the real subobject, if the value happens to represent    something embedded in a larger run-time object. */
end_comment

begin_define
define|#
directive|define
name|VALUE_CONTENTS_RAW
parameter_list|(
name|val
parameter_list|)
value|((char *) (val)->aligner.contents + (val)->embedded_offset)
end_define

begin_define
define|#
directive|define
name|VALUE_CONTENTS
parameter_list|(
name|val
parameter_list|)
value|((void)(VALUE_LAZY(val)&& value_fetch_lazy(val)),\ 			     VALUE_CONTENTS_RAW(val))
end_define

begin_comment
comment|/* The ALL variants of the above two macros do not adjust the returned    pointer by the embedded_offset value. */
end_comment

begin_define
define|#
directive|define
name|VALUE_CONTENTS_ALL_RAW
parameter_list|(
name|val
parameter_list|)
value|((char *) (val)->aligner.contents)
end_define

begin_define
define|#
directive|define
name|VALUE_CONTENTS_ALL
parameter_list|(
name|val
parameter_list|)
value|((void) (VALUE_LAZY(val)&& value_fetch_lazy(val)),\                                  VALUE_CONTENTS_ALL_RAW(val))
end_define

begin_function_decl
specifier|extern
name|int
name|value_fetch_lazy
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|VALUE_LVAL
parameter_list|(
name|val
parameter_list|)
value|(val)->lval
end_define

begin_define
define|#
directive|define
name|VALUE_ADDRESS
parameter_list|(
name|val
parameter_list|)
value|(val)->location.address
end_define

begin_define
define|#
directive|define
name|VALUE_INTERNALVAR
parameter_list|(
name|val
parameter_list|)
value|(val)->location.internalvar
end_define

begin_define
define|#
directive|define
name|VALUE_FRAME_REGNUM
parameter_list|(
name|val
parameter_list|)
value|((val)->location.regnum)
end_define

begin_define
define|#
directive|define
name|VALUE_FRAME
parameter_list|(
name|val
parameter_list|)
value|((val)->frame_addr)
end_define

begin_define
define|#
directive|define
name|VALUE_OFFSET
parameter_list|(
name|val
parameter_list|)
value|(val)->offset
end_define

begin_define
define|#
directive|define
name|VALUE_BITSIZE
parameter_list|(
name|val
parameter_list|)
value|(val)->bitsize
end_define

begin_define
define|#
directive|define
name|VALUE_BITPOS
parameter_list|(
name|val
parameter_list|)
value|(val)->bitpos
end_define

begin_define
define|#
directive|define
name|VALUE_NEXT
parameter_list|(
name|val
parameter_list|)
value|(val)->next
end_define

begin_define
define|#
directive|define
name|VALUE_REGNO
parameter_list|(
name|val
parameter_list|)
value|(val)->regno
end_define

begin_define
define|#
directive|define
name|VALUE_OPTIMIZED_OUT
parameter_list|(
name|val
parameter_list|)
value|((val)->optimized_out)
end_define

begin_define
define|#
directive|define
name|VALUE_EMBEDDED_OFFSET
parameter_list|(
name|val
parameter_list|)
value|((val)->embedded_offset)
end_define

begin_define
define|#
directive|define
name|VALUE_POINTED_TO_OFFSET
parameter_list|(
name|val
parameter_list|)
value|((val)->pointed_to_offset)
end_define

begin_define
define|#
directive|define
name|VALUE_BFD_SECTION
parameter_list|(
name|val
parameter_list|)
value|((val)->bfd_section)
end_define

begin_comment
comment|/* Convert a REF to the object referenced. */
end_comment

begin_define
define|#
directive|define
name|COERCE_REF
parameter_list|(
name|arg
parameter_list|)
define|\
value|do { struct type *value_type_arg_tmp = check_typedef (VALUE_TYPE (arg));\      if (TYPE_CODE (value_type_arg_tmp) == TYPE_CODE_REF)		\ 	 arg = value_at_lazy (TYPE_TARGET_TYPE (value_type_arg_tmp),	\ 			      unpack_pointer (VALUE_TYPE (arg),		\ 					      VALUE_CONTENTS (arg)),    \ 			      VALUE_BFD_SECTION (arg));			\     } while (0)
end_define

begin_comment
comment|/* If ARG is an array, convert it to a pointer.    If ARG is an enum, convert it to an integer.    If ARG is a function, convert it to a function pointer.     References are dereferenced.  */
end_comment

begin_define
define|#
directive|define
name|COERCE_ARRAY
parameter_list|(
name|arg
parameter_list|)
define|\
value|do { COERCE_REF(arg);							\   if (current_language->c_style_arrays					\&& TYPE_CODE (VALUE_TYPE (arg)) == TYPE_CODE_ARRAY)		\     arg = value_coerce_array (arg);					\   if (TYPE_CODE (VALUE_TYPE (arg)) == TYPE_CODE_FUNC)                   \     arg = value_coerce_function (arg);                                  \ } while (0)
end_define

begin_define
define|#
directive|define
name|COERCE_NUMBER
parameter_list|(
name|arg
parameter_list|)
define|\
value|do { COERCE_ARRAY(arg);  COERCE_ENUM(arg); } while (0)
end_define

begin_define
define|#
directive|define
name|COERCE_VARYING_ARRAY
parameter_list|(
name|arg
parameter_list|,
name|real_arg_type
parameter_list|)
define|\
value|{ if (chill_varying_type (real_arg_type))  \     arg = varying_to_slice (arg), real_arg_type = VALUE_TYPE (arg); }
end_define

begin_comment
comment|/* If ARG is an enum, convert it to an integer.  */
end_comment

begin_define
define|#
directive|define
name|COERCE_ENUM
parameter_list|(
name|arg
parameter_list|)
value|{ \   if (TYPE_CODE (check_typedef (VALUE_TYPE (arg))) == TYPE_CODE_ENUM)	\     arg = value_cast (builtin_type_unsigned_int, arg);			\ }
end_define

begin_comment
comment|/* Internal variables (variables for convenience of use of debugger)    are recorded as a chain of these structures.  */
end_comment

begin_struct
struct|struct
name|internalvar
block|{
name|struct
name|internalvar
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|value
modifier|*
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Pointer to member function.  Depends on compiler implementation. */
end_comment

begin_define
define|#
directive|define
name|METHOD_PTR_IS_VIRTUAL
parameter_list|(
name|ADDR
parameter_list|)
value|((ADDR)& 0x80000000)
end_define

begin_define
define|#
directive|define
name|METHOD_PTR_FROM_VOFFSET
parameter_list|(
name|OFFSET
parameter_list|)
value|(0x80000000 + (OFFSET))
end_define

begin_define
define|#
directive|define
name|METHOD_PTR_TO_VOFFSET
parameter_list|(
name|ADDR
parameter_list|)
value|(~0x80000000& (ADDR))
end_define

begin_escape
end_escape

begin_include
include|#
directive|include
file|"symtab.h"
end_include

begin_include
include|#
directive|include
file|"gdbtypes.h"
end_include

begin_include
include|#
directive|include
file|"expression.h"
end_include

begin_struct_decl
struct_decl|struct
name|frame_info
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|fn_field
struct_decl|;
end_struct_decl

begin_function_decl
specifier|extern
name|void
name|print_address_demangle
parameter_list|(
name|CORE_ADDR
parameter_list|,
name|struct
name|ui_file
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|LONGEST
name|value_as_long
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|DOUBLEST
name|value_as_double
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|CORE_ADDR
name|value_as_address
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|LONGEST
name|unpack_long
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|valaddr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|DOUBLEST
name|unpack_double
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|valaddr
parameter_list|,
name|int
modifier|*
name|invp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|CORE_ADDR
name|unpack_pointer
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|valaddr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|LONGEST
name|unpack_field_as_long
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|valaddr
parameter_list|,
name|int
name|fieldno
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_from_longest
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|LONGEST
name|num
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_from_pointer
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|CORE_ADDR
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_from_double
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|DOUBLEST
name|num
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_from_string
parameter_list|(
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_at
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|CORE_ADDR
name|addr
parameter_list|,
name|asection
modifier|*
name|sect
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_at_lazy
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|CORE_ADDR
name|addr
parameter_list|,
name|asection
modifier|*
name|sect
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_from_register
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|int
name|regnum
parameter_list|,
name|struct
name|frame_info
modifier|*
name|frame
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_of_variable
parameter_list|(
name|struct
name|symbol
modifier|*
name|var
parameter_list|,
name|struct
name|block
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_of_register
parameter_list|(
name|int
name|regnum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|symbol_read_needs_frame
parameter_list|(
name|struct
name|symbol
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|read_var_value
parameter_list|(
name|struct
name|symbol
modifier|*
name|var
parameter_list|,
name|struct
name|frame_info
modifier|*
name|frame
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|locate_var_value
parameter_list|(
name|struct
name|symbol
modifier|*
name|var
parameter_list|,
name|struct
name|frame_info
modifier|*
name|frame
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|allocate_value
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|allocate_repeat_value
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_change_enclosing_type
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|,
name|struct
name|type
modifier|*
name|new_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_mark
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|value_free_to_mark
parameter_list|(
name|struct
name|value
modifier|*
name|mark
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_string
parameter_list|(
name|char
modifier|*
name|ptr
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_bitstring
parameter_list|(
name|char
modifier|*
name|ptr
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_array
parameter_list|(
name|int
name|lowbound
parameter_list|,
name|int
name|highbound
parameter_list|,
name|struct
name|value
modifier|*
modifier|*
name|elemvec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_concat
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_binop
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|,
name|enum
name|exp_opcode
name|op
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_add
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_sub
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_coerce_array
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_coerce_function
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_ind
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_addr
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_assign
parameter_list|(
name|struct
name|value
modifier|*
name|toval
parameter_list|,
name|struct
name|value
modifier|*
name|fromval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_neg
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_complement
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_struct_elt
parameter_list|(
name|struct
name|value
modifier|*
modifier|*
name|argp
parameter_list|,
name|struct
name|value
modifier|*
modifier|*
name|args
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
modifier|*
name|static_memfuncp
parameter_list|,
name|char
modifier|*
name|err
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_struct_elt_for_reference
parameter_list|(
name|struct
name|type
modifier|*
name|domain
parameter_list|,
name|int
name|offset
parameter_list|,
name|struct
name|type
modifier|*
name|curtype
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|type
modifier|*
name|intype
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_static_field
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|int
name|fieldno
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|fn_field
modifier|*
name|value_find_oload_method_list
parameter_list|(
name|struct
name|value
modifier|*
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|struct
name|type
modifier|*
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|find_overload_match
parameter_list|(
name|struct
name|type
modifier|*
modifier|*
name|arg_types
parameter_list|,
name|int
name|nargs
parameter_list|,
name|char
modifier|*
name|name
parameter_list|,
name|int
name|method
parameter_list|,
name|int
name|lax
parameter_list|,
name|struct
name|value
modifier|*
modifier|*
name|objp
parameter_list|,
name|struct
name|symbol
modifier|*
name|fsym
parameter_list|,
name|struct
name|value
modifier|*
modifier|*
name|valp
parameter_list|,
name|struct
name|symbol
modifier|*
modifier|*
name|symp
parameter_list|,
name|int
modifier|*
name|staticp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_field
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|int
name|fieldno
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_primitive_field
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|fieldno
parameter_list|,
name|struct
name|type
modifier|*
name|arg_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|type
modifier|*
name|value_rtti_target_type
parameter_list|(
name|struct
name|value
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_full_object
parameter_list|(
name|struct
name|value
modifier|*
parameter_list|,
name|struct
name|type
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_cast
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_zero
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|enum
name|lval_type
name|lv
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_repeat
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|int
name|count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_subscript
parameter_list|(
name|struct
name|value
modifier|*
name|array
parameter_list|,
name|struct
name|value
modifier|*
name|idx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_from_vtable_info
parameter_list|(
name|struct
name|value
modifier|*
name|arg
parameter_list|,
name|struct
name|type
modifier|*
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_being_returned
parameter_list|(
name|struct
name|type
modifier|*
name|valtype
parameter_list|,
name|char
modifier|*
name|retbuf
parameter_list|,
name|int
name|struct_return
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_in
parameter_list|(
name|struct
name|value
modifier|*
name|element
parameter_list|,
name|struct
name|value
modifier|*
name|set
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|value_bit_index
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|addr
parameter_list|,
name|int
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|using_struct_return
parameter_list|(
name|struct
name|value
modifier|*
name|function
parameter_list|,
name|CORE_ADDR
name|funcaddr
parameter_list|,
name|struct
name|type
modifier|*
name|value_type
parameter_list|,
name|int
name|gcc_p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_return_value
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|evaluate_expression
parameter_list|(
name|struct
name|expression
modifier|*
name|exp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|evaluate_type
parameter_list|(
name|struct
name|expression
modifier|*
name|exp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|evaluate_subexp_with_coercion
parameter_list|(
name|struct
name|expression
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|enum
name|noside
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|parse_and_eval
parameter_list|(
name|char
modifier|*
name|exp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|parse_to_comma_and_eval
parameter_list|(
name|char
modifier|*
modifier|*
name|expp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|type
modifier|*
name|parse_and_eval_type
parameter_list|(
name|char
modifier|*
name|p
parameter_list|,
name|int
name|length
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|CORE_ADDR
name|parse_and_eval_address
parameter_list|(
name|char
modifier|*
name|exp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|CORE_ADDR
name|parse_and_eval_address_1
parameter_list|(
name|char
modifier|*
modifier|*
name|expptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|LONGEST
name|parse_and_eval_long
parameter_list|(
name|char
modifier|*
name|exp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|access_value_history
parameter_list|(
name|int
name|num
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_of_internalvar
parameter_list|(
name|struct
name|internalvar
modifier|*
name|var
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_internalvar
parameter_list|(
name|struct
name|internalvar
modifier|*
name|var
parameter_list|,
name|struct
name|value
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|set_internalvar_component
parameter_list|(
name|struct
name|internalvar
modifier|*
name|var
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|bitpos
parameter_list|,
name|int
name|bitsize
parameter_list|,
name|struct
name|value
modifier|*
name|newvalue
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|internalvar
modifier|*
name|lookup_internalvar
parameter_list|(
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|value_equal
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|value_less
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|value_logical_not
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* C++ */
end_comment

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_of_this
parameter_list|(
name|int
name|complain
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_x_binop
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|,
name|enum
name|exp_opcode
name|op
parameter_list|,
name|enum
name|exp_opcode
name|otherop
parameter_list|,
name|enum
name|noside
name|noside
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_x_unop
parameter_list|(
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|enum
name|exp_opcode
name|op
parameter_list|,
name|enum
name|noside
name|noside
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_fn_field
parameter_list|(
name|struct
name|value
modifier|*
modifier|*
name|arg1p
parameter_list|,
name|struct
name|fn_field
modifier|*
name|f
parameter_list|,
name|int
name|j
parameter_list|,
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|int
name|offset
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|binop_user_defined_p
parameter_list|(
name|enum
name|exp_opcode
name|op
parameter_list|,
name|struct
name|value
modifier|*
name|arg1
parameter_list|,
name|struct
name|value
modifier|*
name|arg2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|unop_user_defined_p
parameter_list|(
name|enum
name|exp_opcode
name|op
parameter_list|,
name|struct
name|value
modifier|*
name|arg1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|destructor_name_p
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|struct
name|type
modifier|*
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|value_free
parameter_list|(
name|val
parameter_list|)
value|xfree (val)
end_define

begin_function_decl
specifier|extern
name|void
name|free_all_values
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|release_value
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|record_latest_value
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|modify_field
parameter_list|(
name|char
modifier|*
name|addr
parameter_list|,
name|LONGEST
name|fieldval
parameter_list|,
name|int
name|bitpos
parameter_list|,
name|int
name|bitsize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|type_print
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|varstring
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|int
name|show
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|baseclass_addr
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|int
name|index
parameter_list|,
name|char
modifier|*
name|valaddr
parameter_list|,
name|struct
name|value
modifier|*
modifier|*
name|valuep
parameter_list|,
name|int
modifier|*
name|errp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|print_longest
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|use_local
parameter_list|,
name|LONGEST
name|val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|print_floating
parameter_list|(
name|char
modifier|*
name|valaddr
parameter_list|,
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|value_print
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|int
name|format
parameter_list|,
name|enum
name|val_prettyprint
name|pretty
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|value_print_array_elements
parameter_list|(
name|struct
name|value
modifier|*
name|val
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|int
name|format
parameter_list|,
name|enum
name|val_prettyprint
name|pretty
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_release_to_mark
parameter_list|(
name|struct
name|value
modifier|*
name|mark
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|val_print
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|char
modifier|*
name|valaddr
parameter_list|,
name|int
name|embedded_offset
parameter_list|,
name|CORE_ADDR
name|address
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|int
name|format
parameter_list|,
name|int
name|deref_ref
parameter_list|,
name|int
name|recurse
parameter_list|,
name|enum
name|val_prettyprint
name|pretty
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|val_print_string
parameter_list|(
name|CORE_ADDR
name|addr
parameter_list|,
name|int
name|len
parameter_list|,
name|int
name|width
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|print_variable_value
parameter_list|(
name|struct
name|symbol
modifier|*
name|var
parameter_list|,
name|struct
name|frame_info
modifier|*
name|frame
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|check_field
parameter_list|(
name|struct
name|value
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|typedef_print
parameter_list|(
name|struct
name|type
modifier|*
name|type
parameter_list|,
name|struct
name|symbol
modifier|*
name|news
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|internalvar_name
parameter_list|(
name|struct
name|internalvar
modifier|*
name|var
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|clear_value_history
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|clear_internalvars
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* From values.c */
end_comment

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_copy
parameter_list|(
name|struct
name|value
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* From valops.c */
end_comment

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|varying_to_slice
parameter_list|(
name|struct
name|value
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_slice
parameter_list|(
name|struct
name|value
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|call_function_by_hand
parameter_list|(
name|struct
name|value
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|value
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|default_coerce_float_to_double
parameter_list|(
name|struct
name|type
modifier|*
parameter_list|,
name|struct
name|type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|standard_coerce_float_to_double
parameter_list|(
name|struct
name|type
modifier|*
parameter_list|,
name|struct
name|type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_literal_complex
parameter_list|(
name|struct
name|value
modifier|*
parameter_list|,
name|struct
name|value
modifier|*
parameter_list|,
name|struct
name|type
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|find_rt_vbase_offset
parameter_list|(
name|struct
name|type
modifier|*
parameter_list|,
name|struct
name|type
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|find_function_in_inferior
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|value
modifier|*
name|value_allocate_space_in_inferior
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|CORE_ADDR
name|default_push_arguments
parameter_list|(
name|int
name|nargs
parameter_list|,
name|struct
name|value
modifier|*
modifier|*
name|args
parameter_list|,
name|CORE_ADDR
name|sp
parameter_list|,
name|int
name|struct_return
parameter_list|,
name|CORE_ADDR
name|struct_addr
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined (VALUE_H) */
end_comment

end_unit

