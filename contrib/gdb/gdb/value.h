begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Definitions for values of C expressions, for GDB.    Copyright 1986, 1987, 1989, 1992, 1993, 1994, 1995 Free Software Foundation, Inc.  This file is part of GDB.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|VALUE_H
argument_list|)
end_if

begin_define
define|#
directive|define
name|VALUE_H
value|1
end_define

begin_comment
comment|/*  * The structure which defines the type of a value.  It should never  * be possible for a program lval value to survive over a call to the inferior  * (ie to be put into the history list or an internal variable).  */
end_comment

begin_enum
enum|enum
name|lval_type
block|{
comment|/* Not an lval.  */
name|not_lval
block|,
comment|/* In memory.  Could be a saved register.  */
name|lval_memory
block|,
comment|/* In a register.  */
name|lval_register
block|,
comment|/* In a gdb internal variable.  */
name|lval_internalvar
block|,
comment|/* Part of a gdb internal variable (structure field).  */
name|lval_internalvar_component
block|,
comment|/* In a register series in a frame not the current one, which may have been      partially saved or saved in different places (otherwise would be      lval_register or lval_memory).  */
name|lval_reg_frame_relative
block|}
enum|;
end_enum

begin_struct
struct|struct
name|value
block|{
comment|/* Type of value; either not an lval, or one of the various        different possible kinds of lval.  */
name|enum
name|lval_type
name|lval
decl_stmt|;
comment|/* Is it modifiable?  Only relevant if lval != not_lval.  */
name|int
name|modifiable
decl_stmt|;
comment|/* Location of value (if lval).  */
union|union
block|{
comment|/* Address in inferior or byte of registers structure.  */
name|CORE_ADDR
name|address
decl_stmt|;
comment|/* Pointer to internal variable.  */
name|struct
name|internalvar
modifier|*
name|internalvar
decl_stmt|;
comment|/* Number of register.  Only used with 	   lval_reg_frame_relative.  */
name|int
name|regnum
decl_stmt|;
block|}
name|location
union|;
comment|/* Describes offset of a value within lval a structure in bytes.  */
name|int
name|offset
decl_stmt|;
comment|/* Only used for bitfields; number of bits contained in them.  */
name|int
name|bitsize
decl_stmt|;
comment|/* Only used for bitfields; position of start of field.        For BITS_BIG_ENDIAN=0 targets, it is the position of the LSB.        For BITS_BIG_ENDIAN=1 targets, it is the position of the MSB. */
name|int
name|bitpos
decl_stmt|;
comment|/* Frame value is relative to.  In practice, this address is only        used if the value is stored in several registers in other than        the current frame, and these registers have not all been saved        at the same place in memory.  This will be described in the        lval enum above as "lval_reg_frame_relative".  */
name|CORE_ADDR
name|frame_addr
decl_stmt|;
comment|/* Type of the value.  */
name|struct
name|type
modifier|*
name|type
decl_stmt|;
comment|/* Values are stored in a chain, so that they can be deleted        easily over calls to the inferior.  Values assigned to internal        variables or put into the value history are taken off this        list.  */
name|struct
name|value
modifier|*
name|next
decl_stmt|;
comment|/* ??? When is this used?  */
union|union
block|{
name|CORE_ADDR
name|memaddr
decl_stmt|;
name|char
modifier|*
name|myaddr
decl_stmt|;
block|}
name|substring_addr
union|;
comment|/* Register number if the value is from a register.  Is not kept        if you take a field of a structure that is stored in a        register.  Shouldn't it be?  */
name|short
name|regno
decl_stmt|;
comment|/* If zero, contents of this value are in the contents field.        If nonzero, contents are in inferior memory at address        in the location.address field plus the offset field        (and the lval field should be lval_memory).  */
name|char
name|lazy
decl_stmt|;
comment|/* If nonzero, this is the value of a variable which does not        actually exist in the program.  */
name|char
name|optimized_out
decl_stmt|;
comment|/* Actual contents of the value.  For use of this value; setting        it uses the stuff above.  Not valid if lazy is nonzero.        Target byte-order.  We force it to be aligned properly for any        possible value.  */
union|union
block|{
name|long
name|contents
index|[
literal|1
index|]
decl_stmt|;
name|double
name|force_double_align
decl_stmt|;
name|LONGEST
name|force_longlong_align
decl_stmt|;
name|char
modifier|*
name|literal_data
decl_stmt|;
block|}
name|aligner
union|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|value
modifier|*
name|value_ptr
typedef|;
end_typedef

begin_define
define|#
directive|define
name|VALUE_TYPE
parameter_list|(
name|val
parameter_list|)
value|(val)->type
end_define

begin_define
define|#
directive|define
name|VALUE_LAZY
parameter_list|(
name|val
parameter_list|)
value|(val)->lazy
end_define

begin_comment
comment|/* VALUE_CONTENTS and VALUE_CONTENTS_RAW both return the address of    the gdb buffer used to hold a copy of the contents of the lval.      VALUE_CONTENTS is used when the contents of the buffer are needed --    it uses value_fetch_lazy() to load the buffer from the process being     debugged if it hasn't already been loaded.  VALUE_CONTENTS_RAW is     used when data is being stored into the buffer, or when it is     certain that the contents of the buffer are valid.  */
end_comment

begin_define
define|#
directive|define
name|VALUE_CONTENTS_RAW
parameter_list|(
name|val
parameter_list|)
value|((char *) (val)->aligner.contents)
end_define

begin_define
define|#
directive|define
name|VALUE_CONTENTS
parameter_list|(
name|val
parameter_list|)
value|((void)(VALUE_LAZY(val)&& value_fetch_lazy(val)),\ 			     VALUE_CONTENTS_RAW(val))
end_define

begin_decl_stmt
specifier|extern
name|int
name|value_fetch_lazy
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|VALUE_LVAL
parameter_list|(
name|val
parameter_list|)
value|(val)->lval
end_define

begin_define
define|#
directive|define
name|VALUE_ADDRESS
parameter_list|(
name|val
parameter_list|)
value|(val)->location.address
end_define

begin_define
define|#
directive|define
name|VALUE_INTERNALVAR
parameter_list|(
name|val
parameter_list|)
value|(val)->location.internalvar
end_define

begin_define
define|#
directive|define
name|VALUE_FRAME_REGNUM
parameter_list|(
name|val
parameter_list|)
value|((val)->location.regnum)
end_define

begin_define
define|#
directive|define
name|VALUE_FRAME
parameter_list|(
name|val
parameter_list|)
value|((val)->frame_addr)
end_define

begin_define
define|#
directive|define
name|VALUE_OFFSET
parameter_list|(
name|val
parameter_list|)
value|(val)->offset
end_define

begin_define
define|#
directive|define
name|VALUE_BITSIZE
parameter_list|(
name|val
parameter_list|)
value|(val)->bitsize
end_define

begin_define
define|#
directive|define
name|VALUE_BITPOS
parameter_list|(
name|val
parameter_list|)
value|(val)->bitpos
end_define

begin_define
define|#
directive|define
name|VALUE_NEXT
parameter_list|(
name|val
parameter_list|)
value|(val)->next
end_define

begin_define
define|#
directive|define
name|VALUE_REGNO
parameter_list|(
name|val
parameter_list|)
value|(val)->regno
end_define

begin_define
define|#
directive|define
name|VALUE_OPTIMIZED_OUT
parameter_list|(
name|val
parameter_list|)
value|((val)->optimized_out)
end_define

begin_comment
comment|/* Convert a REF to the object referenced. */
end_comment

begin_define
define|#
directive|define
name|COERCE_REF
parameter_list|(
name|arg
parameter_list|)
define|\
value|{ if (TYPE_CODE (VALUE_TYPE (arg)) == TYPE_CODE_REF)			\     arg = value_at_lazy (TYPE_TARGET_TYPE (VALUE_TYPE (arg)),		\ 			 unpack_long (VALUE_TYPE (arg),			\ 				      VALUE_CONTENTS (arg)));}
end_define

begin_comment
comment|/* If ARG is an array, convert it to a pointer.    If ARG is an enum, convert it to an integer.    If ARG is a function, convert it to a function pointer.     References are dereferenced.  */
end_comment

begin_define
define|#
directive|define
name|COERCE_ARRAY
parameter_list|(
name|arg
parameter_list|)
define|\
value|do { COERCE_REF(arg);							\   if (current_language->c_style_arrays					\&& TYPE_CODE (VALUE_TYPE (arg)) == TYPE_CODE_ARRAY)		\     arg = value_coerce_array (arg);					\   if (TYPE_CODE (VALUE_TYPE (arg)) == TYPE_CODE_FUNC)                   \     arg = value_coerce_function (arg);                                  \ } while (0)
end_define

begin_define
define|#
directive|define
name|COERCE_NUMBER
parameter_list|(
name|arg
parameter_list|)
define|\
value|do { COERCE_ARRAY(arg);  COERCE_ENUM(arg); } while (0)
end_define

begin_define
define|#
directive|define
name|COERCE_VARYING_ARRAY
parameter_list|(
name|arg
parameter_list|,
name|real_arg_type
parameter_list|)
define|\
value|{ if (chill_varying_type (real_arg_type))  \     arg = varying_to_slice (arg), real_arg_type = VALUE_TYPE (arg); }
end_define

begin_comment
comment|/* If ARG is an enum, convert it to an integer.  */
end_comment

begin_define
define|#
directive|define
name|COERCE_ENUM
parameter_list|(
name|arg
parameter_list|)
value|{ \   if (TYPE_CODE (VALUE_TYPE (arg)) == TYPE_CODE_ENUM)			\     arg = value_cast (builtin_type_unsigned_int, arg);			\ }
end_define

begin_comment
comment|/* Internal variables (variables for convenience of use of debugger)    are recorded as a chain of these structures.  */
end_comment

begin_struct
struct|struct
name|internalvar
block|{
name|struct
name|internalvar
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|value_ptr
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Pointer to member function.  Depends on compiler implementation. */
end_comment

begin_define
define|#
directive|define
name|METHOD_PTR_IS_VIRTUAL
parameter_list|(
name|ADDR
parameter_list|)
value|((ADDR)& 0x80000000)
end_define

begin_define
define|#
directive|define
name|METHOD_PTR_FROM_VOFFSET
parameter_list|(
name|OFFSET
parameter_list|)
value|(0x80000000 + (OFFSET))
end_define

begin_define
define|#
directive|define
name|METHOD_PTR_TO_VOFFSET
parameter_list|(
name|ADDR
parameter_list|)
value|(~0x80000000& (ADDR))
end_define

begin_escape
end_escape

begin_include
include|#
directive|include
file|"symtab.h"
end_include

begin_include
include|#
directive|include
file|"gdbtypes.h"
end_include

begin_include
include|#
directive|include
file|"expression.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__STDC__
end_ifdef

begin_struct_decl
struct_decl|struct
name|frame_info
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|fn_field
struct_decl|;
end_struct_decl

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|void
name|print_address_demangle
name|PARAMS
argument_list|(
operator|(
name|CORE_ADDR
operator|,
name|GDB_FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|LONGEST
name|value_as_long
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|DOUBLEST
name|value_as_double
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CORE_ADDR
name|value_as_pointer
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|LONGEST
name|unpack_long
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|char
operator|*
name|valaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|DOUBLEST
name|unpack_double
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|char
operator|*
name|valaddr
operator|,
name|int
operator|*
name|invp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CORE_ADDR
name|unpack_pointer
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|char
operator|*
name|valaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|LONGEST
name|unpack_field_as_long
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|char
operator|*
name|valaddr
operator|,
name|int
name|fieldno
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_from_longest
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|LONGEST
name|num
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_from_double
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|DOUBLEST
name|num
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_at
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|CORE_ADDR
name|addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_at_lazy
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|CORE_ADDR
name|addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_from_register
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|int
name|regnum
operator|,
expr|struct
name|frame_info
operator|*
name|frame
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_of_variable
name|PARAMS
argument_list|(
operator|(
expr|struct
name|symbol
operator|*
name|var
operator|,
expr|struct
name|block
operator|*
name|b
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_of_register
name|PARAMS
argument_list|(
operator|(
name|int
name|regnum
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|symbol_read_needs_frame
name|PARAMS
argument_list|(
operator|(
expr|struct
name|symbol
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|read_var_value
name|PARAMS
argument_list|(
operator|(
expr|struct
name|symbol
operator|*
name|var
operator|,
expr|struct
name|frame_info
operator|*
name|frame
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|locate_var_value
name|PARAMS
argument_list|(
operator|(
expr|struct
name|symbol
operator|*
name|var
operator|,
expr|struct
name|frame_info
operator|*
name|frame
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|allocate_value
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|allocate_repeat_value
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|int
name|count
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_mark
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|value_free_to_mark
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|mark
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_string
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|ptr
operator|,
name|int
name|len
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_bitstring
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|ptr
operator|,
name|int
name|len
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_array
name|PARAMS
argument_list|(
operator|(
name|int
name|lowbound
operator|,
name|int
name|highbound
operator|,
name|value_ptr
operator|*
name|elemvec
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_concat
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|value_ptr
name|arg2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_binop
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|value_ptr
name|arg2
operator|,
expr|enum
name|exp_opcode
name|op
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_add
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|value_ptr
name|arg2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_sub
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|value_ptr
name|arg2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_coerce_array
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_coerce_function
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_ind
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_addr
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_assign
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|toval
operator|,
name|value_ptr
name|fromval
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_neg
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_complement
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_struct_elt
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|*
name|argp
operator|,
name|value_ptr
operator|*
name|args
operator|,
name|char
operator|*
name|name
operator|,
name|int
operator|*
name|static_memfuncp
operator|,
name|char
operator|*
name|err
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_struct_elt_for_reference
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|domain
operator|,
name|int
name|offset
operator|,
expr|struct
name|type
operator|*
name|curtype
operator|,
name|char
operator|*
name|name
operator|,
expr|struct
name|type
operator|*
name|intype
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_field
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|int
name|fieldno
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_primitive_field
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|int
name|offset
operator|,
name|int
name|fieldno
operator|,
expr|struct
name|type
operator|*
name|arg_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_cast
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|value_ptr
name|arg2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_zero
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
expr|enum
name|lval_type
name|lv
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_repeat
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|int
name|count
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_subscript
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|array
operator|,
name|value_ptr
name|idx
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_from_vtable_info
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg
operator|,
expr|struct
name|type
operator|*
name|type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_being_returned
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|valtype
operator|,
name|char
name|retbuf
index|[
name|REGISTER_BYTES
index|]
operator|,
name|int
name|struct_return
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_in
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|element
operator|,
name|value_ptr
name|set
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|value_bit_index
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|char
operator|*
name|addr
operator|,
name|int
name|index
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|using_struct_return
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|function
operator|,
name|CORE_ADDR
name|funcaddr
operator|,
expr|struct
name|type
operator|*
name|value_type
operator|,
name|int
name|gcc_p
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|set_return_value
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|evaluate_expression
name|PARAMS
argument_list|(
operator|(
expr|struct
name|expression
operator|*
name|exp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|evaluate_type
name|PARAMS
argument_list|(
operator|(
expr|struct
name|expression
operator|*
name|exp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|evaluate_subexp_with_coercion
name|PARAMS
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|,
name|int
operator|*
operator|,
expr|enum
name|noside
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|parse_and_eval
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|exp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|parse_to_comma_and_eval
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
operator|*
name|expp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|type
modifier|*
name|parse_and_eval_type
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|p
operator|,
name|int
name|length
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CORE_ADDR
name|parse_and_eval_address
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|exp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CORE_ADDR
name|parse_and_eval_address_1
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
operator|*
name|expptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|access_value_history
name|PARAMS
argument_list|(
operator|(
name|int
name|num
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_of_internalvar
name|PARAMS
argument_list|(
operator|(
expr|struct
name|internalvar
operator|*
name|var
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|set_internalvar
name|PARAMS
argument_list|(
operator|(
expr|struct
name|internalvar
operator|*
name|var
operator|,
name|value_ptr
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|set_internalvar_component
name|PARAMS
argument_list|(
operator|(
expr|struct
name|internalvar
operator|*
name|var
operator|,
name|int
name|offset
operator|,
name|int
name|bitpos
operator|,
name|int
name|bitsize
operator|,
name|value_ptr
name|newvalue
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|internalvar
modifier|*
name|lookup_internalvar
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|name
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|value_equal
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|value_ptr
name|arg2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|value_less
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|value_ptr
name|arg2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|value_logical_not
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* C++ */
end_comment

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_of_this
name|PARAMS
argument_list|(
operator|(
name|int
name|complain
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_x_binop
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
name|value_ptr
name|arg2
operator|,
expr|enum
name|exp_opcode
name|op
operator|,
expr|enum
name|exp_opcode
name|otherop
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_x_unop
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|arg1
operator|,
expr|enum
name|exp_opcode
name|op
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_fn_field
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|*
name|arg1p
operator|,
expr|struct
name|fn_field
operator|*
name|f
operator|,
name|int
name|j
operator|,
expr|struct
name|type
operator|*
name|type
operator|,
name|int
name|offset
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_virtual_fn_field
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|*
name|arg1p
operator|,
expr|struct
name|fn_field
operator|*
name|f
operator|,
name|int
name|j
operator|,
expr|struct
name|type
operator|*
name|type
operator|,
name|int
name|offset
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|binop_user_defined_p
name|PARAMS
argument_list|(
operator|(
expr|enum
name|exp_opcode
name|op
operator|,
name|value_ptr
name|arg1
operator|,
name|value_ptr
name|arg2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|unop_user_defined_p
name|PARAMS
argument_list|(
operator|(
expr|enum
name|exp_opcode
name|op
operator|,
name|value_ptr
name|arg1
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|destructor_name_p
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
specifier|const
expr|struct
name|type
operator|*
name|type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|value_free
parameter_list|(
name|val
parameter_list|)
value|free ((PTR)val)
end_define

begin_decl_stmt
specifier|extern
name|void
name|free_all_values
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|release_value
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|record_latest_value
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|registers_changed
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|read_register_bytes
name|PARAMS
argument_list|(
operator|(
name|int
name|regbyte
operator|,
name|char
operator|*
name|myaddr
operator|,
name|int
name|len
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|write_register_bytes
name|PARAMS
argument_list|(
operator|(
name|int
name|regbyte
operator|,
name|char
operator|*
name|myaddr
operator|,
name|int
name|len
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|read_register_gen
name|PARAMS
argument_list|(
operator|(
name|int
name|regno
operator|,
name|char
operator|*
name|myaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|CORE_ADDR
name|read_register
name|PARAMS
argument_list|(
operator|(
name|int
name|regno
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|write_register
name|PARAMS
argument_list|(
operator|(
name|int
name|regno
operator|,
name|LONGEST
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|supply_register
name|PARAMS
argument_list|(
operator|(
name|int
name|regno
operator|,
name|char
operator|*
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|get_saved_register
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|raw_buffer
operator|,
name|int
operator|*
name|optimized
operator|,
name|CORE_ADDR
operator|*
name|addrp
operator|,
expr|struct
name|frame_info
operator|*
name|frame
operator|,
name|int
name|regnum
operator|,
expr|enum
name|lval_type
operator|*
name|lval
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|modify_field
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|addr
operator|,
name|LONGEST
name|fieldval
operator|,
name|int
name|bitpos
operator|,
name|int
name|bitsize
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|type_print
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|char
operator|*
name|varstring
operator|,
name|GDB_FILE
operator|*
name|stream
operator|,
name|int
name|show
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|baseclass_addr
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|int
name|index
operator|,
name|char
operator|*
name|valaddr
operator|,
name|value_ptr
operator|*
name|valuep
operator|,
name|int
operator|*
name|errp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|print_longest
name|PARAMS
argument_list|(
operator|(
name|GDB_FILE
operator|*
name|stream
operator|,
name|int
name|format
operator|,
name|int
name|use_local
operator|,
name|LONGEST
name|val
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|print_floating
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
name|valaddr
operator|,
expr|struct
name|type
operator|*
name|type
operator|,
name|GDB_FILE
operator|*
name|stream
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|value_print
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|,
name|GDB_FILE
operator|*
name|stream
operator|,
name|int
name|format
operator|,
expr|enum
name|val_prettyprint
name|pretty
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|value_print_array_elements
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|val
operator|,
name|GDB_FILE
operator|*
name|stream
operator|,
name|int
name|format
operator|,
expr|enum
name|val_prettyprint
name|pretty
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_release_to_mark
name|PARAMS
argument_list|(
operator|(
name|value_ptr
name|mark
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|val_print
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
name|char
operator|*
name|valaddr
operator|,
name|CORE_ADDR
name|address
operator|,
name|GDB_FILE
operator|*
name|stream
operator|,
name|int
name|format
operator|,
name|int
name|deref_ref
operator|,
name|int
name|recurse
operator|,
expr|enum
name|val_prettyprint
name|pretty
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|val_print_string
name|PARAMS
argument_list|(
operator|(
name|CORE_ADDR
name|addr
operator|,
name|unsigned
name|int
name|len
operator|,
name|GDB_FILE
operator|*
name|stream
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|print_variable_value
name|PARAMS
argument_list|(
operator|(
expr|struct
name|symbol
operator|*
name|var
operator|,
expr|struct
name|frame_info
operator|*
name|frame
operator|,
name|GDB_FILE
operator|*
name|stream
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|check_field
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|c_typedef_print
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
name|type
operator|,
expr|struct
name|symbol
operator|*
name|news
operator|,
name|GDB_FILE
operator|*
name|stream
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|internalvar_name
name|PARAMS
argument_list|(
operator|(
expr|struct
name|internalvar
operator|*
name|var
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|clear_value_history
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|clear_internalvars
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* From values.c */
end_comment

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_copy
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|baseclass_offset
name|PARAMS
argument_list|(
operator|(
expr|struct
name|type
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|,
name|CORE_ADDR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* From valops.c */
end_comment

begin_decl_stmt
specifier|extern
name|value_ptr
name|varying_to_slice
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_slice
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|call_function_by_hand
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|,
name|int
operator|,
name|value_ptr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|value_ptr
name|value_literal_complex
name|PARAMS
argument_list|(
operator|(
name|value_ptr
operator|,
name|value_ptr
operator|,
expr|struct
name|type
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !defined (VALUE_H) */
end_comment

end_unit

