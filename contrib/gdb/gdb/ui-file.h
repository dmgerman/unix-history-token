begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* UI_FILE - a generic STDIO like output stream.    Copyright 1999, 2000 Free Software Foundation, Inc.     This file is part of GDB.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|UI_FILE_H
end_ifndef

begin_define
define|#
directive|define
name|UI_FILE_H
end_define

begin_struct_decl
struct_decl|struct
name|ui_file
struct_decl|;
end_struct_decl

begin_comment
comment|/* Create a generic ui_file object with null methods. */
end_comment

begin_function_decl
specifier|extern
name|struct
name|ui_file
modifier|*
name|ui_file_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Override methods used by specific implementations of a UI_FILE    object. */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_file_flush_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_ui_file_flush
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|ui_file_flush_ftype
modifier|*
name|flush
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* NOTE: Both fputs and write methods are available. Default    implementations that mapping one onto the other are included. */
end_comment

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_file_write_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|long
name|length_buf
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_ui_file_write
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|ui_file_write_ftype
modifier|*
name|fputs
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_file_fputs_ftype
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_ui_file_fputs
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|ui_file_fputs_ftype
modifier|*
name|fputs
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|int
function_decl|(
name|ui_file_isatty_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_ui_file_isatty
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|ui_file_isatty_ftype
modifier|*
name|isatty
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_file_rewind_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_ui_file_rewind
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|ui_file_rewind_ftype
modifier|*
name|rewind
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_file_put_method_ftype
function_decl|)
parameter_list|(
name|void
modifier|*
name|object
parameter_list|,
specifier|const
name|char
modifier|*
name|buffer
parameter_list|,
name|long
name|length_buffer
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_file_put_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|ui_file_put_method_ftype
modifier|*
name|method
parameter_list|,
name|void
modifier|*
name|context
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_ui_file_put
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|ui_file_put_ftype
modifier|*
name|put
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
name|ui_file_delete_ftype
function_decl|)
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_typedef

begin_function_decl
specifier|extern
name|void
name|set_ui_file_data
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|ui_file_delete_ftype
modifier|*
name|delete
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|ui_file_data
parameter_list|(
name|struct
name|ui_file
modifier|*
name|file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|gdb_flush
parameter_list|(
name|struct
name|ui_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_file_delete
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_file_rewind
parameter_list|(
name|struct
name|ui_file
modifier|*
name|stream
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|ui_file_isatty
parameter_list|(
name|struct
name|ui_file
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|ui_file_write
parameter_list|(
name|struct
name|ui_file
modifier|*
name|file
parameter_list|,
specifier|const
name|char
modifier|*
name|buf
parameter_list|,
name|long
name|length_buf
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* NOTE: copies left to right */
end_comment

begin_function_decl
specifier|extern
name|void
name|ui_file_put
parameter_list|(
name|struct
name|ui_file
modifier|*
name|src
parameter_list|,
name|ui_file_put_method_ftype
modifier|*
name|write
parameter_list|,
name|void
modifier|*
name|dest
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Returns a freshly allocated buffer containing the entire contents    of FILE (as determined by ui_file_put()) with a NUL character    appended.  LENGTH is set to the size of the buffer minus that    appended NUL. */
end_comment

begin_function_decl
specifier|extern
name|char
modifier|*
name|ui_file_xstrdup
parameter_list|(
name|struct
name|ui_file
modifier|*
name|file
parameter_list|,
name|long
modifier|*
name|length
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Create/open a memory based file. Can be used as a scratch buffer    for collecting output. */
end_comment

begin_function_decl
specifier|extern
name|struct
name|ui_file
modifier|*
name|mem_fileopen
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Open/create a an STDIO based UI_FILE using the already open FILE. */
end_comment

begin_function_decl
specifier|extern
name|struct
name|ui_file
modifier|*
name|stdio_fileopen
parameter_list|(
name|FILE
modifier|*
name|file
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Open NAME returning an STDIO based UI_FILE. */
end_comment

begin_function_decl
specifier|extern
name|struct
name|ui_file
modifier|*
name|gdb_fopen
parameter_list|(
name|char
modifier|*
name|name
parameter_list|,
name|char
modifier|*
name|mode
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

end_unit

