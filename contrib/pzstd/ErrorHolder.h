begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2016-present, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under the BSD-style license found in the  * LICENSE file in the root directory of this source tree. An additional grant  * of patent rights can be found in the PATENTS file in the same directory.  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_include
include|#
directive|include
file|<atomic>
end_include

begin_include
include|#
directive|include
file|<cassert>
end_include

begin_include
include|#
directive|include
file|<stdexcept>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_decl_stmt
name|namespace
name|pzstd
block|{
comment|// Coordinates graceful shutdown of the pzstd pipeline
name|class
name|ErrorHolder
block|{
name|std
operator|::
name|atomic
operator|<
name|bool
operator|>
name|error_
expr_stmt|;
name|std
operator|::
name|string
name|message_
expr_stmt|;
name|public
label|:
name|ErrorHolder
argument_list|()
operator|:
name|error_
argument_list|(
argument|false
argument_list|)
block|{}
name|bool
name|hasError
argument_list|()
name|noexcept
block|{
return|return
name|error_
operator|.
name|load
argument_list|()
return|;
block|}
name|void
name|setError
argument_list|(
name|std
operator|::
name|string
name|message
argument_list|)
name|noexcept
block|{
comment|// Given multiple possibly concurrent calls, exactly one will ever succeed.
name|bool
name|expected
init|=
name|false
decl_stmt|;
if|if
condition|(
name|error_
operator|.
name|compare_exchange_strong
argument_list|(
name|expected
argument_list|,
name|true
argument_list|)
condition|)
block|{
name|message_
operator|=
name|std
operator|::
name|move
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
name|bool
name|check
argument_list|(
name|bool
name|predicate
argument_list|,
name|std
operator|::
name|string
name|message
argument_list|)
name|noexcept
block|{
if|if
condition|(
operator|!
name|predicate
condition|)
block|{
name|setError
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|hasError
argument_list|()
return|;
block|}
name|std
operator|::
name|string
name|getError
argument_list|()
name|noexcept
block|{
name|error_
operator|.
name|store
argument_list|(
name|false
argument_list|)
block|;
return|return
name|std
operator|::
name|move
argument_list|(
name|message_
argument_list|)
return|;
block|}
operator|~
name|ErrorHolder
argument_list|()
block|{
name|assert
argument_list|(
operator|!
name|hasError
argument_list|()
argument_list|)
block|;   }
block|}
empty_stmt|;
block|}
end_decl_stmt

end_unit

