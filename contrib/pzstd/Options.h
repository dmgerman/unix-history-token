begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2016-present, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under the BSD-style license found in the  * LICENSE file in the root directory of this source tree. An additional grant  * of patent rights can be found in the PATENTS file in the same directory.  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_define
define|#
directive|define
name|ZSTD_STATIC_LINKING_ONLY
end_define

begin_include
include|#
directive|include
file|"zstd.h"
end_include

begin_undef
undef|#
directive|undef
name|ZSTD_STATIC_LINKING_ONLY
end_undef

begin_include
include|#
directive|include
file|<cstdint>
end_include

begin_include
include|#
directive|include
file|<string>
end_include

begin_include
include|#
directive|include
file|<vector>
end_include

begin_decl_stmt
name|namespace
name|pzstd
block|{
struct|struct
name|Options
block|{
name|enum
name|class
name|WriteMode
block|{
name|Regular
operator|,
name|Auto
operator|,
name|Sparse
block|}
empty_stmt|;
name|unsigned
name|numThreads
decl_stmt|;
name|unsigned
name|maxWindowLog
decl_stmt|;
name|unsigned
name|compressionLevel
decl_stmt|;
name|bool
name|decompress
decl_stmt|;
name|std
operator|::
name|vector
operator|<
name|std
operator|::
name|string
operator|>
name|inputFiles
expr_stmt|;
name|std
operator|::
name|string
name|outputFile
expr_stmt|;
name|bool
name|overwrite
decl_stmt|;
name|bool
name|keepSource
decl_stmt|;
name|WriteMode
name|writeMode
decl_stmt|;
name|bool
name|checksum
decl_stmt|;
name|int
name|verbosity
decl_stmt|;
name|enum
name|class
name|Status
block|{
name|Success
operator|,
comment|// Successfully parsed options
name|Failure
operator|,
comment|// Failure to parse options
name|Message
comment|// Options specified to print a message (e.g. "-h")
block|}
empty_stmt|;
name|Options
argument_list|()
expr_stmt|;
name|Options
argument_list|(
argument|unsigned numThreads
argument_list|,
argument|unsigned maxWindowLog
argument_list|,
argument|unsigned compressionLevel
argument_list|,
argument|bool decompress
argument_list|,
argument|std::vector<std::string> inputFiles
argument_list|,
argument|std::string outputFile
argument_list|,
argument|bool overwrite
argument_list|,
argument|bool keepSource
argument_list|,
argument|WriteMode writeMode
argument_list|,
argument|bool checksum
argument_list|,
argument|int verbosity
argument_list|)
block|:
name|numThreads
argument_list|(
name|numThreads
argument_list|)
operator|,
name|maxWindowLog
argument_list|(
name|maxWindowLog
argument_list|)
operator|,
name|compressionLevel
argument_list|(
name|compressionLevel
argument_list|)
operator|,
name|decompress
argument_list|(
name|decompress
argument_list|)
operator|,
name|inputFiles
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|inputFiles
argument_list|)
argument_list|)
operator|,
name|outputFile
argument_list|(
name|std
operator|::
name|move
argument_list|(
name|outputFile
argument_list|)
argument_list|)
operator|,
name|overwrite
argument_list|(
name|overwrite
argument_list|)
operator|,
name|keepSource
argument_list|(
name|keepSource
argument_list|)
operator|,
name|writeMode
argument_list|(
name|writeMode
argument_list|)
operator|,
name|checksum
argument_list|(
name|checksum
argument_list|)
operator|,
name|verbosity
argument_list|(
argument|verbosity
argument_list|)
block|{}
name|Status
name|parse
argument_list|(
argument|int argc
argument_list|,
argument|const char **argv
argument_list|)
expr_stmt|;
name|ZSTD_parameters
name|determineParameters
argument_list|()
specifier|const
block|{
name|ZSTD_parameters
name|params
operator|=
name|ZSTD_getParams
argument_list|(
name|compressionLevel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|;
name|params
operator|.
name|fParams
operator|.
name|contentSizeFlag
operator|=
literal|0
block|;
name|params
operator|.
name|fParams
operator|.
name|checksumFlag
operator|=
name|checksum
block|;
if|if
condition|(
name|maxWindowLog
operator|!=
literal|0
operator|&&
name|params
operator|.
name|cParams
operator|.
name|windowLog
operator|>
name|maxWindowLog
condition|)
block|{
name|params
operator|.
name|cParams
operator|.
name|windowLog
operator|=
name|maxWindowLog
expr_stmt|;
name|params
operator|.
name|cParams
operator|=
name|ZSTD_adjustCParams
argument_list|(
name|params
operator|.
name|cParams
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
name|std
operator|::
name|string
name|getOutputFile
argument_list|(
argument|const std::string&inputFile
argument_list|)
specifier|const
expr_stmt|;
block|}
struct|;
block|}
end_decl_stmt

end_unit

