begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/**  * Copyright (c) 2016-present, Facebook, Inc.  * All rights reserved.  *  * This source code is licensed under the BSD-style license found in the  * LICENSE file in the root directory of this source tree. An additional grant  * of patent rights can be found in the PATENTS file in the same directory.  */
end_comment

begin_pragma
pragma|#
directive|pragma
name|once
end_pragma

begin_include
include|#
directive|include
file|"utils/Range.h"
end_include

begin_include
include|#
directive|include
file|<array>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<memory>
end_include

begin_decl_stmt
name|namespace
name|pzstd
block|{
comment|/**  * A `Buffer` has a pointer to a shared buffer, and a range of the buffer that  * it owns.  * The idea is that you can allocate one buffer, and write chunks into it  * and break off those chunks.  * The underlying buffer is reference counted, and will be destroyed when all  * `Buffer`s that reference it are destroyed.  */
name|class
name|Buffer
block|{
name|std
operator|::
name|shared_ptr
operator|<
name|unsigned
name|char
operator|>
name|buffer_
expr_stmt|;
name|MutableByteRange
name|range_
decl_stmt|;
specifier|static
name|void
name|delete_buffer
parameter_list|(
name|unsigned
name|char
modifier|*
name|buffer
parameter_list|)
block|{
name|delete
index|[]
name|buffer
decl_stmt|;
block|}
name|public
label|:
comment|/// Construct an empty buffer that owns no data.
name|explicit
name|Buffer
parameter_list|()
block|{}
comment|/// Construct a `Buffer` that owns a new underlying buffer of size `size`.
name|explicit
name|Buffer
argument_list|(
name|std
operator|::
name|size_t
name|size
argument_list|)
range|:
name|buffer_
argument_list|(
argument|new unsigned char[size]
argument_list|,
argument|delete_buffer
argument_list|)
decl_stmt|,
name|range_
argument_list|(
name|buffer_
operator|.
name|get
argument_list|()
argument_list|,
name|buffer_
operator|.
name|get
argument_list|()
operator|+
name|size
argument_list|)
block|{}
name|explicit
name|Buffer
argument_list|(
name|std
operator|::
name|shared_ptr
operator|<
name|unsigned
name|char
operator|>
name|buffer
argument_list|,
name|MutableByteRange
name|data
argument_list|)
range|:
name|buffer_
argument_list|(
name|buffer
argument_list|)
decl_stmt|,
name|range_
argument_list|(
name|data
argument_list|)
block|{}
name|Buffer
argument_list|(
name|Buffer
operator|&&
argument_list|)
operator|=
expr|default
expr_stmt|;
name|Buffer
modifier|&
name|operator
init|=
operator|(
name|Buffer
operator|&&
operator|)
operator|&
operator|=
expr|default
decl_stmt|;
comment|/**    * Splits the data into two pieces: [begin, begin + n), [begin + n, end).    * Their data both points into the same underlying buffer.    * Modifies the original `Buffer` to point to only [begin + n, end).    *    * @param n  The offset to split at.    * @returns  A buffer that owns the data [begin, begin + n).    */
name|Buffer
name|splitAt
argument_list|(
name|std
operator|::
name|size_t
name|n
argument_list|)
block|{
name|auto
name|firstPiece
init|=
name|range_
operator|.
name|subpiece
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|range_
operator|.
name|advance
argument_list|(
name|n
argument_list|)
expr_stmt|;
return|return
name|Buffer
argument_list|(
name|buffer_
argument_list|,
name|firstPiece
argument_list|)
return|;
block|}
comment|/// Modifies the buffer to point to the range [begin + n, end).
name|void
name|advance
argument_list|(
name|std
operator|::
name|size_t
name|n
argument_list|)
block|{
name|range_
operator|.
name|advance
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
comment|/// Modifies the buffer to point to the range [begin, end - n).
name|void
name|subtract
argument_list|(
name|std
operator|::
name|size_t
name|n
argument_list|)
block|{
name|range_
operator|.
name|subtract
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
comment|/// Returns a read only `Range` pointing to the `Buffer`s data.
name|ByteRange
name|range
argument_list|()
specifier|const
block|{
return|return
name|range_
return|;
block|}
comment|/// Returns a mutable `Range` pointing to the `Buffer`s data.
name|MutableByteRange
name|range
parameter_list|()
block|{
return|return
name|range_
return|;
block|}
specifier|const
name|unsigned
name|char
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|range_
operator|.
name|data
argument_list|()
return|;
block|}
name|unsigned
name|char
modifier|*
name|data
parameter_list|()
block|{
return|return
name|range_
operator|.
name|data
argument_list|()
return|;
block|}
name|std
operator|::
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|range_
operator|.
name|size
argument_list|()
return|;
block|}
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|range_
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
empty_stmt|;
block|}
end_decl_stmt

end_unit

