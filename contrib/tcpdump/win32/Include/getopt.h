begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Declarations for getopt.    Copyright (C) 1989, 1990, 1991, 1992, 1993 Free Software Foundation, Inc.  This file is part of the GNU C Library.  The GNU C Library is free software; you can redistribute it and/or modify it under the terms of the GNU Library General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  The GNU C Library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public License for more details.  You should have received a copy of the GNU Library General Public License along with the GNU C Library; see the file COPYING.LIB.  If not, write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GETOPT_H
end_ifndef

begin_define
define|#
directive|define
name|_GETOPT_H
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* For communication from `getopt' to the caller.    When `getopt' finds an option that takes an argument,    the argument value is returned here.    Also, when `ordering' is RETURN_IN_ORDER,    each non-option ARGV-element is returned here.  */
ifndef|#
directive|ifndef
name|WIN32
specifier|extern
name|char
modifier|*
name|optarg
decl_stmt|;
endif|#
directive|endif
comment|/* Index in ARGV of the next element to be scanned.    This is used for communication to and from the caller    and for communication between successive calls to `getopt'.     On entry to `getopt', zero means this is the first call; initialize.     When `getopt' returns EOF, this is the index of the first of the    non-option elements that the caller should itself scan.     Otherwise, `optind' communicates from one call to the next    how much of ARGV has been scanned so far.  */
ifndef|#
directive|ifndef
name|WIN32
specifier|extern
name|int
name|optind
decl_stmt|;
endif|#
directive|endif
comment|/* Callers store zero here to inhibit the error message `getopt' prints    for unrecognized options.  */
ifndef|#
directive|ifndef
name|WIN32
specifier|extern
name|int
name|opterr
decl_stmt|;
endif|#
directive|endif
comment|/* Set to an option character which was unrecognized.  */
specifier|extern
name|int
name|optopt
decl_stmt|;
comment|/* Describe the long-named options requested by the application.    The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector    of `struct option' terminated by an element containing a name which is    zero.     The field `has_arg' is:    no_argument		(or 0) if the option does not take an argument,    required_argument	(or 1) if the option requires an argument,    optional_argument 	(or 2) if the option takes an optional argument.     If the field `flag' is not NULL, it points to a variable that is set    to the value given in the field `val' when the option is found, but    left unchanged if the option is not found.     To have a long-named option do something other than set an `int' to    a compiled-in constant, such as set a value from `optarg', set the    option's `flag' field to zero and its `val' field to a nonzero    value (the equivalent single-letter option character, if there is    one).  For long options that have a zero `flag' field, `getopt'    returns the contents of the `val' field.  */
struct|struct
name|option
block|{
if|#
directive|if
name|__STDC__
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
else|#
directive|else
name|char
modifier|*
name|name
decl_stmt|;
endif|#
directive|endif
comment|/* has_arg can't be an enum because some compilers complain about      type mismatches in all the code that assumes it is an int.  */
name|int
name|has_arg
decl_stmt|;
name|int
modifier|*
name|flag
decl_stmt|;
name|int
name|val
decl_stmt|;
block|}
struct|;
comment|/* Names for the values of the `has_arg' field of `struct option'.  */
define|#
directive|define
name|no_argument
value|0
define|#
directive|define
name|required_argument
value|1
define|#
directive|define
name|optional_argument
value|2
if|#
directive|if
name|__STDC__
if|#
directive|if
name|defined
argument_list|(
name|__GNU_LIBRARY__
argument_list|)
comment|/* Many other libraries have conflicting prototypes for getopt, with    differences in the consts, in stdlib.h.  To avoid compilation    errors, only prototype getopt for the GNU C library.  */
specifier|extern
name|int
name|getopt
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
specifier|const
name|char
modifier|*
name|shortopts
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* not __GNU_LIBRARY__ */
specifier|extern
name|int
name|getopt
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* not __GNU_LIBRARY__ */
specifier|extern
name|int
name|getopt_long
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
specifier|const
name|char
modifier|*
name|shortopts
parameter_list|,
specifier|const
name|struct
name|option
modifier|*
name|longopts
parameter_list|,
name|int
modifier|*
name|longind
parameter_list|)
function_decl|;
specifier|extern
name|int
name|getopt_long_only
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
specifier|const
name|char
modifier|*
name|shortopts
parameter_list|,
specifier|const
name|struct
name|option
modifier|*
name|longopts
parameter_list|,
name|int
modifier|*
name|longind
parameter_list|)
function_decl|;
comment|/* Internal only.  Users should not call this directly.  */
specifier|extern
name|int
name|_getopt_internal
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
specifier|const
name|char
modifier|*
name|shortopts
parameter_list|,
specifier|const
name|struct
name|option
modifier|*
name|longopts
parameter_list|,
name|int
modifier|*
name|longind
parameter_list|,
name|int
name|long_only
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* not __STDC__ */
specifier|extern
name|int
name|getopt
parameter_list|()
function_decl|;
specifier|extern
name|int
name|getopt_long
parameter_list|()
function_decl|;
specifier|extern
name|int
name|getopt_long_only
parameter_list|()
function_decl|;
specifier|extern
name|int
name|_getopt_internal
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* not __STDC__ */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _GETOPT_H */
end_comment

end_unit

