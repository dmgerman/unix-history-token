begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* C Compatible Compiler Preprocessor (CCCP) Copyright (C) 1986, 1987, 1989, 2000 Free Software Foundation, Inc.                     Written by Paul Rubin, June 1986 		    Adapted to ANSI C, Richard Stallman, Jan 1987 		    Dusted off, polished, and adapted for use as traditional 		    preprocessor only, Zack Weinberg, Jul 2000  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GCC_TRADCPP_H
end_ifndef

begin_define
define|#
directive|define
name|GCC_TRADCPP_H
end_define

begin_decl_stmt
specifier|extern
name|void
name|error
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|msgid
operator|,
operator|...
operator|)
argument_list|)
name|ATTRIBUTE_PRINTF_1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|warning
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|msgid
operator|,
operator|...
operator|)
argument_list|)
name|ATTRIBUTE_PRINTF_1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|fatal
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|msgid
operator|,
operator|...
operator|)
argument_list|)
name|ATTRIBUTE_PRINTF_1
name|ATTRIBUTE_NORETURN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|error_with_line
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|char
operator|*
name|msgid
operator|,
operator|...
operator|)
argument_list|)
name|ATTRIBUTE_PRINTF_2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|error_from_errno
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|msgid
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|perror_with_name
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|msgid
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|pfatal_with_name
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|msgid
operator|)
argument_list|)
name|ATTRIBUTE_NORETURN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|fancy_abort
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
name|ATTRIBUTE_NORETURN
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|hashnode
modifier|*
name|lookup
name|PARAMS
argument_list|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|parse_c_expression
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* in tradcif.y */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|test_assertion
name|PARAMS
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|is_idchar
parameter_list|(
name|x
parameter_list|)
value|ISIDNUM(x)
end_define

begin_define
define|#
directive|define
name|is_idstart
parameter_list|(
name|x
parameter_list|)
value|ISIDST(x)
end_define

begin_define
define|#
directive|define
name|is_space
parameter_list|(
name|x
parameter_list|)
value|ISSPACE(x)
end_define

begin_define
define|#
directive|define
name|is_nvspace
parameter_list|(
name|x
parameter_list|)
value|(IS_NVSPACE(x)&& x != '\0')
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ! GCC_TRADCPP_H */
end_comment

end_unit

