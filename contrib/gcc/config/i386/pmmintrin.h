begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003 Free Software Foundation, Inc.     This file is part of GNU CC.     GNU CC is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GNU CC is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GNU CC; see the file COPYING.  If not, write to    the Free Software Foundation, 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you include this header file into source    files compiled by GCC, this header file does not by itself cause    the resulting executable to be covered by the GNU General Public    License.  This exception does not however invalidate any other    reasons why the executable file might be covered by the GNU General    Public License.  */
end_comment

begin_comment
comment|/* Implemented from the specification included in the Intel C++ Compiler    User Guide and Reference, version 8.0.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PMMINTRIN_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|_PMMINTRIN_H_INCLUDED
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__PNI__
end_ifdef

begin_include
include|#
directive|include
file|<xmmintrin.h>
end_include

begin_include
include|#
directive|include
file|<emmintrin.h>
end_include

begin_comment
comment|/* Additional bits in the MXCSR.  */
end_comment

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_MASK
value|0x0040
end_define

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_ON
value|0x0040
end_define

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_OFF
value|0x0000
end_define

begin_define
define|#
directive|define
name|_MM_SET_DENORMALS_ZERO_MODE
parameter_list|(
name|mode
parameter_list|)
define|\
value|_mm_setcsr ((_mm_getcsr ()& ~_MM_DENORMALS_ZERO_MASK) | (mode))
end_define

begin_define
define|#
directive|define
name|_MM_GET_DENORMALS_ZERO_MODE
parameter_list|()
define|\
value|(_mm_getcsr()& _MM_DENORMALS_ZERO_MASK)
end_define

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_addsub_ps
parameter_list|(
name|__m128
name|__X
parameter_list|,
name|__m128
name|__Y
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_addsubps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|,
operator|(
name|__v4sf
operator|)
name|__Y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_hadd_ps
parameter_list|(
name|__m128
name|__X
parameter_list|,
name|__m128
name|__Y
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_haddps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|,
operator|(
name|__v4sf
operator|)
name|__Y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_hsub_ps
parameter_list|(
name|__m128
name|__X
parameter_list|,
name|__m128
name|__Y
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_hsubps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|,
operator|(
name|__v4sf
operator|)
name|__Y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_movehdup_ps
parameter_list|(
name|__m128
name|__X
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movshdup
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_moveldup_ps
parameter_list|(
name|__m128
name|__X
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movsldup
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_addsub_pd
parameter_list|(
name|__m128d
name|__X
parameter_list|,
name|__m128d
name|__Y
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_addsubpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__X
argument_list|,
operator|(
name|__v2df
operator|)
name|__Y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_hadd_pd
parameter_list|(
name|__m128d
name|__X
parameter_list|,
name|__m128d
name|__Y
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_haddpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__X
argument_list|,
operator|(
name|__v2df
operator|)
name|__Y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_hsub_pd
parameter_list|(
name|__m128d
name|__X
parameter_list|,
name|__m128d
name|__Y
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_hsubpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__X
argument_list|,
operator|(
name|__v2df
operator|)
name|__Y
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_loaddup_pd
parameter_list|(
name|double
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_loadddup
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_movedup_pd
parameter_list|(
name|__m128d
name|__X
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_movddup
argument_list|(
operator|(
name|__v2df
operator|)
name|__X
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_lddqu_si128
parameter_list|(
name|__m128i
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_lddqu
argument_list|(
operator|(
name|char
specifier|const
operator|*
operator|)
name|__P
argument_list|)
return|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_else
unit|static __inline void _mm_monitor (void const * __P, unsigned int __E, unsigned int __H) {   __builtin_ia32_monitor (__P, __E, __H); }  static __inline void _mm_mwait (unsigned int __E, unsigned int __H) {   __builtin_ia32_mwait (__E, __H); }
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_mm_monitor
parameter_list|(
name|P
parameter_list|,
name|E
parameter_list|,
name|H
parameter_list|)
value|__builtin_ia32_monitor ((P), (E), (H))
end_define

begin_define
define|#
directive|define
name|_mm_mwait
parameter_list|(
name|E
parameter_list|,
name|H
parameter_list|)
value|__builtin_ia32_mwait ((E), (H))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __PNI__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _PMMINTRIN_H_INCLUDED */
end_comment

end_unit

