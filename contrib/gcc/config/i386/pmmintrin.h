begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2003, 2004, 2005, 2006 Free Software Foundation, Inc.     This file is part of GCC.     GCC is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GCC is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GCC; see the file COPYING.  If not, write to    the Free Software Foundation, 51 Franklin Street, Fifth Floor,    Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you include this header file into source    files compiled by GCC, this header file does not by itself cause    the resulting executable to be covered by the GNU General Public    License.  This exception does not however invalidate any other    reasons why the executable file might be covered by the GNU General    Public License.  */
end_comment

begin_comment
comment|/* Implemented from the specification included in the Intel C++ Compiler    User Guide and Reference, version 9.0.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PMMINTRIN_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|_PMMINTRIN_H_INCLUDED
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__SSE3__
end_ifdef

begin_include
include|#
directive|include
file|<xmmintrin.h>
end_include

begin_include
include|#
directive|include
file|<emmintrin.h>
end_include

begin_comment
comment|/* Additional bits in the MXCSR.  */
end_comment

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_MASK
value|0x0040
end_define

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_ON
value|0x0040
end_define

begin_define
define|#
directive|define
name|_MM_DENORMALS_ZERO_OFF
value|0x0000
end_define

begin_define
define|#
directive|define
name|_MM_SET_DENORMALS_ZERO_MODE
parameter_list|(
name|mode
parameter_list|)
define|\
value|_mm_setcsr ((_mm_getcsr ()& ~_MM_DENORMALS_ZERO_MASK) | (mode))
end_define

begin_define
define|#
directive|define
name|_MM_GET_DENORMALS_ZERO_MODE
parameter_list|()
define|\
value|(_mm_getcsr()& _MM_DENORMALS_ZERO_MASK)
end_define

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_addsub_ps
argument_list|(
name|__m128
name|__X
argument_list|,
name|__m128
name|__Y
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_addsubps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|,
operator|(
name|__v4sf
operator|)
name|__Y
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_hadd_ps
argument_list|(
name|__m128
name|__X
argument_list|,
name|__m128
name|__Y
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_haddps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|,
operator|(
name|__v4sf
operator|)
name|__Y
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_hsub_ps
argument_list|(
name|__m128
name|__X
argument_list|,
name|__m128
name|__Y
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_hsubps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|,
operator|(
name|__v4sf
operator|)
name|__Y
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_movehdup_ps
argument_list|(
name|__m128
name|__X
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movshdup
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_moveldup_ps
argument_list|(
name|__m128
name|__X
argument_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movsldup
argument_list|(
operator|(
name|__v4sf
operator|)
name|__X
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_addsub_pd
argument_list|(
name|__m128d
name|__X
argument_list|,
name|__m128d
name|__Y
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_addsubpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__X
argument_list|,
operator|(
name|__v2df
operator|)
name|__Y
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_hadd_pd
argument_list|(
name|__m128d
name|__X
argument_list|,
name|__m128d
name|__Y
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_haddpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__X
argument_list|,
operator|(
name|__v2df
operator|)
name|__Y
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_hsub_pd
argument_list|(
name|__m128d
name|__X
argument_list|,
name|__m128d
name|__Y
argument_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_hsubpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__X
argument_list|,
operator|(
name|__v2df
operator|)
name|__Y
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_loaddup_pd
argument_list|(
name|double
specifier|const
operator|*
name|__P
argument_list|)
block|{
return|return
name|_mm_load1_pd
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128d
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_movedup_pd
argument_list|(
name|__m128d
name|__X
argument_list|)
block|{
return|return
name|_mm_shuffle_pd
argument_list|(
name|__X
argument_list|,
name|__X
argument_list|,
name|_MM_SHUFFLE2
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m128i
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_lddqu_si128
argument_list|(
name|__m128i
specifier|const
operator|*
name|__P
argument_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_lddqu
argument_list|(
operator|(
name|char
specifier|const
operator|*
operator|)
name|__P
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_monitor
argument_list|(
name|void
specifier|const
operator|*
name|__P
argument_list|,
name|unsigned
name|int
name|__E
argument_list|,
name|unsigned
name|int
name|__H
argument_list|)
block|{
name|__builtin_ia32_monitor
argument_list|(
name|__P
argument_list|,
name|__E
argument_list|,
name|__H
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_mwait
argument_list|(
name|unsigned
name|int
name|__E
argument_list|,
name|unsigned
name|int
name|__H
argument_list|)
block|{
name|__builtin_ia32_mwait
argument_list|(
name|__E
argument_list|,
name|__H
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SSE3__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _PMMINTRIN_H_INCLUDED */
end_comment

end_unit

