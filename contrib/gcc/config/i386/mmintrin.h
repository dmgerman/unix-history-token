begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007    Free Software Foundation, Inc.     This file is part of GCC.     GCC is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GCC is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GCC; see the file COPYING.  If not, write to    the Free Software Foundation, 51 Franklin Street, Fifth Floor,    Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you include this header file into source    files compiled by GCC, this header file does not by itself cause    the resulting executable to be covered by the GNU General Public    License.  This exception does not however invalidate any other    reasons why the executable file might be covered by the GNU General    Public License.  */
end_comment

begin_comment
comment|/* Implemented from the specification included in the Intel C++ Compiler    User Guide and Reference, version 9.0.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MMINTRIN_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|_MMINTRIN_H_INCLUDED
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__MMX__
end_ifndef

begin_error
error|#
directive|error
literal|"MMX instruction set not enabled"
end_error

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* The Intel API is flexible enough that we must allow aliasing with other    vector types, and their scalar components.  */
end_comment

begin_typedef
typedef|typedef
name|int
name|__m64
name|__attribute__
typedef|((
name|__vector_size__
typedef|(8)
operator|,
typedef|__may_alias__));
end_typedef

begin_comment
comment|/* Internal data types for implementing the intrinsics.  */
end_comment

begin_typedef
typedef|typedef
name|int
name|__v2si
name|__attribute__
typedef|((
name|__vector_size__
typedef|(8)));
end_typedef

begin_typedef
typedef|typedef
name|short
name|__v4hi
name|__attribute__
typedef|((
name|__vector_size__
typedef|(8)));
end_typedef

begin_typedef
typedef|typedef
name|char
name|__v8qi
name|__attribute__
typedef|((
name|__vector_size__
typedef|(8)));
end_typedef

begin_comment
comment|/* Empty the multimedia state.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_empty
argument_list|(
name|void
argument_list|)
block|{
name|__builtin_ia32_emms
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|void
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_empty
argument_list|(
name|void
argument_list|)
block|{
name|_mm_empty
argument_list|()
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/* Convert I to a __m64 object.  The integer is zero-extended to 64-bits.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cvtsi32_si64
argument_list|(
name|int
name|__i
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_vec_init_v2si
argument_list|(
name|__i
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_from_int
argument_list|(
name|int
name|__i
argument_list|)
block|{
return|return
name|_mm_cvtsi32_si64
argument_list|(
name|__i
argument_list|)
return|;
block|}
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_comment
comment|/* Convert I to a __m64 object.  */
end_comment

begin_comment
comment|/* Intel intrinsic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_from_int64
argument_list|(
name|long
name|long
name|__i
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__i
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cvtsi64_m64
argument_list|(
name|long
name|long
name|__i
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__i
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Microsoft intrinsic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cvtsi64x_si64
argument_list|(
name|long
name|long
name|__i
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__i
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_set_pi64x
argument_list|(
name|long
name|long
name|__i
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__i
return|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Convert the lower 32 bits of the __m64 object into an integer.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cvtsi64_si32
argument_list|(
name|__m64
name|__i
argument_list|)
block|{
return|return
name|__builtin_ia32_vec_ext_v2si
argument_list|(
operator|(
name|__v2si
operator|)
name|__i
argument_list|,
literal|0
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|int
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_to_int
argument_list|(
name|__m64
name|__i
argument_list|)
block|{
return|return
name|_mm_cvtsi64_si32
argument_list|(
name|__i
argument_list|)
return|;
block|}
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_comment
comment|/* Convert the __m64 object to a 64bit integer.  */
end_comment

begin_comment
comment|/* Intel intrinsic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|long
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_to_int64
argument_list|(
name|__m64
name|__i
argument_list|)
block|{
return|return
operator|(
name|long
name|long
operator|)
name|__i
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|long
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cvtm64_si64
argument_list|(
name|__m64
name|__i
argument_list|)
block|{
return|return
operator|(
name|long
name|long
operator|)
name|__i
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Microsoft intrinsic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|long
name|long
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cvtsi64_si64x
argument_list|(
name|__m64
name|__i
argument_list|)
block|{
return|return
operator|(
name|long
name|long
operator|)
name|__i
return|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Pack the four 16-bit values from M1 into the lower four 8-bit values of    the result, and the four 16-bit values from M2 into the upper four 8-bit    values of the result, all with signed saturation.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_packs_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_packsswb
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_packsswb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_packs_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Pack the two 32-bit values from M1 in to the lower two 16-bit values of    the result, and the two 32-bit values from M2 into the upper two 16-bit    values of the result, all with signed saturation.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_packs_pi32
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_packssdw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_packssdw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_packs_pi32
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Pack the four 16-bit values from M1 into the lower four 8-bit values of    the result, and the four 16-bit values from M2 into the upper four 8-bit    values of the result, all with unsigned saturation.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_packs_pu16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_packuswb
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_packuswb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_packs_pu16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Interleave the four 8-bit values from the high half of M1 with the four    8-bit values from the high half of M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_unpackhi_pi8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_punpckhbw
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_punpckhbw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_unpackhi_pi8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Interleave the two 16-bit values from the high half of M1 with the two    16-bit values from the high half of M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_unpackhi_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_punpckhwd
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_punpckhwd
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_unpackhi_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Interleave the 32-bit value from the high half of M1 with the 32-bit    value from the high half of M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_unpackhi_pi32
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_punpckhdq
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_punpckhdq
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_unpackhi_pi32
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Interleave the four 8-bit values from the low half of M1 with the four    8-bit values from the low half of M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_unpacklo_pi8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_punpcklbw
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_punpcklbw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_unpacklo_pi8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Interleave the two 16-bit values from the low half of M1 with the two    16-bit values from the low half of M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_unpacklo_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_punpcklwd
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_punpcklwd
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_unpacklo_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Interleave the 32-bit value from the low half of M1 with the 32-bit    value from the low half of M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_unpacklo_pi32
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_punpckldq
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_punpckldq
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_unpacklo_pi32
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Add the 8-bit values in M1 to the 8-bit values in M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_add_pi8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_paddb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_paddb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_add_pi8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Add the 16-bit values in M1 to the 16-bit values in M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_add_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_paddw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_paddw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_add_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Add the 32-bit values in M1 to the 32-bit values in M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_add_pi32
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_paddd
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_paddd
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_add_pi32
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Add the 64-bit values in M1 to the 64-bit values in M2.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__SSE2__
end_ifdef

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_add_si64
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_paddq
argument_list|(
operator|(
name|long
name|long
operator|)
name|__m1
argument_list|,
operator|(
name|long
name|long
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Add the 8-bit values in M1 to the 8-bit values in M2 using signed    saturated arithmetic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_adds_pi8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_paddsb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_paddsb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_adds_pi8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Add the 16-bit values in M1 to the 16-bit values in M2 using signed    saturated arithmetic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_adds_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_paddsw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_paddsw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_adds_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Add the 8-bit values in M1 to the 8-bit values in M2 using unsigned    saturated arithmetic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_adds_pu8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_paddusb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_paddusb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_adds_pu8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Add the 16-bit values in M1 to the 16-bit values in M2 using unsigned    saturated arithmetic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_adds_pu16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_paddusw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_paddusw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_adds_pu16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Subtract the 8-bit values in M2 from the 8-bit values in M1.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sub_pi8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psubb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psubb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_sub_pi8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Subtract the 16-bit values in M2 from the 16-bit values in M1.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sub_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psubw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psubw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_sub_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Subtract the 32-bit values in M2 from the 32-bit values in M1.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sub_pi32
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psubd
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psubd
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_sub_pi32
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Add the 64-bit values in M1 to the 64-bit values in M2.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__SSE2__
end_ifdef

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sub_si64
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psubq
argument_list|(
operator|(
name|long
name|long
operator|)
name|__m1
argument_list|,
operator|(
name|long
name|long
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Subtract the 8-bit values in M2 from the 8-bit values in M1 using signed    saturating arithmetic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_subs_pi8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psubsb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psubsb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_subs_pi8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Subtract the 16-bit values in M2 from the 16-bit values in M1 using    signed saturating arithmetic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_subs_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psubsw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psubsw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_subs_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Subtract the 8-bit values in M2 from the 8-bit values in M1 using    unsigned saturating arithmetic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_subs_pu8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psubusb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psubusb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_subs_pu8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Subtract the 16-bit values in M2 from the 16-bit values in M1 using    unsigned saturating arithmetic.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_subs_pu16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psubusw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psubusw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_subs_pu16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Multiply four 16-bit values in M1 by four 16-bit values in M2 producing    four 32-bit intermediate results, which are then summed by pairs to    produce two 32-bit results.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_madd_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pmaddwd
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pmaddwd
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_madd_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Multiply four signed 16-bit values in M1 by four signed 16-bit values in    M2 and produce the high 16 bits of the 32-bit results.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_mulhi_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pmulhw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pmulhw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_mulhi_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Multiply four 16-bit values in M1 by four 16-bit values in M2 and produce    the low 16 bits of the results.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_mullo_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pmullw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pmullw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_mullo_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Shift four 16-bit values in M left by COUNT.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sll_pi16
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psllw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psllw
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
name|_mm_sll_pi16
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_slli_pi16
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psllw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psllwi
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
name|_mm_slli_pi16
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Shift two 32-bit values in M left by COUNT.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sll_pi32
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pslld
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pslld
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
name|_mm_sll_pi32
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_slli_pi32
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pslld
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pslldi
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
name|_mm_slli_pi32
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Shift the 64-bit value in M left by COUNT.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sll_si64
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psllq
argument_list|(
operator|(
name|long
name|long
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psllq
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
name|_mm_sll_si64
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_slli_si64
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psllq
argument_list|(
operator|(
name|long
name|long
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psllqi
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
name|_mm_slli_si64
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Shift four 16-bit values in M right by COUNT; shift in the sign bit.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sra_pi16
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psraw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psraw
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
name|_mm_sra_pi16
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_srai_pi16
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psraw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psrawi
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
name|_mm_srai_pi16
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Shift two 32-bit values in M right by COUNT; shift in the sign bit.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_sra_pi32
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psrad
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psrad
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
name|_mm_sra_pi32
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_srai_pi32
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psrad
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psradi
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
name|_mm_srai_pi32
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Shift four 16-bit values in M right by COUNT; shift in zeros.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_srl_pi16
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psrlw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psrlw
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
name|_mm_srl_pi16
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_srli_pi16
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psrlw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psrlwi
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
name|_mm_srli_pi16
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Shift two 32-bit values in M right by COUNT; shift in zeros.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_srl_pi32
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psrld
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psrld
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
name|_mm_srl_pi32
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_srli_pi32
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psrld
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psrldi
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
name|_mm_srli_pi32
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Shift the 64-bit value in M left by COUNT; shift in zeros.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_srl_si64
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psrlq
argument_list|(
operator|(
name|long
name|long
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psrlq
argument_list|(
name|__m64
name|__m
argument_list|,
name|__m64
name|__count
argument_list|)
block|{
return|return
name|_mm_srl_si64
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_srli_si64
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psrlq
argument_list|(
operator|(
name|long
name|long
operator|)
name|__m
argument_list|,
operator|(
name|long
name|long
operator|)
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_psrlqi
argument_list|(
name|__m64
name|__m
argument_list|,
name|int
name|__count
argument_list|)
block|{
return|return
name|_mm_srli_si64
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Bit-wise AND the 64-bit values in M1 and M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_and_si64
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|__builtin_ia32_pand
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pand
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_and_si64
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Bit-wise complement the 64-bit value in M1 and bit-wise AND it with the    64-bit value in M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_andnot_si64
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|__builtin_ia32_pandn
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pandn
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_andnot_si64
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Bit-wise inclusive OR the 64-bit values in M1 and M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_or_si64
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|__builtin_ia32_por
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_por
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_or_si64
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Bit-wise exclusive OR the 64-bit values in M1 and M2.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_xor_si64
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|__builtin_ia32_pxor
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pxor
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_xor_si64
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Compare eight 8-bit values.  The result of the comparison is 0xFF if the    test is true and zero if false.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cmpeq_pi8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pcmpeqb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pcmpeqb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_cmpeq_pi8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cmpgt_pi8
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pcmpgtb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pcmpgtb
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_cmpgt_pi8
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Compare four 16-bit values.  The result of the comparison is 0xFFFF if    the test is true and zero if false.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cmpeq_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pcmpeqw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pcmpeqw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_cmpeq_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cmpgt_pi16
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pcmpgtw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pcmpgtw
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_cmpgt_pi16
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Compare two 32-bit values.  The result of the comparison is 0xFFFFFFFF if    the test is true and zero if false.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cmpeq_pi32
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pcmpeqd
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pcmpeqd
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_cmpeq_pi32
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_cmpgt_pi32
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pcmpgtd
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_m_pcmpgtd
argument_list|(
name|__m64
name|__m1
argument_list|,
name|__m64
name|__m2
argument_list|)
block|{
return|return
name|_mm_cmpgt_pi32
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Creates a 64-bit zero.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_setzero_si64
argument_list|(
name|void
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
literal|0LL
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Creates a vector of two 32-bit values; I0 is least significant.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_set_pi32
argument_list|(
name|int
name|__i1
argument_list|,
name|int
name|__i0
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_vec_init_v2si
argument_list|(
name|__i0
argument_list|,
name|__i1
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Creates a vector of four 16-bit values; W0 is least significant.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_set_pi16
argument_list|(
name|short
name|__w3
argument_list|,
name|short
name|__w2
argument_list|,
name|short
name|__w1
argument_list|,
name|short
name|__w0
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_vec_init_v4hi
argument_list|(
name|__w0
argument_list|,
name|__w1
argument_list|,
name|__w2
argument_list|,
name|__w3
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Creates a vector of eight 8-bit values; B0 is least significant.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_set_pi8
argument_list|(
name|char
name|__b7
argument_list|,
name|char
name|__b6
argument_list|,
name|char
name|__b5
argument_list|,
name|char
name|__b4
argument_list|,
name|char
name|__b3
argument_list|,
name|char
name|__b2
argument_list|,
name|char
name|__b1
argument_list|,
name|char
name|__b0
argument_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_vec_init_v8qi
argument_list|(
name|__b0
argument_list|,
name|__b1
argument_list|,
name|__b2
argument_list|,
name|__b3
argument_list|,
name|__b4
argument_list|,
name|__b5
argument_list|,
name|__b6
argument_list|,
name|__b7
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Similar, but with the arguments in reverse order.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_setr_pi32
argument_list|(
name|int
name|__i0
argument_list|,
name|int
name|__i1
argument_list|)
block|{
return|return
name|_mm_set_pi32
argument_list|(
name|__i1
argument_list|,
name|__i0
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_setr_pi16
argument_list|(
name|short
name|__w0
argument_list|,
name|short
name|__w1
argument_list|,
name|short
name|__w2
argument_list|,
name|short
name|__w3
argument_list|)
block|{
return|return
name|_mm_set_pi16
argument_list|(
name|__w3
argument_list|,
name|__w2
argument_list|,
name|__w1
argument_list|,
name|__w0
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_setr_pi8
argument_list|(
name|char
name|__b0
argument_list|,
name|char
name|__b1
argument_list|,
name|char
name|__b2
argument_list|,
name|char
name|__b3
argument_list|,
name|char
name|__b4
argument_list|,
name|char
name|__b5
argument_list|,
name|char
name|__b6
argument_list|,
name|char
name|__b7
argument_list|)
block|{
return|return
name|_mm_set_pi8
argument_list|(
name|__b7
argument_list|,
name|__b6
argument_list|,
name|__b5
argument_list|,
name|__b4
argument_list|,
name|__b3
argument_list|,
name|__b2
argument_list|,
name|__b1
argument_list|,
name|__b0
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Creates a vector of two 32-bit values, both elements containing I.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_set1_pi32
argument_list|(
name|int
name|__i
argument_list|)
block|{
return|return
name|_mm_set_pi32
argument_list|(
name|__i
argument_list|,
name|__i
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Creates a vector of four 16-bit values, all elements containing W.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_set1_pi16
argument_list|(
name|short
name|__w
argument_list|)
block|{
return|return
name|_mm_set_pi16
argument_list|(
name|__w
argument_list|,
name|__w
argument_list|,
name|__w
argument_list|,
name|__w
argument_list|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/* Creates a vector of eight 8-bit values, all elements containing B.  */
end_comment

begin_decl_stmt
specifier|static
name|__inline
name|__m64
name|__attribute__
argument_list|(
operator|(
name|__always_inline__
operator|)
argument_list|)
name|_mm_set1_pi8
argument_list|(
name|char
name|__b
argument_list|)
block|{
return|return
name|_mm_set_pi8
argument_list|(
name|__b
argument_list|,
name|__b
argument_list|,
name|__b
argument_list|,
name|__b
argument_list|,
name|__b
argument_list|,
name|__b
argument_list|,
name|__b
argument_list|,
name|__b
argument_list|)
return|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __MMX__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MMINTRIN_H_INCLUDED */
end_comment

end_unit

