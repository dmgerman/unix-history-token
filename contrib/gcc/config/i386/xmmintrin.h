begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2002 Free Software Foundation, Inc.     This file is part of GNU CC.     GNU CC is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GNU CC is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GNU CC; see the file COPYING.  If not, write to    the Free Software Foundation, 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you include this header file into source    files compiled by GCC, this header file does not by itself cause    the resulting executable to be covered by the GNU General Public    License.  This exception does not however invalidate any other    reasons why the executable file might be covered by the GNU General    Public License.  */
end_comment

begin_comment
comment|/* Implemented from the specification included in the Intel C++ Compiler    User Guide and Reference, version 5.0.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_XMMINTRIN_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|_XMMINTRIN_H_INCLUDED
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__SSE__
end_ifndef

begin_error
error|#
directive|error
literal|"SSE instruction set not enabled"
end_error

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* We need type definitions from the MMX header file.  */
end_comment

begin_include
include|#
directive|include
file|<mmintrin.h>
end_include

begin_comment
comment|/* The data type indended for user use.  */
end_comment

begin_typedef
typedef|typedef
name|int
name|__m128
name|__attribute__
typedef|((
name|__mode__
typedef|(
name|__V4SF__
typedef|)));
end_typedef

begin_comment
comment|/* Internal data types for implementing the instrinsics.  */
end_comment

begin_typedef
typedef|typedef
name|int
name|__v4sf
name|__attribute__
typedef|((
name|__mode__
typedef|(
name|__V4SF__
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|__v4si
name|__attribute__
typedef|((
name|__mode__
typedef|(
name|__V4SI__
typedef|)));
end_typedef

begin_comment
comment|/* Create a selector for use with the SHUFPS instruction.  */
end_comment

begin_define
define|#
directive|define
name|_MM_SHUFFLE
parameter_list|(
name|fp3
parameter_list|,
name|fp2
parameter_list|,
name|fp1
parameter_list|,
name|fp0
parameter_list|)
define|\
value|(((fp3)<< 6) | ((fp2)<< 4) | ((fp1)<< 2) | (fp0))
end_define

begin_comment
comment|/* Constants for use with _mm_prefetch.  */
end_comment

begin_enum
enum|enum
name|_mm_hint
block|{
name|_MM_HINT_T0
init|=
literal|3
block|,
name|_MM_HINT_T1
init|=
literal|2
block|,
name|_MM_HINT_T2
init|=
literal|1
block|,
name|_MM_HINT_NTA
init|=
literal|0
block|}
enum|;
end_enum

begin_comment
comment|/* Bits in the MXCSR.  */
end_comment

begin_define
define|#
directive|define
name|_MM_EXCEPT_MASK
value|0x003f
end_define

begin_define
define|#
directive|define
name|_MM_EXCEPT_INVALID
value|0x0001
end_define

begin_define
define|#
directive|define
name|_MM_EXCEPT_DENORM
value|0x0002
end_define

begin_define
define|#
directive|define
name|_MM_EXCEPT_DIV_ZERO
value|0x0004
end_define

begin_define
define|#
directive|define
name|_MM_EXCEPT_OVERFLOW
value|0x0008
end_define

begin_define
define|#
directive|define
name|_MM_EXCEPT_UNDERFLOW
value|0x0010
end_define

begin_define
define|#
directive|define
name|_MM_EXCEPT_INEXACT
value|0x0020
end_define

begin_define
define|#
directive|define
name|_MM_MASK_MASK
value|0x1f80
end_define

begin_define
define|#
directive|define
name|_MM_MASK_INVALID
value|0x0080
end_define

begin_define
define|#
directive|define
name|_MM_MASK_DENORM
value|0x0100
end_define

begin_define
define|#
directive|define
name|_MM_MASK_DIV_ZERO
value|0x0200
end_define

begin_define
define|#
directive|define
name|_MM_MASK_OVERFLOW
value|0x0400
end_define

begin_define
define|#
directive|define
name|_MM_MASK_UNDERFLOW
value|0x0800
end_define

begin_define
define|#
directive|define
name|_MM_MASK_INEXACT
value|0x1000
end_define

begin_define
define|#
directive|define
name|_MM_ROUND_MASK
value|0x6000
end_define

begin_define
define|#
directive|define
name|_MM_ROUND_NEAREST
value|0x0000
end_define

begin_define
define|#
directive|define
name|_MM_ROUND_DOWN
value|0x2000
end_define

begin_define
define|#
directive|define
name|_MM_ROUND_UP
value|0x4000
end_define

begin_define
define|#
directive|define
name|_MM_ROUND_TOWARD_ZERO
value|0x6000
end_define

begin_define
define|#
directive|define
name|_MM_FLUSH_ZERO_MASK
value|0x8000
end_define

begin_define
define|#
directive|define
name|_MM_FLUSH_ZERO_ON
value|0x8000
end_define

begin_define
define|#
directive|define
name|_MM_FLUSH_ZERO_OFF
value|0x0000
end_define

begin_comment
comment|/* Perform the respective operation on the lower SPFP (single-precision    floating-point) values of A and B; the upper three SPFP values are    passed through from A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_add_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_addss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_sub_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_subss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_mul_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_mulss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_div_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_divss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_sqrt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_sqrtss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_rcp_ss
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_rcpss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_rsqrt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_rsqrtss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_min_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_minss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_max_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_maxss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Perform the respective operation on the four SPFP values in A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_add_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_addps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_sub_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_subps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_mul_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_mulps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_div_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_divps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_sqrt_ps
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_sqrtps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_rcp_ps
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_rcpps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_rsqrt_ps
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_rsqrtps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_min_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_minps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_max_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_maxps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Perform logical bit-wise operations on 128-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_and_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_andps
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_andnot_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_andnps
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_or_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_orps
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_xor_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_xorps
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Perform a comparison on the lower SPFP values of A and B.  If the    comparison is true, place a mask of all ones in the result, otherwise a    mask of zeros.  The upper three SPFP values are passed through from A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpeq_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpeqss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmplt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpltss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmple_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpless
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpgt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__builtin_ia32_cmpltss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__B
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpge_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__builtin_ia32_cmpless
argument_list|(
operator|(
name|__v4sf
operator|)
name|__B
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpneq_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpneqss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpnlt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpnltss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpnle_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpnless
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpngt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__builtin_ia32_cmpnltss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__B
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpnge_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__builtin_ia32_cmpnless
argument_list|(
operator|(
name|__v4sf
operator|)
name|__B
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpord_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpordss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpunord_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpunordss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Perform a comparison on the four SPFP values of A and B.  For each    element, if the comparison is true, place a mask of all ones in the    result, otherwise a mask of zeros.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpeq_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpeqps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmplt_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpltps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmple_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpleps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpgt_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpgtps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpge_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpgeps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpneq_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpneqps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpnlt_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpnltps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpnle_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpnleps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpngt_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpngtps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpnge_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpngeps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpord_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpordps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cmpunord_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cmpunordps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compare the lower SPFP values of A and B and return 1 if true    and 0 if false.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|_mm_comieq_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comieq
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comilt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comilt
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comile_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comile
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comigt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comigt
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comige_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comige
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comineq_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comineq
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomieq_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomieq
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomilt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomilt
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomile_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomile
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomigt_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomigt
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomige_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomige
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomineq_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomineq
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convert the lower SPFP value to a 32-bit integer according to the current    rounding mode.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|_mm_cvtss_si32
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_cvtss2si
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_comment
comment|/* Convert the lower SPFP value to a 32-bit integer according to the current    rounding mode.  */
end_comment

begin_function
specifier|static
name|__inline
name|long
name|long
name|_mm_cvtss_si64x
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_cvtss2si64
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Convert the two lower SPFP values to 32-bit integers according to the    current rounding mode.  Return the integers in packed form.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cvtps_pi32
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_cvtps2pi
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Truncate the lower SPFP value to a 32-bit integer.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|_mm_cvttss_si32
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_cvttss2si
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_comment
comment|/* Truncate the lower SPFP value to a 32-bit integer.  */
end_comment

begin_function
specifier|static
name|__inline
name|long
name|long
name|_mm_cvttss_si64x
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_cvttss2si64
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Truncate the two lower SPFP values to 32-bit integers.  Return the    integers in packed form.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cvttps_pi32
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_cvttps2pi
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convert B to a SPFP value and insert it as element zero in A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtsi32_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cvtsi2ss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_comment
comment|/* Convert B to a SPFP value and insert it as element zero in A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtsi64x_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|long
name|long
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cvtsi642ss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Convert the two 32-bit values in B to SPFP form and insert them    as the two lower elements in A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtpi32_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cvtpi2ps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convert the four signed 16-bit values in A to SPFP form.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtpi16_ps
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
name|__v4hi
name|__sign
decl_stmt|;
name|__v2si
name|__hisi
decl_stmt|,
name|__losi
decl_stmt|;
name|__v4sf
name|__r
decl_stmt|;
comment|/* This comparison against zero gives us a mask that can be used to      fill in the missing sign bits in the unpack operations below, so      that we get signed values after unpacking.  */
name|__sign
operator|=
operator|(
name|__v4hi
operator|)
name|__builtin_ia32_mmx_zero
argument_list|()
expr_stmt|;
name|__sign
operator|=
name|__builtin_ia32_pcmpgtw
argument_list|(
name|__sign
argument_list|,
operator|(
name|__v4hi
operator|)
name|__A
argument_list|)
expr_stmt|;
comment|/* Convert the four words to doublewords.  */
name|__hisi
operator|=
operator|(
name|__v2si
operator|)
name|__builtin_ia32_punpckhwd
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
name|__sign
argument_list|)
expr_stmt|;
name|__losi
operator|=
operator|(
name|__v2si
operator|)
name|__builtin_ia32_punpcklwd
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
name|__sign
argument_list|)
expr_stmt|;
comment|/* Convert the doublewords to floating point two at a time.  */
name|__r
operator|=
operator|(
name|__v4sf
operator|)
name|__builtin_ia32_setzerops
argument_list|()
expr_stmt|;
name|__r
operator|=
name|__builtin_ia32_cvtpi2ps
argument_list|(
name|__r
argument_list|,
name|__hisi
argument_list|)
expr_stmt|;
name|__r
operator|=
name|__builtin_ia32_movlhps
argument_list|(
name|__r
argument_list|,
name|__r
argument_list|)
expr_stmt|;
name|__r
operator|=
name|__builtin_ia32_cvtpi2ps
argument_list|(
name|__r
argument_list|,
name|__losi
argument_list|)
expr_stmt|;
return|return
operator|(
name|__m128
operator|)
name|__r
return|;
block|}
end_function

begin_comment
comment|/* Convert the four unsigned 16-bit values in A to SPFP form.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtpu16_ps
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
name|__v4hi
name|__zero
init|=
operator|(
name|__v4hi
operator|)
name|__builtin_ia32_mmx_zero
argument_list|()
decl_stmt|;
name|__v2si
name|__hisi
decl_stmt|,
name|__losi
decl_stmt|;
name|__v4sf
name|__r
decl_stmt|;
comment|/* Convert the four words to doublewords.  */
name|__hisi
operator|=
operator|(
name|__v2si
operator|)
name|__builtin_ia32_punpckhwd
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
name|__zero
argument_list|)
expr_stmt|;
name|__losi
operator|=
operator|(
name|__v2si
operator|)
name|__builtin_ia32_punpcklwd
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
name|__zero
argument_list|)
expr_stmt|;
comment|/* Convert the doublewords to floating point two at a time.  */
name|__r
operator|=
operator|(
name|__v4sf
operator|)
name|__builtin_ia32_setzerops
argument_list|()
expr_stmt|;
name|__r
operator|=
name|__builtin_ia32_cvtpi2ps
argument_list|(
name|__r
argument_list|,
name|__hisi
argument_list|)
expr_stmt|;
name|__r
operator|=
name|__builtin_ia32_movlhps
argument_list|(
name|__r
argument_list|,
name|__r
argument_list|)
expr_stmt|;
name|__r
operator|=
name|__builtin_ia32_cvtpi2ps
argument_list|(
name|__r
argument_list|,
name|__losi
argument_list|)
expr_stmt|;
return|return
operator|(
name|__m128
operator|)
name|__r
return|;
block|}
end_function

begin_comment
comment|/* Convert the low four signed 8-bit values in A to SPFP form.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtpi8_ps
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
name|__v8qi
name|__sign
decl_stmt|;
comment|/* This comparison against zero gives us a mask that can be used to      fill in the missing sign bits in the unpack operations below, so      that we get signed values after unpacking.  */
name|__sign
operator|=
operator|(
name|__v8qi
operator|)
name|__builtin_ia32_mmx_zero
argument_list|()
expr_stmt|;
name|__sign
operator|=
name|__builtin_ia32_pcmpgtb
argument_list|(
name|__sign
argument_list|,
operator|(
name|__v8qi
operator|)
name|__A
argument_list|)
expr_stmt|;
comment|/* Convert the four low bytes to words.  */
name|__A
operator|=
operator|(
name|__m64
operator|)
name|__builtin_ia32_punpcklbw
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
name|__sign
argument_list|)
expr_stmt|;
return|return
name|_mm_cvtpi16_ps
argument_list|(
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convert the low four unsigned 8-bit values in A to SPFP form.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtpu8_ps
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
name|__v8qi
name|__zero
init|=
operator|(
name|__v8qi
operator|)
name|__builtin_ia32_mmx_zero
argument_list|()
decl_stmt|;
name|__A
operator|=
operator|(
name|__m64
operator|)
name|__builtin_ia32_punpcklbw
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
name|__zero
argument_list|)
expr_stmt|;
return|return
name|_mm_cvtpu16_ps
argument_list|(
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convert the four signed 32-bit values in A and B to SPFP form.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtpi32x2_ps
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
name|__v4sf
name|__zero
init|=
operator|(
name|__v4sf
operator|)
name|__builtin_ia32_setzerops
argument_list|()
decl_stmt|;
name|__v4sf
name|__sfa
init|=
name|__builtin_ia32_cvtpi2ps
argument_list|(
name|__zero
argument_list|,
operator|(
name|__v2si
operator|)
name|__A
argument_list|)
decl_stmt|;
name|__v4sf
name|__sfb
init|=
name|__builtin_ia32_cvtpi2ps
argument_list|(
name|__zero
argument_list|,
operator|(
name|__v2si
operator|)
name|__B
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movlhps
argument_list|(
name|__sfa
argument_list|,
name|__sfb
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convert the four SPFP values in A to four signed 16-bit integers.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cvtps_pi16
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
name|__v4sf
name|__hisf
init|=
operator|(
name|__v4sf
operator|)
name|__A
decl_stmt|;
name|__v4sf
name|__losf
init|=
name|__builtin_ia32_movhlps
argument_list|(
name|__hisf
argument_list|,
name|__hisf
argument_list|)
decl_stmt|;
name|__v2si
name|__hisi
init|=
name|__builtin_ia32_cvtps2pi
argument_list|(
name|__hisf
argument_list|)
decl_stmt|;
name|__v2si
name|__losi
init|=
name|__builtin_ia32_cvtps2pi
argument_list|(
name|__losf
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_packssdw
argument_list|(
name|__hisi
argument_list|,
name|__losi
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convert the four SPFP values in A to four signed 8-bit integers.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cvtps_pi8
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
name|__v4hi
name|__tmp
init|=
operator|(
name|__v4hi
operator|)
name|_mm_cvtps_pi16
argument_list|(
name|__A
argument_list|)
decl_stmt|;
name|__v4hi
name|__zero
init|=
operator|(
name|__v4hi
operator|)
name|__builtin_ia32_mmx_zero
argument_list|()
decl_stmt|;
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_packsswb
argument_list|(
name|__tmp
argument_list|,
name|__zero
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Selects four specific SPFP values from A and B based on MASK.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_else
unit|static __inline __m128 _mm_shuffle_ps (__m128 __A, __m128 __B, int __mask) {   return (__m128) __builtin_ia32_shufps ((__v4sf)__A, (__v4sf)__B, __mask); }
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_mm_shuffle_ps
parameter_list|(
name|A
parameter_list|,
name|B
parameter_list|,
name|MASK
parameter_list|)
define|\
value|((__m128) __builtin_ia32_shufps ((__v4sf)(A), (__v4sf)(B), (MASK)))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Selects and interleaves the upper two SPFP values from A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_unpackhi_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_unpckhps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Selects and interleaves the lower two SPFP values from A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_unpacklo_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_unpcklps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Sets the upper two SPFP values with 64-bits of data loaded from P;    the lower two values are passed through from A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_loadh_pi
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m64
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_loadhps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|*
operator|)
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Stores the upper two SPFP values of A into P.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_storeh_pi
parameter_list|(
name|__m64
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|__builtin_ia32_storehps
argument_list|(
operator|(
name|__v2si
operator|*
operator|)
name|__P
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Moves the upper two values of B into the lower two values of A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_movehl_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movhlps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Moves the lower two values of B into the upper two values of A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_movelh_ps
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movlhps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Sets the lower two SPFP values with 64-bits of data loaded from P;    the upper two values are passed through from A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_loadl_pi
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m64
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_loadlps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|*
operator|)
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Stores the lower two SPFP values of A into P.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_storel_pi
parameter_list|(
name|__m64
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|__builtin_ia32_storelps
argument_list|(
operator|(
name|__v2si
operator|*
operator|)
name|__P
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Creates a 4-bit mask from the most significant bits of the SPFP values.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|_mm_movemask_ps
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_movmskps
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Return the contents of the control register.  */
end_comment

begin_function
specifier|static
name|__inline
name|unsigned
name|int
name|_mm_getcsr
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|__builtin_ia32_stmxcsr
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/* Read exception bits from the control register.  */
end_comment

begin_function
specifier|static
name|__inline
name|unsigned
name|int
name|_MM_GET_EXCEPTION_STATE
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|_mm_getcsr
argument_list|()
operator|&
name|_MM_EXCEPT_MASK
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|unsigned
name|int
name|_MM_GET_EXCEPTION_MASK
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|_mm_getcsr
argument_list|()
operator|&
name|_MM_MASK_MASK
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|unsigned
name|int
name|_MM_GET_ROUNDING_MODE
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|_mm_getcsr
argument_list|()
operator|&
name|_MM_ROUND_MASK
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|unsigned
name|int
name|_MM_GET_FLUSH_ZERO_MODE
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|_mm_getcsr
argument_list|()
operator|&
name|_MM_FLUSH_ZERO_MASK
return|;
block|}
end_function

begin_comment
comment|/* Set the control register to I.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_setcsr
parameter_list|(
name|unsigned
name|int
name|__I
parameter_list|)
block|{
name|__builtin_ia32_ldmxcsr
argument_list|(
name|__I
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Set exception bits in the control register.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_MM_SET_EXCEPTION_STATE
parameter_list|(
name|unsigned
name|int
name|__mask
parameter_list|)
block|{
name|_mm_setcsr
argument_list|(
operator|(
name|_mm_getcsr
argument_list|()
operator|&
operator|~
name|_MM_EXCEPT_MASK
operator|)
operator||
name|__mask
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_MM_SET_EXCEPTION_MASK
parameter_list|(
name|unsigned
name|int
name|__mask
parameter_list|)
block|{
name|_mm_setcsr
argument_list|(
operator|(
name|_mm_getcsr
argument_list|()
operator|&
operator|~
name|_MM_MASK_MASK
operator|)
operator||
name|__mask
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_MM_SET_ROUNDING_MODE
parameter_list|(
name|unsigned
name|int
name|__mode
parameter_list|)
block|{
name|_mm_setcsr
argument_list|(
operator|(
name|_mm_getcsr
argument_list|()
operator|&
operator|~
name|_MM_ROUND_MASK
operator|)
operator||
name|__mode
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_MM_SET_FLUSH_ZERO_MODE
parameter_list|(
name|unsigned
name|int
name|__mode
parameter_list|)
block|{
name|_mm_setcsr
argument_list|(
operator|(
name|_mm_getcsr
argument_list|()
operator|&
operator|~
name|_MM_FLUSH_ZERO_MASK
operator|)
operator||
name|__mode
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Create a vector with element 0 as *P and the rest zero.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_load_ss
parameter_list|(
name|float
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_loadss
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector with all four elements equal to *P.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_load1_ps
parameter_list|(
name|float
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
name|__v4sf
name|__tmp
init|=
name|__builtin_ia32_loadss
argument_list|(
name|__P
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_shufps
argument_list|(
name|__tmp
argument_list|,
name|__tmp
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_load_ps1
parameter_list|(
name|float
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
name|_mm_load1_ps
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Load four SPFP values from P.  The address must be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_load_ps
parameter_list|(
name|float
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_loadaps
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Load four SPFP values from P.  The address need not be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_loadu_ps
parameter_list|(
name|float
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_loadups
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Load four SPFP values in reverse order.  The address must be aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_loadr_ps
parameter_list|(
name|float
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
name|__v4sf
name|__tmp
init|=
name|__builtin_ia32_loadaps
argument_list|(
name|__P
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_shufps
argument_list|(
name|__tmp
argument_list|,
name|__tmp
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector with element 0 as F and the rest zero.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_set_ss
parameter_list|(
name|float
name|__F
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_loadss
argument_list|(
operator|&
name|__F
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector with all four elements equal to F.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_set1_ps
parameter_list|(
name|float
name|__F
parameter_list|)
block|{
name|__v4sf
name|__tmp
init|=
name|__builtin_ia32_loadss
argument_list|(
operator|&
name|__F
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_shufps
argument_list|(
name|__tmp
argument_list|,
name|__tmp
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_set_ps1
parameter_list|(
name|float
name|__F
parameter_list|)
block|{
return|return
name|_mm_set1_ps
argument_list|(
name|__F
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [Z Y X W].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_set_ps
parameter_list|(
name|float
name|__Z
parameter_list|,
name|float
name|__Y
parameter_list|,
name|float
name|__X
parameter_list|,
name|float
name|__W
parameter_list|)
block|{
union|union
block|{
name|float
name|__a
index|[
literal|4
index|]
decl_stmt|;
name|__m128
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__W
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__X
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|2
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|3
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [W X Y Z].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_setr_ps
parameter_list|(
name|float
name|__Z
parameter_list|,
name|float
name|__Y
parameter_list|,
name|float
name|__X
parameter_list|,
name|float
name|__W
parameter_list|)
block|{
return|return
name|_mm_set_ps
argument_list|(
name|__W
argument_list|,
name|__X
argument_list|,
name|__Y
argument_list|,
name|__Z
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector of zeros.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_setzero_ps
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_setzerops
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/* Stores the lower SPFP value.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_store_ss
parameter_list|(
name|float
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|__builtin_ia32_storess
argument_list|(
name|__P
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Store the lower SPFP value across four words.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_store1_ps
parameter_list|(
name|float
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|__v4sf
name|__va
init|=
operator|(
name|__v4sf
operator|)
name|__A
decl_stmt|;
name|__v4sf
name|__tmp
init|=
name|__builtin_ia32_shufps
argument_list|(
name|__va
argument_list|,
name|__va
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|__builtin_ia32_storeaps
argument_list|(
name|__P
argument_list|,
name|__tmp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_store_ps1
parameter_list|(
name|float
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|_mm_store1_ps
argument_list|(
name|__P
argument_list|,
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Store four SPFP values.  The address must be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_store_ps
parameter_list|(
name|float
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|__builtin_ia32_storeaps
argument_list|(
name|__P
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Store four SPFP values.  The address need not be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_storeu_ps
parameter_list|(
name|float
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|__builtin_ia32_storeups
argument_list|(
name|__P
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Store four SPFP values in reverse order.  The address must be aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_storer_ps
parameter_list|(
name|float
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|__v4sf
name|__va
init|=
operator|(
name|__v4sf
operator|)
name|__A
decl_stmt|;
name|__v4sf
name|__tmp
init|=
name|__builtin_ia32_shufps
argument_list|(
name|__va
argument_list|,
name|__va
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|__builtin_ia32_storeaps
argument_list|(
name|__P
argument_list|,
name|__tmp
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Sets the low SPFP value of A from the low value of B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_move_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_movss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Extracts one of the four words of A.  The selector N must be immediate.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_else
unit|static __inline int _mm_extract_pi16 (__m64 __A, int __N) {   return __builtin_ia32_pextrw ((__v4hi)__A, __N); }
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_mm_extract_pi16
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
define|\
value|__builtin_ia32_pextrw ((__v4hi)(A), (N))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Inserts word D into one of four words of A.  The selector N must be    immediate.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_else
unit|static __inline __m64 _mm_insert_pi16 (__m64 __A, int __D, int __N) {   return (__m64)__builtin_ia32_pinsrw ((__v4hi)__A, __D, __N); }
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_mm_insert_pi16
parameter_list|(
name|A
parameter_list|,
name|D
parameter_list|,
name|N
parameter_list|)
define|\
value|((__m64) __builtin_ia32_pinsrw ((__v4hi)(A), (D), (N)))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Compute the element-wise maximum of signed 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_max_pi16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pmaxsw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise maximum of unsigned 8-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_max_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pmaxub
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise minimum of signed 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_min_pi16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pminsw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise minimum of unsigned 8-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_min_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pminub
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create an 8-bit mask of the signs of 8-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|_mm_movemask_pi8
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_pmovmskb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Multiply four unsigned 16-bit values in A by four unsigned 16-bit values    in B and produce the high 16 bits of the 32-bit results.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_mulhi_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pmulhuw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Return a combination of the four 16-bit values in A.  The selector    must be an immediate.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_else
unit|static __inline __m64 _mm_shuffle_pi16 (__m64 __A, int __N) {   return (__m64) __builtin_ia32_pshufw ((__v4hi)__A, __N); }
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_mm_shuffle_pi16
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
define|\
value|((__m64) __builtin_ia32_pshufw ((__v4hi)(A), (N)))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Conditionally store byte elements of A into P.  The high bit of each    byte in the selector N determines whether the corresponding byte from    A is stored.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_maskmove_si64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__N
parameter_list|,
name|char
modifier|*
name|__P
parameter_list|)
block|{
name|__builtin_ia32_maskmovq
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__N
argument_list|,
name|__P
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Compute the rounded averages of the unsigned 8-bit values in A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_avg_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pavgb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the rounded averages of the unsigned 16-bit values in A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_avg_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pavgw
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the sum of the absolute differences of the unsigned 8-bit    values in A and B.  Return the value in the lower 16-bit word; the    upper words are cleared.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sad_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_psadbw
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Loads one cache line from address P to a location "closer" to the    processor.  The selector I specifies the type of prefetch operation.  */
end_comment

begin_if
if|#
directive|if
literal|0
end_if

begin_else
unit|static __inline void _mm_prefetch (void *__P, enum _mm_hint __I) {   __builtin_prefetch (__P, 0, __I); }
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_mm_prefetch
parameter_list|(
name|P
parameter_list|,
name|I
parameter_list|)
define|\
value|__builtin_prefetch ((P), 0, (I))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Stores the data in A to the address P without polluting the caches.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_stream_pi
parameter_list|(
name|__m64
modifier|*
name|__P
parameter_list|,
name|__m64
name|__A
parameter_list|)
block|{
name|__builtin_ia32_movntq
argument_list|(
operator|(
name|unsigned
name|long
name|long
operator|*
operator|)
name|__P
argument_list|,
operator|(
name|unsigned
name|long
name|long
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Likewise.  The address must be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_stream_ps
parameter_list|(
name|float
modifier|*
name|__P
parameter_list|,
name|__m128
name|__A
parameter_list|)
block|{
name|__builtin_ia32_movntps
argument_list|(
name|__P
argument_list|,
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Guarantees that every preceeding store is globally visible before    any subsequent store.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_sfence
parameter_list|(
name|void
parameter_list|)
block|{
name|__builtin_ia32_sfence
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/* The execution of the next instruction is delayed by an implementation    specific amount of time.  The instruction does not modify the    architectural state.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_pause
parameter_list|(
name|void
parameter_list|)
block|{
asm|__asm__
specifier|__volatile__
asm|("rep; nop" : : );
block|}
end_function

begin_comment
comment|/* Transpose the 4x4 matrix composed of row[0-3].  */
end_comment

begin_define
define|#
directive|define
name|_MM_TRANSPOSE4_PS
parameter_list|(
name|row0
parameter_list|,
name|row1
parameter_list|,
name|row2
parameter_list|,
name|row3
parameter_list|)
define|\
value|do {									\   __v4sf __r0 = (row0), __r1 = (row1), __r2 = (row2), __r3 = (row3);	\   __v4sf __t0 = __builtin_ia32_shufps (__r0, __r1, 0x44);		\   __v4sf __t2 = __builtin_ia32_shufps (__r0, __r1, 0xEE);		\   __v4sf __t1 = __builtin_ia32_shufps (__r2, __r3, 0x44);		\   __v4sf __t3 = __builtin_ia32_shufps (__r2, __r3, 0xEE);		\   (row0) = __builtin_ia32_shufps (__t0, __t1, 0x88);			\   (row1) = __builtin_ia32_shufps (__t0, __t1, 0xDD);			\   (row2) = __builtin_ia32_shufps (__t2, __t3, 0x88);			\   (row3) = __builtin_ia32_shufps (__t2, __t3, 0xDD);			\ } while (0)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__SSE2__
end_ifdef

begin_comment
comment|/* SSE2 */
end_comment

begin_typedef
typedef|typedef
name|int
name|__v2df
name|__attribute__
typedef|((
name|mode
typedef|(
name|V2DF
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|__v2di
name|__attribute__
typedef|((
name|mode
typedef|(
name|V2DI
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|__v4si
name|__attribute__
typedef|((
name|mode
typedef|(
name|V4SI
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|__v8hi
name|__attribute__
typedef|((
name|mode
typedef|(
name|V8HI
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|__v16qi
name|__attribute__
typedef|((
name|mode
typedef|(
name|V16QI
typedef|)));
end_typedef

begin_comment
comment|/* Create a selector for use with the SHUFPD instruction.  */
end_comment

begin_define
define|#
directive|define
name|_MM_SHUFFLE2
parameter_list|(
name|fp1
parameter_list|,
name|fp0
parameter_list|)
define|\
value|(((fp1)<< 1) | (fp0))
end_define

begin_define
define|#
directive|define
name|__m128i
value|__v2di
end_define

begin_define
define|#
directive|define
name|__m128d
value|__v2df
end_define

begin_comment
comment|/* Create a vector with element 0 as *P and the rest zero.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_load_sd
parameter_list|(
name|double
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_loadsd
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector with all two elements equal to *P.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_load1_pd
parameter_list|(
name|double
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
name|__v2df
name|__tmp
init|=
name|__builtin_ia32_loadsd
argument_list|(
name|__P
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_shufpd
argument_list|(
name|__tmp
argument_list|,
name|__tmp
argument_list|,
name|_MM_SHUFFLE2
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_load_pd1
parameter_list|(
name|double
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
name|_mm_load1_pd
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Load two DPFP values from P.  The addresd must be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_load_pd
parameter_list|(
name|double
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_loadapd
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Load two DPFP values from P.  The addresd need not be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_loadu_pd
parameter_list|(
name|double
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_loadupd
argument_list|(
name|__P
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Load two DPFP values in reverse order.  The addresd must be aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_loadr_pd
parameter_list|(
name|double
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
name|__v2df
name|__tmp
init|=
name|__builtin_ia32_loadapd
argument_list|(
name|__P
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_shufpd
argument_list|(
name|__tmp
argument_list|,
name|__tmp
argument_list|,
name|_MM_SHUFFLE2
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector with element 0 as F and the rest zero.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_set_sd
parameter_list|(
name|double
name|__F
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_loadsd
argument_list|(
operator|&
name|__F
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector with all two elements equal to F.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_set1_pd
parameter_list|(
name|double
name|__F
parameter_list|)
block|{
name|__v2df
name|__tmp
init|=
name|__builtin_ia32_loadsd
argument_list|(
operator|&
name|__F
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_shufpd
argument_list|(
name|__tmp
argument_list|,
name|__tmp
argument_list|,
name|_MM_SHUFFLE2
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_set_pd1
parameter_list|(
name|double
name|__F
parameter_list|)
block|{
return|return
name|_mm_set1_pd
argument_list|(
name|__F
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [Z Y].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_set_pd
parameter_list|(
name|double
name|__Z
parameter_list|,
name|double
name|__Y
parameter_list|)
block|{
union|union
block|{
name|double
name|__a
index|[
literal|2
index|]
decl_stmt|;
name|__m128d
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [Y Z].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_setr_pd
parameter_list|(
name|double
name|__Z
parameter_list|,
name|double
name|__Y
parameter_list|)
block|{
return|return
name|_mm_set_pd
argument_list|(
name|__Y
argument_list|,
name|__Z
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector of zeros.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_setzero_pd
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_setzeropd
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/* Stores the lower DPFP value.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_store_sd
parameter_list|(
name|double
modifier|*
name|__P
parameter_list|,
name|__m128d
name|__A
parameter_list|)
block|{
name|__builtin_ia32_storesd
argument_list|(
name|__P
argument_list|,
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Store the lower DPFP value acrosd two words.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_store1_pd
parameter_list|(
name|double
modifier|*
name|__P
parameter_list|,
name|__m128d
name|__A
parameter_list|)
block|{
name|__v2df
name|__va
init|=
operator|(
name|__v2df
operator|)
name|__A
decl_stmt|;
name|__v2df
name|__tmp
init|=
name|__builtin_ia32_shufpd
argument_list|(
name|__va
argument_list|,
name|__va
argument_list|,
name|_MM_SHUFFLE2
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|__builtin_ia32_storeapd
argument_list|(
name|__P
argument_list|,
name|__tmp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_store_pd1
parameter_list|(
name|double
modifier|*
name|__P
parameter_list|,
name|__m128d
name|__A
parameter_list|)
block|{
name|_mm_store1_pd
argument_list|(
name|__P
argument_list|,
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Store two DPFP values.  The addresd must be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_store_pd
parameter_list|(
name|double
modifier|*
name|__P
parameter_list|,
name|__m128d
name|__A
parameter_list|)
block|{
name|__builtin_ia32_storeapd
argument_list|(
name|__P
argument_list|,
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Store two DPFP values.  The addresd need not be 16-byte aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_storeu_pd
parameter_list|(
name|double
modifier|*
name|__P
parameter_list|,
name|__m128d
name|__A
parameter_list|)
block|{
name|__builtin_ia32_storeupd
argument_list|(
name|__P
argument_list|,
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Store two DPFP values in reverse order.  The addresd must be aligned.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_storer_pd
parameter_list|(
name|double
modifier|*
name|__P
parameter_list|,
name|__m128d
name|__A
parameter_list|)
block|{
name|__v2df
name|__va
init|=
operator|(
name|__v2df
operator|)
name|__A
decl_stmt|;
name|__v2df
name|__tmp
init|=
name|__builtin_ia32_shufpd
argument_list|(
name|__va
argument_list|,
name|__va
argument_list|,
name|_MM_SHUFFLE2
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|__builtin_ia32_storeapd
argument_list|(
name|__P
argument_list|,
name|__tmp
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Sets the low DPFP value of A from the low value of B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_move_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_movsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_add_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_addpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_add_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_addsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_sub_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_subpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_sub_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_subsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_mul_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_mulpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_mul_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_mulsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_div_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_divpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_div_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_divsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_sqrt_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_sqrtpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Return pair {sqrt (A[0), B[1]}.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_sqrt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
name|__v2df
name|__tmp
init|=
name|__builtin_ia32_movsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_sqrtsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__tmp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_min_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_minpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_min_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_minsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_max_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_maxpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_max_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_maxsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_and_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_andpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_andnot_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_andnpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_or_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_orpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_xor_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_xorpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpeq_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpeqpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmplt_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpltpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmple_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmplepd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpgt_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpgtpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpge_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpgepd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpneq_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpneqpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpnlt_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpnltpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpnle_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpnlepd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpngt_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpngtpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpnge_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpngepd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpord_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpordpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpunord_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpunordpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpeq_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpeqsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmplt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpltsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmple_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmplesd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpgt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_movsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__builtin_ia32_cmpltsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__B
argument_list|,
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpge_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_movsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__builtin_ia32_cmplesd
argument_list|(
operator|(
name|__v2df
operator|)
name|__B
argument_list|,
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpneq_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpneqsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpnlt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpnltsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpnle_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpnlesd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpngt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_movsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__builtin_ia32_cmpnltsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__B
argument_list|,
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpnge_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_movsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__builtin_ia32_cmpnlesd
argument_list|(
operator|(
name|__v2df
operator|)
name|__B
argument_list|,
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpord_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpordsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cmpunord_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cmpunordsd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comieq_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comisdeq
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comilt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comisdlt
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comile_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comisdle
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comigt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comisdgt
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comige_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comisdge
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_comineq_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_comisdneq
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomieq_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomisdeq
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomilt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomisdlt
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomile_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomisdle
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomigt_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomisdgt
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomige_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomisdge
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_ucomineq_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
name|__builtin_ia32_ucomisdneq
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector with element 0 as *P and the rest zero.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_load_si128
parameter_list|(
name|__m128i
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_loaddqa
argument_list|(
operator|(
name|char
specifier|const
operator|*
operator|)
name|__P
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_loadu_si128
parameter_list|(
name|__m128i
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_loaddqu
argument_list|(
operator|(
name|char
specifier|const
operator|*
operator|)
name|__P
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_loadl_epi64
parameter_list|(
name|__m128i
specifier|const
modifier|*
name|__P
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
operator|*
operator|(
name|unsigned
name|long
name|long
operator|*
operator|)
name|__P
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_store_si128
parameter_list|(
name|__m128i
modifier|*
name|__P
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
name|__builtin_ia32_storedqa
argument_list|(
operator|(
name|char
operator|*
operator|)
name|__P
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_storeu_si128
parameter_list|(
name|__m128i
modifier|*
name|__P
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
name|__builtin_ia32_storedqu
argument_list|(
operator|(
name|char
operator|*
operator|)
name|__P
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_storel_epi64
parameter_list|(
name|__m128i
modifier|*
name|__P
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
operator|*
operator|(
name|long
name|long
operator|*
operator|)
name|__P
operator|=
name|__builtin_ia32_movdq2q
argument_list|(
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_movepi64_pi64
parameter_list|(
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_movdq2q
argument_list|(
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_move_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_movq
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create a vector of zeros.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_setzero_si128
parameter_list|(
name|void
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_setzero128
argument_list|()
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set_epi64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
name|__v2di
name|__tmp
init|=
operator|(
name|__v2di
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
operator|(
name|unsigned
name|long
name|long
operator|)
name|__A
argument_list|)
decl_stmt|;
name|__v2di
name|__tmp2
init|=
operator|(
name|__v2di
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
operator|(
name|unsigned
name|long
name|long
operator|)
name|__B
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpcklqdq128
argument_list|(
name|__tmp2
argument_list|,
name|__tmp
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [Z Y X W].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set_epi32
parameter_list|(
name|int
name|__Z
parameter_list|,
name|int
name|__Y
parameter_list|,
name|int
name|__X
parameter_list|,
name|int
name|__W
parameter_list|)
block|{
union|union
block|{
name|int
name|__a
index|[
literal|4
index|]
decl_stmt|;
name|__m128i
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__W
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__X
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|2
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|3
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_comment
comment|/* Create the vector [Z Y].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set_epi64x
parameter_list|(
name|long
name|long
name|__Z
parameter_list|,
name|long
name|long
name|__Y
parameter_list|)
block|{
union|union
block|{
name|long
name|__a
index|[
literal|2
index|]
decl_stmt|;
name|__m128i
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Create the vector [S T U V Z Y X W].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set_epi16
parameter_list|(
name|short
name|__Z
parameter_list|,
name|short
name|__Y
parameter_list|,
name|short
name|__X
parameter_list|,
name|short
name|__W
parameter_list|,
name|short
name|__V
parameter_list|,
name|short
name|__U
parameter_list|,
name|short
name|__T
parameter_list|,
name|short
name|__S
parameter_list|)
block|{
union|union
block|{
name|short
name|__a
index|[
literal|8
index|]
decl_stmt|;
name|__m128i
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__S
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__T
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|2
index|]
operator|=
name|__U
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|3
index|]
operator|=
name|__V
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|4
index|]
operator|=
name|__W
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|5
index|]
operator|=
name|__X
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|6
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|7
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [S T U V Z Y X W].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set_epi8
parameter_list|(
name|char
name|__Z
parameter_list|,
name|char
name|__Y
parameter_list|,
name|char
name|__X
parameter_list|,
name|char
name|__W
parameter_list|,
name|char
name|__V
parameter_list|,
name|char
name|__U
parameter_list|,
name|char
name|__T
parameter_list|,
name|char
name|__S
parameter_list|,
name|char
name|__Z1
parameter_list|,
name|char
name|__Y1
parameter_list|,
name|char
name|__X1
parameter_list|,
name|char
name|__W1
parameter_list|,
name|char
name|__V1
parameter_list|,
name|char
name|__U1
parameter_list|,
name|char
name|__T1
parameter_list|,
name|char
name|__S1
parameter_list|)
block|{
union|union
block|{
name|char
name|__a
index|[
literal|16
index|]
decl_stmt|;
name|__m128i
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__S1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__T1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|2
index|]
operator|=
name|__U1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|3
index|]
operator|=
name|__V1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|4
index|]
operator|=
name|__W1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|5
index|]
operator|=
name|__X1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|6
index|]
operator|=
name|__Y1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|7
index|]
operator|=
name|__Z1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|8
index|]
operator|=
name|__S
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|9
index|]
operator|=
name|__T
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|10
index|]
operator|=
name|__U
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|11
index|]
operator|=
name|__V
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|12
index|]
operator|=
name|__W
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|13
index|]
operator|=
name|__X
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|14
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|15
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set1_epi64
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
name|__v2di
name|__tmp
init|=
operator|(
name|__v2di
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
operator|(
name|unsigned
name|long
name|long
operator|)
name|__A
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpcklqdq128
argument_list|(
name|__tmp
argument_list|,
name|__tmp
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set1_epi32
parameter_list|(
name|int
name|__A
parameter_list|)
block|{
name|__v4si
name|__tmp
init|=
operator|(
name|__v4si
operator|)
name|__builtin_ia32_loadd
argument_list|(
operator|&
name|__A
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pshufd
argument_list|(
operator|(
name|__v4si
operator|)
name|__tmp
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set1_epi64x
parameter_list|(
name|long
name|long
name|__A
parameter_list|)
block|{
name|__v2di
name|__tmp
init|=
operator|(
name|__v2di
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
operator|(
name|unsigned
name|long
name|long
operator|)
name|__A
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_shufpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__tmp
argument_list|,
operator|(
name|__v2df
operator|)
name|__tmp
argument_list|,
name|_MM_SHUFFLE2
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set1_epi16
parameter_list|(
name|short
name|__A
parameter_list|)
block|{
name|int
name|__Acopy
init|=
operator|(
name|unsigned
name|short
operator|)
name|__A
decl_stmt|;
name|__v4si
name|__tmp
init|=
operator|(
name|__v4si
operator|)
name|__builtin_ia32_loadd
argument_list|(
operator|&
name|__Acopy
argument_list|)
decl_stmt|;
name|__tmp
operator|=
operator|(
name|__v4si
operator|)
name|__builtin_ia32_punpcklwd128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__tmp
argument_list|,
operator|(
name|__v8hi
operator|)
name|__tmp
argument_list|)
expr_stmt|;
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pshufd
argument_list|(
operator|(
name|__v4si
operator|)
name|__tmp
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_set1_epi8
parameter_list|(
name|char
name|__A
parameter_list|)
block|{
name|int
name|__Acopy
init|=
operator|(
name|unsigned
name|char
operator|)
name|__A
decl_stmt|;
name|__v4si
name|__tmp
init|=
operator|(
name|__v4si
operator|)
name|__builtin_ia32_loadd
argument_list|(
operator|&
name|__Acopy
argument_list|)
decl_stmt|;
name|__tmp
operator|=
operator|(
name|__v4si
operator|)
name|__builtin_ia32_punpcklbw128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__tmp
argument_list|,
operator|(
name|__v16qi
operator|)
name|__tmp
argument_list|)
expr_stmt|;
name|__tmp
operator|=
operator|(
name|__v4si
operator|)
name|__builtin_ia32_punpcklbw128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__tmp
argument_list|,
operator|(
name|__v16qi
operator|)
name|__tmp
argument_list|)
expr_stmt|;
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pshufd
argument_list|(
operator|(
name|__v4si
operator|)
name|__tmp
argument_list|,
name|_MM_SHUFFLE
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_setr_epi64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
name|__v2di
name|__tmp
init|=
operator|(
name|__v2di
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
operator|(
name|unsigned
name|long
name|long
operator|)
name|__A
argument_list|)
decl_stmt|;
name|__v2di
name|__tmp2
init|=
operator|(
name|__v2di
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
operator|(
name|unsigned
name|long
name|long
operator|)
name|__B
argument_list|)
decl_stmt|;
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpcklqdq128
argument_list|(
name|__tmp
argument_list|,
name|__tmp2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [Z Y X W].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_setr_epi32
parameter_list|(
name|int
name|__W
parameter_list|,
name|int
name|__X
parameter_list|,
name|int
name|__Y
parameter_list|,
name|int
name|__Z
parameter_list|)
block|{
union|union
block|{
name|int
name|__a
index|[
literal|4
index|]
decl_stmt|;
name|__m128i
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__W
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__X
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|2
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|3
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [S T U V Z Y X W].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_setr_epi16
parameter_list|(
name|short
name|__S
parameter_list|,
name|short
name|__T
parameter_list|,
name|short
name|__U
parameter_list|,
name|short
name|__V
parameter_list|,
name|short
name|__W
parameter_list|,
name|short
name|__X
parameter_list|,
name|short
name|__Y
parameter_list|,
name|short
name|__Z
parameter_list|)
block|{
union|union
block|{
name|short
name|__a
index|[
literal|8
index|]
decl_stmt|;
name|__m128i
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__S
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__T
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|2
index|]
operator|=
name|__U
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|3
index|]
operator|=
name|__V
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|4
index|]
operator|=
name|__W
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|5
index|]
operator|=
name|__X
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|6
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|7
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_comment
comment|/* Create the vector [S T U V Z Y X W].  */
end_comment

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_setr_epi8
parameter_list|(
name|char
name|__S1
parameter_list|,
name|char
name|__T1
parameter_list|,
name|char
name|__U1
parameter_list|,
name|char
name|__V1
parameter_list|,
name|char
name|__W1
parameter_list|,
name|char
name|__X1
parameter_list|,
name|char
name|__Y1
parameter_list|,
name|char
name|__Z1
parameter_list|,
name|char
name|__S
parameter_list|,
name|char
name|__T
parameter_list|,
name|char
name|__U
parameter_list|,
name|char
name|__V
parameter_list|,
name|char
name|__W
parameter_list|,
name|char
name|__X
parameter_list|,
name|char
name|__Y
parameter_list|,
name|char
name|__Z
parameter_list|)
block|{
union|union
block|{
name|char
name|__a
index|[
literal|16
index|]
decl_stmt|;
name|__m128i
name|__v
decl_stmt|;
block|}
name|__u
union|;
name|__u
operator|.
name|__a
index|[
literal|0
index|]
operator|=
name|__S1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|1
index|]
operator|=
name|__T1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|2
index|]
operator|=
name|__U1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|3
index|]
operator|=
name|__V1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|4
index|]
operator|=
name|__W1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|5
index|]
operator|=
name|__X1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|6
index|]
operator|=
name|__Y1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|7
index|]
operator|=
name|__Z1
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|8
index|]
operator|=
name|__S
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|9
index|]
operator|=
name|__T
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|10
index|]
operator|=
name|__U
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|11
index|]
operator|=
name|__V
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|12
index|]
operator|=
name|__W
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|13
index|]
operator|=
name|__X
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|14
index|]
operator|=
name|__Y
expr_stmt|;
name|__u
operator|.
name|__a
index|[
literal|15
index|]
operator|=
name|__Z
expr_stmt|;
return|return
name|__u
operator|.
name|__v
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cvtepi32_pd
parameter_list|(
name|__m128i
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cvtdq2pd
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtepi32_ps
parameter_list|(
name|__m128i
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cvtdq2ps
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cvtpd_epi32
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_cvtpd2dq
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cvtpd_pi32
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_cvtpd2pi
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtpd_ps
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cvtpd2ps
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cvttpd_epi32
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_cvttpd2dq
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cvttpd_pi32
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_cvttpd2pi
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cvtpi32_pd
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cvtpi2pd
argument_list|(
operator|(
name|__v2si
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cvtps_epi32
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_cvtps2dq
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cvttps_epi32
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_cvttps2dq
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cvtps_pd
parameter_list|(
name|__m128
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cvtps2pd
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_cvtsd_si32
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_cvtsd2si
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_function
specifier|static
name|__inline
name|long
name|long
name|_mm_cvtsd_si64x
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_cvtsd2si64
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|int
name|_mm_cvttsd_si32
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_cvttsd2si
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_function
specifier|static
name|__inline
name|long
name|long
name|_mm_cvttsd_si64x
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_cvttsd2si64
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|__m128
name|_mm_cvtsd_ss
parameter_list|(
name|__m128
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128
operator|)
name|__builtin_ia32_cvtsd2ss
argument_list|(
operator|(
name|__v4sf
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cvtsi32_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cvtsi2sd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cvtsi64x_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|long
name|long
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cvtsi642sd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_cvtss_sd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_cvtss2sd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v4sf
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|_mm_shuffle_pd
parameter_list|(
name|__A
parameter_list|,
name|__B
parameter_list|,
name|__C
parameter_list|)
value|((__m128d)__builtin_ia32_shufpd ((__v2df)__A, (__v2df)__B, (__C)))
end_define

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_unpackhi_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_unpckhpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_unpacklo_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_unpcklpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_loadh_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|double
specifier|const
modifier|*
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_loadhpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|*
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_storeh_pd
parameter_list|(
name|double
modifier|*
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
name|__builtin_ia32_storehpd
argument_list|(
operator|(
name|__v2si
operator|*
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128d
name|_mm_loadl_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|,
name|double
specifier|const
modifier|*
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128d
operator|)
name|__builtin_ia32_loadlpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|*
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_storel_pd
parameter_list|(
name|double
modifier|*
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
name|__builtin_ia32_storelpd
argument_list|(
operator|(
name|__v2si
operator|*
operator|)
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_movemask_pd
parameter_list|(
name|__m128d
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_movmskpd
argument_list|(
operator|(
name|__v2df
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_packs_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_packsswb128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_packs_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_packssdw128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v4si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_packus_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_packuswb128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_unpackhi_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpckhbw128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_unpackhi_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpckhwd128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_unpackhi_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpckhdq128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v4si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_unpackhi_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpckhqdq128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_unpacklo_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpcklbw128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_unpacklo_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpcklwd128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_unpacklo_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpckldq128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v4si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_unpacklo_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_punpcklqdq128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_add_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_paddb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_add_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_paddw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_add_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_paddd128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v4si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_add_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_paddq128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_adds_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_paddsb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_adds_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_paddsw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_adds_epu8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_paddusb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_adds_epu16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_paddusw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sub_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psubb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sub_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psubw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sub_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psubd128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v4si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sub_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psubq128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_subs_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psubsb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_subs_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psubsw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_subs_epu8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psubusb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_subs_epu16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psubusw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_madd_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pmaddwd128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_mulhi_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pmulhw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_mullo_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pmullw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_mul_su32
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_ia32_pmuludq
argument_list|(
operator|(
name|__v2si
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_mul_epu32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pmuludq128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v4si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sll_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psllw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sll_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pslld128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sll_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psllq128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sra_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psraw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sra_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psrad128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_srl_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psrlw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_srl_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psrld128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_srl_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psrlq128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_slli_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psllwi128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_slli_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pslldi128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_slli_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psllqi128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_srai_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psrawi128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_srai_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psradi128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|static __m128i __attribute__((__always_inline__)) _mm_srli_si128 (__m128i __A, const int __B) {   return ((__m128i)__builtin_ia32_psrldqi128 (__A, __B)) }  static __m128i __attribute__((__always_inline__)) _mm_srli_si128 (__m128i __A, const int __B) {   return ((__m128i)__builtin_ia32_pslldqi128 (__A, __B)) }
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_mm_srli_si128
parameter_list|(
name|__A
parameter_list|,
name|__B
parameter_list|)
value|((__m128i)__builtin_ia32_psrldqi128 (__A, __B))
end_define

begin_define
define|#
directive|define
name|_mm_slli_si128
parameter_list|(
name|__A
parameter_list|,
name|__B
parameter_list|)
value|((__m128i)__builtin_ia32_pslldqi128 (__A, __B))
end_define

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_srli_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psrlwi128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_srli_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psrldi128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_srli_epi64
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psrlqi128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_and_si128
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pand128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_andnot_si128
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pandn128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_or_si128
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_por128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_xor_si128
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pxor128
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmpeq_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpeqb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmpeq_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpeqw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmpeq_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpeqd128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v4si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmplt_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpgtb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__B
argument_list|,
operator|(
name|__v16qi
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmplt_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpgtw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__B
argument_list|,
operator|(
name|__v8hi
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmplt_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpgtd128
argument_list|(
operator|(
name|__v4si
operator|)
name|__B
argument_list|,
operator|(
name|__v4si
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmpgt_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpgtb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmpgt_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpgtw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cmpgt_epi32
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pcmpgtd128
argument_list|(
operator|(
name|__v4si
operator|)
name|__A
argument_list|,
operator|(
name|__v4si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|_mm_extract_epi16
parameter_list|(
name|__A
parameter_list|,
name|__B
parameter_list|)
value|__builtin_ia32_pextrw128 ((__v8hi)__A, __B)
end_define

begin_define
define|#
directive|define
name|_mm_insert_epi16
parameter_list|(
name|__A
parameter_list|,
name|__B
parameter_list|,
name|__C
parameter_list|)
value|((__m128i)__builtin_ia32_pinsrw128 ((__v8hi)__A, __B, __C))
end_define

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_max_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pmaxsw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_max_epu8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pmaxub128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_min_epi16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pminsw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_min_epu8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pminub128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_movemask_epi8
parameter_list|(
name|__m128i
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_pmovmskb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_mulhi_epu16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pmulhuw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_define
define|#
directive|define
name|_mm_shufflehi_epi16
parameter_list|(
name|__A
parameter_list|,
name|__B
parameter_list|)
value|((__m128i)__builtin_ia32_pshufhw ((__v8hi)__A, __B))
end_define

begin_define
define|#
directive|define
name|_mm_shufflelo_epi16
parameter_list|(
name|__A
parameter_list|,
name|__B
parameter_list|)
value|((__m128i)__builtin_ia32_pshuflw ((__v8hi)__A, __B))
end_define

begin_define
define|#
directive|define
name|_mm_shuffle_epi32
parameter_list|(
name|__A
parameter_list|,
name|__B
parameter_list|)
value|((__m128i)__builtin_ia32_pshufd ((__v4si)__A, __B))
end_define

begin_function
specifier|static
name|__inline
name|void
name|_mm_maskmoveu_si128
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|,
name|char
modifier|*
name|__C
parameter_list|)
block|{
name|__builtin_ia32_maskmovdqu
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|,
name|__C
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_avg_epu8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pavgb128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_avg_epu16
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_pavgw128
argument_list|(
operator|(
name|__v8hi
operator|)
name|__A
argument_list|,
operator|(
name|__v8hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_sad_epu8
parameter_list|(
name|__m128i
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_psadbw128
argument_list|(
operator|(
name|__v16qi
operator|)
name|__A
argument_list|,
operator|(
name|__v16qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_stream_si32
parameter_list|(
name|int
modifier|*
name|__A
parameter_list|,
name|int
name|__B
parameter_list|)
block|{
name|__builtin_ia32_movnti
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_stream_si128
parameter_list|(
name|__m128i
modifier|*
name|__A
parameter_list|,
name|__m128i
name|__B
parameter_list|)
block|{
name|__builtin_ia32_movntdq
argument_list|(
operator|(
name|__v2di
operator|*
operator|)
name|__A
argument_list|,
operator|(
name|__v2di
operator|)
name|__B
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_stream_pd
parameter_list|(
name|double
modifier|*
name|__A
parameter_list|,
name|__m128d
name|__B
parameter_list|)
block|{
name|__builtin_ia32_movntpd
argument_list|(
name|__A
argument_list|,
operator|(
name|__v2df
operator|)
name|__B
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_movpi64_epi64
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
operator|(
name|unsigned
name|long
name|long
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_clflush
parameter_list|(
name|void
specifier|const
modifier|*
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_clflush
argument_list|(
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_lfence
parameter_list|(
name|void
parameter_list|)
block|{
name|__builtin_ia32_lfence
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|void
name|_mm_mfence
parameter_list|(
name|void
parameter_list|)
block|{
name|__builtin_ia32_mfence
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cvtsi32_si128
parameter_list|(
name|int
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_loadd
argument_list|(
operator|&
name|__A
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_function
specifier|static
name|__inline
name|__m128i
name|_mm_cvtsi64x_si128
parameter_list|(
name|long
name|long
name|__A
parameter_list|)
block|{
return|return
operator|(
name|__m128i
operator|)
name|__builtin_ia32_movq2dq
argument_list|(
name|__A
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function
specifier|static
name|__inline
name|int
name|_mm_cvtsi128_si32
parameter_list|(
name|__m128i
name|__A
parameter_list|)
block|{
name|int
name|__tmp
decl_stmt|;
name|__builtin_ia32_stored
argument_list|(
operator|&
name|__tmp
argument_list|,
operator|(
name|__v4si
operator|)
name|__A
argument_list|)
expr_stmt|;
return|return
name|__tmp
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_function
specifier|static
name|__inline
name|long
name|long
name|_mm_cvtsi128_si64x
parameter_list|(
name|__m128i
name|__A
parameter_list|)
block|{
return|return
name|__builtin_ia32_movdq2q
argument_list|(
operator|(
name|__v2di
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SSE2__  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SSE__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _XMMINTRIN_H_INCLUDED */
end_comment

end_unit

