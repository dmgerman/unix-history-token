begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* DWARF2 EH unwinding support for AMD x86-64 and x86.    Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  In addition to the permissions in the GNU General Public License, the Free Software Foundation gives you unlimited permission to link the compiled version of this file with other programs, and to distribute those programs without any restriction coming from the use of this file.  (The General Public License restrictions do apply in other respects; for example, they cover modification of the file, and distribution when not linked into another program.)  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* Do code reading to identify a signal frame, and set the frame    state data appropriately.  See unwind-dw2.c for the structs.    Don't use this at all if inhibit_libc is used.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|inhibit_libc
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__x86_64__
end_ifdef

begin_include
include|#
directive|include
file|<signal.h>
end_include

begin_include
include|#
directive|include
file|<sys/ucontext.h>
end_include

begin_define
define|#
directive|define
name|MD_FALLBACK_FRAME_STATE_FOR
value|x86_64_fallback_frame_state
end_define

begin_function
specifier|static
name|_Unwind_Reason_Code
name|x86_64_fallback_frame_state
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
name|context
parameter_list|,
name|_Unwind_FrameState
modifier|*
name|fs
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|pc
init|=
name|context
operator|->
name|ra
decl_stmt|;
name|struct
name|sigcontext
modifier|*
name|sc
decl_stmt|;
name|long
name|new_cfa
decl_stmt|;
comment|/* movq __NR_rt_sigreturn, %rax ; syscall  */
if|if
condition|(
operator|*
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|(
name|pc
operator|+
literal|0
operator|)
operator|==
literal|0x48
operator|&&
operator|*
operator|(
name|unsigned
name|long
operator|*
operator|)
operator|(
name|pc
operator|+
literal|1
operator|)
operator|==
literal|0x050f0000000fc0c7
condition|)
block|{
name|struct
name|ucontext
modifier|*
name|uc_
init|=
name|context
operator|->
name|cfa
decl_stmt|;
comment|/* The void * cast is necessary to avoid an aliasing warning.          The aliasing warning is correct, but should not be a problem          because it does not alias anything.  */
name|sc
operator|=
operator|(
expr|struct
name|sigcontext
operator|*
operator|)
operator|(
name|void
operator|*
operator|)
operator|&
name|uc_
operator|->
name|uc_mcontext
expr_stmt|;
block|}
else|else
return|return
name|_URC_END_OF_STACK
return|;
name|new_cfa
operator|=
name|sc
operator|->
name|rsp
expr_stmt|;
name|fs
operator|->
name|cfa_how
operator|=
name|CFA_REG_OFFSET
expr_stmt|;
comment|/* Register 7 is rsp  */
name|fs
operator|->
name|cfa_reg
operator|=
literal|7
expr_stmt|;
name|fs
operator|->
name|cfa_offset
operator|=
name|new_cfa
operator|-
operator|(
name|long
operator|)
name|context
operator|->
name|cfa
expr_stmt|;
comment|/* The SVR4 register numbering macros aren't usable in libgcc.  */
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|0
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|0
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|rax
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|1
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|1
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|rdx
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|2
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|2
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|rcx
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|3
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|3
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|rbx
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|4
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|4
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|rsi
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|5
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|5
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|rdi
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|6
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|6
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|rbp
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|8
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|8
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|r8
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|9
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|9
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|r9
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|10
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|10
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|r10
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|11
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|11
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|r11
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|12
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|12
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|r12
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|13
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|13
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|r13
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|14
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|14
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|r14
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|15
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|15
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|r15
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|16
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|16
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|rip
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|retaddr_column
operator|=
literal|16
expr_stmt|;
name|fs
operator|->
name|signal_frame
operator|=
literal|1
expr_stmt|;
return|return
name|_URC_NO_REASON
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* ifdef __x86_64__  */
end_comment

begin_comment
comment|/* There's no sys/ucontext.h for glibc 2.0, so no    signal-turned-exceptions for them.  There's also no configure-run for    the target, so we can't check on (e.g.) HAVE_SYS_UCONTEXT_H.  Using the    target libc version macro should be enough.  */
end_comment

begin_if
if|#
directive|if
operator|!
operator|(
name|__GLIBC__
operator|==
literal|2
operator|&&
name|__GLIBC_MINOR__
operator|==
literal|0
operator|)
end_if

begin_include
include|#
directive|include
file|<signal.h>
end_include

begin_include
include|#
directive|include
file|<sys/ucontext.h>
end_include

begin_define
define|#
directive|define
name|MD_FALLBACK_FRAME_STATE_FOR
value|x86_fallback_frame_state
end_define

begin_function
specifier|static
name|_Unwind_Reason_Code
name|x86_fallback_frame_state
parameter_list|(
name|struct
name|_Unwind_Context
modifier|*
name|context
parameter_list|,
name|_Unwind_FrameState
modifier|*
name|fs
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|pc
init|=
name|context
operator|->
name|ra
decl_stmt|;
name|struct
name|sigcontext
modifier|*
name|sc
decl_stmt|;
name|long
name|new_cfa
decl_stmt|;
comment|/* popl %eax ; movl $__NR_sigreturn,%eax ; int $0x80  */
if|if
condition|(
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
operator|(
name|pc
operator|+
literal|0
operator|)
operator|==
literal|0xb858
operator|&&
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|(
name|pc
operator|+
literal|2
operator|)
operator|==
literal|119
operator|&&
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
operator|(
name|pc
operator|+
literal|6
operator|)
operator|==
literal|0x80cd
condition|)
name|sc
operator|=
name|context
operator|->
name|cfa
operator|+
literal|4
expr_stmt|;
comment|/* movl $__NR_rt_sigreturn,%eax ; int $0x80  */
elseif|else
if|if
condition|(
operator|*
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|(
name|pc
operator|+
literal|0
operator|)
operator|==
literal|0xb8
operator|&&
operator|*
operator|(
name|unsigned
name|int
operator|*
operator|)
operator|(
name|pc
operator|+
literal|1
operator|)
operator|==
literal|173
operator|&&
operator|*
operator|(
name|unsigned
name|short
operator|*
operator|)
operator|(
name|pc
operator|+
literal|5
operator|)
operator|==
literal|0x80cd
condition|)
block|{
struct|struct
name|rt_sigframe
block|{
name|int
name|sig
decl_stmt|;
name|struct
name|siginfo
modifier|*
name|pinfo
decl_stmt|;
name|void
modifier|*
name|puc
decl_stmt|;
name|struct
name|siginfo
name|info
decl_stmt|;
name|struct
name|ucontext
name|uc
decl_stmt|;
block|}
modifier|*
name|rt_
init|=
name|context
operator|->
name|cfa
struct|;
comment|/* The void * cast is necessary to avoid an aliasing warning.          The aliasing warning is correct, but should not be a problem          because it does not alias anything.  */
name|sc
operator|=
operator|(
expr|struct
name|sigcontext
operator|*
operator|)
operator|(
name|void
operator|*
operator|)
operator|&
name|rt_
operator|->
name|uc
operator|.
name|uc_mcontext
expr_stmt|;
block|}
else|else
return|return
name|_URC_END_OF_STACK
return|;
name|new_cfa
operator|=
name|sc
operator|->
name|REG_NAME
argument_list|(
name|esp
argument_list|)
expr_stmt|;
name|fs
operator|->
name|cfa_how
operator|=
name|CFA_REG_OFFSET
expr_stmt|;
name|fs
operator|->
name|cfa_reg
operator|=
literal|4
expr_stmt|;
name|fs
operator|->
name|cfa_offset
operator|=
name|new_cfa
operator|-
operator|(
name|long
operator|)
name|context
operator|->
name|cfa
expr_stmt|;
comment|/* The SVR4 register numbering macros aren't usable in libgcc.  */
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|0
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|0
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|REG_NAME
argument_list|(
name|eax
argument_list|)
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|3
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|3
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|REG_NAME
argument_list|(
name|ebx
argument_list|)
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|1
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|1
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|REG_NAME
argument_list|(
name|ecx
argument_list|)
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|2
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|2
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|REG_NAME
argument_list|(
name|edx
argument_list|)
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|6
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|6
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|REG_NAME
argument_list|(
name|esi
argument_list|)
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|7
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|7
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|REG_NAME
argument_list|(
name|edi
argument_list|)
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|5
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|5
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|REG_NAME
argument_list|(
name|ebp
argument_list|)
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|8
index|]
operator|.
name|how
operator|=
name|REG_SAVED_OFFSET
expr_stmt|;
name|fs
operator|->
name|regs
operator|.
name|reg
index|[
literal|8
index|]
operator|.
name|loc
operator|.
name|offset
operator|=
operator|(
name|long
operator|)
operator|&
name|sc
operator|->
name|REG_NAME
argument_list|(
name|eip
argument_list|)
operator|-
name|new_cfa
expr_stmt|;
name|fs
operator|->
name|retaddr_column
operator|=
literal|8
expr_stmt|;
name|fs
operator|->
name|signal_frame
operator|=
literal|1
expr_stmt|;
return|return
name|_URC_NO_REASON
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not glibc 2.0 */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ifdef __x86_64__  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ifdef inhibit_libc  */
end_comment

end_unit

