begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Copyright (C) 2002, 2003 Free Software Foundation, Inc.     This file is part of GCC.     GCC is free software; you can redistribute it and/or modify it    under the terms of the GNU General Public License as published    by the Free Software Foundation; either version 2, or (at your    option) any later version.     GCC is distributed in the hope that it will be useful, but WITHOUT    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public    License for more details.     You should have received a copy of the GNU General Public License    along with GCC; see the file COPYING.  If not, write to the Free    Software Foundation, 59 Temple Place - Suite 330, Boston, MA    02111-1307, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you include this header file into source    files compiled by GCC, this header file does not by itself cause    the resulting executable to be covered by the GNU General Public    License.  This exception does not however invalidate any other    reasons why the executable file might be covered by the GNU General    Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_MMINTRIN_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|_MMINTRIN_H_INCLUDED
end_define

begin_comment
comment|/* The data type intended for user use.  */
end_comment

begin_typedef
typedef|typedef
name|unsigned
name|long
name|long
name|__m64
typedef|,
name|__int64
typedef|;
end_typedef

begin_comment
comment|/* Internal data types for implementing the intrinsics.  */
end_comment

begin_typedef
typedef|typedef
name|int
name|__v2si
name|__attribute__
typedef|((
name|__mode__
typedef|(
name|__V2SI__
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|__v4hi
name|__attribute__
typedef|((
name|__mode__
typedef|(
name|__V4HI__
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|__v8qi
name|__attribute__
typedef|((
name|__mode__
typedef|(
name|__V8QI__
typedef|)));
end_typedef

begin_comment
comment|/* "Convert" __m64 and __int64 into each other.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cvtsi64_m64
parameter_list|(
name|__int64
name|__i
parameter_list|)
block|{
return|return
name|__i
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__int64
name|_mm_cvtm64_si64
parameter_list|(
name|__m64
name|__i
parameter_list|)
block|{
return|return
name|__i
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_cvtsi64_si32
parameter_list|(
name|__int64
name|__i
parameter_list|)
block|{
return|return
name|__i
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__int64
name|_mm_cvtsi32_si64
parameter_list|(
name|int
name|__i
parameter_list|)
block|{
return|return
name|__i
return|;
block|}
end_function

begin_comment
comment|/* Pack the four 16-bit values from M1 into the lower four 8-bit values of    the result, and the four 16-bit values from M2 into the upper four 8-bit    values of the result, all with signed saturation.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_packs_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wpackhss
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Pack the two 32-bit values from M1 in to the lower two 16-bit values of    the result, and the two 32-bit values from M2 into the upper two 16-bit    values of the result, all with signed saturation.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_packs_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wpackwss
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Copy the 64-bit value from M1 into the lower 32-bits of the result, and    the 64-bit value from M2 into the upper 32-bits of the result, all with    signed saturation for values that do not fit exactly into 32-bits.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_packs_pi64
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wpackdss
argument_list|(
operator|(
name|long
name|long
operator|)
name|__m1
argument_list|,
operator|(
name|long
name|long
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Pack the four 16-bit values from M1 into the lower four 8-bit values of    the result, and the four 16-bit values from M2 into the upper four 8-bit    values of the result, all with unsigned saturation.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_packs_pu16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wpackhus
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Pack the two 32-bit values from M1 into the lower two 16-bit values of    the result, and the two 32-bit values from M2 into the upper two 16-bit    values of the result, all with unsigned saturation.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_packs_pu32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wpackwus
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Copy the 64-bit value from M1 into the lower 32-bits of the result, and    the 64-bit value from M2 into the upper 32-bits of the result, all with    unsigned saturation for values that do not fit exactly into 32-bits.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_packs_pu64
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wpackdus
argument_list|(
operator|(
name|long
name|long
operator|)
name|__m1
argument_list|,
operator|(
name|long
name|long
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Interleave the four 8-bit values from the high half of M1 with the four    8-bit values from the high half of M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackhi_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckihb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Interleave the two 16-bit values from the high half of M1 with the two    16-bit values from the high half of M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackhi_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckihh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Interleave the 32-bit value from the high half of M1 with the 32-bit    value from the high half of M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackhi_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckihw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Interleave the four 8-bit values from the low half of M1 with the four    8-bit values from the low half of M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpacklo_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckilb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Interleave the two 16-bit values from the low half of M1 with the two    16-bit values from the low half of M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpacklo_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckilh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Interleave the 32-bit value from the low half of M1 with the 32-bit    value from the low half of M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpacklo_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckilw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the four 8-bit values from the low half of M1, sign extend them,    and return the result as a vector of four 16-bit quantities.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackel_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckelsb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the two 16-bit values from the low half of M1, sign extend them,    and return the result as a vector of two 32-bit quantities.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackel_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckelsh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the 32-bit value from the low half of M1, and return it sign extended   to 64 bits.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackel_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckelsw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the four 8-bit values from the high half of M1, sign extend them,    and return the result as a vector of four 16-bit quantities.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackeh_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckehsb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the two 16-bit values from the high half of M1, sign extend them,    and return the result as a vector of two 32-bit quantities.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackeh_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckehsh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the 32-bit value from the high half of M1, and return it sign extended   to 64 bits.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackeh_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckehsw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the four 8-bit values from the low half of M1, zero extend them,    and return the result as a vector of four 16-bit quantities.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackel_pu8
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckelub
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the two 16-bit values from the low half of M1, zero extend them,    and return the result as a vector of two 32-bit quantities.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackel_pu16
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckeluh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the 32-bit value from the low half of M1, and return it zero extended   to 64 bits.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackel_pu32
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckeluw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the four 8-bit values from the high half of M1, zero extend them,    and return the result as a vector of four 16-bit quantities.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackeh_pu8
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckehub
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the two 16-bit values from the high half of M1, zero extend them,    and return the result as a vector of two 32-bit quantities.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackeh_pu16
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckehuh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Take the 32-bit value from the high half of M1, and return it zero extended   to 64 bits.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_unpackeh_pu32
parameter_list|(
name|__m64
name|__m1
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wunpckehuw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 8-bit values in M1 to the 8-bit values in M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_add_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 16-bit values in M1 to the 16-bit values in M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_add_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 32-bit values in M1 to the 32-bit values in M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_add_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 8-bit values in M1 to the 8-bit values in M2 using signed    saturated arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_adds_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddbss
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 16-bit values in M1 to the 16-bit values in M2 using signed    saturated arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_adds_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddhss
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 32-bit values in M1 to the 32-bit values in M2 using signed    saturated arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_adds_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddwss
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 8-bit values in M1 to the 8-bit values in M2 using unsigned    saturated arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_adds_pu8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddbus
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 16-bit values in M1 to the 16-bit values in M2 using unsigned    saturated arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_adds_pu16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddhus
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Add the 32-bit values in M1 to the 32-bit values in M2 using unsigned    saturated arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_adds_pu32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_waddwus
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 8-bit values in M2 from the 8-bit values in M1.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sub_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 16-bit values in M2 from the 16-bit values in M1.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sub_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 32-bit values in M2 from the 32-bit values in M1.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sub_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 8-bit values in M2 from the 8-bit values in M1 using signed    saturating arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_subs_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubbss
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 16-bit values in M2 from the 16-bit values in M1 using    signed saturating arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_subs_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubhss
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 32-bit values in M2 from the 32-bit values in M1 using    signed saturating arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_subs_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubwss
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 8-bit values in M2 from the 8-bit values in M1 using    unsigned saturating arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_subs_pu8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubbus
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 16-bit values in M2 from the 16-bit values in M1 using    unsigned saturating arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_subs_pu16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubhus
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Subtract the 32-bit values in M2 from the 32-bit values in M1 using    unsigned saturating arithmetic.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_subs_pu32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsubwus
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Multiply four 16-bit values in M1 by four 16-bit values in M2 producing    four 32-bit intermediate results, which are then summed by pairs to    produce two 32-bit results.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_madd_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmadds
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Multiply four 16-bit values in M1 by four 16-bit values in M2 producing    four 32-bit intermediate results, which are then summed by pairs to    produce two 32-bit results.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_madd_pu16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmaddu
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Multiply four signed 16-bit values in M1 by four signed 16-bit values in    M2 and produce the high 16 bits of the 32-bit results.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_mulhi_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmulsh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Multiply four signed 16-bit values in M1 by four signed 16-bit values in    M2 and produce the high 16 bits of the 32-bit results.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_mulhi_pu16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmuluh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Multiply four 16-bit values in M1 by four 16-bit values in M2 and produce    the low 16 bits of the results.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_mullo_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmulul
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift four 16-bit values in M left by COUNT.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sll_pi16
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsllh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_slli_pi16
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsllhi
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift two 32-bit values in M left by COUNT.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sll_pi32
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsllw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_slli_pi32
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsllwi
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift the 64-bit value in M left by COUNT.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sll_si64
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wslld
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_slli_si64
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wslldi
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift four 16-bit values in M right by COUNT; shift in the sign bit.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sra_pi16
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrah
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srai_pi16
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrahi
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift two 32-bit values in M right by COUNT; shift in the sign bit.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sra_pi32
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsraw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srai_pi32
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrawi
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift the 64-bit value in M right by COUNT; shift in the sign bit.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sra_si64
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrad
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srai_si64
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsradi
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift four 16-bit values in M right by COUNT; shift in zeros.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srl_pi16
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrlh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srli_pi16
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrlhi
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift two 32-bit values in M right by COUNT; shift in zeros.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srl_pi32
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrlw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srli_pi32
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrlwi
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Shift the 64-bit value in M left by COUNT; shift in zeros.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srl_si64
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrld
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_srli_si64
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsrldi
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Rotate four 16-bit values in M right by COUNT.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_ror_pi16
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wrorh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_rori_pi16
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wrorhi
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Rotate two 32-bit values in M right by COUNT.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_ror_pi32
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wrorw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_rori_pi32
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wrorwi
argument_list|(
operator|(
name|__v2si
operator|)
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Rotate two 64-bit values in M right by COUNT.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_ror_si64
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|__m64
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wrord
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_rori_si64
parameter_list|(
name|__m64
name|__m
parameter_list|,
name|int
name|__count
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wrordi
argument_list|(
name|__m
argument_list|,
name|__count
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Bit-wise AND the 64-bit values in M1 and M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_and_si64
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
name|__builtin_arm_wand
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Bit-wise complement the 64-bit value in M1 and bit-wise AND it with the    64-bit value in M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_andnot_si64
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
name|__builtin_arm_wandn
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Bit-wise inclusive OR the 64-bit values in M1 and M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_or_si64
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
name|__builtin_arm_wor
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Bit-wise exclusive OR the 64-bit values in M1 and M2.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_xor_si64
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
name|__builtin_arm_wxor
argument_list|(
name|__m1
argument_list|,
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compare eight 8-bit values.  The result of the comparison is 0xFF if the    test is true and zero if false.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpeq_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpeqb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpgt_pi8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpgtsb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpgt_pu8
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpgtub
argument_list|(
operator|(
name|__v8qi
operator|)
name|__m1
argument_list|,
operator|(
name|__v8qi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compare four 16-bit values.  The result of the comparison is 0xFFFF if    the test is true and zero if false.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpeq_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpeqh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpgt_pi16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpgtsh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpgt_pu16
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpgtuh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__m1
argument_list|,
operator|(
name|__v4hi
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compare two 32-bit values.  The result of the comparison is 0xFFFFFFFF if    the test is true and zero if false.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpeq_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpeqw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpgt_pi32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpgtsw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_cmpgt_pu32
parameter_list|(
name|__m64
name|__m1
parameter_list|,
name|__m64
name|__m2
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wcmpgtuw
argument_list|(
operator|(
name|__v2si
operator|)
name|__m1
argument_list|,
operator|(
name|__v2si
operator|)
name|__m2
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Element-wise multiplication of unsigned 16-bit values __B and __C, followed    by accumulate across all elements and __A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_mac_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|,
name|__m64
name|__C
parameter_list|)
block|{
return|return
name|__builtin_arm_wmacu
argument_list|(
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|,
operator|(
name|__v4hi
operator|)
name|__C
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Element-wise multiplication of signed 16-bit values __B and __C, followed    by accumulate across all elements and __A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_mac_pi16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|,
name|__m64
name|__C
parameter_list|)
block|{
return|return
name|__builtin_arm_wmacs
argument_list|(
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|,
operator|(
name|__v4hi
operator|)
name|__C
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Element-wise multiplication of unsigned 16-bit values __B and __C, followed    by accumulate across all elements.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_macz_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
name|__builtin_arm_wmacuz
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Element-wise multiplication of signed 16-bit values __B and __C, followed    by accumulate across all elements.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_macz_pi16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
name|__builtin_arm_wmacsz
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Accumulate across all unsigned 8-bit values in __A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_acc_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
name|__builtin_arm_waccb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Accumulate across all unsigned 16-bit values in __A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_acc_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
name|__builtin_arm_wacch
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Accumulate across all unsigned 32-bit values in __A.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_acc_pu32
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
name|__builtin_arm_waccw
argument_list|(
operator|(
name|__v2si
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_mia_si64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|int
name|__B
parameter_list|,
name|int
name|__C
parameter_list|)
block|{
return|return
name|__builtin_arm_tmia
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|,
name|__C
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_miaph_si64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|int
name|__B
parameter_list|,
name|int
name|__C
parameter_list|)
block|{
return|return
name|__builtin_arm_tmiaph
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|,
name|__C
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_miabb_si64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|int
name|__B
parameter_list|,
name|int
name|__C
parameter_list|)
block|{
return|return
name|__builtin_arm_tmiabb
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|,
name|__C
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_miabt_si64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|int
name|__B
parameter_list|,
name|int
name|__C
parameter_list|)
block|{
return|return
name|__builtin_arm_tmiabt
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|,
name|__C
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_miatb_si64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|int
name|__B
parameter_list|,
name|int
name|__C
parameter_list|)
block|{
return|return
name|__builtin_arm_tmiatb
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|,
name|__C
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_miatt_si64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|int
name|__B
parameter_list|,
name|int
name|__C
parameter_list|)
block|{
return|return
name|__builtin_arm_tmiatt
argument_list|(
name|__A
argument_list|,
name|__B
argument_list|,
name|__C
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Extract one of the elements of A and sign extend.  The selector N must    be immediate.  */
end_comment

begin_define
define|#
directive|define
name|_mm_extract_pi8
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
value|__builtin_arm_textrmsb ((__v8qi)(A), (N))
end_define

begin_define
define|#
directive|define
name|_mm_extract_pi16
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
value|__builtin_arm_textrmsh ((__v4hi)(A), (N))
end_define

begin_define
define|#
directive|define
name|_mm_extract_pi32
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
value|__builtin_arm_textrmsw ((__v2si)(A), (N))
end_define

begin_comment
comment|/* Extract one of the elements of A and zero extend.  The selector N must    be immediate.  */
end_comment

begin_define
define|#
directive|define
name|_mm_extract_pu8
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
value|__builtin_arm_textrmub ((__v8qi)(A), (N))
end_define

begin_define
define|#
directive|define
name|_mm_extract_pu16
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
value|__builtin_arm_textrmuh ((__v4hi)(A), (N))
end_define

begin_define
define|#
directive|define
name|_mm_extract_pu32
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
value|__builtin_arm_textrmuw ((__v2si)(A), (N))
end_define

begin_comment
comment|/* Inserts word D into one of the elements of A.  The selector N must be    immediate.  */
end_comment

begin_define
define|#
directive|define
name|_mm_insert_pi8
parameter_list|(
name|A
parameter_list|,
name|D
parameter_list|,
name|N
parameter_list|)
define|\
value|((__m64) __builtin_arm_tinsrb ((__v8qi)(A), (D), (N)))
end_define

begin_define
define|#
directive|define
name|_mm_insert_pi16
parameter_list|(
name|A
parameter_list|,
name|D
parameter_list|,
name|N
parameter_list|)
define|\
value|((__m64) __builtin_arm_tinsrh ((__v4hi)(A), (D), (N)))
end_define

begin_define
define|#
directive|define
name|_mm_insert_pi32
parameter_list|(
name|A
parameter_list|,
name|D
parameter_list|,
name|N
parameter_list|)
define|\
value|((__m64) __builtin_arm_tinsrw ((__v2si)(A), (D), (N)))
end_define

begin_comment
comment|/* Compute the element-wise maximum of signed 8-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_max_pi8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmaxsb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise maximum of signed 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_max_pi16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmaxsh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise maximum of signed 32-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_max_pi32
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmaxsw
argument_list|(
operator|(
name|__v2si
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise maximum of unsigned 8-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_max_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmaxub
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise maximum of unsigned 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_max_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmaxuh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise maximum of unsigned 32-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_max_pu32
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wmaxuw
argument_list|(
operator|(
name|__v2si
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise minimum of signed 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_min_pi8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wminsb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise minimum of signed 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_min_pi16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wminsh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise minimum of signed 32-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_min_pi32
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wminsw
argument_list|(
operator|(
name|__v2si
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise minimum of unsigned 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_min_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wminub
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise minimum of unsigned 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_min_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wminuh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the element-wise minimum of unsigned 32-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_min_pu32
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wminuw
argument_list|(
operator|(
name|__v2si
operator|)
name|__A
argument_list|,
operator|(
name|__v2si
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create an 8-bit mask of the signs of 8-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|_mm_movemask_pi8
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
name|__builtin_arm_tmovmskb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create an 8-bit mask of the signs of 16-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|_mm_movemask_pi16
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
name|__builtin_arm_tmovmskh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Create an 8-bit mask of the signs of 32-bit values.  */
end_comment

begin_function
specifier|static
name|__inline
name|int
name|_mm_movemask_pi32
parameter_list|(
name|__m64
name|__A
parameter_list|)
block|{
return|return
name|__builtin_arm_tmovmskw
argument_list|(
operator|(
name|__v2si
operator|)
name|__A
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Return a combination of the four 16-bit values in A.  The selector    must be an immediate.  */
end_comment

begin_define
define|#
directive|define
name|_mm_shuffle_pi16
parameter_list|(
name|A
parameter_list|,
name|N
parameter_list|)
define|\
value|((__m64) __builtin_arm_wshufh ((__v4hi)(A), (N)))
end_define

begin_comment
comment|/* Compute the rounded averages of the unsigned 8-bit values in A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_avg_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wavg2br
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the rounded averages of the unsigned 16-bit values in A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_avg_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wavg2hr
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the averages of the unsigned 8-bit values in A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_avg2_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wavg2b
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the averages of the unsigned 16-bit values in A and B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_avg2_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wavg2h
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the sum of the absolute differences of the unsigned 8-bit    values in A and B.  Return the value in the lower 16-bit word; the    upper words are cleared.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sad_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsadb
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the sum of the absolute differences of the unsigned 16-bit    values in A and B.  Return the value in the lower 32-bit word; the    upper words are cleared.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sad_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsadh
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the sum of the absolute differences of the unsigned 8-bit    values in A and B.  Return the value in the lower 16-bit word; the    upper words are cleared.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sadz_pu8
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsadbz
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Compute the sum of the absolute differences of the unsigned 16-bit    values in A and B.  Return the value in the lower 32-bit word; the    upper words are cleared.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_sadz_pu16
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_wsadhz
argument_list|(
operator|(
name|__v4hi
operator|)
name|__A
argument_list|,
operator|(
name|__v4hi
operator|)
name|__B
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_align_si64
parameter_list|(
name|__m64
name|__A
parameter_list|,
name|__m64
name|__B
parameter_list|,
name|int
name|__C
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__builtin_arm_walign
argument_list|(
operator|(
name|__v8qi
operator|)
name|__A
argument_list|,
operator|(
name|__v8qi
operator|)
name|__B
argument_list|,
name|__C
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Creates a 64-bit zero.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_setzero_si64
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|__builtin_arm_wzero
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/* Set and Get arbitrary iWMMXt Control registers.    Note only registers 0-3 and 8-11 are currently defined,    the rest are reserved.  */
end_comment

begin_function
specifier|static
name|__inline
name|void
name|_mm_setwcx
parameter_list|(
specifier|const
name|int
name|__regno
parameter_list|,
specifier|const
name|int
name|__value
parameter_list|)
block|{
switch|switch
condition|(
name|__regno
condition|)
block|{
case|case
literal|0
case|:
name|__builtin_arm_setwcx
argument_list|(
literal|0
argument_list|,
name|__value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|__builtin_arm_setwcx
argument_list|(
literal|1
argument_list|,
name|__value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|__builtin_arm_setwcx
argument_list|(
literal|2
argument_list|,
name|__value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|__builtin_arm_setwcx
argument_list|(
literal|3
argument_list|,
name|__value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|__builtin_arm_setwcx
argument_list|(
literal|8
argument_list|,
name|__value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|9
case|:
name|__builtin_arm_setwcx
argument_list|(
literal|9
argument_list|,
name|__value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|10
case|:
name|__builtin_arm_setwcx
argument_list|(
literal|10
argument_list|,
name|__value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|11
case|:
name|__builtin_arm_setwcx
argument_list|(
literal|11
argument_list|,
name|__value
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
end_function

begin_function
specifier|static
name|__inline
name|int
name|_mm_getwcx
parameter_list|(
specifier|const
name|int
name|__regno
parameter_list|)
block|{
switch|switch
condition|(
name|__regno
condition|)
block|{
case|case
literal|0
case|:
return|return
name|__builtin_arm_getwcx
argument_list|(
literal|0
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|__builtin_arm_getwcx
argument_list|(
literal|1
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|__builtin_arm_getwcx
argument_list|(
literal|2
argument_list|)
return|;
case|case
literal|3
case|:
return|return
name|__builtin_arm_getwcx
argument_list|(
literal|3
argument_list|)
return|;
case|case
literal|8
case|:
return|return
name|__builtin_arm_getwcx
argument_list|(
literal|8
argument_list|)
return|;
case|case
literal|9
case|:
return|return
name|__builtin_arm_getwcx
argument_list|(
literal|9
argument_list|)
return|;
case|case
literal|10
case|:
return|return
name|__builtin_arm_getwcx
argument_list|(
literal|10
argument_list|)
return|;
case|case
literal|11
case|:
return|return
name|__builtin_arm_getwcx
argument_list|(
literal|11
argument_list|)
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
end_function

begin_comment
comment|/* Creates a vector of two 32-bit values; I0 is least significant.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_set_pi32
parameter_list|(
name|int
name|__i1
parameter_list|,
name|int
name|__i0
parameter_list|)
block|{
union|union
block|{
name|__m64
name|__q
decl_stmt|;
struct|struct
block|{
name|unsigned
name|int
name|__i0
decl_stmt|;
name|unsigned
name|int
name|__i1
decl_stmt|;
block|}
name|__s
struct|;
block|}
name|__u
union|;
name|__u
operator|.
name|__s
operator|.
name|__i0
operator|=
name|__i0
expr_stmt|;
name|__u
operator|.
name|__s
operator|.
name|__i1
operator|=
name|__i1
expr_stmt|;
return|return
name|__u
operator|.
name|__q
return|;
block|}
end_function

begin_comment
comment|/* Creates a vector of four 16-bit values; W0 is least significant.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_set_pi16
parameter_list|(
name|short
name|__w3
parameter_list|,
name|short
name|__w2
parameter_list|,
name|short
name|__w1
parameter_list|,
name|short
name|__w0
parameter_list|)
block|{
name|unsigned
name|int
name|__i1
init|=
operator|(
name|unsigned
name|short
operator|)
name|__w3
operator|<<
literal|16
operator||
operator|(
name|unsigned
name|short
operator|)
name|__w2
decl_stmt|;
name|unsigned
name|int
name|__i0
init|=
operator|(
name|unsigned
name|short
operator|)
name|__w1
operator|<<
literal|16
operator||
operator|(
name|unsigned
name|short
operator|)
name|__w0
decl_stmt|;
return|return
name|_mm_set_pi32
argument_list|(
name|__i1
argument_list|,
name|__i0
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Creates a vector of eight 8-bit values; B0 is least significant.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_set_pi8
parameter_list|(
name|char
name|__b7
parameter_list|,
name|char
name|__b6
parameter_list|,
name|char
name|__b5
parameter_list|,
name|char
name|__b4
parameter_list|,
name|char
name|__b3
parameter_list|,
name|char
name|__b2
parameter_list|,
name|char
name|__b1
parameter_list|,
name|char
name|__b0
parameter_list|)
block|{
name|unsigned
name|int
name|__i1
decl_stmt|,
name|__i0
decl_stmt|;
name|__i1
operator|=
operator|(
name|unsigned
name|char
operator|)
name|__b7
expr_stmt|;
name|__i1
operator|=
name|__i1
operator|<<
literal|8
operator||
operator|(
name|unsigned
name|char
operator|)
name|__b6
expr_stmt|;
name|__i1
operator|=
name|__i1
operator|<<
literal|8
operator||
operator|(
name|unsigned
name|char
operator|)
name|__b5
expr_stmt|;
name|__i1
operator|=
name|__i1
operator|<<
literal|8
operator||
operator|(
name|unsigned
name|char
operator|)
name|__b4
expr_stmt|;
name|__i0
operator|=
operator|(
name|unsigned
name|char
operator|)
name|__b3
expr_stmt|;
name|__i0
operator|=
name|__i0
operator|<<
literal|8
operator||
operator|(
name|unsigned
name|char
operator|)
name|__b2
expr_stmt|;
name|__i0
operator|=
name|__i0
operator|<<
literal|8
operator||
operator|(
name|unsigned
name|char
operator|)
name|__b1
expr_stmt|;
name|__i0
operator|=
name|__i0
operator|<<
literal|8
operator||
operator|(
name|unsigned
name|char
operator|)
name|__b0
expr_stmt|;
return|return
name|_mm_set_pi32
argument_list|(
name|__i1
argument_list|,
name|__i0
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Similar, but with the arguments in reverse order.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_setr_pi32
parameter_list|(
name|int
name|__i0
parameter_list|,
name|int
name|__i1
parameter_list|)
block|{
return|return
name|_mm_set_pi32
argument_list|(
name|__i1
argument_list|,
name|__i0
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_setr_pi16
parameter_list|(
name|short
name|__w0
parameter_list|,
name|short
name|__w1
parameter_list|,
name|short
name|__w2
parameter_list|,
name|short
name|__w3
parameter_list|)
block|{
return|return
name|_mm_set_pi16
argument_list|(
name|__w3
argument_list|,
name|__w2
argument_list|,
name|__w1
argument_list|,
name|__w0
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_setr_pi8
parameter_list|(
name|char
name|__b0
parameter_list|,
name|char
name|__b1
parameter_list|,
name|char
name|__b2
parameter_list|,
name|char
name|__b3
parameter_list|,
name|char
name|__b4
parameter_list|,
name|char
name|__b5
parameter_list|,
name|char
name|__b6
parameter_list|,
name|char
name|__b7
parameter_list|)
block|{
return|return
name|_mm_set_pi8
argument_list|(
name|__b7
argument_list|,
name|__b6
argument_list|,
name|__b5
argument_list|,
name|__b4
argument_list|,
name|__b3
argument_list|,
name|__b2
argument_list|,
name|__b1
argument_list|,
name|__b0
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Creates a vector of two 32-bit values, both elements containing I.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_set1_pi32
parameter_list|(
name|int
name|__i
parameter_list|)
block|{
return|return
name|_mm_set_pi32
argument_list|(
name|__i
argument_list|,
name|__i
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Creates a vector of four 16-bit values, all elements containing W.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_set1_pi16
parameter_list|(
name|short
name|__w
parameter_list|)
block|{
name|unsigned
name|int
name|__i
init|=
operator|(
name|unsigned
name|short
operator|)
name|__w
operator|<<
literal|16
operator||
operator|(
name|unsigned
name|short
operator|)
name|__w
decl_stmt|;
return|return
name|_mm_set1_pi32
argument_list|(
name|__i
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Creates a vector of four 16-bit values, all elements containing B.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_mm_set1_pi8
parameter_list|(
name|char
name|__b
parameter_list|)
block|{
name|unsigned
name|int
name|__w
init|=
operator|(
name|unsigned
name|char
operator|)
name|__b
operator|<<
literal|8
operator||
operator|(
name|unsigned
name|char
operator|)
name|__b
decl_stmt|;
name|unsigned
name|int
name|__i
init|=
name|__w
operator|<<
literal|16
operator||
name|__w
decl_stmt|;
return|return
name|_mm_set1_pi32
argument_list|(
name|__i
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Convert an integer to a __m64 object.  */
end_comment

begin_function
specifier|static
name|__inline
name|__m64
name|_m_from_int
parameter_list|(
name|int
name|__a
parameter_list|)
block|{
return|return
operator|(
name|__m64
operator|)
name|__a
return|;
block|}
end_function

begin_define
define|#
directive|define
name|_m_packsswb
value|_mm_packs_pi16
end_define

begin_define
define|#
directive|define
name|_m_packssdw
value|_mm_packs_pi32
end_define

begin_define
define|#
directive|define
name|_m_packuswb
value|_mm_packs_pu16
end_define

begin_define
define|#
directive|define
name|_m_packusdw
value|_mm_packs_pu32
end_define

begin_define
define|#
directive|define
name|_m_packssqd
value|_mm_packs_pi64
end_define

begin_define
define|#
directive|define
name|_m_packusqd
value|_mm_packs_pu64
end_define

begin_define
define|#
directive|define
name|_mm_packs_si64
value|_mm_packs_pi64
end_define

begin_define
define|#
directive|define
name|_mm_packs_su64
value|_mm_packs_pu64
end_define

begin_define
define|#
directive|define
name|_m_punpckhbw
value|_mm_unpackhi_pi8
end_define

begin_define
define|#
directive|define
name|_m_punpckhwd
value|_mm_unpackhi_pi16
end_define

begin_define
define|#
directive|define
name|_m_punpckhdq
value|_mm_unpackhi_pi32
end_define

begin_define
define|#
directive|define
name|_m_punpcklbw
value|_mm_unpacklo_pi8
end_define

begin_define
define|#
directive|define
name|_m_punpcklwd
value|_mm_unpacklo_pi16
end_define

begin_define
define|#
directive|define
name|_m_punpckldq
value|_mm_unpacklo_pi32
end_define

begin_define
define|#
directive|define
name|_m_punpckehsbw
value|_mm_unpackeh_pi8
end_define

begin_define
define|#
directive|define
name|_m_punpckehswd
value|_mm_unpackeh_pi16
end_define

begin_define
define|#
directive|define
name|_m_punpckehsdq
value|_mm_unpackeh_pi32
end_define

begin_define
define|#
directive|define
name|_m_punpckehubw
value|_mm_unpackeh_pu8
end_define

begin_define
define|#
directive|define
name|_m_punpckehuwd
value|_mm_unpackeh_pu16
end_define

begin_define
define|#
directive|define
name|_m_punpckehudq
value|_mm_unpackeh_pu32
end_define

begin_define
define|#
directive|define
name|_m_punpckelsbw
value|_mm_unpackel_pi8
end_define

begin_define
define|#
directive|define
name|_m_punpckelswd
value|_mm_unpackel_pi16
end_define

begin_define
define|#
directive|define
name|_m_punpckelsdq
value|_mm_unpackel_pi32
end_define

begin_define
define|#
directive|define
name|_m_punpckelubw
value|_mm_unpackel_pu8
end_define

begin_define
define|#
directive|define
name|_m_punpckeluwd
value|_mm_unpackel_pu16
end_define

begin_define
define|#
directive|define
name|_m_punpckeludq
value|_mm_unpackel_pu32
end_define

begin_define
define|#
directive|define
name|_m_paddb
value|_mm_add_pi8
end_define

begin_define
define|#
directive|define
name|_m_paddw
value|_mm_add_pi16
end_define

begin_define
define|#
directive|define
name|_m_paddd
value|_mm_add_pi32
end_define

begin_define
define|#
directive|define
name|_m_paddsb
value|_mm_adds_pi8
end_define

begin_define
define|#
directive|define
name|_m_paddsw
value|_mm_adds_pi16
end_define

begin_define
define|#
directive|define
name|_m_paddsd
value|_mm_adds_pi32
end_define

begin_define
define|#
directive|define
name|_m_paddusb
value|_mm_adds_pu8
end_define

begin_define
define|#
directive|define
name|_m_paddusw
value|_mm_adds_pu16
end_define

begin_define
define|#
directive|define
name|_m_paddusd
value|_mm_adds_pu32
end_define

begin_define
define|#
directive|define
name|_m_psubb
value|_mm_sub_pi8
end_define

begin_define
define|#
directive|define
name|_m_psubw
value|_mm_sub_pi16
end_define

begin_define
define|#
directive|define
name|_m_psubd
value|_mm_sub_pi32
end_define

begin_define
define|#
directive|define
name|_m_psubsb
value|_mm_subs_pi8
end_define

begin_define
define|#
directive|define
name|_m_psubsw
value|_mm_subs_pi16
end_define

begin_define
define|#
directive|define
name|_m_psubuw
value|_mm_subs_pi32
end_define

begin_define
define|#
directive|define
name|_m_psubusb
value|_mm_subs_pu8
end_define

begin_define
define|#
directive|define
name|_m_psubusw
value|_mm_subs_pu16
end_define

begin_define
define|#
directive|define
name|_m_psubusd
value|_mm_subs_pu32
end_define

begin_define
define|#
directive|define
name|_m_pmaddwd
value|_mm_madd_pi16
end_define

begin_define
define|#
directive|define
name|_m_pmadduwd
value|_mm_madd_pu16
end_define

begin_define
define|#
directive|define
name|_m_pmulhw
value|_mm_mulhi_pi16
end_define

begin_define
define|#
directive|define
name|_m_pmulhuw
value|_mm_mulhi_pu16
end_define

begin_define
define|#
directive|define
name|_m_pmullw
value|_mm_mullo_pi16
end_define

begin_define
define|#
directive|define
name|_m_pmacsw
value|_mm_mac_pi16
end_define

begin_define
define|#
directive|define
name|_m_pmacuw
value|_mm_mac_pu16
end_define

begin_define
define|#
directive|define
name|_m_pmacszw
value|_mm_macz_pi16
end_define

begin_define
define|#
directive|define
name|_m_pmacuzw
value|_mm_macz_pu16
end_define

begin_define
define|#
directive|define
name|_m_paccb
value|_mm_acc_pu8
end_define

begin_define
define|#
directive|define
name|_m_paccw
value|_mm_acc_pu16
end_define

begin_define
define|#
directive|define
name|_m_paccd
value|_mm_acc_pu32
end_define

begin_define
define|#
directive|define
name|_m_pmia
value|_mm_mia_si64
end_define

begin_define
define|#
directive|define
name|_m_pmiaph
value|_mm_miaph_si64
end_define

begin_define
define|#
directive|define
name|_m_pmiabb
value|_mm_miabb_si64
end_define

begin_define
define|#
directive|define
name|_m_pmiabt
value|_mm_miabt_si64
end_define

begin_define
define|#
directive|define
name|_m_pmiatb
value|_mm_miatb_si64
end_define

begin_define
define|#
directive|define
name|_m_pmiatt
value|_mm_miatt_si64
end_define

begin_define
define|#
directive|define
name|_m_psllw
value|_mm_sll_pi16
end_define

begin_define
define|#
directive|define
name|_m_psllwi
value|_mm_slli_pi16
end_define

begin_define
define|#
directive|define
name|_m_pslld
value|_mm_sll_pi32
end_define

begin_define
define|#
directive|define
name|_m_pslldi
value|_mm_slli_pi32
end_define

begin_define
define|#
directive|define
name|_m_psllq
value|_mm_sll_si64
end_define

begin_define
define|#
directive|define
name|_m_psllqi
value|_mm_slli_si64
end_define

begin_define
define|#
directive|define
name|_m_psraw
value|_mm_sra_pi16
end_define

begin_define
define|#
directive|define
name|_m_psrawi
value|_mm_srai_pi16
end_define

begin_define
define|#
directive|define
name|_m_psrad
value|_mm_sra_pi32
end_define

begin_define
define|#
directive|define
name|_m_psradi
value|_mm_srai_pi32
end_define

begin_define
define|#
directive|define
name|_m_psraq
value|_mm_sra_si64
end_define

begin_define
define|#
directive|define
name|_m_psraqi
value|_mm_srai_si64
end_define

begin_define
define|#
directive|define
name|_m_psrlw
value|_mm_srl_pi16
end_define

begin_define
define|#
directive|define
name|_m_psrlwi
value|_mm_srli_pi16
end_define

begin_define
define|#
directive|define
name|_m_psrld
value|_mm_srl_pi32
end_define

begin_define
define|#
directive|define
name|_m_psrldi
value|_mm_srli_pi32
end_define

begin_define
define|#
directive|define
name|_m_psrlq
value|_mm_srl_si64
end_define

begin_define
define|#
directive|define
name|_m_psrlqi
value|_mm_srli_si64
end_define

begin_define
define|#
directive|define
name|_m_prorw
value|_mm_ror_pi16
end_define

begin_define
define|#
directive|define
name|_m_prorwi
value|_mm_rori_pi16
end_define

begin_define
define|#
directive|define
name|_m_prord
value|_mm_ror_pi32
end_define

begin_define
define|#
directive|define
name|_m_prordi
value|_mm_rori_pi32
end_define

begin_define
define|#
directive|define
name|_m_prorq
value|_mm_ror_si64
end_define

begin_define
define|#
directive|define
name|_m_prorqi
value|_mm_rori_si64
end_define

begin_define
define|#
directive|define
name|_m_pand
value|_mm_and_si64
end_define

begin_define
define|#
directive|define
name|_m_pandn
value|_mm_andnot_si64
end_define

begin_define
define|#
directive|define
name|_m_por
value|_mm_or_si64
end_define

begin_define
define|#
directive|define
name|_m_pxor
value|_mm_xor_si64
end_define

begin_define
define|#
directive|define
name|_m_pcmpeqb
value|_mm_cmpeq_pi8
end_define

begin_define
define|#
directive|define
name|_m_pcmpeqw
value|_mm_cmpeq_pi16
end_define

begin_define
define|#
directive|define
name|_m_pcmpeqd
value|_mm_cmpeq_pi32
end_define

begin_define
define|#
directive|define
name|_m_pcmpgtb
value|_mm_cmpgt_pi8
end_define

begin_define
define|#
directive|define
name|_m_pcmpgtub
value|_mm_cmpgt_pu8
end_define

begin_define
define|#
directive|define
name|_m_pcmpgtw
value|_mm_cmpgt_pi16
end_define

begin_define
define|#
directive|define
name|_m_pcmpgtuw
value|_mm_cmpgt_pu16
end_define

begin_define
define|#
directive|define
name|_m_pcmpgtd
value|_mm_cmpgt_pi32
end_define

begin_define
define|#
directive|define
name|_m_pcmpgtud
value|_mm_cmpgt_pu32
end_define

begin_define
define|#
directive|define
name|_m_pextrb
value|_mm_extract_pi8
end_define

begin_define
define|#
directive|define
name|_m_pextrw
value|_mm_extract_pi16
end_define

begin_define
define|#
directive|define
name|_m_pextrd
value|_mm_extract_pi32
end_define

begin_define
define|#
directive|define
name|_m_pextrub
value|_mm_extract_pu8
end_define

begin_define
define|#
directive|define
name|_m_pextruw
value|_mm_extract_pu16
end_define

begin_define
define|#
directive|define
name|_m_pextrud
value|_mm_extract_pu32
end_define

begin_define
define|#
directive|define
name|_m_pinsrb
value|_mm_insert_pi8
end_define

begin_define
define|#
directive|define
name|_m_pinsrw
value|_mm_insert_pi16
end_define

begin_define
define|#
directive|define
name|_m_pinsrd
value|_mm_insert_pi32
end_define

begin_define
define|#
directive|define
name|_m_pmaxsb
value|_mm_max_pi8
end_define

begin_define
define|#
directive|define
name|_m_pmaxsw
value|_mm_max_pi16
end_define

begin_define
define|#
directive|define
name|_m_pmaxsd
value|_mm_max_pi32
end_define

begin_define
define|#
directive|define
name|_m_pmaxub
value|_mm_max_pu8
end_define

begin_define
define|#
directive|define
name|_m_pmaxuw
value|_mm_max_pu16
end_define

begin_define
define|#
directive|define
name|_m_pmaxud
value|_mm_max_pu32
end_define

begin_define
define|#
directive|define
name|_m_pminsb
value|_mm_min_pi8
end_define

begin_define
define|#
directive|define
name|_m_pminsw
value|_mm_min_pi16
end_define

begin_define
define|#
directive|define
name|_m_pminsd
value|_mm_min_pi32
end_define

begin_define
define|#
directive|define
name|_m_pminub
value|_mm_min_pu8
end_define

begin_define
define|#
directive|define
name|_m_pminuw
value|_mm_min_pu16
end_define

begin_define
define|#
directive|define
name|_m_pminud
value|_mm_min_pu32
end_define

begin_define
define|#
directive|define
name|_m_pmovmskb
value|_mm_movemask_pi8
end_define

begin_define
define|#
directive|define
name|_m_pmovmskw
value|_mm_movemask_pi16
end_define

begin_define
define|#
directive|define
name|_m_pmovmskd
value|_mm_movemask_pi32
end_define

begin_define
define|#
directive|define
name|_m_pshufw
value|_mm_shuffle_pi16
end_define

begin_define
define|#
directive|define
name|_m_pavgb
value|_mm_avg_pu8
end_define

begin_define
define|#
directive|define
name|_m_pavgw
value|_mm_avg_pu16
end_define

begin_define
define|#
directive|define
name|_m_pavg2b
value|_mm_avg2_pu8
end_define

begin_define
define|#
directive|define
name|_m_pavg2w
value|_mm_avg2_pu16
end_define

begin_define
define|#
directive|define
name|_m_psadbw
value|_mm_sad_pu8
end_define

begin_define
define|#
directive|define
name|_m_psadwd
value|_mm_sad_pu16
end_define

begin_define
define|#
directive|define
name|_m_psadzbw
value|_mm_sadz_pu8
end_define

begin_define
define|#
directive|define
name|_m_psadzwd
value|_mm_sadz_pu16
end_define

begin_define
define|#
directive|define
name|_m_paligniq
value|_mm_align_si64
end_define

begin_define
define|#
directive|define
name|_m_cvt_si2pi
value|_mm_cvtsi64_m64
end_define

begin_define
define|#
directive|define
name|_m_cvt_pi2si
value|_mm_cvtm64_si64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MMINTRIN_H_INCLUDED */
end_comment

end_unit

