begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Inline functions to test validity of reg classes for addressing modes.    Copyright (C) 2006 Free Software Foundation, Inc.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* Wrapper function to unify target macros MODE_CODE_BASE_REG_CLASS,    MODE_BASE_REG_REG_CLASS, MODE_BASE_REG_CLASS and BASE_REG_CLASS.    Arguments as for the MODE_CODE_BASE_REG_CLASS macro.  */
end_comment

begin_function
specifier|static
specifier|inline
name|enum
name|reg_class
name|base_reg_class
parameter_list|(
name|enum
name|machine_mode
name|mode
name|ATTRIBUTE_UNUSED
parameter_list|,
name|enum
name|rtx_code
name|outer_code
name|ATTRIBUTE_UNUSED
parameter_list|,
name|enum
name|rtx_code
name|index_code
name|ATTRIBUTE_UNUSED
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|MODE_CODE_BASE_REG_CLASS
return|return
name|MODE_CODE_BASE_REG_CLASS
argument_list|(
name|mode
argument_list|,
name|outer_code
argument_list|,
name|index_code
argument_list|)
return|;
else|#
directive|else
ifdef|#
directive|ifdef
name|MODE_BASE_REG_REG_CLASS
if|if
condition|(
name|index_code
operator|==
name|REG
condition|)
return|return
name|MODE_BASE_REG_REG_CLASS
argument_list|(
name|mode
argument_list|)
return|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|MODE_BASE_REG_CLASS
return|return
name|MODE_BASE_REG_CLASS
argument_list|(
name|mode
argument_list|)
return|;
else|#
directive|else
return|return
name|BASE_REG_CLASS
return|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Wrapper function to unify target macros REGNO_MODE_CODE_OK_FOR_BASE_P,    REGNO_MODE_OK_FOR_REG_BASE_P, REGNO_MODE_OK_FOR_BASE_P and    REGNO_OK_FOR_BASE_P.    Arguments as for the REGNO_MODE_CODE_OK_FOR_BASE_P macro.  */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|ok_for_base_p_1
parameter_list|(
name|unsigned
name|regno
parameter_list|,
name|enum
name|machine_mode
name|mode
name|ATTRIBUTE_UNUSED
parameter_list|,
name|enum
name|rtx_code
name|outer_code
name|ATTRIBUTE_UNUSED
parameter_list|,
name|enum
name|rtx_code
name|index_code
name|ATTRIBUTE_UNUSED
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|REGNO_MODE_CODE_OK_FOR_BASE_P
return|return
name|REGNO_MODE_CODE_OK_FOR_BASE_P
argument_list|(
name|regno
argument_list|,
name|mode
argument_list|,
name|outer_code
argument_list|,
name|index_code
argument_list|)
return|;
else|#
directive|else
ifdef|#
directive|ifdef
name|REGNO_MODE_OK_FOR_REG_BASE_P
if|if
condition|(
name|index_code
operator|==
name|REG
condition|)
return|return
name|REGNO_MODE_OK_FOR_REG_BASE_P
argument_list|(
name|regno
argument_list|,
name|mode
argument_list|)
return|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|REGNO_MODE_OK_FOR_BASE_P
return|return
name|REGNO_MODE_OK_FOR_BASE_P
argument_list|(
name|regno
argument_list|,
name|mode
argument_list|)
return|;
else|#
directive|else
return|return
name|REGNO_OK_FOR_BASE_P
argument_list|(
name|regno
argument_list|)
return|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Wrapper around ok_for_base_p_1, for use after register allocation is    complete.  Arguments as for the called function.  */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|regno_ok_for_base_p
parameter_list|(
name|unsigned
name|regno
parameter_list|,
name|enum
name|machine_mode
name|mode
parameter_list|,
name|enum
name|rtx_code
name|outer_code
parameter_list|,
name|enum
name|rtx_code
name|index_code
parameter_list|)
block|{
if|if
condition|(
name|regno
operator|>=
name|FIRST_PSEUDO_REGISTER
operator|&&
name|reg_renumber
index|[
name|regno
index|]
operator|>=
literal|0
condition|)
name|regno
operator|=
name|reg_renumber
index|[
name|regno
index|]
expr_stmt|;
return|return
name|ok_for_base_p_1
argument_list|(
name|regno
argument_list|,
name|mode
argument_list|,
name|outer_code
argument_list|,
name|index_code
argument_list|)
return|;
block|}
end_function

end_unit

