begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Subroutines needed for unwinding stack frames for exception handling.  */
end_comment

begin_comment
comment|/* Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002    Free Software Foundation, Inc.    Contributed by Jason Merrill<jason@cygnus.com>.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  In addition to the permissions in the GNU General Public License, the Free Software Foundation gives you unlimited permission to link the compiled version of this file into combinations with other programs, and to distribute those combinations without any restriction coming from the use of this file.  (The General Public License restrictions do apply in other respects; for example, they cover modification of the file, and distribution when not linked into a combine executable.)  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_struct
struct|struct
name|fde_vector
block|{
name|void
modifier|*
name|orig_data
decl_stmt|;
name|size_t
name|count
decl_stmt|;
name|struct
name|dwarf_fde
modifier|*
name|array
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|object
block|{
name|void
modifier|*
name|pc_begin
decl_stmt|;
name|void
modifier|*
name|tbase
decl_stmt|;
name|void
modifier|*
name|dbase
decl_stmt|;
union|union
block|{
name|struct
name|dwarf_fde
modifier|*
name|single
decl_stmt|;
name|struct
name|dwarf_fde
modifier|*
modifier|*
name|array
decl_stmt|;
name|struct
name|fde_vector
modifier|*
name|sort
decl_stmt|;
block|}
name|u
union|;
union|union
block|{
struct|struct
block|{
name|unsigned
name|long
name|sorted
range|:
literal|1
decl_stmt|;
name|unsigned
name|long
name|from_array
range|:
literal|1
decl_stmt|;
name|unsigned
name|long
name|mixed_encoding
range|:
literal|1
decl_stmt|;
name|unsigned
name|long
name|encoding
range|:
literal|8
decl_stmt|;
comment|/* ??? Wish there was an easy way to detect a 64-bit host here; 	 we've got 32 bits left to play with...  */
name|unsigned
name|long
name|count
range|:
literal|21
decl_stmt|;
block|}
name|b
struct|;
name|size_t
name|i
decl_stmt|;
block|}
name|s
union|;
name|struct
name|object
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* This is the original definition of struct object.  While the struct    itself was opaque to users, they did know how large it was, and    allocate one statically in crtbegin for each DSO.  Keep this around    so that we're aware of the static size limitations for the new struct.  */
end_comment

begin_struct
struct|struct
name|old_object
block|{
name|void
modifier|*
name|pc_begin
decl_stmt|;
name|void
modifier|*
name|pc_end
decl_stmt|;
name|struct
name|dwarf_fde
modifier|*
name|fde_begin
decl_stmt|;
name|struct
name|dwarf_fde
modifier|*
modifier|*
name|fde_array
decl_stmt|;
name|size_t
name|count
decl_stmt|;
name|struct
name|old_object
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dwarf_eh_bases
block|{
name|void
modifier|*
name|tbase
decl_stmt|;
name|void
modifier|*
name|dbase
decl_stmt|;
name|void
modifier|*
name|func
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|extern
name|void
name|__register_frame_info_bases
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|object
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__register_frame_info
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|object
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__register_frame
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__register_frame_info_table_bases
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|object
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__register_frame_info_table
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|object
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__register_frame_table
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|__deregister_frame_info
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|__deregister_frame_info_bases
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|__deregister_frame
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_escape
end_escape

begin_typedef
typedef|typedef
name|int
name|sword
name|__attribute__
typedef|((
name|mode
typedef|(
name|SI
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|int
name|uword
name|__attribute__
typedef|((
name|mode
typedef|(
name|SI
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|int
name|uaddr
name|__attribute__
typedef|((
name|mode
typedef|(
name|pointer
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|int
name|saddr
name|__attribute__
typedef|((
name|mode
typedef|(
name|pointer
typedef|)));
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|char
name|ubyte
typedef|;
end_typedef

begin_comment
comment|/* Terminology:    CIE - Common Information Element    FDE - Frame Descriptor Element     There is one per function, and it describes where the function code    is located, and what the register lifetimes and stack layout are    within the function.     The data structures are defined in the DWARF specification, although    not in a very readable way (see LITERATURE).     Every time an exception is thrown, the code needs to locate the FDE    for the current function, and starts to look for exception regions    from that FDE. This works in a two-level search:    a) in a linear search, find the shared image (i.e. DLL) containing       the PC    b) using the FDE table for that shared object, locate the FDE using       binary search (which requires the sorting).  */
end_comment

begin_comment
comment|/* The first few fields of a CIE.  The CIE_id field is 0 for a CIE,    to distinguish it from a valid FDE.  FDEs are aligned to an addressing    unit boundary, but the fields within are unaligned.  */
end_comment

begin_struct
struct|struct
name|dwarf_cie
block|{
name|uword
name|length
decl_stmt|;
name|sword
name|CIE_id
decl_stmt|;
name|ubyte
name|version
decl_stmt|;
name|unsigned
name|char
name|augmentation
index|[]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|,
name|aligned
argument_list|(
name|__alignof__
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
operator|)
argument_list|)
struct|;
end_struct

begin_comment
comment|/* The first few fields of an FDE.  */
end_comment

begin_struct
struct|struct
name|dwarf_fde
block|{
name|uword
name|length
decl_stmt|;
name|sword
name|CIE_delta
decl_stmt|;
name|unsigned
name|char
name|pc_begin
index|[]
decl_stmt|;
block|}
name|__attribute__
argument_list|(
operator|(
name|packed
operator|,
name|aligned
argument_list|(
name|__alignof__
argument_list|(
name|void
operator|*
argument_list|)
argument_list|)
operator|)
argument_list|)
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|dwarf_fde
name|fde
typedef|;
end_typedef

begin_comment
comment|/* Locate the CIE for a given FDE.  */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|dwarf_cie
modifier|*
name|get_cie
parameter_list|(
name|struct
name|dwarf_fde
modifier|*
name|f
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|&
name|f
operator|->
name|CIE_delta
operator|-
name|f
operator|->
name|CIE_delta
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|fde
modifier|*
name|next_fde
parameter_list|(
name|fde
modifier|*
name|f
parameter_list|)
block|{
return|return
operator|(
name|fde
operator|*
operator|)
operator|(
operator|(
name|char
operator|*
operator|)
name|f
operator|+
name|f
operator|->
name|length
operator|+
sizeof|sizeof
argument_list|(
name|f
operator|->
name|length
argument_list|)
operator|)
return|;
block|}
end_function

begin_function_decl
specifier|extern
name|fde
modifier|*
name|_Unwind_Find_FDE
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|dwarf_eh_bases
modifier|*
parameter_list|)
function_decl|;
end_function_decl

end_unit

