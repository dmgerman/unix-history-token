begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Et-forest data structure implementation.      Copyright (C) 2002 Free Software Foundation, Inc.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* This package implements ET forest data structure. Each tree in     the structure maintains a tree structure and offers logarithmic time    for tree operations (insertion and removal of nodes and edges) and    poly-logarithmic time for nearest common ancesto.      ET tree strores its structue as a sequence of symbols obtained     by dfs(root)     dfs (node)     {      s = node;      for each child c of node do        s = concat (s, c, node);      return s;    }        For example for tree               1           / | \          2  3  4        / |       4  5      the sequence is 1 2 4 2 5 3 1 3 1 4 1.      The sequence is stored in a sligtly modified splay tree.    In order to support various types of node values, a hashtable    is used to convert node values to the internal representation.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ET_TREE_H
end_ifndef

begin_define
define|#
directive|define
name|_ET_TREE_H
end_define

begin_include
include|#
directive|include
file|<ansidecl.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
typedef|typedef
name|struct
name|et_forest
modifier|*
name|et_forest_t
typedef|;
typedef|typedef
name|struct
name|et_forest_node
modifier|*
name|et_forest_node_t
typedef|;
specifier|extern
name|et_forest_t
name|et_forest_create
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|et_forest_delete
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|et_forest_node_t
name|et_forest_add_node
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|et_forest_add_edge
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|,
name|et_forest_node_t
operator|,
name|et_forest_node_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|et_forest_remove_node
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|,
name|et_forest_node_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|et_forest_remove_edge
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|,
name|et_forest_node_t
operator|,
name|et_forest_node_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|et_forest_node_t
name|et_forest_parent
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|,
name|et_forest_node_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|et_forest_node_t
name|et_forest_common_ancestor
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|,
name|et_forest_node_t
operator|,
name|et_forest_node_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
modifier|*
name|et_forest_node_value
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|,
name|et_forest_node_t
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|et_forest_enumerate_sons
name|PARAMS
argument_list|(
operator|(
name|et_forest_t
operator|,
name|et_forest_node_t
operator|,
name|et_forest_node_t
operator|*
operator|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ET_TREE_H */
end_comment

end_unit

