begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Iterator routines for manipulating GENERIC and GIMPLE tree statements.    Copyright (C) 2003, 2004 Free Software Foundation, Inc.    Contributed by Andrew MacLeod<amacleod@redhat.com>  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* This file is dependent upon the implementation of tree's. It provides an    abstract interface to the tree objects such that if all tree creation and    manipulations are done through this interface, we can easily change the    implementation of tree's, and not impact other code.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GCC_TREE_ITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|GCC_TREE_ITERATOR_H
value|1
end_define

begin_comment
comment|/* Iterator object for GENERIC or GIMPLE TREE statements.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|struct
name|tree_statement_list_node
modifier|*
name|ptr
decl_stmt|;
name|tree
name|container
decl_stmt|;
block|}
name|tree_stmt_iterator
typedef|;
end_typedef

begin_function
specifier|static
specifier|inline
name|tree_stmt_iterator
name|tsi_start
parameter_list|(
name|tree
name|t
parameter_list|)
block|{
name|tree_stmt_iterator
name|i
decl_stmt|;
name|i
operator|.
name|ptr
operator|=
name|STATEMENT_LIST_HEAD
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|i
operator|.
name|container
operator|=
name|t
expr_stmt|;
return|return
name|i
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|tree_stmt_iterator
name|tsi_last
parameter_list|(
name|tree
name|t
parameter_list|)
block|{
name|tree_stmt_iterator
name|i
decl_stmt|;
name|i
operator|.
name|ptr
operator|=
name|STATEMENT_LIST_TAIL
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|i
operator|.
name|container
operator|=
name|t
expr_stmt|;
return|return
name|i
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|tsi_end_p
parameter_list|(
name|tree_stmt_iterator
name|i
parameter_list|)
block|{
return|return
name|i
operator|.
name|ptr
operator|==
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|tsi_one_before_end_p
parameter_list|(
name|tree_stmt_iterator
name|i
parameter_list|)
block|{
return|return
name|i
operator|.
name|ptr
operator|!=
name|NULL
operator|&&
name|i
operator|.
name|ptr
operator|->
name|next
operator|==
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|tsi_next
parameter_list|(
name|tree_stmt_iterator
modifier|*
name|i
parameter_list|)
block|{
name|i
operator|->
name|ptr
operator|=
name|i
operator|->
name|ptr
operator|->
name|next
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|tsi_prev
parameter_list|(
name|tree_stmt_iterator
modifier|*
name|i
parameter_list|)
block|{
name|i
operator|->
name|ptr
operator|=
name|i
operator|->
name|ptr
operator|->
name|prev
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|tree
modifier|*
name|tsi_stmt_ptr
parameter_list|(
name|tree_stmt_iterator
name|i
parameter_list|)
block|{
return|return
operator|&
name|i
operator|.
name|ptr
operator|->
name|stmt
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|tree
name|tsi_stmt
parameter_list|(
name|tree_stmt_iterator
name|i
parameter_list|)
block|{
return|return
name|i
operator|.
name|ptr
operator|->
name|stmt
return|;
block|}
end_function

begin_enum
enum|enum
name|tsi_iterator_update
block|{
name|TSI_NEW_STMT
block|,
comment|/* Only valid when single statement is added, move 			   iterator to it.  */
name|TSI_SAME_STMT
block|,
comment|/* Leave the iterator at the same statement.  */
name|TSI_CHAIN_START
block|,
comment|/* Only valid when chain of statements is added, move 			   iterator to the first statement in the chain.  */
name|TSI_CHAIN_END
block|,
comment|/* Only valid when chain of statements is added, move 			   iterator to the last statement in the chain.  */
name|TSI_CONTINUE_LINKING
comment|/* Move iterator to whatever position is suitable for 			   linking other statements/chains of statements in 			   the same direction.  */
block|}
enum|;
end_enum

begin_function_decl
specifier|extern
name|void
name|tsi_link_before
parameter_list|(
name|tree_stmt_iterator
modifier|*
parameter_list|,
name|tree
parameter_list|,
name|enum
name|tsi_iterator_update
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|tsi_link_after
parameter_list|(
name|tree_stmt_iterator
modifier|*
parameter_list|,
name|tree
parameter_list|,
name|enum
name|tsi_iterator_update
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tsi_delink
parameter_list|(
name|tree_stmt_iterator
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|tree
name|tsi_split_statement_list_after
parameter_list|(
specifier|const
name|tree_stmt_iterator
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|tree
name|tsi_split_statement_list_before
parameter_list|(
name|tree_stmt_iterator
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|append_to_statement_list
parameter_list|(
name|tree
parameter_list|,
name|tree
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|append_to_statement_list_force
parameter_list|(
name|tree
parameter_list|,
name|tree
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* GCC_TREE_ITERATOR_H  */
end_comment

end_unit

