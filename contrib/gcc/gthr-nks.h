begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Threads compatibility routines for libgcc2 and libobjc.  */
end_comment

begin_comment
comment|/* Compile this one with gcc.  */
end_comment

begin_comment
comment|/* Copyright (C) 2002, 2003, 2004 Free Software Foundation, Inc.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with other files,    some of which are compiled with GCC, to produce an executable,    this library does not by itself cause the resulting executable    to be covered by the GNU General Public License.    This exception does not however invalidate any other reasons why    the executable file might be covered by the GNU General Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GCC_GTHR_NKS_H
end_ifndef

begin_define
define|#
directive|define
name|GCC_GTHR_NKS_H
end_define

begin_comment
comment|/* NKS threads specific definitions.    Easy, since the interface is mostly one-to-one mapping.  */
end_comment

begin_define
define|#
directive|define
name|__GTHREADS
value|1
end_define

begin_define
define|#
directive|define
name|NKS_NO_INLINE_FUNCS
end_define

begin_include
include|#
directive|include
file|<nksapi.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_typedef
typedef|typedef
name|NXKey_t
name|__gthread_key_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|NXMutex_t
modifier|*
name|__gthread_mutex_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|NXMutex_t
modifier|*
name|__gthread_recursive_mutex_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|__GTHREAD_MUTEX_INIT_FUNCTION
value|__gthread_mutex_init_function
end_define

begin_define
define|#
directive|define
name|__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION
value|__gthread_recursive_mutex_init_function
end_define

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_active_p
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|_LIBOBJC
end_ifdef

begin_comment
comment|/* This is the config.h file in libobjc/ */
end_comment

begin_include
include|#
directive|include
file|<config.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|HAVE_SCHED_H
end_ifdef

begin_include
include|#
directive|include
file|<sched.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Key structure for maintaining thread specific storage */
end_comment

begin_decl_stmt
specifier|static
name|NXKey_t
name|_objc_thread_storage
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Backend initialization functions */
end_comment

begin_comment
comment|/* Initialize the threads subsystem.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_init_thread_system
parameter_list|(
name|void
parameter_list|)
block|{
comment|/* Initialize the thread storage key.  */
if|if
condition|(
name|NXKeyCreate
argument_list|(
name|NULL
argument_list|,
name|NULL
argument_list|,
operator|&
name|_objc_thread_storage
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/* Close the threads subsystem.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_close_thread_system
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
name|NXKeyDelete
argument_list|(
name|_objc_thread_storage
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/* Backend thread functions */
end_comment

begin_comment
comment|/* Create a new thread of execution.  */
end_comment

begin_function
specifier|static
specifier|inline
name|objc_thread_t
name|__gthread_objc_thread_detach
parameter_list|(
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|objc_thread_t
name|thread_id
decl_stmt|;
name|NXContext_t
name|context
decl_stmt|;
name|NXThreadId_t
name|new_thread_handle
decl_stmt|;
name|int
name|err
decl_stmt|;
if|if
condition|(
operator|(
name|context
operator|=
name|NXContextAlloc
argument_list|(
name|func
argument_list|,
name|arg
argument_list|,
name|NX_PRIO_MED
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|err
argument_list|)
operator|)
operator|==
name|NULL
condition|)
name|thread_id
operator|=
name|NULL
expr_stmt|;
elseif|else
if|if
condition|(
name|NXThreadCreate
argument_list|(
name|context
argument_list|,
name|NX_THR_DETACHED
argument_list|,
operator|&
name|new_thread_handle
argument_list|)
operator|==
literal|0
condition|)
name|thread_id
operator|=
operator|(
name|objc_thread_t
operator|)
name|new_thread_handle
expr_stmt|;
else|else
block|{
name|NXContextFree
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|thread_id
operator|=
name|NULL
expr_stmt|;
block|}
return|return
name|thread_id
return|;
block|}
end_function

begin_comment
comment|/* Set the current thread's priority.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_thread_set_priority
parameter_list|(
name|int
name|priority
parameter_list|)
block|{
if|if
condition|(
name|NXThreadSetPriority
argument_list|(
name|NXThreadGetId
argument_list|()
argument_list|,
name|priority
argument_list|)
operator|==
literal|0
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/* Return the current thread's priority.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_thread_get_priority
parameter_list|(
name|void
parameter_list|)
block|{
name|int
name|priority
decl_stmt|;
if|if
condition|(
name|NXThreadGetPriority
argument_list|(
name|NXThreadGetId
argument_list|()
argument_list|,
operator|&
name|priority
argument_list|)
operator|==
literal|0
condition|)
return|return
name|priority
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/* Yield our process time to another thread.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|__gthread_objc_thread_yield
parameter_list|(
name|void
parameter_list|)
block|{
name|NXThreadYield
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Terminate the current thread.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_thread_exit
parameter_list|(
name|void
parameter_list|)
block|{
comment|/* exit the thread */
name|NXThreadExit
argument_list|(
operator|&
name|__objc_thread_exit_status
argument_list|)
expr_stmt|;
comment|/* Failed if we reached here */
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/* Returns an integer value which uniquely describes a thread.  */
end_comment

begin_function
specifier|static
specifier|inline
name|objc_thread_t
name|__gthread_objc_thread_id
parameter_list|(
name|void
parameter_list|)
block|{
operator|(
name|objc_thread_t
operator|)
name|NXThreadGetId
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/* Sets the thread's local storage pointer.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_thread_set_data
parameter_list|(
name|void
modifier|*
name|value
parameter_list|)
block|{
return|return
name|NXKeySetValue
argument_list|(
name|_objc_thread_storage
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Returns the thread's local storage pointer.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|__gthread_objc_thread_get_data
parameter_list|(
name|void
parameter_list|)
block|{
name|void
modifier|*
name|value
decl_stmt|;
if|if
condition|(
name|NXKeyGetValue
argument_list|(
name|_objc_thread_storage
argument_list|,
operator|&
name|value
argument_list|)
operator|==
literal|0
condition|)
return|return
name|value
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_comment
comment|/* Backend mutex functions */
end_comment

begin_comment
comment|/* Allocate a mutex.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_mutex_allocate
parameter_list|(
name|objc_mutex_t
name|mutex
parameter_list|)
block|{
specifier|static
specifier|const
name|NX_LOCK_INFO_ALLOC
argument_list|(
name|info
argument_list|,
literal|"GNU ObjC"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|mutex
operator|->
name|backend
operator|=
name|NXMutexAlloc
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|info
argument_list|)
operator|)
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_comment
comment|/* Deallocate a mutex.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_mutex_deallocate
parameter_list|(
name|objc_mutex_t
name|mutex
parameter_list|)
block|{
while|while
condition|(
name|NXMutexIsOwned
argument_list|(
operator|(
name|NXMutex_t
operator|*
operator|)
name|mutex
operator|->
name|backend
argument_list|)
condition|)
name|NXUnlock
argument_list|(
operator|(
name|NXMutex_t
operator|*
operator|)
name|mutex
operator|->
name|backend
argument_list|)
expr_stmt|;
if|if
condition|(
name|NXMutexFree
argument_list|(
operator|(
name|NXMutex_t
operator|*
operator|)
name|mutex
operator|->
name|backend
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|mutex
operator|->
name|backend
operator|=
name|NULL
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* Grab a lock on a mutex.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_mutex_lock
parameter_list|(
name|objc_mutex_t
name|mutex
parameter_list|)
block|{
return|return
name|NXLock
argument_list|(
operator|(
name|NXMutex_t
operator|*
operator|)
name|mutex
operator|->
name|backend
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Try to grab a lock on a mutex.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_mutex_trylock
parameter_list|(
name|objc_mutex_t
name|mutex
parameter_list|)
block|{
if|if
condition|(
operator|!
name|NXTryLock
argument_list|(
operator|(
name|NXMutex_t
operator|*
operator|)
name|mutex
operator|->
name|backend
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* Unlock the mutex */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_mutex_unlock
parameter_list|(
name|objc_mutex_t
name|mutex
parameter_list|)
block|{
return|return
name|NXUnlock
argument_list|(
operator|(
name|NXMutex_t
operator|*
operator|)
name|mutex
operator|->
name|backend
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Backend condition mutex functions */
end_comment

begin_comment
comment|/* Allocate a condition.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_condition_allocate
parameter_list|(
name|objc_condition_t
name|condition
parameter_list|)
block|{
name|condition
operator|->
name|backend
operator|=
name|NXCondAlloc
argument_list|(
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|condition
operator|->
name|backend
operator|==
name|NULL
condition|)
return|return
operator|-
literal|1
return|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* Deallocate a condition.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_condition_deallocate
parameter_list|(
name|objc_condition_t
name|condition
parameter_list|)
block|{
if|if
condition|(
name|NXCondFree
argument_list|(
operator|(
name|NXCond_t
operator|*
operator|)
name|condition
operator|->
name|backend
argument_list|)
operator|!=
literal|0
condition|)
return|return
operator|-
literal|1
return|;
name|condition
operator|->
name|backend
operator|=
name|NULL
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function

begin_comment
comment|/* Wait on the condition */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_condition_wait
parameter_list|(
name|objc_condition_t
name|condition
parameter_list|,
name|objc_mutex_t
name|mutex
parameter_list|)
block|{
return|return
name|NXCondWait
argument_list|(
operator|(
name|NXCond_t
operator|*
operator|)
name|condition
operator|->
name|backend
argument_list|,
operator|(
name|NXMutex_t
operator|*
operator|)
name|mutex
operator|->
name|backend
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Wake up all threads waiting on this condition.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_condition_broadcast
parameter_list|(
name|objc_condition_t
name|condition
parameter_list|)
block|{
return|return
name|NXCondBroadcast
argument_list|(
operator|(
name|NXCond_t
operator|*
operator|)
name|condition
operator|->
name|backend
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/* Wake up one thread waiting on this condition.  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_objc_condition_signal
parameter_list|(
name|objc_condition_t
name|condition
parameter_list|)
block|{
return|return
name|NXCondSignal
argument_list|(
operator|(
name|NXCond_t
operator|*
operator|)
name|condition
operator|->
name|backend
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* _LIBOBJC */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_include
include|#
directive|include
file|<bits/atomicity.h>
end_include

begin_comment
comment|/* The remaining conditions here are temporary until there is    an application accessible atomic operations API set... */
end_comment

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_M_IA64
argument_list|)
operator|||
name|defined
argument_list|(
name|__ia64__
argument_list|)
end_elif

begin_include
include|#
directive|include
file|<../libstdc++-v3/config/cpu/ia64/bits/atomicity.h>
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_M_IX86
argument_list|)
operator|||
name|defined
argument_list|(
name|__i486__
argument_list|)
end_elif

begin_include
include|#
directive|include
file|<../libstdc++-v3/config/cpu/i486/bits/atomicity.h>
end_include

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|_M_AMD64
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
end_elif

begin_include
include|#
directive|include
file|<../libstdc++-v3/config/cpu/x86-64/bits/atomicity.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
specifier|volatile
name|long
name|__gthread_once_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|__GTHREAD_ONCE_INIT
value|0
end_define

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_once
parameter_list|(
name|__gthread_once_t
modifier|*
name|once
parameter_list|,
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
block|{
if|if
condition|(
name|__compare_and_swap
argument_list|(
name|once
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
condition|)
block|{
name|func
argument_list|()
expr_stmt|;
operator|*
name|once
operator||=
literal|2
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
operator|!
operator|(
operator|*
name|once
operator|&
literal|2
operator|)
condition|)
name|NXThreadYield
argument_list|()
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_key_create
parameter_list|(
name|__gthread_key_t
modifier|*
name|key
parameter_list|,
name|void
function_decl|(
modifier|*
name|dtor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
block|{
return|return
name|NXKeyCreate
argument_list|(
name|dtor
argument_list|,
name|NULL
argument_list|,
name|key
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_key_dtor
parameter_list|(
name|__gthread_key_t
name|key
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
block|{
comment|/* Just reset the key value to zero. */
if|if
condition|(
name|ptr
condition|)
return|return
name|NXKeySetValue
argument_list|(
name|key
argument_list|,
name|NULL
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_key_delete
parameter_list|(
name|__gthread_key_t
name|key
parameter_list|)
block|{
return|return
name|NXKeyDelete
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|__gthread_getspecific
parameter_list|(
name|__gthread_key_t
name|key
parameter_list|)
block|{
name|void
modifier|*
name|value
decl_stmt|;
if|if
condition|(
name|NXKeyGetValue
argument_list|(
name|key
argument_list|,
operator|&
name|value
argument_list|)
operator|==
literal|0
condition|)
return|return
name|value
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_setspecific
parameter_list|(
name|__gthread_key_t
name|key
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|NXKeySetValue
argument_list|(
name|key
argument_list|,
operator|(
name|void
operator|*
operator|)
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__gthread_mutex_init_function
parameter_list|(
name|__gthread_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
specifier|static
specifier|const
name|NX_LOCK_INFO_ALLOC
argument_list|(
name|info
argument_list|,
literal|"GTHREADS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|*
name|mutex
operator|=
name|NXMutexAlloc
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|info
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_mutex_lock
parameter_list|(
name|__gthread_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
return|return
name|NXLock
argument_list|(
operator|*
name|mutex
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_mutex_trylock
parameter_list|(
name|__gthread_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|NXTryLock
argument_list|(
operator|*
name|mutex
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_mutex_unlock
parameter_list|(
name|__gthread_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
return|return
name|NXUnlock
argument_list|(
operator|*
name|mutex
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|__gthread_recursive_mutex_init_function
parameter_list|(
name|__gthread_recursive_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
specifier|static
specifier|const
name|NX_LOCK_INFO_ALLOC
argument_list|(
name|info
argument_list|,
literal|"GTHREADS"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|*
name|mutex
operator|=
name|NXMutexAlloc
argument_list|(
name|NX_MUTEX_RECURSIVE
argument_list|,
literal|0
argument_list|,
operator|&
name|info
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_recursive_mutex_lock
parameter_list|(
name|__gthread_recursive_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
return|return
name|NXLock
argument_list|(
operator|*
name|mutex
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_recursive_mutex_trylock
parameter_list|(
name|__gthread_recursive_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|NXTryLock
argument_list|(
operator|*
name|mutex
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_recursive_mutex_unlock
parameter_list|(
name|__gthread_recursive_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
return|return
name|NXUnlock
argument_list|(
operator|*
name|mutex
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBOBJC */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not GCC_GTHR_NKS_H */
end_comment

end_unit

