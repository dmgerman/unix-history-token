begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Generic single linked list to keep various information     Copyright (C) 1993, 1994 Free Software Foundation, Inc.  Author: Kresten Krab Thorup  This file is part of GNU CC.  GNU CC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GNU CC; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with files compiled with    GCC to produce an executable, this does not cause the resulting executable    to be covered by the GNU General Public License. This exception does not    however invalidate any other reasons why the executable file might be    covered by the GNU General Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GNU_OBJC_LIST_H
end_ifndef

begin_define
define|#
directive|define
name|__GNU_OBJC_LIST_H
end_define

begin_function_decl
name|void
modifier|*
name|__objc_xrealloc
parameter_list|(
name|void
modifier|*
name|optr
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|__objc_xmalloc
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|objc_list
block|{
name|void
modifier|*
name|head
decl_stmt|;
name|struct
name|objc_list
modifier|*
name|tail
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Return a cons cell produced from (head . tail) */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|objc_list
modifier|*
name|list_cons
parameter_list|(
name|void
modifier|*
name|head
parameter_list|,
name|struct
name|objc_list
modifier|*
name|tail
parameter_list|)
block|{
name|struct
name|objc_list
modifier|*
name|cell
decl_stmt|;
name|cell
operator|=
operator|(
expr|struct
name|objc_list
operator|*
operator|)
name|__objc_xmalloc
argument_list|(
sizeof|sizeof
argument_list|(
expr|struct
name|objc_list
argument_list|)
argument_list|)
expr_stmt|;
name|cell
operator|->
name|head
operator|=
name|head
expr_stmt|;
name|cell
operator|->
name|tail
operator|=
name|tail
expr_stmt|;
return|return
name|cell
return|;
block|}
end_function

begin_comment
comment|/* Return the length of a list, list_length(NULL) returns zero */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|list_length
parameter_list|(
name|struct
name|objc_list
modifier|*
name|list
parameter_list|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|list
condition|)
block|{
name|i
operator|+=
literal|1
expr_stmt|;
name|list
operator|=
name|list
operator|->
name|tail
expr_stmt|;
block|}
return|return
name|i
return|;
block|}
end_function

begin_comment
comment|/* Return the Nth element of LIST, where N count from zero.  If N     larger than the list length, NULL is returned  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|list_nth
parameter_list|(
name|int
name|index
parameter_list|,
name|struct
name|objc_list
modifier|*
name|list
parameter_list|)
block|{
while|while
condition|(
name|index
operator|--
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|list
operator|->
name|tail
condition|)
name|list
operator|=
name|list
operator|->
name|tail
expr_stmt|;
else|else
return|return
literal|0
return|;
block|}
return|return
name|list
operator|->
name|head
return|;
block|}
end_function

begin_comment
comment|/* Remove the element at the head by replacing it by its successor */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|list_remove_head
parameter_list|(
name|struct
name|objc_list
modifier|*
modifier|*
name|list
parameter_list|)
block|{
if|if
condition|(
operator|(
operator|*
name|list
operator|)
operator|->
name|tail
condition|)
block|{
name|struct
name|objc_list
modifier|*
name|tail
init|=
operator|(
operator|*
name|list
operator|)
operator|->
name|tail
decl_stmt|;
comment|/* fetch next */
operator|*
operator|(
operator|*
name|list
operator|)
operator|=
operator|*
name|tail
expr_stmt|;
comment|/* copy next to list head */
name|free
argument_list|(
name|tail
argument_list|)
expr_stmt|;
comment|/* free next */
block|}
else|else
comment|/* only one element in list */
block|{
name|free
argument_list|(
operator|*
name|list
argument_list|)
expr_stmt|;
operator|(
operator|*
name|list
operator|)
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* Remove the element with `car' set to ELEMENT */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|list_remove_elem
parameter_list|(
name|struct
name|objc_list
modifier|*
modifier|*
name|list
parameter_list|,
name|void
modifier|*
name|elem
parameter_list|)
block|{
while|while
condition|(
operator|*
name|list
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|list
operator|)
operator|->
name|head
operator|==
name|elem
condition|)
name|list_remove_head
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|list
operator|=
operator|&
operator|(
operator|(
operator|*
name|list
operator|)
operator|->
name|tail
operator|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* Map FUNCTION over all elements in LIST */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|list_mapcar
parameter_list|(
name|struct
name|objc_list
modifier|*
name|list
parameter_list|,
name|void
function_decl|(
modifier|*
name|function
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
block|{
while|while
condition|(
name|list
condition|)
block|{
call|(
modifier|*
name|function
call|)
argument_list|(
name|list
operator|->
name|head
argument_list|)
expr_stmt|;
name|list
operator|=
name|list
operator|->
name|tail
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/* Return element that has ELEM as car */
end_comment

begin_function
specifier|static
specifier|inline
name|struct
name|objc_list
modifier|*
modifier|*
name|list_find
parameter_list|(
name|struct
name|objc_list
modifier|*
modifier|*
name|list
parameter_list|,
name|void
modifier|*
name|elem
parameter_list|)
block|{
while|while
condition|(
operator|*
name|list
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|list
operator|)
operator|->
name|head
operator|==
name|elem
condition|)
return|return
name|list
return|;
name|list
operator|=
operator|&
operator|(
operator|(
operator|*
name|list
operator|)
operator|->
name|tail
operator|)
expr_stmt|;
block|}
return|return
name|NULL
return|;
block|}
end_function

begin_comment
comment|/* Free list (backwards recursive) */
end_comment

begin_function
specifier|static
name|void
name|list_free
parameter_list|(
name|struct
name|objc_list
modifier|*
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
condition|)
block|{
name|list_free
argument_list|(
name|list
operator|->
name|tail
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
endif|__GNU_OBJC_LIST_H
end_endif

end_unit

