begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Threads compatibility routines for libgcc2 and libobjc.    Compile this one with gcc.    Copyright (C) 2004, 2005 Free Software Foundation, Inc.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with other files,    some of which are compiled with GCC, to produce an executable,    this library does not by itself cause the resulting executable    to be covered by the GNU General Public License.    This exception does not however invalidate any other reasons why    the executable file might be covered by the GNU General Public License.  */
end_comment

begin_comment
comment|/* TPF needs its own version of gthr-*.h because TPF always links to     the thread library.  However, for performance reasons we still do not    want to issue thread api calls unless a check is made to see that we    are running as a thread.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GCC_GTHR_TPF_H
end_ifndef

begin_define
define|#
directive|define
name|GCC_GTHR_TPF_H
end_define

begin_comment
comment|/* POSIX threads specific definitions.    Easy, since the interface is just one-to-one mapping.  */
end_comment

begin_define
define|#
directive|define
name|__GTHREADS
value|1
end_define

begin_comment
comment|/* Some implementations of<pthread.h> require this to be defined.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_REENTRANT
end_ifndef

begin_define
define|#
directive|define
name|_REENTRANT
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<pthread.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_typedef
typedef|typedef
name|pthread_key_t
name|__gthread_key_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|pthread_once_t
name|__gthread_once_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|pthread_mutex_t
name|__gthread_mutex_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|pthread_mutex_t
name|__gthread_recursive_mutex_t
typedef|;
end_typedef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|PTHREAD_RECURSIVE_MUTEX_INITIALIZER
argument_list|)
end_if

begin_define
define|#
directive|define
name|__GTHREAD_RECURSIVE_MUTEX_INIT
value|PTHREAD_RECURSIVE_MUTEX_INITIALIZER
end_define

begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
argument_list|)
end_elif

begin_define
define|#
directive|define
name|__GTHREAD_RECURSIVE_MUTEX_INIT
value|PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|__GTHREAD_MUTEX_INIT
value|PTHREAD_MUTEX_INITIALIZER
end_define

begin_define
define|#
directive|define
name|__GTHREAD_ONCE_INIT
value|PTHREAD_ONCE_INIT
end_define

begin_define
define|#
directive|define
name|__GTHREAD_RECURSIVE_MUTEX_INIT_FUNCTION
value|__gthread_recursive_mutex_init_function
end_define

begin_define
define|#
directive|define
name|NOTATHREAD
value|00
end_define

begin_define
define|#
directive|define
name|ECBBASEPTR
value|(unsigned long int) *(unsigned int *)0x00000514u
end_define

begin_define
define|#
directive|define
name|ECBPG2PTR
value|ECBBASEPTR + 0x1000
end_define

begin_define
define|#
directive|define
name|CE2THRCPTR
value|*((unsigned char *)(ECBPG2PTR + 16))
end_define

begin_define
define|#
directive|define
name|__tpf_pthread_active
parameter_list|()
value|(CE2THRCPTR != NOTATHREAD)
end_define

begin_if
if|#
directive|if
name|SUPPORTS_WEAK
operator|&&
name|GTHREAD_USE_WEAK
end_if

begin_define
define|#
directive|define
name|__gthrw
parameter_list|(
name|name
parameter_list|)
define|\
value|static __typeof(name) __gthrw_ ## name __attribute__ ((__weakref__(#name)));
end_define

begin_define
define|#
directive|define
name|__gthrw_
parameter_list|(
name|name
parameter_list|)
value|__gthrw_ ## name
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__gthrw
parameter_list|(
name|name
parameter_list|)
end_define

begin_define
define|#
directive|define
name|__gthrw_
parameter_list|(
name|name
parameter_list|)
value|name
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__gthrw
argument_list|(
argument|pthread_once
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_key_create
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_key_delete
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_getspecific
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_setspecific
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_create
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_mutex_lock
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_mutex_trylock
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_mutex_unlock
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_mutexattr_init
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_mutexattr_settype
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_mutexattr_destroy
argument_list|)
end_macro

begin_macro
name|__gthrw
argument_list|(
argument|pthread_mutex_init
argument_list|)
end_macro

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_active_p
parameter_list|(
name|void
parameter_list|)
block|{
return|return
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_once
parameter_list|(
name|__gthread_once_t
modifier|*
name|once
parameter_list|,
name|void
function_decl|(
modifier|*
name|func
function_decl|)
parameter_list|(
name|void
parameter_list|)
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthrw_
argument_list|(
name|pthread_once
argument_list|)
argument_list|(
name|once
argument_list|,
name|func
argument_list|)
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_key_create
parameter_list|(
name|__gthread_key_t
modifier|*
name|key
parameter_list|,
name|void
function_decl|(
modifier|*
name|dtor
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthrw_
argument_list|(
name|pthread_key_create
argument_list|)
argument_list|(
name|key
argument_list|,
name|dtor
argument_list|)
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_key_delete
parameter_list|(
name|__gthread_key_t
name|key
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthrw_
argument_list|(
name|pthread_key_delete
argument_list|)
argument_list|(
name|key
argument_list|)
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|__gthread_getspecific
parameter_list|(
name|__gthread_key_t
name|key
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthrw_
argument_list|(
name|pthread_getspecific
argument_list|)
argument_list|(
name|key
argument_list|)
return|;
else|else
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_setspecific
parameter_list|(
name|__gthread_key_t
name|key
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthrw_
argument_list|(
name|pthread_setspecific
argument_list|)
argument_list|(
name|key
argument_list|,
name|ptr
argument_list|)
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_mutex_lock
parameter_list|(
name|__gthread_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthrw_
argument_list|(
name|pthread_mutex_lock
argument_list|)
argument_list|(
name|mutex
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_mutex_trylock
parameter_list|(
name|__gthread_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthrw_
argument_list|(
name|pthread_mutex_trylock
argument_list|)
argument_list|(
name|mutex
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_mutex_unlock
parameter_list|(
name|__gthread_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthrw_
argument_list|(
name|pthread_mutex_unlock
argument_list|)
argument_list|(
name|mutex
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_recursive_mutex_lock
parameter_list|(
name|__gthread_recursive_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthread_mutex_lock
argument_list|(
name|mutex
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_recursive_mutex_trylock
parameter_list|(
name|__gthread_recursive_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthread_mutex_trylock
argument_list|(
name|mutex
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_recursive_mutex_unlock
parameter_list|(
name|__gthread_recursive_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
return|return
name|__gthread_mutex_unlock
argument_list|(
name|mutex
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|__gthread_recursive_mutex_init_function
parameter_list|(
name|__gthread_recursive_mutex_t
modifier|*
name|mutex
parameter_list|)
block|{
if|if
condition|(
name|__tpf_pthread_active
argument_list|()
condition|)
block|{
name|pthread_mutexattr_t
name|attr
decl_stmt|;
name|int
name|r
decl_stmt|;
name|r
operator|=
name|__gthrw_
argument_list|(
name|pthread_mutexattr_init
argument_list|)
argument_list|(
operator|&
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
name|r
operator|=
name|__gthrw_
argument_list|(
name|pthread_mutexattr_settype
argument_list|)
argument_list|(
operator|&
name|attr
argument_list|,
name|PTHREAD_MUTEX_RECURSIVE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
name|r
operator|=
name|__gthrw_
argument_list|(
name|pthread_mutex_init
argument_list|)
argument_list|(
name|mutex
argument_list|,
operator|&
name|attr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|r
condition|)
name|r
operator|=
name|__gthrw_
argument_list|(
name|pthread_mutexattr_destroy
argument_list|)
argument_list|(
operator|&
name|attr
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ! GCC_GTHR_TPF_H */
end_comment

end_unit

