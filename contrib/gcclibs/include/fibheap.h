begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* A Fibonacci heap datatype.    Copyright 1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.    Contributed by Daniel Berlin (dan@cgsoftware.com).  This file is part of GCC.     GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* Fibonacci heaps are somewhat complex, but, there's an article in    DDJ that explains them pretty well:     http://www.ddj.com/articles/1997/9701/9701o/9701o.htm?topic=algoritms     Introduction to algorithms by Corman and Rivest also goes over them.     The original paper that introduced them is "Fibonacci heaps and their    uses in improved network optimization algorithms" by Tarjan and    Fredman (JACM 34(3), July 1987).     Amortized and real worst case time for operations:     ExtractMin: O(lg n) amortized. O(n) worst case.    DecreaseKey: O(1) amortized.  O(lg n) worst case.     Insert: O(2) amortized. O(1) actual.      Union: O(1) amortized. O(1) actual.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_FIBHEAP_H_
end_ifndef

begin_define
define|#
directive|define
name|_FIBHEAP_H_
end_define

begin_include
include|#
directive|include
file|"ansidecl.h"
end_include

begin_typedef
typedef|typedef
name|long
name|fibheapkey_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|fibheap
block|{
name|size_t
name|nodes
decl_stmt|;
name|struct
name|fibnode
modifier|*
name|min
decl_stmt|;
name|struct
name|fibnode
modifier|*
name|root
decl_stmt|;
block|}
typedef|*
name|fibheap_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|fibnode
block|{
name|struct
name|fibnode
modifier|*
name|parent
decl_stmt|;
name|struct
name|fibnode
modifier|*
name|child
decl_stmt|;
name|struct
name|fibnode
modifier|*
name|left
decl_stmt|;
name|struct
name|fibnode
modifier|*
name|right
decl_stmt|;
name|fibheapkey_t
name|key
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
operator|!
name|defined
argument_list|(
name|SIZEOF_INT
argument_list|)
operator|||
name|SIZEOF_INT
operator|<
literal|4
operator|)
name|__extension__
name|unsigned
name|long
name|int
name|degree
range|:
literal|31
decl_stmt|;
name|__extension__
name|unsigned
name|long
name|int
name|mark
range|:
literal|1
decl_stmt|;
else|#
directive|else
name|unsigned
name|int
name|degree
range|:
literal|31
decl_stmt|;
name|unsigned
name|int
name|mark
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
block|}
typedef|*
name|fibnode_t
typedef|;
end_typedef

begin_function_decl
specifier|extern
name|fibheap_t
name|fibheap_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|fibnode_t
name|fibheap_insert
parameter_list|(
name|fibheap_t
parameter_list|,
name|fibheapkey_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|fibheap_empty
parameter_list|(
name|fibheap_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|fibheapkey_t
name|fibheap_min_key
parameter_list|(
name|fibheap_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|fibheapkey_t
name|fibheap_replace_key
parameter_list|(
name|fibheap_t
parameter_list|,
name|fibnode_t
parameter_list|,
name|fibheapkey_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|fibheap_replace_key_data
parameter_list|(
name|fibheap_t
parameter_list|,
name|fibnode_t
parameter_list|,
name|fibheapkey_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|fibheap_extract_min
parameter_list|(
name|fibheap_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|fibheap_min
parameter_list|(
name|fibheap_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|fibheap_replace_data
parameter_list|(
name|fibheap_t
parameter_list|,
name|fibnode_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
modifier|*
name|fibheap_delete_node
parameter_list|(
name|fibheap_t
parameter_list|,
name|fibnode_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|fibheap_delete
parameter_list|(
name|fibheap_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|fibheap_t
name|fibheap_union
parameter_list|(
name|fibheap_t
parameter_list|,
name|fibheap_t
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _FIBHEAP_H_ */
end_comment

end_unit

