begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Checking macros for stdio functions.    Copyright (C) 2004, 2005 Free Software Foundation, Inc.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  In addition to the permissions in the GNU General Public License, the Free Software Foundation gives you unlimited permission to link the compiled version of this file into combinations with other programs, and to distribute those combinations without any restriction coming from the use of this file.  (The General Public License restrictions do apply in other respects; for example, they cover modification of the file, and distribution when not linked into a combine executable.)  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with files compiled with    GCC to produce an executable, this does not cause the resulting executable    to be covered by the GNU General Public License. This exception does not    however invalidate any other reasons why the executable file might be    covered by the GNU General Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SSP_STDIO_H
end_ifndef

begin_define
define|#
directive|define
name|_SSP_STDIO_H
value|1
end_define

begin_include
include|#
directive|include
file|<ssp.h>
end_include

begin_empty
empty|#include_next<stdio.h>
end_empty

begin_if
if|#
directive|if
name|__SSP_FORTIFY_LEVEL
operator|>
literal|0
end_if

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_undef
undef|#
directive|undef
name|sprintf
end_undef

begin_undef
undef|#
directive|undef
name|vsprintf
end_undef

begin_undef
undef|#
directive|undef
name|snprintf
end_undef

begin_undef
undef|#
directive|undef
name|vsnprintf
end_undef

begin_undef
undef|#
directive|undef
name|gets
end_undef

begin_undef
undef|#
directive|undef
name|fgets
end_undef

begin_function_decl
specifier|extern
name|int
name|__sprintf_chk
parameter_list|(
name|char
modifier|*
name|__restrict__
name|__s
parameter_list|,
name|int
name|__flag
parameter_list|,
name|size_t
name|__slen
parameter_list|,
name|__const
name|char
modifier|*
name|__restrict__
name|__format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|__vsprintf_chk
parameter_list|(
name|char
modifier|*
name|__restrict__
name|__s
parameter_list|,
name|int
name|__flag
parameter_list|,
name|size_t
name|__slen
parameter_list|,
name|__const
name|char
modifier|*
name|__restrict__
name|__format
parameter_list|,
name|va_list
name|__ap
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|sprintf
parameter_list|(
name|str
parameter_list|,
modifier|...
parameter_list|)
define|\
value|__builtin___sprintf_chk (str, 0, __ssp_bos (str), \ 			   __VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|vsprintf
parameter_list|(
name|str
parameter_list|,
name|fmt
parameter_list|,
name|ap
parameter_list|)
define|\
value|__builtin___vsprintf_chk (str, 0, __ssp_bos (str), fmt, ap)
end_define

begin_function_decl
specifier|extern
name|int
name|__snprintf_chk
parameter_list|(
name|char
modifier|*
name|__restrict__
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
name|int
name|__flag
parameter_list|,
name|size_t
name|__slen
parameter_list|,
name|__const
name|char
modifier|*
name|__restrict__
name|__format
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|__vsnprintf_chk
parameter_list|(
name|char
modifier|*
name|__restrict__
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
name|int
name|__flag
parameter_list|,
name|size_t
name|__slen
parameter_list|,
name|__const
name|char
modifier|*
name|__restrict__
name|__format
parameter_list|,
name|va_list
name|__ap
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|snprintf
parameter_list|(
name|str
parameter_list|,
name|len
parameter_list|,
modifier|...
parameter_list|)
define|\
value|__builtin___snprintf_chk (str, len, 0, __ssp_bos (str), __VA_ARGS__)
end_define

begin_define
define|#
directive|define
name|vsnprintf
parameter_list|(
name|str
parameter_list|,
name|len
parameter_list|,
name|fmt
parameter_list|,
name|ap
parameter_list|)
define|\
value|__builtin___vsnprintf_chk (str, len, 0, __ssp_bos (str), fmt, ap)
end_define

begin_function_decl
specifier|extern
name|char
modifier|*
name|__gets_chk
parameter_list|(
name|char
modifier|*
name|__str
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|__SSP_REDIRECT
argument_list|(
name|__gets_alias
argument_list|,
operator|(
name|char
operator|*
name|__str
operator|)
argument_list|,
name|gets
argument_list|)
decl_stmt|;
end_decl_stmt

begin_extern
extern|extern
specifier|inline
namespace|__attribute__((
name|__always_inline__
end_extern

begin_function
unit|))
name|char
modifier|*
name|gets
parameter_list|(
name|char
modifier|*
name|__str
parameter_list|)
block|{
if|if
condition|(
name|__ssp_bos
argument_list|(
name|__str
argument_list|)
operator|!=
operator|(
name|size_t
operator|)
operator|-
literal|1
condition|)
return|return
name|__gets_chk
argument_list|(
name|__str
argument_list|,
name|__ssp_bos
argument_list|(
name|__str
argument_list|)
argument_list|)
return|;
return|return
name|__gets_alias
argument_list|(
name|__str
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|__SSP_REDIRECT
argument_list|(
name|__fgets_alias
argument_list|,
operator|(
name|char
operator|*
name|__restrict__
name|__s
operator|,
name|int
name|__n
operator|,
name|FILE
operator|*
name|__restrict__
name|__stream
operator|)
argument_list|,
name|fgets
argument_list|)
decl_stmt|;
end_decl_stmt

begin_extern
extern|extern
specifier|inline
namespace|__attribute__((
name|__always_inline__
end_extern

begin_function
unit|))
name|char
modifier|*
name|fgets
parameter_list|(
name|char
modifier|*
name|__restrict__
name|__s
parameter_list|,
name|int
name|__n
parameter_list|,
name|FILE
modifier|*
name|__restrict__
name|__stream
parameter_list|)
block|{
if|if
condition|(
name|__ssp_bos
argument_list|(
name|__s
argument_list|)
operator|!=
operator|(
name|size_t
operator|)
operator|-
literal|1
operator|&&
operator|(
name|size_t
operator|)
name|__n
operator|>
name|__ssp_bos
argument_list|(
name|__s
argument_list|)
condition|)
name|__chk_fail
argument_list|()
expr_stmt|;
return|return
name|__fgets_alias
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|,
name|__stream
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SSP_FORTIFY_LEVEL> 0 */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SSP_STDIO_H */
end_comment

end_unit

