begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Checking macros for unistd functions.    Copyright (C) 2005 Free Software Foundation, Inc.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  In addition to the permissions in the GNU General Public License, the Free Software Foundation gives you unlimited permission to link the compiled version of this file into combinations with other programs, and to distribute those combinations without any restriction coming from the use of this file.  (The General Public License restrictions do apply in other respects; for example, they cover modification of the file, and distribution when not linked into a combine executable.)  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with files compiled with    GCC to produce an executable, this does not cause the resulting executable    to be covered by the GNU General Public License. This exception does not    however invalidate any other reasons why the executable file might be    covered by the GNU General Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_SSP_UNISTD_H
end_ifndef

begin_define
define|#
directive|define
name|_SSP_UNISTD_H
value|1
end_define

begin_include
include|#
directive|include
file|<ssp.h>
end_include

begin_empty
empty|#include_next<unistd.h>
end_empty

begin_if
if|#
directive|if
name|__SSP_FORTIFY_LEVEL
operator|>
literal|0
end_if

begin_undef
undef|#
directive|undef
name|read
end_undef

begin_undef
undef|#
directive|undef
name|readlink
end_undef

begin_undef
undef|#
directive|undef
name|getcwd
end_undef

begin_decl_stmt
specifier|extern
name|ssize_t
name|__SSP_REDIRECT
argument_list|(
name|__read_alias
argument_list|,
operator|(
name|int
name|__fd
operator|,
name|void
operator|*
name|__buf
operator|,
name|size_t
name|__nbytes
operator|)
argument_list|,
name|read
argument_list|)
decl_stmt|;
end_decl_stmt

begin_extern
extern|extern
specifier|inline
namespace|__attribute__((
name|__always_inline__
end_extern

begin_function
unit|))
name|ssize_t
name|read
parameter_list|(
name|int
name|__fd
parameter_list|,
name|void
modifier|*
name|__buf
parameter_list|,
name|size_t
name|__nbytes
parameter_list|)
block|{
if|if
condition|(
name|__ssp_bos0
argument_list|(
name|__buf
argument_list|)
operator|!=
operator|(
name|size_t
operator|)
operator|-
literal|1
operator|&&
name|__nbytes
operator|>
name|__ssp_bos0
argument_list|(
name|__buf
argument_list|)
condition|)
name|__chk_fail
argument_list|()
expr_stmt|;
return|return
name|__read_alias
argument_list|(
name|__fd
argument_list|,
name|__buf
argument_list|,
name|__nbytes
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|extern
name|int
name|__SSP_REDIRECT
argument_list|(
name|__readlink_alias
argument_list|,
operator|(
specifier|const
name|char
operator|*
name|__restrict__
name|__path
operator|,
name|char
operator|*
name|__restrict__
name|__buf
operator|,
name|size_t
name|__len
operator|)
argument_list|,
name|readlink
argument_list|)
decl_stmt|;
end_decl_stmt

begin_extern
extern|extern
specifier|inline
namespace|__attribute__((
name|__always_inline__
end_extern

begin_function
unit|))
name|int
name|readlink
parameter_list|(
specifier|const
name|char
modifier|*
name|__restrict__
name|__path
parameter_list|,
name|char
modifier|*
name|__restrict__
name|__buf
parameter_list|,
name|size_t
name|__len
parameter_list|)
block|{
if|if
condition|(
name|__ssp_bos
argument_list|(
name|__buf
argument_list|)
operator|!=
operator|(
name|size_t
operator|)
operator|-
literal|1
operator|&&
name|__len
operator|>
name|__ssp_bos
argument_list|(
name|__buf
argument_list|)
condition|)
name|__chk_fail
argument_list|()
expr_stmt|;
return|return
name|__readlink_alias
argument_list|(
name|__path
argument_list|,
name|__buf
argument_list|,
name|__len
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|__SSP_REDIRECT
argument_list|(
name|__getcwd_alias
argument_list|,
operator|(
name|char
operator|*
name|__buf
operator|,
name|size_t
name|__size
operator|)
argument_list|,
name|getcwd
argument_list|)
decl_stmt|;
end_decl_stmt

begin_extern
extern|extern
specifier|inline
namespace|__attribute__((
name|__always_inline__
end_extern

begin_function
unit|))
name|char
modifier|*
name|getcwd
parameter_list|(
name|char
modifier|*
name|__buf
parameter_list|,
name|size_t
name|__size
parameter_list|)
block|{
if|if
condition|(
name|__ssp_bos
argument_list|(
name|__buf
argument_list|)
operator|!=
operator|(
name|size_t
operator|)
operator|-
literal|1
operator|&&
name|__size
operator|>
name|__ssp_bos
argument_list|(
name|__buf
argument_list|)
condition|)
name|__chk_fail
argument_list|()
expr_stmt|;
return|return
name|__getcwd_alias
argument_list|(
name|__buf
argument_list|,
name|__size
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SSP_FORTIFY_LEVEL> 0 */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _SSP_UNISTD_H */
end_comment

end_unit

