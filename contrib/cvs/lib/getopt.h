begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Declarations for getopt.    Copyright (C) 1989, 1990, 1991, 1992, 1993 Free Software Foundation, Inc.     This program is free software; you can redistribute it and/or modify it    under the terms of the GNU General Public License as published by the    Free Software Foundation; either version 2, or (at your option) any    later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GETOPT_H
end_ifndef

begin_define
define|#
directive|define
name|_GETOPT_H
value|1
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* For communication from `getopt' to the caller.    When `getopt' finds an option that takes an argument,    the argument value is returned here.    Also, when `ordering' is RETURN_IN_ORDER,    each non-option ARGV-element is returned here.  */
specifier|extern
name|char
modifier|*
name|optarg
decl_stmt|;
comment|/* Index in ARGV of the next element to be scanned.    This is used for communication to and from the caller    and for communication between successive calls to `getopt'.     On entry to `getopt', zero means this is the first call; initialize.     When `getopt' returns EOF, this is the index of the first of the    non-option elements that the caller should itself scan.     Otherwise, `optind' communicates from one call to the next    how much of ARGV has been scanned so far.  */
specifier|extern
name|int
name|optind
decl_stmt|;
comment|/* Callers store zero here to inhibit the error message `getopt' prints    for unrecognized options.  */
specifier|extern
name|int
name|opterr
decl_stmt|;
comment|/* Set to an option character which was unrecognized.  */
specifier|extern
name|int
name|optopt
decl_stmt|;
comment|/* Describe the long-named options requested by the application.    The LONG_OPTIONS argument to getopt_long or getopt_long_only is a vector    of `struct option' terminated by an element containing a name which is    zero.     The field `has_arg' is:    no_argument		(or 0) if the option does not take an argument,    required_argument	(or 1) if the option requires an argument,    optional_argument 	(or 2) if the option takes an optional argument.     If the field `flag' is not NULL, it points to a variable that is set    to the value given in the field `val' when the option is found, but    left unchanged if the option is not found.     To have a long-named option do something other than set an `int' to    a compiled-in constant, such as set a value from `optarg', set the    option's `flag' field to zero and its `val' field to a nonzero    value (the equivalent single-letter option character, if there is    one).  For long options that have a zero `flag' field, `getopt'    returns the contents of the `val' field.  */
struct|struct
name|option
block|{
if|#
directive|if
name|__STDC__
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
else|#
directive|else
name|char
modifier|*
name|name
decl_stmt|;
endif|#
directive|endif
comment|/* has_arg can't be an enum because some compilers complain about      type mismatches in all the code that assumes it is an int.  */
name|int
name|has_arg
decl_stmt|;
name|int
modifier|*
name|flag
decl_stmt|;
name|int
name|val
decl_stmt|;
block|}
struct|;
comment|/* Names for the values of the `has_arg' field of `struct option'.  */
define|#
directive|define
name|no_argument
value|0
define|#
directive|define
name|required_argument
value|1
define|#
directive|define
name|optional_argument
value|2
if|#
directive|if
name|__STDC__
comment|/* Many other libraries have conflicting prototypes for getopt, with    differences in the consts, in stdlib.h.  We used to try to prototype    it if __GNU_LIBRARY__ but that wasn't problem free either (I'm not sure    exactly why), and there is no particular need to prototype it.    We really shouldn't be trampling on the system's namespace at all by    declaring getopt() but that is a bigger issue.  */
specifier|extern
name|int
name|getopt
parameter_list|()
function_decl|;
specifier|extern
name|int
name|getopt_long
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
specifier|const
name|char
modifier|*
name|shortopts
parameter_list|,
specifier|const
name|struct
name|option
modifier|*
name|longopts
parameter_list|,
name|int
modifier|*
name|longind
parameter_list|)
function_decl|;
specifier|extern
name|int
name|getopt_long_only
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
specifier|const
name|char
modifier|*
name|shortopts
parameter_list|,
specifier|const
name|struct
name|option
modifier|*
name|longopts
parameter_list|,
name|int
modifier|*
name|longind
parameter_list|)
function_decl|;
comment|/* Internal only.  Users should not call this directly.  */
specifier|extern
name|int
name|_getopt_internal
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
specifier|const
modifier|*
name|argv
parameter_list|,
specifier|const
name|char
modifier|*
name|shortopts
parameter_list|,
specifier|const
name|struct
name|option
modifier|*
name|longopts
parameter_list|,
name|int
modifier|*
name|longind
parameter_list|,
name|int
name|long_only
parameter_list|)
function_decl|;
else|#
directive|else
comment|/* not __STDC__ */
specifier|extern
name|int
name|getopt
parameter_list|()
function_decl|;
specifier|extern
name|int
name|getopt_long
parameter_list|()
function_decl|;
specifier|extern
name|int
name|getopt_long_only
parameter_list|()
function_decl|;
specifier|extern
name|int
name|_getopt_internal
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|/* not __STDC__ */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _GETOPT_H */
end_comment

end_unit

