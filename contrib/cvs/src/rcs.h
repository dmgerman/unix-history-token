begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1992, Brian Berliner and Jeff Polk  * Copyright (c) 1989-1992, Brian Berliner  *   * You may distribute under the terms of the GNU General Public License as  * specified in the README file that comes with the CVS source distribution.  *   * RCS source control definitions needed by rcs.c and friends  */
end_comment

begin_comment
comment|/* Strings which indicate a conflict if they occur at the start of a line.  */
end_comment

begin_define
define|#
directive|define
name|RCS_MERGE_PAT_1
value|"<<<<<<< "
end_define

begin_define
define|#
directive|define
name|RCS_MERGE_PAT_2
value|"=======\n"
end_define

begin_define
define|#
directive|define
name|RCS_MERGE_PAT_3
value|">>>>>>> "
end_define

begin_define
define|#
directive|define
name|RCSEXT
value|",v"
end_define

begin_define
define|#
directive|define
name|RCSPAT
value|"*,v"
end_define

begin_define
define|#
directive|define
name|RCSHEAD
value|"head"
end_define

begin_define
define|#
directive|define
name|RCSBRANCH
value|"branch"
end_define

begin_define
define|#
directive|define
name|RCSSYMBOLS
value|"symbols"
end_define

begin_define
define|#
directive|define
name|RCSDATE
value|"date"
end_define

begin_define
define|#
directive|define
name|RCSDESC
value|"desc"
end_define

begin_define
define|#
directive|define
name|RCSEXPAND
value|"expand"
end_define

begin_comment
comment|/* Used by the version of death support which resulted from old    versions of CVS (e.g. 1.5 if you define DEATH_SUPPORT and not    DEATH_STATE).  Only a hacked up RCS (used by those old versions of    CVS) will put this into RCS files.  Considered obsolete.  */
end_comment

begin_define
define|#
directive|define
name|RCSDEAD
value|"dead"
end_define

begin_define
define|#
directive|define
name|DATEFORM
value|"%02d.%02d.%02d.%02d.%02d.%02d"
end_define

begin_define
define|#
directive|define
name|SDATEFORM
value|"%d.%d.%d.%d.%d.%d"
end_define

begin_comment
comment|/*  * Opaque structure definitions used by RCS specific lookup routines  */
end_comment

begin_define
define|#
directive|define
name|VALID
value|0x1
end_define

begin_comment
comment|/* flags field contains valid data */
end_comment

begin_define
define|#
directive|define
name|INATTIC
value|0x2
end_define

begin_comment
comment|/* RCS file is located in the Attic */
end_comment

begin_define
define|#
directive|define
name|PARTIAL
value|0x4
end_define

begin_comment
comment|/* RCS file not completly parsed */
end_comment

begin_comment
comment|/* All the "char *" fields in RCSNode, Deltatext, and RCSVers are    '\0'-terminated (except "text" in Deltatext).  This means that we    can't deal with fields containing '\0', which is a limitation that    RCS does not have.  Would be nice to fix this some day.  */
end_comment

begin_struct
struct|struct
name|rcsnode
block|{
comment|/* Reference count for this structure.  Used to deal with the        fact that there might be a pointer from the Vers_TS or might        not.  Callers who increment this field are responsible for        calling freercsnode when they are done with their reference.  */
name|int
name|refcount
decl_stmt|;
comment|/* Flags (INATTIC, PARTIAL,&c), see above.  */
name|int
name|flags
decl_stmt|;
comment|/* File name of the RCS file.  This is not necessarily the name        as specified by the user, but it is a name which can be passed to        system calls and a name which is OK to print in error messages        (the various names might differ in case).  */
name|char
modifier|*
name|path
decl_stmt|;
comment|/* Value for head keyword from RCS header, or NULL if empty.  */
name|char
modifier|*
name|head
decl_stmt|;
comment|/* Value for branch keyword from RCS header, or NULL if omitted.  */
name|char
modifier|*
name|branch
decl_stmt|;
comment|/* Raw data on symbolic revisions.  The first time that RCS_symbols is        called, we parse these into ->symbols, and free ->symbols_data.  */
name|char
modifier|*
name|symbols_data
decl_stmt|;
comment|/* Value for expand keyword from RCS header, or NULL if omitted.  */
name|char
modifier|*
name|expand
decl_stmt|;
comment|/* List of nodes, the key of which is the symbolic name and the data        of which is the numeric revision that it corresponds to (malloc'd).  */
name|List
modifier|*
name|symbols
decl_stmt|;
comment|/* List of nodes (type RCSVERS), the key of which the numeric revision        number, and the data of which is an RCSVers * for the revision.  */
name|List
modifier|*
name|versions
decl_stmt|;
comment|/* Value for access keyword from RCS header, or NULL if empty.        FIXME: RCS_delaccess would also seem to use "" for empty.  We        should pick one or the other.  */
name|char
modifier|*
name|access
decl_stmt|;
comment|/* Raw data on locked revisions.  The first time that RCS_getlocks is        called, we parse these into ->locks, and free ->locks_data.  */
name|char
modifier|*
name|locks_data
decl_stmt|;
comment|/* List of nodes, the key of which is the numeric revision and the        data of which is the user that it corresponds to (malloc'd).  */
name|List
modifier|*
name|locks
decl_stmt|;
comment|/* Set for the strict keyword from the RCS header.  */
name|int
name|strict_locks
decl_stmt|;
comment|/* Value for the comment keyword from RCS header (comment leader), or        NULL if omitted.  */
name|char
modifier|*
name|comment
decl_stmt|;
comment|/* Value for the desc field in the RCS file, or NULL if empty.  */
name|char
modifier|*
name|desc
decl_stmt|;
comment|/* File offset of the first deltatext node, so we can seek there.  */
name|long
name|delta_pos
decl_stmt|;
comment|/* Newphrases from the RCS header.  List of nodes, the key of which        is the "id" which introduces the newphrase, and the value of which        is the value from the newphrase.  */
name|List
modifier|*
name|other
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|rcsnode
name|RCSNode
typedef|;
end_typedef

begin_struct
struct|struct
name|deltatext
block|{
name|char
modifier|*
name|version
decl_stmt|;
comment|/* Log message, or NULL if we do not intend to change the log message        (that is, RCS_copydeltas should just use the log message from the        file).  */
name|char
modifier|*
name|log
decl_stmt|;
comment|/* Change text, or NULL if we do not intend to change the change text        (that is, RCS_copydeltas should just use the change text from the        file).  Note that it is perfectly legal to have log be NULL and        text non-NULL, or vice-versa.  */
name|char
modifier|*
name|text
decl_stmt|;
name|size_t
name|len
decl_stmt|;
comment|/* Newphrase fields from deltatext nodes.  FIXME: duplicates the        other field in the rcsversnode, I think.  */
name|List
modifier|*
name|other
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|deltatext
name|Deltatext
typedef|;
end_typedef

begin_struct
struct|struct
name|rcsversnode
block|{
comment|/* Duplicate of the key by which this structure is indexed.  */
name|char
modifier|*
name|version
decl_stmt|;
name|char
modifier|*
name|date
decl_stmt|;
name|char
modifier|*
name|author
decl_stmt|;
name|char
modifier|*
name|state
decl_stmt|;
name|char
modifier|*
name|next
decl_stmt|;
name|int
name|dead
decl_stmt|;
name|int
name|outdated
decl_stmt|;
name|Deltatext
modifier|*
name|text
decl_stmt|;
name|List
modifier|*
name|branches
decl_stmt|;
comment|/* Newphrase fields from deltatext nodes.  Also contains ";add" and        ";delete" magic fields (see rcs.c, log.c).  I think this is        only used by log.c (where it looks up "log").  Duplicates the        other field in struct deltatext, I think.  */
name|List
modifier|*
name|other
decl_stmt|;
comment|/* Newphrase fields from delta nodes.  */
name|List
modifier|*
name|other_delta
decl_stmt|;
ifdef|#
directive|ifdef
name|PRESERVE_PERMISSIONS_SUPPORT
comment|/* Hard link information for each revision. */
name|List
modifier|*
name|hardlinks
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|rcsversnode
name|RCSVers
typedef|;
end_typedef

begin_comment
comment|/*  * CVS reserves all even-numbered branches for its own use.  "magic" branches  * (see rcs.c) are contained as virtual revision numbers (within symbolic  * tags only) off the RCS_MAGIC_BRANCH, which is 0.  CVS also reserves the  * ".1" branch for vendor revisions.  So, if you do your own branching, you  * should limit your use to odd branch numbers starting at 3.  */
end_comment

begin_define
define|#
directive|define
name|RCS_MAGIC_BRANCH
value|0
end_define

begin_comment
comment|/* The type of a function passed to RCS_checkout.  */
end_comment

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|*RCSCHECKOUTPROC
argument_list|)
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|size_t
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__STDC__
end_ifdef

begin_struct_decl
struct_decl|struct
name|rcsbuffer
struct_decl|;
end_struct_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* What RCS_deltas is supposed to do.  */
end_comment

begin_enum
enum|enum
name|rcs_delta_op
block|{
name|RCS_ANNOTATE
block|,
name|RCS_FETCH
block|}
enum|;
end_enum

begin_comment
comment|/*  * exported interfaces  */
end_comment

begin_decl_stmt
name|RCSNode
modifier|*
name|RCS_parse
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|file
operator|,
specifier|const
name|char
operator|*
name|repos
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|RCSNode
modifier|*
name|RCS_parsercsfile
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|rcsfile
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_fully_parse
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_reparsercsfile
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
name|FILE
operator|*
operator|*
operator|,
expr|struct
name|rcsbuffer
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|RCS_setattic
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_check_kflag
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|arg
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_getdate
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|date
operator|,
name|int
name|force_tag_match
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_gettag
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|symtag
operator|,
name|int
name|force_tag_match
operator|,
name|int
operator|*
name|simple_tag
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_exist_rev
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
name|char
operator|*
name|rev
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_exist_tag
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
name|char
operator|*
name|tag
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_tag2rev
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
name|char
operator|*
name|tag
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_getversion
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|tag
operator|,
specifier|const
name|char
operator|*
name|date
operator|,
name|int
name|force_tag_match
operator|,
name|int
operator|*
name|simple_tag
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_magicrev
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
name|char
operator|*
name|rev
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_isbranch
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|rev
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_nodeisbranch
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|tag
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_whatbranch
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|tag
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_head
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_datecmp
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|date1
operator|,
specifier|const
name|char
operator|*
name|date2
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|time_t
name|RCS_getrevtime
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|rev
operator|,
name|char
operator|*
name|date
operator|,
name|int
name|fudge
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|List
modifier|*
name|RCS_symbols
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_check_tag
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|tag
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_valid_rev
name|PROTO
argument_list|(
operator|(
name|char
operator|*
name|rev
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|List
modifier|*
name|RCS_getlocks
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|freercsnode
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|*
name|rnodep
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_getbranch
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|tag
operator|,
name|int
name|force_tag_match
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_branch_head
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
name|char
operator|*
name|rev
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_isdead
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_getexpand
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_setexpand
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_checkout
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|RCSCHECKOUTPROC
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_checkin
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
name|rcs
operator|,
specifier|const
name|char
operator|*
name|workfile
operator|,
specifier|const
name|char
operator|*
name|message
operator|,
specifier|const
name|char
operator|*
name|rev
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_cmp_file
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_settag
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_deltag
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_setbranch
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_lock
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_unlock
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|RCS_delete_revs
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
name|char
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_addaccess
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_delaccess
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|RCS_getaccess
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|RETSIGTYPE
name|rcs_cleanup
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_rewrite
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
name|Deltatext
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_abandon
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|rcs_change_text
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|char
operator|*
operator|,
name|size_t
operator|,
specifier|const
name|char
operator|*
operator|,
name|size_t
operator|,
name|char
operator|*
operator|*
operator|,
name|size_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|RCS_deltas
name|PROTO
argument_list|(
operator|(
name|RCSNode
operator|*
operator|,
name|FILE
operator|*
operator|,
expr|struct
name|rcsbuffer
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
expr|enum
name|rcs_delta_op
operator|,
name|char
operator|*
operator|*
operator|,
name|size_t
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|size_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|make_file_label
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|RCSNode
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|preserve_perms
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* From import.c.  */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|add_rcs_file
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|size_t
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

