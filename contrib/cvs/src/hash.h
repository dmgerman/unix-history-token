begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1992, Brian Berliner and Jeff Polk  *   * You may distribute under the terms of the GNU General Public License as  * specified in the README file that comes with the CVS 1.4 kit.  */
end_comment

begin_comment
comment|/*  * The number of buckets for the hash table contained in each list.  This  * should probably be prime.  */
end_comment

begin_define
define|#
directive|define
name|HASHSIZE
value|151
end_define

begin_comment
comment|/*  * Types of nodes  */
end_comment

begin_enum
enum|enum
name|ntype
block|{
name|UNKNOWN
block|,
name|HEADER
block|,
name|ENTRIES
block|,
name|FILES
block|,
name|LIST
block|,
name|RCSNODE
block|,
name|RCSVERS
block|,
name|DIRS
block|,
name|UPDATE
block|,
name|LOCK
block|,
name|NDBMNODE
block|,
name|FILEATTR
block|,
name|VARIABLE
block|,
name|RCSFIELD
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|enum
name|ntype
name|Ntype
typedef|;
end_typedef

begin_struct
struct|struct
name|node
block|{
name|Ntype
name|type
decl_stmt|;
name|struct
name|node
modifier|*
name|next
decl_stmt|;
name|struct
name|node
modifier|*
name|prev
decl_stmt|;
name|struct
name|node
modifier|*
name|hashnext
decl_stmt|;
name|struct
name|node
modifier|*
name|hashprev
decl_stmt|;
name|char
modifier|*
name|key
decl_stmt|;
name|char
modifier|*
name|data
decl_stmt|;
name|void
function_decl|(
modifier|*
name|delproc
function_decl|)
parameter_list|()
function_decl|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|node
name|Node
typedef|;
end_typedef

begin_struct
struct|struct
name|list
block|{
name|Node
modifier|*
name|list
decl_stmt|;
name|Node
modifier|*
name|hasharray
index|[
name|HASHSIZE
index|]
decl_stmt|;
name|struct
name|list
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|list
name|List
typedef|;
end_typedef

begin_decl_stmt
name|List
modifier|*
name|getlist
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Node
modifier|*
name|findnode
name|PROTO
argument_list|(
operator|(
name|List
operator|*
name|list
operator|,
specifier|const
name|char
operator|*
name|key
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Node
modifier|*
name|findnode_fn
name|PROTO
argument_list|(
operator|(
name|List
operator|*
name|list
operator|,
specifier|const
name|char
operator|*
name|key
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Node
modifier|*
name|getnode
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|addnode
name|PROTO
argument_list|(
operator|(
name|List
operator|*
name|list
operator|,
name|Node
operator|*
name|p
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|walklist
name|PROTO
argument_list|(
operator|(
name|List
operator|*
name|list
operator|,
name|int
argument_list|(
operator|*
argument_list|)
argument_list|(
name|Node
operator|*
name|n
argument_list|,
name|void
operator|*
name|closure
argument_list|)
operator|,
name|void
operator|*
name|closure
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|list_isempty
name|PROTO
argument_list|(
operator|(
name|List
operator|*
name|list
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dellist
name|PROTO
argument_list|(
operator|(
name|List
operator|*
operator|*
name|listp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|delnode
name|PROTO
argument_list|(
operator|(
name|Node
operator|*
name|p
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|freenode
name|PROTO
argument_list|(
operator|(
name|Node
operator|*
name|p
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|sortlist
name|PROTO
argument_list|(
operator|(
name|List
operator|*
name|list
operator|,
name|int
argument_list|(
operator|*
argument_list|)
argument_list|(
specifier|const
name|Node
operator|*
argument_list|,
specifier|const
name|Node
operator|*
argument_list|)
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

