begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2002 Thomas Moestl<tmm@FreeBSD.org>  * Copyright (c) 2005 Robert N. M. Watson  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * Derived from FreeBSD src/sys/sys/endian.h:1.6.  * $P4: //depot/projects/trustedbsd/openbsm/compat/endian.h#10 $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_COMPAT_ENDIAN_H_
end_ifndef

begin_define
define|#
directive|define
name|_COMPAT_ENDIAN_H_
end_define

begin_comment
comment|/*  * Some systems will have the uint/int types defined here already, others  * will need stdint.h.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|HAVE_STDINT_H
end_ifdef

begin_include
include|#
directive|include
file|<stdint.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Some operating systems do not yet have the more recent endian APIs that  * permit encoding to and decoding from byte streams.  For those systems, we  * implement local non-optimized versions.  */
end_comment

begin_function
specifier|static
name|__inline
name|uint16_t
name|bswap16
parameter_list|(
name|uint16_t
name|int16
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|from
decl_stmt|;
name|unsigned
name|char
modifier|*
name|to
decl_stmt|;
name|uint16_t
name|t
decl_stmt|;
name|from
operator|=
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
operator|&
name|int16
expr_stmt|;
name|to
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|t
expr_stmt|;
name|to
index|[
literal|0
index|]
operator|=
name|from
index|[
literal|1
index|]
expr_stmt|;
name|to
index|[
literal|1
index|]
operator|=
name|from
index|[
literal|0
index|]
expr_stmt|;
return|return
operator|(
name|t
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint32_t
name|bswap32
parameter_list|(
name|uint32_t
name|int32
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|from
decl_stmt|;
name|unsigned
name|char
modifier|*
name|to
decl_stmt|;
name|uint32_t
name|t
decl_stmt|;
name|from
operator|=
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
operator|&
name|int32
expr_stmt|;
name|to
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|t
expr_stmt|;
name|to
index|[
literal|0
index|]
operator|=
name|from
index|[
literal|3
index|]
expr_stmt|;
name|to
index|[
literal|1
index|]
operator|=
name|from
index|[
literal|2
index|]
expr_stmt|;
name|to
index|[
literal|2
index|]
operator|=
name|from
index|[
literal|1
index|]
expr_stmt|;
name|to
index|[
literal|3
index|]
operator|=
name|from
index|[
literal|0
index|]
expr_stmt|;
return|return
operator|(
name|t
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|__inline
name|uint64_t
name|bswap64
parameter_list|(
name|uint64_t
name|int64
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|from
decl_stmt|;
name|unsigned
name|char
modifier|*
name|to
decl_stmt|;
name|uint64_t
name|t
decl_stmt|;
name|from
operator|=
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
operator|&
name|int64
expr_stmt|;
name|to
operator|=
operator|(
name|unsigned
name|char
operator|*
operator|)
operator|&
name|t
expr_stmt|;
name|to
index|[
literal|0
index|]
operator|=
name|from
index|[
literal|7
index|]
expr_stmt|;
name|to
index|[
literal|1
index|]
operator|=
name|from
index|[
literal|6
index|]
expr_stmt|;
name|to
index|[
literal|2
index|]
operator|=
name|from
index|[
literal|5
index|]
expr_stmt|;
name|to
index|[
literal|3
index|]
operator|=
name|from
index|[
literal|4
index|]
expr_stmt|;
name|to
index|[
literal|4
index|]
operator|=
name|from
index|[
literal|3
index|]
expr_stmt|;
name|to
index|[
literal|5
index|]
operator|=
name|from
index|[
literal|2
index|]
expr_stmt|;
name|to
index|[
literal|6
index|]
operator|=
name|from
index|[
literal|1
index|]
expr_stmt|;
name|to
index|[
literal|7
index|]
operator|=
name|from
index|[
literal|0
index|]
expr_stmt|;
return|return
operator|(
name|t
operator|)
return|;
block|}
end_function

begin_if
if|#
directive|if
name|defined
argument_list|(
name|BYTE_ORDER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_BYTE_ORDER
argument_list|)
end_if

begin_define
define|#
directive|define
name|_BYTE_ORDER
value|BYTE_ORDER
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|_BYTE_ORDER
argument_list|)
end_if

begin_error
error|#
directive|error
literal|"Neither BYTE_ORDER nor _BYTE_ORDER defined"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|BIG_ENDIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_BIG_ENDIAN
argument_list|)
end_if

begin_define
define|#
directive|define
name|_BIG_ENDIAN
value|BIG_ENDIAN
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|LITTLE_ENDIAN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|_LITTLE_ENDIAN
argument_list|)
end_if

begin_define
define|#
directive|define
name|_LITTLE_ENDIAN
value|LITTLE_ENDIAN
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* XXX: Hack. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|htobe16
end_ifndef

begin_comment
comment|/*  * Host to big endian, host to little endian, big endian to host, and little  * endian to host byte order functions as detailed in byteorder(9).  */
end_comment

begin_if
if|#
directive|if
name|_BYTE_ORDER
operator|==
name|_LITTLE_ENDIAN
end_if

begin_define
define|#
directive|define
name|htobe16
parameter_list|(
name|x
parameter_list|)
value|bswap16((x))
end_define

begin_define
define|#
directive|define
name|htobe32
parameter_list|(
name|x
parameter_list|)
value|bswap32((x))
end_define

begin_define
define|#
directive|define
name|htobe64
parameter_list|(
name|x
parameter_list|)
value|bswap64((x))
end_define

begin_define
define|#
directive|define
name|htole16
parameter_list|(
name|x
parameter_list|)
value|((uint16_t)(x))
end_define

begin_define
define|#
directive|define
name|htole32
parameter_list|(
name|x
parameter_list|)
value|((uint32_t)(x))
end_define

begin_define
define|#
directive|define
name|htole64
parameter_list|(
name|x
parameter_list|)
value|((uint64_t)(x))
end_define

begin_define
define|#
directive|define
name|be16toh
parameter_list|(
name|x
parameter_list|)
value|bswap16((x))
end_define

begin_define
define|#
directive|define
name|be32toh
parameter_list|(
name|x
parameter_list|)
value|bswap32((x))
end_define

begin_define
define|#
directive|define
name|be64toh
parameter_list|(
name|x
parameter_list|)
value|bswap64((x))
end_define

begin_define
define|#
directive|define
name|le16toh
parameter_list|(
name|x
parameter_list|)
value|((uint16_t)(x))
end_define

begin_define
define|#
directive|define
name|le32toh
parameter_list|(
name|x
parameter_list|)
value|((uint32_t)(x))
end_define

begin_define
define|#
directive|define
name|le64toh
parameter_list|(
name|x
parameter_list|)
value|((uint64_t)(x))
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* _BYTE_ORDER != _LITTLE_ENDIAN */
end_comment

begin_define
define|#
directive|define
name|htobe16
parameter_list|(
name|x
parameter_list|)
value|((uint16_t)(x))
end_define

begin_define
define|#
directive|define
name|htobe32
parameter_list|(
name|x
parameter_list|)
value|((uint32_t)(x))
end_define

begin_define
define|#
directive|define
name|htobe64
parameter_list|(
name|x
parameter_list|)
value|((uint64_t)(x))
end_define

begin_define
define|#
directive|define
name|htole16
parameter_list|(
name|x
parameter_list|)
value|bswap16((x))
end_define

begin_define
define|#
directive|define
name|htole32
parameter_list|(
name|x
parameter_list|)
value|bswap32((x))
end_define

begin_define
define|#
directive|define
name|htole64
parameter_list|(
name|x
parameter_list|)
value|bswap64((x))
end_define

begin_define
define|#
directive|define
name|be16toh
parameter_list|(
name|x
parameter_list|)
value|((uint16_t)(x))
end_define

begin_define
define|#
directive|define
name|be32toh
parameter_list|(
name|x
parameter_list|)
value|((uint32_t)(x))
end_define

begin_define
define|#
directive|define
name|be64toh
parameter_list|(
name|x
parameter_list|)
value|((uint64_t)(x))
end_define

begin_define
define|#
directive|define
name|le16toh
parameter_list|(
name|x
parameter_list|)
value|bswap16((x))
end_define

begin_define
define|#
directive|define
name|le32toh
parameter_list|(
name|x
parameter_list|)
value|bswap32((x))
end_define

begin_define
define|#
directive|define
name|le64toh
parameter_list|(
name|x
parameter_list|)
value|bswap64((x))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _BYTE_ORDER == _LITTLE_ENDIAN */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _COMPAT_ENDIAN_H_ */
end_comment

end_unit

