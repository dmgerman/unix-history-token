begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 1989, 1993  *	The Regents of the University of California.  All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of the University nor the names of its contributors  *    may be used to endorse or promote products derived from this software  *    without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * Defived from FreeBSD head/lib/libc/gen/vis.c 165903, head/include/vis.h  * 203964.  */
end_comment

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<ctype.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_comment
comment|/*  * to select alternate encoding format  */
end_comment

begin_define
define|#
directive|define
name|VIS_OCTAL
value|0x01
end_define

begin_comment
comment|/* use octal \ddd format */
end_comment

begin_define
define|#
directive|define
name|VIS_CSTYLE
value|0x02
end_define

begin_comment
comment|/* use \[nrft0..] where appropriate */
end_comment

begin_comment
comment|/*  * to alter set of characters encoded (default is to encode all  * non-graphic except space, tab, and newline).  */
end_comment

begin_define
define|#
directive|define
name|VIS_SP
value|0x04
end_define

begin_comment
comment|/* also encode space */
end_comment

begin_define
define|#
directive|define
name|VIS_TAB
value|0x08
end_define

begin_comment
comment|/* also encode tab */
end_comment

begin_define
define|#
directive|define
name|VIS_NL
value|0x10
end_define

begin_comment
comment|/* also encode newline */
end_comment

begin_define
define|#
directive|define
name|VIS_WHITE
value|(VIS_SP | VIS_TAB | VIS_NL)
end_define

begin_define
define|#
directive|define
name|VIS_SAFE
value|0x20
end_define

begin_comment
comment|/* only encode "unsafe" characters */
end_comment

begin_comment
comment|/*  * other  */
end_comment

begin_define
define|#
directive|define
name|VIS_NOSLASH
value|0x40
end_define

begin_comment
comment|/* inhibit printing '\' */
end_comment

begin_define
define|#
directive|define
name|VIS_HTTPSTYLE
value|0x80
end_define

begin_comment
comment|/* http-style escape % HEX HEX */
end_comment

begin_define
define|#
directive|define
name|VIS_GLOB
value|0x100
end_define

begin_comment
comment|/* encode glob(3) magics */
end_comment

begin_comment
comment|/*  * unvis return codes  */
end_comment

begin_define
define|#
directive|define
name|UNVIS_VALID
value|1
end_define

begin_comment
comment|/* character valid */
end_comment

begin_define
define|#
directive|define
name|UNVIS_VALIDPUSH
value|2
end_define

begin_comment
comment|/* character valid, push back passed char */
end_comment

begin_define
define|#
directive|define
name|UNVIS_NOCHAR
value|3
end_define

begin_comment
comment|/* valid sequence, no character produced */
end_comment

begin_define
define|#
directive|define
name|UNVIS_SYNBAD
value|-1
end_define

begin_comment
comment|/* unrecognized escape sequence */
end_comment

begin_define
define|#
directive|define
name|UNVIS_ERROR
value|-2
end_define

begin_comment
comment|/* decoder in unknown state (unrecoverable) */
end_comment

begin_comment
comment|/*  * unvis flags  */
end_comment

begin_define
define|#
directive|define
name|UNVIS_END
value|1
end_define

begin_comment
comment|/* no more characters */
end_comment

begin_define
define|#
directive|define
name|isoctal
parameter_list|(
name|c
parameter_list|)
value|(((u_char)(c))>= '0'&& ((u_char)(c))<= '7')
end_define

begin_comment
comment|/*  * vis - visually encode characters  */
end_comment

begin_function
name|char
modifier|*
name|vis
parameter_list|(
name|dst
parameter_list|,
name|c
parameter_list|,
name|flag
parameter_list|,
name|nextc
parameter_list|)
name|char
modifier|*
name|dst
decl_stmt|;
name|int
name|c
decl_stmt|,
name|nextc
decl_stmt|;
name|int
name|flag
decl_stmt|;
block|{
name|c
operator|=
operator|(
name|unsigned
name|char
operator|)
name|c
expr_stmt|;
if|if
condition|(
name|flag
operator|&
name|VIS_HTTPSTYLE
condition|)
block|{
comment|/* Described in RFC 1808 */
if|if
condition|(
operator|!
operator|(
name|isalnum
argument_list|(
name|c
argument_list|)
comment|/* alpha-numeric */
comment|/* safe */
operator|||
name|c
operator|==
literal|'$'
operator|||
name|c
operator|==
literal|'-'
operator|||
name|c
operator|==
literal|'_'
operator|||
name|c
operator|==
literal|'.'
operator|||
name|c
operator|==
literal|'+'
comment|/* extra */
operator|||
name|c
operator|==
literal|'!'
operator|||
name|c
operator|==
literal|'*'
operator|||
name|c
operator|==
literal|'\''
operator|||
name|c
operator|==
literal|'('
operator|||
name|c
operator|==
literal|')'
operator|||
name|c
operator|==
literal|','
operator|)
condition|)
block|{
operator|*
name|dst
operator|++
operator|=
literal|'%'
expr_stmt|;
name|snprintf
argument_list|(
name|dst
argument_list|,
literal|4
argument_list|,
operator|(
name|c
operator|<
literal|16
condition|?
literal|"0%X"
else|:
literal|"%X"
operator|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|dst
operator|+=
literal|2
expr_stmt|;
goto|goto
name|done
goto|;
block|}
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|VIS_GLOB
operator|)
operator|&&
operator|(
name|c
operator|==
literal|'*'
operator|||
name|c
operator|==
literal|'?'
operator|||
name|c
operator|==
literal|'['
operator|||
name|c
operator|==
literal|'#'
operator|)
condition|)
empty_stmt|;
elseif|else
if|if
condition|(
name|isgraph
argument_list|(
name|c
argument_list|)
operator|||
operator|(
operator|(
name|flag
operator|&
name|VIS_SP
operator|)
operator|==
literal|0
operator|&&
name|c
operator|==
literal|' '
operator|)
operator|||
operator|(
operator|(
name|flag
operator|&
name|VIS_TAB
operator|)
operator|==
literal|0
operator|&&
name|c
operator|==
literal|'\t'
operator|)
operator|||
operator|(
operator|(
name|flag
operator|&
name|VIS_NL
operator|)
operator|==
literal|0
operator|&&
name|c
operator|==
literal|'\n'
operator|)
operator|||
operator|(
operator|(
name|flag
operator|&
name|VIS_SAFE
operator|)
operator|&&
operator|(
name|c
operator|==
literal|'\b'
operator|||
name|c
operator|==
literal|'\007'
operator|||
name|c
operator|==
literal|'\r'
operator|)
operator|)
condition|)
block|{
operator|*
name|dst
operator|++
operator|=
name|c
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
operator|&&
operator|(
name|flag
operator|&
name|VIS_NOSLASH
operator|)
operator|==
literal|0
condition|)
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|=
literal|'\0'
expr_stmt|;
return|return
operator|(
name|dst
operator|)
return|;
block|}
if|if
condition|(
name|flag
operator|&
name|VIS_CSTYLE
condition|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\n'
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'n'
expr_stmt|;
goto|goto
name|done
goto|;
case|case
literal|'\r'
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'r'
expr_stmt|;
goto|goto
name|done
goto|;
case|case
literal|'\b'
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'b'
expr_stmt|;
goto|goto
name|done
goto|;
case|case
literal|'\a'
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'a'
expr_stmt|;
goto|goto
name|done
goto|;
case|case
literal|'\v'
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'v'
expr_stmt|;
goto|goto
name|done
goto|;
case|case
literal|'\t'
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'t'
expr_stmt|;
goto|goto
name|done
goto|;
case|case
literal|'\f'
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'f'
expr_stmt|;
goto|goto
name|done
goto|;
case|case
literal|' '
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'s'
expr_stmt|;
goto|goto
name|done
goto|;
case|case
literal|'\0'
case|:
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'0'
expr_stmt|;
if|if
condition|(
name|isoctal
argument_list|(
name|nextc
argument_list|)
condition|)
block|{
operator|*
name|dst
operator|++
operator|=
literal|'0'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'0'
expr_stmt|;
block|}
goto|goto
name|done
goto|;
block|}
block|}
if|if
condition|(
operator|(
operator|(
name|c
operator|&
literal|0177
operator|)
operator|==
literal|' '
operator|)
operator|||
name|isgraph
argument_list|(
name|c
argument_list|)
operator|||
operator|(
name|flag
operator|&
name|VIS_OCTAL
operator|)
condition|)
block|{
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|(
operator|(
name|u_char
operator|)
name|c
operator|>>
literal|6
operator|&
literal|07
operator|)
operator|+
literal|'0'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|(
operator|(
name|u_char
operator|)
name|c
operator|>>
literal|3
operator|&
literal|07
operator|)
operator|+
literal|'0'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
operator|(
operator|(
name|u_char
operator|)
name|c
operator|&
literal|07
operator|)
operator|+
literal|'0'
expr_stmt|;
goto|goto
name|done
goto|;
block|}
if|if
condition|(
operator|(
name|flag
operator|&
name|VIS_NOSLASH
operator|)
operator|==
literal|0
condition|)
operator|*
name|dst
operator|++
operator|=
literal|'\\'
expr_stmt|;
if|if
condition|(
name|c
operator|&
literal|0200
condition|)
block|{
name|c
operator|&=
literal|0177
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
literal|'M'
expr_stmt|;
block|}
if|if
condition|(
name|iscntrl
argument_list|(
name|c
argument_list|)
condition|)
block|{
operator|*
name|dst
operator|++
operator|=
literal|'^'
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|0177
condition|)
operator|*
name|dst
operator|++
operator|=
literal|'?'
expr_stmt|;
else|else
operator|*
name|dst
operator|++
operator|=
name|c
operator|+
literal|'@'
expr_stmt|;
block|}
else|else
block|{
operator|*
name|dst
operator|++
operator|=
literal|'-'
expr_stmt|;
operator|*
name|dst
operator|++
operator|=
name|c
expr_stmt|;
block|}
name|done
label|:
operator|*
name|dst
operator|=
literal|'\0'
expr_stmt|;
return|return
operator|(
name|dst
operator|)
return|;
block|}
end_function

end_unit

