begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* hash.h     Definitions for hashing... */
end_comment

begin_comment
comment|/*  * Copyright (c) 1995-2001 Internet Software Consortium.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of The Internet Software Consortium nor the names  *    of its contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND  * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * This software has been written for the Internet Software Consortium  * by Ted Lemon in cooperation with Vixie Enterprises and Nominum, Inc.  * To learn more about the Internet Software Consortium, see  * ``http://www.isc.org/''.  To learn more about Vixie Enterprises,  * see ``http://www.vix.com''.   To learn more about Nominum, Inc., see  * ``http://www.nominum.com''.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|OMAPI_HASH_H
end_ifndef

begin_define
define|#
directive|define
name|OMAPI_HASH_H
end_define

begin_define
define|#
directive|define
name|DEFAULT_HASH_SIZE
value|9973
end_define

begin_comment
comment|/* The purpose of the hashed_object_t struct is to not match anything else. */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|foo
decl_stmt|;
block|}
name|hashed_object_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|hash_foreach_func
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|hashed_object_t
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|hash_reference
function_decl|)
parameter_list|(
name|hashed_object_t
modifier|*
modifier|*
parameter_list|,
name|hashed_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|hash_dereference
function_decl|)
parameter_list|(
name|hashed_object_t
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|hash_bucket
block|{
name|struct
name|hash_bucket
modifier|*
name|next
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|name
decl_stmt|;
name|unsigned
name|len
decl_stmt|;
name|hashed_object_t
modifier|*
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|int
function_decl|(
modifier|*
name|hash_comparator_t
function_decl|)
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|hash_table
block|{
name|unsigned
name|hash_count
decl_stmt|;
name|struct
name|hash_bucket
modifier|*
name|buckets
index|[
name|DEFAULT_HASH_SIZE
index|]
decl_stmt|;
name|hash_reference
name|referencer
decl_stmt|;
name|hash_dereference
name|dereferencer
decl_stmt|;
name|hash_comparator_t
name|cmp
decl_stmt|;
name|int
function_decl|(
modifier|*
name|do_hash
function_decl|)
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|named_hash
block|{
name|struct
name|named_hash
modifier|*
name|next
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|hash_table
modifier|*
name|hash
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|HASH_FUNCTIONS_DECL
parameter_list|(
name|name
parameter_list|,
name|bufarg
parameter_list|,
name|type
parameter_list|,
name|hashtype
parameter_list|)
define|\
value|void name##_hash_add (hashtype *, bufarg, unsigned, type *,		      \ 		      const char *, int);				      \ void name##_hash_delete (hashtype *, bufarg, unsigned,			      \ 			 const char *, int);				      \ int name##_hash_lookup (type **, hashtype *, bufarg, unsigned,		      \ 			const char *, int);				      \ int name##_hash_foreach (hashtype *,					      \ 			 void (*) (bufarg, unsigned, type *));		      \ int name##_new_hash (hashtype **, int, const char *, int);		      \ void name##_free_hash_table (hashtype **, const char *, int);
end_define

begin_define
define|#
directive|define
name|HASH_FUNCTIONS
parameter_list|(
name|name
parameter_list|,
name|bufarg
parameter_list|,
name|type
parameter_list|,
name|hashtype
parameter_list|,
name|ref
parameter_list|,
name|deref
parameter_list|)
define|\
value|void name##_hash_add (hashtype *table,					      \ 		      bufarg buf, unsigned len, type *ptr,		      \ 		      const char *file, int line)			      \ {									      \ 	add_hash ((struct hash_table *)table,				      \ 		  (const unsigned char *)buf,				      \ 		  len, (hashed_object_t *)ptr, file, line);		      \ }									      \ 									      \ void name##_hash_delete (hashtype *table,				      \ 			 bufarg buf, unsigned len, const char *file, int line)\ {									      \ 	delete_hash_entry ((struct hash_table *)table,			      \ 			   (const unsigned char *)buf,			      \ 			   len, file, line);				      \ }									      \ 									      \ int name##_hash_lookup (type **ptr, hashtype *table,			      \ 			bufarg buf, unsigned len, const char *file, int line) \ {									      \ 	return hash_lookup ((hashed_object_t **)ptr,			      \ 			    (struct hash_table *)table,			      \ 			    (const unsigned char *)buf, len, file, line);     \ }									      \ 									      \ int name##_hash_foreach (hashtype *table,				      \ 			 void (*func) (bufarg, unsigned, type *))	      \ {									      \ 	return hash_foreach ((struct hash_table *)table,		      \ 			     (hash_foreach_func)func);			      \ }									      \ 									      \ int name##_new_hash (hashtype **tp, int c, const char *file, int line)	      \ {									      \ 	return new_hash ((struct hash_table **)tp,			      \ 			 (hash_reference)ref, (hash_dereference)deref, c,     \ 			 file, line);					      \ }									      \ 									      \ void name##_free_hash_table (hashtype **table, const char *file, int line)    \ {									      \ 	free_hash_table ((struct hash_table **)table, file, line);	      \ }
end_define

begin_function_decl
name|void
name|relinquish_hash_bucket_hunks
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|new_hash_table
parameter_list|(
name|struct
name|hash_table
modifier|*
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|free_hash_table
parameter_list|(
name|struct
name|hash_table
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hash_bucket
modifier|*
name|new_hash_bucket
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|free_hash_bucket
parameter_list|(
name|struct
name|hash_bucket
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|new_hash
parameter_list|(
name|struct
name|hash_table
modifier|*
modifier|*
parameter_list|,
name|hash_reference
parameter_list|,
name|hash_dereference
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|add_hash
parameter_list|(
name|struct
name|hash_table
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|hashed_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|delete_hash_entry
parameter_list|(
name|struct
name|hash_table
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hash_lookup
parameter_list|(
name|hashed_object_t
modifier|*
modifier|*
parameter_list|,
name|struct
name|hash_table
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hash_foreach
parameter_list|(
name|struct
name|hash_table
modifier|*
parameter_list|,
name|hash_foreach_func
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|casecmp
parameter_list|(
specifier|const
name|void
modifier|*
name|s
parameter_list|,
specifier|const
name|void
modifier|*
name|t
parameter_list|,
name|unsigned
name|long
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* OMAPI_HASH_H */
end_comment

end_unit

