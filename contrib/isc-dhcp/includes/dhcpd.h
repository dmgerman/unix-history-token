begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* dhcpd.h     Definitions for dhcpd... */
end_comment

begin_comment
comment|/*  * Copyright (c) 1996-2001 Internet Software Consortium.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of The Internet Software Consortium nor the names  *    of its contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND  * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * This software has been written for the Internet Software Consortium  * by Ted Lemon in cooperation with Vixie Enterprises and Nominum, Inc.  * To learn more about the Internet Software Consortium, see  * ``http://www.isc.org/''.  To learn more about Vixie Enterprises,  * see ``http://www.vix.com''.   To learn more about Nominum, Inc., see  * ``http://www.nominum.com''.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CYGWIN32__
end_ifndef

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/un.h>
end_include

begin_include
include|#
directive|include
file|<arpa/inet.h>
end_include

begin_include
include|#
directive|include
file|<netdb.h>
end_include

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|fd_set
value|cygwin_fd_set
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<fcntl.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_include
include|#
directive|include
file|<ctype.h>
end_include

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_include
include|#
directive|include
file|"cdefs.h"
end_include

begin_include
include|#
directive|include
file|"osdep.h"
end_include

begin_include
include|#
directive|include
file|"arpa/nameser.h"
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|NSUPDATE
argument_list|)
end_if

begin_include
include|#
directive|include
file|"minires/minires.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_struct_decl
struct_decl|struct
name|hash_table
struct_decl|;
end_struct_decl

begin_typedef
typedef|typedef
name|struct
name|hash_table
name|group_hash_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|hash_table
name|universe_hash_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|hash_table
name|option_hash_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|hash_table
name|dns_zone_hash_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|hash_table
name|lease_hash_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|hash_table
name|host_hash_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|hash_table
name|class_hash_t
typedef|;
end_typedef

begin_include
include|#
directive|include
file|"dhcp.h"
end_include

begin_include
include|#
directive|include
file|"statement.h"
end_include

begin_include
include|#
directive|include
file|"tree.h"
end_include

begin_include
include|#
directive|include
file|"inet.h"
end_include

begin_include
include|#
directive|include
file|"dhctoken.h"
end_include

begin_include
include|#
directive|include
file|<isc-dhcp/result.h>
end_include

begin_include
include|#
directive|include
file|<omapip/omapip_p.h>
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|OPTION_HASH_SIZE
argument_list|)
end_if

begin_define
define|#
directive|define
name|OPTION_HASH_SIZE
value|17
end_define

begin_define
define|#
directive|define
name|OPTION_HASH_PTWO
value|32
end_define

begin_comment
comment|/* Next power of two above option hash. */
end_comment

begin_define
define|#
directive|define
name|OPTION_HASH_EXP
value|5
end_define

begin_comment
comment|/* The exponent for that power of two. */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|compute_option_hash
parameter_list|(
name|x
parameter_list|)
define|\
value|(((x)& (OPTION_HASH_PTWO - 1)) + \ 	 (((x)>> OPTION_HASH_EXP)& \ 	  (OPTION_HASH_PTWO - 1))) % OPTION_HASH_SIZE;
end_define

begin_enum
enum|enum
name|dhcp_shutdown_state
block|{
name|shutdown_listeners
block|,
name|shutdown_omapi_connections
block|,
name|shutdown_drop_omapi_connections
block|,
name|shutdown_dhcp
block|,
name|shutdown_done
block|}
enum|;
end_enum

begin_comment
comment|/* Client FQDN option, failover FQDN option, etc. */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|u_int8_t
name|codes
index|[
literal|2
index|]
decl_stmt|;
name|unsigned
name|length
decl_stmt|;
name|u_int8_t
modifier|*
name|data
decl_stmt|;
block|}
name|ddns_fqdn_t
typedef|;
end_typedef

begin_include
include|#
directive|include
file|"failover.h"
end_include

begin_comment
comment|/* A parsing context. */
end_comment

begin_struct
struct|struct
name|parse
block|{
name|int
name|lexline
decl_stmt|;
name|int
name|lexchar
decl_stmt|;
name|char
modifier|*
name|token_line
decl_stmt|;
name|char
modifier|*
name|prev_line
decl_stmt|;
name|char
modifier|*
name|cur_line
decl_stmt|;
specifier|const
name|char
modifier|*
name|tlname
decl_stmt|;
name|int
name|eol_token
decl_stmt|;
name|char
name|line1
index|[
literal|81
index|]
decl_stmt|;
name|char
name|line2
index|[
literal|81
index|]
decl_stmt|;
name|int
name|lpos
decl_stmt|;
name|int
name|line
decl_stmt|;
name|int
name|tlpos
decl_stmt|;
name|int
name|tline
decl_stmt|;
name|enum
name|dhcp_token
name|token
decl_stmt|;
name|int
name|ugflag
decl_stmt|;
name|char
modifier|*
name|tval
decl_stmt|;
name|int
name|tlen
decl_stmt|;
name|char
name|tokbuf
index|[
literal|1500
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|OLD_LEXER
name|char
name|comments
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|comment_index
decl_stmt|;
endif|#
directive|endif
name|int
name|warnings_occurred
decl_stmt|;
name|int
name|file
decl_stmt|;
name|char
modifier|*
name|inbuf
decl_stmt|;
name|unsigned
name|bufix
decl_stmt|,
name|buflen
decl_stmt|;
name|unsigned
name|bufsiz
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Variable-length array of data. */
end_comment

begin_struct
struct|struct
name|string_list
block|{
name|struct
name|string_list
modifier|*
name|next
decl_stmt|;
name|char
name|string
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A name server, from /etc/resolv.conf. */
end_comment

begin_struct
struct|struct
name|name_server
block|{
name|struct
name|name_server
modifier|*
name|next
decl_stmt|;
name|struct
name|sockaddr_in
name|addr
decl_stmt|;
name|TIME
name|rcdate
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A domain search list element. */
end_comment

begin_struct
struct|struct
name|domain_search_list
block|{
name|struct
name|domain_search_list
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|domain
decl_stmt|;
name|TIME
name|rcdate
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Option tag structures are used to build chains of option tags, for    when we're sure we're not going to have enough of them to justify    maintaining an array. */
end_comment

begin_struct
struct|struct
name|option_tag
block|{
name|struct
name|option_tag
modifier|*
name|next
decl_stmt|;
name|u_int8_t
name|data
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* An agent option structure.   We need a special structure for the    Relay Agent Information option because if more than one appears in    a message, we have to keep them seperate. */
end_comment

begin_struct
struct|struct
name|agent_options
block|{
name|struct
name|agent_options
modifier|*
name|next
decl_stmt|;
name|int
name|length
decl_stmt|;
name|struct
name|option_tag
modifier|*
name|first
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|option_cache
block|{
name|int
name|refcnt
decl_stmt|;
name|struct
name|option_cache
modifier|*
name|next
decl_stmt|;
name|struct
name|expression
modifier|*
name|expression
decl_stmt|;
name|struct
name|option
modifier|*
name|option
decl_stmt|;
name|struct
name|data_string
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|option_state
block|{
name|int
name|refcnt
decl_stmt|;
name|int
name|universe_count
decl_stmt|;
name|int
name|site_universe
decl_stmt|;
name|int
name|site_code_min
decl_stmt|;
name|VOIDPTR
name|universes
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A dhcp packet and the pointers to its option values. */
end_comment

begin_struct
struct|struct
name|packet
block|{
name|struct
name|dhcp_packet
modifier|*
name|raw
decl_stmt|;
name|int
name|refcnt
decl_stmt|;
name|unsigned
name|packet_length
decl_stmt|;
name|int
name|packet_type
decl_stmt|;
name|int
name|options_valid
decl_stmt|;
name|int
name|client_port
decl_stmt|;
name|struct
name|iaddr
name|client_addr
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|interface
decl_stmt|;
comment|/* Interface on which packet 						   was received. */
name|struct
name|hardware
modifier|*
name|haddr
decl_stmt|;
comment|/* Physical link address 					   of local sender (maybe gateway). */
comment|/* Information for relay agent options (see 	   draft-ietf-dhc-agent-options-xx.txt). */
name|u_int8_t
modifier|*
name|circuit_id
decl_stmt|;
comment|/* Circuit ID of client connection. */
name|int
name|circuit_id_len
decl_stmt|;
name|u_int8_t
modifier|*
name|remote_id
decl_stmt|;
comment|/* Remote ID of client. */
name|int
name|remote_id_len
decl_stmt|;
name|int
name|got_requested_address
decl_stmt|;
comment|/* True if client sent the 					   dhcp-requested-address option. */
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
name|struct
name|option_state
modifier|*
name|options
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|PACKET_MAX_CLASSES
argument_list|)
define|#
directive|define
name|PACKET_MAX_CLASSES
value|5
endif|#
directive|endif
name|int
name|class_count
decl_stmt|;
name|struct
name|class
modifier|*
name|classes
index|[
name|PACKET_MAX_CLASSES
index|]
decl_stmt|;
name|int
name|known
decl_stmt|;
name|int
name|authenticated
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A network interface's MAC address. */
end_comment

begin_struct
struct|struct
name|hardware
block|{
name|u_int8_t
name|hlen
decl_stmt|;
name|u_int8_t
name|hbuf
index|[
literal|17
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|server_startup
init|=
literal|0
block|,
name|server_running
init|=
literal|1
block|,
name|server_shutdown
init|=
literal|2
block|,
name|server_hibernate
init|=
literal|3
block|,
name|server_awaken
init|=
literal|4
block|}
name|control_object_state_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|control_object_state_t
name|state
decl_stmt|;
block|}
name|dhcp_control_object_t
typedef|;
end_typedef

begin_comment
comment|/* Lease states: */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|FTS_FREE
init|=
literal|1
block|,
name|FTS_ACTIVE
init|=
literal|2
block|,
name|FTS_EXPIRED
init|=
literal|3
block|,
name|FTS_RELEASED
init|=
literal|4
block|,
name|FTS_ABANDONED
init|=
literal|5
block|,
name|FTS_RESET
init|=
literal|6
block|,
name|FTS_BACKUP
init|=
literal|7
block|}
name|binding_state_t
typedef|;
end_typedef

begin_comment
comment|/* FTS_LAST is the highest value that is valid for a lease binding state. */
end_comment

begin_define
define|#
directive|define
name|FTS_LAST
value|FTS_BACKUP
end_define

begin_comment
comment|/* A dhcp lease declaration structure. */
end_comment

begin_struct
struct|struct
name|lease
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|struct
name|lease
modifier|*
name|next
decl_stmt|;
name|struct
name|lease
modifier|*
name|n_uid
decl_stmt|,
modifier|*
name|n_hw
decl_stmt|;
name|struct
name|iaddr
name|ip_addr
decl_stmt|;
name|TIME
name|starts
decl_stmt|,
name|ends
decl_stmt|,
name|timestamp
decl_stmt|,
name|sort_time
decl_stmt|;
name|char
modifier|*
name|client_hostname
decl_stmt|;
name|struct
name|binding_scope
modifier|*
name|scope
decl_stmt|;
name|struct
name|host_decl
modifier|*
name|host
decl_stmt|;
name|struct
name|subnet
modifier|*
name|subnet
decl_stmt|;
name|struct
name|pool
modifier|*
name|pool
decl_stmt|;
name|struct
name|class
modifier|*
name|billing_class
decl_stmt|;
name|struct
name|option_chain_head
modifier|*
name|agent_options
decl_stmt|;
name|struct
name|executable_statement
modifier|*
name|on_expiry
decl_stmt|;
name|struct
name|executable_statement
modifier|*
name|on_commit
decl_stmt|;
name|struct
name|executable_statement
modifier|*
name|on_release
decl_stmt|;
name|unsigned
name|char
modifier|*
name|uid
decl_stmt|;
name|unsigned
name|short
name|uid_len
decl_stmt|;
name|unsigned
name|short
name|uid_max
decl_stmt|;
name|unsigned
name|char
name|uid_buf
index|[
literal|7
index|]
decl_stmt|;
name|struct
name|hardware
name|hardware_addr
decl_stmt|;
name|u_int8_t
name|flags
decl_stmt|;
define|#
directive|define
name|STATIC_LEASE
value|1
define|#
directive|define
name|BOOTP_LEASE
value|2
define|#
directive|define
name|PERSISTENT_FLAGS
value|(ON_ACK_QUEUE | ON_UPDATE_QUEUE)
define|#
directive|define
name|MS_NULL_TERMINATION
value|8
define|#
directive|define
name|ON_UPDATE_QUEUE
value|16
define|#
directive|define
name|ON_ACK_QUEUE
value|32
define|#
directive|define
name|UNICAST_BROADCAST_HACK
value|64
define|#
directive|define
name|ON_DEFERRED_QUEUE
value|128
define|#
directive|define
name|EPHEMERAL_FLAGS
value|(MS_NULL_TERMINATION | \ 					 UNICAST_BROADCAST_HACK)
name|binding_state_t
name|__attribute__
argument_list|(
operator|(
name|mode
argument_list|(
name|__byte__
argument_list|)
operator|)
argument_list|)
name|binding_state
decl_stmt|;
name|binding_state_t
name|__attribute__
argument_list|(
operator|(
name|mode
argument_list|(
name|__byte__
argument_list|)
operator|)
argument_list|)
name|next_binding_state
decl_stmt|;
name|binding_state_t
name|__attribute__
argument_list|(
operator|(
name|mode
argument_list|(
name|__byte__
argument_list|)
operator|)
argument_list|)
name|desired_binding_state
decl_stmt|;
name|struct
name|lease_state
modifier|*
name|state
decl_stmt|;
name|TIME
name|tstp
decl_stmt|;
comment|/* Time sent to partner. */
name|TIME
name|tsfp
decl_stmt|;
comment|/* Time sent from partner. */
name|TIME
name|cltt
decl_stmt|;
comment|/* Client last transaction time. */
name|struct
name|lease
modifier|*
name|next_pending
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|lease_state
block|{
name|struct
name|lease_state
modifier|*
name|next
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|ip
decl_stmt|;
name|struct
name|packet
modifier|*
name|packet
decl_stmt|;
comment|/* The incoming packet. */
name|TIME
name|offered_expiry
decl_stmt|;
name|struct
name|option_state
modifier|*
name|options
decl_stmt|;
name|struct
name|data_string
name|parameter_request_list
decl_stmt|;
name|int
name|max_message_size
decl_stmt|;
name|u_int32_t
name|expiry
decl_stmt|,
name|renewal
decl_stmt|,
name|rebind
decl_stmt|;
name|struct
name|data_string
name|filename
decl_stmt|,
name|server_name
decl_stmt|;
name|int
name|got_requested_address
decl_stmt|;
name|int
name|got_server_identifier
decl_stmt|;
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
comment|/* Shared network of interface 						   on which request arrived. */
name|u_int32_t
name|xid
decl_stmt|;
name|u_int16_t
name|secs
decl_stmt|;
name|u_int16_t
name|bootp_flags
decl_stmt|;
name|struct
name|in_addr
name|ciaddr
decl_stmt|;
name|struct
name|in_addr
name|siaddr
decl_stmt|;
name|struct
name|in_addr
name|giaddr
decl_stmt|;
name|u_int8_t
name|hops
decl_stmt|;
name|u_int8_t
name|offer
decl_stmt|;
name|struct
name|iaddr
name|from
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ROOT_GROUP
value|0
end_define

begin_define
define|#
directive|define
name|HOST_DECL
value|1
end_define

begin_define
define|#
directive|define
name|SHARED_NET_DECL
value|2
end_define

begin_define
define|#
directive|define
name|SUBNET_DECL
value|3
end_define

begin_define
define|#
directive|define
name|CLASS_DECL
value|4
end_define

begin_define
define|#
directive|define
name|GROUP_DECL
value|5
end_define

begin_define
define|#
directive|define
name|POOL_DECL
value|6
end_define

begin_comment
comment|/* Possible modes in which discover_interfaces can run. */
end_comment

begin_define
define|#
directive|define
name|DISCOVER_RUNNING
value|0
end_define

begin_define
define|#
directive|define
name|DISCOVER_SERVER
value|1
end_define

begin_define
define|#
directive|define
name|DISCOVER_UNCONFIGURED
value|2
end_define

begin_define
define|#
directive|define
name|DISCOVER_RELAY
value|3
end_define

begin_define
define|#
directive|define
name|DISCOVER_REQUESTED
value|4
end_define

begin_comment
comment|/* Server option names. */
end_comment

begin_define
define|#
directive|define
name|SV_DEFAULT_LEASE_TIME
value|1
end_define

begin_define
define|#
directive|define
name|SV_MAX_LEASE_TIME
value|2
end_define

begin_define
define|#
directive|define
name|SV_MIN_LEASE_TIME
value|3
end_define

begin_define
define|#
directive|define
name|SV_BOOTP_LEASE_CUTOFF
value|4
end_define

begin_define
define|#
directive|define
name|SV_BOOTP_LEASE_LENGTH
value|5
end_define

begin_define
define|#
directive|define
name|SV_BOOT_UNKNOWN_CLIENTS
value|6
end_define

begin_define
define|#
directive|define
name|SV_DYNAMIC_BOOTP
value|7
end_define

begin_define
define|#
directive|define
name|SV_ALLOW_BOOTP
value|8
end_define

begin_define
define|#
directive|define
name|SV_ALLOW_BOOTING
value|9
end_define

begin_define
define|#
directive|define
name|SV_ONE_LEASE_PER_CLIENT
value|10
end_define

begin_define
define|#
directive|define
name|SV_GET_LEASE_HOSTNAMES
value|11
end_define

begin_define
define|#
directive|define
name|SV_USE_HOST_DECL_NAMES
value|12
end_define

begin_define
define|#
directive|define
name|SV_USE_LEASE_ADDR_FOR_DEFAULT_ROUTE
value|13
end_define

begin_define
define|#
directive|define
name|SV_MIN_SECS
value|14
end_define

begin_define
define|#
directive|define
name|SV_FILENAME
value|15
end_define

begin_define
define|#
directive|define
name|SV_SERVER_NAME
value|16
end_define

begin_define
define|#
directive|define
name|SV_NEXT_SERVER
value|17
end_define

begin_define
define|#
directive|define
name|SV_AUTHORITATIVE
value|18
end_define

begin_define
define|#
directive|define
name|SV_VENDOR_OPTION_SPACE
value|19
end_define

begin_define
define|#
directive|define
name|SV_ALWAYS_REPLY_RFC1048
value|20
end_define

begin_define
define|#
directive|define
name|SV_SITE_OPTION_SPACE
value|21
end_define

begin_define
define|#
directive|define
name|SV_ALWAYS_BROADCAST
value|22
end_define

begin_define
define|#
directive|define
name|SV_DDNS_DOMAIN_NAME
value|23
end_define

begin_define
define|#
directive|define
name|SV_DDNS_HOST_NAME
value|24
end_define

begin_define
define|#
directive|define
name|SV_DDNS_REV_DOMAIN_NAME
value|25
end_define

begin_define
define|#
directive|define
name|SV_LEASE_FILE_NAME
value|26
end_define

begin_define
define|#
directive|define
name|SV_PID_FILE_NAME
value|27
end_define

begin_define
define|#
directive|define
name|SV_DUPLICATES
value|28
end_define

begin_define
define|#
directive|define
name|SV_DECLINES
value|29
end_define

begin_define
define|#
directive|define
name|SV_DDNS_UPDATES
value|30
end_define

begin_define
define|#
directive|define
name|SV_OMAPI_PORT
value|31
end_define

begin_define
define|#
directive|define
name|SV_LOCAL_PORT
value|32
end_define

begin_define
define|#
directive|define
name|SV_LIMITED_BROADCAST_ADDRESS
value|33
end_define

begin_define
define|#
directive|define
name|SV_REMOTE_PORT
value|34
end_define

begin_define
define|#
directive|define
name|SV_LOCAL_ADDRESS
value|35
end_define

begin_define
define|#
directive|define
name|SV_OMAPI_KEY
value|36
end_define

begin_define
define|#
directive|define
name|SV_STASH_AGENT_OPTIONS
value|37
end_define

begin_define
define|#
directive|define
name|SV_DDNS_TTL
value|38
end_define

begin_define
define|#
directive|define
name|SV_DDNS_UPDATE_STYLE
value|39
end_define

begin_define
define|#
directive|define
name|SV_CLIENT_UPDATES
value|40
end_define

begin_define
define|#
directive|define
name|SV_UPDATE_OPTIMIZATION
value|41
end_define

begin_define
define|#
directive|define
name|SV_PING_CHECKS
value|42
end_define

begin_define
define|#
directive|define
name|SV_UPDATE_STATIC_LEASES
value|43
end_define

begin_define
define|#
directive|define
name|SV_LOG_FACILITY
value|44
end_define

begin_define
define|#
directive|define
name|SV_DO_FORWARD_UPDATES
value|45
end_define

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DEFAULT_DEFAULT_LEASE_TIME
argument_list|)
end_if

begin_define
define|#
directive|define
name|DEFAULT_DEFAULT_LEASE_TIME
value|43200
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DEFAULT_MIN_LEASE_TIME
argument_list|)
end_if

begin_define
define|#
directive|define
name|DEFAULT_MIN_LEASE_TIME
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DEFAULT_MAX_LEASE_TIME
argument_list|)
end_if

begin_define
define|#
directive|define
name|DEFAULT_MAX_LEASE_TIME
value|86400
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|DEFAULT_DDNS_TTL
argument_list|)
end_if

begin_define
define|#
directive|define
name|DEFAULT_DDNS_TTL
value|3600
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Client option names */
end_comment

begin_define
define|#
directive|define
name|CL_TIMEOUT
value|1
end_define

begin_define
define|#
directive|define
name|CL_SELECT_INTERVAL
value|2
end_define

begin_define
define|#
directive|define
name|CL_REBOOT_TIMEOUT
value|3
end_define

begin_define
define|#
directive|define
name|CL_RETRY_INTERVAL
value|4
end_define

begin_define
define|#
directive|define
name|CL_BACKOFF_CUTOFF
value|5
end_define

begin_define
define|#
directive|define
name|CL_INITIAL_INTERVAL
value|6
end_define

begin_define
define|#
directive|define
name|CL_BOOTP_POLICY
value|7
end_define

begin_define
define|#
directive|define
name|CL_SCRIPT_NAME
value|8
end_define

begin_define
define|#
directive|define
name|CL_REQUESTED_OPTIONS
value|9
end_define

begin_define
define|#
directive|define
name|CL_REQUESTED_LEASE_TIME
value|10
end_define

begin_define
define|#
directive|define
name|CL_SEND_OPTIONS
value|11
end_define

begin_define
define|#
directive|define
name|CL_MEDIA
value|12
end_define

begin_define
define|#
directive|define
name|CL_REJECT_LIST
value|13
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|CL_DEFAULT_TIMEOUT
end_ifndef

begin_define
define|#
directive|define
name|CL_DEFAULT_TIMEOUT
value|60
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CL_DEFAULT_SELECT_INTERVAL
end_ifndef

begin_define
define|#
directive|define
name|CL_DEFAULT_SELECT_INTERVAL
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CL_DEFAULT_REBOOT_TIMEOUT
end_ifndef

begin_define
define|#
directive|define
name|CL_DEFAULT_REBOOT_TIMEOUT
value|10
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CL_DEFAULT_RETRY_INTERVAL
end_ifndef

begin_define
define|#
directive|define
name|CL_DEFAULT_RETRY_INTERVAL
value|300
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CL_DEFAULT_BACKOFF_CUTOFF
end_ifndef

begin_define
define|#
directive|define
name|CL_DEFAULT_BACKOFF_CUTOFF
value|120
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CL_DEFAULT_INITIAL_INTERVAL
end_ifndef

begin_define
define|#
directive|define
name|CL_DEFAULT_INITIAL_INTERVAL
value|10
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CL_DEFAULT_BOOTP_POLICY
end_ifndef

begin_define
define|#
directive|define
name|CL_DEFAULT_BOOTP_POLICY
value|P_ACCEPT
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|CL_DEFAULT_REQUESTED_OPTIONS
end_ifndef

begin_define
define|#
directive|define
name|CL_DEFAULT_REQUESTED_OPTIONS
define|\
value|{ DHO_SUBNET_MASK, \ 	  DHO_BROADCAST_ADDRESS, \ 	  DHO_TIME_OFFSET, \ 	  DHO_ROUTERS, \ 	  DHO_DOMAIN_NAME, \ 	  DHO_DOMAIN_NAME_SERVERS, \ 	  DHO_HOST_NAME }
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|group_object
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|struct
name|group_object
modifier|*
name|n_dynamic
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|GROUP_OBJECT_DELETED
value|1
define|#
directive|define
name|GROUP_OBJECT_DYNAMIC
value|2
define|#
directive|define
name|GROUP_OBJECT_STATIC
value|4
block|}
struct|;
end_struct

begin_comment
comment|/* Group of declarations that share common parameters. */
end_comment

begin_struct
struct|struct
name|group
block|{
name|struct
name|group
modifier|*
name|next
decl_stmt|;
name|int
name|refcnt
decl_stmt|;
name|struct
name|group_object
modifier|*
name|object
decl_stmt|;
name|struct
name|subnet
modifier|*
name|subnet
decl_stmt|;
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
name|int
name|authoritative
decl_stmt|;
name|struct
name|executable_statement
modifier|*
name|statements
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A dhcp host declaration structure. */
end_comment

begin_struct
struct|struct
name|host_decl
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|struct
name|host_decl
modifier|*
name|n_ipaddr
decl_stmt|;
name|struct
name|host_decl
modifier|*
name|n_dynamic
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|hardware
name|interface
decl_stmt|;
name|struct
name|data_string
name|client_identifier
decl_stmt|;
name|struct
name|option_cache
modifier|*
name|fixed_addr
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
name|struct
name|group_object
modifier|*
name|named_group
decl_stmt|;
name|struct
name|data_string
name|auth_key_id
decl_stmt|;
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|HOST_DECL_DELETED
value|1
define|#
directive|define
name|HOST_DECL_DYNAMIC
value|2
define|#
directive|define
name|HOST_DECL_STATIC
value|4
block|}
struct|;
end_struct

begin_struct
struct|struct
name|permit
block|{
name|struct
name|permit
modifier|*
name|next
decl_stmt|;
enum|enum
block|{
name|permit_unknown_clients
block|,
name|permit_known_clients
block|,
name|permit_authenticated_clients
block|,
name|permit_unauthenticated_clients
block|,
name|permit_all_clients
block|,
name|permit_dynamic_bootp_clients
block|,
name|permit_class
block|}
name|type
enum|;
name|struct
name|class
modifier|*
name|class
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|pool
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|struct
name|pool
modifier|*
name|next
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
name|struct
name|permit
modifier|*
name|permit_list
decl_stmt|;
name|struct
name|permit
modifier|*
name|prohibit_list
decl_stmt|;
name|struct
name|lease
modifier|*
name|active
decl_stmt|;
name|struct
name|lease
modifier|*
name|expired
decl_stmt|;
name|struct
name|lease
modifier|*
name|free
decl_stmt|;
name|struct
name|lease
modifier|*
name|backup
decl_stmt|;
name|struct
name|lease
modifier|*
name|abandoned
decl_stmt|;
name|TIME
name|next_event_time
decl_stmt|;
name|int
name|lease_count
decl_stmt|;
name|int
name|free_leases
decl_stmt|;
name|int
name|backup_leases
decl_stmt|;
name|int
name|index
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|FAILOVER_PROTOCOL
argument_list|)
name|dhcp_failover_state_t
modifier|*
name|failover_peer
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|shared_network
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|struct
name|shared_network
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|subnet
modifier|*
name|subnets
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|interface
decl_stmt|;
name|struct
name|pool
modifier|*
name|pools
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|FAILOVER_PROTOCOL
argument_list|)
name|dhcp_failover_state_t
modifier|*
name|failover_peer
decl_stmt|;
endif|#
directive|endif
block|}
struct|;
end_struct

begin_struct
struct|struct
name|subnet
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|struct
name|subnet
modifier|*
name|next_subnet
decl_stmt|;
name|struct
name|subnet
modifier|*
name|next_sibling
decl_stmt|;
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|interface
decl_stmt|;
name|struct
name|iaddr
name|interface_address
decl_stmt|;
name|struct
name|iaddr
name|net
decl_stmt|;
name|struct
name|iaddr
name|netmask
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|collection
block|{
name|struct
name|collection
modifier|*
name|next
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|class
modifier|*
name|classes
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* XXX classes must be reference-counted. */
end_comment

begin_struct
struct|struct
name|class
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|struct
name|class
modifier|*
name|nic
decl_stmt|;
comment|/* Next in collection. */
name|struct
name|class
modifier|*
name|superclass
decl_stmt|;
comment|/* Set for spawned classes only. */
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Not set for spawned classes. */
comment|/* A class may be configured to permit a limited number of leases. */
name|int
name|lease_limit
decl_stmt|;
name|int
name|leases_consumed
decl_stmt|;
name|struct
name|lease
modifier|*
modifier|*
name|billed_leases
decl_stmt|;
comment|/* If nonzero, class has not been saved since it was last 	   modified. */
name|int
name|dirty
decl_stmt|;
comment|/* Hash table containing subclasses. */
name|class_hash_t
modifier|*
name|hash
decl_stmt|;
name|struct
name|data_string
name|hash_string
decl_stmt|;
comment|/* Expression used to match class. */
name|struct
name|expression
modifier|*
name|expr
decl_stmt|;
comment|/* Expression used to compute subclass identifiers for spawning 	   and to do subclass matching. */
name|struct
name|expression
modifier|*
name|submatch
decl_stmt|;
name|int
name|spawning
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
comment|/* Statements to execute if class matches. */
name|struct
name|executable_statement
modifier|*
name|statements
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* DHCP client lease structure... */
end_comment

begin_struct
struct|struct
name|client_lease
block|{
name|struct
name|client_lease
modifier|*
name|next
decl_stmt|;
comment|/* Next lease in list. */
name|TIME
name|expiry
decl_stmt|,
name|renewal
decl_stmt|,
name|rebind
decl_stmt|;
comment|/* Lease timeouts. */
name|struct
name|iaddr
name|address
decl_stmt|;
comment|/* Address being leased. */
name|char
modifier|*
name|server_name
decl_stmt|;
comment|/* Name of boot server. */
name|char
modifier|*
name|filename
decl_stmt|;
comment|/* Name of file we're supposed to boot. */
name|struct
name|string_list
modifier|*
name|medium
decl_stmt|;
comment|/* Network medium. */
name|struct
name|auth_key
modifier|*
name|key
decl_stmt|;
comment|/* Key used in basic DHCP authentication. */
name|unsigned
name|int
name|is_static
range|:
literal|1
decl_stmt|;
comment|/* If set, lease is from config file. */
name|unsigned
name|int
name|is_bootp
range|:
literal|1
decl_stmt|;
comment|/* If set, lease was acquired with BOOTP. */
name|struct
name|option_state
modifier|*
name|options
decl_stmt|;
comment|/* Options supplied with lease. */
block|}
struct|;
end_struct

begin_comment
comment|/* Possible states in which the client can be. */
end_comment

begin_enum
enum|enum
name|dhcp_state
block|{
name|S_REBOOTING
init|=
literal|1
block|,
name|S_INIT
init|=
literal|2
block|,
name|S_SELECTING
init|=
literal|3
block|,
name|S_REQUESTING
init|=
literal|4
block|,
name|S_BOUND
init|=
literal|5
block|,
name|S_RENEWING
init|=
literal|6
block|,
name|S_REBINDING
init|=
literal|7
block|,
name|S_STOPPED
init|=
literal|8
block|}
enum|;
end_enum

begin_comment
comment|/* Authentication and BOOTP policy possibilities (not all values work    for each). */
end_comment

begin_enum
enum|enum
name|policy
block|{
name|P_IGNORE
block|,
name|P_ACCEPT
block|,
name|P_PREFER
block|,
name|P_REQUIRE
block|,
name|P_DONT
block|}
enum|;
end_enum

begin_comment
comment|/* Configuration information from the config file... */
end_comment

begin_struct
struct|struct
name|client_config
block|{
comment|/* 	 * When a message has been received, run these statements 	 * over it. 	 */
name|struct
name|group
modifier|*
name|on_receipt
decl_stmt|;
comment|/* 	 * When a message is sent, run these statements. 	 */
name|struct
name|group
modifier|*
name|on_transmission
decl_stmt|;
name|u_int32_t
modifier|*
name|required_options
decl_stmt|;
comment|/* Options server must supply. */
name|u_int32_t
modifier|*
name|requested_options
decl_stmt|;
comment|/* Options to request from server. */
name|TIME
name|timeout
decl_stmt|;
comment|/* Start to panic if we don't get a 					   lease in this time period when 					   SELECTING. */
name|TIME
name|initial_interval
decl_stmt|;
comment|/* All exponential backoff intervals 					   start here. */
name|TIME
name|retry_interval
decl_stmt|;
comment|/* If the protocol failed to produce 					   an address before the timeout, 					   try the protocol again after this 					   many seconds. */
name|TIME
name|select_interval
decl_stmt|;
comment|/* Wait this many seconds from the 					   first DHCPDISCOVER before 					   picking an offered lease. */
name|TIME
name|reboot_timeout
decl_stmt|;
comment|/* When in INIT-REBOOT, wait this 					   long before giving up and going 					   to INIT. */
name|TIME
name|backoff_cutoff
decl_stmt|;
comment|/* When doing exponential backoff, 					   never back off to an interval 					   longer than this amount. */
name|u_int32_t
name|requested_lease
decl_stmt|;
comment|/* Requested lease time, if user 					   doesn't configure one. */
name|struct
name|string_list
modifier|*
name|media
decl_stmt|;
comment|/* Possible network media values. */
name|char
modifier|*
name|script_name
decl_stmt|;
comment|/* Name of config script. */
name|char
modifier|*
name|vendor_space_name
decl_stmt|;
comment|/* Name of config script. */
name|enum
name|policy
name|bootp_policy
decl_stmt|;
comment|/* Ignore, accept or prefer BOOTP 					   responses. */
name|enum
name|policy
name|auth_policy
decl_stmt|;
comment|/* Require authentication, prefer 					   authentication, or don't try to 					   authenticate. */
name|struct
name|string_list
modifier|*
name|medium
decl_stmt|;
comment|/* Current network medium. */
name|struct
name|iaddrlist
modifier|*
name|reject_list
decl_stmt|;
comment|/* Servers to reject. */
name|int
name|omapi_port
decl_stmt|;
comment|/* port on which to accept OMAPI 					   connections, or -1 for no 					   listener. */
name|int
name|do_forward_update
decl_stmt|;
comment|/* If nonzero, and if we have the 					   information we need, update the 					   A record for the address we get. */
block|}
struct|;
end_struct

begin_comment
comment|/* Per-interface state used in the dhcp client... */
end_comment

begin_struct
struct|struct
name|client_state
block|{
name|struct
name|client_state
modifier|*
name|next
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|interface
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|client_lease
modifier|*
name|active
decl_stmt|;
comment|/* Currently active lease. */
name|struct
name|client_lease
modifier|*
name|new
decl_stmt|;
comment|/* New lease. */
name|struct
name|client_lease
modifier|*
name|offered_leases
decl_stmt|;
comment|/* Leases offered to us. */
name|struct
name|client_lease
modifier|*
name|leases
decl_stmt|;
comment|/* Leases we currently hold. */
name|struct
name|client_lease
modifier|*
name|alias
decl_stmt|;
comment|/* Alias lease. */
name|enum
name|dhcp_state
name|state
decl_stmt|;
comment|/* Current state for this interface. */
name|struct
name|iaddr
name|destination
decl_stmt|;
comment|/* Where to send packet. */
name|u_int32_t
name|xid
decl_stmt|;
comment|/* Transaction ID. */
name|u_int16_t
name|secs
decl_stmt|;
comment|/* secs value from DHCPDISCOVER. */
name|TIME
name|first_sending
decl_stmt|;
comment|/* When was first copy sent? */
name|TIME
name|interval
decl_stmt|;
comment|/* What's the current resend interval? */
name|int
name|dns_update_timeout
decl_stmt|;
comment|/* Last timeout set for DNS update. */
name|struct
name|string_list
modifier|*
name|medium
decl_stmt|;
comment|/* Last media type tried. */
name|struct
name|dhcp_packet
name|packet
decl_stmt|;
comment|/* Outgoing DHCP packet. */
name|unsigned
name|packet_length
decl_stmt|;
comment|/* Actual length of generated packet. */
name|struct
name|iaddr
name|requested_address
decl_stmt|;
comment|/* Address we would like to get. */
name|struct
name|client_config
modifier|*
name|config
decl_stmt|;
comment|/* Client configuration. */
name|struct
name|string_list
modifier|*
name|env
decl_stmt|;
comment|/* Client script environment. */
name|int
name|envc
decl_stmt|;
comment|/* Number of entries in environment. */
name|struct
name|option_state
modifier|*
name|sent_options
decl_stmt|;
comment|/* Options we sent. */
block|}
struct|;
end_struct

begin_comment
comment|/* Information about each network interface. */
end_comment

begin_struct
struct|struct
name|interface_info
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|struct
name|interface_info
modifier|*
name|next
decl_stmt|;
comment|/* Next interface in list... */
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
comment|/* Networks connected to this interface. */
name|struct
name|hardware
name|hw_address
decl_stmt|;
comment|/* Its physical address. */
name|struct
name|in_addr
name|primary_address
decl_stmt|;
comment|/* Primary interface address. */
name|u_int8_t
modifier|*
name|circuit_id
decl_stmt|;
comment|/* Circuit ID associated with this 					   interface. */
name|unsigned
name|circuit_id_len
decl_stmt|;
comment|/* Length of Circuit ID, if there 					   is one. */
name|u_int8_t
modifier|*
name|remote_id
decl_stmt|;
comment|/* Remote ID associated with this 					   interface (if any). */
name|unsigned
name|remote_id_len
decl_stmt|;
comment|/* Length of Remote ID. */
name|char
name|name
index|[
name|IFNAMSIZ
index|]
decl_stmt|;
comment|/* Its name... */
name|int
name|linkstatus
decl_stmt|;
comment|/* Link status */
name|int
name|ieee802
decl_stmt|;
comment|/* True if media is ieee802 */
name|int
name|index
decl_stmt|;
comment|/* Its index. */
name|int
name|rfdesc
decl_stmt|;
comment|/* Its read file descriptor. */
name|int
name|wfdesc
decl_stmt|;
comment|/* Its write file descriptor, if 					   different. */
name|unsigned
name|char
modifier|*
name|rbuf
decl_stmt|;
comment|/* Read buffer, if required. */
name|unsigned
name|int
name|rbuf_max
decl_stmt|;
comment|/* Size of read buffer. */
name|size_t
name|rbuf_offset
decl_stmt|;
comment|/* Current offset into buffer. */
name|size_t
name|rbuf_len
decl_stmt|;
comment|/* Length of data in buffer. */
name|struct
name|ifreq
modifier|*
name|ifp
decl_stmt|;
comment|/* Pointer to ifreq struct. */
name|u_int32_t
name|flags
decl_stmt|;
comment|/* Control flags... */
define|#
directive|define
name|INTERFACE_REQUESTED
value|1
define|#
directive|define
name|INTERFACE_AUTOMATIC
value|2
define|#
directive|define
name|INTERFACE_RUNNING
value|4
comment|/* Only used by DHCP client code. */
name|struct
name|client_state
modifier|*
name|client
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|USE_DLPI_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_DLPI_RECEIVE
argument_list|)
name|int
name|dlpi_sap_length
decl_stmt|;
name|struct
name|hardware
name|dlpi_broadcast_addr
decl_stmt|;
endif|#
directive|endif
comment|/* DLPI_SEND || DLPI_RECEIVE */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hardware_link
block|{
name|struct
name|hardware_link
modifier|*
name|next
decl_stmt|;
name|char
name|name
index|[
name|IFNAMSIZ
index|]
decl_stmt|;
name|struct
name|hardware
name|address
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|tvref_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|tvunref_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|timeout
block|{
name|struct
name|timeout
modifier|*
name|next
decl_stmt|;
name|TIME
name|when
decl_stmt|;
name|void
argument_list|(
argument|*func
argument_list|)
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|what
decl_stmt|;
name|tvref_t
name|ref
decl_stmt|;
name|tvunref_t
name|unref
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|protocol
block|{
name|struct
name|protocol
modifier|*
name|next
decl_stmt|;
name|int
name|fd
decl_stmt|;
name|void
argument_list|(
argument|*handler
argument_list|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|local
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|dns_query
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward */
end_comment

begin_struct
struct|struct
name|dns_wakeup
block|{
name|struct
name|dns_wakeup
modifier|*
name|next
decl_stmt|;
comment|/* Next wakeup in chain. */
name|void
argument_list|(
argument|*func
argument_list|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|dns_query
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dns_question
block|{
name|u_int16_t
name|type
decl_stmt|;
comment|/* Type of query. */
name|u_int16_t
name|class
decl_stmt|;
comment|/* Class of query. */
name|unsigned
name|char
name|data
index|[
literal|1
index|]
decl_stmt|;
comment|/* Query data. */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dns_answer
block|{
name|u_int16_t
name|type
decl_stmt|;
comment|/* Type of answer. */
name|u_int16_t
name|class
decl_stmt|;
comment|/* Class of answer. */
name|int
name|count
decl_stmt|;
comment|/* Number of answers. */
name|unsigned
name|char
modifier|*
name|answers
index|[
literal|1
index|]
decl_stmt|;
comment|/* Pointers to answers. */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dns_query
block|{
name|struct
name|dns_query
modifier|*
name|next
decl_stmt|;
comment|/* Next query in hash bucket. */
name|u_int32_t
name|hash
decl_stmt|;
comment|/* Hash bucket index. */
name|TIME
name|expiry
decl_stmt|;
comment|/* Query expiry time (zero if not yet 					   answered. */
name|u_int16_t
name|id
decl_stmt|;
comment|/* Query ID (also hash table index) */
name|caddr_t
name|waiters
decl_stmt|;
comment|/* Pointer to list of things waiting 					   on this query. */
name|struct
name|dns_question
modifier|*
name|question
decl_stmt|;
comment|/* Question, internal format. */
name|struct
name|dns_answer
modifier|*
name|answer
decl_stmt|;
comment|/* Answer, internal format. */
name|unsigned
name|char
modifier|*
name|query
decl_stmt|;
comment|/* Query formatted for DNS server. */
name|unsigned
name|len
decl_stmt|;
comment|/* Length of entire query. */
name|int
name|sent
decl_stmt|;
comment|/* The query has been sent. */
name|struct
name|dns_wakeup
modifier|*
name|wakeups
decl_stmt|;
comment|/* Wakeups to call if this query is 					   answered. */
name|struct
name|name_server
modifier|*
name|next_server
decl_stmt|;
comment|/* Next server to try. */
name|int
name|backoff
decl_stmt|;
comment|/* Current backoff, in seconds. */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|dns_zone
block|{
name|int
name|refcnt
decl_stmt|;
name|TIME
name|timeout
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|option_cache
modifier|*
name|primary
decl_stmt|;
name|struct
name|option_cache
modifier|*
name|secondary
decl_stmt|;
name|struct
name|auth_key
modifier|*
name|key
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|icmp_state
block|{
name|OMAPI_OBJECT_PREAMBLE
expr_stmt|;
name|int
name|socket
decl_stmt|;
name|void
argument_list|(
argument|*icmp_handler
argument_list|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_include
include|#
directive|include
file|"ctrace.h"
end_include

begin_comment
comment|/* Bitmask of dhcp option codes. */
end_comment

begin_typedef
typedef|typedef
name|unsigned
name|char
name|option_mask
index|[
literal|16
index|]
typedef|;
end_typedef

begin_comment
comment|/* DHCP Option mask manipulation macros... */
end_comment

begin_define
define|#
directive|define
name|OPTION_ZERO
parameter_list|(
name|mask
parameter_list|)
value|(memset (mask, 0, 16))
end_define

begin_define
define|#
directive|define
name|OPTION_SET
parameter_list|(
name|mask
parameter_list|,
name|bit
parameter_list|)
value|(mask [bit>> 8] |= (1<< (bit& 7)))
end_define

begin_define
define|#
directive|define
name|OPTION_CLR
parameter_list|(
name|mask
parameter_list|,
name|bit
parameter_list|)
value|(mask [bit>> 8]&= ~(1<< (bit& 7)))
end_define

begin_define
define|#
directive|define
name|OPTION_ISSET
parameter_list|(
name|mask
parameter_list|,
name|bit
parameter_list|)
value|(mask [bit>> 8]& (1<< (bit& 7)))
end_define

begin_define
define|#
directive|define
name|OPTION_ISCLR
parameter_list|(
name|mask
parameter_list|,
name|bit
parameter_list|)
value|(!OPTION_ISSET (mask, bit))
end_define

begin_comment
comment|/* An option occupies its length plus two header bytes (code and     length) for every 255 bytes that must be stored. */
end_comment

begin_define
define|#
directive|define
name|OPTION_SPACE
parameter_list|(
name|x
parameter_list|)
value|((x) + 2 * ((x) / 255 + 1))
end_define

begin_comment
comment|/* Default path to dhcpd config file. */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG
end_ifdef

begin_undef
undef|#
directive|undef
name|_PATH_DHCPD_CONF
end_undef

begin_define
define|#
directive|define
name|_PATH_DHCPD_CONF
value|"dhcpd.conf"
end_define

begin_undef
undef|#
directive|undef
name|_PATH_DHCPD_DB
end_undef

begin_define
define|#
directive|define
name|_PATH_DHCPD_DB
value|"dhcpd.leases"
end_define

begin_undef
undef|#
directive|undef
name|_PATH_DHCPD_PID
end_undef

begin_define
define|#
directive|define
name|_PATH_DHCPD_PID
value|"dhcpd.pid"
end_define

begin_else
else|#
directive|else
end_else

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCPD_CONF
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCPD_CONF
value|"/etc/dhcpd.conf"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCPD_DB
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCPD_DB
value|"/etc/dhcpd.leases"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCPD_PID
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCPD_PID
value|"/var/run/dhcpd.pid"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCLIENT_CONF
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCLIENT_CONF
value|"/etc/dhclient.conf"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCLIENT_SCRIPT
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCLIENT_SCRIPT
value|"/sbin/dhclient-script"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCLIENT_PID
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCLIENT_PID
value|"/var/run/dhclient.pid"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCLIENT_DB
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCLIENT_DB
value|"/etc/dhclient.leases"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_RESOLV_CONF
end_ifndef

begin_define
define|#
directive|define
name|_PATH_RESOLV_CONF
value|"/etc/resolv.conf"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCRELAY_PID
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCRELAY_PID
value|"/var/run/dhcrelay.pid"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DHCPD_LOG_FACILITY
end_ifndef

begin_define
define|#
directive|define
name|DHCPD_LOG_FACILITY
value|LOG_DAEMON
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|MAX_TIME
value|0x7fffffff
end_define

begin_define
define|#
directive|define
name|MIN_TIME
value|0
end_define

begin_comment
comment|/* External definitions... */
end_comment

begin_macro
name|HASH_FUNCTIONS_DECL
argument_list|(
argument|group
argument_list|,
argument|const char *
argument_list|,
argument|struct group_object
argument_list|,
argument|group_hash_t
argument_list|)
end_macro

begin_macro
name|HASH_FUNCTIONS_DECL
argument_list|(
argument|universe
argument_list|,
argument|const char *
argument_list|,
argument|struct universe
argument_list|,
argument|universe_hash_t
argument_list|)
end_macro

begin_macro
name|HASH_FUNCTIONS_DECL
argument_list|(
argument|option
argument_list|,
argument|const char *
argument_list|,
argument|struct option
argument_list|,
argument|option_hash_t
argument_list|)
end_macro

begin_macro
name|HASH_FUNCTIONS_DECL
argument_list|(
argument|dns_zone
argument_list|,
argument|const char *
argument_list|,
argument|struct dns_zone
argument_list|,
argument|dns_zone_hash_t
argument_list|)
end_macro

begin_macro
name|HASH_FUNCTIONS_DECL
argument_list|(
argument|lease
argument_list|,
argument|const unsigned char *
argument_list|,
argument|struct lease
argument_list|,
argument|lease_hash_t
argument_list|)
end_macro

begin_macro
name|HASH_FUNCTIONS_DECL
argument_list|(
argument|host
argument_list|,
argument|const unsigned char *
argument_list|,
argument|struct host_decl
argument_list|,
argument|host_hash_t
argument_list|)
end_macro

begin_macro
name|HASH_FUNCTIONS_DECL
argument_list|(
argument|class
argument_list|,
argument|const char *
argument_list|,
argument|struct class
argument_list|,
argument|class_hash_t
argument_list|)
end_macro

begin_comment
comment|/* options.c */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|option
modifier|*
name|vendor_cfg_option
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_options
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_option_buffer
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_state
operator|*
operator|,
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
expr|struct
name|universe
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|struct
name|universe
modifier|*
name|find_option_universe
parameter_list|(
name|struct
name|option
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|parse_encapsulated_suboptions
parameter_list|(
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|cons_options
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
name|int
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|,
expr|struct
name|data_string
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|fqdn_universe_decode
parameter_list|(
name|struct
name|option_state
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|store_options
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
name|unsigned
operator|*
operator|,
name|int
operator|,
name|unsigned
operator|,
name|unsigned
operator|,
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|char
modifier|*
name|pretty_print_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|option
operator|*
operator|,
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|get_option
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|set_option
parameter_list|(
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_cache
modifier|*
parameter_list|,
name|enum
name|statement_op
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|struct
name|option_cache
modifier|*
name|lookup_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|option_cache
modifier|*
name|lookup_hashed_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|save_option_buffer
parameter_list|(
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|buffer
modifier|*
parameter_list|,
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|option
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|save_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_cache
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|save_hashed_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_cache
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|delete_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|delete_hashed_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|option_cache_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_cache
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|hashed_option_state_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|store_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|option_cache
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|option_space_encapsulate
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|data_string
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|hashed_option_space_encapsulate
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|universe
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|nwip_option_space_encapsulate
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|universe
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|fqdn_option_space_encapsulate
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|suboption_foreach
parameter_list|(
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|option_cache
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|struct
name|option_cache
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|option_space_foreach
parameter_list|(
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|option_cache
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hashed_option_space_foreach
parameter_list|(
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|option_cache
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|linked_option_get
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|linked_option_state_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|save_linked_option
parameter_list|(
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_cache
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|linked_option_space_foreach
parameter_list|(
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|option_cache
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|linked_option_space_encapsulate
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|delete_linked_option
parameter_list|(
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|option_cache
modifier|*
name|lookup_linked_option
parameter_list|(
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|do_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|unsigned
operator|,
name|unsigned
name|int
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhcpd.c */
end_comment

begin_decl_stmt
specifier|extern
name|TIME
name|cur_time
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|ddns_update_style
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|path_dhcpd_conf
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|path_dhcpd_db
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|path_dhcpd_pid
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|dhcp_max_agent_option_packet_length
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
decl|main
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|char
operator|*
operator|*
operator|,
name|char
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|postconf_initialization
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|postdb_startup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|cleanup
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|lease_pinged
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|lease_ping_timeout
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|dhcpd_interface_setup_hook
parameter_list|(
name|struct
name|interface_info
modifier|*
name|ip
parameter_list|,
name|struct
name|iaddr
modifier|*
name|ia
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|enum
name|dhcp_shutdown_state
name|shutdown_state
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|dhcp_io_shutdown
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_set_control_state
parameter_list|(
name|control_object_state_t
name|oldstate
parameter_list|,
name|control_object_state_t
name|newstate
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* conflex.c */
end_comment

begin_decl_stmt
name|isc_result_t
name|new_parse
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|,
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|end_parse
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|dhcp_token
name|next_token
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|*
operator|,
name|unsigned
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|enum
name|dhcp_token
name|peek_token
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|*
operator|,
name|unsigned
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* confpars.c */
end_comment

begin_function_decl
name|void
name|parse_trace_setup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|isc_result_t
name|readconf
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|read_conf_file
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|group
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|TRACING
argument_list|)
end_if

begin_function_decl
name|void
name|trace_conf_input
parameter_list|(
name|trace_type_t
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|trace_conf_stop
parameter_list|(
name|trace_type_t
modifier|*
name|ttype
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|isc_result_t
name|conf_file_subparse
parameter_list|(
name|struct
name|parse
modifier|*
parameter_list|,
name|struct
name|group
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|lease_file_subparse
parameter_list|(
name|struct
name|parse
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|parse_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
name|int
operator|,
expr|struct
name|host_decl
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|FAILOVER_PROTOCOL
argument_list|)
end_if

begin_decl_stmt
name|void
name|parse_failover_peer
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|parse_failover_state_declaration
parameter_list|(
name|struct
name|parse
modifier|*
parameter_list|,
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|parse_failover_state
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|enum
name|failover_state
operator|*
operator|,
name|TIME
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|permit_list_match
parameter_list|(
name|struct
name|permit
modifier|*
parameter_list|,
name|struct
name|permit
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|parse_pool_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_boolean
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_lbrace
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_host_declaration
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|group
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_class_declaration
name|PROTO
argument_list|(
operator|(
expr|struct
name|class
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_shared_net_declaration
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|group
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_subnet_declaration
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_group_declaration
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|group
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_fixed_addr_param
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_cache
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TIME
name|parse_timestamp
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_lease_declaration
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_address_range
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
name|int
operator|,
expr|struct
name|pool
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* ddns.c */
end_comment

begin_decl_stmt
name|int
name|ddns_updates
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|lease_state
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|ddns_removals
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* parse.c */
end_comment

begin_function_decl
name|void
name|add_enumeration
parameter_list|(
name|struct
name|enumeration
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|enumeration
modifier|*
name|find_enumeration
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|enumeration_value
modifier|*
name|find_enumeration_value
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|skip_to_semi
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|skip_to_rbrace
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_semi
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_string
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|unsigned
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|parse_host_name
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_ip_addr_or_hostname
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_hardware_param
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_lease_time
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|TIME
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|char
modifier|*
name|parse_numeric_aggregate
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_num
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TIME
name|parse_date
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|option
modifier|*
name|parse_option_name
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|int
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_option_space_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_option_code_definition
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|option
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|parse_base64
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|parse
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|parse_cshl
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_executable_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|,
expr|enum
name|expression_context
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_executable_statements
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|,
expr|enum
name|expression_context
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|parse_zone
parameter_list|(
name|struct
name|dns_zone
modifier|*
parameter_list|,
name|struct
name|parse
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|parse_key
parameter_list|(
name|struct
name|parse
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|parse_on_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_switch_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_case_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|,
expr|enum
name|expression_context
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_if_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_boolean_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_data_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_numeric_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_dns_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_non_binary
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|,
expr|enum
name|expression_context
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|*
operator|,
expr|enum
name|expression_context
operator|,
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|enum
name|expr_op
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_option_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|,
expr|struct
name|option
operator|*
operator|,
expr|enum
name|statement_op
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_option_token
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
specifier|const
name|char
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_allow_deny
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_cache
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_auth_key
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|parse_warn
parameter_list|(
name|struct
name|parse
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(__format__
parameter_list|(
name|__printf__
parameter_list|,
function_decl|2
operator|,
function_decl|3
end_function_decl

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_comment
comment|/* tree.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|NSUPDATE
argument_list|)
end_if

begin_decl_stmt
specifier|extern
name|struct
name|__res_state
name|resolver_state
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|resolver_inited
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|struct
name|binding_scope
modifier|*
name|global_scope
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|pair
name|cons
name|PROTO
argument_list|(
operator|(
name|caddr_t
operator|,
name|pair
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|make_const_option_cache
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_cache
operator|*
operator|*
operator|,
expr|struct
name|buffer
operator|*
operator|*
operator|,
name|u_int8_t
operator|*
operator|,
name|unsigned
operator|,
expr|struct
name|option
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|make_host_lookup
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|enter_dns_host
name|PROTO
argument_list|(
operator|(
expr|struct
name|dns_host_entry
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|make_const_data
parameter_list|(
name|struct
name|expression
modifier|*
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|make_const_int
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|make_concat
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|make_encapsulation
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|data_string
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|make_substring
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|make_limit
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|make_let
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|option_cache
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_cache
operator|*
operator|*
operator|,
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
expr|struct
name|option
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|evaluate_expression
parameter_list|(
name|struct
name|binding_value
modifier|*
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|expression
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|binding_value_dereference
parameter_list|(
name|struct
name|binding_value
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|NSUPDATE
argument_list|)
end_if

begin_decl_stmt
name|int
name|evaluate_dns_expression
name|PROTO
argument_list|(
operator|(
name|ns_updrec
operator|*
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|int
name|evaluate_boolean_expression
name|PROTO
argument_list|(
operator|(
name|int
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|evaluate_data_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|evaluate_numeric_expression
parameter_list|(
name|unsigned
name|long
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|expression
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|evaluate_option_cache
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|option_cache
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|evaluate_boolean_option_cache
name|PROTO
argument_list|(
operator|(
name|int
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|option_cache
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|evaluate_boolean_expression_result
name|PROTO
argument_list|(
operator|(
name|int
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|expression_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|is_dns_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|is_boolean_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|is_data_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|is_numeric_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|is_compound_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|op_precedence
name|PROTO
argument_list|(
operator|(
expr|enum
name|expr_op
operator|,
expr|enum
name|expr_op
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|enum
name|expression_context
name|expression_context
parameter_list|(
name|struct
name|expression
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|enum
name|expression_context
name|op_context
name|PROTO
argument_list|(
operator|(
expr|enum
name|expr_op
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|write_expression
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|binding
modifier|*
name|find_binding
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_scope
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|free_bindings
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_scope
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|binding_scope_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|fundef_dereference
parameter_list|(
name|struct
name|fundef
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|data_subexpression_length
parameter_list|(
name|int
modifier|*
parameter_list|,
name|struct
name|expression
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|expr_valid_for_context
parameter_list|(
name|struct
name|expression
modifier|*
parameter_list|,
name|enum
name|expression_context
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|binding
modifier|*
name|create_binding
parameter_list|(
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|bind_ds_value
parameter_list|(
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|data_string
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|find_bound_string
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|unset
parameter_list|(
name|struct
name|binding_scope
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* dhcp.c */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|outstanding_pings
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcp
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpdiscover
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcprequest
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
name|int
operator|,
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcprelease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpdecline
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpinform
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|nak_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|iaddr
operator|*
name|cip
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|ack_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
name|unsigned
name|int
operator|,
name|TIME
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcp_reply
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|find_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|,
name|int
operator|*
operator|,
name|int
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|mockup_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|,
expr|struct
name|host_decl
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|static_lease_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|allocate_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|pool
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|permitted
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|permit
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|locate_network
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_agent_information_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
name|int
operator|,
name|u_int8_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|cons_agent_information_options
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|unsigned
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* bootp.c */
end_comment

begin_decl_stmt
name|void
name|bootp
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* memory.c */
end_comment

begin_function_decl
name|int
function_decl|(
modifier|*
name|group_write_hook
function_decl|)
parameter_list|(
name|struct
name|group_object
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|struct
name|group
modifier|*
name|root_group
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|group_hash_t
modifier|*
name|group_name_hash
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|delete_group
parameter_list|(
name|struct
name|group_object
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|supersede_group
parameter_list|(
name|struct
name|group_object
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|clone_group
parameter_list|(
name|struct
name|group
modifier|*
modifier|*
parameter_list|,
name|struct
name|group
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|write_group
name|PROTO
argument_list|(
operator|(
expr|struct
name|group_object
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* salloc.c */
end_comment

begin_function_decl
name|void
name|relinquish_lease_hunks
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|struct
name|lease
modifier|*
name|new_leases
name|PROTO
argument_list|(
operator|(
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_MEMORY_LEAKAGE
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|DEBUG_MEMORY_LEAKAGE_ON_EXIT
argument_list|)
end_if

begin_function_decl
name|void
name|relinquish_free_lease_states
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|lease
argument_list|,
argument|struct lease
argument_list|,
argument|dhcp_type_lease
argument_list|)
end_macro

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|class
argument_list|,
argument|struct class
argument_list|,
argument|dhcp_type_class
argument_list|)
end_macro

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|pool
argument_list|,
argument|struct pool
argument_list|,
argument|dhcp_type_pool
argument_list|)
end_macro

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|host
argument_list|,
argument|struct host_decl
argument_list|,
argument|dhcp_type_host
argument_list|)
end_macro

begin_comment
comment|/* alloc.c */
end_comment

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|subnet
argument_list|,
argument|struct subnet
argument_list|,
argument|dhcp_type_subnet
argument_list|)
end_macro

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|shared_network
argument_list|,
argument|struct shared_network
argument_list|,
argument|dhcp_type_shared_network
argument_list|)
end_macro

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|group_object
argument_list|,
argument|struct group_object
argument_list|,
argument|dhcp_type_group
argument_list|)
end_macro

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|dhcp_control
argument_list|,
argument|dhcp_control_object_t
argument_list|,
argument|dhcp_type_control
argument_list|)
end_macro

begin_if
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_MEMORY_LEAKAGE
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|DEBUG_MEMORY_LEAKAGE_ON_EXIT
argument_list|)
end_if

begin_function_decl
name|void
name|relinquish_free_pairs
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|relinquish_free_expressions
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|relinquish_free_binding_values
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|relinquish_free_option_caches
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|relinquish_free_packets
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|int
name|option_chain_head_allocate
parameter_list|(
name|struct
name|option_chain_head
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|option_chain_head_reference
parameter_list|(
name|struct
name|option_chain_head
modifier|*
modifier|*
parameter_list|,
name|struct
name|option_chain_head
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|option_chain_head_dereference
parameter_list|(
name|struct
name|option_chain_head
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|group_allocate
parameter_list|(
name|struct
name|group
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|group_reference
parameter_list|(
name|struct
name|group
modifier|*
modifier|*
parameter_list|,
name|struct
name|group
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|group_dereference
parameter_list|(
name|struct
name|group
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|struct
name|dhcp_packet
modifier|*
name|new_dhcp_packet
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|protocol
modifier|*
name|new_protocol
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease_state
modifier|*
name|new_lease_state
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|domain_search_list
modifier|*
name|new_domain_search_list
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|name_server
modifier|*
name|new_name_server
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_name_server
name|PROTO
argument_list|(
operator|(
expr|struct
name|name_server
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|option
modifier|*
name|new_option
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|group_allocate
parameter_list|(
name|struct
name|group
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|group_reference
parameter_list|(
name|struct
name|group
modifier|*
modifier|*
parameter_list|,
name|struct
name|group
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|group_dereference
parameter_list|(
name|struct
name|group
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|free_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|option
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|universe
modifier|*
name|new_universe
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_universe
name|PROTO
argument_list|(
operator|(
expr|struct
name|universe
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_domain_search_list
name|PROTO
argument_list|(
operator|(
expr|struct
name|domain_search_list
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_lease_state
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease_state
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_protocol
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_dhcp_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|dhcp_packet
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|client_lease
modifier|*
name|new_client_lease
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_client_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_lease
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|permit
modifier|*
name|new_permit
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_permit
name|PROTO
argument_list|(
operator|(
expr|struct
name|permit
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|pair
name|new_pair
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_pair
name|PROTO
argument_list|(
operator|(
name|pair
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|expression_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|expression_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_expression
name|PROTO
argument_list|(
operator|(
expr|struct
name|expression
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|binding_value_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_value
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|binding_value_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_value
operator|*
operator|*
operator|,
expr|struct
name|binding_value
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_binding_value
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_value
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fundef_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|fundef
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|fundef_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|fundef
operator|*
operator|*
operator|,
expr|struct
name|fundef
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|option_cache_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_cache
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|option_cache_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_cache
operator|*
operator|*
operator|,
expr|struct
name|option_cache
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|buffer_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|buffer
operator|*
operator|*
operator|,
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|buffer_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|buffer
operator|*
operator|*
operator|,
expr|struct
name|buffer
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|buffer_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|buffer
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|dns_host_entry_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|dns_host_entry
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|dns_host_entry_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|dns_host_entry
operator|*
operator|*
operator|,
expr|struct
name|dns_host_entry
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|dns_host_entry_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|dns_host_entry
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|option_state_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_state
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|option_state_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_state
operator|*
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|option_state_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_state
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|data_string_copy
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
expr|struct
name|data_string
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|data_string_forget
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|data_string_truncate
name|PROTO
argument_list|(
operator|(
expr|struct
name|data_string
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|executable_statement_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|executable_statement_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
expr|struct
name|executable_statement
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|packet_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|packet_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|packet_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|binding_scope_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|binding_scope_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|dns_zone_allocate
name|PROTO
argument_list|(
operator|(
expr|struct
name|dns_zone
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|dns_zone_reference
name|PROTO
argument_list|(
operator|(
expr|struct
name|dns_zone
operator|*
operator|*
operator|,
expr|struct
name|dns_zone
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* print.c */
end_comment

begin_function_decl
name|char
modifier|*
name|quotify_string
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|quotify_buf
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|print_base64
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|char
modifier|*
name|print_hw_addr
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|print_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dump_raw
name|PROTO
argument_list|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|dump_packet_option
parameter_list|(
name|struct
name|option_cache
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|dump_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|hash_dump
name|PROTO
argument_list|(
operator|(
expr|struct
name|hash_table
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|print_hex_1
name|PROTO
argument_list|(
operator|(
name|unsigned
operator|,
specifier|const
name|u_int8_t
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|print_hex_2
name|PROTO
argument_list|(
operator|(
name|unsigned
operator|,
specifier|const
name|u_int8_t
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|print_hex_3
name|PROTO
argument_list|(
operator|(
name|unsigned
operator|,
specifier|const
name|u_int8_t
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|print_dotted_quads
name|PROTO
argument_list|(
operator|(
name|unsigned
operator|,
specifier|const
name|u_int8_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|print_dec_1
name|PROTO
argument_list|(
operator|(
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|print_dec_2
name|PROTO
argument_list|(
operator|(
name|unsigned
name|long
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|print_expression
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|expression
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|token_print_indent_concat
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|token_indent_data_string
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|data_string
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|token_print_indent
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|indent_spaces
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
name|defined
argument_list|(
name|NSUPDATE
argument_list|)
end_if

begin_function_decl
name|void
name|print_dns_status
parameter_list|(
name|int
parameter_list|,
name|ns_updque
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* socket.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_SOCKET_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_SOCKET_RECEIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|USE_SOCKET_FALLBACK
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_socket
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_SOCKET_FALLBACK
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|USE_SOCKET_SEND
argument_list|)
end_if

begin_decl_stmt
name|void
name|if_reinitialize_fallback
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_fallback
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_fallback
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_SOCKET_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_SOCKET_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_SOCKET_FALLBACK
argument_list|)
end_if

begin_decl_stmt
name|isc_result_t
name|fallback_discard
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_SOCKET_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|supports_multiple_interfaces
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* bpf.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_BPF_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_BPF_RECEIVE
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_bpf
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_BPF_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_BPF_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_BPF_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|supports_multiple_interfaces
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* lpf.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_LPF_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LPF_RECEIVE
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_lpf
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_LPF_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_LPF_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_LPF_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|supports_multiple_interfaces
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* nit.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_NIT_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_NIT_RECEIVE
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_nit
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_NIT_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_NIT_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_NIT_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|supports_multiple_interfaces
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* dlpi.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_DLPI_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_DLPI_RECEIVE
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_dlpi
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_DLPI_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_DLPI_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* raw.c */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|USE_RAW_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_deregister_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|supports_multiple_interfaces
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* discover.c */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|interface_info
modifier|*
name|interfaces
decl_stmt|,
modifier|*
name|dummy_interfaces
decl_stmt|,
modifier|*
name|fallback_interface
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|protocol
modifier|*
name|protocols
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|quiet_interface_discovery
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|interface_setup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|interface_trace_setup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|struct
name|in_addr
name|limited_broadcast
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|in_addr
name|local_address
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16_t
name|local_port
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16_t
name|remote_port
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|int
function_decl|(
modifier|*
name|dhcp_interface_setup_hook
function_decl|)
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|,
name|struct
name|iaddr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
function_decl|(
modifier|*
name|dhcp_interface_discovery_hook
function_decl|)
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
function_decl|(
modifier|*
name|dhcp_interface_startup_hook
function_decl|)
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_extern
extern|extern void (*bootp_packet_handler
end_extern

begin_expr_stmt
unit|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|unsigned
operator|,
name|unsigned
name|int
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|extern
name|struct
name|timeout
modifier|*
name|timeouts
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_interface
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|TRACING
argument_list|)
end_if

begin_decl_stmt
name|trace_type_t
modifier|*
name|interface_trace
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|trace_type_t
modifier|*
name|inpacket_trace
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|trace_type_t
modifier|*
name|outpacket_trace
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|struct
name|interface_info
modifier|*
modifier|*
name|interface_vector
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|interface_count
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|interface_max
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|interface_initialize
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|discover_interfaces
name|PROTO
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|setup_fallback
parameter_list|(
name|struct
name|interface_info
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|if_readsocket
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|reinitialize_interfaces
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dispatch.c */
end_comment

begin_function_decl
name|void
name|set_time
parameter_list|(
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|timeval
modifier|*
name|process_outstanding_timeouts
parameter_list|(
name|struct
name|timeval
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|dispatch
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|got_one
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|interface_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|interface_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|interface_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|interface_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|interface_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|add_timeout
name|PROTO
argument_list|(
operator|(
name|TIME
operator|,
name|void
argument_list|(
argument|*
argument_list|)
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
operator|,
name|void
operator|*
operator|,
name|tvref_t
operator|,
name|tvunref_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|cancel_timeout
name|PROTO
argument_list|(
operator|(
name|void
argument_list|(
argument|*
argument_list|)
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|cancel_all_timeouts
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|relinquish_timeouts
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_if
if|#
directive|if
literal|0
end_if

begin_endif
unit|struct protocol *add_protocol PROTO ((const char *, int, 				      void (*) PROTO ((struct protocol *)), 				      void *));  void remove_protocol PROTO ((struct protocol *));
endif|#
directive|endif
end_endif

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|interface
argument_list|,
argument|struct interface_info
argument_list|,
argument|dhcp_type_interface
argument_list|)
end_macro

begin_comment
comment|/* tables.c */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|universe
name|dhcp_universe
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|option
name|dhcp_options
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|universe
name|nwip_universe
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|option
name|nwip_options
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|universe
name|fqdn_universe
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|option
name|fqdn_options
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|dhcp_option_default_priority_list
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|dhcp_option_default_priority_list_count
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|hardware_types
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|universe_count
decl_stmt|,
name|universe_max
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|universe
modifier|*
modifier|*
name|universes
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|universe_hash_t
modifier|*
name|universe_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|initialize_common_option_spaces
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|universe
modifier|*
name|config_universe
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* stables.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|FAILOVER_PROTOCOL
argument_list|)
end_if

begin_decl_stmt
specifier|extern
name|failover_option_t
name|null_failover_option
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|failover_option_t
name|skip_failover_option
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|failover_option_info
name|ft_options
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int32_t
name|fto_allowed
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|ft_sizes
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|dhcp_flink_state_names
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|binding_state_names
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|universe
name|agent_universe
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|option
name|agent_options
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|universe
name|server_universe
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|option
name|server_options
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|enumeration
name|ddns_styles
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|enumeration
name|syslog_enum
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|initialize_server_option_spaces
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* inet.c */
end_comment

begin_decl_stmt
name|struct
name|iaddr
name|subnet_number
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|iaddr
name|ip_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|iaddr
name|broadcast_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int32_t
name|host_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|addr_eq
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|piaddr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|char
modifier|*
name|piaddrmask
parameter_list|(
name|struct
name|iaddr
parameter_list|,
name|struct
name|iaddr
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|char
modifier|*
name|piaddr1
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhclient.c */
end_comment

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|path_dhclient_conf
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|path_dhclient_db
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|path_dhclient_pid
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|path_dhclient_script
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|interfaces_requested
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|client_config
name|top_level_config
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpoffer
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpack
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpnak
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|send_discover
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|send_request
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|send_release
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|send_decline
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_reboot
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|ENABLE_POLLING_MODE
end_ifdef

begin_decl_stmt
name|void
name|state_link
name|PROTO
argument_list|(
operator|(
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|state_init
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_selecting
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_requesting
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_bound
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_stop
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_panic
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|bind_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_client_options
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|,
name|u_int8_t
operator|*
operator|,
expr|struct
name|option_cache
operator|*
operator|,
expr|struct
name|iaddr
operator|*
operator|,
name|u_int32_t
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_discover
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_request
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_decline
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_release
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|destroy_client_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|rewrite_client_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|write_lease_option
parameter_list|(
name|struct
name|option_cache
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|write_client_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|dhcp_option_ev_name
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|option
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|script_init
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
expr|struct
name|string_list
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|client_option_envadd
parameter_list|(
name|struct
name|option_cache
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|script_write_params
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|script_go
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|client_envadd
parameter_list|(
name|struct
name|client_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(__format__
parameter_list|(
name|__printf__
parameter_list|,
function_decl|4
operator|,
function_decl|5
end_function_decl

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_function_decl
name|struct
name|client_lease
modifier|*
name|packet_to_lease
parameter_list|(
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|go_daemon
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|write_client_pid_file
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|client_location_changed
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|do_release
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|dhclient_interface_shutdown_hook
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dhclient_interface_discovery_hook
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhclient_interface_startup_hook
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|client_dns_update_timeout
parameter_list|(
name|void
modifier|*
name|cp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|client_dns_update
parameter_list|(
name|struct
name|client_state
modifier|*
name|client
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* db.c */
end_comment

begin_decl_stmt
name|int
name|write_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|write_host
name|PROTO
argument_list|(
operator|(
expr|struct
name|host_decl
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|FAILOVER_PROTOCOL
argument_list|)
end_if

begin_function_decl
name|int
name|write_failover_state
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|int
name|db_printable
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|db_printable_len
name|PROTO
argument_list|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|write_named_billing_class
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|class
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|write_billing_classes
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|write_billing_class
name|PROTO
argument_list|(
operator|(
expr|struct
name|class
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|commit_leases_timeout
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|commit_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|db_startup
name|PROTO
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|new_lease_file
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|group_writer
parameter_list|(
name|struct
name|group_object
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* packet.c */
end_comment

begin_decl_stmt
name|u_int32_t
name|checksum
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int32_t
name|wrapsum
name|PROTO
argument_list|(
operator|(
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|assemble_hw_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|assemble_udp_ip_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|decode_hw_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|decode_udp_ip_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* ethernet.c */
end_comment

begin_decl_stmt
name|void
name|assemble_ethernet_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|decode_ethernet_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* tr.c */
end_comment

begin_decl_stmt
name|void
name|assemble_tr_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|decode_tr_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhxpxlt.c */
end_comment

begin_decl_stmt
name|void
name|convert_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_host_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_host_name
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_class_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_class_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_lease_time
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_shared_net_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_subnet_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_subnet_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_host_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_hardware_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_hardware_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_filename_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_servername_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_ip_addr_or_hostname
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_fixed_addr_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_option_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_timestamp
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_lease_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_address_range
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_date
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_numeric_aggregate
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|jrefproto
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|indent
name|PROTO
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* route.c */
end_comment

begin_decl_stmt
name|void
name|add_route_direct
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|add_route_net
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|add_route_default_gateway
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|remove_routes
name|PROTO
argument_list|(
operator|(
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|remove_if_route
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|remove_all_if_routes
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|set_netmask
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|set_broadcast_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|set_ip_address
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* clparse.c */
end_comment

begin_decl_stmt
name|isc_result_t
name|read_client_conf
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|read_client_conf_file
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|interface_info
modifier|*
parameter_list|,
name|struct
name|client_config
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|read_client_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_client_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|client_config
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_X
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|u_int8_t
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_option_list
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|u_int32_t
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_interface_declaration
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|client_config
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|interface_or_dummy
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_client_state
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_client_config
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|client_config
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_client_lease_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_client_lease_declaration
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|,
expr|struct
name|interface_info
operator|*
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_option_decl
name|PROTO
argument_list|(
operator|(
expr|struct
name|option_cache
operator|*
operator|*
operator|,
expr|struct
name|parse
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_string_list
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|string_list
operator|*
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_ip_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|iaddr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_reject_statement
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|client_config
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhcrelay.c */
end_comment

begin_decl_stmt
name|void
name|relay
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|unsigned
operator|,
name|unsigned
name|int
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|strip_relay_agent_options
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|interface_info
operator|*
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|find_interface_by_agent_option
name|PROTO
argument_list|(
operator|(
expr|struct
name|dhcp_packet
operator|*
operator|,
expr|struct
name|interface_info
operator|*
operator|*
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|add_relay_agent_options
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|unsigned
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* icmp.c */
end_comment

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|icmp_state
argument_list|,
argument|struct icmp_state
argument_list|,
argument|dhcp_type_icmp
argument_list|)
end_macro

begin_decl_stmt
specifier|extern
name|struct
name|icmp_state
modifier|*
name|icmp_state
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|icmp_startup
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|void
argument_list|(
argument|*
argument_list|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|icmp_readsocket
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|icmp_echorequest
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|icmp_echoreply
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dns.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|NSUPDATE
argument_list|)
end_if

begin_function_decl
name|isc_result_t
name|find_tsig_key
parameter_list|(
name|ns_tsig_key
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|dns_zone
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tkey_free
parameter_list|(
name|ns_tsig_key
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|isc_result_t
name|enter_dns_zone
parameter_list|(
name|struct
name|dns_zone
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dns_zone_lookup
parameter_list|(
name|struct
name|dns_zone
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|dns_zone_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|dns_zone
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|NSUPDATE
argument_list|)
end_if

begin_function_decl
name|isc_result_t
name|find_cached_zone
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|ns_class
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|in_addr
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|struct
name|dns_zone
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|forget_zone
parameter_list|(
name|struct
name|dns_zone
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|repudiate_zone
parameter_list|(
name|struct
name|dns_zone
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|cache_found_zone
parameter_list|(
name|ns_class
parameter_list|,
name|char
modifier|*
parameter_list|,
name|struct
name|in_addr
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|get_dhcid
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|u_int8_t
modifier|*
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|ddns_update_a
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|iaddr
parameter_list|,
name|struct
name|data_string
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|ddns_remove_a
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|iaddr
parameter_list|,
name|struct
name|data_string
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* NSUPDATE */
end_comment

begin_comment
comment|/* resolv.c */
end_comment

begin_decl_stmt
specifier|extern
name|char
name|path_resolv_conf
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|name_server
modifier|*
name|name_servers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|domain_search_list
modifier|*
name|domains
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|read_resolv_conf
name|PROTO
argument_list|(
operator|(
name|TIME
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|name_server
modifier|*
name|first_name_server
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* inet_addr.c */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|NEED_INET_ATON
end_ifdef

begin_decl_stmt
name|int
name|inet_aton
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|in_addr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* class.c */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|have_billing_classes
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|class
name|unknown_class
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|class
name|known_class
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|collection
name|default_collection
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|collection
modifier|*
name|collections
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|executable_statement
modifier|*
name|default_classification_rules
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|classification_setup
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|classify_client
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|check_collection
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|collection
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|classify
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|class
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|find_class
name|PROTO
argument_list|(
operator|(
expr|struct
name|class
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|unbill_class
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|class
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|bill_class
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|class
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* execute.c */
end_comment

begin_decl_stmt
name|int
name|execute_statements
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_value
operator|*
operator|*
name|result
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|executable_statement
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|execute_statements_in_scope
name|PROTO
argument_list|(
operator|(
expr|struct
name|binding_value
operator|*
operator|*
name|result
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|client_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|option_state
operator|*
operator|,
expr|struct
name|binding_scope
operator|*
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
expr|struct
name|group
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|executable_statement_dereference
name|PROTO
argument_list|(
operator|(
expr|struct
name|executable_statement
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|write_statements
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|struct
name|executable_statement
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|find_matching_case
parameter_list|(
name|struct
name|executable_statement
modifier|*
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|expression
modifier|*
parameter_list|,
name|struct
name|executable_statement
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|executable_statement_foreach
parameter_list|(
name|struct
name|executable_statement
modifier|*
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|executable_statement
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* comapi.c */
end_comment

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_interface
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_group
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_shared_network
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_subnet
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_control
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|dhcp_control_object_t
modifier|*
name|dhcp_control_object
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|dhcp_common_objects_setup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_control_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_control_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_control_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_control_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_control_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_control_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_control_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_control_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* omapi.c */
end_comment

begin_function_decl
specifier|extern
name|int
function_decl|(
modifier|*
name|dhcp_interface_shutdown_hook
function_decl|)
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_lease
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_pool
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_class
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|FAILOVER_PROTOCOL
argument_list|)
end_if

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_failover_state
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_failover_link
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_failover_listener
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|dhcp_db_objects_setup
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_group_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_host_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_host_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_host_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_host_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_host_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_host_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_host_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_host_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_pool_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_pool_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_pool_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_pool_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_pool_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_pool_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_pool_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_pool_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_class_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_class_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_class_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_class_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_class_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_class_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_class_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_class_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subclass_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subclass_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subclass_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subclass_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subclass_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subclass_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subclass_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subclass_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_shared_network_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_subnet_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_interface_set_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_interface_get_value
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_value_t
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_interface_destroy
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_interface_signal_handler
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|va_list
name|ap
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_interface_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_interface_lookup
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_interface_create
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_interface_remove
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|interface_stash
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|interface_snorf
parameter_list|(
name|struct
name|interface_info
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|binding_scope_set_value
parameter_list|(
name|struct
name|binding_scope
modifier|*
parameter_list|,
name|int
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|,
name|omapi_typed_data_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|binding_scope_get_value
parameter_list|(
name|omapi_value_t
modifier|*
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
parameter_list|,
name|omapi_data_string_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|binding_scope_stuff_values
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* mdb.c */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|subnet
modifier|*
name|subnets
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|shared_network
modifier|*
name|shared_networks
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|host_hash_t
modifier|*
name|host_hw_addr_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|host_hash_t
modifier|*
name|host_uid_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|host_hash_t
modifier|*
name|host_name_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|lease_hash_t
modifier|*
name|lease_uid_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|lease_hash_t
modifier|*
name|lease_ip_addr_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|lease_hash_t
modifier|*
name|lease_hw_addr_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|omapi_object_type_t
modifier|*
name|dhcp_type_host
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|enter_host
name|PROTO
argument_list|(
operator|(
expr|struct
name|host_decl
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|delete_host
name|PROTO
argument_list|(
operator|(
expr|struct
name|host_decl
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|find_hosts_by_haddr
name|PROTO
argument_list|(
operator|(
expr|struct
name|host_decl
operator|*
operator|*
operator|,
name|int
operator|,
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|find_hosts_by_uid
name|PROTO
argument_list|(
operator|(
expr|struct
name|host_decl
operator|*
operator|*
operator|,
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|find_host_for_network
name|PROTO
argument_list|(
operator|(
expr|struct
name|subnet
operator|*
operator|*
operator|,
expr|struct
name|host_decl
operator|*
operator|*
operator|,
expr|struct
name|iaddr
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|new_address_range
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|subnet
operator|*
operator|,
expr|struct
name|pool
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|dhcp_lease_free
parameter_list|(
name|omapi_object_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_lease_get
parameter_list|(
name|omapi_object_t
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|find_grouped_subnet
name|PROTO
argument_list|(
operator|(
expr|struct
name|subnet
operator|*
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|,
expr|struct
name|iaddr
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|find_subnet
parameter_list|(
name|struct
name|subnet
modifier|*
modifier|*
parameter_list|,
name|struct
name|iaddr
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|enter_shared_network
name|PROTO
argument_list|(
operator|(
expr|struct
name|shared_network
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|new_shared_network_interface
name|PROTO
argument_list|(
operator|(
expr|struct
name|parse
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|subnet_inner_than
name|PROTO
argument_list|(
operator|(
expr|struct
name|subnet
operator|*
operator|,
expr|struct
name|subnet
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|enter_subnet
name|PROTO
argument_list|(
operator|(
expr|struct
name|subnet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|enter_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|supersede_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|make_binding_state_transition
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|int
name|lease_copy
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|release_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|abandon_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dissociate_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|pool_timer
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|find_lease_by_uid
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|*
operator|,
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|find_lease_by_hw_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|*
operator|,
specifier|const
name|unsigned
name|char
operator|*
operator|,
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|find_lease_by_ip_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|*
operator|,
expr|struct
name|iaddr
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|uid_hash_add
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|uid_hash_delete
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|hw_hash_add
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|hw_hash_delete
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|write_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|lease_enqueue
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|lease_instantiate
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|expire_all_pools
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dump_subnets
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|DEBUG_MEMORY_LEAKAGE
argument_list|)
operator|||
expr|\
name|defined
argument_list|(
name|DEBUG_MEMORY_LEAKAGE_ON_EXIT
argument_list|)
end_if

begin_function_decl
name|void
name|free_everything
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* nsupdate.c */
end_comment

begin_function_decl
name|char
modifier|*
name|ddns_rev_name
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|lease_state
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|ddns_fwd_name
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|lease_state
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nsupdateA
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|nsupdatePTR
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|nsupdate
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|lease_state
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|updateA
parameter_list|(
specifier|const
name|struct
name|data_string
modifier|*
parameter_list|,
specifier|const
name|struct
name|data_string
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|updatePTR
parameter_list|(
specifier|const
name|struct
name|data_string
modifier|*
parameter_list|,
specifier|const
name|struct
name|data_string
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|deleteA
parameter_list|(
specifier|const
name|struct
name|data_string
modifier|*
parameter_list|,
specifier|const
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|deletePTR
parameter_list|(
specifier|const
name|struct
name|data_string
modifier|*
parameter_list|,
specifier|const
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* failover.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|FAILOVER_PROTOCOL
argument_list|)
end_if

begin_decl_stmt
specifier|extern
name|dhcp_failover_state_t
modifier|*
name|failover_states
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcp_failover_startup
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|dhcp_failover_write_all_states
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|isc_result_t
name|enter_failover_peer
name|PROTO
argument_list|(
operator|(
name|dhcp_failover_state_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|find_failover_peer
name|PROTO
argument_list|(
operator|(
name|dhcp_failover_state_t
operator|*
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_link_initiate
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_link_signal
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|va_list
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_link_set_value
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_data_string_t
operator|*
operator|,
name|omapi_typed_data_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_link_get_value
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_data_string_t
operator|*
operator|,
name|omapi_value_t
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_link_destroy
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_link_stuff_values
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_listen
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_listener_signal
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|va_list
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_listener_set_value
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_data_string_t
operator|*
operator|,
name|omapi_typed_data_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_listener_get_value
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_data_string_t
operator|*
operator|,
name|omapi_value_t
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_listener_destroy
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_listener_stuff
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_register
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_state_signal
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|va_list
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|dhcp_failover_state_transition
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_set_service_state
parameter_list|(
name|dhcp_failover_state_t
modifier|*
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_set_state
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|enum
name|failover_state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_peer_state_changed
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|failover_message_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dhcp_failover_pool_rebalance
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dhcp_failover_pool_check
parameter_list|(
name|struct
name|pool
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dhcp_failover_state_pool_check
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_timeout
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_send_contact
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_state
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_updates
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dhcp_failover_queue_update
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dhcp_failover_send_acks
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_toack_queue_timeout
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|dhcp_failover_queue_ack
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|failover_message_t
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_ack_queue_remove
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_state_set_value
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_data_string_t
operator|*
operator|,
name|omapi_typed_data_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|dhcp_failover_keepalive
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_reconnect
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_startup_timeout
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_link_startup_timeout
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_listener_restart
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_state_get_value
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_data_string_t
operator|*
operator|,
name|omapi_value_t
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_state_destroy
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_state_stuff
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_state_lookup
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|*
operator|,
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_state_create
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|*
operator|,
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_state_remove
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|dhcp_failover_state_match
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|u_int8_t
modifier|*
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|dhcp_failover_reject_reason_print
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|dhcp_failover_state_name_print
parameter_list|(
name|enum
name|failover_state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|dhcp_failover_message_name
parameter_list|(
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|dhcp_failover_option_name
parameter_list|(
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|failover_option_t
modifier|*
name|dhcp_failover_option_printf
parameter_list|(
name|unsigned
parameter_list|,
name|char
modifier|*
parameter_list|,
name|unsigned
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(__format__
parameter_list|(
name|__printf__
parameter_list|,
function_decl|5
operator|,
function_decl|6
end_function_decl

begin_empty_stmt
unit|)))
empty_stmt|;
end_empty_stmt

begin_function_decl
name|failover_option_t
modifier|*
name|dhcp_failover_make_option
parameter_list|(
name|unsigned
parameter_list|,
name|char
modifier|*
parameter_list|,
name|unsigned
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_put_message
parameter_list|(
name|dhcp_failover_link_t
modifier|*
parameter_list|,
name|omapi_object_t
modifier|*
parameter_list|,
name|int
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_send_connect
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_send_connectack
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|dhcp_failover_state_t
operator|*
operator|,
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|isc_result_t
name|dhcp_failover_send_disconnect
name|PROTO
argument_list|(
operator|(
name|omapi_object_t
operator|*
operator|,
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_bind_update
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_bind_ack
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|failover_message_t
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_poolreq
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_poolresp
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_update_request
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_update_request_all
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_send_update_done
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_process_bind_update
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|failover_message_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_process_bind_ack
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|failover_message_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_generate_update_queue
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_process_update_request
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|failover_message_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_process_update_request_all
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|failover_message_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|isc_result_t
name|dhcp_failover_process_update_done
parameter_list|(
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|failover_message_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dhcp_failover_recover_done
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|failover_print
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
name|unsigned
operator|*
operator|,
name|unsigned
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|update_partner
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|load_balance_mine
parameter_list|(
name|struct
name|packet
modifier|*
parameter_list|,
name|dhcp_failover_state_t
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|binding_state_t
name|normal_binding_state_transition_check
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|,
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|binding_state_t
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|binding_state_t
name|conflict_binding_state_transition_check
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|,
name|dhcp_failover_state_t
modifier|*
parameter_list|,
name|binding_state_t
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|lease_mine_to_reallocate
parameter_list|(
name|struct
name|lease
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|dhcp_failover_state
argument_list|,
argument|dhcp_failover_state_t
argument_list|,
argument|dhcp_type_failover_state
argument_list|)
end_macro

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|dhcp_failover_listener
argument_list|,
argument|dhcp_failover_listener_t
argument_list|,
argument|dhcp_type_failover_listener
argument_list|)
end_macro

begin_macro
name|OMAPI_OBJECT_ALLOC_DECL
argument_list|(
argument|dhcp_failover_link
argument_list|,
argument|dhcp_failover_link_t
argument_list|,
argument|dhcp_type_failover_link
argument_list|)
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* FAILOVER_PROTOCOL */
end_comment

begin_function_decl
specifier|const
name|char
modifier|*
name|binding_state_print
parameter_list|(
name|enum
name|failover_state
parameter_list|)
function_decl|;
end_function_decl

end_unit

