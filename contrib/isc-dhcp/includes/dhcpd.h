begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* dhcpd.h     Definitions for dhcpd... */
end_comment

begin_comment
comment|/*  * Copyright (c) 1995, 1996, 1997, 1998, 1999  * The Internet Software Consortium.    All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of The Internet Software Consortium nor the names  *    of its contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND  * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * This software has been written for the Internet Software Consortium  * by Ted Lemon<mellon@fugue.com> in cooperation with Vixie  * Enterprises.  To learn more about the Internet Software Consortium,  * see ``http://www.vix.com/isc''.  To learn more about Vixie  * Enterprises, see ``http://www.vix.com''.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__CYGWIN32__
end_ifndef

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<netinet/in.h>
end_include

begin_include
include|#
directive|include
file|<sys/socket.h>
end_include

begin_include
include|#
directive|include
file|<sys/un.h>
end_include

begin_include
include|#
directive|include
file|<arpa/inet.h>
end_include

begin_include
include|#
directive|include
file|<netdb.h>
end_include

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|fd_set
value|cygwin_fd_set
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<fcntl.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<unistd.h>
end_include

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<sys/stat.h>
end_include

begin_include
include|#
directive|include
file|<ctype.h>
end_include

begin_include
include|#
directive|include
file|<time.h>
end_include

begin_include
include|#
directive|include
file|"cdefs.h"
end_include

begin_include
include|#
directive|include
file|"osdep.h"
end_include

begin_include
include|#
directive|include
file|"dhcp.h"
end_include

begin_include
include|#
directive|include
file|"tree.h"
end_include

begin_include
include|#
directive|include
file|"hash.h"
end_include

begin_include
include|#
directive|include
file|"inet.h"
end_include

begin_include
include|#
directive|include
file|"sysconf.h"
end_include

begin_struct
struct|struct
name|option_data
block|{
name|int
name|len
decl_stmt|;
name|u_int8_t
modifier|*
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|string_list
block|{
name|struct
name|string_list
modifier|*
name|next
decl_stmt|;
name|char
name|string
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A name server, from /etc/resolv.conf. */
end_comment

begin_struct
struct|struct
name|name_server
block|{
name|struct
name|name_server
modifier|*
name|next
decl_stmt|;
name|struct
name|sockaddr_in
name|addr
decl_stmt|;
name|TIME
name|rcdate
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A domain search list element. */
end_comment

begin_struct
struct|struct
name|domain_search_list
block|{
name|struct
name|domain_search_list
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|domain
decl_stmt|;
name|TIME
name|rcdate
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A dhcp packet and the pointers to its option values. */
end_comment

begin_struct
struct|struct
name|packet
block|{
name|struct
name|dhcp_packet
modifier|*
name|raw
decl_stmt|;
name|int
name|packet_length
decl_stmt|;
name|int
name|packet_type
decl_stmt|;
name|int
name|options_valid
decl_stmt|;
name|int
name|client_port
decl_stmt|;
name|struct
name|iaddr
name|client_addr
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|interface
decl_stmt|;
comment|/* Interface on which packet 						   was received. */
name|struct
name|hardware
modifier|*
name|haddr
decl_stmt|;
comment|/* Physical link address 					   of local sender (maybe gateway). */
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
name|struct
name|option_data
name|options
index|[
literal|256
index|]
decl_stmt|;
name|int
name|got_requested_address
decl_stmt|;
comment|/* True if client sent the 					   dhcp-requested-address option. */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hardware
block|{
name|u_int8_t
name|htype
decl_stmt|;
name|u_int8_t
name|hlen
decl_stmt|;
name|u_int8_t
name|haddr
index|[
literal|16
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A dhcp lease declaration structure. */
end_comment

begin_struct
struct|struct
name|lease
block|{
name|struct
name|lease
modifier|*
name|next
decl_stmt|;
name|struct
name|lease
modifier|*
name|prev
decl_stmt|;
name|struct
name|lease
modifier|*
name|n_uid
decl_stmt|,
modifier|*
name|n_hw
decl_stmt|;
name|struct
name|lease
modifier|*
name|waitq_next
decl_stmt|;
name|struct
name|iaddr
name|ip_addr
decl_stmt|;
name|TIME
name|starts
decl_stmt|,
name|ends
decl_stmt|,
name|timestamp
decl_stmt|;
name|unsigned
name|char
modifier|*
name|uid
decl_stmt|;
name|int
name|uid_len
decl_stmt|;
name|int
name|uid_max
decl_stmt|;
name|unsigned
name|char
name|uid_buf
index|[
literal|32
index|]
decl_stmt|;
name|char
modifier|*
name|hostname
decl_stmt|;
name|char
modifier|*
name|client_hostname
decl_stmt|;
name|struct
name|host_decl
modifier|*
name|host
decl_stmt|;
name|struct
name|subnet
modifier|*
name|subnet
decl_stmt|;
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
name|struct
name|hardware
name|hardware_addr
decl_stmt|;
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|STATIC_LEASE
value|1
define|#
directive|define
name|BOOTP_LEASE
value|2
define|#
directive|define
name|DYNAMIC_BOOTP_OK
value|4
define|#
directive|define
name|PERSISTENT_FLAGS
value|(DYNAMIC_BOOTP_OK)
define|#
directive|define
name|EPHEMERAL_FLAGS
value|(BOOTP_LEASE)
define|#
directive|define
name|MS_NULL_TERMINATION
value|8
define|#
directive|define
name|ABANDONED_LEASE
value|16
name|struct
name|lease_state
modifier|*
name|state
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|lease_state
block|{
name|struct
name|lease_state
modifier|*
name|next
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|ip
decl_stmt|;
name|TIME
name|offered_expiry
decl_stmt|;
name|struct
name|tree_cache
modifier|*
name|options
index|[
literal|256
index|]
decl_stmt|;
name|u_int32_t
name|expiry
decl_stmt|,
name|renewal
decl_stmt|,
name|rebind
decl_stmt|;
name|char
name|filename
index|[
name|DHCP_FILE_LEN
index|]
decl_stmt|;
name|char
modifier|*
name|server_name
decl_stmt|;
name|struct
name|iaddr
name|from
decl_stmt|;
name|int
name|max_message_size
decl_stmt|;
name|u_int8_t
modifier|*
name|prl
decl_stmt|;
name|int
name|prl_len
decl_stmt|;
name|int
name|got_requested_address
decl_stmt|;
comment|/* True if client sent the 					   dhcp-requested-address option. */
name|int
name|got_server_identifier
decl_stmt|;
comment|/* True if client sent the 					   dhcp-server-identifier option. */
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
comment|/* Shared network of interface 						   on which request arrived. */
name|u_int32_t
name|xid
decl_stmt|;
name|u_int16_t
name|secs
decl_stmt|;
name|u_int16_t
name|bootp_flags
decl_stmt|;
name|struct
name|in_addr
name|ciaddr
decl_stmt|;
name|struct
name|in_addr
name|giaddr
decl_stmt|;
name|u_int8_t
name|hops
decl_stmt|;
name|u_int8_t
name|offer
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|ROOT_GROUP
value|0
end_define

begin_define
define|#
directive|define
name|HOST_DECL
value|1
end_define

begin_define
define|#
directive|define
name|SHARED_NET_DECL
value|2
end_define

begin_define
define|#
directive|define
name|SUBNET_DECL
value|3
end_define

begin_define
define|#
directive|define
name|CLASS_DECL
value|4
end_define

begin_define
define|#
directive|define
name|GROUP_DECL
value|5
end_define

begin_comment
comment|/* Possible modes in which discover_interfaces can run. */
end_comment

begin_define
define|#
directive|define
name|DISCOVER_RUNNING
value|0
end_define

begin_define
define|#
directive|define
name|DISCOVER_SERVER
value|1
end_define

begin_define
define|#
directive|define
name|DISCOVER_UNCONFIGURED
value|2
end_define

begin_define
define|#
directive|define
name|DISCOVER_RELAY
value|3
end_define

begin_define
define|#
directive|define
name|DISCOVER_REQUESTED
value|4
end_define

begin_comment
comment|/* Group of declarations that share common parameters. */
end_comment

begin_struct
struct|struct
name|group
block|{
name|struct
name|group
modifier|*
name|next
decl_stmt|;
name|struct
name|subnet
modifier|*
name|subnet
decl_stmt|;
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
name|TIME
name|default_lease_time
decl_stmt|;
name|TIME
name|max_lease_time
decl_stmt|;
name|TIME
name|bootp_lease_cutoff
decl_stmt|;
name|TIME
name|bootp_lease_length
decl_stmt|;
name|char
modifier|*
name|filename
decl_stmt|;
name|char
modifier|*
name|server_name
decl_stmt|;
name|struct
name|iaddr
name|next_server
decl_stmt|;
name|int
name|boot_unknown_clients
decl_stmt|;
name|int
name|dynamic_bootp
decl_stmt|;
name|int
name|allow_bootp
decl_stmt|;
name|int
name|allow_booting
decl_stmt|;
name|int
name|one_lease_per_client
decl_stmt|;
name|int
name|get_lease_hostnames
decl_stmt|;
name|int
name|use_host_decl_names
decl_stmt|;
name|int
name|use_lease_addr_for_default_route
decl_stmt|;
name|int
name|authoritative
decl_stmt|;
name|int
name|always_reply_rfc1048
decl_stmt|;
name|struct
name|tree_cache
modifier|*
name|options
index|[
literal|256
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A dhcp host declaration structure. */
end_comment

begin_struct
struct|struct
name|host_decl
block|{
name|struct
name|host_decl
modifier|*
name|n_ipaddr
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|hardware
name|interface
decl_stmt|;
name|struct
name|tree_cache
modifier|*
name|fixed_addr
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|shared_network
block|{
name|struct
name|shared_network
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|subnet
modifier|*
name|subnets
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|interface
decl_stmt|;
name|struct
name|lease
modifier|*
name|leases
decl_stmt|;
name|struct
name|lease
modifier|*
name|insertion_point
decl_stmt|;
name|struct
name|lease
modifier|*
name|last_lease
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|subnet
block|{
name|struct
name|subnet
modifier|*
name|next_subnet
decl_stmt|;
name|struct
name|subnet
modifier|*
name|next_sibling
decl_stmt|;
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
name|struct
name|interface_info
modifier|*
name|interface
decl_stmt|;
name|struct
name|iaddr
name|interface_address
decl_stmt|;
name|struct
name|iaddr
name|net
decl_stmt|;
name|struct
name|iaddr
name|netmask
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|class
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|group
modifier|*
name|group
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* DHCP client lease structure... */
end_comment

begin_struct
struct|struct
name|client_lease
block|{
name|struct
name|client_lease
modifier|*
name|next
decl_stmt|;
comment|/* Next lease in list. */
name|TIME
name|expiry
decl_stmt|,
name|renewal
decl_stmt|,
name|rebind
decl_stmt|;
comment|/* Lease timeouts. */
name|struct
name|iaddr
name|address
decl_stmt|;
comment|/* Address being leased. */
name|char
modifier|*
name|server_name
decl_stmt|;
comment|/* Name of boot server. */
name|char
modifier|*
name|filename
decl_stmt|;
comment|/* Name of file we're supposed to boot. */
name|struct
name|string_list
modifier|*
name|medium
decl_stmt|;
comment|/* Network medium. */
name|unsigned
name|int
name|is_static
range|:
literal|1
decl_stmt|;
comment|/* If set, lease is from config file. */
name|unsigned
name|int
name|is_bootp
range|:
literal|1
decl_stmt|;
comment|/* If set, lease was aquired with BOOTP. */
name|struct
name|option_data
name|options
index|[
literal|256
index|]
decl_stmt|;
comment|/* Options supplied with lease. */
block|}
struct|;
end_struct

begin_comment
comment|/* Possible states in which the client can be. */
end_comment

begin_enum
enum|enum
name|dhcp_state
block|{
name|S_REBOOTING
block|,
name|S_INIT
block|,
name|S_SELECTING
block|,
name|S_REQUESTING
block|,
name|S_BOUND
block|,
name|S_RENEWING
block|,
name|S_REBINDING
block|}
enum|;
end_enum

begin_comment
comment|/* Configuration information from the config file... */
end_comment

begin_struct
struct|struct
name|client_config
block|{
name|struct
name|option_data
name|defaults
index|[
literal|256
index|]
decl_stmt|;
comment|/* Default values for options. */
enum|enum
block|{
name|ACTION_DEFAULT
block|,
comment|/* Use server value if present, 					   otherwise default. */
name|ACTION_SUPERSEDE
block|,
comment|/* Always use default. */
name|ACTION_PREPEND
block|,
comment|/* Prepend default to server. */
name|ACTION_APPEND
block|,
comment|/* Append default to server. */
block|}
name|default_actions
index|[
literal|256
index|]
enum|;
name|struct
name|option_data
name|send_options
index|[
literal|256
index|]
decl_stmt|;
comment|/* Send these to server. */
name|u_int8_t
name|required_options
index|[
literal|256
index|]
decl_stmt|;
comment|/* Options server must supply. */
name|u_int8_t
name|requested_options
index|[
literal|256
index|]
decl_stmt|;
comment|/* Options to request from server. */
name|int
name|requested_option_count
decl_stmt|;
comment|/* Number of requested options. */
name|TIME
name|timeout
decl_stmt|;
comment|/* Start to panic if we don't get a 					   lease in this time period when 					   SELECTING. */
name|TIME
name|initial_interval
decl_stmt|;
comment|/* All exponential backoff intervals 					   start here. */
name|TIME
name|retry_interval
decl_stmt|;
comment|/* If the protocol failed to produce 					   an address before the timeout, 					   try the protocol again after this 					   many seconds. */
name|TIME
name|select_interval
decl_stmt|;
comment|/* Wait this many seconds from the 					   first DHCPDISCOVER before 					   picking an offered lease. */
name|TIME
name|reboot_timeout
decl_stmt|;
comment|/* When in INIT-REBOOT, wait this 					   long before giving up and going 					   to INIT. */
name|TIME
name|backoff_cutoff
decl_stmt|;
comment|/* When doing exponential backoff, 					   never back off to an interval 					   longer than this amount. */
name|struct
name|string_list
modifier|*
name|media
decl_stmt|;
comment|/* Possible network media values. */
name|char
modifier|*
name|script_name
decl_stmt|;
comment|/* Name of config script. */
enum|enum
block|{
name|IGNORE
block|,
name|ACCEPT
block|,
name|PREFER
block|}
name|bootp_policy
enum|;
comment|/* Ignore, accept or prefer BOOTP 					   responses. */
name|struct
name|string_list
modifier|*
name|medium
decl_stmt|;
comment|/* Current network medium. */
name|struct
name|iaddrlist
modifier|*
name|reject_list
decl_stmt|;
comment|/* Servers to reject. */
block|}
struct|;
end_struct

begin_comment
comment|/* Per-interface state used in the dhcp client... */
end_comment

begin_struct
struct|struct
name|client_state
block|{
name|struct
name|client_lease
modifier|*
name|active
decl_stmt|;
comment|/* Currently active lease. */
name|struct
name|client_lease
modifier|*
name|new
decl_stmt|;
comment|/* New lease. */
name|struct
name|client_lease
modifier|*
name|offered_leases
decl_stmt|;
comment|/* Leases offered to us. */
name|struct
name|client_lease
modifier|*
name|leases
decl_stmt|;
comment|/* Leases we currently hold. */
name|struct
name|client_lease
modifier|*
name|alias
decl_stmt|;
comment|/* Alias lease. */
name|enum
name|dhcp_state
name|state
decl_stmt|;
comment|/* Current state for this interface. */
name|struct
name|iaddr
name|destination
decl_stmt|;
comment|/* Where to send packet. */
name|u_int32_t
name|xid
decl_stmt|;
comment|/* Transaction ID. */
name|u_int16_t
name|secs
decl_stmt|;
comment|/* secs value from DHCPDISCOVER. */
name|TIME
name|first_sending
decl_stmt|;
comment|/* When was first copy sent? */
name|TIME
name|interval
decl_stmt|;
comment|/* What's the current resend interval? */
name|struct
name|string_list
modifier|*
name|medium
decl_stmt|;
comment|/* Last media type tried. */
name|struct
name|dhcp_packet
name|packet
decl_stmt|;
comment|/* Outgoing DHCP packet. */
name|int
name|packet_length
decl_stmt|;
comment|/* Actual length of generated packet. */
name|struct
name|iaddr
name|requested_address
decl_stmt|;
comment|/* Address we would like to get. */
name|struct
name|client_config
modifier|*
name|config
decl_stmt|;
comment|/* Information from config file. */
name|struct
name|string_list
modifier|*
name|env
decl_stmt|;
comment|/* Client script environment. */
name|int
name|envc
decl_stmt|;
comment|/* Number of entries in environment. */
block|}
struct|;
end_struct

begin_comment
comment|/* Information about each network interface. */
end_comment

begin_struct
struct|struct
name|interface_info
block|{
name|struct
name|interface_info
modifier|*
name|next
decl_stmt|;
comment|/* Next interface in list... */
name|struct
name|shared_network
modifier|*
name|shared_network
decl_stmt|;
comment|/* Networks connected to this interface. */
name|struct
name|hardware
name|hw_address
decl_stmt|;
comment|/* Its physical address. */
name|struct
name|in_addr
name|primary_address
decl_stmt|;
comment|/* Primary interface address. */
name|char
name|name
index|[
name|IFNAMSIZ
index|]
decl_stmt|;
comment|/* Its name... */
name|int
name|rfdesc
decl_stmt|;
comment|/* Its read file descriptor. */
name|int
name|wfdesc
decl_stmt|;
comment|/* Its write file descriptor, if 					   different. */
name|unsigned
name|char
modifier|*
name|rbuf
decl_stmt|;
comment|/* Read buffer, if required. */
name|size_t
name|rbuf_max
decl_stmt|;
comment|/* Size of read buffer. */
name|size_t
name|rbuf_offset
decl_stmt|;
comment|/* Current offset into buffer. */
name|size_t
name|rbuf_len
decl_stmt|;
comment|/* Length of data in buffer. */
name|struct
name|ifreq
modifier|*
name|ifp
decl_stmt|;
comment|/* Pointer to ifreq struct. */
name|u_int32_t
name|flags
decl_stmt|;
comment|/* Control flags... */
define|#
directive|define
name|INTERFACE_REQUESTED
value|1
define|#
directive|define
name|INTERFACE_AUTOMATIC
value|2
comment|/* Only used by DHCP client code. */
name|struct
name|client_state
modifier|*
name|client
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hardware_link
block|{
name|struct
name|hardware_link
modifier|*
name|next
decl_stmt|;
name|char
name|name
index|[
name|IFNAMSIZ
index|]
decl_stmt|;
name|struct
name|hardware
name|address
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|timeout
block|{
name|struct
name|timeout
modifier|*
name|next
decl_stmt|;
name|TIME
name|when
decl_stmt|;
name|void
argument_list|(
argument|*func
argument_list|)
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|what
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|protocol
block|{
name|struct
name|protocol
modifier|*
name|next
decl_stmt|;
name|int
name|fd
decl_stmt|;
name|void
argument_list|(
argument|*handler
argument_list|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
modifier|*
name|local
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Bitmask of dhcp option codes. */
end_comment

begin_typedef
typedef|typedef
name|unsigned
name|char
name|option_mask
index|[
literal|16
index|]
typedef|;
end_typedef

begin_comment
comment|/* DHCP Option mask manipulation macros... */
end_comment

begin_define
define|#
directive|define
name|OPTION_ZERO
parameter_list|(
name|mask
parameter_list|)
value|(memset (mask, 0, 16))
end_define

begin_define
define|#
directive|define
name|OPTION_SET
parameter_list|(
name|mask
parameter_list|,
name|bit
parameter_list|)
value|(mask [bit>> 8] |= (1<< (bit& 7)))
end_define

begin_define
define|#
directive|define
name|OPTION_CLR
parameter_list|(
name|mask
parameter_list|,
name|bit
parameter_list|)
value|(mask [bit>> 8]&= ~(1<< (bit& 7)))
end_define

begin_define
define|#
directive|define
name|OPTION_ISSET
parameter_list|(
name|mask
parameter_list|,
name|bit
parameter_list|)
value|(mask [bit>> 8]& (1<< (bit& 7)))
end_define

begin_define
define|#
directive|define
name|OPTION_ISCLR
parameter_list|(
name|mask
parameter_list|,
name|bit
parameter_list|)
value|(!OPTION_ISSET (mask, bit))
end_define

begin_comment
comment|/* An option occupies its length plus two header bytes (code and     length) for every 255 bytes that must be stored. */
end_comment

begin_define
define|#
directive|define
name|OPTION_SPACE
parameter_list|(
name|x
parameter_list|)
value|((x) + 2 * ((x) / 255 + 1))
end_define

begin_comment
comment|/* Default path to dhcpd config file. */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|DEBUG
end_ifdef

begin_undef
undef|#
directive|undef
name|_PATH_DHCPD_CONF
end_undef

begin_define
define|#
directive|define
name|_PATH_DHCPD_CONF
value|"dhcpd.conf"
end_define

begin_undef
undef|#
directive|undef
name|_PATH_DHCPD_DB
end_undef

begin_define
define|#
directive|define
name|_PATH_DHCPD_DB
value|"dhcpd.leases"
end_define

begin_else
else|#
directive|else
end_else

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCPD_CONF
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCPD_CONF
value|"/etc/dhcpd.conf"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCPD_DB
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCPD_DB
value|"/etc/dhcpd.leases"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCPD_PID
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCPD_PID
value|"/var/run/dhcpd.pid"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCLIENT_CONF
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCLIENT_CONF
value|"/etc/dhclient.conf"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCLIENT_PID
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCLIENT_PID
value|"/var/run/dhclient.pid"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCLIENT_DB
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCLIENT_DB
value|"/etc/dhclient.leases"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_RESOLV_CONF
end_ifndef

begin_define
define|#
directive|define
name|_PATH_RESOLV_CONF
value|"/etc/resolv.conf"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_PATH_DHCRELAY_PID
end_ifndef

begin_define
define|#
directive|define
name|_PATH_DHCRELAY_PID
value|"/var/run/dhcrelay.pid"
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DHCPD_LOG_FACILITY
end_ifndef

begin_define
define|#
directive|define
name|DHCPD_LOG_FACILITY
value|LOG_DAEMON
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|MAX_TIME
value|0x7fffffff
end_define

begin_define
define|#
directive|define
name|MIN_TIME
value|0
end_define

begin_comment
comment|/* External definitions... */
end_comment

begin_comment
comment|/* options.c */
end_comment

begin_decl_stmt
name|void
name|parse_options
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_option_buffer
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|cons_options
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|int
operator|,
expr|struct
name|tree_cache
operator|*
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|store_options
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
expr|struct
name|tree_cache
operator|*
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|pretty_print_option
name|PROTO
argument_list|(
operator|(
name|unsigned
name|int
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|do_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|int
operator|,
name|unsigned
name|int
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* errwarn.c */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|warnings_occurred
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|error
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|warn
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|note
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|debug
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_warn
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhcpd.c */
end_comment

begin_decl_stmt
specifier|extern
name|TIME
name|cur_time
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|group
name|root_group
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16_t
name|local_port
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|u_int16_t
name|remote_port
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|log_priority
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|log_perror
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|path_dhcpd_conf
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|path_dhcpd_db
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|path_dhcpd_pid
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
decl|main
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|char
operator|*
operator|*
operator|,
name|char
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|cleanup
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|lease_pinged
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|lease_ping_timeout
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* conflex.c */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|lexline
decl_stmt|,
name|lexchar
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|token_line
decl_stmt|,
modifier|*
name|tlname
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
name|comments
index|[
literal|4096
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|comment_index
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|eol_token
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|new_parse
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|next_token
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|peek_token
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|*
operator|,
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* confpars.c */
end_comment

begin_decl_stmt
name|int
name|readconf
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|read_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
name|int
operator|,
expr|struct
name|host_decl
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_allow_deny
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|skip_to_semi
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_boolean
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_semi
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_lbrace
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_host_declaration
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|group
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|parse_host_name
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_class_declaration
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|group
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_lease_time
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|TIME
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_shared_net_declaration
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|group
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_subnet_declaration
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_group_declaration
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|group
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_hardware_param
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|parse_string
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree
modifier|*
name|parse_ip_addr_or_hostname
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree_cache
modifier|*
name|parse_fixed_addr_param
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_option_param
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|group
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TIME
name|parse_timestamp
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease
modifier|*
name|parse_lease_declaration
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_address_range
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|subnet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|TIME
name|parse_date
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|char
modifier|*
name|parse_numeric_aggregate
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_num
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* tree.c */
end_comment

begin_decl_stmt
name|pair
name|cons
name|PROTO
argument_list|(
operator|(
name|caddr_t
operator|,
name|pair
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree_cache
modifier|*
name|tree_cache
name|PROTO
argument_list|(
operator|(
expr|struct
name|tree
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree
modifier|*
name|tree_host_lookup
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|dns_host_entry
modifier|*
name|enter_dns_host
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree
modifier|*
name|tree_const
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree
modifier|*
name|tree_concat
name|PROTO
argument_list|(
operator|(
expr|struct
name|tree
operator|*
operator|,
expr|struct
name|tree
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree
modifier|*
name|tree_limit
name|PROTO
argument_list|(
operator|(
expr|struct
name|tree
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|tree_evaluate
name|PROTO
argument_list|(
operator|(
expr|struct
name|tree_cache
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhcp.c */
end_comment

begin_decl_stmt
specifier|extern
name|int
name|outstanding_pings
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcp
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpdiscover
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcprequest
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcprelease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpdecline
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpinform
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|nak_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|iaddr
operator|*
name|cip
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|ack_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
name|unsigned
name|int
operator|,
name|TIME
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcp_reply
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease
modifier|*
name|find_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease
modifier|*
name|mockup_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|,
expr|struct
name|host_decl
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* bootp.c */
end_comment

begin_decl_stmt
name|void
name|bootp
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* memory.c */
end_comment

begin_decl_stmt
name|void
name|enter_host
name|PROTO
argument_list|(
operator|(
expr|struct
name|host_decl
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|host_decl
modifier|*
name|find_hosts_by_haddr
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|host_decl
modifier|*
name|find_hosts_by_uid
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|subnet
modifier|*
name|find_host_for_network
name|PROTO
argument_list|(
operator|(
expr|struct
name|host_decl
operator|*
operator|*
operator|,
expr|struct
name|iaddr
operator|*
operator|,
expr|struct
name|shared_network
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|new_address_range
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|subnet
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|subnet
modifier|*
name|find_grouped_subnet
name|PROTO
argument_list|(
operator|(
expr|struct
name|shared_network
operator|*
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|subnet
modifier|*
name|find_subnet
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|enter_shared_network
name|PROTO
argument_list|(
operator|(
expr|struct
name|shared_network
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|subnet_inner_than
name|PROTO
argument_list|(
operator|(
expr|struct
name|subnet
operator|*
operator|,
expr|struct
name|subnet
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|enter_subnet
name|PROTO
argument_list|(
operator|(
expr|struct
name|subnet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|enter_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|supersede_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
expr|struct
name|lease
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|release_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|abandon_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease
modifier|*
name|find_lease_by_uid
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease
modifier|*
name|find_lease_by_hw_addr
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease
modifier|*
name|find_lease_by_ip_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|uid_hash_add
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|uid_hash_delete
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|hw_hash_add
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|hw_hash_delete
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|class
modifier|*
name|add_class
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|class
modifier|*
name|find_class
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|group
modifier|*
name|clone_group
name|PROTO
argument_list|(
operator|(
expr|struct
name|group
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|write_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dump_subnets
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* alloc.c */
end_comment

begin_decl_stmt
name|VOIDPTR
name|dmalloc
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dfree
name|PROTO
argument_list|(
operator|(
name|VOIDPTR
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|packet
modifier|*
name|new_packet
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|dhcp_packet
modifier|*
name|new_dhcp_packet
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree
modifier|*
name|new_tree
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|tree_cache
modifier|*
name|new_tree_cache
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hash_table
modifier|*
name|new_hash_table
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|hash_bucket
modifier|*
name|new_hash_bucket
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease
modifier|*
name|new_lease
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease
modifier|*
name|new_leases
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|subnet
modifier|*
name|new_subnet
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|class
modifier|*
name|new_class
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|shared_network
modifier|*
name|new_shared_network
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|group
modifier|*
name|new_group
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|protocol
modifier|*
name|new_protocol
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|lease_state
modifier|*
name|new_lease_state
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|domain_search_list
modifier|*
name|new_domain_search_list
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|name_server
modifier|*
name|new_name_server
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_name_server
name|PROTO
argument_list|(
operator|(
expr|struct
name|name_server
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_domain_search_list
name|PROTO
argument_list|(
operator|(
expr|struct
name|domain_search_list
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_lease_state
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease_state
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_protocol
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_group
name|PROTO
argument_list|(
operator|(
expr|struct
name|group
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_shared_network
name|PROTO
argument_list|(
operator|(
expr|struct
name|shared_network
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_class
name|PROTO
argument_list|(
operator|(
expr|struct
name|class
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_subnet
name|PROTO
argument_list|(
operator|(
expr|struct
name|subnet
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_hash_bucket
name|PROTO
argument_list|(
operator|(
expr|struct
name|hash_bucket
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_hash_table
name|PROTO
argument_list|(
operator|(
expr|struct
name|hash_table
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_tree_cache
name|PROTO
argument_list|(
operator|(
expr|struct
name|tree_cache
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_dhcp_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|dhcp_packet
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_tree
name|PROTO
argument_list|(
operator|(
expr|struct
name|tree
operator|*
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* print.c */
end_comment

begin_decl_stmt
name|char
modifier|*
name|print_hw_addr
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|int
operator|,
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|print_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dump_raw
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dump_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|hash_dump
name|PROTO
argument_list|(
operator|(
expr|struct
name|hash_table
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* socket.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_SOCKET_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_SOCKET_RECEIVE
argument_list|)
expr|\
operator|||
name|defined
argument_list|(
name|USE_SOCKET_FALLBACK
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_socket
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_SOCKET_FALLBACK
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|USE_SOCKET_SEND
argument_list|)
end_if

begin_decl_stmt
name|void
name|if_reinitialize_fallback
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_fallback
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_fallback
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_SOCKET_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_SOCKET_FALLBACK
argument_list|)
end_if

begin_decl_stmt
name|void
name|fallback_discard
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_SOCKET_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_SOCKET_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* bpf.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_BPF_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_BPF_RECEIVE
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_bpf
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_BPF_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_BPF_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_BPF_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* lpf.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_LPF_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_LPF_RECEIVE
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_lpf
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_LPF_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_LPF_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_LPF_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* nit.c */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_NIT_SEND
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_NIT_RECEIVE
argument_list|)
end_if

begin_decl_stmt
name|int
name|if_register_nit
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_NIT_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_NIT_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_NIT_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_DLPI_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|USE_DLPI_RECEIVE
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_receive
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|receive_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_DLPI_SEND
argument_list|)
end_if

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* raw.c */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|USE_RAW_SEND
end_ifdef

begin_decl_stmt
name|void
name|if_reinitialize_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|if_register_send
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|send_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|packet
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|size_t
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_unicast_without_arp
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|can_receive_unicast_unconfigured
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|maybe_setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* dispatch.c */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|interface_info
modifier|*
name|interfaces
decl_stmt|,
modifier|*
name|dummy_interfaces
decl_stmt|,
modifier|*
name|fallback_interface
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|protocol
modifier|*
name|protocols
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|quiet_interface_discovery
decl_stmt|;
end_decl_stmt

begin_extern
extern|extern void (*bootp_packet_handler
end_extern

begin_expr_stmt
unit|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|int
operator|,
name|unsigned
name|int
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|extern
name|struct
name|timeout
modifier|*
name|timeouts
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|discover_interfaces
name|PROTO
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|interface_info
modifier|*
name|setup_fallback
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|reinitialize_interfaces
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dispatch
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|locate_network
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|got_one
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|add_timeout
name|PROTO
argument_list|(
operator|(
name|TIME
operator|,
name|void
argument_list|(
argument|*
argument_list|)
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|cancel_timeout
name|PROTO
argument_list|(
operator|(
name|void
argument_list|(
argument|*
argument_list|)
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|add_protocol
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|,
name|int
operator|,
name|void
argument_list|(
argument|*
argument_list|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|)
argument_list|)
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|remove_protocol
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* hash.c */
end_comment

begin_decl_stmt
name|struct
name|hash_table
modifier|*
name|new_hash
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|add_hash
name|PROTO
argument_list|(
operator|(
expr|struct
name|hash_table
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|delete_hash_entry
name|PROTO
argument_list|(
operator|(
expr|struct
name|hash_table
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|char
modifier|*
name|hash_lookup
name|PROTO
argument_list|(
operator|(
expr|struct
name|hash_table
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* tables.c */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|option
name|dhcp_options
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|char
name|dhcp_option_default_priority_list
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|sizeof_dhcp_option_default_priority_list
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|hardware_types
index|[
literal|256
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|hash_table
name|universe_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|universe
name|dhcp_universe
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|initialize_universes
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* convert.c */
end_comment

begin_decl_stmt
name|u_int32_t
name|getULong
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int32_t
name|getLong
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int16_t
name|getUShort
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int16_t
name|getShort
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|putULong
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|putLong
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|putUShort
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|unsigned
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|putShort
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* inet.c */
end_comment

begin_decl_stmt
name|struct
name|iaddr
name|subnet_number
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|iaddr
name|ip_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|iaddr
name|broadcast_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int32_t
name|host_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|addr_eq
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|char
modifier|*
name|piaddr
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhclient.c */
end_comment

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|path_dhclient_conf
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|path_dhclient_db
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|char
modifier|*
name|path_dhclient_pid
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|interfaces_requested
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|client_config
name|top_level_config
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpoffer
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpack
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dhcpnak
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|send_discover
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|send_request
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|send_release
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|send_decline
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_reboot
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_init
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_selecting
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_requesting
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_bound
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|state_panic
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|bind_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_discover
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_request
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_decline
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_release
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|free_client_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|rewrite_client_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|write_client_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|script_init
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|char
operator|*
operator|,
expr|struct
name|string_list
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|script_write_params
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|char
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|script_go
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|client_envadd
name|PROTO
argument_list|(
operator|(
expr|struct
name|client_state
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|dhcp_option_ev_name
parameter_list|(
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|struct
name|option
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|struct
name|client_lease
modifier|*
name|packet_to_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|packet
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|go_daemon
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|write_client_pid_file
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|status_message
name|PROTO
argument_list|(
operator|(
expr|struct
name|sysconf_header
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|client_location_changed
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* db.c */
end_comment

begin_decl_stmt
name|int
name|write_lease
name|PROTO
argument_list|(
operator|(
expr|struct
name|lease
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|commit_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|db_startup
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|new_lease_file
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* packet.c */
end_comment

begin_decl_stmt
name|u_int32_t
name|checksum
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|u_int32_t
name|wrapsum
name|PROTO
argument_list|(
operator|(
name|u_int32_t
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|assemble_hw_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|assemble_udp_ip_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|*
operator|,
name|u_int32_t
operator|,
name|u_int32_t
operator|,
name|unsigned
name|int
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|decode_hw_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|decode_udp_ip_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
expr|struct
name|sockaddr_in
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* ethernet.c */
end_comment

begin_decl_stmt
name|void
name|assemble_ethernet_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|decode_ethernet_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* tr.c */
end_comment

begin_decl_stmt
name|void
name|assemble_tr_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|*
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ssize_t
name|decode_tr_header
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
name|unsigned
name|char
operator|*
operator|,
name|int
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhxpxlt.c */
end_comment

begin_decl_stmt
name|void
name|convert_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_host_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_host_name
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_class_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_class_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_lease_time
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_shared_net_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_subnet_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_subnet_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_host_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_hardware_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_hardware_addr
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_filename_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_servername_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_ip_addr_or_hostname
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_fixed_addr_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_option_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_timestamp
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_lease_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_address_range
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_date
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|convert_numeric_aggregate
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|jrefproto
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|indent
name|PROTO
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* route.c */
end_comment

begin_decl_stmt
name|void
name|add_route_direct
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|add_route_net
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|add_route_default_gateway
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|remove_routes
name|PROTO
argument_list|(
operator|(
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|remove_if_route
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|remove_all_if_routes
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|set_netmask
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|set_broadcast_addr
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|set_ip_address
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|in_addr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* clparse.c */
end_comment

begin_decl_stmt
name|int
name|read_client_conf
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|read_client_leases
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_client_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|client_config
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_X
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_option_list
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|u_int8_t
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_interface_declaration
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|client_config
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|interface_info
modifier|*
name|interface_or_dummy
name|PROTO
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_client_state
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|make_client_config
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|client_config
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_client_lease_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_client_lease_declaration
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|client_lease
operator|*
operator|,
expr|struct
name|interface_info
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|option
modifier|*
name|parse_option_decl
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|option_data
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_string_list
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|string_list
operator|*
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|parse_ip_addr
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|iaddr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|parse_reject_statement
name|PROTO
argument_list|(
operator|(
name|FILE
operator|*
operator|,
expr|struct
name|client_config
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dhcrelay.c */
end_comment

begin_decl_stmt
name|void
name|relay
name|PROTO
argument_list|(
operator|(
expr|struct
name|interface_info
operator|*
operator|,
expr|struct
name|dhcp_packet
operator|*
operator|,
name|int
operator|,
name|unsigned
name|int
operator|,
expr|struct
name|iaddr
operator|,
expr|struct
name|hardware
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* icmp.c */
end_comment

begin_decl_stmt
name|void
name|icmp_startup
name|PROTO
argument_list|(
operator|(
name|int
operator|,
name|void
argument_list|(
argument|*
argument_list|)
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|,
name|u_int8_t
operator|*
operator|,
name|int
operator|)
argument_list|)
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|icmp_echorequest
name|PROTO
argument_list|(
operator|(
expr|struct
name|iaddr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|icmp_echoreply
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* dns.c */
end_comment

begin_decl_stmt
name|void
name|dns_startup
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|ns_inaddr_lookup
name|PROTO
argument_list|(
operator|(
name|u_int16_t
operator|,
expr|struct
name|iaddr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|dns_packet
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* resolv.c */
end_comment

begin_decl_stmt
specifier|extern
name|char
name|path_resolv_conf
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|name_server
modifier|*
name|name_servers
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|domain_search_list
modifier|*
name|domains
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|read_resolv_conf
name|PROTO
argument_list|(
operator|(
name|TIME
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|sockaddr_in
modifier|*
name|pick_name_server
name|PROTO
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* inet_addr.c */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|NEED_INET_ATON
end_ifdef

begin_decl_stmt
name|int
name|inet_aton
name|PROTO
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
expr|struct
name|in_addr
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* sysconf.c */
end_comment

begin_decl_stmt
name|void
name|sysconf_startup
name|PROTO
argument_list|(
operator|(
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
expr|struct
name|sysconf_header
operator|*
argument_list|,
name|void
operator|*
argument_list|)
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|sysconf_restart
name|PROTO
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|sysconf_message
name|PROTO
argument_list|(
operator|(
expr|struct
name|protocol
operator|*
name|proto
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

end_unit

