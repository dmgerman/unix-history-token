begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* tree.h     Definitions for address trees... */
end_comment

begin_comment
comment|/*  * Copyright (c) 1996-2001 Internet Software Consortium.  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. Neither the name of The Internet Software Consortium nor the names  *    of its contributors may be used to endorse or promote products derived  *    from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE INTERNET SOFTWARE CONSORTIUM AND  * CONTRIBUTORS ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES,  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE INTERNET SOFTWARE CONSORTIUM OR  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  *  * This software has been written for the Internet Software Consortium  * by Ted Lemon in cooperation with Vixie Enterprises and Nominum, Inc.  * To learn more about the Internet Software Consortium, see  * ``http://www.isc.org/''.  To learn more about Vixie Enterprises,  * see ``http://www.vix.com''.   To learn more about Nominum, Inc., see  * ``http://www.nominum.com''.  */
end_comment

begin_comment
comment|/* A pair of pointers, suitable for making a linked list. */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|_pair
block|{
name|caddr_t
name|car
decl_stmt|;
name|struct
name|_pair
modifier|*
name|cdr
decl_stmt|;
block|}
typedef|*
name|pair
typedef|;
end_typedef

begin_struct
struct|struct
name|option_chain_head
block|{
name|int
name|refcnt
decl_stmt|;
name|pair
name|first
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|enumeration_value
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|u_int8_t
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|enumeration
block|{
name|struct
name|enumeration
modifier|*
name|next
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|enumeration_value
modifier|*
name|values
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Tree node types... */
end_comment

begin_define
define|#
directive|define
name|TREE_CONCAT
value|1
end_define

begin_define
define|#
directive|define
name|TREE_HOST_LOOKUP
value|2
end_define

begin_define
define|#
directive|define
name|TREE_CONST
value|3
end_define

begin_define
define|#
directive|define
name|TREE_LIMIT
value|4
end_define

begin_define
define|#
directive|define
name|TREE_DATA_EXPR
value|5
end_define

begin_comment
comment|/* A data buffer with a reference count. */
end_comment

begin_struct
struct|struct
name|buffer
block|{
name|int
name|refcnt
decl_stmt|;
name|unsigned
name|char
name|data
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* XXX The mechanism by which data strings are returned is currently    XXX broken: rather than returning an ephemeral pointer, we create    XXX a reference to the data in the caller's space, which the caller    XXX then has to dereference - instead, the reference should be    XXX ephemeral by default and be made a persistent reference explicitly. */
end_comment

begin_comment
comment|/* XXX on the other hand, it seems to work pretty nicely, so maybe the    XXX above comment is meshuggenah. */
end_comment

begin_comment
comment|/* A string of data bytes, possibly accompanied by a larger buffer. */
end_comment

begin_struct
struct|struct
name|data_string
block|{
name|struct
name|buffer
modifier|*
name|buffer
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|data
decl_stmt|;
name|unsigned
name|len
decl_stmt|;
comment|/* Does not include NUL terminator, if any. */
name|int
name|terminated
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|expression_context
block|{
name|context_any
block|,
comment|/* indefinite */
name|context_boolean
block|,
name|context_data
block|,
name|context_numeric
block|,
name|context_dns
block|,
name|context_data_or_numeric
block|,
comment|/* indefinite */
name|context_function
block|}
enum|;
end_enum

begin_struct
struct|struct
name|fundef
block|{
name|int
name|refcnt
decl_stmt|;
name|struct
name|string_list
modifier|*
name|args
decl_stmt|;
name|struct
name|executable_statement
modifier|*
name|statements
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|binding_value
block|{
name|int
name|refcnt
decl_stmt|;
enum|enum
block|{
name|binding_boolean
block|,
name|binding_data
block|,
name|binding_numeric
block|,
name|binding_dns
block|,
name|binding_function
block|}
name|type
enum|;
union|union
name|value
block|{
name|struct
name|data_string
name|data
decl_stmt|;
name|unsigned
name|long
name|intval
decl_stmt|;
name|int
name|boolean
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|NSUPDATE
argument_list|)
name|ns_updrec
modifier|*
name|dns
decl_stmt|;
endif|#
directive|endif
name|struct
name|fundef
modifier|*
name|fundef
decl_stmt|;
name|struct
name|binding_value
modifier|*
name|bv
decl_stmt|;
block|}
name|value
union|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|binding
block|{
name|struct
name|binding
modifier|*
name|next
decl_stmt|;
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|binding_value
modifier|*
name|value
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|binding_scope
block|{
name|int
name|refcnt
decl_stmt|;
name|struct
name|binding_scope
modifier|*
name|outer
decl_stmt|;
name|struct
name|binding
modifier|*
name|bindings
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Expression tree structure. */
end_comment

begin_enum
enum|enum
name|expr_op
block|{
name|expr_none
block|,
name|expr_match
block|,
name|expr_check
block|,
name|expr_equal
block|,
name|expr_substring
block|,
name|expr_suffix
block|,
name|expr_concat
block|,
name|expr_host_lookup
block|,
name|expr_and
block|,
name|expr_or
block|,
name|expr_not
block|,
name|expr_option
block|,
name|expr_hardware
block|,
name|expr_packet
block|,
name|expr_const_data
block|,
name|expr_extract_int8
block|,
name|expr_extract_int16
block|,
name|expr_extract_int32
block|,
name|expr_encode_int8
block|,
name|expr_encode_int16
block|,
name|expr_encode_int32
block|,
name|expr_const_int
block|,
name|expr_exists
block|,
name|expr_encapsulate
block|,
name|expr_known
block|,
name|expr_reverse
block|,
name|expr_leased_address
block|,
name|expr_binary_to_ascii
block|,
name|expr_config_option
block|,
name|expr_host_decl_name
block|,
name|expr_pick_first_value
block|,
name|expr_lease_time
block|,
name|expr_dns_transaction
block|,
name|expr_static
block|,
name|expr_ns_add
block|,
name|expr_ns_delete
block|,
name|expr_ns_exists
block|,
name|expr_ns_not_exists
block|,
name|expr_not_equal
block|,
name|expr_null
block|,
name|expr_variable_exists
block|,
name|expr_variable_reference
block|,
name|expr_filename
block|,
name|expr_sname
block|,
name|expr_arg
block|,
name|expr_funcall
block|,
name|expr_function
block|,
name|expr_add
block|,
name|expr_subtract
block|,
name|expr_multiply
block|,
name|expr_divide
block|,
name|expr_remainder
block|,
name|expr_binary_and
block|,
name|expr_binary_or
block|,
name|expr_binary_xor
block|,
name|expr_client_state
block|}
enum|;
end_enum

begin_struct
struct|struct
name|expression
block|{
name|int
name|refcnt
decl_stmt|;
name|enum
name|expr_op
name|op
decl_stmt|;
union|union
block|{
struct|struct
block|{
name|struct
name|expression
modifier|*
name|expr
decl_stmt|;
name|struct
name|expression
modifier|*
name|offset
decl_stmt|;
name|struct
name|expression
modifier|*
name|len
decl_stmt|;
block|}
name|substring
struct|;
name|struct
name|expression
modifier|*
name|equal
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|expression
modifier|*
name|and
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|expression
modifier|*
name|or
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|expression
modifier|*
name|not
decl_stmt|;
name|struct
name|expression
modifier|*
name|add
decl_stmt|;
name|struct
name|expression
modifier|*
name|subtract
decl_stmt|;
name|struct
name|expression
modifier|*
name|multiply
decl_stmt|;
name|struct
name|expression
modifier|*
name|divide
decl_stmt|;
name|struct
name|expression
modifier|*
name|remainder
decl_stmt|;
name|struct
name|collection
modifier|*
name|check
decl_stmt|;
struct|struct
block|{
name|struct
name|expression
modifier|*
name|expr
decl_stmt|;
name|struct
name|expression
modifier|*
name|len
decl_stmt|;
block|}
name|suffix
struct|;
name|struct
name|option
modifier|*
name|option
decl_stmt|;
name|struct
name|option
modifier|*
name|config_option
decl_stmt|;
struct|struct
block|{
name|struct
name|expression
modifier|*
name|offset
decl_stmt|;
name|struct
name|expression
modifier|*
name|len
decl_stmt|;
block|}
name|packet
struct|;
name|struct
name|data_string
name|const_data
decl_stmt|;
name|struct
name|expression
modifier|*
name|extract_int
decl_stmt|;
name|struct
name|expression
modifier|*
name|encode_int
decl_stmt|;
name|unsigned
name|long
name|const_int
decl_stmt|;
name|struct
name|expression
modifier|*
name|concat
index|[
literal|2
index|]
decl_stmt|;
name|struct
name|dns_host_entry
modifier|*
name|host_lookup
decl_stmt|;
name|struct
name|option
modifier|*
name|exists
decl_stmt|;
name|struct
name|data_string
name|encapsulate
decl_stmt|;
struct|struct
block|{
name|struct
name|expression
modifier|*
name|base
decl_stmt|;
name|struct
name|expression
modifier|*
name|width
decl_stmt|;
name|struct
name|expression
modifier|*
name|seperator
decl_stmt|;
name|struct
name|expression
modifier|*
name|buffer
decl_stmt|;
block|}
name|b2a
struct|;
struct|struct
block|{
name|struct
name|expression
modifier|*
name|width
decl_stmt|;
name|struct
name|expression
modifier|*
name|buffer
decl_stmt|;
block|}
name|reverse
struct|;
struct|struct
block|{
name|struct
name|expression
modifier|*
name|car
decl_stmt|;
name|struct
name|expression
modifier|*
name|cdr
decl_stmt|;
block|}
name|pick_first_value
struct|;
struct|struct
block|{
name|struct
name|expression
modifier|*
name|car
decl_stmt|;
name|struct
name|expression
modifier|*
name|cdr
decl_stmt|;
block|}
name|dns_transaction
struct|;
struct|struct
block|{
name|unsigned
name|rrclass
decl_stmt|;
name|unsigned
name|rrtype
decl_stmt|;
name|struct
name|expression
modifier|*
name|rrname
decl_stmt|;
name|struct
name|expression
modifier|*
name|rrdata
decl_stmt|;
name|struct
name|expression
modifier|*
name|ttl
decl_stmt|;
block|}
name|ns_add
struct|;
struct|struct
block|{
name|unsigned
name|rrclass
decl_stmt|;
name|unsigned
name|rrtype
decl_stmt|;
name|struct
name|expression
modifier|*
name|rrname
decl_stmt|;
name|struct
name|expression
modifier|*
name|rrdata
decl_stmt|;
block|}
name|ns_delete
struct|,
name|ns_exists
struct|,
name|ns_not_exists
struct|;
name|char
modifier|*
name|variable
decl_stmt|;
struct|struct
block|{
name|struct
name|expression
modifier|*
name|val
decl_stmt|;
name|struct
name|expression
modifier|*
name|next
decl_stmt|;
block|}
name|arg
struct|;
struct|struct
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|expression
modifier|*
name|arglist
decl_stmt|;
block|}
name|funcall
struct|;
name|struct
name|fundef
modifier|*
name|func
decl_stmt|;
block|}
name|data
union|;
name|int
name|flags
decl_stmt|;
define|#
directive|define
name|EXPR_EPHEMERAL
value|1
block|}
struct|;
end_struct

begin_comment
comment|/* DNS host entry structure... */
end_comment

begin_struct
struct|struct
name|dns_host_entry
block|{
name|int
name|refcnt
decl_stmt|;
name|TIME
name|timeout
decl_stmt|;
name|struct
name|data_string
name|data
decl_stmt|;
name|char
name|hostname
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|option_cache
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward */
end_comment

begin_struct_decl
struct_decl|struct
name|packet
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward */
end_comment

begin_struct_decl
struct_decl|struct
name|option_state
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward */
end_comment

begin_struct_decl
struct_decl|struct
name|decoded_option_state
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward */
end_comment

begin_struct_decl
struct_decl|struct
name|lease
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward */
end_comment

begin_struct_decl
struct_decl|struct
name|client_state
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward */
end_comment

begin_struct
struct|struct
name|universe
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|struct
name|option_cache
modifier|*
function_decl|(
modifier|*
name|lookup_func
function_decl|)
parameter_list|(
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|save_func
function_decl|)
parameter_list|(
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_cache
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|foreach
function_decl|)
parameter_list|(
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|option_cache
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|delete_func
function_decl|)
parameter_list|(
name|struct
name|universe
modifier|*
name|universe
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|option_state_dereference
function_decl|)
parameter_list|(
name|struct
name|universe
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|decode
function_decl|)
parameter_list|(
name|struct
name|option_state
modifier|*
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|encapsulate
function_decl|)
parameter_list|(
name|struct
name|data_string
modifier|*
parameter_list|,
name|struct
name|packet
modifier|*
parameter_list|,
name|struct
name|lease
modifier|*
parameter_list|,
name|struct
name|client_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|option_state
modifier|*
parameter_list|,
name|struct
name|binding_scope
modifier|*
modifier|*
parameter_list|,
name|struct
name|universe
modifier|*
parameter_list|)
function_decl|;
name|void
argument_list|(
argument|*store_tag
argument_list|)
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*store_length
argument_list|)
name|PROTO
argument_list|(
operator|(
name|unsigned
name|char
operator|*
operator|,
name|u_int32_t
operator|)
argument_list|)
expr_stmt|;
name|int
name|tag_size
decl_stmt|,
name|length_size
decl_stmt|;
name|option_hash_t
modifier|*
name|hash
decl_stmt|;
name|struct
name|option
modifier|*
name|options
index|[
literal|256
index|]
decl_stmt|;
name|struct
name|option
modifier|*
name|enc_opt
decl_stmt|;
name|int
name|index
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|option
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
specifier|const
name|char
modifier|*
name|format
decl_stmt|;
name|struct
name|universe
modifier|*
name|universe
decl_stmt|;
name|unsigned
name|code
decl_stmt|;
block|}
struct|;
end_struct

end_unit

