begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Sparse Arrays for Objective C dispatch tables    Copyright (C) 1993, 1995, 1996, 2004 Free Software Foundation, Inc.    Contributed by Kresten Krab Thorup.  This file is part of GCC.  GCC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GCC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GCC; see the file COPYING.  If not, write to the Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_comment
comment|/* As a special exception, if you link this library with files    compiled with GCC to produce an executable, this does not cause    the resulting executable to be covered by the GNU General Public License.    This exception does not however invalidate any other reasons why    the executable file might be covered by the GNU General Public License.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__sarray_INCLUDE_GNU
end_ifndef

begin_define
define|#
directive|define
name|__sarray_INCLUDE_GNU
end_define

begin_include
include|#
directive|include
file|"thr.h"
end_include

begin_define
define|#
directive|define
name|OBJC_SPARSE2
end_define

begin_comment
comment|/* 2-level sparse array */
end_comment

begin_comment
comment|/* #define OBJC_SPARSE3 */
end_comment

begin_comment
comment|/* 3-level sparse array */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|OBJC_SPARSE2
end_ifdef

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|__objc_sparse2_id
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
end_ifdef

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|__objc_sparse3_id
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<assert.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* __cplusplus */
specifier|extern
name|int
name|nbuckets
decl_stmt|;
comment|/* for stats */
specifier|extern
name|int
name|nindices
decl_stmt|;
specifier|extern
name|int
name|narrays
decl_stmt|;
specifier|extern
name|int
name|idxsize
decl_stmt|;
comment|/* An unsigned integer of same size as a pointer */
define|#
directive|define
name|SIZET_BITS
value|(sizeof(size_t)*8)
if|#
directive|if
name|defined
argument_list|(
name|__sparc__
argument_list|)
operator|||
name|defined
argument_list|(
name|OBJC_SPARSE2
argument_list|)
define|#
directive|define
name|PRECOMPUTE_SELECTORS
endif|#
directive|endif
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
comment|/* Buckets are 8 words each */
define|#
directive|define
name|BUCKET_BITS
value|3
define|#
directive|define
name|BUCKET_SIZE
value|(1<<BUCKET_BITS)
define|#
directive|define
name|BUCKET_MASK
value|(BUCKET_SIZE-1)
comment|/* Indices are 16 words each */
define|#
directive|define
name|INDEX_BITS
value|4
define|#
directive|define
name|INDEX_SIZE
value|(1<<INDEX_BITS)
define|#
directive|define
name|INDEX_MASK
value|(INDEX_SIZE-1)
define|#
directive|define
name|INDEX_CAPACITY
value|(BUCKET_SIZE*INDEX_SIZE)
else|#
directive|else
comment|/* OBJC_SPARSE2 */
comment|/* Buckets are 32 words each */
define|#
directive|define
name|BUCKET_BITS
value|5
define|#
directive|define
name|BUCKET_SIZE
value|(1<<BUCKET_BITS)
define|#
directive|define
name|BUCKET_MASK
value|(BUCKET_SIZE-1)
endif|#
directive|endif
comment|/* OBJC_SPARSE2 */
typedef|typedef
name|size_t
name|sidx
typedef|;
ifdef|#
directive|ifdef
name|PRECOMPUTE_SELECTORS
struct|struct
name|soffset
block|{
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
name|unsigned
name|int
name|unused
range|:
name|SIZET_BITS
operator|/
literal|4
decl_stmt|;
name|unsigned
name|int
name|eoffset
range|:
name|SIZET_BITS
operator|/
literal|4
decl_stmt|;
name|unsigned
name|int
name|boffset
range|:
name|SIZET_BITS
operator|/
literal|4
decl_stmt|;
name|unsigned
name|int
name|ioffset
range|:
name|SIZET_BITS
operator|/
literal|4
decl_stmt|;
else|#
directive|else
comment|/* OBJC_SPARSE2 */
ifdef|#
directive|ifdef
name|__sparc__
name|unsigned
name|long
name|boffset
range|:
operator|(
name|SIZET_BITS
operator|-
literal|2
operator|)
operator|-
name|BUCKET_BITS
decl_stmt|;
name|unsigned
name|int
name|eoffset
range|:
name|BUCKET_BITS
decl_stmt|;
name|unsigned
name|int
name|unused
range|:
literal|2
decl_stmt|;
else|#
directive|else
name|unsigned
name|int
name|boffset
range|:
name|SIZET_BITS
operator|/
literal|2
decl_stmt|;
name|unsigned
name|int
name|eoffset
range|:
name|SIZET_BITS
operator|/
literal|2
decl_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|/* OBJC_SPARSE2 */
block|}
struct|;
union|union
name|sofftype
block|{
name|struct
name|soffset
name|off
decl_stmt|;
name|sidx
name|idx
decl_stmt|;
block|}
union|;
endif|#
directive|endif
comment|/* not PRECOMPUTE_SELECTORS */
union|union
name|sversion
block|{
name|int
name|version
decl_stmt|;
name|void
modifier|*
name|next_free
decl_stmt|;
block|}
union|;
struct|struct
name|sbucket
block|{
name|void
modifier|*
name|elems
index|[
name|BUCKET_SIZE
index|]
decl_stmt|;
comment|/* elements stored in array */
name|union
name|sversion
name|version
decl_stmt|;
comment|/* used for copy-on-write */
block|}
struct|;
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
struct|struct
name|sindex
block|{
name|struct
name|sbucket
modifier|*
name|buckets
index|[
name|INDEX_SIZE
index|]
decl_stmt|;
name|union
name|sversion
name|version
decl_stmt|;
comment|/* used for copy-on-write */
block|}
struct|;
endif|#
directive|endif
comment|/* OBJC_SPARSE3 */
struct|struct
name|sarray
block|{
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
name|struct
name|sindex
modifier|*
modifier|*
name|indices
decl_stmt|;
name|struct
name|sindex
modifier|*
name|empty_index
decl_stmt|;
else|#
directive|else
comment|/* OBJC_SPARSE2 */
name|struct
name|sbucket
modifier|*
modifier|*
name|buckets
decl_stmt|;
endif|#
directive|endif
comment|/* OBJC_SPARSE2 */
name|struct
name|sbucket
modifier|*
name|empty_bucket
decl_stmt|;
name|union
name|sversion
name|version
decl_stmt|;
comment|/* used for copy-on-write */
name|short
name|ref_count
decl_stmt|;
name|struct
name|sarray
modifier|*
name|is_copy_of
decl_stmt|;
name|size_t
name|capacity
decl_stmt|;
block|}
struct|;
name|struct
name|sarray
modifier|*
name|sarray_new
parameter_list|(
name|int
parameter_list|,
name|void
modifier|*
name|default_element
parameter_list|)
function_decl|;
name|void
name|sarray_free
parameter_list|(
name|struct
name|sarray
modifier|*
parameter_list|)
function_decl|;
name|struct
name|sarray
modifier|*
name|sarray_lazy_copy
parameter_list|(
name|struct
name|sarray
modifier|*
parameter_list|)
function_decl|;
name|void
name|sarray_realloc
parameter_list|(
name|struct
name|sarray
modifier|*
parameter_list|,
name|int
name|new_size
parameter_list|)
function_decl|;
name|void
name|sarray_at_put
parameter_list|(
name|struct
name|sarray
modifier|*
parameter_list|,
name|sidx
name|indx
parameter_list|,
name|void
modifier|*
name|elem
parameter_list|)
function_decl|;
name|void
name|sarray_at_put_safe
parameter_list|(
name|struct
name|sarray
modifier|*
parameter_list|,
name|sidx
name|indx
parameter_list|,
name|void
modifier|*
name|elem
parameter_list|)
function_decl|;
name|struct
name|sarray
modifier|*
name|sarray_hard_copy
parameter_list|(
name|struct
name|sarray
modifier|*
parameter_list|)
function_decl|;
comment|/* ... like the name? */
name|void
name|sarray_remove_garbage
parameter_list|(
name|void
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|PRECOMPUTE_SELECTORS
comment|/* Transform soffset values to ints and vica verca */
specifier|static
specifier|inline
name|unsigned
name|int
name|soffset_decode
parameter_list|(
name|sidx
name|indx
parameter_list|)
block|{
name|union
name|sofftype
name|x
decl_stmt|;
name|x
operator|.
name|idx
operator|=
name|indx
expr_stmt|;
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
return|return
name|x
operator|.
name|off
operator|.
name|eoffset
operator|+
operator|(
name|x
operator|.
name|off
operator|.
name|boffset
operator|*
name|BUCKET_SIZE
operator|)
operator|+
operator|(
name|x
operator|.
name|off
operator|.
name|ioffset
operator|*
name|INDEX_CAPACITY
operator|)
return|;
else|#
directive|else
comment|/* OBJC_SPARSE2 */
return|return
name|x
operator|.
name|off
operator|.
name|eoffset
operator|+
operator|(
name|x
operator|.
name|off
operator|.
name|boffset
operator|*
name|BUCKET_SIZE
operator|)
return|;
endif|#
directive|endif
comment|/* OBJC_SPARSE2 */
block|}
specifier|static
specifier|inline
name|sidx
name|soffset_encode
parameter_list|(
name|size_t
name|offset
parameter_list|)
block|{
name|union
name|sofftype
name|x
decl_stmt|;
name|x
operator|.
name|off
operator|.
name|eoffset
operator|=
name|offset
operator|%
name|BUCKET_SIZE
expr_stmt|;
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
name|x
operator|.
name|off
operator|.
name|boffset
operator|=
operator|(
name|offset
operator|/
name|BUCKET_SIZE
operator|)
operator|%
name|INDEX_SIZE
expr_stmt|;
name|x
operator|.
name|off
operator|.
name|ioffset
operator|=
name|offset
operator|/
name|INDEX_CAPACITY
expr_stmt|;
else|#
directive|else
comment|/* OBJC_SPARSE2 */
name|x
operator|.
name|off
operator|.
name|boffset
operator|=
name|offset
operator|/
name|BUCKET_SIZE
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|sidx
operator|)
name|x
operator|.
name|idx
return|;
block|}
else|#
directive|else
comment|/* not PRECOMPUTE_SELECTORS */
specifier|static
specifier|inline
name|size_t
name|soffset_decode
parameter_list|(
name|sidx
name|indx
parameter_list|)
block|{
return|return
name|indx
return|;
block|}
specifier|static
specifier|inline
name|sidx
name|soffset_encode
parameter_list|(
name|size_t
name|offset
parameter_list|)
block|{
return|return
name|offset
return|;
block|}
endif|#
directive|endif
comment|/* not PRECOMPUTE_SELECTORS */
comment|/* Get element from the Sparse array `array' at offset `indx' */
specifier|static
specifier|inline
name|void
modifier|*
name|sarray_get
parameter_list|(
name|struct
name|sarray
modifier|*
name|array
parameter_list|,
name|sidx
name|indx
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|PRECOMPUTE_SELECTORS
name|union
name|sofftype
name|x
decl_stmt|;
name|x
operator|.
name|idx
operator|=
name|indx
expr_stmt|;
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
return|return
name|array
operator|->
name|indices
index|[
name|x
operator|.
name|off
operator|.
name|ioffset
index|]
operator|->
name|buckets
index|[
name|x
operator|.
name|off
operator|.
name|boffset
index|]
operator|->
name|elems
index|[
name|x
operator|.
name|off
operator|.
name|eoffset
index|]
return|;
else|#
directive|else
comment|/* OBJC_SPARSE2 */
return|return
name|array
operator|->
name|buckets
index|[
name|x
operator|.
name|off
operator|.
name|boffset
index|]
operator|->
name|elems
index|[
name|x
operator|.
name|off
operator|.
name|eoffset
index|]
return|;
endif|#
directive|endif
comment|/* OBJC_SPARSE2 */
else|#
directive|else
comment|/* not PRECOMPUTE_SELECTORS */
ifdef|#
directive|ifdef
name|OBJC_SPARSE3
return|return
name|array
operator|->
name|indices
index|[
name|indx
operator|/
name|INDEX_CAPACITY
index|]
operator|->
name|buckets
index|[
operator|(
name|indx
operator|/
name|BUCKET_SIZE
operator|)
operator|%
name|INDEX_SIZE
index|]
operator|->
name|elems
index|[
name|indx
operator|%
name|BUCKET_SIZE
index|]
return|;
else|#
directive|else
comment|/* OBJC_SPARSE2 */
return|return
name|array
operator|->
name|buckets
index|[
name|indx
operator|/
name|BUCKET_SIZE
index|]
operator|->
name|elems
index|[
name|indx
operator|%
name|BUCKET_SIZE
index|]
return|;
endif|#
directive|endif
comment|/* not OBJC_SPARSE3 */
endif|#
directive|endif
comment|/* not PRECOMPUTE_SELECTORS */
block|}
specifier|static
specifier|inline
name|void
modifier|*
name|sarray_get_safe
parameter_list|(
name|struct
name|sarray
modifier|*
name|array
parameter_list|,
name|sidx
name|indx
parameter_list|)
block|{
if|if
condition|(
name|soffset_decode
argument_list|(
name|indx
argument_list|)
operator|<
name|array
operator|->
name|capacity
condition|)
return|return
name|sarray_get
argument_list|(
name|array
argument_list|,
name|indx
argument_list|)
return|;
else|else
return|return
operator|(
name|array
operator|->
name|empty_bucket
operator|->
name|elems
index|[
literal|0
index|]
operator|)
return|;
block|}
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __cplusplus */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __sarray_INCLUDE_GNU */
end_comment

end_unit

