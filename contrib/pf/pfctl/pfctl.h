begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$OpenBSD: pfctl.h,v 1.42 2007/12/05 12:01:47 chl Exp $ */
end_comment

begin_comment
comment|/*  * Copyright (c) 2001 Daniel Hartmeier  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *    - Redistributions of source code must retain the above copyright  *      notice, this list of conditions and the following disclaimer.  *    - Redistributions in binary form must reproduce the above  *      copyright notice, this list of conditions and the following  *      disclaimer in the documentation and/or other materials provided  *      with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE  * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PFCTL_H_
end_ifndef

begin_define
define|#
directive|define
name|_PFCTL_H_
end_define

begin_enum
enum|enum
name|pfctl_show
block|{
name|PFCTL_SHOW_RULES
block|,
name|PFCTL_SHOW_LABELS
block|,
name|PFCTL_SHOW_NOTHING
block|}
enum|;
end_enum

begin_enum
enum|enum
block|{
name|PFRB_TABLES
init|=
literal|1
block|,
name|PFRB_TSTATS
block|,
name|PFRB_ADDRS
block|,
name|PFRB_ASTATS
block|,
name|PFRB_IFACES
block|,
name|PFRB_TRANS
block|,
name|PFRB_MAX
block|}
enum|;
end_enum

begin_struct
struct|struct
name|pfr_buffer
block|{
name|int
name|pfrb_type
decl_stmt|;
comment|/* type of content, see enum above */
name|int
name|pfrb_size
decl_stmt|;
comment|/* number of objects in buffer */
name|int
name|pfrb_msize
decl_stmt|;
comment|/* maximum number of objects in buffer */
name|void
modifier|*
name|pfrb_caddr
decl_stmt|;
comment|/* malloc'ated memory area */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PFRB_FOREACH
parameter_list|(
name|var
parameter_list|,
name|buf
parameter_list|)
define|\
value|for ((var) = pfr_buf_next((buf), NULL);		\ 	    (var) != NULL;				\ 	    (var) = pfr_buf_next((buf), (var)))
end_define

begin_function_decl
name|int
name|pfr_get_fd
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_clr_tables
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_add_tables
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_del_tables
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_get_tables
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_get_tstats
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_tstats
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_clr_tstats
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_clr_addrs
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_add_addrs
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_addr
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_del_addrs
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_addr
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_set_addrs
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_addr
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_get_addrs
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_addr
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_get_astats
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_astats
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_tst_addrs
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_addr
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_ina_define
parameter_list|(
name|struct
name|pfr_table
modifier|*
parameter_list|,
name|struct
name|pfr_addr
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfr_buf_clear
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_buf_add
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|pfr_buf_next
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_buf_grow
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfr_buf_load
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|pfr_strerror
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfi_get_ifaces
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|pfi_kif
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfi_clr_istats
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfctl_print_title
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_clear_tables
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_show_tables
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_command_tables
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
index|[]
parameter_list|,
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_show_altq
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|warn_namespace_collision
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_show_ifaces
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|FILE
modifier|*
name|pfctl_fopen
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_decl_stmt
specifier|extern
name|int
name|altqsupport
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|dummynetsupport
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|HTONL
parameter_list|(
name|x
parameter_list|)
value|(x) = htonl((__uint32_t)(x))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DEFAULT_PRIORITY
end_ifndef

begin_define
define|#
directive|define
name|DEFAULT_PRIORITY
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|DEFAULT_QLIMIT
end_ifndef

begin_define
define|#
directive|define
name|DEFAULT_QLIMIT
value|50
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * generalized service curve used for admission control  */
end_comment

begin_struct
struct|struct
name|segment
block|{
name|LIST_ENTRY
argument_list|(
argument|segment
argument_list|)
name|_next
expr_stmt|;
name|double
name|x
decl_stmt|,
name|y
decl_stmt|,
name|d
decl_stmt|,
name|m
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|int
name|loadopt
decl_stmt|;
end_decl_stmt

begin_function_decl
name|int
name|check_commit_altq
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfaltq_store
parameter_list|(
name|struct
name|pf_altq
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|pf_altq
modifier|*
name|pfaltq_lookup
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|rate2str
parameter_list|(
name|double
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_addr
parameter_list|(
name|struct
name|pf_addr_wrap
modifier|*
parameter_list|,
name|sa_family_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_host
parameter_list|(
name|struct
name|pf_addr
modifier|*
parameter_list|,
name|u_int16_t
name|p
parameter_list|,
name|sa_family_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_seq
parameter_list|(
name|struct
name|pfsync_state_peer
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_state
parameter_list|(
name|struct
name|pfsync_state
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|unmask
parameter_list|(
name|struct
name|pf_addr
modifier|*
parameter_list|,
name|sa_family_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_cmdline_symset
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_add_trans
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u_int32_t
name|pfctl_get_ticket
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_trans
parameter_list|(
name|int
parameter_list|,
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|u_long
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _PFCTL_H_ */
end_comment

end_unit

