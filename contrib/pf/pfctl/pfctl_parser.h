begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*	$OpenBSD: pfctl_parser.h,v 1.86 2006/10/31 23:46:25 mcbride Exp $ */
end_comment

begin_comment
comment|/*  * Copyright (c) 2001 Daniel Hartmeier  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  *    - Redistributions of source code must retain the above copyright  *      notice, this list of conditions and the following disclaimer.  *    - Redistributions in binary form must reproduce the above  *      copyright notice, this list of conditions and the following  *      disclaimer in the documentation and/or other materials provided  *      with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT  * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS  * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE  * COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,  * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN  * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE  * POSSIBILITY OF SUCH DAMAGE.  *  * $FreeBSD$  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_PFCTL_PARSER_H_
end_ifndef

begin_define
define|#
directive|define
name|_PFCTL_PARSER_H_
end_define

begin_define
define|#
directive|define
name|PF_OSFP_FILE
value|"/etc/pf.os"
end_define

begin_define
define|#
directive|define
name|PF_OPT_DISABLE
value|0x0001
end_define

begin_define
define|#
directive|define
name|PF_OPT_ENABLE
value|0x0002
end_define

begin_define
define|#
directive|define
name|PF_OPT_VERBOSE
value|0x0004
end_define

begin_define
define|#
directive|define
name|PF_OPT_NOACTION
value|0x0008
end_define

begin_define
define|#
directive|define
name|PF_OPT_QUIET
value|0x0010
end_define

begin_define
define|#
directive|define
name|PF_OPT_CLRRULECTRS
value|0x0020
end_define

begin_define
define|#
directive|define
name|PF_OPT_USEDNS
value|0x0040
end_define

begin_define
define|#
directive|define
name|PF_OPT_VERBOSE2
value|0x0080
end_define

begin_define
define|#
directive|define
name|PF_OPT_DUMMYACTION
value|0x0100
end_define

begin_define
define|#
directive|define
name|PF_OPT_DEBUG
value|0x0200
end_define

begin_define
define|#
directive|define
name|PF_OPT_SHOWALL
value|0x0400
end_define

begin_define
define|#
directive|define
name|PF_OPT_OPTIMIZE
value|0x0800
end_define

begin_define
define|#
directive|define
name|PF_OPT_NUMERIC
value|0x1000
end_define

begin_define
define|#
directive|define
name|PF_OPT_MERGE
value|0x2000
end_define

begin_define
define|#
directive|define
name|PF_OPT_RECURSE
value|0x4000
end_define

begin_define
define|#
directive|define
name|PF_TH_ALL
value|0xFF
end_define

begin_define
define|#
directive|define
name|PF_NAT_PROXY_PORT_LOW
value|50001
end_define

begin_define
define|#
directive|define
name|PF_NAT_PROXY_PORT_HIGH
value|65535
end_define

begin_define
define|#
directive|define
name|PF_OPTIMIZE_BASIC
value|0x0001
end_define

begin_define
define|#
directive|define
name|PF_OPTIMIZE_PROFILE
value|0x0002
end_define

begin_define
define|#
directive|define
name|FCNT_NAMES
value|{ \ 	"searches", \ 	"inserts", \ 	"removals", \ 	NULL \ }
end_define

begin_struct_decl
struct_decl|struct
name|pfr_buffer
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward definition */
end_comment

begin_struct
struct|struct
name|pfctl
block|{
name|int
name|dev
decl_stmt|;
name|int
name|opts
decl_stmt|;
name|int
name|optimize
decl_stmt|;
name|int
name|loadopt
decl_stmt|;
name|int
name|asd
decl_stmt|;
comment|/* anchor stack depth */
name|int
name|bn
decl_stmt|;
comment|/* brace number */
name|int
name|brace
decl_stmt|;
name|int
name|tdirty
decl_stmt|;
comment|/* kernel dirty */
define|#
directive|define
name|PFCTL_ANCHOR_STACK_DEPTH
value|64
name|struct
name|pf_anchor
modifier|*
name|astack
index|[
name|PFCTL_ANCHOR_STACK_DEPTH
index|]
decl_stmt|;
name|struct
name|pfioc_pooladdr
name|paddr
decl_stmt|;
name|struct
name|pfioc_altq
modifier|*
name|paltq
decl_stmt|;
name|struct
name|pfioc_queue
modifier|*
name|pqueue
decl_stmt|;
name|struct
name|pfr_buffer
modifier|*
name|trans
decl_stmt|;
name|struct
name|pf_anchor
modifier|*
name|anchor
decl_stmt|,
modifier|*
name|alast
decl_stmt|;
specifier|const
name|char
modifier|*
name|ruleset
decl_stmt|;
comment|/* 'set foo' options */
name|u_int32_t
name|timeout
index|[
name|PFTM_MAX
index|]
decl_stmt|;
name|u_int32_t
name|limit
index|[
name|PF_LIMIT_MAX
index|]
decl_stmt|;
name|u_int32_t
name|debug
decl_stmt|;
name|u_int32_t
name|hostid
decl_stmt|;
name|char
modifier|*
name|ifname
decl_stmt|;
name|u_int8_t
name|timeout_set
index|[
name|PFTM_MAX
index|]
decl_stmt|;
name|u_int8_t
name|limit_set
index|[
name|PF_LIMIT_MAX
index|]
decl_stmt|;
name|u_int8_t
name|debug_set
decl_stmt|;
name|u_int8_t
name|hostid_set
decl_stmt|;
name|u_int8_t
name|ifname_set
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|node_if
block|{
name|char
name|ifname
index|[
name|IFNAMSIZ
index|]
decl_stmt|;
name|u_int8_t
name|not
decl_stmt|;
name|u_int8_t
name|dynamic
decl_stmt|;
comment|/* antispoof */
name|u_int
name|ifa_flags
decl_stmt|;
name|struct
name|node_if
modifier|*
name|next
decl_stmt|;
name|struct
name|node_if
modifier|*
name|tail
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|node_host
block|{
name|struct
name|pf_addr_wrap
name|addr
decl_stmt|;
name|struct
name|pf_addr
name|bcast
decl_stmt|;
name|struct
name|pf_addr
name|peer
decl_stmt|;
name|sa_family_t
name|af
decl_stmt|;
name|u_int8_t
name|not
decl_stmt|;
name|u_int32_t
name|ifindex
decl_stmt|;
comment|/* link-local IPv6 addrs */
name|char
modifier|*
name|ifname
decl_stmt|;
name|u_int
name|ifa_flags
decl_stmt|;
name|struct
name|node_host
modifier|*
name|next
decl_stmt|;
name|struct
name|node_host
modifier|*
name|tail
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|node_os
block|{
name|char
modifier|*
name|os
decl_stmt|;
name|pf_osfp_t
name|fingerprint
decl_stmt|;
name|struct
name|node_os
modifier|*
name|next
decl_stmt|;
name|struct
name|node_os
modifier|*
name|tail
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|node_queue_bw
block|{
name|u_int32_t
name|bw_absolute
decl_stmt|;
name|u_int16_t
name|bw_percent
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|node_hfsc_sc
block|{
name|struct
name|node_queue_bw
name|m1
decl_stmt|;
comment|/* slope of 1st segment; bps */
name|u_int
name|d
decl_stmt|;
comment|/* x-projection of m1; msec */
name|struct
name|node_queue_bw
name|m2
decl_stmt|;
comment|/* slope of 2nd segment; bps */
name|u_int8_t
name|used
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|node_hfsc_opts
block|{
name|struct
name|node_hfsc_sc
name|realtime
decl_stmt|;
name|struct
name|node_hfsc_sc
name|linkshare
decl_stmt|;
name|struct
name|node_hfsc_sc
name|upperlimit
decl_stmt|;
name|int
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|node_queue_opt
block|{
name|int
name|qtype
decl_stmt|;
union|union
block|{
name|struct
name|cbq_opts
name|cbq_opts
decl_stmt|;
name|struct
name|priq_opts
name|priq_opts
decl_stmt|;
name|struct
name|node_hfsc_opts
name|hfsc_opts
decl_stmt|;
block|}
name|data
union|;
block|}
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_comment
comment|/*  * XXX  * Absolutely this is not correct location to define this.  * Should we use an another sperate header file?  */
end_comment

begin_define
define|#
directive|define
name|SIMPLEQ_HEAD
value|STAILQ_HEAD
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_HEAD_INITIALIZER
value|STAILQ_HEAD_INITIALIZER
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_ENTRY
value|STAILQ_ENTRY
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_FIRST
value|STAILQ_FIRST
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_END
parameter_list|(
name|head
parameter_list|)
value|NULL
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_EMPTY
value|STAILQ_EMPTY
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_NEXT
value|STAILQ_NEXT
end_define

begin_comment
comment|/*#define SIMPLEQ_FOREACH		STAILQ_FOREACH*/
end_comment

begin_define
define|#
directive|define
name|SIMPLEQ_FOREACH
parameter_list|(
name|var
parameter_list|,
name|head
parameter_list|,
name|field
parameter_list|)
define|\
value|for((var) = SIMPLEQ_FIRST(head);		\ 	(var) != SIMPLEQ_END(head);		\ 	(var) = SIMPLEQ_NEXT(var, field))
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_INIT
value|STAILQ_INIT
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_INSERT_HEAD
value|STAILQ_INSERT_HEAD
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_INSERT_TAIL
value|STAILQ_INSERT_TAIL
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_INSERT_AFTER
value|STAILQ_INSERT_AFTER
end_define

begin_define
define|#
directive|define
name|SIMPLEQ_REMOVE_HEAD
value|STAILQ_REMOVE_HEAD
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|SIMPLEQ_HEAD
argument_list|(
name|node_tinithead
argument_list|,
name|node_tinit
argument_list|)
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|node_tinit
block|{
comment|/* table initializer */
name|SIMPLEQ_ENTRY
argument_list|(
argument|node_tinit
argument_list|)
name|entries
expr_stmt|;
name|struct
name|node_host
modifier|*
name|host
decl_stmt|;
name|char
modifier|*
name|file
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* optimizer created tables */
end_comment

begin_struct
struct|struct
name|pf_opt_tbl
block|{
name|char
name|pt_name
index|[
name|PF_TABLE_NAME_SIZE
index|]
decl_stmt|;
name|int
name|pt_rulecount
decl_stmt|;
name|int
name|pt_generated
decl_stmt|;
name|struct
name|node_tinithead
name|pt_nodes
decl_stmt|;
name|struct
name|pfr_buffer
modifier|*
name|pt_buf
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PF_OPT_TABLE_PREFIX
value|"__automatic_"
end_define

begin_comment
comment|/* optimizer pf_rule container */
end_comment

begin_struct
struct|struct
name|pf_opt_rule
block|{
name|struct
name|pf_rule
name|por_rule
decl_stmt|;
name|struct
name|pf_opt_tbl
modifier|*
name|por_src_tbl
decl_stmt|;
name|struct
name|pf_opt_tbl
modifier|*
name|por_dst_tbl
decl_stmt|;
name|u_int64_t
name|por_profile_count
decl_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|pf_opt_rule
argument_list|)
name|por_entry
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|pf_opt_rule
argument_list|)
name|por_skip_entry
index|[
name|PF_SKIP_COUNT
index|]
expr_stmt|;
block|}
struct|;
end_struct

begin_expr_stmt
name|TAILQ_HEAD
argument_list|(
name|pf_opt_queue
argument_list|,
name|pf_opt_rule
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|int
name|pfctl_rules
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|FILE
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|char
modifier|*
parameter_list|,
name|struct
name|pfr_buffer
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_optimize_ruleset
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|struct
name|pf_ruleset
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_add_rule
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|struct
name|pf_rule
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_add_altq
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|struct
name|pf_altq
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_add_pool
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|struct
name|pf_pool
modifier|*
parameter_list|,
name|sa_family_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfctl_move_pool
parameter_list|(
name|struct
name|pf_pool
modifier|*
parameter_list|,
name|struct
name|pf_pool
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfctl_clear_pool
parameter_list|(
name|struct
name|pf_pool
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_set_timeout
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_set_optimization
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_set_limit
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_set_logif
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_set_hostid
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_set_debug
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_set_interface_flags
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|parse_rules
parameter_list|(
name|FILE
modifier|*
parameter_list|,
name|struct
name|pfctl
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|parse_flags
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_load_anchors
parameter_list|(
name|int
parameter_list|,
name|struct
name|pfctl
modifier|*
parameter_list|,
name|struct
name|pfr_buffer
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_pool
parameter_list|(
name|struct
name|pf_pool
modifier|*
parameter_list|,
name|u_int16_t
parameter_list|,
name|u_int16_t
parameter_list|,
name|sa_family_t
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_src_node
parameter_list|(
name|struct
name|pf_src_node
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_rule
parameter_list|(
name|struct
name|pf_rule
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_tabledef
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|struct
name|node_tinithead
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_status
parameter_list|(
name|struct
name|pf_status
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eval_pfaltq
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|struct
name|pf_altq
modifier|*
parameter_list|,
name|struct
name|node_queue_bw
modifier|*
parameter_list|,
name|struct
name|node_queue_opt
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eval_pfqueue
parameter_list|(
name|struct
name|pfctl
modifier|*
parameter_list|,
name|struct
name|pf_altq
modifier|*
parameter_list|,
name|struct
name|node_queue_bw
modifier|*
parameter_list|,
name|struct
name|node_queue_opt
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_altq
parameter_list|(
specifier|const
name|struct
name|pf_altq
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|node_queue_bw
modifier|*
parameter_list|,
name|struct
name|node_queue_opt
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|print_queue
parameter_list|(
specifier|const
name|struct
name|pf_altq
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|struct
name|node_queue_bw
modifier|*
parameter_list|,
name|int
parameter_list|,
name|struct
name|node_queue_opt
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_define_table
parameter_list|(
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|u_int32_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfctl_clear_fingerprints
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_file_fingerprints
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|pf_osfp_t
name|pfctl_get_fingerprint
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|pfctl_load_fingerprints
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|char
modifier|*
name|pfctl_lookup_fingerprint
parameter_list|(
name|pf_osfp_t
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pfctl_show_fingerprints
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|icmptypeent
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|u_int8_t
name|type
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|icmpcodeent
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|u_int8_t
name|type
decl_stmt|;
name|u_int8_t
name|code
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|const
name|struct
name|icmptypeent
modifier|*
name|geticmptypebynumber
parameter_list|(
name|u_int8_t
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|icmptypeent
modifier|*
name|geticmptypebyname
parameter_list|(
name|char
modifier|*
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|icmpcodeent
modifier|*
name|geticmpcodebynumber
parameter_list|(
name|u_int8_t
parameter_list|,
name|u_int8_t
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|icmpcodeent
modifier|*
name|geticmpcodebyname
parameter_list|(
name|u_long
parameter_list|,
name|char
modifier|*
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|pf_timeout
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|timeout
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PFCTL_FLAG_FILTER
value|0x02
end_define

begin_define
define|#
directive|define
name|PFCTL_FLAG_NAT
value|0x04
end_define

begin_define
define|#
directive|define
name|PFCTL_FLAG_OPTION
value|0x08
end_define

begin_define
define|#
directive|define
name|PFCTL_FLAG_ALTQ
value|0x10
end_define

begin_define
define|#
directive|define
name|PFCTL_FLAG_TABLE
value|0x20
end_define

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|pf_timeout
name|pf_timeouts
index|[]
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|set_ipmask
parameter_list|(
name|struct
name|node_host
modifier|*
parameter_list|,
name|u_int8_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|check_netmask
parameter_list|(
name|struct
name|node_host
modifier|*
parameter_list|,
name|sa_family_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|unmask
parameter_list|(
name|struct
name|pf_addr
modifier|*
parameter_list|,
name|sa_family_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ifa_load
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|node_host
modifier|*
name|ifa_exists
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|node_host
modifier|*
name|ifa_lookup
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|node_host
modifier|*
name|host
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|append_addr
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|append_addr_host
parameter_list|(
name|struct
name|pfr_buffer
modifier|*
parameter_list|,
name|struct
name|node_host
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _PFCTL_PARSER_H_ */
end_comment

end_unit

