begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 2000-2004 Niels Provos<provos@citi.umich.edu>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  * 3. The name of the author may not be used to endorse or promote products  *    derived from this software without specific prior written permission.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_EVENT_H_
end_ifndef

begin_define
define|#
directive|define
name|_EVENT_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<stdarg.h>
ifdef|#
directive|ifdef
name|WIN32
define|#
directive|define
name|WIN32_LEAN_AND_MEAN
include|#
directive|include
file|<windows.h>
undef|#
directive|undef
name|WIN32_LEAN_AND_MEAN
typedef|typedef
name|unsigned
name|char
name|u_char
typedef|;
typedef|typedef
name|unsigned
name|short
name|u_short
typedef|;
endif|#
directive|endif
define|#
directive|define
name|EVLIST_TIMEOUT
value|0x01
define|#
directive|define
name|EVLIST_INSERTED
value|0x02
define|#
directive|define
name|EVLIST_SIGNAL
value|0x04
define|#
directive|define
name|EVLIST_ACTIVE
value|0x08
define|#
directive|define
name|EVLIST_INTERNAL
value|0x10
define|#
directive|define
name|EVLIST_INIT
value|0x80
comment|/* EVLIST_X_ Private space: 0x1000-0xf000 */
define|#
directive|define
name|EVLIST_ALL
value|(0xf000 | 0x9f)
define|#
directive|define
name|EV_TIMEOUT
value|0x01
define|#
directive|define
name|EV_READ
value|0x02
define|#
directive|define
name|EV_WRITE
value|0x04
define|#
directive|define
name|EV_SIGNAL
value|0x08
define|#
directive|define
name|EV_PERSIST
value|0x10
comment|/* Persistant event */
comment|/* Fix so that ppl dont have to run with<sys/queue.h> */
ifndef|#
directive|ifndef
name|TAILQ_ENTRY
define|#
directive|define
name|_EVENT_DEFINED_TQENTRY
define|#
directive|define
name|TAILQ_ENTRY
parameter_list|(
name|type
parameter_list|)
define|\
value|struct {								\ 	struct type *tqe_next;
comment|/* next element */
value|\ 	struct type **tqe_prev;
comment|/* address of previous next element */
value|\ }
endif|#
directive|endif
comment|/* !TAILQ_ENTRY */
ifndef|#
directive|ifndef
name|RB_ENTRY
define|#
directive|define
name|_EVENT_DEFINED_RBENTRY
define|#
directive|define
name|RB_ENTRY
parameter_list|(
name|type
parameter_list|)
define|\
value|struct {								\ 	struct type *rbe_left;
comment|/* left element */
value|\ 	struct type *rbe_right;
comment|/* right element */
value|\ 	struct type *rbe_parent;
comment|/* parent element */
value|\ 	int rbe_color;
comment|/* node color */
value|\ }
endif|#
directive|endif
comment|/* !RB_ENTRY */
struct_decl|struct
name|event_base
struct_decl|;
struct|struct
name|event
block|{
name|TAILQ_ENTRY
argument_list|(
argument|event
argument_list|)
name|ev_next
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|event
argument_list|)
name|ev_active_next
expr_stmt|;
name|TAILQ_ENTRY
argument_list|(
argument|event
argument_list|)
name|ev_signal_next
expr_stmt|;
name|RB_ENTRY
argument_list|(
argument|event
argument_list|)
name|ev_timeout_node
expr_stmt|;
name|struct
name|event_base
modifier|*
name|ev_base
decl_stmt|;
name|int
name|ev_fd
decl_stmt|;
name|short
name|ev_events
decl_stmt|;
name|short
name|ev_ncalls
decl_stmt|;
name|short
modifier|*
name|ev_pncalls
decl_stmt|;
comment|/* Allows deletes in callback */
name|struct
name|timeval
name|ev_timeout
decl_stmt|;
name|int
name|ev_pri
decl_stmt|;
comment|/* smaller numbers are higher priority */
name|void
function_decl|(
modifier|*
name|ev_callback
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|short
parameter_list|,
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
name|void
modifier|*
name|ev_arg
decl_stmt|;
name|int
name|ev_res
decl_stmt|;
comment|/* result passed to event callback */
name|int
name|ev_flags
decl_stmt|;
block|}
struct|;
define|#
directive|define
name|EVENT_SIGNAL
parameter_list|(
name|ev
parameter_list|)
value|(int)(ev)->ev_fd
define|#
directive|define
name|EVENT_FD
parameter_list|(
name|ev
parameter_list|)
value|(int)(ev)->ev_fd
comment|/*  * Key-Value pairs.  Can be used for HTTP headers but also for  * query argument parsing.  */
struct|struct
name|evkeyval
block|{
name|TAILQ_ENTRY
argument_list|(
argument|evkeyval
argument_list|)
name|next
expr_stmt|;
name|char
modifier|*
name|key
decl_stmt|;
name|char
modifier|*
name|value
decl_stmt|;
block|}
struct|;
ifdef|#
directive|ifdef
name|_EVENT_DEFINED_TQENTRY
undef|#
directive|undef
name|TAILQ_ENTRY
struct_decl|struct
name|event_list
struct_decl|;
struct_decl|struct
name|evkeyvalq
struct_decl|;
undef|#
directive|undef
name|_EVENT_DEFINED_TQENTRY
else|#
directive|else
name|TAILQ_HEAD
argument_list|(
name|event_list
argument_list|,
name|event
argument_list|)
expr_stmt|;
name|TAILQ_HEAD
argument_list|(
name|evkeyvalq
argument_list|,
name|evkeyval
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|/* _EVENT_DEFINED_TQENTRY */
ifdef|#
directive|ifdef
name|_EVENT_DEFINED_RBENTRY
undef|#
directive|undef
name|RB_ENTRY
undef|#
directive|undef
name|_EVENT_DEFINED_RBENTRY
endif|#
directive|endif
comment|/* _EVENT_DEFINED_RBENTRY */
struct|struct
name|eventop
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|add
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|event
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|del
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|struct
name|event
modifier|*
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|recalc
function_decl|)
parameter_list|(
name|struct
name|event_base
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|dispatch
function_decl|)
parameter_list|(
name|struct
name|event_base
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|timeval
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|dealloc
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
define|#
directive|define
name|TIMEOUT_DEFAULT
value|{5, 0}
name|void
modifier|*
name|event_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|event_dispatch
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|event_base_dispatch
parameter_list|(
name|struct
name|event_base
modifier|*
parameter_list|)
function_decl|;
name|void
name|event_base_free
parameter_list|(
name|struct
name|event_base
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|_EVENT_LOG_DEBUG
value|0
define|#
directive|define
name|_EVENT_LOG_MSG
value|1
define|#
directive|define
name|_EVENT_LOG_WARN
value|2
define|#
directive|define
name|_EVENT_LOG_ERR
value|3
typedef|typedef
name|void
function_decl|(
modifier|*
name|event_log_cb
function_decl|)
parameter_list|(
name|int
name|severity
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
function_decl|;
name|void
name|event_set_log_callback
parameter_list|(
name|event_log_cb
name|cb
parameter_list|)
function_decl|;
comment|/* Associate a different event base with an event */
name|int
name|event_base_set
parameter_list|(
name|struct
name|event_base
modifier|*
parameter_list|,
name|struct
name|event
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|EVLOOP_ONCE
value|0x01
define|#
directive|define
name|EVLOOP_NONBLOCK
value|0x02
name|int
name|event_loop
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|event_base_loop
parameter_list|(
name|struct
name|event_base
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|event_loopexit
parameter_list|(
name|struct
name|timeval
modifier|*
parameter_list|)
function_decl|;
comment|/* Causes the loop to exit */
name|int
name|event_base_loopexit
parameter_list|(
name|struct
name|event_base
modifier|*
parameter_list|,
name|struct
name|timeval
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|evtimer_add
parameter_list|(
name|ev
parameter_list|,
name|tv
parameter_list|)
value|event_add(ev, tv)
define|#
directive|define
name|evtimer_set
parameter_list|(
name|ev
parameter_list|,
name|cb
parameter_list|,
name|arg
parameter_list|)
value|event_set(ev, -1, 0, cb, arg)
define|#
directive|define
name|evtimer_del
parameter_list|(
name|ev
parameter_list|)
value|event_del(ev)
define|#
directive|define
name|evtimer_pending
parameter_list|(
name|ev
parameter_list|,
name|tv
parameter_list|)
value|event_pending(ev, EV_TIMEOUT, tv)
define|#
directive|define
name|evtimer_initialized
parameter_list|(
name|ev
parameter_list|)
value|((ev)->ev_flags& EVLIST_INIT)
define|#
directive|define
name|timeout_add
parameter_list|(
name|ev
parameter_list|,
name|tv
parameter_list|)
value|event_add(ev, tv)
define|#
directive|define
name|timeout_set
parameter_list|(
name|ev
parameter_list|,
name|cb
parameter_list|,
name|arg
parameter_list|)
value|event_set(ev, -1, 0, cb, arg)
define|#
directive|define
name|timeout_del
parameter_list|(
name|ev
parameter_list|)
value|event_del(ev)
define|#
directive|define
name|timeout_pending
parameter_list|(
name|ev
parameter_list|,
name|tv
parameter_list|)
value|event_pending(ev, EV_TIMEOUT, tv)
define|#
directive|define
name|timeout_initialized
parameter_list|(
name|ev
parameter_list|)
value|((ev)->ev_flags& EVLIST_INIT)
define|#
directive|define
name|signal_add
parameter_list|(
name|ev
parameter_list|,
name|tv
parameter_list|)
value|event_add(ev, tv)
define|#
directive|define
name|signal_set
parameter_list|(
name|ev
parameter_list|,
name|x
parameter_list|,
name|cb
parameter_list|,
name|arg
parameter_list|)
define|\
value|event_set(ev, x, EV_SIGNAL|EV_PERSIST, cb, arg)
define|#
directive|define
name|signal_del
parameter_list|(
name|ev
parameter_list|)
value|event_del(ev)
define|#
directive|define
name|signal_pending
parameter_list|(
name|ev
parameter_list|,
name|tv
parameter_list|)
value|event_pending(ev, EV_SIGNAL, tv)
define|#
directive|define
name|signal_initialized
parameter_list|(
name|ev
parameter_list|)
value|((ev)->ev_flags& EVLIST_INIT)
name|void
name|event_set
parameter_list|(
name|struct
name|event
modifier|*
parameter_list|,
name|int
parameter_list|,
name|short
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|short
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|int
name|event_once
parameter_list|(
name|int
parameter_list|,
name|short
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|short
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|,
name|struct
name|timeval
modifier|*
parameter_list|)
function_decl|;
name|int
name|event_add
parameter_list|(
name|struct
name|event
modifier|*
parameter_list|,
name|struct
name|timeval
modifier|*
parameter_list|)
function_decl|;
name|int
name|event_del
parameter_list|(
name|struct
name|event
modifier|*
parameter_list|)
function_decl|;
name|void
name|event_active
parameter_list|(
name|struct
name|event
modifier|*
parameter_list|,
name|int
parameter_list|,
name|short
parameter_list|)
function_decl|;
name|int
name|event_pending
parameter_list|(
name|struct
name|event
modifier|*
parameter_list|,
name|short
parameter_list|,
name|struct
name|timeval
modifier|*
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|WIN32
define|#
directive|define
name|event_initialized
parameter_list|(
name|ev
parameter_list|)
value|((ev)->ev_flags& EVLIST_INIT&& (ev)->ev_fd != (int)INVALID_HANDLE_VALUE)
else|#
directive|else
define|#
directive|define
name|event_initialized
parameter_list|(
name|ev
parameter_list|)
value|((ev)->ev_flags& EVLIST_INIT)
endif|#
directive|endif
comment|/* Some simple debugging functions */
specifier|const
name|char
modifier|*
name|event_get_version
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|const
name|char
modifier|*
name|event_get_method
parameter_list|(
name|void
parameter_list|)
function_decl|;
comment|/* These functions deal with event priorities */
name|int
name|event_priority_init
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|int
name|event_base_priority_init
parameter_list|(
name|struct
name|event_base
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|event_priority_set
parameter_list|(
name|struct
name|event
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* These functions deal with buffering input and output */
struct|struct
name|evbuffer
block|{
name|u_char
modifier|*
name|buffer
decl_stmt|;
name|u_char
modifier|*
name|orig_buffer
decl_stmt|;
name|size_t
name|misalign
decl_stmt|;
name|size_t
name|totallen
decl_stmt|;
name|size_t
name|off
decl_stmt|;
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
modifier|*
name|cbarg
decl_stmt|;
block|}
struct|;
comment|/* Just for error reporting - use other constants otherwise */
define|#
directive|define
name|EVBUFFER_READ
value|0x01
define|#
directive|define
name|EVBUFFER_WRITE
value|0x02
define|#
directive|define
name|EVBUFFER_EOF
value|0x10
define|#
directive|define
name|EVBUFFER_ERROR
value|0x20
define|#
directive|define
name|EVBUFFER_TIMEOUT
value|0x40
struct_decl|struct
name|bufferevent
struct_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|evbuffercb
function_decl|)
parameter_list|(
name|struct
name|bufferevent
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|everrorcb
function_decl|)
parameter_list|(
name|struct
name|bufferevent
modifier|*
parameter_list|,
name|short
name|what
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
struct|struct
name|event_watermark
block|{
name|size_t
name|low
decl_stmt|;
name|size_t
name|high
decl_stmt|;
block|}
struct|;
struct|struct
name|bufferevent
block|{
name|struct
name|event
name|ev_read
decl_stmt|;
name|struct
name|event
name|ev_write
decl_stmt|;
name|struct
name|evbuffer
modifier|*
name|input
decl_stmt|;
name|struct
name|evbuffer
modifier|*
name|output
decl_stmt|;
name|struct
name|event_watermark
name|wm_read
decl_stmt|;
name|struct
name|event_watermark
name|wm_write
decl_stmt|;
name|evbuffercb
name|readcb
decl_stmt|;
name|evbuffercb
name|writecb
decl_stmt|;
name|everrorcb
name|errorcb
decl_stmt|;
name|void
modifier|*
name|cbarg
decl_stmt|;
name|int
name|timeout_read
decl_stmt|;
comment|/* in seconds */
name|int
name|timeout_write
decl_stmt|;
comment|/* in seconds */
name|short
name|enabled
decl_stmt|;
comment|/* events that are currently enabled */
block|}
struct|;
name|struct
name|bufferevent
modifier|*
name|bufferevent_new
parameter_list|(
name|int
name|fd
parameter_list|,
name|evbuffercb
name|readcb
parameter_list|,
name|evbuffercb
name|writecb
parameter_list|,
name|everrorcb
name|errorcb
parameter_list|,
name|void
modifier|*
name|cbarg
parameter_list|)
function_decl|;
name|int
name|bufferevent_base_set
parameter_list|(
name|struct
name|event_base
modifier|*
name|base
parameter_list|,
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|)
function_decl|;
name|int
name|bufferevent_priority_set
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|,
name|int
name|pri
parameter_list|)
function_decl|;
name|void
name|bufferevent_free
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|)
function_decl|;
name|int
name|bufferevent_write
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
name|int
name|bufferevent_write_buffer
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|,
name|struct
name|evbuffer
modifier|*
name|buf
parameter_list|)
function_decl|;
name|size_t
name|bufferevent_read
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
name|int
name|bufferevent_enable
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|,
name|short
name|event
parameter_list|)
function_decl|;
name|int
name|bufferevent_disable
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|,
name|short
name|event
parameter_list|)
function_decl|;
name|void
name|bufferevent_settimeout
parameter_list|(
name|struct
name|bufferevent
modifier|*
name|bufev
parameter_list|,
name|int
name|timeout_read
parameter_list|,
name|int
name|timeout_write
parameter_list|)
function_decl|;
define|#
directive|define
name|EVBUFFER_LENGTH
parameter_list|(
name|x
parameter_list|)
value|(x)->off
define|#
directive|define
name|EVBUFFER_DATA
parameter_list|(
name|x
parameter_list|)
value|(x)->buffer
define|#
directive|define
name|EVBUFFER_INPUT
parameter_list|(
name|x
parameter_list|)
value|(x)->input
define|#
directive|define
name|EVBUFFER_OUTPUT
parameter_list|(
name|x
parameter_list|)
value|(x)->output
name|struct
name|evbuffer
modifier|*
name|evbuffer_new
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|evbuffer_free
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|)
function_decl|;
name|int
name|evbuffer_expand
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
name|evbuffer_add
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
name|evbuffer_remove
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|char
modifier|*
name|evbuffer_readline
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|)
function_decl|;
name|int
name|evbuffer_add_buffer
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|struct
name|evbuffer
modifier|*
parameter_list|)
function_decl|;
name|int
name|evbuffer_add_printf
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|int
name|evbuffer_add_vprintf
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
name|va_list
name|ap
parameter_list|)
function_decl|;
name|void
name|evbuffer_drain
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|int
name|evbuffer_write
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|int
name|evbuffer_read
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|u_char
modifier|*
name|evbuffer_find
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
specifier|const
name|u_char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
name|void
name|evbuffer_setcb
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|void
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|evbuffer
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/*   * Marshaling tagged data - We assume that all tags are inserted in their  * numeric order - so that unknown tags will always be higher than the  * known ones - and we can just ignore the end of an event buffer.  */
name|void
name|evtag_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|void
name|evtag_marshal
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int8_t
name|tag
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|u_int32_t
name|len
parameter_list|)
function_decl|;
name|void
name|encode_int
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int32_t
name|number
parameter_list|)
function_decl|;
name|void
name|evtag_marshal_int
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int8_t
name|tag
parameter_list|,
name|u_int32_t
name|integer
parameter_list|)
function_decl|;
name|void
name|evtag_marshal_string
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|buf
parameter_list|,
name|u_int8_t
name|tag
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|)
function_decl|;
name|void
name|evtag_marshal_timeval
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int8_t
name|tag
parameter_list|,
name|struct
name|timeval
modifier|*
name|tv
parameter_list|)
function_decl|;
name|void
name|evtag_test
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|evtag_unmarshal
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|src
parameter_list|,
name|u_int8_t
modifier|*
name|ptag
parameter_list|,
name|struct
name|evbuffer
modifier|*
name|dst
parameter_list|)
function_decl|;
name|int
name|evtag_peek
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int8_t
modifier|*
name|ptag
parameter_list|)
function_decl|;
name|int
name|evtag_peek_length
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int32_t
modifier|*
name|plength
parameter_list|)
function_decl|;
name|int
name|evtag_payload_length
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int32_t
modifier|*
name|plength
parameter_list|)
function_decl|;
name|int
name|evtag_consume
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|)
function_decl|;
name|int
name|evtag_unmarshal_int
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int8_t
name|need_tag
parameter_list|,
name|u_int32_t
modifier|*
name|pinteger
parameter_list|)
function_decl|;
name|int
name|evtag_unmarshal_fixed
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|src
parameter_list|,
name|u_int8_t
name|need_tag
parameter_list|,
name|void
modifier|*
name|data
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
name|int
name|evtag_unmarshal_string
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int8_t
name|need_tag
parameter_list|,
name|char
modifier|*
modifier|*
name|pstring
parameter_list|)
function_decl|;
name|int
name|evtag_unmarshal_timeval
parameter_list|(
name|struct
name|evbuffer
modifier|*
name|evbuf
parameter_list|,
name|u_int8_t
name|need_tag
parameter_list|,
name|struct
name|timeval
modifier|*
name|ptv
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _EVENT_H_ */
end_comment

end_unit

