begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ioapi.h -- IO base function header for compress/uncompress .zip    part of the MiniZip project - ( http://www.winimage.com/zLibDll/minizip.html )           Copyright (C) 1998-2010 Gilles Vollant (minizip) ( http://www.winimage.com/zLibDll/minizip.html )           Modifications for Zip64 support          Copyright (C) 2009-2010 Mathias Svensson ( http://result42.com )           For more info read MiniZip_info.txt           Changes      Oct-2009 - Defined ZPOS64_T to fpos_t on windows and u_int64_t on linux. (might need to find a better why for this)     Oct-2009 - Change to fseeko64, ftello64 and fopen64 so large files would work on linux.                More if/def section may be needed to support other platforms     Oct-2009 - Defined fxxxx64 calls to normal fopen/ftell/fseek so they would compile on windows.                           (but you should use iowin32.c for windows instead)  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ZLIBIOAPI64_H
end_ifndef

begin_define
define|#
directive|define
name|_ZLIBIOAPI64_H
end_define

begin_if
if|#
directive|if
operator|(
operator|!
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|defined
argument_list|(
name|__APPLE__
argument_list|)
operator|)
end_if

begin_comment
comment|// Linux needs this to support file operation on files larger then 4+GB
end_comment

begin_comment
comment|// But might need better if/def to select just the platforms that needs them.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__USE_FILE_OFFSET64
end_ifndef

begin_define
define|#
directive|define
name|__USE_FILE_OFFSET64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__USE_LARGEFILE64
end_ifndef

begin_define
define|#
directive|define
name|__USE_LARGEFILE64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_LARGEFILE64_SOURCE
end_ifndef

begin_define
define|#
directive|define
name|_LARGEFILE64_SOURCE
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_FILE_OFFSET_BIT
end_ifndef

begin_define
define|#
directive|define
name|_FILE_OFFSET_BIT
value|64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|"zlib.h"
end_include

begin_if
if|#
directive|if
name|defined
argument_list|(
name|USE_FILE32API
argument_list|)
end_if

begin_define
define|#
directive|define
name|fopen64
value|fopen
end_define

begin_define
define|#
directive|define
name|ftello64
value|ftell
end_define

begin_define
define|#
directive|define
name|fseeko64
value|fseek
end_define

begin_else
else|#
directive|else
end_else

begin_ifdef
ifdef|#
directive|ifdef
name|__FreeBSD__
end_ifdef

begin_define
define|#
directive|define
name|fopen64
value|fopen
end_define

begin_define
define|#
directive|define
name|ftello64
value|ftello
end_define

begin_define
define|#
directive|define
name|fseeko64
value|fseeko
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_MSC_VER
end_ifdef

begin_define
define|#
directive|define
name|fopen64
value|fopen
end_define

begin_if
if|#
directive|if
operator|(
name|_MSC_VER
operator|>=
literal|1400
operator|)
operator|&&
operator|(
operator|!
operator|(
name|defined
argument_list|(
name|NO_MSCVER_FILE64_FUNC
argument_list|)
operator|)
operator|)
end_if

begin_define
define|#
directive|define
name|ftello64
value|_ftelli64
end_define

begin_define
define|#
directive|define
name|fseeko64
value|_fseeki64
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// old MSC
end_comment

begin_define
define|#
directive|define
name|ftello64
value|ftell
end_define

begin_define
define|#
directive|define
name|fseeko64
value|fseek
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* #ifndef ZPOS64_T   #ifdef _WIN32                 #define ZPOS64_T fpos_t   #else     #include<stdint.h>     #define ZPOS64_T uint64_t   #endif #endif */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|HAVE_MINIZIP64_CONF_H
end_ifdef

begin_include
include|#
directive|include
file|"mz64conf.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* a type choosen by DEFINE */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|HAVE_64BIT_INT_CUSTOM
end_ifdef

begin_typedef
typedef|typedef
literal|64BIT_INT_CUSTOM_TYPE
name|ZPOS64_T
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_ifdef
ifdef|#
directive|ifdef
name|HAS_STDINT_H
end_ifdef

begin_include
include|#
directive|include
file|"stdint.h"
end_include

begin_typedef
typedef|typedef
name|uint64_t
name|ZPOS64_T
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* Maximum unsigned 32-bit value used as placeholder for zip64 */
end_comment

begin_define
define|#
directive|define
name|MAXU32
value|0xffffffff
end_define

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|||
name|defined
argument_list|(
name|__BORLANDC__
argument_list|)
end_if

begin_typedef
typedef|typedef
name|unsigned
name|__int64
name|ZPOS64_T
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|unsigned
name|long
name|long
name|int
name|ZPOS64_T
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|ZLIB_FILEFUNC_SEEK_CUR
value|(1)
define|#
directive|define
name|ZLIB_FILEFUNC_SEEK_END
value|(2)
define|#
directive|define
name|ZLIB_FILEFUNC_SEEK_SET
value|(0)
define|#
directive|define
name|ZLIB_FILEFUNC_MODE_READ
value|(1)
define|#
directive|define
name|ZLIB_FILEFUNC_MODE_WRITE
value|(2)
define|#
directive|define
name|ZLIB_FILEFUNC_MODE_READWRITEFILTER
value|(3)
define|#
directive|define
name|ZLIB_FILEFUNC_MODE_EXISTING
value|(4)
define|#
directive|define
name|ZLIB_FILEFUNC_MODE_CREATE
value|(8)
ifndef|#
directive|ifndef
name|ZCALLBACK
if|#
directive|if
operator|(
name|defined
argument_list|(
name|WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|WINDOWS
argument_list|)
operator|||
name|defined
argument_list|(
name|_WINDOWS
argument_list|)
operator|)
operator|&&
name|defined
argument_list|(
name|CALLBACK
argument_list|)
operator|&&
name|defined
argument_list|(
name|USEWINDOWS_CALLBACK
argument_list|)
define|#
directive|define
name|ZCALLBACK
value|CALLBACK
else|#
directive|else
define|#
directive|define
name|ZCALLBACK
endif|#
directive|endif
endif|#
directive|endif
typedef|typedef
name|voidpf
argument_list|(
argument|ZCALLBACK *open_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
name|int
name|mode
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|uLong
argument_list|(
argument|ZCALLBACK *read_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
name|voidpf
name|stream
operator|,
name|void
operator|*
name|buf
operator|,
name|uLong
name|size
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|uLong
argument_list|(
argument|ZCALLBACK *write_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
name|voidpf
name|stream
operator|,
specifier|const
name|void
operator|*
name|buf
operator|,
name|uLong
name|size
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|int
argument_list|(
argument|ZCALLBACK *close_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
name|voidpf
name|stream
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|int
argument_list|(
argument|ZCALLBACK *testerror_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
name|voidpf
name|stream
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|long
argument_list|(
argument|ZCALLBACK *tell_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
name|voidpf
name|stream
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|long
argument_list|(
argument|ZCALLBACK *seek_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
name|voidpf
name|stream
operator|,
name|uLong
name|offset
operator|,
name|int
name|origin
operator|)
argument_list|)
expr_stmt|;
comment|/* here is the "old" 32 bits structure structure */
typedef|typedef
struct|struct
name|zlib_filefunc_def_s
block|{
name|open_file_func
name|zopen_file
decl_stmt|;
name|read_file_func
name|zread_file
decl_stmt|;
name|write_file_func
name|zwrite_file
decl_stmt|;
name|tell_file_func
name|ztell_file
decl_stmt|;
name|seek_file_func
name|zseek_file
decl_stmt|;
name|close_file_func
name|zclose_file
decl_stmt|;
name|testerror_file_func
name|zerror_file
decl_stmt|;
name|voidpf
name|opaque
decl_stmt|;
block|}
name|zlib_filefunc_def
typedef|;
typedef|typedef
name|ZPOS64_T
argument_list|(
argument|ZCALLBACK *tell64_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
name|voidpf
name|stream
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|long
argument_list|(
argument|ZCALLBACK *seek64_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
name|voidpf
name|stream
operator|,
name|ZPOS64_T
name|offset
operator|,
name|int
name|origin
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
name|voidpf
argument_list|(
argument|ZCALLBACK *open64_file_func
argument_list|)
name|OF
argument_list|(
operator|(
name|voidpf
name|opaque
operator|,
specifier|const
name|void
operator|*
name|filename
operator|,
name|int
name|mode
operator|)
argument_list|)
expr_stmt|;
typedef|typedef
struct|struct
name|zlib_filefunc64_def_s
block|{
name|open64_file_func
name|zopen64_file
decl_stmt|;
name|read_file_func
name|zread_file
decl_stmt|;
name|write_file_func
name|zwrite_file
decl_stmt|;
name|tell64_file_func
name|ztell64_file
decl_stmt|;
name|seek64_file_func
name|zseek64_file
decl_stmt|;
name|close_file_func
name|zclose_file
decl_stmt|;
name|testerror_file_func
name|zerror_file
decl_stmt|;
name|voidpf
name|opaque
decl_stmt|;
block|}
name|zlib_filefunc64_def
typedef|;
name|void
name|fill_fopen64_filefunc
name|OF
argument_list|(
operator|(
name|zlib_filefunc64_def
operator|*
name|pzlib_filefunc_def
operator|)
argument_list|)
decl_stmt|;
name|void
name|fill_fopen_filefunc
name|OF
argument_list|(
operator|(
name|zlib_filefunc_def
operator|*
name|pzlib_filefunc_def
operator|)
argument_list|)
decl_stmt|;
comment|/* now internal definition, only for zip.c and unzip.h */
typedef|typedef
struct|struct
name|zlib_filefunc64_32_def_s
block|{
name|zlib_filefunc64_def
name|zfile_func64
decl_stmt|;
name|open_file_func
name|zopen32_file
decl_stmt|;
name|tell_file_func
name|ztell32_file
decl_stmt|;
name|seek_file_func
name|zseek32_file
decl_stmt|;
block|}
name|zlib_filefunc64_32_def
typedef|;
define|#
directive|define
name|ZREAD64
parameter_list|(
name|filefunc
parameter_list|,
name|filestream
parameter_list|,
name|buf
parameter_list|,
name|size
parameter_list|)
value|((*((filefunc).zfile_func64.zread_file))   ((filefunc).zfile_func64.opaque,filestream,buf,size))
define|#
directive|define
name|ZWRITE64
parameter_list|(
name|filefunc
parameter_list|,
name|filestream
parameter_list|,
name|buf
parameter_list|,
name|size
parameter_list|)
value|((*((filefunc).zfile_func64.zwrite_file))  ((filefunc).zfile_func64.opaque,filestream,buf,size))
comment|//#define ZTELL64(filefunc,filestream)            ((*((filefunc).ztell64_file)) ((filefunc).opaque,filestream))
comment|//#define ZSEEK64(filefunc,filestream,pos,mode)   ((*((filefunc).zseek64_file)) ((filefunc).opaque,filestream,pos,mode))
define|#
directive|define
name|ZCLOSE64
parameter_list|(
name|filefunc
parameter_list|,
name|filestream
parameter_list|)
value|((*((filefunc).zfile_func64.zclose_file))  ((filefunc).zfile_func64.opaque,filestream))
define|#
directive|define
name|ZERROR64
parameter_list|(
name|filefunc
parameter_list|,
name|filestream
parameter_list|)
value|((*((filefunc).zfile_func64.zerror_file))  ((filefunc).zfile_func64.opaque,filestream))
name|voidpf
name|call_zopen64
name|OF
argument_list|(
operator|(
specifier|const
name|zlib_filefunc64_32_def
operator|*
name|pfilefunc
operator|,
specifier|const
name|void
operator|*
name|filename
operator|,
name|int
name|mode
operator|)
argument_list|)
decl_stmt|;
name|long
name|call_zseek64
name|OF
argument_list|(
operator|(
specifier|const
name|zlib_filefunc64_32_def
operator|*
name|pfilefunc
operator|,
name|voidpf
name|filestream
operator|,
name|ZPOS64_T
name|offset
operator|,
name|int
name|origin
operator|)
argument_list|)
decl_stmt|;
name|ZPOS64_T
name|call_ztell64
name|OF
argument_list|(
operator|(
specifier|const
name|zlib_filefunc64_32_def
operator|*
name|pfilefunc
operator|,
name|voidpf
name|filestream
operator|)
argument_list|)
decl_stmt|;
name|void
name|fill_zlib_filefunc64_32_def_from_filefunc32
parameter_list|(
name|zlib_filefunc64_32_def
modifier|*
name|p_filefunc64_32
parameter_list|,
specifier|const
name|zlib_filefunc_def
modifier|*
name|p_filefunc32
parameter_list|)
function_decl|;
define|#
directive|define
name|ZOPEN64
parameter_list|(
name|filefunc
parameter_list|,
name|filename
parameter_list|,
name|mode
parameter_list|)
value|(call_zopen64((&(filefunc)),(filename),(mode)))
define|#
directive|define
name|ZTELL64
parameter_list|(
name|filefunc
parameter_list|,
name|filestream
parameter_list|)
value|(call_ztell64((&(filefunc)),(filestream)))
define|#
directive|define
name|ZSEEK64
parameter_list|(
name|filefunc
parameter_list|,
name|filestream
parameter_list|,
name|pos
parameter_list|,
name|mode
parameter_list|)
value|(call_zseek64((&(filefunc)),(filestream),(pos),(mode)))
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

