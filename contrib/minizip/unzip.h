begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* unzip.h -- IO for uncompress .zip files using zlib    Version 1.1, February 14h, 2010    part of the MiniZip project - ( http://www.winimage.com/zLibDll/minizip.html )           Copyright (C) 1998-2010 Gilles Vollant (minizip) ( http://www.winimage.com/zLibDll/minizip.html )           Modifications of Unzip for Zip64          Copyright (C) 2007-2008 Even Rouault           Modifications for Zip64 support on both zip and unzip          Copyright (C) 2009-2010 Mathias Svensson ( http://result42.com )           For more info read MiniZip_info.txt           ---------------------------------------------------------------------------------          Condition of use and distribution are the same than zlib :    This software is provided 'as-is', without any express or implied   warranty.  In no event will the authors be held liable for any damages   arising from the use of this software.    Permission is granted to anyone to use this software for any purpose,   including commercial applications, and to alter it and redistribute it   freely, subject to the following restrictions:    1. The origin of this software must not be misrepresented; you must not      claim that you wrote the original software. If you use this software      in a product, an acknowledgment in the product documentation would be      appreciated but is not required.   2. Altered source versions must be plainly marked as such, and must not be      misrepresented as being the original software.   3. This notice may not be removed or altered from any source distribution.    ---------------------------------------------------------------------------------          Changes          See header of unzip64.c  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_unz64_H
end_ifndef

begin_define
define|#
directive|define
name|_unz64_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_ZLIB_H
include|#
directive|include
file|"zlib.h"
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_ZLIBIOAPI_H
include|#
directive|include
file|"ioapi.h"
endif|#
directive|endif
ifdef|#
directive|ifdef
name|HAVE_BZIP2
include|#
directive|include
file|"bzlib.h"
endif|#
directive|endif
define|#
directive|define
name|Z_BZIP2ED
value|12
if|#
directive|if
name|defined
argument_list|(
name|STRICTUNZIP
argument_list|)
operator|||
name|defined
argument_list|(
name|STRICTZIPUNZIP
argument_list|)
comment|/* like the STRICT of WIN32, we define a pointer that cannot be converted     from (void*) without cast */
typedef|typedef
struct|struct
name|TagunzFile__
block|{
name|int
name|unused
decl_stmt|;
block|}
name|unzFile__
typedef|;
typedef|typedef
name|unzFile__
modifier|*
name|unzFile
typedef|;
else|#
directive|else
typedef|typedef
name|voidp
name|unzFile
typedef|;
endif|#
directive|endif
define|#
directive|define
name|UNZ_OK
value|(0)
define|#
directive|define
name|UNZ_END_OF_LIST_OF_FILE
value|(-100)
define|#
directive|define
name|UNZ_ERRNO
value|(Z_ERRNO)
define|#
directive|define
name|UNZ_EOF
value|(0)
define|#
directive|define
name|UNZ_PARAMERROR
value|(-102)
define|#
directive|define
name|UNZ_BADZIPFILE
value|(-103)
define|#
directive|define
name|UNZ_INTERNALERROR
value|(-104)
define|#
directive|define
name|UNZ_CRCERROR
value|(-105)
comment|/* tm_unz contain date/time info */
typedef|typedef
struct|struct
name|tm_unz_s
block|{
name|uInt
name|tm_sec
decl_stmt|;
comment|/* seconds after the minute - [0,59] */
name|uInt
name|tm_min
decl_stmt|;
comment|/* minutes after the hour - [0,59] */
name|uInt
name|tm_hour
decl_stmt|;
comment|/* hours since midnight - [0,23] */
name|uInt
name|tm_mday
decl_stmt|;
comment|/* day of the month - [1,31] */
name|uInt
name|tm_mon
decl_stmt|;
comment|/* months since January - [0,11] */
name|uInt
name|tm_year
decl_stmt|;
comment|/* years - [1980..2044] */
block|}
name|tm_unz
typedef|;
comment|/* unz_global_info structure contain global data about the ZIPfile    These data comes from the end of central dir */
typedef|typedef
struct|struct
name|unz_global_info64_s
block|{
name|ZPOS64_T
name|number_entry
decl_stmt|;
comment|/* total number of entries in                                      the central dir on this disk */
name|uLong
name|size_comment
decl_stmt|;
comment|/* size of the global comment of the zipfile */
block|}
name|unz_global_info64
typedef|;
typedef|typedef
struct|struct
name|unz_global_info_s
block|{
name|uLong
name|number_entry
decl_stmt|;
comment|/* total number of entries in                                      the central dir on this disk */
name|uLong
name|size_comment
decl_stmt|;
comment|/* size of the global comment of the zipfile */
block|}
name|unz_global_info
typedef|;
comment|/* unz_file_info contain information about a file in the zipfile */
typedef|typedef
struct|struct
name|unz_file_info64_s
block|{
name|uLong
name|version
decl_stmt|;
comment|/* version made by                 2 bytes */
name|uLong
name|version_needed
decl_stmt|;
comment|/* version needed to extract       2 bytes */
name|uLong
name|flag
decl_stmt|;
comment|/* general purpose bit flag        2 bytes */
name|uLong
name|compression_method
decl_stmt|;
comment|/* compression method              2 bytes */
name|uLong
name|dosDate
decl_stmt|;
comment|/* last mod file date in Dos fmt   4 bytes */
name|uLong
name|crc
decl_stmt|;
comment|/* crc-32                          4 bytes */
name|ZPOS64_T
name|compressed_size
decl_stmt|;
comment|/* compressed size                 8 bytes */
name|ZPOS64_T
name|uncompressed_size
decl_stmt|;
comment|/* uncompressed size               8 bytes */
name|uLong
name|size_filename
decl_stmt|;
comment|/* filename length                 2 bytes */
name|uLong
name|size_file_extra
decl_stmt|;
comment|/* extra field length              2 bytes */
name|uLong
name|size_file_comment
decl_stmt|;
comment|/* file comment length             2 bytes */
name|uLong
name|disk_num_start
decl_stmt|;
comment|/* disk number start               2 bytes */
name|uLong
name|internal_fa
decl_stmt|;
comment|/* internal file attributes        2 bytes */
name|uLong
name|external_fa
decl_stmt|;
comment|/* external file attributes        4 bytes */
name|tm_unz
name|tmu_date
decl_stmt|;
block|}
name|unz_file_info64
typedef|;
typedef|typedef
struct|struct
name|unz_file_info_s
block|{
name|uLong
name|version
decl_stmt|;
comment|/* version made by                 2 bytes */
name|uLong
name|version_needed
decl_stmt|;
comment|/* version needed to extract       2 bytes */
name|uLong
name|flag
decl_stmt|;
comment|/* general purpose bit flag        2 bytes */
name|uLong
name|compression_method
decl_stmt|;
comment|/* compression method              2 bytes */
name|uLong
name|dosDate
decl_stmt|;
comment|/* last mod file date in Dos fmt   4 bytes */
name|uLong
name|crc
decl_stmt|;
comment|/* crc-32                          4 bytes */
name|uLong
name|compressed_size
decl_stmt|;
comment|/* compressed size                 4 bytes */
name|uLong
name|uncompressed_size
decl_stmt|;
comment|/* uncompressed size               4 bytes */
name|uLong
name|size_filename
decl_stmt|;
comment|/* filename length                 2 bytes */
name|uLong
name|size_file_extra
decl_stmt|;
comment|/* extra field length              2 bytes */
name|uLong
name|size_file_comment
decl_stmt|;
comment|/* file comment length             2 bytes */
name|uLong
name|disk_num_start
decl_stmt|;
comment|/* disk number start               2 bytes */
name|uLong
name|internal_fa
decl_stmt|;
comment|/* internal file attributes        2 bytes */
name|uLong
name|external_fa
decl_stmt|;
comment|/* external file attributes        4 bytes */
name|tm_unz
name|tmu_date
decl_stmt|;
block|}
name|unz_file_info
typedef|;
specifier|extern
name|int
name|ZEXPORT
name|unzStringFileNameCompare
name|OF
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|fileName1
operator|,
specifier|const
name|char
operator|*
name|fileName2
operator|,
name|int
name|iCaseSensitivity
operator|)
argument_list|)
decl_stmt|;
comment|/*    Compare two filename (fileName1,fileName2).    If iCaseSenisivity = 1, comparision is case sensitivity (like strcmp)    If iCaseSenisivity = 2, comparision is not case sensitivity (like strcmpi                                 or strcasecmp)    If iCaseSenisivity = 0, case sensitivity is defaut of your operating system     (like 1 on Unix, 2 on Windows) */
specifier|extern
name|unzFile
name|ZEXPORT
name|unzOpen
name|OF
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|path
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|unzFile
name|ZEXPORT
name|unzOpen64
name|OF
argument_list|(
operator|(
specifier|const
name|void
operator|*
name|path
operator|)
argument_list|)
decl_stmt|;
comment|/*   Open a Zip file. path contain the full pathname (by example,      on a Windows XP computer "c:\\zlib\\zlib113.zip" or on an Unix computer      "zlib/zlib113.zip".      If the zipfile cannot be opened (file don't exist or in not valid), the        return value is NULL.      Else, the return value is a unzFile Handle, usable with other function        of this unzip package.      the "64" function take a const void* pointer, because the path is just the        value passed to the open64_file_func callback.      Under Windows, if UNICODE is defined, using fill_fopen64_filefunc, the path        is a pointer to a wide unicode string (LPCTSTR is LPCWSTR), so const char*        does not describe the reality */
specifier|extern
name|unzFile
name|ZEXPORT
name|unzOpen2
name|OF
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|path
operator|,
name|zlib_filefunc_def
operator|*
name|pzlib_filefunc_def
operator|)
argument_list|)
decl_stmt|;
comment|/*    Open a Zip file, like unzOpen, but provide a set of file low level API       for read/write the zip file (see ioapi.h) */
specifier|extern
name|unzFile
name|ZEXPORT
name|unzOpen2_64
name|OF
argument_list|(
operator|(
specifier|const
name|void
operator|*
name|path
operator|,
name|zlib_filefunc64_def
operator|*
name|pzlib_filefunc_def
operator|)
argument_list|)
decl_stmt|;
comment|/*    Open a Zip file, like unz64Open, but provide a set of file low level API       for read/write the zip file (see ioapi.h) */
specifier|extern
name|int
name|ZEXPORT
name|unzClose
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/*   Close a ZipFile opened with unzOpen.   If there is files inside the .Zip opened with unzOpenCurrentFile (see later),     these files MUST be closed with unzCloseCurrentFile before call unzClose.   return UNZ_OK if there is no problem. */
specifier|extern
name|int
name|ZEXPORT
name|unzGetGlobalInfo
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|unz_global_info
operator|*
name|pglobal_info
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ZEXPORT
name|unzGetGlobalInfo64
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|unz_global_info64
operator|*
name|pglobal_info
operator|)
argument_list|)
decl_stmt|;
comment|/*   Write info about the ZipFile in the *pglobal_info structure.   No preparation of the structure is needed   return UNZ_OK if there is no problem. */
specifier|extern
name|int
name|ZEXPORT
name|unzGetGlobalComment
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|char
operator|*
name|szComment
operator|,
name|uLong
name|uSizeBuf
operator|)
argument_list|)
decl_stmt|;
comment|/*   Get the global comment string of the ZipFile, in the szComment buffer.   uSizeBuf is the size of the szComment buffer.   return the number of byte copied or an error code<0 */
comment|/***************************************************************************/
comment|/* Unzip package allow you browse the directory of the zipfile */
specifier|extern
name|int
name|ZEXPORT
name|unzGoToFirstFile
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/*   Set the current file of the zipfile to the first file.   return UNZ_OK if there is no problem */
specifier|extern
name|int
name|ZEXPORT
name|unzGoToNextFile
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/*   Set the current file of the zipfile to the next file.   return UNZ_OK if there is no problem   return UNZ_END_OF_LIST_OF_FILE if the actual file was the latest. */
specifier|extern
name|int
name|ZEXPORT
name|unzLocateFile
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
specifier|const
name|char
operator|*
name|szFileName
operator|,
name|int
name|iCaseSensitivity
operator|)
argument_list|)
decl_stmt|;
comment|/*   Try locate the file szFileName in the zipfile.   For the iCaseSensitivity signification, see unzStringFileNameCompare    return value :   UNZ_OK if the file is found. It becomes the current file.   UNZ_END_OF_LIST_OF_FILE if the file is not found */
comment|/* ****************************************** */
comment|/* Ryan supplied functions */
comment|/* unz_file_info contain information about a file in the zipfile */
typedef|typedef
struct|struct
name|unz_file_pos_s
block|{
name|uLong
name|pos_in_zip_directory
decl_stmt|;
comment|/* offset in zip file directory */
name|uLong
name|num_of_file
decl_stmt|;
comment|/* # of file */
block|}
name|unz_file_pos
typedef|;
specifier|extern
name|int
name|ZEXPORT
name|unzGetFilePos
parameter_list|(
name|unzFile
name|file
parameter_list|,
name|unz_file_pos
modifier|*
name|file_pos
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ZEXPORT
name|unzGoToFilePos
parameter_list|(
name|unzFile
name|file
parameter_list|,
name|unz_file_pos
modifier|*
name|file_pos
parameter_list|)
function_decl|;
typedef|typedef
struct|struct
name|unz64_file_pos_s
block|{
name|ZPOS64_T
name|pos_in_zip_directory
decl_stmt|;
comment|/* offset in zip file directory */
name|ZPOS64_T
name|num_of_file
decl_stmt|;
comment|/* # of file */
block|}
name|unz64_file_pos
typedef|;
specifier|extern
name|int
name|ZEXPORT
name|unzGetFilePos64
parameter_list|(
name|unzFile
name|file
parameter_list|,
name|unz64_file_pos
modifier|*
name|file_pos
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ZEXPORT
name|unzGoToFilePos64
parameter_list|(
name|unzFile
name|file
parameter_list|,
specifier|const
name|unz64_file_pos
modifier|*
name|file_pos
parameter_list|)
function_decl|;
comment|/* ****************************************** */
specifier|extern
name|int
name|ZEXPORT
name|unzGetCurrentFileInfo64
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|unz_file_info64
operator|*
name|pfile_info
operator|,
name|char
operator|*
name|szFileName
operator|,
name|uLong
name|fileNameBufferSize
operator|,
name|void
operator|*
name|extraField
operator|,
name|uLong
name|extraFieldBufferSize
operator|,
name|char
operator|*
name|szComment
operator|,
name|uLong
name|commentBufferSize
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ZEXPORT
name|unzGetCurrentFileInfo
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|unz_file_info
operator|*
name|pfile_info
operator|,
name|char
operator|*
name|szFileName
operator|,
name|uLong
name|fileNameBufferSize
operator|,
name|void
operator|*
name|extraField
operator|,
name|uLong
name|extraFieldBufferSize
operator|,
name|char
operator|*
name|szComment
operator|,
name|uLong
name|commentBufferSize
operator|)
argument_list|)
decl_stmt|;
comment|/*   Get Info about the current file   if pfile_info!=NULL, the *pfile_info structure will contain somes info about         the current file   if szFileName!=NULL, the filemane string will be copied in szFileName             (fileNameBufferSize is the size of the buffer)   if extraField!=NULL, the extra field information will be copied in extraField             (extraFieldBufferSize is the size of the buffer).             This is the Central-header version of the extra field   if szComment!=NULL, the comment string of the file will be copied in szComment             (commentBufferSize is the size of the buffer) */
comment|/** Addition for GDAL : START */
specifier|extern
name|ZPOS64_T
name|ZEXPORT
name|unzGetCurrentFileZStreamPos64
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/** Addition for GDAL : END */
comment|/***************************************************************************/
comment|/* for reading the content of the current zipfile, you can open it, read data    from it, and close it (you can close it before reading all the file)    */
specifier|extern
name|int
name|ZEXPORT
name|unzOpenCurrentFile
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/*   Open for reading data the current file in the zipfile.   If there is no error, the return value is UNZ_OK. */
specifier|extern
name|int
name|ZEXPORT
name|unzOpenCurrentFilePassword
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
specifier|const
name|char
operator|*
name|password
operator|)
argument_list|)
decl_stmt|;
comment|/*   Open for reading data the current file in the zipfile.   password is a crypting password   If there is no error, the return value is UNZ_OK. */
specifier|extern
name|int
name|ZEXPORT
name|unzOpenCurrentFile2
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|int
operator|*
name|method
operator|,
name|int
operator|*
name|level
operator|,
name|int
name|raw
operator|)
argument_list|)
decl_stmt|;
comment|/*   Same than unzOpenCurrentFile, but open for read raw the file (not uncompress)     if raw==1   *method will receive method of compression, *level will receive level of      compression   note : you can set level parameter as NULL (if you did not want known level,          but you CANNOT set method parameter as NULL */
specifier|extern
name|int
name|ZEXPORT
name|unzOpenCurrentFile3
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|int
operator|*
name|method
operator|,
name|int
operator|*
name|level
operator|,
name|int
name|raw
operator|,
specifier|const
name|char
operator|*
name|password
operator|)
argument_list|)
decl_stmt|;
comment|/*   Same than unzOpenCurrentFile, but open for read raw the file (not uncompress)     if raw==1   *method will receive method of compression, *level will receive level of      compression   note : you can set level parameter as NULL (if you did not want known level,          but you CANNOT set method parameter as NULL */
specifier|extern
name|int
name|ZEXPORT
name|unzCloseCurrentFile
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/*   Close the file in zip opened with unzOpenCurrentFile   Return UNZ_CRCERROR if all the file was read but the CRC is not good */
specifier|extern
name|int
name|ZEXPORT
name|unzReadCurrentFile
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|voidp
name|buf
operator|,
name|unsigned
name|len
operator|)
argument_list|)
decl_stmt|;
comment|/*   Read bytes from the current file (opened by unzOpenCurrentFile)   buf contain buffer where data must be copied   len the size of buf.    return the number of byte copied if somes bytes are copied   return 0 if the end of file was reached   return<0 with error code if there is an error     (UNZ_ERRNO for IO error, or zLib error for uncompress error) */
specifier|extern
name|z_off_t
name|ZEXPORT
name|unztell
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|ZPOS64_T
name|ZEXPORT
name|unztell64
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/*   Give the current position in uncompressed data */
specifier|extern
name|int
name|ZEXPORT
name|unzeof
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/*   return 1 if the end of file was reached, 0 elsewhere */
specifier|extern
name|int
name|ZEXPORT
name|unzGetLocalExtrafield
name|OF
argument_list|(
operator|(
name|unzFile
name|file
operator|,
name|voidp
name|buf
operator|,
name|unsigned
name|len
operator|)
argument_list|)
decl_stmt|;
comment|/*   Read extra field from the current file (opened by unzOpenCurrentFile)   This is the local-header version of the extra field (sometimes, there is     more info in the local-header version than in the central-header)    if buf==NULL, it return the size of the local extra field    if buf!=NULL, len is the size of the buffer, the extra header is copied in     buf.   the return value is the number of bytes copied in buf, or (if<0)     the error code */
comment|/***************************************************************************/
comment|/* Get the current file offset */
specifier|extern
name|ZPOS64_T
name|ZEXPORT
name|unzGetOffset64
parameter_list|(
name|unzFile
name|file
parameter_list|)
function_decl|;
specifier|extern
name|uLong
name|ZEXPORT
name|unzGetOffset
parameter_list|(
name|unzFile
name|file
parameter_list|)
function_decl|;
comment|/* Set the current file offset */
specifier|extern
name|int
name|ZEXPORT
name|unzSetOffset64
parameter_list|(
name|unzFile
name|file
parameter_list|,
name|ZPOS64_T
name|pos
parameter_list|)
function_decl|;
specifier|extern
name|int
name|ZEXPORT
name|unzSetOffset
parameter_list|(
name|unzFile
name|file
parameter_list|,
name|uLong
name|pos
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _unz64_H */
end_comment

end_unit

