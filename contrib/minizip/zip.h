begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* zip.h -- IO on .zip files using zlib    Version 1.1, February 14h, 2010    part of the MiniZip project - ( http://www.winimage.com/zLibDll/minizip.html )           Copyright (C) 1998-2010 Gilles Vollant (minizip) ( http://www.winimage.com/zLibDll/minizip.html )           Modifications for Zip64 support          Copyright (C) 2009-2010 Mathias Svensson ( http://result42.com )           For more info read MiniZip_info.txt           ---------------------------------------------------------------------------     Condition of use and distribution are the same than zlib :    This software is provided 'as-is', without any express or implied   warranty.  In no event will the authors be held liable for any damages   arising from the use of this software.    Permission is granted to anyone to use this software for any purpose,   including commercial applications, and to alter it and redistribute it   freely, subject to the following restrictions:    1. The origin of this software must not be misrepresented; you must not      claim that you wrote the original software. If you use this software      in a product, an acknowledgment in the product documentation would be      appreciated but is not required.   2. Altered source versions must be plainly marked as such, and must not be      misrepresented as being the original software.   3. This notice may not be removed or altered from any source distribution.          ---------------------------------------------------------------------------          Changes          See header of zip.h  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_zip12_H
end_ifndef

begin_define
define|#
directive|define
name|_zip12_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|//#define HAVE_BZIP2
ifndef|#
directive|ifndef
name|_ZLIB_H
include|#
directive|include
file|"zlib.h"
endif|#
directive|endif
ifndef|#
directive|ifndef
name|_ZLIBIOAPI_H
include|#
directive|include
file|"ioapi.h"
endif|#
directive|endif
ifdef|#
directive|ifdef
name|HAVE_BZIP2
include|#
directive|include
file|"bzlib.h"
endif|#
directive|endif
define|#
directive|define
name|Z_BZIP2ED
value|12
if|#
directive|if
name|defined
argument_list|(
name|STRICTZIP
argument_list|)
operator|||
name|defined
argument_list|(
name|STRICTZIPUNZIP
argument_list|)
comment|/* like the STRICT of WIN32, we define a pointer that cannot be converted     from (void*) without cast */
typedef|typedef
struct|struct
name|TagzipFile__
block|{
name|int
name|unused
decl_stmt|;
block|}
name|zipFile__
typedef|;
typedef|typedef
name|zipFile__
modifier|*
name|zipFile
typedef|;
else|#
directive|else
typedef|typedef
name|voidp
name|zipFile
typedef|;
endif|#
directive|endif
define|#
directive|define
name|ZIP_OK
value|(0)
define|#
directive|define
name|ZIP_EOF
value|(0)
define|#
directive|define
name|ZIP_ERRNO
value|(Z_ERRNO)
define|#
directive|define
name|ZIP_PARAMERROR
value|(-102)
define|#
directive|define
name|ZIP_BADZIPFILE
value|(-103)
define|#
directive|define
name|ZIP_INTERNALERROR
value|(-104)
ifndef|#
directive|ifndef
name|DEF_MEM_LEVEL
if|#
directive|if
name|MAX_MEM_LEVEL
operator|>=
literal|8
define|#
directive|define
name|DEF_MEM_LEVEL
value|8
else|#
directive|else
define|#
directive|define
name|DEF_MEM_LEVEL
value|MAX_MEM_LEVEL
endif|#
directive|endif
endif|#
directive|endif
comment|/* default memLevel */
comment|/* tm_zip contain date/time info */
typedef|typedef
struct|struct
name|tm_zip_s
block|{
name|uInt
name|tm_sec
decl_stmt|;
comment|/* seconds after the minute - [0,59] */
name|uInt
name|tm_min
decl_stmt|;
comment|/* minutes after the hour - [0,59] */
name|uInt
name|tm_hour
decl_stmt|;
comment|/* hours since midnight - [0,23] */
name|uInt
name|tm_mday
decl_stmt|;
comment|/* day of the month - [1,31] */
name|uInt
name|tm_mon
decl_stmt|;
comment|/* months since January - [0,11] */
name|uInt
name|tm_year
decl_stmt|;
comment|/* years - [1980..2044] */
block|}
name|tm_zip
typedef|;
typedef|typedef
struct|struct
block|{
name|tm_zip
name|tmz_date
decl_stmt|;
comment|/* date in understandable format           */
name|uLong
name|dosDate
decl_stmt|;
comment|/* if dos_date == 0, tmu_date is used      */
comment|/*    uLong       flag;        */
comment|/* general purpose bit flag        2 bytes */
name|uLong
name|internal_fa
decl_stmt|;
comment|/* internal file attributes        2 bytes */
name|uLong
name|external_fa
decl_stmt|;
comment|/* external file attributes        4 bytes */
block|}
name|zip_fileinfo
typedef|;
typedef|typedef
specifier|const
name|char
modifier|*
name|zipcharpc
typedef|;
define|#
directive|define
name|APPEND_STATUS_CREATE
value|(0)
define|#
directive|define
name|APPEND_STATUS_CREATEAFTER
value|(1)
define|#
directive|define
name|APPEND_STATUS_ADDINZIP
value|(2)
specifier|extern
name|zipFile
name|ZEXPORT
name|zipOpen
name|OF
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|pathname
operator|,
name|int
name|append
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|zipFile
name|ZEXPORT
name|zipOpen64
name|OF
argument_list|(
operator|(
specifier|const
name|void
operator|*
name|pathname
operator|,
name|int
name|append
operator|)
argument_list|)
decl_stmt|;
comment|/*   Create a zipfile.      pathname contain on Windows XP a filename like "c:\\zlib\\zlib113.zip" or on        an Unix computer "zlib/zlib113.zip".      if the file pathname exist and append==APPEND_STATUS_CREATEAFTER, the zip        will be created at the end of the file.          (useful if the file contain a self extractor code)      if the file pathname exist and append==APPEND_STATUS_ADDINZIP, we will        add files in existing zip (be sure you don't add file that doesn't exist)      If the zipfile cannot be opened, the return value is NULL.      Else, the return value is a zipFile Handle, usable with other function        of this zip package. */
comment|/* Note : there is no delete function into a zipfile.    If you want delete file into a zipfile, you must open a zipfile, and create another    Of couse, you can use RAW reading and writing to copy the file you did not want delte */
specifier|extern
name|zipFile
name|ZEXPORT
name|zipOpen2
name|OF
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|pathname
operator|,
name|int
name|append
operator|,
name|zipcharpc
operator|*
name|globalcomment
operator|,
name|zlib_filefunc_def
operator|*
name|pzlib_filefunc_def
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|zipFile
name|ZEXPORT
name|zipOpen2_64
name|OF
argument_list|(
operator|(
specifier|const
name|void
operator|*
name|pathname
operator|,
name|int
name|append
operator|,
name|zipcharpc
operator|*
name|globalcomment
operator|,
name|zlib_filefunc64_def
operator|*
name|pzlib_filefunc_def
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ZEXPORT
name|zipOpenNewFileInZip
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
specifier|const
name|zip_fileinfo
operator|*
name|zipfi
operator|,
specifier|const
name|void
operator|*
name|extrafield_local
operator|,
name|uInt
name|size_extrafield_local
operator|,
specifier|const
name|void
operator|*
name|extrafield_global
operator|,
name|uInt
name|size_extrafield_global
operator|,
specifier|const
name|char
operator|*
name|comment
operator|,
name|int
name|method
operator|,
name|int
name|level
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ZEXPORT
name|zipOpenNewFileInZip64
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
specifier|const
name|zip_fileinfo
operator|*
name|zipfi
operator|,
specifier|const
name|void
operator|*
name|extrafield_local
operator|,
name|uInt
name|size_extrafield_local
operator|,
specifier|const
name|void
operator|*
name|extrafield_global
operator|,
name|uInt
name|size_extrafield_global
operator|,
specifier|const
name|char
operator|*
name|comment
operator|,
name|int
name|method
operator|,
name|int
name|level
operator|,
name|int
name|zip64
operator|)
argument_list|)
decl_stmt|;
comment|/*   Open a file in the ZIP for writing.   filename : the filename in zip (if NULL, '-' without quote will be used   *zipfi contain supplemental information   if extrafield_local!=NULL and size_extrafield_local>0, extrafield_local     contains the extrafield data the the local header   if extrafield_global!=NULL and size_extrafield_global>0, extrafield_global     contains the extrafield data the the local header   if comment != NULL, comment contain the comment string   method contain the compression method (0 for store, Z_DEFLATED for deflate)   level contain the level of compression (can be Z_DEFAULT_COMPRESSION)   zip64 is set to 1 if a zip64 extended information block should be added to the local file header.                     this MUST be '1' if the uncompressed size is>= 0xffffffff.  */
specifier|extern
name|int
name|ZEXPORT
name|zipOpenNewFileInZip2
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
specifier|const
name|zip_fileinfo
operator|*
name|zipfi
operator|,
specifier|const
name|void
operator|*
name|extrafield_local
operator|,
name|uInt
name|size_extrafield_local
operator|,
specifier|const
name|void
operator|*
name|extrafield_global
operator|,
name|uInt
name|size_extrafield_global
operator|,
specifier|const
name|char
operator|*
name|comment
operator|,
name|int
name|method
operator|,
name|int
name|level
operator|,
name|int
name|raw
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ZEXPORT
name|zipOpenNewFileInZip2_64
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
specifier|const
name|zip_fileinfo
operator|*
name|zipfi
operator|,
specifier|const
name|void
operator|*
name|extrafield_local
operator|,
name|uInt
name|size_extrafield_local
operator|,
specifier|const
name|void
operator|*
name|extrafield_global
operator|,
name|uInt
name|size_extrafield_global
operator|,
specifier|const
name|char
operator|*
name|comment
operator|,
name|int
name|method
operator|,
name|int
name|level
operator|,
name|int
name|raw
operator|,
name|int
name|zip64
operator|)
argument_list|)
decl_stmt|;
comment|/*   Same than zipOpenNewFileInZip, except if raw=1, we write raw file  */
specifier|extern
name|int
name|ZEXPORT
name|zipOpenNewFileInZip3
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
specifier|const
name|zip_fileinfo
operator|*
name|zipfi
operator|,
specifier|const
name|void
operator|*
name|extrafield_local
operator|,
name|uInt
name|size_extrafield_local
operator|,
specifier|const
name|void
operator|*
name|extrafield_global
operator|,
name|uInt
name|size_extrafield_global
operator|,
specifier|const
name|char
operator|*
name|comment
operator|,
name|int
name|method
operator|,
name|int
name|level
operator|,
name|int
name|raw
operator|,
name|int
name|windowBits
operator|,
name|int
name|memLevel
operator|,
name|int
name|strategy
operator|,
specifier|const
name|char
operator|*
name|password
operator|,
name|uLong
name|crcForCrypting
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ZEXPORT
name|zipOpenNewFileInZip3_64
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
specifier|const
name|zip_fileinfo
operator|*
name|zipfi
operator|,
specifier|const
name|void
operator|*
name|extrafield_local
operator|,
name|uInt
name|size_extrafield_local
operator|,
specifier|const
name|void
operator|*
name|extrafield_global
operator|,
name|uInt
name|size_extrafield_global
operator|,
specifier|const
name|char
operator|*
name|comment
operator|,
name|int
name|method
operator|,
name|int
name|level
operator|,
name|int
name|raw
operator|,
name|int
name|windowBits
operator|,
name|int
name|memLevel
operator|,
name|int
name|strategy
operator|,
specifier|const
name|char
operator|*
name|password
operator|,
name|uLong
name|crcForCrypting
operator|,
name|int
name|zip64
operator|)
argument_list|)
decl_stmt|;
comment|/*   Same than zipOpenNewFileInZip2, except     windowBits,memLevel,,strategy : see parameter strategy in deflateInit2     password : crypting password (NULL for no crypting)     crcForCrypting : crc of file to compress (needed for crypting)  */
specifier|extern
name|int
name|ZEXPORT
name|zipOpenNewFileInZip4
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
specifier|const
name|zip_fileinfo
operator|*
name|zipfi
operator|,
specifier|const
name|void
operator|*
name|extrafield_local
operator|,
name|uInt
name|size_extrafield_local
operator|,
specifier|const
name|void
operator|*
name|extrafield_global
operator|,
name|uInt
name|size_extrafield_global
operator|,
specifier|const
name|char
operator|*
name|comment
operator|,
name|int
name|method
operator|,
name|int
name|level
operator|,
name|int
name|raw
operator|,
name|int
name|windowBits
operator|,
name|int
name|memLevel
operator|,
name|int
name|strategy
operator|,
specifier|const
name|char
operator|*
name|password
operator|,
name|uLong
name|crcForCrypting
operator|,
name|uLong
name|versionMadeBy
operator|,
name|uLong
name|flagBase
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ZEXPORT
name|zipOpenNewFileInZip4_64
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|filename
operator|,
specifier|const
name|zip_fileinfo
operator|*
name|zipfi
operator|,
specifier|const
name|void
operator|*
name|extrafield_local
operator|,
name|uInt
name|size_extrafield_local
operator|,
specifier|const
name|void
operator|*
name|extrafield_global
operator|,
name|uInt
name|size_extrafield_global
operator|,
specifier|const
name|char
operator|*
name|comment
operator|,
name|int
name|method
operator|,
name|int
name|level
operator|,
name|int
name|raw
operator|,
name|int
name|windowBits
operator|,
name|int
name|memLevel
operator|,
name|int
name|strategy
operator|,
specifier|const
name|char
operator|*
name|password
operator|,
name|uLong
name|crcForCrypting
operator|,
name|uLong
name|versionMadeBy
operator|,
name|uLong
name|flagBase
operator|,
name|int
name|zip64
operator|)
argument_list|)
decl_stmt|;
comment|/*   Same than zipOpenNewFileInZip4, except     versionMadeBy : value for Version made by field     flag : value for flag field (compression level info will be added)  */
specifier|extern
name|int
name|ZEXPORT
name|zipWriteInFileInZip
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|void
operator|*
name|buf
operator|,
name|unsigned
name|len
operator|)
argument_list|)
decl_stmt|;
comment|/*   Write data in the zipfile */
specifier|extern
name|int
name|ZEXPORT
name|zipCloseFileInZip
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|)
argument_list|)
decl_stmt|;
comment|/*   Close the current file in the zipfile */
specifier|extern
name|int
name|ZEXPORT
name|zipCloseFileInZipRaw
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
name|uLong
name|uncompressed_size
operator|,
name|uLong
name|crc32
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|ZEXPORT
name|zipCloseFileInZipRaw64
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
name|ZPOS64_T
name|uncompressed_size
operator|,
name|uLong
name|crc32
operator|)
argument_list|)
decl_stmt|;
comment|/*   Close the current file in the zipfile, for file opened with     parameter raw=1 in zipOpenNewFileInZip2   uncompressed_size and crc32 are value for the uncompressed size */
specifier|extern
name|int
name|ZEXPORT
name|zipClose
name|OF
argument_list|(
operator|(
name|zipFile
name|file
operator|,
specifier|const
name|char
operator|*
name|global_comment
operator|)
argument_list|)
decl_stmt|;
comment|/*   Close the zipfile */
specifier|extern
name|int
name|ZEXPORT
name|zipRemoveExtraInfoBlock
name|OF
argument_list|(
operator|(
name|char
operator|*
name|pData
operator|,
name|int
operator|*
name|dataLen
operator|,
name|short
name|sHeader
operator|)
argument_list|)
decl_stmt|;
comment|/*   zipRemoveExtraInfoBlock -  Added by Mathias Svensson    Remove extra information block from a extra information data for the local file header or central directory header    It is needed to remove ZIP64 extra information blocks when before data is written if using RAW mode.    0x0001 is the signature header for the ZIP64 extra information blocks    usage.                         Remove ZIP64 Extra information from a central director extra field data               zipRemoveExtraInfoBlock(pCenDirExtraFieldData,&nCenDirExtraFieldDataLen, 0x0001);                          Remove ZIP64 Extra information from a Local File Header extra field data         zipRemoveExtraInfoBlock(pLocalHeaderExtraFieldData,&nLocalHeaderExtraFieldDataLen, 0x0001); */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _zip64_H */
end_comment

end_unit

