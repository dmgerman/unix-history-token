begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!    This file is built by regcomp.pl from regcomp.sym.      Any changes made here will be lost! */
end_comment

begin_define
define|#
directive|define
name|END
value|0
end_define

begin_comment
comment|/*    0 End of program. */
end_comment

begin_define
define|#
directive|define
name|SUCCEED
value|1
end_define

begin_comment
comment|/*  0x1 Return from a subroutine, basically. */
end_comment

begin_define
define|#
directive|define
name|BOL
value|2
end_define

begin_comment
comment|/*  0x2 Match "" at beginning of line. */
end_comment

begin_define
define|#
directive|define
name|MBOL
value|3
end_define

begin_comment
comment|/*  0x3 Same, assuming multiline. */
end_comment

begin_define
define|#
directive|define
name|SBOL
value|4
end_define

begin_comment
comment|/*  0x4 Same, assuming singleline. */
end_comment

begin_define
define|#
directive|define
name|EOS
value|5
end_define

begin_comment
comment|/*  0x5 Match "" at end of string. */
end_comment

begin_define
define|#
directive|define
name|EOL
value|6
end_define

begin_comment
comment|/*  0x6 Match "" at end of line. */
end_comment

begin_define
define|#
directive|define
name|MEOL
value|7
end_define

begin_comment
comment|/*  0x7 Same, assuming multiline. */
end_comment

begin_define
define|#
directive|define
name|SEOL
value|8
end_define

begin_comment
comment|/*  0x8 Same, assuming singleline. */
end_comment

begin_define
define|#
directive|define
name|BOUND
value|9
end_define

begin_comment
comment|/*  0x9 Match "" at any word boundary */
end_comment

begin_define
define|#
directive|define
name|BOUNDL
value|10
end_define

begin_comment
comment|/*  0xa Match "" at any word boundary */
end_comment

begin_define
define|#
directive|define
name|NBOUND
value|11
end_define

begin_comment
comment|/*  0xb Match "" at any word non-boundary */
end_comment

begin_define
define|#
directive|define
name|NBOUNDL
value|12
end_define

begin_comment
comment|/*  0xc Match "" at any word non-boundary */
end_comment

begin_define
define|#
directive|define
name|GPOS
value|13
end_define

begin_comment
comment|/*  0xd Matches where last m//g left off. */
end_comment

begin_define
define|#
directive|define
name|ANY
value|14
end_define

begin_comment
comment|/*  0xe Match any one character (except newline). */
end_comment

begin_define
define|#
directive|define
name|SANY
value|15
end_define

begin_comment
comment|/*  0xf Match any one character. */
end_comment

begin_define
define|#
directive|define
name|ANYOF
value|16
end_define

begin_comment
comment|/* 0x10 Match character in (or not in) this class. */
end_comment

begin_define
define|#
directive|define
name|ALNUM
value|17
end_define

begin_comment
comment|/* 0x11 Match any alphanumeric character */
end_comment

begin_define
define|#
directive|define
name|ALNUML
value|18
end_define

begin_comment
comment|/* 0x12 Match any alphanumeric char in locale */
end_comment

begin_define
define|#
directive|define
name|NALNUM
value|19
end_define

begin_comment
comment|/* 0x13 Match any non-alphanumeric character */
end_comment

begin_define
define|#
directive|define
name|NALNUML
value|20
end_define

begin_comment
comment|/* 0x14 Match any non-alphanumeric char in locale */
end_comment

begin_define
define|#
directive|define
name|SPACE
value|21
end_define

begin_comment
comment|/* 0x15 Match any whitespace character */
end_comment

begin_define
define|#
directive|define
name|SPACEL
value|22
end_define

begin_comment
comment|/* 0x16 Match any whitespace char in locale */
end_comment

begin_define
define|#
directive|define
name|NSPACE
value|23
end_define

begin_comment
comment|/* 0x17 Match any non-whitespace character */
end_comment

begin_define
define|#
directive|define
name|NSPACEL
value|24
end_define

begin_comment
comment|/* 0x18 Match any non-whitespace char in locale */
end_comment

begin_define
define|#
directive|define
name|DIGIT
value|25
end_define

begin_comment
comment|/* 0x19 Match any numeric character */
end_comment

begin_define
define|#
directive|define
name|NDIGIT
value|26
end_define

begin_comment
comment|/* 0x1a Match any non-numeric character */
end_comment

begin_define
define|#
directive|define
name|BRANCH
value|27
end_define

begin_comment
comment|/* 0x1b Match this alternative, or the next... */
end_comment

begin_define
define|#
directive|define
name|BACK
value|28
end_define

begin_comment
comment|/* 0x1c Match "", "next" ptr points backward. */
end_comment

begin_define
define|#
directive|define
name|EXACT
value|29
end_define

begin_comment
comment|/* 0x1d Match this string (preceded by length). */
end_comment

begin_define
define|#
directive|define
name|EXACTF
value|30
end_define

begin_comment
comment|/* 0x1e Match this string, folded (prec. by length). */
end_comment

begin_define
define|#
directive|define
name|EXACTFL
value|31
end_define

begin_comment
comment|/* 0x1f Match this string, folded in locale (w/len). */
end_comment

begin_define
define|#
directive|define
name|NOTHING
value|32
end_define

begin_comment
comment|/* 0x20 Match empty string. */
end_comment

begin_define
define|#
directive|define
name|TAIL
value|33
end_define

begin_comment
comment|/* 0x21 Match empty string. Can jump here from outside. */
end_comment

begin_define
define|#
directive|define
name|STAR
value|34
end_define

begin_comment
comment|/* 0x22 Match this (simple) thing 0 or more times. */
end_comment

begin_define
define|#
directive|define
name|PLUS
value|35
end_define

begin_comment
comment|/* 0x23 Match this (simple) thing 1 or more times. */
end_comment

begin_define
define|#
directive|define
name|CURLY
value|36
end_define

begin_comment
comment|/* 0x24 Match this simple thing {n,m} times. */
end_comment

begin_define
define|#
directive|define
name|CURLYN
value|37
end_define

begin_comment
comment|/* 0x25 Match next-after-this simple thing  */
end_comment

begin_define
define|#
directive|define
name|CURLYM
value|38
end_define

begin_comment
comment|/* 0x26 Match this medium-complex thing {n,m} times. */
end_comment

begin_define
define|#
directive|define
name|CURLYX
value|39
end_define

begin_comment
comment|/* 0x27 Match this complex thing {n,m} times. */
end_comment

begin_define
define|#
directive|define
name|WHILEM
value|40
end_define

begin_comment
comment|/* 0x28 Do curly processing and see if rest matches. */
end_comment

begin_define
define|#
directive|define
name|OPEN
value|41
end_define

begin_comment
comment|/* 0x29 Mark this point in input as start of #n. */
end_comment

begin_define
define|#
directive|define
name|CLOSE
value|42
end_define

begin_comment
comment|/* 0x2a Analogous to OPEN. */
end_comment

begin_define
define|#
directive|define
name|REF
value|43
end_define

begin_comment
comment|/* 0x2b Match some already matched string */
end_comment

begin_define
define|#
directive|define
name|REFF
value|44
end_define

begin_comment
comment|/* 0x2c Match already matched string, folded */
end_comment

begin_define
define|#
directive|define
name|REFFL
value|45
end_define

begin_comment
comment|/* 0x2d Match already matched string, folded in loc. */
end_comment

begin_define
define|#
directive|define
name|IFMATCH
value|46
end_define

begin_comment
comment|/* 0x2e Succeeds if the following matches. */
end_comment

begin_define
define|#
directive|define
name|UNLESSM
value|47
end_define

begin_comment
comment|/* 0x2f Fails if the following matches. */
end_comment

begin_define
define|#
directive|define
name|SUSPEND
value|48
end_define

begin_comment
comment|/* 0x30 "Independent" sub-RE. */
end_comment

begin_define
define|#
directive|define
name|IFTHEN
value|49
end_define

begin_comment
comment|/* 0x31 Switch, should be preceeded by switcher . */
end_comment

begin_define
define|#
directive|define
name|GROUPP
value|50
end_define

begin_comment
comment|/* 0x32 Whether the group matched. */
end_comment

begin_define
define|#
directive|define
name|LONGJMP
value|51
end_define

begin_comment
comment|/* 0x33 Jump far away. */
end_comment

begin_define
define|#
directive|define
name|BRANCHJ
value|52
end_define

begin_comment
comment|/* 0x34 BRANCH with long offset. */
end_comment

begin_define
define|#
directive|define
name|EVAL
value|53
end_define

begin_comment
comment|/* 0x35 Execute some Perl code. */
end_comment

begin_define
define|#
directive|define
name|MINMOD
value|54
end_define

begin_comment
comment|/* 0x36 Next operator is not greedy. */
end_comment

begin_define
define|#
directive|define
name|LOGICAL
value|55
end_define

begin_comment
comment|/* 0x37 Next opcode should set the flag only. */
end_comment

begin_define
define|#
directive|define
name|RENUM
value|56
end_define

begin_comment
comment|/* 0x38 Group with independently numbered parens. */
end_comment

begin_define
define|#
directive|define
name|OPTIMIZED
value|57
end_define

begin_comment
comment|/* 0x39 Placeholder for dump. */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DOINIT
end_ifndef

begin_decl_stmt
name|EXTCONST
name|U8
name|regkind
index|[]
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|EXTCONST
name|U8
name|regkind
index|[]
init|=
block|{
name|END
block|,
comment|/* END */
name|END
block|,
comment|/* SUCCEED */
name|BOL
block|,
comment|/* BOL */
name|BOL
block|,
comment|/* MBOL */
name|BOL
block|,
comment|/* SBOL */
name|EOL
block|,
comment|/* EOS */
name|EOL
block|,
comment|/* EOL */
name|EOL
block|,
comment|/* MEOL */
name|EOL
block|,
comment|/* SEOL */
name|BOUND
block|,
comment|/* BOUND */
name|BOUND
block|,
comment|/* BOUNDL */
name|NBOUND
block|,
comment|/* NBOUND */
name|NBOUND
block|,
comment|/* NBOUNDL */
name|GPOS
block|,
comment|/* GPOS */
name|ANY
block|,
comment|/* ANY */
name|ANY
block|,
comment|/* SANY */
name|ANYOF
block|,
comment|/* ANYOF */
name|ALNUM
block|,
comment|/* ALNUM */
name|ALNUM
block|,
comment|/* ALNUML */
name|NALNUM
block|,
comment|/* NALNUM */
name|NALNUM
block|,
comment|/* NALNUML */
name|SPACE
block|,
comment|/* SPACE */
name|SPACE
block|,
comment|/* SPACEL */
name|NSPACE
block|,
comment|/* NSPACE */
name|NSPACE
block|,
comment|/* NSPACEL */
name|DIGIT
block|,
comment|/* DIGIT */
name|NDIGIT
block|,
comment|/* NDIGIT */
name|BRANCH
block|,
comment|/* BRANCH */
name|BACK
block|,
comment|/* BACK */
name|EXACT
block|,
comment|/* EXACT */
name|EXACT
block|,
comment|/* EXACTF */
name|EXACT
block|,
comment|/* EXACTFL */
name|NOTHING
block|,
comment|/* NOTHING */
name|NOTHING
block|,
comment|/* TAIL */
name|STAR
block|,
comment|/* STAR */
name|PLUS
block|,
comment|/* PLUS */
name|CURLY
block|,
comment|/* CURLY */
name|CURLY
block|,
comment|/* CURLYN */
name|CURLY
block|,
comment|/* CURLYM */
name|CURLY
block|,
comment|/* CURLYX */
name|WHILEM
block|,
comment|/* WHILEM */
name|OPEN
block|,
comment|/* OPEN */
name|CLOSE
block|,
comment|/* CLOSE */
name|REF
block|,
comment|/* REF */
name|REF
block|,
comment|/* REFF */
name|REF
block|,
comment|/* REFFL */
name|BRANCHJ
block|,
comment|/* IFMATCH */
name|BRANCHJ
block|,
comment|/* UNLESSM */
name|BRANCHJ
block|,
comment|/* SUSPEND */
name|BRANCHJ
block|,
comment|/* IFTHEN */
name|GROUPP
block|,
comment|/* GROUPP */
name|LONGJMP
block|,
comment|/* LONGJMP */
name|BRANCHJ
block|,
comment|/* BRANCHJ */
name|EVAL
block|,
comment|/* EVAL */
name|MINMOD
block|,
comment|/* MINMOD */
name|LOGICAL
block|,
comment|/* LOGICAL */
name|BRANCHJ
block|,
comment|/* RENUM */
name|NOTHING
block|,
comment|/* OPTIMIZED */
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|REG_COMP_C
end_ifdef

begin_decl_stmt
specifier|const
specifier|static
name|U8
name|regarglen
index|[]
init|=
block|{
literal|0
block|,
comment|/* END */
literal|0
block|,
comment|/* SUCCEED */
literal|0
block|,
comment|/* BOL */
literal|0
block|,
comment|/* MBOL */
literal|0
block|,
comment|/* SBOL */
literal|0
block|,
comment|/* EOS */
literal|0
block|,
comment|/* EOL */
literal|0
block|,
comment|/* MEOL */
literal|0
block|,
comment|/* SEOL */
literal|0
block|,
comment|/* BOUND */
literal|0
block|,
comment|/* BOUNDL */
literal|0
block|,
comment|/* NBOUND */
literal|0
block|,
comment|/* NBOUNDL */
literal|0
block|,
comment|/* GPOS */
literal|0
block|,
comment|/* ANY */
literal|0
block|,
comment|/* SANY */
literal|0
block|,
comment|/* ANYOF */
literal|0
block|,
comment|/* ALNUM */
literal|0
block|,
comment|/* ALNUML */
literal|0
block|,
comment|/* NALNUM */
literal|0
block|,
comment|/* NALNUML */
literal|0
block|,
comment|/* SPACE */
literal|0
block|,
comment|/* SPACEL */
literal|0
block|,
comment|/* NSPACE */
literal|0
block|,
comment|/* NSPACEL */
literal|0
block|,
comment|/* DIGIT */
literal|0
block|,
comment|/* NDIGIT */
literal|0
block|,
comment|/* BRANCH */
literal|0
block|,
comment|/* BACK */
literal|0
block|,
comment|/* EXACT */
literal|0
block|,
comment|/* EXACTF */
literal|0
block|,
comment|/* EXACTFL */
literal|0
block|,
comment|/* NOTHING */
literal|0
block|,
comment|/* TAIL */
literal|0
block|,
comment|/* STAR */
literal|0
block|,
comment|/* PLUS */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_2
argument_list|)
block|,
comment|/* CURLY */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_2
argument_list|)
block|,
comment|/* CURLYN */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_2
argument_list|)
block|,
comment|/* CURLYM */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_2
argument_list|)
block|,
comment|/* CURLYX */
literal|0
block|,
comment|/* WHILEM */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* OPEN */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* CLOSE */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* REF */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* REFF */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* REFFL */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* IFMATCH */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* UNLESSM */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* SUSPEND */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* IFTHEN */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* GROUPP */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* LONGJMP */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* BRANCHJ */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* EVAL */
literal|0
block|,
comment|/* MINMOD */
literal|0
block|,
comment|/* LOGICAL */
name|EXTRA_SIZE
argument_list|(
expr|struct
name|regnode_1
argument_list|)
block|,
comment|/* RENUM */
literal|0
block|,
comment|/* OPTIMIZED */
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
specifier|static
name|char
name|reg_off_by_arg
index|[]
init|=
block|{
literal|0
block|,
comment|/* END */
literal|0
block|,
comment|/* SUCCEED */
literal|0
block|,
comment|/* BOL */
literal|0
block|,
comment|/* MBOL */
literal|0
block|,
comment|/* SBOL */
literal|0
block|,
comment|/* EOS */
literal|0
block|,
comment|/* EOL */
literal|0
block|,
comment|/* MEOL */
literal|0
block|,
comment|/* SEOL */
literal|0
block|,
comment|/* BOUND */
literal|0
block|,
comment|/* BOUNDL */
literal|0
block|,
comment|/* NBOUND */
literal|0
block|,
comment|/* NBOUNDL */
literal|0
block|,
comment|/* GPOS */
literal|0
block|,
comment|/* ANY */
literal|0
block|,
comment|/* SANY */
literal|0
block|,
comment|/* ANYOF */
literal|0
block|,
comment|/* ALNUM */
literal|0
block|,
comment|/* ALNUML */
literal|0
block|,
comment|/* NALNUM */
literal|0
block|,
comment|/* NALNUML */
literal|0
block|,
comment|/* SPACE */
literal|0
block|,
comment|/* SPACEL */
literal|0
block|,
comment|/* NSPACE */
literal|0
block|,
comment|/* NSPACEL */
literal|0
block|,
comment|/* DIGIT */
literal|0
block|,
comment|/* NDIGIT */
literal|0
block|,
comment|/* BRANCH */
literal|0
block|,
comment|/* BACK */
literal|0
block|,
comment|/* EXACT */
literal|0
block|,
comment|/* EXACTF */
literal|0
block|,
comment|/* EXACTFL */
literal|0
block|,
comment|/* NOTHING */
literal|0
block|,
comment|/* TAIL */
literal|0
block|,
comment|/* STAR */
literal|0
block|,
comment|/* PLUS */
literal|0
block|,
comment|/* CURLY */
literal|0
block|,
comment|/* CURLYN */
literal|0
block|,
comment|/* CURLYM */
literal|0
block|,
comment|/* CURLYX */
literal|0
block|,
comment|/* WHILEM */
literal|0
block|,
comment|/* OPEN */
literal|0
block|,
comment|/* CLOSE */
literal|0
block|,
comment|/* REF */
literal|0
block|,
comment|/* REFF */
literal|0
block|,
comment|/* REFFL */
literal|2
block|,
comment|/* IFMATCH */
literal|2
block|,
comment|/* UNLESSM */
literal|1
block|,
comment|/* SUSPEND */
literal|1
block|,
comment|/* IFTHEN */
literal|0
block|,
comment|/* GROUPP */
literal|1
block|,
comment|/* LONGJMP */
literal|1
block|,
comment|/* BRANCHJ */
literal|0
block|,
comment|/* EVAL */
literal|0
block|,
comment|/* MINMOD */
literal|0
block|,
comment|/* LOGICAL */
literal|1
block|,
comment|/* RENUM */
literal|0
block|,
comment|/* OPTIMIZED */
block|}
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* REG_COMP_C */
end_comment

end_unit

