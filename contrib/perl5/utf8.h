begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*    utf8.h  *  *    Copyright (c) 1998-2001, Larry Wall  *  *    You may distribute under the terms of either the GNU General Public  *    License or the Artistic License, as specified in the README file.  *  */
end_comment

begin_decl_stmt
name|START_EXTERN_C
ifdef|#
directive|ifdef
name|DOINIT
name|EXTCONST
name|unsigned
name|char
name|PL_utf8skip
index|[]
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* ascii */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* ascii */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* ascii */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* ascii */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* bogus */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* bogus */
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
comment|/* scripts */
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
comment|/* cjk etc. */
literal|7
block|,
literal|13
block|,
comment|/* Perl extended (not UTF-8).  Up to 72bit allowed (64-bit + reserved). */
block|}
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|EXTCONST
name|unsigned
name|char
name|PL_utf8skip
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|END_EXTERN_C
end_macro

begin_define
define|#
directive|define
name|UTF8_MAXLEN
value|13
end_define

begin_comment
comment|/* how wide can a single UTF8 encoded character become */
end_comment

begin_comment
comment|/* #define IN_UTF8 (PL_curcop->op_private& HINT_UTF8) */
end_comment

begin_define
define|#
directive|define
name|IN_BYTE
value|(PL_curcop->op_private& HINT_BYTE)
end_define

begin_define
define|#
directive|define
name|DO_UTF8
parameter_list|(
name|sv
parameter_list|)
value|(SvUTF8(sv)&& !IN_BYTE)
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_EMPTY
value|0x0001
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_CONTINUATION
value|0x0002
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_NON_CONTINUATION
value|0x0004
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_FE_FF
value|0x0008
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_SHORT
value|0x0010
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_SURROGATE
value|0x0020
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_BOM
value|0x0040
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_FFFF
value|0x0080
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_LONG
value|0x0100
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_ANYUV
value|(UTF8_ALLOW_EMPTY|UTF8_ALLOW_FE_FF|\ 					 UTF8_ALLOW_SURROGATE|UTF8_ALLOW_BOM|\ 					 UTF8_ALLOW_FFFF|UTF8_ALLOW_LONG)
end_define

begin_define
define|#
directive|define
name|UTF8_ALLOW_ANY
value|0x00ff
end_define

begin_define
define|#
directive|define
name|UTF8_CHECK_ONLY
value|0x0100
end_define

begin_define
define|#
directive|define
name|UNICODE_SURROGATE_FIRST
value|0xd800
end_define

begin_define
define|#
directive|define
name|UNICODE_SURROGATE_LAST
value|0xdfff
end_define

begin_define
define|#
directive|define
name|UNICODE_REPLACEMENT
value|0xfffd
end_define

begin_define
define|#
directive|define
name|UNICODE_BYTER_ORDER_MARK
value|0xfffe
end_define

begin_define
define|#
directive|define
name|UNICODE_ILLEGAL
value|0xffff
end_define

begin_define
define|#
directive|define
name|UNICODE_IS_SURROGATE
parameter_list|(
name|c
parameter_list|)
value|((c)>= UNICODE_SURROGATE_FIRST&& \ 					 (c)<= UNICODE_SURROGATE_LAST)
end_define

begin_define
define|#
directive|define
name|UNICODE_IS_REPLACEMENT
parameter_list|(
name|c
parameter_list|)
value|((c) == UNICODE_REPLACMENT)
end_define

begin_define
define|#
directive|define
name|UNICODE_IS_BYTE_ORDER_MARK
parameter_list|(
name|c
parameter_list|)
value|((c) == UNICODE_BYTER_ORDER_MARK)
end_define

begin_define
define|#
directive|define
name|UNICODE_IS_ILLEGAL
parameter_list|(
name|c
parameter_list|)
value|((c) == UNICODE_ILLEGAL)
end_define

begin_define
define|#
directive|define
name|UTF8SKIP
parameter_list|(
name|s
parameter_list|)
value|PL_utf8skip[*(U8*)s]
end_define

begin_define
define|#
directive|define
name|UTF8_QUAD_MAX
value|UINT64_C(0x1000000000)
end_define

begin_comment
comment|/*    The following table is from Unicode 3.1.   Code Points		1st Byte  2nd Byte  3rd Byte  4th Byte     U+0000..U+007F	00..7F       U+0080..U+07FF	C2..DF    80..BF       U+0800..U+0FFF	E0        A0..BF    80..BF      U+1000..U+FFFF	E1..EF    80..BF    80..BF     U+10000..U+3FFFF	F0        90..BF    80..BF    80..BF   U+40000..U+FFFFF	F1..F3    80..BF    80..BF    80..BF  U+100000..U+10FFFF	F4        80..8F    80..BF    80..BF   */
end_comment

begin_define
define|#
directive|define
name|UTF8_IS_ASCII
parameter_list|(
name|c
parameter_list|)
value|(((U8)c)<  0x80)
end_define

begin_define
define|#
directive|define
name|UTF8_IS_START
parameter_list|(
name|c
parameter_list|)
value|(((U8)c)>= 0xc0&& (((U8)c)<= 0xfd))
end_define

begin_define
define|#
directive|define
name|UTF8_IS_CONTINUATION
parameter_list|(
name|c
parameter_list|)
value|(((U8)c)>= 0x80&& (((U8)c)<= 0xbf))
end_define

begin_define
define|#
directive|define
name|UTF8_IS_CONTINUED
parameter_list|(
name|c
parameter_list|)
value|(((U8)c)&  0x80)
end_define

begin_define
define|#
directive|define
name|UTF8_IS_DOWNGRADEABLE_START
parameter_list|(
name|c
parameter_list|)
value|(((U8)c& 0xfc) != 0xc0)
end_define

begin_define
define|#
directive|define
name|UTF8_CONTINUATION_MASK
value|((U8)0x3f)
end_define

begin_define
define|#
directive|define
name|UTF8_ACCUMULATION_SHIFT
value|6
end_define

begin_define
define|#
directive|define
name|UTF8_ACCUMULATE
parameter_list|(
name|old
parameter_list|,
name|new
parameter_list|)
value|(((old)<< UTF8_ACCUMULATION_SHIFT) | (((U8)new)& UTF8_CONTINUATION_MASK))
end_define

begin_define
define|#
directive|define
name|UTF8_EIGHT_BIT_HI
parameter_list|(
name|c
parameter_list|)
value|( (((U8)(c))>>6)      |0xc0)
end_define

begin_define
define|#
directive|define
name|UTF8_EIGHT_BIT_LO
parameter_list|(
name|c
parameter_list|)
value|(((((U8)(c))   )&0x3f)|0x80)
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|HAS_QUAD
end_ifdef

begin_define
define|#
directive|define
name|UNISKIP
parameter_list|(
name|uv
parameter_list|)
value|( (uv)< 0x80           ? 1 : \ 		      (uv)< 0x800          ? 2 : \ 		      (uv)< 0x10000        ? 3 : \ 		      (uv)< 0x200000       ? 4 : \ 		      (uv)< 0x4000000      ? 5 : \ 		      (uv)< 0x80000000     ? 6 : \                       (uv)< UTF8_QUAD_MAX ? 7 : 13 )
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* No, I'm not even going to *TRY* putting #ifdef inside a #define */
end_comment

begin_define
define|#
directive|define
name|UNISKIP
parameter_list|(
name|uv
parameter_list|)
value|( (uv)< 0x80           ? 1 : \ 		      (uv)< 0x800          ? 2 : \ 		      (uv)< 0x10000        ? 3 : \ 		      (uv)< 0x200000       ? 4 : \ 		      (uv)< 0x4000000      ? 5 : \ 		      (uv)< 0x80000000     ? 6 : 7 )
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Note: we try to be careful never to call the isXXX_utf8() functions  * unless we're pretty sure we've seen the beginning of a UTF-8 character  * (that is, the two high bits are set).  Otherwise we risk loading in the  * heavy-duty SWASHINIT and SWASHGET routines unnecessarily.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|EBCDIC
end_ifdef

begin_define
define|#
directive|define
name|isIDFIRST_lazy_if
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
value|isIDFIRST(*(p))
end_define

begin_define
define|#
directive|define
name|isALNUM_lazy_if
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
value|isALNUM(*(p))
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|isIDFIRST_lazy_if
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
value|((IN_BYTE || (!c || (*((U8*)p)< 0xc0))) \ 				? isIDFIRST(*(p)) \ 				: isIDFIRST_utf8((U8*)p))
end_define

begin_define
define|#
directive|define
name|isALNUM_lazy_if
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
value|((IN_BYTE || (!c || (*((U8*)p)< 0xc0))) \ 				? isALNUM(*(p)) \ 				: isALNUM_utf8((U8*)p))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|isIDFIRST_lazy
parameter_list|(
name|p
parameter_list|)
value|isIDFIRST_lazy_if(p,1)
end_define

begin_define
define|#
directive|define
name|isALNUM_lazy
parameter_list|(
name|p
parameter_list|)
value|isALNUM_lazy_if(p,1)
end_define

end_unit

