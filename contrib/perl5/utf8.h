begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*    utf8.h  *  *    Copyright (c) 1998-2000, Larry Wall  *  *    You may distribute under the terms of either the GNU General Public  *    License or the Artistic License, as specified in the README file.  *  */
end_comment

begin_decl_stmt
name|START_EXTERN_C
ifdef|#
directive|ifdef
name|DOINIT
name|EXTCONST
name|unsigned
name|char
name|PL_utf8skip
index|[]
init|=
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* ascii */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* ascii */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* ascii */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* ascii */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* bogus */
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
comment|/* bogus */
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
literal|2
block|,
comment|/* scripts */
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|3
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|4
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|5
block|,
literal|6
block|,
literal|6
block|,
comment|/* cjk etc. */
literal|7
block|,
literal|13
block|,
comment|/* Perl extended (not UTF-8).  Up to 72bit allowed (64-bit + reserved). */
block|}
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
name|EXTCONST
name|unsigned
name|char
name|PL_utf8skip
index|[]
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|END_EXTERN_C
end_macro

begin_define
define|#
directive|define
name|UTF8_MAXLEN
value|13
end_define

begin_comment
comment|/* how wide can a single UTF8 encoded character become */
end_comment

begin_comment
comment|/*#define IN_UTF8 (PL_curcop->op_private& HINT_UTF8)*/
end_comment

begin_define
define|#
directive|define
name|IN_BYTE
value|(PL_curcop->op_private& HINT_BYTE)
end_define

begin_define
define|#
directive|define
name|DO_UTF8
parameter_list|(
name|sv
parameter_list|)
value|(SvUTF8(sv)&& !IN_BYTE)
end_define

begin_define
define|#
directive|define
name|UTF8SKIP
parameter_list|(
name|s
parameter_list|)
value|PL_utf8skip[*(U8*)s]
end_define

begin_comment
comment|/*  * Note: we try to be careful never to call the isXXX_utf8() functions  * unless we're pretty sure we've seen the beginning of a UTF-8 character  * (that is, the two high bits are set).  Otherwise we risk loading in the  * heavy-duty SWASHINIT and SWASHGET routines unnecessarily.  */
end_comment

begin_define
define|#
directive|define
name|isIDFIRST_lazy_if
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
value|((!c || (*((U8*)p)< 0xc0)) \ 				? isIDFIRST(*(p)) \ 				: isIDFIRST_utf8((U8*)p))
end_define

begin_define
define|#
directive|define
name|isALNUM_lazy_if
parameter_list|(
name|p
parameter_list|,
name|c
parameter_list|)
value|((!c || (*((U8*)p)< 0xc0)) \ 				? isALNUM(*(p)) \ 				: isALNUM_utf8((U8*)p))
end_define

begin_define
define|#
directive|define
name|isIDFIRST_lazy
parameter_list|(
name|p
parameter_list|)
value|isIDFIRST_lazy_if(p,1)
end_define

begin_define
define|#
directive|define
name|isALNUM_lazy
parameter_list|(
name|p
parameter_list|)
value|isALNUM_lazy_if(p,1)
end_define

end_unit

