begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * IEEE 802.1X-2010 Key Agree Protocol of PAE state machine  * Copyright (c) 2013, Qualcomm Atheros, Inc.  *  * This software may be distributed under the terms of the BSD license.  * See README for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|IEEE802_1X_KAY_I_H
end_ifndef

begin_define
define|#
directive|define
name|IEEE802_1X_KAY_I_H
end_define

begin_include
include|#
directive|include
file|"utils/list.h"
end_include

begin_include
include|#
directive|include
file|"common/defs.h"
end_include

begin_include
include|#
directive|include
file|"common/ieee802_1x_defs.h"
end_include

begin_define
define|#
directive|define
name|MKA_VERSION_ID
value|1
end_define

begin_comment
comment|/* IEEE Std 802.1X-2010, 11.11.1, Table 11-7 */
end_comment

begin_enum
enum|enum
name|mka_packet_type
block|{
name|MKA_BASIC_PARAMETER_SET
init|=
name|MKA_VERSION_ID
block|,
name|MKA_LIVE_PEER_LIST
init|=
literal|1
block|,
name|MKA_POTENTIAL_PEER_LIST
init|=
literal|2
block|,
name|MKA_SAK_USE
init|=
literal|3
block|,
name|MKA_DISTRIBUTED_SAK
init|=
literal|4
block|,
name|MKA_DISTRIBUTED_CAK
init|=
literal|5
block|,
name|MKA_KMD
init|=
literal|6
block|,
name|MKA_ANNOUNCEMENT
init|=
literal|7
block|,
name|MKA_ICV_INDICATOR
init|=
literal|255
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|ICV_LEN
value|16
end_define

begin_comment
comment|/* 16 bytes */
end_comment

begin_define
define|#
directive|define
name|SAK_WRAPPED_LEN
value|24
end_define

begin_comment
comment|/* KN + Wrapper SAK */
end_comment

begin_define
define|#
directive|define
name|DEFAULT_DIS_SAK_BODY_LENGTH
value|(SAK_WRAPPED_LEN + 4)
end_define

begin_define
define|#
directive|define
name|MAX_RETRY_CNT
value|5
end_define

begin_struct_decl
struct_decl|struct
name|ieee802_1x_kay
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|ieee802_1x_mka_peer_id
block|{
name|u8
name|mi
index|[
name|MI_LEN
index|]
decl_stmt|;
name|u32
name|mn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ieee802_1x_kay_peer
block|{
name|struct
name|ieee802_1x_mka_sci
name|sci
decl_stmt|;
name|u8
name|mi
index|[
name|MI_LEN
index|]
decl_stmt|;
name|u32
name|mn
decl_stmt|;
name|time_t
name|expire
decl_stmt|;
name|Boolean
name|is_key_server
decl_stmt|;
name|u8
name|key_server_priority
decl_stmt|;
name|Boolean
name|macsec_desired
decl_stmt|;
name|enum
name|macsec_cap
name|macsec_capbility
decl_stmt|;
name|Boolean
name|sak_used
decl_stmt|;
name|struct
name|dl_list
name|list
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|key_conf
block|{
name|u8
modifier|*
name|key
decl_stmt|;
name|struct
name|ieee802_1x_mka_ki
name|ki
decl_stmt|;
name|enum
name|confidentiality_offset
name|offset
decl_stmt|;
name|u8
name|an
decl_stmt|;
name|Boolean
name|tx
decl_stmt|;
name|Boolean
name|rx
decl_stmt|;
name|int
name|key_len
decl_stmt|;
comment|/* unit: byte */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|data_key
block|{
name|u8
modifier|*
name|key
decl_stmt|;
name|int
name|key_len
decl_stmt|;
name|struct
name|ieee802_1x_mka_ki
name|key_identifier
decl_stmt|;
name|enum
name|confidentiality_offset
name|confidentiality_offset
decl_stmt|;
name|u8
name|an
decl_stmt|;
name|Boolean
name|transmits
decl_stmt|;
name|Boolean
name|receives
decl_stmt|;
name|struct
name|os_time
name|created_time
decl_stmt|;
name|u32
name|next_pn
decl_stmt|;
comment|/* not defined data */
name|Boolean
name|rx_latest
decl_stmt|;
name|Boolean
name|tx_latest
decl_stmt|;
name|int
name|user
decl_stmt|;
comment|/* FIXME: to indicate if it can be delete safely */
name|struct
name|dl_list
name|list
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* TransmitSC in IEEE Std 802.1AE-2006, Figure 10-6 */
end_comment

begin_struct
struct|struct
name|transmit_sc
block|{
name|struct
name|ieee802_1x_mka_sci
name|sci
decl_stmt|;
comment|/* const SCI sci */
name|Boolean
name|transmitting
decl_stmt|;
comment|/* bool transmitting (read only) */
name|struct
name|os_time
name|created_time
decl_stmt|;
comment|/* Time createdTime */
name|u8
name|encoding_sa
decl_stmt|;
comment|/* AN encodingSA (read only) */
name|u8
name|enciphering_sa
decl_stmt|;
comment|/* AN encipheringSA (read only) */
comment|/* not defined data */
name|unsigned
name|int
name|channel
decl_stmt|;
name|struct
name|dl_list
name|list
decl_stmt|;
name|struct
name|dl_list
name|sa_list
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* TransmitSA in IEEE Std 802.1AE-2006, Figure 10-6 */
end_comment

begin_struct
struct|struct
name|transmit_sa
block|{
name|Boolean
name|in_use
decl_stmt|;
comment|/* bool inUse (read only) */
name|u32
name|next_pn
decl_stmt|;
comment|/* PN nextPN (read only) */
name|struct
name|os_time
name|created_time
decl_stmt|;
comment|/* Time createdTime */
name|Boolean
name|enable_transmit
decl_stmt|;
comment|/* bool EnableTransmit */
name|u8
name|an
decl_stmt|;
name|Boolean
name|confidentiality
decl_stmt|;
name|struct
name|data_key
modifier|*
name|pkey
decl_stmt|;
name|struct
name|transmit_sc
modifier|*
name|sc
decl_stmt|;
name|struct
name|dl_list
name|list
decl_stmt|;
comment|/* list entry in struct transmit_sc::sa_list */
block|}
struct|;
end_struct

begin_comment
comment|/* ReceiveSC in IEEE Std 802.1AE-2006, Figure 10-6 */
end_comment

begin_struct
struct|struct
name|receive_sc
block|{
name|struct
name|ieee802_1x_mka_sci
name|sci
decl_stmt|;
comment|/* const SCI sci */
name|Boolean
name|receiving
decl_stmt|;
comment|/* bool receiving (read only) */
name|struct
name|os_time
name|created_time
decl_stmt|;
comment|/* Time createdTime */
name|unsigned
name|int
name|channel
decl_stmt|;
name|struct
name|dl_list
name|list
decl_stmt|;
name|struct
name|dl_list
name|sa_list
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* ReceiveSA in IEEE Std 802.1AE-2006, Figure 10-6 */
end_comment

begin_struct
struct|struct
name|receive_sa
block|{
name|Boolean
name|enable_receive
decl_stmt|;
comment|/* bool enableReceive */
name|Boolean
name|in_use
decl_stmt|;
comment|/* bool inUse (read only) */
name|u32
name|next_pn
decl_stmt|;
comment|/* PN nextPN (read only) */
name|u32
name|lowest_pn
decl_stmt|;
comment|/* PN lowestPN (read only) */
name|u8
name|an
decl_stmt|;
name|struct
name|os_time
name|created_time
decl_stmt|;
name|struct
name|data_key
modifier|*
name|pkey
decl_stmt|;
name|struct
name|receive_sc
modifier|*
name|sc
decl_stmt|;
comment|/* list entry in struct receive_sc::sa_list */
name|struct
name|dl_list
name|list
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|macsec_ciphersuite
block|{
name|u8
name|id
index|[
name|CS_ID_LEN
index|]
decl_stmt|;
name|char
name|name
index|[
literal|32
index|]
decl_stmt|;
name|enum
name|macsec_cap
name|capable
decl_stmt|;
name|int
name|sak_len
decl_stmt|;
comment|/* unit: byte */
name|u32
name|index
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|mka_alg
block|{
name|u8
name|parameter
index|[
literal|4
index|]
decl_stmt|;
name|size_t
name|cak_len
decl_stmt|;
name|size_t
name|kek_len
decl_stmt|;
name|size_t
name|ick_len
decl_stmt|;
name|size_t
name|icv_len
decl_stmt|;
name|int
function_decl|(
modifier|*
name|cak_trfm
function_decl|)
parameter_list|(
specifier|const
name|u8
modifier|*
name|msk
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac1
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac2
parameter_list|,
name|u8
modifier|*
name|cak
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ckn_trfm
function_decl|)
parameter_list|(
specifier|const
name|u8
modifier|*
name|msk
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac1
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac2
parameter_list|,
specifier|const
name|u8
modifier|*
name|sid
parameter_list|,
name|size_t
name|sid_len
parameter_list|,
name|u8
modifier|*
name|ckn
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|kek_trfm
function_decl|)
parameter_list|(
specifier|const
name|u8
modifier|*
name|cak
parameter_list|,
specifier|const
name|u8
modifier|*
name|ckn
parameter_list|,
name|size_t
name|ckn_len
parameter_list|,
name|u8
modifier|*
name|kek
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ick_trfm
function_decl|)
parameter_list|(
specifier|const
name|u8
modifier|*
name|cak
parameter_list|,
specifier|const
name|u8
modifier|*
name|ckn
parameter_list|,
name|size_t
name|ckn_len
parameter_list|,
name|u8
modifier|*
name|ick
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|icv_hash
function_decl|)
parameter_list|(
specifier|const
name|u8
modifier|*
name|ick
parameter_list|,
specifier|const
name|u8
modifier|*
name|msg
parameter_list|,
name|size_t
name|msg_len
parameter_list|,
name|u8
modifier|*
name|icv
parameter_list|)
function_decl|;
name|int
name|index
decl_stmt|;
comment|/* index for configuring */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|DEFAULT_MKA_ALG_INDEX
value|0
end_define

begin_comment
comment|/* See IEEE Std 802.1X-2010, 9.16 MKA management */
end_comment

begin_struct
struct|struct
name|ieee802_1x_mka_participant
block|{
comment|/* used for active and potential participant */
name|struct
name|mka_key_name
name|ckn
decl_stmt|;
name|struct
name|mka_key
name|cak
decl_stmt|;
name|Boolean
name|cached
decl_stmt|;
comment|/* used by management to monitor and control activation */
name|Boolean
name|active
decl_stmt|;
name|Boolean
name|participant
decl_stmt|;
name|Boolean
name|retain
decl_stmt|;
enum|enum
block|{
name|DEFAULT
block|,
name|DISABLED
block|,
name|ON_OPER_UP
block|,
name|ALWAYS
block|}
name|activate
enum|;
comment|/* used for active participant */
name|Boolean
name|principal
decl_stmt|;
name|struct
name|dl_list
name|live_peers
decl_stmt|;
name|struct
name|dl_list
name|potential_peers
decl_stmt|;
comment|/* not defined in IEEE 802.1X */
name|struct
name|dl_list
name|list
decl_stmt|;
name|struct
name|mka_key
name|kek
decl_stmt|;
name|struct
name|mka_key
name|ick
decl_stmt|;
name|struct
name|ieee802_1x_mka_ki
name|lki
decl_stmt|;
name|u8
name|lan
decl_stmt|;
name|Boolean
name|ltx
decl_stmt|;
name|Boolean
name|lrx
decl_stmt|;
name|struct
name|ieee802_1x_mka_ki
name|oki
decl_stmt|;
name|u8
name|oan
decl_stmt|;
name|Boolean
name|otx
decl_stmt|;
name|Boolean
name|orx
decl_stmt|;
name|Boolean
name|is_key_server
decl_stmt|;
name|Boolean
name|is_obliged_key_server
decl_stmt|;
name|Boolean
name|can_be_key_server
decl_stmt|;
name|Boolean
name|is_elected
decl_stmt|;
name|struct
name|dl_list
name|sak_list
decl_stmt|;
name|struct
name|dl_list
name|rxsc_list
decl_stmt|;
name|struct
name|transmit_sc
modifier|*
name|txsc
decl_stmt|;
name|u8
name|mi
index|[
name|MI_LEN
index|]
decl_stmt|;
name|u32
name|mn
decl_stmt|;
name|struct
name|ieee802_1x_mka_peer_id
name|current_peer_id
decl_stmt|;
name|struct
name|ieee802_1x_mka_sci
name|current_peer_sci
decl_stmt|;
name|time_t
name|cak_life
decl_stmt|;
name|time_t
name|mka_life
decl_stmt|;
name|Boolean
name|to_dist_sak
decl_stmt|;
name|Boolean
name|to_use_sak
decl_stmt|;
name|Boolean
name|new_sak
decl_stmt|;
name|Boolean
name|advised_desired
decl_stmt|;
name|enum
name|macsec_cap
name|advised_capability
decl_stmt|;
name|struct
name|data_key
modifier|*
name|new_key
decl_stmt|;
name|u32
name|retry_count
decl_stmt|;
name|struct
name|ieee802_1x_kay
modifier|*
name|kay
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ieee802_1x_mka_hdr
block|{
comment|/* octet 1 */
name|u32
name|type
range|:
literal|8
decl_stmt|;
comment|/* octet 2 */
name|u32
name|reserve
range|:
literal|8
decl_stmt|;
comment|/* octet 3 */
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
name|u32
name|length
range|:
literal|4
decl_stmt|;
name|u32
name|reserve1
range|:
literal|4
decl_stmt|;
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|u32
name|reserve1
range|:
literal|4
decl_stmt|;
name|u32
name|length
range|:
literal|4
decl_stmt|;
else|#
directive|else
error|#
directive|error
literal|"Please fix<bits/endian.h>"
endif|#
directive|endif
comment|/* octet 4 */
name|u32
name|length1
range|:
literal|8
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MKA_HDR_LEN
value|sizeof(struct ieee802_1x_mka_hdr)
end_define

begin_struct
struct|struct
name|ieee802_1x_mka_basic_body
block|{
comment|/* octet 1 */
name|u32
name|version
range|:
literal|8
decl_stmt|;
comment|/* octet 2 */
name|u32
name|priority
range|:
literal|8
decl_stmt|;
comment|/* octet 3 */
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
name|u32
name|length
range|:
literal|4
decl_stmt|;
name|u32
name|macsec_capbility
range|:
literal|2
decl_stmt|;
name|u32
name|macsec_desired
range|:
literal|1
decl_stmt|;
name|u32
name|key_server
range|:
literal|1
decl_stmt|;
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|u32
name|key_server
range|:
literal|1
decl_stmt|;
name|u32
name|macsec_desired
range|:
literal|1
decl_stmt|;
name|u32
name|macsec_capbility
range|:
literal|2
decl_stmt|;
name|u32
name|length
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
comment|/* octet 4 */
name|u32
name|length1
range|:
literal|8
decl_stmt|;
name|struct
name|ieee802_1x_mka_sci
name|actor_sci
decl_stmt|;
name|u8
name|actor_mi
index|[
name|MI_LEN
index|]
decl_stmt|;
name|u32
name|actor_mn
decl_stmt|;
name|u8
name|algo_agility
index|[
literal|4
index|]
decl_stmt|;
comment|/* followed by CAK Name*/
name|u8
name|ckn
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ieee802_1x_mka_peer_body
block|{
comment|/* octet 1 */
name|u32
name|type
range|:
literal|8
decl_stmt|;
comment|/* octet 2 */
name|u32
name|reserve
range|:
literal|8
decl_stmt|;
comment|/* octet 3 */
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
name|u32
name|length
range|:
literal|4
decl_stmt|;
name|u32
name|reserve1
range|:
literal|4
decl_stmt|;
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|u32
name|reserve1
range|:
literal|4
decl_stmt|;
name|u32
name|length
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
comment|/* octet 4 */
name|u32
name|length1
range|:
literal|8
decl_stmt|;
name|u8
name|peer
index|[
literal|0
index|]
decl_stmt|;
comment|/* followed by Peers */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ieee802_1x_mka_sak_use_body
block|{
comment|/* octet 1 */
name|u32
name|type
range|:
literal|8
decl_stmt|;
comment|/* octet 2 */
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
name|u32
name|orx
range|:
literal|1
decl_stmt|;
name|u32
name|otx
range|:
literal|1
decl_stmt|;
name|u32
name|oan
range|:
literal|2
decl_stmt|;
name|u32
name|lrx
range|:
literal|1
decl_stmt|;
name|u32
name|ltx
range|:
literal|1
decl_stmt|;
name|u32
name|lan
range|:
literal|2
decl_stmt|;
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|u32
name|lan
range|:
literal|2
decl_stmt|;
name|u32
name|ltx
range|:
literal|1
decl_stmt|;
name|u32
name|lrx
range|:
literal|1
decl_stmt|;
name|u32
name|oan
range|:
literal|2
decl_stmt|;
name|u32
name|otx
range|:
literal|1
decl_stmt|;
name|u32
name|orx
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
comment|/* octet 3 */
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
name|u32
name|length
range|:
literal|4
decl_stmt|;
name|u32
name|delay_protect
range|:
literal|1
decl_stmt|;
name|u32
name|reserve
range|:
literal|1
decl_stmt|;
name|u32
name|prx
range|:
literal|1
decl_stmt|;
name|u32
name|ptx
range|:
literal|1
decl_stmt|;
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|u32
name|ptx
range|:
literal|1
decl_stmt|;
name|u32
name|prx
range|:
literal|1
decl_stmt|;
name|u32
name|reserve
range|:
literal|1
decl_stmt|;
name|u32
name|delay_protect
range|:
literal|1
decl_stmt|;
name|u32
name|length
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
comment|/* octet 4 */
name|u32
name|length1
range|:
literal|8
decl_stmt|;
comment|/* octet 5 - 16 */
name|u8
name|lsrv_mi
index|[
name|MI_LEN
index|]
decl_stmt|;
comment|/* octet 17 - 20 */
name|u32
name|lkn
decl_stmt|;
comment|/* octet 21 - 24 */
name|u32
name|llpn
decl_stmt|;
comment|/* octet 25 - 36 */
name|u8
name|osrv_mi
index|[
name|MI_LEN
index|]
decl_stmt|;
comment|/* octet 37 - 40 */
name|u32
name|okn
decl_stmt|;
comment|/* octet 41 - 44 */
name|u32
name|olpn
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ieee802_1x_mka_dist_sak_body
block|{
comment|/* octet 1 */
name|u32
name|type
range|:
literal|8
decl_stmt|;
comment|/* octet 2 */
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
name|u32
name|reserve
range|:
literal|4
decl_stmt|;
name|u32
name|confid_offset
range|:
literal|2
decl_stmt|;
name|u32
name|dan
range|:
literal|2
decl_stmt|;
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|u32
name|dan
range|:
literal|2
decl_stmt|;
name|u32
name|confid_offset
range|:
literal|2
decl_stmt|;
name|u32
name|reserve
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
comment|/* octet 3 */
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
name|u32
name|length
range|:
literal|4
decl_stmt|;
name|u32
name|reserve1
range|:
literal|4
decl_stmt|;
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|u32
name|reserve1
range|:
literal|4
decl_stmt|;
name|u32
name|length
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
comment|/* octet 4 */
name|u32
name|length1
range|:
literal|8
decl_stmt|;
comment|/* octet 5 - 8 */
name|u32
name|kn
decl_stmt|;
comment|/* for GCM-AES-128: octet 9-32: SAK 	 * for other cipher suite: octet 9-16: cipher suite id, octet 17-: SAK 	 */
name|u8
name|sak
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ieee802_1x_mka_icv_body
block|{
comment|/* octet 1 */
name|u32
name|type
range|:
literal|8
decl_stmt|;
comment|/* octet 2 */
name|u32
name|reserve
range|:
literal|8
decl_stmt|;
comment|/* octet 3 */
if|#
directive|if
name|__BYTE_ORDER
operator|==
name|__LITTLE_ENDIAN
name|u32
name|length
range|:
literal|4
decl_stmt|;
name|u32
name|reserve1
range|:
literal|4
decl_stmt|;
elif|#
directive|elif
name|__BYTE_ORDER
operator|==
name|__BIG_ENDIAN
name|u32
name|reserve1
range|:
literal|4
decl_stmt|;
name|u32
name|length
range|:
literal|4
decl_stmt|;
endif|#
directive|endif
comment|/* octet 4 */
name|u32
name|length1
range|:
literal|8
decl_stmt|;
comment|/* octet 5 - */
name|u8
name|icv
index|[
literal|0
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* IEEE802_1X_KAY_I_H */
end_comment

end_unit

