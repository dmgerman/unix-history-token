begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * EAP peer state machines internal structures (RFC 4137)  * Copyright (c) 2004-2014, Jouni Malinen<j@w1.fi>  *  * This software may be distributed under the terms of the BSD license.  * See README for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EAP_I_H
end_ifndef

begin_define
define|#
directive|define
name|EAP_I_H
end_define

begin_include
include|#
directive|include
file|"wpabuf.h"
end_include

begin_include
include|#
directive|include
file|"utils/list.h"
end_include

begin_include
include|#
directive|include
file|"eap_peer/eap.h"
end_include

begin_include
include|#
directive|include
file|"eap_common/eap_common.h"
end_include

begin_comment
comment|/* RFC 4137 - EAP Peer state machine */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|DECISION_FAIL
block|,
name|DECISION_COND_SUCC
block|,
name|DECISION_UNCOND_SUCC
block|}
name|EapDecision
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|METHOD_NONE
block|,
name|METHOD_INIT
block|,
name|METHOD_CONT
block|,
name|METHOD_MAY_CONT
block|,
name|METHOD_DONE
block|}
name|EapMethodState
typedef|;
end_typedef

begin_comment
comment|/**  * struct eap_method_ret - EAP return values from struct eap_method::process()  *  * These structure contains OUT variables for the interface between peer state  * machine and methods (RFC 4137, Sect. 4.2). eapRespData will be returned as  * the return value of struct eap_method::process() so it is not included in  * this structure.  */
end_comment

begin_struct
struct|struct
name|eap_method_ret
block|{
comment|/** 	 * ignore - Whether method decided to drop the current packed (OUT) 	 */
name|Boolean
name|ignore
decl_stmt|;
comment|/** 	 * methodState - Method-specific state (IN/OUT) 	 */
name|EapMethodState
name|methodState
decl_stmt|;
comment|/** 	 * decision - Authentication decision (OUT) 	 */
name|EapDecision
name|decision
decl_stmt|;
comment|/** 	 * allowNotifications - Whether method allows notifications (OUT) 	 */
name|Boolean
name|allowNotifications
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct eap_method - EAP method interface  * This structure defines the EAP method interface. Each method will need to  * register its own EAP type, EAP name, and set of function pointers for method  * specific operations. This interface is based on section 4.4 of RFC 4137.  */
end_comment

begin_struct
struct|struct
name|eap_method
block|{
comment|/** 	 * vendor - EAP Vendor-ID (EAP_VENDOR_*) (0 = IETF) 	 */
name|int
name|vendor
decl_stmt|;
comment|/** 	 * method - EAP type number (EAP_TYPE_*) 	 */
name|EapType
name|method
decl_stmt|;
comment|/** 	 * name - Name of the method (e.g., "TLS") 	 */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/** 	 * init - Initialize an EAP method 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * Returns: Pointer to allocated private data, or %NULL on failure 	 * 	 * This function is used to initialize the EAP method explicitly 	 * instead of using METHOD_INIT state as specific in RFC 4137. The 	 * method is expected to initialize it method-specific state and return 	 * a pointer that will be used as the priv argument to other calls. 	 */
name|void
modifier|*
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
comment|/** 	 * deinit - Deinitialize an EAP method 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * 	 * Deinitialize the EAP method and free any allocated private data. 	 */
name|void
function_decl|(
modifier|*
name|deinit
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * process - Process an EAP request 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * @ret: Return values from EAP request validation and processing 	 * @reqData: EAP request to be processed (eapReqData) 	 * Returns: Pointer to allocated EAP response packet (eapRespData) 	 * 	 * This function is a combination of m.check(), m.process(), and 	 * m.buildResp() procedures defined in section 4.4 of RFC 4137 In other 	 * words, this function validates the incoming request, processes it, 	 * and build a response packet. m.check() and m.process() return values 	 * are returned through struct eap_method_ret *ret variable. Caller is 	 * responsible for freeing the returned EAP response packet. 	 */
name|struct
name|wpabuf
modifier|*
function_decl|(
modifier|*
name|process
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|eap_method_ret
modifier|*
name|ret
parameter_list|,
specifier|const
name|struct
name|wpabuf
modifier|*
name|reqData
parameter_list|)
function_decl|;
comment|/** 	 * isKeyAvailable - Find out whether EAP method has keying material 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * Returns: %TRUE if key material (eapKeyData) is available 	 */
name|Boolean
function_decl|(
modifier|*
name|isKeyAvailable
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * getKey - Get EAP method specific keying material (eapKeyData) 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * @len: Pointer to variable to store key length (eapKeyDataLen) 	 * Returns: Keying material (eapKeyData) or %NULL if not available 	 * 	 * This function can be used to get the keying material from the EAP 	 * method. The key may already be stored in the method-specific private 	 * data or this function may derive the key. 	 */
name|u8
modifier|*
function_decl|(
modifier|*
name|getKey
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/** 	 * get_status - Get EAP method status 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * @buf: Buffer for status information 	 * @buflen: Maximum buffer length 	 * @verbose: Whether to include verbose status information 	 * Returns: Number of bytes written to buf 	 * 	 * Query EAP method for status information. This function fills in a 	 * text area with current status information from the EAP method. If 	 * the buffer (buf) is not large enough, status information will be 	 * truncated to fit the buffer. 	 */
name|int
function_decl|(
modifier|*
name|get_status
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|,
name|int
name|verbose
parameter_list|)
function_decl|;
comment|/** 	 * has_reauth_data - Whether method is ready for fast reauthentication 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * Returns: %TRUE or %FALSE based on whether fast reauthentication is 	 * possible 	 * 	 * This function is an optional handler that only EAP methods 	 * supporting fast re-authentication need to implement. 	 */
name|Boolean
function_decl|(
modifier|*
name|has_reauth_data
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * deinit_for_reauth - Release data that is not needed for fast re-auth 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * 	 * This function is an optional handler that only EAP methods 	 * supporting fast re-authentication need to implement. This is called 	 * when authentication has been completed and EAP state machine is 	 * requesting that enough state information is maintained for fast 	 * re-authentication 	 */
name|void
function_decl|(
modifier|*
name|deinit_for_reauth
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * init_for_reauth - Prepare for start of fast re-authentication 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * 	 * This function is an optional handler that only EAP methods 	 * supporting fast re-authentication need to implement. This is called 	 * when EAP authentication is started and EAP state machine is 	 * requesting fast re-authentication to be used. 	 */
name|void
modifier|*
function_decl|(
modifier|*
name|init_for_reauth
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * get_identity - Get method specific identity for re-authentication 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * @len: Length of the returned identity 	 * Returns: Pointer to the method specific identity or %NULL if default 	 * identity is to be used 	 * 	 * This function is an optional handler that only EAP methods 	 * that use method specific identity need to implement. 	 */
specifier|const
name|u8
modifier|*
function_decl|(
modifier|*
name|get_identity
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/** 	 * free - Free EAP method data 	 * @method: Pointer to the method data registered with 	 * eap_peer_method_register(). 	 * 	 * This function will be called when the EAP method is being 	 * unregistered. If the EAP method allocated resources during 	 * registration (e.g., allocated struct eap_method), they should be 	 * freed in this function. No other method functions will be called 	 * after this call. If this function is not defined (i.e., function 	 * pointer is %NULL), a default handler is used to release the method 	 * data with free(method). This is suitable for most cases. 	 */
name|void
function_decl|(
modifier|*
name|free
function_decl|)
parameter_list|(
name|struct
name|eap_method
modifier|*
name|method
parameter_list|)
function_decl|;
define|#
directive|define
name|EAP_PEER_METHOD_INTERFACE_VERSION
value|1
comment|/** 	 * version - Version of the EAP peer method interface 	 * 	 * The EAP peer method implementation should set this variable to 	 * EAP_PEER_METHOD_INTERFACE_VERSION. This is used to verify that the 	 * EAP method is using supported API version when using dynamically 	 * loadable EAP methods. 	 */
name|int
name|version
decl_stmt|;
comment|/** 	 * next - Pointer to the next EAP method 	 * 	 * This variable is used internally in the EAP method registration code 	 * to create a linked list of registered EAP methods. 	 */
name|struct
name|eap_method
modifier|*
name|next
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_DYNAMIC_EAP_METHODS
comment|/** 	 * dl_handle - Handle for the dynamic library 	 * 	 * This variable is used internally in the EAP method registration code 	 * to store a handle for the dynamic library. If the method is linked 	 * in statically, this is %NULL. 	 */
name|void
modifier|*
name|dl_handle
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_DYNAMIC_EAP_METHODS */
comment|/** 	 * get_emsk - Get EAP method specific keying extended material (EMSK) 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * @len: Pointer to a variable to store EMSK length 	 * Returns: EMSK or %NULL if not available 	 * 	 * This function can be used to get the extended keying material from 	 * the EAP method. The key may already be stored in the method-specific 	 * private data or this function may derive the key. 	 */
name|u8
modifier|*
function_decl|(
modifier|*
name|get_emsk
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
comment|/** 	 * getSessionId - Get EAP method specific Session-Id 	 * @sm: Pointer to EAP state machine allocated with eap_peer_sm_init() 	 * @priv: Pointer to private EAP method data from eap_method::init() 	 * @len: Pointer to a variable to store Session-Id length 	 * Returns: Session-Id or %NULL if not available 	 * 	 * This function can be used to get the Session-Id from the EAP method. 	 * The Session-Id may already be stored in the method-specific private 	 * data or this function may derive the Session-Id. 	 */
name|u8
modifier|*
function_decl|(
modifier|*
name|getSessionId
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|eap_erp_key
block|{
name|struct
name|dl_list
name|list
decl_stmt|;
name|size_t
name|rRK_len
decl_stmt|;
name|size_t
name|rIK_len
decl_stmt|;
name|u8
name|rRK
index|[
name|ERP_MAX_KEY_LEN
index|]
decl_stmt|;
name|u8
name|rIK
index|[
name|ERP_MAX_KEY_LEN
index|]
decl_stmt|;
name|u32
name|next_seq
decl_stmt|;
name|char
name|keyname_nai
index|[]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct eap_sm - EAP state machine data  */
end_comment

begin_struct
struct|struct
name|eap_sm
block|{
enum|enum
block|{
name|EAP_INITIALIZE
block|,
name|EAP_DISABLED
block|,
name|EAP_IDLE
block|,
name|EAP_RECEIVED
block|,
name|EAP_GET_METHOD
block|,
name|EAP_METHOD
block|,
name|EAP_SEND_RESPONSE
block|,
name|EAP_DISCARD
block|,
name|EAP_IDENTITY
block|,
name|EAP_NOTIFICATION
block|,
name|EAP_RETRANSMIT
block|,
name|EAP_SUCCESS
block|,
name|EAP_FAILURE
block|}
name|EAP_state
enum|;
comment|/* Long-term local variables */
name|EapType
name|selectedMethod
decl_stmt|;
name|EapMethodState
name|methodState
decl_stmt|;
name|int
name|lastId
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|lastRespData
decl_stmt|;
name|EapDecision
name|decision
decl_stmt|;
comment|/* Short-term local variables */
name|Boolean
name|rxReq
decl_stmt|;
name|Boolean
name|rxSuccess
decl_stmt|;
name|Boolean
name|rxFailure
decl_stmt|;
name|int
name|reqId
decl_stmt|;
name|EapType
name|reqMethod
decl_stmt|;
name|int
name|reqVendor
decl_stmt|;
name|u32
name|reqVendorMethod
decl_stmt|;
name|Boolean
name|ignore
decl_stmt|;
comment|/* Constants */
name|int
name|ClientTimeout
decl_stmt|;
comment|/* Miscellaneous variables */
name|Boolean
name|allowNotifications
decl_stmt|;
comment|/* peer state machine<-> methods */
name|struct
name|wpabuf
modifier|*
name|eapRespData
decl_stmt|;
comment|/* peer to lower layer */
name|Boolean
name|eapKeyAvailable
decl_stmt|;
comment|/* peer to lower layer */
name|u8
modifier|*
name|eapKeyData
decl_stmt|;
comment|/* peer to lower layer */
name|size_t
name|eapKeyDataLen
decl_stmt|;
comment|/* peer to lower layer */
name|u8
modifier|*
name|eapSessionId
decl_stmt|;
comment|/* peer to lower layer */
name|size_t
name|eapSessionIdLen
decl_stmt|;
comment|/* peer to lower layer */
specifier|const
name|struct
name|eap_method
modifier|*
name|m
decl_stmt|;
comment|/* selected EAP method */
comment|/* not defined in RFC 4137 */
name|Boolean
name|changed
decl_stmt|;
name|void
modifier|*
name|eapol_ctx
decl_stmt|;
name|struct
name|eapol_callbacks
modifier|*
name|eapol_cb
decl_stmt|;
name|void
modifier|*
name|eap_method_priv
decl_stmt|;
name|int
name|init_phase2
decl_stmt|;
name|int
name|fast_reauth
decl_stmt|;
name|Boolean
name|reauthInit
decl_stmt|;
comment|/* send EAP-Identity/Re-auth */
name|u32
name|erp_seq
decl_stmt|;
name|Boolean
name|rxResp
comment|/* LEAP only */
decl_stmt|;
name|Boolean
name|leap_done
decl_stmt|;
name|Boolean
name|peap_done
decl_stmt|;
name|u8
name|req_md5
index|[
literal|16
index|]
decl_stmt|;
comment|/* MD5() of the current EAP packet */
name|u8
name|last_md5
index|[
literal|16
index|]
decl_stmt|;
comment|/* MD5() of the previously received EAP packet; used 			  * in duplicate request detection. */
name|void
modifier|*
name|msg_ctx
decl_stmt|;
name|void
modifier|*
name|scard_ctx
decl_stmt|;
name|void
modifier|*
name|ssl_ctx
decl_stmt|;
name|void
modifier|*
name|ssl_ctx2
decl_stmt|;
name|unsigned
name|int
name|workaround
decl_stmt|;
comment|/* Optional challenges generated in Phase 1 (EAP-FAST) */
name|u8
modifier|*
name|peer_challenge
decl_stmt|,
modifier|*
name|auth_challenge
decl_stmt|;
name|int
name|num_rounds
decl_stmt|;
name|int
name|force_disabled
decl_stmt|;
name|struct
name|wps_context
modifier|*
name|wps
decl_stmt|;
name|int
name|prev_failure
decl_stmt|;
name|struct
name|eap_peer_config
modifier|*
name|last_config
decl_stmt|;
name|struct
name|ext_password_data
modifier|*
name|ext_pw
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|ext_pw_buf
decl_stmt|;
name|int
name|external_sim
decl_stmt|;
name|unsigned
name|int
name|expected_failure
range|:
literal|1
decl_stmt|;
name|struct
name|dl_list
name|erp_keys
decl_stmt|;
comment|/* struct eap_erp_key */
block|}
struct|;
end_struct

begin_function_decl
specifier|const
name|u8
modifier|*
name|eap_get_config_identity
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|eap_get_config_password
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|eap_get_config_password2
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|int
modifier|*
name|hash
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|eap_get_config_new_password
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|eap_get_config_otp
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_clear_config_otp
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|eap_get_config_phase1
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|eap_get_config_phase2
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_get_config_fragment_size
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|eap_peer_config
modifier|*
name|eap_get_config
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_set_config_blob
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|wpa_config_blob
modifier|*
name|blob
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|wpa_config_blob
modifier|*
name|eap_get_config_blob
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_notify_pending
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_allowed_method
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|int
name|vendor
parameter_list|,
name|u32
name|method
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EAP_I_H */
end_comment

end_unit

