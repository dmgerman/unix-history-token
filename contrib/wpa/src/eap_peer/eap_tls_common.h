begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * EAP peer: EAP-TLS/PEAP/TTLS/FAST common functions  * Copyright (c) 2004-2009, 2012, Jouni Malinen<j@w1.fi>  *  * This software may be distributed under the terms of the BSD license.  * See README for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|EAP_TLS_COMMON_H
end_ifndef

begin_define
define|#
directive|define
name|EAP_TLS_COMMON_H
end_define

begin_comment
comment|/**  * struct eap_ssl_data - TLS data for EAP methods  */
end_comment

begin_struct
struct|struct
name|eap_ssl_data
block|{
comment|/** 	 * conn - TLS connection context data from tls_connection_init() 	 */
name|struct
name|tls_connection
modifier|*
name|conn
decl_stmt|;
comment|/** 	 * tls_out - TLS message to be sent out in fragments 	 */
name|struct
name|wpabuf
modifier|*
name|tls_out
decl_stmt|;
comment|/** 	 * tls_out_pos - The current position in the outgoing TLS message 	 */
name|size_t
name|tls_out_pos
decl_stmt|;
comment|/** 	 * tls_out_limit - Maximum fragment size for outgoing TLS messages 	 */
name|size_t
name|tls_out_limit
decl_stmt|;
comment|/** 	 * tls_in - Received TLS message buffer for re-assembly 	 */
name|struct
name|wpabuf
modifier|*
name|tls_in
decl_stmt|;
comment|/** 	 * tls_in_left - Number of remaining bytes in the incoming TLS message 	 */
name|size_t
name|tls_in_left
decl_stmt|;
comment|/** 	 * tls_in_total - Total number of bytes in the incoming TLS message 	 */
name|size_t
name|tls_in_total
decl_stmt|;
comment|/** 	 * phase2 - Whether this TLS connection is used in EAP phase 2 (tunnel) 	 */
name|int
name|phase2
decl_stmt|;
comment|/** 	 * include_tls_length - Whether the TLS length field is included even 	 * if the TLS data is not fragmented 	 */
name|int
name|include_tls_length
decl_stmt|;
comment|/** 	 * eap - EAP state machine allocated with eap_peer_sm_init() 	 */
name|struct
name|eap_sm
modifier|*
name|eap
decl_stmt|;
comment|/** 	 * ssl_ctx - TLS library context to use for the connection 	 */
name|void
modifier|*
name|ssl_ctx
decl_stmt|;
comment|/** 	 * eap_type - EAP method used in Phase 1 (EAP_TYPE_TLS/PEAP/TTLS/FAST) 	 */
name|u8
name|eap_type
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* EAP TLS Flags */
end_comment

begin_define
define|#
directive|define
name|EAP_TLS_FLAGS_LENGTH_INCLUDED
value|0x80
end_define

begin_define
define|#
directive|define
name|EAP_TLS_FLAGS_MORE_FRAGMENTS
value|0x40
end_define

begin_define
define|#
directive|define
name|EAP_TLS_FLAGS_START
value|0x20
end_define

begin_define
define|#
directive|define
name|EAP_TLS_VERSION_MASK
value|0x07
end_define

begin_comment
comment|/* could be up to 128 bytes, but only the first 64 bytes are used */
end_comment

begin_define
define|#
directive|define
name|EAP_TLS_KEY_LEN
value|64
end_define

begin_comment
comment|/* dummy type used as a flag for UNAUTH-TLS */
end_comment

begin_define
define|#
directive|define
name|EAP_UNAUTH_TLS_TYPE
value|255
end_define

begin_define
define|#
directive|define
name|EAP_WFA_UNAUTH_TLS_TYPE
value|254
end_define

begin_function_decl
name|int
name|eap_peer_tls_ssl_init
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|,
name|struct
name|eap_peer_config
modifier|*
name|config
parameter_list|,
name|u8
name|eap_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_peer_tls_ssl_deinit
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u8
modifier|*
name|eap_peer_tls_derive_key
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|,
specifier|const
name|char
modifier|*
name|label
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u8
modifier|*
name|eap_peer_tls_derive_session_id
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|,
name|u8
name|eap_type
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_peer_tls_process_helper
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|,
name|EapType
name|eap_type
parameter_list|,
name|int
name|peap_version
parameter_list|,
name|u8
name|id
parameter_list|,
specifier|const
name|u8
modifier|*
name|in_data
parameter_list|,
name|size_t
name|in_len
parameter_list|,
name|struct
name|wpabuf
modifier|*
modifier|*
name|out_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpabuf
modifier|*
name|eap_peer_tls_build_ack
parameter_list|(
name|u8
name|id
parameter_list|,
name|EapType
name|eap_type
parameter_list|,
name|int
name|peap_version
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_peer_tls_reauth_init
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_peer_tls_status
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|,
name|int
name|verbose
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|eap_peer_tls_process_init
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|,
name|EapType
name|eap_type
parameter_list|,
name|struct
name|eap_method_ret
modifier|*
name|ret
parameter_list|,
specifier|const
name|struct
name|wpabuf
modifier|*
name|reqData
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|,
name|u8
modifier|*
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_peer_tls_reset_input
parameter_list|(
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eap_peer_tls_reset_output
parameter_list|(
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_peer_tls_decrypt
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|,
specifier|const
name|struct
name|wpabuf
modifier|*
name|in_data
parameter_list|,
name|struct
name|wpabuf
modifier|*
modifier|*
name|in_decrypted
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_peer_tls_encrypt
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|struct
name|eap_ssl_data
modifier|*
name|data
parameter_list|,
name|EapType
name|eap_type
parameter_list|,
name|int
name|peap_version
parameter_list|,
name|u8
name|id
parameter_list|,
specifier|const
name|struct
name|wpabuf
modifier|*
name|in_data
parameter_list|,
name|struct
name|wpabuf
modifier|*
modifier|*
name|out_data
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_peer_select_phase2_methods
parameter_list|(
name|struct
name|eap_peer_config
modifier|*
name|config
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|struct
name|eap_method_type
modifier|*
modifier|*
name|types
parameter_list|,
name|size_t
modifier|*
name|num_types
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|eap_peer_tls_phase2_nak
parameter_list|(
name|struct
name|eap_method_type
modifier|*
name|types
parameter_list|,
name|size_t
name|num_types
parameter_list|,
name|struct
name|eap_hdr
modifier|*
name|hdr
parameter_list|,
name|struct
name|wpabuf
modifier|*
modifier|*
name|resp
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EAP_TLS_COMMON_H */
end_comment

end_unit

