begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * hostapd / Configuration definitions and helpers functions  * Copyright (c) 2003-2012, Jouni Malinen<j@w1.fi>  *  * This software may be distributed under the terms of the BSD license.  * See README for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HOSTAPD_CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|HOSTAPD_CONFIG_H
end_define

begin_include
include|#
directive|include
file|"common/defs.h"
end_include

begin_include
include|#
directive|include
file|"ip_addr.h"
end_include

begin_include
include|#
directive|include
file|"common/wpa_common.h"
end_include

begin_include
include|#
directive|include
file|"common/ieee802_11_common.h"
end_include

begin_include
include|#
directive|include
file|"wps/wps.h"
end_include

begin_define
define|#
directive|define
name|MAX_STA_COUNT
value|2007
end_define

begin_define
define|#
directive|define
name|MAX_VLAN_ID
value|4094
end_define

begin_typedef
typedef|typedef
name|u8
name|macaddr
index|[
name|ETH_ALEN
index|]
typedef|;
end_typedef

begin_struct
struct|struct
name|mac_acl_entry
block|{
name|macaddr
name|addr
decl_stmt|;
name|int
name|vlan_id
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|hostapd_radius_servers
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ft_remote_r0kh
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ft_remote_r1kh
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|HOSTAPD_MAX_SSID_LEN
value|32
end_define

begin_define
define|#
directive|define
name|NUM_WEP_KEYS
value|4
end_define

begin_struct
struct|struct
name|hostapd_wep_keys
block|{
name|u8
name|idx
decl_stmt|;
name|u8
modifier|*
name|key
index|[
name|NUM_WEP_KEYS
index|]
decl_stmt|;
name|size_t
name|len
index|[
name|NUM_WEP_KEYS
index|]
decl_stmt|;
name|int
name|keys_set
decl_stmt|;
name|size_t
name|default_len
decl_stmt|;
comment|/* key length used for dynamic key generation */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
name|hostap_security_policy
block|{
name|SECURITY_PLAINTEXT
init|=
literal|0
block|,
name|SECURITY_STATIC_WEP
init|=
literal|1
block|,
name|SECURITY_IEEE_802_1X
init|=
literal|2
block|,
name|SECURITY_WPA_PSK
init|=
literal|3
block|,
name|SECURITY_WPA
init|=
literal|4
block|}
name|secpolicy
typedef|;
end_typedef

begin_struct
struct|struct
name|hostapd_ssid
block|{
name|u8
name|ssid
index|[
name|HOSTAPD_MAX_SSID_LEN
index|]
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
name|unsigned
name|int
name|ssid_set
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|utf8_ssid
range|:
literal|1
decl_stmt|;
name|char
name|vlan
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|secpolicy
name|security_policy
decl_stmt|;
name|struct
name|hostapd_wpa_psk
modifier|*
name|wpa_psk
decl_stmt|;
name|char
modifier|*
name|wpa_passphrase
decl_stmt|;
name|char
modifier|*
name|wpa_psk_file
decl_stmt|;
name|struct
name|hostapd_wep_keys
name|wep
decl_stmt|;
define|#
directive|define
name|DYNAMIC_VLAN_DISABLED
value|0
define|#
directive|define
name|DYNAMIC_VLAN_OPTIONAL
value|1
define|#
directive|define
name|DYNAMIC_VLAN_REQUIRED
value|2
name|int
name|dynamic_vlan
decl_stmt|;
define|#
directive|define
name|DYNAMIC_VLAN_NAMING_WITHOUT_DEVICE
value|0
define|#
directive|define
name|DYNAMIC_VLAN_NAMING_WITH_DEVICE
value|1
define|#
directive|define
name|DYNAMIC_VLAN_NAMING_END
value|2
name|int
name|vlan_naming
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_FULL_DYNAMIC_VLAN
name|char
modifier|*
name|vlan_tagged_interface
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_FULL_DYNAMIC_VLAN */
name|struct
name|hostapd_wep_keys
modifier|*
modifier|*
name|dyn_vlan_keys
decl_stmt|;
name|size_t
name|max_dyn_vlan_keys
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|VLAN_ID_WILDCARD
value|-1
end_define

begin_struct
struct|struct
name|hostapd_vlan
block|{
name|struct
name|hostapd_vlan
modifier|*
name|next
decl_stmt|;
name|int
name|vlan_id
decl_stmt|;
comment|/* VLAN ID or -1 (VLAN_ID_WILDCARD) for wildcard entry */
name|char
name|ifname
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|dynamic_vlan
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_FULL_DYNAMIC_VLAN
define|#
directive|define
name|DVLAN_CLEAN_BR
value|0x1
define|#
directive|define
name|DVLAN_CLEAN_VLAN
value|0x2
define|#
directive|define
name|DVLAN_CLEAN_VLAN_PORT
value|0x4
define|#
directive|define
name|DVLAN_CLEAN_WLAN_PORT
value|0x8
name|int
name|clean
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_FULL_DYNAMIC_VLAN */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PMK_LEN
value|32
end_define

begin_struct
struct|struct
name|hostapd_sta_wpa_psk_short
block|{
name|struct
name|hostapd_sta_wpa_psk_short
modifier|*
name|next
decl_stmt|;
name|u8
name|psk
index|[
name|PMK_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_wpa_psk
block|{
name|struct
name|hostapd_wpa_psk
modifier|*
name|next
decl_stmt|;
name|int
name|group
decl_stmt|;
name|u8
name|psk
index|[
name|PMK_LEN
index|]
decl_stmt|;
name|u8
name|addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_eap_user
block|{
name|struct
name|hostapd_eap_user
modifier|*
name|next
decl_stmt|;
name|u8
modifier|*
name|identity
decl_stmt|;
name|size_t
name|identity_len
decl_stmt|;
struct|struct
block|{
name|int
name|vendor
decl_stmt|;
name|u32
name|method
decl_stmt|;
block|}
name|methods
index|[
name|EAP_MAX_METHODS
index|]
struct|;
name|u8
modifier|*
name|password
decl_stmt|;
name|size_t
name|password_len
decl_stmt|;
name|int
name|phase2
decl_stmt|;
name|int
name|force_version
decl_stmt|;
name|unsigned
name|int
name|wildcard_prefix
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|password_hash
range|:
literal|1
decl_stmt|;
comment|/* whether password is hashed with 				       * nt_password_hash() */
name|int
name|ttls_auth
decl_stmt|;
comment|/* EAP_TTLS_AUTH_* bitfield */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_radius_attr
block|{
name|u8
name|type
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|val
decl_stmt|;
name|struct
name|hostapd_radius_attr
modifier|*
name|next
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|NUM_TX_QUEUES
value|4
end_define

begin_struct
struct|struct
name|hostapd_tx_queue_params
block|{
name|int
name|aifs
decl_stmt|;
name|int
name|cwmin
decl_stmt|;
name|int
name|cwmax
decl_stmt|;
name|int
name|burst
decl_stmt|;
comment|/* maximum burst time in 0.1 ms, i.e., 10 = 1 ms */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MAX_ROAMING_CONSORTIUM_LEN
value|15
end_define

begin_struct
struct|struct
name|hostapd_roaming_consortium
block|{
name|u8
name|len
decl_stmt|;
name|u8
name|oi
index|[
name|MAX_ROAMING_CONSORTIUM_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_lang_string
block|{
name|u8
name|lang
index|[
literal|3
index|]
decl_stmt|;
name|u8
name|name_len
decl_stmt|;
name|u8
name|name
index|[
literal|252
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|MAX_NAI_REALMS
value|10
end_define

begin_define
define|#
directive|define
name|MAX_NAI_REALMLEN
value|255
end_define

begin_define
define|#
directive|define
name|MAX_NAI_EAP_METHODS
value|5
end_define

begin_define
define|#
directive|define
name|MAX_NAI_AUTH_TYPES
value|4
end_define

begin_struct
struct|struct
name|hostapd_nai_realm_data
block|{
name|u8
name|encoding
decl_stmt|;
name|char
name|realm_buf
index|[
name|MAX_NAI_REALMLEN
operator|+
literal|1
index|]
decl_stmt|;
name|char
modifier|*
name|realm
index|[
name|MAX_NAI_REALMS
index|]
decl_stmt|;
name|u8
name|eap_method_count
decl_stmt|;
struct|struct
name|hostapd_nai_realm_eap
block|{
name|u8
name|eap_method
decl_stmt|;
name|u8
name|num_auths
decl_stmt|;
name|u8
name|auth_id
index|[
name|MAX_NAI_AUTH_TYPES
index|]
decl_stmt|;
name|u8
name|auth_val
index|[
name|MAX_NAI_AUTH_TYPES
index|]
decl_stmt|;
block|}
name|eap_method
index|[
name|MAX_NAI_EAP_METHODS
index|]
struct|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct hostapd_bss_config - Per-BSS configuration  */
end_comment

begin_struct
struct|struct
name|hostapd_bss_config
block|{
name|char
name|iface
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|bridge
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|wds_bridge
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|enum
name|hostapd_logger_level
name|logger_syslog_level
decl_stmt|,
name|logger_stdout_level
decl_stmt|;
name|unsigned
name|int
name|logger_syslog
decl_stmt|;
comment|/* module bitfield */
name|unsigned
name|int
name|logger_stdout
decl_stmt|;
comment|/* module bitfield */
name|char
modifier|*
name|dump_log_name
decl_stmt|;
comment|/* file name for state dump (SIGUSR1) */
name|int
name|max_num_sta
decl_stmt|;
comment|/* maximum number of STAs in station table */
name|int
name|dtim_period
decl_stmt|;
name|int
name|ieee802_1x
decl_stmt|;
comment|/* use IEEE 802.1X */
name|int
name|eapol_version
decl_stmt|;
name|int
name|eap_server
decl_stmt|;
comment|/* Use internal EAP server instead of external 			 * RADIUS server */
name|struct
name|hostapd_eap_user
modifier|*
name|eap_user
decl_stmt|;
name|char
modifier|*
name|eap_user_sqlite
decl_stmt|;
name|char
modifier|*
name|eap_sim_db
decl_stmt|;
name|struct
name|hostapd_ip_addr
name|own_ip_addr
decl_stmt|;
name|char
modifier|*
name|nas_identifier
decl_stmt|;
name|struct
name|hostapd_radius_servers
modifier|*
name|radius
decl_stmt|;
name|int
name|acct_interim_interval
decl_stmt|;
name|int
name|radius_request_cui
decl_stmt|;
name|struct
name|hostapd_radius_attr
modifier|*
name|radius_auth_req_attr
decl_stmt|;
name|struct
name|hostapd_radius_attr
modifier|*
name|radius_acct_req_attr
decl_stmt|;
name|int
name|radius_das_port
decl_stmt|;
name|unsigned
name|int
name|radius_das_time_window
decl_stmt|;
name|int
name|radius_das_require_event_timestamp
decl_stmt|;
name|struct
name|hostapd_ip_addr
name|radius_das_client_addr
decl_stmt|;
name|u8
modifier|*
name|radius_das_shared_secret
decl_stmt|;
name|size_t
name|radius_das_shared_secret_len
decl_stmt|;
name|struct
name|hostapd_ssid
name|ssid
decl_stmt|;
name|char
modifier|*
name|eap_req_id_text
decl_stmt|;
comment|/* optional displayable message sent with 				* EAP Request-Identity */
name|size_t
name|eap_req_id_text_len
decl_stmt|;
name|int
name|eapol_key_index_workaround
decl_stmt|;
name|size_t
name|default_wep_key_len
decl_stmt|;
name|int
name|individual_wep_key_len
decl_stmt|;
name|int
name|wep_rekeying_period
decl_stmt|;
name|int
name|broadcast_key_idx_min
decl_stmt|,
name|broadcast_key_idx_max
decl_stmt|;
name|int
name|eap_reauth_period
decl_stmt|;
name|int
name|ieee802_11f
decl_stmt|;
comment|/* use IEEE 802.11f (IAPP) */
name|char
name|iapp_iface
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
comment|/* interface used with IAPP broadcast 					* frames */
enum|enum
block|{
name|ACCEPT_UNLESS_DENIED
init|=
literal|0
block|,
name|DENY_UNLESS_ACCEPTED
init|=
literal|1
block|,
name|USE_EXTERNAL_RADIUS_AUTH
init|=
literal|2
block|}
name|macaddr_acl
enum|;
name|struct
name|mac_acl_entry
modifier|*
name|accept_mac
decl_stmt|;
name|int
name|num_accept_mac
decl_stmt|;
name|struct
name|mac_acl_entry
modifier|*
name|deny_mac
decl_stmt|;
name|int
name|num_deny_mac
decl_stmt|;
name|int
name|wds_sta
decl_stmt|;
name|int
name|isolate
decl_stmt|;
name|int
name|auth_algs
decl_stmt|;
comment|/* bitfield of allowed IEEE 802.11 authentication 			* algorithms, WPA_AUTH_ALG_{OPEN,SHARED,LEAP} */
name|int
name|wpa
decl_stmt|;
comment|/* bitfield of WPA_PROTO_WPA, WPA_PROTO_RSN */
name|int
name|wpa_key_mgmt
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_IEEE80211W
name|enum
name|mfp_options
name|ieee80211w
decl_stmt|;
comment|/* dot11AssociationSAQueryMaximumTimeout (in TUs) */
name|unsigned
name|int
name|assoc_sa_query_max_timeout
decl_stmt|;
comment|/* dot11AssociationSAQueryRetryTimeout (in TUs) */
name|int
name|assoc_sa_query_retry_timeout
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_IEEE80211W */
enum|enum
block|{
name|PSK_RADIUS_IGNORED
init|=
literal|0
block|,
name|PSK_RADIUS_ACCEPTED
init|=
literal|1
block|,
name|PSK_RADIUS_REQUIRED
init|=
literal|2
block|}
name|wpa_psk_radius
enum|;
name|int
name|wpa_pairwise
decl_stmt|;
name|int
name|wpa_group
decl_stmt|;
name|int
name|wpa_group_rekey
decl_stmt|;
name|int
name|wpa_strict_rekey
decl_stmt|;
name|int
name|wpa_gmk_rekey
decl_stmt|;
name|int
name|wpa_ptk_rekey
decl_stmt|;
name|int
name|rsn_pairwise
decl_stmt|;
name|int
name|rsn_preauth
decl_stmt|;
name|char
modifier|*
name|rsn_preauth_interfaces
decl_stmt|;
name|int
name|peerkey
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_IEEE80211R
comment|/* IEEE 802.11r - Fast BSS Transition */
name|u8
name|mobility_domain
index|[
name|MOBILITY_DOMAIN_ID_LEN
index|]
decl_stmt|;
name|u8
name|r1_key_holder
index|[
name|FT_R1KH_ID_LEN
index|]
decl_stmt|;
name|u32
name|r0_key_lifetime
decl_stmt|;
name|u32
name|reassociation_deadline
decl_stmt|;
name|struct
name|ft_remote_r0kh
modifier|*
name|r0kh_list
decl_stmt|;
name|struct
name|ft_remote_r1kh
modifier|*
name|r1kh_list
decl_stmt|;
name|int
name|pmk_r1_push
decl_stmt|;
name|int
name|ft_over_ds
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_IEEE80211R */
name|char
modifier|*
name|ctrl_interface
decl_stmt|;
comment|/* directory for UNIX domain sockets */
ifndef|#
directive|ifndef
name|CONFIG_NATIVE_WINDOWS
name|gid_t
name|ctrl_interface_gid
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_NATIVE_WINDOWS */
name|int
name|ctrl_interface_gid_set
decl_stmt|;
name|char
modifier|*
name|ca_cert
decl_stmt|;
name|char
modifier|*
name|server_cert
decl_stmt|;
name|char
modifier|*
name|private_key
decl_stmt|;
name|char
modifier|*
name|private_key_passwd
decl_stmt|;
name|int
name|check_crl
decl_stmt|;
name|char
modifier|*
name|dh_file
decl_stmt|;
name|u8
modifier|*
name|pac_opaque_encr_key
decl_stmt|;
name|u8
modifier|*
name|eap_fast_a_id
decl_stmt|;
name|size_t
name|eap_fast_a_id_len
decl_stmt|;
name|char
modifier|*
name|eap_fast_a_id_info
decl_stmt|;
name|int
name|eap_fast_prov
decl_stmt|;
name|int
name|pac_key_lifetime
decl_stmt|;
name|int
name|pac_key_refresh_time
decl_stmt|;
name|int
name|eap_sim_aka_result_ind
decl_stmt|;
name|int
name|tnc
decl_stmt|;
name|int
name|fragment_size
decl_stmt|;
name|u16
name|pwd_group
decl_stmt|;
name|char
modifier|*
name|radius_server_clients
decl_stmt|;
name|int
name|radius_server_auth_port
decl_stmt|;
name|int
name|radius_server_ipv6
decl_stmt|;
name|char
modifier|*
name|test_socket
decl_stmt|;
comment|/* UNIX domain socket path for driver_test */
name|int
name|use_pae_group_addr
decl_stmt|;
comment|/* Whether to send EAPOL frames to PAE group 				 * address instead of individual address 				 * (for driver_wired.c). 				 */
name|int
name|ap_max_inactivity
decl_stmt|;
name|int
name|ignore_broadcast_ssid
decl_stmt|;
name|int
name|wmm_enabled
decl_stmt|;
name|int
name|wmm_uapsd
decl_stmt|;
name|struct
name|hostapd_vlan
modifier|*
name|vlan
decl_stmt|,
modifier|*
name|vlan_tail
decl_stmt|;
name|macaddr
name|bssid
decl_stmt|;
comment|/* 	 * Maximum listen interval that STAs can use when associating with this 	 * BSS. If a STA tries to use larger value, the association will be 	 * denied with status code 51. 	 */
name|u16
name|max_listen_interval
decl_stmt|;
name|int
name|disable_pmksa_caching
decl_stmt|;
name|int
name|okc
decl_stmt|;
comment|/* Opportunistic Key Caching */
name|int
name|wps_state
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_WPS
name|int
name|ap_setup_locked
decl_stmt|;
name|u8
name|uuid
index|[
literal|16
index|]
decl_stmt|;
name|char
modifier|*
name|wps_pin_requests
decl_stmt|;
name|char
modifier|*
name|device_name
decl_stmt|;
name|char
modifier|*
name|manufacturer
decl_stmt|;
name|char
modifier|*
name|model_name
decl_stmt|;
name|char
modifier|*
name|model_number
decl_stmt|;
name|char
modifier|*
name|serial_number
decl_stmt|;
name|u8
name|device_type
index|[
name|WPS_DEV_TYPE_LEN
index|]
decl_stmt|;
name|char
modifier|*
name|config_methods
decl_stmt|;
name|u8
name|os_version
index|[
literal|4
index|]
decl_stmt|;
name|char
modifier|*
name|ap_pin
decl_stmt|;
name|int
name|skip_cred_build
decl_stmt|;
name|u8
modifier|*
name|extra_cred
decl_stmt|;
name|size_t
name|extra_cred_len
decl_stmt|;
name|int
name|wps_cred_processing
decl_stmt|;
name|u8
modifier|*
name|ap_settings
decl_stmt|;
name|size_t
name|ap_settings_len
decl_stmt|;
name|char
modifier|*
name|upnp_iface
decl_stmt|;
name|char
modifier|*
name|friendly_name
decl_stmt|;
name|char
modifier|*
name|manufacturer_url
decl_stmt|;
name|char
modifier|*
name|model_description
decl_stmt|;
name|char
modifier|*
name|model_url
decl_stmt|;
name|char
modifier|*
name|upc
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|wps_vendor_ext
index|[
name|MAX_WPS_VENDOR_EXTENSIONS
index|]
decl_stmt|;
name|int
name|wps_nfc_dev_pw_id
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|wps_nfc_dh_pubkey
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|wps_nfc_dh_privkey
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|wps_nfc_dev_pw
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_WPS */
name|int
name|pbc_in_m1
decl_stmt|;
define|#
directive|define
name|P2P_ENABLED
value|BIT(0)
define|#
directive|define
name|P2P_GROUP_OWNER
value|BIT(1)
define|#
directive|define
name|P2P_GROUP_FORMATION
value|BIT(2)
define|#
directive|define
name|P2P_MANAGE
value|BIT(3)
define|#
directive|define
name|P2P_ALLOW_CROSS_CONNECTION
value|BIT(4)
name|int
name|p2p
decl_stmt|;
name|int
name|disassoc_low_ack
decl_stmt|;
name|int
name|skip_inactivity_poll
decl_stmt|;
define|#
directive|define
name|TDLS_PROHIBIT
value|BIT(0)
define|#
directive|define
name|TDLS_PROHIBIT_CHAN_SWITCH
value|BIT(1)
name|int
name|tdls
decl_stmt|;
name|int
name|disable_11n
decl_stmt|;
name|int
name|disable_11ac
decl_stmt|;
comment|/* IEEE 802.11v */
name|int
name|time_advertisement
decl_stmt|;
name|char
modifier|*
name|time_zone
decl_stmt|;
name|int
name|wnm_sleep_mode
decl_stmt|;
name|int
name|bss_transition
decl_stmt|;
comment|/* IEEE 802.11u - Interworking */
name|int
name|interworking
decl_stmt|;
name|int
name|access_network_type
decl_stmt|;
name|int
name|internet
decl_stmt|;
name|int
name|asra
decl_stmt|;
name|int
name|esr
decl_stmt|;
name|int
name|uesa
decl_stmt|;
name|int
name|venue_info_set
decl_stmt|;
name|u8
name|venue_group
decl_stmt|;
name|u8
name|venue_type
decl_stmt|;
name|u8
name|hessid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
comment|/* IEEE 802.11u - Roaming Consortium list */
name|unsigned
name|int
name|roaming_consortium_count
decl_stmt|;
name|struct
name|hostapd_roaming_consortium
modifier|*
name|roaming_consortium
decl_stmt|;
comment|/* IEEE 802.11u - Venue Name duples */
name|unsigned
name|int
name|venue_name_count
decl_stmt|;
name|struct
name|hostapd_lang_string
modifier|*
name|venue_name
decl_stmt|;
comment|/* IEEE 802.11u - Network Authentication Type */
name|u8
modifier|*
name|network_auth_type
decl_stmt|;
name|size_t
name|network_auth_type_len
decl_stmt|;
comment|/* IEEE 802.11u - IP Address Type Availability */
name|u8
name|ipaddr_type_availability
decl_stmt|;
name|u8
name|ipaddr_type_configured
decl_stmt|;
comment|/* IEEE 802.11u - 3GPP Cellular Network */
name|u8
modifier|*
name|anqp_3gpp_cell_net
decl_stmt|;
name|size_t
name|anqp_3gpp_cell_net_len
decl_stmt|;
comment|/* IEEE 802.11u - Domain Name */
name|u8
modifier|*
name|domain_name
decl_stmt|;
name|size_t
name|domain_name_len
decl_stmt|;
name|unsigned
name|int
name|nai_realm_count
decl_stmt|;
name|struct
name|hostapd_nai_realm_data
modifier|*
name|nai_realm_data
decl_stmt|;
name|u16
name|gas_comeback_delay
decl_stmt|;
name|int
name|gas_frag_limit
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_HS20
name|int
name|hs20
decl_stmt|;
name|int
name|disable_dgaf
decl_stmt|;
name|unsigned
name|int
name|hs20_oper_friendly_name_count
decl_stmt|;
name|struct
name|hostapd_lang_string
modifier|*
name|hs20_oper_friendly_name
decl_stmt|;
name|u8
modifier|*
name|hs20_wan_metrics
decl_stmt|;
name|u8
modifier|*
name|hs20_connection_capability
decl_stmt|;
name|size_t
name|hs20_connection_capability_len
decl_stmt|;
name|u8
modifier|*
name|hs20_operating_class
decl_stmt|;
name|u8
name|hs20_operating_class_len
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_HS20 */
name|u8
name|wps_rf_bands
decl_stmt|;
comment|/* RF bands for WPS (WPS_RF_*) */
ifdef|#
directive|ifdef
name|CONFIG_RADIUS_TEST
name|char
modifier|*
name|dump_msk_file
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_RADIUS_TEST */
name|struct
name|wpabuf
modifier|*
name|vendor_elements
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct hostapd_config - Per-radio interface configuration  */
end_comment

begin_struct
struct|struct
name|hostapd_config
block|{
name|struct
name|hostapd_bss_config
modifier|*
name|bss
decl_stmt|,
modifier|*
name|last_bss
decl_stmt|;
name|size_t
name|num_bss
decl_stmt|;
name|u16
name|beacon_int
decl_stmt|;
name|int
name|rts_threshold
decl_stmt|;
name|int
name|fragm_threshold
decl_stmt|;
name|u8
name|send_probe_response
decl_stmt|;
name|u8
name|channel
decl_stmt|;
name|enum
name|hostapd_hw_mode
name|hw_mode
decl_stmt|;
comment|/* HOSTAPD_MODE_IEEE80211A, .. */
enum|enum
block|{
name|LONG_PREAMBLE
init|=
literal|0
block|,
name|SHORT_PREAMBLE
init|=
literal|1
block|}
name|preamble
enum|;
name|int
modifier|*
name|supported_rates
decl_stmt|;
name|int
modifier|*
name|basic_rates
decl_stmt|;
specifier|const
name|struct
name|wpa_driver_ops
modifier|*
name|driver
decl_stmt|;
name|int
name|ap_table_max_size
decl_stmt|;
name|int
name|ap_table_expiration_time
decl_stmt|;
name|char
name|country
index|[
literal|3
index|]
decl_stmt|;
comment|/* first two octets: country code as described in 			  * ISO/IEC 3166-1. Third octet: 			  * ' ' (ascii 32): all environments 			  * 'O': Outdoor environemnt only 			  * 'I': Indoor environment only 			  */
name|int
name|ieee80211d
decl_stmt|;
name|struct
name|hostapd_tx_queue_params
name|tx_queue
index|[
name|NUM_TX_QUEUES
index|]
decl_stmt|;
comment|/* 	 * WMM AC parameters, in same order as 802.1D, i.e. 	 * 0 = BE (best effort) 	 * 1 = BK (background) 	 * 2 = VI (video) 	 * 3 = VO (voice) 	 */
name|struct
name|hostapd_wmm_ac_params
name|wmm_ac_params
index|[
literal|4
index|]
decl_stmt|;
name|int
name|ht_op_mode_fixed
decl_stmt|;
name|u16
name|ht_capab
decl_stmt|;
name|int
name|ieee80211n
decl_stmt|;
name|int
name|secondary_channel
decl_stmt|;
name|int
name|require_ht
decl_stmt|;
name|u32
name|vht_capab
decl_stmt|;
name|int
name|ieee80211ac
decl_stmt|;
name|int
name|require_vht
decl_stmt|;
name|u8
name|vht_oper_chwidth
decl_stmt|;
name|u8
name|vht_oper_centr_freq_seg0_idx
decl_stmt|;
name|u8
name|vht_oper_centr_freq_seg1_idx
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|hostapd_mac_comp
parameter_list|(
specifier|const
name|void
modifier|*
name|a
parameter_list|,
specifier|const
name|void
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_mac_comp_empty
parameter_list|(
specifier|const
name|void
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostapd_config
modifier|*
name|hostapd_config_defaults
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_config_defaults_bss
parameter_list|(
name|struct
name|hostapd_bss_config
modifier|*
name|bss
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_config_free
parameter_list|(
name|struct
name|hostapd_config
modifier|*
name|conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_maclist_found
parameter_list|(
name|struct
name|mac_acl_entry
modifier|*
name|list
parameter_list|,
name|int
name|num_entries
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
modifier|*
name|vlan_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_rate_found
parameter_list|(
name|int
modifier|*
name|list
parameter_list|,
name|int
name|rate
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_wep_key_cmp
parameter_list|(
name|struct
name|hostapd_wep_keys
modifier|*
name|a
parameter_list|,
name|struct
name|hostapd_wep_keys
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|hostapd_get_psk
parameter_list|(
specifier|const
name|struct
name|hostapd_bss_config
modifier|*
name|conf
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|prev_psk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_setup_wpa_psk
parameter_list|(
name|struct
name|hostapd_bss_config
modifier|*
name|conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|hostapd_get_vlan_id_ifname
parameter_list|(
name|struct
name|hostapd_vlan
modifier|*
name|vlan
parameter_list|,
name|int
name|vlan_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostapd_radius_attr
modifier|*
name|hostapd_config_get_radius_attr
parameter_list|(
name|struct
name|hostapd_radius_attr
modifier|*
name|attr
parameter_list|,
name|u8
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* HOSTAPD_CONFIG_H */
end_comment

end_unit

