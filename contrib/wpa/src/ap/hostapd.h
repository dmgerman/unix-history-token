begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * hostapd / Initialization and configuration  * Copyright (c) 2002-2014, Jouni Malinen<j@w1.fi>  *  * This software may be distributed under the terms of the BSD license.  * See README for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|HOSTAPD_H
end_ifndef

begin_define
define|#
directive|define
name|HOSTAPD_H
end_define

begin_include
include|#
directive|include
file|"common/defs.h"
end_include

begin_include
include|#
directive|include
file|"utils/list.h"
end_include

begin_include
include|#
directive|include
file|"ap_config.h"
end_include

begin_include
include|#
directive|include
file|"drivers/driver.h"
end_include

begin_struct_decl
struct_decl|struct
name|wpa_ctrl_dst
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|radius_server_data
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|upnp_wps_device_sm
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|hostapd_data
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|sta_info
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ieee80211_ht_capabilities
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|full_dynamic_vlan
struct_decl|;
end_struct_decl

begin_enum_decl
enum_decl|enum
name|wps_event
enum_decl|;
end_enum_decl

begin_union_decl
union_decl|union
name|wps_event_data
union_decl|;
end_union_decl

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_MESH
end_ifdef

begin_struct_decl
struct_decl|struct
name|mesh_conf
struct_decl|;
end_struct_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_MESH */
end_comment

begin_struct_decl
struct_decl|struct
name|hostapd_iface
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|hapd_interfaces
block|{
name|int
function_decl|(
modifier|*
name|reload_config
function_decl|)
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
name|struct
name|hostapd_config
modifier|*
function_decl|(
modifier|*
name|config_read_cb
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|config_fname
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|ctrl_iface_init
function_decl|)
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|ctrl_iface_deinit
function_decl|)
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|for_each_interface
function_decl|)
parameter_list|(
name|struct
name|hapd_interfaces
modifier|*
name|interfaces
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|driver_init
function_decl|)
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
name|size_t
name|count
decl_stmt|;
name|int
name|global_ctrl_sock
decl_stmt|;
name|struct
name|wpa_ctrl_dst
modifier|*
name|global_ctrl_dst
decl_stmt|;
name|char
modifier|*
name|global_iface_path
decl_stmt|;
name|char
modifier|*
name|global_iface_name
decl_stmt|;
ifndef|#
directive|ifndef
name|CONFIG_NATIVE_WINDOWS
name|gid_t
name|ctrl_iface_group
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_NATIVE_WINDOWS */
name|struct
name|hostapd_iface
modifier|*
modifier|*
name|iface
decl_stmt|;
name|size_t
name|terminate_on_error
decl_stmt|;
ifndef|#
directive|ifndef
name|CONFIG_NO_VLAN
name|struct
name|dynamic_iface
modifier|*
name|vlan_priv
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_NO_VLAN */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|hostapd_chan_status
block|{
name|HOSTAPD_CHAN_VALID
init|=
literal|0
block|,
comment|/* channel is ready */
name|HOSTAPD_CHAN_INVALID
init|=
literal|1
block|,
comment|/* no usable channel found */
name|HOSTAPD_CHAN_ACS
init|=
literal|2
block|,
comment|/* ACS work being performed */
block|}
enum|;
end_enum

begin_struct
struct|struct
name|hostapd_probereq_cb
block|{
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|sa
parameter_list|,
specifier|const
name|u8
modifier|*
name|da
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|ie
parameter_list|,
name|size_t
name|ie_len
parameter_list|,
name|int
name|ssi_signal
parameter_list|)
function_decl|;
name|void
modifier|*
name|ctx
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|HOSTAPD_RATE_BASIC
value|0x00000001
end_define

begin_struct
struct|struct
name|hostapd_rate_data
block|{
name|int
name|rate
decl_stmt|;
comment|/* rate in 100 kbps */
name|int
name|flags
decl_stmt|;
comment|/* HOSTAPD_RATE_ flags */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_frame_info
block|{
name|u32
name|channel
decl_stmt|;
name|u32
name|datarate
decl_stmt|;
name|int
name|ssi_signal
decl_stmt|;
comment|/* dBm */
block|}
struct|;
end_struct

begin_enum
enum|enum
name|wps_status
block|{
name|WPS_STATUS_SUCCESS
init|=
literal|1
block|,
name|WPS_STATUS_FAILURE
block|}
enum|;
end_enum

begin_enum
enum|enum
name|pbc_status
block|{
name|WPS_PBC_STATUS_DISABLE
block|,
name|WPS_PBC_STATUS_ACTIVE
block|,
name|WPS_PBC_STATUS_TIMEOUT
block|,
name|WPS_PBC_STATUS_OVERLAP
block|}
enum|;
end_enum

begin_struct
struct|struct
name|wps_stat
block|{
name|enum
name|wps_status
name|status
decl_stmt|;
name|enum
name|wps_error_indication
name|failure_reason
decl_stmt|;
name|enum
name|pbc_status
name|pbc_status
decl_stmt|;
name|u8
name|peer_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct hostapd_data - hostapd per-BSS data structure  */
end_comment

begin_struct
struct|struct
name|hostapd_data
block|{
name|struct
name|hostapd_iface
modifier|*
name|iface
decl_stmt|;
name|struct
name|hostapd_config
modifier|*
name|iconf
decl_stmt|;
name|struct
name|hostapd_bss_config
modifier|*
name|conf
decl_stmt|;
name|int
name|interface_added
decl_stmt|;
comment|/* virtual interface added for this BSS */
name|unsigned
name|int
name|started
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|disabled
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|reenable_beacon
range|:
literal|1
decl_stmt|;
name|u8
name|own_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|num_sta
decl_stmt|;
comment|/* number of entries in sta_list */
name|struct
name|sta_info
modifier|*
name|sta_list
decl_stmt|;
comment|/* STA info list head */
define|#
directive|define
name|STA_HASH_SIZE
value|256
define|#
directive|define
name|STA_HASH
parameter_list|(
name|sta
parameter_list|)
value|(sta[5])
name|struct
name|sta_info
modifier|*
name|sta_hash
index|[
name|STA_HASH_SIZE
index|]
decl_stmt|;
comment|/* 	 * Bitfield for indicating which AIDs are allocated. Only AID values 	 * 1-2007 are used and as such, the bit at index 0 corresponds to AID 	 * 1. 	 */
define|#
directive|define
name|AID_WORDS
value|((2008 + 31) / 32)
name|u32
name|sta_aid
index|[
name|AID_WORDS
index|]
decl_stmt|;
specifier|const
name|struct
name|wpa_driver_ops
modifier|*
name|driver
decl_stmt|;
name|void
modifier|*
name|drv_priv
decl_stmt|;
name|void
function_decl|(
modifier|*
name|new_assoc_sta_cb
function_decl|)
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|struct
name|sta_info
modifier|*
name|sta
parameter_list|,
name|int
name|reassoc
parameter_list|)
function_decl|;
name|void
modifier|*
name|msg_ctx
decl_stmt|;
comment|/* ctx for wpa_msg() calls */
name|void
modifier|*
name|msg_ctx_parent
decl_stmt|;
comment|/* parent interface ctx for wpa_msg() calls */
name|struct
name|radius_client_data
modifier|*
name|radius
decl_stmt|;
name|u32
name|acct_session_id_hi
decl_stmt|,
name|acct_session_id_lo
decl_stmt|;
name|struct
name|radius_das_data
modifier|*
name|radius_das
decl_stmt|;
name|struct
name|iapp_data
modifier|*
name|iapp
decl_stmt|;
name|struct
name|hostapd_cached_radius_acl
modifier|*
name|acl_cache
decl_stmt|;
name|struct
name|hostapd_acl_query_data
modifier|*
name|acl_queries
decl_stmt|;
name|struct
name|wpa_authenticator
modifier|*
name|wpa_auth
decl_stmt|;
name|struct
name|eapol_authenticator
modifier|*
name|eapol_auth
decl_stmt|;
name|struct
name|rsn_preauth_interface
modifier|*
name|preauth_iface
decl_stmt|;
name|struct
name|os_reltime
name|michael_mic_failure
decl_stmt|;
name|int
name|michael_mic_failures
decl_stmt|;
name|int
name|tkip_countermeasures
decl_stmt|;
name|int
name|ctrl_sock
decl_stmt|;
name|struct
name|wpa_ctrl_dst
modifier|*
name|ctrl_dst
decl_stmt|;
name|void
modifier|*
name|ssl_ctx
decl_stmt|;
name|void
modifier|*
name|eap_sim_db_priv
decl_stmt|;
name|struct
name|radius_server_data
modifier|*
name|radius_srv
decl_stmt|;
name|struct
name|dl_list
name|erp_keys
decl_stmt|;
comment|/* struct eap_server_erp_key */
name|int
name|parameter_set_count
decl_stmt|;
comment|/* Time Advertisement */
name|u8
name|time_update_counter
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|time_adv
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_FULL_DYNAMIC_VLAN
name|struct
name|full_dynamic_vlan
modifier|*
name|full_dynamic_vlan
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_FULL_DYNAMIC_VLAN */
name|struct
name|l2_packet_data
modifier|*
name|l2
decl_stmt|;
name|struct
name|wps_context
modifier|*
name|wps
decl_stmt|;
name|int
name|beacon_set_done
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|wps_beacon_ie
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|wps_probe_resp_ie
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_WPS
name|unsigned
name|int
name|ap_pin_failures
decl_stmt|;
name|unsigned
name|int
name|ap_pin_failures_consecutive
decl_stmt|;
name|struct
name|upnp_wps_device_sm
modifier|*
name|wps_upnp
decl_stmt|;
name|unsigned
name|int
name|ap_pin_lockout_time
decl_stmt|;
name|struct
name|wps_stat
name|wps_stats
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_WPS */
name|struct
name|hostapd_probereq_cb
modifier|*
name|probereq_cb
decl_stmt|;
name|size_t
name|num_probereq_cb
decl_stmt|;
name|void
function_decl|(
modifier|*
name|public_action_cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|freq
parameter_list|)
function_decl|;
name|void
modifier|*
name|public_action_cb_ctx
decl_stmt|;
name|void
function_decl|(
modifier|*
name|public_action_cb2
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|freq
parameter_list|)
function_decl|;
name|void
modifier|*
name|public_action_cb2_ctx
decl_stmt|;
name|int
function_decl|(
modifier|*
name|vendor_action_cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|freq
parameter_list|)
function_decl|;
name|void
modifier|*
name|vendor_action_cb_ctx
decl_stmt|;
name|void
function_decl|(
modifier|*
name|wps_reg_success_cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac_addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|uuid_e
parameter_list|)
function_decl|;
name|void
modifier|*
name|wps_reg_success_cb_ctx
decl_stmt|;
name|void
function_decl|(
modifier|*
name|wps_event_cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|enum
name|wps_event
name|event
parameter_list|,
name|union
name|wps_event_data
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|wps_event_cb_ctx
decl_stmt|;
name|void
function_decl|(
modifier|*
name|sta_authorized_cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac_addr
parameter_list|,
name|int
name|authorized
parameter_list|,
specifier|const
name|u8
modifier|*
name|p2p_dev_addr
parameter_list|)
function_decl|;
name|void
modifier|*
name|sta_authorized_cb_ctx
decl_stmt|;
name|void
function_decl|(
modifier|*
name|setup_complete_cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
name|void
modifier|*
name|setup_complete_cb_ctx
decl_stmt|;
name|void
function_decl|(
modifier|*
name|new_psk_cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|mac_addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|p2p_dev_addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|psk
parameter_list|,
name|size_t
name|psk_len
parameter_list|)
function_decl|;
name|void
modifier|*
name|new_psk_cb_ctx
decl_stmt|;
comment|/* channel switch parameters */
name|struct
name|hostapd_freq_params
name|cs_freq_params
decl_stmt|;
name|u8
name|cs_count
decl_stmt|;
name|int
name|cs_block_tx
decl_stmt|;
name|unsigned
name|int
name|cs_c_off_beacon
decl_stmt|;
name|unsigned
name|int
name|cs_c_off_proberesp
decl_stmt|;
name|int
name|csa_in_progress
decl_stmt|;
comment|/* BSS Load */
name|unsigned
name|int
name|bss_load_update_timeout
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_P2P
name|struct
name|p2p_data
modifier|*
name|p2p
decl_stmt|;
name|struct
name|p2p_group
modifier|*
name|p2p_group
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|p2p_beacon_ie
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|p2p_probe_resp_ie
decl_stmt|;
comment|/* Number of non-P2P association stations */
name|int
name|num_sta_no_p2p
decl_stmt|;
comment|/* Periodic NoA (used only when no non-P2P clients in the group) */
name|int
name|noa_enabled
decl_stmt|;
name|int
name|noa_start
decl_stmt|;
name|int
name|noa_duration
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_P2P */
ifdef|#
directive|ifdef
name|CONFIG_INTERWORKING
name|size_t
name|gas_frag_limit
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_INTERWORKING */
ifdef|#
directive|ifdef
name|CONFIG_PROXYARP
name|struct
name|l2_packet_data
modifier|*
name|sock_dhcp
decl_stmt|;
name|struct
name|l2_packet_data
modifier|*
name|sock_ndisc
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_PROXYARP */
ifdef|#
directive|ifdef
name|CONFIG_MESH
name|int
name|num_plinks
decl_stmt|;
name|int
name|max_plinks
decl_stmt|;
name|void
function_decl|(
modifier|*
name|mesh_sta_free_cb
function_decl|)
parameter_list|(
name|struct
name|sta_info
modifier|*
name|sta
parameter_list|)
function_decl|;
name|struct
name|wpabuf
modifier|*
name|mesh_pending_auth
decl_stmt|;
name|struct
name|os_reltime
name|mesh_pending_auth_time
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_MESH */
ifdef|#
directive|ifdef
name|CONFIG_SQLITE
name|struct
name|hostapd_eap_user
name|tmp_eap_user
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_SQLITE */
ifdef|#
directive|ifdef
name|CONFIG_SAE
comment|/** Key used for generating SAE anti-clogging tokens */
name|u8
name|sae_token_key
index|[
literal|8
index|]
decl_stmt|;
name|struct
name|os_reltime
name|last_sae_token_key_update
decl_stmt|;
name|int
name|dot11RSNASAERetransPeriod
decl_stmt|;
comment|/* msec */
endif|#
directive|endif
comment|/* CONFIG_SAE */
ifdef|#
directive|ifdef
name|CONFIG_TESTING_OPTIONS
name|unsigned
name|int
name|ext_mgmt_frame_handling
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|ext_eapol_frame_io
range|:
literal|1
decl_stmt|;
name|struct
name|l2_packet_data
modifier|*
name|l2_test
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_TESTING_OPTIONS */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_sta_info
block|{
name|struct
name|dl_list
name|list
decl_stmt|;
name|u8
name|addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|struct
name|os_reltime
name|last_seen
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct hostapd_iface - hostapd per-interface data structure  */
end_comment

begin_struct
struct|struct
name|hostapd_iface
block|{
name|struct
name|hapd_interfaces
modifier|*
name|interfaces
decl_stmt|;
name|void
modifier|*
name|owner
decl_stmt|;
name|char
modifier|*
name|config_fname
decl_stmt|;
name|struct
name|hostapd_config
modifier|*
name|conf
decl_stmt|;
name|char
name|phy
index|[
literal|16
index|]
decl_stmt|;
comment|/* Name of the PHY (radio) */
enum|enum
name|hostapd_iface_state
block|{
name|HAPD_IFACE_UNINITIALIZED
block|,
name|HAPD_IFACE_DISABLED
block|,
name|HAPD_IFACE_COUNTRY_UPDATE
block|,
name|HAPD_IFACE_ACS
block|,
name|HAPD_IFACE_HT_SCAN
block|,
name|HAPD_IFACE_DFS
block|,
name|HAPD_IFACE_ENABLED
block|}
name|state
enum|;
ifdef|#
directive|ifdef
name|CONFIG_MESH
name|struct
name|mesh_conf
modifier|*
name|mconf
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_MESH */
name|size_t
name|num_bss
decl_stmt|;
name|struct
name|hostapd_data
modifier|*
modifier|*
name|bss
decl_stmt|;
name|unsigned
name|int
name|wait_channel_update
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|cac_started
range|:
literal|1
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_FST
name|struct
name|fst_iface
modifier|*
name|fst
decl_stmt|;
specifier|const
name|struct
name|wpabuf
modifier|*
name|fst_ies
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_FST */
comment|/* 	 * When set, indicates that the driver will handle the AP 	 * teardown: delete global keys, station keys, and stations. 	 */
name|unsigned
name|int
name|driver_ap_teardown
range|:
literal|1
decl_stmt|;
name|int
name|num_ap
decl_stmt|;
comment|/* number of entries in ap_list */
name|struct
name|ap_info
modifier|*
name|ap_list
decl_stmt|;
comment|/* AP info list head */
name|struct
name|ap_info
modifier|*
name|ap_hash
index|[
name|STA_HASH_SIZE
index|]
decl_stmt|;
name|u64
name|drv_flags
decl_stmt|;
comment|/* SMPS modes supported by the driver (WPA_DRIVER_SMPS_MODE_*) */
name|unsigned
name|int
name|smps_modes
decl_stmt|;
comment|/* 	 * A bitmap of supported protocols for probe response offload. See 	 * struct wpa_driver_capa in driver.h 	 */
name|unsigned
name|int
name|probe_resp_offloads
decl_stmt|;
comment|/* extended capabilities supported by the driver */
specifier|const
name|u8
modifier|*
name|extended_capa
decl_stmt|,
modifier|*
name|extended_capa_mask
decl_stmt|;
name|unsigned
name|int
name|extended_capa_len
decl_stmt|;
name|unsigned
name|int
name|drv_max_acl_mac_addrs
decl_stmt|;
name|struct
name|hostapd_hw_modes
modifier|*
name|hw_features
decl_stmt|;
name|int
name|num_hw_features
decl_stmt|;
name|struct
name|hostapd_hw_modes
modifier|*
name|current_mode
decl_stmt|;
comment|/* Rates that are currently used (i.e., filtered copy of 	 * current_mode->channels */
name|int
name|num_rates
decl_stmt|;
name|struct
name|hostapd_rate_data
modifier|*
name|current_rates
decl_stmt|;
name|int
modifier|*
name|basic_rates
decl_stmt|;
name|int
name|freq
decl_stmt|;
name|u16
name|hw_flags
decl_stmt|;
comment|/* Number of associated Non-ERP stations (i.e., stations using 802.11b 	 * in 802.11g BSS) */
name|int
name|num_sta_non_erp
decl_stmt|;
comment|/* Number of associated stations that do not support Short Slot Time */
name|int
name|num_sta_no_short_slot_time
decl_stmt|;
comment|/* Number of associated stations that do not support Short Preamble */
name|int
name|num_sta_no_short_preamble
decl_stmt|;
name|int
name|olbc
decl_stmt|;
comment|/* Overlapping Legacy BSS Condition */
comment|/* Number of HT associated stations that do not support greenfield */
name|int
name|num_sta_ht_no_gf
decl_stmt|;
comment|/* Number of associated non-HT stations */
name|int
name|num_sta_no_ht
decl_stmt|;
comment|/* Number of HT associated stations 20 MHz */
name|int
name|num_sta_ht_20mhz
decl_stmt|;
comment|/* Number of HT40 intolerant stations */
name|int
name|num_sta_ht40_intolerant
decl_stmt|;
comment|/* Overlapping BSS information */
name|int
name|olbc_ht
decl_stmt|;
name|u16
name|ht_op_mode
decl_stmt|;
comment|/* surveying helpers */
comment|/* number of channels surveyed */
name|unsigned
name|int
name|chans_surveyed
decl_stmt|;
comment|/* lowest observed noise floor in dBm */
name|s8
name|lowest_nf
decl_stmt|;
comment|/* channel utilization calculation */
name|u64
name|last_channel_time
decl_stmt|;
name|u64
name|last_channel_time_busy
decl_stmt|;
name|u8
name|channel_utilization
decl_stmt|;
name|unsigned
name|int
name|dfs_cac_ms
decl_stmt|;
name|struct
name|os_reltime
name|dfs_cac_start
decl_stmt|;
comment|/* Latched with the actual secondary channel information and will be 	 * used while juggling between HT20 and HT40 modes. */
name|int
name|secondary_ch
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_ACS
name|unsigned
name|int
name|acs_num_completed_scans
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_ACS */
name|void
function_decl|(
modifier|*
name|scan_cb
function_decl|)
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
name|int
name|num_ht40_scan_tries
decl_stmt|;
name|struct
name|dl_list
name|sta_seen
decl_stmt|;
comment|/* struct hostapd_sta_info */
name|unsigned
name|int
name|num_sta_seen
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* hostapd.c */
end_comment

begin_function_decl
name|int
name|hostapd_for_each_interface
parameter_list|(
name|struct
name|hapd_interfaces
modifier|*
name|interfaces
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_reload_config
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostapd_data
modifier|*
name|hostapd_alloc_bss_data
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|hapd_iface
parameter_list|,
name|struct
name|hostapd_config
modifier|*
name|conf
parameter_list|,
name|struct
name|hostapd_bss_config
modifier|*
name|bss
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_setup_interface
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_setup_interface_complete
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|,
name|int
name|err
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_interface_deinit
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_interface_free
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostapd_iface
modifier|*
name|hostapd_init
parameter_list|(
name|struct
name|hapd_interfaces
modifier|*
name|interfaces
parameter_list|,
specifier|const
name|char
modifier|*
name|config_file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostapd_iface
modifier|*
name|hostapd_interface_init_bss
parameter_list|(
name|struct
name|hapd_interfaces
modifier|*
name|interfaces
parameter_list|,
specifier|const
name|char
modifier|*
name|phy
parameter_list|,
specifier|const
name|char
modifier|*
name|config_fname
parameter_list|,
name|int
name|debug
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_new_assoc_sta
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|struct
name|sta_info
modifier|*
name|sta
parameter_list|,
name|int
name|reassoc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_interface_deinit_free
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_enable_iface
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|hapd_iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_reload_iface
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|hapd_iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_disable_iface
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|hapd_iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_add_iface
parameter_list|(
name|struct
name|hapd_interfaces
modifier|*
name|ifaces
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_remove_iface
parameter_list|(
name|struct
name|hapd_interfaces
modifier|*
name|ifaces
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_channel_list_updated
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|,
name|int
name|initiator
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_set_state
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|,
name|enum
name|hostapd_iface_state
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|hostapd_state_text
parameter_list|(
name|enum
name|hostapd_iface_state
name|s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_switch_channel
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|struct
name|csa_settings
modifier|*
name|settings
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_switch_channel_fallback
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|,
specifier|const
name|struct
name|hostapd_freq_params
modifier|*
name|freq_params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_cleanup_cs_params
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_periodic_iface
parameter_list|(
name|struct
name|hostapd_iface
modifier|*
name|iface
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* utils.c */
end_comment

begin_function_decl
name|int
name|hostapd_register_probereq_cb
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|sa
parameter_list|,
specifier|const
name|u8
modifier|*
name|da
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|ie
parameter_list|,
name|size_t
name|ie_len
parameter_list|,
name|int
name|ssi_signal
parameter_list|)
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_prune_associations
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* drv_callbacks.c (TODO: move to somewhere else?) */
end_comment

begin_function_decl
name|int
name|hostapd_notif_assoc
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|ie
parameter_list|,
name|size_t
name|ielen
parameter_list|,
name|int
name|reassoc
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_notif_disassoc
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_event_sta_low_ack
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_event_connect_failed_reason
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason_code
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_probe_req_rx
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|sa
parameter_list|,
specifier|const
name|u8
modifier|*
name|da
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|ie
parameter_list|,
name|size_t
name|ie_len
parameter_list|,
name|int
name|ssi_signal
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_event_ch_switch
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|freq
parameter_list|,
name|int
name|ht
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|cf1
parameter_list|,
name|int
name|cf2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|hostapd_eap_user
modifier|*
name|hostapd_get_eap_user
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|identity
parameter_list|,
name|size_t
name|identity_len
parameter_list|,
name|int
name|phase2
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostapd_data
modifier|*
name|hostapd_get_iface
parameter_list|(
name|struct
name|hapd_interfaces
modifier|*
name|interfaces
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_FST
end_ifdef

begin_function_decl
name|void
name|fst_hostapd_fill_iface_obj
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|struct
name|fst_wpa_obj
modifier|*
name|iface_obj
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_FST */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* HOSTAPD_H */
end_comment

end_unit

