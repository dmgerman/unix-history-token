begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * IKEv2 definitions  * Copyright (c) 2007, Jouni Malinen<j@w1.fi>  *  * This software may be distributed under the terms of the BSD license.  * See README for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|IKEV2_COMMON_H
end_ifndef

begin_define
define|#
directive|define
name|IKEV2_COMMON_H
end_define

begin_comment
comment|/*  * Nonce length must be at least 16 octets. It must also be at least half the  * key size of the negotiated PRF.  */
end_comment

begin_define
define|#
directive|define
name|IKEV2_NONCE_MIN_LEN
value|16
end_define

begin_define
define|#
directive|define
name|IKEV2_NONCE_MAX_LEN
value|256
end_define

begin_comment
comment|/* IKE Header - RFC 4306, Sect. 3.1 */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_MSC_VER
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|push
name|,
name|1
name|)
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MSC_VER */
end_comment

begin_define
define|#
directive|define
name|IKEV2_SPI_LEN
value|8
end_define

begin_struct
struct|struct
name|ikev2_hdr
block|{
name|u8
name|i_spi
index|[
name|IKEV2_SPI_LEN
index|]
decl_stmt|;
comment|/* IKE_SA Initiator's SPI */
name|u8
name|r_spi
index|[
name|IKEV2_SPI_LEN
index|]
decl_stmt|;
comment|/* IKE_SA Responder's SPI */
name|u8
name|next_payload
decl_stmt|;
name|u8
name|version
decl_stmt|;
comment|/* MjVer | MnVer */
name|u8
name|exchange_type
decl_stmt|;
name|u8
name|flags
decl_stmt|;
name|u8
name|message_id
index|[
literal|4
index|]
decl_stmt|;
name|u8
name|length
index|[
literal|4
index|]
decl_stmt|;
comment|/* total length of HDR + payloads */
block|}
name|STRUCT_PACKED
struct|;
end_struct

begin_struct
struct|struct
name|ikev2_payload_hdr
block|{
name|u8
name|next_payload
decl_stmt|;
name|u8
name|flags
decl_stmt|;
name|u8
name|payload_length
index|[
literal|2
index|]
decl_stmt|;
comment|/* this payload, including the payload header */
block|}
name|STRUCT_PACKED
struct|;
end_struct

begin_struct
struct|struct
name|ikev2_proposal
block|{
name|u8
name|type
decl_stmt|;
comment|/* 0 (last) or 2 (more) */
name|u8
name|reserved
decl_stmt|;
name|u8
name|proposal_length
index|[
literal|2
index|]
decl_stmt|;
comment|/* including all transform and attributes */
name|u8
name|proposal_num
decl_stmt|;
name|u8
name|protocol_id
decl_stmt|;
comment|/* IKEV2_PROTOCOL_* */
name|u8
name|spi_size
decl_stmt|;
name|u8
name|num_transforms
decl_stmt|;
comment|/* SPI of spi_size octets */
comment|/* Transforms */
block|}
name|STRUCT_PACKED
struct|;
end_struct

begin_struct
struct|struct
name|ikev2_transform
block|{
name|u8
name|type
decl_stmt|;
comment|/* 0 (last) or 3 (more) */
name|u8
name|reserved
decl_stmt|;
name|u8
name|transform_length
index|[
literal|2
index|]
decl_stmt|;
comment|/* including Header and Attributes */
name|u8
name|transform_type
decl_stmt|;
name|u8
name|reserved2
decl_stmt|;
name|u8
name|transform_id
index|[
literal|2
index|]
decl_stmt|;
comment|/* Transform Attributes */
block|}
name|STRUCT_PACKED
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_MSC_VER
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|pop
name|)
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MSC_VER */
end_comment

begin_comment
comment|/* Current IKEv2 version from RFC 4306 */
end_comment

begin_define
define|#
directive|define
name|IKEV2_MjVer
value|2
end_define

begin_define
define|#
directive|define
name|IKEV2_MnVer
value|0
end_define

begin_define
define|#
directive|define
name|IKEV2_VERSION
value|(((IKEV2_MjVer)<< 4) | (IKEV2_MnVer))
end_define

begin_comment
comment|/* IKEv2 Exchange Types */
end_comment

begin_enum
enum|enum
block|{
comment|/* 0-33 RESERVED */
name|IKE_SA_INIT
init|=
literal|34
block|,
name|IKE_SA_AUTH
init|=
literal|35
block|,
name|CREATE_CHILD_SA
init|=
literal|36
block|,
name|INFORMATION
init|=
literal|37
comment|/* 38-239 RESERVED TO IANA */
comment|/* 240-255 Reserved for private use */
block|}
enum|;
end_enum

begin_comment
comment|/* IKEv2 Flags */
end_comment

begin_define
define|#
directive|define
name|IKEV2_HDR_INITIATOR
value|0x08
end_define

begin_define
define|#
directive|define
name|IKEV2_HDR_VERSION
value|0x10
end_define

begin_define
define|#
directive|define
name|IKEV2_HDR_RESPONSE
value|0x20
end_define

begin_comment
comment|/* Payload Header Flags */
end_comment

begin_define
define|#
directive|define
name|IKEV2_PAYLOAD_FLAGS_CRITICAL
value|0x01
end_define

begin_comment
comment|/* EAP-IKEv2 Payload Types (in Next Payload Type field)  * http://www.iana.org/assignments/eap-ikev2-payloads */
end_comment

begin_enum
enum|enum
block|{
name|IKEV2_PAYLOAD_NO_NEXT_PAYLOAD
init|=
literal|0
block|,
name|IKEV2_PAYLOAD_SA
init|=
literal|33
block|,
name|IKEV2_PAYLOAD_KEY_EXCHANGE
init|=
literal|34
block|,
name|IKEV2_PAYLOAD_IDi
init|=
literal|35
block|,
name|IKEV2_PAYLOAD_IDr
init|=
literal|36
block|,
name|IKEV2_PAYLOAD_CERTIFICATE
init|=
literal|37
block|,
name|IKEV2_PAYLOAD_CERT_REQ
init|=
literal|38
block|,
name|IKEV2_PAYLOAD_AUTHENTICATION
init|=
literal|39
block|,
name|IKEV2_PAYLOAD_NONCE
init|=
literal|40
block|,
name|IKEV2_PAYLOAD_NOTIFICATION
init|=
literal|41
block|,
name|IKEV2_PAYLOAD_VENDOD_ID
init|=
literal|43
block|,
name|IKEV2_PAYLOAD_ENCRYPTED
init|=
literal|46
block|,
name|IKEV2_PAYLOAD_NEXT_FAST_ID
init|=
literal|121
block|}
enum|;
end_enum

begin_comment
comment|/* IKEv2 Proposal - Protocol ID */
end_comment

begin_enum
enum|enum
block|{
name|IKEV2_PROTOCOL_RESERVED
init|=
literal|0
block|,
name|IKEV2_PROTOCOL_IKE
init|=
literal|1
block|,
comment|/* IKE is the only one allowed for EAP-IKEv2 */
name|IKEV2_PROTOCOL_AH
init|=
literal|2
block|,
name|IKEV2_PROTOCOL_ESP
init|=
literal|3
block|}
enum|;
end_enum

begin_comment
comment|/* IKEv2 Transform Types */
end_comment

begin_enum
enum|enum
block|{
name|IKEV2_TRANSFORM_ENCR
init|=
literal|1
block|,
name|IKEV2_TRANSFORM_PRF
init|=
literal|2
block|,
name|IKEV2_TRANSFORM_INTEG
init|=
literal|3
block|,
name|IKEV2_TRANSFORM_DH
init|=
literal|4
block|,
name|IKEV2_TRANSFORM_ESN
init|=
literal|5
block|}
enum|;
end_enum

begin_comment
comment|/* IKEv2 Transform Type 1 (Encryption Algorithm) */
end_comment

begin_enum
enum|enum
block|{
name|ENCR_DES_IV64
init|=
literal|1
block|,
name|ENCR_DES
init|=
literal|2
block|,
name|ENCR_3DES
init|=
literal|3
block|,
name|ENCR_RC5
init|=
literal|4
block|,
name|ENCR_IDEA
init|=
literal|5
block|,
name|ENCR_CAST
init|=
literal|6
block|,
name|ENCR_BLOWFISH
init|=
literal|7
block|,
name|ENCR_3IDEA
init|=
literal|8
block|,
name|ENCR_DES_IV32
init|=
literal|9
block|,
name|ENCR_NULL
init|=
literal|11
block|,
name|ENCR_AES_CBC
init|=
literal|12
block|,
name|ENCR_AES_CTR
init|=
literal|13
block|}
enum|;
end_enum

begin_comment
comment|/* IKEv2 Transform Type 2 (Pseudo-random Function) */
end_comment

begin_enum
enum|enum
block|{
name|PRF_HMAC_MD5
init|=
literal|1
block|,
name|PRF_HMAC_SHA1
init|=
literal|2
block|,
name|PRF_HMAC_TIGER
init|=
literal|3
block|,
name|PRF_AES128_XCBC
init|=
literal|4
block|}
enum|;
end_enum

begin_comment
comment|/* IKEv2 Transform Type 3 (Integrity Algorithm) */
end_comment

begin_enum
enum|enum
block|{
name|AUTH_HMAC_MD5_96
init|=
literal|1
block|,
name|AUTH_HMAC_SHA1_96
init|=
literal|2
block|,
name|AUTH_DES_MAC
init|=
literal|3
block|,
name|AUTH_KPDK_MD5
init|=
literal|4
block|,
name|AUTH_AES_XCBC_96
init|=
literal|5
block|}
enum|;
end_enum

begin_comment
comment|/* IKEv2 Transform Type 4 (Diffie-Hellman Group) */
end_comment

begin_enum
enum|enum
block|{
name|DH_GROUP1_768BIT_MODP
init|=
literal|1
block|,
comment|/* RFC 4306 */
name|DH_GROUP2_1024BIT_MODP
init|=
literal|2
block|,
comment|/* RFC 4306 */
name|DH_GROUP5_1536BIT_MODP
init|=
literal|5
block|,
comment|/* RFC 3526 */
name|DH_GROUP5_2048BIT_MODP
init|=
literal|14
block|,
comment|/* RFC 3526 */
name|DH_GROUP5_3072BIT_MODP
init|=
literal|15
block|,
comment|/* RFC 3526 */
name|DH_GROUP5_4096BIT_MODP
init|=
literal|16
block|,
comment|/* RFC 3526 */
name|DH_GROUP5_6144BIT_MODP
init|=
literal|17
block|,
comment|/* RFC 3526 */
name|DH_GROUP5_8192BIT_MODP
init|=
literal|18
comment|/* RFC 3526 */
block|}
enum|;
end_enum

begin_comment
comment|/* Identification Data Types (RFC 4306, Sect. 3.5) */
end_comment

begin_enum
enum|enum
block|{
name|ID_IPV4_ADDR
init|=
literal|1
block|,
name|ID_FQDN
init|=
literal|2
block|,
name|ID_RFC822_ADDR
init|=
literal|3
block|,
name|ID_IPV6_ADDR
init|=
literal|5
block|,
name|ID_DER_ASN1_DN
init|=
literal|9
block|,
name|ID_DER_ASN1_GN
init|=
literal|10
block|,
name|ID_KEY_ID
init|=
literal|11
block|}
enum|;
end_enum

begin_comment
comment|/* Certificate Encoding (RFC 4306, Sect. 3.6) */
end_comment

begin_enum
enum|enum
block|{
name|CERT_ENCODING_PKCS7_X509
init|=
literal|1
block|,
name|CERT_ENCODING_PGP_CERT
init|=
literal|2
block|,
name|CERT_ENCODING_DNS_SIGNED_KEY
init|=
literal|3
block|,
comment|/* X.509 Certificate - Signature: DER encoded X.509 certificate whose 	 * public key is used to validate the sender's AUTH payload */
name|CERT_ENCODING_X509_CERT_SIGN
init|=
literal|4
block|,
name|CERT_ENCODING_KERBEROS_TOKEN
init|=
literal|6
block|,
comment|/* DER encoded X.509 certificate revocation list */
name|CERT_ENCODING_CRL
init|=
literal|7
block|,
name|CERT_ENCODING_ARL
init|=
literal|8
block|,
name|CERT_ENCODING_SPKI_CERT
init|=
literal|9
block|,
name|CERT_ENCODING_X509_CERT_ATTR
init|=
literal|10
block|,
comment|/* PKCS #1 encoded RSA key */
name|CERT_ENCODING_RAW_RSA_KEY
init|=
literal|11
block|,
name|CERT_ENCODING_HASH_AND_URL_X509_CERT
init|=
literal|12
block|,
name|CERT_ENCODING_HASH_AND_URL_X509_BUNDLE
init|=
literal|13
block|}
enum|;
end_enum

begin_comment
comment|/* Authentication Method (RFC 4306, Sect. 3.8) */
end_comment

begin_enum
enum|enum
block|{
name|AUTH_RSA_SIGN
init|=
literal|1
block|,
name|AUTH_SHARED_KEY_MIC
init|=
literal|2
block|,
name|AUTH_DSS_SIGN
init|=
literal|3
block|}
enum|;
end_enum

begin_comment
comment|/* Notify Message Types (RFC 4306, Sect. 3.10.1) */
end_comment

begin_enum
enum|enum
block|{
name|UNSUPPORTED_CRITICAL_PAYLOAD
init|=
literal|1
block|,
name|INVALID_IKE_SPI
init|=
literal|4
block|,
name|INVALID_MAJOR_VERSION
init|=
literal|5
block|,
name|INVALID_SYNTAX
init|=
literal|7
block|,
name|INVALID_MESSAGE_ID
init|=
literal|9
block|,
name|INVALID_SPI
init|=
literal|11
block|,
name|NO_PROPOSAL_CHOSEN
init|=
literal|14
block|,
name|INVALID_KE_PAYLOAD
init|=
literal|17
block|,
name|AUTHENTICATION_FAILED
init|=
literal|24
block|,
name|SINGLE_PAIR_REQUIRED
init|=
literal|34
block|,
name|NO_ADDITIONAL_SAS
init|=
literal|35
block|,
name|INTERNAL_ADDRESS_FAILURE
init|=
literal|36
block|,
name|FAILED_CP_REQUIRED
init|=
literal|37
block|,
name|TS_UNACCEPTABLE
init|=
literal|38
block|,
name|INVALID_SELECTORS
init|=
literal|39
block|}
enum|;
end_enum

begin_struct
struct|struct
name|ikev2_keys
block|{
name|u8
modifier|*
name|SK_d
decl_stmt|,
modifier|*
name|SK_ai
decl_stmt|,
modifier|*
name|SK_ar
decl_stmt|,
modifier|*
name|SK_ei
decl_stmt|,
modifier|*
name|SK_er
decl_stmt|,
modifier|*
name|SK_pi
decl_stmt|,
modifier|*
name|SK_pr
decl_stmt|;
name|size_t
name|SK_d_len
decl_stmt|,
name|SK_integ_len
decl_stmt|,
name|SK_encr_len
decl_stmt|,
name|SK_prf_len
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|ikev2_keys_set
parameter_list|(
name|struct
name|ikev2_keys
modifier|*
name|keys
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ikev2_free_keys
parameter_list|(
name|struct
name|ikev2_keys
modifier|*
name|keys
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Maximum hash length for supported hash algorithms */
end_comment

begin_define
define|#
directive|define
name|IKEV2_MAX_HASH_LEN
value|20
end_define

begin_struct
struct|struct
name|ikev2_integ_alg
block|{
name|int
name|id
decl_stmt|;
name|size_t
name|key_len
decl_stmt|;
name|size_t
name|hash_len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ikev2_prf_alg
block|{
name|int
name|id
decl_stmt|;
name|size_t
name|key_len
decl_stmt|;
name|size_t
name|hash_len
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|ikev2_encr_alg
block|{
name|int
name|id
decl_stmt|;
name|size_t
name|key_len
decl_stmt|;
name|size_t
name|block_size
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
specifier|const
name|struct
name|ikev2_integ_alg
modifier|*
name|ikev2_get_integ
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ikev2_integ_hash
parameter_list|(
name|int
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|,
name|u8
modifier|*
name|hash
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|ikev2_prf_alg
modifier|*
name|ikev2_get_prf
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ikev2_prf_hash
parameter_list|(
name|int
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|,
name|size_t
name|num_elem
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
index|[]
parameter_list|,
specifier|const
name|size_t
modifier|*
name|len
parameter_list|,
name|u8
modifier|*
name|hash
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ikev2_prf_plus
parameter_list|(
name|int
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|,
name|u8
modifier|*
name|out
parameter_list|,
name|size_t
name|out_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|ikev2_encr_alg
modifier|*
name|ikev2_get_encr
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ikev2_encr_encrypt
parameter_list|(
name|int
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|iv
parameter_list|,
specifier|const
name|u8
modifier|*
name|plain
parameter_list|,
name|u8
modifier|*
name|crypt
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ikev2_encr_decrypt
parameter_list|(
name|int
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|iv
parameter_list|,
specifier|const
name|u8
modifier|*
name|crypt
parameter_list|,
name|u8
modifier|*
name|plain
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ikev2_derive_auth_data
parameter_list|(
name|int
name|prf_alg
parameter_list|,
specifier|const
name|struct
name|wpabuf
modifier|*
name|sign_msg
parameter_list|,
specifier|const
name|u8
modifier|*
name|ID
parameter_list|,
name|size_t
name|ID_len
parameter_list|,
name|u8
name|ID_type
parameter_list|,
name|struct
name|ikev2_keys
modifier|*
name|keys
parameter_list|,
name|int
name|initiator
parameter_list|,
specifier|const
name|u8
modifier|*
name|shared_secret
parameter_list|,
name|size_t
name|shared_secret_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|nonce
parameter_list|,
name|size_t
name|nonce_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|key_pad
parameter_list|,
name|size_t
name|key_pad_len
parameter_list|,
name|u8
modifier|*
name|auth_data
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|ikev2_payloads
block|{
specifier|const
name|u8
modifier|*
name|sa
decl_stmt|;
name|size_t
name|sa_len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|ke
decl_stmt|;
name|size_t
name|ke_len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|idi
decl_stmt|;
name|size_t
name|idi_len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|idr
decl_stmt|;
name|size_t
name|idr_len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|cert
decl_stmt|;
name|size_t
name|cert_len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|auth
decl_stmt|;
name|size_t
name|auth_len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|nonce
decl_stmt|;
name|size_t
name|nonce_len
decl_stmt|;
specifier|const
name|u8
modifier|*
name|encrypted
decl_stmt|;
name|size_t
name|encrypted_len
decl_stmt|;
name|u8
name|encr_next_payload
decl_stmt|;
specifier|const
name|u8
modifier|*
name|notification
decl_stmt|;
name|size_t
name|notification_len
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|ikev2_parse_payloads
parameter_list|(
name|struct
name|ikev2_payloads
modifier|*
name|payloads
parameter_list|,
name|u8
name|next_payload
parameter_list|,
specifier|const
name|u8
modifier|*
name|pos
parameter_list|,
specifier|const
name|u8
modifier|*
name|end
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|u8
modifier|*
name|ikev2_decrypt_payload
parameter_list|(
name|int
name|encr_id
parameter_list|,
name|int
name|integ_id
parameter_list|,
name|struct
name|ikev2_keys
modifier|*
name|keys
parameter_list|,
name|int
name|initiator
parameter_list|,
specifier|const
name|struct
name|ikev2_hdr
modifier|*
name|hdr
parameter_list|,
specifier|const
name|u8
modifier|*
name|encrypted
parameter_list|,
name|size_t
name|encrypted_len
parameter_list|,
name|size_t
modifier|*
name|res_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ikev2_update_hdr
parameter_list|(
name|struct
name|wpabuf
modifier|*
name|msg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ikev2_build_encrypted
parameter_list|(
name|int
name|encr_id
parameter_list|,
name|int
name|integ_id
parameter_list|,
name|struct
name|ikev2_keys
modifier|*
name|keys
parameter_list|,
name|int
name|initiator
parameter_list|,
name|struct
name|wpabuf
modifier|*
name|msg
parameter_list|,
name|struct
name|wpabuf
modifier|*
name|plain
parameter_list|,
name|u8
name|next_payload
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ikev2_derive_sk_keys
parameter_list|(
specifier|const
name|struct
name|ikev2_prf_alg
modifier|*
name|prf
parameter_list|,
specifier|const
name|struct
name|ikev2_integ_alg
modifier|*
name|integ
parameter_list|,
specifier|const
name|struct
name|ikev2_encr_alg
modifier|*
name|encr
parameter_list|,
specifier|const
name|u8
modifier|*
name|skeyseed
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|,
name|struct
name|ikev2_keys
modifier|*
name|keys
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* IKEV2_COMMON_H */
end_comment

end_unit

