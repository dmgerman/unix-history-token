begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * wpa_supplicant - Internal definitions  * Copyright (c) 2003-2007, Jouni Malinen<j@w1.fi>  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License version 2 as  * published by the Free Software Foundation.  *  * Alternatively, this software may be distributed under the terms of BSD  * license.  *  * See README and COPYING for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|WPA_SUPPLICANT_I_H
end_ifndef

begin_define
define|#
directive|define
name|WPA_SUPPLICANT_I_H
end_define

begin_include
include|#
directive|include
file|"drivers/driver.h"
end_include

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|wpa_supplicant_version
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|wpa_supplicant_license
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_NO_STDOUT_DEBUG
end_ifndef

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|wpa_supplicant_full_license1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|wpa_supplicant_full_license2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|wpa_supplicant_full_license3
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|wpa_supplicant_full_license4
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|wpa_supplicant_full_license5
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_NO_STDOUT_DEBUG */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|wpa_driver_ops
modifier|*
name|wpa_supplicant_drivers
index|[]
decl_stmt|;
end_decl_stmt

begin_struct_decl
struct_decl|struct
name|wpa_scan_result
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|wpa_sm
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|wpa_supplicant
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * Forward declarations of private structures used within the ctrl_iface  * backends. Other parts of wpa_supplicant do not have access to data stored in  * these structures.  */
end_comment

begin_struct_decl
struct_decl|struct
name|ctrl_iface_priv
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ctrl_iface_global_priv
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ctrl_iface_dbus_priv
struct_decl|;
end_struct_decl

begin_comment
comment|/**  * struct wpa_interface - Parameters for wpa_supplicant_add_iface()  */
end_comment

begin_struct
struct|struct
name|wpa_interface
block|{
comment|/** 	 * confname - Configuration name (file or profile) name 	 * 	 * This can also be %NULL when a configuration file is not used. In 	 * that case, ctrl_interface must be set to allow the interface to be 	 * configured. 	 */
specifier|const
name|char
modifier|*
name|confname
decl_stmt|;
comment|/** 	 * ctrl_interface - Control interface parameter 	 * 	 * If a configuration file is not used, this variable can be used to 	 * set the ctrl_interface parameter that would have otherwise been read 	 * from the configuration file. If both confname and ctrl_interface are 	 * set, ctrl_interface is used to override the value from configuration 	 * file. 	 */
specifier|const
name|char
modifier|*
name|ctrl_interface
decl_stmt|;
comment|/** 	 * driver - Driver interface name, or %NULL to use the default driver 	 */
specifier|const
name|char
modifier|*
name|driver
decl_stmt|;
comment|/** 	 * driver_param - Driver interface parameters 	 * 	 * If a configuration file is not used, this variable can be used to 	 * set the driver_param parameters that would have otherwise been read 	 * from the configuration file. If both confname and driver_param are 	 * set, driver_param is used to override the value from configuration 	 * file. 	 */
specifier|const
name|char
modifier|*
name|driver_param
decl_stmt|;
comment|/** 	 * ifname - Interface name 	 */
specifier|const
name|char
modifier|*
name|ifname
decl_stmt|;
comment|/** 	 * bridge_ifname - Optional bridge interface name 	 * 	 * If the driver interface (ifname) is included in a Linux bridge 	 * device, the bridge interface may need to be used for receiving EAPOL 	 * frames. This can be enabled by setting this variable to enable 	 * receiving of EAPOL frames from an additional interface. 	 */
specifier|const
name|char
modifier|*
name|bridge_ifname
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_params - Parameters for wpa_supplicant_init()  */
end_comment

begin_struct
struct|struct
name|wpa_params
block|{
comment|/** 	 * daemonize - Run %wpa_supplicant in the background 	 */
name|int
name|daemonize
decl_stmt|;
comment|/** 	 * wait_for_monitor - Wait for a monitor program before starting 	 */
name|int
name|wait_for_monitor
decl_stmt|;
comment|/** 	 * pid_file - Path to a PID (process ID) file 	 * 	 * If this and daemonize are set, process ID of the background process 	 * will be written to the specified file. 	 */
name|char
modifier|*
name|pid_file
decl_stmt|;
comment|/** 	 * wpa_debug_level - Debugging verbosity level (e.g., MSG_INFO) 	 */
name|int
name|wpa_debug_level
decl_stmt|;
comment|/** 	 * wpa_debug_show_keys - Whether keying material is included in debug 	 * 	 * This parameter can be used to allow keying material to be included 	 * in debug messages. This is a security risk and this option should 	 * not be enabled in normal configuration. If needed during 	 * development or while troubleshooting, this option can provide more 	 * details for figuring out what is happening. 	 */
name|int
name|wpa_debug_show_keys
decl_stmt|;
comment|/** 	 * wpa_debug_timestamp - Whether to include timestamp in debug messages 	 */
name|int
name|wpa_debug_timestamp
decl_stmt|;
comment|/** 	 * ctrl_interface - Global ctrl_iface path/parameter 	 */
name|char
modifier|*
name|ctrl_interface
decl_stmt|;
comment|/** 	 * dbus_ctrl_interface - Enable the DBus control interface 	 */
name|int
name|dbus_ctrl_interface
decl_stmt|;
comment|/** 	 * wpa_debug_file_path - Path of debug file or %NULL to use stdout 	 */
specifier|const
name|char
modifier|*
name|wpa_debug_file_path
decl_stmt|;
comment|/** 	 * wpa_debug_syslog - Enable log output through syslog 	 */
specifier|const
name|char
modifier|*
name|wpa_debug_syslog
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_global - Internal, global data for all %wpa_supplicant interfaces  *  * This structure is initialized by calling wpa_supplicant_init() when starting  * %wpa_supplicant.  */
end_comment

begin_struct
struct|struct
name|wpa_global
block|{
name|struct
name|wpa_supplicant
modifier|*
name|ifaces
decl_stmt|;
name|struct
name|wpa_params
name|params
decl_stmt|;
name|struct
name|ctrl_iface_global_priv
modifier|*
name|ctrl_iface
decl_stmt|;
name|struct
name|ctrl_iface_dbus_priv
modifier|*
name|dbus_ctrl_iface
decl_stmt|;
name|void
modifier|*
modifier|*
name|drv_priv
decl_stmt|;
name|size_t
name|drv_count
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpa_client_mlme
block|{
ifdef|#
directive|ifdef
name|CONFIG_CLIENT_MLME
enum|enum
block|{
name|IEEE80211_DISABLED
block|,
name|IEEE80211_AUTHENTICATE
block|,
name|IEEE80211_ASSOCIATE
block|,
name|IEEE80211_ASSOCIATED
block|,
name|IEEE80211_IBSS_SEARCH
block|,
name|IEEE80211_IBSS_JOINED
block|}
name|state
enum|;
name|u8
name|prev_bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|ssid
index|[
literal|32
index|]
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
name|u16
name|aid
decl_stmt|;
name|u16
name|ap_capab
decl_stmt|,
name|capab
decl_stmt|;
name|u8
modifier|*
name|extra_ie
decl_stmt|;
comment|/* to be added to the end of AssocReq */
name|size_t
name|extra_ie_len
decl_stmt|;
name|u8
modifier|*
name|extra_probe_ie
decl_stmt|;
comment|/* to be added to the end of ProbeReq */
name|size_t
name|extra_probe_ie_len
decl_stmt|;
name|wpa_key_mgmt
name|key_mgmt
decl_stmt|;
comment|/* The last AssocReq/Resp IEs */
name|u8
modifier|*
name|assocreq_ies
decl_stmt|,
modifier|*
name|assocresp_ies
decl_stmt|;
name|size_t
name|assocreq_ies_len
decl_stmt|,
name|assocresp_ies_len
decl_stmt|;
name|int
name|auth_tries
decl_stmt|,
name|assoc_tries
decl_stmt|;
name|unsigned
name|int
name|ssid_set
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|bssid_set
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|prev_bssid_set
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|authenticated
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|associated
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|probereq_poll
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|use_protection
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|create_ibss
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|mixed_cell
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|wmm_enabled
range|:
literal|1
decl_stmt|;
name|struct
name|os_time
name|last_probe
decl_stmt|;
define|#
directive|define
name|IEEE80211_AUTH_ALG_OPEN
value|BIT(0)
define|#
directive|define
name|IEEE80211_AUTH_ALG_SHARED_KEY
value|BIT(1)
define|#
directive|define
name|IEEE80211_AUTH_ALG_LEAP
value|BIT(2)
name|unsigned
name|int
name|auth_algs
decl_stmt|;
comment|/* bitfield of allowed auth algs */
name|int
name|auth_alg
decl_stmt|;
comment|/* currently used IEEE 802.11 authentication algorithm */
name|int
name|auth_transaction
decl_stmt|;
name|struct
name|os_time
name|ibss_join_req
decl_stmt|;
name|u8
modifier|*
name|probe_resp
decl_stmt|;
comment|/* ProbeResp template for IBSS */
name|size_t
name|probe_resp_len
decl_stmt|;
name|u32
name|supp_rates_bits
decl_stmt|;
name|int
name|wmm_last_param_set
decl_stmt|;
name|int
name|sta_scanning
decl_stmt|;
name|int
name|scan_hw_mode_idx
decl_stmt|;
name|int
name|scan_channel_idx
decl_stmt|;
enum|enum
block|{
name|SCAN_SET_CHANNEL
block|,
name|SCAN_SEND_PROBE
block|}
name|scan_state
enum|;
name|struct
name|os_time
name|last_scan_completed
decl_stmt|;
name|int
name|scan_oper_channel
decl_stmt|;
name|int
name|scan_oper_freq
decl_stmt|;
name|int
name|scan_oper_phymode
decl_stmt|;
name|u8
name|scan_ssid
index|[
literal|32
index|]
decl_stmt|;
name|size_t
name|scan_ssid_len
decl_stmt|;
name|int
name|scan_skip_11b
decl_stmt|;
name|struct
name|ieee80211_sta_bss
modifier|*
name|sta_bss_list
decl_stmt|;
define|#
directive|define
name|STA_HASH_SIZE
value|256
define|#
directive|define
name|STA_HASH
parameter_list|(
name|sta
parameter_list|)
value|(sta[5])
name|struct
name|ieee80211_sta_bss
modifier|*
name|sta_bss_hash
index|[
name|STA_HASH_SIZE
index|]
decl_stmt|;
name|int
name|cts_protect_erp_frames
decl_stmt|;
name|int
name|phymode
decl_stmt|;
comment|/* current mode; WPA_MODE_IEEE80211A, .. */
name|struct
name|wpa_hw_modes
modifier|*
name|modes
decl_stmt|;
name|size_t
name|num_modes
decl_stmt|;
name|unsigned
name|int
name|hw_modes
decl_stmt|;
comment|/* bitfield of allowed hardware modes; 				* (1<< MODE_*) */
name|int
name|num_curr_rates
decl_stmt|;
name|struct
name|wpa_rate_data
modifier|*
name|curr_rates
decl_stmt|;
name|int
name|freq
decl_stmt|;
comment|/* The current frequency in MHz */
name|int
name|channel
decl_stmt|;
comment|/* The current IEEE 802.11 channel number */
ifdef|#
directive|ifdef
name|CONFIG_IEEE80211R
name|u8
name|current_md
index|[
literal|6
index|]
decl_stmt|;
name|u8
modifier|*
name|ft_ies
decl_stmt|;
name|size_t
name|ft_ies_len
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_IEEE80211R */
else|#
directive|else
comment|/* CONFIG_CLIENT_MLME */
name|int
name|dummy
decl_stmt|;
comment|/* to keep MSVC happy */
endif|#
directive|endif
comment|/* CONFIG_CLIENT_MLME */
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_supplicant - Internal data for wpa_supplicant interface  *  * This structure contains the internal data for core wpa_supplicant code. This  * should be only used directly from the core code. However, a pointer to this  * data is used from other files as an arbitrary context pointer in calls to  * core functions.  */
end_comment

begin_struct
struct|struct
name|wpa_supplicant
block|{
name|struct
name|wpa_global
modifier|*
name|global
decl_stmt|;
name|struct
name|wpa_supplicant
modifier|*
name|next
decl_stmt|;
name|struct
name|l2_packet_data
modifier|*
name|l2
decl_stmt|;
name|struct
name|l2_packet_data
modifier|*
name|l2_br
decl_stmt|;
name|unsigned
name|char
name|own_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|char
name|ifname
index|[
literal|100
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_CTRL_IFACE_DBUS
name|char
modifier|*
name|dbus_path
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_CTRL_IFACE_DBUS */
name|char
name|bridge_ifname
index|[
literal|16
index|]
decl_stmt|;
name|char
modifier|*
name|confname
decl_stmt|;
name|struct
name|wpa_config
modifier|*
name|conf
decl_stmt|;
name|int
name|countermeasures
decl_stmt|;
name|os_time_t
name|last_michael_mic_error
decl_stmt|;
name|u8
name|bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|pending_bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
comment|/* If wpa_state == WPA_ASSOCIATING, this 				     * field contains the targer BSSID. */
name|int
name|reassociate
decl_stmt|;
comment|/* reassociation requested */
name|int
name|disconnected
decl_stmt|;
comment|/* all connections disabled; i.e., do no reassociate 			   * before this has been cleared */
name|struct
name|wpa_ssid
modifier|*
name|current_ssid
decl_stmt|;
name|int
name|ap_ies_from_associnfo
decl_stmt|;
comment|/* Selected configuration (based on Beacon/ProbeResp WPA IE) */
name|int
name|pairwise_cipher
decl_stmt|;
name|int
name|group_cipher
decl_stmt|;
name|int
name|key_mgmt
decl_stmt|;
name|int
name|mgmt_group_cipher
decl_stmt|;
name|void
modifier|*
name|drv_priv
decl_stmt|;
comment|/* private data used by driver_ops */
name|void
modifier|*
name|global_drv_priv
decl_stmt|;
name|struct
name|wpa_ssid
modifier|*
name|prev_scan_ssid
decl_stmt|;
comment|/* previously scanned SSID; 					  * NULL = not yet initialized (start 					  * with broadcast SSID) 					  * BROADCAST_SSID_SCAN = broadcast 					  * SSID was used in the previous scan 					  */
define|#
directive|define
name|BROADCAST_SSID_SCAN
value|((struct wpa_ssid *) 1)
name|struct
name|wpa_scan_results
modifier|*
name|scan_res
decl_stmt|;
name|struct
name|wpa_driver_ops
modifier|*
name|driver
decl_stmt|;
name|int
name|interface_removed
decl_stmt|;
comment|/* whether the network interface has been 				* removed */
name|struct
name|wpa_sm
modifier|*
name|wpa
decl_stmt|;
name|struct
name|eapol_sm
modifier|*
name|eapol
decl_stmt|;
name|struct
name|ctrl_iface_priv
modifier|*
name|ctrl_iface
decl_stmt|;
name|wpa_states
name|wpa_state
decl_stmt|;
name|int
name|scanning
decl_stmt|;
name|int
name|new_connection
decl_stmt|;
name|int
name|reassociated_connection
decl_stmt|;
name|int
name|eapol_received
decl_stmt|;
comment|/* number of EAPOL packets received after the 			     * previous association event */
name|struct
name|scard_data
modifier|*
name|scard
decl_stmt|;
name|unsigned
name|char
name|last_eapol_src
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|keys_cleared
decl_stmt|;
name|struct
name|wpa_blacklist
modifier|*
name|blacklist
decl_stmt|;
name|int
name|scan_req
decl_stmt|;
comment|/* manual scan request; this forces a scan even if there 		       * are no enabled networks in the configuration */
name|int
name|scan_res_tried
decl_stmt|;
comment|/* whether ap_scan=1 mode has tried to fetch scan 			     * results without a new scan request; this is used 			     * to speed up the first association if the driver 			     * has already available scan results. */
name|int
name|scan_runs
decl_stmt|;
comment|/* number of scan runs since WPS was started */
name|struct
name|wpa_client_mlme
name|mlme
decl_stmt|;
name|int
name|use_client_mlme
decl_stmt|;
name|int
name|driver_4way_handshake
decl_stmt|;
name|int
name|pending_mic_error_report
decl_stmt|;
name|int
name|pending_mic_error_pairwise
decl_stmt|;
name|int
name|mic_errors_seen
decl_stmt|;
comment|/* Michael MIC errors with the current PTK */
name|struct
name|wps_context
modifier|*
name|wps
decl_stmt|;
name|int
name|wps_success
decl_stmt|;
comment|/* WPS success event received */
name|int
name|blacklist_cleared
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|pending_eapol_rx
decl_stmt|;
name|struct
name|os_time
name|pending_eapol_rx_time
decl_stmt|;
name|u8
name|pending_eapol_rx_src
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* wpa_supplicant.c */
end_comment

begin_function_decl
name|int
name|wpa_supplicant_reload_configuration
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|wpa_supplicant_state_txt
parameter_list|(
name|int
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_driver_init
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_set_suites
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_scan_res
modifier|*
name|bss
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
name|u8
modifier|*
name|wpa_ie
parameter_list|,
name|size_t
modifier|*
name|wpa_ie_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_associate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_scan_res
modifier|*
name|bss
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_set_non_wpa_policy
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_initiate_eapol
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_get_scan_results
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_clear_keys
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_req_auth_timeout
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|sec
parameter_list|,
name|int
name|usec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_set_state
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|wpa_states
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_ssid
modifier|*
name|wpa_supplicant_get_ssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_cancel_auth_timeout
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_deauthenticate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|reason_code
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_disassociate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|reason_code
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_show_license
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_supplicant
modifier|*
name|wpa_supplicant_add_iface
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|,
name|struct
name|wpa_interface
modifier|*
name|iface
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_remove_iface
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|,
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_supplicant
modifier|*
name|wpa_supplicant_get_iface
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_global
modifier|*
name|wpa_supplicant_init
parameter_list|(
name|struct
name|wpa_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_run
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_deinit
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_scard_init
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* scan.c */
end_comment

begin_function_decl
name|int
name|wpa_supplicant_enabled_networks
parameter_list|(
name|struct
name|wpa_config
modifier|*
name|conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_req_scan
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|sec
parameter_list|,
name|int
name|usec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_cancel_scan
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_notify_scanning
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|scanning
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* events.c */
end_comment

begin_function_decl
name|void
name|wpa_supplicant_mark_disassoc
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* driver_ops */
end_comment

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|wpa_drv_init
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|init2
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|init2
argument_list|(
name|wpa_s
argument_list|,
name|ifname
argument_list|,
name|wpa_s
operator|->
name|global_drv_priv
argument_list|)
return|;
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|init
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|init
argument_list|(
name|wpa_s
argument_list|,
name|ifname
argument_list|)
return|;
block|}
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|wpa_drv_deinit
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|deinit
condition|)
name|wpa_s
operator|->
name|driver
operator|->
name|deinit
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_param
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|char
modifier|*
name|param
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_param
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_param
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|param
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_drop_unencrypted
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_drop_unencrypted
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_drop_unencrypted
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|enabled
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_countermeasures
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_countermeasures
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_countermeasures
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|enabled
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_auth_alg
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|auth_alg
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_auth_alg
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_auth_alg
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|auth_alg
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_wpa
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_wpa
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_wpa
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|enabled
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_mode
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_mode
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_mode
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|mode
argument_list|)
return|;
block|}
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_associate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_driver_associate_params
modifier|*
name|params
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|associate
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|associate
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|params
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_scan
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|ssid
parameter_list|,
name|size_t
name|ssid_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|scan
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|scan
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|ssid
argument_list|,
name|ssid_len
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_get_scan_results
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_scan_result
modifier|*
name|results
parameter_list|,
name|size_t
name|max_size
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|get_scan_results
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|get_scan_results
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|results
argument_list|,
name|max_size
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|wpa_scan_results
modifier|*
name|wpa_drv_get_scan_results2
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|get_scan_results2
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|get_scan_results2
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|)
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_get_bssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|u8
modifier|*
name|bssid
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|get_bssid
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|get_bssid
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|bssid
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_get_ssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|u8
modifier|*
name|ssid
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|get_ssid
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|get_ssid
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|ssid
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_key
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|wpa_alg
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|key_idx
parameter_list|,
name|int
name|set_tx
parameter_list|,
specifier|const
name|u8
modifier|*
name|seq
parameter_list|,
name|size_t
name|seq_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_key
condition|)
block|{
name|wpa_s
operator|->
name|keys_cleared
operator|=
literal|0
expr_stmt|;
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_key
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|alg
argument_list|,
name|addr
argument_list|,
name|key_idx
argument_list|,
name|set_tx
argument_list|,
name|seq
argument_list|,
name|seq_len
argument_list|,
name|key
argument_list|,
name|key_len
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_deauthenticate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason_code
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|deauthenticate
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|deauthenticate
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|addr
argument_list|,
name|reason_code
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_disassociate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason_code
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|disassociate
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|disassociate
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|addr
argument_list|,
name|reason_code
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_add_pmkid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|pmkid
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|add_pmkid
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|add_pmkid
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|bssid
argument_list|,
name|pmkid
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_remove_pmkid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|pmkid
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|remove_pmkid
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|remove_pmkid
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|bssid
argument_list|,
name|pmkid
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_flush_pmkid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|flush_pmkid
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|flush_pmkid
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_get_capa
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_driver_capa
modifier|*
name|capa
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|get_capa
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|get_capa
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|capa
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|wpa_drv_poll
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|poll
condition|)
block|{
name|wpa_s
operator|->
name|driver
operator|->
name|poll
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
specifier|const
name|char
modifier|*
name|wpa_drv_get_ifname
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|get_ifname
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|get_ifname
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|)
return|;
block|}
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
specifier|const
name|u8
modifier|*
name|wpa_drv_get_mac_addr
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|get_mac_addr
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|get_mac_addr
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|)
return|;
block|}
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_send_eapol
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|dst
parameter_list|,
name|u16
name|proto
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|send_eapol
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|send_eapol
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|dst
argument_list|,
name|proto
argument_list|,
name|data
argument_list|,
name|data_len
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_operstate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_operstate
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_operstate
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|state
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_mlme_setprotection
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|protect_type
parameter_list|,
name|int
name|key_type
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|mlme_setprotection
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|mlme_setprotection
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|addr
argument_list|,
name|protect_type
argument_list|,
name|key_type
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|wpa_hw_modes
modifier|*
name|wpa_drv_get_hw_feature_data
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|u16
modifier|*
name|num_modes
parameter_list|,
name|u16
modifier|*
name|flags
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|get_hw_feature_data
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|get_hw_feature_data
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|num_modes
argument_list|,
name|flags
argument_list|)
return|;
return|return
name|NULL
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_channel
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|wpa_hw_mode
name|phymode
parameter_list|,
name|int
name|chan
parameter_list|,
name|int
name|freq
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_channel
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_channel
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|phymode
argument_list|,
name|chan
argument_list|,
name|freq
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_ssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|ssid
parameter_list|,
name|size_t
name|ssid_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_ssid
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_ssid
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|ssid
argument_list|,
name|ssid_len
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_bssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_bssid
condition|)
block|{
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_bssid
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|bssid
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_country
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|char
modifier|*
name|alpha2
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_country
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_country
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|alpha2
argument_list|)
return|;
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_send_mlme
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|send_mlme
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|send_mlme
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|data
argument_list|,
name|data_len
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_mlme_add_sta
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|supp_rates
parameter_list|,
name|size_t
name|supp_rates_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|mlme_add_sta
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|mlme_add_sta
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|addr
argument_list|,
name|supp_rates
argument_list|,
name|supp_rates_len
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_mlme_remove_sta
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|mlme_remove_sta
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|mlme_remove_sta
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|addr
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_update_ft_ies
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|md
parameter_list|,
specifier|const
name|u8
modifier|*
name|ies
parameter_list|,
name|size_t
name|ies_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|update_ft_ies
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|update_ft_ies
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|md
argument_list|,
name|ies
argument_list|,
name|ies_len
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_send_ft_action
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|u8
name|action
parameter_list|,
specifier|const
name|u8
modifier|*
name|target_ap
parameter_list|,
specifier|const
name|u8
modifier|*
name|ies
parameter_list|,
name|size_t
name|ies_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|send_ft_action
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|send_ft_action
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|action
argument_list|,
name|target_ap
argument_list|,
name|ies
argument_list|,
name|ies_len
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_drv_set_probe_req_ie
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|ies
parameter_list|,
name|size_t
name|ies_len
parameter_list|)
block|{
if|if
condition|(
name|wpa_s
operator|->
name|driver
operator|->
name|set_probe_req_ie
condition|)
return|return
name|wpa_s
operator|->
name|driver
operator|->
name|set_probe_req_ie
argument_list|(
name|wpa_s
operator|->
name|drv_priv
argument_list|,
name|ies
argument_list|,
name|ies_len
argument_list|)
return|;
return|return
operator|-
literal|1
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* WPA_SUPPLICANT_I_H */
end_comment

end_unit

