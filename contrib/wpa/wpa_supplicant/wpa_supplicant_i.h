begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * wpa_supplicant - Internal definitions  * Copyright (c) 2003-2014, Jouni Malinen<j@w1.fi>  *  * This software may be distributed under the terms of the BSD license.  * See README for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|WPA_SUPPLICANT_I_H
end_ifndef

begin_define
define|#
directive|define
name|WPA_SUPPLICANT_I_H
end_define

begin_include
include|#
directive|include
file|"utils/list.h"
end_include

begin_include
include|#
directive|include
file|"common/defs.h"
end_include

begin_include
include|#
directive|include
file|"common/sae.h"
end_include

begin_include
include|#
directive|include
file|"common/wpa_ctrl.h"
end_include

begin_include
include|#
directive|include
file|"wps/wps_defs.h"
end_include

begin_include
include|#
directive|include
file|"config_ssid.h"
end_include

begin_include
include|#
directive|include
file|"wmm_ac.h"
end_include

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|wpa_supplicant_version
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|wpa_supplicant_license
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_NO_STDOUT_DEBUG
end_ifndef

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|wpa_supplicant_full_license1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|wpa_supplicant_full_license2
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|wpa_supplicant_full_license3
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|wpa_supplicant_full_license4
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
specifier|const
name|wpa_supplicant_full_license5
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_NO_STDOUT_DEBUG */
end_comment

begin_struct_decl
struct_decl|struct
name|wpa_sm
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|wpa_supplicant
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ibss_rsn
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|scan_info
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|wpa_bss
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|wpa_scan_results
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|hostapd_hw_modes
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|wpa_driver_associate_params
struct_decl|;
end_struct_decl

begin_comment
comment|/*  * Forward declarations of private structures used within the ctrl_iface  * backends. Other parts of wpa_supplicant do not have access to data stored in  * these structures.  */
end_comment

begin_struct_decl
struct_decl|struct
name|ctrl_iface_priv
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|ctrl_iface_global_priv
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|wpas_dbus_priv
struct_decl|;
end_struct_decl

begin_comment
comment|/**  * struct wpa_interface - Parameters for wpa_supplicant_add_iface()  */
end_comment

begin_struct
struct|struct
name|wpa_interface
block|{
comment|/** 	 * confname - Configuration name (file or profile) name 	 * 	 * This can also be %NULL when a configuration file is not used. In 	 * that case, ctrl_interface must be set to allow the interface to be 	 * configured. 	 */
specifier|const
name|char
modifier|*
name|confname
decl_stmt|;
comment|/** 	 * confanother - Additional configuration name (file or profile) name 	 * 	 * This can also be %NULL when the additional configuration file is not 	 * used. 	 */
specifier|const
name|char
modifier|*
name|confanother
decl_stmt|;
comment|/** 	 * ctrl_interface - Control interface parameter 	 * 	 * If a configuration file is not used, this variable can be used to 	 * set the ctrl_interface parameter that would have otherwise been read 	 * from the configuration file. If both confname and ctrl_interface are 	 * set, ctrl_interface is used to override the value from configuration 	 * file. 	 */
specifier|const
name|char
modifier|*
name|ctrl_interface
decl_stmt|;
comment|/** 	 * driver - Driver interface name, or %NULL to use the default driver 	 */
specifier|const
name|char
modifier|*
name|driver
decl_stmt|;
comment|/** 	 * driver_param - Driver interface parameters 	 * 	 * If a configuration file is not used, this variable can be used to 	 * set the driver_param parameters that would have otherwise been read 	 * from the configuration file. If both confname and driver_param are 	 * set, driver_param is used to override the value from configuration 	 * file. 	 */
specifier|const
name|char
modifier|*
name|driver_param
decl_stmt|;
comment|/** 	 * ifname - Interface name 	 */
specifier|const
name|char
modifier|*
name|ifname
decl_stmt|;
comment|/** 	 * bridge_ifname - Optional bridge interface name 	 * 	 * If the driver interface (ifname) is included in a Linux bridge 	 * device, the bridge interface may need to be used for receiving EAPOL 	 * frames. This can be enabled by setting this variable to enable 	 * receiving of EAPOL frames from an additional interface. 	 */
specifier|const
name|char
modifier|*
name|bridge_ifname
decl_stmt|;
comment|/** 	 * p2p_mgmt - Interface used for P2P management (P2P Device operations) 	 * 	 * Indicates whether wpas_p2p_init() must be called for this interface. 	 * This is used only when the driver supports a dedicated P2P Device 	 * interface that is not a network interface. 	 */
name|int
name|p2p_mgmt
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_params - Parameters for wpa_supplicant_init()  */
end_comment

begin_struct
struct|struct
name|wpa_params
block|{
comment|/** 	 * daemonize - Run %wpa_supplicant in the background 	 */
name|int
name|daemonize
decl_stmt|;
comment|/** 	 * wait_for_monitor - Wait for a monitor program before starting 	 */
name|int
name|wait_for_monitor
decl_stmt|;
comment|/** 	 * pid_file - Path to a PID (process ID) file 	 * 	 * If this and daemonize are set, process ID of the background process 	 * will be written to the specified file. 	 */
name|char
modifier|*
name|pid_file
decl_stmt|;
comment|/** 	 * wpa_debug_level - Debugging verbosity level (e.g., MSG_INFO) 	 */
name|int
name|wpa_debug_level
decl_stmt|;
comment|/** 	 * wpa_debug_show_keys - Whether keying material is included in debug 	 * 	 * This parameter can be used to allow keying material to be included 	 * in debug messages. This is a security risk and this option should 	 * not be enabled in normal configuration. If needed during 	 * development or while troubleshooting, this option can provide more 	 * details for figuring out what is happening. 	 */
name|int
name|wpa_debug_show_keys
decl_stmt|;
comment|/** 	 * wpa_debug_timestamp - Whether to include timestamp in debug messages 	 */
name|int
name|wpa_debug_timestamp
decl_stmt|;
comment|/** 	 * ctrl_interface - Global ctrl_iface path/parameter 	 */
name|char
modifier|*
name|ctrl_interface
decl_stmt|;
comment|/** 	 * ctrl_interface_group - Global ctrl_iface group 	 */
name|char
modifier|*
name|ctrl_interface_group
decl_stmt|;
comment|/** 	 * dbus_ctrl_interface - Enable the DBus control interface 	 */
name|int
name|dbus_ctrl_interface
decl_stmt|;
comment|/** 	 * wpa_debug_file_path - Path of debug file or %NULL to use stdout 	 */
specifier|const
name|char
modifier|*
name|wpa_debug_file_path
decl_stmt|;
comment|/** 	 * wpa_debug_syslog - Enable log output through syslog 	 */
name|int
name|wpa_debug_syslog
decl_stmt|;
comment|/** 	 * wpa_debug_tracing - Enable log output through Linux tracing 	 */
name|int
name|wpa_debug_tracing
decl_stmt|;
comment|/** 	 * override_driver - Optional driver parameter override 	 * 	 * This parameter can be used to override the driver parameter in 	 * dynamic interface addition to force a specific driver wrapper to be 	 * used instead. 	 */
name|char
modifier|*
name|override_driver
decl_stmt|;
comment|/** 	 * override_ctrl_interface - Optional ctrl_interface override 	 * 	 * This parameter can be used to override the ctrl_interface parameter 	 * in dynamic interface addition to force a control interface to be 	 * created. 	 */
name|char
modifier|*
name|override_ctrl_interface
decl_stmt|;
comment|/** 	 * entropy_file - Optional entropy file 	 * 	 * This parameter can be used to configure wpa_supplicant to maintain 	 * its internal entropy store over restarts. 	 */
name|char
modifier|*
name|entropy_file
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_P2P
comment|/** 	 * conf_p2p_dev - Configuration file used to hold the 	 * P2P Device configuration parameters. 	 * 	 * This can also be %NULL. In such a case, if a P2P Device dedicated 	 * interfaces is created, the main configuration file will be used. 	 */
name|char
modifier|*
name|conf_p2p_dev
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_P2P */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|p2p_srv_bonjour
block|{
name|struct
name|dl_list
name|list
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|query
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|resp
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|p2p_srv_upnp
block|{
name|struct
name|dl_list
name|list
decl_stmt|;
name|u8
name|version
decl_stmt|;
name|char
modifier|*
name|service
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_global - Internal, global data for all %wpa_supplicant interfaces  *  * This structure is initialized by calling wpa_supplicant_init() when starting  * %wpa_supplicant.  */
end_comment

begin_struct
struct|struct
name|wpa_global
block|{
name|struct
name|wpa_supplicant
modifier|*
name|ifaces
decl_stmt|;
name|struct
name|wpa_params
name|params
decl_stmt|;
name|struct
name|ctrl_iface_global_priv
modifier|*
name|ctrl_iface
decl_stmt|;
name|struct
name|wpas_dbus_priv
modifier|*
name|dbus
decl_stmt|;
name|void
modifier|*
modifier|*
name|drv_priv
decl_stmt|;
name|size_t
name|drv_count
decl_stmt|;
name|struct
name|os_time
name|suspend_time
decl_stmt|;
name|struct
name|p2p_data
modifier|*
name|p2p
decl_stmt|;
name|struct
name|wpa_supplicant
modifier|*
name|p2p_init_wpa_s
decl_stmt|;
name|struct
name|wpa_supplicant
modifier|*
name|p2p_group_formation
decl_stmt|;
name|struct
name|wpa_supplicant
modifier|*
name|p2p_invite_group
decl_stmt|;
name|u8
name|p2p_dev_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|struct
name|os_reltime
name|p2p_go_wait_client
decl_stmt|;
name|struct
name|dl_list
name|p2p_srv_bonjour
decl_stmt|;
comment|/* struct p2p_srv_bonjour */
name|struct
name|dl_list
name|p2p_srv_upnp
decl_stmt|;
comment|/* struct p2p_srv_upnp */
name|int
name|p2p_disabled
decl_stmt|;
name|int
name|cross_connection
decl_stmt|;
name|struct
name|wpa_freq_range_list
name|p2p_disallow_freq
decl_stmt|;
name|struct
name|wpa_freq_range_list
name|p2p_go_avoid_freq
decl_stmt|;
enum|enum
name|wpa_conc_pref
block|{
name|WPA_CONC_PREF_NOT_SET
block|,
name|WPA_CONC_PREF_STA
block|,
name|WPA_CONC_PREF_P2P
block|}
name|conc_pref
enum|;
name|unsigned
name|int
name|p2p_per_sta_psk
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_fail_on_wps_complete
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_24ghz_social_channels
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|pending_p2ps_group
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|pending_group_iface_for_p2ps
range|:
literal|1
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_WIFI_DISPLAY
name|int
name|wifi_display
decl_stmt|;
define|#
directive|define
name|MAX_WFD_SUBELEMS
value|10
name|struct
name|wpabuf
modifier|*
name|wfd_subelem
index|[
name|MAX_WFD_SUBELEMS
index|]
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_WIFI_DISPLAY */
name|struct
name|psk_list_entry
modifier|*
name|add_psk
decl_stmt|;
comment|/* From group formation */
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_radio - Internal data for per-radio information  *  * This structure is used to share data about configured interfaces  * (struct wpa_supplicant) that share the same physical radio, e.g., to allow  * better coordination of offchannel operations.  */
end_comment

begin_struct
struct|struct
name|wpa_radio
block|{
name|char
name|name
index|[
literal|16
index|]
decl_stmt|;
comment|/* from driver_ops get_radio_name() or empty if not 			* available */
name|unsigned
name|int
name|external_scan_running
range|:
literal|1
decl_stmt|;
name|struct
name|dl_list
name|ifaces
decl_stmt|;
comment|/* struct wpa_supplicant::radio_list entries */
name|struct
name|dl_list
name|work
decl_stmt|;
comment|/* struct wpa_radio_work::list entries */
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct wpa_radio_work - Radio work item  */
end_comment

begin_struct
struct|struct
name|wpa_radio_work
block|{
name|struct
name|dl_list
name|list
decl_stmt|;
name|unsigned
name|int
name|freq
decl_stmt|;
comment|/* known frequency (MHz) or 0 for multiple/unknown */
specifier|const
name|char
modifier|*
name|type
decl_stmt|;
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
decl_stmt|;
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|wpa_radio_work
modifier|*
name|work
parameter_list|,
name|int
name|deinit
parameter_list|)
function_decl|;
name|void
modifier|*
name|ctx
decl_stmt|;
name|unsigned
name|int
name|started
range|:
literal|1
decl_stmt|;
name|struct
name|os_reltime
name|time
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|radio_add_work
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|unsigned
name|int
name|freq
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|int
name|next
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|struct
name|wpa_radio_work
modifier|*
name|work
parameter_list|,
name|int
name|deinit
parameter_list|)
parameter_list|,
name|void
modifier|*
name|ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|radio_work_done
parameter_list|(
name|struct
name|wpa_radio_work
modifier|*
name|work
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|radio_remove_works
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|,
name|int
name|remove_all
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|radio_work_check_next
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_radio_work
modifier|*
name|radio_work_pending
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|char
modifier|*
name|type
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|wpa_connect_work
block|{
name|unsigned
name|int
name|sme
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|bss_removed
range|:
literal|1
decl_stmt|;
name|struct
name|wpa_bss
modifier|*
name|bss
decl_stmt|;
name|struct
name|wpa_ssid
modifier|*
name|ssid
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|wpas_valid_bss_ssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_bss
modifier|*
name|test_bss
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|test_ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_connect_work_free
parameter_list|(
name|struct
name|wpa_connect_work
modifier|*
name|cwork
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_connect_work_done
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_struct
struct|struct
name|wpa_external_work
block|{
name|unsigned
name|int
name|id
decl_stmt|;
name|char
name|type
index|[
literal|100
index|]
decl_stmt|;
name|unsigned
name|int
name|timeout
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * offchannel_send_action_result - Result of offchannel send Action frame  */
end_comment

begin_enum
enum|enum
name|offchannel_send_action_result
block|{
name|OFFCHANNEL_SEND_ACTION_SUCCESS
comment|/**< Frame was send and acknowledged */
block|,
name|OFFCHANNEL_SEND_ACTION_NO_ACK
comment|/**< Frame was sent, but not acknowledged 				       */
block|,
name|OFFCHANNEL_SEND_ACTION_FAILED
comment|/**< Frame was not sent due to a failure 				       */
block|}
enum|;
end_enum

begin_struct
struct|struct
name|wps_ap_info
block|{
name|u8
name|bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
enum|enum
name|wps_ap_info_type
block|{
name|WPS_AP_NOT_SEL_REG
block|,
name|WPS_AP_SEL_REG
block|,
name|WPS_AP_SEL_REG_OUR
block|}
name|type
enum|;
name|unsigned
name|int
name|tries
decl_stmt|;
name|struct
name|os_reltime
name|last_attempt
decl_stmt|;
name|unsigned
name|int
name|pbc_active
decl_stmt|;
name|u8
name|uuid
index|[
name|WPS_UUID_LEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|wpa_ssid_value
block|{
name|u8
name|ssid
index|[
name|SSID_MAX_LEN
index|]
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WPA_FREQ_USED_BY_INFRA_STATION
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|WPA_FREQ_USED_BY_P2P_CLIENT
value|BIT(1)
end_define

begin_struct
struct|struct
name|wpa_used_freq_data
block|{
name|int
name|freq
decl_stmt|;
name|unsigned
name|int
name|flags
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|RRM_NEIGHBOR_REPORT_TIMEOUT
value|1
end_define

begin_comment
comment|/* 1 second for AP to send a report */
end_comment

begin_comment
comment|/*  * struct rrm_data - Data used for managing RRM features  */
end_comment

begin_struct
struct|struct
name|rrm_data
block|{
comment|/* rrm_used - indication regarding the current connection */
name|unsigned
name|int
name|rrm_used
range|:
literal|1
decl_stmt|;
comment|/* 	 * notify_neighbor_rep - Callback for notifying report requester 	 */
name|void
function_decl|(
modifier|*
name|notify_neighbor_rep
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|struct
name|wpabuf
modifier|*
name|neighbor_rep
parameter_list|)
function_decl|;
comment|/* 	 * neighbor_rep_cb_ctx - Callback context 	 * Received in the callback registration, and sent to the callback 	 * function as a parameter. 	 */
name|void
modifier|*
name|neighbor_rep_cb_ctx
decl_stmt|;
comment|/* next_neighbor_rep_token - Next request's dialog token */
name|u8
name|next_neighbor_rep_token
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|wpa_supplicant_test_failure
block|{
name|WPAS_TEST_FAILURE_NONE
block|,
name|WPAS_TEST_FAILURE_SCAN_TRIGGER
block|, }
enum|;
end_enum

begin_comment
comment|/**  * struct wpa_supplicant - Internal data for wpa_supplicant interface  *  * This structure contains the internal data for core wpa_supplicant code. This  * should be only used directly from the core code. However, a pointer to this  * data is used from other files as an arbitrary context pointer in calls to  * core functions.  */
end_comment

begin_struct
struct|struct
name|wpa_supplicant
block|{
name|struct
name|wpa_global
modifier|*
name|global
decl_stmt|;
name|struct
name|wpa_radio
modifier|*
name|radio
decl_stmt|;
comment|/* shared radio context */
name|struct
name|dl_list
name|radio_list
decl_stmt|;
comment|/* list head: struct wpa_radio::ifaces */
name|struct
name|wpa_supplicant
modifier|*
name|parent
decl_stmt|;
name|struct
name|wpa_supplicant
modifier|*
name|next
decl_stmt|;
name|struct
name|l2_packet_data
modifier|*
name|l2
decl_stmt|;
name|struct
name|l2_packet_data
modifier|*
name|l2_br
decl_stmt|;
name|unsigned
name|char
name|own_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|unsigned
name|char
name|perm_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|char
name|ifname
index|[
literal|100
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_CTRL_IFACE_DBUS
name|char
modifier|*
name|dbus_path
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_CTRL_IFACE_DBUS */
ifdef|#
directive|ifdef
name|CONFIG_CTRL_IFACE_DBUS_NEW
name|char
modifier|*
name|dbus_new_path
decl_stmt|;
name|char
modifier|*
name|dbus_groupobj_path
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_AP
name|char
modifier|*
name|preq_notify_peer
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_AP */
endif|#
directive|endif
comment|/* CONFIG_CTRL_IFACE_DBUS_NEW */
name|char
name|bridge_ifname
index|[
literal|16
index|]
decl_stmt|;
name|char
modifier|*
name|confname
decl_stmt|;
name|char
modifier|*
name|confanother
decl_stmt|;
name|struct
name|wpa_config
modifier|*
name|conf
decl_stmt|;
name|int
name|countermeasures
decl_stmt|;
name|struct
name|os_reltime
name|last_michael_mic_error
decl_stmt|;
name|u8
name|bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|pending_bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
comment|/* If wpa_state == WPA_ASSOCIATING, this 				     * field contains the target BSSID. */
name|int
name|reassociate
decl_stmt|;
comment|/* reassociation requested */
name|int
name|reassoc_same_bss
decl_stmt|;
comment|/* reassociating to the same bss */
name|int
name|disconnected
decl_stmt|;
comment|/* all connections disabled; i.e., do no reassociate 			   * before this has been cleared */
name|struct
name|wpa_ssid
modifier|*
name|current_ssid
decl_stmt|;
name|struct
name|wpa_ssid
modifier|*
name|last_ssid
decl_stmt|;
name|struct
name|wpa_bss
modifier|*
name|current_bss
decl_stmt|;
name|int
name|ap_ies_from_associnfo
decl_stmt|;
name|unsigned
name|int
name|assoc_freq
decl_stmt|;
comment|/* Selected configuration (based on Beacon/ProbeResp WPA IE) */
name|int
name|pairwise_cipher
decl_stmt|;
name|int
name|group_cipher
decl_stmt|;
name|int
name|key_mgmt
decl_stmt|;
name|int
name|wpa_proto
decl_stmt|;
name|int
name|mgmt_group_cipher
decl_stmt|;
name|void
modifier|*
name|drv_priv
decl_stmt|;
comment|/* private data used by driver_ops */
name|void
modifier|*
name|global_drv_priv
decl_stmt|;
name|u8
modifier|*
name|bssid_filter
decl_stmt|;
name|size_t
name|bssid_filter_count
decl_stmt|;
name|u8
modifier|*
name|disallow_aps_bssid
decl_stmt|;
name|size_t
name|disallow_aps_bssid_count
decl_stmt|;
name|struct
name|wpa_ssid_value
modifier|*
name|disallow_aps_ssid
decl_stmt|;
name|size_t
name|disallow_aps_ssid_count
decl_stmt|;
name|enum
name|set_band
name|setband
decl_stmt|;
comment|/* Preferred network for the next connection attempt */
name|struct
name|wpa_ssid
modifier|*
name|next_ssid
decl_stmt|;
comment|/* previous scan was wildcard when interleaving between 	 * wildcard scans and specific SSID scan when max_ssids=1 */
name|int
name|prev_scan_wildcard
decl_stmt|;
name|struct
name|wpa_ssid
modifier|*
name|prev_scan_ssid
decl_stmt|;
comment|/* previously scanned SSID; 					  * NULL = not yet initialized (start 					  * with wildcard SSID) 					  * WILDCARD_SSID_SCAN = wildcard 					  * SSID was used in the previous scan 					  */
define|#
directive|define
name|WILDCARD_SSID_SCAN
value|((struct wpa_ssid *) 1)
name|struct
name|wpa_ssid
modifier|*
name|prev_sched_ssid
decl_stmt|;
comment|/* last SSID used in sched scan */
name|int
name|sched_scan_timeout
decl_stmt|;
name|int
name|sched_scan_interval
decl_stmt|;
name|int
name|first_sched_scan
decl_stmt|;
name|int
name|sched_scan_timed_out
decl_stmt|;
name|void
function_decl|(
modifier|*
name|scan_res_handler
function_decl|)
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_scan_results
modifier|*
name|scan_res
parameter_list|)
function_decl|;
name|struct
name|dl_list
name|bss
decl_stmt|;
comment|/* struct wpa_bss::list */
name|struct
name|dl_list
name|bss_id
decl_stmt|;
comment|/* struct wpa_bss::list_id */
name|size_t
name|num_bss
decl_stmt|;
name|unsigned
name|int
name|bss_update_idx
decl_stmt|;
name|unsigned
name|int
name|bss_next_id
decl_stmt|;
comment|/* 	  * Pointers to BSS entries in the order they were in the last scan 	  * results. 	  */
name|struct
name|wpa_bss
modifier|*
modifier|*
name|last_scan_res
decl_stmt|;
name|unsigned
name|int
name|last_scan_res_used
decl_stmt|;
name|unsigned
name|int
name|last_scan_res_size
decl_stmt|;
name|struct
name|os_reltime
name|last_scan
decl_stmt|;
specifier|const
name|struct
name|wpa_driver_ops
modifier|*
name|driver
decl_stmt|;
name|int
name|interface_removed
decl_stmt|;
comment|/* whether the network interface has been 				* removed */
name|struct
name|wpa_sm
modifier|*
name|wpa
decl_stmt|;
name|struct
name|eapol_sm
modifier|*
name|eapol
decl_stmt|;
name|struct
name|ctrl_iface_priv
modifier|*
name|ctrl_iface
decl_stmt|;
name|enum
name|wpa_states
name|wpa_state
decl_stmt|;
name|struct
name|wpa_radio_work
modifier|*
name|scan_work
decl_stmt|;
name|int
name|scanning
decl_stmt|;
name|int
name|sched_scanning
decl_stmt|;
name|int
name|new_connection
decl_stmt|;
name|int
name|eapol_received
decl_stmt|;
comment|/* number of EAPOL packets received after the 			     * previous association event */
name|struct
name|scard_data
modifier|*
name|scard
decl_stmt|;
name|char
name|imsi
index|[
literal|20
index|]
decl_stmt|;
name|int
name|mnc_len
decl_stmt|;
name|unsigned
name|char
name|last_eapol_src
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|unsigned
name|int
name|keys_cleared
decl_stmt|;
comment|/* bitfield of key indexes that the driver is 				    * known not to be configured with a key */
name|struct
name|wpa_blacklist
modifier|*
name|blacklist
decl_stmt|;
comment|/** 	 * extra_blacklist_count - Sum of blacklist counts after last connection 	 * 	 * This variable is used to maintain a count of temporary blacklisting 	 * failures (maximum number for any BSS) over blacklist clear 	 * operations. This is needed for figuring out whether there has been 	 * failures prior to the last blacklist clear operation which happens 	 * whenever no other not-blacklisted BSS candidates are available. This 	 * gets cleared whenever a connection has been established successfully. 	 */
name|int
name|extra_blacklist_count
decl_stmt|;
comment|/** 	 * scan_req - Type of the scan request 	 */
enum|enum
name|scan_req_type
block|{
comment|/** 		 * NORMAL_SCAN_REQ - Normal scan request 		 * 		 * This is used for scans initiated by wpa_supplicant to find an 		 * AP for a connection. 		 */
name|NORMAL_SCAN_REQ
block|,
comment|/** 		 * INITIAL_SCAN_REQ - Initial scan request 		 * 		 * This is used for the first scan on an interface to force at 		 * least one scan to be run even if the configuration does not 		 * include any enabled networks. 		 */
name|INITIAL_SCAN_REQ
block|,
comment|/** 		 * MANUAL_SCAN_REQ - Manual scan request 		 * 		 * This is used for scans where the user request a scan or 		 * a specific wpa_supplicant operation (e.g., WPS) requires scan 		 * to be run. 		 */
name|MANUAL_SCAN_REQ
block|}
name|scan_req
enum|,
name|last_scan_req
expr_stmt|;
name|enum
name|wpa_states
name|scan_prev_wpa_state
decl_stmt|;
name|struct
name|os_reltime
name|scan_trigger_time
decl_stmt|,
name|scan_start_time
decl_stmt|;
comment|/* Minimum freshness requirement for connection purposes */
name|struct
name|os_reltime
name|scan_min_time
decl_stmt|;
name|int
name|scan_runs
decl_stmt|;
comment|/* number of scan runs since WPS was started */
name|int
modifier|*
name|next_scan_freqs
decl_stmt|;
name|int
modifier|*
name|manual_scan_freqs
decl_stmt|;
name|int
modifier|*
name|manual_sched_scan_freqs
decl_stmt|;
name|unsigned
name|int
name|manual_scan_passive
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|manual_scan_use_id
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|manual_scan_only_new
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|own_scan_requested
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|own_scan_running
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|clear_driver_scan_cache
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|manual_scan_id
decl_stmt|;
name|int
name|scan_interval
decl_stmt|;
comment|/* time in sec between scans to find suitable AP */
name|int
name|normal_scans
decl_stmt|;
comment|/* normal scans run before sched_scan */
name|int
name|scan_for_connection
decl_stmt|;
comment|/* whether the scan request was triggered for 				  * finding a connection */
define|#
directive|define
name|MAX_SCAN_ID
value|16
name|int
name|scan_id
index|[
name|MAX_SCAN_ID
index|]
decl_stmt|;
name|unsigned
name|int
name|scan_id_count
decl_stmt|;
name|struct
name|wpa_ssid_value
modifier|*
name|ssids_from_scan_req
decl_stmt|;
name|unsigned
name|int
name|num_ssids_from_scan_req
decl_stmt|;
name|u64
name|drv_flags
decl_stmt|;
name|unsigned
name|int
name|drv_enc
decl_stmt|;
name|unsigned
name|int
name|drv_smps_modes
decl_stmt|;
name|unsigned
name|int
name|drv_rrm_flags
decl_stmt|;
comment|/* 	 * A bitmap of supported protocols for probe response offload. See 	 * struct wpa_driver_capa in driver.h 	 */
name|unsigned
name|int
name|probe_resp_offloads
decl_stmt|;
comment|/* extended capabilities supported by the driver */
specifier|const
name|u8
modifier|*
name|extended_capa
decl_stmt|,
modifier|*
name|extended_capa_mask
decl_stmt|;
name|unsigned
name|int
name|extended_capa_len
decl_stmt|;
name|int
name|max_scan_ssids
decl_stmt|;
name|int
name|max_sched_scan_ssids
decl_stmt|;
name|int
name|sched_scan_supported
decl_stmt|;
name|unsigned
name|int
name|max_match_sets
decl_stmt|;
name|unsigned
name|int
name|max_remain_on_chan
decl_stmt|;
name|unsigned
name|int
name|max_stations
decl_stmt|;
name|int
name|pending_mic_error_report
decl_stmt|;
name|int
name|pending_mic_error_pairwise
decl_stmt|;
name|int
name|mic_errors_seen
decl_stmt|;
comment|/* Michael MIC errors with the current PTK */
name|struct
name|wps_context
modifier|*
name|wps
decl_stmt|;
name|int
name|wps_success
decl_stmt|;
comment|/* WPS success event received */
name|struct
name|wps_er
modifier|*
name|wps_er
decl_stmt|;
name|unsigned
name|int
name|wps_run
decl_stmt|;
name|struct
name|os_reltime
name|wps_pin_start_time
decl_stmt|;
name|int
name|blacklist_cleared
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|pending_eapol_rx
decl_stmt|;
name|struct
name|os_reltime
name|pending_eapol_rx_time
decl_stmt|;
name|u8
name|pending_eapol_rx_src
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|unsigned
name|int
name|last_eapol_matches_bssid
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|eap_expected_failure
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|reattach
range|:
literal|1
decl_stmt|;
comment|/* reassociation to the same BSS requested */
name|unsigned
name|int
name|mac_addr_changed
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|added_vif
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|wnmsleep_used
range|:
literal|1
decl_stmt|;
name|struct
name|os_reltime
name|last_mac_addr_change
decl_stmt|;
name|int
name|last_mac_addr_style
decl_stmt|;
name|struct
name|ibss_rsn
modifier|*
name|ibss_rsn
decl_stmt|;
name|int
name|set_sta_uapsd
decl_stmt|;
name|int
name|sta_uapsd
decl_stmt|;
name|int
name|set_ap_uapsd
decl_stmt|;
name|int
name|ap_uapsd
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_SME
struct|struct
block|{
name|u8
name|ssid
index|[
name|SSID_MAX_LEN
index|]
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
name|int
name|freq
decl_stmt|;
name|u8
name|assoc_req_ie
index|[
literal|200
index|]
decl_stmt|;
name|size_t
name|assoc_req_ie_len
decl_stmt|;
name|int
name|mfp
decl_stmt|;
name|int
name|ft_used
decl_stmt|;
name|u8
name|mobility_domain
index|[
literal|2
index|]
decl_stmt|;
name|u8
modifier|*
name|ft_ies
decl_stmt|;
name|size_t
name|ft_ies_len
decl_stmt|;
name|u8
name|prev_bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|prev_bssid_set
decl_stmt|;
name|int
name|auth_alg
decl_stmt|;
name|int
name|proto
decl_stmt|;
name|int
name|sa_query_count
decl_stmt|;
comment|/* number of pending SA Query requests; 				     * 0 = no SA Query in progress */
name|int
name|sa_query_timed_out
decl_stmt|;
name|u8
modifier|*
name|sa_query_trans_id
decl_stmt|;
comment|/* buffer of WLAN_SA_QUERY_TR_ID_LEN * 					* sa_query_count octets of pending 					* SA Query transaction identifiers */
name|struct
name|os_reltime
name|sa_query_start
decl_stmt|;
name|struct
name|os_reltime
name|last_unprot_disconnect
decl_stmt|;
enum|enum
block|{
name|HT_SEC_CHAN_UNKNOWN
block|,
name|HT_SEC_CHAN_ABOVE
block|,
name|HT_SEC_CHAN_BELOW
block|}
name|ht_sec_chan
enum|;
name|u8
name|sched_obss_scan
decl_stmt|;
name|u16
name|obss_scan_int
decl_stmt|;
name|u16
name|bss_max_idle_period
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_SAE
name|struct
name|sae_data
name|sae
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|sae_token
decl_stmt|;
name|int
name|sae_group_index
decl_stmt|;
name|unsigned
name|int
name|sae_pmksa_caching
range|:
literal|1
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_SAE */
block|}
name|sme
struct|;
endif|#
directive|endif
comment|/* CONFIG_SME */
ifdef|#
directive|ifdef
name|CONFIG_AP
name|struct
name|hostapd_iface
modifier|*
name|ap_iface
decl_stmt|;
name|void
function_decl|(
modifier|*
name|ap_configured_cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
name|void
modifier|*
name|ap_configured_cb_ctx
decl_stmt|;
name|void
modifier|*
name|ap_configured_cb_data
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_AP */
name|struct
name|hostapd_iface
modifier|*
name|ifmsh
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_MESH
name|struct
name|mesh_rsn
modifier|*
name|mesh_rsn
decl_stmt|;
name|int
name|mesh_if_idx
decl_stmt|;
name|unsigned
name|int
name|mesh_if_created
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|mesh_ht_enabled
range|:
literal|1
decl_stmt|;
name|int
name|mesh_auth_block_duration
decl_stmt|;
comment|/* sec */
endif|#
directive|endif
comment|/* CONFIG_MESH */
name|unsigned
name|int
name|off_channel_freq
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|pending_action_tx
decl_stmt|;
name|u8
name|pending_action_src
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|pending_action_dst
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|pending_action_bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|unsigned
name|int
name|pending_action_freq
decl_stmt|;
name|int
name|pending_action_no_cck
decl_stmt|;
name|int
name|pending_action_without_roc
decl_stmt|;
name|unsigned
name|int
name|pending_action_tx_done
range|:
literal|1
decl_stmt|;
name|void
function_decl|(
modifier|*
name|pending_action_tx_status_cb
function_decl|)
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|unsigned
name|int
name|freq
parameter_list|,
specifier|const
name|u8
modifier|*
name|dst
parameter_list|,
specifier|const
name|u8
modifier|*
name|src
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|,
name|enum
name|offchannel_send_action_result
name|result
parameter_list|)
function_decl|;
name|unsigned
name|int
name|roc_waiting_drv_freq
decl_stmt|;
name|int
name|action_tx_wait_time
decl_stmt|;
name|int
name|p2p_mgmt
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_P2P
name|struct
name|p2p_go_neg_results
modifier|*
name|go_params
decl_stmt|;
name|int
name|create_p2p_iface
decl_stmt|;
name|u8
name|pending_interface_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|char
name|pending_interface_name
index|[
literal|100
index|]
decl_stmt|;
name|int
name|pending_interface_type
decl_stmt|;
name|int
name|p2p_group_idx
decl_stmt|;
name|unsigned
name|int
name|pending_listen_freq
decl_stmt|;
name|unsigned
name|int
name|pending_listen_duration
decl_stmt|;
enum|enum
block|{
name|NOT_P2P_GROUP_INTERFACE
block|,
name|P2P_GROUP_INTERFACE_PENDING
block|,
name|P2P_GROUP_INTERFACE_GO
block|,
name|P2P_GROUP_INTERFACE_CLIENT
block|}
name|p2p_group_interface
enum|;
name|struct
name|p2p_group
modifier|*
name|p2p_group
decl_stmt|;
name|int
name|p2p_long_listen
decl_stmt|;
comment|/* remaining time in long Listen state in ms */
name|char
name|p2p_pin
index|[
literal|10
index|]
decl_stmt|;
name|int
name|p2p_wps_method
decl_stmt|;
name|u8
name|p2p_auth_invite
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|p2p_sd_over_ctrl_iface
decl_stmt|;
name|int
name|p2p_in_provisioning
decl_stmt|;
name|int
name|p2p_in_invitation
decl_stmt|;
name|int
name|p2p_invite_go_freq
decl_stmt|;
name|int
name|pending_invite_ssid_id
decl_stmt|;
name|int
name|show_group_started
decl_stmt|;
name|u8
name|go_dev_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|pending_pd_before_join
decl_stmt|;
name|u8
name|pending_join_iface_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|pending_join_dev_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|pending_join_wps_method
decl_stmt|;
name|u8
name|p2p_join_ssid
index|[
name|SSID_MAX_LEN
index|]
decl_stmt|;
name|size_t
name|p2p_join_ssid_len
decl_stmt|;
name|int
name|p2p_join_scan_count
decl_stmt|;
name|int
name|auto_pd_scan_retry
decl_stmt|;
name|int
name|force_long_sd
decl_stmt|;
name|u16
name|pending_pd_config_methods
decl_stmt|;
enum|enum
block|{
name|NORMAL_PD
block|,
name|AUTO_PD_GO_NEG
block|,
name|AUTO_PD_JOIN
block|,
name|AUTO_PD_ASP
block|}
name|pending_pd_use
enum|;
comment|/* 	 * Whether cross connection is disallowed by the AP to which this 	 * interface is associated (only valid if there is an association). 	 */
name|int
name|cross_connect_disallowed
decl_stmt|;
comment|/* 	 * Whether this P2P group is configured to use cross connection (only 	 * valid if this is P2P GO interface). The actual cross connect packet 	 * forwarding may not be configured depending on the uplink status. 	 */
name|int
name|cross_connect_enabled
decl_stmt|;
comment|/* Whether cross connection forwarding is in use at the moment. */
name|int
name|cross_connect_in_use
decl_stmt|;
comment|/* 	 * Uplink interface name for cross connection 	 */
name|char
name|cross_connect_uplink
index|[
literal|100
index|]
decl_stmt|;
name|unsigned
name|int
name|p2p_auto_join
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_auto_pd
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_persistent_group
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_fallback_to_go_neg
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_pd_before_go_neg
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_go_ht40
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_go_vht
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|user_initiated_pd
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_go_group_formation_completed
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|group_formation_reported
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|waiting_presence_resp
decl_stmt|;
name|int
name|p2p_first_connection_timeout
decl_stmt|;
name|unsigned
name|int
name|p2p_nfc_tag_enabled
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_peer_oob_pk_hash_known
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_disable_ip_addr_req
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2ps_method_config_any
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|p2p_cli_probe
range|:
literal|1
decl_stmt|;
name|int
name|p2p_persistent_go_freq
decl_stmt|;
name|int
name|p2p_persistent_id
decl_stmt|;
name|int
name|p2p_go_intent
decl_stmt|;
name|int
name|p2p_connect_freq
decl_stmt|;
name|struct
name|os_reltime
name|p2p_auto_started
decl_stmt|;
name|struct
name|wpa_ssid
modifier|*
name|p2p_last_4way_hs_fail
decl_stmt|;
name|struct
name|wpa_radio_work
modifier|*
name|p2p_scan_work
decl_stmt|;
name|struct
name|wpa_radio_work
modifier|*
name|p2p_listen_work
decl_stmt|;
name|struct
name|wpa_radio_work
modifier|*
name|p2p_send_action_work
decl_stmt|;
name|u16
name|p2p_oob_dev_pw_id
decl_stmt|;
comment|/* OOB Device Password Id for group formation */
name|struct
name|wpabuf
modifier|*
name|p2p_oob_dev_pw
decl_stmt|;
comment|/* OOB Device Password for group 					* formation */
name|u8
name|p2p_peer_oob_pubkey_hash
index|[
name|WPS_OOB_PUBKEY_HASH_LEN
index|]
decl_stmt|;
name|u8
name|p2p_ip_addr_info
index|[
literal|3
operator|*
literal|4
index|]
decl_stmt|;
comment|/* group common frequencies */
name|int
modifier|*
name|p2p_group_common_freqs
decl_stmt|;
name|unsigned
name|int
name|p2p_group_common_freqs_num
decl_stmt|;
name|u8
name|p2ps_join_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_P2P */
name|struct
name|wpa_ssid
modifier|*
name|bgscan_ssid
decl_stmt|;
specifier|const
name|struct
name|bgscan_ops
modifier|*
name|bgscan
decl_stmt|;
name|void
modifier|*
name|bgscan_priv
decl_stmt|;
specifier|const
name|struct
name|autoscan_ops
modifier|*
name|autoscan
decl_stmt|;
name|struct
name|wpa_driver_scan_params
modifier|*
name|autoscan_params
decl_stmt|;
name|void
modifier|*
name|autoscan_priv
decl_stmt|;
name|struct
name|wpa_ssid
modifier|*
name|connect_without_scan
decl_stmt|;
name|struct
name|wps_ap_info
modifier|*
name|wps_ap
decl_stmt|;
name|size_t
name|num_wps_ap
decl_stmt|;
name|int
name|wps_ap_iter
decl_stmt|;
name|int
name|after_wps
decl_stmt|;
name|int
name|known_wps_freq
decl_stmt|;
name|unsigned
name|int
name|wps_freq
decl_stmt|;
name|int
name|wps_fragment_size
decl_stmt|;
name|int
name|auto_reconnect_disabled
decl_stmt|;
comment|/* Channel preferences for AP/P2P GO use */
name|int
name|best_24_freq
decl_stmt|;
name|int
name|best_5_freq
decl_stmt|;
name|int
name|best_overall_freq
decl_stmt|;
name|struct
name|gas_query
modifier|*
name|gas
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_INTERWORKING
name|unsigned
name|int
name|fetch_anqp_in_progress
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|network_select
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|auto_select
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|auto_network_select
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|interworking_fast_assoc_tried
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|fetch_all_anqp
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|fetch_osu_info
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|fetch_osu_waiting_scan
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|fetch_osu_icon_in_progress
range|:
literal|1
decl_stmt|;
name|struct
name|wpa_bss
modifier|*
name|interworking_gas_bss
decl_stmt|;
name|unsigned
name|int
name|osu_icon_id
decl_stmt|;
name|struct
name|osu_provider
modifier|*
name|osu_prov
decl_stmt|;
name|size_t
name|osu_prov_count
decl_stmt|;
name|struct
name|os_reltime
name|osu_icon_fetch_start
decl_stmt|;
name|unsigned
name|int
name|num_osu_scans
decl_stmt|;
name|unsigned
name|int
name|num_prov_found
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_INTERWORKING */
name|unsigned
name|int
name|drv_capa_known
decl_stmt|;
struct|struct
block|{
name|struct
name|hostapd_hw_modes
modifier|*
name|modes
decl_stmt|;
name|u16
name|num_modes
decl_stmt|;
name|u16
name|flags
decl_stmt|;
block|}
name|hw
struct|;
enum|enum
name|local_hw_capab
block|{
name|CAPAB_NO_HT_VHT
block|,
name|CAPAB_HT
block|,
name|CAPAB_HT40
block|,
name|CAPAB_VHT
block|, 	}
name|hw_capab
enum|;
ifdef|#
directive|ifdef
name|CONFIG_MACSEC
name|struct
name|ieee802_1x_kay
modifier|*
name|kay
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_MACSEC */
name|int
name|pno
decl_stmt|;
name|int
name|pno_sched_pending
decl_stmt|;
comment|/* WLAN_REASON_* reason codes. Negative if locally generated. */
name|int
name|disconnect_reason
decl_stmt|;
name|struct
name|ext_password_data
modifier|*
name|ext_pw
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|last_gas_resp
decl_stmt|,
modifier|*
name|prev_gas_resp
decl_stmt|;
name|u8
name|last_gas_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|,
name|prev_gas_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|u8
name|last_gas_dialog_token
decl_stmt|,
name|prev_gas_dialog_token
decl_stmt|;
name|unsigned
name|int
name|no_keep_alive
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|ext_mgmt_frame_handling
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|ext_eapol_frame_io
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|wmm_ac_supported
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|ext_work_in_progress
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|own_disconnect_req
range|:
literal|1
decl_stmt|;
define|#
directive|define
name|MAC_ADDR_RAND_SCAN
value|BIT(0)
define|#
directive|define
name|MAC_ADDR_RAND_SCHED_SCAN
value|BIT(1)
define|#
directive|define
name|MAC_ADDR_RAND_PNO
value|BIT(2)
define|#
directive|define
name|MAC_ADDR_RAND_ALL
value|(MAC_ADDR_RAND_SCAN | \ 				  MAC_ADDR_RAND_SCHED_SCAN | \ 				  MAC_ADDR_RAND_PNO)
name|unsigned
name|int
name|mac_addr_rand_supported
decl_stmt|;
name|unsigned
name|int
name|mac_addr_rand_enable
decl_stmt|;
comment|/* MAC Address followed by mask (2 * ETH_ALEN) */
name|u8
modifier|*
name|mac_addr_scan
decl_stmt|;
name|u8
modifier|*
name|mac_addr_sched_scan
decl_stmt|;
name|u8
modifier|*
name|mac_addr_pno
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_WNM
name|u8
name|wnm_dialog_token
decl_stmt|;
name|u8
name|wnm_reply
decl_stmt|;
name|u8
name|wnm_num_neighbor_report
decl_stmt|;
name|u8
name|wnm_mode
decl_stmt|;
name|u16
name|wnm_dissoc_timer
decl_stmt|;
name|u8
name|wnm_bss_termination_duration
index|[
literal|12
index|]
decl_stmt|;
name|struct
name|neighbor_report
modifier|*
name|wnm_neighbor_report_elements
decl_stmt|;
name|struct
name|os_reltime
name|wnm_cand_valid_until
decl_stmt|;
name|u8
name|wnm_cand_from_bss
index|[
name|ETH_ALEN
index|]
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_WNM */
ifdef|#
directive|ifdef
name|CONFIG_TESTING_GET_GTK
name|u8
name|last_gtk
index|[
literal|32
index|]
decl_stmt|;
name|size_t
name|last_gtk_len
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_TESTING_GET_GTK */
name|unsigned
name|int
name|num_multichan_concurrent
decl_stmt|;
name|struct
name|wpa_radio_work
modifier|*
name|connect_work
decl_stmt|;
name|unsigned
name|int
name|ext_work_id
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|vendor_elem
index|[
name|NUM_VENDOR_ELEM_FRAMES
index|]
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_TESTING_OPTIONS
name|struct
name|l2_packet_data
modifier|*
name|l2_test
decl_stmt|;
name|unsigned
name|int
name|extra_roc_dur
decl_stmt|;
name|enum
name|wpa_supplicant_test_failure
name|test_failure
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_TESTING_OPTIONS */
name|struct
name|wmm_ac_assoc_data
modifier|*
name|wmm_ac_assoc_info
decl_stmt|;
name|struct
name|wmm_tspec_element
modifier|*
name|tspecs
index|[
name|WMM_AC_NUM
index|]
index|[
name|TS_DIR_IDX_COUNT
index|]
decl_stmt|;
name|struct
name|wmm_ac_addts_request
modifier|*
name|addts_request
decl_stmt|;
name|u8
name|wmm_ac_last_dialog_token
decl_stmt|;
name|struct
name|wmm_tspec_element
modifier|*
name|last_tspecs
decl_stmt|;
name|u8
name|last_tspecs_count
decl_stmt|;
name|struct
name|rrm_data
name|rrm
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_FST
name|struct
name|fst_iface
modifier|*
name|fst
decl_stmt|;
specifier|const
name|struct
name|wpabuf
modifier|*
name|fst_ies
decl_stmt|;
name|struct
name|wpabuf
modifier|*
name|received_mb_ies
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_FST */
block|}
struct|;
end_struct

begin_comment
comment|/* wpa_supplicant.c */
end_comment

begin_function_decl
name|void
name|wpa_supplicant_apply_ht_overrides
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
name|struct
name|wpa_driver_associate_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_apply_vht_overrides
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
name|struct
name|wpa_driver_associate_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_set_wep_keys
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_set_wpa_none_key
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_reload_configuration
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|wpa_supplicant_state_txt
parameter_list|(
name|enum
name|wpa_states
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_update_mac_addr
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_driver_init
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_set_suites
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_bss
modifier|*
name|bss
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
name|u8
modifier|*
name|wpa_ie
parameter_list|,
name|size_t
modifier|*
name|wpa_ie_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_associate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_bss
modifier|*
name|bss
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_set_non_wpa_policy
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_initiate_eapol
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_clear_keys
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_req_auth_timeout
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|sec
parameter_list|,
name|int
name|usec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_reinit_autoscan
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_set_state
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|enum
name|wpa_states
name|state
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_ssid
modifier|*
name|wpa_supplicant_get_ssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|wpa_supplicant_get_eap_mode
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_cancel_auth_timeout
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_deauthenticate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|reason_code
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_enable_network
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_disable_network
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_select_network
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_set_pkcs11_engine_and_module_path
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|char
modifier|*
name|pkcs11_engine_path
parameter_list|,
specifier|const
name|char
modifier|*
name|pkcs11_module_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_set_ap_scan
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|ap_scan
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_set_bss_expiration_age
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|unsigned
name|int
name|expire_age
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_set_bss_expiration_count
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|unsigned
name|int
name|expire_count
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_set_scan_interval
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|scan_interval
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_set_debug_params
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|,
name|int
name|debug_level
parameter_list|,
name|int
name|debug_timestamp
parameter_list|,
name|int
name|debug_show_keys
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|free_hw_features
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_show_license
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_supplicant
modifier|*
name|wpa_supplicant_add_iface
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|,
name|struct
name|wpa_interface
modifier|*
name|iface
parameter_list|,
name|struct
name|wpa_supplicant
modifier|*
name|parent
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_remove_iface
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|,
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|terminate
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_supplicant
modifier|*
name|wpa_supplicant_get_iface
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_global
modifier|*
name|wpa_supplicant_init
parameter_list|(
name|struct
name|wpa_params
modifier|*
name|params
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_run
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_deinit
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_scard_init
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_terminate_proc
parameter_list|(
name|struct
name|wpa_global
modifier|*
name|global
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_rx_eapol
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
specifier|const
name|u8
modifier|*
name|src_addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_update_config
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_clear_status
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_connection_failed
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_driver_bss_selection
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_is_p2p_prioritized
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_auth_failed
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|char
modifier|*
name|reason
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_clear_temp_disabled
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
name|int
name|clear_failures
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|disallowed_bssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|disallowed_ssid
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|ssid
parameter_list|,
name|size_t
name|ssid_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_request_connection
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_build_ext_capab
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|u8
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_update_random_addr
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
name|style
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_update_random_addr_disassoc
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|add_freq
parameter_list|(
name|int
modifier|*
name|freqs
parameter_list|,
name|int
modifier|*
name|num_freqs
parameter_list|,
name|int
name|freq
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_rrm_reset
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_rrm_process_neighbor_rep
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|report
parameter_list|,
name|size_t
name|report_len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_rrm_send_neighbor_rep_request
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
name|void
function_decl|(
modifier|*
name|cb
function_decl|)
parameter_list|(
name|void
modifier|*
name|ctx
parameter_list|,
name|struct
name|wpabuf
modifier|*
name|neighbor_rep
parameter_list|)
parameter_list|,
name|void
modifier|*
name|cb_ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_rrm_handle_link_measurement_request
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|u8
modifier|*
name|src
parameter_list|,
specifier|const
name|u8
modifier|*
name|frame
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|rssi
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * wpa_supplicant_ctrl_iface_ctrl_rsp_handle - Handle a control response  * @wpa_s: Pointer to wpa_supplicant data  * @ssid: Pointer to the network block the reply is for  * @field: field the response is a reply for  * @value: value (ie, password, etc) for @field  * Returns: 0 on success, non-zero on error  *  * Helper function to handle replies to control interface requests.  */
end_comment

begin_function_decl
name|int
name|wpa_supplicant_ctrl_iface_ctrl_rsp_handle
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
specifier|const
name|char
modifier|*
name|field
parameter_list|,
specifier|const
name|char
modifier|*
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ibss_mesh_setup_freq
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
name|struct
name|hostapd_freq_params
modifier|*
name|freq
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* events.c */
end_comment

begin_function_decl
name|void
name|wpa_supplicant_mark_disassoc
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_connect
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_bss
modifier|*
name|selected
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_stop_countermeasures
parameter_list|(
name|void
modifier|*
name|eloop_ctx
parameter_list|,
name|void
modifier|*
name|sock_ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpa_supplicant_delayed_mic_error_report
parameter_list|(
name|void
modifier|*
name|eloop_ctx
parameter_list|,
name|void
modifier|*
name|sock_ctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wnm_bss_keep_alive_deinit
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpa_supplicant_fast_associate
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|wpa_bss
modifier|*
name|wpa_supplicant_pick_network
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
modifier|*
name|selected_ssid
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* eap_register.c */
end_comment

begin_function_decl
name|int
name|eap_register_methods
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**  * Utility method to tell if a given network is for persistent group storage  * @ssid: Network object  * Returns: 1 if network is a persistent group, 0 otherwise  */
end_comment

begin_function
specifier|static
specifier|inline
name|int
name|network_is_persistent_group
parameter_list|(
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
block|{
return|return
name|ssid
operator|->
name|disabled
operator|==
literal|2
operator|&&
name|ssid
operator|->
name|p2p_persistent_group
return|;
block|}
end_function

begin_function_decl
name|int
name|wpas_network_disabled
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_get_ssid_pmf
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|wpas_init_ext_pw
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|dump_freq_data
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
specifier|const
name|char
modifier|*
name|title
parameter_list|,
name|struct
name|wpa_used_freq_data
modifier|*
name|freqs_data
parameter_list|,
name|unsigned
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|get_shared_radio_freqs_data
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|wpa_used_freq_data
modifier|*
name|freqs_data
parameter_list|,
name|unsigned
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|get_shared_radio_freqs
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|int
modifier|*
name|freq_array
parameter_list|,
name|unsigned
name|int
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|wpas_network_reenabled
parameter_list|(
name|void
modifier|*
name|eloop_ctx
parameter_list|,
name|void
modifier|*
name|timeout_ctx
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_FST
end_ifdef

begin_struct_decl
struct_decl|struct
name|fst_wpa_obj
struct_decl|;
end_struct_decl

begin_function_decl
name|void
name|fst_wpa_supplicant_fill_iface_obj
parameter_list|(
name|struct
name|wpa_supplicant
modifier|*
name|wpa_s
parameter_list|,
name|struct
name|fst_wpa_obj
modifier|*
name|iface_obj
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_FST */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* WPA_SUPPLICANT_I_H */
end_comment

end_unit

