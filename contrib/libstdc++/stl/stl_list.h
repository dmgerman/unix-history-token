begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_LIST_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_LIST_H
end_define

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|set
name|woff
name|1174
endif|#
directive|endif
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|__list_node
block|{
typedef|typedef
name|void
modifier|*
name|void_pointer
typedef|;
name|void_pointer
name|next
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|void_pointer
name|prev
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|T
name|data
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|>
expr|struct
name|__list_iterator
block|{
typedef|typedef
name|__list_iterator
operator|<
name|T
operator|,
name|T
operator|&
operator|,
name|T
operator|*
operator|>
name|iterator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|__list_iterator
operator|<
name|T
operator|,
specifier|const
name|T
operator|&
operator|,
specifier|const
name|T
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__list_iterator
operator|<
name|T
operator|,
name|Ref
operator|,
name|Ptr
operator|>
name|self
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|bidirectional_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Ptr
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Ref
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__list_node
operator|<
name|T
operator|>
operator|*
name|link_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_decl_stmt
name|link_type
name|node
decl_stmt|;
end_decl_stmt

begin_macro
name|__list_iterator
argument_list|(
argument|link_type x
argument_list|)
end_macro

begin_macro
unit|:
name|node
argument_list|(
argument|x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_macro
name|__list_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|__list_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|x
argument_list|)
operator|:
name|node
argument_list|(
argument|x.node
argument_list|)
block|{}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|node
operator|==
name|x
operator|.
name|node
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|node
operator|!=
name|x
operator|.
name|node
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|(
operator|*
name|node
operator|)
operator|.
name|data
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|node
operator|=
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|next
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|node
operator|=
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|prev
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|>
specifier|inline
name|bidirectional_iterator_tag
name|iterator_category
argument_list|(
argument|const __list_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr>&
argument_list|)
block|{
return|return
name|bidirectional_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const __list_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|>
specifier|inline
name|ptrdiff_t
operator|*
name|distance_type
argument_list|(
argument|const __list_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|=
name|alloc
operator|>
name|class
name|list
block|{
name|protected
operator|:
typedef|typedef
name|void
modifier|*
name|void_pointer
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|__list_node
operator|<
name|T
operator|>
name|list_node
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|list_node
operator|,
name|Alloc
operator|>
name|list_node_allocator
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|list_node
modifier|*
name|link_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|__list_iterator
operator|<
name|T
operator|,
name|T
operator|&
operator|,
name|T
operator|*
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__list_iterator
operator|<
name|T
operator|,
specifier|const
name|T
operator|&
operator|,
specifier|const
name|T
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_typedef
typedef|typedef
name|reverse_bidirectional_iterator
operator|<
name|const_iterator
operator|,
name|value_type
operator|,
name|const_reference
operator|,
name|difference_type
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_bidirectional_iterator
operator|<
name|iterator
operator|,
name|value_type
operator|,
name|reference
operator|,
name|difference_type
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_label
name|protected
label|:
end_label

begin_function
name|link_type
name|get_node
parameter_list|()
block|{
return|return
name|list_node_allocator
operator|::
name|allocate
argument_list|()
return|;
block|}
end_function

begin_function
name|void
name|put_node
parameter_list|(
name|link_type
name|p
parameter_list|)
block|{
name|list_node_allocator
operator|::
name|deallocate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|link_type
name|create_node
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|link_type
name|p
init|=
name|get_node
argument_list|()
decl_stmt|;
name|__STL_TRY
block|{
name|construct
argument_list|(
operator|&
name|p
operator|->
name|data
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|put_node
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function

begin_function
name|void
name|destroy_node
parameter_list|(
name|link_type
name|p
parameter_list|)
block|{
name|destroy
argument_list|(
operator|&
name|p
operator|->
name|data
argument_list|)
expr_stmt|;
name|put_node
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_function
name|void
name|empty_initialize
parameter_list|()
block|{
name|node
operator|=
name|get_node
argument_list|()
expr_stmt|;
name|node
operator|->
name|next
operator|=
name|node
expr_stmt|;
name|node
operator|->
name|prev
operator|=
name|node
expr_stmt|;
block|}
end_function

begin_function
name|void
name|fill_initialize
parameter_list|(
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
block|{
name|empty_initialize
argument_list|()
expr_stmt|;
name|__STL_TRY
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|n
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
argument|clear(); put_node(node)
argument_list|)
empty_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|range_initialize
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
name|empty_initialize
argument_list|()
block|;
name|__STL_TRY
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
block|;     }
name|__STL_UNWIND
argument_list|(
argument|clear(); put_node(node)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|void
name|range_initialize
argument_list|(
argument|const T* first
argument_list|,
argument|const T* last
argument_list|)
block|{
name|empty_initialize
argument_list|()
block|;
name|__STL_TRY
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
block|;     }
name|__STL_UNWIND
argument_list|(
argument|clear(); put_node(node)
argument_list|)
block|;   }
name|void
name|range_initialize
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
name|empty_initialize
argument_list|()
block|;
name|__STL_TRY
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
block|;     }
name|__STL_UNWIND
argument_list|(
argument|clear(); put_node(node)
argument_list|)
block|;   }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|protected
operator|:
name|link_type
name|node
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|list
argument_list|()
end_macro

begin_block
block|{
name|empty_initialize
argument_list|()
expr_stmt|;
block|}
end_block

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|next
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
call|(
name|link_type
call|)
argument_list|(
operator|(
operator|*
name|node
operator|)
operator|.
name|next
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|node
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|node
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|node
operator|->
name|next
operator|==
name|node
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
name|size_type
name|result
operator|=
literal|0
block|;
name|distance
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|result
argument_list|)
block|;
return|return
name|result
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|swap
argument_list|(
name|list
operator|<
name|T
argument_list|,
name|Alloc
operator|>
operator|&
name|x
argument_list|)
block|{
name|__STD
operator|::
name|swap
argument_list|(
name|node
argument_list|,
name|x
operator|.
name|node
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|link_type
name|tmp
init|=
name|create_node
argument_list|(
name|x
argument_list|)
decl_stmt|;
name|tmp
operator|->
name|next
operator|=
name|position
operator|.
name|node
expr_stmt|;
name|tmp
operator|->
name|prev
operator|=
name|position
operator|.
name|node
operator|->
name|prev
expr_stmt|;
operator|(
name|link_type
argument_list|(
name|position
operator|.
name|node
operator|->
name|prev
argument_list|)
operator|)
operator|->
name|next
operator|=
name|tmp
expr_stmt|;
name|position
operator|.
name|node
operator|->
name|prev
operator|=
name|tmp
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|position
argument_list|,
name|T
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|*
name|first
parameter_list|,
specifier|const
name|T
modifier|*
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|const_iterator
name|first
parameter_list|,
name|const_iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
operator|(
name|size_type
operator|)
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|long
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
operator|(
name|size_type
operator|)
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
name|link_type
name|next_node
init|=
name|link_type
argument_list|(
name|position
operator|.
name|node
operator|->
name|next
argument_list|)
decl_stmt|;
name|link_type
name|prev_node
init|=
name|link_type
argument_list|(
name|position
operator|.
name|node
operator|->
name|prev
argument_list|)
decl_stmt|;
name|prev_node
operator|->
name|next
operator|=
name|next_node
expr_stmt|;
name|next_node
operator|->
name|prev
operator|=
name|prev_node
expr_stmt|;
name|destroy_node
argument_list|(
name|position
operator|.
name|node
argument_list|)
expr_stmt|;
return|return
name|iterator
argument_list|(
name|next_node
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|)
block|{
name|resize
argument_list|(
name|new_size
argument_list|,
name|T
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl

begin_function
name|void
name|pop_front
parameter_list|()
block|{
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
name|iterator
name|tmp
init|=
name|end
argument_list|()
decl_stmt|;
name|erase
argument_list|(
operator|--
name|tmp
argument_list|)
expr_stmt|;
block|}
end_function

begin_macro
name|list
argument_list|(
argument|size_type n
argument_list|,
argument|const T& value
argument_list|)
end_macro

begin_block
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_block

begin_macro
name|list
argument_list|(
argument|int n
argument_list|,
argument|const T& value
argument_list|)
end_macro

begin_block
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_block

begin_macro
name|list
argument_list|(
argument|long n
argument_list|,
argument|const T& value
argument_list|)
end_macro

begin_block
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_block

begin_function
name|explicit
name|list
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|T
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|list
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
name|range_initialize
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|list
argument_list|(
argument|const T* first
argument_list|,
argument|const T* last
argument_list|)
block|{
name|range_initialize
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
name|list
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
name|range_initialize
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|;   }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|list
argument_list|(
argument|const list<T
argument_list|,
argument|Alloc>& x
argument_list|)
block|{
name|range_initialize
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|)
block|;   }
operator|~
name|list
argument_list|()
block|{
name|clear
argument_list|()
block|;
name|put_node
argument_list|(
name|node
argument_list|)
block|;   }
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function
name|void
name|transfer
parameter_list|(
name|iterator
name|position
parameter_list|,
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
if|if
condition|(
name|position
operator|!=
name|last
condition|)
block|{
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|last
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
operator|)
operator|)
operator|.
name|next
operator|=
name|position
operator|.
name|node
expr_stmt|;
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|first
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
operator|)
operator|)
operator|.
name|next
operator|=
name|last
operator|.
name|node
expr_stmt|;
operator|(
operator|*
operator|(
name|link_type
argument_list|(
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
operator|)
operator|)
operator|.
name|next
operator|=
name|first
operator|.
name|node
expr_stmt|;
name|link_type
name|tmp
init|=
name|link_type
argument_list|(
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
argument_list|)
decl_stmt|;
operator|(
operator|*
name|position
operator|.
name|node
operator|)
operator|.
name|prev
operator|=
operator|(
operator|*
name|last
operator|.
name|node
operator|)
operator|.
name|prev
expr_stmt|;
operator|(
operator|*
name|last
operator|.
name|node
operator|)
operator|.
name|prev
operator|=
operator|(
operator|*
name|first
operator|.
name|node
operator|)
operator|.
name|prev
expr_stmt|;
operator|(
operator|*
name|first
operator|.
name|node
operator|)
operator|.
name|prev
operator|=
name|tmp
expr_stmt|;
block|}
block|}
end_function

begin_label
name|public
label|:
end_label

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|position
parameter_list|,
name|list
modifier|&
name|x
parameter_list|)
block|{
if|if
condition|(
operator|!
name|x
operator|.
name|empty
argument_list|()
condition|)
name|transfer
argument_list|(
name|position
argument_list|,
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|position
parameter_list|,
name|list
modifier|&
parameter_list|,
name|iterator
name|i
parameter_list|)
block|{
name|iterator
name|j
init|=
name|i
decl_stmt|;
operator|++
name|j
expr_stmt|;
if|if
condition|(
name|position
operator|==
name|i
operator|||
name|position
operator|==
name|j
condition|)
return|return;
name|transfer
argument_list|(
name|position
argument_list|,
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|position
parameter_list|,
name|list
modifier|&
parameter_list|,
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
if|if
condition|(
name|first
operator|!=
name|last
condition|)
name|transfer
argument_list|(
name|position
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|remove
parameter_list|(
specifier|const
name|T
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|unique
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|merge
parameter_list|(
name|list
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|reverse
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sort
parameter_list|()
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|Predicate
operator|>
name|void
name|remove_if
argument_list|(
name|Predicate
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|BinaryPredicate
operator|>
name|void
name|unique
argument_list|(
name|BinaryPredicate
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|StrictWeakOrdering
operator|>
name|void
name|merge
argument_list|(
name|list
operator|&
argument_list|,
name|StrictWeakOrdering
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|StrictWeakOrdering
operator|>
name|void
name|sort
argument_list|(
name|StrictWeakOrdering
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|list
operator|&
name|x
argument_list|,
specifier|const
name|list
operator|&
name|y
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|,
specifier|const
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|y
operator|)
block|{
typedef|typedef
name|typename
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|link_type
name|link_type
expr_stmt|;
name|link_type
name|e1
operator|=
name|x
operator|.
name|node
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|link_type
name|e2
init|=
name|y
operator|.
name|node
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|link_type
name|n1
init|=
operator|(
name|link_type
operator|)
name|e1
operator|->
name|next
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|link_type
name|n2
init|=
operator|(
name|link_type
operator|)
name|e2
operator|->
name|next
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
init|;
name|n1
operator|!=
name|e1
operator|&&
name|n2
operator|!=
name|e2
condition|;
name|n1
operator|=
operator|(
name|link_type
operator|)
name|n1
operator|->
name|next
operator|,
name|n2
operator|=
operator|(
name|link_type
operator|)
name|n2
operator|->
name|next
control|)
if|if
condition|(
name|n1
operator|->
name|data
operator|!=
name|n2
operator|->
name|data
condition|)
return|return
name|false
return|;
end_for

begin_return
return|return
name|n1
operator|==
name|e1
operator|&&
name|n2
operator|==
name|e2
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|,
specifier|const
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|,
name|y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|list<T
argument_list|,
argument|Alloc>& x
argument_list|,
argument|list<T
argument_list|,
argument|Alloc>& y
argument_list|)
block|{
name|x
operator|.
name|swap
argument_list|(
name|y
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_FUNCTION_TMPL_PARTIAL_ORDER */
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
name|insert
argument_list|(
name|position
argument_list|,
operator|*
name|first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const T* first
argument_list|,
argument|const T* last
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
name|insert
argument_list|(
name|position
argument_list|,
operator|*
name|first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
name|insert
argument_list|(
name|position
argument_list|,
operator|*
name|first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|size_type n
argument_list|,
argument|const T& x
argument_list|)
block|{
for|for
control|(
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
control|)
name|insert
argument_list|(
name|position
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|iterator
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|iterator first
argument_list|,
argument|iterator last
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
name|erase
argument_list|(
name|first
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|last
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|resize
argument_list|(
argument|size_type new_size
argument_list|,
argument|const T& x
argument_list|)
block|{
name|iterator
name|i
operator|=
name|begin
argument_list|()
block|;
name|size_type
name|len
operator|=
literal|0
block|;
for|for
control|(
init|;
name|i
operator|!=
name|end
argument_list|()
operator|&&
name|len
operator|<
name|new_size
condition|;
operator|++
name|i
operator|,
operator|++
name|len
control|)
empty_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|len
operator|==
name|new_size
condition|)
name|erase
argument_list|(
name|i
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
comment|// i == end()
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|new_size
operator|-
name|len
argument_list|,
name|x
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|clear
argument_list|()
block|{
name|link_type
name|cur
operator|=
operator|(
name|link_type
operator|)
name|node
operator|->
name|next
block|;
while|while
condition|(
name|cur
operator|!=
name|node
condition|)
block|{
name|link_type
name|tmp
init|=
name|cur
decl_stmt|;
name|cur
operator|=
operator|(
name|link_type
operator|)
name|cur
operator|->
name|next
expr_stmt|;
name|destroy_node
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
block|}
name|node
operator|->
name|next
operator|=
name|node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|node
operator|->
name|prev
operator|=
name|node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|x
condition|)
block|{
name|iterator
name|first1
init|=
name|begin
argument_list|()
decl_stmt|;
name|iterator
name|last1
init|=
name|end
argument_list|()
decl_stmt|;
name|const_iterator
name|first2
init|=
name|x
operator|.
name|begin
argument_list|()
decl_stmt|;
name|const_iterator
name|last2
init|=
name|x
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
operator|*
name|first1
operator|++
operator|=
operator|*
name|first2
operator|++
expr_stmt|;
if|if
condition|(
name|first2
operator|==
name|last2
condition|)
name|erase
argument_list|(
name|first1
argument_list|,
name|last1
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|last1
argument_list|,
name|first2
argument_list|,
name|last2
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|remove
argument_list|(
argument|const T& value
argument_list|)
block|{
name|iterator
name|first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last
operator|=
name|end
argument_list|()
block|;
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
name|iterator
name|next
init|=
name|first
decl_stmt|;
operator|++
name|next
expr_stmt|;
if|if
condition|(
operator|*
name|first
operator|==
name|value
condition|)
name|erase
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
name|next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|unique
argument_list|()
block|{
name|iterator
name|first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last
operator|=
name|end
argument_list|()
block|;
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
name|iterator
name|next
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|next
operator|!=
name|last
condition|)
block|{
if|if
condition|(
operator|*
name|first
operator|==
operator|*
name|next
condition|)
name|erase
argument_list|(
name|next
argument_list|)
expr_stmt|;
else|else
name|first
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|first
expr_stmt|;
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|merge
argument_list|(
argument|list<T
argument_list|,
argument|Alloc>& x
argument_list|)
block|{
name|iterator
name|first1
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last1
operator|=
name|end
argument_list|()
block|;
name|iterator
name|first2
operator|=
name|x
operator|.
name|begin
argument_list|()
block|;
name|iterator
name|last2
operator|=
name|x
operator|.
name|end
argument_list|()
block|;
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
block|{
name|iterator
name|next
init|=
name|first2
decl_stmt|;
name|transfer
argument_list|(
name|first1
argument_list|,
name|first2
argument_list|,
operator|++
name|next
argument_list|)
expr_stmt|;
name|first2
operator|=
name|next
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
operator|++
name|first1
expr_stmt|;
end_else

begin_if
if|if
condition|(
name|first2
operator|!=
name|last2
condition|)
name|transfer
argument_list|(
name|last1
argument_list|,
name|first2
argument_list|,
name|last2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|reverse
argument_list|()
block|{
if|if
condition|(
name|node
operator|->
name|next
operator|==
name|node
operator|||
name|link_type
argument_list|(
name|node
operator|->
name|next
argument_list|)
operator|->
name|next
operator|==
name|node
condition|)
return|return;
name|iterator
name|first
operator|=
name|begin
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|first
operator|!=
name|end
argument_list|()
condition|)
block|{
name|iterator
name|old
init|=
name|first
decl_stmt|;
operator|++
name|first
expr_stmt|;
name|transfer
argument_list|(
name|begin
argument_list|()
argument_list|,
name|old
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
end_while

begin_expr_stmt
unit|}      template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|sort
argument_list|()
block|{
if|if
condition|(
name|node
operator|->
name|next
operator|==
name|node
operator|||
name|link_type
argument_list|(
name|node
operator|->
name|next
argument_list|)
operator|->
name|next
operator|==
name|node
condition|)
return|return;
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
name|carry
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
name|counter
index|[
literal|64
index|]
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|int
name|fill
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
name|carry
operator|.
name|splice
argument_list|(
name|carry
operator|.
name|begin
argument_list|()
argument_list|,
operator|*
name|this
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|fill
operator|&&
operator|!
name|counter
index|[
name|i
index|]
operator|.
name|empty
argument_list|()
condition|)
block|{
name|counter
index|[
name|i
index|]
operator|.
name|merge
argument_list|(
name|carry
argument_list|)
expr_stmt|;
name|carry
operator|.
name|swap
argument_list|(
name|counter
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|carry
operator|.
name|swap
argument_list|(
name|counter
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|fill
condition|)
operator|++
name|fill
expr_stmt|;
block|}
end_while

begin_for
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|fill
condition|;
operator|++
name|i
control|)
name|counter
index|[
name|i
index|]
operator|.
name|merge
argument_list|(
name|counter
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
name|swap
argument_list|(
name|counter
index|[
name|fill
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|template
operator|<
name|class
name|Predicate
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|remove_if
argument_list|(
argument|Predicate pred
argument_list|)
block|{
name|iterator
name|first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last
operator|=
name|end
argument_list|()
block|;
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
name|iterator
name|next
init|=
name|first
decl_stmt|;
operator|++
name|next
expr_stmt|;
if|if
condition|(
name|pred
argument_list|(
operator|*
name|first
argument_list|)
condition|)
name|erase
argument_list|(
name|first
argument_list|)
expr_stmt|;
name|first
operator|=
name|next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|template
operator|<
name|class
name|BinaryPredicate
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|unique
argument_list|(
argument|BinaryPredicate binary_pred
argument_list|)
block|{
name|iterator
name|first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last
operator|=
name|end
argument_list|()
block|;
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
name|iterator
name|next
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|next
operator|!=
name|last
condition|)
block|{
if|if
condition|(
name|binary_pred
argument_list|(
operator|*
name|first
argument_list|,
operator|*
name|next
argument_list|)
condition|)
name|erase
argument_list|(
name|next
argument_list|)
expr_stmt|;
else|else
name|first
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|first
expr_stmt|;
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|template
operator|<
name|class
name|StrictWeakOrdering
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|merge
argument_list|(
argument|list<T
argument_list|,
argument|Alloc>& x
argument_list|,
argument|StrictWeakOrdering comp
argument_list|)
block|{
name|iterator
name|first1
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|last1
operator|=
name|end
argument_list|()
block|;
name|iterator
name|first2
operator|=
name|x
operator|.
name|begin
argument_list|()
block|;
name|iterator
name|last2
operator|=
name|x
operator|.
name|end
argument_list|()
block|;
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first2
argument_list|,
operator|*
name|first1
argument_list|)
condition|)
block|{
name|iterator
name|next
init|=
name|first2
decl_stmt|;
name|transfer
argument_list|(
name|first1
argument_list|,
name|first2
argument_list|,
operator|++
name|next
argument_list|)
expr_stmt|;
name|first2
operator|=
name|next
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
operator|++
name|first1
expr_stmt|;
end_else

begin_if
if|if
condition|(
name|first2
operator|!=
name|last2
condition|)
name|transfer
argument_list|(
name|last1
argument_list|,
name|first2
argument_list|,
name|last2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|template
operator|<
name|class
name|StrictWeakOrdering
operator|>
name|void
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|sort
argument_list|(
argument|StrictWeakOrdering comp
argument_list|)
block|{
if|if
condition|(
name|node
operator|->
name|next
operator|==
name|node
operator|||
name|link_type
argument_list|(
name|node
operator|->
name|next
argument_list|)
operator|->
name|next
operator|==
name|node
condition|)
return|return;
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
name|carry
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|list
operator|<
name|T
operator|,
name|Alloc
operator|>
name|counter
index|[
literal|64
index|]
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|int
name|fill
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
name|carry
operator|.
name|splice
argument_list|(
name|carry
operator|.
name|begin
argument_list|()
argument_list|,
operator|*
name|this
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|fill
operator|&&
operator|!
name|counter
index|[
name|i
index|]
operator|.
name|empty
argument_list|()
condition|)
block|{
name|counter
index|[
name|i
index|]
operator|.
name|merge
argument_list|(
name|carry
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|carry
operator|.
name|swap
argument_list|(
name|counter
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|carry
operator|.
name|swap
argument_list|(
name|counter
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|fill
condition|)
operator|++
name|fill
expr_stmt|;
block|}
end_while

begin_for
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|fill
condition|;
operator|++
name|i
control|)
name|counter
index|[
name|i
index|]
operator|.
name|merge
argument_list|(
name|counter
index|[
name|i
operator|-
literal|1
index|]
argument_list|,
name|comp
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
name|swap
argument_list|(
name|counter
index|[
name|fill
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1174
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_endif
unit|__STL_END_NAMESPACE
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_LIST_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

