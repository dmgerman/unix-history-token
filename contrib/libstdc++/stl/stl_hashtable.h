begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_HASHTABLE_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_HASHTABLE_H
end_define

begin_comment
comment|// Hashtable class, used to implement the hashed associative containers
end_comment

begin_comment
comment|// hash_set, hash_map, hash_multiset, and hash_multimap.
end_comment

begin_include
include|#
directive|include
file|<stl_algobase.h>
end_include

begin_include
include|#
directive|include
file|<stl_alloc.h>
end_include

begin_include
include|#
directive|include
file|<stl_construct.h>
end_include

begin_include
include|#
directive|include
file|<stl_tempbuf.h>
end_include

begin_include
include|#
directive|include
file|<stl_algo.h>
end_include

begin_include
include|#
directive|include
file|<stl_uninitialized.h>
end_include

begin_include
include|#
directive|include
file|<stl_function.h>
end_include

begin_include
include|#
directive|include
file|<stl_vector.h>
end_include

begin_include
include|#
directive|include
file|<stl_hash_fun.h>
end_include

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
name|template
operator|<
name|class
name|Value
operator|>
expr|struct
name|__hashtable_node
block|{
name|__hashtable_node
operator|*
name|next
block|;
name|Value
name|val
block|; }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Value
operator|,
name|class
name|Key
operator|,
name|class
name|HashFcn
operator|,
name|class
name|ExtractKey
operator|,
name|class
name|EqualKey
operator|,
name|class
name|Alloc
operator|=
name|alloc
operator|>
name|class
name|hashtable
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Value
operator|,
name|class
name|Key
operator|,
name|class
name|HashFcn
operator|,
name|class
name|ExtractKey
operator|,
name|class
name|EqualKey
operator|,
name|class
name|Alloc
operator|>
expr|struct
name|__hashtable_iterator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Value
operator|,
name|class
name|Key
operator|,
name|class
name|HashFcn
operator|,
name|class
name|ExtractKey
operator|,
name|class
name|EqualKey
operator|,
name|class
name|Alloc
operator|>
expr|struct
name|__hashtable_const_iterator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Value
operator|,
name|class
name|Key
operator|,
name|class
name|HashFcn
operator|,
name|class
name|ExtractKey
operator|,
name|class
name|EqualKey
operator|,
name|class
name|Alloc
operator|>
expr|struct
name|__hashtable_iterator
block|{
typedef|typedef
name|hashtable
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
name|hashtable
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|__hashtable_iterator
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__hashtable_const_iterator
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__hashtable_node
operator|<
name|Value
operator|>
name|node
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|forward_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Value
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Value
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Value
modifier|*
name|pointer
typedef|;
end_typedef

begin_decl_stmt
name|node
modifier|*
name|cur
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|hashtable
modifier|*
name|ht
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__hashtable_iterator
argument_list|(
name|node
operator|*
name|n
argument_list|,
name|hashtable
operator|*
name|tab
argument_list|)
operator|:
name|cur
argument_list|(
name|n
argument_list|)
operator|,
name|ht
argument_list|(
argument|tab
argument_list|)
block|{}
name|__hashtable_iterator
argument_list|()
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|cur
operator|->
name|val
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|cur
operator|==
name|it
operator|.
name|cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|cur
operator|!=
name|it
operator|.
name|cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Value
operator|,
name|class
name|Key
operator|,
name|class
name|HashFcn
operator|,
name|class
name|ExtractKey
operator|,
name|class
name|EqualKey
operator|,
name|class
name|Alloc
operator|>
expr|struct
name|__hashtable_const_iterator
block|{
typedef|typedef
name|hashtable
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
name|hashtable
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|__hashtable_iterator
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__hashtable_const_iterator
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__hashtable_node
operator|<
name|Value
operator|>
name|node
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|forward_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Value
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|Value
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|Value
modifier|*
name|pointer
typedef|;
end_typedef

begin_decl_stmt
specifier|const
name|node
modifier|*
name|cur
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|hashtable
modifier|*
name|ht
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__hashtable_const_iterator
argument_list|(
specifier|const
name|node
operator|*
name|n
argument_list|,
specifier|const
name|hashtable
operator|*
name|tab
argument_list|)
operator|:
name|cur
argument_list|(
name|n
argument_list|)
operator|,
name|ht
argument_list|(
argument|tab
argument_list|)
block|{}
name|__hashtable_const_iterator
argument_list|()
block|{}
name|__hashtable_const_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|it
argument_list|)
operator|:
name|cur
argument_list|(
name|it
operator|.
name|cur
argument_list|)
operator|,
name|ht
argument_list|(
argument|it.ht
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|cur
operator|->
name|val
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|cur
operator|==
name|it
operator|.
name|cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|it
operator|)
specifier|const
block|{
return|return
name|cur
operator|!=
name|it
operator|.
name|cur
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|// Note: assumes long is at least 32 bits.
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|int
name|__stl_num_primes
init|=
literal|28
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|long
name|__stl_prime_list
index|[
name|__stl_num_primes
index|]
init|=
block|{
literal|53
block|,
literal|97
block|,
literal|193
block|,
literal|389
block|,
literal|769
block|,
literal|1543
block|,
literal|3079
block|,
literal|6151
block|,
literal|12289
block|,
literal|24593
block|,
literal|49157
block|,
literal|98317
block|,
literal|196613
block|,
literal|393241
block|,
literal|786433
block|,
literal|1572869
block|,
literal|3145739
block|,
literal|6291469
block|,
literal|12582917
block|,
literal|25165843
block|,
literal|50331653
block|,
literal|100663319
block|,
literal|201326611
block|,
literal|402653189
block|,
literal|805306457
block|,
literal|1610612741
block|,
literal|3221225473ul
block|,
literal|4294967291ul
block|}
decl_stmt|;
end_decl_stmt

begin_function
specifier|inline
name|unsigned
name|long
name|__stl_next_prime
parameter_list|(
name|unsigned
name|long
name|n
parameter_list|)
block|{
specifier|const
name|unsigned
name|long
modifier|*
name|first
init|=
name|__stl_prime_list
decl_stmt|;
specifier|const
name|unsigned
name|long
modifier|*
name|last
init|=
name|__stl_prime_list
operator|+
name|__stl_num_primes
decl_stmt|;
specifier|const
name|unsigned
name|long
modifier|*
name|pos
init|=
name|lower_bound
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
decl_stmt|;
return|return
name|pos
operator|==
name|last
condition|?
operator|*
operator|(
name|last
operator|-
literal|1
operator|)
else|:
operator|*
name|pos
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|Value
operator|,
name|class
name|Key
operator|,
name|class
name|HashFcn
operator|,
name|class
name|ExtractKey
operator|,
name|class
name|EqualKey
operator|,
name|class
name|Alloc
operator|>
name|class
name|hashtable
block|{
name|public
operator|:
typedef|typedef
name|Key
name|key_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Value
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|HashFcn
name|hasher
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|EqualKey
name|key_equal
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_expr_stmt
name|hasher
name|hash_funct
argument_list|()
specifier|const
block|{
return|return
name|hash
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|key_equal
name|key_eq
argument_list|()
specifier|const
block|{
return|return
name|equals
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|hasher
name|hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|key_equal
name|equals
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|ExtractKey
name|get_key
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|__hashtable_node
operator|<
name|Value
operator|>
name|node
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|node
operator|,
name|Alloc
operator|>
name|node_allocator
expr_stmt|;
end_typedef

begin_expr_stmt
name|vector
operator|<
name|node
operator|*
operator|,
name|Alloc
operator|>
name|buckets
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|size_type
name|num_elements
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|__hashtable_iterator
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__hashtable_const_iterator
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_macro
name|friend
end_macro

begin_expr_stmt
unit|struct
name|__hashtable_iterator
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
expr_stmt|;
end_expr_stmt

begin_macro
name|friend
end_macro

begin_expr_stmt
unit|struct
name|__hashtable_const_iterator
operator|<
name|Value
operator|,
name|Key
operator|,
name|HashFcn
operator|,
name|ExtractKey
operator|,
name|EqualKey
operator|,
name|Alloc
operator|>
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|hashtable
argument_list|(
argument|size_type n
argument_list|,
argument|const HashFcn&    hf
argument_list|,
argument|const EqualKey&   eql
argument_list|,
argument|const ExtractKey& ext
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|hash
argument_list|(
name|hf
argument_list|)
operator|,
name|equals
argument_list|(
name|eql
argument_list|)
operator|,
name|get_key
argument_list|(
name|ext
argument_list|)
operator|,
name|num_elements
argument_list|(
literal|0
argument_list|)
block|{
name|initialize_buckets
argument_list|(
name|n
argument_list|)
block|;   }
name|hashtable
argument_list|(
argument|size_type n
argument_list|,
argument|const HashFcn&    hf
argument_list|,
argument|const EqualKey&   eql
argument_list|)
operator|:
name|hash
argument_list|(
name|hf
argument_list|)
operator|,
name|equals
argument_list|(
name|eql
argument_list|)
operator|,
name|get_key
argument_list|(
name|ExtractKey
argument_list|()
argument_list|)
operator|,
name|num_elements
argument_list|(
literal|0
argument_list|)
block|{
name|initialize_buckets
argument_list|(
name|n
argument_list|)
block|;   }
name|hashtable
argument_list|(
specifier|const
name|hashtable
operator|&
name|ht
argument_list|)
operator|:
name|hash
argument_list|(
name|ht
operator|.
name|hash
argument_list|)
operator|,
name|equals
argument_list|(
name|ht
operator|.
name|equals
argument_list|)
operator|,
name|get_key
argument_list|(
name|ht
operator|.
name|get_key
argument_list|)
operator|,
name|num_elements
argument_list|(
literal|0
argument_list|)
block|{
name|copy_from
argument_list|(
name|ht
argument_list|)
block|;   }
name|hashtable
operator|&
name|operator
operator|=
operator|(
specifier|const
name|hashtable
operator|&
name|ht
operator|)
block|{
if|if
condition|(
operator|&
name|ht
operator|!=
name|this
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|hash
operator|=
name|ht
operator|.
name|hash
expr_stmt|;
name|equals
operator|=
name|ht
operator|.
name|equals
expr_stmt|;
name|get_key
operator|=
name|ht
operator|.
name|get_key
expr_stmt|;
name|copy_from
argument_list|(
name|ht
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_macro
unit|}    ~
name|hashtable
argument_list|()
end_macro

begin_block
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|num_elements
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_function
name|void
name|swap
parameter_list|(
name|hashtable
modifier|&
name|ht
parameter_list|)
block|{
name|__STD
operator|::
name|swap
argument_list|(
name|hash
argument_list|,
name|ht
operator|.
name|hash
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|equals
argument_list|,
name|ht
operator|.
name|equals
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|get_key
argument_list|,
name|ht
operator|.
name|get_key
argument_list|)
expr_stmt|;
name|buckets
operator|.
name|swap
argument_list|(
name|ht
operator|.
name|buckets
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|num_elements
argument_list|,
name|ht
operator|.
name|num_elements
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|begin
parameter_list|()
block|{
for|for
control|(
name|size_type
name|n
init|=
literal|0
init|;
name|n
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|n
control|)
if|if
condition|(
name|buckets
index|[
name|n
index|]
condition|)
return|return
name|iterator
argument_list|(
name|buckets
index|[
name|n
index|]
argument_list|,
name|this
argument_list|)
return|;
return|return
name|end
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
for|for
control|(
name|size_type
name|n
init|=
literal|0
init|;
name|n
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|n
control|)
if|if
condition|(
name|buckets
index|[
name|n
index|]
condition|)
return|return
name|const_iterator
argument_list|(
name|buckets
index|[
name|n
index|]
argument_list|,
name|this
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|end
argument_list|()
return|;
end_return

begin_macro
unit|}    const_iterator
name|end
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|hashtable
operator|&
argument_list|,
specifier|const
name|hashtable
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|size_type
name|bucket_count
argument_list|()
specifier|const
block|{
return|return
name|buckets
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_bucket_count
argument_list|()
specifier|const
block|{
return|return
name|__stl_prime_list
index|[
name|__stl_num_primes
operator|-
literal|1
index|]
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|size_type
name|elems_in_bucket
argument_list|(
name|size_type
name|bucket
argument_list|)
decl|const
block|{
name|size_type
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|node
modifier|*
name|cur
init|=
name|buckets
index|[
name|bucket
index|]
init|;
name|cur
condition|;
name|cur
operator|=
name|cur
operator|->
name|next
control|)
name|result
operator|+=
literal|1
expr_stmt|;
return|return
name|result
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert_unique
argument_list|(
argument|const value_type& obj
argument_list|)
block|{
name|resize
argument_list|(
name|num_elements
operator|+
literal|1
argument_list|)
block|;
return|return
name|insert_unique_noresize
argument_list|(
name|obj
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|insert_equal
parameter_list|(
specifier|const
name|value_type
modifier|&
name|obj
parameter_list|)
block|{
name|resize
argument_list|(
name|num_elements
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|insert_equal_noresize
argument_list|(
name|obj
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert_unique_noresize
argument_list|(
specifier|const
name|value_type
operator|&
name|obj
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|iterator
name|insert_equal_noresize
parameter_list|(
specifier|const
name|value_type
modifier|&
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert_unique
argument_list|(
argument|InputIterator f
argument_list|,
argument|InputIterator l
argument_list|)
block|{
name|insert_unique
argument_list|(
name|f
argument_list|,
name|l
argument_list|,
name|iterator_category
argument_list|(
name|f
argument_list|)
argument_list|)
block|;   }
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert_equal
argument_list|(
argument|InputIterator f
argument_list|,
argument|InputIterator l
argument_list|)
block|{
name|insert_equal
argument_list|(
name|f
argument_list|,
name|l
argument_list|,
name|iterator_category
argument_list|(
name|f
argument_list|)
argument_list|)
block|;   }
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert_unique
argument_list|(
argument|InputIterator f
argument_list|,
argument|InputIterator l
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|f
operator|!=
name|l
condition|;
operator|++
name|f
control|)
name|insert_unique
argument_list|(
operator|*
name|f
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert_equal
argument_list|(
argument|InputIterator f
argument_list|,
argument|InputIterator l
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|f
operator|!=
name|l
condition|;
operator|++
name|f
control|)
name|insert_equal
argument_list|(
operator|*
name|f
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|insert_unique
argument_list|(
argument|ForwardIterator f
argument_list|,
argument|ForwardIterator l
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|f
argument_list|,
name|l
argument_list|,
name|n
argument_list|)
block|;
name|resize
argument_list|(
name|num_elements
operator|+
name|n
argument_list|)
block|;
for|for
control|(
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
operator|,
operator|++
name|f
control|)
name|insert_unique_noresize
argument_list|(
operator|*
name|f
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|insert_equal
argument_list|(
argument|ForwardIterator f
argument_list|,
argument|ForwardIterator l
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|f
argument_list|,
name|l
argument_list|,
name|n
argument_list|)
block|;
name|resize
argument_list|(
name|num_elements
operator|+
name|n
argument_list|)
block|;
for|for
control|(
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
operator|,
operator|++
name|f
control|)
name|insert_equal_noresize
argument_list|(
operator|*
name|f
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function
name|void
name|insert_unique
parameter_list|(
specifier|const
name|value_type
modifier|*
name|f
parameter_list|,
specifier|const
name|value_type
modifier|*
name|l
parameter_list|)
block|{
name|size_type
name|n
init|=
name|l
operator|-
name|f
decl_stmt|;
name|resize
argument_list|(
name|num_elements
operator|+
name|n
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
operator|,
operator|++
name|f
control|)
name|insert_unique_noresize
argument_list|(
operator|*
name|f
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert_equal
parameter_list|(
specifier|const
name|value_type
modifier|*
name|f
parameter_list|,
specifier|const
name|value_type
modifier|*
name|l
parameter_list|)
block|{
name|size_type
name|n
init|=
name|l
operator|-
name|f
decl_stmt|;
name|resize
argument_list|(
name|num_elements
operator|+
name|n
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
operator|,
operator|++
name|f
control|)
name|insert_equal_noresize
argument_list|(
operator|*
name|f
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert_unique
parameter_list|(
name|const_iterator
name|f
parameter_list|,
name|const_iterator
name|l
parameter_list|)
block|{
name|size_type
name|n
init|=
literal|0
decl_stmt|;
name|distance
argument_list|(
name|f
argument_list|,
name|l
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|num_elements
operator|+
name|n
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
operator|,
operator|++
name|f
control|)
name|insert_unique_noresize
argument_list|(
operator|*
name|f
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert_equal
parameter_list|(
name|const_iterator
name|f
parameter_list|,
name|const_iterator
name|l
parameter_list|)
block|{
name|size_type
name|n
init|=
literal|0
decl_stmt|;
name|distance
argument_list|(
name|f
argument_list|,
name|l
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|resize
argument_list|(
name|num_elements
operator|+
name|n
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
operator|,
operator|++
name|f
control|)
name|insert_equal_noresize
argument_list|(
operator|*
name|f
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*__STL_MEMBER_TEMPLATES */
end_comment

begin_function_decl
name|reference
name|find_or_insert
parameter_list|(
specifier|const
name|value_type
modifier|&
name|obj
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|iterator
name|find
parameter_list|(
specifier|const
name|key_type
modifier|&
name|key
parameter_list|)
block|{
name|size_type
name|n
init|=
name|bkt_num_key
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|node
modifier|*
name|first
decl_stmt|;
for|for
control|(
name|first
operator|=
name|buckets
index|[
name|n
index|]
init|;
name|first
operator|&&
operator|!
name|equals
argument_list|(
name|get_key
argument_list|(
name|first
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
condition|;
name|first
operator|=
name|first
operator|->
name|next
control|)
block|{}
return|return
name|iterator
argument_list|(
name|first
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|const_iterator
name|find
argument_list|(
specifier|const
name|key_type
operator|&
name|key
argument_list|)
decl|const
block|{
name|size_type
name|n
init|=
name|bkt_num_key
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|const
name|node
modifier|*
name|first
decl_stmt|;
for|for
control|(
name|first
operator|=
name|buckets
index|[
name|n
index|]
init|;
name|first
operator|&&
operator|!
name|equals
argument_list|(
name|get_key
argument_list|(
name|first
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
condition|;
name|first
operator|=
name|first
operator|->
name|next
control|)
block|{}
return|return
name|const_iterator
argument_list|(
name|first
argument_list|,
name|this
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|count
argument_list|(
specifier|const
name|key_type
operator|&
name|key
argument_list|)
decl|const
block|{
specifier|const
name|size_type
name|n
init|=
name|bkt_num_key
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|size_type
name|result
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|const
name|node
modifier|*
name|cur
init|=
name|buckets
index|[
name|n
index|]
init|;
name|cur
condition|;
name|cur
operator|=
name|cur
operator|->
name|next
control|)
if|if
condition|(
name|equals
argument_list|(
name|get_key
argument_list|(
name|cur
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
condition|)
operator|++
name|result
expr_stmt|;
return|return
name|result
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|equal_range
argument_list|(
specifier|const
name|key_type
operator|&
name|key
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|pair
operator|<
name|const_iterator
operator|,
name|const_iterator
operator|>
name|equal_range
argument_list|(
argument|const key_type& key
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_function_decl
name|size_type
name|erase
parameter_list|(
specifier|const
name|key_type
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
specifier|const
name|iterator
modifier|&
name|it
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
specifier|const
name|const_iterator
modifier|&
name|it
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|const_iterator
name|first
parameter_list|,
name|const_iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|resize
parameter_list|(
name|size_type
name|num_elements_hint
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|size_type
name|next_size
argument_list|(
name|size_type
name|n
argument_list|)
decl|const
block|{
return|return
name|__stl_next_prime
argument_list|(
name|n
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|void
name|initialize_buckets
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
specifier|const
name|size_type
name|n_buckets
init|=
name|next_size
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|buckets
operator|.
name|reserve
argument_list|(
name|n_buckets
argument_list|)
expr_stmt|;
name|buckets
operator|.
name|insert
argument_list|(
name|buckets
operator|.
name|end
argument_list|()
argument_list|,
name|n_buckets
argument_list|,
operator|(
name|node
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|num_elements
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|size_type
name|bkt_num_key
argument_list|(
specifier|const
name|key_type
operator|&
name|key
argument_list|)
decl|const
block|{
return|return
name|bkt_num_key
argument_list|(
name|key
argument_list|,
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|bkt_num
argument_list|(
specifier|const
name|value_type
operator|&
name|obj
argument_list|)
decl|const
block|{
return|return
name|bkt_num_key
argument_list|(
name|get_key
argument_list|(
name|obj
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|bkt_num_key
argument_list|(
specifier|const
name|key_type
operator|&
name|key
argument_list|,
name|size_t
name|n
argument_list|)
decl|const
block|{
return|return
name|hash
argument_list|(
name|key
argument_list|)
operator|%
name|n
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|bkt_num
argument_list|(
specifier|const
name|value_type
operator|&
name|obj
argument_list|,
name|size_t
name|n
argument_list|)
decl|const
block|{
return|return
name|bkt_num_key
argument_list|(
name|get_key
argument_list|(
name|obj
argument_list|)
argument_list|,
name|n
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|node
modifier|*
name|new_node
parameter_list|(
specifier|const
name|value_type
modifier|&
name|obj
parameter_list|)
block|{
name|node
modifier|*
name|n
init|=
name|node_allocator
operator|::
name|allocate
argument_list|()
decl_stmt|;
name|n
operator|->
name|next
operator|=
literal|0
expr_stmt|;
name|__STL_TRY
block|{
name|construct
argument_list|(
operator|&
name|n
operator|->
name|val
argument_list|,
name|obj
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
name|__STL_UNWIND
argument_list|(
name|node_allocator
operator|::
name|deallocate
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|delete_node
parameter_list|(
name|node
modifier|*
name|n
parameter_list|)
block|{
name|destroy
argument_list|(
operator|&
name|n
operator|->
name|val
argument_list|)
expr_stmt|;
name|node_allocator
operator|::
name|deallocate
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|erase_bucket
parameter_list|(
specifier|const
name|size_type
name|n
parameter_list|,
name|node
modifier|*
name|first
parameter_list|,
name|node
modifier|*
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase_bucket
parameter_list|(
specifier|const
name|size_type
name|n
parameter_list|,
name|node
modifier|*
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|copy_from
parameter_list|(
specifier|const
name|hashtable
modifier|&
name|ht
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|A
operator|>
name|__hashtable_iterator
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|A
operator|>
operator|&
name|__hashtable_iterator
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|A
operator|>
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
specifier|const
name|node
operator|*
name|old
operator|=
name|cur
block|;
name|cur
operator|=
name|cur
operator|->
name|next
block|;
if|if
condition|(
operator|!
name|cur
condition|)
block|{
name|size_type
name|bucket
init|=
name|ht
operator|->
name|bkt_num
argument_list|(
name|old
operator|->
name|val
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|cur
operator|&&
operator|++
name|bucket
operator|<
name|ht
operator|->
name|buckets
operator|.
name|size
argument_list|()
condition|)
name|cur
operator|=
name|ht
operator|->
name|buckets
index|[
name|bucket
index|]
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|A
operator|>
specifier|inline
name|__hashtable_iterator
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|A
operator|>
name|__hashtable_iterator
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|A
operator|>
operator|::
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|A
operator|>
name|__hashtable_const_iterator
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|A
operator|>
operator|&
name|__hashtable_const_iterator
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|A
operator|>
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
specifier|const
name|node
operator|*
name|old
operator|=
name|cur
block|;
name|cur
operator|=
name|cur
operator|->
name|next
block|;
if|if
condition|(
operator|!
name|cur
condition|)
block|{
name|size_type
name|bucket
init|=
name|ht
operator|->
name|bkt_num
argument_list|(
name|old
operator|->
name|val
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|cur
operator|&&
operator|++
name|bucket
operator|<
name|ht
operator|->
name|buckets
operator|.
name|size
argument_list|()
condition|)
name|cur
operator|=
name|ht
operator|->
name|buckets
index|[
name|bucket
index|]
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|A
operator|>
specifier|inline
name|__hashtable_const_iterator
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|A
operator|>
name|__hashtable_const_iterator
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|A
operator|>
operator|::
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|All
operator|>
specifier|inline
name|forward_iterator_tag
name|iterator_category
argument_list|(
argument|const __hashtable_iterator<V
argument_list|,
argument|K
argument_list|,
argument|HF
argument_list|,
argument|ExK
argument_list|,
argument|EqK
argument_list|,
argument|All>&
argument_list|)
block|{
return|return
name|forward_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|All
operator|>
specifier|inline
name|V
operator|*
name|value_type
argument_list|(
argument|const __hashtable_iterator<V
argument_list|,
argument|K
argument_list|,
argument|HF
argument_list|,
argument|ExK
argument_list|,
argument|EqK
argument_list|,
argument|All>&
argument_list|)
block|{
return|return
operator|(
name|V
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|All
operator|>
specifier|inline
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|All
operator|>
operator|::
name|difference_type
operator|*
name|distance_type
argument_list|(
argument|const __hashtable_iterator<V
argument_list|,
argument|K
argument_list|,
argument|HF
argument_list|,
argument|ExK
argument_list|,
argument|EqK
argument_list|,
argument|All>&
argument_list|)
block|{
return|return
operator|(
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|All
operator|>
operator|::
name|difference_type
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|All
operator|>
specifier|inline
name|forward_iterator_tag
name|iterator_category
argument_list|(
argument|const __hashtable_const_iterator<V
argument_list|,
argument|K
argument_list|,
argument|HF
argument_list|,
argument|ExK
argument_list|,
argument|EqK
argument_list|,
argument|All>&
argument_list|)
block|{
return|return
name|forward_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|All
operator|>
specifier|inline
name|V
operator|*
name|value_type
argument_list|(
argument|const __hashtable_const_iterator<V
argument_list|,
argument|K
argument_list|,
argument|HF
argument_list|,
argument|ExK
argument_list|,
argument|EqK
argument_list|,
argument|All>&
argument_list|)
block|{
return|return
operator|(
name|V
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|ExK
operator|,
name|class
name|EqK
operator|,
name|class
name|All
operator|>
specifier|inline
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|All
operator|>
operator|::
name|difference_type
operator|*
name|distance_type
argument_list|(
argument|const __hashtable_const_iterator<V
argument_list|,
argument|K
argument_list|,
argument|HF
argument_list|,
argument|ExK
argument_list|,
argument|EqK
argument_list|,
argument|All>&
argument_list|)
block|{
return|return
operator|(
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|ExK
operator|,
name|EqK
operator|,
name|All
operator|>
operator|::
name|difference_type
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|&
name|ht1
operator|,
specifier|const
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|&
name|ht2
operator|)
block|{
typedef|typedef
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|node
name|node
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|ht1
operator|.
name|buckets
operator|.
name|size
argument_list|()
operator|!=
name|ht2
operator|.
name|buckets
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
end_if

begin_for
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|ht1
operator|.
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|n
control|)
block|{
name|node
modifier|*
name|cur1
init|=
name|ht1
operator|.
name|buckets
index|[
name|n
index|]
decl_stmt|;
name|node
modifier|*
name|cur2
init|=
name|ht2
operator|.
name|buckets
index|[
name|n
index|]
decl_stmt|;
for|for
control|(
init|;
name|cur1
operator|&&
name|cur2
operator|&&
name|cur1
operator|->
name|val
operator|==
name|cur2
operator|->
name|val
condition|;
name|cur1
operator|=
name|cur1
operator|->
name|next
operator|,
name|cur2
operator|=
name|cur2
operator|->
name|next
control|)
block|{}
if|if
condition|(
name|cur1
operator|||
name|cur2
condition|)
return|return
name|false
return|;
block|}
end_for

begin_return
return|return
name|true
return|;
end_return

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|Val
operator|,
name|class
name|Key
operator|,
name|class
name|HF
operator|,
name|class
name|Extract
operator|,
name|class
name|EqKey
operator|,
name|class
name|A
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|hashtable<Val
argument_list|,
argument|Key
argument_list|,
argument|HF
argument_list|,
argument|Extract
argument_list|,
argument|EqKey
argument_list|,
argument|A>& ht1
argument_list|,
argument|hashtable<Val
argument_list|,
argument|Key
argument_list|,
argument|HF
argument_list|,
argument|Extract
argument_list|,
argument|EqKey
argument_list|,
argument|A>& ht2
argument_list|)
block|{
name|ht1
operator|.
name|swap
argument_list|(
name|ht2
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_FUNCTION_TMPL_PARTIAL_ORDER */
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|pair
operator|<
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|iterator
operator|,
name|bool
operator|>
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|insert_unique_noresize
argument_list|(
argument|const value_type& obj
argument_list|)
block|{
specifier|const
name|size_type
name|n
operator|=
name|bkt_num
argument_list|(
name|obj
argument_list|)
block|;
name|node
operator|*
name|first
operator|=
name|buckets
index|[
name|n
index|]
block|;
for|for
control|(
name|node
modifier|*
name|cur
init|=
name|first
init|;
name|cur
condition|;
name|cur
operator|=
name|cur
operator|->
name|next
control|)
if|if
condition|(
name|equals
argument_list|(
name|get_key
argument_list|(
name|cur
operator|->
name|val
argument_list|)
argument_list|,
name|get_key
argument_list|(
name|obj
argument_list|)
argument_list|)
condition|)
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|iterator
argument_list|(
name|cur
argument_list|,
name|this
argument_list|)
operator|,
name|false
operator|)
return|;
name|node
operator|*
name|tmp
operator|=
name|new_node
argument_list|(
name|obj
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|tmp
operator|->
name|next
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|buckets
index|[
name|n
index|]
operator|=
name|tmp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|num_elements
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|iterator
argument_list|(
name|tmp
argument_list|,
name|this
argument_list|)
operator|,
name|true
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|iterator
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|insert_equal_noresize
argument_list|(
argument|const value_type& obj
argument_list|)
block|{
specifier|const
name|size_type
name|n
operator|=
name|bkt_num
argument_list|(
name|obj
argument_list|)
block|;
name|node
operator|*
name|first
operator|=
name|buckets
index|[
name|n
index|]
block|;
for|for
control|(
name|node
modifier|*
name|cur
init|=
name|first
init|;
name|cur
condition|;
name|cur
operator|=
name|cur
operator|->
name|next
control|)
if|if
condition|(
name|equals
argument_list|(
name|get_key
argument_list|(
name|cur
operator|->
name|val
argument_list|)
argument_list|,
name|get_key
argument_list|(
name|obj
argument_list|)
argument_list|)
condition|)
block|{
name|node
modifier|*
name|tmp
init|=
name|new_node
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|tmp
operator|->
name|next
operator|=
name|cur
operator|->
name|next
expr_stmt|;
name|cur
operator|->
name|next
operator|=
name|tmp
expr_stmt|;
operator|++
name|num_elements
expr_stmt|;
return|return
name|iterator
argument_list|(
name|tmp
argument_list|,
name|this
argument_list|)
return|;
block|}
name|node
operator|*
name|tmp
operator|=
name|new_node
argument_list|(
name|obj
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|tmp
operator|->
name|next
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|buckets
index|[
name|n
index|]
operator|=
name|tmp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|num_elements
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|iterator
argument_list|(
name|tmp
argument_list|,
name|this
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|reference
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|find_or_insert
argument_list|(
argument|const value_type& obj
argument_list|)
block|{
name|resize
argument_list|(
name|num_elements
operator|+
literal|1
argument_list|)
block|;
name|size_type
name|n
operator|=
name|bkt_num
argument_list|(
name|obj
argument_list|)
block|;
name|node
operator|*
name|first
operator|=
name|buckets
index|[
name|n
index|]
block|;
for|for
control|(
name|node
modifier|*
name|cur
init|=
name|first
init|;
name|cur
condition|;
name|cur
operator|=
name|cur
operator|->
name|next
control|)
if|if
condition|(
name|equals
argument_list|(
name|get_key
argument_list|(
name|cur
operator|->
name|val
argument_list|)
argument_list|,
name|get_key
argument_list|(
name|obj
argument_list|)
argument_list|)
condition|)
return|return
name|cur
operator|->
name|val
return|;
name|node
operator|*
name|tmp
operator|=
name|new_node
argument_list|(
name|obj
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|tmp
operator|->
name|next
operator|=
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|buckets
index|[
name|n
index|]
operator|=
name|tmp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|num_elements
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|tmp
operator|->
name|val
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|pair
operator|<
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|iterator
operator|,
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|iterator
operator|>
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|equal_range
argument_list|(
argument|const key_type& key
argument_list|)
block|{
typedef|typedef
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|pii
expr_stmt|;
specifier|const
name|size_type
name|n
operator|=
name|bkt_num_key
argument_list|(
name|key
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|node
modifier|*
name|first
init|=
name|buckets
index|[
name|n
index|]
init|;
name|first
condition|;
name|first
operator|=
name|first
operator|->
name|next
control|)
block|{
if|if
condition|(
name|equals
argument_list|(
name|get_key
argument_list|(
name|first
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
condition|)
block|{
for|for
control|(
name|node
modifier|*
name|cur
init|=
name|first
operator|->
name|next
init|;
name|cur
condition|;
name|cur
operator|=
name|cur
operator|->
name|next
control|)
if|if
condition|(
operator|!
name|equals
argument_list|(
name|get_key
argument_list|(
name|cur
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
condition|)
return|return
name|pii
argument_list|(
name|iterator
argument_list|(
name|first
argument_list|,
name|this
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|cur
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
for|for
control|(
name|size_type
name|m
init|=
name|n
operator|+
literal|1
init|;
name|m
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|m
control|)
if|if
condition|(
name|buckets
index|[
name|m
index|]
condition|)
return|return
name|pii
argument_list|(
name|iterator
argument_list|(
name|first
argument_list|,
name|this
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|buckets
index|[
name|m
index|]
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
return|return
name|pii
argument_list|(
name|iterator
argument_list|(
name|first
argument_list|,
name|this
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
block|}
block|}
end_for

begin_return
return|return
name|pii
argument_list|(
name|end
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|pair
operator|<
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|const_iterator
operator|,
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|const_iterator
operator|>
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|equal_range
argument_list|(
argument|const key_type& key
argument_list|)
specifier|const
block|{
typedef|typedef
name|pair
operator|<
name|const_iterator
operator|,
name|const_iterator
operator|>
name|pii
expr_stmt|;
specifier|const
name|size_type
name|n
operator|=
name|bkt_num_key
argument_list|(
name|key
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
specifier|const
name|node
modifier|*
name|first
init|=
name|buckets
index|[
name|n
index|]
init|;
name|first
condition|;
name|first
operator|=
name|first
operator|->
name|next
control|)
block|{
if|if
condition|(
name|equals
argument_list|(
name|get_key
argument_list|(
name|first
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
condition|)
block|{
for|for
control|(
specifier|const
name|node
modifier|*
name|cur
init|=
name|first
operator|->
name|next
init|;
name|cur
condition|;
name|cur
operator|=
name|cur
operator|->
name|next
control|)
if|if
condition|(
operator|!
name|equals
argument_list|(
name|get_key
argument_list|(
name|cur
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
condition|)
return|return
name|pii
argument_list|(
name|const_iterator
argument_list|(
name|first
argument_list|,
name|this
argument_list|)
argument_list|,
name|const_iterator
argument_list|(
name|cur
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
for|for
control|(
name|size_type
name|m
init|=
name|n
operator|+
literal|1
init|;
name|m
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|m
control|)
if|if
condition|(
name|buckets
index|[
name|m
index|]
condition|)
return|return
name|pii
argument_list|(
name|const_iterator
argument_list|(
name|first
argument_list|,
name|this
argument_list|)
argument_list|,
name|const_iterator
argument_list|(
name|buckets
index|[
name|m
index|]
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
return|return
name|pii
argument_list|(
name|const_iterator
argument_list|(
name|first
argument_list|,
name|this
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
block|}
block|}
end_for

begin_return
return|return
name|pii
argument_list|(
name|end
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|typename
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|size_type
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|erase
argument_list|(
argument|const key_type& key
argument_list|)
block|{
specifier|const
name|size_type
name|n
operator|=
name|bkt_num_key
argument_list|(
name|key
argument_list|)
block|;
name|node
operator|*
name|first
operator|=
name|buckets
index|[
name|n
index|]
block|;
name|size_type
name|erased
operator|=
literal|0
block|;
if|if
condition|(
name|first
condition|)
block|{
name|node
modifier|*
name|cur
init|=
name|first
decl_stmt|;
name|node
modifier|*
name|next
init|=
name|cur
operator|->
name|next
decl_stmt|;
while|while
condition|(
name|next
condition|)
block|{
if|if
condition|(
name|equals
argument_list|(
name|get_key
argument_list|(
name|next
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
condition|)
block|{
name|cur
operator|->
name|next
operator|=
name|next
operator|->
name|next
expr_stmt|;
name|delete_node
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|cur
operator|->
name|next
expr_stmt|;
operator|++
name|erased
expr_stmt|;
operator|--
name|num_elements
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|cur
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|cur
operator|->
name|next
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     if
operator|(
name|equals
argument_list|(
name|get_key
argument_list|(
name|first
operator|->
name|val
argument_list|)
argument_list|,
name|key
argument_list|)
operator|)
block|{
name|buckets
index|[
name|n
index|]
operator|=
name|first
operator|->
name|next
block|;
name|delete_node
argument_list|(
name|first
argument_list|)
block|;
operator|++
name|erased
block|;
operator|--
name|num_elements
block|;     }
end_expr_stmt

begin_expr_stmt
unit|}   return
name|erased
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|erase
argument_list|(
argument|const iterator& it
argument_list|)
block|{
if|if
condition|(
name|node
modifier|*
specifier|const
name|p
init|=
name|it
operator|.
name|cur
condition|)
block|{
specifier|const
name|size_type
name|n
init|=
name|bkt_num
argument_list|(
name|p
operator|->
name|val
argument_list|)
decl_stmt|;
name|node
modifier|*
name|cur
init|=
name|buckets
index|[
name|n
index|]
decl_stmt|;
if|if
condition|(
name|cur
operator|==
name|p
condition|)
block|{
name|buckets
index|[
name|n
index|]
operator|=
name|cur
operator|->
name|next
expr_stmt|;
name|delete_node
argument_list|(
name|cur
argument_list|)
expr_stmt|;
operator|--
name|num_elements
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|node
modifier|*
name|next
init|=
name|cur
operator|->
name|next
decl_stmt|;
while|while
condition|(
name|next
condition|)
block|{
if|if
condition|(
name|next
operator|==
name|p
condition|)
block|{
name|cur
operator|->
name|next
operator|=
name|next
operator|->
name|next
expr_stmt|;
name|delete_node
argument_list|(
name|next
argument_list|)
expr_stmt|;
operator|--
name|num_elements
expr_stmt|;
break|break;
block|}
else|else
block|{
name|cur
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|cur
operator|->
name|next
expr_stmt|;
block|}
block|}
block|}
end_else

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|erase
argument_list|(
argument|iterator first
argument_list|,
argument|iterator last
argument_list|)
block|{
name|size_type
name|f_bucket
operator|=
name|first
operator|.
name|cur
operator|?
name|bkt_num
argument_list|(
name|first
operator|.
name|cur
operator|->
name|val
argument_list|)
operator|:
name|buckets
operator|.
name|size
argument_list|()
block|;
name|size_type
name|l_bucket
operator|=
name|last
operator|.
name|cur
condition|?
name|bkt_num
argument_list|(
name|last
operator|.
name|cur
operator|->
name|val
argument_list|)
else|:
name|buckets
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|first
operator|.
name|cur
operator|==
name|last
operator|.
name|cur
condition|)
return|return;
elseif|else
if|if
condition|(
name|f_bucket
operator|==
name|l_bucket
condition|)
name|erase_bucket
argument_list|(
name|f_bucket
argument_list|,
name|first
operator|.
name|cur
argument_list|,
name|last
operator|.
name|cur
argument_list|)
expr_stmt|;
else|else
block|{
name|erase_bucket
argument_list|(
name|f_bucket
argument_list|,
name|first
operator|.
name|cur
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|size_type
name|n
init|=
name|f_bucket
operator|+
literal|1
init|;
name|n
operator|<
name|l_bucket
condition|;
operator|++
name|n
control|)
name|erase_bucket
argument_list|(
name|n
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|l_bucket
operator|!=
name|buckets
operator|.
name|size
argument_list|()
condition|)
name|erase_bucket
argument_list|(
name|l_bucket
argument_list|,
name|last
operator|.
name|cur
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
specifier|inline
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|erase
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
name|erase
argument_list|(
name|iterator
argument_list|(
name|const_cast
operator|<
name|node
operator|*
operator|>
operator|(
name|first
operator|.
name|cur
operator|)
argument_list|,
name|const_cast
operator|<
name|hashtable
operator|*
operator|>
operator|(
name|first
operator|.
name|ht
operator|)
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|const_cast
operator|<
name|node
operator|*
operator|>
operator|(
name|last
operator|.
name|cur
operator|)
argument_list|,
name|const_cast
operator|<
name|hashtable
operator|*
operator|>
operator|(
name|last
operator|.
name|ht
operator|)
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
specifier|inline
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|erase
argument_list|(
argument|const const_iterator& it
argument_list|)
block|{
name|erase
argument_list|(
name|iterator
argument_list|(
name|const_cast
operator|<
name|node
operator|*
operator|>
operator|(
name|it
operator|.
name|cur
operator|)
argument_list|,
name|const_cast
operator|<
name|hashtable
operator|*
operator|>
operator|(
name|it
operator|.
name|ht
operator|)
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|resize
argument_list|(
argument|size_type num_elements_hint
argument_list|)
block|{
specifier|const
name|size_type
name|old_n
operator|=
name|buckets
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|num_elements_hint
operator|>
name|old_n
condition|)
block|{
specifier|const
name|size_type
name|n
init|=
name|next_size
argument_list|(
name|num_elements_hint
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|>
name|old_n
condition|)
block|{
name|vector
operator|<
name|node
operator|*
operator|,
name|A
operator|>
name|tmp
argument_list|(
name|n
argument_list|,
operator|(
name|node
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|__STL_TRY
block|{
for|for
control|(
name|size_type
name|bucket
init|=
literal|0
init|;
name|bucket
operator|<
name|old_n
condition|;
operator|++
name|bucket
control|)
block|{
name|node
modifier|*
name|first
init|=
name|buckets
index|[
name|bucket
index|]
decl_stmt|;
while|while
condition|(
name|first
condition|)
block|{
name|size_type
name|new_bucket
init|=
name|bkt_num
argument_list|(
name|first
operator|->
name|val
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|buckets
index|[
name|bucket
index|]
operator|=
name|first
operator|->
name|next
expr_stmt|;
name|first
operator|->
name|next
operator|=
name|tmp
index|[
name|new_bucket
index|]
expr_stmt|;
name|tmp
index|[
name|new_bucket
index|]
operator|=
name|first
expr_stmt|;
name|first
operator|=
name|buckets
index|[
name|bucket
index|]
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}         buckets
operator|.
name|swap
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
end_ifdef

begin_expr_stmt
unit|catch
operator|(
operator|...
operator|)
block|{
for|for
control|(
name|size_type
name|bucket
init|=
literal|0
init|;
name|bucket
operator|<
name|tmp
operator|.
name|size
argument_list|()
condition|;
operator|++
name|bucket
control|)
block|{
while|while
condition|(
name|tmp
index|[
name|bucket
index|]
condition|)
block|{
name|node
modifier|*
name|next
init|=
name|tmp
index|[
name|bucket
index|]
operator|->
name|next
decl_stmt|;
name|delete_node
argument_list|(
name|tmp
index|[
name|bucket
index|]
argument_list|)
expr_stmt|;
name|tmp
index|[
name|bucket
index|]
operator|=
name|next
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
unit|}         throw
empty_stmt|;
end_empty_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_EXCEPTIONS */
end_comment

begin_expr_stmt
unit|}   } }
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|erase_bucket
argument_list|(
argument|const size_type n
argument_list|,
argument|node* first
argument_list|,
argument|node* last
argument_list|)
block|{
name|node
operator|*
name|cur
operator|=
name|buckets
index|[
name|n
index|]
block|;
if|if
condition|(
name|cur
operator|==
name|first
condition|)
name|erase_bucket
argument_list|(
name|n
argument_list|,
name|last
argument_list|)
expr_stmt|;
else|else
block|{
name|node
modifier|*
name|next
decl_stmt|;
for|for
control|(
name|next
operator|=
name|cur
operator|->
name|next
init|;
name|next
operator|!=
name|first
condition|;
name|cur
operator|=
name|next
operator|,
name|next
operator|=
name|cur
operator|->
name|next
control|)
empty_stmt|;
while|while
condition|(
name|next
condition|)
block|{
name|cur
operator|->
name|next
operator|=
name|next
operator|->
name|next
expr_stmt|;
name|delete_node
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|next
operator|=
name|cur
operator|->
name|next
expr_stmt|;
operator|--
name|num_elements
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|erase_bucket
argument_list|(
argument|const size_type n
argument_list|,
argument|node* last
argument_list|)
block|{
name|node
operator|*
name|cur
operator|=
name|buckets
index|[
name|n
index|]
block|;
while|while
condition|(
name|cur
operator|!=
name|last
condition|)
block|{
name|node
modifier|*
name|next
init|=
name|cur
operator|->
name|next
decl_stmt|;
name|delete_node
argument_list|(
name|cur
argument_list|)
expr_stmt|;
name|cur
operator|=
name|next
expr_stmt|;
name|buckets
index|[
name|n
index|]
operator|=
name|cur
expr_stmt|;
operator|--
name|num_elements
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|clear
argument_list|()
block|{
for|for
control|(
name|size_type
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|node
modifier|*
name|cur
init|=
name|buckets
index|[
name|i
index|]
decl_stmt|;
while|while
condition|(
name|cur
operator|!=
literal|0
condition|)
block|{
name|node
modifier|*
name|next
init|=
name|cur
operator|->
name|next
decl_stmt|;
name|delete_node
argument_list|(
name|cur
argument_list|)
expr_stmt|;
name|cur
operator|=
name|next
expr_stmt|;
block|}
name|buckets
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   num_elements
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}       template
operator|<
name|class
name|V
operator|,
name|class
name|K
operator|,
name|class
name|HF
operator|,
name|class
name|Ex
operator|,
name|class
name|Eq
operator|,
name|class
name|A
operator|>
name|void
name|hashtable
operator|<
name|V
operator|,
name|K
operator|,
name|HF
operator|,
name|Ex
operator|,
name|Eq
operator|,
name|A
operator|>
operator|::
name|copy_from
argument_list|(
argument|const hashtable& ht
argument_list|)
block|{
name|buckets
operator|.
name|clear
argument_list|()
block|;
name|buckets
operator|.
name|reserve
argument_list|(
name|ht
operator|.
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|buckets
operator|.
name|insert
argument_list|(
name|buckets
operator|.
name|end
argument_list|()
argument_list|,
name|ht
operator|.
name|buckets
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|node
operator|*
operator|)
literal|0
argument_list|)
block|;
name|__STL_TRY
block|{
for|for
control|(
name|size_type
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ht
operator|.
name|buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
specifier|const
name|node
modifier|*
name|cur
init|=
name|ht
operator|.
name|buckets
index|[
name|i
index|]
condition|)
block|{
name|node
modifier|*
name|copy
init|=
name|new_node
argument_list|(
name|cur
operator|->
name|val
argument_list|)
decl_stmt|;
name|buckets
index|[
name|i
index|]
operator|=
name|copy
expr_stmt|;
for|for
control|(
name|node
modifier|*
name|next
init|=
name|cur
operator|->
name|next
init|;
name|next
condition|;
name|cur
operator|=
name|next
operator|,
name|next
operator|=
name|cur
operator|->
name|next
control|)
block|{
name|copy
operator|->
name|next
operator|=
name|new_node
argument_list|(
name|next
operator|->
name|val
argument_list|)
expr_stmt|;
name|copy
operator|=
name|copy
operator|->
name|next
expr_stmt|;
block|}
block|}
end_expr_stmt

begin_expr_stmt
unit|}     num_elements
operator|=
name|ht
operator|.
name|num_elements
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   __STL_UNWIND
operator|(
name|clear
argument_list|()
operator|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|}  __STL_END_NAMESPACE
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_HASHTABLE_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

