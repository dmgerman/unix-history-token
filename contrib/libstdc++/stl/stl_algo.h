begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_ALGO_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_ALGO_H
end_define

begin_include
include|#
directive|include
file|<stl_heap.h>
end_include

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|set
name|woff
name|1209
endif|#
directive|endif
comment|// __median (an extension, not present in the C++ standard).
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
specifier|const
name|_Tp
operator|&
name|__median
argument_list|(
argument|const _Tp& __a
argument_list|,
argument|const _Tp& __b
argument_list|,
argument|const _Tp& __c
argument_list|)
block|{
if|if
condition|(
name|__a
operator|<
name|__b
condition|)
if|if
condition|(
name|__b
operator|<
name|__c
condition|)
return|return
name|__b
return|;
elseif|else
if|if
condition|(
name|__a
operator|<
name|__c
condition|)
return|return
name|__c
return|;
else|else
return|return
name|__a
return|;
elseif|else
if|if
condition|(
name|__a
operator|<
name|__c
condition|)
return|return
name|__a
return|;
elseif|else
if|if
condition|(
name|__b
operator|<
name|__c
condition|)
return|return
name|__c
return|;
else|else
return|return
name|__b
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
specifier|inline
specifier|const
name|_Tp
operator|&
name|__median
argument_list|(
argument|const _Tp& __a
argument_list|,
argument|const _Tp& __b
argument_list|,
argument|const _Tp& __c
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__comp
argument_list|(
name|__a
argument_list|,
name|__b
argument_list|)
condition|)
if|if
condition|(
name|__comp
argument_list|(
name|__b
argument_list|,
name|__c
argument_list|)
condition|)
return|return
name|__b
return|;
elseif|else
if|if
condition|(
name|__comp
argument_list|(
name|__a
argument_list|,
name|__c
argument_list|)
condition|)
return|return
name|__c
return|;
else|else
return|return
name|__a
return|;
elseif|else
if|if
condition|(
name|__comp
argument_list|(
name|__a
argument_list|,
name|__c
argument_list|)
condition|)
return|return
name|__a
return|;
elseif|else
if|if
condition|(
name|__comp
argument_list|(
name|__b
argument_list|,
name|__c
argument_list|)
condition|)
return|return
name|__c
return|;
else|else
return|return
name|__b
return|;
block|}
end_expr_stmt

begin_comment
comment|// for_each.  Apply a function to every element of a range.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Function
operator|>
name|_Function
name|for_each
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_Function __f
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
name|__f
argument_list|(
operator|*
name|__first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__f
return|;
end_return

begin_comment
unit|}
comment|// find and find_if.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|_InputIter
name|find
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
operator|&&
operator|*
name|__first
operator|!=
name|__val
condition|)
operator|++
name|__first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__first
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Predicate
operator|>
specifier|inline
name|_InputIter
name|find_if
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
operator|&&
operator|!
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
operator|++
name|__first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__first
return|;
end_return

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|>
name|_RandomAccessIter
name|find
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|typename
name|iterator_traits
operator|<
name|_RandomAccessIter
operator|>
operator|::
name|difference_type
name|__trip_count
operator|=
operator|(
name|__last
operator|-
name|__first
operator|)
operator|>>
literal|2
block|;
for|for
control|(
init|;
name|__trip_count
operator|>
literal|0
condition|;
operator|--
name|__trip_count
control|)
block|{
if|if
condition|(
operator|*
name|__first
operator|==
name|__val
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
if|if
condition|(
operator|*
name|__first
operator|==
name|__val
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
if|if
condition|(
operator|*
name|__first
operator|==
name|__val
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
if|if
condition|(
operator|*
name|__first
operator|==
name|__val
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
block|}
end_expr_stmt

begin_switch
switch|switch
condition|(
name|__last
operator|-
name|__first
condition|)
block|{
case|case
literal|3
case|:
if|if
condition|(
operator|*
name|__first
operator|==
name|__val
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
case|case
literal|2
case|:
if|if
condition|(
operator|*
name|__first
operator|==
name|__val
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
case|case
literal|1
case|:
if|if
condition|(
operator|*
name|__first
operator|==
name|__val
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
case|case
literal|0
case|:
default|default:
return|return
name|__last
return|;
block|}
end_switch

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Predicate
operator|>
name|_RandomAccessIter
name|find_if
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|typename
name|iterator_traits
operator|<
name|_RandomAccessIter
operator|>
operator|::
name|difference_type
name|__trip_count
operator|=
operator|(
name|__last
operator|-
name|__first
operator|)
operator|>>
literal|2
block|;
for|for
control|(
init|;
name|__trip_count
operator|>
literal|0
condition|;
operator|--
name|__trip_count
control|)
block|{
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
block|}
end_expr_stmt

begin_switch
switch|switch
condition|(
name|__last
operator|-
name|__first
condition|)
block|{
case|case
literal|3
case|:
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
case|case
literal|2
case|:
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
case|case
literal|1
case|:
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
return|return
name|__first
return|;
operator|++
name|__first
expr_stmt|;
case|case
literal|0
case|:
default|default:
return|return
name|__last
return|;
block|}
end_switch

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|_InputIter
name|find
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|const _Tp& __val
argument_list|)
block|{
return|return
name|find
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Predicate
operator|>
specifier|inline
name|_InputIter
name|find_if
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_Predicate __pred
argument_list|)
block|{
return|return
name|find_if
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pred
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// adjacent_find.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|>
name|_ForwardIter
name|adjacent_find
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__last
return|;
name|_ForwardIter
name|__next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|__next
operator|!=
name|__last
condition|)
block|{
if|if
condition|(
operator|*
name|__first
operator|==
operator|*
name|__next
condition|)
return|return
name|__first
return|;
name|__first
operator|=
name|__next
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__last
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_BinaryPredicate
operator|>
name|_ForwardIter
name|adjacent_find
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_BinaryPredicate __binary_pred
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__last
return|;
name|_ForwardIter
name|__next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|__next
operator|!=
name|__last
condition|)
block|{
if|if
condition|(
name|__binary_pred
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
name|__next
argument_list|)
condition|)
return|return
name|__first
return|;
name|__first
operator|=
name|__next
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__last
return|;
end_return

begin_comment
unit|}
comment|// count and count_if.  There are two version of each, one whose return type
end_comment

begin_comment
comment|// type is void and one (present only if we have partial specialization)
end_comment

begin_comment
comment|// whose return type is iterator_traits<_InputIter>::difference_type.  The
end_comment

begin_comment
comment|// C++ standard only has the latter version, but the former, which was present
end_comment

begin_comment
comment|// in the HP STL, is retained for backward compatibility.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Size
operator|>
name|void
name|count
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|const _Tp& __value
argument_list|,
argument|_Size& __n
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
operator|*
name|__first
operator|==
name|__value
condition|)
operator|++
name|__n
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Predicate
operator|,
name|class
name|_Size
operator|>
name|void
name|count_if
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|_Size& __n
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
operator|++
name|__n
expr_stmt|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Tp
operator|>
name|typename
name|iterator_traits
operator|<
name|_InputIter
operator|>
operator|::
name|difference_type
name|count
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|const _Tp& __value
argument_list|)
block|{
name|typename
name|iterator_traits
operator|<
name|_InputIter
operator|>
operator|::
name|difference_type
name|__n
operator|=
literal|0
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
operator|*
name|__first
operator|==
name|__value
condition|)
operator|++
name|__n
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__n
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Predicate
operator|>
name|typename
name|iterator_traits
operator|<
name|_InputIter
operator|>
operator|::
name|difference_type
name|count_if
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_Predicate __pred
argument_list|)
block|{
name|typename
name|iterator_traits
operator|<
name|_InputIter
operator|>
operator|::
name|difference_type
name|__n
operator|=
literal|0
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
operator|++
name|__n
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__n
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_comment
comment|// search.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_ForwardIter1
operator|,
name|class
name|_ForwardIter2
operator|>
name|_ForwardIter1
name|search
argument_list|(
argument|_ForwardIter1 __first1
argument_list|,
argument|_ForwardIter1 __last1
argument_list|,
argument|_ForwardIter2 __first2
argument_list|,
argument|_ForwardIter2 __last2
argument_list|)
block|{
comment|// Test for empty ranges
if|if
condition|(
name|__first1
operator|==
name|__last1
operator|||
name|__first2
operator|==
name|__last2
condition|)
return|return
name|__first1
return|;
comment|// Test for a pattern of length 1.
name|_ForwardIter2
name|__tmp
argument_list|(
name|__first2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__tmp
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__tmp
operator|==
name|__last2
condition|)
return|return
name|find
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
operator|*
name|__first2
argument_list|)
return|;
end_if

begin_comment
comment|// General case.
end_comment

begin_decl_stmt
name|_ForwardIter2
name|__p1
decl_stmt|,
name|__p
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__p1
operator|=
name|__first2
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__p1
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_ForwardIter1
name|__current
init|=
name|__first1
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|__first1
operator|!=
name|__last1
condition|)
block|{
name|__first1
operator|=
name|find
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
operator|*
name|__first2
argument_list|)
expr_stmt|;
if|if
condition|(
name|__first1
operator|==
name|__last1
condition|)
return|return
name|__last1
return|;
name|__p
operator|=
name|__p1
expr_stmt|;
name|__current
operator|=
name|__first1
expr_stmt|;
if|if
condition|(
operator|++
name|__current
operator|==
name|__last1
condition|)
return|return
name|__last1
return|;
while|while
condition|(
operator|*
name|__current
operator|==
operator|*
name|__p
condition|)
block|{
if|if
condition|(
operator|++
name|__p
operator|==
name|__last2
condition|)
return|return
name|__first1
return|;
if|if
condition|(
operator|++
name|__current
operator|==
name|__last1
condition|)
return|return
name|__last1
return|;
block|}
operator|++
name|__first1
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__first1
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter1
operator|,
name|class
name|_ForwardIter2
operator|,
name|class
name|_BinaryPred
operator|>
name|_ForwardIter1
name|search
argument_list|(
argument|_ForwardIter1 __first1
argument_list|,
argument|_ForwardIter1 __last1
argument_list|,
argument|_ForwardIter2 __first2
argument_list|,
argument|_ForwardIter2 __last2
argument_list|,
argument|_BinaryPred  __predicate
argument_list|)
block|{
comment|// Test for empty ranges
if|if
condition|(
name|__first1
operator|==
name|__last1
operator|||
name|__first2
operator|==
name|__last2
condition|)
return|return
name|__first1
return|;
comment|// Test for a pattern of length 1.
name|_ForwardIter2
name|__tmp
argument_list|(
name|__first2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__tmp
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__tmp
operator|==
name|__last2
condition|)
return|return
name|find
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
operator|*
name|__first2
argument_list|)
return|;
end_if

begin_comment
comment|// General case.
end_comment

begin_decl_stmt
name|_ForwardIter2
name|__p1
decl_stmt|,
name|__p
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__p1
operator|=
name|__first2
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__p1
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_ForwardIter1
name|__current
init|=
name|__first1
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|__first1
operator|!=
name|__last1
condition|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
condition|)
block|{
if|if
condition|(
name|__predicate
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__first2
argument_list|)
condition|)
break|break;
operator|++
name|__first1
expr_stmt|;
block|}
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
operator|!
name|__predicate
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__first2
argument_list|)
condition|)
operator|++
name|__first1
expr_stmt|;
if|if
condition|(
name|__first1
operator|==
name|__last1
condition|)
return|return
name|__last1
return|;
name|__p
operator|=
name|__p1
expr_stmt|;
name|__current
operator|=
name|__first1
expr_stmt|;
if|if
condition|(
operator|++
name|__current
operator|==
name|__last1
condition|)
return|return
name|__last1
return|;
while|while
condition|(
name|__predicate
argument_list|(
operator|*
name|__current
argument_list|,
operator|*
name|__p
argument_list|)
condition|)
block|{
if|if
condition|(
operator|++
name|__p
operator|==
name|__last2
condition|)
return|return
name|__first1
return|;
if|if
condition|(
operator|++
name|__current
operator|==
name|__last1
condition|)
return|return
name|__last1
return|;
block|}
operator|++
name|__first1
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__first1
return|;
end_return

begin_comment
unit|}
comment|// search_n.  Search for __count consecutive copies of __val.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Integer
operator|,
name|class
name|_Tp
operator|>
name|_ForwardIter
name|search_n
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Integer __count
argument_list|,
argument|const _Tp& __val
argument_list|)
block|{
if|if
condition|(
name|__count
operator|<=
literal|0
condition|)
return|return
name|__first
return|;
else|else
block|{
name|__first
operator|=
name|find
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|)
expr_stmt|;
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|_Integer
name|__n
init|=
name|__count
operator|-
literal|1
decl_stmt|;
name|_ForwardIter
name|__i
init|=
name|__first
decl_stmt|;
operator|++
name|__i
expr_stmt|;
while|while
condition|(
name|__i
operator|!=
name|__last
operator|&&
name|__n
operator|!=
literal|0
operator|&&
operator|*
name|__i
operator|==
name|__val
condition|)
block|{
operator|++
name|__i
expr_stmt|;
operator|--
name|__n
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__n
operator|==
literal|0
condition|)
return|return
name|__first
return|;
else|else
name|__first
operator|=
name|find
argument_list|(
name|__i
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}     return
name|__last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Integer
operator|,
name|class
name|_Tp
operator|,
name|class
name|_BinaryPred
operator|>
name|_ForwardIter
name|search_n
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Integer __count
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_BinaryPred __binary_pred
argument_list|)
block|{
if|if
condition|(
name|__count
operator|<=
literal|0
condition|)
return|return
name|__first
return|;
else|else
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
if|if
condition|(
name|__binary_pred
argument_list|(
operator|*
name|__first
argument_list|,
name|__val
argument_list|)
condition|)
break|break;
operator|++
name|__first
expr_stmt|;
block|}
end_expr_stmt

begin_while
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|_Integer
name|__n
init|=
name|__count
operator|-
literal|1
decl_stmt|;
name|_ForwardIter
name|__i
init|=
name|__first
decl_stmt|;
operator|++
name|__i
expr_stmt|;
while|while
condition|(
name|__i
operator|!=
name|__last
operator|&&
name|__n
operator|!=
literal|0
operator|&&
name|__binary_pred
argument_list|(
operator|*
name|__i
argument_list|,
name|__val
argument_list|)
condition|)
block|{
operator|++
name|__i
expr_stmt|;
operator|--
name|__n
expr_stmt|;
block|}
if|if
condition|(
name|__n
operator|==
literal|0
condition|)
return|return
name|__first
return|;
else|else
block|{
while|while
condition|(
name|__i
operator|!=
name|__last
condition|)
block|{
if|if
condition|(
name|__binary_pred
argument_list|(
operator|*
name|__i
argument_list|,
name|__val
argument_list|)
condition|)
break|break;
operator|++
name|__i
expr_stmt|;
block|}
name|__first
operator|=
name|__i
expr_stmt|;
block|}
block|}
end_while

begin_return
return|return
name|__last
return|;
end_return

begin_comment
unit|} }
comment|// swap_ranges
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter1
operator|,
name|class
name|_ForwardIter2
operator|>
name|_ForwardIter2
name|swap_ranges
argument_list|(
argument|_ForwardIter1 __first1
argument_list|,
argument|_ForwardIter1 __last1
argument_list|,
argument|_ForwardIter2 __first2
argument_list|)
block|{
for|for
control|(
init|;
name|__first1
operator|!=
name|__last1
condition|;
operator|++
name|__first1
operator|,
operator|++
name|__first2
control|)
name|iter_swap
argument_list|(
name|__first1
argument_list|,
name|__first2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__first2
return|;
end_return

begin_comment
unit|}
comment|// transform
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_UnaryOperation
operator|>
name|_OutputIter
name|transform
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_UnaryOperation __oper
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
operator|,
operator|++
name|__result
control|)
operator|*
name|__result
operator|=
name|__oper
argument_list|(
operator|*
name|__first
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_BinaryOperation
operator|>
name|_OutputIter
name|transform
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_BinaryOperation __binary_op
argument_list|)
block|{
for|for
control|(
init|;
name|__first1
operator|!=
name|__last1
condition|;
operator|++
name|__first1
operator|,
operator|++
name|__first2
operator|,
operator|++
name|__result
control|)
operator|*
name|__result
operator|=
name|__binary_op
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__first2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_comment
unit|}
comment|// replace, replace_if, replace_copy, replace_copy_if
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|>
name|void
name|replace
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __old_value
argument_list|,
argument|const _Tp& __new_value
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
operator|*
name|__first
operator|==
name|__old_value
condition|)
operator|*
name|__first
operator|=
name|__new_value
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Predicate
operator|,
name|class
name|_Tp
operator|>
name|void
name|replace_if
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|const _Tp& __new_value
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
operator|*
name|__first
operator|=
name|__new_value
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Tp
operator|>
name|_OutputIter
name|replace_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|const _Tp& __old_value
argument_list|,
argument|const _Tp& __new_value
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
operator|,
operator|++
name|__result
control|)
operator|*
name|__result
operator|=
operator|*
name|__first
operator|==
name|__old_value
condition|?
name|__new_value
else|:
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Iterator
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Predicate
operator|,
name|class
name|_Tp
operator|>
name|_OutputIter
name|replace_copy_if
argument_list|(
argument|Iterator __first
argument_list|,
argument|Iterator __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|const _Tp& __new_value
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
operator|,
operator|++
name|__result
control|)
operator|*
name|__result
operator|=
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|?
name|__new_value
else|:
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_comment
unit|}
comment|// generate and generate_n
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Generator
operator|>
name|void
name|generate
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Generator __gen
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
operator|*
name|__first
operator|=
name|__gen
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_OutputIter
operator|,
name|class
name|_Size
operator|,
name|class
name|_Generator
operator|>
name|_OutputIter
name|generate_n
argument_list|(
argument|_OutputIter __first
argument_list|,
argument|_Size __n
argument_list|,
argument|_Generator __gen
argument_list|)
block|{
for|for
control|(
init|;
name|__n
operator|>
literal|0
condition|;
operator|--
name|__n
operator|,
operator|++
name|__first
control|)
operator|*
name|__first
operator|=
name|__gen
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__first
return|;
end_return

begin_comment
unit|}
comment|// remove, remove_if, remove_copy, remove_copy_if
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Tp
operator|>
name|_OutputIter
name|remove_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|const _Tp& __value
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
operator|*
name|__first
operator|!=
name|__value
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Predicate
operator|>
name|_OutputIter
name|remove_copy_if
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_Predicate __pred
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
operator|!
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|>
name|_ForwardIter
name|remove
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __value
argument_list|)
block|{
name|__first
operator|=
name|find
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__value
argument_list|)
block|;
name|_ForwardIter
name|__i
operator|=
name|__first
block|;
return|return
name|__first
operator|==
name|__last
condition|?
name|__first
else|:
name|remove_copy
argument_list|(
operator|++
name|__i
argument_list|,
name|__last
argument_list|,
name|__first
argument_list|,
name|__value
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Predicate
operator|>
name|_ForwardIter
name|remove_if
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Predicate __pred
argument_list|)
block|{
name|__first
operator|=
name|find_if
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pred
argument_list|)
block|;
name|_ForwardIter
name|__i
operator|=
name|__first
block|;
return|return
name|__first
operator|==
name|__last
condition|?
name|__first
else|:
name|remove_copy_if
argument_list|(
operator|++
name|__i
argument_list|,
name|__last
argument_list|,
name|__first
argument_list|,
name|__pred
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// unique and unique_copy
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Tp
operator|>
name|_OutputIter
name|__unique_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_Tp*
argument_list|)
block|{
name|_Tp
name|__value
operator|=
operator|*
name|__first
block|;
operator|*
name|__result
operator|=
name|__value
block|;
while|while
condition|(
operator|++
name|__first
operator|!=
name|__last
condition|)
if|if
condition|(
name|__value
operator|!=
operator|*
name|__first
condition|)
block|{
name|__value
operator|=
operator|*
name|__first
expr_stmt|;
operator|*
operator|++
name|__result
operator|=
name|__value
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|++
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|>
specifier|inline
name|_OutputIter
name|__unique_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|output_iterator_tag
argument_list|)
block|{
return|return
name|__unique_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__result
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_ForwardIter
operator|>
name|_ForwardIter
name|__unique_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_ForwardIter __result
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first
block|;
while|while
condition|(
operator|++
name|__first
operator|!=
name|__last
condition|)
if|if
condition|(
operator|*
name|__result
operator|!=
operator|*
name|__first
condition|)
operator|*
operator|++
name|__result
operator|=
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|++
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|>
specifier|inline
name|_OutputIter
name|unique_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__result
return|;
end_expr_stmt

begin_return
return|return
name|__unique_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__result
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_BinaryPredicate
operator|,
name|class
name|_Tp
operator|>
name|_OutputIter
name|__unique_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_BinaryPredicate __binary_pred
argument_list|,
argument|_Tp*
argument_list|)
block|{
name|_Tp
name|__value
operator|=
operator|*
name|__first
block|;
operator|*
name|__result
operator|=
name|__value
block|;
while|while
condition|(
operator|++
name|__first
operator|!=
name|__last
condition|)
if|if
condition|(
operator|!
name|__binary_pred
argument_list|(
name|__value
argument_list|,
operator|*
name|__first
argument_list|)
condition|)
block|{
name|__value
operator|=
operator|*
name|__first
expr_stmt|;
operator|*
operator|++
name|__result
operator|=
name|__value
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|++
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_BinaryPredicate
operator|>
specifier|inline
name|_OutputIter
name|__unique_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_BinaryPredicate __binary_pred
argument_list|,
argument|output_iterator_tag
argument_list|)
block|{
return|return
name|__unique_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__result
argument_list|,
name|__binary_pred
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_ForwardIter
operator|,
name|class
name|_BinaryPredicate
operator|>
name|_ForwardIter
name|__unique_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_ForwardIter __result
argument_list|,
argument|_BinaryPredicate __binary_pred
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first
block|;
while|while
condition|(
operator|++
name|__first
operator|!=
name|__last
condition|)
if|if
condition|(
operator|!
name|__binary_pred
argument_list|(
operator|*
name|__result
argument_list|,
operator|*
name|__first
argument_list|)
condition|)
operator|*
operator|++
name|__result
operator|=
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|++
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_BinaryPredicate
operator|>
specifier|inline
name|_OutputIter
name|unique_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_BinaryPredicate __binary_pred
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__result
return|;
end_expr_stmt

begin_return
return|return
name|__unique_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__result
argument_list|,
name|__binary_pred
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|>
name|_ForwardIter
name|unique
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|)
block|{
name|__first
operator|=
name|adjacent_find
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
return|return
name|unique_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__first
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_BinaryPredicate
operator|>
name|_ForwardIter
name|unique
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_BinaryPredicate __binary_pred
argument_list|)
block|{
name|__first
operator|=
name|adjacent_find
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__binary_pred
argument_list|)
block|;
return|return
name|unique_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__first
argument_list|,
name|__binary_pred
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// reverse and reverse_copy, and their auxiliary functions
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_BidirectionalIter
operator|>
name|void
name|__reverse
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|true
condition|)
if|if
condition|(
name|__first
operator|==
name|__last
operator|||
name|__first
operator|==
operator|--
name|__last
condition|)
return|return;
else|else
name|iter_swap
argument_list|(
name|__first
operator|++
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|>
name|void
name|__reverse
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|__first
operator|<
name|__last
condition|)
name|iter_swap
argument_list|(
name|__first
operator|++
argument_list|,
operator|--
name|__last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_BidirectionalIter
operator|>
specifier|inline
name|void
name|reverse
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __last
argument_list|)
block|{
name|__reverse
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_OutputIter
operator|>
name|_OutputIter
name|reverse_copy
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_OutputIter __result
argument_list|)
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
operator|--
name|__last
expr_stmt|;
operator|*
name|__result
operator|=
operator|*
name|__last
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_comment
unit|}
comment|// rotate and rotate_copy, and their auxiliary functions
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_EuclideanRingElement
operator|>
name|_EuclideanRingElement
name|__gcd
argument_list|(
argument|_EuclideanRingElement __m
argument_list|,
argument|_EuclideanRingElement __n
argument_list|)
block|{
while|while
condition|(
name|__n
operator|!=
literal|0
condition|)
block|{
name|_EuclideanRingElement
name|__t
init|=
name|__m
operator|%
name|__n
decl_stmt|;
name|__m
operator|=
name|__n
expr_stmt|;
name|__n
operator|=
name|__t
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|__m
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Distance
operator|>
name|_ForwardIter
name|__rotate
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __middle
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Distance*
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__middle
condition|)
return|return
name|__last
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|__last
operator|==
name|__middle
condition|)
return|return
name|__first
return|;
end_if

begin_decl_stmt
name|_ForwardIter
name|__first2
init|=
name|__middle
decl_stmt|;
end_decl_stmt

begin_do
do|do
block|{
name|swap
argument_list|(
operator|*
name|__first
operator|++
argument_list|,
operator|*
name|__first2
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|__first
operator|==
name|__middle
condition|)
name|__middle
operator|=
name|__first2
expr_stmt|;
block|}
do|while
condition|(
name|__first2
operator|!=
name|__last
condition|)
do|;
end_do

begin_decl_stmt
name|_ForwardIter
name|__new_middle
init|=
name|__first
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__first2
operator|=
name|__middle
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|__first2
operator|!=
name|__last
condition|)
block|{
name|swap
argument_list|(
operator|*
name|__first
operator|++
argument_list|,
operator|*
name|__first2
operator|++
argument_list|)
expr_stmt|;
if|if
condition|(
name|__first
operator|==
name|__middle
condition|)
name|__middle
operator|=
name|__first2
expr_stmt|;
elseif|else
if|if
condition|(
name|__first2
operator|==
name|__last
condition|)
name|__first2
operator|=
name|__middle
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__new_middle
return|;
end_return

begin_expr_stmt
unit|}   template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Distance
operator|>
name|_BidirectionalIter
name|__rotate
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Distance*
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__middle
condition|)
return|return
name|__last
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|__last
operator|==
name|__middle
condition|)
return|return
name|__first
return|;
end_if

begin_expr_stmt
name|__reverse
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|bidirectional_iterator_tag
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__reverse
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|bidirectional_iterator_tag
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|__first
operator|!=
name|__middle
operator|&&
name|__middle
operator|!=
name|__last
condition|)
name|swap
argument_list|(
operator|*
name|__first
operator|++
argument_list|,
operator|*
operator|--
name|__last
argument_list|)
expr_stmt|;
end_while

begin_if
if|if
condition|(
name|__first
operator|==
name|__middle
condition|)
block|{
name|__reverse
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|bidirectional_iterator_tag
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|__last
return|;
block|}
else|else
block|{
name|__reverse
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|bidirectional_iterator_tag
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|__first
return|;
block|}
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|>
name|_RandomAccessIter
name|__rotate
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __middle
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Distance *
argument_list|,
argument|_Tp *
argument_list|)
block|{
name|_Distance
name|__n
operator|=
name|__last
operator|-
name|__first
block|;
name|_Distance
name|__k
operator|=
name|__middle
operator|-
name|__first
block|;
name|_Distance
name|__l
operator|=
name|__n
operator|-
name|__k
block|;
name|_RandomAccessIter
name|__result
operator|=
name|__first
operator|+
operator|(
name|__last
operator|-
name|__middle
operator|)
block|;
if|if
condition|(
name|__k
operator|==
name|__l
condition|)
block|{
name|swap_ranges
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__middle
argument_list|)
expr_stmt|;
return|return
name|__result
return|;
block|}
name|_Distance
name|__d
operator|=
name|__gcd
argument_list|(
name|__n
argument_list|,
name|__k
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|_Distance
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__d
condition|;
name|__i
operator|++
control|)
block|{
name|_Tp
name|__tmp
init|=
operator|*
name|__first
decl_stmt|;
name|_RandomAccessIter
name|__p
init|=
name|__first
decl_stmt|;
if|if
condition|(
name|__k
operator|<
name|__l
condition|)
block|{
for|for
control|(
name|_Distance
name|__j
init|=
literal|0
init|;
name|__j
operator|<
name|__l
operator|/
name|__d
condition|;
name|__j
operator|++
control|)
block|{
if|if
condition|(
name|__p
operator|>
name|__first
operator|+
name|__l
condition|)
block|{
operator|*
name|__p
operator|=
operator|*
operator|(
name|__p
operator|-
name|__l
operator|)
expr_stmt|;
name|__p
operator|-=
name|__l
expr_stmt|;
block|}
operator|*
name|__p
operator|=
operator|*
operator|(
name|__p
operator|+
name|__k
operator|)
expr_stmt|;
name|__p
operator|+=
name|__k
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|_Distance
name|__j
init|=
literal|0
init|;
name|__j
operator|<
name|__k
operator|/
name|__d
operator|-
literal|1
condition|;
name|__j
operator|++
control|)
block|{
if|if
condition|(
name|__p
operator|<
name|__last
operator|-
name|__k
condition|)
block|{
operator|*
name|__p
operator|=
operator|*
operator|(
name|__p
operator|+
name|__k
operator|)
expr_stmt|;
name|__p
operator|+=
name|__k
expr_stmt|;
block|}
operator|*
name|__p
operator|=
operator|*
operator|(
name|__p
operator|-
name|__l
operator|)
expr_stmt|;
name|__p
operator|-=
name|__l
expr_stmt|;
block|}
block|}
operator|*
name|__p
operator|=
name|__tmp
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_for

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|>
specifier|inline
name|_ForwardIter
name|rotate
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __middle
argument_list|,
argument|_ForwardIter __last
argument_list|)
block|{
return|return
name|__rotate
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_OutputIter
operator|>
name|_OutputIter
name|rotate_copy
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __middle
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_OutputIter __result
argument_list|)
block|{
return|return
name|copy
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|copy
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__result
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Return a random number in the range [0, __n).  This function encapsulates
end_comment

begin_comment
comment|// whether we're using rand (part of the standard C library) or lrand48
end_comment

begin_comment
comment|// (not standard, but a much better choice whenever it's available).
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Distance
operator|>
specifier|inline
name|_Distance
name|__random_number
argument_list|(
argument|_Distance __n
argument_list|)
block|{
ifdef|#
directive|ifdef
name|__STL_NO_DRAND48
return|return
name|rand
argument_list|()
operator|%
name|__n
return|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_return
return|return
name|lrand48
argument_list|()
operator|%
name|__n
return|;
end_return

begin_endif
endif|#
directive|endif
end_endif

begin_comment
unit|}
comment|// random_shuffle
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|void
name|random_shuffle
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|_RandomAccessIter
name|__i
init|=
name|__first
operator|+
literal|1
init|;
name|__i
operator|!=
name|__last
condition|;
operator|++
name|__i
control|)
name|iter_swap
argument_list|(
name|__i
argument_list|,
name|__first
operator|+
name|__random_number
argument_list|(
operator|(
name|__i
operator|-
name|__first
operator|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_RandomNumberGenerator
operator|>
name|void
name|random_shuffle
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_RandomNumberGenerator& __rand
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|_RandomAccessIter
name|__i
init|=
name|__first
operator|+
literal|1
init|;
name|__i
operator|!=
name|__last
condition|;
operator|++
name|__i
control|)
name|iter_swap
argument_list|(
name|__i
argument_list|,
name|__first
operator|+
name|__rand
argument_list|(
operator|(
name|__i
operator|-
name|__first
operator|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
end_for

begin_comment
unit|}
comment|// random_sample and random_sample_n (extensions, not part of the standard).
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Distance
operator|>
name|_OutputIter
name|random_sample_n
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_OutputIter __out
argument_list|,
argument|const _Distance __n
argument_list|)
block|{
name|_Distance
name|__remaining
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__remaining
argument_list|)
block|;
name|_Distance
name|__m
operator|=
name|min
argument_list|(
name|__n
argument_list|,
name|__remaining
argument_list|)
block|;
while|while
condition|(
name|__m
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|__random_number
argument_list|(
name|__remaining
argument_list|)
operator|<
name|__m
condition|)
block|{
operator|*
name|__out
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__out
expr_stmt|;
operator|--
name|__m
expr_stmt|;
block|}
operator|--
name|__remaining
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   return
name|__out
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Distance
operator|,
name|class
name|_RandomNumberGenerator
operator|>
name|_OutputIter
name|random_sample_n
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_OutputIter __out
argument_list|,
argument|const _Distance __n
argument_list|,
argument|_RandomNumberGenerator& __rand
argument_list|)
block|{
name|_Distance
name|__remaining
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__remaining
argument_list|)
block|;
name|_Distance
name|__m
operator|=
name|min
argument_list|(
name|__n
argument_list|,
name|__remaining
argument_list|)
block|;
while|while
condition|(
name|__m
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|__rand
argument_list|(
name|__remaining
argument_list|)
operator|<
name|__m
condition|)
block|{
operator|*
name|__out
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__out
expr_stmt|;
operator|--
name|__m
expr_stmt|;
block|}
operator|--
name|__remaining
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   return
name|__out
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Distance
operator|>
name|_RandomAccessIter
name|__random_sample
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_RandomAccessIter __out
argument_list|,
argument|const _Distance __n
argument_list|)
block|{
name|_Distance
name|__m
operator|=
literal|0
block|;
name|_Distance
name|__t
operator|=
name|__n
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
operator|&&
name|__m
operator|<
name|__n
condition|;
operator|++
name|__m
operator|,
operator|++
name|__first
control|)
name|__out
index|[
name|__m
index|]
operator|=
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
operator|++
name|__t
expr_stmt|;
name|_Distance
name|__M
init|=
name|__random_number
argument_list|(
name|__t
argument_list|)
decl_stmt|;
if|if
condition|(
name|__M
operator|<
name|__n
condition|)
name|__out
index|[
name|__M
index|]
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__out
operator|+
name|__m
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_RandomAccessIter
operator|,
name|class
name|_RandomNumberGenerator
operator|,
name|class
name|_Distance
operator|>
name|_RandomAccessIter
name|__random_sample
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_RandomAccessIter __out
argument_list|,
argument|_RandomNumberGenerator& __rand
argument_list|,
argument|const _Distance __n
argument_list|)
block|{
name|_Distance
name|__m
operator|=
literal|0
block|;
name|_Distance
name|__t
operator|=
name|__n
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
operator|&&
name|__m
operator|<
name|__n
condition|;
operator|++
name|__m
operator|,
operator|++
name|__first
control|)
name|__out
index|[
name|__m
index|]
operator|=
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
operator|++
name|__t
expr_stmt|;
name|_Distance
name|__M
init|=
name|__rand
argument_list|(
name|__t
argument_list|)
decl_stmt|;
if|if
condition|(
name|__M
operator|<
name|__n
condition|)
name|__out
index|[
name|__M
index|]
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__out
operator|+
name|__m
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|_RandomAccessIter
name|random_sample
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_RandomAccessIter __out_first
argument_list|,
argument|_RandomAccessIter __out_last
argument_list|)
block|{
return|return
name|__random_sample
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__out_first
argument_list|,
name|__out_last
operator|-
name|__out_first
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_RandomAccessIter
operator|,
name|class
name|_RandomNumberGenerator
operator|>
specifier|inline
name|_RandomAccessIter
name|random_sample
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_RandomAccessIter __out_first
argument_list|,
argument|_RandomAccessIter __out_last
argument_list|,
argument|_RandomNumberGenerator& __rand
argument_list|)
block|{
return|return
name|__random_sample
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__out_first
argument_list|,
name|__rand
argument_list|,
name|__out_last
operator|-
name|__out_first
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// partition, stable_partition, and their auxiliary functions
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Predicate
operator|>
name|_ForwardIter
name|__partition
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Predicate   __pred
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
end_expr_stmt

begin_while
while|while
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
if|if
condition|(
operator|++
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
end_while

begin_decl_stmt
name|_ForwardIter
name|__next
init|=
name|__first
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
operator|++
name|__next
operator|!=
name|__last
condition|)
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__next
argument_list|)
condition|)
block|{
name|swap
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
name|__next
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__first
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Predicate
operator|>
name|_BidirectionalIter
name|__partition
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|true
condition|)
block|{
while|while
condition|(
name|true
condition|)
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
elseif|else
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
operator|++
name|__first
expr_stmt|;
else|else
break|break;
operator|--
name|__last
expr_stmt|;
while|while
condition|(
name|true
condition|)
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
elseif|else
if|if
condition|(
operator|!
name|__pred
argument_list|(
operator|*
name|__last
argument_list|)
condition|)
operator|--
name|__last
expr_stmt|;
else|else
break|break;
name|iter_swap
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Predicate
operator|>
specifier|inline
name|_ForwardIter
name|partition
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Predicate   __pred
argument_list|)
block|{
return|return
name|__partition
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pred
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Predicate
operator|,
name|class
name|_Distance
operator|>
name|_ForwardIter
name|__inplace_stable_partition
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|_Distance __len
argument_list|)
block|{
if|if
condition|(
name|__len
operator|==
literal|1
condition|)
return|return
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
operator|?
name|__last
operator|:
name|__first
return|;
name|_ForwardIter
name|__middle
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|advance
argument_list|(
name|__middle
argument_list|,
name|__len
operator|/
literal|2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|rotate
argument_list|(
name|__inplace_stable_partition
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__pred
argument_list|,
name|__len
operator|/
literal|2
argument_list|)
argument_list|,
name|__middle
argument_list|,
name|__inplace_stable_partition
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__pred
argument_list|,
name|__len
operator|-
name|__len
operator|/
literal|2
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Pointer
operator|,
name|class
name|_Predicate
operator|,
name|class
name|_Distance
operator|>
name|_ForwardIter
name|__stable_partition_adaptive
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|_Distance __len
argument_list|,
argument|_Pointer __buffer
argument_list|,
argument|_Distance __buffer_size
argument_list|)
block|{
if|if
condition|(
name|__len
operator|<=
name|__buffer_size
condition|)
block|{
name|_ForwardIter
name|__result1
init|=
name|__first
decl_stmt|;
name|_Pointer
name|__result2
init|=
name|__buffer
decl_stmt|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
block|{
operator|*
name|__result1
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__result1
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
operator|*
name|__result2
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__result2
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|copy
argument_list|(
name|__buffer
argument_list|,
name|__result2
argument_list|,
name|__result1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__result1
return|;
end_return

begin_block
unit|}   else
block|{
name|_ForwardIter
name|__middle
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__middle
argument_list|,
name|__len
operator|/
literal|2
argument_list|)
expr_stmt|;
return|return
name|rotate
argument_list|(
name|__stable_partition_adaptive
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__pred
argument_list|,
name|__len
operator|/
literal|2
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
argument_list|,
name|__middle
argument_list|,
name|__stable_partition_adaptive
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__pred
argument_list|,
name|__len
operator|-
name|__len
operator|/
literal|2
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
argument_list|)
return|;
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Predicate
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_ForwardIter
name|__stable_partition_aux
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Predicate __pred
argument_list|,
argument|_Tp*
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Temporary_buffer
operator|<
name|_ForwardIter
block|,
name|_Tp
operator|>
name|__buf
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|__buf
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
return|return
name|__stable_partition_adaptive
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pred
argument_list|,
name|_Distance
argument_list|(
name|__buf
operator|.
name|requested_size
argument_list|()
argument_list|)
argument_list|,
name|__buf
operator|.
name|begin
argument_list|()
argument_list|,
name|__buf
operator|.
name|size
argument_list|()
argument_list|)
return|;
else|else
return|return
name|__inplace_stable_partition
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pred
argument_list|,
name|_Distance
argument_list|(
name|__buf
operator|.
name|requested_size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Predicate
operator|>
specifier|inline
name|_ForwardIter
name|stable_partition
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Predicate __pred
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
else|else
return|return
name|__stable_partition_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pred
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|>
name|_RandomAccessIter
name|__unguarded_partition
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp __pivot
argument_list|)
block|{
while|while
condition|(
name|true
condition|)
block|{
while|while
condition|(
operator|*
name|__first
operator|<
name|__pivot
condition|)
operator|++
name|__first
expr_stmt|;
operator|--
name|__last
expr_stmt|;
while|while
condition|(
name|__pivot
operator|<
operator|*
name|__last
condition|)
operator|--
name|__last
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|__first
operator|<
name|__last
operator|)
condition|)
return|return
name|__first
return|;
name|iter_swap
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}      template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
name|_RandomAccessIter
name|__unguarded_partition
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp __pivot
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|true
condition|)
block|{
while|while
condition|(
name|__comp
argument_list|(
operator|*
name|__first
argument_list|,
name|__pivot
argument_list|)
condition|)
operator|++
name|__first
expr_stmt|;
operator|--
name|__last
expr_stmt|;
while|while
condition|(
name|__comp
argument_list|(
name|__pivot
argument_list|,
operator|*
name|__last
argument_list|)
condition|)
operator|--
name|__last
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|__first
operator|<
name|__last
operator|)
condition|)
return|return
name|__first
return|;
name|iter_swap
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_expr_stmt

begin_decl_stmt
unit|}  const
name|int
name|__stl_threshold
init|=
literal|16
decl_stmt|;
end_decl_stmt

begin_comment
comment|// sort() and its auxiliary functions.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|>
name|void
name|__unguarded_linear_insert
argument_list|(
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp __val
argument_list|)
block|{
name|_RandomAccessIter
name|__next
operator|=
name|__last
block|;
operator|--
name|__next
block|;
while|while
condition|(
name|__val
operator|<
operator|*
name|__next
condition|)
block|{
operator|*
name|__last
operator|=
operator|*
name|__next
expr_stmt|;
name|__last
operator|=
name|__next
expr_stmt|;
operator|--
name|__next
expr_stmt|;
block|}
operator|*
name|__last
operator|=
name|__val
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
name|void
name|__unguarded_linear_insert
argument_list|(
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp __val
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_RandomAccessIter
name|__next
operator|=
name|__last
block|;
operator|--
name|__next
block|;
while|while
condition|(
name|__comp
argument_list|(
name|__val
argument_list|,
operator|*
name|__next
argument_list|)
condition|)
block|{
operator|*
name|__last
operator|=
operator|*
name|__next
expr_stmt|;
name|__last
operator|=
name|__next
expr_stmt|;
operator|--
name|__next
expr_stmt|;
block|}
operator|*
name|__last
operator|=
name|__val
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|void
name|__linear_insert
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|)
block|{
name|_Tp
name|__val
operator|=
operator|*
name|__last
block|;
if|if
condition|(
name|__val
operator|<
operator|*
name|__first
condition|)
block|{
name|copy_backward
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__last
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|*
name|__first
operator|=
name|__val
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__unguarded_linear_insert
argument_list|(
name|__last
argument_list|,
name|__val
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|__linear_insert
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_Tp
name|__val
operator|=
operator|*
name|__last
block|;
if|if
condition|(
name|__comp
argument_list|(
name|__val
argument_list|,
operator|*
name|__first
argument_list|)
condition|)
block|{
name|copy_backward
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__last
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|*
name|__first
operator|=
name|__val
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__unguarded_linear_insert
argument_list|(
name|__last
argument_list|,
name|__val
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|>
name|void
name|__insertion_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|_RandomAccessIter
name|__i
init|=
name|__first
operator|+
literal|1
init|;
name|__i
operator|!=
name|__last
condition|;
operator|++
name|__i
control|)
name|__linear_insert
argument_list|(
name|__first
argument_list|,
name|__i
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
name|void
name|__insertion_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return;
end_expr_stmt

begin_for
for|for
control|(
name|_RandomAccessIter
name|__i
init|=
name|__first
operator|+
literal|1
init|;
name|__i
operator|!=
name|__last
condition|;
operator|++
name|__i
control|)
name|__linear_insert
argument_list|(
name|__first
argument_list|,
name|__i
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|>
name|void
name|__unguarded_insertion_sort_aux
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|)
block|{
for|for
control|(
name|_RandomAccessIter
name|__i
init|=
name|__first
init|;
name|__i
operator|!=
name|__last
condition|;
operator|++
name|__i
control|)
name|__unguarded_linear_insert
argument_list|(
name|__i
argument_list|,
name|_Tp
argument_list|(
operator|*
name|__i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|void
name|__unguarded_insertion_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
name|__unguarded_insertion_sort_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
name|void
name|__unguarded_insertion_sort_aux
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
for|for
control|(
name|_RandomAccessIter
name|__i
init|=
name|__first
init|;
name|__i
operator|!=
name|__last
condition|;
operator|++
name|__i
control|)
name|__unguarded_linear_insert
argument_list|(
name|__i
argument_list|,
name|_Tp
argument_list|(
operator|*
name|__i
argument_list|)
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|__unguarded_insertion_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|__unguarded_insertion_sort_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIter
operator|>
name|void
name|__final_insertion_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
if|if
condition|(
name|__last
operator|-
name|__first
operator|>
name|__stl_threshold
condition|)
block|{
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__first
operator|+
name|__stl_threshold
argument_list|)
expr_stmt|;
name|__unguarded_insertion_sort
argument_list|(
name|__first
operator|+
name|__stl_threshold
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
name|void
name|__final_insertion_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__last
operator|-
name|__first
operator|>
name|__stl_threshold
condition|)
block|{
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__first
operator|+
name|__stl_threshold
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__unguarded_insertion_sort
argument_list|(
name|__first
operator|+
name|__stl_threshold
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Size
operator|>
specifier|inline
name|_Size
name|__lg
argument_list|(
argument|_Size __n
argument_list|)
block|{
name|_Size
name|__k
block|;
for|for
control|(
name|__k
operator|=
literal|0
init|;
name|__n
operator|!=
literal|1
condition|;
name|__n
operator|>>=
literal|1
control|)
operator|++
name|__k
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__k
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Size
operator|>
name|void
name|__introsort_loop
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Size __depth_limit
argument_list|)
block|{
while|while
condition|(
name|__last
operator|-
name|__first
operator|>
name|__stl_threshold
condition|)
block|{
if|if
condition|(
name|__depth_limit
operator|==
literal|0
condition|)
block|{
name|partial_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return;
block|}
operator|--
name|__depth_limit
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_RandomAccessIter
name|__cut
init|=
name|__unguarded_partition
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Tp
argument_list|(
name|__median
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
operator|(
name|__first
operator|+
operator|(
name|__last
operator|-
name|__first
operator|)
operator|/
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__introsort_loop
argument_list|(
name|__cut
argument_list|,
name|__last
argument_list|,
operator|(
name|_Tp
operator|*
operator|)
literal|0
argument_list|,
name|__depth_limit
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__last
operator|=
name|__cut
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Size
operator|,
name|class
name|_Compare
operator|>
name|void
name|__introsort_loop
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Size __depth_limit
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__last
operator|-
name|__first
operator|>
name|__stl_threshold
condition|)
block|{
if|if
condition|(
name|__depth_limit
operator|==
literal|0
condition|)
block|{
name|partial_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
return|return;
block|}
operator|--
name|__depth_limit
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_RandomAccessIter
name|__cut
init|=
name|__unguarded_partition
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Tp
argument_list|(
name|__median
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
operator|(
name|__first
operator|+
operator|(
name|__last
operator|-
name|__first
operator|)
operator|/
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
argument_list|,
name|__comp
argument_list|)
argument_list|)
argument_list|,
name|__comp
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__introsort_loop
argument_list|(
name|__cut
argument_list|,
name|__last
argument_list|,
operator|(
name|_Tp
operator|*
operator|)
literal|0
argument_list|,
name|__depth_limit
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__last
operator|=
name|__cut
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|void
name|sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|__introsort_loop
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__lg
argument_list|(
name|__last
operator|-
name|__first
argument_list|)
operator|*
literal|2
argument_list|)
expr_stmt|;
name|__final_insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|__introsort_loop
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__lg
argument_list|(
name|__last
operator|-
name|__first
argument_list|)
operator|*
literal|2
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__final_insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// stable_sort() and its auxiliary functions.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_RandomAccessIter
operator|>
name|void
name|__inplace_stable_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
if|if
condition|(
name|__last
operator|-
name|__first
operator|<
literal|15
condition|)
block|{
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return;
block|}
name|_RandomAccessIter
name|__middle
operator|=
name|__first
operator|+
operator|(
name|__last
operator|-
name|__first
operator|)
operator|/
literal|2
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__inplace_stable_sort
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__inplace_stable_sort
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__middle
operator|-
name|__first
argument_list|,
name|__last
operator|-
name|__middle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
name|void
name|__inplace_stable_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__last
operator|-
name|__first
operator|<
literal|15
condition|)
block|{
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
return|return;
block|}
name|_RandomAccessIter
name|__middle
operator|=
name|__first
operator|+
operator|(
name|__last
operator|-
name|__first
operator|)
operator|/
literal|2
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__inplace_stable_sort
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__inplace_stable_sort
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__middle
operator|-
name|__first
argument_list|,
name|__last
operator|-
name|__middle
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter1
operator|,
name|class
name|_RandomAccessIter2
operator|,
name|class
name|_Distance
operator|>
name|void
name|__merge_sort_loop
argument_list|(
argument|_RandomAccessIter1 __first
argument_list|,
argument|_RandomAccessIter1 __last
argument_list|,
argument|_RandomAccessIter2 __result
argument_list|,
argument|_Distance __step_size
argument_list|)
block|{
name|_Distance
name|__two_step
operator|=
literal|2
operator|*
name|__step_size
block|;
while|while
condition|(
name|__last
operator|-
name|__first
operator|>=
name|__two_step
condition|)
block|{
name|__result
operator|=
name|merge
argument_list|(
name|__first
argument_list|,
name|__first
operator|+
name|__step_size
argument_list|,
name|__first
operator|+
name|__step_size
argument_list|,
name|__first
operator|+
name|__two_step
argument_list|,
name|__result
argument_list|)
expr_stmt|;
name|__first
operator|+=
name|__two_step
expr_stmt|;
block|}
name|__step_size
operator|=
name|min
argument_list|(
name|_Distance
argument_list|(
name|__last
operator|-
name|__first
argument_list|)
argument_list|,
name|__step_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|merge
argument_list|(
name|__first
argument_list|,
name|__first
operator|+
name|__step_size
argument_list|,
name|__first
operator|+
name|__step_size
argument_list|,
name|__last
argument_list|,
name|__result
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter1
operator|,
name|class
name|_RandomAccessIter2
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Compare
operator|>
name|void
name|__merge_sort_loop
argument_list|(
argument|_RandomAccessIter1 __first
argument_list|,
argument|_RandomAccessIter1 __last
argument_list|,
argument|_RandomAccessIter2 __result
argument_list|,
argument|_Distance __step_size
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_Distance
name|__two_step
operator|=
literal|2
operator|*
name|__step_size
block|;
while|while
condition|(
name|__last
operator|-
name|__first
operator|>=
name|__two_step
condition|)
block|{
name|__result
operator|=
name|merge
argument_list|(
name|__first
argument_list|,
name|__first
operator|+
name|__step_size
argument_list|,
name|__first
operator|+
name|__step_size
argument_list|,
name|__first
operator|+
name|__two_step
argument_list|,
name|__result
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__first
operator|+=
name|__two_step
expr_stmt|;
block|}
name|__step_size
operator|=
name|min
argument_list|(
name|_Distance
argument_list|(
name|__last
operator|-
name|__first
argument_list|)
argument_list|,
name|__step_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|merge
argument_list|(
name|__first
argument_list|,
name|__first
operator|+
name|__step_size
argument_list|,
name|__first
operator|+
name|__step_size
argument_list|,
name|__last
argument_list|,
name|__result
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
unit|}  const
name|int
name|__stl_chunk_size
init|=
literal|7
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Distance
operator|>
name|void
name|__chunk_insertion_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Distance __chunk_size
argument_list|)
block|{
while|while
condition|(
name|__last
operator|-
name|__first
operator|>=
name|__chunk_size
condition|)
block|{
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__first
operator|+
name|__chunk_size
argument_list|)
expr_stmt|;
name|__first
operator|+=
name|__chunk_size
expr_stmt|;
block|}
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Compare
operator|>
name|void
name|__chunk_insertion_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Distance __chunk_size
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__last
operator|-
name|__first
operator|>=
name|__chunk_size
condition|)
block|{
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__first
operator|+
name|__chunk_size
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__first
operator|+=
name|__chunk_size
expr_stmt|;
block|}
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Pointer
operator|,
name|class
name|_Distance
operator|>
name|void
name|__merge_sort_with_buffer
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Pointer __buffer
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Distance
name|__len
operator|=
name|__last
operator|-
name|__first
block|;
name|_Pointer
name|__buffer_last
operator|=
name|__buffer
operator|+
name|__len
block|;
name|_Distance
name|__step_size
operator|=
name|__stl_chunk_size
block|;
name|__chunk_insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__step_size
argument_list|)
block|;
while|while
condition|(
name|__step_size
operator|<
name|__len
condition|)
block|{
name|__merge_sort_loop
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|,
name|__step_size
argument_list|)
expr_stmt|;
name|__step_size
operator|*=
literal|2
expr_stmt|;
name|__merge_sort_loop
argument_list|(
name|__buffer
argument_list|,
name|__buffer_last
argument_list|,
name|__first
argument_list|,
name|__step_size
argument_list|)
expr_stmt|;
name|__step_size
operator|*=
literal|2
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Pointer
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Compare
operator|>
name|void
name|__merge_sort_with_buffer
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Pointer __buffer
argument_list|,
argument|_Distance*
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_Distance
name|__len
operator|=
name|__last
operator|-
name|__first
block|;
name|_Pointer
name|__buffer_last
operator|=
name|__buffer
operator|+
name|__len
block|;
name|_Distance
name|__step_size
operator|=
name|__stl_chunk_size
block|;
name|__chunk_insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__step_size
argument_list|,
name|__comp
argument_list|)
block|;
while|while
condition|(
name|__step_size
operator|<
name|__len
condition|)
block|{
name|__merge_sort_loop
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|,
name|__step_size
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__step_size
operator|*=
literal|2
expr_stmt|;
name|__merge_sort_loop
argument_list|(
name|__buffer
argument_list|,
name|__buffer_last
argument_list|,
name|__first
argument_list|,
name|__step_size
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__step_size
operator|*=
literal|2
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Pointer
operator|,
name|class
name|_Distance
operator|>
name|void
name|__stable_sort_adaptive
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Pointer __buffer
argument_list|,
argument|_Distance __buffer_size
argument_list|)
block|{
name|_Distance
name|__len
operator|=
operator|(
name|__last
operator|-
name|__first
operator|+
literal|1
operator|)
operator|/
literal|2
block|;
name|_RandomAccessIter
name|__middle
operator|=
name|__first
operator|+
name|__len
block|;
if|if
condition|(
name|__len
operator|>
name|__buffer_size
condition|)
block|{
name|__stable_sort_adaptive
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
expr_stmt|;
name|__stable_sort_adaptive
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__merge_sort_with_buffer
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|,
operator|(
name|_Distance
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|__merge_sort_with_buffer
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|,
operator|(
name|_Distance
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|__merge_adaptive
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|_Distance
argument_list|(
name|__middle
operator|-
name|__first
argument_list|)
argument_list|,
name|_Distance
argument_list|(
name|__last
operator|-
name|__middle
argument_list|)
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Pointer
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Compare
operator|>
name|void
name|__stable_sort_adaptive
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Pointer __buffer
argument_list|,
argument|_Distance __buffer_size
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_Distance
name|__len
operator|=
operator|(
name|__last
operator|-
name|__first
operator|+
literal|1
operator|)
operator|/
literal|2
block|;
name|_RandomAccessIter
name|__middle
operator|=
name|__first
operator|+
name|__len
block|;
if|if
condition|(
name|__len
operator|>
name|__buffer_size
condition|)
block|{
name|__stable_sort_adaptive
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__stable_sort_adaptive
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__merge_sort_with_buffer
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|,
operator|(
name|_Distance
operator|*
operator|)
literal|0
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__merge_sort_with_buffer
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|,
operator|(
name|_Distance
operator|*
operator|)
literal|0
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|__merge_adaptive
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|_Distance
argument_list|(
name|__middle
operator|-
name|__first
argument_list|)
argument_list|,
name|_Distance
argument_list|(
name|__last
operator|-
name|__middle
argument_list|)
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__stable_sort_aux
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Temporary_buffer
operator|<
name|_RandomAccessIter
block|,
name|_Tp
operator|>
name|buf
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|buf
operator|.
name|begin
argument_list|()
operator|==
literal|0
condition|)
name|__inplace_stable_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
else|else
name|__stable_sort_adaptive
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|buf
operator|.
name|begin
argument_list|()
argument_list|,
name|_Distance
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|__stable_sort_aux
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Distance*
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_Temporary_buffer
operator|<
name|_RandomAccessIter
block|,
name|_Tp
operator|>
name|buf
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|buf
operator|.
name|begin
argument_list|()
operator|==
literal|0
condition|)
name|__inplace_stable_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
else|else
name|__stable_sort_adaptive
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|buf
operator|.
name|begin
argument_list|()
argument_list|,
name|_Distance
argument_list|(
name|buf
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|void
name|stable_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
name|__stable_sort_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|stable_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|__stable_sort_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__comp
argument_list|)
block|; }
comment|// partial_sort, partial_sort_copy, and auxiliary functions.
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|>
name|void
name|__partial_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __middle
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|)
block|{
name|make_heap
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|)
block|;
for|for
control|(
name|_RandomAccessIter
name|__i
init|=
name|__middle
init|;
name|__i
operator|<
name|__last
condition|;
operator|++
name|__i
control|)
if|if
condition|(
operator|*
name|__i
operator|<
operator|*
name|__first
condition|)
name|__pop_heap
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__i
argument_list|,
name|_Tp
argument_list|(
operator|*
name|__i
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
expr_stmt|;
name|sort_heap
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|void
name|partial_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __middle
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
name|__partial_sort
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
name|void
name|__partial_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __middle
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|make_heap
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__comp
argument_list|)
block|;
for|for
control|(
name|_RandomAccessIter
name|__i
init|=
name|__middle
init|;
name|__i
operator|<
name|__last
condition|;
operator|++
name|__i
control|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__i
argument_list|,
operator|*
name|__first
argument_list|)
condition|)
name|__pop_heap
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__i
argument_list|,
name|_Tp
argument_list|(
operator|*
name|__i
argument_list|)
argument_list|,
name|__comp
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
expr_stmt|;
name|sort_heap
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|partial_sort
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __middle
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|__partial_sort
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|>
name|_RandomAccessIter
name|__partial_sort_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_RandomAccessIter __result_first
argument_list|,
argument|_RandomAccessIter __result_last
argument_list|,
argument|_Distance*
argument_list|,
argument|_Tp*
argument_list|)
block|{
if|if
condition|(
name|__result_first
operator|==
name|__result_last
condition|)
return|return
name|__result_last
return|;
name|_RandomAccessIter
name|__result_real_last
operator|=
name|__result_first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|__first
operator|!=
name|__last
operator|&&
name|__result_real_last
operator|!=
name|__result_last
condition|)
block|{
operator|*
name|__result_real_last
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__result_real_last
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_while

begin_expr_stmt
name|make_heap
argument_list|(
name|__result_first
argument_list|,
name|__result_real_last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
if|if
condition|(
operator|*
name|__first
operator|<
operator|*
name|__result_first
condition|)
name|__adjust_heap
argument_list|(
name|__result_first
argument_list|,
name|_Distance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|_Distance
argument_list|(
name|__result_real_last
operator|-
name|__result_first
argument_list|)
argument_list|,
name|_Tp
argument_list|(
operator|*
name|__first
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_while

begin_expr_stmt
name|sort_heap
argument_list|(
name|__result_first
argument_list|,
name|__result_real_last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__result_real_last
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|_RandomAccessIter
name|partial_sort_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_RandomAccessIter __result_first
argument_list|,
argument|_RandomAccessIter __result_last
argument_list|)
block|{
return|return
name|__partial_sort_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__result_first
argument_list|,
name|__result_last
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__result_first
argument_list|)
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|>
name|_RandomAccessIter
name|__partial_sort_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_RandomAccessIter __result_first
argument_list|,
argument|_RandomAccessIter __result_last
argument_list|,
argument|_Compare __comp
argument_list|,
argument|_Distance*
argument_list|,
argument|_Tp*
argument_list|)
block|{
if|if
condition|(
name|__result_first
operator|==
name|__result_last
condition|)
return|return
name|__result_last
return|;
name|_RandomAccessIter
name|__result_real_last
operator|=
name|__result_first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|__first
operator|!=
name|__last
operator|&&
name|__result_real_last
operator|!=
name|__result_last
condition|)
block|{
operator|*
name|__result_real_last
operator|=
operator|*
name|__first
expr_stmt|;
operator|++
name|__result_real_last
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_while

begin_expr_stmt
name|make_heap
argument_list|(
name|__result_first
argument_list|,
name|__result_real_last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
name|__result_first
argument_list|)
condition|)
name|__adjust_heap
argument_list|(
name|__result_first
argument_list|,
name|_Distance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|_Distance
argument_list|(
name|__result_real_last
operator|-
name|__result_first
argument_list|)
argument_list|,
name|_Tp
argument_list|(
operator|*
name|__first
argument_list|)
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_while

begin_expr_stmt
name|sort_heap
argument_list|(
name|__result_first
argument_list|,
name|__result_real_last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__result_real_last
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|_RandomAccessIter
name|partial_sort_copy
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|_RandomAccessIter __result_first
argument_list|,
argument|_RandomAccessIter __result_last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
return|return
name|__partial_sort_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__result_first
argument_list|,
name|__result_last
argument_list|,
name|__comp
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__result_first
argument_list|)
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// nth_element() and its auxiliary functions.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|>
name|void
name|__nth_element
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __nth
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|)
block|{
while|while
condition|(
name|__last
operator|-
name|__first
operator|>
literal|3
condition|)
block|{
name|_RandomAccessIter
name|__cut
init|=
name|__unguarded_partition
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Tp
argument_list|(
name|__median
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
operator|(
name|__first
operator|+
operator|(
name|__last
operator|-
name|__first
operator|)
operator|/
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|__cut
operator|<=
name|__nth
condition|)
name|__first
operator|=
name|__cut
expr_stmt|;
else|else
name|__last
operator|=
name|__cut
expr_stmt|;
block|}
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|void
name|nth_element
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __nth
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
name|__nth_element
argument_list|(
name|__first
argument_list|,
name|__nth
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
name|void
name|__nth_element
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __nth
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__last
operator|-
name|__first
operator|>
literal|3
condition|)
block|{
name|_RandomAccessIter
name|__cut
init|=
name|__unguarded_partition
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Tp
argument_list|(
name|__median
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
operator|(
name|__first
operator|+
operator|(
name|__last
operator|-
name|__first
operator|)
operator|/
literal|2
operator|)
argument_list|,
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
argument_list|,
name|__comp
argument_list|)
argument_list|)
argument_list|,
name|__comp
argument_list|)
decl_stmt|;
if|if
condition|(
name|__cut
operator|<=
name|__nth
condition|)
name|__first
operator|=
name|__cut
expr_stmt|;
else|else
name|__last
operator|=
name|__cut
expr_stmt|;
block|}
name|__insertion_sort
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|nth_element
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __nth
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|__nth_element
argument_list|(
name|__first
argument_list|,
name|__nth
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__comp
argument_list|)
block|; }
comment|// Binary search (lower_bound, upper_bound, equal_range, binary_search).
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
name|_ForwardIter
name|__lower_bound
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Distance
name|__len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__len
argument_list|)
block|;
name|_Distance
name|__half
block|;
name|_ForwardIter
name|__middle
block|;
while|while
condition|(
name|__len
operator|>
literal|0
condition|)
block|{
name|__half
operator|=
name|__len
operator|>>
literal|1
expr_stmt|;
name|__middle
operator|=
name|__first
expr_stmt|;
name|advance
argument_list|(
name|__middle
argument_list|,
name|__half
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|__middle
operator|<
name|__val
condition|)
block|{
name|__first
operator|=
name|__middle
expr_stmt|;
operator|++
name|__first
expr_stmt|;
name|__len
operator|=
name|__len
operator|-
name|__half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__len
operator|=
name|__half
expr_stmt|;
end_else

begin_expr_stmt
unit|}   return
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|_ForwardIter
name|lower_bound
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|)
block|{
return|return
name|__lower_bound
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|,
name|class
name|_Distance
operator|>
name|_ForwardIter
name|__lower_bound
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Compare __comp
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Distance
name|__len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__len
argument_list|)
block|;
name|_Distance
name|__half
block|;
name|_ForwardIter
name|__middle
block|;
while|while
condition|(
name|__len
operator|>
literal|0
condition|)
block|{
name|__half
operator|=
name|__len
operator|>>
literal|1
expr_stmt|;
name|__middle
operator|=
name|__first
expr_stmt|;
name|advance
argument_list|(
name|__middle
argument_list|,
name|__half
argument_list|)
expr_stmt|;
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__middle
argument_list|,
name|__val
argument_list|)
condition|)
block|{
name|__first
operator|=
name|__middle
expr_stmt|;
operator|++
name|__first
expr_stmt|;
name|__len
operator|=
name|__len
operator|-
name|__half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|__len
operator|=
name|__half
expr_stmt|;
end_else

begin_expr_stmt
unit|}   return
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|_ForwardIter
name|lower_bound
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
return|return
name|__lower_bound
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|,
name|__comp
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
name|_ForwardIter
name|__upper_bound
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Distance
name|__len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__len
argument_list|)
block|;
name|_Distance
name|__half
block|;
name|_ForwardIter
name|__middle
block|;
while|while
condition|(
name|__len
operator|>
literal|0
condition|)
block|{
name|__half
operator|=
name|__len
operator|>>
literal|1
expr_stmt|;
name|__middle
operator|=
name|__first
expr_stmt|;
name|advance
argument_list|(
name|__middle
argument_list|,
name|__half
argument_list|)
expr_stmt|;
if|if
condition|(
name|__val
operator|<
operator|*
name|__middle
condition|)
name|__len
operator|=
name|__half
expr_stmt|;
else|else
block|{
name|__first
operator|=
name|__middle
expr_stmt|;
operator|++
name|__first
expr_stmt|;
name|__len
operator|=
name|__len
operator|-
name|__half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   return
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|_ForwardIter
name|upper_bound
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|)
block|{
return|return
name|__upper_bound
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|,
name|class
name|_Distance
operator|>
name|_ForwardIter
name|__upper_bound
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Compare __comp
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Distance
name|__len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__len
argument_list|)
block|;
name|_Distance
name|__half
block|;
name|_ForwardIter
name|__middle
block|;
while|while
condition|(
name|__len
operator|>
literal|0
condition|)
block|{
name|__half
operator|=
name|__len
operator|>>
literal|1
expr_stmt|;
name|__middle
operator|=
name|__first
expr_stmt|;
name|advance
argument_list|(
name|__middle
argument_list|,
name|__half
argument_list|)
expr_stmt|;
if|if
condition|(
name|__comp
argument_list|(
name|__val
argument_list|,
operator|*
name|__middle
argument_list|)
condition|)
name|__len
operator|=
name|__half
expr_stmt|;
else|else
block|{
name|__first
operator|=
name|__middle
expr_stmt|;
operator|++
name|__first
expr_stmt|;
name|__len
operator|=
name|__len
operator|-
name|__half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   return
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|_ForwardIter
name|upper_bound
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
return|return
name|__upper_bound
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|,
name|__comp
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
name|pair
operator|<
name|_ForwardIter
operator|,
name|_ForwardIter
operator|>
name|__equal_range
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Distance
name|__len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__len
argument_list|)
block|;
name|_Distance
name|__half
block|;
name|_ForwardIter
name|__middle
block|,
name|__left
block|,
name|__right
block|;
while|while
condition|(
name|__len
operator|>
literal|0
condition|)
block|{
name|__half
operator|=
name|__len
operator|>>
literal|1
expr_stmt|;
name|__middle
operator|=
name|__first
expr_stmt|;
name|advance
argument_list|(
name|__middle
argument_list|,
name|__half
argument_list|)
expr_stmt|;
if|if
condition|(
operator|*
name|__middle
operator|<
name|__val
condition|)
block|{
name|__first
operator|=
name|__middle
expr_stmt|;
operator|++
name|__first
expr_stmt|;
name|__len
operator|=
name|__len
operator|-
name|__half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__val
operator|<
operator|*
name|__middle
condition|)
name|__len
operator|=
name|__half
expr_stmt|;
end_elseif

begin_else
else|else
block|{
name|__left
operator|=
name|lower_bound
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__val
argument_list|)
expr_stmt|;
name|advance
argument_list|(
name|__first
argument_list|,
name|__len
argument_list|)
expr_stmt|;
name|__right
operator|=
name|upper_bound
argument_list|(
operator|++
name|__middle
argument_list|,
name|__first
argument_list|,
name|__val
argument_list|)
expr_stmt|;
return|return
name|pair
operator|<
name|_ForwardIter
operator|,
name|_ForwardIter
operator|>
operator|(
name|__left
operator|,
name|__right
operator|)
return|;
block|}
end_else

begin_expr_stmt
unit|}   return
name|pair
operator|<
name|_ForwardIter
operator|,
name|_ForwardIter
operator|>
operator|(
name|__first
operator|,
name|__first
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|pair
operator|<
name|_ForwardIter
operator|,
name|_ForwardIter
operator|>
name|equal_range
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|)
block|{
return|return
name|__equal_range
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|,
name|class
name|_Distance
operator|>
name|pair
operator|<
name|_ForwardIter
operator|,
name|_ForwardIter
operator|>
name|__equal_range
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Compare __comp
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Distance
name|__len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__len
argument_list|)
block|;
name|_Distance
name|__half
block|;
name|_ForwardIter
name|__middle
block|,
name|__left
block|,
name|__right
block|;
while|while
condition|(
name|__len
operator|>
literal|0
condition|)
block|{
name|__half
operator|=
name|__len
operator|>>
literal|1
expr_stmt|;
name|__middle
operator|=
name|__first
expr_stmt|;
name|advance
argument_list|(
name|__middle
argument_list|,
name|__half
argument_list|)
expr_stmt|;
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__middle
argument_list|,
name|__val
argument_list|)
condition|)
block|{
name|__first
operator|=
name|__middle
expr_stmt|;
operator|++
name|__first
expr_stmt|;
name|__len
operator|=
name|__len
operator|-
name|__half
operator|-
literal|1
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__comp
argument_list|(
name|__val
argument_list|,
operator|*
name|__middle
argument_list|)
condition|)
name|__len
operator|=
name|__half
expr_stmt|;
end_elseif

begin_else
else|else
block|{
name|__left
operator|=
name|lower_bound
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__val
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|advance
argument_list|(
name|__first
argument_list|,
name|__len
argument_list|)
expr_stmt|;
name|__right
operator|=
name|upper_bound
argument_list|(
operator|++
name|__middle
argument_list|,
name|__first
argument_list|,
name|__val
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
return|return
name|pair
operator|<
name|_ForwardIter
operator|,
name|_ForwardIter
operator|>
operator|(
name|__left
operator|,
name|__right
operator|)
return|;
block|}
end_else

begin_expr_stmt
unit|}   return
name|pair
operator|<
name|_ForwardIter
operator|,
name|_ForwardIter
operator|>
operator|(
name|__first
operator|,
name|__first
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}             template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|pair
operator|<
name|_ForwardIter
operator|,
name|_ForwardIter
operator|>
name|equal_range
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
return|return
name|__equal_range
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|,
name|__comp
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|>
name|bool
name|binary_search
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|)
block|{
name|_ForwardIter
name|__i
operator|=
name|lower_bound
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|)
block|;
return|return
name|__i
operator|!=
name|__last
operator|&&
operator|!
operator|(
name|__val
operator|<
operator|*
name|__i
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
name|bool
name|binary_search
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|const _Tp& __val
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_ForwardIter
name|__i
operator|=
name|lower_bound
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__val
argument_list|,
name|__comp
argument_list|)
block|;
return|return
name|__i
operator|!=
name|__last
operator|&&
operator|!
name|__comp
argument_list|(
name|__val
argument_list|,
operator|*
name|__i
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// merge, with and without an explicitly supplied comparison function.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|>
name|_OutputIter
name|merge
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
block|{
if|if
condition|(
operator|*
name|__first2
operator|<
operator|*
name|__first1
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first2
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|++
name|__result
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   return
name|copy
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|,
name|copy
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Compare
operator|>
name|_OutputIter
name|merge
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
block|{
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first2
argument_list|,
operator|*
name|__first1
argument_list|)
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first2
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|++
name|__result
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   return
name|copy
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|,
name|copy
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// inplace_merge and its auxiliary functions.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Distance
operator|>
name|void
name|__merge_without_buffer
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Distance __len1
argument_list|,
argument|_Distance __len2
argument_list|)
block|{
if|if
condition|(
name|__len1
operator|==
literal|0
operator|||
name|__len2
operator|==
literal|0
condition|)
return|return;
end_expr_stmt

begin_if
if|if
condition|(
name|__len1
operator|+
name|__len2
operator|==
literal|2
condition|)
block|{
if|if
condition|(
operator|*
name|__middle
operator|<
operator|*
name|__first
condition|)
name|iter_swap
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|)
expr_stmt|;
return|return;
block|}
end_if

begin_decl_stmt
name|_BidirectionalIter
name|__first_cut
init|=
name|__first
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_BidirectionalIter
name|__second_cut
init|=
name|__middle
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Distance
name|__len11
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Distance
name|__len22
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|__len1
operator|>
name|__len2
condition|)
block|{
name|__len11
operator|=
name|__len1
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|__first_cut
argument_list|,
name|__len11
argument_list|)
expr_stmt|;
name|__second_cut
operator|=
name|lower_bound
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
operator|*
name|__first_cut
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|__middle
argument_list|,
name|__second_cut
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|__len22
operator|=
name|__len2
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|__second_cut
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
name|__first_cut
operator|=
name|upper_bound
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
operator|*
name|__second_cut
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__first_cut
argument_list|,
name|__len11
argument_list|)
expr_stmt|;
block|}
end_if

begin_decl_stmt
name|_BidirectionalIter
name|__new_middle
init|=
name|rotate
argument_list|(
name|__first_cut
argument_list|,
name|__middle
argument_list|,
name|__second_cut
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|__first
argument_list|,
name|__first_cut
argument_list|,
name|__new_middle
argument_list|,
name|__len11
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|__new_middle
argument_list|,
name|__second_cut
argument_list|,
name|__last
argument_list|,
name|__len1
operator|-
name|__len11
argument_list|,
name|__len2
operator|-
name|__len22
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Compare
operator|>
name|void
name|__merge_without_buffer
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Distance __len1
argument_list|,
argument|_Distance __len2
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__len1
operator|==
literal|0
operator|||
name|__len2
operator|==
literal|0
condition|)
return|return;
end_expr_stmt

begin_if
if|if
condition|(
name|__len1
operator|+
name|__len2
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__middle
argument_list|,
operator|*
name|__first
argument_list|)
condition|)
name|iter_swap
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|)
expr_stmt|;
return|return;
block|}
end_if

begin_decl_stmt
name|_BidirectionalIter
name|__first_cut
init|=
name|__first
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_BidirectionalIter
name|__second_cut
init|=
name|__middle
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Distance
name|__len11
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Distance
name|__len22
init|=
literal|0
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|__len1
operator|>
name|__len2
condition|)
block|{
name|__len11
operator|=
name|__len1
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|__first_cut
argument_list|,
name|__len11
argument_list|)
expr_stmt|;
name|__second_cut
operator|=
name|lower_bound
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
operator|*
name|__first_cut
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|__middle
argument_list|,
name|__second_cut
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|__len22
operator|=
name|__len2
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|__second_cut
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
name|__first_cut
operator|=
name|upper_bound
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
operator|*
name|__second_cut
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__first_cut
argument_list|,
name|__len11
argument_list|)
expr_stmt|;
block|}
end_if

begin_decl_stmt
name|_BidirectionalIter
name|__new_middle
init|=
name|rotate
argument_list|(
name|__first_cut
argument_list|,
name|__middle
argument_list|,
name|__second_cut
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|__first
argument_list|,
name|__first_cut
argument_list|,
name|__new_middle
argument_list|,
name|__len11
argument_list|,
name|__len22
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__merge_without_buffer
argument_list|(
name|__new_middle
argument_list|,
name|__second_cut
argument_list|,
name|__last
argument_list|,
name|__len1
operator|-
name|__len11
argument_list|,
name|__len2
operator|-
name|__len22
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter1
operator|,
name|class
name|_BidirectionalIter2
operator|,
name|class
name|_Distance
operator|>
name|_BidirectionalIter1
name|__rotate_adaptive
argument_list|(
argument|_BidirectionalIter1 __first
argument_list|,
argument|_BidirectionalIter1 __middle
argument_list|,
argument|_BidirectionalIter1 __last
argument_list|,
argument|_Distance __len1
argument_list|,
argument|_Distance __len2
argument_list|,
argument|_BidirectionalIter2 __buffer
argument_list|,
argument|_Distance __buffer_size
argument_list|)
block|{
name|_BidirectionalIter2
name|__buffer_end
block|;
if|if
condition|(
name|__len1
operator|>
name|__len2
operator|&&
name|__len2
operator|<=
name|__buffer_size
condition|)
block|{
name|__buffer_end
operator|=
name|copy
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|)
expr_stmt|;
name|copy_backward
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|copy
argument_list|(
name|__buffer
argument_list|,
name|__buffer_end
argument_list|,
name|__first
argument_list|)
return|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__len1
operator|<=
name|__buffer_size
condition|)
block|{
name|__buffer_end
operator|=
name|copy
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__first
argument_list|)
expr_stmt|;
return|return
name|copy_backward
argument_list|(
name|__buffer
argument_list|,
name|__buffer_end
argument_list|,
name|__last
argument_list|)
return|;
block|}
end_elseif

begin_else
else|else
return|return
name|rotate
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|)
return|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter1
operator|,
name|class
name|_BidirectionalIter2
operator|,
name|class
name|_BidirectionalIter3
operator|>
name|_BidirectionalIter3
name|__merge_backward
argument_list|(
argument|_BidirectionalIter1 __first1
argument_list|,
argument|_BidirectionalIter1 __last1
argument_list|,
argument|_BidirectionalIter2 __first2
argument_list|,
argument|_BidirectionalIter2 __last2
argument_list|,
argument|_BidirectionalIter3 __result
argument_list|)
block|{
if|if
condition|(
name|__first1
operator|==
name|__last1
condition|)
return|return
name|copy_backward
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|,
name|__result
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|__first2
operator|==
name|__last2
condition|)
return|return
name|copy_backward
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
return|;
end_if

begin_expr_stmt
operator|--
name|__last1
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|__last2
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|true
condition|)
block|{
if|if
condition|(
operator|*
name|__last2
operator|<
operator|*
name|__last1
condition|)
block|{
operator|*
operator|--
name|__result
operator|=
operator|*
name|__last1
expr_stmt|;
if|if
condition|(
name|__first1
operator|==
name|__last1
condition|)
return|return
name|copy_backward
argument_list|(
name|__first2
argument_list|,
operator|++
name|__last2
argument_list|,
name|__result
argument_list|)
return|;
operator|--
name|__last1
expr_stmt|;
block|}
else|else
block|{
operator|*
operator|--
name|__result
operator|=
operator|*
name|__last2
expr_stmt|;
if|if
condition|(
name|__first2
operator|==
name|__last2
condition|)
return|return
name|copy_backward
argument_list|(
name|__first1
argument_list|,
operator|++
name|__last1
argument_list|,
name|__result
argument_list|)
return|;
operator|--
name|__last2
expr_stmt|;
block|}
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter1
operator|,
name|class
name|_BidirectionalIter2
operator|,
name|class
name|_BidirectionalIter3
operator|,
name|class
name|_Compare
operator|>
name|_BidirectionalIter3
name|__merge_backward
argument_list|(
argument|_BidirectionalIter1 __first1
argument_list|,
argument|_BidirectionalIter1 __last1
argument_list|,
argument|_BidirectionalIter2 __first2
argument_list|,
argument|_BidirectionalIter2 __last2
argument_list|,
argument|_BidirectionalIter3 __result
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__first1
operator|==
name|__last1
condition|)
return|return
name|copy_backward
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|,
name|__result
argument_list|)
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|__first2
operator|==
name|__last2
condition|)
return|return
name|copy_backward
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
return|;
end_if

begin_expr_stmt
operator|--
name|__last1
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|__last2
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
name|true
condition|)
block|{
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__last2
argument_list|,
operator|*
name|__last1
argument_list|)
condition|)
block|{
operator|*
operator|--
name|__result
operator|=
operator|*
name|__last1
expr_stmt|;
if|if
condition|(
name|__first1
operator|==
name|__last1
condition|)
return|return
name|copy_backward
argument_list|(
name|__first2
argument_list|,
operator|++
name|__last2
argument_list|,
name|__result
argument_list|)
return|;
operator|--
name|__last1
expr_stmt|;
block|}
else|else
block|{
operator|*
operator|--
name|__result
operator|=
operator|*
name|__last2
expr_stmt|;
if|if
condition|(
name|__first2
operator|==
name|__last2
condition|)
return|return
name|copy_backward
argument_list|(
name|__first1
argument_list|,
operator|++
name|__last1
argument_list|,
name|__result
argument_list|)
return|;
operator|--
name|__last2
expr_stmt|;
block|}
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Pointer
operator|>
name|void
name|__merge_adaptive
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Distance __len1
argument_list|,
argument|_Distance __len2
argument_list|,
argument|_Pointer __buffer
argument_list|,
argument|_Distance __buffer_size
argument_list|)
block|{
if|if
condition|(
name|__len1
operator|<=
name|__len2
operator|&&
name|__len1
operator|<=
name|__buffer_size
condition|)
block|{
name|_Pointer
name|__buffer_end
init|=
name|copy
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|__buffer
argument_list|,
name|__buffer_end
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__len2
operator|<=
name|__buffer_size
condition|)
block|{
name|_Pointer
name|__buffer_end
init|=
name|copy
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|)
decl_stmt|;
name|__merge_backward
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|,
name|__buffer_end
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
name|_BidirectionalIter
name|__first_cut
init|=
name|__first
decl_stmt|;
name|_BidirectionalIter
name|__second_cut
init|=
name|__middle
decl_stmt|;
name|_Distance
name|__len11
init|=
literal|0
decl_stmt|;
name|_Distance
name|__len22
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|__len1
operator|>
name|__len2
condition|)
block|{
name|__len11
operator|=
name|__len1
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|__first_cut
argument_list|,
name|__len11
argument_list|)
expr_stmt|;
name|__second_cut
operator|=
name|lower_bound
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
operator|*
name|__first_cut
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|__middle
argument_list|,
name|__second_cut
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|__len22
operator|=
name|__len2
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|__second_cut
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
name|__first_cut
operator|=
name|upper_bound
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
operator|*
name|__second_cut
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__first_cut
argument_list|,
name|__len11
argument_list|)
expr_stmt|;
block|}
name|_BidirectionalIter
name|__new_middle
init|=
name|__rotate_adaptive
argument_list|(
name|__first_cut
argument_list|,
name|__middle
argument_list|,
name|__second_cut
argument_list|,
name|__len1
operator|-
name|__len11
argument_list|,
name|__len22
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
decl_stmt|;
name|__merge_adaptive
argument_list|(
name|__first
argument_list|,
name|__first_cut
argument_list|,
name|__new_middle
argument_list|,
name|__len11
argument_list|,
name|__len22
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
expr_stmt|;
name|__merge_adaptive
argument_list|(
name|__new_middle
argument_list|,
name|__second_cut
argument_list|,
name|__last
argument_list|,
name|__len1
operator|-
name|__len11
argument_list|,
name|__len2
operator|-
name|__len22
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Pointer
operator|,
name|class
name|_Compare
operator|>
name|void
name|__merge_adaptive
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Distance __len1
argument_list|,
argument|_Distance __len2
argument_list|,
argument|_Pointer __buffer
argument_list|,
argument|_Distance __buffer_size
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__len1
operator|<=
name|__len2
operator|&&
name|__len1
operator|<=
name|__buffer_size
condition|)
block|{
name|_Pointer
name|__buffer_end
init|=
name|copy
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|)
decl_stmt|;
name|merge
argument_list|(
name|__buffer
argument_list|,
name|__buffer_end
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__first
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__len2
operator|<=
name|__buffer_size
condition|)
block|{
name|_Pointer
name|__buffer_end
init|=
name|copy
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__buffer
argument_list|)
decl_stmt|;
name|__merge_backward
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__buffer
argument_list|,
name|__buffer_end
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
name|_BidirectionalIter
name|__first_cut
init|=
name|__first
decl_stmt|;
name|_BidirectionalIter
name|__second_cut
init|=
name|__middle
decl_stmt|;
name|_Distance
name|__len11
init|=
literal|0
decl_stmt|;
name|_Distance
name|__len22
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|__len1
operator|>
name|__len2
condition|)
block|{
name|__len11
operator|=
name|__len1
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|__first_cut
argument_list|,
name|__len11
argument_list|)
expr_stmt|;
name|__second_cut
operator|=
name|lower_bound
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
operator|*
name|__first_cut
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|__middle
argument_list|,
name|__second_cut
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|__len22
operator|=
name|__len2
operator|/
literal|2
expr_stmt|;
name|advance
argument_list|(
name|__second_cut
argument_list|,
name|__len22
argument_list|)
expr_stmt|;
name|__first_cut
operator|=
name|upper_bound
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
operator|*
name|__second_cut
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__first_cut
argument_list|,
name|__len11
argument_list|)
expr_stmt|;
block|}
name|_BidirectionalIter
name|__new_middle
init|=
name|__rotate_adaptive
argument_list|(
name|__first_cut
argument_list|,
name|__middle
argument_list|,
name|__second_cut
argument_list|,
name|__len1
operator|-
name|__len11
argument_list|,
name|__len22
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|)
decl_stmt|;
name|__merge_adaptive
argument_list|(
name|__first
argument_list|,
name|__first_cut
argument_list|,
name|__new_middle
argument_list|,
name|__len11
argument_list|,
name|__len22
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__merge_adaptive
argument_list|(
name|__new_middle
argument_list|,
name|__second_cut
argument_list|,
name|__last
argument_list|,
name|__len1
operator|-
name|__len11
argument_list|,
name|__len2
operator|-
name|__len22
argument_list|,
name|__buffer
argument_list|,
name|__buffer_size
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__inplace_merge_aux
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Distance*
argument_list|)
block|{
name|_Distance
name|__len1
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__len1
argument_list|)
block|;
name|_Distance
name|__len2
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__len2
argument_list|)
block|;
name|_Temporary_buffer
operator|<
name|_BidirectionalIter
block|,
name|_Tp
operator|>
name|__buf
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|__buf
operator|.
name|begin
argument_list|()
operator|==
literal|0
condition|)
name|__merge_without_buffer
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__len1
argument_list|,
name|__len2
argument_list|)
expr_stmt|;
else|else
name|__merge_adaptive
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__len1
argument_list|,
name|__len2
argument_list|,
name|__buf
operator|.
name|begin
argument_list|()
argument_list|,
name|_Distance
argument_list|(
name|__buf
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|__inplace_merge_aux
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Distance*
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_Distance
name|__len1
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__len1
argument_list|)
block|;
name|_Distance
name|__len2
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__middle
argument_list|,
name|__last
argument_list|,
name|__len2
argument_list|)
block|;
name|_Temporary_buffer
operator|<
name|_BidirectionalIter
block|,
name|_Tp
operator|>
name|__buf
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|__buf
operator|.
name|begin
argument_list|()
operator|==
literal|0
condition|)
name|__merge_without_buffer
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__len1
argument_list|,
name|__len2
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
else|else
name|__merge_adaptive
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__len1
argument_list|,
name|__len2
argument_list|,
name|__buf
operator|.
name|begin
argument_list|()
argument_list|,
name|_Distance
argument_list|(
name|__buf
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_BidirectionalIter
operator|>
specifier|inline
name|void
name|inplace_merge
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__middle
operator|||
name|__middle
operator|==
name|__last
condition|)
return|return;
name|__inplace_merge_aux
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|inplace_merge
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __middle
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__middle
operator|||
name|__middle
operator|==
name|__last
condition|)
return|return;
name|__inplace_merge_aux
argument_list|(
name|__first
argument_list|,
name|__middle
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Set algorithms: includes, set_union, set_intersection, set_difference,
end_comment

begin_comment
comment|// set_symmetric_difference.  All of these algorithms have the precondition
end_comment

begin_comment
comment|// that their input ranges are sorted and the postcondition that their output
end_comment

begin_comment
comment|// ranges are sorted.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|>
name|bool
name|includes
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
operator|*
name|__first2
operator|<
operator|*
name|__first1
condition|)
return|return
name|false
return|;
elseif|else
if|if
condition|(
operator|*
name|__first1
operator|<
operator|*
name|__first2
condition|)
operator|++
name|__first1
expr_stmt|;
else|else
operator|++
name|__first1
operator|,
operator|++
name|__first2
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__first2
operator|==
name|__last2
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_Compare
operator|>
name|bool
name|includes
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first2
argument_list|,
operator|*
name|__first1
argument_list|)
condition|)
return|return
name|false
return|;
elseif|else
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__first2
argument_list|)
condition|)
operator|++
name|__first1
expr_stmt|;
else|else
operator|++
name|__first1
operator|,
operator|++
name|__first2
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__first2
operator|==
name|__last2
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|>
name|_OutputIter
name|set_union
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
block|{
if|if
condition|(
operator|*
name|__first1
operator|<
operator|*
name|__first2
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
operator|*
name|__first2
operator|<
operator|*
name|__first1
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first2
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|++
name|__result
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   return
name|copy
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|,
name|copy
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Compare
operator|>
name|_OutputIter
name|set_union
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
block|{
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__first2
argument_list|)
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first2
argument_list|,
operator|*
name|__first1
argument_list|)
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first2
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|++
name|__result
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   return
name|copy
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|,
name|copy
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|>
name|_OutputIter
name|set_intersection
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
operator|*
name|__first1
operator|<
operator|*
name|__first2
condition|)
operator|++
name|__first1
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
name|__first2
operator|<
operator|*
name|__first1
condition|)
operator|++
name|__first2
expr_stmt|;
else|else
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Compare
operator|>
name|_OutputIter
name|set_intersection
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__first2
argument_list|)
condition|)
operator|++
name|__first1
expr_stmt|;
elseif|else
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first2
argument_list|,
operator|*
name|__first1
argument_list|)
condition|)
operator|++
name|__first2
expr_stmt|;
else|else
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|>
name|_OutputIter
name|set_difference
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
operator|*
name|__first1
operator|<
operator|*
name|__first2
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
operator|*
name|__first2
operator|<
operator|*
name|__first1
condition|)
operator|++
name|__first2
expr_stmt|;
end_elseif

begin_else
else|else
block|{
operator|++
name|__first1
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_else

begin_return
return|return
name|copy
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Compare
operator|>
name|_OutputIter
name|set_difference
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__first2
argument_list|)
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first2
argument_list|,
operator|*
name|__first1
argument_list|)
condition|)
operator|++
name|__first2
expr_stmt|;
end_elseif

begin_else
else|else
block|{
operator|++
name|__first1
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_else

begin_return
return|return
name|copy
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|>
name|_OutputIter
name|set_symmetric_difference
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
operator|*
name|__first1
operator|<
operator|*
name|__first2
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
operator|*
name|__first2
operator|<
operator|*
name|__first1
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first2
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
operator|++
name|__first1
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_else

begin_return
return|return
name|copy
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|,
name|copy
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter1
operator|,
name|class
name|_InputIter2
operator|,
name|class
name|_OutputIter
operator|,
name|class
name|_Compare
operator|>
name|_OutputIter
name|set_symmetric_difference
argument_list|(
argument|_InputIter1 __first1
argument_list|,
argument|_InputIter1 __last1
argument_list|,
argument|_InputIter2 __first2
argument_list|,
argument|_InputIter2 __last2
argument_list|,
argument|_OutputIter __result
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__first2
argument_list|)
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first1
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first2
argument_list|,
operator|*
name|__first1
argument_list|)
condition|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first2
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
operator|++
name|__result
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
operator|++
name|__first1
expr_stmt|;
operator|++
name|__first2
expr_stmt|;
block|}
end_else

begin_return
return|return
name|copy
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|,
name|copy
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__result
argument_list|)
argument_list|)
return|;
end_return

begin_comment
unit|}
comment|// min_element and max_element, with and without an explicitly supplied
end_comment

begin_comment
comment|// comparison function.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_ForwardIter
operator|>
name|_ForwardIter
name|max_element
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
name|_ForwardIter
name|__result
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|__first
operator|!=
name|__last
condition|)
if|if
condition|(
operator|*
name|__result
operator|<
operator|*
name|__first
condition|)
name|__result
operator|=
name|__first
expr_stmt|;
end_while

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Compare
operator|>
name|_ForwardIter
name|max_element
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
name|_ForwardIter
name|__result
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|__first
operator|!=
name|__last
condition|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__result
argument_list|,
operator|*
name|__first
argument_list|)
condition|)
name|__result
operator|=
name|__first
expr_stmt|;
end_while

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|>
name|_ForwardIter
name|min_element
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
name|_ForwardIter
name|__result
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|__first
operator|!=
name|__last
condition|)
if|if
condition|(
operator|*
name|__first
operator|<
operator|*
name|__result
condition|)
name|__result
operator|=
name|__first
expr_stmt|;
end_while

begin_return
return|return
name|__result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_Compare
operator|>
name|_ForwardIter
name|min_element
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|__first
return|;
name|_ForwardIter
name|__result
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|__first
operator|!=
name|__last
condition|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
name|__result
argument_list|)
condition|)
name|__result
operator|=
name|__first
expr_stmt|;
end_while

begin_return
return|return
name|__result
return|;
end_return

begin_comment
unit|}
comment|// next_permutation and prev_permutation, with and without an explicitly
end_comment

begin_comment
comment|// supplied comparison function.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_BidirectionalIter
operator|>
name|bool
name|next_permutation
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|false
return|;
name|_BidirectionalIter
name|__i
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__i
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__i
operator|==
name|__last
condition|)
return|return
name|false
return|;
end_if

begin_expr_stmt
name|__i
operator|=
name|__last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|__i
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
condition|;
control|)
block|{
name|_BidirectionalIter
name|__ii
init|=
name|__i
decl_stmt|;
operator|--
name|__i
expr_stmt|;
if|if
condition|(
operator|*
name|__i
operator|<
operator|*
name|__ii
condition|)
block|{
name|_BidirectionalIter
name|__j
init|=
name|__last
decl_stmt|;
while|while
condition|(
operator|!
operator|(
operator|*
name|__i
operator|<
operator|*
operator|--
name|__j
operator|)
condition|)
block|{}
name|iter_swap
argument_list|(
name|__i
argument_list|,
name|__j
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|__ii
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|__i
operator|==
name|__first
condition|)
block|{
name|reverse
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Compare
operator|>
name|bool
name|next_permutation
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|false
return|;
name|_BidirectionalIter
name|__i
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__i
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__i
operator|==
name|__last
condition|)
return|return
name|false
return|;
end_if

begin_expr_stmt
name|__i
operator|=
name|__last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|__i
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
condition|;
control|)
block|{
name|_BidirectionalIter
name|__ii
init|=
name|__i
decl_stmt|;
operator|--
name|__i
expr_stmt|;
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__i
argument_list|,
operator|*
name|__ii
argument_list|)
condition|)
block|{
name|_BidirectionalIter
name|__j
init|=
name|__last
decl_stmt|;
while|while
condition|(
operator|!
name|__comp
argument_list|(
operator|*
name|__i
argument_list|,
operator|*
operator|--
name|__j
argument_list|)
condition|)
block|{}
name|iter_swap
argument_list|(
name|__i
argument_list|,
name|__j
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|__ii
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|__i
operator|==
name|__first
condition|)
block|{
name|reverse
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|>
name|bool
name|prev_permutation
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|false
return|;
name|_BidirectionalIter
name|__i
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__i
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__i
operator|==
name|__last
condition|)
return|return
name|false
return|;
end_if

begin_expr_stmt
name|__i
operator|=
name|__last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|__i
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
condition|;
control|)
block|{
name|_BidirectionalIter
name|__ii
init|=
name|__i
decl_stmt|;
operator|--
name|__i
expr_stmt|;
if|if
condition|(
operator|*
name|__ii
operator|<
operator|*
name|__i
condition|)
block|{
name|_BidirectionalIter
name|__j
init|=
name|__last
decl_stmt|;
while|while
condition|(
operator|!
operator|(
operator|*
operator|--
name|__j
operator|<
operator|*
name|__i
operator|)
condition|)
block|{}
name|iter_swap
argument_list|(
name|__i
argument_list|,
name|__j
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|__ii
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|__i
operator|==
name|__first
condition|)
block|{
name|reverse
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_for

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter
operator|,
name|class
name|_Compare
operator|>
name|bool
name|prev_permutation
argument_list|(
argument|_BidirectionalIter __first
argument_list|,
argument|_BidirectionalIter __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|false
return|;
name|_BidirectionalIter
name|__i
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|__i
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__i
operator|==
name|__last
condition|)
return|return
name|false
return|;
end_if

begin_expr_stmt
name|__i
operator|=
name|__last
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|--
name|__i
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
init|;
condition|;
control|)
block|{
name|_BidirectionalIter
name|__ii
init|=
name|__i
decl_stmt|;
operator|--
name|__i
expr_stmt|;
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__ii
argument_list|,
operator|*
name|__i
argument_list|)
condition|)
block|{
name|_BidirectionalIter
name|__j
init|=
name|__last
decl_stmt|;
while|while
condition|(
operator|!
name|__comp
argument_list|(
operator|*
operator|--
name|__j
argument_list|,
operator|*
name|__i
argument_list|)
condition|)
block|{}
name|iter_swap
argument_list|(
name|__i
argument_list|,
name|__j
argument_list|)
expr_stmt|;
name|reverse
argument_list|(
name|__ii
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
if|if
condition|(
name|__i
operator|==
name|__first
condition|)
block|{
name|reverse
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
return|return
name|false
return|;
block|}
block|}
end_for

begin_comment
unit|}
comment|// find_first_of, with and without an explicitly supplied comparison function.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_ForwardIter
operator|>
name|_InputIter
name|find_first_of
argument_list|(
argument|_InputIter __first1
argument_list|,
argument|_InputIter __last1
argument_list|,
argument|_ForwardIter __first2
argument_list|,
argument|_ForwardIter __last2
argument_list|)
block|{
for|for
control|(
init|;
name|__first1
operator|!=
name|__last1
condition|;
operator|++
name|__first1
control|)
for|for
control|(
name|_ForwardIter
name|__iter
init|=
name|__first2
init|;
name|__iter
operator|!=
name|__last2
condition|;
operator|++
name|__iter
control|)
if|if
condition|(
operator|*
name|__first1
operator|==
operator|*
name|__iter
condition|)
return|return
name|__first1
return|;
end_expr_stmt

begin_return
return|return
name|__last1
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_ForwardIter
operator|,
name|class
name|_BinaryPredicate
operator|>
name|_InputIter
name|find_first_of
argument_list|(
argument|_InputIter __first1
argument_list|,
argument|_InputIter __last1
argument_list|,
argument|_ForwardIter __first2
argument_list|,
argument|_ForwardIter __last2
argument_list|,
argument|_BinaryPredicate __comp
argument_list|)
block|{
for|for
control|(
init|;
name|__first1
operator|!=
name|__last1
condition|;
operator|++
name|__first1
control|)
for|for
control|(
name|_ForwardIter
name|__iter
init|=
name|__first2
init|;
name|__iter
operator|!=
name|__last2
condition|;
operator|++
name|__iter
control|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first1
argument_list|,
operator|*
name|__iter
argument_list|)
condition|)
return|return
name|__first1
return|;
end_expr_stmt

begin_return
return|return
name|__last1
return|;
end_return

begin_comment
unit|}
comment|// find_end, with and without an explicitly supplied comparison function.
end_comment

begin_comment
comment|// Search [first2, last2) as a subsequence in [first1, last1), and return
end_comment

begin_comment
comment|// the *last* possible match.  Note that find_end for bidirectional iterators
end_comment

begin_comment
comment|// is much faster than for forward iterators.
end_comment

begin_comment
comment|// find_end for forward iterators.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_ForwardIter1
operator|,
name|class
name|_ForwardIter2
operator|>
name|_ForwardIter1
name|__find_end
argument_list|(
argument|_ForwardIter1 __first1
argument_list|,
argument|_ForwardIter1 __last1
argument_list|,
argument|_ForwardIter2 __first2
argument_list|,
argument|_ForwardIter2 __last2
argument_list|,
argument|forward_iterator_tag
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|__first2
operator|==
name|__last2
condition|)
return|return
name|__last1
return|;
else|else
block|{
name|_ForwardIter1
name|__result
init|=
name|__last1
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|_ForwardIter1
name|__new_result
init|=
name|search
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__first2
argument_list|,
name|__last2
argument_list|)
decl_stmt|;
if|if
condition|(
name|__new_result
operator|==
name|__last1
condition|)
return|return
name|__result
return|;
else|else
block|{
name|__result
operator|=
name|__new_result
expr_stmt|;
name|__first1
operator|=
name|__new_result
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}   } }  template
operator|<
name|class
name|_ForwardIter1
operator|,
name|class
name|_ForwardIter2
operator|,
name|class
name|_BinaryPredicate
operator|>
name|_ForwardIter1
name|__find_end
argument_list|(
argument|_ForwardIter1 __first1
argument_list|,
argument|_ForwardIter1 __last1
argument_list|,
argument|_ForwardIter2 __first2
argument_list|,
argument|_ForwardIter2 __last2
argument_list|,
argument|forward_iterator_tag
argument_list|,
argument|forward_iterator_tag
argument_list|,
argument|_BinaryPredicate __comp
argument_list|)
block|{
if|if
condition|(
name|__first2
operator|==
name|__last2
condition|)
return|return
name|__last1
return|;
else|else
block|{
name|_ForwardIter1
name|__result
init|=
name|__last1
decl_stmt|;
while|while
condition|(
literal|1
condition|)
block|{
name|_ForwardIter1
name|__new_result
init|=
name|search
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__first2
argument_list|,
name|__last2
argument_list|,
name|__comp
argument_list|)
decl_stmt|;
if|if
condition|(
name|__new_result
operator|==
name|__last1
condition|)
return|return
name|__result
return|;
else|else
block|{
name|__result
operator|=
name|__new_result
expr_stmt|;
name|__first1
operator|=
name|__new_result
expr_stmt|;
operator|++
name|__first1
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}   } }
comment|// find_end for bidirectional iterators.  Requires partial specialization.
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_BidirectionalIter1
operator|,
name|class
name|_BidirectionalIter2
operator|>
name|_BidirectionalIter1
name|__find_end
argument_list|(
argument|_BidirectionalIter1 __first1
argument_list|,
argument|_BidirectionalIter1 __last1
argument_list|,
argument|_BidirectionalIter2 __first2
argument_list|,
argument|_BidirectionalIter2 __last2
argument_list|,
argument|bidirectional_iterator_tag
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
typedef|typedef
name|reverse_iterator
operator|<
name|_BidirectionalIter1
operator|>
name|_RevIter1
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|_BidirectionalIter2
operator|>
name|_RevIter2
expr_stmt|;
end_typedef

begin_function_decl
name|_RevIter1
name|__rlast1
parameter_list|(
name|__first1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_RevIter2
name|__rlast2
parameter_list|(
name|__first2
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|_RevIter1
name|__rresult
init|=
name|search
argument_list|(
name|_RevIter1
argument_list|(
name|__last1
argument_list|)
argument_list|,
name|__rlast1
argument_list|,
name|_RevIter2
argument_list|(
name|__last2
argument_list|)
argument_list|,
name|__rlast2
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|__rresult
operator|==
name|__rlast1
condition|)
return|return
name|__last1
return|;
else|else
block|{
name|_BidirectionalIter1
name|__result
init|=
name|__rresult
operator|.
name|base
argument_list|()
decl_stmt|;
name|advance
argument_list|(
name|__result
argument_list|,
operator|-
name|distance
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|__result
return|;
block|}
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_BidirectionalIter1
operator|,
name|class
name|_BidirectionalIter2
operator|,
name|class
name|_BinaryPredicate
operator|>
name|_BidirectionalIter1
name|__find_end
argument_list|(
argument|_BidirectionalIter1 __first1
argument_list|,
argument|_BidirectionalIter1 __last1
argument_list|,
argument|_BidirectionalIter2 __first2
argument_list|,
argument|_BidirectionalIter2 __last2
argument_list|,
argument|bidirectional_iterator_tag
argument_list|,
argument|bidirectional_iterator_tag
argument_list|,
argument|_BinaryPredicate __comp
argument_list|)
block|{
typedef|typedef
name|reverse_iterator
operator|<
name|_BidirectionalIter1
operator|>
name|_RevIter1
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|_BidirectionalIter2
operator|>
name|_RevIter2
expr_stmt|;
end_typedef

begin_function_decl
name|_RevIter1
name|__rlast1
parameter_list|(
name|__first1
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_RevIter2
name|__rlast2
parameter_list|(
name|__first2
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|_RevIter1
name|__rresult
init|=
name|search
argument_list|(
name|_RevIter1
argument_list|(
name|__last1
argument_list|)
argument_list|,
name|__rlast1
argument_list|,
name|_RevIter2
argument_list|(
name|__last2
argument_list|)
argument_list|,
name|__rlast2
argument_list|,
name|__comp
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|__rresult
operator|==
name|__rlast1
condition|)
return|return
name|__last1
return|;
else|else
block|{
name|_BidirectionalIter1
name|__result
init|=
name|__rresult
operator|.
name|base
argument_list|()
decl_stmt|;
name|advance
argument_list|(
name|__result
argument_list|,
operator|-
name|distance
argument_list|(
name|__first2
argument_list|,
name|__last2
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|__result
return|;
block|}
end_if

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_comment
comment|// Dispatching functions for find_end.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_ForwardIter1
operator|,
name|class
name|_ForwardIter2
operator|>
specifier|inline
name|_ForwardIter1
name|find_end
argument_list|(
argument|_ForwardIter1 __first1
argument_list|,
argument|_ForwardIter1 __last1
argument_list|,
argument|_ForwardIter2 __first2
argument_list|,
argument|_ForwardIter2 __last2
argument_list|)
block|{
return|return
name|__find_end
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__first2
argument_list|,
name|__last2
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first1
argument_list|)
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first2
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter1
operator|,
name|class
name|_ForwardIter2
operator|,
name|class
name|_BinaryPredicate
operator|>
specifier|inline
name|_ForwardIter1
name|find_end
argument_list|(
argument|_ForwardIter1 __first1
argument_list|,
argument|_ForwardIter1 __last1
argument_list|,
argument|_ForwardIter2 __first2
argument_list|,
argument|_ForwardIter2 __last2
argument_list|,
argument|_BinaryPredicate __comp
argument_list|)
block|{
return|return
name|__find_end
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|,
name|__first2
argument_list|,
name|__last2
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first1
argument_list|)
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first2
argument_list|)
argument_list|,
name|__comp
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// is_heap, a predicate testing whether or not a range is
end_comment

begin_comment
comment|// a heap.  This function is an extension, not part of the C++
end_comment

begin_comment
comment|// standard.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Distance
operator|>
name|bool
name|__is_heap
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_Distance __n
argument_list|)
block|{
name|_Distance
name|__parent
operator|=
literal|0
block|;
for|for
control|(
name|_Distance
name|__child
init|=
literal|1
init|;
name|__child
operator|<
name|__n
condition|;
operator|++
name|__child
control|)
block|{
if|if
condition|(
name|__first
index|[
name|__parent
index|]
operator|<
name|__first
index|[
name|__child
index|]
condition|)
return|return
name|false
return|;
if|if
condition|(
operator|(
name|__child
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
operator|++
name|__parent
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|true
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_Distance
operator|,
name|class
name|_StrictWeakOrdering
operator|>
name|bool
name|__is_heap
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_StrictWeakOrdering __comp
argument_list|,
argument|_Distance __n
argument_list|)
block|{
name|_Distance
name|__parent
operator|=
literal|0
block|;
for|for
control|(
name|_Distance
name|__child
init|=
literal|1
init|;
name|__child
operator|<
name|__n
condition|;
operator|++
name|__child
control|)
block|{
if|if
condition|(
name|__comp
argument_list|(
name|__first
index|[
name|__parent
index|]
argument_list|,
name|__first
index|[
name|__child
index|]
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
operator|(
name|__child
operator|&
literal|1
operator|)
operator|==
literal|0
condition|)
operator|++
name|__parent
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|true
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIter
operator|>
specifier|inline
name|bool
name|is_heap
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|)
block|{
return|return
name|__is_heap
argument_list|(
name|__first
argument_list|,
name|__last
operator|-
name|__first
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIter
operator|,
name|class
name|_StrictWeakOrdering
operator|>
specifier|inline
name|bool
name|is_heap
argument_list|(
argument|_RandomAccessIter __first
argument_list|,
argument|_RandomAccessIter __last
argument_list|,
argument|_StrictWeakOrdering __comp
argument_list|)
block|{
return|return
name|__is_heap
argument_list|(
name|__first
argument_list|,
name|__comp
argument_list|,
name|__last
operator|-
name|__first
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// is_sorted, a predicated testing whether a range is sorted in
end_comment

begin_comment
comment|// nondescending order.  This is an extension, not part of the C++
end_comment

begin_comment
comment|// standard.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIter
operator|>
name|bool
name|is_sorted
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|true
return|;
name|_ForwardIter
name|__next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
operator|++
name|__next
init|;
name|__next
operator|!=
name|__last
condition|;
name|__first
operator|=
name|__next
operator|,
operator|++
name|__next
control|)
block|{
if|if
condition|(
operator|*
name|__next
operator|<
operator|*
name|__first
condition|)
return|return
name|false
return|;
block|}
end_for

begin_return
return|return
name|true
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_ForwardIter
operator|,
name|class
name|_StrictWeakOrdering
operator|>
name|bool
name|is_sorted
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|_StrictWeakOrdering __comp
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return
name|true
return|;
name|_ForwardIter
name|__next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
operator|++
name|__next
init|;
name|__next
operator|!=
name|__last
condition|;
name|__first
operator|=
name|__next
operator|,
operator|++
name|__next
control|)
block|{
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__next
argument_list|,
operator|*
name|__first
argument_list|)
condition|)
return|return
name|false
return|;
block|}
end_for

begin_return
return|return
name|true
return|;
end_return

begin_if
unit|}
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1209
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_endif
unit|__STL_END_NAMESPACE
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_ALGO_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

