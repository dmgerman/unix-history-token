begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_MULTIMAP_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_MULTIMAP_H
end_define

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|set
name|woff
name|1174
endif|#
directive|endif
ifndef|#
directive|ifndef
name|__STL_LIMITED_DEFAULT_TEMPLATES
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|=
name|less
operator|<
name|Key
operator|>
operator|,
name|class
name|Alloc
operator|=
name|alloc
operator|>
else|#
directive|else
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Alloc
operator|=
name|alloc
operator|>
endif|#
directive|endif
name|class
name|multimap
block|{
name|public
operator|:
comment|// typedefs:
typedef|typedef
name|Key
name|key_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|data_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
name|mapped_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|pair
operator|<
specifier|const
name|Key
operator|,
name|T
operator|>
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Compare
name|key_compare
typedef|;
end_typedef

begin_decl_stmt
name|class
name|value_compare
range|:
name|public
name|binary_function
operator|<
name|value_type
decl_stmt|,
name|value_type
decl_stmt|,
name|bool
decl|>
block|{
name|friend
name|class
name|multimap
operator|<
name|Key
operator|,
name|T
operator|,
name|Compare
operator|,
name|Alloc
operator|>
expr_stmt|;
name|protected
label|:
name|Compare
name|comp
decl_stmt|;
name|value_compare
argument_list|(
argument|Compare c
argument_list|)
block|:
name|comp
argument_list|(
argument|c
argument_list|)
block|{}
name|public
label|:
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|value_type
operator|&
name|x
operator|,
specifier|const
name|value_type
operator|&
name|y
operator|)
specifier|const
block|{
return|return
name|comp
argument_list|(
name|x
operator|.
name|first
argument_list|,
name|y
operator|.
name|first
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_label
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|rb_tree
operator|<
name|key_type
operator|,
name|value_type
operator|,
name|select1st
operator|<
name|value_type
operator|>
operator|,
name|key_compare
operator|,
name|Alloc
operator|>
name|rep_type
expr_stmt|;
end_typedef

begin_decl_stmt
name|rep_type
name|t
decl_stmt|;
end_decl_stmt

begin_comment
comment|// red-black tree representing multimap
end_comment

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|const_pointer
name|const_pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|iterator
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|reverse_iterator
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|const_reverse_iterator
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|rep_type
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_comment
comment|// allocation/deallocation
end_comment

begin_expr_stmt
name|multimap
argument_list|()
operator|:
name|t
argument_list|(
argument|Compare()
argument_list|)
block|{ }
name|explicit
name|multimap
argument_list|(
specifier|const
name|Compare
operator|&
name|comp
argument_list|)
operator|:
name|t
argument_list|(
argument|comp
argument_list|)
block|{ }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|InputIterator
operator|>
name|multimap
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
operator|:
name|t
argument_list|(
argument|Compare()
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
name|template
operator|<
name|class
name|InputIterator
operator|>
name|multimap
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|const Compare& comp
argument_list|)
operator|:
name|t
argument_list|(
argument|comp
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
else|#
directive|else
name|multimap
argument_list|(
specifier|const
name|value_type
operator|*
name|first
argument_list|,
specifier|const
name|value_type
operator|*
name|last
argument_list|)
operator|:
name|t
argument_list|(
argument|Compare()
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
name|multimap
argument_list|(
specifier|const
name|value_type
operator|*
name|first
argument_list|,
specifier|const
name|value_type
operator|*
name|last
argument_list|,
specifier|const
name|Compare
operator|&
name|comp
argument_list|)
operator|:
name|t
argument_list|(
argument|comp
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
name|multimap
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
operator|:
name|t
argument_list|(
argument|Compare()
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
name|multimap
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|,
argument|const Compare& comp
argument_list|)
operator|:
name|t
argument_list|(
argument|comp
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|multimap
argument_list|(
specifier|const
name|multimap
operator|<
name|Key
argument_list|,
name|T
argument_list|,
name|Compare
argument_list|,
name|Alloc
operator|>
operator|&
name|x
argument_list|)
operator|:
name|t
argument_list|(
argument|x.t
argument_list|)
block|{ }
name|multimap
operator|<
name|Key
operator|,
name|T
operator|,
name|Compare
operator|,
name|Alloc
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|multimap
operator|<
name|Key
operator|,
name|T
operator|,
name|Compare
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|)
block|{
name|t
operator|=
name|x
operator|.
name|t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// accessors:
end_comment

begin_expr_stmt
name|key_compare
name|key_comp
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|key_comp
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|value_compare
name|value_comp
argument_list|()
specifier|const
block|{
return|return
name|value_compare
argument_list|(
name|t
operator|.
name|key_comp
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|t
operator|.
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|t
operator|.
name|end
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|t
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|t
operator|.
name|rend
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|rend
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|swap
argument_list|(
name|multimap
operator|<
name|Key
argument_list|,
name|T
argument_list|,
name|Compare
argument_list|,
name|Alloc
operator|>
operator|&
name|x
argument_list|)
block|{
name|t
operator|.
name|swap
argument_list|(
name|x
operator|.
name|t
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// insert/erase
end_comment

begin_function
name|iterator
name|insert
parameter_list|(
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|t
operator|.
name|insert_equal
argument_list|(
name|x
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|t
operator|.
name|insert_equal
argument_list|(
name|position
argument_list|,
name|x
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|;   }
else|#
directive|else
name|void
name|insert
argument_list|(
argument|const value_type* first
argument_list|,
argument|const value_type* last
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|;   }
name|void
name|insert
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
name|t
operator|.
name|insert_equal
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
block|;   }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|void
name|erase
argument_list|(
argument|iterator position
argument_list|)
block|{
name|t
operator|.
name|erase
argument_list|(
name|position
argument_list|)
block|; }
name|size_type
name|erase
argument_list|(
argument|const key_type& x
argument_list|)
block|{
return|return
name|t
operator|.
name|erase
argument_list|(
name|x
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
name|t
operator|.
name|erase
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
name|t
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|// multimap operations:
end_comment

begin_function
name|iterator
name|find
parameter_list|(
specifier|const
name|key_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|t
operator|.
name|find
argument_list|(
name|x
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|const_iterator
name|find
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|find
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|count
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|count
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|iterator
name|lower_bound
parameter_list|(
specifier|const
name|key_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|t
operator|.
name|lower_bound
argument_list|(
name|x
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|const_iterator
name|lower_bound
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|lower_bound
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|iterator
name|upper_bound
parameter_list|(
specifier|const
name|key_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|t
operator|.
name|upper_bound
argument_list|(
name|x
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|const_iterator
name|upper_bound
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|upper_bound
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|equal_range
argument_list|(
argument|const key_type& x
argument_list|)
block|{
return|return
name|t
operator|.
name|equal_range
argument_list|(
name|x
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pair
operator|<
name|const_iterator
operator|,
name|const_iterator
operator|>
name|equal_range
argument_list|(
argument|const key_type& x
argument_list|)
specifier|const
block|{
return|return
name|t
operator|.
name|equal_range
argument_list|(
name|x
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|multimap
operator|&
argument_list|,
specifier|const
name|multimap
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|<
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|multimap
operator|&
argument_list|,
specifier|const
name|multimap
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|multimap
operator|<
name|Key
operator|,
name|T
operator|,
name|Compare
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|,
specifier|const
name|multimap
operator|<
name|Key
operator|,
name|T
operator|,
name|Compare
operator|,
name|Alloc
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|t
operator|==
name|y
operator|.
name|t
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|multimap
operator|<
name|Key
operator|,
name|T
operator|,
name|Compare
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|,
specifier|const
name|multimap
operator|<
name|Key
operator|,
name|T
operator|,
name|Compare
operator|,
name|Alloc
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|t
operator|<
name|y
operator|.
name|t
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|T
operator|,
name|class
name|Compare
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|multimap<Key
argument_list|,
argument|T
argument_list|,
argument|Compare
argument_list|,
argument|Alloc>& x
argument_list|,
argument|multimap<Key
argument_list|,
argument|T
argument_list|,
argument|Compare
argument_list|,
argument|Alloc>& y
argument_list|)
block|{
name|x
operator|.
name|swap
argument_list|(
name|y
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_FUNCTION_TMPL_PARTIAL_ORDER */
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|reset
name|woff
name|1174
endif|#
directive|endif
name|__STL_END_NAMESPACE
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_MULTIMAP_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

