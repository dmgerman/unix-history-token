begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_VECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_VECTOR_H
end_define

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|set
name|woff
name|1174
endif|#
directive|endif
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|=
name|alloc
operator|>
name|class
name|vector
block|{
name|public
operator|:
typedef|typedef
name|T
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|iterator
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_iterator
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|,
name|value_type
operator|,
name|const_reference
operator|,
name|difference_type
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|,
name|value_type
operator|,
name|reference
operator|,
name|difference_type
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_label
name|protected
label|:
end_label

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|value_type
operator|,
name|Alloc
operator|>
name|data_allocator
expr_stmt|;
end_typedef

begin_decl_stmt
name|iterator
name|start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|finish
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|end_of_storage
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|insert_aux
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|deallocate
parameter_list|()
block|{
if|if
condition|(
name|start
condition|)
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|start
argument_list|,
name|end_of_storage
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|fill_initialize
parameter_list|(
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|value
parameter_list|)
block|{
name|start
operator|=
name|allocate_and_fill
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|finish
operator|=
name|start
operator|+
name|n
expr_stmt|;
name|end_of_storage
operator|=
name|finish
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|start
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|start
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|finish
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|finish
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|end
argument_list|()
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|end_of_storage
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|==
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|)
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|vector
argument_list|()
operator|:
name|start
argument_list|(
literal|0
argument_list|)
operator|,
name|finish
argument_list|(
literal|0
argument_list|)
operator|,
name|end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
name|vector
argument_list|(
argument|size_type n
argument_list|,
argument|const T& value
argument_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
block|; }
name|vector
argument_list|(
argument|int n
argument_list|,
argument|const T& value
argument_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
block|; }
name|vector
argument_list|(
argument|long n
argument_list|,
argument|const T& value
argument_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
block|; }
name|explicit
name|vector
argument_list|(
argument|size_type n
argument_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|T
argument_list|()
argument_list|)
block|; }
name|vector
argument_list|(
argument|const vector<T
argument_list|,
argument|Alloc>& x
argument_list|)
block|{
name|start
operator|=
name|allocate_and_copy
argument_list|(
name|x
operator|.
name|end
argument_list|()
operator|-
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|)
block|;
name|finish
operator|=
name|start
operator|+
operator|(
name|x
operator|.
name|end
argument_list|()
operator|-
name|x
operator|.
name|begin
argument_list|()
operator|)
block|;
name|end_of_storage
operator|=
name|finish
block|;   }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|InputIterator
operator|>
name|vector
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
operator|:
name|start
argument_list|(
literal|0
argument_list|)
operator|,
name|finish
argument_list|(
literal|0
argument_list|)
operator|,
name|end_of_storage
argument_list|(
literal|0
argument_list|)
block|{
name|range_initialize
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|vector
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
name|start
operator|=
name|allocate_and_copy
argument_list|(
name|n
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
block|;
name|finish
operator|=
name|start
operator|+
name|n
block|;
name|end_of_storage
operator|=
name|finish
block|;   }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
operator|~
name|vector
argument_list|()
block|{
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
block|;
name|deallocate
argument_list|()
block|;   }
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_function
name|void
name|reserve
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
if|if
condition|(
name|capacity
argument_list|()
operator|<
name|n
condition|)
block|{
specifier|const
name|size_type
name|old_size
init|=
name|size
argument_list|()
decl_stmt|;
name|iterator
name|tmp
init|=
name|allocate_and_copy
argument_list|(
name|n
argument_list|,
name|start
argument_list|,
name|finish
argument_list|)
decl_stmt|;
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|start
operator|=
name|tmp
expr_stmt|;
name|finish
operator|=
name|tmp
operator|+
name|old_size
expr_stmt|;
name|end_of_storage
operator|=
name|start
operator|+
name|n
expr_stmt|;
block|}
block|}
end_function

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
if|if
condition|(
name|finish
operator|!=
name|end_of_storage
condition|)
block|{
name|construct
argument_list|(
name|finish
argument_list|,
name|x
argument_list|)
expr_stmt|;
operator|++
name|finish
expr_stmt|;
block|}
else|else
name|insert_aux
argument_list|(
name|end
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|swap
argument_list|(
name|vector
operator|<
name|T
argument_list|,
name|Alloc
operator|>
operator|&
name|x
argument_list|)
block|{
name|__STD
operator|::
name|swap
argument_list|(
name|start
argument_list|,
name|x
operator|.
name|start
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|finish
argument_list|,
name|x
operator|.
name|finish
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|end_of_storage
argument_list|,
name|x
operator|.
name|end_of_storage
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|size_type
name|n
init|=
name|position
operator|-
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|finish
operator|!=
name|end_of_storage
operator|&&
name|position
operator|==
name|end
argument_list|()
condition|)
block|{
name|construct
argument_list|(
name|finish
argument_list|,
name|x
argument_list|)
expr_stmt|;
operator|++
name|finish
expr_stmt|;
block|}
else|else
name|insert_aux
argument_list|(
name|position
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|begin
argument_list|()
operator|+
name|n
return|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|position
argument_list|,
name|T
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
name|range_insert
argument_list|(
name|position
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|void
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
operator|(
name|size_type
operator|)
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|long
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
operator|(
name|size_type
operator|)
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
operator|--
name|finish
expr_stmt|;
name|destroy
argument_list|(
name|finish
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
if|if
condition|(
name|position
operator|+
literal|1
operator|!=
name|end
argument_list|()
condition|)
name|copy
argument_list|(
name|position
operator|+
literal|1
argument_list|,
name|finish
argument_list|,
name|position
argument_list|)
expr_stmt|;
operator|--
name|finish
expr_stmt|;
name|destroy
argument_list|(
name|finish
argument_list|)
expr_stmt|;
return|return
name|position
return|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
name|iterator
name|i
init|=
name|copy
argument_list|(
name|last
argument_list|,
name|finish
argument_list|,
name|first
argument_list|)
decl_stmt|;
name|destroy
argument_list|(
name|i
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|finish
operator|-
operator|(
name|last
operator|-
name|first
operator|)
expr_stmt|;
return|return
name|first
return|;
block|}
end_function

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
if|if
condition|(
name|new_size
operator|<
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|new_size
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|new_size
operator|-
name|size
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|)
block|{
name|resize
argument_list|(
name|new_size
argument_list|,
name|T
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_function
name|iterator
name|allocate_and_fill
parameter_list|(
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|iterator
name|result
init|=
name|data_allocator
operator|::
name|allocate
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_fill_n
argument_list|(
name|result
argument_list|,
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|__STL_UNWIND
argument_list|(
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|result
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|iterator
name|allocate_and_copy
argument_list|(
argument|size_type n
argument_list|,
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|)
block|{
name|iterator
name|result
operator|=
name|data_allocator
operator|::
name|allocate
argument_list|(
name|n
argument_list|)
block|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|)
block|;
return|return
name|result
return|;
block|}
name|__STL_UNWIND
argument_list|(
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|result
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_else
unit|}
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_macro
unit|iterator
name|allocate_and_copy
argument_list|(
argument|size_type n
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
end_macro

begin_block
block|{
name|iterator
name|result
init|=
name|data_allocator
operator|::
name|allocate
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|__STL_UNWIND
argument_list|(
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|result
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|range_initialize
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
name|push_back
argument_list|(
operator|*
name|first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
comment|// This function is only called by the constructor.  We have to worry
end_comment

begin_comment
comment|//  about resource leaks, but not about maintaining invariants.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|range_initialize
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
name|start
operator|=
name|allocate_and_copy
argument_list|(
name|n
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
block|;
name|finish
operator|=
name|start
operator|+
name|n
block|;
name|end_of_storage
operator|=
name|finish
block|;   }
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|range_insert
argument_list|(
argument|iterator pos
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|range_insert
argument_list|(
argument|iterator pos
argument_list|,
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|,
specifier|const
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|size
argument_list|()
operator|==
name|y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|,
specifier|const
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|,
name|y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|vector<T
argument_list|,
argument|Alloc>& x
argument_list|,
argument|vector<T
argument_list|,
argument|Alloc>& y
argument_list|)
block|{
name|x
operator|.
name|swap
argument_list|(
name|y
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_FUNCTION_TMPL_PARTIAL_ORDER */
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|&
name|x
operator|)
block|{
if|if
condition|(
operator|&
name|x
operator|!=
name|this
condition|)
block|{
if|if
condition|(
name|x
operator|.
name|size
argument_list|()
operator|>
name|capacity
argument_list|()
condition|)
block|{
name|iterator
name|tmp
init|=
name|allocate_and_copy
argument_list|(
name|x
operator|.
name|end
argument_list|()
operator|-
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|)
decl_stmt|;
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|start
operator|=
name|tmp
expr_stmt|;
name|end_of_storage
operator|=
name|start
operator|+
operator|(
name|x
operator|.
name|end
argument_list|()
operator|-
name|x
operator|.
name|begin
argument_list|()
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|size
argument_list|()
operator|>=
name|x
operator|.
name|size
argument_list|()
condition|)
block|{
name|iterator
name|i
init|=
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|begin
argument_list|()
argument_list|)
decl_stmt|;
name|destroy
argument_list|(
name|i
argument_list|,
name|finish
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|finish
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|finish
operator|=
name|start
operator|+
name|x
operator|.
name|size
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   return
operator|*
name|this
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|insert_aux
argument_list|(
argument|iterator position
argument_list|,
argument|const T& x
argument_list|)
block|{
if|if
condition|(
name|finish
operator|!=
name|end_of_storage
condition|)
block|{
name|construct
argument_list|(
name|finish
argument_list|,
operator|*
operator|(
name|finish
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
operator|++
name|finish
expr_stmt|;
name|T
name|x_copy
init|=
name|x
decl_stmt|;
name|copy_backward
argument_list|(
name|position
argument_list|,
name|finish
operator|-
literal|2
argument_list|,
name|finish
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|*
name|position
operator|=
name|x_copy
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
specifier|const
name|size_type
name|old_size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|const
name|size_type
name|len
init|=
name|old_size
operator|!=
literal|0
condition|?
literal|2
operator|*
name|old_size
else|:
literal|1
decl_stmt|;
name|iterator
name|new_start
init|=
name|data_allocator
operator|::
name|allocate
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|new_finish
init|=
name|new_start
decl_stmt|;
name|__STL_TRY
block|{
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|start
argument_list|,
name|position
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|construct
argument_list|(
name|new_finish
argument_list|,
name|x
argument_list|)
expr_stmt|;
operator|++
name|new_finish
expr_stmt|;
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|finish
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|destroy
argument_list|(
name|new_start
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|new_start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|throw
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __STL_USE_EXCEPTIONS */
name|destroy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|end_of_storage
operator|=
name|new_start
operator|+
name|len
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|size_type n
argument_list|,
argument|const T& x
argument_list|)
block|{
if|if
condition|(
name|n
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|size_type
argument_list|(
name|end_of_storage
operator|-
name|finish
argument_list|)
operator|>=
name|n
condition|)
block|{
name|T
name|x_copy
init|=
name|x
decl_stmt|;
specifier|const
name|size_type
name|elems_after
init|=
name|finish
operator|-
name|position
decl_stmt|;
name|iterator
name|old_finish
init|=
name|finish
decl_stmt|;
if|if
condition|(
name|elems_after
operator|>
name|n
condition|)
block|{
name|uninitialized_copy
argument_list|(
name|finish
operator|-
name|n
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|n
expr_stmt|;
name|copy_backward
argument_list|(
name|position
argument_list|,
name|old_finish
operator|-
name|n
argument_list|,
name|old_finish
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|position
argument_list|,
name|position
operator|+
name|n
argument_list|,
name|x_copy
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|uninitialized_fill_n
argument_list|(
name|finish
argument_list|,
name|n
operator|-
name|elems_after
argument_list|,
name|x_copy
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|n
operator|-
name|elems_after
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|old_finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|elems_after
expr_stmt|;
name|fill
argument_list|(
name|position
argument_list|,
name|old_finish
argument_list|,
name|x_copy
argument_list|)
expr_stmt|;
block|}
end_else

begin_block
unit|}     else
block|{
specifier|const
name|size_type
name|old_size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|const
name|size_type
name|len
init|=
name|old_size
operator|+
name|max
argument_list|(
name|old_size
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|iterator
name|new_start
init|=
name|data_allocator
operator|::
name|allocate
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|new_finish
init|=
name|new_start
decl_stmt|;
name|__STL_TRY
block|{
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|start
argument_list|,
name|position
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|new_finish
operator|=
name|uninitialized_fill_n
argument_list|(
name|new_finish
argument_list|,
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|finish
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|destroy
argument_list|(
name|new_start
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|new_start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|throw
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __STL_USE_EXCEPTIONS */
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|end_of_storage
operator|=
name|new_start
operator|+
name|len
expr_stmt|;
block|}
end_block

begin_ifdef
unit|} }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|range_insert
argument_list|(
argument|iterator pos
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
block|{
name|pos
operator|=
name|insert
argument_list|(
name|pos
argument_list|,
operator|*
name|first
argument_list|)
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|range_insert
argument_list|(
argument|iterator position
argument_list|,
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|first
operator|!=
name|last
condition|)
block|{
name|size_type
name|n
init|=
literal|0
decl_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|size_type
argument_list|(
name|end_of_storage
operator|-
name|finish
argument_list|)
operator|>=
name|n
condition|)
block|{
specifier|const
name|size_type
name|elems_after
init|=
name|finish
operator|-
name|position
decl_stmt|;
name|iterator
name|old_finish
init|=
name|finish
decl_stmt|;
if|if
condition|(
name|elems_after
operator|>
name|n
condition|)
block|{
name|uninitialized_copy
argument_list|(
name|finish
operator|-
name|n
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|n
expr_stmt|;
name|copy_backward
argument_list|(
name|position
argument_list|,
name|old_finish
operator|-
name|n
argument_list|,
name|old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|ForwardIterator
name|mid
init|=
name|first
decl_stmt|;
name|advance
argument_list|(
name|mid
argument_list|,
name|elems_after
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|mid
argument_list|,
name|last
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|n
operator|-
name|elems_after
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|old_finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|elems_after
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|mid
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
end_else

begin_block
unit|}     else
block|{
specifier|const
name|size_type
name|old_size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|const
name|size_type
name|len
init|=
name|old_size
operator|+
name|max
argument_list|(
name|old_size
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|iterator
name|new_start
init|=
name|data_allocator
operator|::
name|allocate
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|new_finish
init|=
name|new_start
decl_stmt|;
name|__STL_TRY
block|{
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|start
argument_list|,
name|position
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|finish
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|destroy
argument_list|(
name|new_start
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|new_start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|throw
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __STL_USE_EXCEPTIONS */
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|end_of_storage
operator|=
name|new_start
operator|+
name|len
expr_stmt|;
block|}
end_block

begin_else
unit|} }
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|>
name|void
name|vector
operator|<
name|T
operator|,
name|Alloc
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|!=
name|last
condition|)
block|{
name|size_type
name|n
init|=
literal|0
decl_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|size_type
argument_list|(
name|end_of_storage
operator|-
name|finish
argument_list|)
operator|>=
name|n
condition|)
block|{
specifier|const
name|size_type
name|elems_after
init|=
name|finish
operator|-
name|position
decl_stmt|;
name|iterator
name|old_finish
init|=
name|finish
decl_stmt|;
if|if
condition|(
name|elems_after
operator|>
name|n
condition|)
block|{
name|uninitialized_copy
argument_list|(
name|finish
operator|-
name|n
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|n
expr_stmt|;
name|copy_backward
argument_list|(
name|position
argument_list|,
name|old_finish
operator|-
name|n
argument_list|,
name|old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|uninitialized_copy
argument_list|(
name|first
operator|+
name|elems_after
argument_list|,
name|last
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|n
operator|-
name|elems_after
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|old_finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|elems_after
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|elems_after
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
end_else

begin_block
unit|}     else
block|{
specifier|const
name|size_type
name|old_size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|const
name|size_type
name|len
init|=
name|old_size
operator|+
name|max
argument_list|(
name|old_size
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|iterator
name|new_start
init|=
name|data_allocator
operator|::
name|allocate
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|new_finish
init|=
name|new_start
decl_stmt|;
name|__STL_TRY
block|{
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|start
argument_list|,
name|position
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
name|new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|finish
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|destroy
argument_list|(
name|new_start
argument_list|,
name|new_finish
argument_list|)
expr_stmt|;
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|new_start
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|throw
expr_stmt|;
block|}
endif|#
directive|endif
comment|/* __STL_USE_EXCEPTIONS */
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|end_of_storage
operator|=
name|new_start
operator|+
name|len
expr_stmt|;
block|}
end_block

begin_endif
unit|} }
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1174
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_VECTOR_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

