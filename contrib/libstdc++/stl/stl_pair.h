begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_PAIR_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_PAIR_H
end_define

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
name|template
operator|<
name|class
name|_T1
operator|,
name|class
name|_T2
operator|>
expr|struct
name|pair
block|{
typedef|typedef
name|_T1
name|first_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_T2
name|second_type
typedef|;
end_typedef

begin_decl_stmt
name|_T1
name|first
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_T2
name|second
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|pair
argument_list|()
operator|:
name|first
argument_list|(
name|_T1
argument_list|()
argument_list|)
operator|,
name|second
argument_list|(
argument|_T2()
argument_list|)
block|{}
name|pair
argument_list|(
specifier|const
name|_T1
operator|&
name|__a
argument_list|,
specifier|const
name|_T2
operator|&
name|__b
argument_list|)
operator|:
name|first
argument_list|(
name|__a
argument_list|)
operator|,
name|second
argument_list|(
argument|__b
argument_list|)
block|{}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|_U1
operator|,
name|class
name|_U2
operator|>
name|pair
argument_list|(
specifier|const
name|pair
operator|<
name|_U1
argument_list|,
name|_U2
operator|>
operator|&
name|__p
argument_list|)
operator|:
name|first
argument_list|(
name|__p
operator|.
name|first
argument_list|)
operator|,
name|second
argument_list|(
argument|__p.second
argument_list|)
block|{}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_T1
operator|,
name|class
name|_T2
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|pair
operator|<
name|_T1
operator|,
name|_T2
operator|>
operator|&
name|__x
operator|,
specifier|const
name|pair
operator|<
name|_T1
operator|,
name|_T2
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|first
operator|==
name|__y
operator|.
name|first
operator|&&
name|__x
operator|.
name|second
operator|==
name|__y
operator|.
name|second
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_T1
operator|,
name|class
name|_T2
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|pair
operator|<
name|_T1
operator|,
name|_T2
operator|>
operator|&
name|__x
operator|,
specifier|const
name|pair
operator|<
name|_T1
operator|,
name|_T2
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|first
operator|<
name|__y
operator|.
name|first
operator|||
operator|(
operator|!
operator|(
name|__y
operator|.
name|first
operator|<
name|__x
operator|.
name|first
operator|)
operator|&&
name|__x
operator|.
name|second
operator|<
name|__y
operator|.
name|second
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_T1
operator|,
name|class
name|_T2
operator|>
specifier|inline
name|pair
operator|<
name|_T1
operator|,
name|_T2
operator|>
name|make_pair
argument_list|(
argument|const _T1& __x
argument_list|,
argument|const _T2& __y
argument_list|)
block|{
return|return
name|pair
operator|<
name|_T1
operator|,
name|_T2
operator|>
operator|(
name|__x
operator|,
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_PAIR_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

