begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_STACK_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_STACK_H
end_define

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
ifndef|#
directive|ifndef
name|__STL_LIMITED_DEFAULT_TEMPLATES
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Sequence
operator|=
name|deque
operator|<
name|T
operator|>
expr|>
else|#
directive|else
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Sequence
operator|>
endif|#
directive|endif
name|class
name|stack
block|{
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|stack
operator|&
argument_list|,
specifier|const
name|stack
operator|&
argument_list|)
block|;
name|friend
name|bool
name|operator
operator|<
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|stack
operator|&
argument_list|,
specifier|const
name|stack
operator|&
argument_list|)
block|;
name|public
operator|:
typedef|typedef
name|typename
name|Sequence
operator|::
name|value_type
name|value_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Sequence
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Sequence
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Sequence
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|Sequence
name|c
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|top
parameter_list|()
block|{
return|return
name|c
operator|.
name|back
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|top
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|back
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push
parameter_list|(
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
name|c
operator|.
name|push_back
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop
parameter_list|()
block|{
name|c
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Sequence
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|stack
operator|<
name|T
operator|,
name|Sequence
operator|>
operator|&
name|x
operator|,
specifier|const
name|stack
operator|<
name|T
operator|,
name|Sequence
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|c
operator|==
name|y
operator|.
name|c
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Sequence
operator|>
name|bool
name|operator
operator|<
operator|(
specifier|const
name|stack
operator|<
name|T
operator|,
name|Sequence
operator|>
operator|&
name|x
operator|,
specifier|const
name|stack
operator|<
name|T
operator|,
name|Sequence
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|c
operator|<
name|y
operator|.
name|c
return|;
block|}
end_expr_stmt

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_STACK_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

