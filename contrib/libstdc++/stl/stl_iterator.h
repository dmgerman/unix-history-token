begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_ITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_ITERATOR_H
end_define

begin_macro
name|__STL_BEGIN_NAMESPACE
end_macro

begin_struct
struct|struct
name|input_iterator_tag
block|{}
struct|;
end_struct

begin_struct
struct|struct
name|output_iterator_tag
block|{}
struct|;
end_struct

begin_decl_stmt
name|struct
name|forward_iterator_tag
range|:
name|public
name|input_iterator_tag
block|{}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|bidirectional_iterator_tag
range|:
name|public
name|forward_iterator_tag
block|{}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|random_access_iterator_tag
range|:
name|public
name|bidirectional_iterator_tag
block|{}
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
expr|struct
name|input_iterator
block|{
typedef|typedef
name|input_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_struct
unit|};
struct|struct
name|output_iterator
block|{
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
typedef|typedef
name|void
name|value_type
typedef|;
typedef|typedef
name|void
name|difference_type
typedef|;
typedef|typedef
name|void
name|pointer
typedef|;
typedef|typedef
name|void
name|reference
typedef|;
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
expr|struct
name|forward_iterator
block|{
typedef|typedef
name|forward_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
expr|struct
name|bidirectional_iterator
block|{
typedef|typedef
name|bidirectional_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
expr|struct
name|random_access_iterator
block|{
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|__STL_USE_NAMESPACES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|Category
operator|,
name|class
name|T
operator|,
name|class
name|Distance
operator|=
name|ptrdiff_t
operator|,
name|class
name|Pointer
operator|=
name|T
operator|*
operator|,
name|class
name|Reference
operator|=
name|T
operator|&
operator|>
expr|struct
name|iterator
block|{
typedef|typedef
name|Category
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Pointer
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Reference
name|reference
typedef|;
end_typedef

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_NAMESPACES */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|Iterator
operator|>
expr|struct
name|iterator_traits
block|{
typedef|typedef
name|typename
name|Iterator
operator|::
name|iterator_category
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Iterator
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Iterator
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Iterator
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|Iterator
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|iterator_traits
operator|<
name|T
operator|*
operator|>
block|{
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|iterator_traits
operator|<
specifier|const
name|T
operator|*
operator|>
block|{
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Iterator
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|iterator_category
name|iterator_category
argument_list|(
argument|const Iterator&
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|iterator_category
name|category
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|category
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|Iterator
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|difference_type
operator|*
name|distance_type
argument_list|(
argument|const Iterator&
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|difference_type
operator|*
operator|>
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iterator
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|value_type
operator|*
name|value_type
argument_list|(
argument|const Iterator&
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|value_type
operator|*
operator|>
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|input_iterator_tag
name|iterator_category
argument_list|(
argument|const input_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|input_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|output_iterator_tag
name|iterator_category
parameter_list|(
specifier|const
name|output_iterator
modifier|&
parameter_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|forward_iterator_tag
name|iterator_category
argument_list|(
argument|const forward_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|forward_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bidirectional_iterator_tag
name|iterator_category
argument_list|(
argument|const bidirectional_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|bidirectional_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const random_access_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const T*
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const input_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const forward_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const bidirectional_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const random_access_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const T*
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const input_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const forward_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const bidirectional_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const random_access_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|ptrdiff_t
operator|*
name|distance_type
argument_list|(
argument|const T*
argument_list|)
block|{
return|return
operator|(
name|ptrdiff_t
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|__distance
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|Distance& n
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
operator|++
name|first
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|__distance
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|Distance& n
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|n
operator|+=
name|last
operator|-
name|first
block|; }
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|distance
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|Distance& n
argument_list|)
block|{
name|__distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
block|; }
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
name|template
operator|<
name|class
name|InputIterator
operator|>
specifier|inline
name|iterator_traits
operator|<
name|InputIterator
operator|>
operator|::
name|difference_type
name|__distance
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|iterator_traits
operator|<
name|InputIterator
operator|>
operator|::
name|difference_type
name|n
operator|=
literal|0
block|;
while|while
condition|(
name|first
operator|!=
name|last
condition|)
block|{
operator|++
name|first
expr_stmt|;
operator|++
name|n
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|n
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|>
specifier|inline
name|iterator_traits
operator|<
name|RandomAccessIterator
operator|>
operator|::
name|difference_type
name|__distance
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
return|return
name|last
operator|-
name|first
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
specifier|inline
name|iterator_traits
operator|<
name|InputIterator
operator|>
operator|::
name|difference_type
name|distance
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|InputIterator
operator|>
operator|::
name|iterator_category
name|category
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|category
argument_list|()
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|__advance
argument_list|(
argument|InputIterator& i
argument_list|,
argument|Distance n
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|n
operator|--
condition|)
operator|++
name|i
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|set
name|woff
name|1183
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|__advance
argument_list|(
argument|BidirectionalIterator& i
argument_list|,
argument|Distance n
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|n
operator|>=
literal|0
condition|)
while|while
condition|(
name|n
operator|--
condition|)
operator|++
name|i
expr_stmt|;
else|else
while|while
condition|(
name|n
operator|++
condition|)
operator|--
name|i
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1183
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|__advance
argument_list|(
argument|RandomAccessIterator& i
argument_list|,
argument|Distance n
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|i
operator|+=
name|n
block|; }
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|void
name|advance
argument_list|(
argument|InputIterator& i
argument_list|,
argument|Distance n
argument_list|)
block|{
name|__advance
argument_list|(
name|i
argument_list|,
name|n
argument_list|,
name|iterator_category
argument_list|(
name|i
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|Container
operator|>
name|class
name|back_insert_iterator
block|{
name|protected
operator|:
name|Container
operator|*
name|container
block|;
name|public
operator|:
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|reference
typedef|;
end_typedef

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|back_insert_iterator
argument_list|(
name|Container
operator|&
name|x
argument_list|)
operator|:
name|container
argument_list|(
argument|&x
argument_list|)
block|{}
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|typename
name|Container
operator|::
name|value_type
operator|&
name|value
operator|)
block|{
name|container
operator|->
name|push_back
argument_list|(
name|value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
specifier|inline
name|output_iterator_tag
name|iterator_category
argument_list|(
argument|const back_insert_iterator<Container>&
argument_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
specifier|inline
name|back_insert_iterator
operator|<
name|Container
operator|>
name|back_inserter
argument_list|(
argument|Container& x
argument_list|)
block|{
return|return
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|class
name|front_insert_iterator
block|{
name|protected
operator|:
name|Container
operator|*
name|container
block|;
name|public
operator|:
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|reference
typedef|;
end_typedef

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|front_insert_iterator
argument_list|(
name|Container
operator|&
name|x
argument_list|)
operator|:
name|container
argument_list|(
argument|&x
argument_list|)
block|{}
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|typename
name|Container
operator|::
name|value_type
operator|&
name|value
operator|)
block|{
name|container
operator|->
name|push_front
argument_list|(
name|value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
specifier|inline
name|output_iterator_tag
name|iterator_category
argument_list|(
argument|const front_insert_iterator<Container>&
argument_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
specifier|inline
name|front_insert_iterator
operator|<
name|Container
operator|>
name|front_inserter
argument_list|(
argument|Container& x
argument_list|)
block|{
return|return
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|class
name|insert_iterator
block|{
name|protected
operator|:
name|Container
operator|*
name|container
block|;
name|typename
name|Container
operator|::
name|iterator
name|iter
block|;
name|public
operator|:
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|reference
typedef|;
end_typedef

begin_macro
name|insert_iterator
argument_list|(
argument|Container& x
argument_list|,
argument|typename Container::iterator i
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|container
argument_list|(
operator|&
name|x
argument_list|)
operator|,
name|iter
argument_list|(
argument|i
argument_list|)
block|{}
name|insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|typename
name|Container
operator|::
name|value_type
operator|&
name|value
operator|)
block|{
name|iter
operator|=
name|container
operator|->
name|insert
argument_list|(
name|iter
argument_list|,
name|value
argument_list|)
block|;
operator|++
name|iter
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
specifier|inline
name|output_iterator_tag
name|iterator_category
argument_list|(
argument|const insert_iterator<Container>&
argument_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|,
name|class
name|Iterator
operator|>
specifier|inline
name|insert_iterator
operator|<
name|Container
operator|>
name|inserter
argument_list|(
argument|Container& x
argument_list|,
argument|Iterator i
argument_list|)
block|{
typedef|typedef
name|typename
name|Container
operator|::
name|iterator
name|iter
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|insert_iterator
operator|<
name|Container
operator|>
operator|(
name|x
operator|,
name|iter
argument_list|(
name|i
argument_list|)
operator|)
return|;
end_return

begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|__STL_LIMITED_DEFAULT_TEMPLATES
end_ifndef

begin_expr_stmt
unit|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|=
name|T
operator|&
operator|,
name|class
name|Distance
operator|=
name|ptrdiff_t
operator|>
else|#
directive|else
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
endif|#
directive|endif
name|class
name|reverse_bidirectional_iterator
block|{
typedef|typedef
name|reverse_bidirectional_iterator
operator|<
name|BidirectionalIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
name|self
expr_stmt|;
name|protected
operator|:
name|BidirectionalIterator
name|current
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|bidirectional_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Reference
name|reference
typedef|;
end_typedef

begin_macro
name|reverse_bidirectional_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|reverse_bidirectional_iterator
argument_list|(
argument|BidirectionalIterator x
argument_list|)
end_macro

begin_macro
unit|:
name|current
argument_list|(
argument|x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|BidirectionalIterator
name|base
argument_list|()
specifier|const
block|{
return|return
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|BidirectionalIterator
name|tmp
operator|=
name|current
block|;
return|return
operator|*
operator|--
name|tmp
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|--
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|++
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bidirectional_iterator_tag
name|iterator_category
argument_list|(
argument|const reverse_bidirectional_iterator<BidirectionalIterator
argument_list|,
argument|T
argument_list|,
argument|Reference
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|bidirectional_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const reverse_bidirectional_iterator<BidirectionalIterator
argument_list|,
argument|T
argument_list|,
argument|Reference
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const reverse_bidirectional_iterator<BidirectionalIterator
argument_list|,
argument|T
argument_list|,
argument|Reference
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|reverse_bidirectional_iterator
operator|<
name|BidirectionalIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_bidirectional_iterator
operator|<
name|BidirectionalIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_comment
comment|// This is the new version of reverse_iterator, as defined in the
end_comment

begin_comment
comment|//  draft C++ standard.  It relies on the iterator_traits template,
end_comment

begin_comment
comment|//  which in turn relies on partial specialization.  The class
end_comment

begin_comment
comment|//  reverse_bidirectional_iterator is no longer part of the draft
end_comment

begin_comment
comment|//  standard, but it is retained for backward compatibility.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|Iterator
operator|>
name|class
name|reverse_iterator
block|{
name|protected
operator|:
name|Iterator
name|current
block|;
name|public
operator|:
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|iterator_category
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|Iterator
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Iterator
name|iterator_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|Iterator
operator|>
name|self
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_macro
name|reverse_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|reverse_iterator
argument_list|(
argument|iterator_type x
argument_list|)
end_macro

begin_macro
unit|:
name|current
argument_list|(
argument|x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|reverse_iterator
argument_list|(
specifier|const
name|self
operator|&
name|x
argument_list|)
operator|:
name|current
argument_list|(
argument|x.current
argument_list|)
block|{}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|Iter
operator|>
name|reverse_iterator
argument_list|(
specifier|const
name|reverse_iterator
operator|<
name|Iter
operator|>
operator|&
name|x
argument_list|)
operator|:
name|current
argument_list|(
argument|x.current
argument_list|)
block|{}
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|iterator_type
name|base
argument_list|()
specifier|const
block|{
return|return
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|Iterator
name|tmp
operator|=
name|current
block|;
return|return
operator|*
operator|--
name|tmp
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|--
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|++
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
return|return
name|self
argument_list|(
name|current
operator|-
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|current
operator|-=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|-
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
return|return
name|self
argument_list|(
name|current
operator|+
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
name|current
operator|+=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Iterator
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iterator
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|.
name|base
argument_list|()
operator|<
name|x
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iterator
operator|>
specifier|inline
name|typename
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|.
name|base
argument_list|()
operator|-
name|x
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Iterator
operator|>
specifier|inline
name|reverse_iterator
operator|<
name|Iterator
operator|>
name|operator
operator|+
operator|(
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|::
name|difference_type
name|n
operator|,
specifier|const
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|&
name|x
operator|)
block|{
return|return
name|reverse_iterator
operator|<
name|Iterator
operator|>
operator|(
name|x
operator|.
name|base
argument_list|()
operator|-
name|n
operator|)
return|;
block|}
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_comment
comment|// This is the old version of reverse_iterator, as found in the original
end_comment

begin_comment
comment|//  HP STL.  It does not use partial specialization.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_LIMITED_DEFAULT_TEMPLATES
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|=
name|T
operator|&
operator|,
name|class
name|Distance
operator|=
name|ptrdiff_t
operator|>
else|#
directive|else
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
endif|#
directive|endif
name|class
name|reverse_iterator
block|{
typedef|typedef
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
name|self
expr_stmt|;
name|protected
operator|:
name|RandomAccessIterator
name|current
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Reference
name|reference
typedef|;
end_typedef

begin_macro
name|reverse_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|reverse_iterator
argument_list|(
argument|RandomAccessIterator x
argument_list|)
end_macro

begin_macro
unit|:
name|current
argument_list|(
argument|x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|RandomAccessIterator
name|base
argument_list|()
specifier|const
block|{
return|return
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|Reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
operator|(
name|current
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|--
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|++
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|+
operator|(
name|Distance
name|n
operator|)
specifier|const
block|{
return|return
name|self
argument_list|(
name|current
operator|-
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|+=
operator|(
name|Distance
name|n
operator|)
block|{
name|current
operator|-=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|-
operator|(
name|Distance
name|n
operator|)
specifier|const
block|{
return|return
name|self
argument_list|(
name|current
operator|+
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|-=
operator|(
name|Distance
name|n
operator|)
block|{
name|current
operator|+=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|Reference
name|operator
index|[]
argument_list|(
name|Distance
name|n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const reverse_iterator<RandomAccessIterator
argument_list|,
argument|T
argument_list|,
argument|Reference
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const reverse_iterator<RandomAccessIterator
argument_list|,
argument|T
argument_list|,
argument|Reference
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const reverse_iterator<RandomAccessIterator
argument_list|,
argument|T
argument_list|,
argument|Reference
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|base
argument_list|()
operator|==
name|y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|.
name|base
argument_list|()
operator|<
name|x
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
name|operator
operator|-
operator|(
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|.
name|base
argument_list|()
operator|-
name|x
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIter
operator|,
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Dist
operator|>
specifier|inline
name|reverse_iterator
operator|<
name|RandomAccessIter
operator|,
name|T
operator|,
name|Ref
operator|,
name|Dist
operator|>
name|operator
operator|+
operator|(
name|Dist
name|n
operator|,
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIter
operator|,
name|T
operator|,
name|Ref
operator|,
name|Dist
operator|>
operator|&
name|x
operator|)
block|{
return|return
name|reverse_iterator
operator|<
name|RandomAccessIter
operator|,
name|T
operator|,
name|Ref
operator|,
name|Dist
operator|>
operator|(
name|x
operator|.
name|base
argument_list|()
operator|-
name|n
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|=
name|ptrdiff_t
operator|>
name|class
name|istream_iterator
block|{
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|istream_iterator
operator|<
name|T
argument_list|,
name|Distance
operator|>
operator|&
name|x
argument_list|,
specifier|const
name|istream_iterator
operator|<
name|T
argument_list|,
name|Distance
operator|>
operator|&
name|y
argument_list|)
block|;
name|protected
operator|:
name|istream
operator|*
name|stream
block|;
name|T
name|value
block|;
name|bool
name|end_marker
block|;
name|void
name|read
argument_list|()
block|{
name|end_marker
operator|=
operator|(
operator|*
name|stream
operator|)
operator|?
name|true
operator|:
name|false
block|;
if|if
condition|(
name|end_marker
condition|)
operator|*
name|stream
operator|>>
name|value
expr_stmt|;
name|end_marker
operator|=
operator|(
operator|*
name|stream
operator|)
condition|?
name|true
else|:
name|false
block|;   }
name|public
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|input_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
name|istream_iterator
argument_list|()
operator|:
name|stream
argument_list|(
operator|&
name|cin
argument_list|)
operator|,
name|end_marker
argument_list|(
argument|false
argument_list|)
block|{}
name|istream_iterator
argument_list|(
name|istream
operator|&
name|s
argument_list|)
operator|:
name|stream
argument_list|(
argument|&s
argument_list|)
block|{
name|read
argument_list|()
block|; }
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|value
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|read
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|istream_iterator
operator|<
name|T
block|,
name|Distance
operator|>
name|tmp
operator|=
operator|*
name|this
block|;
name|read
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|input_iterator_tag
name|iterator_category
argument_list|(
argument|const istream_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|input_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const istream_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const istream_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|stream
operator|==
name|y
operator|.
name|stream
operator|&&
name|x
operator|.
name|end_marker
operator|==
name|y
operator|.
name|end_marker
operator|||
name|x
operator|.
name|end_marker
operator|==
name|false
operator|&&
name|y
operator|.
name|end_marker
operator|==
name|false
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ostream_iterator
block|{
name|protected
operator|:
name|ostream
operator|*
name|stream
block|;
specifier|const
name|char
operator|*
name|string
block|;
name|public
operator|:
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|reference
typedef|;
end_typedef

begin_expr_stmt
name|ostream_iterator
argument_list|(
name|ostream
operator|&
name|s
argument_list|)
operator|:
name|stream
argument_list|(
operator|&
name|s
argument_list|)
operator|,
name|string
argument_list|(
literal|0
argument_list|)
block|{}
name|ostream_iterator
argument_list|(
name|ostream
operator|&
name|s
argument_list|,
specifier|const
name|char
operator|*
name|c
argument_list|)
operator|:
name|stream
argument_list|(
operator|&
name|s
argument_list|)
operator|,
name|string
argument_list|(
argument|c
argument_list|)
block|{}
name|ostream_iterator
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|T
operator|&
name|value
operator|)
block|{
operator|*
name|stream
operator|<<
name|value
block|;
if|if
condition|(
name|string
condition|)
operator|*
name|stream
operator|<<
name|string
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}   ostream_iterator
operator|<
name|T
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ostream_iterator
operator|<
name|T
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ostream_iterator
operator|<
name|T
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|output_iterator_tag
name|iterator_category
argument_list|(
argument|const ostream_iterator<T>&
argument_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_ITERATOR_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

