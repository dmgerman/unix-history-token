begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996-1998  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_ITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_ITERATOR_H
end_define

begin_macro
name|__STL_BEGIN_NAMESPACE
end_macro

begin_struct
struct|struct
name|input_iterator_tag
block|{}
struct|;
end_struct

begin_struct
struct|struct
name|output_iterator_tag
block|{}
struct|;
end_struct

begin_decl_stmt
name|struct
name|forward_iterator_tag
range|:
name|public
name|input_iterator_tag
block|{}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|bidirectional_iterator_tag
range|:
name|public
name|forward_iterator_tag
block|{}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|struct
name|random_access_iterator_tag
range|:
name|public
name|bidirectional_iterator_tag
block|{}
decl_stmt|;
end_decl_stmt

begin_comment
comment|// The base classes input_iterator, output_iterator, forward_iterator,
end_comment

begin_comment
comment|// bidirectional_iterator, and random_access_iterator are not part of
end_comment

begin_comment
comment|// the C++ standard.  (they have been replaced by struct iterator.)
end_comment

begin_comment
comment|// They are included for backward compatibility with the HP STL.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
expr|struct
name|input_iterator
block|{
typedef|typedef
name|input_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_struct
unit|};
struct|struct
name|output_iterator
block|{
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
typedef|typedef
name|void
name|value_type
typedef|;
typedef|typedef
name|void
name|difference_type
typedef|;
typedef|typedef
name|void
name|pointer
typedef|;
typedef|typedef
name|void
name|reference
typedef|;
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
expr|struct
name|forward_iterator
block|{
typedef|typedef
name|forward_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
expr|struct
name|bidirectional_iterator
block|{
typedef|typedef
name|bidirectional_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
expr|struct
name|random_access_iterator
block|{
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|__STL_USE_NAMESPACES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_Category
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|=
name|ptrdiff_t
operator|,
name|class
name|_Pointer
operator|=
name|_Tp
operator|*
operator|,
name|class
name|_Reference
operator|=
name|_Tp
operator|&
operator|>
expr|struct
name|iterator
block|{
typedef|typedef
name|_Category
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Pointer
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Reference
name|reference
typedef|;
end_typedef

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_NAMESPACES */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_Iterator
operator|>
expr|struct
name|iterator_traits
block|{
typedef|typedef
name|typename
name|_Iterator
operator|::
name|iterator_category
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Iterator
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Iterator
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Iterator
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Iterator
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|iterator_traits
operator|<
name|_Tp
operator|*
operator|>
block|{
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|iterator_traits
operator|<
specifier|const
name|_Tp
operator|*
operator|>
block|{
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_comment
unit|};
comment|// The overloaded functions iterator_category, distance_type, and
end_comment

begin_comment
comment|// value_type are not part of the C++ standard.  (They have been
end_comment

begin_comment
comment|// replaced by struct iterator_traits.)  They are included for
end_comment

begin_comment
comment|// backward compatibility with the HP STL.
end_comment

begin_comment
comment|// We introduce internal names for these functions.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Iter
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|iterator_category
name|__iterator_category
argument_list|(
argument|const _Iter&
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|iterator_category
name|_Category
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Category
argument_list|()
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Iter
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|difference_type
operator|*
name|__distance_type
argument_list|(
argument|const _Iter&
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|difference_type
operator|*
operator|>
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Iter
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|value_type
operator|*
name|__value_type
argument_list|(
argument|const _Iter&
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|value_type
operator|*
operator|>
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Iter
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|iterator_category
name|iterator_category
argument_list|(
argument|const _Iter& __i
argument_list|)
block|{
return|return
name|__iterator_category
argument_list|(
name|__i
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Iter
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|difference_type
operator|*
name|distance_type
argument_list|(
argument|const _Iter& __i
argument_list|)
block|{
return|return
name|__distance_type
argument_list|(
name|__i
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Iter
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_Iter
operator|>
operator|::
name|value_type
operator|*
name|value_type
argument_list|(
argument|const _Iter& __i
argument_list|)
block|{
return|return
name|__value_type
argument_list|(
name|__i
argument_list|)
return|;
block|}
end_expr_stmt

begin_define
define|#
directive|define
name|__ITERATOR_CATEGORY
parameter_list|(
name|__i
parameter_list|)
value|__iterator_category(__i)
end_define

begin_define
define|#
directive|define
name|__DISTANCE_TYPE
parameter_list|(
name|__i
parameter_list|)
value|__distance_type(__i)
end_define

begin_define
define|#
directive|define
name|__VALUE_TYPE
parameter_list|(
name|__i
parameter_list|)
value|__value_type(__i)
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|input_iterator_tag
name|iterator_category
argument_list|(
argument|const input_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
name|input_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|output_iterator_tag
name|iterator_category
parameter_list|(
specifier|const
name|output_iterator
modifier|&
parameter_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|forward_iterator_tag
name|iterator_category
argument_list|(
argument|const forward_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
name|forward_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|bidirectional_iterator_tag
name|iterator_category
argument_list|(
argument|const bidirectional_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
name|bidirectional_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const random_access_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const _Tp*
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const input_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Tp
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const forward_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Tp
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const bidirectional_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Tp
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const random_access_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Tp
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const _Tp*
argument_list|)
block|{
return|return
operator|(
name|_Tp
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Distance
operator|*
name|distance_type
argument_list|(
argument|const input_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Distance
operator|*
name|distance_type
argument_list|(
argument|const forward_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Distance
operator|*
name|distance_type
argument_list|(
argument|const bidirectional_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Distance
operator|*
name|distance_type
argument_list|(
argument|const random_access_iterator<_Tp
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|ptrdiff_t
operator|*
name|distance_type
argument_list|(
argument|const _Tp*
argument_list|)
block|{
return|return
operator|(
name|ptrdiff_t
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Without partial specialization we can't use iterator_traits, so
end_comment

begin_comment
comment|// we must keep the old iterator query functions around.
end_comment

begin_define
define|#
directive|define
name|__ITERATOR_CATEGORY
parameter_list|(
name|__i
parameter_list|)
value|iterator_category(__i)
end_define

begin_define
define|#
directive|define
name|__DISTANCE_TYPE
parameter_list|(
name|__i
parameter_list|)
value|distance_type(__i)
end_define

begin_define
define|#
directive|define
name|__VALUE_TYPE
parameter_list|(
name|__i
parameter_list|)
value|value_type(__i)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__distance
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|_Distance& __n
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
operator|++
name|__first
expr_stmt|;
operator|++
name|__n
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__distance
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Distance& __n
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|__n
operator|+=
name|__last
operator|-
name|__first
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|distance
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|_Distance& __n
argument_list|)
block|{
name|__distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__n
argument_list|,
name|iterator_category
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
name|template
operator|<
name|class
name|_InputIterator
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|difference_type
name|__distance
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|typename
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|difference_type
name|__n
operator|=
literal|0
block|;
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
operator|++
name|__first
expr_stmt|;
operator|++
name|__n
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|__n
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIterator
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_RandomAccessIterator
operator|>
operator|::
name|difference_type
name|__distance
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
return|return
name|__last
operator|-
name|__first
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
specifier|inline
name|typename
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|difference_type
name|distance
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|iterator_category
name|_Category
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Category
argument_list|()
argument_list|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_InputIter
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__advance
argument_list|(
argument|_InputIter& __i
argument_list|,
argument|_Distance __n
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
while|while
condition|(
name|__n
operator|--
condition|)
operator|++
name|__i
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|set
name|woff
name|1183
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_BidirectionalIterator
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__advance
argument_list|(
argument|_BidirectionalIterator& __i
argument_list|,
argument|_Distance __n
argument_list|,
argument|bidirectional_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|__n
operator|>=
literal|0
condition|)
while|while
condition|(
name|__n
operator|--
condition|)
operator|++
name|__i
expr_stmt|;
else|else
while|while
condition|(
name|__n
operator|++
condition|)
operator|--
name|__i
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1183
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__advance
argument_list|(
argument|_RandomAccessIterator& __i
argument_list|,
argument|_Distance __n
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|__i
operator|+=
name|__n
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|advance
argument_list|(
argument|_InputIterator& __i
argument_list|,
argument|_Distance __n
argument_list|)
block|{
name|__advance
argument_list|(
name|__i
argument_list|,
name|__n
argument_list|,
name|iterator_category
argument_list|(
name|__i
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Container
operator|>
name|class
name|back_insert_iterator
block|{
name|protected
operator|:
name|_Container
operator|*
name|container
block|;
name|public
operator|:
typedef|typedef
name|_Container
name|container_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|reference
typedef|;
end_typedef

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|back_insert_iterator
argument_list|(
name|_Container
operator|&
name|__x
argument_list|)
operator|:
name|container
argument_list|(
argument|&__x
argument_list|)
block|{}
name|back_insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|typename
name|_Container
operator|::
name|value_type
operator|&
name|__value
operator|)
block|{
name|container
operator|->
name|push_back
argument_list|(
name|__value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|back_insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|back_insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|back_insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_Container
operator|>
specifier|inline
name|output_iterator_tag
name|iterator_category
argument_list|(
argument|const back_insert_iterator<_Container>&
argument_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Container
operator|>
specifier|inline
name|back_insert_iterator
operator|<
name|_Container
operator|>
name|back_inserter
argument_list|(
argument|_Container& __x
argument_list|)
block|{
return|return
name|back_insert_iterator
operator|<
name|_Container
operator|>
operator|(
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Container
operator|>
name|class
name|front_insert_iterator
block|{
name|protected
operator|:
name|_Container
operator|*
name|container
block|;
name|public
operator|:
typedef|typedef
name|_Container
name|container_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|reference
typedef|;
end_typedef

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|front_insert_iterator
argument_list|(
name|_Container
operator|&
name|__x
argument_list|)
operator|:
name|container
argument_list|(
argument|&__x
argument_list|)
block|{}
name|front_insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|typename
name|_Container
operator|::
name|value_type
operator|&
name|__value
operator|)
block|{
name|container
operator|->
name|push_front
argument_list|(
name|__value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|front_insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|front_insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|front_insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_Container
operator|>
specifier|inline
name|output_iterator_tag
name|iterator_category
argument_list|(
argument|const front_insert_iterator<_Container>&
argument_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Container
operator|>
specifier|inline
name|front_insert_iterator
operator|<
name|_Container
operator|>
name|front_inserter
argument_list|(
argument|_Container& __x
argument_list|)
block|{
return|return
name|front_insert_iterator
operator|<
name|_Container
operator|>
operator|(
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Container
operator|>
name|class
name|insert_iterator
block|{
name|protected
operator|:
name|_Container
operator|*
name|container
block|;
name|typename
name|_Container
operator|::
name|iterator
name|iter
block|;
name|public
operator|:
typedef|typedef
name|_Container
name|container_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|reference
typedef|;
end_typedef

begin_macro
name|insert_iterator
argument_list|(
argument|_Container& __x
argument_list|,
argument|typename _Container::iterator __i
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|container
argument_list|(
operator|&
name|__x
argument_list|)
operator|,
name|iter
argument_list|(
argument|__i
argument_list|)
block|{}
name|insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|typename
name|_Container
operator|::
name|value_type
operator|&
name|__value
operator|)
block|{
name|iter
operator|=
name|container
operator|->
name|insert
argument_list|(
name|iter
argument_list|,
name|__value
argument_list|)
block|;
operator|++
name|iter
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|insert_iterator
operator|<
name|_Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_Container
operator|>
specifier|inline
name|output_iterator_tag
name|iterator_category
argument_list|(
argument|const insert_iterator<_Container>&
argument_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Container
operator|,
name|class
name|_Iterator
operator|>
specifier|inline
name|insert_iterator
operator|<
name|_Container
operator|>
name|inserter
argument_list|(
argument|_Container& __x
argument_list|,
argument|_Iterator __i
argument_list|)
block|{
typedef|typedef
name|typename
name|_Container
operator|::
name|iterator
name|__iter
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|insert_iterator
operator|<
name|_Container
operator|>
operator|(
name|__x
operator|,
name|__iter
argument_list|(
name|__i
argument_list|)
operator|)
return|;
end_return

begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|__STL_LIMITED_DEFAULT_TEMPLATES
end_ifndef

begin_expr_stmt
unit|template
operator|<
name|class
name|_BidirectionalIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|=
name|_Tp
operator|&
operator|,
name|class
name|_Distance
operator|=
name|ptrdiff_t
operator|>
else|#
directive|else
name|template
operator|<
name|class
name|_BidirectionalIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
endif|#
directive|endif
name|class
name|reverse_bidirectional_iterator
block|{
typedef|typedef
name|reverse_bidirectional_iterator
operator|<
name|_BidirectionalIterator
operator|,
name|_Tp
operator|,
name|_Reference
operator|,
name|_Distance
operator|>
name|_Self
expr_stmt|;
name|protected
operator|:
name|_BidirectionalIterator
name|current
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|bidirectional_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Reference
name|reference
typedef|;
end_typedef

begin_macro
name|reverse_bidirectional_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|reverse_bidirectional_iterator
argument_list|(
argument|_BidirectionalIterator __x
argument_list|)
end_macro

begin_macro
unit|:
name|current
argument_list|(
argument|__x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|_BidirectionalIterator
name|base
argument_list|()
specifier|const
block|{
return|return
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|_BidirectionalIterator
name|__tmp
operator|=
name|current
block|;
return|return
operator|*
operator|--
name|__tmp
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|--
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|--
name|current
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|++
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|++
name|current
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_BidirectionalIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|bidirectional_iterator_tag
name|iterator_category
argument_list|(
argument|const reverse_bidirectional_iterator<_BidirectionalIterator
argument_list|,
argument|_Tp
argument_list|,
argument|_Reference
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
name|bidirectional_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_BidirectionalIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const reverse_bidirectional_iterator<_BidirectionalIterator
argument_list|,
argument|_Tp
argument_list|,
argument|_Reference
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Tp
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_BidirectionalIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Distance
operator|*
name|distance_type
argument_list|(
argument|const reverse_bidirectional_iterator<_BidirectionalIterator
argument_list|,
argument|_Tp
argument_list|,
argument|_Reference
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Distance
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_BiIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|reverse_bidirectional_iterator
operator|<
name|_BiIter
operator|,
name|_Tp
operator|,
name|_Ref
operator|,
name|_Distance
operator|>
operator|&
name|__x
operator|,
specifier|const
name|reverse_bidirectional_iterator
operator|<
name|_BiIter
operator|,
name|_Tp
operator|,
name|_Ref
operator|,
name|_Distance
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|base
argument_list|()
operator|==
name|__y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_comment
comment|// This is the new version of reverse_iterator, as defined in the
end_comment

begin_comment
comment|//  draft C++ standard.  It relies on the iterator_traits template,
end_comment

begin_comment
comment|//  which in turn relies on partial specialization.  The class
end_comment

begin_comment
comment|//  reverse_bidirectional_iterator is no longer part of the draft
end_comment

begin_comment
comment|//  standard, but it is retained for backward compatibility.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Iterator
operator|>
name|class
name|reverse_iterator
block|{
name|protected
operator|:
name|_Iterator
name|current
block|;
name|public
operator|:
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_Iterator
operator|>
operator|::
name|iterator_category
name|iterator_category
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_Iterator
operator|>
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_Iterator
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_Iterator
operator|>
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_Iterator
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Iterator
name|iterator_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|_Iterator
operator|>
name|_Self
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_macro
name|reverse_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|reverse_iterator
argument_list|(
argument|iterator_type __x
argument_list|)
end_macro

begin_macro
unit|:
name|current
argument_list|(
argument|__x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|reverse_iterator
argument_list|(
specifier|const
name|_Self
operator|&
name|__x
argument_list|)
operator|:
name|current
argument_list|(
argument|__x.current
argument_list|)
block|{}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|_Iter
operator|>
name|reverse_iterator
argument_list|(
specifier|const
name|reverse_iterator
operator|<
name|_Iter
operator|>
operator|&
name|__x
argument_list|)
operator|:
name|current
argument_list|(
argument|__x.base()
argument_list|)
block|{}
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|iterator_type
name|base
argument_list|()
specifier|const
block|{
return|return
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|_Iterator
name|__tmp
operator|=
name|current
block|;
return|return
operator|*
operator|--
name|__tmp
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|--
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|--
name|current
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|++
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|++
name|current
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|+
operator|(
name|difference_type
name|__n
operator|)
specifier|const
block|{
return|return
name|_Self
argument_list|(
name|current
operator|-
name|__n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|__n
operator|)
block|{
name|current
operator|-=
name|__n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|-
operator|(
name|difference_type
name|__n
operator|)
specifier|const
block|{
return|return
name|_Self
argument_list|(
name|current
operator|+
name|__n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|__n
operator|)
block|{
name|current
operator|+=
name|__n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|__n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|__n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Iterator
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|&
name|__x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|base
argument_list|()
operator|==
name|__y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Iterator
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|&
name|__x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|.
name|base
argument_list|()
operator|<
name|__x
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Iterator
operator|>
specifier|inline
name|typename
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|&
name|__x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|.
name|base
argument_list|()
operator|-
name|__x
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Iterator
operator|>
specifier|inline
name|reverse_iterator
operator|<
name|_Iterator
operator|>
name|operator
operator|+
operator|(
name|typename
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|::
name|difference_type
name|__n
operator|,
specifier|const
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|&
name|__x
operator|)
block|{
return|return
name|reverse_iterator
operator|<
name|_Iterator
operator|>
operator|(
name|__x
operator|.
name|base
argument_list|()
operator|-
name|__n
operator|)
return|;
block|}
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_comment
comment|// This is the old version of reverse_iterator, as found in the original
end_comment

begin_comment
comment|//  HP STL.  It does not use partial specialization.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_LIMITED_DEFAULT_TEMPLATES
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|=
name|_Tp
operator|&
operator|,
name|class
name|_Distance
operator|=
name|ptrdiff_t
operator|>
else|#
directive|else
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
endif|#
directive|endif
name|class
name|reverse_iterator
block|{
typedef|typedef
name|reverse_iterator
operator|<
name|_RandomAccessIterator
operator|,
name|_Tp
operator|,
name|_Reference
operator|,
name|_Distance
operator|>
name|_Self
expr_stmt|;
name|protected
operator|:
name|_RandomAccessIterator
name|current
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Distance
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Reference
name|reference
typedef|;
end_typedef

begin_macro
name|reverse_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|reverse_iterator
argument_list|(
argument|_RandomAccessIterator __x
argument_list|)
end_macro

begin_macro
unit|:
name|current
argument_list|(
argument|__x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|_RandomAccessIterator
name|base
argument_list|()
specifier|const
block|{
return|return
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
operator|(
name|current
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|--
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|--
name|current
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|++
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|++
name|current
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|+
operator|(
name|_Distance
name|__n
operator|)
specifier|const
block|{
return|return
name|_Self
argument_list|(
name|current
operator|-
name|__n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|+=
operator|(
name|_Distance
name|__n
operator|)
block|{
name|current
operator|-=
name|__n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|-
operator|(
name|_Distance
name|__n
operator|)
specifier|const
block|{
return|return
name|_Self
argument_list|(
name|current
operator|+
name|__n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|-=
operator|(
name|_Distance
name|__n
operator|)
block|{
name|current
operator|+=
name|__n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|_Reference
name|operator
index|[]
argument_list|(
name|_Distance
name|__n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|__n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const reverse_iterator<_RandomAccessIterator
argument_list|,
argument|_Tp
argument_list|,
argument|_Reference
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const reverse_iterator<_RandomAccessIterator
argument_list|,
argument|_Tp
argument_list|,
argument|_Reference
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Tp
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Distance
operator|*
name|distance_type
argument_list|(
argument|const reverse_iterator<_RandomAccessIterator
argument_list|,
argument|_Tp
argument_list|,
argument|_Reference
argument_list|,
argument|_Distance>&
argument_list|)
block|{
return|return
operator|(
name|_Distance
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|reverse_iterator
operator|<
name|_RandomAccessIterator
operator|,
name|_Tp
operator|,
name|_Reference
operator|,
name|_Distance
operator|>
operator|&
name|__x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|_RandomAccessIterator
operator|,
name|_Tp
operator|,
name|_Reference
operator|,
name|_Distance
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|base
argument_list|()
operator|==
name|__y
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|reverse_iterator
operator|<
name|_RandomAccessIterator
operator|,
name|_Tp
operator|,
name|_Reference
operator|,
name|_Distance
operator|>
operator|&
name|__x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|_RandomAccessIterator
operator|,
name|_Tp
operator|,
name|_Reference
operator|,
name|_Distance
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|.
name|base
argument_list|()
operator|<
name|__x
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Reference
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|_Distance
name|operator
operator|-
operator|(
specifier|const
name|reverse_iterator
operator|<
name|_RandomAccessIterator
operator|,
name|_Tp
operator|,
name|_Reference
operator|,
name|_Distance
operator|>
operator|&
name|__x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|_RandomAccessIterator
operator|,
name|_Tp
operator|,
name|_Reference
operator|,
name|_Distance
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|.
name|base
argument_list|()
operator|-
name|__x
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandAccIter
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Dist
operator|>
specifier|inline
name|reverse_iterator
operator|<
name|_RandAccIter
operator|,
name|_Tp
operator|,
name|_Ref
operator|,
name|_Dist
operator|>
name|operator
operator|+
operator|(
name|_Dist
name|__n
operator|,
specifier|const
name|reverse_iterator
operator|<
name|_RandAccIter
operator|,
name|_Tp
operator|,
name|_Ref
operator|,
name|_Dist
operator|>
operator|&
name|__x
operator|)
block|{
return|return
name|reverse_iterator
operator|<
name|_RandAccIter
operator|,
name|_Tp
operator|,
name|_Ref
operator|,
name|_Dist
operator|>
operator|(
name|__x
operator|.
name|base
argument_list|()
operator|-
name|__n
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_comment
comment|// When we have templatized iostreams, istream_iterator and ostream_iterator
end_comment

begin_comment
comment|// must be rewritten.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Dist
operator|=
name|ptrdiff_t
operator|>
name|class
name|istream_iterator
block|{
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|istream_iterator
operator|&
argument_list|,
specifier|const
name|istream_iterator
operator|&
argument_list|)
block|;
name|protected
operator|:
name|istream
operator|*
name|_M_stream
block|;
name|_Tp
name|_M_value
block|;
name|bool
name|_M_end_marker
block|;
name|void
name|_M_read
argument_list|()
block|{
name|_M_end_marker
operator|=
operator|(
operator|*
name|_M_stream
operator|)
operator|?
name|true
operator|:
name|false
block|;
if|if
condition|(
name|_M_end_marker
condition|)
operator|*
name|_M_stream
operator|>>
name|_M_value
expr_stmt|;
name|_M_end_marker
operator|=
operator|(
operator|*
name|_M_stream
operator|)
condition|?
name|true
else|:
name|false
block|;   }
name|public
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|input_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Dist
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_expr_stmt
name|istream_iterator
argument_list|()
operator|:
name|_M_stream
argument_list|(
operator|&
name|cin
argument_list|)
operator|,
name|_M_end_marker
argument_list|(
argument|false
argument_list|)
block|{}
name|istream_iterator
argument_list|(
name|istream
operator|&
name|__s
argument_list|)
operator|:
name|_M_stream
argument_list|(
argument|&__s
argument_list|)
block|{
name|_M_read
argument_list|()
block|; }
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|_M_value
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|istream_iterator
operator|<
name|_Tp
operator|,
name|_Dist
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|_M_read
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|istream_iterator
operator|<
name|_Tp
operator|,
name|_Dist
operator|>
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|istream_iterator
operator|<
name|_Tp
block|,
name|_Dist
operator|>
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_read
argument_list|()
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Dist
operator|>
specifier|inline
name|input_iterator_tag
name|iterator_category
argument_list|(
argument|const istream_iterator<_Tp
argument_list|,
argument|_Dist>&
argument_list|)
block|{
return|return
name|input_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Dist
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const istream_iterator<_Tp
argument_list|,
argument|_Dist>&
argument_list|)
block|{
return|return
operator|(
name|_Tp
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Dist
operator|>
specifier|inline
name|_Dist
operator|*
name|distance_type
argument_list|(
argument|const istream_iterator<_Tp
argument_list|,
argument|_Dist>&
argument_list|)
block|{
return|return
operator|(
name|_Dist
operator|*
operator|)
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|istream_iterator
operator|<
name|_Tp
operator|,
name|_Distance
operator|>
operator|&
name|__x
operator|,
specifier|const
name|istream_iterator
operator|<
name|_Tp
operator|,
name|_Distance
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|(
name|__x
operator|.
name|_M_stream
operator|==
name|__y
operator|.
name|_M_stream
operator|&&
name|__x
operator|.
name|_M_end_marker
operator|==
name|__y
operator|.
name|_M_end_marker
operator|)
operator|||
name|__x
operator|.
name|_M_end_marker
operator|==
name|false
operator|&&
name|__y
operator|.
name|_M_end_marker
operator|==
name|false
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|ostream_iterator
block|{
name|protected
operator|:
name|ostream
operator|*
name|_M_stream
block|;
specifier|const
name|char
operator|*
name|_M_string
block|;
name|public
operator|:
typedef|typedef
name|output_iterator_tag
name|iterator_category
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|void
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|void
name|reference
typedef|;
end_typedef

begin_expr_stmt
name|ostream_iterator
argument_list|(
name|ostream
operator|&
name|__s
argument_list|)
operator|:
name|_M_stream
argument_list|(
operator|&
name|__s
argument_list|)
operator|,
name|_M_string
argument_list|(
literal|0
argument_list|)
block|{}
name|ostream_iterator
argument_list|(
name|ostream
operator|&
name|__s
argument_list|,
specifier|const
name|char
operator|*
name|__c
argument_list|)
operator|:
name|_M_stream
argument_list|(
operator|&
name|__s
argument_list|)
operator|,
name|_M_string
argument_list|(
argument|__c
argument_list|)
block|{}
name|ostream_iterator
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|_Tp
operator|&
name|__value
operator|)
block|{
operator|*
name|_M_stream
operator|<<
name|__value
block|;
if|if
condition|(
name|_M_string
condition|)
operator|*
name|_M_stream
operator|<<
name|_M_string
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}   ostream_iterator
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ostream_iterator
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ostream_iterator
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|output_iterator_tag
name|iterator_category
argument_list|(
argument|const ostream_iterator<_Tp>&
argument_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_ITERATOR_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

