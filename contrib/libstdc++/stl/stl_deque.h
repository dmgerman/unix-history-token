begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_DEQUE_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_DEQUE_H
end_define

begin_comment
comment|/* Class invariants:  *  For any nonsingular iterator i:  *    i.node is the address of an element in the map array.  The  *      contents of i.node is a pointer to the beginning of a node.  *    i.first == *(i.node)   *    i.last  == i.first + node_size  *    i.cur is a pointer in the range [i.first, i.last).  NOTE:  *      the implication of this is that i.cur is always a dereferenceable  *      pointer, even if i is a past-the-end iterator.  *  Start and Finish are always nonsingular iterators.  NOTE: this means  *    that an empty deque must have one node, and that a deque  *    with N elements, where N is the buffer size, must have two nodes.  *  For every node other than start.node and finish.node, every element  *    in the node is an initialized object.  If start.node == finish.node,  *    then [start.cur, finish.cur) are initialized objects, and  *    the elements outside that range are uninitialized storage.  Otherwise,  *    [start.cur, start.last) and [finish.first, finish.cur) are initialized  *    objects, and [start.first, start.cur) and [finish.cur, finish.last)  *    are uninitialized storage.  *  [map, map + map_size) is a valid, non-empty range.    *  [start.node, finish.node] is a valid range contained within   *    [map, map + map_size).    *  A pointer in the range [map, map + map_size) points to an allocated  *    node if and only if the pointer is in the range [start.node, finish.node].  */
end_comment

begin_comment
comment|/*  * In previous versions of deque, node_size was fixed by the   * implementation.  In this version, however, users can select  * the node size.  Deque has three template parameters; the third,  * a number of type size_t, is the number of elements per node.  * If the third template parameter is 0 (which is the default),   * then deque will use a default node size.  *  * The only reason for using an alternate node size is if your application  * requires a different performance tradeoff than the default.  If,  * for example, your program contains many deques each of which contains  * only a few elements, then you might want to save memory (possibly  * by sacrificing some speed) by using smaller nodes.  *  * Unfortunately, some compilers have trouble with non-type template   * parameters; stl_config.h defines __STL_NON_TYPE_TMPL_PARAM_BUG if  * that is the case.  If your compiler is one of them, then you will  * not be able to use alternate node sizes; you will have to use the  * default value.  */
end_comment

begin_function
name|__STL_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|set
name|woff
name|1174
endif|#
directive|endif
comment|// Note: this function is simply a kludge to work around several compilers'
comment|//  bugs in handling constant expressions.
specifier|inline
name|size_t
name|__deque_buf_size
parameter_list|(
name|size_t
name|n
parameter_list|,
name|size_t
name|sz
parameter_list|)
block|{
return|return
name|n
operator|!=
literal|0
condition|?
name|n
else|:
operator|(
name|sz
operator|<
literal|512
condition|?
name|size_t
argument_list|(
literal|512
operator|/
name|sz
argument_list|)
else|:
name|size_t
argument_list|(
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|,
name|size_t
name|BufSiz
operator|>
expr|struct
name|__deque_iterator
block|{
typedef|typedef
name|__deque_iterator
operator|<
name|T
operator|,
name|T
operator|&
operator|,
name|T
operator|*
operator|,
name|BufSiz
operator|>
name|iterator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|__deque_iterator
operator|<
name|T
operator|,
specifier|const
name|T
operator|&
operator|,
specifier|const
name|T
operator|*
operator|,
name|BufSiz
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_function
specifier|static
name|size_t
name|buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
name|BufSiz
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|>
expr|struct
name|__deque_iterator
block|{
typedef|typedef
name|__deque_iterator
operator|<
name|T
operator|,
name|T
operator|&
operator|,
name|T
operator|*
operator|>
name|iterator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|__deque_iterator
operator|<
name|T
operator|,
specifier|const
name|T
operator|&
operator|,
specifier|const
name|T
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_function
specifier|static
name|size_t
name|buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Ptr
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Ref
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|*
modifier|*
name|map_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__deque_iterator
name|self
typedef|;
end_typedef

begin_decl_stmt
name|T
modifier|*
name|cur
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|T
modifier|*
name|first
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|T
modifier|*
name|last
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|map_pointer
name|node
decl_stmt|;
end_decl_stmt

begin_macro
name|__deque_iterator
argument_list|(
argument|T* x
argument_list|,
argument|map_pointer y
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|cur
argument_list|(
name|x
argument_list|)
operator|,
name|first
argument_list|(
operator|*
name|y
argument_list|)
operator|,
name|last
argument_list|(
operator|*
name|y
operator|+
name|buffer_size
argument_list|()
argument_list|)
operator|,
name|node
argument_list|(
argument|y
argument_list|)
block|{}
name|__deque_iterator
argument_list|()
operator|:
name|cur
argument_list|(
literal|0
argument_list|)
operator|,
name|first
argument_list|(
literal|0
argument_list|)
operator|,
name|last
argument_list|(
literal|0
argument_list|)
operator|,
name|node
argument_list|(
literal|0
argument_list|)
block|{}
name|__deque_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|x
argument_list|)
operator|:
name|cur
argument_list|(
name|x
operator|.
name|cur
argument_list|)
operator|,
name|first
argument_list|(
name|x
operator|.
name|first
argument_list|)
operator|,
name|last
argument_list|(
name|x
operator|.
name|last
argument_list|)
operator|,
name|node
argument_list|(
argument|x.node
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|cur
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|difference_type
argument_list|(
name|buffer_size
argument_list|()
argument_list|)
operator|*
operator|(
name|node
operator|-
name|x
operator|.
name|node
operator|-
literal|1
operator|)
operator|+
operator|(
name|cur
operator|-
name|first
operator|)
operator|+
operator|(
name|x
operator|.
name|last
operator|-
name|x
operator|.
name|cur
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|cur
block|;
if|if
condition|(
name|cur
operator|==
name|last
condition|)
block|{
name|set_node
argument_list|(
name|node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|cur
operator|=
name|first
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}   self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
if|if
condition|(
name|cur
operator|==
name|first
condition|)
block|{
name|set_node
argument_list|(
name|node
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cur
operator|=
name|last
expr_stmt|;
block|}
operator|--
name|cur
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}   self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|difference_type
name|offset
operator|=
name|n
operator|+
operator|(
name|cur
operator|-
name|first
operator|)
block|;
if|if
condition|(
name|offset
operator|>=
literal|0
operator|&&
name|offset
operator|<
name|difference_type
argument_list|(
name|buffer_size
argument_list|()
argument_list|)
condition|)
name|cur
operator|+=
name|n
expr_stmt|;
else|else
block|{
name|difference_type
name|node_offset
init|=
name|offset
operator|>
literal|0
condition|?
name|offset
operator|/
name|difference_type
argument_list|(
name|buffer_size
argument_list|()
argument_list|)
else|:
operator|-
name|difference_type
argument_list|(
operator|(
operator|-
name|offset
operator|-
literal|1
operator|)
operator|/
name|buffer_size
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|set_node
argument_list|(
name|node
operator|+
name|node_offset
argument_list|)
expr_stmt|;
name|cur
operator|=
name|first
operator|+
operator|(
name|offset
operator|-
name|node_offset
operator|*
name|difference_type
argument_list|(
name|buffer_size
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    self
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|+=
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
return|return
operator|*
name|this
operator|+=
operator|-
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|-
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|-=
name|n
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|cur
operator|==
name|x
operator|.
name|cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|self
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|(
name|node
operator|==
name|x
operator|.
name|node
operator|)
operator|?
operator|(
name|cur
operator|<
name|x
operator|.
name|cur
operator|)
operator|:
operator|(
name|node
operator|<
name|x
operator|.
name|node
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|set_node
parameter_list|(
name|map_pointer
name|new_node
parameter_list|)
block|{
name|node
operator|=
name|new_node
expr_stmt|;
name|first
operator|=
operator|*
name|new_node
expr_stmt|;
name|last
operator|=
name|first
operator|+
name|difference_type
argument_list|(
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|,
name|size_t
name|BufSiz
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const __deque_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr
argument_list|,
argument|BufSiz>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|,
name|size_t
name|BufSiz
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const __deque_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr
argument_list|,
argument|BufSiz>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|,
name|size_t
name|BufSiz
operator|>
specifier|inline
name|ptrdiff_t
operator|*
name|distance_type
argument_list|(
argument|const __deque_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr
argument_list|,
argument|BufSiz>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const __deque_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const __deque_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Ref
operator|,
name|class
name|Ptr
operator|>
specifier|inline
name|ptrdiff_t
operator|*
name|distance_type
argument_list|(
argument|const __deque_iterator<T
argument_list|,
argument|Ref
argument_list|,
argument|Ptr>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_comment
comment|// See __deque_buf_size().  The only reason that the default value is 0
end_comment

begin_comment
comment|//  is as a workaround for bugs in the way that some compilers handle
end_comment

begin_comment
comment|//  constant expressions.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|=
name|alloc
operator|,
name|size_t
name|BufSiz
operator|=
literal|0
operator|>
name|class
name|deque
block|{
name|public
operator|:
comment|// Basic types
typedef|typedef
name|T
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_label
name|public
label|:
end_label

begin_comment
comment|// Iterators
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifndef

begin_typedef
typedef|typedef
name|__deque_iterator
operator|<
name|T
operator|,
name|T
operator|&
operator|,
name|T
operator|*
operator|,
name|BufSiz
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__deque_iterator
operator|<
name|T
operator|,
specifier|const
name|T
operator|&
operator|,
specifier|const
name|T
operator|&
operator|,
name|BufSiz
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_typedef
typedef|typedef
name|__deque_iterator
operator|<
name|T
operator|,
name|T
operator|&
operator|,
name|T
operator|*
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__deque_iterator
operator|<
name|T
operator|,
specifier|const
name|T
operator|&
operator|,
specifier|const
name|T
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|,
name|value_type
operator|,
name|const_reference
operator|,
name|difference_type
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|,
name|value_type
operator|,
name|reference
operator|,
name|difference_type
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal typedefs
end_comment

begin_typedef
typedef|typedef
name|pointer
modifier|*
name|map_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|value_type
operator|,
name|Alloc
operator|>
name|data_allocator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|pointer
operator|,
name|Alloc
operator|>
name|map_allocator
expr_stmt|;
end_typedef

begin_function
specifier|static
name|size_type
name|buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
name|BufSiz
argument_list|,
sizeof|sizeof
argument_list|(
name|value_type
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|size_type
name|initial_map_size
parameter_list|()
block|{
return|return
literal|8
return|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Data members
end_comment

begin_decl_stmt
name|iterator
name|start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|finish
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|map_pointer
name|map
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|map_size
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|// Basic accessors
end_comment

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|start
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|finish
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|start
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|finish
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|finish
argument_list|)
return|;
block|}
end_function

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|start
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|finish
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|start
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
return|return
name|start
index|[
name|difference_type
argument_list|(
name|n
argument_list|)
index|]
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|n
argument_list|)
decl|const
block|{
return|return
name|start
index|[
name|difference_type
argument_list|(
name|n
argument_list|)
index|]
return|;
block|}
end_decl_stmt

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|start
return|;
block|}
end_function

begin_function
name|reference
name|back
parameter_list|()
block|{
name|iterator
name|tmp
init|=
name|finish
decl_stmt|;
operator|--
name|tmp
expr_stmt|;
return|return
operator|*
name|tmp
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|start
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
name|const_iterator
name|tmp
operator|=
name|finish
block|;
operator|--
name|tmp
block|;
return|return
operator|*
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|finish
operator|-
name|start
return|;
expr_stmt|;
end_expr_stmt

begin_macro
unit|}   size_type
name|max_size
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|finish
operator|==
name|start
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|// Constructor, destructor.
end_comment

begin_expr_stmt
name|deque
argument_list|()
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|create_map_and_nodes
argument_list|(
literal|0
argument_list|)
block|;   }
name|deque
argument_list|(
specifier|const
name|deque
operator|&
name|x
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|create_map_and_nodes
argument_list|(
name|x
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|start
argument_list|)
block|;     }
name|__STL_UNWIND
argument_list|(
name|destroy_map_and_nodes
argument_list|()
argument_list|)
block|;   }
name|deque
argument_list|(
argument|size_type n
argument_list|,
argument|const value_type& value
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
block|;   }
name|deque
argument_list|(
argument|int n
argument_list|,
argument|const value_type& value
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
block|;   }
name|deque
argument_list|(
argument|long n
argument_list|,
argument|const value_type& value
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value
argument_list|)
block|;   }
name|explicit
name|deque
argument_list|(
argument|size_type n
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|fill_initialize
argument_list|(
name|n
argument_list|,
name|value_type
argument_list|()
argument_list|)
block|;   }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|InputIterator
operator|>
name|deque
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|range_initialize
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|deque
argument_list|(
specifier|const
name|value_type
operator|*
name|first
argument_list|,
specifier|const
name|value_type
operator|*
name|last
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|create_map_and_nodes
argument_list|(
name|last
operator|-
name|first
argument_list|)
block|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|start
argument_list|)
block|;     }
name|__STL_UNWIND
argument_list|(
name|destroy_map_and_nodes
argument_list|()
argument_list|)
block|;   }
name|deque
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
name|create_map_and_nodes
argument_list|(
name|last
operator|-
name|first
argument_list|)
block|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|start
argument_list|)
block|;     }
name|__STL_UNWIND
argument_list|(
name|destroy_map_and_nodes
argument_list|()
argument_list|)
block|;   }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
operator|~
name|deque
argument_list|()
block|{
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
block|;
name|destroy_map_and_nodes
argument_list|()
block|;   }
name|deque
operator|&
name|operator
operator|=
operator|(
specifier|const
name|deque
operator|&
name|x
operator|)
block|{
specifier|const
name|size_type
name|len
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
operator|&
name|x
operator|!=
name|this
condition|)
block|{
if|if
condition|(
name|len
operator|>=
name|x
operator|.
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|start
argument_list|)
argument_list|,
name|finish
argument_list|)
expr_stmt|;
else|else
block|{
name|const_iterator
name|mid
init|=
name|x
operator|.
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|mid
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|finish
argument_list|,
name|mid
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     return
operator|*
name|this
expr_stmt|;
end_expr_stmt

begin_macro
unit|}            void
name|swap
argument_list|(
argument|deque& x
argument_list|)
end_macro

begin_block
block|{
name|__STD
operator|::
name|swap
argument_list|(
name|start
argument_list|,
name|x
operator|.
name|start
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|finish
argument_list|,
name|x
operator|.
name|finish
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|map
argument_list|,
name|x
operator|.
name|map
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|map_size
argument_list|,
name|x
operator|.
name|map_size
argument_list|)
expr_stmt|;
block|}
end_block

begin_label
name|public
label|:
end_label

begin_comment
comment|// push_* and pop_*
end_comment

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|value_type
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|finish
operator|.
name|cur
operator|!=
name|finish
operator|.
name|last
operator|-
literal|1
condition|)
block|{
name|construct
argument_list|(
name|finish
operator|.
name|cur
argument_list|,
name|t
argument_list|)
expr_stmt|;
operator|++
name|finish
operator|.
name|cur
expr_stmt|;
block|}
else|else
name|push_back_aux
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|value_type
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|start
operator|.
name|cur
operator|!=
name|start
operator|.
name|first
condition|)
block|{
name|construct
argument_list|(
name|start
operator|.
name|cur
operator|-
literal|1
argument_list|,
name|t
argument_list|)
expr_stmt|;
operator|--
name|start
operator|.
name|cur
expr_stmt|;
block|}
else|else
name|push_front_aux
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
if|if
condition|(
name|finish
operator|.
name|cur
operator|!=
name|finish
operator|.
name|first
condition|)
block|{
operator|--
name|finish
operator|.
name|cur
expr_stmt|;
name|destroy
argument_list|(
name|finish
operator|.
name|cur
argument_list|)
expr_stmt|;
block|}
else|else
name|pop_back_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_front
parameter_list|()
block|{
if|if
condition|(
name|start
operator|.
name|cur
operator|!=
name|start
operator|.
name|last
operator|-
literal|1
condition|)
block|{
name|destroy
argument_list|(
name|start
operator|.
name|cur
argument_list|)
expr_stmt|;
operator|++
name|start
operator|.
name|cur
expr_stmt|;
block|}
else|else
name|pop_front_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|// Insert
end_comment

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
if|if
condition|(
name|position
operator|.
name|cur
operator|==
name|start
operator|.
name|cur
condition|)
block|{
name|push_front
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|start
return|;
block|}
elseif|else
if|if
condition|(
name|position
operator|.
name|cur
operator|==
name|finish
operator|.
name|cur
condition|)
block|{
name|push_back
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|iterator
name|tmp
init|=
name|finish
decl_stmt|;
operator|--
name|tmp
expr_stmt|;
return|return
name|tmp
return|;
block|}
else|else
block|{
return|return
name|insert_aux
argument_list|(
name|position
argument_list|,
name|x
argument_list|)
return|;
block|}
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|position
argument_list|,
name|value_type
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|int
name|n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
operator|(
name|size_type
operator|)
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|long
name|n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
operator|(
name|size_type
operator|)
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|void
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|const value_type* first
argument_list|,
argument|const value_type* last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|const_iterator
name|first
parameter_list|,
name|const_iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
specifier|const
name|size_type
name|len
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|new_size
operator|<
name|len
condition|)
name|erase
argument_list|(
name|start
operator|+
name|new_size
argument_list|,
name|finish
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|finish
argument_list|,
name|new_size
operator|-
name|len
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|)
block|{
name|resize
argument_list|(
name|new_size
argument_list|,
name|value_type
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|// Erase
end_comment

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|pos
parameter_list|)
block|{
name|iterator
name|next
init|=
name|pos
decl_stmt|;
operator|++
name|next
expr_stmt|;
name|difference_type
name|index
init|=
name|pos
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|index
operator|<
operator|(
name|size
argument_list|()
operator|>>
literal|1
operator|)
condition|)
block|{
name|copy_backward
argument_list|(
name|start
argument_list|,
name|pos
argument_list|,
name|next
argument_list|)
expr_stmt|;
name|pop_front
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|next
argument_list|,
name|finish
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|pop_back
argument_list|()
expr_stmt|;
block|}
return|return
name|start
operator|+
name|index
return|;
block|}
end_function

begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal construction/destruction
end_comment

begin_function_decl
name|void
name|create_map_and_nodes
parameter_list|(
name|size_type
name|num_elements
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|destroy_map_and_nodes
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|fill_initialize
parameter_list|(
name|size_type
name|n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|value
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|range_initialize
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|range_initialize
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal push_* and pop_*
end_comment

begin_function_decl
name|void
name|push_back_aux
parameter_list|(
specifier|const
name|value_type
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|push_front_aux
parameter_list|(
specifier|const
name|value_type
modifier|&
name|t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pop_back_aux
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|pop_front_aux
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal insert functions
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function_decl
name|iterator
name|insert_aux
parameter_list|(
name|iterator
name|pos
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|insert_aux
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|insert_aux
argument_list|(
argument|iterator pos
argument_list|,
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|size_type n
argument_list|)
expr_stmt|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function_decl
name|void
name|insert_aux
parameter_list|(
name|iterator
name|pos
parameter_list|,
specifier|const
name|value_type
modifier|*
name|first
parameter_list|,
specifier|const
name|value_type
modifier|*
name|last
parameter_list|,
name|size_type
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|insert_aux
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|const_iterator
name|first
parameter_list|,
name|const_iterator
name|last
parameter_list|,
name|size_type
name|n
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function
name|iterator
name|reserve_elements_at_front
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
name|size_type
name|vacancies
init|=
name|start
operator|.
name|cur
operator|-
name|start
operator|.
name|first
decl_stmt|;
if|if
condition|(
name|n
operator|>
name|vacancies
condition|)
name|new_elements_at_front
argument_list|(
name|n
operator|-
name|vacancies
argument_list|)
expr_stmt|;
return|return
name|start
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|reserve_elements_at_back
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
name|size_type
name|vacancies
init|=
operator|(
name|finish
operator|.
name|last
operator|-
name|finish
operator|.
name|cur
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|n
operator|>
name|vacancies
condition|)
name|new_elements_at_back
argument_list|(
name|n
operator|-
name|vacancies
argument_list|)
expr_stmt|;
return|return
name|finish
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|new_elements_at_front
parameter_list|(
name|size_type
name|new_elements
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|new_elements_at_back
parameter_list|(
name|size_type
name|new_elements
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|destroy_nodes_at_front
parameter_list|(
name|iterator
name|before_start
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|destroy_nodes_at_back
parameter_list|(
name|iterator
name|after_finish
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Allocation of map and nodes
end_comment

begin_comment
comment|// Makes sure the map has space for new nodes.  Does not actually
end_comment

begin_comment
comment|//  add the nodes.  Can invalidate map pointers.  (And consequently,
end_comment

begin_comment
comment|//  deque iterators.)
end_comment

begin_function
name|void
name|reserve_map_at_back
parameter_list|(
name|size_type
name|nodes_to_add
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|nodes_to_add
operator|+
literal|1
operator|>
name|map_size
operator|-
operator|(
name|finish
operator|.
name|node
operator|-
name|map
operator|)
condition|)
name|reallocate_map
argument_list|(
name|nodes_to_add
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|reserve_map_at_front
parameter_list|(
name|size_type
name|nodes_to_add
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|nodes_to_add
operator|>
name|start
operator|.
name|node
operator|-
name|map
condition|)
name|reallocate_map
argument_list|(
name|nodes_to_add
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|reallocate_map
parameter_list|(
name|size_type
name|nodes_to_add
parameter_list|,
name|bool
name|add_at_front
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|pointer
name|allocate_node
parameter_list|()
block|{
return|return
name|data_allocator
operator|::
name|allocate
argument_list|(
name|buffer_size
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|deallocate_node
parameter_list|(
name|pointer
name|n
parameter_list|)
block|{
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|n
argument_list|,
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifdef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
literal|0
operator|>
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|size
argument_list|()
operator|==
name|x
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
literal|0
operator|>
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|size
argument_list|()
operator|!=
name|x
operator|.
name|size
argument_list|()
operator|||
operator|!
name|equal
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
literal|0
operator|>
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|lexicographical_compare
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_comment
unit|};
comment|// Non-inline member functions
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|size_type n
argument_list|,
argument|const value_type& x
argument_list|)
block|{
if|if
condition|(
name|pos
operator|.
name|cur
operator|==
name|start
operator|.
name|cur
condition|)
block|{
name|iterator
name|new_start
init|=
name|reserve_elements_at_front
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_fill
argument_list|(
name|new_start
argument_list|,
name|start
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|pos
operator|.
name|cur
operator|==
name|finish
operator|.
name|cur
condition|)
block|{
name|iterator
name|new_finish
init|=
name|reserve_elements_at_back
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_fill
argument_list|(
name|finish
argument_list|,
name|new_finish
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
block|}
end_elseif

begin_else
else|else
name|insert_aux
argument_list|(
name|pos
argument_list|,
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
end_else

begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|__STL_MEMBER_TEMPLATES
end_ifndef

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|const value_type* first
argument_list|,
argument|const value_type* last
argument_list|)
block|{
name|size_type
name|n
operator|=
name|last
operator|-
name|first
block|;
if|if
condition|(
name|pos
operator|.
name|cur
operator|==
name|start
operator|.
name|cur
condition|)
block|{
name|iterator
name|new_start
init|=
name|reserve_elements_at_front
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_front
argument_list|(
name|new_start
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
unit|}   else
if|if
condition|(
name|pos
operator|.
name|cur
operator|==
name|finish
operator|.
name|cur
condition|)
block|{
name|iterator
name|new_finish
init|=
name|reserve_elements_at_back
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_back
argument_list|(
name|new_finish
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|insert_aux
argument_list|(
name|pos
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
name|size_type
name|n
operator|=
name|last
operator|-
name|first
block|;
if|if
condition|(
name|pos
operator|.
name|cur
operator|==
name|start
operator|.
name|cur
condition|)
block|{
name|iterator
name|new_start
init|=
name|reserve_elements_at_front
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_front
argument_list|(
name|new_start
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
unit|}   else
if|if
condition|(
name|pos
operator|.
name|cur
operator|==
name|finish
operator|.
name|cur
condition|)
block|{
name|iterator
name|new_finish
init|=
name|reserve_elements_at_back
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_back
argument_list|(
name|new_finish
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|insert_aux
argument_list|(
name|pos
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
end_if

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|iterator
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|erase
argument_list|(
argument|iterator first
argument_list|,
argument|iterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|start
operator|&&
name|last
operator|==
name|finish
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
return|return
name|finish
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|difference_type
name|n
init|=
name|last
operator|-
name|first
decl_stmt|;
name|difference_type
name|elems_before
init|=
name|first
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|elems_before
operator|<
operator|(
name|size
argument_list|()
operator|-
name|n
operator|)
operator|/
literal|2
condition|)
block|{
name|copy_backward
argument_list|(
name|start
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|iterator
name|new_start
init|=
name|start
operator|+
name|n
decl_stmt|;
name|destroy
argument_list|(
name|start
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
for|for
control|(
name|map_pointer
name|cur
init|=
name|start
operator|.
name|node
init|;
name|cur
operator|<
name|new_start
operator|.
name|node
condition|;
operator|++
name|cur
control|)
name|data_allocator
operator|::
name|deallocate
argument_list|(
operator|*
name|cur
argument_list|,
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|last
argument_list|,
name|finish
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|iterator
name|new_finish
init|=
name|finish
operator|-
name|n
decl_stmt|;
name|destroy
argument_list|(
name|new_finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
for|for
control|(
name|map_pointer
name|cur
init|=
name|new_finish
operator|.
name|node
operator|+
literal|1
init|;
name|cur
operator|<=
name|finish
operator|.
name|node
condition|;
operator|++
name|cur
control|)
name|data_allocator
operator|::
name|deallocate
argument_list|(
operator|*
name|cur
argument_list|,
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
block|}
return|return
name|start
operator|+
name|elems_before
return|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|clear
argument_list|()
block|{
for|for
control|(
name|map_pointer
name|node
init|=
name|start
operator|.
name|node
operator|+
literal|1
init|;
name|node
operator|<
name|finish
operator|.
name|node
condition|;
operator|++
name|node
control|)
block|{
name|destroy
argument_list|(
operator|*
name|node
argument_list|,
operator|*
name|node
operator|+
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|data_allocator
operator|::
name|deallocate
argument_list|(
operator|*
name|node
argument_list|,
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|start
operator|.
name|node
operator|!=
name|finish
operator|.
name|node
condition|)
block|{
name|destroy
argument_list|(
name|start
operator|.
name|cur
argument_list|,
name|start
operator|.
name|last
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|finish
operator|.
name|first
argument_list|,
name|finish
operator|.
name|cur
argument_list|)
expr_stmt|;
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|finish
operator|.
name|first
argument_list|,
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
name|destroy
argument_list|(
name|start
operator|.
name|cur
argument_list|,
name|finish
operator|.
name|cur
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|finish
operator|=
name|start
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|create_map_and_nodes
argument_list|(
argument|size_type num_elements
argument_list|)
block|{
name|size_type
name|num_nodes
operator|=
name|num_elements
operator|/
name|buffer_size
argument_list|()
operator|+
literal|1
block|;
name|map_size
operator|=
name|max
argument_list|(
name|initial_map_size
argument_list|()
argument_list|,
name|num_nodes
operator|+
literal|2
argument_list|)
block|;
name|map
operator|=
name|map_allocator
operator|::
name|allocate
argument_list|(
name|map_size
argument_list|)
block|;
name|map_pointer
name|nstart
operator|=
name|map
operator|+
operator|(
name|map_size
operator|-
name|num_nodes
operator|)
operator|/
literal|2
block|;
name|map_pointer
name|nfinish
operator|=
name|nstart
operator|+
name|num_nodes
operator|-
literal|1
block|;
name|map_pointer
name|cur
block|;
name|__STL_TRY
block|{
for|for
control|(
name|cur
operator|=
name|nstart
init|;
name|cur
operator|<=
name|nfinish
condition|;
operator|++
name|cur
control|)
operator|*
name|cur
operator|=
name|allocate_node
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
for|for
control|(
name|map_pointer
name|n
init|=
name|nstart
init|;
name|n
operator|<
name|cur
condition|;
operator|++
name|n
control|)
name|deallocate_node
argument_list|(
operator|*
name|n
argument_list|)
expr_stmt|;
name|map_allocator
operator|::
name|deallocate
argument_list|(
name|map
argument_list|,
name|map_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|throw
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_EXCEPTIONS */
end_comment

begin_expr_stmt
unit|start
operator|.
name|set_node
argument_list|(
name|nstart
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|finish
operator|.
name|set_node
argument_list|(
name|nfinish
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|start
operator|.
name|cur
operator|=
name|start
operator|.
name|first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|finish
operator|.
name|cur
operator|=
name|finish
operator|.
name|first
operator|+
name|num_elements
operator|%
name|buffer_size
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// This is only used as a cleanup function in catch clauses.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|destroy_map_and_nodes
argument_list|()
block|{
for|for
control|(
name|map_pointer
name|cur
init|=
name|start
operator|.
name|node
init|;
name|cur
operator|<=
name|finish
operator|.
name|node
condition|;
operator|++
name|cur
control|)
name|deallocate_node
argument_list|(
operator|*
name|cur
argument_list|)
expr_stmt|;
name|map_allocator
operator|::
name|deallocate
argument_list|(
name|map
argument_list|,
name|map_size
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}     template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|fill_initialize
argument_list|(
argument|size_type n
argument_list|,
argument|const value_type& value
argument_list|)
block|{
name|create_map_and_nodes
argument_list|(
name|n
argument_list|)
block|;
name|map_pointer
name|cur
block|;
name|__STL_TRY
block|{
for|for
control|(
name|cur
operator|=
name|start
operator|.
name|node
init|;
name|cur
operator|<
name|finish
operator|.
name|node
condition|;
operator|++
name|cur
control|)
name|uninitialized_fill
argument_list|(
operator|*
name|cur
argument_list|,
operator|*
name|cur
operator|+
name|buffer_size
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|uninitialized_fill
argument_list|(
name|finish
operator|.
name|first
argument_list|,
name|finish
operator|.
name|cur
argument_list|,
name|value
argument_list|)
block|;   }
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
for|for
control|(
name|map_pointer
name|n
init|=
name|start
operator|.
name|node
init|;
name|n
operator|<
name|cur
condition|;
operator|++
name|n
control|)
name|destroy
argument_list|(
operator|*
name|n
argument_list|,
operator|*
name|n
operator|+
name|buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|destroy_map_and_nodes
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|throw
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_EXCEPTIONS */
end_comment

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|range_initialize
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|create_map_and_nodes
argument_list|(
literal|0
argument_list|)
block|;
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
name|push_back
argument_list|(
operator|*
name|first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|range_initialize
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
name|create_map_and_nodes
argument_list|(
name|n
argument_list|)
block|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|start
argument_list|)
block|;   }
name|__STL_UNWIND
argument_list|(
name|destroy_map_and_nodes
argument_list|()
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
comment|// Called only if finish.cur == finish.last - 1.
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|push_back_aux
argument_list|(
argument|const value_type& t
argument_list|)
block|{
name|value_type
name|t_copy
operator|=
name|t
block|;
name|reserve_map_at_back
argument_list|()
block|;
operator|*
operator|(
name|finish
operator|.
name|node
operator|+
literal|1
operator|)
operator|=
name|allocate_node
argument_list|()
block|;
name|__STL_TRY
block|{
name|construct
argument_list|(
name|finish
operator|.
name|cur
argument_list|,
name|t_copy
argument_list|)
block|;
name|finish
operator|.
name|set_node
argument_list|(
name|finish
operator|.
name|node
operator|+
literal|1
argument_list|)
block|;
name|finish
operator|.
name|cur
operator|=
name|finish
operator|.
name|first
block|;   }
name|__STL_UNWIND
argument_list|(
name|deallocate_node
argument_list|(
operator|*
operator|(
name|finish
operator|.
name|node
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
block|; }
comment|// Called only if start.cur == start.first.
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|push_front_aux
argument_list|(
argument|const value_type& t
argument_list|)
block|{
name|value_type
name|t_copy
operator|=
name|t
block|;
name|reserve_map_at_front
argument_list|()
block|;
operator|*
operator|(
name|start
operator|.
name|node
operator|-
literal|1
operator|)
operator|=
name|allocate_node
argument_list|()
block|;
name|__STL_TRY
block|{
name|start
operator|.
name|set_node
argument_list|(
name|start
operator|.
name|node
operator|-
literal|1
argument_list|)
block|;
name|start
operator|.
name|cur
operator|=
name|start
operator|.
name|last
operator|-
literal|1
block|;
name|construct
argument_list|(
name|start
operator|.
name|cur
argument_list|,
name|t_copy
argument_list|)
block|;   }
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|start
operator|.
name|set_node
argument_list|(
name|start
operator|.
name|node
operator|+
literal|1
argument_list|)
block|;
name|start
operator|.
name|cur
operator|=
name|start
operator|.
name|first
block|;
name|deallocate_node
argument_list|(
operator|*
operator|(
name|start
operator|.
name|node
operator|-
literal|1
operator|)
argument_list|)
block|;
name|throw
block|;   }
endif|#
directive|endif
comment|/* __STL_USE_EXCEPTIONS */
block|}
comment|// Called only if finish.cur == finish.first.
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|pop_back_aux
argument_list|()
block|{
name|deallocate_node
argument_list|(
name|finish
operator|.
name|first
argument_list|)
block|;
name|finish
operator|.
name|set_node
argument_list|(
name|finish
operator|.
name|node
operator|-
literal|1
argument_list|)
block|;
name|finish
operator|.
name|cur
operator|=
name|finish
operator|.
name|last
operator|-
literal|1
block|;
name|destroy
argument_list|(
name|finish
operator|.
name|cur
argument_list|)
block|; }
comment|// Called only if start.cur == start.last - 1.  Note that if the deque
comment|//  has at least one element (a necessary precondition for this member
comment|//  function), and if start.cur == start.last, then the deque must have
comment|//  at least two nodes.
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|pop_front_aux
argument_list|()
block|{
name|destroy
argument_list|(
name|start
operator|.
name|cur
argument_list|)
block|;
name|deallocate_node
argument_list|(
name|start
operator|.
name|first
argument_list|)
block|;
name|start
operator|.
name|set_node
argument_list|(
name|start
operator|.
name|node
operator|+
literal|1
argument_list|)
block|;
name|start
operator|.
name|cur
operator|=
name|start
operator|.
name|first
block|; }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|inserter
argument_list|(
operator|*
name|this
argument_list|,
name|pos
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator pos
argument_list|,
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
if|if
condition|(
name|pos
operator|.
name|cur
operator|==
name|start
operator|.
name|cur
condition|)
block|{
name|iterator
name|new_start
init|=
name|reserve_elements_at_front
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_front
argument_list|(
name|new_start
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
unit|}   else
if|if
condition|(
name|pos
operator|.
name|cur
operator|==
name|finish
operator|.
name|cur
condition|)
block|{
name|iterator
name|new_finish
init|=
name|reserve_elements_at_back
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_back
argument_list|(
name|new_finish
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|insert_aux
argument_list|(
name|pos
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
end_if

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|typename
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|iterator
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert_aux
argument_list|(
argument|iterator pos
argument_list|,
argument|const value_type& x
argument_list|)
block|{
name|difference_type
name|index
operator|=
name|pos
operator|-
name|start
block|;
name|value_type
name|x_copy
operator|=
name|x
block|;
if|if
condition|(
name|index
operator|<
name|size
argument_list|()
operator|/
literal|2
condition|)
block|{
name|push_front
argument_list|(
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|front1
init|=
name|start
decl_stmt|;
operator|++
name|front1
expr_stmt|;
name|iterator
name|front2
init|=
name|front1
decl_stmt|;
operator|++
name|front2
expr_stmt|;
name|pos
operator|=
name|start
operator|+
name|index
expr_stmt|;
name|iterator
name|pos1
init|=
name|pos
decl_stmt|;
operator|++
name|pos1
expr_stmt|;
name|copy
argument_list|(
name|front2
argument_list|,
name|pos1
argument_list|,
name|front1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|push_back
argument_list|(
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|back1
init|=
name|finish
decl_stmt|;
operator|--
name|back1
expr_stmt|;
name|iterator
name|back2
init|=
name|back1
decl_stmt|;
operator|--
name|back2
expr_stmt|;
name|pos
operator|=
name|start
operator|+
name|index
expr_stmt|;
name|copy_backward
argument_list|(
name|pos
argument_list|,
name|back2
argument_list|,
name|back1
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|*
name|pos
operator|=
name|x_copy
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|pos
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert_aux
argument_list|(
argument|iterator pos
argument_list|,
argument|size_type n
argument_list|,
argument|const value_type& x
argument_list|)
block|{
specifier|const
name|difference_type
name|elems_before
operator|=
name|pos
operator|-
name|start
block|;
name|size_type
name|length
operator|=
name|size
argument_list|()
block|;
name|value_type
name|x_copy
operator|=
name|x
block|;
if|if
condition|(
name|elems_before
operator|<
name|length
operator|/
literal|2
condition|)
block|{
name|iterator
name|new_start
init|=
name|reserve_elements_at_front
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|iterator
name|old_start
init|=
name|start
decl_stmt|;
name|pos
operator|=
name|start
operator|+
name|elems_before
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|elems_before
operator|>=
name|difference_type
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|iterator
name|start_n
init|=
name|start
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|start
argument_list|,
name|start_n
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|copy
argument_list|(
name|start_n
argument_list|,
name|pos
argument_list|,
name|old_start
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|pos
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|,
name|pos
argument_list|,
name|x_copy
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__uninitialized_copy_fill
argument_list|(
name|start
argument_list|,
name|pos
argument_list|,
name|new_start
argument_list|,
name|start
argument_list|,
name|x_copy
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|fill
argument_list|(
name|old_start
argument_list|,
name|pos
argument_list|,
name|x_copy
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     __STL_UNWIND
operator|(
name|destroy_nodes_at_front
argument_list|(
name|new_start
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|new_finish
init|=
name|reserve_elements_at_back
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|iterator
name|old_finish
init|=
name|finish
decl_stmt|;
specifier|const
name|difference_type
name|elems_after
init|=
name|difference_type
argument_list|(
name|length
argument_list|)
operator|-
name|elems_before
decl_stmt|;
name|pos
operator|=
name|finish
operator|-
name|elems_after
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|elems_after
operator|>
name|difference_type
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|iterator
name|finish_n
init|=
name|finish
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|finish_n
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|pos
argument_list|,
name|finish_n
argument_list|,
name|old_finish
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|,
name|x_copy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|__uninitialized_fill_copy
argument_list|(
name|finish
argument_list|,
name|pos
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|,
name|x_copy
argument_list|,
name|pos
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|fill
argument_list|(
name|pos
argument_list|,
name|old_finish
argument_list|,
name|x_copy
argument_list|)
expr_stmt|;
block|}
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_back
argument_list|(
name|new_finish
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert_aux
argument_list|(
argument|iterator pos
argument_list|,
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|size_type n
argument_list|)
block|{
specifier|const
name|difference_type
name|elems_before
operator|=
name|pos
operator|-
name|start
block|;
name|size_type
name|length
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
name|elems_before
operator|<
name|length
operator|/
literal|2
condition|)
block|{
name|iterator
name|new_start
init|=
name|reserve_elements_at_front
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|iterator
name|old_start
init|=
name|start
decl_stmt|;
name|pos
operator|=
name|start
operator|+
name|elems_before
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|elems_before
operator|>=
name|difference_type
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|iterator
name|start_n
init|=
name|start
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|start
argument_list|,
name|start_n
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|copy
argument_list|(
name|start_n
argument_list|,
name|pos
argument_list|,
name|old_start
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pos
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|ForwardIterator
name|mid
init|=
name|first
decl_stmt|;
name|advance
argument_list|(
name|mid
argument_list|,
name|difference_type
argument_list|(
name|n
argument_list|)
operator|-
name|elems_before
argument_list|)
expr_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|start
argument_list|,
name|pos
argument_list|,
name|first
argument_list|,
name|mid
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|copy
argument_list|(
name|mid
argument_list|,
name|last
argument_list|,
name|old_start
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     __STL_UNWIND
operator|(
name|destroy_nodes_at_front
argument_list|(
name|new_start
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|new_finish
init|=
name|reserve_elements_at_back
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|iterator
name|old_finish
init|=
name|finish
decl_stmt|;
specifier|const
name|difference_type
name|elems_after
init|=
name|difference_type
argument_list|(
name|length
argument_list|)
operator|-
name|elems_before
decl_stmt|;
name|pos
operator|=
name|finish
operator|-
name|elems_after
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|elems_after
operator|>
name|difference_type
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|iterator
name|finish_n
init|=
name|finish
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|finish_n
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|pos
argument_list|,
name|finish_n
argument_list|,
name|old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ForwardIterator
name|mid
init|=
name|first
decl_stmt|;
name|advance
argument_list|(
name|mid
argument_list|,
name|elems_after
argument_list|)
expr_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|mid
argument_list|,
name|last
argument_list|,
name|pos
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|mid
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_back
argument_list|(
name|new_finish
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_else
unit|}
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert_aux
argument_list|(
argument|iterator pos
argument_list|,
argument|const value_type* first
argument_list|,
argument|const value_type* last
argument_list|,
argument|size_type n
argument_list|)
block|{
specifier|const
name|difference_type
name|elems_before
operator|=
name|pos
operator|-
name|start
block|;
name|size_type
name|length
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
name|elems_before
operator|<
name|length
operator|/
literal|2
condition|)
block|{
name|iterator
name|new_start
init|=
name|reserve_elements_at_front
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|iterator
name|old_start
init|=
name|start
decl_stmt|;
name|pos
operator|=
name|start
operator|+
name|elems_before
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|elems_before
operator|>=
name|difference_type
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|iterator
name|start_n
init|=
name|start
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|start
argument_list|,
name|start_n
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|copy
argument_list|(
name|start_n
argument_list|,
name|pos
argument_list|,
name|old_start
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pos
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
specifier|const
name|value_type
modifier|*
name|mid
init|=
name|first
operator|+
operator|(
name|difference_type
argument_list|(
name|n
argument_list|)
operator|-
name|elems_before
operator|)
decl_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|start
argument_list|,
name|pos
argument_list|,
name|first
argument_list|,
name|mid
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|copy
argument_list|(
name|mid
argument_list|,
name|last
argument_list|,
name|old_start
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     __STL_UNWIND
operator|(
name|destroy_nodes_at_front
argument_list|(
name|new_start
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|new_finish
init|=
name|reserve_elements_at_back
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|iterator
name|old_finish
init|=
name|finish
decl_stmt|;
specifier|const
name|difference_type
name|elems_after
init|=
name|difference_type
argument_list|(
name|length
argument_list|)
operator|-
name|elems_before
decl_stmt|;
name|pos
operator|=
name|finish
operator|-
name|elems_after
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|elems_after
operator|>
name|difference_type
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|iterator
name|finish_n
init|=
name|finish
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|finish_n
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|pos
argument_list|,
name|finish_n
argument_list|,
name|old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|value_type
modifier|*
name|mid
init|=
name|first
operator|+
name|elems_after
decl_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|mid
argument_list|,
name|last
argument_list|,
name|pos
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|mid
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_back
argument_list|(
name|new_finish
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|insert_aux
argument_list|(
argument|iterator pos
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|,
argument|size_type n
argument_list|)
block|{
specifier|const
name|difference_type
name|elems_before
operator|=
name|pos
operator|-
name|start
block|;
name|size_type
name|length
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
name|elems_before
operator|<
name|length
operator|/
literal|2
condition|)
block|{
name|iterator
name|new_start
init|=
name|reserve_elements_at_front
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|iterator
name|old_start
init|=
name|start
decl_stmt|;
name|pos
operator|=
name|start
operator|+
name|elems_before
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|elems_before
operator|>=
name|n
condition|)
block|{
name|iterator
name|start_n
init|=
name|start
operator|+
name|n
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|start
argument_list|,
name|start_n
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|copy
argument_list|(
name|start_n
argument_list|,
name|pos
argument_list|,
name|old_start
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pos
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|const_iterator
name|mid
init|=
name|first
operator|+
operator|(
name|n
operator|-
name|elems_before
operator|)
decl_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|start
argument_list|,
name|pos
argument_list|,
name|first
argument_list|,
name|mid
argument_list|,
name|new_start
argument_list|)
expr_stmt|;
name|start
operator|=
name|new_start
expr_stmt|;
name|copy
argument_list|(
name|mid
argument_list|,
name|last
argument_list|,
name|old_start
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     __STL_UNWIND
operator|(
name|destroy_nodes_at_front
argument_list|(
name|new_start
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|new_finish
init|=
name|reserve_elements_at_back
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|iterator
name|old_finish
init|=
name|finish
decl_stmt|;
specifier|const
name|difference_type
name|elems_after
init|=
name|length
operator|-
name|elems_before
decl_stmt|;
name|pos
operator|=
name|finish
operator|-
name|elems_after
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|elems_after
operator|>
name|n
condition|)
block|{
name|iterator
name|finish_n
init|=
name|finish
operator|-
name|difference_type
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|finish_n
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|pos
argument_list|,
name|finish_n
argument_list|,
name|old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|const_iterator
name|mid
init|=
name|first
operator|+
name|elems_after
decl_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|mid
argument_list|,
name|last
argument_list|,
name|pos
argument_list|,
name|finish
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|finish
operator|=
name|new_finish
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|mid
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
name|__STL_UNWIND
argument_list|(
name|destroy_nodes_at_back
argument_list|(
name|new_finish
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|new_elements_at_front
argument_list|(
argument|size_type new_elements
argument_list|)
block|{
name|size_type
name|new_nodes
operator|=
operator|(
name|new_elements
operator|+
name|buffer_size
argument_list|()
operator|-
literal|1
operator|)
operator|/
name|buffer_size
argument_list|()
block|;
name|reserve_map_at_front
argument_list|(
name|new_nodes
argument_list|)
block|;
name|size_type
name|i
block|;
name|__STL_TRY
block|{
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<=
name|new_nodes
condition|;
operator|++
name|i
control|)
operator|*
operator|(
name|start
operator|.
name|node
operator|-
name|i
operator|)
operator|=
name|allocate_node
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
for|for
control|(
name|size_type
name|j
init|=
literal|1
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
name|deallocate_node
argument_list|(
operator|*
operator|(
name|start
operator|.
name|node
operator|-
name|j
operator|)
argument_list|)
expr_stmt|;
name|throw
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_EXCEPTIONS */
end_comment

begin_expr_stmt
unit|}
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|new_elements_at_back
argument_list|(
argument|size_type new_elements
argument_list|)
block|{
name|size_type
name|new_nodes
operator|=
operator|(
name|new_elements
operator|+
name|buffer_size
argument_list|()
operator|-
literal|1
operator|)
operator|/
name|buffer_size
argument_list|()
block|;
name|reserve_map_at_back
argument_list|(
name|new_nodes
argument_list|)
block|;
name|size_type
name|i
block|;
name|__STL_TRY
block|{
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<=
name|new_nodes
condition|;
operator|++
name|i
control|)
operator|*
operator|(
name|finish
operator|.
name|node
operator|+
name|i
operator|)
operator|=
name|allocate_node
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
for|for
control|(
name|size_type
name|j
init|=
literal|1
init|;
name|j
operator|<
name|i
condition|;
operator|++
name|j
control|)
name|deallocate_node
argument_list|(
operator|*
operator|(
name|finish
operator|.
name|node
operator|+
name|j
operator|)
argument_list|)
expr_stmt|;
name|throw
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_EXCEPTIONS */
end_comment

begin_expr_stmt
unit|}
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|destroy_nodes_at_front
argument_list|(
argument|iterator before_start
argument_list|)
block|{
for|for
control|(
name|map_pointer
name|n
init|=
name|before_start
operator|.
name|node
init|;
name|n
operator|<
name|start
operator|.
name|node
condition|;
operator|++
name|n
control|)
name|deallocate_node
argument_list|(
operator|*
name|n
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|destroy_nodes_at_back
argument_list|(
argument|iterator after_finish
argument_list|)
block|{
for|for
control|(
name|map_pointer
name|n
init|=
name|after_finish
operator|.
name|node
init|;
name|n
operator|>
name|finish
operator|.
name|node
condition|;
operator|--
name|n
control|)
name|deallocate_node
argument_list|(
operator|*
name|n
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSize
operator|>
name|void
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSize
operator|>
operator|::
name|reallocate_map
argument_list|(
argument|size_type nodes_to_add
argument_list|,
argument|bool add_at_front
argument_list|)
block|{
name|size_type
name|old_num_nodes
operator|=
name|finish
operator|.
name|node
operator|-
name|start
operator|.
name|node
operator|+
literal|1
block|;
name|size_type
name|new_num_nodes
operator|=
name|old_num_nodes
operator|+
name|nodes_to_add
block|;
name|map_pointer
name|new_nstart
block|;
if|if
condition|(
name|map_size
operator|>
literal|2
operator|*
name|new_num_nodes
condition|)
block|{
name|new_nstart
operator|=
name|map
operator|+
operator|(
name|map_size
operator|-
name|new_num_nodes
operator|)
operator|/
literal|2
operator|+
operator|(
name|add_at_front
condition|?
name|nodes_to_add
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|new_nstart
operator|<
name|start
operator|.
name|node
condition|)
name|copy
argument_list|(
name|start
operator|.
name|node
argument_list|,
name|finish
operator|.
name|node
operator|+
literal|1
argument_list|,
name|new_nstart
argument_list|)
expr_stmt|;
else|else
name|copy_backward
argument_list|(
name|start
operator|.
name|node
argument_list|,
name|finish
operator|.
name|node
operator|+
literal|1
argument_list|,
name|new_nstart
operator|+
name|old_num_nodes
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|size_type
name|new_map_size
init|=
name|map_size
operator|+
name|max
argument_list|(
name|map_size
argument_list|,
name|nodes_to_add
argument_list|)
operator|+
literal|2
decl_stmt|;
name|map_pointer
name|new_map
init|=
name|map_allocator
operator|::
name|allocate
argument_list|(
name|new_map_size
argument_list|)
decl_stmt|;
name|new_nstart
operator|=
name|new_map
operator|+
operator|(
name|new_map_size
operator|-
name|new_num_nodes
operator|)
operator|/
literal|2
operator|+
operator|(
name|add_at_front
condition|?
name|nodes_to_add
else|:
literal|0
operator|)
expr_stmt|;
name|copy
argument_list|(
name|start
operator|.
name|node
argument_list|,
name|finish
operator|.
name|node
operator|+
literal|1
argument_list|,
name|new_nstart
argument_list|)
expr_stmt|;
name|map_allocator
operator|::
name|deallocate
argument_list|(
name|map
argument_list|,
name|map_size
argument_list|)
expr_stmt|;
name|map
operator|=
name|new_map
expr_stmt|;
name|map_size
operator|=
name|new_map_size
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|start
operator|.
name|set_node
argument_list|(
name|new_nstart
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|finish
operator|.
name|set_node
argument_list|(
name|new_nstart
operator|+
name|old_num_nodes
operator|-
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Nonmember functions.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifndef

begin_expr_stmt
unit|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSiz
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSiz
operator|>
operator|&
name|x
operator|,
specifier|const
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSiz
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|size
argument_list|()
operator|==
name|y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSiz
operator|>
name|bool
name|operator
operator|<
operator|(
specifier|const
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSiz
operator|>
operator|&
name|x
operator|,
specifier|const
name|deque
operator|<
name|T
operator|,
name|Alloc
operator|,
name|BufSiz
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|,
name|y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
argument_list|)
operator|&&
expr|\
operator|!
name|defined
argument_list|(
name|__STL_NON_TYPE_TMPL_PARAM_BUG
argument_list|)
end_if

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Alloc
operator|,
name|size_t
name|BufSiz
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|deque<T
argument_list|,
argument|Alloc
argument_list|,
argument|BufSiz>& x
argument_list|,
argument|deque<T
argument_list|,
argument|Alloc
argument_list|,
argument|BufSiz>& y
argument_list|)
block|{
name|x
operator|.
name|swap
argument_list|(
name|y
argument_list|)
block|; }
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|reset
name|woff
name|1174
endif|#
directive|endif
name|__STL_END_NAMESPACE
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_DEQUE_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

