begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_DEQUE_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_DEQUE_H
end_define

begin_comment
comment|/* Class invariants:  *  For any nonsingular iterator i:  *    i.node is the address of an element in the map array.  The  *      contents of i.node is a pointer to the beginning of a node.  *    i.first == *(i.node)   *    i.last  == i.first + node_size  *    i.cur is a pointer in the range [i.first, i.last).  NOTE:  *      the implication of this is that i.cur is always a dereferenceable  *      pointer, even if i is a past-the-end iterator.  *  Start and Finish are always nonsingular iterators.  NOTE: this means  *    that an empty deque must have one node, and that a deque  *    with N elements, where N is the buffer size, must have two nodes.  *  For every node other than start.node and finish.node, every element  *    in the node is an initialized object.  If start.node == finish.node,  *    then [start.cur, finish.cur) are initialized objects, and  *    the elements outside that range are uninitialized storage.  Otherwise,  *    [start.cur, start.last) and [finish.first, finish.cur) are initialized  *    objects, and [start.first, start.cur) and [finish.cur, finish.last)  *    are uninitialized storage.  *  [map, map + map_size) is a valid, non-empty range.    *  [start.node, finish.node] is a valid range contained within   *    [map, map + map_size).    *  A pointer in the range [map, map + map_size) points to an allocated node  *    if and only if the pointer is in the range [start.node, finish.node].  */
end_comment

begin_comment
comment|/*  * In previous versions of deque, node_size was fixed by the   * implementation.  In this version, however, users can select  * the node size.  Deque has three template parameters; the third,  * a number of type size_t, is the number of elements per node.  * If the third template parameter is 0 (which is the default),   * then deque will use a default node size.  *  * The only reason for using an alternate node size is if your application  * requires a different performance tradeoff than the default.  If,  * for example, your program contains many deques each of which contains  * only a few elements, then you might want to save memory (possibly  * by sacrificing some speed) by using smaller nodes.  *  * Unfortunately, some compilers have trouble with non-type template   * parameters; stl_config.h defines __STL_NON_TYPE_TMPL_PARAM_BUG if  * that is the case.  If your compiler is one of them, then you will  * not be able to use alternate node sizes; you will have to use the  * default value.  */
end_comment

begin_function
name|__STL_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|set
name|woff
name|1174
pragma|#
directive|pragma
name|set
name|woff
name|1375
endif|#
directive|endif
comment|// Note: this function is simply a kludge to work around several compilers'
comment|//  bugs in handling constant expressions.
specifier|inline
name|size_t
name|__deque_buf_size
parameter_list|(
name|size_t
name|__n
parameter_list|,
name|size_t
name|__size
parameter_list|)
block|{
return|return
name|__n
operator|!=
literal|0
condition|?
name|__n
else|:
operator|(
name|__size
operator|<
literal|512
condition|?
name|size_t
argument_list|(
literal|512
operator|/
name|__size
argument_list|)
else|:
name|size_t
argument_list|(
literal|1
argument_list|)
operator|)
return|;
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|,
name|size_t
name|__bufsiz
operator|>
expr|struct
name|_Deque_iterator
block|{
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|,
name|__bufsiz
operator|>
name|iterator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|,
name|__bufsiz
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_function
specifier|static
name|size_t
name|_S_buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|>
expr|struct
name|_Deque_iterator
block|{
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_function
specifier|static
name|size_t
name|_S_buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Ptr
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Ref
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
modifier|*
name|_Map_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Deque_iterator
name|_Self
typedef|;
end_typedef

begin_decl_stmt
name|_Tp
modifier|*
name|_M_cur
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Tp
modifier|*
name|_M_first
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Tp
modifier|*
name|_M_last
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Map_pointer
name|_M_node
decl_stmt|;
end_decl_stmt

begin_macro
name|_Deque_iterator
argument_list|(
argument|_Tp* __x
argument_list|,
argument|_Map_pointer __y
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|_M_cur
argument_list|(
name|__x
argument_list|)
operator|,
name|_M_first
argument_list|(
operator|*
name|__y
argument_list|)
operator|,
name|_M_last
argument_list|(
operator|*
name|__y
operator|+
name|_S_buffer_size
argument_list|()
argument_list|)
operator|,
name|_M_node
argument_list|(
argument|__y
argument_list|)
block|{}
name|_Deque_iterator
argument_list|()
operator|:
name|_M_cur
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_first
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_last
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_node
argument_list|(
literal|0
argument_list|)
block|{}
name|_Deque_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|__x
argument_list|)
operator|:
name|_M_cur
argument_list|(
name|__x
operator|.
name|_M_cur
argument_list|)
operator|,
name|_M_first
argument_list|(
name|__x
operator|.
name|_M_first
argument_list|)
operator|,
name|_M_last
argument_list|(
name|__x
operator|.
name|_M_last
argument_list|)
operator|,
name|_M_node
argument_list|(
argument|__x._M_node
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|_M_cur
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|_M_cur
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
operator|*
operator|(
name|_M_node
operator|-
name|__x
operator|.
name|_M_node
operator|-
literal|1
operator|)
operator|+
operator|(
name|_M_cur
operator|-
name|_M_first
operator|)
operator|+
operator|(
name|__x
operator|.
name|_M_last
operator|-
name|__x
operator|.
name|_M_cur
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|_M_cur
block|;
if|if
condition|(
name|_M_cur
operator|==
name|_M_last
condition|)
block|{
name|_M_set_node
argument_list|(
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_first
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}   _Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
if|if
condition|(
name|_M_cur
operator|==
name|_M_first
condition|)
block|{
name|_M_set_node
argument_list|(
name|_M_node
operator|-
literal|1
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_last
expr_stmt|;
block|}
operator|--
name|_M_cur
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}   _Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|__n
operator|)
block|{
name|difference_type
name|__offset
operator|=
name|__n
operator|+
operator|(
name|_M_cur
operator|-
name|_M_first
operator|)
block|;
if|if
condition|(
name|__offset
operator|>=
literal|0
operator|&&
name|__offset
operator|<
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
condition|)
name|_M_cur
operator|+=
name|__n
expr_stmt|;
else|else
block|{
name|difference_type
name|__node_offset
init|=
name|__offset
operator|>
literal|0
condition|?
name|__offset
operator|/
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
else|:
operator|-
name|difference_type
argument_list|(
operator|(
operator|-
name|__offset
operator|-
literal|1
operator|)
operator|/
name|_S_buffer_size
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|_M_set_node
argument_list|(
name|_M_node
operator|+
name|__node_offset
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_first
operator|+
operator|(
name|__offset
operator|-
name|__node_offset
operator|*
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    _Self
name|operator
operator|+
operator|(
name|difference_type
name|__n
operator|)
specifier|const
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|+=
name|__n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|__n
operator|)
block|{
return|return
operator|*
name|this
operator|+=
operator|-
name|__n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|-
operator|(
name|difference_type
name|__n
operator|)
specifier|const
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|-=
name|__n
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|__n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|__n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_cur
operator|==
name|__x
operator|.
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
operator|(
name|_M_node
operator|==
name|__x
operator|.
name|_M_node
operator|)
operator|?
operator|(
name|_M_cur
operator|<
name|__x
operator|.
name|_M_cur
operator|)
operator|:
operator|(
name|_M_node
operator|<
name|__x
operator|.
name|_M_node
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|_M_set_node
parameter_list|(
name|_Map_pointer
name|__new_node
parameter_list|)
block|{
name|_M_node
operator|=
name|__new_node
expr_stmt|;
name|_M_first
operator|=
operator|*
name|__new_node
expr_stmt|;
name|_M_last
operator|=
name|_M_first
operator|+
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|,
name|size_t
name|__bufsiz
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const _Deque_iterator<_Tp
argument_list|,
argument|_Ref
argument_list|,
argument|_Ptr
argument_list|,
argument|__bufsiz>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|,
name|size_t
name|__bufsiz
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const _Deque_iterator<_Tp
argument_list|,
argument|_Ref
argument_list|,
argument|_Ptr
argument_list|,
argument|__bufsiz>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|,
name|size_t
name|__bufsiz
operator|>
specifier|inline
name|ptrdiff_t
operator|*
name|distance_type
argument_list|(
argument|const _Deque_iterator<_Tp
argument_list|,
argument|_Ref
argument_list|,
argument|_Ptr
argument_list|,
argument|__bufsiz>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const _Deque_iterator<_Tp
argument_list|,
argument|_Ref
argument_list|,
argument|_Ptr>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const _Deque_iterator<_Tp
argument_list|,
argument|_Ref
argument_list|,
argument|_Ptr>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|>
specifier|inline
name|ptrdiff_t
operator|*
name|distance_type
argument_list|(
argument|const _Deque_iterator<_Tp
argument_list|,
argument|_Ref
argument_list|,
argument|_Ptr>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_comment
comment|// Deque base class.  It has two purposes.  First, its constructor
end_comment

begin_comment
comment|//  and destructor allocate (but don't initialize) storage.  This makes
end_comment

begin_comment
comment|//  exception safety easier.  Second, the base class encapsulates all of
end_comment

begin_comment
comment|//  the differences between SGI-style allocators and standard-conforming
end_comment

begin_comment
comment|//  allocators.
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_USE_STD_ALLOCATORS
end_ifdef

begin_comment
comment|// Base class for ordinary allocators.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|,
name|bool
name|__is_static
operator|>
name|class
name|_Deque_alloc_base
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|node_allocator
return|;
block|}
name|_Deque_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|node_allocator
argument_list|(
name|__a
argument_list|)
operator|,
name|map_allocator
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_map
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_map_size
argument_list|(
literal|0
argument_list|)
block|{}
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|*
operator|,
name|_Alloc
operator|>
operator|::
name|allocator_type
name|map_allocator_type
expr_stmt|;
end_typedef

begin_decl_stmt
name|allocator_type
name|node_allocator
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|map_allocator_type
name|map_allocator
decl_stmt|;
end_decl_stmt

begin_function
name|_Tp
modifier|*
name|_M_allocate_node
parameter_list|()
block|{
return|return
name|node_allocator
operator|.
name|allocate
argument_list|(
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_node
parameter_list|(
name|_Tp
modifier|*
name|__p
parameter_list|)
block|{
name|node_allocator
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|_Tp
modifier|*
modifier|*
name|_M_allocate_map
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|map_allocator
operator|.
name|allocate
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_map
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__p
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
name|map_allocator
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__n
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|_Tp
modifier|*
modifier|*
name|_M_map
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|_M_map_size
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// Specialization for instanceless allocators.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|class
name|_Deque_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|,
name|true
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|()
return|;
block|}
name|_Deque_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
argument_list|)
operator|:
name|_M_map
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_map_size
argument_list|(
literal|0
argument_list|)
block|{}
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_Alloc_type
name|_Node_alloc_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|*
operator|,
name|_Alloc
operator|>
operator|::
name|_Alloc_type
name|_Map_alloc_type
expr_stmt|;
end_typedef

begin_function
name|_Tp
modifier|*
name|_M_allocate_node
parameter_list|()
block|{
return|return
name|_Node_alloc_type
operator|::
name|allocate
argument_list|(
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_node
parameter_list|(
name|_Tp
modifier|*
name|__p
parameter_list|)
block|{
name|_Node_alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|_Tp
modifier|*
modifier|*
name|_M_allocate_map
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|_Map_alloc_type
operator|::
name|allocate
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_map
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__p
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
name|_Map_alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__n
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|_Tp
modifier|*
modifier|*
name|_M_map
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|_M_map_size
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|class
name|_Deque_base
operator|:
name|public
name|_Deque_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
block|{
name|public
operator|:
typedef|typedef
name|_Deque_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|,
name|__bufsiz
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|&
operator|,
name|__bufsiz
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_macro
name|_Deque_base
argument_list|(
argument|const allocator_type& __a
argument_list|,
argument|size_t __num_elements
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|_Base
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_start
argument_list|()
operator|,
name|_M_finish
argument_list|()
block|{
name|_M_initialize_map
argument_list|(
name|__num_elements
argument_list|)
block|; }
name|_Deque_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_Base
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_start
argument_list|()
operator|,
name|_M_finish
argument_list|()
block|{}
operator|~
name|_Deque_base
argument_list|()
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function_decl
name|void
name|_M_initialize_map
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_create_nodes
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__nstart
parameter_list|,
name|_Tp
modifier|*
modifier|*
name|__nfinish
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_destroy_nodes
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__nstart
parameter_list|,
name|_Tp
modifier|*
modifier|*
name|__nfinish
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
block|{
name|_S_initial_map_size
init|=
literal|8
block|}
enum|;
end_enum

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|iterator
name|_M_start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|_M_finish
decl_stmt|;
end_decl_stmt

begin_else
unit|};
else|#
directive|else
end_else

begin_comment
comment|/* __STL_USE_STD_ALLOCATORS */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|class
name|_Deque_base
block|{
name|public
operator|:
ifndef|#
directive|ifndef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|,
name|__bufsiz
operator|>
name|iterator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|,
name|__bufsiz
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_typedef
typedef|typedef
name|_Alloc
name|allocator_type
typedef|;
end_typedef

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|()
return|;
block|}
end_expr_stmt

begin_macro
name|_Deque_base
argument_list|(
argument|const allocator_type&
argument_list|,
argument|size_t __num_elements
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|_M_map
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_map_size
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_start
argument_list|()
operator|,
name|_M_finish
argument_list|()
block|{
name|_M_initialize_map
argument_list|(
name|__num_elements
argument_list|)
block|;   }
name|_Deque_base
argument_list|(
specifier|const
name|allocator_type
operator|&
argument_list|)
operator|:
name|_M_map
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_map_size
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_start
argument_list|()
operator|,
name|_M_finish
argument_list|()
block|{}
operator|~
name|_Deque_base
argument_list|()
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function_decl
name|void
name|_M_initialize_map
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_create_nodes
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__nstart
parameter_list|,
name|_Tp
modifier|*
modifier|*
name|__nfinish
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_destroy_nodes
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__nstart
parameter_list|,
name|_Tp
modifier|*
modifier|*
name|__nfinish
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
block|{
name|_S_initial_map_size
init|=
literal|8
block|}
enum|;
end_enum

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|_Tp
modifier|*
modifier|*
name|_M_map
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|_M_map_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|_M_start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|_M_finish
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|_Node_alloc_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|_Tp
operator|*
operator|,
name|_Alloc
operator|>
name|_Map_alloc_type
expr_stmt|;
end_typedef

begin_function
name|_Tp
modifier|*
name|_M_allocate_node
parameter_list|()
block|{
return|return
name|_Node_alloc_type
operator|::
name|allocate
argument_list|(
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_node
parameter_list|(
name|_Tp
modifier|*
name|__p
parameter_list|)
block|{
name|_Node_alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|_Tp
modifier|*
modifier|*
name|_M_allocate_map
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|_Map_alloc_type
operator|::
name|allocate
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_map
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__p
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
name|_Map_alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__n
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_STD_ALLOCATORS */
end_comment

begin_comment
comment|// Non-inline member functions from _Deque_base.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
operator|::
operator|~
name|_Deque_base
argument_list|()
block|{
if|if
condition|(
name|_M_map
condition|)
block|{
name|_M_destroy_nodes
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|_M_deallocate_map
argument_list|(
name|_M_map
argument_list|,
name|_M_map_size
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
operator|::
name|_M_initialize_map
argument_list|(
argument|size_t __num_elements
argument_list|)
block|{
name|size_t
name|__num_nodes
operator|=
name|__num_elements
operator|/
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
operator|+
literal|1
block|;
name|_M_map_size
operator|=
name|max
argument_list|(
operator|(
name|size_t
operator|)
name|_S_initial_map_size
argument_list|,
name|__num_nodes
operator|+
literal|2
argument_list|)
block|;
name|_M_map
operator|=
name|_M_allocate_map
argument_list|(
name|_M_map_size
argument_list|)
block|;
name|_Tp
operator|*
operator|*
name|__nstart
operator|=
name|_M_map
operator|+
operator|(
name|_M_map_size
operator|-
name|__num_nodes
operator|)
operator|/
literal|2
block|;
name|_Tp
operator|*
operator|*
name|__nfinish
operator|=
name|__nstart
operator|+
name|__num_nodes
block|;
name|__STL_TRY
block|{
name|_M_create_nodes
argument_list|(
name|__nstart
argument_list|,
name|__nfinish
argument_list|)
block|;   }
name|__STL_UNWIND
argument_list|(
operator|(
name|_M_deallocate_map
argument_list|(
name|_M_map
argument_list|,
name|_M_map_size
argument_list|)
operator|,
name|_M_map
operator|=
literal|0
operator|,
name|_M_map_size
operator|=
literal|0
operator|)
argument_list|)
block|;
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|__nstart
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|__nfinish
operator|-
literal|1
argument_list|)
block|;
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_start
operator|.
name|_M_first
block|;
name|_M_finish
operator|.
name|_M_cur
operator|=
name|_M_finish
operator|.
name|_M_first
operator|+
name|__num_elements
operator|%
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
operator|::
name|_M_create_nodes
argument_list|(
argument|_Tp** __nstart
argument_list|,
argument|_Tp** __nfinish
argument_list|)
block|{
name|_Tp
operator|*
operator|*
name|__cur
block|;
name|__STL_TRY
block|{
for|for
control|(
name|__cur
operator|=
name|__nstart
init|;
name|__cur
operator|<
name|__nfinish
condition|;
operator|++
name|__cur
control|)
operator|*
name|__cur
operator|=
name|_M_allocate_node
argument_list|()
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|__nstart
argument_list|,
name|__cur
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
operator|::
name|_M_destroy_nodes
argument_list|(
argument|_Tp** __nstart
argument_list|,
argument|_Tp** __nfinish
argument_list|)
block|{
for|for
control|(
name|_Tp
modifier|*
modifier|*
name|__n
init|=
name|__nstart
init|;
name|__n
operator|<
name|__nfinish
condition|;
operator|++
name|__n
control|)
name|_M_deallocate_node
argument_list|(
operator|*
name|__n
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
comment|// See __deque_buf_size().  The only reason that the default value is 0
end_comment

begin_comment
comment|//  is as a workaround for bugs in the way that some compilers handle
end_comment

begin_comment
comment|//  constant expressions.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|=
name|__STL_DEFAULT_ALLOCATOR
argument_list|(
name|_Tp
argument_list|)
operator|,
name|size_t
name|__bufsiz
operator|=
literal|0
operator|>
name|class
name|deque
operator|:
name|protected
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
block|{
typedef|typedef
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
name|_Base
expr_stmt|;
name|public
operator|:
end_expr_stmt

begin_comment
comment|// Basic types
end_comment

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_Base
operator|::
name|get_allocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|// Iterators
end_comment

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|iterator
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|,
name|value_type
operator|,
name|const_reference
operator|,
name|difference_type
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|,
name|value_type
operator|,
name|reference
operator|,
name|difference_type
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal typedefs
end_comment

begin_typedef
typedef|typedef
name|pointer
modifier|*
name|_Map_pointer
typedef|;
end_typedef

begin_function
specifier|static
name|size_t
name|_S_buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
name|__bufsiz
argument_list|,
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_USE_NAMESPACES
end_ifdef

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_initialize_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_create_nodes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_destroy_nodes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_allocate_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_deallocate_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_allocate_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_deallocate_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_map_size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_start
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_finish
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_NAMESPACES */
end_comment

begin_label
name|public
label|:
end_label

begin_comment
comment|// Basic accessors
end_comment

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|_M_start
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|_M_finish
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|_M_start
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|_M_finish
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|_M_finish
argument_list|)
return|;
block|}
end_function

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|_M_start
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|_M_finish
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|_M_start
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
return|return
name|_M_start
index|[
name|difference_type
argument_list|(
name|__n
argument_list|)
index|]
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
return|return
name|_M_start
index|[
name|difference_type
argument_list|(
name|__n
argument_list|)
index|]
return|;
block|}
end_decl_stmt

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|_M_start
return|;
block|}
end_function

begin_function
name|reference
name|back
parameter_list|()
block|{
name|iterator
name|__tmp
init|=
name|_M_finish
decl_stmt|;
operator|--
name|__tmp
expr_stmt|;
return|return
operator|*
name|__tmp
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|_M_start
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
name|const_iterator
name|__tmp
operator|=
name|_M_finish
block|;
operator|--
name|__tmp
block|;
return|return
operator|*
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_finish
operator|-
name|_M_start
return|;
expr_stmt|;
end_expr_stmt

begin_macro
unit|}   size_type
name|max_size
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|_M_finish
operator|==
name|_M_start
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|// Constructor, destructor.
end_comment

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|deque
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
literal|0
argument_list|)
block|{}
name|deque
argument_list|(
specifier|const
name|deque
operator|&
name|__x
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__x.get_allocator()
argument_list|,
argument|__x.size()
argument_list|)
block|{
name|uninitialized_copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|_M_start
argument_list|)
block|; }
name|deque
argument_list|(
argument|size_type __n
argument_list|,
argument|const value_type& __value
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__n
argument_list|)
block|{
name|_M_fill_initialize
argument_list|(
name|__value
argument_list|)
block|; }
name|explicit
name|deque
argument_list|(
argument|size_type __n
argument_list|)
operator|:
name|_Base
argument_list|(
argument|allocator_type()
argument_list|,
argument|__n
argument_list|)
block|{
name|_M_fill_initialize
argument_list|(
name|value_type
argument_list|()
argument_list|)
block|; }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
comment|// Check whether it's an integral type.  If so, it's not an iterator.
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|deque
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_initialize_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_initialize_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_initialize_map
argument_list|(
name|__n
argument_list|)
block|;
name|_M_fill_initialize
argument_list|(
name|__x
argument_list|)
block|;   }
name|template
operator|<
name|class
name|_InputIter
operator|>
name|void
name|_M_initialize_dispatch
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|__false_type
argument_list|)
block|{
name|_M_range_initialize
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first
argument_list|)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|deque
argument_list|(
specifier|const
name|value_type
operator|*
name|__first
argument_list|,
specifier|const
name|value_type
operator|*
name|__last
argument_list|,
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__last - __first
argument_list|)
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_start
argument_list|)
block|; }
name|deque
argument_list|(
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__last - __first
argument_list|)
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_start
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
operator|~
name|deque
argument_list|()
block|{
name|destroy
argument_list|(
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
block|; }
name|deque
operator|&
name|operator
operator|=
operator|(
specifier|const
name|deque
operator|&
name|__x
operator|)
block|{
specifier|const
name|size_type
name|__len
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
operator|&
name|__x
operator|!=
name|this
condition|)
block|{
if|if
condition|(
name|__len
operator|>=
name|__x
operator|.
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|_M_start
argument_list|)
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
else|else
block|{
name|const_iterator
name|__mid
init|=
name|__x
operator|.
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|__len
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__mid
argument_list|,
name|_M_start
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|_M_finish
argument_list|,
name|__mid
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}     return
operator|*
name|this
expr_stmt|;
end_expr_stmt

begin_macro
unit|}            void
name|swap
argument_list|(
argument|deque& __x
argument_list|)
end_macro

begin_block
block|{
name|__STD
operator|::
name|swap
argument_list|(
name|_M_start
argument_list|,
name|__x
operator|.
name|_M_start
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|_M_finish
argument_list|,
name|__x
operator|.
name|_M_finish
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|_M_map
argument_list|,
name|__x
operator|.
name|_M_map
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|_M_map_size
argument_list|,
name|__x
operator|.
name|_M_map_size
argument_list|)
expr_stmt|;
block|}
end_block

begin_label
name|public
label|:
end_label

begin_comment
comment|// assign(), a generalized assignment member function.  Two
end_comment

begin_comment
comment|// versions: one that takes a count, and one that takes a range.
end_comment

begin_comment
comment|// The range version is a member template, so we dispatch on whether
end_comment

begin_comment
comment|// or not the type is an integer.
end_comment

begin_function
name|void
name|assign
parameter_list|(
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__val
parameter_list|)
block|{
if|if
condition|(
name|__n
operator|>
name|size
argument_list|()
condition|)
block|{
name|fill
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__n
operator|-
name|size
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|__n
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|assign
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_assign_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}  private:
comment|// helper functions for assign()
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __val
argument_list|,
argument|__true_type
argument_list|)
block|{
name|assign
argument_list|(
operator|(
name|size_type
operator|)
name|__n
argument_list|,
operator|(
name|_Tp
operator|)
name|__val
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
name|_M_assign_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first
argument_list|)
argument_list|)
block|;   }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__len
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__len
argument_list|)
block|;
if|if
condition|(
name|__len
operator|>
name|size
argument_list|()
condition|)
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__mid
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|erase
argument_list|(
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|begin
argument_list|()
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_else

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_comment
unit|public:
comment|// push_* and pop_*
end_comment

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__t
parameter_list|)
block|{
if|if
condition|(
name|_M_finish
operator|.
name|_M_cur
operator|!=
name|_M_finish
operator|.
name|_M_last
operator|-
literal|1
condition|)
block|{
name|construct
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|,
name|__t
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_back_aux
argument_list|(
name|__t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|()
block|{
if|if
condition|(
name|_M_finish
operator|.
name|_M_cur
operator|!=
name|_M_finish
operator|.
name|_M_last
operator|-
literal|1
condition|)
block|{
name|construct
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_back_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__t
parameter_list|)
block|{
if|if
condition|(
name|_M_start
operator|.
name|_M_cur
operator|!=
name|_M_start
operator|.
name|_M_first
condition|)
block|{
name|construct
argument_list|(
name|_M_start
operator|.
name|_M_cur
operator|-
literal|1
argument_list|,
name|__t
argument_list|)
expr_stmt|;
operator|--
name|_M_start
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_front_aux
argument_list|(
name|__t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_front
parameter_list|()
block|{
if|if
condition|(
name|_M_start
operator|.
name|_M_cur
operator|!=
name|_M_start
operator|.
name|_M_first
condition|)
block|{
name|construct
argument_list|(
name|_M_start
operator|.
name|_M_cur
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|--
name|_M_start
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_front_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
if|if
condition|(
name|_M_finish
operator|.
name|_M_cur
operator|!=
name|_M_finish
operator|.
name|_M_first
condition|)
block|{
operator|--
name|_M_finish
operator|.
name|_M_cur
expr_stmt|;
name|destroy
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
block|}
else|else
name|_M_pop_back_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_front
parameter_list|()
block|{
if|if
condition|(
name|_M_start
operator|.
name|_M_cur
operator|!=
name|_M_start
operator|.
name|_M_last
operator|-
literal|1
condition|)
block|{
name|destroy
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
operator|++
name|_M_start
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_pop_front_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|// Insert
end_comment

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
if|if
condition|(
name|position
operator|.
name|_M_cur
operator|==
name|_M_start
operator|.
name|_M_cur
condition|)
block|{
name|push_front
argument_list|(
name|__x
argument_list|)
expr_stmt|;
return|return
name|_M_start
return|;
block|}
elseif|else
if|if
condition|(
name|position
operator|.
name|_M_cur
operator|==
name|_M_finish
operator|.
name|_M_cur
condition|)
block|{
name|push_back
argument_list|(
name|__x
argument_list|)
expr_stmt|;
name|iterator
name|__tmp
init|=
name|_M_finish
decl_stmt|;
operator|--
name|__tmp
expr_stmt|;
return|return
name|__tmp
return|;
block|}
else|else
block|{
return|return
name|_M_insert_aux
argument_list|(
name|position
argument_list|,
name|__x
argument_list|)
return|;
block|}
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|__position
argument_list|,
name|value_type
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_comment
comment|// Check whether it's an integral type.  If so, it's not an iterator.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_insert_dispatch
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|insert
argument_list|(
name|__pos
argument_list|,
operator|(
name|size_type
operator|)
name|__n
argument_list|,
operator|(
name|value_type
operator|)
name|__x
argument_list|)
block|;   }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
name|insert
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|__ITERATOR_CATEGORY
argument_list|(
name|__first
argument_list|)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|const value_type* __first
argument_list|,
argument|const value_type* __last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|const_iterator
name|__first
parameter_list|,
name|const_iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|__new_size
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
specifier|const
name|size_type
name|__len
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|__new_size
operator|<
name|__len
condition|)
name|erase
argument_list|(
name|_M_start
operator|+
name|__new_size
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|_M_finish
argument_list|,
name|__new_size
operator|-
name|__len
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|)
block|{
name|resize
argument_list|(
name|new_size
argument_list|,
name|value_type
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|// Erase
end_comment

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__pos
parameter_list|)
block|{
name|iterator
name|__next
init|=
name|__pos
decl_stmt|;
operator|++
name|__next
expr_stmt|;
name|difference_type
name|__index
init|=
name|__pos
operator|-
name|_M_start
decl_stmt|;
if|if
condition|(
name|__index
operator|<
operator|(
name|size
argument_list|()
operator|>>
literal|1
operator|)
condition|)
block|{
name|copy_backward
argument_list|(
name|_M_start
argument_list|,
name|__pos
argument_list|,
name|__next
argument_list|)
expr_stmt|;
name|pop_front
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|__next
argument_list|,
name|_M_finish
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
name|pop_back
argument_list|()
expr_stmt|;
block|}
return|return
name|_M_start
operator|+
name|__index
return|;
block|}
end_function

begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal construction/destruction
end_comment

begin_function_decl
name|void
name|_M_fill_initialize
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__value
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_range_initialize
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_range_initialize
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal push_* and pop_*
end_comment

begin_function_decl
name|void
name|_M_push_back_aux
parameter_list|(
specifier|const
name|value_type
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_push_back_aux
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_push_front_aux
parameter_list|(
specifier|const
name|value_type
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_push_front_aux
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_pop_back_aux
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_pop_front_aux
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal insert functions
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function_decl
name|iterator
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|iterator
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|size_type __n
argument_list|)
expr_stmt|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function_decl
name|void
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|,
specifier|const
name|value_type
modifier|*
name|__first
parameter_list|,
specifier|const
name|value_type
modifier|*
name|__last
parameter_list|,
name|size_type
name|__n
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|const_iterator
name|__first
parameter_list|,
name|const_iterator
name|__last
parameter_list|,
name|size_type
name|__n
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function
name|iterator
name|_M_reserve_elements_at_front
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|size_type
name|__vacancies
init|=
name|_M_start
operator|.
name|_M_cur
operator|-
name|_M_start
operator|.
name|_M_first
decl_stmt|;
if|if
condition|(
name|__n
operator|>
name|__vacancies
condition|)
name|_M_new_elements_at_front
argument_list|(
name|__n
operator|-
name|__vacancies
argument_list|)
expr_stmt|;
return|return
name|_M_start
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|_M_reserve_elements_at_back
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|size_type
name|__vacancies
init|=
operator|(
name|_M_finish
operator|.
name|_M_last
operator|-
name|_M_finish
operator|.
name|_M_cur
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|__n
operator|>
name|__vacancies
condition|)
name|_M_new_elements_at_back
argument_list|(
name|__n
operator|-
name|__vacancies
argument_list|)
expr_stmt|;
return|return
name|_M_finish
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|_M_new_elements_at_front
parameter_list|(
name|size_type
name|__new_elements
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_new_elements_at_back
parameter_list|(
name|size_type
name|__new_elements
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Allocation of _M_map and nodes
end_comment

begin_comment
comment|// Makes sure the _M_map has space for new nodes.  Does not actually
end_comment

begin_comment
comment|//  add the nodes.  Can invalidate _M_map pointers.  (And consequently,
end_comment

begin_comment
comment|//  deque iterators.)
end_comment

begin_function
name|void
name|_M_reserve_map_at_back
parameter_list|(
name|size_type
name|__nodes_to_add
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|__nodes_to_add
operator|+
literal|1
operator|>
name|_M_map_size
operator|-
operator|(
name|_M_finish
operator|.
name|_M_node
operator|-
name|_M_map
operator|)
condition|)
name|_M_reallocate_map
argument_list|(
name|__nodes_to_add
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|_M_reserve_map_at_front
parameter_list|(
name|size_type
name|__nodes_to_add
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|__nodes_to_add
operator|>
name|size_type
argument_list|(
name|_M_start
operator|.
name|_M_node
operator|-
name|_M_map
argument_list|)
condition|)
name|_M_reallocate_map
argument_list|(
name|__nodes_to_add
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|_M_reallocate_map
parameter_list|(
name|size_type
name|__nodes_to_add
parameter_list|,
name|bool
name|__add_at_front
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifdef

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
literal|0
operator|>
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|size
argument_list|()
operator|==
name|__x
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__x
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
literal|0
operator|>
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|size
argument_list|()
operator|!=
name|__x
operator|.
name|size
argument_list|()
operator|||
operator|!
name|equal
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__x
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
literal|0
operator|>
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|lexicographical_compare
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_comment
unit|};
comment|// Non-inline member functions
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|template
operator|<
name|class
name|_InputIter
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_assign_aux
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|iterator
name|__cur
operator|=
name|begin
argument_list|()
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
operator|&&
name|__cur
operator|!=
name|end
argument_list|()
condition|;
operator|++
name|__cur
operator|,
operator|++
name|__first
control|)
operator|*
name|__cur
operator|=
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
name|erase
argument_list|(
name|__cur
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
end_if

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|size_type __n
argument_list|,
argument|const value_type& __x
argument_list|)
block|{
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_start
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_fill
argument_list|(
name|__new_start
argument_list|,
name|_M_start
argument_list|,
name|__x
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_finish
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_fill
argument_list|(
name|_M_finish
argument_list|,
name|__new_finish
argument_list|,
name|__x
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
block|}
end_elseif

begin_else
else|else
name|_M_insert_aux
argument_list|(
name|__pos
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
end_else

begin_ifndef
unit|}
ifndef|#
directive|ifndef
name|__STL_MEMBER_TEMPLATES
end_ifndef

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|const value_type* __first
argument_list|,
argument|const value_type* __last
argument_list|)
block|{
name|size_type
name|__n
operator|=
name|__last
operator|-
name|__first
block|;
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_start
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
unit|}   else
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_finish
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|_M_insert_aux
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|__n
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|)
block|{
name|size_type
name|__n
operator|=
name|__last
operator|-
name|__first
block|;
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_start
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
unit|}   else
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_finish
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|_M_insert_aux
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|__n
argument_list|)
expr_stmt|;
end_if

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|iterator
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|erase
argument_list|(
argument|iterator __first
argument_list|,
argument|iterator __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|_M_start
operator|&&
name|__last
operator|==
name|_M_finish
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
return|return
name|_M_finish
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|difference_type
name|__n
init|=
name|__last
operator|-
name|__first
decl_stmt|;
name|difference_type
name|__elems_before
init|=
name|__first
operator|-
name|_M_start
decl_stmt|;
if|if
condition|(
name|__elems_before
operator|<
operator|(
name|size
argument_list|()
operator|-
name|__n
operator|)
operator|/
literal|2
condition|)
block|{
name|copy_backward
argument_list|(
name|_M_start
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
name|iterator
name|__new_start
init|=
name|_M_start
operator|+
name|__n
decl_stmt|;
name|destroy
argument_list|(
name|_M_start
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|__last
argument_list|,
name|_M_finish
argument_list|,
name|__first
argument_list|)
expr_stmt|;
name|iterator
name|__new_finish
init|=
name|_M_finish
operator|-
name|__n
decl_stmt|;
name|destroy
argument_list|(
name|__new_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_destroy_nodes
argument_list|(
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
block|}
return|return
name|_M_start
operator|+
name|__elems_before
return|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|clear
argument_list|()
block|{
for|for
control|(
name|_Map_pointer
name|__node
init|=
name|_M_start
operator|.
name|_M_node
operator|+
literal|1
init|;
name|__node
operator|<
name|_M_finish
operator|.
name|_M_node
condition|;
operator|++
name|__node
control|)
block|{
name|destroy
argument_list|(
operator|*
name|__node
argument_list|,
operator|*
name|__node
operator|+
name|_S_buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|_M_deallocate_node
argument_list|(
operator|*
name|__node
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|_M_start
operator|.
name|_M_node
operator|!=
name|_M_finish
operator|.
name|_M_node
condition|)
block|{
name|destroy
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|,
name|_M_start
operator|.
name|_M_last
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|_M_finish
operator|.
name|_M_first
argument_list|,
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
name|_M_deallocate_node
argument_list|(
name|_M_finish
operator|.
name|_M_first
argument_list|)
expr_stmt|;
block|}
else|else
name|destroy
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|,
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|_M_finish
operator|=
name|_M_start
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Precondition: _M_start and _M_finish have already been initialized,
end_comment

begin_comment
comment|// but none of the deque's elements have yet been constructed.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_fill_initialize
argument_list|(
argument|const value_type& __value
argument_list|)
block|{
name|_Map_pointer
name|__cur
block|;
name|__STL_TRY
block|{
for|for
control|(
name|__cur
operator|=
name|_M_start
operator|.
name|_M_node
init|;
name|__cur
operator|<
name|_M_finish
operator|.
name|_M_node
condition|;
operator|++
name|__cur
control|)
name|uninitialized_fill
argument_list|(
operator|*
name|__cur
argument_list|,
operator|*
name|__cur
operator|+
name|_S_buffer_size
argument_list|()
argument_list|,
name|__value
argument_list|)
expr_stmt|;
name|uninitialized_fill
argument_list|(
name|_M_finish
operator|.
name|_M_first
argument_list|,
name|_M_finish
operator|.
name|_M_cur
argument_list|,
name|__value
argument_list|)
block|;   }
name|__STL_UNWIND
argument_list|(
name|destroy
argument_list|(
name|_M_start
argument_list|,
name|iterator
argument_list|(
operator|*
name|__cur
argument_list|,
name|__cur
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_range_initialize
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|_M_initialize_map
argument_list|(
literal|0
argument_list|)
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
name|push_back
argument_list|(
operator|*
name|__first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_range_initialize
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__n
argument_list|)
block|;
name|_M_initialize_map
argument_list|(
name|__n
argument_list|)
block|;
name|_Map_pointer
name|__cur_node
block|;
name|__STL_TRY
block|{
for|for
control|(
name|__cur_node
operator|=
name|_M_start
operator|.
name|_M_node
init|;
name|__cur_node
operator|<
name|_M_finish
operator|.
name|_M_node
condition|;
operator|++
name|__cur_node
control|)
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|_S_buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
operator|*
name|__cur_node
argument_list|)
expr_stmt|;
name|__first
operator|=
name|__mid
expr_stmt|;
block|}
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_finish
operator|.
name|_M_first
argument_list|)
block|;   }
name|__STL_UNWIND
argument_list|(
name|destroy
argument_list|(
name|_M_start
argument_list|,
name|iterator
argument_list|(
operator|*
name|__cur_node
argument_list|,
name|__cur_node
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_comment
comment|// Called only if _M_finish._M_cur == _M_finish._M_last - 1.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_push_back_aux
argument_list|(
argument|const value_type& __t
argument_list|)
block|{
name|value_type
name|__t_copy
operator|=
name|__t
block|;
name|_M_reserve_map_at_back
argument_list|()
block|;
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
operator|)
operator|=
name|_M_allocate_node
argument_list|()
block|;
name|__STL_TRY
block|{
name|construct
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|,
name|__t_copy
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_cur
operator|=
name|_M_finish
operator|.
name|_M_first
block|;   }
name|__STL_UNWIND
argument_list|(
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
block|; }
comment|// Called only if _M_finish._M_cur == _M_finish._M_last - 1.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_push_back_aux
argument_list|()
block|{
name|_M_reserve_map_at_back
argument_list|()
block|;
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
operator|)
operator|=
name|_M_allocate_node
argument_list|()
block|;
name|__STL_TRY
block|{
name|construct
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_cur
operator|=
name|_M_finish
operator|.
name|_M_first
block|;   }
name|__STL_UNWIND
argument_list|(
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
block|; }
comment|// Called only if _M_start._M_cur == _M_start._M_first.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_push_front_aux
argument_list|(
argument|const value_type& __t
argument_list|)
block|{
name|value_type
name|__t_copy
operator|=
name|__t
block|;
name|_M_reserve_map_at_front
argument_list|()
block|;
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
operator|)
operator|=
name|_M_allocate_node
argument_list|()
block|;
name|__STL_TRY
block|{
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
argument_list|)
block|;
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_start
operator|.
name|_M_last
operator|-
literal|1
block|;
name|construct
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|,
name|__t_copy
argument_list|)
block|;   }
name|__STL_UNWIND
argument_list|(
operator|(
operator|++
name|_M_start
operator|,
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
operator|)
argument_list|)
operator|)
argument_list|)
block|; }
comment|// Called only if _M_start._M_cur == _M_start._M_first.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_push_front_aux
argument_list|()
block|{
name|_M_reserve_map_at_front
argument_list|()
block|;
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
operator|)
operator|=
name|_M_allocate_node
argument_list|()
block|;
name|__STL_TRY
block|{
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
argument_list|)
block|;
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_start
operator|.
name|_M_last
operator|-
literal|1
block|;
name|construct
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|)
block|;   }
name|__STL_UNWIND
argument_list|(
operator|(
operator|++
name|_M_start
operator|,
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
operator|)
argument_list|)
operator|)
argument_list|)
block|; }
comment|// Called only if _M_finish._M_cur == _M_finish._M_first.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_pop_back_aux
argument_list|()
block|{
name|_M_deallocate_node
argument_list|(
name|_M_finish
operator|.
name|_M_first
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|-
literal|1
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_cur
operator|=
name|_M_finish
operator|.
name|_M_last
operator|-
literal|1
block|;
name|destroy
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|)
block|; }
comment|// Called only if _M_start._M_cur == _M_start._M_last - 1.  Note that
comment|// if the deque has at least one element (a precondition for this member
comment|// function), and if _M_start._M_cur == _M_start._M_last, then the deque
comment|// must have at least two nodes.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_pop_front_aux
argument_list|()
block|{
name|destroy
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|)
block|;
name|_M_deallocate_node
argument_list|(
name|_M_start
operator|.
name|_M_first
argument_list|)
block|;
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|_M_start
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
block|;
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_start
operator|.
name|_M_first
block|; }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|inserter
argument_list|(
operator|*
name|this
argument_list|,
name|__pos
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__n
argument_list|)
block|;
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_start
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
unit|}   else
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_finish
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|__STL_TRY
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
name|_M_insert_aux
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|__n
argument_list|)
expr_stmt|;
end_if

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|typename
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|iterator
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|const value_type& __x
argument_list|)
block|{
name|difference_type
name|__index
operator|=
name|__pos
operator|-
name|_M_start
block|;
name|value_type
name|__x_copy
operator|=
name|__x
block|;
if|if
condition|(
name|__index
operator|<
name|size
argument_list|()
operator|/
literal|2
condition|)
block|{
name|push_front
argument_list|(
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|__front1
init|=
name|_M_start
decl_stmt|;
operator|++
name|__front1
expr_stmt|;
name|iterator
name|__front2
init|=
name|__front1
decl_stmt|;
operator|++
name|__front2
expr_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__index
expr_stmt|;
name|iterator
name|__pos1
init|=
name|__pos
decl_stmt|;
operator|++
name|__pos1
expr_stmt|;
name|copy
argument_list|(
name|__front2
argument_list|,
name|__pos1
argument_list|,
name|__front1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|push_back
argument_list|(
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|__back1
init|=
name|_M_finish
decl_stmt|;
operator|--
name|__back1
expr_stmt|;
name|iterator
name|__back2
init|=
name|__back1
decl_stmt|;
operator|--
name|__back2
expr_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__index
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__back2
argument_list|,
name|__back1
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|*
name|__pos
operator|=
name|__x_copy
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__pos
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|typename
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|iterator
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|)
block|{
name|difference_type
name|__index
operator|=
name|__pos
operator|-
name|_M_start
block|;
if|if
condition|(
name|__index
operator|<
name|size
argument_list|()
operator|/
literal|2
condition|)
block|{
name|push_front
argument_list|(
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|__front1
init|=
name|_M_start
decl_stmt|;
operator|++
name|__front1
expr_stmt|;
name|iterator
name|__front2
init|=
name|__front1
decl_stmt|;
operator|++
name|__front2
expr_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__index
expr_stmt|;
name|iterator
name|__pos1
init|=
name|__pos
decl_stmt|;
operator|++
name|__pos1
expr_stmt|;
name|copy
argument_list|(
name|__front2
argument_list|,
name|__pos1
argument_list|,
name|__front1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|push_back
argument_list|(
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|__back1
init|=
name|_M_finish
decl_stmt|;
operator|--
name|__back1
expr_stmt|;
name|iterator
name|__back2
init|=
name|__back1
decl_stmt|;
operator|--
name|__back2
expr_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__index
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__back2
argument_list|,
name|__back1
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|*
name|__pos
operator|=
name|value_type
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__pos
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|size_type __n
argument_list|,
argument|const value_type& __x
argument_list|)
block|{
specifier|const
name|difference_type
name|__elems_before
operator|=
name|__pos
operator|-
name|_M_start
block|;
name|size_type
name|__length
operator|=
name|size
argument_list|()
block|;
name|value_type
name|__x_copy
operator|=
name|__x
block|;
if|if
condition|(
name|__elems_before
operator|<
name|__length
operator|/
literal|2
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_start
init|=
name|_M_start
decl_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__elems_before
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|__elems_before
operator|>=
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__start_n
init|=
name|_M_start
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|_M_start
argument_list|,
name|__start_n
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__start_n
argument_list|,
name|__pos
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|__pos
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|,
name|__pos
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__uninitialized_copy_fill
argument_list|(
name|_M_start
argument_list|,
name|__pos
argument_list|,
name|__new_start
argument_list|,
name|_M_start
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|fill
argument_list|(
name|__old_start
argument_list|,
name|__pos
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     __STL_UNWIND
operator|(
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_finish
init|=
name|_M_finish
decl_stmt|;
specifier|const
name|difference_type
name|__elems_after
init|=
name|difference_type
argument_list|(
name|__length
argument_list|)
operator|-
name|__elems_before
decl_stmt|;
name|__pos
operator|=
name|_M_finish
operator|-
name|__elems_after
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|__elems_after
operator|>
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__finish_n
init|=
name|_M_finish
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|__finish_n
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__finish_n
argument_list|,
name|__old_finish
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|__pos
argument_list|,
name|__pos
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|__uninitialized_fill_copy
argument_list|(
name|_M_finish
argument_list|,
name|__pos
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|,
name|__x_copy
argument_list|,
name|__pos
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|fill
argument_list|(
name|__pos
argument_list|,
name|__old_finish
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|size_type __n
argument_list|)
block|{
specifier|const
name|difference_type
name|__elemsbefore
operator|=
name|__pos
operator|-
name|_M_start
block|;
name|size_type
name|__length
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
name|__elemsbefore
operator|<
name|__length
operator|/
literal|2
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_start
init|=
name|_M_start
decl_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__elemsbefore
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|__elemsbefore
operator|>=
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__start_n
init|=
name|_M_start
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|_M_start
argument_list|,
name|__start_n
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__start_n
argument_list|,
name|__pos
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pos
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|difference_type
argument_list|(
name|__n
argument_list|)
operator|-
name|__elemsbefore
argument_list|)
expr_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|_M_start
argument_list|,
name|__pos
argument_list|,
name|__first
argument_list|,
name|__mid
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     __STL_UNWIND
operator|(
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_finish
init|=
name|_M_finish
decl_stmt|;
specifier|const
name|difference_type
name|__elemsafter
init|=
name|difference_type
argument_list|(
name|__length
argument_list|)
operator|-
name|__elemsbefore
decl_stmt|;
name|__pos
operator|=
name|_M_finish
operator|-
name|__elemsafter
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|__elemsafter
operator|>
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__finish_n
init|=
name|_M_finish
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|__finish_n
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__finish_n
argument_list|,
name|__old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|__elemsafter
argument_list|)
expr_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|__pos
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
block|}
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_else
unit|}
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|const value_type* __first
argument_list|,
argument|const value_type* __last
argument_list|,
argument|size_type __n
argument_list|)
block|{
specifier|const
name|difference_type
name|__elemsbefore
operator|=
name|__pos
operator|-
name|_M_start
block|;
name|size_type
name|__length
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
name|__elemsbefore
operator|<
name|__length
operator|/
literal|2
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_start
init|=
name|_M_start
decl_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__elemsbefore
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|__elemsbefore
operator|>=
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__start_n
init|=
name|_M_start
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|_M_start
argument_list|,
name|__start_n
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__start_n
argument_list|,
name|__pos
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pos
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
specifier|const
name|value_type
modifier|*
name|__mid
init|=
name|__first
operator|+
operator|(
name|difference_type
argument_list|(
name|__n
argument_list|)
operator|-
name|__elemsbefore
operator|)
decl_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|_M_start
argument_list|,
name|__pos
argument_list|,
name|__first
argument_list|,
name|__mid
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     __STL_UNWIND
operator|(
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_finish
init|=
name|_M_finish
decl_stmt|;
specifier|const
name|difference_type
name|__elemsafter
init|=
name|difference_type
argument_list|(
name|__length
argument_list|)
operator|-
name|__elemsbefore
decl_stmt|;
name|__pos
operator|=
name|_M_finish
operator|-
name|__elemsafter
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|__elemsafter
operator|>
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__finish_n
init|=
name|_M_finish
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|__finish_n
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__finish_n
argument_list|,
name|__old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|value_type
modifier|*
name|__mid
init|=
name|__first
operator|+
name|__elemsafter
decl_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|__pos
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
block|}
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|,
argument|size_type __n
argument_list|)
block|{
specifier|const
name|difference_type
name|__elemsbefore
operator|=
name|__pos
operator|-
name|_M_start
block|;
name|size_type
name|__length
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
name|__elemsbefore
operator|<
name|__length
operator|/
literal|2
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_start
init|=
name|_M_start
decl_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__elemsbefore
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|__elemsbefore
operator|>=
name|__n
condition|)
block|{
name|iterator
name|__start_n
init|=
name|_M_start
operator|+
name|__n
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|_M_start
argument_list|,
name|__start_n
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__start_n
argument_list|,
name|__pos
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pos
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|const_iterator
name|__mid
init|=
name|__first
operator|+
operator|(
name|__n
operator|-
name|__elemsbefore
operator|)
decl_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|_M_start
argument_list|,
name|__pos
argument_list|,
name|__first
argument_list|,
name|__mid
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     __STL_UNWIND
operator|(
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
operator|)
expr_stmt|;
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_finish
init|=
name|_M_finish
decl_stmt|;
specifier|const
name|difference_type
name|__elemsafter
init|=
name|__length
operator|-
name|__elemsbefore
decl_stmt|;
name|__pos
operator|=
name|_M_finish
operator|-
name|__elemsafter
expr_stmt|;
name|__STL_TRY
block|{
if|if
condition|(
name|__elemsafter
operator|>
name|__n
condition|)
block|{
name|iterator
name|__finish_n
init|=
name|_M_finish
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|__finish_n
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__finish_n
argument_list|,
name|__old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|const_iterator
name|__mid
init|=
name|__first
operator|+
name|__elemsafter
decl_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|__pos
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
block|}
block|}
name|__STL_UNWIND
argument_list|(
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_block

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_new_elements_at_front
argument_list|(
argument|size_type __new_elems
argument_list|)
block|{
name|size_type
name|__new_nodes
operator|=
operator|(
name|__new_elems
operator|+
name|_S_buffer_size
argument_list|()
operator|-
literal|1
operator|)
operator|/
name|_S_buffer_size
argument_list|()
block|;
name|_M_reserve_map_at_front
argument_list|(
name|__new_nodes
argument_list|)
block|;
name|size_type
name|__i
block|;
name|__STL_TRY
block|{
for|for
control|(
name|__i
operator|=
literal|1
init|;
name|__i
operator|<=
name|__new_nodes
condition|;
operator|++
name|__i
control|)
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
name|__i
operator|)
operator|=
name|_M_allocate_node
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
for|for
control|(
name|size_type
name|__j
init|=
literal|1
init|;
name|__j
operator|<
name|__i
condition|;
operator|++
name|__j
control|)
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
name|__j
operator|)
argument_list|)
expr_stmt|;
name|throw
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_EXCEPTIONS */
end_comment

begin_expr_stmt
unit|}
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_new_elements_at_back
argument_list|(
argument|size_type __new_elems
argument_list|)
block|{
name|size_type
name|__new_nodes
operator|=
operator|(
name|__new_elems
operator|+
name|_S_buffer_size
argument_list|()
operator|-
literal|1
operator|)
operator|/
name|_S_buffer_size
argument_list|()
block|;
name|_M_reserve_map_at_back
argument_list|(
name|__new_nodes
argument_list|)
block|;
name|size_type
name|__i
block|;
name|__STL_TRY
block|{
for|for
control|(
name|__i
operator|=
literal|1
init|;
name|__i
operator|<=
name|__new_nodes
condition|;
operator|++
name|__i
control|)
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
name|__i
operator|)
operator|=
name|_M_allocate_node
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
name|catch
argument_list|(
argument|...
argument_list|)
block|{
for|for
control|(
name|size_type
name|__j
init|=
literal|1
init|;
name|__j
operator|<
name|__i
condition|;
operator|++
name|__j
control|)
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
name|__j
operator|)
argument_list|)
expr_stmt|;
name|throw
expr_stmt|;
end_expr_stmt

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_EXCEPTIONS */
end_comment

begin_expr_stmt
unit|}
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsize
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsize
operator|>
operator|::
name|_M_reallocate_map
argument_list|(
argument|size_type __nodes_to_add
argument_list|,
argument|bool __add_at_front
argument_list|)
block|{
name|size_type
name|__old_num_nodes
operator|=
name|_M_finish
operator|.
name|_M_node
operator|-
name|_M_start
operator|.
name|_M_node
operator|+
literal|1
block|;
name|size_type
name|__new_num_nodes
operator|=
name|__old_num_nodes
operator|+
name|__nodes_to_add
block|;
name|_Map_pointer
name|__new_nstart
block|;
if|if
condition|(
name|_M_map_size
operator|>
literal|2
operator|*
name|__new_num_nodes
condition|)
block|{
name|__new_nstart
operator|=
name|_M_map
operator|+
operator|(
name|_M_map_size
operator|-
name|__new_num_nodes
operator|)
operator|/
literal|2
operator|+
operator|(
name|__add_at_front
condition|?
name|__nodes_to_add
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|__new_nstart
operator|<
name|_M_start
operator|.
name|_M_node
condition|)
name|copy
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_nstart
argument_list|)
expr_stmt|;
else|else
name|copy_backward
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_nstart
operator|+
name|__old_num_nodes
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|size_type
name|__new_map_size
init|=
name|_M_map_size
operator|+
name|max
argument_list|(
name|_M_map_size
argument_list|,
name|__nodes_to_add
argument_list|)
operator|+
literal|2
decl_stmt|;
name|_Map_pointer
name|__new_map
init|=
name|_M_allocate_map
argument_list|(
name|__new_map_size
argument_list|)
decl_stmt|;
name|__new_nstart
operator|=
name|__new_map
operator|+
operator|(
name|__new_map_size
operator|-
name|__new_num_nodes
operator|)
operator|/
literal|2
operator|+
operator|(
name|__add_at_front
condition|?
name|__nodes_to_add
else|:
literal|0
operator|)
expr_stmt|;
name|copy
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_nstart
argument_list|)
expr_stmt|;
name|_M_deallocate_map
argument_list|(
name|_M_map
argument_list|,
name|_M_map_size
argument_list|)
expr_stmt|;
name|_M_map
operator|=
name|__new_map
expr_stmt|;
name|_M_map_size
operator|=
name|__new_map_size
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|__new_nstart
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|__new_nstart
operator|+
name|__old_num_nodes
operator|-
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Nonmember functions.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_NON_TYPE_TMPL_PARAM_BUG
end_ifndef

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|size
argument_list|()
operator|==
name|__y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
name|bool
name|operator
operator|<
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|__bufsiz
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|,
name|__y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_NON_TYPE_TMPL_PARAM_BUG */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
argument_list|)
operator|&&
expr|\
operator|!
name|defined
argument_list|(
name|__STL_NON_TYPE_TMPL_PARAM_BUG
argument_list|)
end_if

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|size_t
name|__bufsiz
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|deque<_Tp
argument_list|,
argument|_Alloc
argument_list|,
argument|__bufsiz>& __x
argument_list|,
argument|deque<_Tp
argument_list|,
argument|_Alloc
argument_list|,
argument|__bufsiz>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|reset
name|woff
name|1174
pragma|#
directive|pragma
name|reset
name|woff
name|1375
endif|#
directive|endif
name|__STL_END_NAMESPACE
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_DEQUE_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

