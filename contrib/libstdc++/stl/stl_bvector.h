begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_BVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_BVECTOR_H
end_define

begin_decl_stmt
name|__STL_BEGIN_NAMESPACE
specifier|static
specifier|const
name|int
name|__WORD_BIT
init|=
name|int
argument_list|(
name|CHAR_BIT
operator|*
expr|sizeof
operator|(
name|unsigned
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|set
name|woff
name|1174
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|__bit_reference
block|{
name|unsigned
name|int
modifier|*
name|p
decl_stmt|;
name|unsigned
name|int
name|mask
decl_stmt|;
name|__bit_reference
argument_list|(
argument|unsigned int* x
argument_list|,
argument|unsigned int y
argument_list|)
block|:
name|p
argument_list|(
name|x
argument_list|)
operator|,
name|mask
argument_list|(
argument|y
argument_list|)
block|{}
name|public
operator|:
name|__bit_reference
argument_list|()
operator|:
name|p
argument_list|(
literal|0
argument_list|)
operator|,
name|mask
argument_list|(
literal|0
argument_list|)
block|{}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
operator|!
operator|(
operator|!
operator|(
operator|*
name|p
operator|&
name|mask
operator|)
operator|)
return|;
block|}
name|__bit_reference
modifier|&
name|operator
init|=
operator|(
name|bool
name|x
operator|)
block|{
if|if
condition|(
name|x
condition|)
operator|*
name|p
operator||=
name|mask
expr_stmt|;
else|else
operator|*
name|p
operator|&=
operator|~
name|mask
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|__bit_reference
modifier|&
name|operator
init|=
operator|(
specifier|const
name|__bit_reference
operator|&
name|x
operator|)
block|{
return|return
operator|*
name|this
operator|=
name|bool
argument_list|(
name|x
argument_list|)
return|;
block|}
name|bool
name|operator
decl|==
argument_list|(
specifier|const
name|__bit_reference
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|bool
argument_list|(
operator|*
name|this
argument_list|)
operator|==
name|bool
argument_list|(
name|x
argument_list|)
return|;
block|}
name|bool
name|operator
decl|<
argument_list|(
specifier|const
name|__bit_reference
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|bool
argument_list|(
operator|*
name|this
argument_list|)
operator|<
name|bool
argument_list|(
name|x
argument_list|)
return|;
block|}
name|void
name|flip
argument_list|()
block|{
operator|*
name|p
operator|^=
name|mask
expr_stmt|;
block|}
end_struct

begin_function
unit|};
specifier|inline
name|void
name|swap
parameter_list|(
name|__bit_reference
name|x
parameter_list|,
name|__bit_reference
name|y
parameter_list|)
block|{
name|bool
name|tmp
init|=
name|x
decl_stmt|;
name|x
operator|=
name|y
expr_stmt|;
name|y
operator|=
name|tmp
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|struct
name|__bit_iterator
range|:
name|public
name|random_access_iterator
operator|<
name|bool
decl_stmt|,
name|ptrdiff_t
decl|>
block|{
typedef|typedef
name|__bit_reference
name|reference
typedef|;
typedef|typedef
name|__bit_reference
modifier|*
name|pointer
typedef|;
typedef|typedef
name|__bit_iterator
name|iterator
typedef|;
name|unsigned
name|int
modifier|*
name|p
decl_stmt|;
name|unsigned
name|int
name|offset
decl_stmt|;
name|void
name|bump_up
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|++
operator|==
name|__WORD_BIT
operator|-
literal|1
condition|)
block|{
name|offset
operator|=
literal|0
expr_stmt|;
operator|++
name|p
expr_stmt|;
block|}
block|}
name|void
name|bump_down
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|--
operator|==
literal|0
condition|)
block|{
name|offset
operator|=
name|__WORD_BIT
operator|-
literal|1
expr_stmt|;
operator|--
name|p
expr_stmt|;
block|}
block|}
name|__bit_iterator
argument_list|()
operator|:
name|p
argument_list|(
literal|0
argument_list|)
operator|,
name|offset
argument_list|(
literal|0
argument_list|)
block|{}
name|__bit_iterator
argument_list|(
argument|unsigned int* x
argument_list|,
argument|unsigned int y
argument_list|)
operator|:
name|p
argument_list|(
name|x
argument_list|)
operator|,
name|offset
argument_list|(
argument|y
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|reference
argument_list|(
name|p
argument_list|,
literal|1U
operator|<<
name|offset
argument_list|)
return|;
block|}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|bump_up
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
name|bump_up
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|bump_down
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
name|bump_down
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|i
operator|)
block|{
name|difference_type
name|n
operator|=
name|i
operator|+
name|offset
block|;
name|p
operator|+=
name|n
operator|/
name|__WORD_BIT
block|;
name|n
operator|=
name|n
operator|%
name|__WORD_BIT
block|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|offset
operator|=
operator|(
name|unsigned
name|int
operator|)
name|n
operator|+
name|__WORD_BIT
expr_stmt|;
operator|--
name|p
expr_stmt|;
block|}
else|else
name|offset
operator|=
operator|(
name|unsigned
name|int
operator|)
name|n
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|i
operator|)
block|{
operator|*
name|this
operator|+=
operator|-
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|+
operator|(
name|difference_type
name|i
operator|)
specifier|const
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|+=
name|i
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|-
operator|(
name|difference_type
name|i
operator|)
specifier|const
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|-=
name|i
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|difference_type
name|operator
operator|-
operator|(
name|iterator
name|x
operator|)
specifier|const
block|{
return|return
name|__WORD_BIT
operator|*
operator|(
name|p
operator|-
name|x
operator|.
name|p
operator|)
operator|+
name|offset
operator|-
name|x
operator|.
name|offset
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|difference_type
name|i
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|i
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|p
operator|==
name|x
operator|.
name|p
operator|&&
name|offset
operator|==
name|x
operator|.
name|offset
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|p
operator|!=
name|x
operator|.
name|p
operator|||
name|offset
operator|!=
name|x
operator|.
name|offset
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
name|iterator
name|x
operator|)
specifier|const
block|{
return|return
name|p
operator|<
name|x
operator|.
name|p
operator|||
operator|(
name|p
operator|==
name|x
operator|.
name|p
operator|&&
name|offset
operator|<
name|x
operator|.
name|offset
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|};
name|struct
name|__bit_const_iterator
range|:
name|public
name|random_access_iterator
operator|<
name|bool
decl_stmt|,
name|ptrdiff_t
decl|>
block|{
typedef|typedef
name|bool
name|reference
typedef|;
typedef|typedef
name|bool
name|const_reference
typedef|;
typedef|typedef
specifier|const
name|bool
modifier|*
name|pointer
typedef|;
typedef|typedef
name|__bit_const_iterator
name|const_iterator
typedef|;
name|unsigned
name|int
modifier|*
name|p
decl_stmt|;
name|unsigned
name|int
name|offset
decl_stmt|;
name|void
name|bump_up
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|++
operator|==
name|__WORD_BIT
operator|-
literal|1
condition|)
block|{
name|offset
operator|=
literal|0
expr_stmt|;
operator|++
name|p
expr_stmt|;
block|}
block|}
name|void
name|bump_down
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|--
operator|==
literal|0
condition|)
block|{
name|offset
operator|=
name|__WORD_BIT
operator|-
literal|1
expr_stmt|;
operator|--
name|p
expr_stmt|;
block|}
block|}
name|__bit_const_iterator
argument_list|()
operator|:
name|p
argument_list|(
literal|0
argument_list|)
operator|,
name|offset
argument_list|(
literal|0
argument_list|)
block|{}
name|__bit_const_iterator
argument_list|(
argument|unsigned int* x
argument_list|,
argument|unsigned int y
argument_list|)
operator|:
name|p
argument_list|(
name|x
argument_list|)
operator|,
name|offset
argument_list|(
argument|y
argument_list|)
block|{}
name|__bit_const_iterator
argument_list|(
specifier|const
name|__bit_iterator
operator|&
name|x
argument_list|)
operator|:
name|p
argument_list|(
name|x
operator|.
name|p
argument_list|)
operator|,
name|offset
argument_list|(
argument|x.offset
argument_list|)
block|{}
name|const_reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|__bit_reference
argument_list|(
name|p
argument_list|,
literal|1U
operator|<<
name|offset
argument_list|)
return|;
block|}
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|bump_up
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
name|bump_up
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|bump_down
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
name|bump_down
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|i
operator|)
block|{
name|difference_type
name|n
operator|=
name|i
operator|+
name|offset
block|;
name|p
operator|+=
name|n
operator|/
name|__WORD_BIT
block|;
name|n
operator|=
name|n
operator|%
name|__WORD_BIT
block|;
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
name|offset
operator|=
operator|(
name|unsigned
name|int
operator|)
name|n
operator|+
name|__WORD_BIT
expr_stmt|;
operator|--
name|p
expr_stmt|;
block|}
else|else
name|offset
operator|=
operator|(
name|unsigned
name|int
operator|)
name|n
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|i
operator|)
block|{
operator|*
name|this
operator|+=
operator|-
name|i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|+
operator|(
name|difference_type
name|i
operator|)
specifier|const
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|+=
name|i
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|-
operator|(
name|difference_type
name|i
operator|)
specifier|const
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|-=
name|i
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|difference_type
name|operator
operator|-
operator|(
name|const_iterator
name|x
operator|)
specifier|const
block|{
return|return
name|__WORD_BIT
operator|*
operator|(
name|p
operator|-
name|x
operator|.
name|p
operator|)
operator|+
name|offset
operator|-
name|x
operator|.
name|offset
return|;
block|}
end_expr_stmt

begin_function
name|const_reference
name|operator
function|[]
parameter_list|(
name|difference_type
name|i
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|i
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|p
operator|==
name|x
operator|.
name|p
operator|&&
name|offset
operator|==
name|x
operator|.
name|offset
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|p
operator|!=
name|x
operator|.
name|p
operator|||
name|offset
operator|!=
name|x
operator|.
name|offset
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
name|const_iterator
name|x
operator|)
specifier|const
block|{
return|return
name|p
operator|<
name|x
operator|.
name|p
operator|||
operator|(
name|p
operator|==
name|x
operator|.
name|p
operator|&&
name|offset
operator|<
name|x
operator|.
name|offset
operator|)
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|// The next few lines are confusing.  What we're doing is declaring a
end_comment

begin_comment
comment|//  partial specialization of vector<T, Alloc> if we have the necessary
end_comment

begin_comment
comment|//  compiler support.  Otherwise, we define a class bit_vector which uses
end_comment

begin_comment
comment|//  the default allocator.  In either case, we typedef "data_allocator"
end_comment

begin_comment
comment|//  appropriately.
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STL_CLASS_PARTIAL_SPECIALIZATION
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__STL_NEED_BOOL
argument_list|)
end_if

begin_define
define|#
directive|define
name|__SGI_STL_VECBOOL_TEMPLATE
end_define

begin_define
define|#
directive|define
name|__BVECTOR
value|vector
end_define

begin_else
else|#
directive|else
end_else

begin_undef
undef|#
directive|undef
name|__SGI_STL_VECBOOL_TEMPLATE
end_undef

begin_define
define|#
directive|define
name|__BVECTOR
value|bit_vector
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__SGI_STL_VECBOOL_TEMPLATE
end_ifdef

begin_expr_stmt
name|__STL_END_NAMESPACE
include|#
directive|include
file|<stl_vector.h>
name|__STL_BEGIN_NAMESPACE
name|template
operator|<
name|class
name|Alloc
operator|>
name|class
name|vector
operator|<
name|bool
operator|,
name|Alloc
operator|>
else|#
directive|else
comment|/* __SGI_STL_VECBOOL_TEMPLATE */
name|class
name|bit_vector
endif|#
directive|endif
comment|/* __SGI_STL_VECBOOL_TEMPLATE */
block|{
ifdef|#
directive|ifdef
name|__SGI_STL_VECBOOL_TEMPLATE
typedef|typedef
name|simple_alloc
operator|<
name|unsigned
name|int
operator|,
name|Alloc
operator|>
name|data_allocator
expr_stmt|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __SGI_STL_VECBOOL_TEMPLATE */
end_comment

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|unsigned
name|int
operator|,
name|alloc
operator|>
name|data_allocator
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_VECBOOL_TEMPLATE */
end_comment

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|bool
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__bit_reference
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|bool
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__bit_reference
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|bool
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__bit_iterator
name|iterator
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__bit_const_iterator
name|const_iterator
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|,
name|value_type
operator|,
name|const_reference
operator|,
name|difference_type
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|,
name|value_type
operator|,
name|reference
operator|,
name|difference_type
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|iterator
name|start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|finish
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|unsigned
name|int
modifier|*
name|end_of_storage
decl_stmt|;
end_decl_stmt

begin_function
name|unsigned
name|int
modifier|*
name|bit_alloc
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
return|return
name|data_allocator
operator|::
name|allocate
argument_list|(
operator|(
name|n
operator|+
name|__WORD_BIT
operator|-
literal|1
operator|)
operator|/
name|__WORD_BIT
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|deallocate
parameter_list|()
block|{
if|if
condition|(
name|start
operator|.
name|p
condition|)
name|data_allocator
operator|::
name|deallocate
argument_list|(
name|start
operator|.
name|p
argument_list|,
name|end_of_storage
operator|-
name|start
operator|.
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|initialize
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
name|unsigned
name|int
modifier|*
name|q
init|=
name|bit_alloc
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|end_of_storage
operator|=
name|q
operator|+
operator|(
name|n
operator|+
name|__WORD_BIT
operator|-
literal|1
operator|)
operator|/
name|__WORD_BIT
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|finish
operator|=
name|start
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert_aux
parameter_list|(
name|iterator
name|position
parameter_list|,
name|bool
name|x
parameter_list|)
block|{
if|if
condition|(
name|finish
operator|.
name|p
operator|!=
name|end_of_storage
condition|)
block|{
name|copy_backward
argument_list|(
name|position
argument_list|,
name|finish
argument_list|,
name|finish
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|*
name|position
operator|=
name|x
expr_stmt|;
operator|++
name|finish
expr_stmt|;
block|}
else|else
block|{
name|size_type
name|len
init|=
name|size
argument_list|()
condition|?
literal|2
operator|*
name|size
argument_list|()
else|:
name|__WORD_BIT
decl_stmt|;
name|unsigned
name|int
modifier|*
name|q
init|=
name|bit_alloc
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|i
init|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|i
operator|++
operator|=
name|x
expr_stmt|;
name|finish
operator|=
name|copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|end_of_storage
operator|=
name|q
operator|+
operator|(
name|len
operator|+
name|__WORD_BIT
operator|-
literal|1
operator|)
operator|/
name|__WORD_BIT
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|initialize_range
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|start
operator|=
name|iterator
argument_list|()
block|;
name|finish
operator|=
name|iterator
argument_list|()
block|;
name|end_of_storage
operator|=
literal|0
block|;
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
name|push_back
argument_list|(
operator|*
name|first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|initialize_range
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
name|initialize
argument_list|(
name|n
argument_list|)
block|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|start
argument_list|)
block|;   }
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert_range
argument_list|(
argument|iterator pos
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
block|{
name|pos
operator|=
name|insert
argument_list|(
name|pos
argument_list|,
operator|*
name|first
argument_list|)
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|ForwardIterator
operator|>
name|void
name|insert_range
argument_list|(
argument|iterator position
argument_list|,
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|first
operator|!=
name|last
condition|)
block|{
name|size_type
name|n
init|=
literal|0
decl_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|capacity
argument_list|()
operator|-
name|size
argument_list|()
operator|>=
name|n
condition|)
block|{
name|copy_backward
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|finish
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|difference_type
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|size_type
name|len
init|=
name|size
argument_list|()
operator|+
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|unsigned
name|int
modifier|*
name|q
init|=
name|bit_alloc
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|i
init|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|=
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|finish
operator|=
name|copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|end_of_storage
operator|=
name|q
operator|+
operator|(
name|len
operator|+
name|__WORD_BIT
operator|-
literal|1
operator|)
operator|/
name|__WORD_BIT
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_else

begin_endif
unit|}   }
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_label
name|public
label|:
end_label

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|start
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|start
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|finish
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|finish
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|end
argument_list|()
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|const_iterator
argument_list|(
name|end_of_storage
argument_list|,
literal|0
argument_list|)
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|==
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
operator|)
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|__BVECTOR
argument_list|()
operator|:
name|start
argument_list|(
name|iterator
argument_list|()
argument_list|)
operator|,
name|finish
argument_list|(
name|iterator
argument_list|()
argument_list|)
operator|,
name|end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
name|__BVECTOR
argument_list|(
argument|size_type n
argument_list|,
argument|bool value
argument_list|)
block|{
name|initialize
argument_list|(
name|n
argument_list|)
block|;
name|fill
argument_list|(
name|start
operator|.
name|p
argument_list|,
name|end_of_storage
argument_list|,
name|value
condition|?
operator|~
literal|0
else|:
literal|0
argument_list|)
block|;   }
name|__BVECTOR
argument_list|(
argument|int n
argument_list|,
argument|bool value
argument_list|)
block|{
name|initialize
argument_list|(
name|n
argument_list|)
block|;
name|fill
argument_list|(
name|start
operator|.
name|p
argument_list|,
name|end_of_storage
argument_list|,
name|value
condition|?
operator|~
literal|0
else|:
literal|0
argument_list|)
block|;   }
name|__BVECTOR
argument_list|(
argument|long n
argument_list|,
argument|bool value
argument_list|)
block|{
name|initialize
argument_list|(
name|n
argument_list|)
block|;
name|fill
argument_list|(
name|start
operator|.
name|p
argument_list|,
name|end_of_storage
argument_list|,
name|value
condition|?
operator|~
literal|0
else|:
literal|0
argument_list|)
block|;   }
name|explicit
name|__BVECTOR
argument_list|(
argument|size_type n
argument_list|)
block|{
name|initialize
argument_list|(
name|n
argument_list|)
block|;
name|fill
argument_list|(
name|start
operator|.
name|p
argument_list|,
name|end_of_storage
argument_list|,
literal|0
argument_list|)
block|;   }
name|__BVECTOR
argument_list|(
argument|const __BVECTOR& x
argument_list|)
block|{
name|initialize
argument_list|(
name|x
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|start
argument_list|)
block|;   }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|InputIterator
operator|>
name|__BVECTOR
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
name|initialize_range
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|__BVECTOR
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
name|initialize
argument_list|(
name|n
argument_list|)
block|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|start
argument_list|)
block|;   }
name|__BVECTOR
argument_list|(
argument|const bool* first
argument_list|,
argument|const bool* last
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
name|initialize
argument_list|(
name|n
argument_list|)
block|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|start
argument_list|)
block|;   }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
operator|~
name|__BVECTOR
argument_list|()
block|{
name|deallocate
argument_list|()
block|; }
name|__BVECTOR
operator|&
name|operator
operator|=
operator|(
specifier|const
name|__BVECTOR
operator|&
name|x
operator|)
block|{
if|if
condition|(
operator|&
name|x
operator|==
name|this
condition|)
return|return
operator|*
name|this
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|x
operator|.
name|size
argument_list|()
operator|>
name|capacity
argument_list|()
condition|)
block|{
name|deallocate
argument_list|()
expr_stmt|;
name|initialize
argument_list|(
name|x
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|finish
operator|=
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|x
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_macro
unit|}   void
name|reserve
argument_list|(
argument|size_type n
argument_list|)
end_macro

begin_block
block|{
if|if
condition|(
name|capacity
argument_list|()
operator|<
name|n
condition|)
block|{
name|unsigned
name|int
modifier|*
name|q
init|=
name|bit_alloc
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|finish
operator|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|end_of_storage
operator|=
name|q
operator|+
operator|(
name|n
operator|+
name|__WORD_BIT
operator|-
literal|1
operator|)
operator|/
name|__WORD_BIT
expr_stmt|;
block|}
block|}
end_block

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push_back
parameter_list|(
name|bool
name|x
parameter_list|)
block|{
if|if
condition|(
name|finish
operator|.
name|p
operator|!=
name|end_of_storage
condition|)
operator|*
name|finish
operator|++
operator|=
name|x
expr_stmt|;
else|else
name|insert_aux
argument_list|(
name|end
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|swap
parameter_list|(
name|__BVECTOR
modifier|&
name|x
parameter_list|)
block|{
name|__STD
operator|::
name|swap
argument_list|(
name|start
argument_list|,
name|x
operator|.
name|start
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|finish
argument_list|,
name|x
operator|.
name|finish
argument_list|)
expr_stmt|;
name|__STD
operator|::
name|swap
argument_list|(
name|end_of_storage
argument_list|,
name|x
operator|.
name|end_of_storage
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|bool
name|x
init|=
name|bool
argument_list|()
parameter_list|)
block|{
name|difference_type
name|n
init|=
name|position
operator|-
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|finish
operator|.
name|p
operator|!=
name|end_of_storage
operator|&&
name|position
operator|==
name|end
argument_list|()
condition|)
operator|*
name|finish
operator|++
operator|=
name|x
expr_stmt|;
else|else
name|insert_aux
argument_list|(
name|position
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|begin
argument_list|()
operator|+
name|n
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
block|{
name|insert_range
argument_list|(
name|position
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|void
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
name|size_type
name|n
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|capacity
argument_list|()
operator|-
name|size
argument_list|()
operator|>=
name|n
condition|)
block|{
name|copy_backward
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|finish
operator|+
name|n
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|n
expr_stmt|;
block|}
else|else
block|{
name|size_type
name|len
init|=
name|size
argument_list|()
operator|+
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|unsigned
name|int
modifier|*
name|q
init|=
name|bit_alloc
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|i
init|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|=
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|finish
operator|=
name|copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|end_of_storage
operator|=
name|q
operator|+
operator|(
name|len
operator|+
name|__WORD_BIT
operator|-
literal|1
operator|)
operator|/
name|__WORD_BIT
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_if

begin_macro
unit|}    void
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const bool* first
argument_list|,
argument|const bool* last
argument_list|)
end_macro

begin_block
block|{
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
name|size_type
name|n
init|=
literal|0
decl_stmt|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
expr_stmt|;
if|if
condition|(
name|capacity
argument_list|()
operator|-
name|size
argument_list|()
operator|>=
name|n
condition|)
block|{
name|copy_backward
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|finish
operator|+
name|n
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|n
expr_stmt|;
block|}
else|else
block|{
name|size_type
name|len
init|=
name|size
argument_list|()
operator|+
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|unsigned
name|int
modifier|*
name|q
init|=
name|bit_alloc
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|i
init|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|i
operator|=
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|finish
operator|=
name|copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|end_of_storage
operator|=
name|q
operator|+
operator|(
name|len
operator|+
name|__WORD_BIT
operator|-
literal|1
operator|)
operator|/
name|__WORD_BIT
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|size_type
name|n
parameter_list|,
name|bool
name|x
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|capacity
argument_list|()
operator|-
name|size
argument_list|()
operator|>=
name|n
condition|)
block|{
name|copy_backward
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|finish
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|position
argument_list|,
name|position
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|finish
operator|+=
name|difference_type
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|size_type
name|len
init|=
name|size
argument_list|()
operator|+
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|unsigned
name|int
modifier|*
name|q
init|=
name|bit_alloc
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|iterator
name|i
init|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|fill_n
argument_list|(
name|i
argument_list|,
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|finish
operator|=
name|copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|i
operator|+
name|difference_type
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|deallocate
argument_list|()
expr_stmt|;
name|end_of_storage
operator|=
name|q
operator|+
operator|(
name|len
operator|+
name|__WORD_BIT
operator|-
literal|1
operator|)
operator|/
name|__WORD_BIT
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|int
name|n
parameter_list|,
name|bool
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
operator|(
name|size_type
operator|)
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|pos
parameter_list|,
name|long
name|n
parameter_list|,
name|bool
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|pos
argument_list|,
operator|(
name|size_type
operator|)
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
operator|--
name|finish
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
if|if
condition|(
name|position
operator|+
literal|1
operator|!=
name|end
argument_list|()
condition|)
name|copy
argument_list|(
name|position
operator|+
literal|1
argument_list|,
name|end
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
operator|--
name|finish
expr_stmt|;
return|return
name|position
return|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
name|finish
operator|=
name|copy
argument_list|(
name|last
argument_list|,
name|end
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
return|return
name|first
return|;
block|}
end_function

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|,
name|bool
name|x
init|=
name|bool
argument_list|()
parameter_list|)
block|{
if|if
condition|(
name|new_size
operator|<
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|new_size
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|new_size
operator|-
name|size
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|__SGI_STL_VECBOOL_TEMPLATE
end_ifdef

begin_typedef
typedef|typedef
name|vector
operator|<
name|bool
operator|,
name|alloc
operator|>
name|bit_vector
expr_stmt|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __SGI_STL_VECBOOL_TEMPLATE */
end_comment

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|bit_vector
operator|&
name|x
operator|,
specifier|const
name|bit_vector
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|size
argument_list|()
operator|==
name|y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|bit_vector
operator|&
name|x
operator|,
specifier|const
name|bit_vector
operator|&
name|y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|,
name|y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_VECBOOL_TEMPLATE */
end_comment

begin_undef
undef|#
directive|undef
name|__SGI_STL_VECBOOL_TEMPLATE
end_undef

begin_undef
undef|#
directive|undef
name|__BVECTOR
end_undef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1174
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_BVECTOR_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

