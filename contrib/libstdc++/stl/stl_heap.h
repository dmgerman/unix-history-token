begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  * Copyright (c) 1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_HEAP_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_HEAP_H
end_define

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|set
name|woff
name|1209
endif|#
directive|endif
comment|// Heap-manipulation functions: push_heap, pop_heap, make_heap, sort_heap.
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|>
name|void
name|__push_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_Distance __holeIndex
argument_list|,
argument|_Distance __topIndex
argument_list|,
argument|_Tp __value
argument_list|)
block|{
name|_Distance
name|__parent
operator|=
operator|(
name|__holeIndex
operator|-
literal|1
operator|)
operator|/
literal|2
block|;
while|while
condition|(
name|__holeIndex
operator|>
name|__topIndex
operator|&&
operator|*
operator|(
name|__first
operator|+
name|__parent
operator|)
operator|<
name|__value
condition|)
block|{
operator|*
operator|(
name|__first
operator|+
name|__holeIndex
operator|)
operator|=
operator|*
operator|(
name|__first
operator|+
name|__parent
operator|)
expr_stmt|;
name|__holeIndex
operator|=
name|__parent
expr_stmt|;
name|__parent
operator|=
operator|(
name|__holeIndex
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
operator|*
operator|(
name|__first
operator|+
name|__holeIndex
operator|)
operator|=
name|__value
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|void
name|__push_heap_aux
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Distance*
argument_list|,
argument|_Tp*
argument_list|)
block|{
name|__push_heap
argument_list|(
name|__first
argument_list|,
name|_Distance
argument_list|(
operator|(
name|__last
operator|-
name|__first
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|_Distance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|_Tp
argument_list|(
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|>
specifier|inline
name|void
name|push_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|)
block|{
name|__push_heap_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
name|void
name|__push_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_Distance __holeIndex
argument_list|,
argument|_Distance __topIndex
argument_list|,
argument|_Tp __value
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_Distance
name|__parent
operator|=
operator|(
name|__holeIndex
operator|-
literal|1
operator|)
operator|/
literal|2
block|;
while|while
condition|(
name|__holeIndex
operator|>
name|__topIndex
operator|&&
name|__comp
argument_list|(
operator|*
operator|(
name|__first
operator|+
name|__parent
operator|)
argument_list|,
name|__value
argument_list|)
condition|)
block|{
operator|*
operator|(
name|__first
operator|+
name|__holeIndex
operator|)
operator|=
operator|*
operator|(
name|__first
operator|+
name|__parent
operator|)
expr_stmt|;
name|__holeIndex
operator|=
name|__parent
expr_stmt|;
name|__parent
operator|=
operator|(
name|__holeIndex
operator|-
literal|1
operator|)
operator|/
literal|2
expr_stmt|;
block|}
operator|*
operator|(
name|__first
operator|+
name|__holeIndex
operator|)
operator|=
name|__value
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Compare
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|void
name|__push_heap_aux
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Compare __comp
argument_list|,
argument|_Distance*
argument_list|,
argument|_Tp*
argument_list|)
block|{
name|__push_heap
argument_list|(
name|__first
argument_list|,
name|_Distance
argument_list|(
operator|(
name|__last
operator|-
name|__first
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|_Distance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|_Tp
argument_list|(
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
argument_list|)
argument_list|,
name|__comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|push_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|__push_heap_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|>
name|void
name|__adjust_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_Distance __holeIndex
argument_list|,
argument|_Distance __len
argument_list|,
argument|_Tp __value
argument_list|)
block|{
name|_Distance
name|__topIndex
operator|=
name|__holeIndex
block|;
name|_Distance
name|__secondChild
operator|=
literal|2
operator|*
name|__holeIndex
operator|+
literal|2
block|;
while|while
condition|(
name|__secondChild
operator|<
name|__len
condition|)
block|{
if|if
condition|(
operator|*
operator|(
name|__first
operator|+
name|__secondChild
operator|)
operator|<
operator|*
operator|(
name|__first
operator|+
operator|(
name|__secondChild
operator|-
literal|1
operator|)
operator|)
condition|)
name|__secondChild
operator|--
expr_stmt|;
operator|*
operator|(
name|__first
operator|+
name|__holeIndex
operator|)
operator|=
operator|*
operator|(
name|__first
operator|+
name|__secondChild
operator|)
expr_stmt|;
name|__holeIndex
operator|=
name|__secondChild
expr_stmt|;
name|__secondChild
operator|=
literal|2
operator|*
operator|(
name|__secondChild
operator|+
literal|1
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__secondChild
operator|==
name|__len
condition|)
block|{
operator|*
operator|(
name|__first
operator|+
name|__holeIndex
operator|)
operator|=
operator|*
operator|(
name|__first
operator|+
operator|(
name|__secondChild
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
name|__holeIndex
operator|=
name|__secondChild
operator|-
literal|1
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|__push_heap
argument_list|(
name|__first
argument_list|,
name|__holeIndex
argument_list|,
name|__topIndex
argument_list|,
name|__value
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__pop_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_RandomAccessIterator __result
argument_list|,
argument|_Tp __value
argument_list|,
argument|_Distance*
argument_list|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first
block|;
name|__adjust_heap
argument_list|(
name|__first
argument_list|,
name|_Distance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|_Distance
argument_list|(
name|__last
operator|-
name|__first
argument_list|)
argument_list|,
name|__value
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|>
specifier|inline
name|void
name|__pop_heap_aux
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Tp*
argument_list|)
block|{
name|__pop_heap
argument_list|(
name|__first
argument_list|,
name|__last
operator|-
literal|1
argument_list|,
name|__last
operator|-
literal|1
argument_list|,
name|_Tp
argument_list|(
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|>
specifier|inline
name|void
name|pop_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|)
block|{
name|__pop_heap_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Distance
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
name|void
name|__adjust_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_Distance __holeIndex
argument_list|,
argument|_Distance __len
argument_list|,
argument|_Tp __value
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|_Distance
name|__topIndex
operator|=
name|__holeIndex
block|;
name|_Distance
name|__secondChild
operator|=
literal|2
operator|*
name|__holeIndex
operator|+
literal|2
block|;
while|while
condition|(
name|__secondChild
operator|<
name|__len
condition|)
block|{
if|if
condition|(
name|__comp
argument_list|(
operator|*
operator|(
name|__first
operator|+
name|__secondChild
operator|)
argument_list|,
operator|*
operator|(
name|__first
operator|+
operator|(
name|__secondChild
operator|-
literal|1
operator|)
operator|)
argument_list|)
condition|)
name|__secondChild
operator|--
expr_stmt|;
operator|*
operator|(
name|__first
operator|+
name|__holeIndex
operator|)
operator|=
operator|*
operator|(
name|__first
operator|+
name|__secondChild
operator|)
expr_stmt|;
name|__holeIndex
operator|=
name|__secondChild
expr_stmt|;
name|__secondChild
operator|=
literal|2
operator|*
operator|(
name|__secondChild
operator|+
literal|1
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__secondChild
operator|==
name|__len
condition|)
block|{
operator|*
operator|(
name|__first
operator|+
name|__holeIndex
operator|)
operator|=
operator|*
operator|(
name|__first
operator|+
operator|(
name|__secondChild
operator|-
literal|1
operator|)
operator|)
expr_stmt|;
name|__holeIndex
operator|=
name|__secondChild
operator|-
literal|1
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|__push_heap
argument_list|(
name|__first
argument_list|,
name|__holeIndex
argument_list|,
name|__topIndex
argument_list|,
name|__value
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|,
name|class
name|_Distance
operator|>
specifier|inline
name|void
name|__pop_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_RandomAccessIterator __result
argument_list|,
argument|_Tp __value
argument_list|,
argument|_Compare __comp
argument_list|,
argument|_Distance*
argument_list|)
block|{
operator|*
name|__result
operator|=
operator|*
name|__first
block|;
name|__adjust_heap
argument_list|(
name|__first
argument_list|,
name|_Distance
argument_list|(
literal|0
argument_list|)
argument_list|,
name|_Distance
argument_list|(
name|__last
operator|-
name|__first
argument_list|)
argument_list|,
name|__value
argument_list|,
name|__comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|__pop_heap_aux
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|__pop_heap
argument_list|(
name|__first
argument_list|,
name|__last
operator|-
literal|1
argument_list|,
name|__last
operator|-
literal|1
argument_list|,
name|_Tp
argument_list|(
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
argument_list|)
argument_list|,
name|__comp
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|pop_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|__pop_heap_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__comp
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
name|void
name|__make_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Tp*
argument_list|,
argument|_Distance*
argument_list|)
block|{
if|if
condition|(
name|__last
operator|-
name|__first
operator|<
literal|2
condition|)
return|return;
name|_Distance
name|__len
operator|=
name|__last
operator|-
name|__first
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_Distance
name|__parent
init|=
operator|(
name|__len
operator|-
literal|2
operator|)
operator|/
literal|2
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|true
condition|)
block|{
name|__adjust_heap
argument_list|(
name|__first
argument_list|,
name|__parent
argument_list|,
name|__len
argument_list|,
name|_Tp
argument_list|(
operator|*
operator|(
name|__first
operator|+
name|__parent
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|__parent
operator|==
literal|0
condition|)
return|return;
name|__parent
operator|--
expr_stmt|;
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIterator
operator|>
specifier|inline
name|void
name|make_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|)
block|{
name|__make_heap
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Compare
operator|,
name|class
name|_Tp
operator|,
name|class
name|_Distance
operator|>
name|void
name|__make_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Compare __comp
argument_list|,
argument|_Tp*
argument_list|,
argument|_Distance*
argument_list|)
block|{
if|if
condition|(
name|__last
operator|-
name|__first
operator|<
literal|2
condition|)
return|return;
name|_Distance
name|__len
operator|=
name|__last
operator|-
name|__first
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_Distance
name|__parent
init|=
operator|(
name|__len
operator|-
literal|2
operator|)
operator|/
literal|2
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|true
condition|)
block|{
name|__adjust_heap
argument_list|(
name|__first
argument_list|,
name|__parent
argument_list|,
name|__len
argument_list|,
name|_Tp
argument_list|(
operator|*
operator|(
name|__first
operator|+
name|__parent
operator|)
argument_list|)
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
if|if
condition|(
name|__parent
operator|==
literal|0
condition|)
return|return;
name|__parent
operator|--
expr_stmt|;
block|}
end_while

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Compare
operator|>
specifier|inline
name|void
name|make_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
name|__make_heap
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__comp
argument_list|,
name|__VALUE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|,
name|__DISTANCE_TYPE
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|>
name|void
name|sort_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|)
block|{
while|while
condition|(
name|__last
operator|-
name|__first
operator|>
literal|1
condition|)
name|pop_heap
argument_list|(
name|__first
argument_list|,
name|__last
operator|--
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_RandomAccessIterator
operator|,
name|class
name|_Compare
operator|>
name|void
name|sort_heap
argument_list|(
argument|_RandomAccessIterator __first
argument_list|,
argument|_RandomAccessIterator __last
argument_list|,
argument|_Compare __comp
argument_list|)
block|{
while|while
condition|(
name|__last
operator|-
name|__first
operator|>
literal|1
condition|)
name|pop_heap
argument_list|(
name|__first
argument_list|,
name|__last
operator|--
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1209
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_HEAP_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

