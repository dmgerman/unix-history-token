begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_SLIST_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_SLIST_H
end_define

begin_macro
name|__STL_BEGIN_NAMESPACE
end_macro

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|set
name|woff
name|1174
end_pragma

begin_pragma
pragma|#
directive|pragma
name|set
name|woff
name|1375
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|_Slist_node_base
block|{
name|_Slist_node_base
modifier|*
name|_M_next
decl_stmt|;
block|}
struct|;
end_struct

begin_function
specifier|inline
name|_Slist_node_base
modifier|*
name|__slist_make_link
parameter_list|(
name|_Slist_node_base
modifier|*
name|__prev_node
parameter_list|,
name|_Slist_node_base
modifier|*
name|__new_node
parameter_list|)
block|{
name|__new_node
operator|->
name|_M_next
operator|=
name|__prev_node
operator|->
name|_M_next
expr_stmt|;
name|__prev_node
operator|->
name|_M_next
operator|=
name|__new_node
expr_stmt|;
return|return
name|__new_node
return|;
block|}
end_function

begin_function
specifier|inline
name|_Slist_node_base
modifier|*
name|__slist_previous
parameter_list|(
name|_Slist_node_base
modifier|*
name|__head
parameter_list|,
specifier|const
name|_Slist_node_base
modifier|*
name|__node
parameter_list|)
block|{
while|while
condition|(
name|__head
operator|&&
name|__head
operator|->
name|_M_next
operator|!=
name|__node
condition|)
name|__head
operator|=
name|__head
operator|->
name|_M_next
expr_stmt|;
return|return
name|__head
return|;
block|}
end_function

begin_function
specifier|inline
specifier|const
name|_Slist_node_base
modifier|*
name|__slist_previous
parameter_list|(
specifier|const
name|_Slist_node_base
modifier|*
name|__head
parameter_list|,
specifier|const
name|_Slist_node_base
modifier|*
name|__node
parameter_list|)
block|{
while|while
condition|(
name|__head
operator|&&
name|__head
operator|->
name|_M_next
operator|!=
name|__node
condition|)
name|__head
operator|=
name|__head
operator|->
name|_M_next
expr_stmt|;
return|return
name|__head
return|;
block|}
end_function

begin_function
specifier|inline
name|void
name|__slist_splice_after
parameter_list|(
name|_Slist_node_base
modifier|*
name|__pos
parameter_list|,
name|_Slist_node_base
modifier|*
name|__before_first
parameter_list|,
name|_Slist_node_base
modifier|*
name|__before_last
parameter_list|)
block|{
if|if
condition|(
name|__pos
operator|!=
name|__before_first
operator|&&
name|__pos
operator|!=
name|__before_last
condition|)
block|{
name|_Slist_node_base
modifier|*
name|__first
init|=
name|__before_first
operator|->
name|_M_next
decl_stmt|;
name|_Slist_node_base
modifier|*
name|__after
init|=
name|__pos
operator|->
name|_M_next
decl_stmt|;
name|__before_first
operator|->
name|_M_next
operator|=
name|__before_last
operator|->
name|_M_next
expr_stmt|;
name|__pos
operator|->
name|_M_next
operator|=
name|__first
expr_stmt|;
name|__before_last
operator|->
name|_M_next
operator|=
name|__after
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|inline
name|_Slist_node_base
modifier|*
name|__slist_reverse
parameter_list|(
name|_Slist_node_base
modifier|*
name|__node
parameter_list|)
block|{
name|_Slist_node_base
modifier|*
name|__result
init|=
name|__node
decl_stmt|;
name|__node
operator|=
name|__node
operator|->
name|_M_next
expr_stmt|;
name|__result
operator|->
name|_M_next
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|__node
condition|)
block|{
name|_Slist_node_base
modifier|*
name|__next
init|=
name|__node
operator|->
name|_M_next
decl_stmt|;
name|__node
operator|->
name|_M_next
operator|=
name|__result
expr_stmt|;
name|__result
operator|=
name|__node
expr_stmt|;
name|__node
operator|=
name|__next
expr_stmt|;
block|}
return|return
name|__result
return|;
block|}
end_function

begin_function
specifier|inline
name|size_t
name|__slist_size
parameter_list|(
name|_Slist_node_base
modifier|*
name|__node
parameter_list|)
block|{
name|size_t
name|__result
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|__node
operator|!=
literal|0
condition|;
name|__node
operator|=
name|__node
operator|->
name|_M_next
control|)
operator|++
name|__result
expr_stmt|;
return|return
name|__result
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|_Slist_node
operator|:
name|public
name|_Slist_node_base
block|{
name|_Tp
name|_M_data
block|; }
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|_Slist_iterator_base
block|{
typedef|typedef
name|size_t
name|size_type
typedef|;
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
name|forward_iterator_tag
name|iterator_category
typedef|;
name|_Slist_node_base
modifier|*
name|_M_node
decl_stmt|;
name|_Slist_iterator_base
argument_list|(
name|_Slist_node_base
operator|*
name|__x
argument_list|)
operator|:
name|_M_node
argument_list|(
argument|__x
argument_list|)
block|{}
name|void
name|_M_incr
argument_list|()
block|{
name|_M_node
operator|=
name|_M_node
operator|->
name|_M_next
block|; }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Slist_iterator_base
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_node
operator|==
name|__x
operator|.
name|_M_node
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Slist_iterator_base
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_node
operator|!=
name|__x
operator|.
name|_M_node
return|;
block|}
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|>
expr|struct
name|_Slist_iterator
operator|:
name|public
name|_Slist_iterator_base
block|{
typedef|typedef
name|_Slist_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Slist_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Slist_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
name|_Self
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Ptr
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Ref
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Slist_node
operator|<
name|_Tp
operator|>
name|_Node
expr_stmt|;
end_typedef

begin_expr_stmt
name|_Slist_iterator
argument_list|(
name|_Node
operator|*
name|__x
argument_list|)
operator|:
name|_Slist_iterator_base
argument_list|(
argument|__x
argument_list|)
block|{}
name|_Slist_iterator
argument_list|()
operator|:
name|_Slist_iterator_base
argument_list|(
literal|0
argument_list|)
block|{}
name|_Slist_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|__x
argument_list|)
operator|:
name|_Slist_iterator_base
argument_list|(
argument|__x._M_node
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|(
operator|(
name|_Node
operator|*
operator|)
name|_M_node
operator|)
operator|->
name|_M_data
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_NO_ARROW_OPERATOR
end_ifndef

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_NO_ARROW_OPERATOR */
end_comment

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|_M_incr
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_incr
argument_list|()
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_ifndef
unit|};
ifndef|#
directive|ifndef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifndef

begin_function
specifier|inline
name|ptrdiff_t
modifier|*
name|distance_type
parameter_list|(
specifier|const
name|_Slist_iterator_base
modifier|&
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
end_function

begin_function
specifier|inline
name|forward_iterator_tag
name|iterator_category
parameter_list|(
specifier|const
name|_Slist_iterator_base
modifier|&
parameter_list|)
block|{
return|return
name|forward_iterator_tag
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|>
specifier|inline
name|_Tp
operator|*
name|value_type
argument_list|(
argument|const _Slist_iterator<_Tp
argument_list|,
argument|_Ref
argument_list|,
argument|_Ptr>&
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_comment
comment|// Base class that encapsulates details of allocators.  Three cases:
end_comment

begin_comment
comment|// an ordinary standard-conforming allocator, a standard-conforming
end_comment

begin_comment
comment|// allocator with no non-static data, and an SGI-style allocator.
end_comment

begin_comment
comment|// This complexity is necessary only because we're worrying about backward
end_comment

begin_comment
comment|// compatibility and because we want to avoid wasting storage on an
end_comment

begin_comment
comment|// allocator instance if it isn't necessary.
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_USE_STD_ALLOCATORS
end_ifdef

begin_comment
comment|// Base for general standard-conforming allocators.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Allocator
operator|,
name|bool
name|_IsStatic
operator|>
name|class
name|_Slist_alloc_base
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_M_node_allocator
return|;
block|}
name|_Slist_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_M_node_allocator
argument_list|(
argument|__a
argument_list|)
block|{}
name|protected
operator|:
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|_M_get_node
argument_list|()
block|{
return|return
name|_M_node_allocator
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|_M_put_node
argument_list|(
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|__p
argument_list|)
block|{
name|_M_node_allocator
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|typename
name|_Alloc_traits
operator|<
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|_M_node_allocator
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_Slist_node_base
name|_M_head
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// Specialization for instanceless allocators.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Allocator
operator|>
name|class
name|_Slist_alloc_base
operator|<
name|_Tp
operator|,
name|_Allocator
operator|,
name|true
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|()
return|;
block|}
name|_Slist_alloc_base
argument_list|(
argument|const allocator_type&
argument_list|)
block|{}
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|,
name|_Allocator
operator|>
operator|::
name|_Alloc_type
name|_Alloc_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|_M_get_node
argument_list|()
block|{
return|return
name|_Alloc_type
operator|::
name|allocate
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|_M_put_node
argument_list|(
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|__p
argument_list|)
block|{
name|_Alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|_Slist_node_base
name|_M_head
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
expr|struct
name|_Slist_base
operator|:
name|public
name|_Slist_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
block|{
typedef|typedef
name|_Slist_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_Slist_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
name|_M_head
operator|.
name|_M_next
operator|=
literal|0
block|; }
operator|~
name|_Slist_base
argument_list|()
block|{
name|_M_erase_after
argument_list|(
operator|&
name|_M_head
argument_list|,
literal|0
argument_list|)
block|; }
name|protected
operator|:
name|_Slist_node_base
operator|*
name|_M_erase_after
argument_list|(
argument|_Slist_node_base* __pos
argument_list|)
block|{
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|__next
operator|=
operator|(
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
operator|)
operator|(
name|__pos
operator|->
name|_M_next
operator|)
block|;
name|_Slist_node_base
operator|*
name|__next_next
operator|=
name|__next
operator|->
name|_M_next
block|;
name|__pos
operator|->
name|_M_next
operator|=
name|__next_next
block|;
name|destroy
argument_list|(
operator|&
name|__next
operator|->
name|_M_data
argument_list|)
block|;
name|_M_put_node
argument_list|(
name|__next
argument_list|)
block|;
return|return
name|__next_next
return|;
block|}
end_expr_stmt

begin_function_decl
name|_Slist_node_base
modifier|*
name|_M_erase_after
parameter_list|(
name|_Slist_node_base
modifier|*
parameter_list|,
name|_Slist_node_base
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_else
unit|};
else|#
directive|else
end_else

begin_comment
comment|/* __STL_USE_STD_ALLOCATORS */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
expr|struct
name|_Slist_base
block|{
typedef|typedef
name|_Alloc
name|allocator_type
typedef|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|()
return|;
block|}
name|_Slist_base
argument_list|(
argument|const allocator_type&
argument_list|)
block|{
name|_M_head
operator|.
name|_M_next
operator|=
literal|0
block|; }
operator|~
name|_Slist_base
argument_list|()
block|{
name|_M_erase_after
argument_list|(
operator|&
name|_M_head
argument_list|,
literal|0
argument_list|)
block|; }
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|simple_alloc
operator|<
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|,
name|_Alloc
operator|>
name|_Alloc_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|_M_get_node
argument_list|()
block|{
return|return
name|_Alloc_type
operator|::
name|allocate
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|_M_put_node
argument_list|(
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|__p
argument_list|)
block|{
name|_Alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|_Slist_node_base
modifier|*
name|_M_erase_after
parameter_list|(
name|_Slist_node_base
modifier|*
name|__pos
parameter_list|)
block|{
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|__next
operator|=
operator|(
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
operator|)
operator|(
name|__pos
operator|->
name|_M_next
operator|)
expr_stmt|;
name|_Slist_node_base
modifier|*
name|__next_next
init|=
name|__next
operator|->
name|_M_next
decl_stmt|;
name|__pos
operator|->
name|_M_next
operator|=
name|__next_next
expr_stmt|;
name|destroy
argument_list|(
operator|&
name|__next
operator|->
name|_M_data
argument_list|)
expr_stmt|;
name|_M_put_node
argument_list|(
name|__next
argument_list|)
expr_stmt|;
return|return
name|__next_next
return|;
block|}
end_function

begin_function_decl
name|_Slist_node_base
modifier|*
name|_M_erase_after
parameter_list|(
name|_Slist_node_base
modifier|*
parameter_list|,
name|_Slist_node_base
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|_Slist_node_base
name|_M_head
decl_stmt|;
end_decl_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_STD_ALLOCATORS */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|_Slist_node_base
operator|*
name|_Slist_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_erase_after
argument_list|(
argument|_Slist_node_base* __before_first
argument_list|,
argument|_Slist_node_base* __last_node
argument_list|)
block|{
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|__cur
operator|=
operator|(
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
operator|)
operator|(
name|__before_first
operator|->
name|_M_next
operator|)
block|;
while|while
condition|(
name|__cur
operator|!=
name|__last_node
condition|)
block|{
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
name|__tmp
operator|=
name|__cur
expr_stmt|;
name|__cur
operator|=
operator|(
name|_Slist_node
operator|<
name|_Tp
operator|>
operator|*
operator|)
name|__cur
operator|->
name|_M_next
expr_stmt|;
name|destroy
argument_list|(
operator|&
name|__tmp
operator|->
name|_M_data
argument_list|)
expr_stmt|;
name|_M_put_node
argument_list|(
name|__tmp
argument_list|)
expr_stmt|;
block|}
name|__before_first
operator|->
name|_M_next
operator|=
name|__last_node
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__last_node
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|=
name|__STL_DEFAULT_ALLOCATOR
argument_list|(
name|_Tp
argument_list|)
operator|>
name|class
name|slist
operator|:
name|private
name|_Slist_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
block|{
name|private
operator|:
typedef|typedef
name|_Slist_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|_Base
expr_stmt|;
name|public
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Slist_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Slist_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_Base
operator|::
name|get_allocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|_Slist_node
operator|<
name|_Tp
operator|>
name|_Node
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Slist_node_base
name|_Node_base
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Slist_iterator_base
name|_Iterator_base
typedef|;
end_typedef

begin_function
name|_Node
modifier|*
name|_M_create_node
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
name|_Node
modifier|*
name|__node
init|=
name|_M_get_node
argument_list|()
decl_stmt|;
name|__STL_TRY
block|{
name|construct
argument_list|(
operator|&
name|__node
operator|->
name|_M_data
argument_list|,
name|__x
argument_list|)
expr_stmt|;
name|__node
operator|->
name|_M_next
operator|=
literal|0
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_put_node
argument_list|(
name|__node
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|__node
return|;
block|}
end_function

begin_function
name|_Node
modifier|*
name|_M_create_node
parameter_list|()
block|{
name|_Node
modifier|*
name|__node
init|=
name|_M_get_node
argument_list|()
decl_stmt|;
name|__STL_TRY
block|{
name|construct
argument_list|(
operator|&
name|__node
operator|->
name|_M_data
argument_list|)
expr_stmt|;
name|__node
operator|->
name|_M_next
operator|=
literal|0
expr_stmt|;
block|}
name|__STL_UNWIND
argument_list|(
name|_M_put_node
argument_list|(
name|__node
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|__node
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_USE_NAMESPACES
end_ifdef

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_get_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_put_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_erase_after
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_head
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_USE_NAMESPACES */
end_comment

begin_label
name|public
label|:
end_label

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|slist
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{}
name|slist
argument_list|(
argument|size_type __n
argument_list|,
argument|const value_type& __x
argument_list|,
argument|const allocator_type& __a =  allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
name|_M_insert_after_fill
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
block|; }
name|explicit
name|slist
argument_list|(
argument|size_type __n
argument_list|)
operator|:
name|_Base
argument_list|(
argument|allocator_type()
argument_list|)
block|{
name|_M_insert_after_fill
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__n
argument_list|,
name|value_type
argument_list|()
argument_list|)
block|; }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
comment|// We don't need any dispatching tricks here, because _M_insert_after_range
comment|// already does them.
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|slist
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|const allocator_type& __a =  allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|; }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|slist
argument_list|(
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|,
argument|const allocator_type& __a =  allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|; }
name|slist
argument_list|(
specifier|const
name|value_type
operator|*
name|__first
argument_list|,
specifier|const
name|value_type
operator|*
name|__last
argument_list|,
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|slist
argument_list|(
specifier|const
name|slist
operator|&
name|__x
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__x.get_allocator()
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|)
block|; }
name|slist
operator|&
name|operator
operator|=
operator|(
specifier|const
name|slist
operator|&
name|__x
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|~
name|slist
argument_list|()
block|{}
name|public
operator|:
comment|// assign(), a generalized assignment member function.  Two
comment|// versions: one that takes a count, and one that takes a range.
comment|// The range version is a member template, so we dispatch on whether
comment|// or not the type is an integer.
name|void
name|assign
argument_list|(
argument|size_type __n
argument_list|,
argument|const _Tp& __val
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|assign
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_assign_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __val
argument_list|,
argument|__true_type
argument_list|)
block|{
name|assign
argument_list|(
operator|(
name|size_type
operator|)
name|__n
argument_list|,
operator|(
name|_Tp
operator|)
name|__val
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_label
name|public
label|:
end_label

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
literal|0
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|__slist_size
argument_list|(
name|_M_head
operator|.
name|_M_next
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|_M_head
operator|.
name|_M_next
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_function
name|void
name|swap
parameter_list|(
name|slist
modifier|&
name|__x
parameter_list|)
block|{
name|__STD
operator|::
name|swap
argument_list|(
name|_M_head
operator|.
name|_M_next
argument_list|,
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|slist
operator|<
name|_Tp
argument_list|,
name|_Alloc
operator|>
operator|&
name|_SL1
argument_list|,
specifier|const
name|slist
operator|<
name|_Tp
argument_list|,
name|_Alloc
operator|>
operator|&
name|_SL2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|(
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
operator|)
operator|->
name|_M_data
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|(
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
operator|)
operator|->
name|_M_data
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
name|__slist_make_link
argument_list|(
operator|&
name|_M_head
argument_list|,
name|_M_create_node
argument_list|(
name|__x
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_front
parameter_list|()
block|{
name|__slist_make_link
argument_list|(
operator|&
name|_M_head
argument_list|,
name|_M_create_node
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_front
parameter_list|()
block|{
name|_Node
modifier|*
name|__node
init|=
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
decl_stmt|;
name|_M_head
operator|.
name|_M_next
operator|=
name|__node
operator|->
name|_M_next
expr_stmt|;
name|destroy
argument_list|(
operator|&
name|__node
operator|->
name|_M_data
argument_list|)
expr_stmt|;
name|_M_put_node
argument_list|(
name|__node
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|previous
parameter_list|(
name|const_iterator
name|__pos
parameter_list|)
block|{
return|return
name|iterator
argument_list|(
operator|(
name|_Node
operator|*
operator|)
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|const_iterator
name|previous
argument_list|(
name|const_iterator
name|__pos
argument_list|)
decl|const
block|{
return|return
name|const_iterator
argument_list|(
operator|(
name|_Node
operator|*
operator|)
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_function
name|_Node
modifier|*
name|_M_insert_after
parameter_list|(
name|_Node_base
modifier|*
name|__pos
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
return|return
operator|(
name|_Node
operator|*
operator|)
operator|(
name|__slist_make_link
argument_list|(
name|__pos
argument_list|,
name|_M_create_node
argument_list|(
name|__x
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|_Node
modifier|*
name|_M_insert_after
parameter_list|(
name|_Node_base
modifier|*
name|__pos
parameter_list|)
block|{
return|return
operator|(
name|_Node
operator|*
operator|)
operator|(
name|__slist_make_link
argument_list|(
name|__pos
argument_list|,
name|_M_create_node
argument_list|()
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|void
name|_M_insert_after_fill
parameter_list|(
name|_Node_base
modifier|*
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
for|for
control|(
name|size_type
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__n
condition|;
operator|++
name|__i
control|)
name|__pos
operator|=
name|__slist_make_link
argument_list|(
name|__pos
argument_list|,
name|_M_create_node
argument_list|(
name|__x
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_comment
comment|// Check whether it's an integral type.  If so, it's not an iterator.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InIter
operator|>
name|void
name|_M_insert_after_range
argument_list|(
argument|_Node_base* __pos
argument_list|,
argument|_InIter __first
argument_list|,
argument|_InIter __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InIter
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_insert_after_range
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_insert_after_range
argument_list|(
argument|_Node_base* __pos
argument_list|,
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_insert_after_fill
argument_list|(
name|__pos
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
block|;   }
name|template
operator|<
name|class
name|_InIter
operator|>
name|void
name|_M_insert_after_range
argument_list|(
argument|_Node_base* __pos
argument_list|,
argument|_InIter __first
argument_list|,
argument|_InIter __last
argument_list|,
argument|__false_type
argument_list|)
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|__pos
operator|=
name|__slist_make_link
argument_list|(
name|__pos
argument_list|,
name|_M_create_node
argument_list|(
operator|*
name|__first
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_expr_stmt

begin_else
unit|}
else|#
directive|else
end_else

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_macro
unit|void
name|_M_insert_after_range
argument_list|(
argument|_Node_base* __pos
argument_list|,
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|)
end_macro

begin_block
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|__pos
operator|=
name|__slist_make_link
argument_list|(
name|__pos
argument_list|,
name|_M_create_node
argument_list|(
operator|*
name|__first
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
block|}
end_block

begin_function
name|void
name|_M_insert_after_range
parameter_list|(
name|_Node_base
modifier|*
name|__pos
parameter_list|,
specifier|const
name|value_type
modifier|*
name|__first
parameter_list|,
specifier|const
name|value_type
modifier|*
name|__last
parameter_list|)
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|__pos
operator|=
name|__slist_make_link
argument_list|(
name|__pos
argument_list|,
name|_M_create_node
argument_list|(
operator|*
name|__first
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_label
name|public
label|:
end_label

begin_function
name|iterator
name|insert_after
parameter_list|(
name|iterator
name|__pos
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
return|return
name|iterator
argument_list|(
name|_M_insert_after
argument_list|(
name|__pos
operator|.
name|_M_node
argument_list|,
name|__x
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|insert_after
parameter_list|(
name|iterator
name|__pos
parameter_list|)
block|{
return|return
name|insert_after
argument_list|(
name|__pos
argument_list|,
name|value_type
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|insert_after
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
name|_M_insert_after_fill
argument_list|(
name|__pos
operator|.
name|_M_node
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_comment
comment|// We don't need any dispatching tricks here, because _M_insert_after_range
end_comment

begin_comment
comment|// already does them.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InIter
operator|>
name|void
name|insert_after
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InIter __first
argument_list|,
argument|_InIter __last
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
name|__pos
operator|.
name|_M_node
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|void
name|insert_after
argument_list|(
argument|iterator __pos
argument_list|,
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
name|__pos
operator|.
name|_M_node
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|;   }
name|void
name|insert_after
argument_list|(
argument|iterator __pos
argument_list|,
argument|const value_type* __first
argument_list|,
argument|const value_type* __last
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
name|__pos
operator|.
name|_M_node
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|;   }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|iterator
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|const value_type& __x
argument_list|)
block|{
return|return
name|iterator
argument_list|(
name|_M_insert_after
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__x
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|__pos
parameter_list|)
block|{
return|return
name|iterator
argument_list|(
name|_M_insert_after
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
name|value_type
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
name|_M_insert_after_fill
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_comment
comment|// We don't need any dispatching tricks here, because _M_insert_after_range
end_comment

begin_comment
comment|// already does them.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InIter
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InIter __first
argument_list|,
argument|_InIter __last
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|;   }
else|#
directive|else
comment|/* __STL_MEMBER_TEMPLATES */
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|;   }
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|const value_type* __first
argument_list|,
argument|const value_type* __last
argument_list|)
block|{
name|_M_insert_after_range
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|;   }
endif|#
directive|endif
comment|/* __STL_MEMBER_TEMPLATES */
name|public
operator|:
name|iterator
name|erase_after
argument_list|(
argument|iterator __pos
argument_list|)
block|{
return|return
name|iterator
argument_list|(
operator|(
name|_Node
operator|*
operator|)
name|_M_erase_after
argument_list|(
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|erase_after
parameter_list|(
name|iterator
name|__before_first
parameter_list|,
name|iterator
name|__last
parameter_list|)
block|{
return|return
name|iterator
argument_list|(
operator|(
name|_Node
operator|*
operator|)
name|_M_erase_after
argument_list|(
name|__before_first
operator|.
name|_M_node
argument_list|,
name|__last
operator|.
name|_M_node
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__pos
parameter_list|)
block|{
return|return
operator|(
name|_Node
operator|*
operator|)
name|_M_erase_after
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
block|{
return|return
operator|(
name|_Node
operator|*
operator|)
name|_M_erase_after
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__first
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__last
operator|.
name|_M_node
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|)
block|{
name|resize
argument_list|(
name|new_size
argument_list|,
name|_Tp
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
name|_M_erase_after
argument_list|(
operator|&
name|_M_head
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|// Moves the range [__before_first + 1, __before_last + 1) to *this,
end_comment

begin_comment
comment|//  inserting it immediately after __pos.  This is constant time.
end_comment

begin_function
name|void
name|splice_after
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|iterator
name|__before_first
parameter_list|,
name|iterator
name|__before_last
parameter_list|)
block|{
if|if
condition|(
name|__before_first
operator|!=
name|__before_last
condition|)
name|__slist_splice_after
argument_list|(
name|__pos
operator|.
name|_M_node
argument_list|,
name|__before_first
operator|.
name|_M_node
argument_list|,
name|__before_last
operator|.
name|_M_node
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Moves the element that follows __prev to *this, inserting it immediately
end_comment

begin_comment
comment|//  after __pos.  This is constant time.
end_comment

begin_function
name|void
name|splice_after
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|iterator
name|__prev
parameter_list|)
block|{
name|__slist_splice_after
argument_list|(
name|__pos
operator|.
name|_M_node
argument_list|,
name|__prev
operator|.
name|_M_node
argument_list|,
name|__prev
operator|.
name|_M_node
operator|->
name|_M_next
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Linear in distance(begin(), __pos), and linear in __x.size().
end_comment

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|slist
modifier|&
name|__x
parameter_list|)
block|{
if|if
condition|(
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
condition|)
name|__slist_splice_after
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
operator|&
name|__x
operator|.
name|_M_head
argument_list|,
name|__slist_previous
argument_list|(
operator|&
name|__x
operator|.
name|_M_head
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Linear in distance(begin(), __pos), and in distance(__x.begin(), __i).
end_comment

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|slist
modifier|&
name|__x
parameter_list|,
name|iterator
name|__i
parameter_list|)
block|{
name|__slist_splice_after
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__slist_previous
argument_list|(
operator|&
name|__x
operator|.
name|_M_head
argument_list|,
name|__i
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__i
operator|.
name|_M_node
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Linear in distance(begin(), __pos), in distance(__x.begin(), __first),
end_comment

begin_comment
comment|// and in distance(__first, __last).
end_comment

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|slist
modifier|&
name|__x
parameter_list|,
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
block|{
if|if
condition|(
name|__first
operator|!=
name|__last
condition|)
name|__slist_splice_after
argument_list|(
name|__slist_previous
argument_list|(
operator|&
name|_M_head
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__slist_previous
argument_list|(
operator|&
name|__x
operator|.
name|_M_head
argument_list|,
name|__first
operator|.
name|_M_node
argument_list|)
argument_list|,
name|__slist_previous
argument_list|(
name|__first
operator|.
name|_M_node
argument_list|,
name|__last
operator|.
name|_M_node
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_function
name|void
name|reverse
parameter_list|()
block|{
if|if
condition|(
name|_M_head
operator|.
name|_M_next
condition|)
name|_M_head
operator|.
name|_M_next
operator|=
name|__slist_reverse
argument_list|(
name|_M_head
operator|.
name|_M_next
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|remove
parameter_list|(
specifier|const
name|_Tp
modifier|&
name|__val
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|unique
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|merge
parameter_list|(
name|slist
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sort
parameter_list|()
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_Predicate
operator|>
name|void
name|remove_if
argument_list|(
argument|_Predicate __pred
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_BinaryPredicate
operator|>
name|void
name|unique
argument_list|(
argument|_BinaryPredicate __pred
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_StrictWeakOrdering
operator|>
name|void
name|merge
argument_list|(
name|slist
operator|&
argument_list|,
name|_StrictWeakOrdering
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_StrictWeakOrdering
operator|>
name|void
name|sort
argument_list|(
argument|_StrictWeakOrdering __comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|)
block|{
if|if
condition|(
operator|&
name|__x
operator|!=
name|this
condition|)
block|{
name|_Node_base
modifier|*
name|__p1
init|=
operator|&
name|_M_head
decl_stmt|;
name|_Node
modifier|*
name|__n1
init|=
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
decl_stmt|;
specifier|const
name|_Node
modifier|*
name|__n2
init|=
operator|(
specifier|const
name|_Node
operator|*
operator|)
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
decl_stmt|;
while|while
condition|(
name|__n1
operator|&&
name|__n2
condition|)
block|{
name|__n1
operator|->
name|_M_data
operator|=
name|__n2
operator|->
name|_M_data
expr_stmt|;
name|__p1
operator|=
name|__n1
expr_stmt|;
name|__n1
operator|=
operator|(
name|_Node
operator|*
operator|)
name|__n1
operator|->
name|_M_next
expr_stmt|;
name|__n2
operator|=
operator|(
specifier|const
name|_Node
operator|*
operator|)
name|__n2
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__n2
operator|==
literal|0
condition|)
name|_M_erase_after
argument_list|(
name|__p1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|_M_insert_after_range
argument_list|(
name|__p1
argument_list|,
name|const_iterator
argument_list|(
operator|(
name|_Node
operator|*
operator|)
name|__n2
argument_list|)
argument_list|,
name|const_iterator
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}   return
operator|*
name|this
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|assign
argument_list|(
argument|size_type __n
argument_list|,
argument|const _Tp& __val
argument_list|)
block|{
name|_Node_base
operator|*
name|__prev
operator|=
operator|&
name|_M_head
block|;
name|_Node
operator|*
name|__node
operator|=
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
block|;
for|for
control|(
init|;
name|__node
operator|!=
literal|0
operator|&&
name|__n
operator|>
literal|0
condition|;
operator|--
name|__n
control|)
block|{
name|__node
operator|->
name|_M_data
operator|=
name|__val
expr_stmt|;
name|__prev
operator|=
name|__node
expr_stmt|;
name|__node
operator|=
operator|(
name|_Node
operator|*
operator|)
name|__node
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__n
operator|>
literal|0
condition|)
name|_M_insert_after_fill
argument_list|(
name|__prev
argument_list|,
name|__n
argument_list|,
name|__val
argument_list|)
expr_stmt|;
else|else
name|_M_erase_after
argument_list|(
name|__prev
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_if

begin_ifdef
unit|}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_InputIter
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_assign_dispatch
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|__false_type
argument_list|)
block|{
name|_Node_base
operator|*
name|__prev
operator|=
operator|&
name|_M_head
block|;
name|_Node
operator|*
name|__node
operator|=
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
block|;
while|while
condition|(
name|__node
operator|!=
literal|0
operator|&&
name|__first
operator|!=
name|__last
condition|)
block|{
name|__node
operator|->
name|_M_data
operator|=
operator|*
name|__first
expr_stmt|;
name|__prev
operator|=
name|__node
expr_stmt|;
name|__node
operator|=
operator|(
name|_Node
operator|*
operator|)
name|__node
operator|->
name|_M_next
expr_stmt|;
operator|++
name|__first
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__first
operator|!=
name|__last
condition|)
name|_M_insert_after_range
argument_list|(
name|__prev
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
else|else
name|_M_erase_after
argument_list|(
name|__prev
argument_list|,
literal|0
argument_list|)
expr_stmt|;
end_if

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|_SL1
operator|,
specifier|const
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|_SL2
operator|)
block|{
typedef|typedef
name|typename
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_Node
name|_Node
expr_stmt|;
name|_Node
operator|*
name|__n1
operator|=
operator|(
name|_Node
operator|*
operator|)
name|_SL1
operator|.
name|_M_head
operator|.
name|_M_next
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_Node
modifier|*
name|__n2
init|=
operator|(
name|_Node
operator|*
operator|)
name|_SL2
operator|.
name|_M_head
operator|.
name|_M_next
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|__n1
operator|&&
name|__n2
operator|&&
name|__n1
operator|->
name|_M_data
operator|==
name|__n2
operator|->
name|_M_data
condition|)
block|{
name|__n1
operator|=
operator|(
name|_Node
operator|*
operator|)
name|__n1
operator|->
name|_M_next
expr_stmt|;
name|__n2
operator|=
operator|(
name|_Node
operator|*
operator|)
name|__n2
operator|->
name|_M_next
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__n1
operator|==
literal|0
operator|&&
name|__n2
operator|==
literal|0
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|_SL1
operator|,
specifier|const
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|_SL2
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|_SL1
operator|.
name|begin
argument_list|()
argument_list|,
name|_SL1
operator|.
name|end
argument_list|()
argument_list|,
name|_SL2
operator|.
name|begin
argument_list|()
argument_list|,
name|_SL2
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|slist<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|slist<_Tp
argument_list|,
argument|_Alloc>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_FUNCTION_TMPL_PARTIAL_ORDER */
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|resize
argument_list|(
argument|size_type __len
argument_list|,
argument|const _Tp& __x
argument_list|)
block|{
name|_Node_base
operator|*
name|__cur
operator|=
operator|&
name|_M_head
block|;
while|while
condition|(
name|__cur
operator|->
name|_M_next
operator|!=
literal|0
operator|&&
name|__len
operator|>
literal|0
condition|)
block|{
operator|--
name|__len
expr_stmt|;
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__cur
operator|->
name|_M_next
condition|)
name|_M_erase_after
argument_list|(
name|__cur
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|else
name|_M_insert_after_fill
argument_list|(
name|__cur
argument_list|,
name|__len
argument_list|,
name|__x
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|remove
argument_list|(
argument|const _Tp& __val
argument_list|)
block|{
name|_Node_base
operator|*
name|__cur
operator|=
operator|&
name|_M_head
block|;
while|while
condition|(
name|__cur
operator|&&
name|__cur
operator|->
name|_M_next
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|_Node
operator|*
operator|)
name|__cur
operator|->
name|_M_next
operator|)
operator|->
name|_M_data
operator|==
name|__val
condition|)
name|_M_erase_after
argument_list|(
name|__cur
argument_list|)
expr_stmt|;
else|else
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|unique
argument_list|()
block|{
name|_Node_base
operator|*
name|__cur
operator|=
name|_M_head
operator|.
name|_M_next
block|;
if|if
condition|(
name|__cur
condition|)
block|{
while|while
condition|(
name|__cur
operator|->
name|_M_next
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|_Node
operator|*
operator|)
name|__cur
operator|)
operator|->
name|_M_data
operator|==
operator|(
operator|(
name|_Node
operator|*
operator|)
operator|(
name|__cur
operator|->
name|_M_next
operator|)
operator|)
operator|->
name|_M_data
condition|)
name|_M_erase_after
argument_list|(
name|__cur
argument_list|)
expr_stmt|;
else|else
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|merge
argument_list|(
argument|slist<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|)
block|{
name|_Node_base
operator|*
name|__n1
operator|=
operator|&
name|_M_head
block|;
while|while
condition|(
name|__n1
operator|->
name|_M_next
operator|&&
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|_Node
operator|*
operator|)
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
operator|)
operator|->
name|_M_data
operator|<
operator|(
operator|(
name|_Node
operator|*
operator|)
name|__n1
operator|->
name|_M_next
operator|)
operator|->
name|_M_data
condition|)
name|__slist_splice_after
argument_list|(
name|__n1
argument_list|,
operator|&
name|__x
operator|.
name|_M_head
argument_list|,
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
argument_list|)
expr_stmt|;
name|__n1
operator|=
name|__n1
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
condition|)
block|{
name|__n1
operator|->
name|_M_next
operator|=
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
expr_stmt|;
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
operator|=
literal|0
expr_stmt|;
block|}
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|sort
argument_list|()
block|{
if|if
condition|(
name|_M_head
operator|.
name|_M_next
operator|&&
name|_M_head
operator|.
name|_M_next
operator|->
name|_M_next
condition|)
block|{
name|slist
name|__carry
decl_stmt|;
name|slist
name|__counter
index|[
literal|64
index|]
decl_stmt|;
name|int
name|__fill
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
name|__slist_splice_after
argument_list|(
operator|&
name|__carry
operator|.
name|_M_head
argument_list|,
operator|&
name|_M_head
argument_list|,
name|_M_head
operator|.
name|_M_next
argument_list|)
expr_stmt|;
name|int
name|__i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|__i
operator|<
name|__fill
operator|&&
operator|!
name|__counter
index|[
name|__i
index|]
operator|.
name|empty
argument_list|()
condition|)
block|{
name|__counter
index|[
name|__i
index|]
operator|.
name|merge
argument_list|(
name|__carry
argument_list|)
expr_stmt|;
name|__carry
operator|.
name|swap
argument_list|(
name|__counter
index|[
name|__i
index|]
argument_list|)
expr_stmt|;
operator|++
name|__i
expr_stmt|;
block|}
name|__carry
operator|.
name|swap
argument_list|(
name|__counter
index|[
name|__i
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__i
operator|==
name|__fill
condition|)
operator|++
name|__fill
expr_stmt|;
end_if

begin_expr_stmt
unit|}      for
operator|(
name|int
name|__i
operator|=
literal|1
expr|;
name|__i
operator|<
name|__fill
expr|;
operator|++
name|__i
operator|)
name|__counter
index|[
name|__i
index|]
operator|.
name|merge
argument_list|(
name|__counter
index|[
name|__i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|this
operator|->
name|swap
argument_list|(
name|__counter
index|[
name|__fill
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
unit|} }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_Predicate
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|remove_if
argument_list|(
argument|_Predicate __pred
argument_list|)
block|{
name|_Node_base
operator|*
name|__cur
operator|=
operator|&
name|_M_head
block|;
while|while
condition|(
name|__cur
operator|->
name|_M_next
condition|)
block|{
if|if
condition|(
name|__pred
argument_list|(
operator|(
operator|(
name|_Node
operator|*
operator|)
name|__cur
operator|->
name|_M_next
operator|)
operator|->
name|_M_data
argument_list|)
condition|)
name|_M_erase_after
argument_list|(
name|__cur
argument_list|)
expr_stmt|;
else|else
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_BinaryPredicate
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|unique
argument_list|(
argument|_BinaryPredicate __pred
argument_list|)
block|{
name|_Node
operator|*
name|__cur
operator|=
operator|(
name|_Node
operator|*
operator|)
name|_M_head
operator|.
name|_M_next
block|;
if|if
condition|(
name|__cur
condition|)
block|{
while|while
condition|(
name|__cur
operator|->
name|_M_next
condition|)
block|{
if|if
condition|(
name|__pred
argument_list|(
operator|(
operator|(
name|_Node
operator|*
operator|)
name|__cur
operator|)
operator|->
name|_M_data
argument_list|,
operator|(
operator|(
name|_Node
operator|*
operator|)
operator|(
name|__cur
operator|->
name|_M_next
operator|)
operator|)
operator|->
name|_M_data
argument_list|)
condition|)
name|_M_erase_after
argument_list|(
name|__cur
argument_list|)
expr_stmt|;
else|else
name|__cur
operator|=
operator|(
name|_Node
operator|*
operator|)
name|__cur
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_StrictWeakOrdering
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|merge
argument_list|(
argument|slist<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|_StrictWeakOrdering __comp
argument_list|)
block|{
name|_Node_base
operator|*
name|__n1
operator|=
operator|&
name|_M_head
block|;
while|while
condition|(
name|__n1
operator|->
name|_M_next
operator|&&
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
condition|)
block|{
if|if
condition|(
name|__comp
argument_list|(
operator|(
operator|(
name|_Node
operator|*
operator|)
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
operator|)
operator|->
name|_M_data
argument_list|,
operator|(
operator|(
name|_Node
operator|*
operator|)
name|__n1
operator|->
name|_M_next
operator|)
operator|->
name|_M_data
argument_list|)
condition|)
name|__slist_splice_after
argument_list|(
name|__n1
argument_list|,
operator|&
name|__x
operator|.
name|_M_head
argument_list|,
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
argument_list|)
expr_stmt|;
name|__n1
operator|=
name|__n1
operator|->
name|_M_next
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
condition|)
block|{
name|__n1
operator|->
name|_M_next
operator|=
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
expr_stmt|;
name|__x
operator|.
name|_M_head
operator|.
name|_M_next
operator|=
literal|0
expr_stmt|;
block|}
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_StrictWeakOrdering
operator|>
name|void
name|slist
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|sort
argument_list|(
argument|_StrictWeakOrdering __comp
argument_list|)
block|{
if|if
condition|(
name|_M_head
operator|.
name|_M_next
operator|&&
name|_M_head
operator|.
name|_M_next
operator|->
name|_M_next
condition|)
block|{
name|slist
name|__carry
decl_stmt|;
name|slist
name|__counter
index|[
literal|64
index|]
decl_stmt|;
name|int
name|__fill
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
name|__slist_splice_after
argument_list|(
operator|&
name|__carry
operator|.
name|_M_head
argument_list|,
operator|&
name|_M_head
argument_list|,
name|_M_head
operator|.
name|_M_next
argument_list|)
expr_stmt|;
name|int
name|__i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|__i
operator|<
name|__fill
operator|&&
operator|!
name|__counter
index|[
name|__i
index|]
operator|.
name|empty
argument_list|()
condition|)
block|{
name|__counter
index|[
name|__i
index|]
operator|.
name|merge
argument_list|(
name|__carry
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__carry
operator|.
name|swap
argument_list|(
name|__counter
index|[
name|__i
index|]
argument_list|)
expr_stmt|;
operator|++
name|__i
expr_stmt|;
block|}
name|__carry
operator|.
name|swap
argument_list|(
name|__counter
index|[
name|__i
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__i
operator|==
name|__fill
condition|)
operator|++
name|__fill
expr_stmt|;
end_if

begin_expr_stmt
unit|}      for
operator|(
name|int
name|__i
operator|=
literal|1
expr|;
name|__i
operator|<
name|__fill
expr|;
operator|++
name|__i
operator|)
name|__counter
index|[
name|__i
index|]
operator|.
name|merge
argument_list|(
name|__counter
index|[
name|__i
operator|-
literal|1
index|]
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|this
operator|->
name|swap
argument_list|(
name|__counter
index|[
name|__fill
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_endif
unit|} }
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_MEMBER_TEMPLATES */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
end_if

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1174
end_pragma

begin_pragma
pragma|#
directive|pragma
name|reset
name|woff
name|1375
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_SLIST_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

