begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1996  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_HASH_SET_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_HASH_SET_H
end_define

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|set
name|woff
name|1174
pragma|#
directive|pragma
name|set
name|woff
name|1375
endif|#
directive|endif
ifndef|#
directive|ifndef
name|__STL_LIMITED_DEFAULT_TEMPLATES
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_HashFcn
operator|=
name|hash
operator|<
name|_Value
operator|>
operator|,
name|class
name|_EqualKey
operator|=
name|equal_to
operator|<
name|_Value
operator|>
operator|,
name|class
name|_Alloc
operator|=
name|__STL_DEFAULT_ALLOCATOR
argument_list|(
name|_Value
argument_list|)
operator|>
else|#
directive|else
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|=
name|__STL_DEFAULT_ALLOCATOR
argument_list|(
name|_Value
argument_list|)
operator|>
endif|#
directive|endif
name|class
name|hash_set
block|{
name|private
operator|:
typedef|typedef
name|hashtable
operator|<
name|_Value
operator|,
name|_Value
operator|,
name|_HashFcn
operator|,
name|_Identity
operator|<
name|_Value
operator|>
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|_Ht
expr_stmt|;
name|_Ht
name|_M_ht
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|key_type
name|key_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|hasher
name|hasher
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|key_equal
name|key_equal
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_pointer
name|const_pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_iterator
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|hasher
name|hash_funct
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|hash_funct
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|key_equal
name|key_eq
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|key_eq
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|get_allocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|hash_set
argument_list|()
operator|:
name|_M_ht
argument_list|(
literal|100
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{}
name|explicit
name|hash_set
argument_list|(
argument|size_type __n
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{}
name|hash_set
argument_list|(
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{}
name|hash_set
argument_list|(
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|hash_set
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|)
operator|:
name|_M_ht
argument_list|(
literal|100
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|hash_set
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|hash_set
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|hash_set
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
else|#
directive|else
name|hash_set
argument_list|(
specifier|const
name|value_type
operator|*
name|__f
argument_list|,
specifier|const
name|value_type
operator|*
name|__l
argument_list|)
operator|:
name|_M_ht
argument_list|(
literal|100
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_set
argument_list|(
argument|const value_type* __f
argument_list|,
argument|const value_type* __l
argument_list|,
argument|size_type __n
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_set
argument_list|(
argument|const value_type* __f
argument_list|,
argument|const value_type* __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_set
argument_list|(
argument|const value_type* __f
argument_list|,
argument|const value_type* __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_set
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|)
operator|:
name|_M_ht
argument_list|(
literal|100
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_set
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|,
argument|size_type __n
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_set
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_set
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
endif|#
directive|endif
comment|/*__STL_MEMBER_TEMPLATES */
name|public
operator|:
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|swap
parameter_list|(
name|hash_set
modifier|&
name|__hs
parameter_list|)
block|{
name|_M_ht
operator|.
name|swap
argument_list|(
name|__hs
operator|.
name|_M_ht
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|hash_set
operator|&
argument_list|,
specifier|const
name|hash_set
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert
argument_list|(
argument|const value_type& __obj
argument_list|)
block|{
name|pair
operator|<
name|typename
name|_Ht
operator|::
name|iterator
block|,
name|bool
operator|>
name|__p
operator|=
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__obj
argument_list|)
block|;
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|__p
operator|.
name|first
operator|,
name|__p
operator|.
name|second
operator|)
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
else|#
directive|else
name|void
name|insert
argument_list|(
argument|const value_type* __f
argument_list|,
argument|const value_type* __l
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|;   }
name|void
name|insert
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
endif|#
directive|endif
comment|/*__STL_MEMBER_TEMPLATES */
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert_noresize
argument_list|(
argument|const value_type& __obj
argument_list|)
block|{
name|pair
operator|<
name|typename
name|_Ht
operator|::
name|iterator
block|,
name|bool
operator|>
name|__p
operator|=
name|_M_ht
operator|.
name|insert_unique_noresize
argument_list|(
name|__obj
argument_list|)
block|;
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|__p
operator|.
name|first
operator|,
name|__p
operator|.
name|second
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|iterator
name|find
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
decl|const
block|{
return|return
name|_M_ht
operator|.
name|find
argument_list|(
name|__key
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|count
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
decl|const
block|{
return|return
name|_M_ht
operator|.
name|count
argument_list|(
name|__key
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|equal_range
argument_list|(
argument|const key_type& __key
argument_list|)
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|equal_range
argument_list|(
name|__key
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|size_type
name|erase
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__key
parameter_list|)
block|{
return|return
name|_M_ht
operator|.
name|erase
argument_list|(
name|__key
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|__it
parameter_list|)
block|{
name|_M_ht
operator|.
name|erase
argument_list|(
name|__it
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|__f
parameter_list|,
name|iterator
name|__l
parameter_list|)
block|{
name|_M_ht
operator|.
name|erase
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
name|_M_ht
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|__hint
parameter_list|)
block|{
name|_M_ht
operator|.
name|resize
argument_list|(
name|__hint
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|size_type
name|bucket_count
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|bucket_count
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_bucket_count
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|max_bucket_count
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|size_type
name|elems_in_bucket
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
return|return
name|_M_ht
operator|.
name|elems_in_bucket
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|hash_set
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|&
name|__hs1
operator|,
specifier|const
name|hash_set
operator|<
name|_Value
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|&
name|__hs2
operator|)
block|{
return|return
name|__hs1
operator|.
name|_M_ht
operator|==
name|__hs2
operator|.
name|_M_ht
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|hash_set<_Val
argument_list|,
argument|_HashFcn
argument_list|,
argument|_EqualKey
argument_list|,
argument|_Alloc>& __hs1
argument_list|,
argument|hash_set<_Val
argument_list|,
argument|_HashFcn
argument_list|,
argument|_EqualKey
argument_list|,
argument|_Alloc>& __hs2
argument_list|)
block|{
name|__hs1
operator|.
name|swap
argument_list|(
name|__hs2
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_FUNCTION_TMPL_PARTIAL_ORDER */
ifndef|#
directive|ifndef
name|__STL_LIMITED_DEFAULT_TEMPLATES
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_HashFcn
operator|=
name|hash
operator|<
name|_Value
operator|>
operator|,
name|class
name|_EqualKey
operator|=
name|equal_to
operator|<
name|_Value
operator|>
operator|,
name|class
name|_Alloc
operator|=
name|__STL_DEFAULT_ALLOCATOR
argument_list|(
name|_Value
argument_list|)
operator|>
else|#
directive|else
name|template
operator|<
name|class
name|_Value
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|=
name|__STL_DEFAULT_ALLOCATOR
argument_list|(
name|_Value
argument_list|)
operator|>
endif|#
directive|endif
name|class
name|hash_multiset
block|{
name|private
operator|:
typedef|typedef
name|hashtable
operator|<
name|_Value
operator|,
name|_Value
operator|,
name|_HashFcn
operator|,
name|_Identity
operator|<
name|_Value
operator|>
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|_Ht
expr_stmt|;
name|_Ht
name|_M_ht
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|key_type
name|key_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|hasher
name|hasher
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|key_equal
name|key_equal
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_pointer
name|const_pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_iterator
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Ht
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|hasher
name|hash_funct
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|hash_funct
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|key_equal
name|key_eq
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|key_eq
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|get_allocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|hash_multiset
argument_list|()
operator|:
name|_M_ht
argument_list|(
literal|100
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{}
name|explicit
name|hash_multiset
argument_list|(
argument|size_type __n
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{}
name|hash_multiset
argument_list|(
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{}
name|hash_multiset
argument_list|(
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{}
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|hash_multiset
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|)
operator|:
name|_M_ht
argument_list|(
literal|100
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|hash_multiset
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|hash_multiset
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|hash_multiset
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
else|#
directive|else
name|hash_multiset
argument_list|(
specifier|const
name|value_type
operator|*
name|__f
argument_list|,
specifier|const
name|value_type
operator|*
name|__l
argument_list|)
operator|:
name|_M_ht
argument_list|(
literal|100
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_multiset
argument_list|(
argument|const value_type* __f
argument_list|,
argument|const value_type* __l
argument_list|,
argument|size_type __n
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_multiset
argument_list|(
argument|const value_type* __f
argument_list|,
argument|const value_type* __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_multiset
argument_list|(
argument|const value_type* __f
argument_list|,
argument|const value_type* __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_multiset
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|)
operator|:
name|_M_ht
argument_list|(
literal|100
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_multiset
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|,
argument|size_type __n
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|hasher()
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_multiset
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|key_equal()
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
name|hash_multiset
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|,
argument|size_type __n
argument_list|,
argument|const hasher& __hf
argument_list|,
argument|const key_equal& __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_ht
argument_list|(
argument|__n
argument_list|,
argument|__hf
argument_list|,
argument|__eql
argument_list|,
argument|__a
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
endif|#
directive|endif
comment|/*__STL_MEMBER_TEMPLATES */
name|public
operator|:
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|swap
parameter_list|(
name|hash_multiset
modifier|&
name|hs
parameter_list|)
block|{
name|_M_ht
operator|.
name|swap
argument_list|(
name|hs
operator|.
name|_M_ht
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|friend
name|bool
name|operator
operator|==
name|__STL_NULL_TMPL_ARGS
argument_list|(
specifier|const
name|hash_multiset
operator|&
argument_list|,
specifier|const
name|hash_multiset
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_function
name|iterator
name|insert
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__obj
parameter_list|)
block|{
return|return
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__obj
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
else|#
directive|else
name|void
name|insert
argument_list|(
argument|const value_type* __f
argument_list|,
argument|const value_type* __l
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|;   }
name|void
name|insert
argument_list|(
argument|const_iterator __f
argument_list|,
argument|const_iterator __l
argument_list|)
block|{
name|_M_ht
operator|.
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|; }
endif|#
directive|endif
comment|/*__STL_MEMBER_TEMPLATES */
name|iterator
name|insert_noresize
argument_list|(
argument|const value_type& __obj
argument_list|)
block|{
return|return
name|_M_ht
operator|.
name|insert_equal_noresize
argument_list|(
name|__obj
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|iterator
name|find
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
decl|const
block|{
return|return
name|_M_ht
operator|.
name|find
argument_list|(
name|__key
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|count
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
decl|const
block|{
return|return
name|_M_ht
operator|.
name|count
argument_list|(
name|__key
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|equal_range
argument_list|(
argument|const key_type& __key
argument_list|)
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|equal_range
argument_list|(
name|__key
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|size_type
name|erase
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__key
parameter_list|)
block|{
return|return
name|_M_ht
operator|.
name|erase
argument_list|(
name|__key
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|__it
parameter_list|)
block|{
name|_M_ht
operator|.
name|erase
argument_list|(
name|__it
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|__f
parameter_list|,
name|iterator
name|__l
parameter_list|)
block|{
name|_M_ht
operator|.
name|erase
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
name|_M_ht
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|__hint
parameter_list|)
block|{
name|_M_ht
operator|.
name|resize
argument_list|(
name|__hint
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|size_type
name|bucket_count
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|bucket_count
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_bucket_count
argument_list|()
specifier|const
block|{
return|return
name|_M_ht
operator|.
name|max_bucket_count
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|size_type
name|elems_in_bucket
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
return|return
name|_M_ht
operator|.
name|elems_in_bucket
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|hash_multiset
operator|<
name|_Val
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|&
name|__hs1
operator|,
specifier|const
name|hash_multiset
operator|<
name|_Val
operator|,
name|_HashFcn
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
operator|&
name|__hs2
operator|)
block|{
return|return
name|__hs1
operator|.
name|_M_ht
operator|==
name|__hs2
operator|.
name|_M_ht
return|;
block|}
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_FUNCTION_TMPL_PARTIAL_ORDER
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|hash_multiset<_Val
argument_list|,
argument|_HashFcn
argument_list|,
argument|_EqualKey
argument_list|,
argument|_Alloc>& __hs1
argument_list|,
argument|hash_multiset<_Val
argument_list|,
argument|_HashFcn
argument_list|,
argument|_EqualKey
argument_list|,
argument|_Alloc>& __hs2
argument_list|)
block|{
name|__hs1
operator|.
name|swap
argument_list|(
name|__hs2
argument_list|)
block|; }
endif|#
directive|endif
comment|/* __STL_FUNCTION_TMPL_PARTIAL_ORDER */
if|#
directive|if
name|defined
argument_list|(
name|__sgi
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
operator|(
name|_MIPS_SIM
operator|!=
name|_MIPS_SIM_ABI32
operator|)
pragma|#
directive|pragma
name|reset
name|woff
name|1174
pragma|#
directive|pragma
name|reset
name|woff
name|1375
endif|#
directive|endif
name|__STL_END_NAMESPACE
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_HASH_SET_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

