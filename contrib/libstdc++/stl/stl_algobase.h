begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/* NOTE: This is an internal header file, included by other STL headers.  *   You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_ALGOBASE_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_ALGOBASE_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__STL_CONFIG_H
end_ifndef

begin_include
include|#
directive|include
file|<stl_config.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_RELOPS
end_ifndef

begin_include
include|#
directive|include
file|<stl_relops.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_PAIR_H
end_ifndef

begin_include
include|#
directive|include
file|<stl_pair.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__TYPE_TRAITS_H_
end_ifndef

begin_include
include|#
directive|include
file|<type_traits.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<string.h>
end_include

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<new.h>
end_include

begin_include
include|#
directive|include
file|<iostream.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_ITERATOR_H
end_ifndef

begin_include
include|#
directive|include
file|<stl_iterator.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|__STL_BEGIN_NAMESPACE
name|template
operator|<
name|class
name|ForwardIterator1
operator|,
name|class
name|ForwardIterator2
operator|,
name|class
name|T
operator|>
specifier|inline
name|void
name|__iter_swap
argument_list|(
argument|ForwardIterator1 a
argument_list|,
argument|ForwardIterator2 b
argument_list|,
argument|T*
argument_list|)
block|{
name|T
name|tmp
operator|=
operator|*
name|a
block|;
operator|*
name|a
operator|=
operator|*
name|b
block|;
operator|*
name|b
operator|=
name|tmp
block|; }
name|template
operator|<
name|class
name|ForwardIterator1
operator|,
name|class
name|ForwardIterator2
operator|>
specifier|inline
name|void
name|iter_swap
argument_list|(
argument|ForwardIterator1 a
argument_list|,
argument|ForwardIterator2 b
argument_list|)
block|{
name|__iter_swap
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|value_type
argument_list|(
name|a
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|T& a
argument_list|,
argument|T& b
argument_list|)
block|{
name|T
name|tmp
operator|=
name|a
block|;
name|a
operator|=
name|b
block|;
name|b
operator|=
name|tmp
block|; }
ifndef|#
directive|ifndef
name|__BORLANDC__
undef|#
directive|undef
name|min
undef|#
directive|undef
name|max
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
specifier|const
name|T
operator|&
name|min
argument_list|(
argument|const T& a
argument_list|,
argument|const T& b
argument_list|)
block|{
return|return
name|b
operator|<
name|a
operator|?
name|b
operator|:
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
specifier|const
name|T
operator|&
name|max
argument_list|(
argument|const T& a
argument_list|,
argument|const T& b
argument_list|)
block|{
return|return
name|a
operator|<
name|b
operator|?
name|b
operator|:
name|a
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __BORLANDC__ */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Compare
operator|>
specifier|inline
specifier|const
name|T
operator|&
name|min
argument_list|(
argument|const T& a
argument_list|,
argument|const T& b
argument_list|,
argument|Compare comp
argument_list|)
block|{
return|return
name|comp
argument_list|(
name|b
argument_list|,
name|a
argument_list|)
operator|?
name|b
operator|:
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Compare
operator|>
specifier|inline
specifier|const
name|T
operator|&
name|max
argument_list|(
argument|const T& a
argument_list|,
argument|const T& b
argument_list|,
argument|Compare comp
argument_list|)
block|{
return|return
name|comp
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
operator|?
name|b
operator|:
name|a
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|>
specifier|inline
name|OutputIterator
name|__copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|result
operator|,
operator|++
name|first
control|)
operator|*
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|OutputIterator
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|OutputIterator
name|__copy_d
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|Distance*
argument_list|)
block|{
for|for
control|(
name|Distance
name|n
init|=
name|last
operator|-
name|first
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
operator|,
operator|++
name|result
operator|,
operator|++
name|first
control|)
operator|*
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|OutputIterator
operator|>
specifier|inline
name|OutputIterator
name|__copy
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|RandomAccessIterator last
argument_list|,
argument|OutputIterator result
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
return|return
name|__copy_d
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|distance_type
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|>
expr|struct
name|__copy_dispatch
block|{
name|OutputIterator
name|operator
argument_list|()
operator|(
name|InputIterator
name|first
operator|,
name|InputIterator
name|last
operator|,
name|OutputIterator
name|result
operator|)
block|{
return|return
name|__copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|__copy_t
argument_list|(
argument|const T* first
argument_list|,
argument|const T* last
argument_list|,
argument|T* result
argument_list|,
argument|__true_type
argument_list|)
block|{
name|memmove
argument_list|(
name|result
argument_list|,
name|first
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
operator|(
name|last
operator|-
name|first
operator|)
argument_list|)
block|;
return|return
name|result
operator|+
operator|(
name|last
operator|-
name|first
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|__copy_t
argument_list|(
argument|const T* first
argument_list|,
argument|const T* last
argument_list|,
argument|T* result
argument_list|,
argument|__false_type
argument_list|)
block|{
return|return
name|__copy_d
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
operator|(
name|ptrdiff_t
operator|*
operator|)
literal|0
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|__copy_dispatch
operator|<
name|T
operator|*
operator|,
name|T
operator|*
operator|>
block|{
name|T
operator|*
name|operator
argument_list|()
operator|(
name|T
operator|*
name|first
operator|,
name|T
operator|*
name|last
operator|,
name|T
operator|*
name|result
operator|)
block|{
typedef|typedef
name|typename
name|__type_traits
operator|<
name|T
operator|>
operator|::
name|has_trivial_assignment_operator
name|t
expr_stmt|;
return|return
name|__copy_t
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|t
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|__copy_dispatch
operator|<
specifier|const
name|T
operator|*
operator|,
name|T
operator|*
operator|>
block|{
name|T
operator|*
name|operator
argument_list|()
operator|(
specifier|const
name|T
operator|*
name|first
operator|,
specifier|const
name|T
operator|*
name|last
operator|,
name|T
operator|*
name|result
operator|)
block|{
typedef|typedef
name|typename
name|__type_traits
operator|<
name|T
operator|>
operator|::
name|has_trivial_assignment_operator
name|t
expr_stmt|;
return|return
name|__copy_t
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|t
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|OutputIterator
operator|>
specifier|inline
name|OutputIterator
name|copy
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
return|return
name|__copy_dispatch
operator|<
name|InputIterator
operator|,
name|OutputIterator
operator|>
operator|(
operator|)
operator|(
name|first
operator|,
name|last
operator|,
name|result
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|char
modifier|*
name|copy
parameter_list|(
specifier|const
name|char
modifier|*
name|first
parameter_list|,
specifier|const
name|char
modifier|*
name|last
parameter_list|,
name|char
modifier|*
name|result
parameter_list|)
block|{
name|memmove
argument_list|(
name|result
argument_list|,
name|first
argument_list|,
name|last
operator|-
name|first
argument_list|)
expr_stmt|;
return|return
name|result
operator|+
operator|(
name|last
operator|-
name|first
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|wchar_t
modifier|*
name|copy
parameter_list|(
specifier|const
name|wchar_t
modifier|*
name|first
parameter_list|,
specifier|const
name|wchar_t
modifier|*
name|last
parameter_list|,
name|wchar_t
modifier|*
name|result
parameter_list|)
block|{
name|memmove
argument_list|(
name|result
argument_list|,
name|first
argument_list|,
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
operator|*
operator|(
name|last
operator|-
name|first
operator|)
argument_list|)
expr_stmt|;
return|return
name|result
operator|+
operator|(
name|last
operator|-
name|first
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator1
operator|,
name|class
name|BidirectionalIterator2
operator|>
specifier|inline
name|BidirectionalIterator2
name|__copy_backward
argument_list|(
argument|BidirectionalIterator1 first
argument_list|,
argument|BidirectionalIterator1 last
argument_list|,
argument|BidirectionalIterator2 result
argument_list|)
block|{
while|while
condition|(
name|first
operator|!=
name|last
condition|)
operator|*
operator|--
name|result
operator|=
operator|*
operator|--
name|last
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|result
return|;
end_return

begin_expr_stmt
unit|}   template
operator|<
name|class
name|BidirectionalIterator1
operator|,
name|class
name|BidirectionalIterator2
operator|>
expr|struct
name|__copy_backward_dispatch
block|{
name|BidirectionalIterator2
name|operator
argument_list|()
operator|(
name|BidirectionalIterator1
name|first
operator|,
name|BidirectionalIterator1
name|last
operator|,
name|BidirectionalIterator2
name|result
operator|)
block|{
return|return
name|__copy_backward
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|__STL_CLASS_PARTIAL_SPECIALIZATION
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|__copy_backward_t
argument_list|(
argument|const T* first
argument_list|,
argument|const T* last
argument_list|,
argument|T* result
argument_list|,
argument|__true_type
argument_list|)
block|{
specifier|const
name|ptrdiff_t
name|N
operator|=
name|last
operator|-
name|first
block|;
name|memmove
argument_list|(
name|result
operator|-
name|N
argument_list|,
name|first
argument_list|,
sizeof|sizeof
argument_list|(
name|T
argument_list|)
operator|*
name|N
argument_list|)
block|;
return|return
name|result
operator|-
name|N
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|__copy_backward_t
argument_list|(
argument|const T* first
argument_list|,
argument|const T* last
argument_list|,
argument|T* result
argument_list|,
argument|__false_type
argument_list|)
block|{
return|return
name|__copy_backward
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|__copy_backward_dispatch
operator|<
name|T
operator|*
operator|,
name|T
operator|*
operator|>
block|{
name|T
operator|*
name|operator
argument_list|()
operator|(
name|T
operator|*
name|first
operator|,
name|T
operator|*
name|last
operator|,
name|T
operator|*
name|result
operator|)
block|{
typedef|typedef
name|typename
name|__type_traits
operator|<
name|T
operator|>
operator|::
name|has_trivial_assignment_operator
name|t
expr_stmt|;
return|return
name|__copy_backward_t
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|t
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|__copy_backward_dispatch
operator|<
specifier|const
name|T
operator|*
operator|,
name|T
operator|*
operator|>
block|{
name|T
operator|*
name|operator
argument_list|()
operator|(
specifier|const
name|T
operator|*
name|first
operator|,
specifier|const
name|T
operator|*
name|last
operator|,
name|T
operator|*
name|result
operator|)
block|{
typedef|typedef
name|typename
name|__type_traits
operator|<
name|T
operator|>
operator|::
name|has_trivial_assignment_operator
name|t
expr_stmt|;
return|return
name|__copy_backward_t
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|,
name|t
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STL_CLASS_PARTIAL_SPECIALIZATION */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator1
operator|,
name|class
name|BidirectionalIterator2
operator|>
specifier|inline
name|BidirectionalIterator2
name|copy_backward
argument_list|(
argument|BidirectionalIterator1 first
argument_list|,
argument|BidirectionalIterator1 last
argument_list|,
argument|BidirectionalIterator2 result
argument_list|)
block|{
return|return
name|__copy_backward_dispatch
operator|<
name|BidirectionalIterator1
operator|,
name|BidirectionalIterator2
operator|>
operator|(
operator|)
operator|(
name|first
operator|,
name|last
operator|,
name|result
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Size
operator|,
name|class
name|OutputIterator
operator|>
name|pair
operator|<
name|InputIterator
operator|,
name|OutputIterator
operator|>
name|__copy_n
argument_list|(
argument|InputIterator first
argument_list|,
argument|Size count
argument_list|,
argument|OutputIterator result
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|count
operator|>
literal|0
condition|;
operator|--
name|count
operator|,
operator|++
name|first
operator|,
operator|++
name|result
control|)
operator|*
name|result
operator|=
operator|*
name|first
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|pair
operator|<
name|InputIterator
operator|,
name|OutputIterator
operator|>
operator|(
name|first
operator|,
name|result
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|Size
operator|,
name|class
name|OutputIterator
operator|>
specifier|inline
name|pair
operator|<
name|RandomAccessIterator
operator|,
name|OutputIterator
operator|>
name|__copy_n
argument_list|(
argument|RandomAccessIterator first
argument_list|,
argument|Size count
argument_list|,
argument|OutputIterator result
argument_list|,
argument|random_access_iterator_tag
argument_list|)
block|{
name|RandomAccessIterator
name|last
operator|=
name|first
operator|+
name|count
block|;
return|return
name|pair
operator|<
name|RandomAccessIterator
operator|,
name|OutputIterator
operator|>
operator|(
name|last
operator|,
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|result
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|,
name|class
name|Size
operator|,
name|class
name|OutputIterator
operator|>
specifier|inline
name|pair
operator|<
name|InputIterator
operator|,
name|OutputIterator
operator|>
name|copy_n
argument_list|(
argument|InputIterator first
argument_list|,
argument|Size count
argument_list|,
argument|OutputIterator result
argument_list|)
block|{
return|return
name|__copy_n
argument_list|(
name|first
argument_list|,
name|count
argument_list|,
name|result
argument_list|,
name|iterator_category
argument_list|(
name|first
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|ForwardIterator
operator|,
name|class
name|T
operator|>
name|void
name|fill
argument_list|(
argument|ForwardIterator first
argument_list|,
argument|ForwardIterator last
argument_list|,
argument|const T& value
argument_list|)
block|{
for|for
control|(
init|;
name|first
operator|!=
name|last
condition|;
operator|++
name|first
control|)
operator|*
name|first
operator|=
name|value
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|OutputIterator
operator|,
name|class
name|Size
operator|,
name|class
name|T
operator|>
name|OutputIterator
name|fill_n
argument_list|(
argument|OutputIterator first
argument_list|,
argument|Size n
argument_list|,
argument|const T& value
argument_list|)
block|{
for|for
control|(
init|;
name|n
operator|>
literal|0
condition|;
operator|--
name|n
operator|,
operator|++
name|first
control|)
operator|*
name|first
operator|=
name|value
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|first
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|>
name|pair
operator|<
name|InputIterator1
operator|,
name|InputIterator2
operator|>
name|mismatch
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
operator|*
name|first1
operator|==
operator|*
name|first2
condition|)
block|{
operator|++
name|first1
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|pair
operator|<
name|InputIterator1
operator|,
name|InputIterator2
operator|>
operator|(
name|first1
operator|,
name|first2
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|BinaryPredicate
operator|>
name|pair
operator|<
name|InputIterator1
operator|,
name|InputIterator2
operator|>
name|mismatch
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|binary_pred
argument_list|(
operator|*
name|first1
argument_list|,
operator|*
name|first2
argument_list|)
condition|)
block|{
operator|++
name|first1
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|pair
operator|<
name|InputIterator1
operator|,
name|InputIterator2
operator|>
operator|(
name|first1
operator|,
name|first2
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|>
specifier|inline
name|bool
name|equal
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|)
block|{
for|for
control|(
init|;
name|first1
operator|!=
name|last1
condition|;
operator|++
name|first1
operator|,
operator|++
name|first2
control|)
if|if
condition|(
operator|*
name|first1
operator|!=
operator|*
name|first2
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_return
return|return
name|true
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|BinaryPredicate
operator|>
specifier|inline
name|bool
name|equal
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|BinaryPredicate binary_pred
argument_list|)
block|{
for|for
control|(
init|;
name|first1
operator|!=
name|last1
condition|;
operator|++
name|first1
operator|,
operator|++
name|first2
control|)
if|if
condition|(
operator|!
name|binary_pred
argument_list|(
operator|*
name|first1
argument_list|,
operator|*
name|first2
argument_list|)
condition|)
return|return
name|false
return|;
end_expr_stmt

begin_return
return|return
name|true
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|>
name|bool
name|lexicographical_compare
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|)
block|{
for|for
control|(
init|;
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|;
operator|++
name|first1
operator|,
operator|++
name|first2
control|)
block|{
if|if
condition|(
operator|*
name|first1
operator|<
operator|*
name|first2
condition|)
return|return
name|true
return|;
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
return|return
name|false
return|;
block|}
end_expr_stmt

begin_return
return|return
name|first1
operator|==
name|last1
operator|&&
name|first2
operator|!=
name|last2
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|,
name|class
name|Compare
operator|>
name|bool
name|lexicographical_compare
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|,
argument|Compare comp
argument_list|)
block|{
for|for
control|(
init|;
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|;
operator|++
name|first1
operator|,
operator|++
name|first2
control|)
block|{
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first1
argument_list|,
operator|*
name|first2
argument_list|)
condition|)
return|return
name|true
return|;
if|if
condition|(
name|comp
argument_list|(
operator|*
name|first2
argument_list|,
operator|*
name|first1
argument_list|)
condition|)
return|return
name|false
return|;
block|}
end_expr_stmt

begin_return
return|return
name|first1
operator|==
name|last1
operator|&&
name|first2
operator|!=
name|last2
return|;
end_return

begin_function
unit|}  inline
name|bool
name|lexicographical_compare
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|first1
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|last1
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|first2
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|last2
parameter_list|)
block|{
specifier|const
name|size_t
name|len1
init|=
name|last1
operator|-
name|first1
decl_stmt|;
specifier|const
name|size_t
name|len2
init|=
name|last2
operator|-
name|first2
decl_stmt|;
specifier|const
name|int
name|result
init|=
name|memcmp
argument_list|(
name|first1
argument_list|,
name|first2
argument_list|,
name|min
argument_list|(
name|len1
argument_list|,
name|len2
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
operator|!=
literal|0
condition|?
name|result
operator|<
literal|0
else|:
name|len1
operator|<
name|len2
return|;
block|}
end_function

begin_function
specifier|inline
name|bool
name|lexicographical_compare
parameter_list|(
specifier|const
name|char
modifier|*
name|first1
parameter_list|,
specifier|const
name|char
modifier|*
name|last1
parameter_list|,
specifier|const
name|char
modifier|*
name|first2
parameter_list|,
specifier|const
name|char
modifier|*
name|last2
parameter_list|)
block|{
if|#
directive|if
name|CHAR_MAX
operator|==
name|SCHAR_MAX
return|return
name|lexicographical_compare
argument_list|(
operator|(
specifier|const
name|signed
name|char
operator|*
operator|)
name|first1
argument_list|,
operator|(
specifier|const
name|signed
name|char
operator|*
operator|)
name|last1
argument_list|,
operator|(
specifier|const
name|signed
name|char
operator|*
operator|)
name|first2
argument_list|,
operator|(
specifier|const
name|signed
name|char
operator|*
operator|)
name|last2
argument_list|)
return|;
else|#
directive|else
return|return
name|lexicographical_compare
argument_list|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|first1
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|last1
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|first2
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|last2
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator1
operator|,
name|class
name|InputIterator2
operator|>
name|int
name|lexicographical_compare_3way
argument_list|(
argument|InputIterator1 first1
argument_list|,
argument|InputIterator1 last1
argument_list|,
argument|InputIterator2 first2
argument_list|,
argument|InputIterator2 last2
argument_list|)
block|{
while|while
condition|(
name|first1
operator|!=
name|last1
operator|&&
name|first2
operator|!=
name|last2
condition|)
block|{
if|if
condition|(
operator|*
name|first1
operator|<
operator|*
name|first2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
operator|*
name|first2
operator|<
operator|*
name|first1
condition|)
return|return
literal|1
return|;
operator|++
name|first1
expr_stmt|;
operator|++
name|first2
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|first2
operator|==
name|last2
condition|)
block|{
return|return
operator|!
operator|(
name|first1
operator|==
name|last1
operator|)
return|;
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
end_if

begin_function
unit|}  inline
name|int
name|lexicographical_compare_3way
parameter_list|(
specifier|const
name|unsigned
name|char
modifier|*
name|first1
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|last1
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|first2
parameter_list|,
specifier|const
name|unsigned
name|char
modifier|*
name|last2
parameter_list|)
block|{
specifier|const
name|ptrdiff_t
name|len1
init|=
name|last1
operator|-
name|first1
decl_stmt|;
specifier|const
name|ptrdiff_t
name|len2
init|=
name|last2
operator|-
name|first2
decl_stmt|;
specifier|const
name|int
name|result
init|=
name|memcmp
argument_list|(
name|first1
argument_list|,
name|first2
argument_list|,
name|min
argument_list|(
name|len1
argument_list|,
name|len2
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
operator|!=
literal|0
condition|?
name|result
else|:
operator|(
name|len1
operator|==
name|len2
condition|?
literal|0
else|:
operator|(
name|len1
operator|<
name|len2
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
operator|)
return|;
block|}
end_function

begin_function
specifier|inline
name|int
name|lexicographical_compare_3way
parameter_list|(
specifier|const
name|char
modifier|*
name|first1
parameter_list|,
specifier|const
name|char
modifier|*
name|last1
parameter_list|,
specifier|const
name|char
modifier|*
name|first2
parameter_list|,
specifier|const
name|char
modifier|*
name|last2
parameter_list|)
block|{
if|#
directive|if
name|CHAR_MAX
operator|==
name|SCHAR_MAX
return|return
name|lexicographical_compare_3way
argument_list|(
operator|(
specifier|const
name|signed
name|char
operator|*
operator|)
name|first1
argument_list|,
operator|(
specifier|const
name|signed
name|char
operator|*
operator|)
name|last1
argument_list|,
operator|(
specifier|const
name|signed
name|char
operator|*
operator|)
name|first2
argument_list|,
operator|(
specifier|const
name|signed
name|char
operator|*
operator|)
name|last2
argument_list|)
return|;
else|#
directive|else
return|return
name|lexicographical_compare_3way
argument_list|(
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|first1
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|last1
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|first2
argument_list|,
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|last2
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_macro
name|__STL_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_ALGOBASE_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

