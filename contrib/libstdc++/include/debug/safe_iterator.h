begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Safe iterator implementation  -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2003, 2004, 2005, 2006
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/** @file debug/safe_iterator.h  *  This file is a GNU debug extension to the Standard C++ Library.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GLIBCXX_DEBUG_SAFE_ITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|_GLIBCXX_DEBUG_SAFE_ITERATOR_H
value|1
end_define

begin_include
include|#
directive|include
file|<debug/debug.h>
end_include

begin_include
include|#
directive|include
file|<debug/macros.h>
end_include

begin_include
include|#
directive|include
file|<debug/functions.h>
end_include

begin_include
include|#
directive|include
file|<debug/formatter.h>
end_include

begin_include
include|#
directive|include
file|<debug/safe_base.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_pair.h>
end_include

begin_include
include|#
directive|include
file|<ext/type_traits.h>
end_include

begin_decl_stmt
name|namespace
name|__gnu_debug
block|{
comment|/** Iterators that derive from _Safe_iterator_base but that aren't    *  _Safe_iterators can be determined singular or non-singular via    *  _Safe_iterator_base.    */
specifier|inline
name|bool
name|__check_singular_aux
parameter_list|(
specifier|const
name|_Safe_iterator_base
modifier|*
name|__x
parameter_list|)
block|{
return|return
name|__x
operator|->
name|_M_singular
argument_list|()
return|;
block|}
comment|/** \brief Safe iterator wrapper.    *    *  The class template %_Safe_iterator is a wrapper around an    *  iterator that tracks the iterator's movement among sequences and    *  checks that operations performed on the "safe" iterator are    *  legal. In additional to the basic iterator operations (which are    *  validated, and then passed to the underlying iterator),    *  %_Safe_iterator has member functions for iterator invalidation,    *  attaching/detaching the iterator from sequences, and querying    *  the iterator's state.    */
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
name|class
name|_Safe_iterator
operator|:
name|public
name|_Safe_iterator_base
block|{
typedef|typedef
name|_Safe_iterator
name|_Self
typedef|;
comment|/** The precision to which we can calculate the distance between        *  two iterators.        */
block|enum
name|_Distance_precision
block|{
name|__dp_equality
block|,
comment|//< Can compare iterator equality, only
name|__dp_sign
block|,
comment|//< Can determine equality and ordering
name|__dp_exact
comment|//< Can determine distance precisely
block|}
expr_stmt|;
comment|/// The underlying iterator
name|_Iterator
name|_M_current
decl_stmt|;
comment|/// Determine if this is a constant iterator.
name|bool
name|_M_constant
argument_list|()
specifier|const
block|{
typedef|typedef
name|typename
name|_Sequence
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
return|return
name|__is_same
operator|<
name|const_iterator
operator|,
name|_Safe_iterator
operator|>
operator|::
name|value
return|;
block|}
end_decl_stmt

begin_typedef
typedef|typedef
name|std
operator|::
name|iterator_traits
operator|<
name|_Iterator
operator|>
name|_Traits
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|_Iterator
name|_Base_iterator
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|iterator_category
name|iterator_category
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_comment
comment|/// @post the iterator is singular and unattached
end_comment

begin_expr_stmt
name|_Safe_iterator
argument_list|()
operator|:
name|_M_current
argument_list|()
block|{ }
comment|/**        * @brief Safe iterator construction from an unsafe iterator and        * its sequence.        *        * @pre @p seq is not NULL        * @post this is not singular        */
name|_Safe_iterator
argument_list|(
specifier|const
name|_Iterator
operator|&
name|__i
argument_list|,
specifier|const
name|_Sequence
operator|*
name|__seq
argument_list|)
operator|:
name|_Safe_iterator_base
argument_list|(
name|__seq
argument_list|,
name|_M_constant
argument_list|()
argument_list|)
operator|,
name|_M_current
argument_list|(
argument|__i
argument_list|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|this
operator|->
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_init_singular
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
argument_list|)
block|;       }
comment|/**        * @brief Copy construction.        * @pre @p x is not singular        */
name|_Safe_iterator
argument_list|(
specifier|const
name|_Safe_iterator
operator|&
name|__x
argument_list|)
operator|:
name|_Safe_iterator_base
argument_list|(
name|__x
argument_list|,
name|_M_constant
argument_list|()
argument_list|)
operator|,
name|_M_current
argument_list|(
argument|__x._M_current
argument_list|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__x
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_init_copy_singular
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__x
argument_list|,
literal|"other"
argument_list|)
argument_list|)
block|;       }
comment|/**        *  @brief Converting constructor from a mutable iterator to a        *  constant iterator.        *        *  @pre @p x is not singular       */
name|template
operator|<
name|typename
name|_MutableIterator
operator|>
name|_Safe_iterator
argument_list|(
argument|const _Safe_iterator<_MutableIterator
argument_list|,
argument|typename __gnu_cxx::__enable_if<(std::__are_same<_MutableIterator,                       typename _Sequence::iterator::_Base_iterator>::__value)
argument_list|,
argument|_Sequence>::__type>& __x
argument_list|)
operator|:
name|_Safe_iterator_base
argument_list|(
name|__x
argument_list|,
name|_M_constant
argument_list|()
argument_list|)
operator|,
name|_M_current
argument_list|(
argument|__x.base()
argument_list|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__x
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_init_const_singular
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__x
argument_list|,
literal|"other"
argument_list|)
argument_list|)
block|; 	}
comment|/**        * @brief Copy assignment.        * @pre @p x is not singular        */
name|_Safe_iterator
operator|&
name|operator
operator|=
operator|(
specifier|const
name|_Safe_iterator
operator|&
name|__x
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__x
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_copy_singular
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__x
argument_list|,
literal|"other"
argument_list|)
argument_list|)
block|;
name|_M_current
operator|=
name|__x
operator|.
name|_M_current
block|;
name|this
operator|->
name|_M_attach
argument_list|(
name|static_cast
operator|<
name|_Sequence
operator|*
operator|>
operator|(
name|__x
operator|.
name|_M_sequence
operator|)
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  @brief Iterator dereference.        *  @pre iterator is dereferenceable        */
end_comment

begin_expr_stmt
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_dereferenceable
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_bad_deref
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
argument_list|)
block|;
return|return
operator|*
name|_M_current
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  @brief Iterator dereference.        *  @pre iterator is dereferenceable        *  @todo Make this correct w.r.t. iterators that return proxies        *  @todo Use addressof() instead of& operator        */
end_comment

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_dereferenceable
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_bad_deref
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
argument_list|)
block|;
return|return
operator|&
operator|*
name|_M_current
return|;
block|}
end_expr_stmt

begin_comment
comment|// ------ Input iterator requirements ------
end_comment

begin_comment
comment|/**        *  @brief Iterator preincrement        *  @pre iterator is incrementable        */
end_comment

begin_expr_stmt
name|_Safe_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_incrementable
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_bad_inc
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
argument_list|)
block|;
operator|++
name|_M_current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  @brief Iterator postincrement        *  @pre iterator is incrementable        */
end_comment

begin_expr_stmt
name|_Safe_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_incrementable
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_bad_inc
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
argument_list|)
block|;
name|_Safe_iterator
name|__tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|++
name|_M_current
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_comment
comment|// ------ Bidirectional iterator requirements ------
end_comment

begin_comment
comment|/**        *  @brief Iterator predecrement        *  @pre iterator is decrementable        */
end_comment

begin_expr_stmt
name|_Safe_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_decrementable
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_bad_dec
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
argument_list|)
block|;
operator|--
name|_M_current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  @brief Iterator postdecrement        *  @pre iterator is decrementable        */
end_comment

begin_expr_stmt
name|_Safe_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_decrementable
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_bad_dec
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|,
literal|"this"
argument_list|)
argument_list|)
block|;
name|_Safe_iterator
name|__tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
operator|--
name|_M_current
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_comment
comment|// ------ Random access iterator requirements ------
end_comment

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
specifier|const
name|difference_type
operator|&
name|__n
argument_list|)
decl|const
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_can_advance
argument_list|(
name|__n
argument_list|)
operator|&&
name|this
operator|->
name|_M_can_advance
argument_list|(
name|__n
operator|+
literal|1
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_subscript_oob
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|_M_integer
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|_M_current
index|[
name|__n
index|]
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|_Safe_iterator
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|difference_type
operator|&
name|__n
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_can_advance
argument_list|(
name|__n
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_advance_oob
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|_M_integer
argument_list|(
name|__n
argument_list|)
argument_list|)
block|;
name|_M_current
operator|+=
name|__n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Safe_iterator
name|operator
operator|+
operator|(
specifier|const
name|difference_type
operator|&
name|__n
operator|)
specifier|const
block|{
name|_Safe_iterator
name|__tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|__tmp
operator|+=
name|__n
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Safe_iterator
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|difference_type
operator|&
name|__n
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|this
operator|->
name|_M_can_advance
argument_list|(
operator|-
name|__n
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_retreat_oob
argument_list|)
operator|.
name|_M_iterator
argument_list|(
operator|*
name|this
argument_list|)
operator|.
name|_M_integer
argument_list|(
name|__n
argument_list|)
argument_list|)
block|;
name|_M_current
operator|+=
operator|-
name|__n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Safe_iterator
name|operator
operator|-
operator|(
specifier|const
name|difference_type
operator|&
name|__n
operator|)
specifier|const
block|{
name|_Safe_iterator
name|__tmp
argument_list|(
operator|*
name|this
argument_list|)
block|;
name|__tmp
operator|-=
name|__n
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_comment
comment|// ------ Utilities ------
end_comment

begin_comment
comment|/**        * @brief Return the underlying iterator        */
end_comment

begin_expr_stmt
name|_Iterator
name|base
argument_list|()
specifier|const
block|{
return|return
name|_M_current
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        * @brief Conversion to underlying non-debug iterator to allow        * better interaction with non-debug containers.        */
end_comment

begin_expr_stmt
name|operator
name|_Iterator
argument_list|()
specifier|const
block|{
return|return
name|_M_current
return|;
block|}
end_expr_stmt

begin_comment
comment|/** Attach iterator to the given sequence. */
end_comment

begin_function
name|void
name|_M_attach
parameter_list|(
specifier|const
name|_Sequence
modifier|*
name|__seq
parameter_list|)
block|{
name|_Safe_iterator_base
operator|::
name|_M_attach
argument_list|(
name|const_cast
operator|<
name|_Sequence
operator|*
operator|>
operator|(
name|__seq
operator|)
argument_list|,
name|_M_constant
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Likewise, but not thread-safe. */
end_comment

begin_function
name|void
name|_M_attach_single
parameter_list|(
specifier|const
name|_Sequence
modifier|*
name|__seq
parameter_list|)
block|{
name|_Safe_iterator_base
operator|::
name|_M_attach_single
argument_list|(
name|const_cast
operator|<
name|_Sequence
operator|*
operator|>
operator|(
name|__seq
operator|)
argument_list|,
name|_M_constant
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/** Invalidate the iterator, making it singular. */
end_comment

begin_function_decl
name|void
name|_M_invalidate
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|/** Likewise, but not thread-safe. */
end_comment

begin_function_decl
name|void
name|_M_invalidate_single
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|/// Is the iterator dereferenceable?
end_comment

begin_expr_stmt
name|bool
name|_M_dereferenceable
argument_list|()
specifier|const
block|{
return|return
operator|!
name|this
operator|->
name|_M_singular
argument_list|()
operator|&&
operator|!
name|_M_is_end
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Is the iterator incrementable?
end_comment

begin_expr_stmt
name|bool
name|_M_incrementable
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_M_dereferenceable
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|// Is the iterator decrementable?
end_comment

begin_expr_stmt
name|bool
name|_M_decrementable
argument_list|()
specifier|const
block|{
return|return
operator|!
name|_M_singular
argument_list|()
operator|&&
operator|!
name|_M_is_begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|// Can we advance the iterator @p __n steps (@p __n may be negative)
end_comment

begin_decl_stmt
name|bool
name|_M_can_advance
argument_list|(
specifier|const
name|difference_type
operator|&
name|__n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Is the iterator range [*this, __rhs) valid?
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Other
operator|>
name|bool
name|_M_valid_range
argument_list|(
argument|const _Safe_iterator<_Other
argument_list|,
argument|_Sequence>& __rhs
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The sequence this iterator references.
end_comment

begin_expr_stmt
specifier|const
name|_Sequence
operator|*
name|_M_get_sequence
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
specifier|const
name|_Sequence
operator|*
operator|>
operator|(
name|_M_sequence
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/** Determine the distance between two iterators with some known      *	precision.     */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator1
operator|,
name|typename
name|_Iterator2
operator|>
specifier|static
name|std
operator|::
name|pair
operator|<
name|difference_type
operator|,
name|_Distance_precision
operator|>
name|_M_get_distance
argument_list|(
argument|const _Iterator1& __lhs
argument_list|,
argument|const _Iterator2& __rhs
argument_list|)
block|{
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|_Iterator1
operator|>
operator|::
name|iterator_category
name|_Category
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_M_get_distance
argument_list|(
name|__lhs
argument_list|,
name|__rhs
argument_list|,
name|_Category
argument_list|()
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}      template
operator|<
name|typename
name|_Iterator1
operator|,
name|typename
name|_Iterator2
operator|>
specifier|static
name|std
operator|::
name|pair
operator|<
name|difference_type
operator|,
name|_Distance_precision
operator|>
name|_M_get_distance
argument_list|(
argument|const _Iterator1& __lhs
argument_list|,
argument|const _Iterator2& __rhs
argument_list|,
argument|std::random_access_iterator_tag
argument_list|)
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|__rhs
operator|.
name|base
argument_list|()
operator|-
name|__lhs
operator|.
name|base
argument_list|()
argument_list|,
name|__dp_exact
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator1
operator|,
name|typename
name|_Iterator2
operator|>
specifier|static
name|std
operator|::
name|pair
operator|<
name|difference_type
operator|,
name|_Distance_precision
operator|>
name|_M_get_distance
argument_list|(
argument|const _Iterator1& __lhs
argument_list|,
argument|const _Iterator2& __rhs
argument_list|,
argument|std::forward_iterator_tag
argument_list|)
block|{
return|return
name|std
operator|::
name|make_pair
argument_list|(
name|__lhs
operator|.
name|base
argument_list|()
operator|==
name|__rhs
operator|.
name|base
argument_list|()
operator|?
literal|0
operator|:
literal|1
argument_list|,
name|__dp_equality
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Is this iterator equal to the sequence's begin() iterator?
end_comment

begin_expr_stmt
name|bool
name|_M_is_begin
argument_list|()
specifier|const
block|{
return|return
operator|*
name|this
operator|==
name|static_cast
operator|<
specifier|const
name|_Sequence
operator|*
operator|>
operator|(
name|_M_sequence
operator|)
operator|->
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Is this iterator equal to the sequence's end() iterator?
end_comment

begin_expr_stmt
name|bool
name|_M_is_end
argument_list|()
specifier|const
block|{
return|return
operator|*
name|this
operator|==
name|static_cast
operator|<
specifier|const
name|_Sequence
operator|*
operator|>
operator|(
name|_M_sequence
operator|)
operator|->
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_IteratorL
operator|,
name|typename
name|_IteratorR
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorL
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorR
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_compare_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_compare_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|==
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_compare_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_compare_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|==
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_IteratorL
operator|,
name|typename
name|_IteratorR
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorL
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorR
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_compare_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_compare_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|!=
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_compare_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_compare_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|!=
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_IteratorL
operator|,
name|typename
name|_IteratorR
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorL
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorR
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_order_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_order_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|<
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_order_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_order_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|<
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_IteratorL
operator|,
name|typename
name|_IteratorR
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorL
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorR
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_order_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_order_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|<=
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_order_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_order_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|<=
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_IteratorL
operator|,
name|typename
name|_IteratorR
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorL
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorR
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_order_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_order_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|>
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_order_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_order_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|>
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_IteratorL
operator|,
name|typename
name|_IteratorR
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorL
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorR
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_order_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_order_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|>=
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_iter_order_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_order_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|>=
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|// _GLIBCXX_RESOLVE_LIB_DEFECTS
end_comment

begin_comment
comment|// According to the resolution of DR179 not only the various comparison
end_comment

begin_comment
comment|// operators but also operator- must accept mixed iterator/const_iterator
end_comment

begin_comment
comment|// parameters.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_IteratorL
operator|,
name|typename
name|_IteratorR
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|typename
name|_Safe_iterator
operator|<
name|_IteratorL
operator|,
name|_Sequence
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorL
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_IteratorR
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_distance_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_distance_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|-
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|typename
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__lhs
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__rhs
operator|)
block|{
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
operator|!
name|__lhs
operator|.
name|_M_singular
argument_list|()
operator|&&
operator|!
name|__rhs
operator|.
name|_M_singular
argument_list|()
argument_list|,
name|_M_message
argument_list|(
name|__msg_distance_bad
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
name|_GLIBCXX_DEBUG_VERIFY
argument_list|(
name|__lhs
operator|.
name|_M_can_compare
argument_list|(
name|__rhs
argument_list|)
argument_list|,
name|_M_message
argument_list|(
name|__msg_distance_different
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__lhs
argument_list|,
literal|"lhs"
argument_list|)
operator|.
name|_M_iterator
argument_list|(
name|__rhs
argument_list|,
literal|"rhs"
argument_list|)
argument_list|)
block|;
return|return
name|__lhs
operator|.
name|base
argument_list|()
operator|-
name|__rhs
operator|.
name|base
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Iterator
operator|,
name|typename
name|_Sequence
operator|>
specifier|inline
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
name|operator
operator|+
operator|(
name|typename
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|::
name|difference_type
name|__n
operator|,
specifier|const
name|_Safe_iterator
operator|<
name|_Iterator
operator|,
name|_Sequence
operator|>
operator|&
name|__i
operator|)
block|{
return|return
name|__i
operator|+
name|__n
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// namespace __gnu_debug
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GLIBCXX_EXPORT_TEMPLATE
end_ifndef

begin_include
include|#
directive|include
file|<debug/safe_iterator.tcc>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

