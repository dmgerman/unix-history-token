begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Vector implementation -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2001, 2002 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this  software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/** @file stl_vector.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GLIBCPP_INTERNAL_VECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|__GLIBCPP_INTERNAL_VECTOR_H
end_define

begin_include
include|#
directive|include
file|<bits/stl_iterator_base_funcs.h>
end_include

begin_include
include|#
directive|include
file|<bits/functexcept.h>
end_include

begin_include
include|#
directive|include
file|<bits/concept_check.h>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
comment|// The vector base class serves two purposes.  First, its constructor
comment|// and destructor allocate (but don't initialize) storage.  This makes
comment|// exception safety easier.  Second, the base class encapsulates all of
comment|// the differences between SGI-style allocators and standard-conforming
comment|// allocators.
comment|// Base class for ordinary allocators.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Allocator
operator|,
name|bool
name|_IsStatic
operator|>
name|class
name|_Vector_alloc_base
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_M_data_allocator
return|;
block|}
name|_Vector_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_M_data_allocator
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_start
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_finish
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
name|protected
operator|:
name|allocator_type
name|_M_data_allocator
expr_stmt|;
name|_Tp
modifier|*
name|_M_start
decl_stmt|;
name|_Tp
modifier|*
name|_M_finish
decl_stmt|;
name|_Tp
modifier|*
name|_M_end_of_storage
decl_stmt|;
name|_Tp
modifier|*
name|_M_allocate
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|_M_data_allocator
operator|.
name|allocate
argument_list|(
name|__n
argument_list|)
return|;
block|}
name|void
name|_M_deallocate
parameter_list|(
name|_Tp
modifier|*
name|__p
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
if|if
condition|(
name|__p
condition|)
name|_M_data_allocator
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__n
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Specialization for allocators that have the property that we don't
end_comment

begin_comment
comment|// actually have to store an allocator object.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Allocator
operator|>
name|class
name|_Vector_alloc_base
operator|<
name|_Tp
operator|,
name|_Allocator
operator|,
name|true
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|()
return|;
block|}
name|_Vector_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
argument_list|)
operator|:
name|_M_start
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_finish
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
name|protected
operator|:
name|_Tp
operator|*
name|_M_start
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_Tp
modifier|*
name|_M_finish
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Tp
modifier|*
name|_M_end_of_storage
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Allocator
operator|>
operator|::
name|_Alloc_type
name|_Alloc_type
expr_stmt|;
end_typedef

begin_function
name|_Tp
modifier|*
name|_M_allocate
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|_Alloc_type
operator|::
name|allocate
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate
parameter_list|(
name|_Tp
modifier|*
name|__p
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
name|_Alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__n
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
expr|struct
name|_Vector_base
operator|:
name|public
name|_Vector_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
block|{
typedef|typedef
name|_Vector_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_Vector_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{}
name|_Vector_base
argument_list|(
argument|size_t __n
argument_list|,
argument|const allocator_type& __a
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
name|_M_start
operator|=
name|_M_allocate
argument_list|(
name|__n
argument_list|)
block|;
name|_M_finish
operator|=
name|_M_start
block|;
name|_M_end_of_storage
operator|=
name|_M_start
operator|+
name|__n
block|;   }
operator|~
name|_Vector_base
argument_list|()
block|{
name|_M_deallocate
argument_list|(
name|_M_start
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
argument_list|)
block|; }
end_expr_stmt

begin_comment
unit|};
comment|/**  *  @brief  A standard container which offers fixed time access to individual  *  elements in any order.  *  *  @ingroup Containers  *  @ingroup Sequences  *  *  Meets the requirements of a<a href="tables.html#65">container</a>, a  *<a href="tables.html#66">reversible container</a>, and a  *<a href="tables.html#67">sequence</a>, including the  *<a href="tables.html#68">optional sequence requirements</a> with the  *  %exception of @c push_front and @c pop_front.  *  *  In some terminology a vector can be described as a dynamic C-style array,  *  it offers fast and efficient access to individual elements in any order  *  and saves the user from worrying about memory and size allocation.  *  Subscripting ( [] ) access is also provided as with C-style arrays. */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|=
name|allocator
operator|<
name|_Tp
operator|>
expr|>
name|class
name|vector
operator|:
name|protected
name|_Vector_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
block|{
comment|// concept requirements
name|__glibcpp_class_requires
argument_list|(
argument|_Tp
argument_list|,
argument|_SGIAssignableConcept
argument_list|)
name|private
operator|:
typedef|typedef
name|_Vector_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|vector_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|__gnu_cxx
operator|::
name|__normal_iterator
operator|<
name|pointer
operator|,
name|vector_type
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|__gnu_cxx
operator|::
name|__normal_iterator
operator|<
name|const_pointer
operator|,
name|vector_type
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_Base
operator|::
name|get_allocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_allocate
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_deallocate
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_start
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_finish
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_end_of_storage
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function_decl
name|void
name|_M_insert_aux
parameter_list|(
name|iterator
name|__position
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_insert_aux
parameter_list|(
name|iterator
name|__position
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|public
label|:
end_label

begin_comment
comment|/**    *  Returns a read/write iterator that points to the first element in the    *  vector.  Iteration is done in ordinary element order.   */
end_comment

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|_M_start
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    *  Returns a read-only (constant) iterator that points to the first element    *  in the vector.  Iteration is done in ordinary element order.   */
end_comment

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|_M_start
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  Returns a read/write iterator that points one past the last element in    *  the vector.  Iteration is done in ordinary element order.   */
end_comment

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|_M_finish
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    *  Returns a read-only (constant) iterator that points one past the last    *  element in the vector.  Iteration is done in ordinary element order.   */
end_comment

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|_M_finish
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  Returns a read/write reverse iterator that points to the last element in    *  the vector.  Iteration is done in reverse element order.   */
end_comment

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    *  Returns a read-only (constant) reverse iterator that points to the last    *  element in the vector.  Iteration is done in reverse element order.   */
end_comment

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  Returns a read/write reverse iterator that points to one before the    *  first element in the vector.  Iteration is done in reverse element    *  order.   */
end_comment

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    *  Returns a read-only (constant) reverse iterator that points to one    *  before the first element in the vector.  Iteration is done in reverse    *  element order.   */
end_comment

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**  Returns the number of elements in the vector.  */
end_comment

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|end
argument_list|()
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**  Returns the size of the largest possible vector.  */
end_comment

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  Returns the amount of memory that has been alocated for the current    *  elements (?).   */
end_comment

begin_expr_stmt
name|size_type
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|const_iterator
argument_list|(
name|_M_end_of_storage
argument_list|)
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  Returns true if the vector is empty.  (Thus begin() would equal end().)   */
end_comment

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|==
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  @brief  Subscript access to the data contained in the vector.    *  @param  n  The element for which data should be accessed.    *  @return  Read/write reference to data.    *    *  This operator allows for easy, array-style, data access.    *  Note that data access with this operator is unchecked and out_of_range    *  lookups are not defined. (For checked lookups see at().)   */
end_comment

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|__n
operator|)
return|;
block|}
end_function

begin_comment
comment|/**    *  @brief  Subscript access to the data contained in the vector.    *  @param  n  The element for which data should be accessed.    *  @return  Read-only (constant) reference to data.    *    *  This operator allows for easy, array-style, data access.    *  Note that data access with this operator is unchecked and out_of_range    *  lookups are not defined. (For checked lookups see at().)   */
end_comment

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|__n
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|_M_range_check
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
if|if
condition|(
name|__n
operator|>=
name|this
operator|->
name|size
argument_list|()
condition|)
name|__throw_out_of_range
argument_list|(
literal|"vector"
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/**    *  @brief  Provides access to the data contained in the vector.    *  @param  n  The element for which data should be accessed.    *  @return  Read/write reference to data.    *    *  This function provides for safer data access.  The parameter is first    *  checked that it is in the range of the vector.  The function throws    *  out_of_range if the check fails.   */
end_comment

begin_function
name|reference
name|at
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|_M_range_check
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|__n
index|]
return|;
block|}
end_function

begin_comment
comment|/**    *  @brief  Provides access to the data contained in the vector.    *  @param  n  The element for which data should be accessed.    *  @return  Read-only (constant) reference to data.    *    *  This function provides for safer data access.  The parameter is first    *  checked that it is in the range of the vector.  The function throws    *  out_of_range if the check fails.   */
end_comment

begin_decl_stmt
name|const_reference
name|at
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
name|_M_range_check
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|__n
index|]
return|;
block|}
end_decl_stmt

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|vector
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{}
name|vector
argument_list|(
argument|size_type __n
argument_list|,
argument|const _Tp& __value
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__n
argument_list|,
argument|__a
argument_list|)
block|{
name|_M_finish
operator|=
name|uninitialized_fill_n
argument_list|(
name|_M_start
argument_list|,
name|__n
argument_list|,
name|__value
argument_list|)
block|; }
name|explicit
name|vector
argument_list|(
argument|size_type __n
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__n
argument_list|,
argument|allocator_type()
argument_list|)
block|{
name|_M_finish
operator|=
name|uninitialized_fill_n
argument_list|(
name|_M_start
argument_list|,
name|__n
argument_list|,
name|_Tp
argument_list|()
argument_list|)
block|; }
name|vector
argument_list|(
specifier|const
name|vector
operator|<
name|_Tp
argument_list|,
name|_Alloc
operator|>
operator|&
name|__x
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__x.size()
argument_list|,
argument|__x.get_allocator()
argument_list|)
block|{
name|_M_finish
operator|=
name|uninitialized_copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|_M_start
argument_list|)
block|; }
comment|// Check whether it's an integral type.  If so, it's not an iterator.
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|vector
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_initialize_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_initialize_aux
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __value
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_start
operator|=
name|_M_allocate
argument_list|(
name|__n
argument_list|)
block|;
name|_M_end_of_storage
operator|=
name|_M_start
operator|+
name|__n
block|;
name|_M_finish
operator|=
name|uninitialized_fill_n
argument_list|(
name|_M_start
argument_list|,
name|__n
argument_list|,
name|__value
argument_list|)
block|;     }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_initialize_aux
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|_M_range_initialize
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    ~
name|vector
argument_list|()
end_macro

begin_block
block|{
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**    *  @brief  Attempt to preallocate enough memory for specified number of    *          elements.    *  @param  n  Number of elements required    *    *  This function attempts to reserve enough memory for the vector to hold    *  the specified number of elements.  If the number requested is more than    *  max_size() length_error is thrown.    *    *  The advantage of this function is that if optimal code is a necessity    *  and the user can determine the number of elements that will be required    *  the user can reserve the memory and thus prevent a possible    *  reallocation of memory and copy of vector data.   */
end_comment

begin_function
name|void
name|reserve
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
if|if
condition|(
name|__n
operator|>
name|this
operator|->
name|max_size
argument_list|()
condition|)
name|__throw_length_error
argument_list|(
literal|"vector::reserve"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|->
name|capacity
argument_list|()
operator|<
name|__n
condition|)
block|{
specifier|const
name|size_type
name|__old_size
init|=
name|size
argument_list|()
decl_stmt|;
name|pointer
name|__tmp
init|=
name|_M_allocate_and_copy
argument_list|(
name|__n
argument_list|,
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
decl_stmt|;
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|_M_start
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__tmp
expr_stmt|;
name|_M_finish
operator|=
name|__tmp
operator|+
name|__old_size
expr_stmt|;
name|_M_end_of_storage
operator|=
name|_M_start
operator|+
name|__n
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// assign(), a generalized assignment member function.  Two
end_comment

begin_comment
comment|// versions: one that takes a count, and one that takes a range.
end_comment

begin_comment
comment|// The range version is a member template, so we dispatch on whether
end_comment

begin_comment
comment|// or not the type is an integer.
end_comment

begin_comment
comment|/**    *  @brief  Assigns a given value or range to a vector.    *  @param  n  Number of elements to be assigned.    *  @param  val  Value to be assigned.    *    *  This function can be used to assign a range to a vector or fill it    *  with a specified number of copies of the given value.    *  Note that the assignment completely changes the vector and that the    *  resulting vector's size is the same as the number of elements assigned.    *  Old data may be lost.   */
end_comment

begin_function
name|void
name|assign
parameter_list|(
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__val
parameter_list|)
block|{
name|_M_fill_assign
argument_list|(
name|__n
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|_M_fill_assign
parameter_list|(
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__val
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|assign
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_assign_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __val
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_assign
argument_list|(
operator|(
name|size_type
operator|)
name|__n
argument_list|,
operator|(
name|_Tp
operator|)
name|__val
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIter
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_InputIter
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|_M_assign_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**    *  Returns a read/write reference to the data at the first element of the    *  vector.   */
end_comment

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**    *  Returns a read-only (constant) reference to the data at the first    *  element of the vector.   */
end_comment

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  Returns a read/write reference to the data at the last element of the    *  vector.   */
end_comment

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_comment
comment|/**    *  Returns a read-only (constant) reference to the data at the first    *  element of the vector.   */
end_comment

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  @brief  Add data to the end of the vector.    *  @param  x  Data to be added.    *    *  This is a typical stack operation.  The function creates an element at    *  the end of the vector and assigns the given data to it.    *  Due to the nature of a vector this operation can be done in constant    *  time if the vector has preallocated space available.   */
end_comment

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
block|{
if|if
condition|(
name|_M_finish
operator|!=
name|_M_end_of_storage
condition|)
block|{
name|_Construct
argument_list|(
name|_M_finish
argument_list|,
name|__x
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
expr_stmt|;
block|}
else|else
name|_M_insert_aux
argument_list|(
name|end
argument_list|()
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCPP_DEPRECATED
end_ifdef

begin_comment
comment|/**    *  Add an element to the end of the vector.  The element is    *  default-constructed.    *    *  @note You must define _GLIBCPP_DEPRECATED to make this visible; see    *        c++config.h.   */
end_comment

begin_function
name|void
name|push_back
parameter_list|()
block|{
if|if
condition|(
name|_M_finish
operator|!=
name|_M_end_of_storage
condition|)
block|{
name|_Construct
argument_list|(
name|_M_finish
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
expr_stmt|;
block|}
else|else
name|_M_insert_aux
argument_list|(
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|swap
argument_list|(
name|vector
operator|<
name|_Tp
argument_list|,
name|_Alloc
operator|>
operator|&
name|__x
argument_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|_M_start
argument_list|,
name|__x
operator|.
name|_M_start
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_finish
argument_list|,
name|__x
operator|.
name|_M_finish
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_end_of_storage
argument_list|,
name|__x
operator|.
name|_M_end_of_storage
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|/**    *  @brief  Inserts given value into vector at specified element.    *  @param  position  An iterator that points to the element where data    *                    should be inserted.    *  @param  x  Data to be inserted.    *  @return  An iterator that points to the inserted data.    *    *  This function will insert the given value into the specified location.    *  Note that this kind of operation could be expensive for a vector and if    *  it is frequently used the user should consider using std::list.   */
end_comment

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
block|{
name|size_type
name|__n
init|=
name|__position
operator|-
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|_M_finish
operator|!=
name|_M_end_of_storage
operator|&&
name|__position
operator|==
name|end
argument_list|()
condition|)
block|{
name|_Construct
argument_list|(
name|_M_finish
argument_list|,
name|__x
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
expr_stmt|;
block|}
else|else
name|_M_insert_aux
argument_list|(
name|iterator
argument_list|(
name|__position
argument_list|)
argument_list|,
name|__x
argument_list|)
expr_stmt|;
return|return
name|begin
argument_list|()
operator|+
name|__n
return|;
block|}
end_function

begin_comment
comment|/**    *  @brief  Inserts an empty element into the vector.    *  @param  position  An iterator that points to the element where empty    *                    element should be inserted.    *  @param  x  Data to be inserted.    *  @return  An iterator that points to the inserted element.    *    *  This function will insert an empty element into the specified location.    *  Note that this kind of operation could be expensive for a vector and if    *  it is frequently used the user should consider using std::list.   */
end_comment

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|)
block|{
name|size_type
name|__n
init|=
name|__position
operator|-
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|_M_finish
operator|!=
name|_M_end_of_storage
operator|&&
name|__position
operator|==
name|end
argument_list|()
condition|)
block|{
name|_Construct
argument_list|(
name|_M_finish
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
expr_stmt|;
block|}
else|else
name|_M_insert_aux
argument_list|(
name|iterator
argument_list|(
name|__position
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|begin
argument_list|()
operator|+
name|__n
return|;
block|}
end_function

begin_comment
comment|// Check whether it's an integral type.  If so, it's not an iterator.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_insert_dispatch
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_Integer __n
argument_list|,
argument|_Integer __val
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_insert
argument_list|(
name|__pos
argument_list|,
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__n
operator|)
argument_list|,
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
name|__val
operator|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|_M_range_insert
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**    *  @brief  Inserts a number of copies of given data into the vector.    *  @param  position  An iterator that points to the element where data    *                    should be inserted.    *  @param  n  Amount of elements to be inserted.    *  @param  x  Data to be inserted.    *    *  This function will insert a specified number of copies of the given data    *  into the specified location.    *    *  Note that this kind of operation could be expensive for a vector and if    *  it is frequently used the user should consider using std::list.   */
end_comment

begin_macro
unit|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|size_type __n
argument_list|,
argument|const _Tp& __x
argument_list|)
end_macro

begin_block
block|{
name|_M_fill_insert
argument_list|(
name|__pos
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_block

begin_function_decl
name|void
name|_M_fill_insert
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**    *  @brief  Removes last element from vector.    *    *  This is a typical stack operation. It allows us to shrink the vector by    *  one.    *    *  Note that no data is returned and if last element's data is needed it    *  should be retrieved before pop_back() is called.   */
end_comment

begin_function
name|void
name|pop_back
parameter_list|()
block|{
operator|--
name|_M_finish
expr_stmt|;
name|_Destroy
argument_list|(
name|_M_finish
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    *  @brief  Remove element at given position    *  @param  position  Iterator pointing to element to be erased.    *  @return  Doc Me! (Iterator pointing to new element at old location?)    *    *  This function will erase the element at the given position and thus    *  shorten the vector by one.    *    *  Note This operation could be expensive and if it is frequently used the    *  user should consider using std::list.  The user is also cautioned that    *  this function only erases the element, and that if the element is itself    *  a pointer, the pointed-to memory is not touched in any way.  Managing    *  the pointer is the user's responsibilty.   */
end_comment

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__position
parameter_list|)
block|{
if|if
condition|(
name|__position
operator|+
literal|1
operator|!=
name|end
argument_list|()
condition|)
name|copy
argument_list|(
name|__position
operator|+
literal|1
argument_list|,
name|end
argument_list|()
argument_list|,
name|__position
argument_list|)
expr_stmt|;
operator|--
name|_M_finish
expr_stmt|;
name|_Destroy
argument_list|(
name|_M_finish
argument_list|)
expr_stmt|;
return|return
name|__position
return|;
block|}
end_function

begin_comment
comment|/**    *  @brief  Remove a range of elements from a vector.    *  @param  first  Iterator pointing to the first element to be erased.    *  @param  last  Iterator pointing to the last element to be erased.    *  @return  Doc Me! (Iterator pointing to new element at old location?)    *    *  This function will erase the elements in the given range and shorten the    *  vector accordingly.    *    *  Note This operation could be expensive and if it is frequently used the    *  user should consider using std::list.  The user is also cautioned that    *  this function only erases the elements, and that if the elements    *  themselves are pointers, the pointed-to memory is not touched in any    *  way.  Managing the pointer is the user's responsibilty.   */
end_comment

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
block|{
name|iterator
name|__i
argument_list|(
name|copy
argument_list|(
name|__last
argument_list|,
name|end
argument_list|()
argument_list|,
name|__first
argument_list|)
argument_list|)
decl_stmt|;
name|_Destroy
argument_list|(
name|__i
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|_M_finish
operator|-
operator|(
name|__last
operator|-
name|__first
operator|)
expr_stmt|;
return|return
name|__first
return|;
block|}
end_function

begin_comment
comment|/**    *  @brief  Resizes the vector to the specified number of elements.    *  @param  new_size  Number of elements the vector should contain.    *  @param  x  Data with which new elements should be populated.    *    *  This function will resize the vector to the specified number of    *  elements.  If the number is smaller than the vector's current size the    *  vector is truncated, otherwise the vector is extended and new elements    *  are populated with given data.   */
end_comment

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|__new_size
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
block|{
if|if
condition|(
name|__new_size
operator|<
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|__new_size
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__new_size
operator|-
name|size
argument_list|()
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    *  @brief  Resizes the vector to the specified number of elements.    *  @param  new_size  Number of elements the vector should contain.    *    *  This function will resize the vector to the specified number of    *  elements.  If the number is smaller than the vector's current size the    *  vector is truncated, otherwise the vector is extended and new elements    *  are left uninitialized.   */
end_comment

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|__new_size
parameter_list|)
block|{
name|resize
argument_list|(
name|__new_size
argument_list|,
name|_Tp
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    *  Erases all elements in vector.  Note that this function only erases the    *  elements, and that if the elements themselves are pointers, the    *  pointed-to memory is not touched in any way.  Managing the pointer is    *  the user's responsibilty.   */
end_comment

begin_function
name|void
name|clear
parameter_list|()
block|{
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|pointer
name|_M_allocate_and_copy
argument_list|(
argument|size_type __n
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|)
block|{
name|pointer
name|__result
operator|=
name|_M_allocate
argument_list|(
name|__n
argument_list|)
block|;
name|try
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__result
argument_list|)
block|;
return|return
name|__result
return|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_deallocate
argument_list|(
name|__result
argument_list|,
name|__n
argument_list|)
block|;
name|__throw_exception_again
block|;       }
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_range_initialize
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
name|push_back
argument_list|(
operator|*
name|__first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
comment|// This function is only called by the constructor.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_range_initialize
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__n
operator|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
name|_M_start
operator|=
name|_M_allocate
argument_list|(
name|__n
argument_list|)
block|;
name|_M_end_of_storage
operator|=
name|_M_start
operator|+
name|__n
block|;
name|_M_finish
operator|=
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_start
argument_list|)
block|;   }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_range_insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_range_insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|size
argument_list|()
operator|==
name|__y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|,
name|__y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|vector<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|vector<_Tp
argument_list|,
argument|_Alloc>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|==
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|<
name|__x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__y
operator|<
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|<
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|)
block|{
if|if
condition|(
operator|&
name|__x
operator|!=
name|this
condition|)
block|{
specifier|const
name|size_type
name|__xlen
init|=
name|__x
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|__xlen
operator|>
name|capacity
argument_list|()
condition|)
block|{
name|pointer
name|__tmp
init|=
name|_M_allocate_and_copy
argument_list|(
name|__xlen
argument_list|,
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|)
decl_stmt|;
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|_M_start
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__tmp
expr_stmt|;
name|_M_end_of_storage
operator|=
name|_M_start
operator|+
name|__xlen
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|size
argument_list|()
operator|>=
name|__xlen
condition|)
block|{
name|iterator
name|__i
argument_list|(
name|copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|begin
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|_Destroy
argument_list|(
name|__i
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
name|copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|_M_start
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|_M_finish
operator|=
name|_M_start
operator|+
name|__xlen
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   return
operator|*
name|this
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_fill_assign
argument_list|(
argument|size_t __n
argument_list|,
argument|const value_type& __val
argument_list|)
block|{
if|if
condition|(
name|__n
operator|>
name|capacity
argument_list|()
condition|)
block|{
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|__tmp
argument_list|(
name|__n
argument_list|,
name|__val
argument_list|,
name|get_allocator
argument_list|()
argument_list|)
expr_stmt|;
name|__tmp
operator|.
name|swap
argument_list|(
operator|*
name|this
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__n
operator|>
name|size
argument_list|()
condition|)
block|{
name|fill
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|uninitialized_fill_n
argument_list|(
name|_M_finish
argument_list|,
name|__n
operator|-
name|size
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
end_elseif

begin_else
else|else
name|erase
argument_list|(
name|fill_n
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__n
argument_list|,
name|__val
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_InputIter
operator|>
name|void
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_assign_aux
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|iterator
name|__cur
argument_list|(
name|begin
argument_list|()
argument_list|)
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
operator|&&
name|__cur
operator|!=
name|end
argument_list|()
condition|;
operator|++
name|__cur
operator|,
operator|++
name|__first
control|)
operator|*
name|__cur
operator|=
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
name|erase
argument_list|(
name|__cur
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_ForwardIter
operator|>
name|void
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_assign_aux
argument_list|(
argument|_ForwardIter __first
argument_list|,
argument|_ForwardIter __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__len
operator|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|__len
operator|>
name|capacity
argument_list|()
condition|)
block|{
name|pointer
name|__tmp
argument_list|(
name|_M_allocate_and_copy
argument_list|(
name|__len
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
argument_list|)
decl_stmt|;
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|_M_start
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__tmp
expr_stmt|;
name|_M_end_of_storage
operator|=
name|_M_finish
operator|=
name|_M_start
operator|+
name|__len
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|size
argument_list|()
operator|>=
name|__len
condition|)
block|{
name|iterator
name|__new_finish
argument_list|(
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_start
argument_list|)
argument_list|)
decl_stmt|;
name|_Destroy
argument_list|(
name|__new_finish
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
operator|.
name|base
argument_list|()
expr_stmt|;
block|}
end_elseif

begin_else
else|else
block|{
name|_ForwardIter
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|_M_start
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|uninitialized_copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __position
argument_list|,
argument|const _Tp& __x
argument_list|)
block|{
if|if
condition|(
name|_M_finish
operator|!=
name|_M_end_of_storage
condition|)
block|{
name|_Construct
argument_list|(
name|_M_finish
argument_list|,
operator|*
operator|(
name|_M_finish
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
expr_stmt|;
name|_Tp
name|__x_copy
init|=
name|__x
decl_stmt|;
name|copy_backward
argument_list|(
name|__position
argument_list|,
name|iterator
argument_list|(
name|_M_finish
operator|-
literal|2
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|_M_finish
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|__position
operator|=
name|__x_copy
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
specifier|const
name|size_type
name|__old_size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|const
name|size_type
name|__len
init|=
name|__old_size
operator|!=
literal|0
condition|?
literal|2
operator|*
name|__old_size
else|:
literal|1
decl_stmt|;
name|iterator
name|__new_start
argument_list|(
name|_M_allocate
argument_list|(
name|__len
argument_list|)
argument_list|)
decl_stmt|;
name|iterator
name|__new_finish
parameter_list|(
name|__new_start
parameter_list|)
function_decl|;
name|try
block|{
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|iterator
argument_list|(
name|_M_start
argument_list|)
argument_list|,
name|__position
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_Construct
argument_list|(
name|__new_finish
operator|.
name|base
argument_list|()
argument_list|,
name|__x
argument_list|)
expr_stmt|;
operator|++
name|__new_finish
expr_stmt|;
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|__position
argument_list|,
name|iterator
argument_list|(
name|_M_finish
argument_list|)
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_Destroy
argument_list|(
name|__new_start
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|__new_start
operator|.
name|base
argument_list|()
argument_list|,
name|__len
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
name|_Destroy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|_M_start
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
operator|.
name|base
argument_list|()
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
operator|.
name|base
argument_list|()
expr_stmt|;
name|_M_end_of_storage
operator|=
name|__new_start
operator|.
name|base
argument_list|()
operator|+
name|__len
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __position
argument_list|)
block|{
if|if
condition|(
name|_M_finish
operator|!=
name|_M_end_of_storage
condition|)
block|{
name|_Construct
argument_list|(
name|_M_finish
argument_list|,
operator|*
operator|(
name|_M_finish
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|__position
argument_list|,
name|iterator
argument_list|(
name|_M_finish
operator|-
literal|2
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|_M_finish
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|__position
operator|=
name|_Tp
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
specifier|const
name|size_type
name|__old_size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|const
name|size_type
name|__len
init|=
name|__old_size
operator|!=
literal|0
condition|?
literal|2
operator|*
name|__old_size
else|:
literal|1
decl_stmt|;
name|pointer
name|__new_start
init|=
name|_M_allocate
argument_list|(
name|__len
argument_list|)
decl_stmt|;
name|pointer
name|__new_finish
init|=
name|__new_start
decl_stmt|;
name|try
block|{
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|iterator
argument_list|(
name|_M_start
argument_list|)
argument_list|,
name|__position
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_Construct
argument_list|(
name|__new_finish
argument_list|)
expr_stmt|;
operator|++
name|__new_finish
expr_stmt|;
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|__position
argument_list|,
name|iterator
argument_list|(
name|_M_finish
argument_list|)
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_Destroy
argument_list|(
name|__new_start
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|__new_start
argument_list|,
name|__len
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
name|_Destroy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|_M_start
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|_M_end_of_storage
operator|=
name|__new_start
operator|+
name|__len
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_fill_insert
argument_list|(
argument|iterator __position
argument_list|,
argument|size_type __n
argument_list|,
argument|const _Tp& __x
argument_list|)
block|{
if|if
condition|(
name|__n
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|size_type
argument_list|(
name|_M_end_of_storage
operator|-
name|_M_finish
argument_list|)
operator|>=
name|__n
condition|)
block|{
name|_Tp
name|__x_copy
init|=
name|__x
decl_stmt|;
specifier|const
name|size_type
name|__elems_after
init|=
name|end
argument_list|()
operator|-
name|__position
decl_stmt|;
name|iterator
name|__old_finish
parameter_list|(
name|_M_finish
parameter_list|)
function_decl|;
if|if
condition|(
name|__elems_after
operator|>
name|__n
condition|)
block|{
name|uninitialized_copy
argument_list|(
name|_M_finish
operator|-
name|__n
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|+=
name|__n
expr_stmt|;
name|copy_backward
argument_list|(
name|__position
argument_list|,
name|__old_finish
operator|-
name|__n
argument_list|,
name|__old_finish
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|__position
argument_list|,
name|__position
operator|+
name|__n
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|uninitialized_fill_n
argument_list|(
name|_M_finish
argument_list|,
name|__n
operator|-
name|__elems_after
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
name|_M_finish
operator|+=
name|__n
operator|-
name|__elems_after
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|__position
argument_list|,
name|__old_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|+=
name|__elems_after
expr_stmt|;
name|fill
argument_list|(
name|__position
argument_list|,
name|__old_finish
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
end_else

begin_block
unit|}     else
block|{
specifier|const
name|size_type
name|__old_size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|const
name|size_type
name|__len
init|=
name|__old_size
operator|+
name|max
argument_list|(
name|__old_size
argument_list|,
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__new_start
argument_list|(
name|_M_allocate
argument_list|(
name|__len
argument_list|)
argument_list|)
decl_stmt|;
name|iterator
name|__new_finish
parameter_list|(
name|__new_start
parameter_list|)
function_decl|;
name|try
block|{
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__position
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|__new_finish
operator|=
name|uninitialized_fill_n
argument_list|(
name|__new_finish
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|__position
argument_list|,
name|end
argument_list|()
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_Destroy
argument_list|(
name|__new_start
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|__new_start
operator|.
name|base
argument_list|()
argument_list|,
name|__len
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|_M_start
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
operator|.
name|base
argument_list|()
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
operator|.
name|base
argument_list|()
expr_stmt|;
name|_M_end_of_storage
operator|=
name|__new_start
operator|.
name|base
argument_list|()
operator|+
name|__len
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_range_insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
block|{
name|__pos
operator|=
name|insert
argument_list|(
name|__pos
argument_list|,
operator|*
name|__first
argument_list|)
expr_stmt|;
operator|++
name|__pos
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|vector
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_range_insert
argument_list|(
argument|iterator __position
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|size_type
name|__n
init|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
decl_stmt|;
if|if
condition|(
name|size_type
argument_list|(
name|_M_end_of_storage
operator|-
name|_M_finish
argument_list|)
operator|>=
name|__n
condition|)
block|{
specifier|const
name|size_type
name|__elems_after
init|=
name|end
argument_list|()
operator|-
name|__position
decl_stmt|;
name|iterator
name|__old_finish
parameter_list|(
name|_M_finish
parameter_list|)
function_decl|;
if|if
condition|(
name|__elems_after
operator|>
name|__n
condition|)
block|{
name|uninitialized_copy
argument_list|(
name|_M_finish
operator|-
name|__n
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|+=
name|__n
expr_stmt|;
name|copy_backward
argument_list|(
name|__position
argument_list|,
name|__old_finish
operator|-
name|__n
argument_list|,
name|__old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__position
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|__elems_after
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|+=
name|__n
operator|-
name|__elems_after
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|__position
argument_list|,
name|__old_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|+=
name|__elems_after
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|__position
argument_list|)
expr_stmt|;
block|}
end_else

begin_block
unit|}     else
block|{
specifier|const
name|size_type
name|__old_size
init|=
name|size
argument_list|()
decl_stmt|;
specifier|const
name|size_type
name|__len
init|=
name|__old_size
operator|+
name|max
argument_list|(
name|__old_size
argument_list|,
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__new_start
argument_list|(
name|_M_allocate
argument_list|(
name|__len
argument_list|)
argument_list|)
decl_stmt|;
name|iterator
name|__new_finish
parameter_list|(
name|__new_start
parameter_list|)
function_decl|;
name|try
block|{
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|iterator
argument_list|(
name|_M_start
argument_list|)
argument_list|,
name|__position
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
name|__new_finish
operator|=
name|uninitialized_copy
argument_list|(
name|__position
argument_list|,
name|iterator
argument_list|(
name|_M_finish
argument_list|)
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_Destroy
argument_list|(
name|__new_start
argument_list|,
name|__new_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|__new_start
operator|.
name|base
argument_list|()
argument_list|,
name|__len
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|(
name|_M_start
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
operator|.
name|base
argument_list|()
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
operator|.
name|base
argument_list|()
expr_stmt|;
name|_M_end_of_storage
operator|=
name|__new_start
operator|.
name|base
argument_list|()
operator|+
name|__len
expr_stmt|;
block|}
end_block

begin_comment
unit|} }  }
comment|// namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GLIBCPP_INTERNAL_VECTOR_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

