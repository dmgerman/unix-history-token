begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// List implementation -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2001, 2002 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/** @file stl_list.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GLIBCPP_INTERNAL_LIST_H
end_ifndef

begin_define
define|#
directive|define
name|__GLIBCPP_INTERNAL_LIST_H
end_define

begin_include
include|#
directive|include
file|<bits/concept_check.h>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
struct|struct
name|_List_node_base
block|{
name|_List_node_base
modifier|*
name|_M_next
decl_stmt|;
name|_List_node_base
modifier|*
name|_M_prev
decl_stmt|;
block|}
struct|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_List_node
operator|:
name|public
name|_List_node_base
block|{
name|_Tp
name|_M_data
block|;     }
expr_stmt|;
struct|struct
name|_List_iterator_base
block|{
typedef|typedef
name|size_t
name|size_type
typedef|;
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
name|bidirectional_iterator_tag
name|iterator_category
typedef|;
name|_List_node_base
modifier|*
name|_M_node
decl_stmt|;
name|_List_iterator_base
argument_list|(
name|_List_node_base
operator|*
name|__x
argument_list|)
operator|:
name|_M_node
argument_list|(
argument|__x
argument_list|)
block|{ }
name|_List_iterator_base
argument_list|()
block|{ }
name|void
name|_M_incr
argument_list|()
block|{
name|_M_node
operator|=
name|_M_node
operator|->
name|_M_next
block|; }
name|void
name|_M_decr
argument_list|()
block|{
name|_M_node
operator|=
name|_M_node
operator|->
name|_M_prev
block|; }
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_List_iterator_base
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_node
operator|==
name|__x
operator|.
name|_M_node
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_List_iterator_base
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_node
operator|!=
name|__x
operator|.
name|_M_node
return|;
block|}
block|}
struct|;
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
expr|struct
name|_List_iterator
operator|:
name|public
name|_List_iterator_base
block|{
typedef|typedef
name|_List_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
typedef|typedef
name|_List_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
typedef|typedef
name|_List_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
name|_Self
expr_stmt|;
typedef|typedef
name|_Tp
name|value_type
typedef|;
typedef|typedef
name|_Ptr
name|pointer
typedef|;
typedef|typedef
name|_Ref
name|reference
typedef|;
typedef|typedef
name|_List_node
operator|<
name|_Tp
operator|>
name|_Node
expr_stmt|;
name|_List_iterator
argument_list|(
name|_Node
operator|*
name|__x
argument_list|)
operator|:
name|_List_iterator_base
argument_list|(
argument|__x
argument_list|)
block|{ }
name|_List_iterator
argument_list|()
block|{ }
name|_List_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|__x
argument_list|)
operator|:
name|_List_iterator_base
argument_list|(
argument|__x._M_node
argument_list|)
block|{ }
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|(
operator|(
name|_Node
operator|*
operator|)
name|_M_node
operator|)
operator|->
name|_M_data
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|this
operator|->
name|_M_incr
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
name|this
operator|->
name|_M_incr
argument_list|()
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|this
operator|->
name|_M_decr
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
name|this
operator|->
name|_M_decr
argument_list|()
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|// Base class that encapsulates details of allocators.  Three cases:
end_comment

begin_comment
comment|// an ordinary standard-conforming allocator, a standard-conforming
end_comment

begin_comment
comment|// allocator with no non-static data, and an SGI-style allocator.
end_comment

begin_comment
comment|// This complexity is necessary only because we're worrying about backward
end_comment

begin_comment
comment|// compatibility and because we want to avoid wasting storage on an
end_comment

begin_comment
comment|// allocator instance if it isn't necessary.
end_comment

begin_comment
comment|// Base for general standard-conforming allocators.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Allocator
operator|,
name|bool
name|_IsStatic
operator|>
name|class
name|_List_alloc_base
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_Node_allocator
return|;
block|}
name|_List_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_Node_allocator
argument_list|(
argument|__a
argument_list|)
block|{ }
name|protected
operator|:
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
name|_M_get_node
argument_list|()
block|{
return|return
name|_Node_allocator
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|_M_put_node
argument_list|(
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
name|__p
argument_list|)
block|{
name|_Node_allocator
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|typename
name|_Alloc_traits
operator|<
name|_List_node
operator|<
name|_Tp
operator|>
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|_Node_allocator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
name|_M_node
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|// Specialization for instanceless allocators.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Allocator
operator|>
name|class
name|_List_alloc_base
operator|<
name|_Tp
operator|,
name|_Allocator
operator|,
name|true
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|()
return|;
block|}
name|_List_alloc_base
argument_list|(
argument|const allocator_type&
argument_list|)
block|{ }
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_List_node
operator|<
name|_Tp
operator|>
operator|,
name|_Allocator
operator|>
operator|::
name|_Alloc_type
name|_Alloc_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
name|_M_get_node
argument_list|()
block|{
return|return
name|_Alloc_type
operator|::
name|allocate
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|_M_put_node
argument_list|(
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
name|__p
argument_list|)
block|{
name|_Alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
name|_M_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|class
name|_List_base
operator|:
name|public
name|_List_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
block|{
name|public
operator|:
typedef|typedef
name|_List_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_List_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
name|_M_node
operator|=
name|_M_get_node
argument_list|()
block|;
name|_M_node
operator|->
name|_M_next
operator|=
name|_M_node
block|;
name|_M_node
operator|->
name|_M_prev
operator|=
name|_M_node
block|;       }
operator|~
name|_List_base
argument_list|()
block|{
name|clear
argument_list|()
block|;
name|_M_put_node
argument_list|(
name|_M_node
argument_list|)
block|;       }
name|void
name|clear
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
unit|};
comment|/**    *  @ingroup Containers    *  @ingroup Sequences    *    *  Meets the requirements of a<a href="tables.html#65">container</a>, a    *<a href="tables.html#66">reversible container</a>, and a    *<a href="tables.html#67">sequence</a>, including the    *<a href="tables.html#68">optional sequence requirements</a> with the    *  %exception of @c at and @c operator[].    *    *  @doctodo    *   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|=
name|allocator
operator|<
name|_Tp
operator|>
expr|>
name|class
name|list
operator|:
name|protected
name|_List_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
block|{
comment|// concept requirements
name|__glibcpp_class_requires
argument_list|(
argument|_Tp
argument_list|,
argument|_SGIAssignableConcept
argument_list|)
typedef|typedef
name|_List_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|_Base
expr_stmt|;
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|void
modifier|*
name|_Void_pointer
typedef|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_List_node
operator|<
name|_Tp
operator|>
name|_Node
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_List_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_List_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_put_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_get_node
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function
name|_Node
modifier|*
name|_M_create_node
parameter_list|(
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
block|{
name|_Node
modifier|*
name|__p
init|=
name|_M_get_node
argument_list|()
decl_stmt|;
name|try
block|{
name|_Construct
argument_list|(
operator|&
name|__p
operator|->
name|_M_data
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_put_node
argument_list|(
name|__p
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
return|return
name|__p
return|;
block|}
end_function

begin_function
name|_Node
modifier|*
name|_M_create_node
parameter_list|()
block|{
name|_Node
modifier|*
name|__p
init|=
name|_M_get_node
argument_list|()
decl_stmt|;
name|try
block|{
name|_Construct
argument_list|(
operator|&
name|__p
operator|->
name|_M_data
argument_list|)
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_put_node
argument_list|(
name|__p
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
return|return
name|__p
return|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_Base
operator|::
name|get_allocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|list
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{ }
name|iterator
name|begin
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Node
operator|*
operator|>
operator|(
name|_M_node
operator|->
name|_M_next
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|_Node
operator|*
operator|>
operator|(
name|_M_node
operator|->
name|_M_next
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|_M_node
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|_M_node
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|_M_node
operator|->
name|_M_next
operator|==
name|_M_node
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|distance
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
operator|--
name|end
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|swap
argument_list|(
name|list
operator|<
name|_Tp
argument_list|,
name|_Alloc
operator|>
operator|&
name|__x
argument_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|_M_node
argument_list|,
name|__x
operator|.
name|_M_node
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
block|{
name|_Node
modifier|*
name|__tmp
init|=
name|_M_create_node
argument_list|(
name|__x
argument_list|)
decl_stmt|;
name|__tmp
operator|->
name|_M_next
operator|=
name|__position
operator|.
name|_M_node
expr_stmt|;
name|__tmp
operator|->
name|_M_prev
operator|=
name|__position
operator|.
name|_M_node
operator|->
name|_M_prev
expr_stmt|;
name|__position
operator|.
name|_M_node
operator|->
name|_M_prev
operator|->
name|_M_next
operator|=
name|__tmp
expr_stmt|;
name|__position
operator|.
name|_M_node
operator|->
name|_M_prev
operator|=
name|__tmp
expr_stmt|;
return|return
name|__tmp
return|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|__position
argument_list|,
name|_Tp
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// Check whether it's an integral type.  If so, it's not an iterator.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Integer
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_insert
argument_list|(
name|__pos
argument_list|,
operator|(
name|size_type
operator|)
name|__n
argument_list|,
operator|(
name|_Tp
operator|)
name|__x
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_insert_dispatch
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}        void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|size_type __n
argument_list|,
argument|const _Tp& __x
argument_list|)
end_macro

begin_block
block|{
name|_M_fill_insert
argument_list|(
name|__pos
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_block

begin_function_decl
name|void
name|_M_fill_insert
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_front
parameter_list|()
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
block|{
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|()
block|{
name|insert
argument_list|(
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__position
parameter_list|)
block|{
name|_List_node_base
modifier|*
name|__next_node
init|=
name|__position
operator|.
name|_M_node
operator|->
name|_M_next
decl_stmt|;
name|_List_node_base
modifier|*
name|__prev_node
init|=
name|__position
operator|.
name|_M_node
operator|->
name|_M_prev
decl_stmt|;
name|_Node
modifier|*
name|__n
init|=
name|static_cast
operator|<
name|_Node
operator|*
operator|>
operator|(
name|__position
operator|.
name|_M_node
operator|)
decl_stmt|;
name|__prev_node
operator|->
name|_M_next
operator|=
name|__next_node
expr_stmt|;
name|__next_node
operator|->
name|_M_prev
operator|=
name|__prev_node
expr_stmt|;
name|_Destroy
argument_list|(
operator|&
name|__n
operator|->
name|_M_data
argument_list|)
expr_stmt|;
name|_M_put_node
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
name|iterator
argument_list|(
name|static_cast
operator|<
name|_Node
operator|*
operator|>
operator|(
name|__next_node
operator|)
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|clear
parameter_list|()
block|{
name|_Base
operator|::
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|resize
parameter_list|(
name|size_type
name|__new_size
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|__new_size
parameter_list|)
block|{
name|this
operator|->
name|resize
argument_list|(
name|__new_size
argument_list|,
name|_Tp
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_front
parameter_list|()
block|{
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
name|iterator
name|__tmp
init|=
name|end
argument_list|()
decl_stmt|;
name|erase
argument_list|(
operator|--
name|__tmp
argument_list|)
expr_stmt|;
block|}
end_function

begin_macro
name|list
argument_list|(
argument|size_type __n
argument_list|,
argument|const _Tp& __value
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__a
argument_list|)
end_macro

begin_block
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__n
argument_list|,
name|__value
argument_list|)
expr_stmt|;
block|}
end_block

begin_macro
name|explicit
end_macro

begin_macro
name|list
argument_list|(
argument|size_type __n
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|allocator_type()
argument_list|)
end_macro

begin_block
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__n
argument_list|,
name|_Tp
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_comment
comment|// We don't need any dispatching tricks here, because insert does all of
end_comment

begin_comment
comment|// that anyway.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|list
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
block|; }
name|list
argument_list|(
specifier|const
name|list
operator|<
name|_Tp
argument_list|,
name|_Alloc
operator|>
operator|&
name|__x
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__x.get_allocator()
argument_list|)
block|{
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|)
block|; }
operator|~
name|list
argument_list|()
block|{ }
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|// assign(), a generalized assignment member function.  Two
end_comment

begin_comment
comment|// versions: one that takes a count, and one that takes a range.
end_comment

begin_comment
comment|// The range version is a member template, so we dispatch on whether
end_comment

begin_comment
comment|// or not the type is an integer.
end_comment

begin_function
name|void
name|assign
parameter_list|(
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__val
parameter_list|)
block|{
name|_M_fill_assign
argument_list|(
name|__n
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|_M_fill_assign
parameter_list|(
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__val
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|assign
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_assign_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}        template
operator|<
name|typename
name|_Integer
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __val
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_assign
argument_list|(
operator|(
name|size_type
operator|)
name|__n
argument_list|,
operator|(
name|_Tp
operator|)
name|__val
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function
name|void
name|_M_transfer
parameter_list|(
name|iterator
name|__position
parameter_list|,
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
block|{
if|if
condition|(
name|__position
operator|!=
name|__last
condition|)
block|{
comment|// Remove [first, last) from its old position.
name|__last
operator|.
name|_M_node
operator|->
name|_M_prev
operator|->
name|_M_next
operator|=
name|__position
operator|.
name|_M_node
expr_stmt|;
name|__first
operator|.
name|_M_node
operator|->
name|_M_prev
operator|->
name|_M_next
operator|=
name|__last
operator|.
name|_M_node
expr_stmt|;
name|__position
operator|.
name|_M_node
operator|->
name|_M_prev
operator|->
name|_M_next
operator|=
name|__first
operator|.
name|_M_node
expr_stmt|;
comment|// Splice [first, last) into its new position.
name|_List_node_base
modifier|*
name|__tmp
init|=
name|__position
operator|.
name|_M_node
operator|->
name|_M_prev
decl_stmt|;
name|__position
operator|.
name|_M_node
operator|->
name|_M_prev
operator|=
name|__last
operator|.
name|_M_node
operator|->
name|_M_prev
expr_stmt|;
name|__last
operator|.
name|_M_node
operator|->
name|_M_prev
operator|=
name|__first
operator|.
name|_M_node
operator|->
name|_M_prev
expr_stmt|;
name|__first
operator|.
name|_M_node
operator|->
name|_M_prev
operator|=
name|__tmp
expr_stmt|;
block|}
block|}
end_function

begin_label
name|public
label|:
end_label

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|__position
parameter_list|,
name|list
modifier|&
name|__x
parameter_list|)
block|{
if|if
condition|(
operator|!
name|__x
operator|.
name|empty
argument_list|()
condition|)
name|this
operator|->
name|_M_transfer
argument_list|(
name|__position
argument_list|,
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|__position
parameter_list|,
name|list
modifier|&
parameter_list|,
name|iterator
name|__i
parameter_list|)
block|{
name|iterator
name|__j
init|=
name|__i
decl_stmt|;
operator|++
name|__j
expr_stmt|;
if|if
condition|(
name|__position
operator|==
name|__i
operator|||
name|__position
operator|==
name|__j
condition|)
return|return;
name|this
operator|->
name|_M_transfer
argument_list|(
name|__position
argument_list|,
name|__i
argument_list|,
name|__j
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|splice
parameter_list|(
name|iterator
name|__position
parameter_list|,
name|list
modifier|&
parameter_list|,
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
block|{
if|if
condition|(
name|__first
operator|!=
name|__last
condition|)
name|this
operator|->
name|_M_transfer
argument_list|(
name|__position
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|remove
parameter_list|(
specifier|const
name|_Tp
modifier|&
name|__value
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|unique
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|merge
parameter_list|(
name|list
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|reverse
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|sort
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|typename
name|_Predicate
operator|>
name|void
name|remove_if
argument_list|(
name|_Predicate
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_BinaryPredicate
operator|>
name|void
name|unique
argument_list|(
name|_BinaryPredicate
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_StrictWeakOrdering
operator|>
name|void
name|merge
argument_list|(
name|list
operator|&
argument_list|,
name|_StrictWeakOrdering
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_StrictWeakOrdering
operator|>
name|void
name|sort
argument_list|(
name|_StrictWeakOrdering
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
typedef|typedef
name|typename
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
name|const_iterator
name|__end1
operator|=
name|__x
operator|.
name|end
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|const_iterator
name|__end2
init|=
name|__y
operator|.
name|end
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|const_iterator
name|__i1
init|=
name|__x
operator|.
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|const_iterator
name|__i2
init|=
name|__y
operator|.
name|begin
argument_list|()
decl_stmt|;
end_decl_stmt

begin_while
while|while
condition|(
name|__i1
operator|!=
name|__end1
operator|&&
name|__i2
operator|!=
name|__end2
operator|&&
operator|*
name|__i1
operator|==
operator|*
name|__i2
condition|)
block|{
operator|++
name|__i1
expr_stmt|;
operator|++
name|__i2
expr_stmt|;
block|}
end_while

begin_return
return|return
name|__i1
operator|==
name|__end1
operator|&&
name|__i2
operator|==
name|__end2
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|,
name|__y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|==
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|<
name|__x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__y
operator|<
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|<
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|list<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|list<_Tp
argument_list|,
argument|_Alloc>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
comment|// move these to stl_list.tcc
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_List_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|clear
argument_list|()
block|{
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
name|__cur
operator|=
name|static_cast
operator|<
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
operator|>
operator|(
name|_M_node
operator|->
name|_M_next
operator|)
block|;
while|while
condition|(
name|__cur
operator|!=
name|_M_node
condition|)
block|{
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
name|__tmp
operator|=
name|__cur
expr_stmt|;
name|__cur
operator|=
name|static_cast
operator|<
name|_List_node
operator|<
name|_Tp
operator|>
operator|*
operator|>
operator|(
name|__cur
operator|->
name|_M_next
operator|)
expr_stmt|;
name|_Destroy
argument_list|(
operator|&
name|__tmp
operator|->
name|_M_data
argument_list|)
expr_stmt|;
name|_M_put_node
argument_list|(
name|__tmp
argument_list|)
expr_stmt|;
block|}
name|_M_node
operator|->
name|_M_next
operator|=
name|_M_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_M_node
operator|->
name|_M_prev
operator|=
name|_M_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|template
operator|<
name|typename
name|_InputIter
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_dispatch
argument_list|(
argument|iterator __position
argument_list|,
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|__false_type
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
name|insert
argument_list|(
name|__position
argument_list|,
operator|*
name|__first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_fill_insert
argument_list|(
argument|iterator __position
argument_list|,
argument|size_type __n
argument_list|,
argument|const _Tp& __x
argument_list|)
block|{
for|for
control|(
init|;
name|__n
operator|>
literal|0
condition|;
operator|--
name|__n
control|)
name|insert
argument_list|(
name|__position
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|iterator __first
argument_list|,
argument|iterator __last
argument_list|)
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
name|erase
argument_list|(
name|__first
operator|++
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__last
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|resize
argument_list|(
argument|size_type __new_size
argument_list|,
argument|const _Tp& __x
argument_list|)
block|{
name|iterator
name|__i
operator|=
name|begin
argument_list|()
block|;
name|size_type
name|__len
operator|=
literal|0
block|;
for|for
control|(
init|;
name|__i
operator|!=
name|end
argument_list|()
operator|&&
name|__len
operator|<
name|__new_size
condition|;
operator|++
name|__i
operator|,
operator|++
name|__len
control|)
empty_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__len
operator|==
name|__new_size
condition|)
name|erase
argument_list|(
name|__i
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
comment|// __i == end()
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__new_size
operator|-
name|__len
argument_list|,
name|__x
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|__x
condition|)
block|{
name|iterator
name|__first1
init|=
name|begin
argument_list|()
decl_stmt|;
name|iterator
name|__last1
init|=
name|end
argument_list|()
decl_stmt|;
name|const_iterator
name|__first2
init|=
name|__x
operator|.
name|begin
argument_list|()
decl_stmt|;
name|const_iterator
name|__last2
init|=
name|__x
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
operator|*
name|__first1
operator|++
operator|=
operator|*
name|__first2
operator|++
expr_stmt|;
if|if
condition|(
name|__first2
operator|==
name|__last2
condition|)
name|erase
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|__last1
argument_list|,
name|__first2
argument_list|,
name|__last2
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_fill_assign
argument_list|(
argument|size_type __n
argument_list|,
argument|const _Tp& __val
argument_list|)
block|{
name|iterator
name|__i
operator|=
name|begin
argument_list|()
block|;
for|for
control|(
init|;
name|__i
operator|!=
name|end
argument_list|()
operator|&&
name|__n
operator|>
literal|0
condition|;
operator|++
name|__i
operator|,
operator|--
name|__n
control|)
operator|*
name|__i
operator|=
name|__val
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__n
operator|>
literal|0
condition|)
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__n
argument_list|,
name|__val
argument_list|)
expr_stmt|;
else|else
name|erase
argument_list|(
name|__i
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|template
operator|<
name|typename
name|_InputIter
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_assign_dispatch
argument_list|(
argument|_InputIter __first2
argument_list|,
argument|_InputIter __last2
argument_list|,
argument|__false_type
argument_list|)
block|{
name|iterator
name|__first1
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|__last1
operator|=
name|end
argument_list|()
block|;
for|for
control|(
init|;
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|;
operator|++
name|__first1
operator|,
operator|++
name|__first2
control|)
operator|*
name|__first1
operator|=
operator|*
name|__first2
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__first2
operator|==
name|__last2
condition|)
name|erase
argument_list|(
name|__first1
argument_list|,
name|__last1
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|__last1
argument_list|,
name|__first2
argument_list|,
name|__last2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|remove
argument_list|(
argument|const _Tp& __value
argument_list|)
block|{
name|iterator
name|__first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|__last
operator|=
name|end
argument_list|()
block|;
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|iterator
name|__next
init|=
name|__first
decl_stmt|;
operator|++
name|__next
expr_stmt|;
if|if
condition|(
operator|*
name|__first
operator|==
name|__value
condition|)
name|erase
argument_list|(
name|__first
argument_list|)
expr_stmt|;
name|__first
operator|=
name|__next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|unique
argument_list|()
block|{
name|iterator
name|__first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|__last
operator|=
name|end
argument_list|()
block|;
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return;
name|iterator
name|__next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|__next
operator|!=
name|__last
condition|)
block|{
if|if
condition|(
operator|*
name|__first
operator|==
operator|*
name|__next
condition|)
name|erase
argument_list|(
name|__next
argument_list|)
expr_stmt|;
else|else
name|__first
operator|=
name|__next
expr_stmt|;
name|__next
operator|=
name|__first
expr_stmt|;
block|}
end_while

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|merge
argument_list|(
argument|list<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|)
block|{
name|iterator
name|__first1
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|__last1
operator|=
name|end
argument_list|()
block|;
name|iterator
name|__first2
operator|=
name|__x
operator|.
name|begin
argument_list|()
block|;
name|iterator
name|__last2
operator|=
name|__x
operator|.
name|end
argument_list|()
block|;
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
operator|*
name|__first2
operator|<
operator|*
name|__first1
condition|)
block|{
name|iterator
name|__next
init|=
name|__first2
decl_stmt|;
name|_M_transfer
argument_list|(
name|__first1
argument_list|,
name|__first2
argument_list|,
operator|++
name|__next
argument_list|)
expr_stmt|;
name|__first2
operator|=
name|__next
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
operator|++
name|__first1
expr_stmt|;
end_else

begin_if
if|if
condition|(
name|__first2
operator|!=
name|__last2
condition|)
name|_M_transfer
argument_list|(
name|__last1
argument_list|,
name|__first2
argument_list|,
name|__last2
argument_list|)
expr_stmt|;
end_if

begin_function
unit|}    inline
name|void
name|__List_base_reverse
parameter_list|(
name|_List_node_base
modifier|*
name|__p
parameter_list|)
block|{
name|_List_node_base
modifier|*
name|__tmp
init|=
name|__p
decl_stmt|;
do|do
block|{
name|std
operator|::
name|swap
argument_list|(
name|__tmp
operator|->
name|_M_next
argument_list|,
name|__tmp
operator|->
name|_M_prev
argument_list|)
expr_stmt|;
name|__tmp
operator|=
name|__tmp
operator|->
name|_M_prev
expr_stmt|;
comment|// Old next node is now prev.
block|}
do|while
condition|(
name|__tmp
operator|!=
name|__p
condition|)
do|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|reverse
argument_list|()
block|{
name|__List_base_reverse
argument_list|(
name|this
operator|->
name|_M_node
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|sort
argument_list|()
block|{
comment|// Do nothing if the list has length 0 or 1.
if|if
condition|(
name|_M_node
operator|->
name|_M_next
operator|!=
name|_M_node
operator|&&
name|_M_node
operator|->
name|_M_next
operator|->
name|_M_next
operator|!=
name|_M_node
condition|)
block|{
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|__carry
expr_stmt|;
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|__counter
index|[
literal|64
index|]
expr_stmt|;
name|int
name|__fill
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
name|__carry
operator|.
name|splice
argument_list|(
name|__carry
operator|.
name|begin
argument_list|()
argument_list|,
operator|*
name|this
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|__i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|__i
operator|<
name|__fill
operator|&&
operator|!
name|__counter
index|[
name|__i
index|]
operator|.
name|empty
argument_list|()
condition|)
block|{
name|__counter
index|[
name|__i
index|]
operator|.
name|merge
argument_list|(
name|__carry
argument_list|)
expr_stmt|;
name|__carry
operator|.
name|swap
argument_list|(
name|__counter
index|[
name|__i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|__carry
operator|.
name|swap
argument_list|(
name|__counter
index|[
name|__i
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__i
operator|==
name|__fill
condition|)
operator|++
name|__fill
expr_stmt|;
end_if

begin_expr_stmt
unit|}           for
operator|(
name|int
name|__i
operator|=
literal|1
expr|;
name|__i
operator|<
name|__fill
expr|;
operator|++
name|__i
operator|)
name|__counter
index|[
name|__i
index|]
operator|.
name|merge
argument_list|(
name|__counter
index|[
name|__i
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|swap
argument_list|(
name|__counter
index|[
name|__fill
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}     }
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|template
operator|<
name|typename
name|_Predicate
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|remove_if
argument_list|(
argument|_Predicate __pred
argument_list|)
block|{
name|iterator
name|__first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|__last
operator|=
name|end
argument_list|()
block|;
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|iterator
name|__next
init|=
name|__first
decl_stmt|;
operator|++
name|__next
expr_stmt|;
if|if
condition|(
name|__pred
argument_list|(
operator|*
name|__first
argument_list|)
condition|)
name|erase
argument_list|(
name|__first
argument_list|)
expr_stmt|;
name|__first
operator|=
name|__next
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|template
operator|<
name|typename
name|_BinaryPredicate
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|unique
argument_list|(
argument|_BinaryPredicate __binary_pred
argument_list|)
block|{
name|iterator
name|__first
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|__last
operator|=
name|end
argument_list|()
block|;
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
return|return;
name|iterator
name|__next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_while
while|while
condition|(
operator|++
name|__next
operator|!=
name|__last
condition|)
block|{
if|if
condition|(
name|__binary_pred
argument_list|(
operator|*
name|__first
argument_list|,
operator|*
name|__next
argument_list|)
condition|)
name|erase
argument_list|(
name|__next
argument_list|)
expr_stmt|;
else|else
name|__first
operator|=
name|__next
expr_stmt|;
name|__next
operator|=
name|__first
expr_stmt|;
block|}
end_while

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|template
operator|<
name|typename
name|_StrictWeakOrdering
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|merge
argument_list|(
argument|list<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|_StrictWeakOrdering __comp
argument_list|)
block|{
name|iterator
name|__first1
operator|=
name|begin
argument_list|()
block|;
name|iterator
name|__last1
operator|=
name|end
argument_list|()
block|;
name|iterator
name|__first2
operator|=
name|__x
operator|.
name|begin
argument_list|()
block|;
name|iterator
name|__last2
operator|=
name|__x
operator|.
name|end
argument_list|()
block|;
while|while
condition|(
name|__first1
operator|!=
name|__last1
operator|&&
name|__first2
operator|!=
name|__last2
condition|)
if|if
condition|(
name|__comp
argument_list|(
operator|*
name|__first2
argument_list|,
operator|*
name|__first1
argument_list|)
condition|)
block|{
name|iterator
name|__next
init|=
name|__first2
decl_stmt|;
name|_M_transfer
argument_list|(
name|__first1
argument_list|,
name|__first2
argument_list|,
operator|++
name|__next
argument_list|)
expr_stmt|;
name|__first2
operator|=
name|__next
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
operator|++
name|__first1
expr_stmt|;
end_else

begin_if
if|if
condition|(
name|__first2
operator|!=
name|__last2
condition|)
name|_M_transfer
argument_list|(
name|__last1
argument_list|,
name|__first2
argument_list|,
name|__last2
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|template
operator|<
name|typename
name|_StrictWeakOrdering
operator|>
name|void
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|sort
argument_list|(
argument|_StrictWeakOrdering __comp
argument_list|)
block|{
comment|// Do nothing if the list has length 0 or 1.
if|if
condition|(
name|_M_node
operator|->
name|_M_next
operator|!=
name|_M_node
operator|&&
name|_M_node
operator|->
name|_M_next
operator|->
name|_M_next
operator|!=
name|_M_node
condition|)
block|{
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|__carry
expr_stmt|;
name|list
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|__counter
index|[
literal|64
index|]
expr_stmt|;
name|int
name|__fill
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
name|__carry
operator|.
name|splice
argument_list|(
name|__carry
operator|.
name|begin
argument_list|()
argument_list|,
operator|*
name|this
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|__i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|__i
operator|<
name|__fill
operator|&&
operator|!
name|__counter
index|[
name|__i
index|]
operator|.
name|empty
argument_list|()
condition|)
block|{
name|__counter
index|[
name|__i
index|]
operator|.
name|merge
argument_list|(
name|__carry
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
name|__carry
operator|.
name|swap
argument_list|(
name|__counter
index|[
name|__i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
name|__carry
operator|.
name|swap
argument_list|(
name|__counter
index|[
name|__i
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__i
operator|==
name|__fill
condition|)
operator|++
name|__fill
expr_stmt|;
end_if

begin_expr_stmt
unit|}           for
operator|(
name|int
name|__i
operator|=
literal|1
expr|;
name|__i
operator|<
name|__fill
expr|;
operator|++
name|__i
operator|)
name|__counter
index|[
name|__i
index|]
operator|.
name|merge
argument_list|(
name|__counter
index|[
name|__i
operator|-
literal|1
index|]
argument_list|,
name|__comp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|swap
argument_list|(
name|__counter
index|[
name|__fill
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}     }  }
comment|// namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GLIBCPP_INTERNAL_LIST_H */
end_comment

begin_comment
comment|// vi:set ts=2 sw=2:
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

