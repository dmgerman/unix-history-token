begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- gslice_array class.
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|// Written by Gabriel Dos Reis<Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>
end_comment

begin_comment
comment|/** @file gslice_array.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CPP_BITS_GSLICE_ARRAY
end_ifndef

begin_define
define|#
directive|define
name|_CPP_BITS_GSLICE_ARRAY
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_decl_stmt
name|namespace
name|std
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|class
name|gslice_array
block|{
name|public
operator|:
typedef|typedef
name|_Tp
name|value_type
typedef|;
name|void
name|operator
operator|=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|*=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|/=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|%=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|+=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|-=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|^=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|&=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator||=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|<<=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
operator|>>=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|void
name|operator
init|=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
decl_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|*=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|/=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|%=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|+=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|-=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|^=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|&=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator||=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|<<=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|void
name|operator
operator|>>=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|private
label|:
name|_Array
operator|<
name|_Tp
operator|>
name|_M_array
expr_stmt|;
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|_M_index
expr_stmt|;
name|friend
name|class
name|valarray
operator|<
name|_Tp
operator|>
expr_stmt|;
name|gslice_array
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|// this constructor needs to be implemented.
name|gslice_array
argument_list|(
specifier|const
name|gslice_array
operator|&
argument_list|)
expr_stmt|;
comment|// not implemented
name|gslice_array
argument_list|()
expr_stmt|;
name|gslice_array
modifier|&
name|operator
init|=
operator|(
specifier|const
name|gslice_array
operator|&
operator|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|gslice_array
operator|<
name|_Tp
operator|>
operator|::
name|gslice_array
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_M_array
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_index
argument_list|(
argument|__i
argument_list|)
block|{}
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|gslice_array
operator|<
name|_Tp
operator|>
operator|::
name|gslice_array
argument_list|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
name|__a
argument_list|)
operator|:
name|_M_array
argument_list|(
name|__a
operator|.
name|_M_array
argument_list|)
operator|,
name|_M_index
argument_list|(
argument|__a._M_index
argument_list|)
block|{}
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|void
name|gslice_array
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
block|{
name|__valarray_fill
argument_list|(
name|_M_array
argument_list|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|_M_index
operator|)
argument_list|,
name|_M_index
operator|.
name|size
argument_list|()
argument_list|,
name|__t
argument_list|)
block|;      }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|void
name|gslice_array
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
operator|)
specifier|const
block|{
name|__valarray_copy
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|__v
operator|)
argument_list|,
name|__v
operator|.
name|size
argument_list|()
argument_list|,
name|_M_array
argument_list|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|_M_index
operator|)
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|class
name|E
operator|>
specifier|inline
name|void
name|gslice_array
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|_Expr
operator|<
name|E
operator|,
name|_Tp
operator|>
operator|&
name|__e
operator|)
specifier|const
block|{
name|__valarray_copy
argument_list|(
name|__e
argument_list|,
name|_M_index
operator|.
name|size
argument_list|()
argument_list|,
name|_M_array
argument_list|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|_M_index
operator|)
argument_list|)
block|;     }
undef|#
directive|undef
name|_DEFINE_VALARRAY_OPERATOR
define|#
directive|define
name|_DEFINE_VALARRAY_OPERATOR
parameter_list|(
name|op
parameter_list|,
name|name
parameter_list|)
define|\
value|template<typename _Tp>							\ inline void								\ gslice_array<_Tp>::operator op##= (const valarray<_Tp>& __v) const	\ {									\     _Array_augmented_##name (_M_array, _Array<size_t>(_M_index),	\                               _Array<_Tp> (__v), __v.size ());		\ }									\ 									\ template<typename _Tp> template<class E>        			\ inline void 								\ gslice_array<_Tp>::operator op##= (const _Expr<E, _Tp>& __e) const	\ {									\     _Array_augmented_##name (_M_array, _Array<size_t>(_M_index), __e,	\                               _M_index.size());				\ }
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|*
argument_list|,
argument|multiplies
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|/
argument_list|,
argument|divides
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|%
argument_list|,
argument|modulus
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|+
argument_list|,
argument|plus
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|minus
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|^
argument_list|,
argument|xor
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|&
argument_list|,
argument|and
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument||
argument_list|,
argument|or
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|<<
argument_list|,
argument|shift_left
argument_list|)
name|_DEFINE_VALARRAY_OPERATOR
argument_list|(
argument|>>
argument_list|,
argument|shift_right
argument_list|)
end_expr_stmt

begin_undef
undef|#
directive|undef
name|_DEFINE_VALARRAY_OPERATOR
end_undef

begin_comment
unit|}
comment|// std::
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CPP_BITS_GSLICE_ARRAY */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:c++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

