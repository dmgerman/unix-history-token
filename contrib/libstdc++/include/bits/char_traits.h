begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Character Traits for use by standard string and iostream -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO C++ 14882: 21  Strings library
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file char_traits.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CHAR_TRAITS_H
end_ifndef

begin_define
define|#
directive|define
name|_CHAR_TRAITS_H
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<cstring>
end_include

begin_comment
comment|// For memmove, memset, memchr
end_comment

begin_include
include|#
directive|include
file|<bits/stl_algobase.h>
end_include

begin_comment
comment|// For copy, lexicographical_compare, fill_n
end_comment

begin_include
include|#
directive|include
file|<bits/postypes.h>
end_include

begin_comment
comment|// For streampos
end_comment

begin_decl_stmt
name|namespace
name|__gnu_cxx
block|{
comment|/**    *  @brief  Mapping from character type to associated types.    *    *    *  @note This is an implementation class for the generic version    *  of char_traits.  It defines int_type, off_type, pos_type, and    *  state_type.  By default these are unsigned long, streamoff,    *  streampos, and mbstate_t.  Users who need a different set of    *  types, but who don't need to change the definitions of any function    *  defined in char_traits, can specialize __gnu_cxx::_Char_types    *  while leaving __gnu_cxx::char_traits alone. */
name|template
operator|<
name|class
name|_CharT
operator|>
expr|struct
name|_Char_types
block|{
typedef|typedef
name|unsigned
name|long
name|int_type
typedef|;
typedef|typedef
name|std
operator|::
name|streampos
name|pos_type
expr_stmt|;
typedef|typedef
name|std
operator|::
name|streamoff
name|off_type
expr_stmt|;
typedef|typedef
name|std
operator|::
name|mbstate_t
name|state_type
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/**    *  @brief  Base class used to implement std::char_traits.    *    *  @note For any given actual character type, this definition is    *  probably wrong.  (Most of the member functions are likely to be    *  right, but the int_type and state_type typedefs, and the eof()    *  member function, are likely to be wrong.)  The reason this class    *  exists is so users can specialize it.  Classes in namespace std    *  may not be specialized for fundamentl types, but classes in    *  namespace __gnu_cxx may be.    *    *  See http://gcc.gnu.org/onlinedocs/libstdc++/21_strings/howto.html#5    *  for advice on how to make use of this class for "unusual" character    *  types. Also, check out include/ext/pod_char_traits.h.  */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|>
expr|struct
name|char_traits
block|{
typedef|typedef
name|_CharT
name|char_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Char_types
operator|<
name|_CharT
operator|>
operator|::
name|int_type
name|int_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Char_types
operator|<
name|_CharT
operator|>
operator|::
name|pos_type
name|pos_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Char_types
operator|<
name|_CharT
operator|>
operator|::
name|off_type
name|off_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Char_types
operator|<
name|_CharT
operator|>
operator|::
name|state_type
name|state_type
expr_stmt|;
end_typedef

begin_function
specifier|static
name|void
name|assign
parameter_list|(
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
name|__c1
operator|=
name|__c2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|bool
name|eq
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|==
name|__c2
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|lt
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|<
name|__c2
return|;
block|}
end_function

begin_decl_stmt
specifier|static
name|int
name|compare
argument_list|(
specifier|const
name|char_type
operator|*
name|__s1
argument_list|,
specifier|const
name|char_type
operator|*
name|__s2
argument_list|,
name|std
operator|::
name|size_t
name|__n
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|static
name|std
operator|::
name|size_t
name|length
argument_list|(
specifier|const
name|char_type
operator|*
name|__s
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|static
specifier|const
name|char_type
modifier|*
name|find
argument_list|(
specifier|const
name|char_type
operator|*
name|__s
argument_list|,
name|std
operator|::
name|size_t
name|__n
argument_list|,
specifier|const
name|char_type
operator|&
name|__a
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|char_type
modifier|*
name|move
argument_list|(
name|char_type
operator|*
name|__s1
argument_list|,
specifier|const
name|char_type
operator|*
name|__s2
argument_list|,
name|std
operator|::
name|size_t
name|__n
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|char_type
modifier|*
name|copy
argument_list|(
name|char_type
operator|*
name|__s1
argument_list|,
specifier|const
name|char_type
operator|*
name|__s2
argument_list|,
name|std
operator|::
name|size_t
name|__n
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|char_type
modifier|*
name|assign
argument_list|(
name|char_type
operator|*
name|__s
argument_list|,
name|std
operator|::
name|size_t
name|__n
argument_list|,
name|char_type
name|__a
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
specifier|static
name|char_type
name|to_char_type
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|char_type
operator|>
operator|(
name|__c
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int_type
name|to_int_type
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|int_type
operator|>
operator|(
name|__c
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|eq_int_type
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|int_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|==
name|__c2
return|;
block|}
end_function

begin_function
specifier|static
name|int_type
name|eof
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|int_type
operator|>
operator|(
name|EOF
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int_type
name|not_eof
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
operator|!
name|eq_int_type
argument_list|(
name|__c
argument_list|,
name|eof
argument_list|()
argument_list|)
condition|?
name|__c
else|:
name|to_int_type
argument_list|(
name|char_type
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_CharT
operator|>
name|int
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|compare
argument_list|(
argument|const char_type* __s1
argument_list|,
argument|const char_type* __s2
argument_list|,
argument|std::size_t __n
argument_list|)
block|{
for|for
control|(
name|size_t
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__n
condition|;
operator|++
name|__i
control|)
if|if
condition|(
name|lt
argument_list|(
name|__s1
index|[
name|__i
index|]
argument_list|,
name|__s2
index|[
name|__i
index|]
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
elseif|else
if|if
condition|(
name|lt
argument_list|(
name|__s2
index|[
name|__i
index|]
argument_list|,
name|__s1
index|[
name|__i
index|]
argument_list|)
condition|)
return|return
literal|1
return|;
end_expr_stmt

begin_return
return|return
literal|0
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_CharT
operator|>
name|std
operator|::
name|size_t
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|length
argument_list|(
argument|const char_type* __p
argument_list|)
block|{
name|std
operator|::
name|size_t
name|__i
operator|=
literal|0
block|;
while|while
condition|(
operator|!
name|eq
argument_list|(
name|__p
index|[
name|__i
index|]
argument_list|,
name|char_type
argument_list|()
argument_list|)
condition|)
operator|++
name|__i
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__i
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_CharT
operator|>
specifier|const
name|typename
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|char_type
operator|*
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|find
argument_list|(
argument|const char_type* __s
argument_list|,
argument|std::size_t __n
argument_list|,
argument|const char_type& __a
argument_list|)
block|{
for|for
control|(
name|std
operator|::
name|size_t
name|__i
operator|=
literal|0
init|;
name|__i
operator|<
name|__n
condition|;
operator|++
name|__i
control|)
if|if
condition|(
name|eq
argument_list|(
name|__s
index|[
name|__i
index|]
argument_list|,
name|__a
argument_list|)
condition|)
return|return
name|__s
operator|+
name|__i
return|;
end_expr_stmt

begin_return
return|return
literal|0
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_CharT
operator|>
name|typename
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|char_type
operator|*
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|move
argument_list|(
argument|char_type* __s1
argument_list|,
argument|const char_type* __s2
argument_list|,
argument|std::size_t __n
argument_list|)
block|{
return|return
name|static_cast
operator|<
name|_CharT
operator|*
operator|>
operator|(
name|std
operator|::
name|memmove
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|,
name|__n
operator|*
sizeof|sizeof
argument_list|(
name|char_type
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|>
name|typename
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|char_type
operator|*
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|copy
argument_list|(
argument|char_type* __s1
argument_list|,
argument|const char_type* __s2
argument_list|,
argument|std::size_t __n
argument_list|)
block|{
name|std
operator|::
name|copy
argument_list|(
name|__s2
argument_list|,
name|__s2
operator|+
name|__n
argument_list|,
name|__s1
argument_list|)
block|;
return|return
name|__s1
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|>
name|typename
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|char_type
operator|*
name|char_traits
operator|<
name|_CharT
operator|>
operator|::
name|assign
argument_list|(
argument|char_type* __s
argument_list|,
argument|std::size_t __n
argument_list|,
argument|char_type __a
argument_list|)
block|{
name|std
operator|::
name|fill_n
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|,
name|__a
argument_list|)
block|;
return|return
name|__s
return|;
block|}
end_expr_stmt

begin_macro
unit|}  namespace
name|std
end_macro

begin_block
block|{
comment|// 21.1
comment|/**    *  @brief  Basis for explicit traits specializations.    *    *  @note  For any given actual character type, this definition is    *  probably wrong.  Since this is just a thin wrapper around    *  __gnu_cxx::char_traits, it is possible to achieve a more    *  appropriate definition by specializing __gnu_cxx::char_traits.    *    *  See http://gcc.gnu.org/onlinedocs/libstdc++/21_strings/howto.html#5    *  for advice on how to make use of this class for "unusual" character    *  types. Also, check out include/ext/pod_char_traits.h.   */
name|template
operator|<
name|class
name|_CharT
operator|>
expr|struct
name|char_traits
operator|:
name|public
name|__gnu_cxx
operator|::
name|char_traits
operator|<
name|_CharT
operator|>
block|{ }
expr_stmt|;
comment|/// 21.1.3.1  char_traits specializations
name|template
operator|<
operator|>
expr|struct
name|char_traits
operator|<
name|char
operator|>
block|{
typedef|typedef
name|char
name|char_type
typedef|;
typedef|typedef
name|int
name|int_type
typedef|;
typedef|typedef
name|streampos
name|pos_type
typedef|;
typedef|typedef
name|streamoff
name|off_type
typedef|;
typedef|typedef
name|mbstate_t
name|state_type
typedef|;
specifier|static
name|void
name|assign
parameter_list|(
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
name|__c1
operator|=
name|__c2
expr_stmt|;
block|}
specifier|static
name|bool
name|eq
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|==
name|__c2
return|;
block|}
specifier|static
name|bool
name|lt
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|<
name|__c2
return|;
block|}
specifier|static
name|int
name|compare
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|memcmp
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|,
name|__n
argument_list|)
return|;
block|}
specifier|static
name|size_t
name|length
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|)
block|{
return|return
name|strlen
argument_list|(
name|__s
argument_list|)
return|;
block|}
specifier|static
specifier|const
name|char_type
modifier|*
name|find
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__a
parameter_list|)
block|{
return|return
name|static_cast
operator|<
specifier|const
name|char_type
operator|*
operator|>
operator|(
name|memchr
argument_list|(
name|__s
argument_list|,
name|__a
argument_list|,
name|__n
argument_list|)
operator|)
return|;
block|}
specifier|static
name|char_type
modifier|*
name|move
parameter_list|(
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|char_type
operator|*
operator|>
operator|(
name|memmove
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|,
name|__n
argument_list|)
operator|)
return|;
block|}
specifier|static
name|char_type
modifier|*
name|copy
parameter_list|(
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|char_type
operator|*
operator|>
operator|(
name|memcpy
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|,
name|__n
argument_list|)
operator|)
return|;
block|}
specifier|static
name|char_type
modifier|*
name|assign
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
name|char_type
name|__a
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|char_type
operator|*
operator|>
operator|(
name|memset
argument_list|(
name|__s
argument_list|,
name|__a
argument_list|,
name|__n
argument_list|)
operator|)
return|;
block|}
specifier|static
name|char_type
name|to_char_type
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|char_type
operator|>
operator|(
name|__c
operator|)
return|;
block|}
comment|// To keep both the byte 0xff and the eof symbol 0xffffffff
comment|// from ending up as 0xffffffff.
specifier|static
name|int_type
name|to_int_type
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|int_type
operator|>
operator|(
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
name|__c
operator|)
operator|)
return|;
block|}
specifier|static
name|bool
name|eq_int_type
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|int_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|==
name|__c2
return|;
block|}
specifier|static
name|int_type
name|eof
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|int_type
operator|>
operator|(
name|EOF
operator|)
return|;
block|}
specifier|static
name|int_type
name|not_eof
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
operator|(
name|__c
operator|==
name|eof
argument_list|()
operator|)
condition|?
literal|0
else|:
name|__c
return|;
block|}
block|}
end_block

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCXX_USE_WCHAR_T
end_ifdef

begin_comment
comment|/// 21.1.3.2  char_traits specializations
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
expr|struct
name|char_traits
operator|<
name|wchar_t
operator|>
block|{
typedef|typedef
name|wchar_t
name|char_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|wint_t
name|int_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|streamoff
name|off_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|wstreampos
name|pos_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|mbstate_t
name|state_type
typedef|;
end_typedef

begin_function
specifier|static
name|void
name|assign
parameter_list|(
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
name|__c1
operator|=
name|__c2
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|bool
name|eq
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|==
name|__c2
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|lt
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|<
name|__c2
return|;
block|}
end_function

begin_function
specifier|static
name|int
name|compare
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|wmemcmp
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|,
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|size_t
name|length
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|)
block|{
return|return
name|wcslen
argument_list|(
name|__s
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|const
name|char_type
modifier|*
name|find
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__a
parameter_list|)
block|{
return|return
name|wmemchr
argument_list|(
name|__s
argument_list|,
name|__a
argument_list|,
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|char_type
modifier|*
name|move
parameter_list|(
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|wmemmove
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|,
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|char_type
modifier|*
name|copy
parameter_list|(
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|wmemcpy
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|,
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|char_type
modifier|*
name|assign
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
name|char_type
name|__a
parameter_list|)
block|{
return|return
name|wmemset
argument_list|(
name|__s
argument_list|,
name|__a
argument_list|,
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|char_type
name|to_char_type
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|char_type
argument_list|(
name|__c
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|int_type
name|to_int_type
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|int_type
argument_list|(
name|__c
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|bool
name|eq_int_type
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|int_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|==
name|__c2
return|;
block|}
end_function

begin_function
specifier|static
name|int_type
name|eof
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|int_type
operator|>
operator|(
name|WEOF
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|int_type
name|not_eof
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|eq_int_type
argument_list|(
name|__c
argument_list|,
name|eof
argument_list|()
argument_list|)
condition|?
literal|0
else|:
name|__c
return|;
block|}
end_function

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_comment
comment|//_GLIBCXX_USE_WCHAR_T
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
expr|struct
name|_Char_traits_match
block|{
name|_CharT
name|_M_c
block|;
name|_Char_traits_match
argument_list|(
name|_CharT
specifier|const
operator|&
name|__c
argument_list|)
operator|:
name|_M_c
argument_list|(
argument|__c
argument_list|)
block|{ }
name|bool
name|operator
argument_list|()
operator|(
name|_CharT
specifier|const
operator|&
name|__a
operator|)
block|{
return|return
name|_Traits
operator|::
name|eq
argument_list|(
name|_M_c
argument_list|,
name|__a
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
unit|}; }
comment|// namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

