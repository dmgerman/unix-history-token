begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Deque implementation -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/** @file stl_deque.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_DEQUE_H
end_ifndef

begin_define
define|#
directive|define
name|_DEQUE_H
value|1
end_define

begin_include
include|#
directive|include
file|<bits/concept_check.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_iterator_base_types.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_iterator_base_funcs.h>
end_include

begin_macro
name|_GLIBCXX_BEGIN_NESTED_NAMESPACE
argument_list|(
argument|std
argument_list|,
argument|_GLIBCXX_STD
argument_list|)
end_macro

begin_comment
comment|/**    *  @if maint    *  @brief This function controls the size of memory nodes.    *  @param  size  The size of an element.    *  @return   The number (not byte size) of elements per node.    *    *  This function started off as a compiler kludge from SGI, but seems to    *  be a useful wrapper around a repeated constant expression.  The '512' is    *  tuneable (and no other code needs to change), but no investigation has    *  been done since inheriting the SGI code.    *  @endif   */
end_comment

begin_function
specifier|inline
name|size_t
name|__deque_buf_size
parameter_list|(
name|size_t
name|__size
parameter_list|)
block|{
return|return
name|__size
operator|<
literal|512
condition|?
name|size_t
argument_list|(
literal|512
operator|/
name|__size
argument_list|)
else|:
name|size_t
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    *  @brief A deque::iterator.    *    *  Quite a bit of intelligence here.  Much of the functionality of    *  deque is actually passed off to this class.  A deque holds two    *  of these internally, marking its valid range.  Access to    *  elements is done as offsets of either of those two, relying on    *  operator overloading in this class.    *    *  @if maint    *  All the functions are op overloads except for _M_set_node.    *  @endif   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
expr|struct
name|_Deque_iterator
block|{
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_function
specifier|static
name|size_t
name|_S_buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_typedef
typedef|typedef
name|std
operator|::
name|random_access_iterator_tag
name|iterator_category
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Ptr
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Ref
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
modifier|*
name|_Map_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Deque_iterator
name|_Self
typedef|;
end_typedef

begin_decl_stmt
name|_Tp
modifier|*
name|_M_cur
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Tp
modifier|*
name|_M_first
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Tp
modifier|*
name|_M_last
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Map_pointer
name|_M_node
decl_stmt|;
end_decl_stmt

begin_macro
name|_Deque_iterator
argument_list|(
argument|_Tp* __x
argument_list|,
argument|_Map_pointer __y
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|_M_cur
argument_list|(
name|__x
argument_list|)
operator|,
name|_M_first
argument_list|(
operator|*
name|__y
argument_list|)
operator|,
name|_M_last
argument_list|(
operator|*
name|__y
operator|+
name|_S_buffer_size
argument_list|()
argument_list|)
operator|,
name|_M_node
argument_list|(
argument|__y
argument_list|)
block|{}
name|_Deque_iterator
argument_list|()
operator|:
name|_M_cur
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_first
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_last
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_node
argument_list|(
literal|0
argument_list|)
block|{}
name|_Deque_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|__x
argument_list|)
operator|:
name|_M_cur
argument_list|(
name|__x
operator|.
name|_M_cur
argument_list|)
operator|,
name|_M_first
argument_list|(
name|__x
operator|.
name|_M_first
argument_list|)
operator|,
name|_M_last
argument_list|(
name|__x
operator|.
name|_M_last
argument_list|)
operator|,
name|_M_node
argument_list|(
argument|__x._M_node
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|_M_cur
block|;
if|if
condition|(
name|_M_cur
operator|==
name|_M_last
condition|)
block|{
name|_M_set_node
argument_list|(
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_first
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}        _Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
if|if
condition|(
name|_M_cur
operator|==
name|_M_first
condition|)
block|{
name|_M_set_node
argument_list|(
name|_M_node
operator|-
literal|1
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_last
expr_stmt|;
block|}
operator|--
name|_M_cur
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}        _Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|__n
operator|)
block|{
specifier|const
name|difference_type
name|__offset
operator|=
name|__n
operator|+
operator|(
name|_M_cur
operator|-
name|_M_first
operator|)
block|;
if|if
condition|(
name|__offset
operator|>=
literal|0
operator|&&
name|__offset
operator|<
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
condition|)
name|_M_cur
operator|+=
name|__n
expr_stmt|;
else|else
block|{
specifier|const
name|difference_type
name|__node_offset
init|=
name|__offset
operator|>
literal|0
condition|?
name|__offset
operator|/
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
else|:
operator|-
name|difference_type
argument_list|(
operator|(
operator|-
name|__offset
operator|-
literal|1
operator|)
operator|/
name|_S_buffer_size
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|_M_set_node
argument_list|(
name|_M_node
operator|+
name|__node_offset
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_first
operator|+
operator|(
name|__offset
operator|-
name|__node_offset
operator|*
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}        _Self
name|operator
operator|+
operator|(
name|difference_type
name|__n
operator|)
specifier|const
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|+=
name|__n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|__n
operator|)
block|{
return|return
operator|*
name|this
operator|+=
operator|-
name|__n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|-
operator|(
name|difference_type
name|__n
operator|)
specifier|const
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|-=
name|__n
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|__n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|__n
operator|)
return|;
block|}
end_decl_stmt

begin_comment
comment|/** @if maint        *  Prepares to traverse new_node.  Sets everything except        *  _M_cur, which should therefore be set by the caller        *  immediately afterwards, based on _M_first and _M_last.        *  @endif        */
end_comment

begin_function
name|void
name|_M_set_node
parameter_list|(
name|_Map_pointer
name|__new_node
parameter_list|)
block|{
name|_M_node
operator|=
name|__new_node
expr_stmt|;
name|_M_first
operator|=
operator|*
name|__new_node
expr_stmt|;
name|_M_last
operator|=
name|_M_first
operator|+
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
unit|};
comment|// Note: we also provide overloads whose operands are of the same type in
end_comment

begin_comment
comment|// order to avoid ambiguous overload resolution when std::rel_ops operators
end_comment

begin_comment
comment|// are in scope (for additional details, see libstdc++/3628)
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|_M_cur
operator|==
name|__y
operator|.
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_RefL
operator|,
name|typename
name|_PtrL
operator|,
name|typename
name|_RefR
operator|,
name|typename
name|_PtrR
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefR
operator|,
name|_PtrR
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|_M_cur
operator|==
name|__y
operator|.
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|==
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_RefL
operator|,
name|typename
name|_PtrL
operator|,
name|typename
name|_RefR
operator|,
name|typename
name|_PtrR
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefR
operator|,
name|_PtrR
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|==
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|(
name|__x
operator|.
name|_M_node
operator|==
name|__y
operator|.
name|_M_node
operator|)
operator|?
operator|(
name|__x
operator|.
name|_M_cur
operator|<
name|__y
operator|.
name|_M_cur
operator|)
operator|:
operator|(
name|__x
operator|.
name|_M_node
operator|<
name|__y
operator|.
name|_M_node
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_RefL
operator|,
name|typename
name|_PtrL
operator|,
name|typename
name|_RefR
operator|,
name|typename
name|_PtrR
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefR
operator|,
name|_PtrR
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|(
name|__x
operator|.
name|_M_node
operator|==
name|__y
operator|.
name|_M_node
operator|)
operator|?
operator|(
name|__x
operator|.
name|_M_cur
operator|<
name|__y
operator|.
name|_M_cur
operator|)
operator|:
operator|(
name|__x
operator|.
name|_M_node
operator|<
name|__y
operator|.
name|_M_node
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|<
name|__x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_RefL
operator|,
name|typename
name|_PtrL
operator|,
name|typename
name|_RefR
operator|,
name|typename
name|_PtrR
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefR
operator|,
name|_PtrR
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|<
name|__x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__y
operator|<
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_RefL
operator|,
name|typename
name|_PtrL
operator|,
name|typename
name|_RefR
operator|,
name|typename
name|_PtrR
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefR
operator|,
name|_PtrR
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__y
operator|<
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|<
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_RefL
operator|,
name|typename
name|_PtrL
operator|,
name|typename
name|_RefR
operator|,
name|typename
name|_PtrR
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefR
operator|,
name|_PtrR
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|<
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// _GLIBCXX_RESOLVE_LIB_DEFECTS
end_comment

begin_comment
comment|// According to the resolution of DR179 not only the various comparison
end_comment

begin_comment
comment|// operators but also operator- must accept mixed iterator/const_iterator
end_comment

begin_comment
comment|// parameters.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
specifier|inline
name|typename
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|typename
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|::
name|difference_type
argument_list|(
name|_Deque_iterator
operator|<
name|_Tp
argument_list|,
name|_Ref
argument_list|,
name|_Ptr
operator|>
operator|::
name|_S_buffer_size
argument_list|()
argument_list|)
operator|*
operator|(
name|__x
operator|.
name|_M_node
operator|-
name|__y
operator|.
name|_M_node
operator|-
literal|1
operator|)
operator|+
operator|(
name|__x
operator|.
name|_M_cur
operator|-
name|__x
operator|.
name|_M_first
operator|)
operator|+
operator|(
name|__y
operator|.
name|_M_last
operator|-
name|__y
operator|.
name|_M_cur
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_RefL
operator|,
name|typename
name|_PtrL
operator|,
name|typename
name|_RefR
operator|,
name|typename
name|_PtrR
operator|>
specifier|inline
name|typename
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|::
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefR
operator|,
name|_PtrR
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|typename
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_RefL
operator|,
name|_PtrL
operator|>
operator|::
name|difference_type
argument_list|(
name|_Deque_iterator
operator|<
name|_Tp
argument_list|,
name|_RefL
argument_list|,
name|_PtrL
operator|>
operator|::
name|_S_buffer_size
argument_list|()
argument_list|)
operator|*
operator|(
name|__x
operator|.
name|_M_node
operator|-
name|__y
operator|.
name|_M_node
operator|-
literal|1
operator|)
operator|+
operator|(
name|__x
operator|.
name|_M_cur
operator|-
name|__x
operator|.
name|_M_first
operator|)
operator|+
operator|(
name|__y
operator|.
name|_M_last
operator|-
name|__y
operator|.
name|_M_cur
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Ref
operator|,
name|typename
name|_Ptr
operator|>
specifier|inline
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
name|operator
operator|+
operator|(
name|ptrdiff_t
name|__n
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|)
block|{
return|return
name|__x
operator|+
name|__n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|void
name|fill
argument_list|(
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
argument_list|,
name|_Tp
operator|&
argument_list|,
name|_Tp
operator|*
operator|>
operator|&
name|__first
argument_list|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
argument_list|,
name|_Tp
operator|&
argument_list|,
name|_Tp
operator|*
operator|>
operator|&
name|__last
argument_list|,
specifier|const
name|_Tp
operator|&
name|__value
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**    *  @if maint    *  Deque base class.  This class provides the unified face for %deque's    *  allocation.  This class's constructor and destructor allocate and    *  deallocate (but do not initialize) storage.  This makes %exception    *  safety easier.    *    *  Nothing in this class ever constructs or destroys an actual Tp element.    *  (Deque handles that itself.)  Only/All memory management is performed    *  here.    *  @endif   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|class
name|_Deque_base
block|{
name|public
operator|:
typedef|typedef
name|_Alloc
name|allocator_type
typedef|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|(
name|_M_get_Tp_allocator
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_macro
name|_Deque_base
argument_list|(
argument|const allocator_type& __a
argument_list|,
argument|size_t __num_elements
argument_list|)
end_macro

begin_macro
unit|:
name|_M_impl
argument_list|(
argument|__a
argument_list|)
end_macro

begin_block
block|{
name|_M_initialize_map
argument_list|(
name|__num_elements
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|_Deque_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_M_impl
argument_list|(
argument|__a
argument_list|)
block|{ }
operator|~
name|_Deque_base
argument_list|()
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_comment
comment|//This struct encapsulates the implementation of the std::deque
end_comment

begin_comment
comment|//standard container and at the same time makes use of the EBO
end_comment

begin_comment
comment|//for empty allocators.
end_comment

begin_typedef
typedef|typedef
name|typename
name|_Alloc
operator|::
name|template
name|rebind
operator|<
name|_Tp
operator|*
operator|>
operator|::
name|other
name|_Map_alloc_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Alloc
operator|::
name|template
name|rebind
operator|<
name|_Tp
operator|>
operator|::
name|other
name|_Tp_alloc_type
expr_stmt|;
end_typedef

begin_decl_stmt
name|struct
name|_Deque_impl
range|:
name|public
name|_Tp_alloc_type
block|{
name|_Tp
operator|*
operator|*
name|_M_map
block|;
name|size_t
name|_M_map_size
block|;
name|iterator
name|_M_start
block|;
name|iterator
name|_M_finish
block|;
name|_Deque_impl
argument_list|(
specifier|const
name|_Tp_alloc_type
operator|&
name|__a
argument_list|)
operator|:
name|_Tp_alloc_type
argument_list|(
name|__a
argument_list|)
block|,
name|_M_map
argument_list|(
literal|0
argument_list|)
block|,
name|_M_map_size
argument_list|(
literal|0
argument_list|)
block|,
name|_M_start
argument_list|()
block|,
name|_M_finish
argument_list|()
block|{ }
block|}
decl_stmt|;
end_decl_stmt

begin_function
name|_Tp_alloc_type
modifier|&
name|_M_get_Tp_allocator
parameter_list|()
block|{
return|return
operator|*
name|static_cast
operator|<
name|_Tp_alloc_type
operator|*
operator|>
operator|(
operator|&
name|this
operator|->
name|_M_impl
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|_Tp_alloc_type
operator|&
name|_M_get_Tp_allocator
argument_list|()
specifier|const
block|{
return|return
operator|*
name|static_cast
operator|<
specifier|const
name|_Tp_alloc_type
operator|*
operator|>
operator|(
operator|&
name|this
operator|->
name|_M_impl
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Map_alloc_type
name|_M_get_map_allocator
argument_list|()
specifier|const
block|{
return|return
name|_Map_alloc_type
argument_list|(
name|_M_get_Tp_allocator
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|_Tp
modifier|*
name|_M_allocate_node
parameter_list|()
block|{
return|return
name|_M_impl
operator|.
name|_Tp_alloc_type
operator|::
name|allocate
argument_list|(
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_node
parameter_list|(
name|_Tp
modifier|*
name|__p
parameter_list|)
block|{
name|_M_impl
operator|.
name|_Tp_alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|_Tp
modifier|*
modifier|*
name|_M_allocate_map
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|_M_get_map_allocator
argument_list|()
operator|.
name|allocate
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_map
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__p
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
name|_M_get_map_allocator
argument_list|()
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__n
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_function_decl
name|void
name|_M_initialize_map
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_create_nodes
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__nstart
parameter_list|,
name|_Tp
modifier|*
modifier|*
name|__nfinish
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_destroy_nodes
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__nstart
parameter_list|,
name|_Tp
modifier|*
modifier|*
name|__nfinish
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
block|{
name|_S_initial_map_size
init|=
literal|8
block|}
enum|;
end_enum

begin_decl_stmt
name|_Deque_impl
name|_M_impl
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
operator|~
name|_Deque_base
argument_list|()
block|{
if|if
condition|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
condition|)
block|{
name|_M_destroy_nodes
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_node
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|_M_deallocate_map
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_map_size
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|/**    *  @if maint    *  @brief Layout storage.    *  @param  num_elements  The count of T's for which to allocate space    *                        at first.    *  @return   Nothing.    *    *  The initial underlying memory layout is a bit complicated...    *  @endif   */
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_initialize_map
argument_list|(
argument|size_t __num_elements
argument_list|)
block|{
specifier|const
name|size_t
name|__num_nodes
operator|=
operator|(
name|__num_elements
operator|/
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
operator|+
literal|1
operator|)
block|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_map_size
operator|=
name|std
operator|::
name|max
argument_list|(
operator|(
name|size_t
operator|)
name|_S_initial_map_size
argument_list|,
name|size_t
argument_list|(
name|__num_nodes
operator|+
literal|2
argument_list|)
argument_list|)
block|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
operator|=
name|_M_allocate_map
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_map_size
argument_list|)
block|;
comment|// For "small" maps (needing less than _M_map_size nodes), allocation
comment|// starts in the middle elements and grows outwards.  So nstart may be
comment|// the beginning of _M_map, but for small maps it may be as far in as
comment|// _M_map+3.
name|_Tp
operator|*
operator|*
name|__nstart
operator|=
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
operator|+
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_map_size
operator|-
name|__num_nodes
operator|)
operator|/
literal|2
operator|)
block|;
name|_Tp
operator|*
operator|*
name|__nfinish
operator|=
name|__nstart
operator|+
name|__num_nodes
block|;
name|try
block|{
name|_M_create_nodes
argument_list|(
name|__nstart
argument_list|,
name|__nfinish
argument_list|)
block|; }
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_deallocate_map
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_map_size
argument_list|)
block|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
operator|=
literal|0
block|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_map_size
operator|=
literal|0
block|;
name|__throw_exception_again
block|; 	}
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|__nstart
argument_list|)
block|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|__nfinish
operator|-
literal|1
argument_list|)
block|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_first
block|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_cur
operator|=
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_first
operator|+
name|__num_elements
operator|%
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
operator|)
block|;     }
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_create_nodes
argument_list|(
argument|_Tp** __nstart
argument_list|,
argument|_Tp** __nfinish
argument_list|)
block|{
name|_Tp
operator|*
operator|*
name|__cur
block|;
name|try
block|{
for|for
control|(
name|__cur
operator|=
name|__nstart
init|;
name|__cur
operator|<
name|__nfinish
condition|;
operator|++
name|__cur
control|)
operator|*
name|__cur
operator|=
name|this
operator|->
name|_M_allocate_node
argument_list|()
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_destroy_nodes
argument_list|(
name|__nstart
argument_list|,
name|__cur
argument_list|)
block|;
name|__throw_exception_again
block|; 	}
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_destroy_nodes
argument_list|(
argument|_Tp** __nstart
argument_list|,
argument|_Tp** __nfinish
argument_list|)
block|{
for|for
control|(
name|_Tp
modifier|*
modifier|*
name|__n
init|=
name|__nstart
init|;
name|__n
operator|<
name|__nfinish
condition|;
operator|++
name|__n
control|)
name|_M_deallocate_node
argument_list|(
operator|*
name|__n
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  @brief  A standard container using fixed-size memory allocation and    *  constant-time manipulation of elements at either end.    *    *  @ingroup Containers    *  @ingroup Sequences    *    *  Meets the requirements of a<a href="tables.html#65">container</a>, a    *<a href="tables.html#66">reversible container</a>, and a    *<a href="tables.html#67">sequence</a>, including the    *<a href="tables.html#68">optional sequence requirements</a>.    *    *  In previous HP/SGI versions of deque, there was an extra template    *  parameter so users could control the node size.  This extension turned    *  out to violate the C++ standard (it can be detected using template    *  template parameters), and it was removed.    *    *  @if maint    *  Here's how a deque<Tp> manages memory.  Each deque has 4 members:    *    *  - Tp**        _M_map    *  - size_t      _M_map_size    *  - iterator    _M_start, _M_finish    *    *  map_size is at least 8.  %map is an array of map_size    *  pointers-to-"nodes".  (The name %map has nothing to do with the    *  std::map class, and "nodes" should not be confused with    *  std::list's usage of "node".)    *    *  A "node" has no specific type name as such, but it is referred    *  to as "node" in this file.  It is a simple array-of-Tp.  If Tp    *  is very large, there will be one Tp element per node (i.e., an    *  "array" of one).  For non-huge Tp's, node size is inversely    *  related to Tp size: the larger the Tp, the fewer Tp's will fit    *  in a node.  The goal here is to keep the total size of a node    *  relatively small and constant over different Tp's, to improve    *  allocator efficiency.    *    *  Not every pointer in the %map array will point to a node.  If    *  the initial number of elements in the deque is small, the    *  /middle/ %map pointers will be valid, and the ones at the edges    *  will be unused.  This same situation will arise as the %map    *  grows: available %map pointers, if any, will be on the ends.  As    *  new nodes are created, only a subset of the %map's pointers need    *  to be copied "outward".    *    *  Class invariants:    * - For any nonsingular iterator i:    *    - i.node points to a member of the %map array.  (Yes, you read that    *      correctly:  i.node does not actually point to a node.)  The member of    *      the %map array is what actually points to the node.    *    - i.first == *(i.node)    (This points to the node (first Tp element).)    *    - i.last  == i.first + node_size    *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:    *      the implication of this is that i.cur is always a dereferenceable    *      pointer, even if i is a past-the-end iterator.    * - Start and Finish are always nonsingular iterators.  NOTE: this    * means that an empty deque must have one node, a deque with<N    * elements (where N is the node buffer size) must have one node, a    * deque with N through (2N-1) elements must have two nodes, etc.    * - For every node other than start.node and finish.node, every    * element in the node is an initialized object.  If start.node ==    * finish.node, then [start.cur, finish.cur) are initialized    * objects, and the elements outside that range are uninitialized    * storage.  Otherwise, [start.cur, start.last) and [finish.first,    * finish.cur) are initialized objects, and [start.first, start.cur)    * and [finish.cur, finish.last) are uninitialized storage.    * - [%map, %map + map_size) is a valid, non-empty range.    * - [start.node, finish.node] is a valid range contained within    *   [%map, %map + map_size).    * - A pointer in the range [%map, %map + map_size) points to an allocated    *   node if and only if the pointer is in the range    *   [start.node, finish.node].    *    *  Here's the magic:  nothing in deque is "aware" of the discontiguous    *  storage!    *    *  The memory setup and layout occurs in the parent, _Base, and the iterator    *  class is entirely responsible for "leaping" from one node to the next.    *  All the implementation routines for deque itself work only through the    *  start and finish iterators.  This keeps the routines simple and sane,    *  and we can use other standard algorithms as well.    *  @endif   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|=
name|std
operator|::
name|allocator
operator|<
name|_Tp
operator|>
expr|>
name|class
name|deque
operator|:
name|protected
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
block|{
comment|// concept requirements
typedef|typedef
name|typename
name|_Alloc
operator|::
name|value_type
name|_Alloc_value_type
expr_stmt|;
name|__glibcxx_class_requires
argument_list|(
argument|_Tp
argument_list|,
argument|_SGIAssignableConcept
argument_list|)
name|__glibcxx_class_requires2
argument_list|(
argument|_Tp
argument_list|,
argument|_Alloc_value_type
argument_list|,
argument|_SameTypeConcept
argument_list|)
end_expr_stmt

begin_typedef
typedef|typedef
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|_Tp_alloc_type
name|_Tp_alloc_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Tp_alloc_type
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Tp_alloc_type
operator|::
name|const_pointer
name|const_pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Tp_alloc_type
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Tp_alloc_type
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|iterator
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Alloc
name|allocator_type
typedef|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_typedef
typedef|typedef
name|pointer
modifier|*
name|_Map_pointer
typedef|;
end_typedef

begin_function
specifier|static
name|size_t
name|_S_buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// Functions controlling memory layout, and nothing else.
end_comment

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_initialize_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_create_nodes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_destroy_nodes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_allocate_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_deallocate_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_allocate_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_deallocate_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_get_Tp_allocator
expr_stmt|;
end_expr_stmt

begin_comment
comment|/** @if maint        *  A total of four data members accumulated down the heirarchy.        *  May be accessed via _M_impl.*        *  @endif        */
end_comment

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_impl
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|// [23.2.1.1] construct/copy/destroy
end_comment

begin_comment
comment|// (assign() and get_allocator() are also listed in this section)
end_comment

begin_comment
comment|/**        *  @brief  Default constructor creates no elements.        */
end_comment

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|deque
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
literal|0
argument_list|)
block|{}
comment|/**        *  @brief  Create a %deque with copies of an exemplar element.        *  @param  n  The number of elements to initially create.        *  @param  value  An element to copy.        *        *  This constructor fills the %deque with @a n copies of @a value.        */
name|explicit
name|deque
argument_list|(
argument|size_type __n
argument_list|,
argument|const value_type& __value = value_type()
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__n
argument_list|)
block|{
name|_M_fill_initialize
argument_list|(
name|__value
argument_list|)
block|; }
comment|/**        *  @brief  %Deque copy constructor.        *  @param  x  A %deque of identical element and allocator types.        *        *  The newly-created %deque uses a copy of the allocation object used        *  by @a x.        */
name|deque
argument_list|(
specifier|const
name|deque
operator|&
name|__x
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__x._M_get_Tp_allocator()
argument_list|,
argument|__x.size()
argument_list|)
block|{
name|std
operator|::
name|__uninitialized_copy_a
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
argument_list|,
name|_M_get_Tp_allocator
argument_list|()
argument_list|)
block|; }
comment|/**        *  @brief  Builds a %deque from a range.        *  @param  first  An input iterator.        *  @param  last  An input iterator.        *        *  Create a %deque consisting of copies of the elements from [first,        *  last).        *        *  If the iterators are forward, bidirectional, or random-access, then        *  this will call the elements' copy constructor N times (where N is        *  distance(first,last)) and do no memory reallocation.  But if only        *  input iterators are used, then this will do at most 2N calls to the        *  copy constructor, and logN memory reallocations.        */
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|deque
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
comment|// Check whether it's an integral type.  If so, it's not an iterator.
typedef|typedef
name|typename
name|std
operator|::
name|__is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|__type
name|_Integral
expr_stmt|;
name|_M_initialize_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**        *  The dtor only erases the elements, and note that if the elements        *  themselves are pointers, the pointed-to memory is not touched in any        *  way.  Managing the pointer is the user's responsibilty.        */
end_comment

begin_macro
unit|~
name|deque
argument_list|()
end_macro

begin_block
block|{
name|_M_destroy_data
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|_M_get_Tp_allocator
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_comment
comment|/**        *  @brief  %Deque assignment operator.        *  @param  x  A %deque of identical element and allocator types.        *        *  All the elements of @a x are copied, but unlike the copy constructor,        *  the allocator object is not copied.        */
end_comment

begin_decl_stmt
name|deque
modifier|&
name|operator
init|=
operator|(
specifier|const
name|deque
operator|&
name|__x
operator|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**        *  @brief  Assigns a given value to a %deque.        *  @param  n  Number of elements to be assigned.        *  @param  val  Value to be assigned.        *        *  This function fills a %deque with @a n copies of the given        *  value.  Note that the assignment completely changes the        *  %deque and that the resulting %deque's size is the same as        *  the number of elements assigned.  Old data may be lost.        */
end_comment

begin_function
name|void
name|assign
parameter_list|(
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__val
parameter_list|)
block|{
name|_M_fill_assign
argument_list|(
name|__n
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**        *  @brief  Assigns a range to a %deque.        *  @param  first  An input iterator.        *  @param  last   An input iterator.        *        *  This function fills a %deque with copies of the elements in the        *  range [first,last).        *        *  Note that the assignment completely changes the %deque and that the        *  resulting %deque's size is the same as the number of elements        *  assigned.  Old data may be lost.        */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|assign
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|__type
name|_Integral
expr_stmt|;
name|_M_assign_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/// Get a copy of the memory allocation object.
end_comment

begin_macro
unit|allocator_type
name|get_allocator
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|_Base
operator|::
name|get_allocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|// iterators
end_comment

begin_comment
comment|/**        *  Returns a read/write iterator that points to the first element in the        *  %deque.  Iteration is done in ordinary element order.        */
end_comment

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
return|;
block|}
end_function

begin_comment
comment|/**        *  Returns a read-only (constant) iterator that points to the first        *  element in the %deque.  Iteration is done in ordinary element order.        */
end_comment

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  Returns a read/write iterator that points one past the last        *  element in the %deque.  Iteration is done in ordinary        *  element order.        */
end_comment

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
return|;
block|}
end_function

begin_comment
comment|/**        *  Returns a read-only (constant) iterator that points one past        *  the last element in the %deque.  Iteration is done in        *  ordinary element order.        */
end_comment

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  Returns a read/write reverse iterator that points to the        *  last element in the %deque.  Iteration is done in reverse        *  element order.        */
end_comment

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**        *  Returns a read-only (constant) reverse iterator that points        *  to the last element in the %deque.  Iteration is done in        *  reverse element order.        */
end_comment

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  Returns a read/write reverse iterator that points to one        *  before the first element in the %deque.  Iteration is done        *  in reverse element order.        */
end_comment

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**        *  Returns a read-only (constant) reverse iterator that points        *  to one before the first element in the %deque.  Iteration is        *  done in reverse element order.        */
end_comment

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// [23.2.1.2] capacity
end_comment

begin_comment
comment|/**  Returns the number of elements in the %deque.  */
end_comment

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|-
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
return|;
block|}
end_expr_stmt

begin_comment
comment|/**  Returns the size() of the largest possible %deque.  */
end_comment

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|_M_get_Tp_allocator
argument_list|()
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  @brief  Resizes the %deque to the specified number of elements.        *  @param  new_size  Number of elements the %deque should contain.        *  @param  x  Data with which new elements should be populated.        *        *  This function will %resize the %deque to the specified        *  number of elements.  If the number is smaller than the        *  %deque's current size the %deque is truncated, otherwise the        *  %deque is extended and new elements are populated with given        *  data.        */
end_comment

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|__new_size
parameter_list|,
name|value_type
name|__x
init|=
name|value_type
argument_list|()
parameter_list|)
block|{
specifier|const
name|size_type
name|__len
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|__new_size
operator|<
name|__len
condition|)
name|_M_erase_at_end
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|+
name|difference_type
argument_list|(
name|__new_size
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
argument_list|,
name|__new_size
operator|-
name|__len
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**        *  Returns true if the %deque is empty.  (Thus begin() would        *  equal end().)        */
end_comment

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|==
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
return|;
block|}
end_expr_stmt

begin_comment
comment|// element access
end_comment

begin_comment
comment|/**        *  @brief Subscript access to the data contained in the %deque.        *  @param n The index of the element for which data should be        *  accessed.        *  @return  Read/write reference to data.        *        *  This operator allows for easy, array-style, data access.        *  Note that data access with this operator is unchecked and        *  out_of_range lookups are not defined. (For checked lookups        *  see at().)        */
end_comment

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
index|[
name|difference_type
argument_list|(
name|__n
argument_list|)
index|]
return|;
block|}
end_function

begin_comment
comment|/**        *  @brief Subscript access to the data contained in the %deque.        *  @param n The index of the element for which data should be        *  accessed.        *  @return  Read-only (constant) reference to data.        *        *  This operator allows for easy, array-style, data access.        *  Note that data access with this operator is unchecked and        *  out_of_range lookups are not defined. (For checked lookups        *  see at().)        */
end_comment

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
index|[
name|difference_type
argument_list|(
name|__n
argument_list|)
index|]
return|;
block|}
end_decl_stmt

begin_label
name|protected
label|:
end_label

begin_comment
comment|/// @if maint Safety check used only from at().  @endif
end_comment

begin_decl_stmt
name|void
name|_M_range_check
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
if|if
condition|(
name|__n
operator|>=
name|this
operator|->
name|size
argument_list|()
condition|)
name|__throw_out_of_range
argument_list|(
name|__N
argument_list|(
literal|"deque::_M_range_check"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|/**        *  @brief  Provides access to the data contained in the %deque.        *  @param n The index of the element for which data should be        *  accessed.        *  @return  Read/write reference to data.        *  @throw  std::out_of_range  If @a n is an invalid index.        *        *  This function provides for safer data access.  The parameter        *  is first checked that it is in the range of the deque.  The        *  function throws out_of_range if the check fails.        */
end_comment

begin_function
name|reference
name|at
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|_M_range_check
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|__n
index|]
return|;
block|}
end_function

begin_comment
comment|/**        *  @brief  Provides access to the data contained in the %deque.        *  @param n The index of the element for which data should be        *  accessed.        *  @return  Read-only (constant) reference to data.        *  @throw  std::out_of_range  If @a n is an invalid index.        *        *  This function provides for safer data access.  The parameter is first        *  checked that it is in the range of the deque.  The function throws        *  out_of_range if the check fails.        */
end_comment

begin_decl_stmt
name|const_reference
name|at
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
name|_M_range_check
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|__n
index|]
return|;
block|}
end_decl_stmt

begin_comment
comment|/**        *  Returns a read/write reference to the data at the first        *  element of the %deque.        */
end_comment

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**        *  Returns a read-only (constant) reference to the data at the first        *  element of the %deque.        */
end_comment

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|/**        *  Returns a read/write reference to the data at the last element of the        *  %deque.        */
end_comment

begin_function
name|reference
name|back
parameter_list|()
block|{
name|iterator
name|__tmp
init|=
name|end
argument_list|()
decl_stmt|;
operator|--
name|__tmp
expr_stmt|;
return|return
operator|*
name|__tmp
return|;
block|}
end_function

begin_comment
comment|/**        *  Returns a read-only (constant) reference to the data at the last        *  element of the %deque.        */
end_comment

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
name|const_iterator
name|__tmp
operator|=
name|end
argument_list|()
block|;
operator|--
name|__tmp
block|;
return|return
operator|*
name|__tmp
return|;
block|}
end_expr_stmt

begin_comment
comment|// [23.2.1.2] modifiers
end_comment

begin_comment
comment|/**        *  @brief  Add data to the front of the %deque.        *  @param  x  Data to be added.        *        *  This is a typical stack operation.  The function creates an        *  element at the front of the %deque and assigns the given        *  data to it.  Due to the nature of a %deque this operation        *  can be done in constant time.        */
end_comment

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
if|if
condition|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_cur
operator|!=
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_first
condition|)
block|{
name|this
operator|->
name|_M_impl
operator|.
name|construct
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_cur
operator|-
literal|1
argument_list|,
name|__x
argument_list|)
expr_stmt|;
operator|--
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_front_aux
argument_list|(
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**        *  @brief  Add data to the end of the %deque.        *  @param  x  Data to be added.        *        *  This is a typical stack operation.  The function creates an        *  element at the end of the %deque and assigns the given data        *  to it.  Due to the nature of a %deque this operation can be        *  done in constant time.        */
end_comment

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
if|if
condition|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_cur
operator|!=
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_last
operator|-
literal|1
condition|)
block|{
name|this
operator|->
name|_M_impl
operator|.
name|construct
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_cur
argument_list|,
name|__x
argument_list|)
expr_stmt|;
operator|++
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_back_aux
argument_list|(
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**        *  @brief  Removes first element.        *        *  This is a typical stack operation.  It shrinks the %deque by one.        *        *  Note that no data is returned, and if the first element's data is        *  needed, it should be retrieved before pop_front() is called.        */
end_comment

begin_function
name|void
name|pop_front
parameter_list|()
block|{
if|if
condition|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_cur
operator|!=
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_last
operator|-
literal|1
condition|)
block|{
name|this
operator|->
name|_M_impl
operator|.
name|destroy
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
operator|++
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_pop_front_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**        *  @brief  Removes last element.        *        *  This is a typical stack operation.  It shrinks the %deque by one.        *        *  Note that no data is returned, and if the last element's data is        *  needed, it should be retrieved before pop_back() is called.        */
end_comment

begin_function
name|void
name|pop_back
parameter_list|()
block|{
if|if
condition|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_cur
operator|!=
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_first
condition|)
block|{
operator|--
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_cur
expr_stmt|;
name|this
operator|->
name|_M_impl
operator|.
name|destroy
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
block|}
else|else
name|_M_pop_back_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
comment|/**        *  @brief  Inserts given value into %deque before specified iterator.        *  @param  position  An iterator into the %deque.        *  @param  x  Data to be inserted.        *  @return  An iterator that points to the inserted data.        *        *  This function will insert a copy of the given value before the        *  specified location.        */
end_comment

begin_function_decl
name|iterator
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**        *  @brief  Inserts a number of copies of given data into the %deque.        *  @param  position  An iterator into the %deque.        *  @param  n  Number of elements to be inserted.        *  @param  x  Data to be inserted.        *        *  This function will insert a specified number of copies of the given        *  data before the location specified by @a position.        */
end_comment

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
name|_M_fill_insert
argument_list|(
name|__position
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**        *  @brief  Inserts a range into the %deque.        *  @param  position  An iterator into the %deque.        *  @param  first  An input iterator.        *  @param  last   An input iterator.        *        *  This function will insert copies of the data in the range        *  [first,last) into the %deque before the location specified        *  by @a pos.  This is known as "range insert."        */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __position
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
comment|// Check whether it's an integral type.  If so, it's not an iterator.
typedef|typedef
name|typename
name|std
operator|::
name|__is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|__type
name|_Integral
expr_stmt|;
name|_M_insert_dispatch
argument_list|(
name|__position
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**        *  @brief  Remove element at given position.        *  @param  position  Iterator pointing to element to be erased.        *  @return  An iterator pointing to the next element (or end()).        *        *  This function will erase the element at the given position and thus        *  shorten the %deque by one.        *        *  The user is cautioned that        *  this function only erases the element, and that if the element is        *  itself a pointer, the pointed-to memory is not touched in any way.        *  Managing the pointer is the user's responsibilty.        */
end_comment

begin_macro
unit|iterator
name|erase
argument_list|(
argument|iterator __position
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|/**        *  @brief  Remove a range of elements.        *  @param  first  Iterator pointing to the first element to be erased.        *  @param  last  Iterator pointing to one past the last element to be        *                erased.        *  @return  An iterator pointing to the element pointed to by @a last        *           prior to erasing (or end()).        *        *  This function will erase the elements in the range [first,last) and        *  shorten the %deque accordingly.        *        *  The user is cautioned that        *  this function only erases the elements, and that if the elements        *  themselves are pointers, the pointed-to memory is not touched in any        *  way.  Managing the pointer is the user's responsibilty.        */
end_comment

begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/**        *  @brief  Swaps data with another %deque.        *  @param  x  A %deque of the same element and allocator types.        *        *  This exchanges the elements between two deques in constant time.        *  (Four pointers, so it should be quite fast.)        *  Note that the global std::swap() function is specialized such that        *  std::swap(d1,d2) will feed to this function.        */
end_comment

begin_function
name|void
name|swap
parameter_list|(
name|deque
modifier|&
name|__x
parameter_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
argument_list|,
name|__x
operator|.
name|_M_impl
operator|.
name|_M_start
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
argument_list|,
name|__x
operator|.
name|_M_impl
operator|.
name|_M_finish
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
argument_list|,
name|__x
operator|.
name|_M_impl
operator|.
name|_M_map
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_map_size
argument_list|,
name|__x
operator|.
name|_M_impl
operator|.
name|_M_map_size
argument_list|)
expr_stmt|;
comment|// _GLIBCXX_RESOLVE_LIB_DEFECTS
comment|// 431. Swapping containers with unequal allocators.
name|std
operator|::
name|__alloc_swap
operator|<
name|_Tp_alloc_type
operator|>
operator|::
name|_S_do_it
argument_list|(
name|_M_get_Tp_allocator
argument_list|()
argument_list|,
name|__x
operator|.
name|_M_get_Tp_allocator
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**        *  Erases all the elements.  Note that this function only erases the        *  elements, and that if the elements themselves are pointers, the        *  pointed-to memory is not touched in any way.  Managing the pointer is        *  the user's responsibilty.        */
end_comment

begin_function
name|void
name|clear
parameter_list|()
block|{
name|_M_erase_at_end
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal constructor functions follow.
end_comment

begin_comment
comment|// called by the range constructor to implement [23.1.1]/9
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Integer
operator|>
name|void
name|_M_initialize_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_initialize_map
argument_list|(
name|__n
argument_list|)
block|;
name|_M_fill_initialize
argument_list|(
name|__x
argument_list|)
block|; 	}
comment|// called by the range constructor to implement [23.1.1]/9
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_initialize_dispatch
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|_M_range_initialize
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// called by the second initialize_dispatch above
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|/**        *  @if maint        *  @brief Fills the deque with whatever is in [first,last).        *  @param  first  An input iterator.        *  @param  last  An input iterator.        *  @return   Nothing.        *        *  If the iterators are actually forward iterators (or better), then the        *  memory layout can be done all at once.  Else we move forward using        *  push_back on each value from the iterator.        *  @endif        */
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_range_initialize
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|std::input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// called by the second initialize_dispatch above
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_ForwardIterator
operator|>
name|void
name|_M_range_initialize
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|std::forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|/**        *  @if maint        *  @brief Fills the %deque with copies of value.        *  @param  value  Initial value.        *  @return   Nothing.        *  @pre _M_start and _M_finish have already been initialized,        *  but none of the %deque's elements have yet been constructed.        *        *  This function is called only when the user provides an explicit size        *  (with or without an explicit exemplar value).        *  @endif        */
end_comment

begin_function_decl
name|void
name|_M_fill_initialize
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__value
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// Internal assign functions follow.  The *_aux functions do the actual
end_comment

begin_comment
comment|// assignment work for the range versions.
end_comment

begin_comment
comment|// called by the range assign to implement [23.1.1]/9
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Integer
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __val
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_assign
argument_list|(
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__n
operator|)
argument_list|,
name|static_cast
operator|<
name|value_type
operator|>
operator|(
name|__val
operator|)
argument_list|)
block|; 	}
comment|// called by the range assign to implement [23.1.1]/9
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|_M_assign_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// called by the second assign_dispatch above
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|std::input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// called by the second assign_dispatch above
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_ForwardIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|std::forward_iterator_tag
argument_list|)
block|{
specifier|const
name|size_type
name|__len
operator|=
name|std
operator|::
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|__len
operator|>
name|size
argument_list|()
condition|)
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|std
operator|::
name|advance
argument_list|(
name|__mid
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__mid
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|_M_erase_at_end
argument_list|(
name|std
operator|::
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|begin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
end_else

begin_comment
unit|}
comment|// Called by assign(n,t), and the range assign when it turns out
end_comment

begin_comment
comment|// to be the same thing.
end_comment

begin_macro
unit|void
name|_M_fill_assign
argument_list|(
argument|size_type __n
argument_list|,
argument|const value_type& __val
argument_list|)
end_macro

begin_block
block|{
if|if
condition|(
name|__n
operator|>
name|size
argument_list|()
condition|)
block|{
name|std
operator|::
name|fill
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__n
operator|-
name|size
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_M_erase_at_end
argument_list|(
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
name|std
operator|::
name|fill
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_comment
comment|//@{
end_comment

begin_comment
comment|/**        *  @if maint        *  @brief Helper functions for push_* and pop_*.        *  @endif        */
end_comment

begin_function_decl
name|void
name|_M_push_back_aux
parameter_list|(
specifier|const
name|value_type
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_push_front_aux
parameter_list|(
specifier|const
name|value_type
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_pop_back_aux
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_pop_front_aux
parameter_list|()
function_decl|;
end_function_decl

begin_comment
comment|//@}
end_comment

begin_comment
comment|// Internal insert functions follow.  The *_aux functions do the actual
end_comment

begin_comment
comment|// insertion work when all shortcuts fail.
end_comment

begin_comment
comment|// called by the range insert to implement [23.1.1]/9
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Integer
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_insert
argument_list|(
name|__pos
argument_list|,
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__n
operator|)
argument_list|,
name|static_cast
operator|<
name|value_type
operator|>
operator|(
name|__x
operator|)
argument_list|)
block|; 	}
comment|// called by the range insert to implement [23.1.1]/9
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|std
operator|::
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|_M_range_insert_aux
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// called by the second insert_dispatch above
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_range_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|std::input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// called by the second insert_dispatch above
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_ForwardIterator
operator|>
name|void
name|_M_range_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|std::forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Called by insert(p,n,x), and the range insert when it turns out to be
end_comment

begin_comment
comment|// the same thing.  Can use fill functions in optimal situations,
end_comment

begin_comment
comment|// otherwise passes off to insert_aux(p,n,x).
end_comment

begin_function_decl
name|void
name|_M_fill_insert
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// called by insert(p,x)
end_comment

begin_function_decl
name|iterator
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// called by insert(p,n,x) via fill_insert
end_comment

begin_function_decl
name|void
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// called by range_insert_aux for forward iterators
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_ForwardIterator
operator|>
name|void
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|size_type __n
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Internal erase functions follow.
end_comment

begin_function_decl
name|void
name|_M_destroy_data_aux
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|_M_destroy_data_dispatch
parameter_list|(
name|iterator
parameter_list|,
name|iterator
parameter_list|,
name|__true_type
parameter_list|)
block|{ }
end_function

begin_function
name|void
name|_M_destroy_data_dispatch
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|,
name|__false_type
parameter_list|)
block|{
name|_M_destroy_data_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// Called by ~deque().
end_comment

begin_comment
comment|// NB: Doesn't deallocate the nodes.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Alloc1
operator|>
name|void
name|_M_destroy_data
argument_list|(
argument|iterator __first
argument_list|,
argument|iterator __last
argument_list|,
argument|const _Alloc1&
argument_list|)
block|{
name|_M_destroy_data_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|; }
name|void
name|_M_destroy_data
argument_list|(
argument|iterator __first
argument_list|,
argument|iterator __last
argument_list|,
argument|const std::allocator<_Tp>&
argument_list|)
block|{
typedef|typedef
name|typename
name|std
operator|::
name|__is_scalar
operator|<
name|value_type
operator|>
operator|::
name|__type
name|_Has_trivial_destructor
expr_stmt|;
name|_M_destroy_data_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Has_trivial_destructor
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Called by erase(q1, q2).
end_comment

begin_macro
unit|void
name|_M_erase_at_begin
argument_list|(
argument|iterator __pos
argument_list|)
end_macro

begin_block
block|{
name|_M_destroy_data
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__pos
argument_list|,
name|_M_get_Tp_allocator
argument_list|()
argument_list|)
expr_stmt|;
name|_M_destroy_nodes
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_node
argument_list|,
name|__pos
operator|.
name|_M_node
argument_list|)
expr_stmt|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|=
name|__pos
expr_stmt|;
block|}
end_block

begin_comment
comment|// Called by erase(q1, q2), resize(), clear(), _M_assign_aux,
end_comment

begin_comment
comment|// _M_fill_assign, operator=.
end_comment

begin_function
name|void
name|_M_erase_at_end
parameter_list|(
name|iterator
name|__pos
parameter_list|)
block|{
name|_M_destroy_data
argument_list|(
name|__pos
argument_list|,
name|end
argument_list|()
argument_list|,
name|_M_get_Tp_allocator
argument_list|()
argument_list|)
expr_stmt|;
name|_M_destroy_nodes
argument_list|(
name|__pos
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|=
name|__pos
expr_stmt|;
block|}
end_function

begin_comment
comment|//@{
end_comment

begin_comment
comment|/**        *  @if maint        *  @brief Memory-handling helpers for the previous internal insert        *         functions.        *  @endif        */
end_comment

begin_function
name|iterator
name|_M_reserve_elements_at_front
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
specifier|const
name|size_type
name|__vacancies
init|=
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_cur
operator|-
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_first
decl_stmt|;
if|if
condition|(
name|__n
operator|>
name|__vacancies
condition|)
name|_M_new_elements_at_front
argument_list|(
name|__n
operator|-
name|__vacancies
argument_list|)
expr_stmt|;
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|_M_reserve_elements_at_back
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
specifier|const
name|size_type
name|__vacancies
init|=
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_last
operator|-
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_cur
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|__n
operator|>
name|__vacancies
condition|)
name|_M_new_elements_at_back
argument_list|(
name|__n
operator|-
name|__vacancies
argument_list|)
expr_stmt|;
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|_M_new_elements_at_front
parameter_list|(
name|size_type
name|__new_elements
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_new_elements_at_back
parameter_list|(
name|size_type
name|__new_elements
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//@}
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|/**        *  @if maint        *  @brief Memory-handling helpers for the major %map.        *        *  Makes sure the _M_map has space for new nodes.  Does not        *  actually add the nodes.  Can invalidate _M_map pointers.        *  (And consequently, %deque iterators.)        *  @endif        */
end_comment

begin_function
name|void
name|_M_reserve_map_at_back
parameter_list|(
name|size_type
name|__nodes_to_add
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|__nodes_to_add
operator|+
literal|1
operator|>
name|this
operator|->
name|_M_impl
operator|.
name|_M_map_size
operator|-
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_finish
operator|.
name|_M_node
operator|-
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
operator|)
condition|)
name|_M_reallocate_map
argument_list|(
name|__nodes_to_add
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|_M_reserve_map_at_front
parameter_list|(
name|size_type
name|__nodes_to_add
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|__nodes_to_add
operator|>
name|size_type
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_start
operator|.
name|_M_node
operator|-
name|this
operator|->
name|_M_impl
operator|.
name|_M_map
argument_list|)
condition|)
name|_M_reallocate_map
argument_list|(
name|__nodes_to_add
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|_M_reallocate_map
parameter_list|(
name|size_type
name|__nodes_to_add
parameter_list|,
name|bool
name|__add_at_front
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//@}
end_comment

begin_comment
unit|};
comment|/**    *  @brief  Deque equality comparison.    *  @param  x  A %deque.    *  @param  y  A %deque of the same type as @a x.    *  @return  True iff the size and elements of the deques are equal.    *    *  This is an equivalence relation.  It is linear in the size of the    *  deques.  Deques are considered equivalent if their sizes are equal,    *  and if corresponding elements compare equal.   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|size
argument_list|()
operator|==
name|__y
operator|.
name|size
argument_list|()
operator|&&
name|std
operator|::
name|equal
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/**    *  @brief  Deque ordering relation.    *  @param  x  A %deque.    *  @param  y  A %deque of the same type as @a x.    *  @return  True iff @a x is lexicographically less than @a y.    *    *  This is a total ordering relation.  It is linear in the size of the    *  deques.  The elements must be comparable with @c<.    *    *  See std::lexicographical_compare() for how the determination is made.   */
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|std
operator|::
name|lexicographical_compare
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|,
name|__y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Based on operator==
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|==
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Based on operator<
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|<
name|__x
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Based on operator<
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__y
operator|<
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// Based on operator<
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|<
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/// See std::deque::swap().
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|deque<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|deque<_Tp
argument_list|,
argument|_Alloc>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
name|_GLIBCXX_END_NESTED_NAMESPACE
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _DEQUE_H */
end_comment

end_unit

