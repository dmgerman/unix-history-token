begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// deque implementation -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2001, 2002 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/** @file stl_deque.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_include
include|#
directive|include
file|<bits/concept_check.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_iterator_base_types.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_iterator_base_funcs.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__GLIBCPP_INTERNAL_DEQUE_H
end_ifndef

begin_define
define|#
directive|define
name|__GLIBCPP_INTERNAL_DEQUE_H
end_define

begin_comment
comment|// Since this entire file is within namespace std, there's no reason to
end_comment

begin_comment
comment|// waste two spaces along the left column.  Thus the leading indentation is
end_comment

begin_comment
comment|// slightly violated from here on.
end_comment

begin_decl_stmt
name|namespace
name|std
block|{
comment|/**  *  @if maint  *  @brief This function controls the size of memory nodes.  *  @param  size  The size of an element.  *  @return   The number (not bytesize) of elements per node.  *  *  This function started off as a compiler kludge from SGI, but seems to  *  be a useful wrapper around a repeated constant expression.  *  @endif */
specifier|inline
name|size_t
name|__deque_buf_size
parameter_list|(
name|size_t
name|__size
parameter_list|)
block|{
return|return
name|__size
operator|<
literal|512
condition|?
name|size_t
argument_list|(
literal|512
operator|/
name|__size
argument_list|)
else|:
name|size_t
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/// A deque::iterator.
comment|/**  *  Quite a bit of intelligence here.  Much of the functionality of deque is  *  actually passed off to this class.  A deque holds two of these internally,  *  marking its valid range.  Access to elements is done as offsets of either  *  of those two, relying on operator overloading in this class.  *  *  @if maint  *  All the functions are op overloads except for _M_set_node.  *  @endif */
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|>
expr|struct
name|_Deque_iterator
block|{
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
specifier|static
name|size_t
name|_S_buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
return|;
block|}
typedef|typedef
name|random_access_iterator_tag
name|iterator_category
typedef|;
typedef|typedef
name|_Tp
name|value_type
typedef|;
typedef|typedef
name|_Ptr
name|pointer
typedef|;
typedef|typedef
name|_Ref
name|reference
typedef|;
typedef|typedef
name|size_t
name|size_type
typedef|;
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
name|_Tp
modifier|*
modifier|*
name|_Map_pointer
typedef|;
typedef|typedef
name|_Deque_iterator
name|_Self
typedef|;
name|_Tp
modifier|*
name|_M_cur
decl_stmt|;
name|_Tp
modifier|*
name|_M_first
decl_stmt|;
name|_Tp
modifier|*
name|_M_last
decl_stmt|;
name|_Map_pointer
name|_M_node
decl_stmt|;
name|_Deque_iterator
argument_list|(
argument|_Tp* __x
argument_list|,
argument|_Map_pointer __y
argument_list|)
block|:
name|_M_cur
argument_list|(
name|__x
argument_list|)
operator|,
name|_M_first
argument_list|(
operator|*
name|__y
argument_list|)
operator|,
name|_M_last
argument_list|(
operator|*
name|__y
operator|+
name|_S_buffer_size
argument_list|()
argument_list|)
operator|,
name|_M_node
argument_list|(
argument|__y
argument_list|)
block|{}
name|_Deque_iterator
argument_list|()
operator|:
name|_M_cur
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_first
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_last
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_node
argument_list|(
literal|0
argument_list|)
block|{}
name|_Deque_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|__x
argument_list|)
operator|:
name|_M_cur
argument_list|(
name|__x
operator|.
name|_M_cur
argument_list|)
operator|,
name|_M_first
argument_list|(
name|__x
operator|.
name|_M_first
argument_list|)
operator|,
name|_M_last
argument_list|(
name|__x
operator|.
name|_M_last
argument_list|)
operator|,
name|_M_node
argument_list|(
argument|__x._M_node
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|_M_cur
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
name|_M_cur
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
operator|*
operator|(
name|_M_node
operator|-
name|__x
operator|.
name|_M_node
operator|-
literal|1
operator|)
operator|+
operator|(
name|_M_cur
operator|-
name|_M_first
operator|)
operator|+
operator|(
name|__x
operator|.
name|_M_last
operator|-
name|__x
operator|.
name|_M_cur
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|_M_cur
block|;
if|if
condition|(
name|_M_cur
operator|==
name|_M_last
condition|)
block|{
name|_M_set_node
argument_list|(
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_first
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}   _Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
if|if
condition|(
name|_M_cur
operator|==
name|_M_first
condition|)
block|{
name|_M_set_node
argument_list|(
name|_M_node
operator|-
literal|1
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_last
expr_stmt|;
block|}
operator|--
name|_M_cur
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}   _Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|__n
operator|)
block|{
name|difference_type
name|__offset
operator|=
name|__n
operator|+
operator|(
name|_M_cur
operator|-
name|_M_first
operator|)
block|;
if|if
condition|(
name|__offset
operator|>=
literal|0
operator|&&
name|__offset
operator|<
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
condition|)
name|_M_cur
operator|+=
name|__n
expr_stmt|;
else|else
block|{
name|difference_type
name|__node_offset
init|=
name|__offset
operator|>
literal|0
condition|?
name|__offset
operator|/
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
else|:
operator|-
name|difference_type
argument_list|(
operator|(
operator|-
name|__offset
operator|-
literal|1
operator|)
operator|/
name|_S_buffer_size
argument_list|()
argument_list|)
operator|-
literal|1
decl_stmt|;
name|_M_set_node
argument_list|(
name|_M_node
operator|+
name|__node_offset
argument_list|)
expr_stmt|;
name|_M_cur
operator|=
name|_M_first
operator|+
operator|(
name|__offset
operator|-
name|__node_offset
operator|*
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}    _Self
name|operator
operator|+
operator|(
name|difference_type
name|__n
operator|)
specifier|const
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|+=
name|__n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|__n
operator|)
block|{
return|return
operator|*
name|this
operator|+=
operator|-
name|__n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|-
operator|(
name|difference_type
name|__n
operator|)
specifier|const
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|-=
name|__n
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|reference
name|operator
index|[]
argument_list|(
name|difference_type
name|__n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|__n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_cur
operator|==
name|__x
operator|.
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
operator|(
name|_M_node
operator|==
name|__x
operator|.
name|_M_node
operator|)
operator|?
operator|(
name|_M_cur
operator|<
name|__x
operator|.
name|_M_cur
operator|)
operator|:
operator|(
name|_M_node
operator|<
name|__x
operator|.
name|_M_node
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|>
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|__x
operator|<
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
name|__x
operator|<
operator|*
name|this
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|<
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|/** @if maint    *  Prepares to traverse new_node.  Sets everything except _M_cur, which    *  should therefore be set by the caller immediately afterwards, based on    *  _M_first and _M_last.    *  @endif   */
end_comment

begin_function
name|void
name|_M_set_node
parameter_list|(
name|_Map_pointer
name|__new_node
parameter_list|)
block|{
name|_M_node
operator|=
name|__new_node
expr_stmt|;
name|_M_first
operator|=
operator|*
name|__new_node
expr_stmt|;
name|_M_last
operator|=
name|_M_first
operator|+
name|difference_type
argument_list|(
name|_S_buffer_size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Ref
operator|,
name|class
name|_Ptr
operator|>
specifier|inline
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
name|operator
operator|+
operator|(
name|ptrdiff_t
name|__n
operator|,
specifier|const
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Ref
operator|,
name|_Ptr
operator|>
operator|&
name|__x
operator|)
block|{
return|return
name|__x
operator|+
name|__n
return|;
block|}
end_expr_stmt

begin_comment
comment|/// @if maint Primary default version.  @endif
end_comment

begin_comment
comment|/**  *  @if maint  *  Deque base class.  It has two purposes.  First, its constructor  *  and destructor allocate (but don't initialize) storage.  This makes  *  exception safety easier.  Second, the base class encapsulates all of  *  the differences between SGI-style allocators and standard-conforming  *  allocators.  There are two versions:  this ordinary one, and the  *  space-saving specialization for instanceless allocators.  *  @endif */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|,
name|bool
name|__is_static
operator|>
name|class
name|_Deque_alloc_base
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_M_node_allocator
return|;
block|}
name|_Deque_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_M_node_allocator
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_map_allocator
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_map
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_map_size
argument_list|(
literal|0
argument_list|)
block|{}
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|*
operator|,
name|_Alloc
operator|>
operator|::
name|allocator_type
name|_Map_allocator_type
expr_stmt|;
end_typedef

begin_decl_stmt
name|allocator_type
name|_M_node_allocator
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Map_allocator_type
name|_M_map_allocator
decl_stmt|;
end_decl_stmt

begin_function
name|_Tp
modifier|*
name|_M_allocate_node
parameter_list|()
block|{
return|return
name|_M_node_allocator
operator|.
name|allocate
argument_list|(
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_node
parameter_list|(
name|_Tp
modifier|*
name|__p
parameter_list|)
block|{
name|_M_node_allocator
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|_Tp
modifier|*
modifier|*
name|_M_allocate_map
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|_M_map_allocator
operator|.
name|allocate
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_map
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__p
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
name|_M_map_allocator
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__n
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|_Tp
modifier|*
modifier|*
name|_M_map
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|_M_map_size
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|/// @if maint Specialization for instanceless allocators.  @endif
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|class
name|_Deque_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|true
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|()
return|;
block|}
name|_Deque_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
argument_list|)
operator|:
name|_M_map
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_map_size
argument_list|(
literal|0
argument_list|)
block|{}
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_Alloc_type
name|_Node_alloc_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Tp
operator|*
operator|,
name|_Alloc
operator|>
operator|::
name|_Alloc_type
name|_Map_alloc_type
expr_stmt|;
end_typedef

begin_function
name|_Tp
modifier|*
name|_M_allocate_node
parameter_list|()
block|{
return|return
name|_Node_alloc_type
operator|::
name|allocate
argument_list|(
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_node
parameter_list|(
name|_Tp
modifier|*
name|__p
parameter_list|)
block|{
name|_Node_alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|_Tp
modifier|*
modifier|*
name|_M_allocate_map
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|_Map_alloc_type
operator|::
name|allocate
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate_map
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__p
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
name|_Map_alloc_type
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
name|__n
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|_Tp
modifier|*
modifier|*
name|_M_map
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_t
name|_M_map_size
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|/**  *  @if maint  *  Deque base class.  Using _Alloc_traits in the instantiation of the parent  *  class provides the compile-time dispatching mentioned in the parent's docs.  *  This class provides the unified face for deque's allocation.  *  *  Nothing in this class ever constructs or destroys an actual Tp element.  *  (Deque handles that itself.)  Only/All memory management is performed here.  *  @endif */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|class
name|_Deque_base
operator|:
name|public
name|_Deque_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
block|{
name|public
operator|:
typedef|typedef
name|_Deque_alloc_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
name|_Tp
operator|&
operator|,
name|_Tp
operator|*
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Deque_iterator
operator|<
name|_Tp
operator|,
specifier|const
name|_Tp
operator|&
operator|,
specifier|const
name|_Tp
operator|*
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_macro
name|_Deque_base
argument_list|(
argument|const allocator_type& __a
argument_list|,
argument|size_t __num_elements
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|_Base
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_start
argument_list|()
operator|,
name|_M_finish
argument_list|()
block|{
name|_M_initialize_map
argument_list|(
name|__num_elements
argument_list|)
block|; }
name|_Deque_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_Base
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_start
argument_list|()
operator|,
name|_M_finish
argument_list|()
block|{}
operator|~
name|_Deque_base
argument_list|()
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function_decl
name|void
name|_M_initialize_map
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_create_nodes
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__nstart
parameter_list|,
name|_Tp
modifier|*
modifier|*
name|__nfinish
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_destroy_nodes
parameter_list|(
name|_Tp
modifier|*
modifier|*
name|__nstart
parameter_list|,
name|_Tp
modifier|*
modifier|*
name|__nfinish
parameter_list|)
function_decl|;
end_function_decl

begin_enum
enum|enum
block|{
name|_S_initial_map_size
init|=
literal|8
block|}
enum|;
end_enum

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|iterator
name|_M_start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|_M_finish
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
operator|~
name|_Deque_base
argument_list|()
block|{
if|if
condition|(
name|_M_map
condition|)
block|{
name|_M_destroy_nodes
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|_M_deallocate_map
argument_list|(
name|_M_map
argument_list|,
name|_M_map_size
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|/**  *  @if maint  *  @brief Layout storage.  *  @param  num_elements  The count of T's for which to allocate space at first.  *  @return   Nothing.  *  *  The initial underlying memory layout is a bit complicated...  *  @endif */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_initialize_map
argument_list|(
argument|size_t __num_elements
argument_list|)
block|{
name|size_t
name|__num_nodes
operator|=
name|__num_elements
operator|/
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
operator|+
literal|1
block|;
name|_M_map_size
operator|=
name|max
argument_list|(
operator|(
name|size_t
operator|)
name|_S_initial_map_size
argument_list|,
name|__num_nodes
operator|+
literal|2
argument_list|)
block|;
name|_M_map
operator|=
name|_M_allocate_map
argument_list|(
name|_M_map_size
argument_list|)
block|;
name|_Tp
operator|*
operator|*
name|__nstart
operator|=
name|_M_map
operator|+
operator|(
name|_M_map_size
operator|-
name|__num_nodes
operator|)
operator|/
literal|2
block|;
name|_Tp
operator|*
operator|*
name|__nfinish
operator|=
name|__nstart
operator|+
name|__num_nodes
block|;
name|try
block|{
name|_M_create_nodes
argument_list|(
name|__nstart
argument_list|,
name|__nfinish
argument_list|)
block|; }
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_deallocate_map
argument_list|(
name|_M_map
argument_list|,
name|_M_map_size
argument_list|)
block|;
name|_M_map
operator|=
literal|0
block|;
name|_M_map_size
operator|=
literal|0
block|;
name|__throw_exception_again
block|;     }
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|__nstart
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|__nfinish
operator|-
literal|1
argument_list|)
block|;
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_start
operator|.
name|_M_first
block|;
name|_M_finish
operator|.
name|_M_cur
operator|=
name|_M_finish
operator|.
name|_M_first
operator|+
name|__num_elements
operator|%
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_create_nodes
argument_list|(
argument|_Tp** __nstart
argument_list|,
argument|_Tp** __nfinish
argument_list|)
block|{
name|_Tp
operator|*
operator|*
name|__cur
block|;
name|try
block|{
for|for
control|(
name|__cur
operator|=
name|__nstart
init|;
name|__cur
operator|<
name|__nfinish
condition|;
operator|++
name|__cur
control|)
operator|*
name|__cur
operator|=
name|_M_allocate_node
argument_list|()
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_destroy_nodes
argument_list|(
name|__nstart
argument_list|,
name|__cur
argument_list|)
block|;
name|__throw_exception_again
block|;      }
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_destroy_nodes
argument_list|(
argument|_Tp** __nstart
argument_list|,
argument|_Tp** __nfinish
argument_list|)
block|{
for|for
control|(
name|_Tp
modifier|*
modifier|*
name|__n
init|=
name|__nstart
init|;
name|__n
operator|<
name|__nfinish
condition|;
operator|++
name|__n
control|)
name|_M_deallocate_node
argument_list|(
operator|*
name|__n
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_comment
comment|/**  *  @ingroup Containers  *  @ingroup Sequences  *  *  Meets the requirements of a<a href="tables.html#65">container</a>, a  *<a href="tables.html#66">reversible container</a>, and a  *<a href="tables.html#67">sequence</a>, including the  *<a href="tables.html#68">optional sequence requirements</a>.  *  *  Placeholder:  see http://www.sgi.com/tech/stl/Deque.html for now.  *  *  In previous HP/SGI versions of deque, there was an extra template parameter  *  so users could control the node size.  This extension turned out to violate  *  the C++ standard (it can be detected using template template parameters),  *  and it was removed.  *  *  @if maint  *  Here's how a deque<Tp> manages memory.  Each deque has 4 members:  *    *  - Tp**        _M_map  *  - size_t      _M_map_size  *  - iterator    _M_start, _M_finish  *    *  map_size is at least 8.  %map is an array of map_size pointers-to-"nodes".  *  (The name has nothing to do with the std::map class.)  *    *  A "node" has no specific type name as such, but it is referred to as  *  "node" in this file.  It is a simple array-of-Tp.  If Tp is very large,  *  there will be one Tp element per node (i.e., an "array" of one).  *  For non-huge Tp's, node size is inversely related to Tp size:  the  *  larger the Tp, the fewer Tp's will fit in a node.  The goal here is to  *  keep the total size of a node relatively small and constant over different  *  Tp's, to improve allocator efficiency.  *    *  **** As I write this, the nodes are /not/ allocated using the high-speed  *  memory pool.  There are 20 hours left in the year; perhaps I can fix  *  this before 2002.  *    *  Not every pointer in the %map array will point to a node.  If the initial  *  number of elements in the deque is small, the /middle/ %map pointers will  *  be valid, and the ones at the edges will be unused.  This same situation  *  will arise as the %map grows:  available %map pointers, if any, will be on  *  the ends.  As new nodes are created, only a subset of the %map's pointers  *  need to be copied "outward".  *  *  Class invariants:  * - For any nonsingular iterator i:  *    - i.node points to a member of the %map array.  (Yes, you read that  *      correctly:  i.node does not actually point to a node.)  The member of  *      the %map array is what actually points to the node.  *    - i.first == *(i.node)    (This points to the node (first Tp element).)  *    - i.last  == i.first + node_size  *    - i.cur is a pointer in the range [i.first, i.last).  NOTE:  *      the implication of this is that i.cur is always a dereferenceable  *      pointer, even if i is a past-the-end iterator.  * - Start and Finish are always nonsingular iterators.  NOTE: this means that  *   an empty deque must have one node, a deque with<N elements (where N is  *   the node buffer size) must have one node, a deque with N through (2N-1)  *   elements must have two nodes, etc.  * - For every node other than start.node and finish.node, every element in the  *   node is an initialized object.  If start.node == finish.node, then  *   [start.cur, finish.cur) are initialized objects, and the elements outside  *   that range are uninitialized storage.  Otherwise, [start.cur, start.last)  *   and [finish.first, finish.cur) are initialized objects, and [start.first,  *   start.cur) and [finish.cur, finish.last) are uninitialized storage.  * - [%map, %map + map_size) is a valid, non-empty range.    * - [start.node, finish.node] is a valid range contained within   *   [%map, %map + map_size).    * - A pointer in the range [%map, %map + map_size) points to an allocated node  *   if and only if the pointer is in the range [start.node, finish.node].  *  *  Here's the magic:  nothing in deque is "aware" of the discontiguous storage!  *  *  The memory setup and layout occurs in the parent, _Base, and the iterator  *  class is entirely responsible for "leaping" from one node to the next.  All  *  the implementation routines for deque itself work only through the start  *  and finish iterators.  This keeps the routines simple and sane, and we can  *  use other standard algorithms as well.  *  @endif */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|=
name|allocator
operator|<
name|_Tp
operator|>
expr|>
name|class
name|deque
operator|:
name|protected
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
block|{
comment|// concept requirements
name|__glibcpp_class_requires
argument_list|(
argument|_Tp
argument_list|,
argument|_SGIAssignableConcept
argument_list|)
typedef|typedef
name|_Deque_base
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
name|_Base
expr_stmt|;
name|public
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_Base
operator|::
name|get_allocator
argument_list|()
return|;
block|}
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|iterator
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_typedef
typedef|typedef
name|pointer
modifier|*
name|_Map_pointer
typedef|;
end_typedef

begin_function
specifier|static
name|size_t
name|_S_buffer_size
parameter_list|()
block|{
return|return
name|__deque_buf_size
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_comment
comment|// Functions controlling memory layout, and nothing else.
end_comment

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_initialize_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_create_nodes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_destroy_nodes
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_allocate_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_deallocate_node
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_allocate_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_deallocate_map
expr_stmt|;
end_expr_stmt

begin_comment
comment|/** @if maint    *  A total of four data members accumulated down the heirarchy.  If the    *  _Alloc type requires separate instances, then two of them will also be    *  included in each deque.    *  @endif   */
end_comment

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_map
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_map_size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_start
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|using
name|_Base
operator|::
name|_M_finish
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|// Basic accessors
end_comment

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|_M_start
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|_M_finish
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|_M_start
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|_M_finish
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|_M_finish
argument_list|)
return|;
block|}
end_function

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|_M_start
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|_M_finish
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|_M_start
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
return|return
name|_M_start
index|[
name|difference_type
argument_list|(
name|__n
argument_list|)
index|]
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
return|return
name|_M_start
index|[
name|difference_type
argument_list|(
name|__n
argument_list|)
index|]
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|_M_range_check
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
if|if
condition|(
name|__n
operator|>=
name|this
operator|->
name|size
argument_list|()
condition|)
name|__throw_range_error
argument_list|(
literal|"deque"
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|reference
name|at
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|_M_range_check
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|__n
index|]
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|at
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
name|_M_range_check
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|__n
index|]
return|;
block|}
end_decl_stmt

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|_M_start
return|;
block|}
end_function

begin_function
name|reference
name|back
parameter_list|()
block|{
name|iterator
name|__tmp
init|=
name|_M_finish
decl_stmt|;
operator|--
name|__tmp
expr_stmt|;
return|return
operator|*
name|__tmp
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|_M_start
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
name|const_iterator
name|__tmp
operator|=
name|_M_finish
block|;
operator|--
name|__tmp
block|;
return|return
operator|*
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_finish
operator|-
name|_M_start
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|_M_finish
operator|==
name|_M_start
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_comment
comment|// Constructor, destructor.
end_comment

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|deque
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
literal|0
argument_list|)
block|{}
name|deque
argument_list|(
specifier|const
name|deque
operator|&
name|__x
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__x.get_allocator()
argument_list|,
argument|__x.size()
argument_list|)
block|{
name|uninitialized_copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|_M_start
argument_list|)
block|; }
name|deque
argument_list|(
argument|size_type __n
argument_list|,
argument|const value_type& __value
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__n
argument_list|)
block|{
name|_M_fill_initialize
argument_list|(
name|__value
argument_list|)
block|; }
name|explicit
name|deque
argument_list|(
argument|size_type __n
argument_list|)
operator|:
name|_Base
argument_list|(
argument|allocator_type()
argument_list|,
argument|__n
argument_list|)
block|{
name|_M_fill_initialize
argument_list|(
name|value_type
argument_list|()
argument_list|)
block|; }
comment|// Check whether it's an integral type.  If so, it's not an iterator.
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|deque
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_initialize_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_initialize_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_initialize_map
argument_list|(
name|__n
argument_list|)
block|;
name|_M_fill_initialize
argument_list|(
name|__x
argument_list|)
block|;     }
name|template
operator|<
name|class
name|_InputIter
operator|>
name|void
name|_M_initialize_dispatch
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_InputIter
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|_M_range_initialize
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    ~
name|deque
argument_list|()
end_macro

begin_block
block|{
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
block|}
end_block

begin_decl_stmt
name|deque
modifier|&
name|operator
init|=
operator|(
specifier|const
name|deque
operator|&
name|__x
operator|)
block|{
specifier|const
name|size_type
name|__len
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
operator|&
name|__x
operator|!=
name|this
condition|)
block|{
if|if
condition|(
name|__len
operator|>=
name|__x
operator|.
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|_M_start
argument_list|)
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
else|else
block|{
name|const_iterator
name|__mid
init|=
name|__x
operator|.
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|__len
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__mid
argument_list|,
name|_M_start
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|_M_finish
argument_list|,
name|__mid
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_function
name|void
name|swap
parameter_list|(
name|deque
modifier|&
name|__x
parameter_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|_M_start
argument_list|,
name|__x
operator|.
name|_M_start
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_finish
argument_list|,
name|__x
operator|.
name|_M_finish
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_map
argument_list|,
name|__x
operator|.
name|_M_map
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_map_size
argument_list|,
name|__x
operator|.
name|_M_map_size
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|// assign(), a generalized assignment member function.  Two
end_comment

begin_comment
comment|// versions: one that takes a count, and one that takes a range.
end_comment

begin_comment
comment|// The range version is a member template, so we dispatch on whether
end_comment

begin_comment
comment|// or not the type is an integer.
end_comment

begin_function
name|void
name|_M_fill_assign
parameter_list|(
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__val
parameter_list|)
block|{
if|if
condition|(
name|__n
operator|>
name|size
argument_list|()
condition|)
block|{
name|fill
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__n
operator|-
name|size
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|__n
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|assign
parameter_list|(
name|size_type
name|__n
parameter_list|,
specifier|const
name|_Tp
modifier|&
name|__val
parameter_list|)
block|{
name|_M_fill_assign
argument_list|(
name|__n
argument_list|,
name|__val
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|assign
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_assign_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}  private:
comment|// helper functions for assign()
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __val
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_assign
argument_list|(
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__n
operator|)
argument_list|,
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
name|__val
operator|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|_M_assign_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__len
operator|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|__len
operator|>
name|size
argument_list|()
condition|)
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__mid
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
name|erase
argument_list|(
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|begin
argument_list|()
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
end_else

begin_comment
unit|}  public:
comment|// push_* and pop_*
end_comment

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__t
parameter_list|)
block|{
if|if
condition|(
name|_M_finish
operator|.
name|_M_cur
operator|!=
name|_M_finish
operator|.
name|_M_last
operator|-
literal|1
condition|)
block|{
name|_Construct
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|,
name|__t
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_back_aux
argument_list|(
name|__t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|()
block|{
if|if
condition|(
name|_M_finish
operator|.
name|_M_cur
operator|!=
name|_M_finish
operator|.
name|_M_last
operator|-
literal|1
condition|)
block|{
name|_Construct
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
operator|++
name|_M_finish
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_back_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__t
parameter_list|)
block|{
if|if
condition|(
name|_M_start
operator|.
name|_M_cur
operator|!=
name|_M_start
operator|.
name|_M_first
condition|)
block|{
name|_Construct
argument_list|(
name|_M_start
operator|.
name|_M_cur
operator|-
literal|1
argument_list|,
name|__t
argument_list|)
expr_stmt|;
operator|--
name|_M_start
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_front_aux
argument_list|(
name|__t
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_front
parameter_list|()
block|{
if|if
condition|(
name|_M_start
operator|.
name|_M_cur
operator|!=
name|_M_start
operator|.
name|_M_first
condition|)
block|{
name|_Construct
argument_list|(
name|_M_start
operator|.
name|_M_cur
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|--
name|_M_start
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_push_front_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
if|if
condition|(
name|_M_finish
operator|.
name|_M_cur
operator|!=
name|_M_finish
operator|.
name|_M_first
condition|)
block|{
operator|--
name|_M_finish
operator|.
name|_M_cur
expr_stmt|;
name|_Destroy
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
block|}
else|else
name|_M_pop_back_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_front
parameter_list|()
block|{
if|if
condition|(
name|_M_start
operator|.
name|_M_cur
operator|!=
name|_M_start
operator|.
name|_M_last
operator|-
literal|1
condition|)
block|{
name|_Destroy
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
operator|++
name|_M_start
operator|.
name|_M_cur
expr_stmt|;
block|}
else|else
name|_M_pop_front_aux
argument_list|()
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|// Insert
end_comment

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
if|if
condition|(
name|position
operator|.
name|_M_cur
operator|==
name|_M_start
operator|.
name|_M_cur
condition|)
block|{
name|push_front
argument_list|(
name|__x
argument_list|)
expr_stmt|;
return|return
name|_M_start
return|;
block|}
elseif|else
if|if
condition|(
name|position
operator|.
name|_M_cur
operator|==
name|_M_finish
operator|.
name|_M_cur
condition|)
block|{
name|push_back
argument_list|(
name|__x
argument_list|)
expr_stmt|;
name|iterator
name|__tmp
init|=
name|_M_finish
decl_stmt|;
operator|--
name|__tmp
expr_stmt|;
return|return
name|__tmp
return|;
block|}
else|else
block|{
return|return
name|_M_insert_aux
argument_list|(
name|position
argument_list|,
name|__x
argument_list|)
return|;
block|}
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|__position
argument_list|,
name|value_type
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
name|_M_fill_insert
argument_list|(
name|__pos
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|_M_fill_insert
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// Check whether it's an integral type.  If so, it's not an iterator.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_insert_dispatch
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_insert
argument_list|(
name|__pos
argument_list|,
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__n
operator|)
argument_list|,
name|static_cast
operator|<
name|value_type
operator|>
operator|(
name|__x
operator|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
typedef|typedef
name|typename
name|iterator_traits
operator|<
name|_InputIterator
operator|>
operator|::
name|iterator_category
name|_IterCategory
expr_stmt|;
name|insert
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_IterCategory
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}    void
name|resize
argument_list|(
argument|size_type __new_size
argument_list|,
argument|const value_type& __x
argument_list|)
end_macro

begin_block
block|{
specifier|const
name|size_type
name|__len
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|__new_size
operator|<
name|__len
condition|)
name|erase
argument_list|(
name|_M_start
operator|+
name|__new_size
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|_M_finish
argument_list|,
name|__new_size
operator|-
name|__len
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_block

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|new_size
parameter_list|)
block|{
name|resize
argument_list|(
name|new_size
argument_list|,
name|value_type
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_comment
comment|// Erase
end_comment

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__pos
parameter_list|)
block|{
name|iterator
name|__next
init|=
name|__pos
decl_stmt|;
operator|++
name|__next
expr_stmt|;
name|size_type
name|__index
init|=
name|__pos
operator|-
name|_M_start
decl_stmt|;
if|if
condition|(
name|__index
operator|<
operator|(
name|size
argument_list|()
operator|>>
literal|1
operator|)
condition|)
block|{
name|copy_backward
argument_list|(
name|_M_start
argument_list|,
name|__pos
argument_list|,
name|__next
argument_list|)
expr_stmt|;
name|pop_front
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|__next
argument_list|,
name|_M_finish
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
name|pop_back
argument_list|()
expr_stmt|;
block|}
return|return
name|_M_start
operator|+
name|__index
return|;
block|}
end_function

begin_function_decl
name|iterator
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal construction/destruction
end_comment

begin_function_decl
name|void
name|_M_fill_initialize
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__value
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_range_initialize
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_range_initialize
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal push_* and pop_*
end_comment

begin_function_decl
name|void
name|_M_push_back_aux
parameter_list|(
specifier|const
name|value_type
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_push_back_aux
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_push_front_aux
parameter_list|(
specifier|const
name|value_type
modifier|&
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_push_front_aux
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_pop_back_aux
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_pop_front_aux
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Internal insert functions
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|iterator
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|iterator
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_insert_aux
parameter_list|(
name|iterator
name|__pos
parameter_list|,
name|size_type
name|__n
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|size_type __n
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
name|iterator
name|_M_reserve_elements_at_front
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|size_type
name|__vacancies
init|=
name|_M_start
operator|.
name|_M_cur
operator|-
name|_M_start
operator|.
name|_M_first
decl_stmt|;
if|if
condition|(
name|__n
operator|>
name|__vacancies
condition|)
name|_M_new_elements_at_front
argument_list|(
name|__n
operator|-
name|__vacancies
argument_list|)
expr_stmt|;
return|return
name|_M_start
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|_M_reserve_elements_at_back
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|size_type
name|__vacancies
init|=
operator|(
name|_M_finish
operator|.
name|_M_last
operator|-
name|_M_finish
operator|.
name|_M_cur
operator|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|__n
operator|>
name|__vacancies
condition|)
name|_M_new_elements_at_back
argument_list|(
name|__n
operator|-
name|__vacancies
argument_list|)
expr_stmt|;
return|return
name|_M_finish
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|_M_new_elements_at_front
parameter_list|(
name|size_type
name|__new_elements
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_new_elements_at_back
parameter_list|(
name|size_type
name|__new_elements
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|protected
label|:
end_label

begin_comment
comment|// Allocation of _M_map and nodes
end_comment

begin_comment
comment|// Makes sure the _M_map has space for new nodes.  Does not actually
end_comment

begin_comment
comment|//  add the nodes.  Can invalidate _M_map pointers.  (And consequently,
end_comment

begin_comment
comment|//  deque iterators.)
end_comment

begin_function
name|void
name|_M_reserve_map_at_back
parameter_list|(
name|size_type
name|__nodes_to_add
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|__nodes_to_add
operator|+
literal|1
operator|>
name|_M_map_size
operator|-
operator|(
name|_M_finish
operator|.
name|_M_node
operator|-
name|_M_map
operator|)
condition|)
name|_M_reallocate_map
argument_list|(
name|__nodes_to_add
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|_M_reserve_map_at_front
parameter_list|(
name|size_type
name|__nodes_to_add
init|=
literal|1
parameter_list|)
block|{
if|if
condition|(
name|__nodes_to_add
operator|>
name|size_type
argument_list|(
name|_M_start
operator|.
name|_M_node
operator|-
name|_M_map
argument_list|)
condition|)
name|_M_reallocate_map
argument_list|(
name|__nodes_to_add
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|_M_reallocate_map
parameter_list|(
name|size_type
name|__nodes_to_add
parameter_list|,
name|bool
name|__add_at_front
parameter_list|)
function_decl|;
end_function_decl

begin_comment
unit|};
comment|// Non-inline member functions
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_InputIter
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_assign_aux
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|iterator
name|__cur
operator|=
name|begin
argument_list|()
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
operator|&&
name|__cur
operator|!=
name|end
argument_list|()
condition|;
operator|++
name|__cur
operator|,
operator|++
name|__first
control|)
operator|*
name|__cur
operator|=
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
name|erase
argument_list|(
name|__cur
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_fill_insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|size_type __n
argument_list|,
argument|const value_type& __x
argument_list|)
block|{
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_start
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|try
block|{
name|uninitialized_fill
argument_list|(
name|__new_start
argument_list|,
name|_M_start
argument_list|,
name|__x
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
block|;
name|__throw_exception_again
block|;       }
end_expr_stmt

begin_if
unit|}   else
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_finish
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|try
block|{
name|uninitialized_fill
argument_list|(
name|_M_finish
argument_list|,
name|__new_finish
argument_list|,
name|__x
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
block|}
else|else
name|_M_insert_aux
argument_list|(
name|__pos
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|typename
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|iterator __first
argument_list|,
argument|iterator __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|_M_start
operator|&&
name|__last
operator|==
name|_M_finish
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
return|return
name|_M_finish
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|difference_type
name|__n
init|=
name|__last
operator|-
name|__first
decl_stmt|;
name|difference_type
name|__elems_before
init|=
name|__first
operator|-
name|_M_start
decl_stmt|;
if|if
condition|(
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__elems_before
operator|)
operator|<
operator|(
name|size
argument_list|()
operator|-
name|__n
operator|)
operator|/
literal|2
condition|)
block|{
name|copy_backward
argument_list|(
name|_M_start
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
name|iterator
name|__new_start
init|=
name|_M_start
operator|+
name|__n
decl_stmt|;
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_destroy_nodes
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|__new_start
operator|.
name|_M_node
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|__last
argument_list|,
name|_M_finish
argument_list|,
name|__first
argument_list|)
expr_stmt|;
name|iterator
name|__new_finish
init|=
name|_M_finish
operator|-
name|__n
decl_stmt|;
name|_Destroy
argument_list|(
name|__new_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_destroy_nodes
argument_list|(
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
block|}
return|return
name|_M_start
operator|+
name|__elems_before
return|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|clear
argument_list|()
block|{
for|for
control|(
name|_Map_pointer
name|__node
init|=
name|_M_start
operator|.
name|_M_node
operator|+
literal|1
init|;
name|__node
operator|<
name|_M_finish
operator|.
name|_M_node
condition|;
operator|++
name|__node
control|)
block|{
name|_Destroy
argument_list|(
operator|*
name|__node
argument_list|,
operator|*
name|__node
operator|+
name|_S_buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|_M_deallocate_node
argument_list|(
operator|*
name|__node
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_if
if|if
condition|(
name|_M_start
operator|.
name|_M_node
operator|!=
name|_M_finish
operator|.
name|_M_node
condition|)
block|{
name|_Destroy
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|,
name|_M_start
operator|.
name|_M_last
argument_list|)
expr_stmt|;
name|_Destroy
argument_list|(
name|_M_finish
operator|.
name|_M_first
argument_list|,
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
name|_M_deallocate_node
argument_list|(
name|_M_finish
operator|.
name|_M_first
argument_list|)
expr_stmt|;
block|}
else|else
name|_Destroy
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|,
name|_M_finish
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
name|_M_finish
operator|=
name|_M_start
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/**  *  @if maint  *  @brief Fills the deque with copies of value.  *  @param  value  Initial value.  *  @return   Nothing.  *  @pre _M_start and _M_finish have already been initialized, but none of the  *       deque's elements have yet been constructed.  *  *  This function is called only when the user provides an explicit size (with  *  or without an explicit exemplar value).  *  @endif */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_fill_initialize
argument_list|(
argument|const value_type& __value
argument_list|)
block|{
name|_Map_pointer
name|__cur
block|;
name|try
block|{
for|for
control|(
name|__cur
operator|=
name|_M_start
operator|.
name|_M_node
init|;
name|__cur
operator|<
name|_M_finish
operator|.
name|_M_node
condition|;
operator|++
name|__cur
control|)
name|uninitialized_fill
argument_list|(
operator|*
name|__cur
argument_list|,
operator|*
name|__cur
operator|+
name|_S_buffer_size
argument_list|()
argument_list|,
name|__value
argument_list|)
expr_stmt|;
name|uninitialized_fill
argument_list|(
name|_M_finish
operator|.
name|_M_first
argument_list|,
name|_M_finish
operator|.
name|_M_cur
argument_list|,
name|__value
argument_list|)
block|;   }
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|iterator
argument_list|(
operator|*
name|__cur
argument_list|,
name|__cur
argument_list|)
argument_list|)
block|;
name|__throw_exception_again
block|;     }
end_expr_stmt

begin_comment
unit|}
comment|/** @{  *  @if maint  *  @brief Fills the deque with whatever is in [first,last).  *  @param  first  An input iterator.  *  @param  last  An input iterator.  *  @return   Nothing.  *  *  If the iterators are actually forward iterators (or better), then the  *  memory layout can be done all at once.  Else we move forward using  *  push_back on each value from the iterator.  *  @endif */
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_range_initialize
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|_M_initialize_map
argument_list|(
literal|0
argument_list|)
block|;
name|try
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
name|push_back
argument_list|(
operator|*
name|__first
argument_list|)
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|clear
argument_list|()
block|;
name|__throw_exception_again
block|;     }
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_range_initialize
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__n
operator|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
name|_M_initialize_map
argument_list|(
name|__n
argument_list|)
block|;
name|_Map_pointer
name|__cur_node
block|;
name|try
block|{
for|for
control|(
name|__cur_node
operator|=
name|_M_start
operator|.
name|_M_node
init|;
name|__cur_node
operator|<
name|_M_finish
operator|.
name|_M_node
condition|;
operator|++
name|__cur_node
control|)
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|_S_buffer_size
argument_list|()
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
operator|*
name|__cur_node
argument_list|)
expr_stmt|;
name|__first
operator|=
name|__mid
expr_stmt|;
block|}
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_finish
operator|.
name|_M_first
argument_list|)
block|;   }
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_Destroy
argument_list|(
name|_M_start
argument_list|,
name|iterator
argument_list|(
operator|*
name|__cur_node
argument_list|,
name|__cur_node
argument_list|)
argument_list|)
block|;
name|__throw_exception_again
block|;     }
end_expr_stmt

begin_comment
unit|}
comment|/** @} */
end_comment

begin_comment
comment|// Called only if _M_finish._M_cur == _M_finish._M_last - 1.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_push_back_aux
argument_list|(
argument|const value_type& __t
argument_list|)
block|{
name|value_type
name|__t_copy
operator|=
name|__t
block|;
name|_M_reserve_map_at_back
argument_list|()
block|;
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
operator|)
operator|=
name|_M_allocate_node
argument_list|()
block|;
name|try
block|{
name|_Construct
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|,
name|__t_copy
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_cur
operator|=
name|_M_finish
operator|.
name|_M_first
block|;   }
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
operator|)
argument_list|)
block|;
name|__throw_exception_again
block|;     }
block|}
comment|// Called only if _M_finish._M_cur == _M_finish._M_last - 1.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_push_back_aux
argument_list|()
block|{
name|_M_reserve_map_at_back
argument_list|()
block|;
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
operator|)
operator|=
name|_M_allocate_node
argument_list|()
block|;
name|try
block|{
name|_Construct
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_cur
operator|=
name|_M_finish
operator|.
name|_M_first
block|;   }
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
operator|)
argument_list|)
block|;
name|__throw_exception_again
block|;     }
block|}
comment|// Called only if _M_start._M_cur == _M_start._M_first.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_push_front_aux
argument_list|(
argument|const value_type& __t
argument_list|)
block|{
name|value_type
name|__t_copy
operator|=
name|__t
block|;
name|_M_reserve_map_at_front
argument_list|()
block|;
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
operator|)
operator|=
name|_M_allocate_node
argument_list|()
block|;
name|try
block|{
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
argument_list|)
block|;
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_start
operator|.
name|_M_last
operator|-
literal|1
block|;
name|_Construct
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|,
name|__t_copy
argument_list|)
block|;   }
name|catch
argument_list|(
argument|...
argument_list|)
block|{
operator|++
name|_M_start
block|;
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
operator|)
argument_list|)
block|;
name|__throw_exception_again
block|;     }
block|}
comment|// Called only if _M_start._M_cur == _M_start._M_first.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_push_front_aux
argument_list|()
block|{
name|_M_reserve_map_at_front
argument_list|()
block|;
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
operator|)
operator|=
name|_M_allocate_node
argument_list|()
block|;
name|try
block|{
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
argument_list|)
block|;
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_start
operator|.
name|_M_last
operator|-
literal|1
block|;
name|_Construct
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|)
block|;   }
name|catch
argument_list|(
argument|...
argument_list|)
block|{
operator|++
name|_M_start
block|;
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
literal|1
operator|)
argument_list|)
block|;
name|__throw_exception_again
block|;     }
block|}
comment|// Called only if _M_finish._M_cur == _M_finish._M_first.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_pop_back_aux
argument_list|()
block|{
name|_M_deallocate_node
argument_list|(
name|_M_finish
operator|.
name|_M_first
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|-
literal|1
argument_list|)
block|;
name|_M_finish
operator|.
name|_M_cur
operator|=
name|_M_finish
operator|.
name|_M_last
operator|-
literal|1
block|;
name|_Destroy
argument_list|(
name|_M_finish
operator|.
name|_M_cur
argument_list|)
block|; }
comment|// Called only if _M_start._M_cur == _M_start._M_last - 1.  Note that
comment|// if the deque has at least one element (a precondition for this member
comment|// function), and if _M_start._M_cur == _M_start._M_last, then the deque
comment|// must have at least two nodes.
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_pop_front_aux
argument_list|()
block|{
name|_Destroy
argument_list|(
name|_M_start
operator|.
name|_M_cur
argument_list|)
block|;
name|_M_deallocate_node
argument_list|(
name|_M_start
operator|.
name|_M_first
argument_list|)
block|;
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|_M_start
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
block|;
name|_M_start
operator|.
name|_M_cur
operator|=
name|_M_start
operator|.
name|_M_first
block|; }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|inserter
argument_list|(
operator|*
name|this
argument_list|,
name|__pos
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|insert
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__n
operator|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_start
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|try
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
block|;
name|__throw_exception_again
block|;       }
end_expr_stmt

begin_if
unit|}   else
if|if
condition|(
name|__pos
operator|.
name|_M_cur
operator|==
name|_M_finish
operator|.
name|_M_cur
condition|)
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|try
block|{
name|uninitialized_copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
block|}
else|else
name|_M_insert_aux
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|__n
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|typename
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|const value_type& __x
argument_list|)
block|{
name|difference_type
name|__index
operator|=
name|__pos
operator|-
name|_M_start
block|;
name|value_type
name|__x_copy
operator|=
name|__x
block|;
if|if
condition|(
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__index
operator|)
operator|<
name|size
argument_list|()
operator|/
literal|2
condition|)
block|{
name|push_front
argument_list|(
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|__front1
init|=
name|_M_start
decl_stmt|;
operator|++
name|__front1
expr_stmt|;
name|iterator
name|__front2
init|=
name|__front1
decl_stmt|;
operator|++
name|__front2
expr_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__index
expr_stmt|;
name|iterator
name|__pos1
init|=
name|__pos
decl_stmt|;
operator|++
name|__pos1
expr_stmt|;
name|copy
argument_list|(
name|__front2
argument_list|,
name|__pos1
argument_list|,
name|__front1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|push_back
argument_list|(
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|__back1
init|=
name|_M_finish
decl_stmt|;
operator|--
name|__back1
expr_stmt|;
name|iterator
name|__back2
init|=
name|__back1
decl_stmt|;
operator|--
name|__back2
expr_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__index
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__back2
argument_list|,
name|__back1
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|*
name|__pos
operator|=
name|__x_copy
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__pos
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|typename
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|)
block|{
name|difference_type
name|__index
operator|=
name|__pos
operator|-
name|_M_start
block|;
if|if
condition|(
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__index
operator|)
operator|<
name|size
argument_list|()
operator|/
literal|2
condition|)
block|{
name|push_front
argument_list|(
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|__front1
init|=
name|_M_start
decl_stmt|;
operator|++
name|__front1
expr_stmt|;
name|iterator
name|__front2
init|=
name|__front1
decl_stmt|;
operator|++
name|__front2
expr_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__index
expr_stmt|;
name|iterator
name|__pos1
init|=
name|__pos
decl_stmt|;
operator|++
name|__pos1
expr_stmt|;
name|copy
argument_list|(
name|__front2
argument_list|,
name|__pos1
argument_list|,
name|__front1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|push_back
argument_list|(
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|iterator
name|__back1
init|=
name|_M_finish
decl_stmt|;
operator|--
name|__back1
expr_stmt|;
name|iterator
name|__back2
init|=
name|__back1
decl_stmt|;
operator|--
name|__back2
expr_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__index
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__back2
argument_list|,
name|__back1
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
operator|*
name|__pos
operator|=
name|value_type
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__pos
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|size_type __n
argument_list|,
argument|const value_type& __x
argument_list|)
block|{
specifier|const
name|difference_type
name|__elems_before
operator|=
name|__pos
operator|-
name|_M_start
block|;
name|size_type
name|__length
operator|=
name|this
operator|->
name|size
argument_list|()
block|;
name|value_type
name|__x_copy
operator|=
name|__x
block|;
if|if
condition|(
name|__elems_before
operator|<
name|difference_type
argument_list|(
name|__length
operator|/
literal|2
argument_list|)
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_start
init|=
name|_M_start
decl_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__elems_before
expr_stmt|;
name|try
block|{
if|if
condition|(
name|__elems_before
operator|>=
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__start_n
init|=
name|_M_start
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|_M_start
argument_list|,
name|__start_n
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__start_n
argument_list|,
name|__pos
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|__pos
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|,
name|__pos
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__uninitialized_copy_fill
argument_list|(
name|_M_start
argument_list|,
name|__pos
argument_list|,
name|__new_start
argument_list|,
name|_M_start
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|fill
argument_list|(
name|__old_start
argument_list|,
name|__pos
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     catch
operator|(
operator|...
operator|)
block|{
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
block|;
name|__throw_exception_again
block|;       }
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_finish
init|=
name|_M_finish
decl_stmt|;
specifier|const
name|difference_type
name|__elems_after
init|=
name|difference_type
argument_list|(
name|__length
argument_list|)
operator|-
name|__elems_before
decl_stmt|;
name|__pos
operator|=
name|_M_finish
operator|-
name|__elems_after
expr_stmt|;
name|try
block|{
if|if
condition|(
name|__elems_after
operator|>
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__finish_n
init|=
name|_M_finish
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|__finish_n
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__finish_n
argument_list|,
name|__old_finish
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|__pos
argument_list|,
name|__pos
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|__uninitialized_fill_copy
argument_list|(
name|_M_finish
argument_list|,
name|__pos
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|,
name|__x_copy
argument_list|,
name|__pos
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|fill
argument_list|(
name|__pos
argument_list|,
name|__old_finish
argument_list|,
name|__x_copy
argument_list|)
expr_stmt|;
block|}
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_aux
argument_list|(
argument|iterator __pos
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|size_type __n
argument_list|)
block|{
specifier|const
name|difference_type
name|__elemsbefore
operator|=
name|__pos
operator|-
name|_M_start
block|;
name|size_type
name|__length
operator|=
name|size
argument_list|()
block|;
if|if
condition|(
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|__elemsbefore
operator|)
operator|<
name|__length
operator|/
literal|2
condition|)
block|{
name|iterator
name|__new_start
init|=
name|_M_reserve_elements_at_front
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_start
init|=
name|_M_start
decl_stmt|;
name|__pos
operator|=
name|_M_start
operator|+
name|__elemsbefore
expr_stmt|;
name|try
block|{
if|if
condition|(
name|__elemsbefore
operator|>=
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__start_n
init|=
name|_M_start
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|_M_start
argument_list|,
name|__start_n
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__start_n
argument_list|,
name|__pos
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pos
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|difference_type
argument_list|(
name|__n
argument_list|)
operator|-
name|__elemsbefore
argument_list|)
expr_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|_M_start
argument_list|,
name|__pos
argument_list|,
name|__first
argument_list|,
name|__mid
argument_list|,
name|__new_start
argument_list|)
expr_stmt|;
name|_M_start
operator|=
name|__new_start
expr_stmt|;
name|copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|__old_start
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     catch
operator|(
operator|...
operator|)
block|{
name|_M_destroy_nodes
argument_list|(
name|__new_start
operator|.
name|_M_node
argument_list|,
name|_M_start
operator|.
name|_M_node
argument_list|)
block|;
name|__throw_exception_again
block|;       }
end_expr_stmt

begin_block
unit|}   else
block|{
name|iterator
name|__new_finish
init|=
name|_M_reserve_elements_at_back
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|iterator
name|__old_finish
init|=
name|_M_finish
decl_stmt|;
specifier|const
name|difference_type
name|__elemsafter
init|=
name|difference_type
argument_list|(
name|__length
argument_list|)
operator|-
name|__elemsbefore
decl_stmt|;
name|__pos
operator|=
name|_M_finish
operator|-
name|__elemsafter
expr_stmt|;
name|try
block|{
if|if
condition|(
name|__elemsafter
operator|>
name|difference_type
argument_list|(
name|__n
argument_list|)
condition|)
block|{
name|iterator
name|__finish_n
init|=
name|_M_finish
operator|-
name|difference_type
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|__finish_n
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy_backward
argument_list|(
name|__pos
argument_list|,
name|__finish_n
argument_list|,
name|__old_finish
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|__elemsafter
argument_list|)
expr_stmt|;
name|__uninitialized_copy_copy
argument_list|(
name|__mid
argument_list|,
name|__last
argument_list|,
name|__pos
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|__new_finish
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|__pos
argument_list|)
expr_stmt|;
block|}
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_destroy_nodes
argument_list|(
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_new_elements_at_front
argument_list|(
argument|size_type __new_elems
argument_list|)
block|{
name|size_type
name|__new_nodes
operator|=
operator|(
name|__new_elems
operator|+
name|_S_buffer_size
argument_list|()
operator|-
literal|1
operator|)
operator|/
name|_S_buffer_size
argument_list|()
block|;
name|_M_reserve_map_at_front
argument_list|(
name|__new_nodes
argument_list|)
block|;
name|size_type
name|__i
block|;
name|try
block|{
for|for
control|(
name|__i
operator|=
literal|1
init|;
name|__i
operator|<=
name|__new_nodes
condition|;
operator|++
name|__i
control|)
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
name|__i
operator|)
operator|=
name|_M_allocate_node
argument_list|()
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
for|for
control|(
name|size_type
name|__j
init|=
literal|1
init|;
name|__j
operator|<
name|__i
condition|;
operator|++
name|__j
control|)
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_start
operator|.
name|_M_node
operator|-
name|__j
operator|)
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_new_elements_at_back
argument_list|(
argument|size_type __new_elems
argument_list|)
block|{
name|size_type
name|__new_nodes
operator|=
operator|(
name|__new_elems
operator|+
name|_S_buffer_size
argument_list|()
operator|-
literal|1
operator|)
operator|/
name|_S_buffer_size
argument_list|()
block|;
name|_M_reserve_map_at_back
argument_list|(
name|__new_nodes
argument_list|)
block|;
name|size_type
name|__i
block|;
name|try
block|{
for|for
control|(
name|__i
operator|=
literal|1
init|;
name|__i
operator|<=
name|__new_nodes
condition|;
operator|++
name|__i
control|)
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
name|__i
operator|)
operator|=
name|_M_allocate_node
argument_list|()
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
for|for
control|(
name|size_type
name|__j
init|=
literal|1
init|;
name|__j
operator|<
name|__i
condition|;
operator|++
name|__j
control|)
name|_M_deallocate_node
argument_list|(
operator|*
operator|(
name|_M_finish
operator|.
name|_M_node
operator|+
name|__j
operator|)
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
name|void
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_reallocate_map
argument_list|(
argument|size_type __nodes_to_add
argument_list|,
argument|bool __add_at_front
argument_list|)
block|{
name|size_type
name|__old_num_nodes
operator|=
name|_M_finish
operator|.
name|_M_node
operator|-
name|_M_start
operator|.
name|_M_node
operator|+
literal|1
block|;
name|size_type
name|__new_num_nodes
operator|=
name|__old_num_nodes
operator|+
name|__nodes_to_add
block|;
name|_Map_pointer
name|__new_nstart
block|;
if|if
condition|(
name|_M_map_size
operator|>
literal|2
operator|*
name|__new_num_nodes
condition|)
block|{
name|__new_nstart
operator|=
name|_M_map
operator|+
operator|(
name|_M_map_size
operator|-
name|__new_num_nodes
operator|)
operator|/
literal|2
operator|+
operator|(
name|__add_at_front
condition|?
name|__nodes_to_add
else|:
literal|0
operator|)
expr_stmt|;
if|if
condition|(
name|__new_nstart
operator|<
name|_M_start
operator|.
name|_M_node
condition|)
name|copy
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_nstart
argument_list|)
expr_stmt|;
else|else
name|copy_backward
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_nstart
operator|+
name|__old_num_nodes
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|size_type
name|__new_map_size
init|=
name|_M_map_size
operator|+
name|max
argument_list|(
name|_M_map_size
argument_list|,
name|__nodes_to_add
argument_list|)
operator|+
literal|2
decl_stmt|;
name|_Map_pointer
name|__new_map
init|=
name|_M_allocate_map
argument_list|(
name|__new_map_size
argument_list|)
decl_stmt|;
name|__new_nstart
operator|=
name|__new_map
operator|+
operator|(
name|__new_map_size
operator|-
name|__new_num_nodes
operator|)
operator|/
literal|2
operator|+
operator|(
name|__add_at_front
condition|?
name|__nodes_to_add
else|:
literal|0
operator|)
expr_stmt|;
name|copy
argument_list|(
name|_M_start
operator|.
name|_M_node
argument_list|,
name|_M_finish
operator|.
name|_M_node
operator|+
literal|1
argument_list|,
name|__new_nstart
argument_list|)
expr_stmt|;
name|_M_deallocate_map
argument_list|(
name|_M_map
argument_list|,
name|_M_map_size
argument_list|)
expr_stmt|;
name|_M_map
operator|=
name|__new_map
expr_stmt|;
name|_M_map_size
operator|=
name|__new_map_size
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|_M_start
operator|.
name|_M_set_node
argument_list|(
name|__new_nstart
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_M_finish
operator|.
name|_M_set_node
argument_list|(
name|__new_nstart
operator|+
name|__old_num_nodes
operator|-
literal|1
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// Nonmember functions.
end_comment

begin_expr_stmt
unit|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|size
argument_list|()
operator|==
name|__y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|,
name|__y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|==
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|<
name|__x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__y
operator|<
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|deque
operator|<
name|_Tp
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|<
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|,
name|class
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|deque<_Tp
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|deque<_Tp
argument_list|,
argument|_Alloc>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
end_expr_stmt

begin_comment
unit|}
comment|// namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GLIBCPP_INTERNAL_DEQUE_H */
end_comment

end_unit

