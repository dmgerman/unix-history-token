begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- internal _Meta class.
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|// Written by Gabriel Dos Reis<Gabriel.Dos-Reis@cmla.ens-cachan.fr>
end_comment

begin_comment
comment|/** @file valarray_meta.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CPP_VALARRAY_META_H
end_ifndef

begin_define
define|#
directive|define
name|_CPP_VALARRAY_META_H
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_decl_stmt
name|namespace
name|std
block|{
comment|//
comment|// Implementing a loosened valarray return value is tricky.
comment|// First we need to meet 26.3.1/3: we should not add more than
comment|// two levels of template nesting. Therefore we resort to template
comment|// template to "flatten" loosened return value types.
comment|// At some point we use partial specialization to remove one level
comment|// template nesting due to _Expr<>
comment|//
comment|// This class is NOT defined. It doesn't need to.
name|template
operator|<
name|typename
name|_Tp1
operator|,
name|typename
name|_Tp2
operator|>
name|class
name|_Constant
expr_stmt|;
comment|// Implementations of unary functions applied to valarray<>s.
comment|// I use hard-coded object functions here instead of a generic
comment|// approach like pointers to function:
comment|//    1) correctness: some functions take references, others values.
comment|//       we can't deduce the correct type afterwards.
comment|//    2) efficiency -- object functions can be easily inlined
comment|//    3) be Koenig-lookup-friendly
struct|struct
name|__abs
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|abs
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__cos
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|cos
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__acos
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|acos
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__cosh
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|cosh
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__sin
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|sin
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__asin
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|asin
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__sinh
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|sinh
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__tan
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|tan
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__atan
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|atan
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__tanh
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|tanh
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__exp
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|exp
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__log
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|log
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__log10
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|log10
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__sqrt
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|sqrt
argument_list|(
name|__t
argument_list|)
return|;
block|}
block|}
struct|;
comment|// In the past, we used to tailor operator applications semantics
comment|// to the specialization of standard function objects (i.e. plus<>, etc.)
comment|// That is incorrect.  Therefore we provide our own surrogates.
struct|struct
name|__unary_plus
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
operator|+
name|__t
return|;
block|}
block|}
struct|;
struct|struct
name|__negate
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
operator|-
name|__t
return|;
block|}
block|}
struct|;
struct|struct
name|__bitwise_not
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
operator|~
name|__t
return|;
block|}
block|}
struct|;
struct|struct
name|__plus
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|+
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__minus
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|-
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__multiplies
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|*
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__divides
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|/
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__modulus
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|%
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__bitwise_xor
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|^
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__bitwise_and
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|&
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__bitwise_or
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator||
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__shift_left
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|<<
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__shift_right
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|>>
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__logical_and
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|&&
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__logical_or
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|||
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__logical_not
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
operator|!
name|__x
return|;
block|}
block|}
struct|;
struct|struct
name|__equal_to
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|==
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__not_equal_to
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|!=
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__less
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|<
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__greater
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|>
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__less_equal
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|<=
name|__y
return|;
block|}
block|}
struct|;
struct|struct
name|__greater_equal
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|bool
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|>=
name|__y
return|;
block|}
block|}
struct|;
comment|// The few binary functions we miss.
struct|struct
name|__atan2
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|atan2
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
block|}
struct|;
struct|struct
name|__pow
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
specifier|const
block|{
return|return
name|pow
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
block|}
struct|;
comment|// We need these bits in order to recover the return type of
comment|// some functions/operators now that we're no longer using
comment|// function templates.
name|template
operator|<
name|typename
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
block|{
typedef|typedef
name|_Tp
name|result_type
typedef|;
block|}
empty_stmt|;
comment|// several specializations for relational operators.
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__logical_not
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__logical_and
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__logical_or
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__less
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__greater
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__less_equal
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__greater_equal
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__equal_to
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|__fun
operator|<
name|__not_equal_to
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|bool
name|result_type
typedef|;
block|}
empty_stmt|;
comment|//
comment|// Apply function taking a value/const reference closure
comment|//
name|template
operator|<
name|typename
name|_Dom
operator|,
name|typename
name|_Arg
operator|>
name|class
name|_FunBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|value_type
expr_stmt|;
name|_FunBase
argument_list|(
argument|const _Dom& __e
argument_list|,
argument|value_type __f(_Arg)
argument_list|)
operator|:
name|_M_expr
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_func
argument_list|(
argument|__f
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_func
argument_list|(
name|_M_expr
index|[
name|__i
index|]
argument_list|)
return|;
block|}
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr
operator|.
name|size
argument_list|()
return|;
block|}
name|private
label|:
specifier|const
name|_Dom
modifier|&
name|_M_expr
decl_stmt|;
name|value_type
function_decl|(
modifier|*
name|_M_func
function_decl|)
parameter_list|(
name|_Arg
parameter_list|)
function_decl|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_ValFunClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_FunBase
operator|<
name|_Dom
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|>
block|{
typedef|typedef
name|_FunBase
operator|<
name|_Dom
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
name|_Tp
typedef|;
end_typedef

begin_macro
name|_ValFunClos
argument_list|(
argument|const _Dom& __e
argument_list|,
argument|_Tp __f(_Tp)
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__f
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_ValFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_FunBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
block|{
typedef|typedef
name|_FunBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_macro
name|_ValFunClos
argument_list|(
argument|const valarray<_Tp>& __v
argument_list|,
argument|_Tp __f(_Tp)
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__v
argument_list|,
argument|__f
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_RefFunClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_FunBase
operator|<
name|_Dom
operator|,
specifier|const
name|typename
name|_Dom
operator|::
name|value_type
operator|&
operator|>
block|{
typedef|typedef
name|_FunBase
operator|<
name|_Dom
operator|,
specifier|const
name|typename
name|_Dom
operator|::
name|value_type
operator|&
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
name|_Tp
typedef|;
end_typedef

begin_macro
name|_RefFunClos
argument_list|(
argument|const _Dom& __e
argument_list|,
argument|_Tp __f(const _Tp&)
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__f
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_RefFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_FunBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
operator|,
specifier|const
name|_Tp
operator|&
operator|>
block|{
typedef|typedef
name|_FunBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
operator|,
specifier|const
name|_Tp
operator|&
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_macro
name|_RefFunClos
argument_list|(
argument|const valarray<_Tp>& __v
argument_list|,
argument|_Tp __f(const _Tp&)
argument_list|)
end_macro

begin_macro
unit|:
name|_Base
argument_list|(
argument|__v
argument_list|,
argument|__f
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// Unary expression closure.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Arg
operator|>
name|class
name|_UnBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Arg
operator|::
name|value_type
name|_Vt
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|__fun
operator|<
name|_Oper
operator|,
name|_Vt
operator|>
operator|::
name|result_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_UnBase
argument_list|(
specifier|const
name|_Arg
operator|&
name|__e
argument_list|)
operator|:
name|_M_expr
argument_list|(
argument|__e
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_Oper
argument_list|()
argument_list|(
name|_M_expr
index|[
name|__i
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Arg
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_UnClos
operator|<
name|_Oper
operator|,
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_UnBase
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
block|{
typedef|typedef
name|_Dom
name|_Arg
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_UnBase
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_UnClos
argument_list|(
specifier|const
name|_Arg
operator|&
name|__e
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|_UnClos
operator|<
name|_Oper
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_UnBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|valarray
operator|<
name|_Tp
operator|>
name|_Arg
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_UnBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_UnClos
argument_list|(
specifier|const
name|_Arg
operator|&
name|__e
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// Binary expression closure.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_FirstArg
operator|,
name|class
name|_SecondArg
operator|>
name|class
name|_BinBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_FirstArg
operator|::
name|value_type
name|_Vt
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|__fun
operator|<
name|_Oper
operator|,
name|_Vt
operator|>
operator|::
name|result_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinBase
argument_list|(
specifier|const
name|_FirstArg
operator|&
name|__e1
argument_list|,
specifier|const
name|_SecondArg
operator|&
name|__e2
argument_list|)
operator|:
name|_M_expr1
argument_list|(
name|__e1
argument_list|)
operator|,
name|_M_expr2
argument_list|(
argument|__e2
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_Oper
argument_list|()
argument_list|(
name|_M_expr1
index|[
name|__i
index|]
argument_list|,
name|_M_expr2
index|[
name|__i
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr1
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_FirstArg
modifier|&
name|_M_expr1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|_SecondArg
modifier|&
name|_M_expr2
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Clos
operator|>
name|class
name|_BinBase2
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Clos
operator|::
name|value_type
name|_Vt
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|__fun
operator|<
name|_Oper
operator|,
name|_Vt
operator|>
operator|::
name|result_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinBase2
argument_list|(
specifier|const
name|_Clos
operator|&
name|__e
argument_list|,
specifier|const
name|_Vt
operator|&
name|__t
argument_list|)
operator|:
name|_M_expr1
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_expr2
argument_list|(
argument|__t
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_Oper
argument_list|()
argument_list|(
name|_M_expr1
index|[
name|__i
index|]
argument_list|,
name|_M_expr2
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr1
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Clos
modifier|&
name|_M_expr1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|_Vt
modifier|&
name|_M_expr2
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Clos
operator|>
name|class
name|_BinBase1
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Clos
operator|::
name|value_type
name|_Vt
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|__fun
operator|<
name|_Oper
operator|,
name|_Vt
operator|>
operator|::
name|result_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinBase1
argument_list|(
specifier|const
name|_Vt
operator|&
name|__t
argument_list|,
specifier|const
name|_Clos
operator|&
name|__e
argument_list|)
operator|:
name|_M_expr1
argument_list|(
name|__t
argument_list|)
operator|,
name|_M_expr2
argument_list|(
argument|__e
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_Oper
argument_list|()
argument_list|(
name|_M_expr1
argument_list|,
name|_M_expr2
index|[
name|__i
index|]
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_expr2
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Vt
modifier|&
name|_M_expr1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|_Clos
modifier|&
name|_M_expr2
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom1
operator|,
name|class
name|_Dom2
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Expr
operator|,
name|_Expr
operator|,
name|_Dom1
operator|,
name|_Dom2
operator|>
operator|:
name|_BinBase
operator|<
name|_Oper
operator|,
name|_Dom1
operator|,
name|_Dom2
operator|>
block|{
typedef|typedef
name|_BinBase
operator|<
name|_Oper
operator|,
name|_Dom1
operator|,
name|_Dom2
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Dom1
operator|&
name|__e1
argument_list|,
specifier|const
name|_Dom2
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_ValArray
operator|,
name|_ValArray
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
operator|:
name|_BinBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_BinBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
argument_list|,
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__w
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__v
argument_list|,
argument|__w
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Expr
operator|,
name|_ValArray
operator|,
name|_Dom
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|>
operator|:
name|_BinBase
operator|<
name|_Oper
operator|,
name|_Dom
operator|,
name|valarray
operator|<
name|typename
name|_Dom
operator|::
name|value_type
operator|>
expr|>
block|{
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|_Tp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_BinBase
operator|<
name|_Oper
operator|,
name|_Dom
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e1
argument_list|,
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_ValArray
operator|,
name|_Expr
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|,
name|_Dom
operator|>
operator|:
name|_BinBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|typename
name|_Dom
operator|::
name|value_type
operator|>
operator|,
name|_Dom
operator|>
block|{
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|_Tp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_BinBase
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
operator|,
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__e1
argument_list|,
specifier|const
name|_Dom
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Expr
operator|,
name|_Constant
operator|,
name|_Dom
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|>
operator|:
name|_BinBase2
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
block|{
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|_Tp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_BinBase2
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e1
argument_list|,
specifier|const
name|_Tp
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Constant
operator|,
name|_Expr
operator|,
name|typename
name|_Dom
operator|::
name|value_type
operator|,
name|_Dom
operator|>
operator|:
name|_BinBase1
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
block|{
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|_Tp
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_BinBase1
operator|<
name|_Oper
operator|,
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Tp
operator|&
name|__e1
argument_list|,
specifier|const
name|_Dom
operator|&
name|__e2
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e1
argument_list|,
argument|__e2
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_ValArray
operator|,
name|_Constant
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
operator|:
name|_BinBase2
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_BinBase2
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
argument_list|,
specifier|const
name|_Tp
operator|&
name|__t
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__v
argument_list|,
argument|__t
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Oper
operator|,
name|typename
name|_Tp
operator|>
expr|struct
name|_BinClos
operator|<
name|_Oper
operator|,
name|_Constant
operator|,
name|_ValArray
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
operator|:
name|_BinBase1
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_BinBase1
operator|<
name|_Oper
operator|,
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_BinClos
argument_list|(
specifier|const
name|_Tp
operator|&
name|__t
argument_list|,
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__t
argument_list|,
argument|__v
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// slice_array closure.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Dom
operator|>
name|class
name|_SBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|value_type
expr_stmt|;
name|_SBase
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|slice
operator|&
name|__s
argument_list|)
operator|:
name|_M_expr
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_slice
argument_list|(
argument|__s
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_expr
index|[
name|_M_slice
operator|.
name|start
argument_list|()
operator|+
name|__i
operator|*
name|_M_slice
operator|.
name|stride
argument_list|()
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_slice
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Dom
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|slice
modifier|&
name|_M_slice
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
name|class
name|_SBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
name|_Tp
name|value_type
typedef|;
name|_SBase
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|slice
operator|&
name|__s
argument_list|)
operator|:
name|_M_array
argument_list|(
name|__a
operator|.
name|_M_data
operator|+
name|__s
operator|.
name|start
argument_list|()
argument_list|)
operator|,
name|_M_size
argument_list|(
name|__s
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|_M_stride
argument_list|(
argument|__s.stride()
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_array
operator|.
name|_M_data
index|[
name|__i
operator|*
name|_M_stride
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_size
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|_Array
operator|<
name|_Tp
operator|>
name|_M_array
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|const
name|size_t
name|_M_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|size_t
name|_M_stride
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_SClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_SBase
operator|<
name|_Dom
operator|>
block|{
typedef|typedef
name|_SBase
operator|<
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_SClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|slice
operator|&
name|__s
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__s
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_SClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_SBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_SBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_expr_stmt
name|_SClos
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|slice
operator|&
name|__s
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__s
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// gslice_array closure.
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|class
name|_GBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|value_type
expr_stmt|;
name|_GBase
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_M_expr
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_index
argument_list|(
argument|__i
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_expr
index|[
name|_M_index
index|[
name|__i
index|]
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_index
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Dom
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|_M_index
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
name|class
name|_GBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
block|{
name|public
operator|:
typedef|typedef
name|_Tp
name|value_type
typedef|;
name|_GBase
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_M_array
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_index
argument_list|(
argument|__i
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_array
operator|.
name|_M_data
index|[
name|_M_index
index|[
name|__i
index|]
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_index
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
specifier|const
name|_Array
operator|<
name|_Tp
operator|>
name|_M_array
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|_M_index
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_GClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_GBase
operator|<
name|_Dom
operator|>
block|{
typedef|typedef
name|_GBase
operator|<
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_GClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__i
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_GClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_GBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_GBase
operator|<
name|_Array
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_GClos
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
name|__a
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__i
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// indirect_array closure
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|class
name|_IBase
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Dom
operator|::
name|value_type
name|value_type
expr_stmt|;
name|_IBase
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_M_expr
argument_list|(
name|__e
argument_list|)
operator|,
name|_M_index
argument_list|(
argument|__i
argument_list|)
block|{}
name|value_type
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_expr
index|[
name|_M_index
index|[
name|__i
index|]
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_index
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Dom
modifier|&
name|_M_expr
decl_stmt|;
end_decl_stmt

begin_expr_stmt
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|_M_index
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Dom
operator|>
expr|struct
name|_IClos
operator|<
name|_Expr
operator|,
name|_Dom
operator|>
operator|:
name|_IBase
operator|<
name|_Dom
operator|>
block|{
typedef|typedef
name|_IBase
operator|<
name|_Dom
operator|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|value_type
name|value_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_IClos
argument_list|(
specifier|const
name|_Dom
operator|&
name|__e
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__e
argument_list|,
argument|__i
argument_list|)
block|{}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_IClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|:
name|_IBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
expr|>
block|{
typedef|typedef
name|_IBase
operator|<
name|valarray
operator|<
name|_Tp
operator|>
expr|>
name|_Base
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_expr_stmt
name|_IClos
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__a
argument_list|,
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|,
argument|__i
argument_list|)
block|{}
end_expr_stmt

begin_comment
unit|};
comment|//
end_comment

begin_comment
comment|// class _Expr
end_comment

begin_comment
comment|//
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
name|class
name|_Expr
block|{
name|public
operator|:
typedef|typedef
name|_Tp
name|value_type
typedef|;
name|_Expr
argument_list|(
specifier|const
name|_Clos
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
specifier|const
name|_Clos
operator|&
name|operator
argument_list|()
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|value_type
name|operator
index|[]
argument_list|(
name|size_t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|operator
index|[]
operator|(
name|slice
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Expr
operator|<
name|_UnClos
operator|<
name|__unary_plus
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Clos
operator|>
operator|,
name|value_type
operator|>
name|operator
operator|+
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Expr
operator|<
name|_UnClos
operator|<
name|__negate
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Clos
operator|>
operator|,
name|value_type
operator|>
name|operator
operator|-
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Expr
operator|<
name|_UnClos
operator|<
name|__bitwise_not
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Clos
operator|>
operator|,
name|value_type
operator|>
name|operator
operator|~
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Expr
operator|<
name|_UnClos
operator|<
name|__logical_not
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Clos
operator|>
operator|,
name|bool
operator|>
name|operator
operator|!
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|value_type
name|sum
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|shift
argument_list|(
argument|int
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|cshift
argument_list|(
argument|int
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|value_type
name|min
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|value_type
name|max
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|apply
argument_list|(
argument|value_type (*)(const value_type&)
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|valarray
operator|<
name|value_type
operator|>
name|apply
argument_list|(
argument|value_type (*)(value_type)
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_decl_stmt
specifier|const
name|_Clos
name|_M_closure
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|_Expr
argument_list|(
specifier|const
name|_Clos
operator|&
name|__c
argument_list|)
operator|:
name|_M_closure
argument_list|(
argument|__c
argument_list|)
block|{}
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
specifier|const
name|_Clos
operator|&
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
argument_list|()
operator|(
operator|)
specifier|const
block|{
return|return
name|_M_closure
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_closure
index|[
name|__i
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|slice
name|__s
operator|)
specifier|const
block|{
return|return
name|_M_closure
index|[
name|__s
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
name|__gs
operator|)
specifier|const
block|{
return|return
name|_M_closure
index|[
name|__gs
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
name|__m
operator|)
specifier|const
block|{
return|return
name|_M_closure
index|[
name|__m
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_closure
index|[
name|__i
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|size_t
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_closure
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|shift
argument_list|(
argument|int __n
argument_list|)
specifier|const
block|{
return|return
name|valarray
operator|<
name|_Tp
operator|>
operator|(
name|_M_closure
operator|)
operator|.
name|shift
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|cshift
argument_list|(
argument|int __n
argument_list|)
specifier|const
block|{
return|return
name|valarray
operator|<
name|_Tp
operator|>
operator|(
name|_M_closure
operator|)
operator|.
name|cshift
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|apply
argument_list|(
argument|_Tp __f(const _Tp&)
argument_list|)
specifier|const
block|{
return|return
name|valarray
operator|<
name|_Tp
operator|>
operator|(
name|_M_closure
operator|)
operator|.
name|apply
argument_list|(
name|__f
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|apply
argument_list|(
argument|_Tp __f(_Tp)
argument_list|)
specifier|const
block|{
return|return
name|valarray
operator|<
name|_Tp
operator|>
operator|(
name|_M_closure
operator|)
operator|.
name|apply
argument_list|(
name|__f
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// XXX: replace this with a more robust summation algorithm.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|sum
argument_list|()
specifier|const
block|{
name|size_t
name|__n
operator|=
name|_M_closure
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|__n
operator|==
literal|0
condition|)
return|return
name|_Tp
argument_list|()
return|;
else|else
block|{
name|_Tp
name|__s
init|=
name|_M_closure
index|[
operator|--
name|__n
index|]
decl_stmt|;
while|while
condition|(
name|__n
operator|!=
literal|0
condition|)
name|__s
operator|+=
name|_M_closure
index|[
operator|--
name|__n
index|]
expr_stmt|;
return|return
name|__s
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|min
argument_list|()
specifier|const
block|{
return|return
name|__valarray_min
argument_list|(
name|_M_closure
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|_Expr
operator|<
name|_Clos
operator|,
name|_Tp
operator|>
operator|::
name|max
argument_list|()
specifier|const
block|{
return|return
name|__valarray_max
argument_list|(
name|_M_closure
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|,
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_UnClos
operator|<
name|__logical_not
operator|,
name|_Expr
operator|,
name|_Dom
operator|>
operator|,
name|bool
operator|>
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|::
name|operator
operator|!
operator|(
operator|)
specifier|const
block|{
typedef|typedef
name|_UnClos
operator|<
name|__logical_not
operator|,
name|std
operator|::
name|_Expr
operator|,
name|_Dom
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
name|this
operator|->
name|_M_closure
argument_list|)
operator|)
return|;
end_return

begin_define
unit|}
define|#
directive|define
name|_DEFINE_EXPR_UNARY_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<class _Dom, typename _Tp>                                      \     inline _Expr<_UnClos<_Name,std::_Expr,_Dom>,_Tp>                      \     _Expr<_Dom,_Tp>::operator _Op() const                                 \     {                                                                     \       typedef _UnClos<_Name,std::_Expr,_Dom> _Closure;                    \       return _Expr<_Closure,_Tp>(_Closure(this->_M_closure));             \     }
end_define

begin_expr_stmt
unit|_DEFINE_EXPR_UNARY_OPERATOR
operator|(
operator|+
operator|,
name|__unary_plus
operator|)
name|_DEFINE_EXPR_UNARY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|__negate
argument_list|)
name|_DEFINE_EXPR_UNARY_OPERATOR
argument_list|(
argument|~
argument_list|,
argument|__bitwise_not
argument_list|)
undef|#
directive|undef
name|_DEFINE_EXPR_UNARY_OPERATOR
define|#
directive|define
name|_DEFINE_EXPR_BINARY_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<class _Dom1, class _Dom2>					\   inline _Expr<_BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2>,                 \          typename __fun<_Name, typename _Dom1::value_type>::result_type>\   operator _Op(const _Expr<_Dom1,typename _Dom1::value_type>& __v,      \ 	       const _Expr<_Dom2,typename _Dom2::value_type>& __w)      \   {                                                                     \     typedef typename _Dom1::value_type _Arg;                            \     typedef typename __fun<_Name, _Arg>::result_type _Value;            \     typedef _BinClos<_Name,_Expr,_Expr,_Dom1,_Dom2> _Closure;           \     return _Expr<_Closure,_Value>(_Closure(__v(), __w()));              \   }                                                                     \                                                                         \ template<class _Dom>                                                    \ inline _Expr<_BinClos<_Name,_Expr,_Constant,_Dom,typename _Dom::value_type>,\              typename __fun<_Name, typename _Dom::value_type>::result_type>\ operator _Op(const _Expr<_Dom,typename _Dom::value_type>& __v,          \              const typename _Dom::value_type& __t)                      \ {                                                                       \   typedef typename _Dom::value_type _Arg;                               \   typedef typename __fun<_Name, _Arg>::result_type _Value;              \   typedef _BinClos<_Name,_Expr,_Constant,_Dom,_Arg> _Closure;           \   return _Expr<_Closure,_Value>(_Closure(__v(), __t));                  \ }                                                                       \                                                                         \ template<class _Dom>                                                    \ inline _Expr<_BinClos<_Name,_Constant,_Expr,typename _Dom::value_type,_Dom>,\              typename __fun<_Name, typename _Dom::value_type>::result_type>\ operator _Op(const typename _Dom::value_type& __t,                      \              const _Expr<_Dom,typename _Dom::value_type>& __v)          \ {                                                                       \   typedef typename _Dom::value_type _Arg;                               \   typedef typename __fun<_Name, _Arg>::result_type _Value;              \   typedef _BinClos<_Name,_Constant,_Expr,_Arg,_Dom> _Closure;           \   return _Expr<_Closure,_Value>(_Closure(__t, __v()));                  \ }                                                                       \                                                                         \ template<class _Dom>                                                    \ inline _Expr<_BinClos<_Name,_Expr,_ValArray,_Dom,typename _Dom::value_type>,\              typename __fun<_Name, typename _Dom::value_type>::result_type>\ operator _Op(const _Expr<_Dom,typename _Dom::value_type>& __e,          \              const valarray<typename _Dom::value_type>& __v)            \ {                                                                       \   typedef typename _Dom::value_type _Arg;                               \   typedef typename __fun<_Name, _Arg>::result_type _Value;              \   typedef _BinClos<_Name,_Expr,_ValArray,_Dom,_Arg> _Closure;           \   return  _Expr<_Closure,_Value>(_Closure(__e(), __v));                 \ }                                                                       \                                                                         \ template<class _Dom>                                                    \ inline _Expr<_BinClos<_Name,_ValArray,_Expr,typename _Dom::value_type,_Dom>,\              typename __fun<_Name, typename _Dom::value_type>::result_type>\ operator _Op(const valarray<typename _Dom::value_type>& __v,            \              const _Expr<_Dom,typename _Dom::value_type>& __e)          \ {                                                                       \   typedef typename _Dom::value_type _Tp;                                \   typedef typename __fun<_Name, _Tp>::result_type _Value;               \   typedef _BinClos<_Name,_ValArray,_Expr,_Tp,_Dom> _Closure;            \   return _Expr<_Closure,_Value> (_Closure (__v, __e ()));               \ }
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|+
argument_list|,
argument|__plus
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|__minus
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|*
argument_list|,
argument|__multiplies
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|/
argument_list|,
argument|__divides
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|%
argument_list|,
argument|__modulus
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|^
argument_list|,
argument|__bitwise_xor
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|&
argument_list|,
argument|__bitwise_and
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument||
argument_list|,
argument|__bitwise_or
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|<<
argument_list|,
argument|__shift_left
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|>>
argument_list|,
argument|__shift_right
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|&&
argument_list|,
argument|__logical_and
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|||
argument_list|,
argument|__logical_or
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|==
argument_list|,
argument|__equal_to
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|!=
argument_list|,
argument|__not_equal_to
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|<
argument_list|,
argument|__less
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|>
argument_list|,
argument|__greater
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|<=
argument_list|,
argument|__less_equal
argument_list|)
name|_DEFINE_EXPR_BINARY_OPERATOR
argument_list|(
argument|>=
argument_list|,
argument|__greater_equal
argument_list|)
undef|#
directive|undef
name|_DEFINE_EXPR_BINARY_OPERATOR
define|#
directive|define
name|_DEFINE_EXPR_UNARY_FUNCTION
parameter_list|(
name|_Name
parameter_list|)
define|\
value|template<class _Dom>                                                   \     inline _Expr<_UnClos<__##_Name,_Expr,_Dom>,typename _Dom::value_type>\     _Name(const _Expr<_Dom,typename _Dom::value_type>& __e)              \     {                                                                    \       typedef typename _Dom::value_type _Tp;                             \       typedef _UnClos<__##_Name,_Expr,_Dom> _Closure;                    \       return _Expr<_Closure,_Tp>(_Closure(__e()));                       \     }                                                                    \                                                                          \   template<typename _Tp>                                                 \     inline _Expr<_UnClos<__##_Name,_ValArray,_Tp>,_Tp>                   \     _Name(const valarray<_Tp>& __v)                                      \     {                                                                    \       typedef _UnClos<__##_Name,_ValArray,_Tp> _Closure;                 \       return _Expr<_Closure,_Tp>(_Closure(__v));                         \     }
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|abs
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|cos
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|acos
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|cosh
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|sin
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|asin
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|sinh
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|tan
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|tanh
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|atan
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|exp
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|log
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|log10
argument_list|)
name|_DEFINE_EXPR_UNARY_FUNCTION
argument_list|(
argument|sqrt
argument_list|)
undef|#
directive|undef
name|_DEFINE_EXPR_UNARY_FUNCTION
define|#
directive|define
name|_DEFINE_EXPR_BINARY_FUNCTION
parameter_list|(
name|_Fun
parameter_list|)
define|\
value|template<class _Dom1, class _Dom2>                                   \     inline _Expr<_BinClos<__##_Fun,_Expr,_Expr,_Dom1,_Dom2>,           \ 		 typename _Dom1::value_type>                           \     _Fun(const _Expr<_Dom1,typename _Dom1::value_type>& __e1,          \ 	  const _Expr<_Dom2,typename _Dom2::value_type>& __e2)         \     {                                                                  \       typedef typename _Dom1::value_type _Tp;                          \       typedef _BinClos<__##_Fun,_Expr,_Expr,_Dom1,_Dom2> _Closure;     \       return _Expr<_Closure,_Tp>(_Closure(__e1(), __e2()));            \     }                                                                  \                                                                        \   template<class _Dom>                                                 \     inline _Expr<_BinClos<__##_Fun, _Expr, _ValArray, _Dom,            \ 			  typename _Dom::value_type>,                  \ 		 typename _Dom::value_type>                            \     _Fun(const _Expr<_Dom,typename _Dom::value_type>& __e,             \ 	 const valarray<typename _Dom::value_type>& __v)               \     {                                                                  \       typedef typename _Dom::value_type _Tp;                           \       typedef _BinClos<__##_Fun, _Expr, _ValArray, _Dom, _Tp> _Closure;\       return _Expr<_Closure,_Tp>(_Closure(__e(), __v));                \     }                                                                  \                                                                        \   template<class _Dom>                                                 \     inline _Expr<_BinClos<__##_Fun, _ValArray, _Expr,                  \ 			  typename _Dom::value_type,_Dom>,             \ 		 typename _Dom::value_type>                            \     _Fun(const valarray<typename _Dom::valarray>& __v,                 \ 	 const _Expr<_Dom,typename _Dom::value_type>& __e)             \     {                                                                  \       typedef typename _Dom::value_type _Tp;                           \       typedef _BinClos<__##_Fun,_ValArray,_Expr,_Tp,_Dom> _Closure;    \       return _Expr<_Closure,_Tp>(_Closure(__v, __e()));                \     }                                                                  \                                                                        \   template<class _Dom>                                                 \     inline _Expr<_BinClos<__##_Fun,_Expr,_Constant,_Dom,               \ 			  typename _Dom::value_type>,                  \ 		 typename _Dom::value_type>                            \     _Fun(const _Expr<_Dom, typename _Dom::value_type>& __e,            \ 	 const typename _Dom::value_type& __t)                         \     {                                                                  \       typedef typename _Dom::value_type _Tp;                           \       typedef _BinClos<__##_Fun,_Expr,_Constant,_Dom,_Tp> _Closure;    \       return _Expr<_Closure,_Tp>(_Closure(__e(), __t));                \     }                                                                  \                                                                        \   template<class _Dom>                                                 \     inline _Expr<_BinClos<__##_Fun,_Constant,_Expr,                    \ 			  typename _Dom::value_type,_Dom>,             \ 		 typename _Dom::value_type>                            \     _Fun(const typename _Dom::value_type& __t,                         \ 	 const _Expr<_Dom,typename _Dom::value_type>& __e)             \     {                                                                  \       typedef typename _Dom::value_type _Tp;                           \       typedef _BinClos<__##_Fun, _Constant,_Expr,_Tp,_Dom> _Closure;   \       return _Expr<_Closure,_Tp>(_Closure(__t, __e()));                \     }                                                                  \                                                                        \   template<typename _Tp>                                               \     inline _Expr<_BinClos<__##_Fun,_ValArray,_ValArray,_Tp,_Tp>, _Tp>  \     _Fun(const valarray<_Tp>& __v, const valarray<_Tp>& __w)           \     {                                                                  \       typedef _BinClos<__##_Fun,_ValArray,_ValArray,_Tp,_Tp> _Closure; \       return _Expr<_Closure,_Tp>(_Closure(__v, __w));                  \     }                                                                  \                                                                        \   template<typename _Tp>                                               \     inline _Expr<_BinClos<__##_Fun,_ValArray,_Constant,_Tp,_Tp>,_Tp>   \     _Fun(const valarray<_Tp>& __v, const _Tp& __t)                     \     {                                                                  \       typedef _BinClos<__##_Fun,_ValArray,_Constant,_Tp,_Tp> _Closure; \       return _Expr<_Closure,_Tp>(_Closure(__v, __t));                  \     }                                                                  \ 								       \   template<typename _Tp>                                               \     inline _Expr<_BinClos<__##_Fun,_Constant,_ValArray,_Tp,_Tp>,_Tp>   \     _Fun(const _Tp& __t, const valarray<_Tp>& __v)                     \     {                                                                  \       typedef _BinClos<__##_Fun,_Constant,_ValArray,_Tp,_Tp> _Closure; \       return _Expr<_Closure,_Tp>(_Closure(__t, __v));                  \     }
name|_DEFINE_EXPR_BINARY_FUNCTION
argument_list|(
argument|atan2
argument_list|)
name|_DEFINE_EXPR_BINARY_FUNCTION
argument_list|(
argument|pow
argument_list|)
end_expr_stmt

begin_undef
undef|#
directive|undef
name|_DEFINE_EXPR_BINARY_FUNCTION
end_undef

begin_comment
unit|}
comment|// std::
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CPP_VALARRAY_META_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:c++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

