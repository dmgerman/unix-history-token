begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// bit_vector and vector<bool> specialization -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2001, 2002 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1996-1999  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  */
end_comment

begin_comment
comment|/** @file stl_bvector.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__GLIBCPP_INTERNAL_BVECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|__GLIBCPP_INTERNAL_BVECTOR_H
end_define

begin_decl_stmt
name|namespace
name|std
block|{
typedef|typedef
name|unsigned
name|long
name|_Bit_type
typedef|;
enum|enum
block|{
name|_M_word_bit
init|=
name|int
argument_list|(
argument|CHAR_BIT * sizeof(_Bit_type)
argument_list|)
block|}
enum|;
struct|struct
name|_Bit_reference
block|{
name|_Bit_type
modifier|*
name|_M_p
decl_stmt|;
name|_Bit_type
name|_M_mask
decl_stmt|;
name|_Bit_reference
argument_list|(
argument|_Bit_type * __x
argument_list|,
argument|_Bit_type __y
argument_list|)
block|:
name|_M_p
argument_list|(
name|__x
argument_list|)
operator|,
name|_M_mask
argument_list|(
argument|__y
argument_list|)
block|{}
name|public
operator|:
name|_Bit_reference
argument_list|()
operator|:
name|_M_p
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_mask
argument_list|(
literal|0
argument_list|)
block|{}
name|operator
name|bool
argument_list|()
specifier|const
block|{
return|return
operator|!
operator|!
operator|(
operator|*
name|_M_p
operator|&
name|_M_mask
operator|)
return|;
block|}
name|_Bit_reference
modifier|&
name|operator
init|=
operator|(
name|bool
name|__x
operator|)
block|{
if|if
condition|(
name|__x
condition|)
operator|*
name|_M_p
operator||=
name|_M_mask
expr_stmt|;
else|else
operator|*
name|_M_p
operator|&=
operator|~
name|_M_mask
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|_Bit_reference
modifier|&
name|operator
init|=
operator|(
specifier|const
name|_Bit_reference
operator|&
name|__x
operator|)
block|{
return|return
operator|*
name|this
operator|=
name|bool
argument_list|(
name|__x
argument_list|)
return|;
block|}
name|bool
name|operator
decl|==
argument_list|(
specifier|const
name|_Bit_reference
operator|&
name|__x
argument_list|)
decl|const
block|{
return|return
name|bool
argument_list|(
operator|*
name|this
argument_list|)
operator|==
name|bool
argument_list|(
name|__x
argument_list|)
return|;
block|}
name|bool
name|operator
decl|<
argument_list|(
specifier|const
name|_Bit_reference
operator|&
name|__x
argument_list|)
decl|const
block|{
return|return
operator|!
name|bool
argument_list|(
operator|*
name|this
argument_list|)
operator|&&
name|bool
argument_list|(
name|__x
argument_list|)
return|;
block|}
name|void
name|flip
argument_list|()
block|{
operator|*
name|_M_p
operator|^=
name|_M_mask
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
specifier|inline
name|void
name|swap
parameter_list|(
name|_Bit_reference
name|__x
parameter_list|,
name|_Bit_reference
name|__y
parameter_list|)
block|{
name|bool
name|__tmp
init|=
name|__x
decl_stmt|;
name|__x
operator|=
name|__y
expr_stmt|;
name|__y
operator|=
name|__tmp
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|struct
name|_Bit_iterator_base
range|:
name|public
name|iterator
operator|<
name|random_access_iterator_tag
decl_stmt|,
name|bool
decl|>
block|{
name|_Bit_type
modifier|*
name|_M_p
decl_stmt|;
name|unsigned
name|int
name|_M_offset
decl_stmt|;
name|_Bit_iterator_base
argument_list|(
argument|_Bit_type * __x
argument_list|,
argument|unsigned int __y
argument_list|)
block|:
name|_M_p
argument_list|(
name|__x
argument_list|)
operator|,
name|_M_offset
argument_list|(
argument|__y
argument_list|)
block|{}
name|void
name|_M_bump_up
argument_list|()
block|{
if|if
condition|(
name|_M_offset
operator|++
operator|==
name|_M_word_bit
operator|-
literal|1
condition|)
block|{
name|_M_offset
operator|=
literal|0
expr_stmt|;
operator|++
name|_M_p
expr_stmt|;
block|}
block|}
name|void
name|_M_bump_down
argument_list|()
block|{
if|if
condition|(
name|_M_offset
operator|--
operator|==
literal|0
condition|)
block|{
name|_M_offset
operator|=
name|_M_word_bit
operator|-
literal|1
expr_stmt|;
operator|--
name|_M_p
expr_stmt|;
block|}
block|}
name|void
name|_M_incr
argument_list|(
argument|ptrdiff_t __i
argument_list|)
block|{
name|difference_type
name|__n
operator|=
name|__i
operator|+
name|_M_offset
block|;
name|_M_p
operator|+=
name|__n
operator|/
name|_M_word_bit
block|;
name|__n
operator|=
name|__n
operator|%
name|_M_word_bit
block|;
if|if
condition|(
name|__n
operator|<
literal|0
condition|)
block|{
name|_M_offset
operator|=
operator|(
name|unsigned
name|int
operator|)
name|__n
operator|+
name|_M_word_bit
expr_stmt|;
operator|--
name|_M_p
expr_stmt|;
block|}
else|else
name|_M_offset
operator|=
operator|(
name|unsigned
name|int
operator|)
name|__n
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Bit_iterator_base
operator|&
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_p
operator|==
name|__i
operator|.
name|_M_p
operator|&&
name|_M_offset
operator|==
name|__i
operator|.
name|_M_offset
return|;
block|}
name|bool
name|operator
operator|<
operator|(
specifier|const
name|_Bit_iterator_base
operator|&
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_p
operator|<
name|__i
operator|.
name|_M_p
operator|||
operator|(
name|_M_p
operator|==
name|__i
operator|.
name|_M_p
operator|&&
name|_M_offset
operator|<
name|__i
operator|.
name|_M_offset
operator|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Bit_iterator_base
operator|&
name|__i
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|__i
operator|)
return|;
block|}
name|bool
name|operator
operator|>
operator|(
specifier|const
name|_Bit_iterator_base
operator|&
name|__i
operator|)
specifier|const
block|{
return|return
name|__i
operator|<
operator|*
name|this
return|;
block|}
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|_Bit_iterator_base
operator|&
name|__i
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
name|__i
operator|<
operator|*
name|this
operator|)
return|;
block|}
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|_Bit_iterator_base
operator|&
name|__i
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|<
name|__i
operator|)
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
specifier|inline
name|ptrdiff_t
name|operator
operator|-
operator|(
specifier|const
name|_Bit_iterator_base
operator|&
name|__x
operator|,
specifier|const
name|_Bit_iterator_base
operator|&
name|__y
operator|)
block|{
return|return
name|_M_word_bit
operator|*
operator|(
name|__x
operator|.
name|_M_p
operator|-
name|__y
operator|.
name|_M_p
operator|)
operator|+
name|__x
operator|.
name|_M_offset
operator|-
name|__y
operator|.
name|_M_offset
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|struct
name|_Bit_iterator
range|:
name|public
name|_Bit_iterator_base
block|{
typedef|typedef
name|_Bit_reference
name|reference
typedef|;
end_decl_stmt

begin_typedef
typedef|typedef
name|_Bit_reference
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Bit_iterator
name|iterator
typedef|;
end_typedef

begin_expr_stmt
name|_Bit_iterator
argument_list|()
operator|:
name|_Bit_iterator_base
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
block|{}
name|_Bit_iterator
argument_list|(
argument|_Bit_type * __x
argument_list|,
argument|unsigned int __y
argument_list|)
operator|:
name|_Bit_iterator_base
argument_list|(
argument|__x
argument_list|,
argument|__y
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|reference
argument_list|(
name|_M_p
argument_list|,
literal|1UL
operator|<<
name|_M_offset
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|_M_bump_up
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_bump_up
argument_list|()
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|_M_bump_down
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|iterator
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_bump_down
argument_list|()
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|__i
operator|)
block|{
name|_M_incr
argument_list|(
name|__i
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|__i
operator|)
block|{
operator|*
name|this
operator|+=
operator|-
name|__i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|+
operator|(
name|difference_type
name|__i
operator|)
specifier|const
block|{
name|iterator
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|+=
name|__i
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|-
operator|(
name|difference_type
name|__i
operator|)
specifier|const
block|{
name|iterator
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|-=
name|__i
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|difference_type
name|__i
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|__i
operator|)
return|;
block|}
end_function

begin_expr_stmt
unit|};
specifier|inline
name|_Bit_iterator
name|operator
operator|+
operator|(
name|ptrdiff_t
name|__n
operator|,
specifier|const
name|_Bit_iterator
operator|&
name|__x
operator|)
block|{
return|return
name|__x
operator|+
name|__n
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|struct
name|_Bit_const_iterator
range|:
name|public
name|_Bit_iterator_base
block|{
typedef|typedef
name|bool
name|reference
typedef|;
end_decl_stmt

begin_typedef
typedef|typedef
name|bool
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|bool
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Bit_const_iterator
name|const_iterator
typedef|;
end_typedef

begin_expr_stmt
name|_Bit_const_iterator
argument_list|()
operator|:
name|_Bit_iterator_base
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
block|{}
name|_Bit_const_iterator
argument_list|(
argument|_Bit_type * __x
argument_list|,
argument|unsigned int __y
argument_list|)
operator|:
name|_Bit_iterator_base
argument_list|(
argument|__x
argument_list|,
argument|__y
argument_list|)
block|{}
name|_Bit_const_iterator
argument_list|(
specifier|const
name|_Bit_iterator
operator|&
name|__x
argument_list|)
operator|:
name|_Bit_iterator_base
argument_list|(
argument|__x._M_p
argument_list|,
argument|__x._M_offset
argument_list|)
block|{}
name|const_reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|_Bit_reference
argument_list|(
name|_M_p
argument_list|,
literal|1UL
operator|<<
name|_M_offset
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|_M_bump_up
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_bump_up
argument_list|()
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|_M_bump_down
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|const_iterator
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_bump_down
argument_list|()
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|__i
operator|)
block|{
name|_M_incr
argument_list|(
name|__i
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|__i
operator|)
block|{
operator|*
name|this
operator|+=
operator|-
name|__i
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|+
operator|(
name|difference_type
name|__i
operator|)
specifier|const
block|{
name|const_iterator
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|+=
name|__i
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|-
operator|(
name|difference_type
name|__i
operator|)
specifier|const
block|{
name|const_iterator
name|__tmp
operator|=
operator|*
name|this
block|;
return|return
name|__tmp
operator|-=
name|__i
return|;
block|}
end_expr_stmt

begin_function
name|const_reference
name|operator
function|[]
parameter_list|(
name|difference_type
name|__i
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|__i
operator|)
return|;
block|}
end_function

begin_expr_stmt
unit|};
specifier|inline
name|_Bit_const_iterator
name|operator
operator|+
operator|(
name|ptrdiff_t
name|__n
operator|,
specifier|const
name|_Bit_const_iterator
operator|&
name|__x
operator|)
block|{
return|return
name|__x
operator|+
name|__n
return|;
block|}
end_expr_stmt

begin_comment
comment|// Bit-vector base class, which encapsulates the difference between
end_comment

begin_comment
comment|// old SGI-style allocators and standard-conforming allocators.
end_comment

begin_comment
comment|// Base class for ordinary allocators.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Allocator
operator|,
name|bool
name|__is_static
operator|>
name|class
name|_Bvector_alloc_base
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|bool
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_M_data_allocator
return|;
block|}
name|_Bvector_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_M_data_allocator
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_start
argument_list|()
operator|,
name|_M_finish
argument_list|()
operator|,
name|_M_end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
name|protected
operator|:
name|_Bit_type
operator|*
name|_M_bit_alloc
argument_list|(
argument|size_t __n
argument_list|)
block|{
return|return
name|_M_data_allocator
operator|.
name|allocate
argument_list|(
operator|(
name|__n
operator|+
name|_M_word_bit
operator|-
literal|1
operator|)
operator|/
name|_M_word_bit
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|_M_deallocate
parameter_list|()
block|{
if|if
condition|(
name|_M_start
operator|.
name|_M_p
condition|)
name|_M_data_allocator
operator|.
name|deallocate
argument_list|(
name|_M_start
operator|.
name|_M_p
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
operator|.
name|_M_p
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|typename
name|_Alloc_traits
operator|<
name|_Bit_type
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|_M_data_allocator
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|_Bit_iterator
name|_M_start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Bit_iterator
name|_M_finish
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Bit_type
modifier|*
name|_M_end_of_storage
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// Specialization for instanceless allocators.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Allocator
operator|>
name|class
name|_Bvector_alloc_base
operator|<
name|_Allocator
operator|,
name|true
operator|>
block|{
name|public
operator|:
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|bool
operator|,
name|_Allocator
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|()
return|;
block|}
name|_Bvector_alloc_base
argument_list|(
specifier|const
name|allocator_type
operator|&
argument_list|)
operator|:
name|_M_start
argument_list|()
operator|,
name|_M_finish
argument_list|()
operator|,
name|_M_end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Bit_type
operator|,
name|_Allocator
operator|>
operator|::
name|_Alloc_type
name|_Alloc_type
expr_stmt|;
end_typedef

begin_function
name|_Bit_type
modifier|*
name|_M_bit_alloc
parameter_list|(
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|_Alloc_type
operator|::
name|allocate
argument_list|(
operator|(
name|__n
operator|+
name|_M_word_bit
operator|-
literal|1
operator|)
operator|/
name|_M_word_bit
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_deallocate
parameter_list|()
block|{
if|if
condition|(
name|_M_start
operator|.
name|_M_p
condition|)
name|_Alloc_type
operator|::
name|deallocate
argument_list|(
name|_M_start
operator|.
name|_M_p
argument_list|,
name|_M_end_of_storage
operator|-
name|_M_start
operator|.
name|_M_p
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|_Bit_iterator
name|_M_start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Bit_iterator
name|_M_finish
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Bit_type
modifier|*
name|_M_end_of_storage
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Alloc
operator|>
name|class
name|_Bvector_base
operator|:
name|public
name|_Bvector_alloc_base
operator|<
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|bool
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
block|{
typedef|typedef
name|_Bvector_alloc_base
operator|<
name|_Alloc
operator|,
name|_Alloc_traits
operator|<
name|bool
operator|,
name|_Alloc
operator|>
operator|::
name|_S_instanceless
operator|>
name|_Base
expr_stmt|;
name|public
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Base
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_Bvector_base
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_Base
argument_list|(
argument|__a
argument_list|)
block|{}
operator|~
name|_Bvector_base
argument_list|()
block|{
name|_Base
operator|::
name|_M_deallocate
argument_list|()
block|; }
end_expr_stmt

begin_comment
unit|};  }
comment|// namespace std
end_comment

begin_comment
comment|// Declare a partial specialization of vector<T, Alloc>.
end_comment

begin_include
include|#
directive|include
file|<bits/stl_vector.h>
end_include

begin_macro
unit|namespace
name|std
end_macro

begin_block
block|{
name|template
operator|<
name|typename
name|_Alloc
operator|>
name|class
name|vector
operator|<
name|bool
operator|,
name|_Alloc
operator|>
operator|:
name|public
name|_Bvector_base
operator|<
name|_Alloc
operator|>
block|{
name|public
operator|:
typedef|typedef
name|bool
name|value_type
typedef|;
typedef|typedef
name|size_t
name|size_type
typedef|;
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
name|_Bit_reference
name|reference
typedef|;
typedef|typedef
name|bool
name|const_reference
typedef|;
typedef|typedef
name|_Bit_reference
modifier|*
name|pointer
typedef|;
typedef|typedef
specifier|const
name|bool
modifier|*
name|const_pointer
typedef|;
typedef|typedef
name|_Bit_iterator
name|iterator
typedef|;
typedef|typedef
name|_Bit_const_iterator
name|const_iterator
typedef|;
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
typedef|typedef
name|typename
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|::
name|get_allocator
argument_list|()
return|;
block|}
name|protected
label|:
name|using
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|::
name|_M_bit_alloc
expr_stmt|;
name|using
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|::
name|_M_deallocate
expr_stmt|;
name|using
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|::
name|_M_start
expr_stmt|;
name|using
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|::
name|_M_finish
expr_stmt|;
name|using
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|::
name|_M_end_of_storage
expr_stmt|;
name|protected
label|:
name|void
name|_M_initialize
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|_Bit_type
modifier|*
name|__q
init|=
name|_M_bit_alloc
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|_M_end_of_storage
operator|=
name|__q
operator|+
operator|(
name|__n
operator|+
name|_M_word_bit
operator|-
literal|1
operator|)
operator|/
name|_M_word_bit
expr_stmt|;
name|_M_start
operator|=
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|_M_start
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
expr_stmt|;
block|}
name|void
name|_M_insert_aux
parameter_list|(
name|iterator
name|__position
parameter_list|,
name|bool
name|__x
parameter_list|)
block|{
if|if
condition|(
name|_M_finish
operator|.
name|_M_p
operator|!=
name|_M_end_of_storage
condition|)
block|{
name|copy_backward
argument_list|(
name|__position
argument_list|,
name|_M_finish
argument_list|,
name|_M_finish
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|*
name|__position
operator|=
name|__x
expr_stmt|;
operator|++
name|_M_finish
expr_stmt|;
block|}
else|else
block|{
name|size_type
name|__len
init|=
name|size
argument_list|()
condition|?
literal|2
operator|*
name|size
argument_list|()
else|:
name|static_cast
operator|<
name|size_type
operator|>
operator|(
name|_M_word_bit
operator|)
decl_stmt|;
name|_Bit_type
modifier|*
name|__q
init|=
name|_M_bit_alloc
argument_list|(
name|__len
argument_list|)
decl_stmt|;
name|iterator
name|__i
init|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__position
argument_list|,
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
operator|*
name|__i
operator|++
operator|=
name|__x
expr_stmt|;
name|_M_finish
operator|=
name|copy
argument_list|(
name|__position
argument_list|,
name|end
argument_list|()
argument_list|,
name|__i
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|()
expr_stmt|;
name|_M_end_of_storage
operator|=
name|__q
operator|+
operator|(
name|__len
operator|+
name|_M_word_bit
operator|-
literal|1
operator|)
operator|/
name|_M_word_bit
expr_stmt|;
name|_M_start
operator|=
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_initialize_range
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|_M_start
operator|=
name|iterator
argument_list|()
block|;
name|_M_finish
operator|=
name|iterator
argument_list|()
block|;
name|_M_end_of_storage
operator|=
literal|0
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
name|push_back
argument_list|(
operator|*
name|__first
argument_list|)
expr_stmt|;
block|}
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_initialize_range
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__n
operator|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
name|_M_initialize
argument_list|(
name|__n
argument_list|)
block|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_M_start
argument_list|)
block|;     }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_insert_range
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
block|{
name|__pos
operator|=
name|insert
argument_list|(
name|__pos
argument_list|,
operator|*
name|__first
argument_list|)
expr_stmt|;
operator|++
name|__pos
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_insert_range
argument_list|(
argument|iterator __position
argument_list|,
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
if|if
condition|(
name|__first
operator|!=
name|__last
condition|)
block|{
name|size_type
name|__n
init|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
decl_stmt|;
if|if
condition|(
name|capacity
argument_list|()
operator|-
name|size
argument_list|()
operator|>=
name|__n
condition|)
block|{
name|copy_backward
argument_list|(
name|__position
argument_list|,
name|end
argument_list|()
argument_list|,
name|_M_finish
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__position
argument_list|)
expr_stmt|;
name|_M_finish
operator|+=
name|difference_type
argument_list|(
name|__n
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|size_type
name|__len
init|=
name|size
argument_list|()
operator|+
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|__n
argument_list|)
decl_stmt|;
name|_Bit_type
modifier|*
name|__q
init|=
name|_M_bit_alloc
argument_list|(
name|__len
argument_list|)
decl_stmt|;
name|iterator
name|__i
init|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__position
argument_list|,
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|__i
operator|=
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__i
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|copy
argument_list|(
name|__position
argument_list|,
name|end
argument_list|()
argument_list|,
name|__i
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|()
expr_stmt|;
name|_M_end_of_storage
operator|=
name|__q
operator|+
operator|(
name|__len
operator|+
name|_M_word_bit
operator|-
literal|1
operator|)
operator|/
name|_M_word_bit
expr_stmt|;
name|_M_start
operator|=
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_else

begin_label
unit|}     }
name|public
label|:
end_label

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|_M_start
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|_M_start
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|_M_finish
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|_M_finish
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|end
argument_list|()
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|const_iterator
argument_list|(
name|_M_end_of_storage
argument_list|,
literal|0
argument_list|)
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|==
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
operator|)
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
operator|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|void
name|_M_range_check
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
if|if
condition|(
name|__n
operator|>=
name|this
operator|->
name|size
argument_list|()
condition|)
name|__throw_out_of_range
argument_list|(
literal|"vector<bool>"
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|reference
name|at
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
name|_M_range_check
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|__n
index|]
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|at
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
name|_M_range_check
argument_list|(
name|__n
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|__n
index|]
return|;
block|}
end_decl_stmt

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|vector
argument_list|(
specifier|const
name|allocator_type
operator|&
name|__a
operator|=
name|allocator_type
argument_list|()
argument_list|)
operator|:
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|(
name|__a
operator|)
block|{}
name|vector
argument_list|(
argument|size_type __n
argument_list|,
argument|bool __value
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|(
name|__a
operator|)
block|{
name|_M_initialize
argument_list|(
name|__n
argument_list|)
block|;
name|fill
argument_list|(
name|_M_start
operator|.
name|_M_p
argument_list|,
name|_M_end_of_storage
argument_list|,
name|__value
condition|?
operator|~
literal|0
else|:
literal|0
argument_list|)
block|;     }
name|explicit
name|vector
argument_list|(
argument|size_type __n
argument_list|)
operator|:
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|(
name|allocator_type
argument_list|()
operator|)
block|{
name|_M_initialize
argument_list|(
name|__n
argument_list|)
block|;
name|fill
argument_list|(
name|_M_start
operator|.
name|_M_p
argument_list|,
name|_M_end_of_storage
argument_list|,
literal|0
argument_list|)
block|;     }
name|vector
argument_list|(
specifier|const
name|vector
operator|&
name|__x
argument_list|)
operator|:
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|(
name|__x
operator|.
name|get_allocator
argument_list|()
operator|)
block|{
name|_M_initialize
argument_list|(
name|__x
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|_M_start
argument_list|)
block|;     }
comment|// Check whether it's an integral type.  If so, it's not an iterator.
name|template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_initialize_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_initialize
argument_list|(
name|__n
argument_list|)
block|;
name|fill
argument_list|(
name|_M_start
operator|.
name|_M_p
argument_list|,
name|_M_end_of_storage
argument_list|,
name|__x
condition|?
operator|~
literal|0
else|:
literal|0
argument_list|)
block|;     }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_initialize_dispatch
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
name|_M_initialize_range
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__iterator_category
argument_list|(
name|__first
argument_list|)
argument_list|)
block|;     }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|vector
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_Bvector_base
operator|<
name|_Alloc
operator|>
operator|(
name|__a
operator|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_initialize_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}            ~
name|vector
argument_list|()
end_macro

begin_block
block|{ }
end_block

begin_decl_stmt
name|vector
modifier|&
name|operator
init|=
operator|(
specifier|const
name|vector
operator|&
name|__x
operator|)
block|{
if|if
condition|(
operator|&
name|__x
operator|==
name|this
condition|)
return|return
operator|*
name|this
return|;
end_decl_stmt

begin_if
if|if
condition|(
name|__x
operator|.
name|size
argument_list|()
operator|>
name|capacity
argument_list|()
condition|)
block|{
name|_M_deallocate
argument_list|()
expr_stmt|;
name|_M_initialize
argument_list|(
name|__x
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|copy
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_M_finish
operator|=
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|__x
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_comment
unit|}
comment|// assign(), a generalized assignment member function.  Two
end_comment

begin_comment
comment|// versions: one that takes a count, and one that takes a range.
end_comment

begin_comment
comment|// The range version is a member template, so we dispatch on whether
end_comment

begin_comment
comment|// or not the type is an integer.
end_comment

begin_macro
unit|void
name|_M_fill_assign
argument_list|(
argument|size_t __n
argument_list|,
argument|bool __x
argument_list|)
end_macro

begin_block
block|{
if|if
condition|(
name|__n
operator|>
name|size
argument_list|()
condition|)
block|{
name|fill
argument_list|(
name|_M_start
operator|.
name|_M_p
argument_list|,
name|_M_end_of_storage
argument_list|,
name|__x
condition|?
operator|~
literal|0
else|:
literal|0
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__n
operator|-
name|size
argument_list|()
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|__n
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|_M_start
operator|.
name|_M_p
argument_list|,
name|_M_end_of_storage
argument_list|,
name|__x
condition|?
operator|~
literal|0
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_function
name|void
name|assign
parameter_list|(
name|size_t
name|__n
parameter_list|,
name|bool
name|__x
parameter_list|)
block|{
name|_M_fill_assign
argument_list|(
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|assign
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_assign_dispatch
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}        template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_Integer __n
argument_list|,
argument|_Integer __val
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_assign
argument_list|(
operator|(
name|size_t
operator|)
name|__n
argument_list|,
operator|(
name|bool
operator|)
name|__val
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIter
operator|>
name|void
name|_M_assign_dispatch
argument_list|(
argument|_InputIter __first
argument_list|,
argument|_InputIter __last
argument_list|,
argument|__false_type
argument_list|)
block|{
name|_M_assign_aux
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__iterator_category
argument_list|(
name|__first
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
name|iterator
name|__cur
operator|=
name|begin
argument_list|()
block|;
for|for
control|(
init|;
name|__first
operator|!=
name|__last
operator|&&
name|__cur
operator|!=
name|end
argument_list|()
condition|;
operator|++
name|__cur
operator|,
operator|++
name|__first
control|)
operator|*
name|__cur
operator|=
operator|*
name|__first
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__first
operator|==
name|__last
condition|)
name|erase
argument_list|(
name|__cur
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|)
expr_stmt|;
end_if

begin_expr_stmt
unit|}        template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|_M_assign_aux
argument_list|(
argument|_ForwardIterator __first
argument_list|,
argument|_ForwardIterator __last
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__len
operator|=
name|distance
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|)
block|;
if|if
condition|(
name|__len
operator|<
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|copy
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|begin
argument_list|()
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|_ForwardIterator
name|__mid
init|=
name|__first
decl_stmt|;
name|advance
argument_list|(
name|__mid
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|__first
argument_list|,
name|__mid
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__mid
argument_list|,
name|__last
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_macro
unit|}            void
name|reserve
argument_list|(
argument|size_type __n
argument_list|)
end_macro

begin_block
block|{
if|if
condition|(
name|capacity
argument_list|()
operator|<
name|__n
condition|)
block|{
name|_Bit_type
modifier|*
name|__q
init|=
name|_M_bit_alloc
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|_M_finish
operator|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|()
expr_stmt|;
name|_M_start
operator|=
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|_M_end_of_storage
operator|=
name|__q
operator|+
operator|(
name|__n
operator|+
name|_M_word_bit
operator|-
literal|1
operator|)
operator|/
name|_M_word_bit
expr_stmt|;
block|}
block|}
end_block

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push_back
parameter_list|(
name|bool
name|__x
parameter_list|)
block|{
if|if
condition|(
name|_M_finish
operator|.
name|_M_p
operator|!=
name|_M_end_of_storage
condition|)
operator|*
name|_M_finish
operator|++
operator|=
name|__x
expr_stmt|;
else|else
name|_M_insert_aux
argument_list|(
name|end
argument_list|()
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|swap
argument_list|(
name|vector
operator|<
name|bool
argument_list|,
name|_Alloc
operator|>
operator|&
name|__x
argument_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|_M_start
argument_list|,
name|__x
operator|.
name|_M_start
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_finish
argument_list|,
name|__x
operator|.
name|_M_finish
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_end_of_storage
argument_list|,
name|__x
operator|.
name|_M_end_of_storage
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|,
name|bool
name|__x
init|=
name|bool
argument_list|()
parameter_list|)
block|{
name|difference_type
name|__n
init|=
name|__position
operator|-
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|_M_finish
operator|.
name|_M_p
operator|!=
name|_M_end_of_storage
operator|&&
name|__position
operator|==
name|end
argument_list|()
condition|)
operator|*
name|_M_finish
operator|++
operator|=
name|__x
expr_stmt|;
else|else
name|_M_insert_aux
argument_list|(
name|__position
argument_list|,
name|__x
argument_list|)
expr_stmt|;
return|return
name|begin
argument_list|()
operator|+
name|__n
return|;
block|}
end_function

begin_comment
comment|// Check whether it's an integral type.  If so, it's not an iterator.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Integer
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_Integer __n
argument_list|,
argument|_Integer __x
argument_list|,
argument|__true_type
argument_list|)
block|{
name|_M_fill_insert
argument_list|(
name|__pos
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
block|;     }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|_M_insert_dispatch
argument_list|(
argument|iterator __pos
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|,
argument|__false_type
argument_list|)
block|{
name|_M_insert_range
argument_list|(
name|__pos
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|__iterator_category
argument_list|(
name|__first
argument_list|)
argument_list|)
block|;     }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator __position
argument_list|,
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
block|{
typedef|typedef
name|typename
name|_Is_integer
operator|<
name|_InputIterator
operator|>
operator|::
name|_Integral
name|_Integral
expr_stmt|;
name|_M_insert_dispatch
argument_list|(
name|__position
argument_list|,
name|__first
argument_list|,
name|__last
argument_list|,
name|_Integral
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_macro
unit|}        void
name|_M_fill_insert
argument_list|(
argument|iterator __position
argument_list|,
argument|size_type __n
argument_list|,
argument|bool __x
argument_list|)
end_macro

begin_block
block|{
if|if
condition|(
name|__n
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
name|capacity
argument_list|()
operator|-
name|size
argument_list|()
operator|>=
name|__n
condition|)
block|{
name|copy_backward
argument_list|(
name|__position
argument_list|,
name|end
argument_list|()
argument_list|,
name|_M_finish
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|__position
argument_list|,
name|__position
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|,
name|__x
argument_list|)
expr_stmt|;
name|_M_finish
operator|+=
name|difference_type
argument_list|(
name|__n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|size_type
name|__len
init|=
name|size
argument_list|()
operator|+
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|__n
argument_list|)
decl_stmt|;
name|_Bit_type
modifier|*
name|__q
init|=
name|_M_bit_alloc
argument_list|(
name|__len
argument_list|)
decl_stmt|;
name|iterator
name|__i
init|=
name|copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|__position
argument_list|,
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|fill_n
argument_list|(
name|__i
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
name|_M_finish
operator|=
name|copy
argument_list|(
name|__position
argument_list|,
name|end
argument_list|()
argument_list|,
name|__i
operator|+
name|difference_type
argument_list|(
name|__n
argument_list|)
argument_list|)
expr_stmt|;
name|_M_deallocate
argument_list|()
expr_stmt|;
name|_M_end_of_storage
operator|=
name|__q
operator|+
operator|(
name|__len
operator|+
name|_M_word_bit
operator|-
literal|1
operator|)
operator|/
name|_M_word_bit
expr_stmt|;
name|_M_start
operator|=
name|iterator
argument_list|(
name|__q
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|__position
parameter_list|,
name|size_type
name|__n
parameter_list|,
name|bool
name|__x
parameter_list|)
block|{
name|_M_fill_insert
argument_list|(
name|__position
argument_list|,
name|__n
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
operator|--
name|_M_finish
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__position
parameter_list|)
block|{
if|if
condition|(
name|__position
operator|+
literal|1
operator|!=
name|end
argument_list|()
condition|)
name|copy
argument_list|(
name|__position
operator|+
literal|1
argument_list|,
name|end
argument_list|()
argument_list|,
name|__position
argument_list|)
expr_stmt|;
operator|--
name|_M_finish
expr_stmt|;
return|return
name|__position
return|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
block|{
name|_M_finish
operator|=
name|copy
argument_list|(
name|__last
argument_list|,
name|end
argument_list|()
argument_list|,
name|__first
argument_list|)
expr_stmt|;
return|return
name|__first
return|;
block|}
end_function

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|__new_size
parameter_list|,
name|bool
name|__x
init|=
name|bool
argument_list|()
parameter_list|)
block|{
if|if
condition|(
name|__new_size
operator|<
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|difference_type
argument_list|(
name|__new_size
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|insert
argument_list|(
name|end
argument_list|()
argument_list|,
name|__new_size
operator|-
name|size
argument_list|()
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|flip
parameter_list|()
block|{
for|for
control|(
name|_Bit_type
modifier|*
name|__p
init|=
name|_M_start
operator|.
name|_M_p
init|;
name|__p
operator|!=
name|_M_end_of_storage
condition|;
operator|++
name|__p
control|)
operator|*
name|__p
operator|=
operator|~
operator|*
name|__p
expr_stmt|;
block|}
end_function

begin_function
name|void
name|clear
parameter_list|()
block|{
name|erase
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
unit|};
comment|// This typedef is non-standard.  It is provided for backward compatibility.
end_comment

begin_typedef
typedef|typedef
name|vector
operator|<
name|bool
operator|,
name|__alloc
operator|>
name|bit_vector
expr_stmt|;
end_typedef

begin_comment
unit|}
comment|// namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __GLIBCPP_INTERNAL_BVECTOR_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

