begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// RB tree implementation -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/*  *  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  */
end_comment

begin_comment
comment|/** @file stl_tree.h  *  This is an internal header file, included by other library headers.  *  You should not attempt to use it directly.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_TREE_H
end_ifndef

begin_define
define|#
directive|define
name|_TREE_H
value|1
end_define

begin_include
include|#
directive|include
file|<bits/stl_algobase.h>
end_include

begin_include
include|#
directive|include
file|<bits/allocator.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_construct.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_function.h>
end_include

begin_include
include|#
directive|include
file|<bits/cpp_type_traits.h>
end_include

begin_expr_stmt
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
name|std
argument_list|)
comment|// Red-black tree class, designed for use in implementing STL
comment|// associative containers (set, multiset, map, and multimap). The
comment|// insertion and deletion algorithms are based on those in Cormen,
comment|// Leiserson, and Rivest, Introduction to Algorithms (MIT Press,
comment|// 1990), except that
comment|//
comment|// (1) the header cell is maintained with links not only to the root
comment|// but also to the leftmost node of the tree, to enable constant
comment|// time begin(), and to the rightmost node of the tree, to enable
comment|// linear time performance when used with the generic set algorithms
comment|// (set_union, etc.)
comment|//
comment|// (2) when a node being deleted has two children its successor node
comment|// is relinked into its place, rather than copied, so that the only
comment|// iterators invalidated are those referring to the deleted node.
expr|enum
name|_Rb_tree_color
block|{
name|_S_red
operator|=
name|false
block|,
name|_S_black
operator|=
name|true
block|}
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|_Rb_tree_node_base
block|{
typedef|typedef
name|_Rb_tree_node_base
modifier|*
name|_Base_ptr
typedef|;
typedef|typedef
specifier|const
name|_Rb_tree_node_base
modifier|*
name|_Const_Base_ptr
typedef|;
name|_Rb_tree_color
name|_M_color
decl_stmt|;
name|_Base_ptr
name|_M_parent
decl_stmt|;
name|_Base_ptr
name|_M_left
decl_stmt|;
name|_Base_ptr
name|_M_right
decl_stmt|;
specifier|static
name|_Base_ptr
name|_S_minimum
parameter_list|(
name|_Base_ptr
name|__x
parameter_list|)
block|{
while|while
condition|(
name|__x
operator|->
name|_M_left
operator|!=
literal|0
condition|)
name|__x
operator|=
name|__x
operator|->
name|_M_left
expr_stmt|;
return|return
name|__x
return|;
block|}
specifier|static
name|_Const_Base_ptr
name|_S_minimum
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|)
block|{
while|while
condition|(
name|__x
operator|->
name|_M_left
operator|!=
literal|0
condition|)
name|__x
operator|=
name|__x
operator|->
name|_M_left
expr_stmt|;
return|return
name|__x
return|;
block|}
specifier|static
name|_Base_ptr
name|_S_maximum
parameter_list|(
name|_Base_ptr
name|__x
parameter_list|)
block|{
while|while
condition|(
name|__x
operator|->
name|_M_right
operator|!=
literal|0
condition|)
name|__x
operator|=
name|__x
operator|->
name|_M_right
expr_stmt|;
return|return
name|__x
return|;
block|}
specifier|static
name|_Const_Base_ptr
name|_S_maximum
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|)
block|{
while|while
condition|(
name|__x
operator|->
name|_M_right
operator|!=
literal|0
condition|)
name|__x
operator|=
name|__x
operator|->
name|_M_right
expr_stmt|;
return|return
name|__x
return|;
block|}
block|}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|typename
name|_Val
operator|>
expr|struct
name|_Rb_tree_node
operator|:
name|public
name|_Rb_tree_node_base
block|{
typedef|typedef
name|_Rb_tree_node
operator|<
name|_Val
operator|>
operator|*
name|_Link_type
expr_stmt|;
name|_Val
name|_M_value_field
expr_stmt|;
end_expr_stmt

begin_function_decl
unit|};
name|_Rb_tree_node_base
modifier|*
name|_Rb_tree_increment
parameter_list|(
name|_Rb_tree_node_base
modifier|*
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|_Rb_tree_node_base
modifier|*
name|_Rb_tree_increment
parameter_list|(
specifier|const
name|_Rb_tree_node_base
modifier|*
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_Rb_tree_node_base
modifier|*
name|_Rb_tree_decrement
parameter_list|(
name|_Rb_tree_node_base
modifier|*
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|_Rb_tree_node_base
modifier|*
name|_Rb_tree_decrement
parameter_list|(
specifier|const
name|_Rb_tree_node_base
modifier|*
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Rb_tree_iterator
block|{
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|bidirectional_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_iterator
operator|<
name|_Tp
operator|>
name|_Self
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_node_base
operator|::
name|_Base_ptr
name|_Base_ptr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_node
operator|<
name|_Tp
operator|>
operator|*
name|_Link_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_Rb_tree_iterator
argument_list|()
operator|:
name|_M_node
argument_list|()
block|{ }
name|explicit
name|_Rb_tree_iterator
argument_list|(
argument|_Link_type __x
argument_list|)
operator|:
name|_M_node
argument_list|(
argument|__x
argument_list|)
block|{ }
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|_M_node
operator|)
operator|->
name|_M_value_field
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|_M_node
operator|)
operator|->
name|_M_value_field
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|_M_node
operator|=
name|_Rb_tree_increment
argument_list|(
name|_M_node
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_node
operator|=
name|_Rb_tree_increment
argument_list|(
name|_M_node
argument_list|)
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|_M_node
operator|=
name|_Rb_tree_decrement
argument_list|(
name|_M_node
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_node
operator|=
name|_Rb_tree_decrement
argument_list|(
name|_M_node
argument_list|)
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_node
operator|==
name|__x
operator|.
name|_M_node
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_node
operator|!=
name|__x
operator|.
name|_M_node
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|_Base_ptr
name|_M_node
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Rb_tree_const_iterator
block|{
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
specifier|const
name|_Tp
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Tp
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_iterator
operator|<
name|_Tp
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|bidirectional_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_const_iterator
operator|<
name|_Tp
operator|>
name|_Self
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_node_base
operator|::
name|_Const_Base_ptr
name|_Base_ptr
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Rb_tree_node
operator|<
name|_Tp
operator|>
operator|*
name|_Link_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|_Rb_tree_const_iterator
argument_list|()
operator|:
name|_M_node
argument_list|()
block|{ }
name|explicit
name|_Rb_tree_const_iterator
argument_list|(
argument|_Link_type __x
argument_list|)
operator|:
name|_M_node
argument_list|(
argument|__x
argument_list|)
block|{ }
name|_Rb_tree_const_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|__it
argument_list|)
operator|:
name|_M_node
argument_list|(
argument|__it._M_node
argument_list|)
block|{ }
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|_M_node
operator|)
operator|->
name|_M_value_field
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|_M_node
operator|)
operator|->
name|_M_value_field
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|_M_node
operator|=
name|_Rb_tree_increment
argument_list|(
name|_M_node
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_node
operator|=
name|_Rb_tree_increment
argument_list|(
name|_M_node
argument_list|)
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
name|_M_node
operator|=
name|_Rb_tree_decrement
argument_list|(
name|_M_node
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|_Self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|_Self
name|__tmp
operator|=
operator|*
name|this
block|;
name|_M_node
operator|=
name|_Rb_tree_decrement
argument_list|(
name|_M_node
argument_list|)
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_node
operator|==
name|__x
operator|.
name|_M_node
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Self
operator|&
name|__x
operator|)
specifier|const
block|{
return|return
name|_M_node
operator|!=
name|__x
operator|.
name|_M_node
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|_Base_ptr
name|_M_node
decl_stmt|;
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Val
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Rb_tree_iterator
operator|<
name|_Val
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Rb_tree_const_iterator
operator|<
name|_Val
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|_M_node
operator|==
name|__y
operator|.
name|_M_node
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Val
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Rb_tree_iterator
operator|<
name|_Val
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Rb_tree_const_iterator
operator|<
name|_Val
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|_M_node
operator|!=
name|__y
operator|.
name|_M_node
return|;
block|}
end_expr_stmt

begin_function_decl
name|void
name|_Rb_tree_rotate_left
parameter_list|(
name|_Rb_tree_node_base
modifier|*
specifier|const
name|__x
parameter_list|,
name|_Rb_tree_node_base
modifier|*
modifier|&
name|__root
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_Rb_tree_rotate_right
parameter_list|(
name|_Rb_tree_node_base
modifier|*
specifier|const
name|__x
parameter_list|,
name|_Rb_tree_node_base
modifier|*
modifier|&
name|__root
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_Rb_tree_insert_and_rebalance
parameter_list|(
specifier|const
name|bool
name|__insert_left
parameter_list|,
name|_Rb_tree_node_base
modifier|*
name|__x
parameter_list|,
name|_Rb_tree_node_base
modifier|*
name|__p
parameter_list|,
name|_Rb_tree_node_base
modifier|&
name|__header
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_Rb_tree_node_base
modifier|*
name|_Rb_tree_rebalance_for_erase
parameter_list|(
name|_Rb_tree_node_base
modifier|*
specifier|const
name|__z
parameter_list|,
name|_Rb_tree_node_base
modifier|&
name|__header
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|=
name|allocator
operator|<
name|_Val
operator|>
expr|>
name|class
name|_Rb_tree
block|{
typedef|typedef
name|typename
name|_Alloc
operator|::
name|template
name|rebind
operator|<
name|_Rb_tree_node
operator|<
name|_Val
operator|>
expr|>
operator|::
name|other
name|_Node_allocator
expr_stmt|;
name|protected
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|_Rb_tree_node_base
modifier|*
name|_Base_ptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Rb_tree_node_base
modifier|*
name|_Const_Base_ptr
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_node
operator|<
name|_Val
operator|>
name|_Rb_tree_node
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|_Key
name|key_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Val
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_node
modifier|*
name|_Link_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Rb_tree_node
modifier|*
name|_Const_Link_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Alloc
name|allocator_type
typedef|;
end_typedef

begin_function
name|_Node_allocator
modifier|&
name|_M_get_Node_allocator
parameter_list|()
block|{
return|return
operator|*
name|static_cast
operator|<
name|_Node_allocator
operator|*
operator|>
operator|(
operator|&
name|this
operator|->
name|_M_impl
operator|)
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|_Node_allocator
operator|&
name|_M_get_Node_allocator
argument_list|()
specifier|const
block|{
return|return
operator|*
name|static_cast
operator|<
specifier|const
name|_Node_allocator
operator|*
operator|>
operator|(
operator|&
name|this
operator|->
name|_M_impl
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|allocator_type
argument_list|(
name|_M_get_Node_allocator
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function
name|_Rb_tree_node
modifier|*
name|_M_get_node
parameter_list|()
block|{
return|return
name|_M_impl
operator|.
name|_Node_allocator
operator|::
name|allocate
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_put_node
parameter_list|(
name|_Rb_tree_node
modifier|*
name|__p
parameter_list|)
block|{
name|_M_impl
operator|.
name|_Node_allocator
operator|::
name|deallocate
argument_list|(
name|__p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|_Link_type
name|_M_create_node
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
block|{
name|_Link_type
name|__tmp
init|=
name|_M_get_node
argument_list|()
decl_stmt|;
name|try
block|{
name|get_allocator
argument_list|()
operator|.
name|construct
argument_list|(
operator|&
name|__tmp
operator|->
name|_M_value_field
argument_list|,
name|__x
argument_list|)
expr_stmt|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_put_node
argument_list|(
name|__tmp
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
return|return
name|__tmp
return|;
block|}
end_function

begin_function
name|_Link_type
name|_M_clone_node
parameter_list|(
name|_Const_Link_type
name|__x
parameter_list|)
block|{
name|_Link_type
name|__tmp
init|=
name|_M_create_node
argument_list|(
name|__x
operator|->
name|_M_value_field
argument_list|)
decl_stmt|;
name|__tmp
operator|->
name|_M_color
operator|=
name|__x
operator|->
name|_M_color
expr_stmt|;
name|__tmp
operator|->
name|_M_left
operator|=
literal|0
expr_stmt|;
name|__tmp
operator|->
name|_M_right
operator|=
literal|0
expr_stmt|;
return|return
name|__tmp
return|;
block|}
end_function

begin_function
name|void
name|_M_destroy_node
parameter_list|(
name|_Link_type
name|__p
parameter_list|)
block|{
name|get_allocator
argument_list|()
operator|.
name|destroy
argument_list|(
operator|&
name|__p
operator|->
name|_M_value_field
argument_list|)
expr_stmt|;
name|_M_put_node
argument_list|(
name|__p
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|protected
label|:
end_label

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key_compare
operator|,
name|bool
name|_Is_pod_comparator
operator|=
name|std
operator|::
name|__is_pod
operator|<
name|_Key_compare
operator|>
operator|::
name|__value
operator|>
expr|struct
name|_Rb_tree_impl
operator|:
name|public
name|_Node_allocator
block|{
name|_Key_compare
name|_M_key_compare
block|;
name|_Rb_tree_node_base
name|_M_header
block|;
name|size_type
name|_M_node_count
block|;
comment|// Keeps track of size of tree.
name|_Rb_tree_impl
argument_list|(
specifier|const
name|_Node_allocator
operator|&
name|__a
operator|=
name|_Node_allocator
argument_list|()
argument_list|,
specifier|const
name|_Key_compare
operator|&
name|__comp
operator|=
name|_Key_compare
argument_list|()
argument_list|)
operator|:
name|_Node_allocator
argument_list|(
name|__a
argument_list|)
block|,
name|_M_key_compare
argument_list|(
name|__comp
argument_list|)
block|,
name|_M_header
argument_list|()
block|,
name|_M_node_count
argument_list|(
literal|0
argument_list|)
block|{
name|this
operator|->
name|_M_header
operator|.
name|_M_color
operator|=
name|_S_red
block|;
name|this
operator|->
name|_M_header
operator|.
name|_M_parent
operator|=
literal|0
block|;
name|this
operator|->
name|_M_header
operator|.
name|_M_left
operator|=
operator|&
name|this
operator|->
name|_M_header
block|;
name|this
operator|->
name|_M_header
operator|.
name|_M_right
operator|=
operator|&
name|this
operator|->
name|_M_header
block|; 	  }
block|}
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Specialization for _Comparison types that are not capable of
end_comment

begin_comment
comment|// being base classes / super classes.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key_compare
operator|>
expr|struct
name|_Rb_tree_impl
operator|<
name|_Key_compare
operator|,
name|true
operator|>
operator|:
name|public
name|_Node_allocator
block|{
name|_Key_compare
name|_M_key_compare
block|;
name|_Rb_tree_node_base
name|_M_header
block|;
name|size_type
name|_M_node_count
block|;
comment|// Keeps track of size of tree.
name|_Rb_tree_impl
argument_list|(
specifier|const
name|_Node_allocator
operator|&
name|__a
operator|=
name|_Node_allocator
argument_list|()
argument_list|,
specifier|const
name|_Key_compare
operator|&
name|__comp
operator|=
name|_Key_compare
argument_list|()
argument_list|)
operator|:
name|_Node_allocator
argument_list|(
name|__a
argument_list|)
block|,
name|_M_key_compare
argument_list|(
name|__comp
argument_list|)
block|,
name|_M_header
argument_list|()
block|,
name|_M_node_count
argument_list|(
literal|0
argument_list|)
block|{
name|this
operator|->
name|_M_header
operator|.
name|_M_color
operator|=
name|_S_red
block|;
name|this
operator|->
name|_M_header
operator|.
name|_M_parent
operator|=
literal|0
block|;
name|this
operator|->
name|_M_header
operator|.
name|_M_left
operator|=
operator|&
name|this
operator|->
name|_M_header
block|;
name|this
operator|->
name|_M_header
operator|.
name|_M_right
operator|=
operator|&
name|this
operator|->
name|_M_header
block|; 	  }
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_Rb_tree_impl
operator|<
name|_Compare
operator|>
name|_M_impl
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_function
name|_Base_ptr
modifier|&
name|_M_root
parameter_list|()
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_parent
return|;
block|}
end_function

begin_expr_stmt
name|_Const_Base_ptr
name|_M_root
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_parent
return|;
block|}
end_expr_stmt

begin_function
name|_Base_ptr
modifier|&
name|_M_leftmost
parameter_list|()
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_left
return|;
block|}
end_function

begin_expr_stmt
name|_Const_Base_ptr
name|_M_leftmost
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_left
return|;
block|}
end_expr_stmt

begin_function
name|_Base_ptr
modifier|&
name|_M_rightmost
parameter_list|()
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_right
return|;
block|}
end_function

begin_expr_stmt
name|_Const_Base_ptr
name|_M_rightmost
argument_list|()
specifier|const
block|{
return|return
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_right
return|;
block|}
end_expr_stmt

begin_function
name|_Link_type
name|_M_begin
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_parent
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|_Const_Link_type
name|_M_begin
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|_Const_Link_type
operator|>
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_parent
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|_Link_type
name|_M_end
parameter_list|()
block|{
return|return
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
operator|&
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|_Const_Link_type
name|_M_end
argument_list|()
specifier|const
block|{
return|return
name|static_cast
operator|<
name|_Const_Link_type
operator|>
operator|(
operator|&
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|)
return|;
block|}
end_expr_stmt

begin_function
specifier|static
name|const_reference
name|_S_value
parameter_list|(
name|_Const_Link_type
name|__x
parameter_list|)
block|{
return|return
name|__x
operator|->
name|_M_value_field
return|;
block|}
end_function

begin_function
specifier|static
specifier|const
name|_Key
modifier|&
name|_S_key
parameter_list|(
name|_Const_Link_type
name|__x
parameter_list|)
block|{
return|return
name|_KeyOfValue
argument_list|()
argument_list|(
name|_S_value
argument_list|(
name|__x
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|_Link_type
name|_S_left
parameter_list|(
name|_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|__x
operator|->
name|_M_left
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|_Const_Link_type
name|_S_left
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|_Const_Link_type
operator|>
operator|(
name|__x
operator|->
name|_M_left
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|_Link_type
name|_S_right
parameter_list|(
name|_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|__x
operator|->
name|_M_right
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|_Const_Link_type
name|_S_right
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|_Const_Link_type
operator|>
operator|(
name|__x
operator|->
name|_M_right
operator|)
return|;
block|}
end_function

begin_function
specifier|static
name|const_reference
name|_S_value
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|_Const_Link_type
operator|>
operator|(
name|__x
operator|)
operator|->
name|_M_value_field
return|;
block|}
end_function

begin_function
specifier|static
specifier|const
name|_Key
modifier|&
name|_S_key
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|_KeyOfValue
argument_list|()
argument_list|(
name|_S_value
argument_list|(
name|__x
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|_Base_ptr
name|_S_minimum
parameter_list|(
name|_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|_Rb_tree_node_base
operator|::
name|_S_minimum
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|_Const_Base_ptr
name|_S_minimum
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|_Rb_tree_node_base
operator|::
name|_S_minimum
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|_Base_ptr
name|_S_maximum
parameter_list|(
name|_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|_Rb_tree_node_base
operator|::
name|_S_maximum
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|_Const_Base_ptr
name|_S_maximum
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|)
block|{
return|return
name|_Rb_tree_node_base
operator|::
name|_S_maximum
argument_list|(
name|__x
argument_list|)
return|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|_Rb_tree_iterator
operator|<
name|value_type
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Rb_tree_const_iterator
operator|<
name|value_type
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|std
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_label
name|private
label|:
end_label

begin_function_decl
name|iterator
name|_M_insert
parameter_list|(
name|_Base_ptr
name|__x
parameter_list|,
name|_Base_ptr
name|__y
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__v
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// _GLIBCXX_RESOLVE_LIB_DEFECTS
end_comment

begin_comment
comment|// 233. Insertion hints in associative containers.
end_comment

begin_function_decl
name|iterator
name|_M_insert_lower
parameter_list|(
name|_Base_ptr
name|__x
parameter_list|,
name|_Base_ptr
name|__y
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__v
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|const_iterator
name|_M_insert
parameter_list|(
name|_Const_Base_ptr
name|__x
parameter_list|,
name|_Const_Base_ptr
name|__y
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__v
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|_Link_type
name|_M_copy
parameter_list|(
name|_Const_Link_type
name|__x
parameter_list|,
name|_Link_type
name|__p
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_erase
parameter_list|(
name|_Link_type
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|public
label|:
end_label

begin_comment
comment|// allocation/deallocation
end_comment

begin_macro
name|_Rb_tree
argument_list|()
end_macro

begin_block
block|{ }
end_block

begin_expr_stmt
name|_Rb_tree
argument_list|(
specifier|const
name|_Compare
operator|&
name|__comp
argument_list|)
operator|:
name|_M_impl
argument_list|(
argument|allocator_type()
argument_list|,
argument|__comp
argument_list|)
block|{ }
name|_Rb_tree
argument_list|(
specifier|const
name|_Compare
operator|&
name|__comp
argument_list|,
specifier|const
name|allocator_type
operator|&
name|__a
argument_list|)
operator|:
name|_M_impl
argument_list|(
argument|__a
argument_list|,
argument|__comp
argument_list|)
block|{ }
name|_Rb_tree
argument_list|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
argument_list|,
name|_Val
argument_list|,
name|_KeyOfValue
argument_list|,
name|_Compare
argument_list|,
name|_Alloc
operator|>
operator|&
name|__x
argument_list|)
operator|:
name|_M_impl
argument_list|(
argument|__x._M_get_Node_allocator()
argument_list|,
argument|__x._M_impl._M_key_compare
argument_list|)
block|{
if|if
condition|(
name|__x
operator|.
name|_M_root
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|_M_root
argument_list|()
operator|=
name|_M_copy
argument_list|(
name|__x
operator|.
name|_M_begin
argument_list|()
argument_list|,
name|_M_end
argument_list|()
argument_list|)
expr_stmt|;
name|_M_leftmost
argument_list|()
operator|=
name|_S_minimum
argument_list|(
name|_M_root
argument_list|()
argument_list|)
expr_stmt|;
name|_M_rightmost
argument_list|()
operator|=
name|_S_maximum
argument_list|(
name|_M_root
argument_list|()
argument_list|)
expr_stmt|;
name|_M_impl
operator|.
name|_M_node_count
operator|=
name|__x
operator|.
name|_M_impl
operator|.
name|_M_node_count
expr_stmt|;
block|}
end_expr_stmt

begin_macro
unit|}        ~
name|_Rb_tree
argument_list|()
end_macro

begin_block
block|{
name|_M_erase
argument_list|(
name|_M_begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Accessors.
end_comment

begin_expr_stmt
name|_Compare
name|key_comp
argument_list|()
specifier|const
block|{
return|return
name|_M_impl
operator|.
name|_M_key_compare
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_left
operator|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|static_cast
operator|<
name|_Const_Link_type
operator|>
operator|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_left
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
operator|&
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
name|static_cast
operator|<
name|_Const_Link_type
operator|>
operator|(
operator|&
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|_M_impl
operator|.
name|_M_node_count
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_impl
operator|.
name|_M_node_count
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|get_allocator
argument_list|()
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|swap
argument_list|(
name|_Rb_tree
operator|<
name|_Key
argument_list|,
name|_Val
argument_list|,
name|_KeyOfValue
argument_list|,
name|_Compare
argument_list|,
name|_Alloc
operator|>
operator|&
name|__t
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|// Insert/erase.
end_comment

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|_M_insert_unique
argument_list|(
specifier|const
name|value_type
operator|&
name|__x
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|iterator
name|_M_insert_equal
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// _GLIBCXX_RESOLVE_LIB_DEFECTS
end_comment

begin_comment
comment|// 233. Insertion hints in associative containers.
end_comment

begin_function_decl
name|iterator
name|_M_insert_equal_lower
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|iterator
name|_M_insert_unique
parameter_list|(
name|iterator
name|__position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|const_iterator
name|_M_insert_unique
parameter_list|(
name|const_iterator
name|__position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|iterator
name|_M_insert_equal
parameter_list|(
name|iterator
name|__position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|const_iterator
name|_M_insert_equal
parameter_list|(
name|const_iterator
name|__position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_insert_unique
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_InputIterator
operator|>
name|void
name|_M_insert_equal
argument_list|(
argument|_InputIterator __first
argument_list|,
argument|_InputIterator __last
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|void
name|erase
parameter_list|(
name|iterator
name|__position
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|const_iterator
name|__position
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_type
name|erase
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|const_iterator
name|__first
parameter_list|,
name|const_iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
specifier|const
name|key_type
modifier|*
name|__first
parameter_list|,
specifier|const
name|key_type
modifier|*
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|void
name|clear
parameter_list|()
block|{
name|_M_erase
argument_list|(
name|_M_begin
argument_list|()
argument_list|)
expr_stmt|;
name|_M_leftmost
argument_list|()
operator|=
name|_M_end
argument_list|()
expr_stmt|;
name|_M_root
argument_list|()
operator|=
literal|0
expr_stmt|;
name|_M_rightmost
argument_list|()
operator|=
name|_M_end
argument_list|()
expr_stmt|;
name|_M_impl
operator|.
name|_M_node_count
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_comment
comment|// Set operations.
end_comment

begin_function_decl
name|iterator
name|find
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|const_iterator
name|find
argument_list|(
specifier|const
name|key_type
operator|&
name|__x
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|count
argument_list|(
specifier|const
name|key_type
operator|&
name|__x
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_function_decl
name|iterator
name|lower_bound
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|const_iterator
name|lower_bound
argument_list|(
specifier|const
name|key_type
operator|&
name|__x
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_function_decl
name|iterator
name|upper_bound
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__x
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|const_iterator
name|upper_bound
argument_list|(
specifier|const
name|key_type
operator|&
name|__x
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|equal_range
argument_list|(
specifier|const
name|key_type
operator|&
name|__x
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|pair
operator|<
name|const_iterator
operator|,
name|const_iterator
operator|>
name|equal_range
argument_list|(
argument|const key_type& __x
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Debugging.
end_comment

begin_expr_stmt
name|bool
name|__rb_verify
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|size
argument_list|()
operator|==
name|__y
operator|.
name|size
argument_list|()
operator|&&
name|std
operator|::
name|equal
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|std
operator|::
name|lexicographical_compare
argument_list|(
name|__x
operator|.
name|begin
argument_list|()
argument_list|,
name|__x
operator|.
name|end
argument_list|()
argument_list|,
name|__y
operator|.
name|begin
argument_list|()
argument_list|,
name|__y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|==
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__y
operator|<
name|__x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__y
operator|<
name|__x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__y
operator|)
block|{
return|return
operator|!
operator|(
name|__x
operator|<
name|__y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|_Rb_tree<_Key
argument_list|,
argument|_Val
argument_list|,
argument|_KeyOfValue
argument_list|,
argument|_Compare
argument_list|,
argument|_Alloc>& __x
argument_list|,
argument|_Rb_tree<_Key
argument_list|,
argument|_Val
argument_list|,
argument|_KeyOfValue
argument_list|,
argument|_Compare
argument_list|,
argument|_Alloc>& __y
argument_list|)
block|{
name|__x
operator|.
name|swap
argument_list|(
name|__y
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|&
name|__x
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|__x
condition|)
block|{
comment|// Note that _Key may be a constant type.
name|clear
argument_list|()
expr_stmt|;
name|_M_impl
operator|.
name|_M_key_compare
operator|=
name|__x
operator|.
name|_M_impl
operator|.
name|_M_key_compare
expr_stmt|;
if|if
condition|(
name|__x
operator|.
name|_M_root
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|_M_root
argument_list|()
operator|=
name|_M_copy
argument_list|(
name|__x
operator|.
name|_M_begin
argument_list|()
argument_list|,
name|_M_end
argument_list|()
argument_list|)
expr_stmt|;
name|_M_leftmost
argument_list|()
operator|=
name|_S_minimum
argument_list|(
name|_M_root
argument_list|()
argument_list|)
expr_stmt|;
name|_M_rightmost
argument_list|()
operator|=
name|_S_maximum
argument_list|(
name|_M_root
argument_list|()
argument_list|)
expr_stmt|;
name|_M_impl
operator|.
name|_M_node_count
operator|=
name|__x
operator|.
name|_M_impl
operator|.
name|_M_node_count
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}       return
operator|*
name|this
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert
argument_list|(
argument|_Base_ptr __x
argument_list|,
argument|_Base_ptr __p
argument_list|,
argument|const _Val& __v
argument_list|)
block|{
name|bool
name|__insert_left
operator|=
operator|(
name|__x
operator|!=
literal|0
operator|||
name|__p
operator|==
name|_M_end
argument_list|()
operator|||
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|__p
argument_list|)
argument_list|)
operator|)
block|;
name|_Link_type
name|__z
operator|=
name|_M_create_node
argument_list|(
name|__v
argument_list|)
block|;
name|_Rb_tree_insert_and_rebalance
argument_list|(
name|__insert_left
argument_list|,
name|__z
argument_list|,
name|__p
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
argument_list|)
block|;
operator|++
name|_M_impl
operator|.
name|_M_node_count
block|;
return|return
name|iterator
argument_list|(
name|__z
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_lower
argument_list|(
argument|_Base_ptr __x
argument_list|,
argument|_Base_ptr __p
argument_list|,
argument|const _Val& __v
argument_list|)
block|{
name|bool
name|__insert_left
operator|=
operator|(
name|__x
operator|!=
literal|0
operator|||
name|__p
operator|==
name|_M_end
argument_list|()
operator|||
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__p
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
operator|)
block|;
name|_Link_type
name|__z
operator|=
name|_M_create_node
argument_list|(
name|__v
argument_list|)
block|;
name|_Rb_tree_insert_and_rebalance
argument_list|(
name|__insert_left
argument_list|,
name|__z
argument_list|,
name|__p
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
argument_list|)
block|;
operator|++
name|_M_impl
operator|.
name|_M_node_count
block|;
return|return
name|iterator
argument_list|(
name|__z
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert
argument_list|(
argument|_Const_Base_ptr __x
argument_list|,
argument|_Const_Base_ptr __p
argument_list|,
argument|const _Val& __v
argument_list|)
block|{
name|bool
name|__insert_left
operator|=
operator|(
name|__x
operator|!=
literal|0
operator|||
name|__p
operator|==
name|_M_end
argument_list|()
operator|||
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|__p
argument_list|)
argument_list|)
operator|)
block|;
name|_Link_type
name|__z
operator|=
name|_M_create_node
argument_list|(
name|__v
argument_list|)
block|;
name|_Rb_tree_insert_and_rebalance
argument_list|(
name|__insert_left
argument_list|,
name|__z
argument_list|,
name|const_cast
operator|<
name|_Base_ptr
operator|>
operator|(
name|__p
operator|)
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
argument_list|)
block|;
operator|++
name|_M_impl
operator|.
name|_M_node_count
block|;
return|return
name|const_iterator
argument_list|(
name|__z
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_equal
argument_list|(
argument|const _Val& __v
argument_list|)
block|{
name|_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
name|_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
block|{
name|__y
operator|=
name|__x
expr_stmt|;
name|__x
operator|=
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|)
condition|?
name|_S_left
argument_list|(
name|__x
argument_list|)
else|:
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|_M_insert
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|,
name|__v
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_equal_lower
argument_list|(
argument|const _Val& __v
argument_list|)
block|{
name|_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
name|_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
block|{
name|__y
operator|=
name|__x
expr_stmt|;
name|__x
operator|=
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|?
name|_S_left
argument_list|(
name|__x
argument_list|)
else|:
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|_M_insert_lower
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|,
name|__v
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|swap
argument_list|(
argument|_Rb_tree<_Key
argument_list|,
argument|_Val
argument_list|,
argument|_KeyOfValue
argument_list|,
argument|_Compare
argument_list|,
argument|_Alloc>& __t
argument_list|)
block|{
if|if
condition|(
name|_M_root
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|__t
operator|.
name|_M_root
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|_M_root
argument_list|()
operator|=
name|__t
operator|.
name|_M_root
argument_list|()
expr_stmt|;
name|_M_leftmost
argument_list|()
operator|=
name|__t
operator|.
name|_M_leftmost
argument_list|()
expr_stmt|;
name|_M_rightmost
argument_list|()
operator|=
name|__t
operator|.
name|_M_rightmost
argument_list|()
expr_stmt|;
name|_M_root
argument_list|()
operator|->
name|_M_parent
operator|=
name|_M_end
argument_list|()
expr_stmt|;
name|__t
operator|.
name|_M_root
argument_list|()
operator|=
literal|0
expr_stmt|;
name|__t
operator|.
name|_M_leftmost
argument_list|()
operator|=
name|__t
operator|.
name|_M_end
argument_list|()
expr_stmt|;
name|__t
operator|.
name|_M_rightmost
argument_list|()
operator|=
name|__t
operator|.
name|_M_end
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_if
unit|}       else
if|if
condition|(
name|__t
operator|.
name|_M_root
argument_list|()
operator|==
literal|0
condition|)
block|{
name|__t
operator|.
name|_M_root
argument_list|()
operator|=
name|_M_root
argument_list|()
expr_stmt|;
name|__t
operator|.
name|_M_leftmost
argument_list|()
operator|=
name|_M_leftmost
argument_list|()
expr_stmt|;
name|__t
operator|.
name|_M_rightmost
argument_list|()
operator|=
name|_M_rightmost
argument_list|()
expr_stmt|;
name|__t
operator|.
name|_M_root
argument_list|()
operator|->
name|_M_parent
operator|=
name|__t
operator|.
name|_M_end
argument_list|()
expr_stmt|;
name|_M_root
argument_list|()
operator|=
literal|0
expr_stmt|;
name|_M_leftmost
argument_list|()
operator|=
name|_M_end
argument_list|()
expr_stmt|;
name|_M_rightmost
argument_list|()
operator|=
name|_M_end
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|std
operator|::
name|swap
argument_list|(
name|_M_root
argument_list|()
argument_list|,
name|__t
operator|.
name|_M_root
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_leftmost
argument_list|()
argument_list|,
name|__t
operator|.
name|_M_leftmost
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_rightmost
argument_list|()
argument_list|,
name|__t
operator|.
name|_M_rightmost
argument_list|()
argument_list|)
expr_stmt|;
name|_M_root
argument_list|()
operator|->
name|_M_parent
operator|=
name|_M_end
argument_list|()
expr_stmt|;
name|__t
operator|.
name|_M_root
argument_list|()
operator|->
name|_M_parent
operator|=
name|__t
operator|.
name|_M_end
argument_list|()
expr_stmt|;
block|}
end_if

begin_comment
comment|// No need to swap header's color as it does not change.
end_comment

begin_expr_stmt
name|std
operator|::
name|swap
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_node_count
argument_list|,
name|__t
operator|.
name|_M_impl
operator|.
name|_M_node_count
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|std
operator|::
name|swap
argument_list|(
name|this
operator|->
name|_M_impl
operator|.
name|_M_key_compare
argument_list|,
name|__t
operator|.
name|_M_impl
operator|.
name|_M_key_compare
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// _GLIBCXX_RESOLVE_LIB_DEFECTS
end_comment

begin_comment
comment|// 431. Swapping containers with unequal allocators.
end_comment

begin_expr_stmt
name|std
operator|::
name|__alloc_swap
operator|<
name|_Node_allocator
operator|>
operator|::
name|_S_do_it
argument_list|(
name|_M_get_Node_allocator
argument_list|()
argument_list|,
name|__t
operator|.
name|_M_get_Node_allocator
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|pair
operator|<
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
operator|,
name|bool
operator|>
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_unique
argument_list|(
argument|const _Val& __v
argument_list|)
block|{
name|_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
name|_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
name|bool
name|__comp
operator|=
name|true
block|;
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
block|{
name|__y
operator|=
name|__x
expr_stmt|;
name|__comp
operator|=
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|)
expr_stmt|;
name|__x
operator|=
name|__comp
condition|?
name|_S_left
argument_list|(
name|__x
argument_list|)
else|:
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
block|}
name|iterator
name|__j
operator|=
name|iterator
argument_list|(
name|__y
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__comp
condition|)
if|if
condition|(
name|__j
operator|==
name|begin
argument_list|()
condition|)
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|_M_insert
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|,
name|__v
argument_list|)
operator|,
name|true
operator|)
return|;
else|else
operator|--
name|__j
expr_stmt|;
end_if

begin_if
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__j
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|_M_insert
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|,
name|__v
argument_list|)
operator|,
name|true
operator|)
return|;
end_if

begin_return
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|__j
operator|,
name|false
operator|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_unique
argument_list|(
argument|iterator __position
argument_list|,
argument|const _Val& __v
argument_list|)
block|{
comment|// end()
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_end
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|_M_rightmost
argument_list|()
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|_M_rightmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert_unique
argument_list|(
name|__v
argument_list|)
operator|.
name|first
return|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
argument_list|)
condition|)
block|{
comment|// First, try before...
name|iterator
name|__before
init|=
name|__position
decl_stmt|;
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_leftmost
argument_list|()
condition|)
comment|// begin()
return|return
name|_M_insert
argument_list|(
name|_M_leftmost
argument_list|()
argument_list|,
name|_M_leftmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
elseif|else
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
operator|(
operator|--
name|__before
operator|)
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|_S_right
argument_list|(
name|__before
operator|.
name|_M_node
argument_list|)
operator|==
literal|0
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|__before
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|,
name|__position
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
block|}
else|else
return|return
name|_M_insert_unique
argument_list|(
name|__v
argument_list|)
operator|.
name|first
return|;
block|}
end_elseif

begin_elseif
elseif|else
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
block|{
comment|// ... then try after.
name|iterator
name|__after
init|=
name|__position
decl_stmt|;
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_rightmost
argument_list|()
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|_M_rightmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
elseif|else
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
operator|(
operator|++
name|__after
operator|)
operator|.
name|_M_node
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|_S_right
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
operator|==
literal|0
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|__position
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert
argument_list|(
name|__after
operator|.
name|_M_node
argument_list|,
name|__after
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
block|}
else|else
return|return
name|_M_insert_unique
argument_list|(
name|__v
argument_list|)
operator|.
name|first
return|;
block|}
end_elseif

begin_else
else|else
return|return
name|__position
return|;
end_else

begin_comment
comment|// Equivalent keys.
end_comment

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_unique
argument_list|(
argument|const_iterator __position
argument_list|,
argument|const _Val& __v
argument_list|)
block|{
comment|// end()
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_end
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|_M_rightmost
argument_list|()
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|_M_rightmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|const_iterator
argument_list|(
name|_M_insert_unique
argument_list|(
name|__v
argument_list|)
operator|.
name|first
argument_list|)
return|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
argument_list|)
condition|)
block|{
comment|// First, try before...
name|const_iterator
name|__before
init|=
name|__position
decl_stmt|;
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_leftmost
argument_list|()
condition|)
comment|// begin()
return|return
name|_M_insert
argument_list|(
name|_M_leftmost
argument_list|()
argument_list|,
name|_M_leftmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
elseif|else
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
operator|(
operator|--
name|__before
operator|)
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|_S_right
argument_list|(
name|__before
operator|.
name|_M_node
argument_list|)
operator|==
literal|0
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|__before
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|,
name|__position
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
block|}
else|else
return|return
name|const_iterator
argument_list|(
name|_M_insert_unique
argument_list|(
name|__v
argument_list|)
operator|.
name|first
argument_list|)
return|;
block|}
end_elseif

begin_elseif
elseif|else
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
block|{
comment|// ... then try after.
name|const_iterator
name|__after
init|=
name|__position
decl_stmt|;
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_rightmost
argument_list|()
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|_M_rightmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
elseif|else
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
operator|(
operator|++
name|__after
operator|)
operator|.
name|_M_node
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|_S_right
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
operator|==
literal|0
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|__position
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert
argument_list|(
name|__after
operator|.
name|_M_node
argument_list|,
name|__after
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
block|}
else|else
return|return
name|const_iterator
argument_list|(
name|_M_insert_unique
argument_list|(
name|__v
argument_list|)
operator|.
name|first
argument_list|)
return|;
block|}
end_elseif

begin_else
else|else
return|return
name|__position
return|;
end_else

begin_comment
comment|// Equivalent keys.
end_comment

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_equal
argument_list|(
argument|iterator __position
argument_list|,
argument|const _Val& __v
argument_list|)
block|{
comment|// end()
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_end
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|_M_rightmost
argument_list|()
argument_list|)
argument_list|)
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|_M_rightmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert_equal
argument_list|(
name|__v
argument_list|)
return|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
block|{
comment|// First, try before...
name|iterator
name|__before
init|=
name|__position
decl_stmt|;
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_leftmost
argument_list|()
condition|)
comment|// begin()
return|return
name|_M_insert
argument_list|(
name|_M_leftmost
argument_list|()
argument_list|,
name|_M_leftmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
operator|(
operator|--
name|__before
operator|)
operator|.
name|_M_node
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|_S_right
argument_list|(
name|__before
operator|.
name|_M_node
argument_list|)
operator|==
literal|0
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|__before
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|,
name|__position
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
block|}
else|else
return|return
name|_M_insert_equal
argument_list|(
name|__v
argument_list|)
return|;
block|}
end_elseif

begin_else
else|else
block|{
comment|// ... then try after.
name|iterator
name|__after
init|=
name|__position
decl_stmt|;
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_rightmost
argument_list|()
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|_M_rightmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
operator|(
operator|++
name|__after
operator|)
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|_S_right
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
operator|==
literal|0
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|__position
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert
argument_list|(
name|__after
operator|.
name|_M_node
argument_list|,
name|__after
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
block|}
else|else
return|return
name|_M_insert_equal_lower
argument_list|(
name|__v
argument_list|)
return|;
block|}
end_else

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_equal
argument_list|(
argument|const_iterator __position
argument_list|,
argument|const _Val& __v
argument_list|)
block|{
comment|// end()
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_end
argument_list|()
condition|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|_M_rightmost
argument_list|()
argument_list|)
argument_list|)
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|_M_rightmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|const_iterator
argument_list|(
name|_M_insert_equal
argument_list|(
name|__v
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
block|{
comment|// First, try before...
name|const_iterator
name|__before
init|=
name|__position
decl_stmt|;
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_leftmost
argument_list|()
condition|)
comment|// begin()
return|return
name|_M_insert
argument_list|(
name|_M_leftmost
argument_list|()
argument_list|,
name|_M_leftmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|,
name|_S_key
argument_list|(
operator|(
operator|--
name|__before
operator|)
operator|.
name|_M_node
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|_S_right
argument_list|(
name|__before
operator|.
name|_M_node
argument_list|)
operator|==
literal|0
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|__before
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|,
name|__position
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
block|}
else|else
return|return
name|const_iterator
argument_list|(
name|_M_insert_equal
argument_list|(
name|__v
argument_list|)
argument_list|)
return|;
block|}
end_elseif

begin_else
else|else
block|{
comment|// ... then try after.
name|const_iterator
name|__after
init|=
name|__position
decl_stmt|;
if|if
condition|(
name|__position
operator|.
name|_M_node
operator|==
name|_M_rightmost
argument_list|()
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|_M_rightmost
argument_list|()
argument_list|,
name|__v
argument_list|)
return|;
elseif|else
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
operator|(
operator|++
name|__after
operator|)
operator|.
name|_M_node
argument_list|)
argument_list|,
name|_KeyOfValue
argument_list|()
argument_list|(
name|__v
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|_S_right
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|)
operator|==
literal|0
condition|)
return|return
name|_M_insert
argument_list|(
literal|0
argument_list|,
name|__position
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
else|else
return|return
name|_M_insert
argument_list|(
name|__after
operator|.
name|_M_node
argument_list|,
name|__after
operator|.
name|_M_node
argument_list|,
name|__v
argument_list|)
return|;
block|}
else|else
return|return
name|const_iterator
argument_list|(
name|_M_insert_equal_lower
argument_list|(
name|__v
argument_list|)
argument_list|)
return|;
block|}
end_else

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KoV
operator|,
name|typename
name|_Cmp
operator|,
name|typename
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_II
operator|>
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KoV
operator|,
name|_Cmp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_equal
argument_list|(
argument|_II __first
argument_list|,
argument|_II __last
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
name|_M_insert_equal
argument_list|(
name|end
argument_list|()
argument_list|,
operator|*
name|__first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KoV
operator|,
name|typename
name|_Cmp
operator|,
name|typename
name|_Alloc
operator|>
name|template
operator|<
name|class
name|_II
operator|>
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KoV
operator|,
name|_Cmp
operator|,
name|_Alloc
operator|>
operator|::
name|_M_insert_unique
argument_list|(
argument|_II __first
argument_list|,
argument|_II __last
argument_list|)
block|{
for|for
control|(
init|;
name|__first
operator|!=
name|__last
condition|;
operator|++
name|__first
control|)
name|_M_insert_unique
argument_list|(
name|end
argument_list|()
argument_list|,
operator|*
name|__first
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|iterator __position
argument_list|)
block|{
name|_Link_type
name|__y
operator|=
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|_Rb_tree_rebalance_for_erase
argument_list|(
name|__position
operator|.
name|_M_node
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
argument_list|)
operator|)
block|;
name|_M_destroy_node
argument_list|(
name|__y
argument_list|)
block|;
operator|--
name|_M_impl
operator|.
name|_M_node_count
block|;     }
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|const_iterator __position
argument_list|)
block|{
name|_Link_type
name|__y
operator|=
name|static_cast
operator|<
name|_Link_type
operator|>
operator|(
name|_Rb_tree_rebalance_for_erase
argument_list|(
name|const_cast
operator|<
name|_Base_ptr
operator|>
operator|(
name|__position
operator|.
name|_M_node
operator|)
argument_list|,
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
argument_list|)
operator|)
block|;
name|_M_destroy_node
argument_list|(
name|__y
argument_list|)
block|;
operator|--
name|_M_impl
operator|.
name|_M_node_count
block|;     }
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|size_type
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|const _Key& __x
argument_list|)
block|{
name|pair
operator|<
name|iterator
block|,
name|iterator
operator|>
name|__p
operator|=
name|equal_range
argument_list|(
name|__x
argument_list|)
block|;
specifier|const
name|size_type
name|__old_size
operator|=
name|size
argument_list|()
block|;
name|erase
argument_list|(
name|__p
operator|.
name|first
argument_list|,
name|__p
operator|.
name|second
argument_list|)
block|;
return|return
name|__old_size
operator|-
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KoV
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KoV
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_Link_type
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KoV
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_copy
argument_list|(
argument|_Const_Link_type __x
argument_list|,
argument|_Link_type __p
argument_list|)
block|{
comment|// Structural copy.  __x and __p must be non-null.
name|_Link_type
name|__top
operator|=
name|_M_clone_node
argument_list|(
name|__x
argument_list|)
block|;
name|__top
operator|->
name|_M_parent
operator|=
name|__p
block|;
name|try
block|{
if|if
condition|(
name|__x
operator|->
name|_M_right
condition|)
name|__top
operator|->
name|_M_right
operator|=
name|_M_copy
argument_list|(
name|_S_right
argument_list|(
name|__x
argument_list|)
argument_list|,
name|__top
argument_list|)
expr_stmt|;
name|__p
operator|=
name|__top
block|;
name|__x
operator|=
name|_S_left
argument_list|(
name|__x
argument_list|)
block|;
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
block|{
name|_Link_type
name|__y
init|=
name|_M_clone_node
argument_list|(
name|__x
argument_list|)
decl_stmt|;
name|__p
operator|->
name|_M_left
operator|=
name|__y
expr_stmt|;
name|__y
operator|->
name|_M_parent
operator|=
name|__p
expr_stmt|;
if|if
condition|(
name|__x
operator|->
name|_M_right
condition|)
name|__y
operator|->
name|_M_right
operator|=
name|_M_copy
argument_list|(
name|_S_right
argument_list|(
name|__x
argument_list|)
argument_list|,
name|__y
argument_list|)
expr_stmt|;
name|__p
operator|=
name|__y
expr_stmt|;
name|__x
operator|=
name|_S_left
argument_list|(
name|__x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}       catch
operator|(
operator|...
operator|)
block|{
name|_M_erase
argument_list|(
name|__top
argument_list|)
block|;
name|__throw_exception_again
block|; 	}
end_expr_stmt

begin_return
return|return
name|__top
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|_M_erase
argument_list|(
argument|_Link_type __x
argument_list|)
block|{
comment|// Erase without rebalancing.
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
block|{
name|_M_erase
argument_list|(
name|_S_right
argument_list|(
name|__x
argument_list|)
argument_list|)
expr_stmt|;
name|_Link_type
name|__y
init|=
name|_S_left
argument_list|(
name|__x
argument_list|)
decl_stmt|;
name|_M_destroy_node
argument_list|(
name|__x
argument_list|)
expr_stmt|;
name|__x
operator|=
name|__y
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|iterator __first
argument_list|,
argument|iterator __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|begin
argument_list|()
operator|&&
name|__last
operator|==
name|end
argument_list|()
condition|)
name|clear
argument_list|()
expr_stmt|;
else|else
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
name|erase
argument_list|(
name|__first
operator|++
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|)
block|{
if|if
condition|(
name|__first
operator|==
name|begin
argument_list|()
operator|&&
name|__last
operator|==
name|end
argument_list|()
condition|)
name|clear
argument_list|()
expr_stmt|;
else|else
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
name|erase
argument_list|(
name|__first
operator|++
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|void
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|erase
argument_list|(
argument|const _Key* __first
argument_list|,
argument|const _Key* __last
argument_list|)
block|{
while|while
condition|(
name|__first
operator|!=
name|__last
condition|)
name|erase
argument_list|(
operator|*
name|__first
operator|++
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|find
argument_list|(
argument|const _Key& __k
argument_list|)
block|{
name|_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
comment|// Current node.
name|_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
comment|// Last node which is not less than __k.
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|,
name|__k
argument_list|)
condition|)
name|__y
operator|=
name|__x
operator|,
name|__x
operator|=
name|_S_left
argument_list|(
name|__x
argument_list|)
expr_stmt|;
else|else
name|__x
operator|=
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
name|iterator
name|__j
operator|=
name|iterator
argument_list|(
name|__y
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|__j
operator|==
name|end
argument_list|()
operator|||
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|__k
argument_list|,
name|_S_key
argument_list|(
name|__j
operator|.
name|_M_node
argument_list|)
argument_list|)
operator|)
condition|?
name|end
argument_list|()
else|:
name|__j
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|find
argument_list|(
argument|const _Key& __k
argument_list|)
specifier|const
block|{
name|_Const_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
comment|// Current node.
name|_Const_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
comment|// Last node which is not less than __k.
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|,
name|__k
argument_list|)
condition|)
name|__y
operator|=
name|__x
operator|,
name|__x
operator|=
name|_S_left
argument_list|(
name|__x
argument_list|)
expr_stmt|;
else|else
name|__x
operator|=
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
block|}
name|const_iterator
name|__j
operator|=
name|const_iterator
argument_list|(
name|__y
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|(
name|__j
operator|==
name|end
argument_list|()
operator|||
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|__k
argument_list|,
name|_S_key
argument_list|(
name|__j
operator|.
name|_M_node
argument_list|)
argument_list|)
operator|)
condition|?
name|end
argument_list|()
else|:
name|__j
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|size_type
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|count
argument_list|(
argument|const _Key& __k
argument_list|)
specifier|const
block|{
name|pair
operator|<
name|const_iterator
block|,
name|const_iterator
operator|>
name|__p
operator|=
name|equal_range
argument_list|(
name|__k
argument_list|)
block|;
specifier|const
name|size_type
name|__n
operator|=
name|std
operator|::
name|distance
argument_list|(
name|__p
operator|.
name|first
argument_list|,
name|__p
operator|.
name|second
argument_list|)
block|;
return|return
name|__n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|lower_bound
argument_list|(
argument|const _Key& __k
argument_list|)
block|{
name|_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
comment|// Current node.
name|_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
comment|// Last node which is not less than __k.
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|,
name|__k
argument_list|)
condition|)
name|__y
operator|=
name|__x
operator|,
name|__x
operator|=
name|_S_left
argument_list|(
name|__x
argument_list|)
expr_stmt|;
else|else
name|__x
operator|=
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|iterator
argument_list|(
name|__y
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|lower_bound
argument_list|(
argument|const _Key& __k
argument_list|)
specifier|const
block|{
name|_Const_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
comment|// Current node.
name|_Const_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
comment|// Last node which is not less than __k.
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
if|if
condition|(
operator|!
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|,
name|__k
argument_list|)
condition|)
name|__y
operator|=
name|__x
operator|,
name|__x
operator|=
name|_S_left
argument_list|(
name|__x
argument_list|)
expr_stmt|;
else|else
name|__x
operator|=
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|const_iterator
argument_list|(
name|__y
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|upper_bound
argument_list|(
argument|const _Key& __k
argument_list|)
block|{
name|_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
comment|// Current node.
name|_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
comment|// Last node which is greater than __k.
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|__k
argument_list|,
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|)
condition|)
name|__y
operator|=
name|__x
operator|,
name|__x
operator|=
name|_S_left
argument_list|(
name|__x
argument_list|)
expr_stmt|;
else|else
name|__x
operator|=
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|iterator
argument_list|(
name|__y
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|upper_bound
argument_list|(
argument|const _Key& __k
argument_list|)
specifier|const
block|{
name|_Const_Link_type
name|__x
operator|=
name|_M_begin
argument_list|()
block|;
comment|// Current node.
name|_Const_Link_type
name|__y
operator|=
name|_M_end
argument_list|()
block|;
comment|// Last node which is greater than __k.
while|while
condition|(
name|__x
operator|!=
literal|0
condition|)
if|if
condition|(
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|__k
argument_list|,
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|)
condition|)
name|__y
operator|=
name|__x
operator|,
name|__x
operator|=
name|_S_left
argument_list|(
name|__x
argument_list|)
expr_stmt|;
else|else
name|__x
operator|=
name|_S_right
argument_list|(
name|__x
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|const_iterator
argument_list|(
name|__y
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|pair
operator|<
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
operator|,
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|iterator
operator|>
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|equal_range
argument_list|(
argument|const _Key& __k
argument_list|)
block|{
return|return
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
operator|(
name|lower_bound
argument_list|(
name|__k
argument_list|)
operator|,
name|upper_bound
argument_list|(
name|__k
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KoV
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
specifier|inline
name|pair
operator|<
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KoV
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
operator|,
name|typename
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KoV
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|const_iterator
operator|>
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KoV
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|equal_range
argument_list|(
argument|const _Key& __k
argument_list|)
specifier|const
block|{
return|return
name|pair
operator|<
name|const_iterator
operator|,
name|const_iterator
operator|>
operator|(
name|lower_bound
argument_list|(
name|__k
argument_list|)
operator|,
name|upper_bound
argument_list|(
name|__k
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_function_decl
name|unsigned
name|int
name|_Rb_tree_black_count
parameter_list|(
specifier|const
name|_Rb_tree_node_base
modifier|*
name|__node
parameter_list|,
specifier|const
name|_Rb_tree_node_base
modifier|*
name|__root
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|typename
name|_Key
operator|,
name|typename
name|_Val
operator|,
name|typename
name|_KeyOfValue
operator|,
name|typename
name|_Compare
operator|,
name|typename
name|_Alloc
operator|>
name|bool
name|_Rb_tree
operator|<
name|_Key
operator|,
name|_Val
operator|,
name|_KeyOfValue
operator|,
name|_Compare
operator|,
name|_Alloc
operator|>
operator|::
name|__rb_verify
argument_list|()
specifier|const
block|{
if|if
condition|(
name|_M_impl
operator|.
name|_M_node_count
operator|==
literal|0
operator|||
name|begin
argument_list|()
operator|==
name|end
argument_list|()
condition|)
return|return
name|_M_impl
operator|.
name|_M_node_count
operator|==
literal|0
operator|&&
name|begin
argument_list|()
operator|==
name|end
argument_list|()
operator|&&
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_left
operator|==
name|_M_end
argument_list|()
operator|&&
name|this
operator|->
name|_M_impl
operator|.
name|_M_header
operator|.
name|_M_right
operator|==
name|_M_end
argument_list|()
return|;
name|unsigned
name|int
name|__len
operator|=
name|_Rb_tree_black_count
argument_list|(
name|_M_leftmost
argument_list|()
argument_list|,
name|_M_root
argument_list|()
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|const_iterator
name|__it
init|=
name|begin
argument_list|()
init|;
name|__it
operator|!=
name|end
argument_list|()
condition|;
operator|++
name|__it
control|)
block|{
name|_Const_Link_type
name|__x
init|=
name|static_cast
operator|<
name|_Const_Link_type
operator|>
operator|(
name|__it
operator|.
name|_M_node
operator|)
decl_stmt|;
name|_Const_Link_type
name|__L
init|=
name|_S_left
argument_list|(
name|__x
argument_list|)
decl_stmt|;
name|_Const_Link_type
name|__R
init|=
name|_S_right
argument_list|(
name|__x
argument_list|)
decl_stmt|;
if|if
condition|(
name|__x
operator|->
name|_M_color
operator|==
name|_S_red
condition|)
if|if
condition|(
operator|(
name|__L
operator|&&
name|__L
operator|->
name|_M_color
operator|==
name|_S_red
operator|)
operator|||
operator|(
name|__R
operator|&&
name|__R
operator|->
name|_M_color
operator|==
name|_S_red
operator|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|__L
operator|&&
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|__L
argument_list|)
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
name|__R
operator|&&
name|_M_impl
operator|.
name|_M_key_compare
argument_list|(
name|_S_key
argument_list|(
name|__R
argument_list|)
argument_list|,
name|_S_key
argument_list|(
name|__x
argument_list|)
argument_list|)
condition|)
return|return
name|false
return|;
if|if
condition|(
operator|!
name|__L
operator|&&
operator|!
name|__R
operator|&&
name|_Rb_tree_black_count
argument_list|(
name|__x
argument_list|,
name|_M_root
argument_list|()
argument_list|)
operator|!=
name|__len
condition|)
return|return
name|false
return|;
block|}
end_for

begin_if
if|if
condition|(
name|_M_leftmost
argument_list|()
operator|!=
name|_Rb_tree_node_base
operator|::
name|_S_minimum
argument_list|(
name|_M_root
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
end_if

begin_if
if|if
condition|(
name|_M_rightmost
argument_list|()
operator|!=
name|_Rb_tree_node_base
operator|::
name|_S_maximum
argument_list|(
name|_M_root
argument_list|()
argument_list|)
condition|)
return|return
name|false
return|;
end_if

begin_return
return|return
name|true
return|;
end_return

begin_endif
unit|}  _GLIBCXX_END_NAMESPACE
endif|#
directive|endif
end_endif

end_unit

