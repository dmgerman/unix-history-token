begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Hashtable implementation used by containers -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2001, 2002 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/*  * Copyright (c) 1996,1997  * Silicon Graphics Computer Systems, Inc.  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Silicon Graphics makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_comment
comment|/** @file ext/stl_hashtable.h  *  This file is a GNU extension to the Standard C++ Library (possibly  *  containing extensions from the HP/SGI STL subset).  You should only  *  include this header if you are using GCC 3 or later.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__SGI_STL_INTERNAL_HASHTABLE_H
end_ifndef

begin_define
define|#
directive|define
name|__SGI_STL_INTERNAL_HASHTABLE_H
end_define

begin_comment
comment|// Hashtable class, used to implement the hashed associative containers
end_comment

begin_comment
comment|// hash_set, hash_map, hash_multiset, and hash_multimap.
end_comment

begin_include
include|#
directive|include
file|<bits/stl_algobase.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_alloc.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_construct.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_algo.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_uninitialized.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_function.h>
end_include

begin_include
include|#
directive|include
file|<bits/stl_vector.h>
end_include

begin_include
include|#
directive|include
file|<ext/stl_hash_fun.h>
end_include

begin_decl_stmt
name|namespace
name|__gnu_cxx
block|{
name|using
name|std
operator|::
name|size_t
expr_stmt|;
name|using
name|std
operator|::
name|ptrdiff_t
expr_stmt|;
name|using
name|std
operator|::
name|forward_iterator_tag
expr_stmt|;
name|using
name|std
operator|::
name|input_iterator_tag
expr_stmt|;
name|using
name|std
operator|::
name|_Alloc_traits
expr_stmt|;
name|using
name|std
operator|::
name|_Construct
expr_stmt|;
name|using
name|std
operator|::
name|_Destroy
expr_stmt|;
name|using
name|std
operator|::
name|distance
expr_stmt|;
name|using
name|std
operator|::
name|vector
expr_stmt|;
name|using
name|std
operator|::
name|pair
expr_stmt|;
name|using
name|std
operator|::
name|__iterator_category
expr_stmt|;
name|template
operator|<
name|class
name|_Val
operator|>
expr|struct
name|_Hashtable_node
block|{
name|_Hashtable_node
operator|*
name|_M_next
block|;
name|_Val
name|_M_val
block|; }
expr_stmt|;
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_ExtractKey
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|=
name|std
operator|::
name|__alloc
operator|>
name|class
name|hashtable
expr_stmt|;
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_ExtractKey
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
expr|struct
name|_Hashtable_iterator
expr_stmt|;
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_ExtractKey
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
expr|struct
name|_Hashtable_const_iterator
expr_stmt|;
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_ExtractKey
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
expr|struct
name|_Hashtable_iterator
block|{
typedef|typedef
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|_Hashtable
expr_stmt|;
typedef|typedef
name|_Hashtable_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|iterator
expr_stmt|;
typedef|typedef
name|_Hashtable_const_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|const_iterator
expr_stmt|;
typedef|typedef
name|_Hashtable_node
operator|<
name|_Val
operator|>
name|_Node
expr_stmt|;
typedef|typedef
name|forward_iterator_tag
name|iterator_category
typedef|;
typedef|typedef
name|_Val
name|value_type
typedef|;
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
typedef|typedef
name|size_t
name|size_type
typedef|;
typedef|typedef
name|_Val
modifier|&
name|reference
typedef|;
typedef|typedef
name|_Val
modifier|*
name|pointer
typedef|;
name|_Node
modifier|*
name|_M_cur
decl_stmt|;
name|_Hashtable
modifier|*
name|_M_ht
decl_stmt|;
name|_Hashtable_iterator
argument_list|(
name|_Node
operator|*
name|__n
argument_list|,
name|_Hashtable
operator|*
name|__tab
argument_list|)
operator|:
name|_M_cur
argument_list|(
name|__n
argument_list|)
operator|,
name|_M_ht
argument_list|(
argument|__tab
argument_list|)
block|{}
name|_Hashtable_iterator
argument_list|()
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|_M_cur
operator|->
name|_M_val
return|;
block|}
name|pointer
name|operator
operator|->
expr|(
block|)
decl|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|__it
operator|)
specifier|const
block|{
return|return
name|_M_cur
operator|==
name|__it
operator|.
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|iterator
operator|&
name|__it
operator|)
specifier|const
block|{
return|return
name|_M_cur
operator|!=
name|__it
operator|.
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_ExtractKey
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
expr|struct
name|_Hashtable_const_iterator
block|{
typedef|typedef
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|_Hashtable
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Hashtable_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Hashtable_const_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Hashtable_node
operator|<
name|_Val
operator|>
name|_Node
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|forward_iterator_tag
name|iterator_category
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_Val
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Val
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|_Val
modifier|*
name|pointer
typedef|;
end_typedef

begin_decl_stmt
specifier|const
name|_Node
modifier|*
name|_M_cur
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|const
name|_Hashtable
modifier|*
name|_M_ht
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|_Hashtable_const_iterator
argument_list|(
specifier|const
name|_Node
operator|*
name|__n
argument_list|,
specifier|const
name|_Hashtable
operator|*
name|__tab
argument_list|)
operator|:
name|_M_cur
argument_list|(
name|__n
argument_list|)
operator|,
name|_M_ht
argument_list|(
argument|__tab
argument_list|)
block|{}
name|_Hashtable_const_iterator
argument_list|()
block|{}
name|_Hashtable_const_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|__it
argument_list|)
operator|:
name|_M_cur
argument_list|(
name|__it
operator|.
name|_M_cur
argument_list|)
operator|,
name|_M_ht
argument_list|(
argument|__it._M_ht
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|_M_cur
operator|->
name|_M_val
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|pointer
name|operator
operator|->
expr|(
end_expr_stmt

begin_expr_stmt
unit|)
specifier|const
block|{
return|return
operator|&
operator|(
name|operator
operator|*
operator|(
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|__it
operator|)
specifier|const
block|{
return|return
name|_M_cur
operator|==
name|__it
operator|.
name|_M_cur
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|const_iterator
operator|&
name|__it
operator|)
specifier|const
block|{
return|return
name|_M_cur
operator|!=
name|__it
operator|.
name|_M_cur
return|;
block|}
end_expr_stmt

begin_comment
unit|};
comment|// Note: assumes long is at least 32 bits.
end_comment

begin_enum
enum|enum
block|{
name|__stl_num_primes
init|=
literal|28
block|}
enum|;
end_enum

begin_decl_stmt
specifier|static
specifier|const
name|unsigned
name|long
name|__stl_prime_list
index|[
name|__stl_num_primes
index|]
init|=
block|{
literal|53ul
block|,
literal|97ul
block|,
literal|193ul
block|,
literal|389ul
block|,
literal|769ul
block|,
literal|1543ul
block|,
literal|3079ul
block|,
literal|6151ul
block|,
literal|12289ul
block|,
literal|24593ul
block|,
literal|49157ul
block|,
literal|98317ul
block|,
literal|196613ul
block|,
literal|393241ul
block|,
literal|786433ul
block|,
literal|1572869ul
block|,
literal|3145739ul
block|,
literal|6291469ul
block|,
literal|12582917ul
block|,
literal|25165843ul
block|,
literal|50331653ul
block|,
literal|100663319ul
block|,
literal|201326611ul
block|,
literal|402653189ul
block|,
literal|805306457ul
block|,
literal|1610612741ul
block|,
literal|3221225473ul
block|,
literal|4294967291ul
block|}
decl_stmt|;
end_decl_stmt

begin_function
specifier|inline
name|unsigned
name|long
name|__stl_next_prime
parameter_list|(
name|unsigned
name|long
name|__n
parameter_list|)
block|{
specifier|const
name|unsigned
name|long
modifier|*
name|__first
init|=
name|__stl_prime_list
decl_stmt|;
specifier|const
name|unsigned
name|long
modifier|*
name|__last
init|=
name|__stl_prime_list
operator|+
operator|(
name|int
operator|)
name|__stl_num_primes
decl_stmt|;
specifier|const
name|unsigned
name|long
modifier|*
name|pos
init|=
name|std
operator|::
name|lower_bound
argument_list|(
name|__first
argument_list|,
name|__last
argument_list|,
name|__n
argument_list|)
decl_stmt|;
return|return
name|pos
operator|==
name|__last
condition|?
operator|*
operator|(
name|__last
operator|-
literal|1
operator|)
else|:
operator|*
name|pos
return|;
block|}
end_function

begin_comment
comment|// Forward declaration of operator==.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|class
name|hashtable
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|&
name|__ht1
operator|,
specifier|const
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|&
name|__ht2
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Hashtables handle allocators a bit differently than other containers
end_comment

begin_comment
comment|//  do.  If we're using standard-conforming allocators, then a hashtable
end_comment

begin_comment
comment|//  unconditionally has a member variable to hold its allocator, even if
end_comment

begin_comment
comment|//  it so happens that all instances of the allocator type are identical.
end_comment

begin_comment
comment|// This is because, for hashtables, this extra storage is negligible.
end_comment

begin_comment
comment|//  Additionally, a base class wouldn't serve any other purposes; it
end_comment

begin_comment
comment|//  wouldn't, for example, simplify the exception-handling code.
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HashFcn
operator|,
name|class
name|_ExtractKey
operator|,
name|class
name|_EqualKey
operator|,
name|class
name|_Alloc
operator|>
name|class
name|hashtable
block|{
name|public
operator|:
typedef|typedef
name|_Key
name|key_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|_Val
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_HashFcn
name|hasher
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|_EqualKey
name|key_equal
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|value_type
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|value_type
modifier|&
name|const_reference
typedef|;
end_typedef

begin_expr_stmt
name|hasher
name|hash_funct
argument_list|()
specifier|const
block|{
return|return
name|_M_hash
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|key_equal
name|key_eq
argument_list|()
specifier|const
block|{
return|return
name|_M_equals
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|_Hashtable_node
operator|<
name|_Val
operator|>
name|_Node
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|typename
name|_Alloc_traits
operator|<
name|_Val
operator|,
name|_Alloc
operator|>
operator|::
name|allocator_type
name|allocator_type
expr_stmt|;
end_typedef

begin_expr_stmt
name|allocator_type
name|get_allocator
argument_list|()
specifier|const
block|{
return|return
name|_M_node_allocator
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|typename
name|_Alloc_traits
operator|<
name|_Node
operator|,
name|_Alloc
operator|>
operator|::
name|allocator_type
name|_M_node_allocator
expr_stmt|;
end_expr_stmt

begin_function
name|_Node
modifier|*
name|_M_get_node
parameter_list|()
block|{
return|return
name|_M_node_allocator
operator|.
name|allocate
argument_list|(
literal|1
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|_M_put_node
parameter_list|(
name|_Node
modifier|*
name|__p
parameter_list|)
block|{
name|_M_node_allocator
operator|.
name|deallocate
argument_list|(
name|__p
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|hasher
name|_M_hash
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|key_equal
name|_M_equals
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_ExtractKey
name|_M_get_key
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|vector
operator|<
name|_Node
operator|*
operator|,
name|_Alloc
operator|>
name|_M_buckets
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|size_type
name|_M_num_elements
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|_Hashtable_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Hashtable_const_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
name|const_iterator
expr_stmt|;
end_typedef

begin_macro
name|friend
end_macro

begin_expr_stmt
unit|struct
name|_Hashtable_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
expr_stmt|;
end_expr_stmt

begin_macro
name|friend
end_macro

begin_expr_stmt
unit|struct
name|_Hashtable_const_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HashFcn
operator|,
name|_ExtractKey
operator|,
name|_EqualKey
operator|,
name|_Alloc
operator|>
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|hashtable
argument_list|(
argument|size_type __n
argument_list|,
argument|const _HashFcn&    __hf
argument_list|,
argument|const _EqualKey&   __eql
argument_list|,
argument|const _ExtractKey& __ext
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|_M_node_allocator
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_hash
argument_list|(
name|__hf
argument_list|)
operator|,
name|_M_equals
argument_list|(
name|__eql
argument_list|)
operator|,
name|_M_get_key
argument_list|(
name|__ext
argument_list|)
operator|,
name|_M_buckets
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_num_elements
argument_list|(
literal|0
argument_list|)
block|{
name|_M_initialize_buckets
argument_list|(
name|__n
argument_list|)
block|;   }
name|hashtable
argument_list|(
argument|size_type __n
argument_list|,
argument|const _HashFcn&    __hf
argument_list|,
argument|const _EqualKey&   __eql
argument_list|,
argument|const allocator_type& __a = allocator_type()
argument_list|)
operator|:
name|_M_node_allocator
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_hash
argument_list|(
name|__hf
argument_list|)
operator|,
name|_M_equals
argument_list|(
name|__eql
argument_list|)
operator|,
name|_M_get_key
argument_list|(
name|_ExtractKey
argument_list|()
argument_list|)
operator|,
name|_M_buckets
argument_list|(
name|__a
argument_list|)
operator|,
name|_M_num_elements
argument_list|(
literal|0
argument_list|)
block|{
name|_M_initialize_buckets
argument_list|(
name|__n
argument_list|)
block|;   }
name|hashtable
argument_list|(
specifier|const
name|hashtable
operator|&
name|__ht
argument_list|)
operator|:
name|_M_node_allocator
argument_list|(
name|__ht
operator|.
name|get_allocator
argument_list|()
argument_list|)
operator|,
name|_M_hash
argument_list|(
name|__ht
operator|.
name|_M_hash
argument_list|)
operator|,
name|_M_equals
argument_list|(
name|__ht
operator|.
name|_M_equals
argument_list|)
operator|,
name|_M_get_key
argument_list|(
name|__ht
operator|.
name|_M_get_key
argument_list|)
operator|,
name|_M_buckets
argument_list|(
name|__ht
operator|.
name|get_allocator
argument_list|()
argument_list|)
operator|,
name|_M_num_elements
argument_list|(
literal|0
argument_list|)
block|{
name|_M_copy_from
argument_list|(
name|__ht
argument_list|)
block|;   }
name|hashtable
operator|&
name|operator
operator|=
operator|(
specifier|const
name|hashtable
operator|&
name|__ht
operator|)
block|{
if|if
condition|(
operator|&
name|__ht
operator|!=
name|this
condition|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|_M_hash
operator|=
name|__ht
operator|.
name|_M_hash
expr_stmt|;
name|_M_equals
operator|=
name|__ht
operator|.
name|_M_equals
expr_stmt|;
name|_M_get_key
operator|=
name|__ht
operator|.
name|_M_get_key
expr_stmt|;
name|_M_copy_from
argument_list|(
name|__ht
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_macro
unit|}    ~
name|hashtable
argument_list|()
end_macro

begin_block
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_num_elements
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_function
name|void
name|swap
parameter_list|(
name|hashtable
modifier|&
name|__ht
parameter_list|)
block|{
name|std
operator|::
name|swap
argument_list|(
name|_M_hash
argument_list|,
name|__ht
operator|.
name|_M_hash
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_equals
argument_list|,
name|__ht
operator|.
name|_M_equals
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_get_key
argument_list|,
name|__ht
operator|.
name|_M_get_key
argument_list|)
expr_stmt|;
name|_M_buckets
operator|.
name|swap
argument_list|(
name|__ht
operator|.
name|_M_buckets
argument_list|)
expr_stmt|;
name|std
operator|::
name|swap
argument_list|(
name|_M_num_elements
argument_list|,
name|__ht
operator|.
name|_M_num_elements
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|iterator
name|begin
parameter_list|()
block|{
for|for
control|(
name|size_type
name|__n
init|=
literal|0
init|;
name|__n
operator|<
name|_M_buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|__n
control|)
if|if
condition|(
name|_M_buckets
index|[
name|__n
index|]
condition|)
return|return
name|iterator
argument_list|(
name|_M_buckets
index|[
name|__n
index|]
argument_list|,
name|this
argument_list|)
return|;
return|return
name|end
argument_list|()
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|iterator
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
for|for
control|(
name|size_type
name|__n
init|=
literal|0
init|;
name|__n
operator|<
name|_M_buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|__n
control|)
if|if
condition|(
name|_M_buckets
index|[
name|__n
index|]
condition|)
return|return
name|const_iterator
argument_list|(
name|_M_buckets
index|[
name|__n
index|]
argument_list|,
name|this
argument_list|)
return|;
end_expr_stmt

begin_return
return|return
name|end
argument_list|()
return|;
end_return

begin_macro
unit|}    const_iterator
name|end
argument_list|()
end_macro

begin_expr_stmt
specifier|const
block|{
return|return
name|const_iterator
argument_list|(
literal|0
argument_list|,
name|this
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Vl
operator|,
name|class
name|_Ky
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_Al
operator|>
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|hashtable
operator|<
name|_Vl
operator|,
name|_Ky
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_Al
operator|>
operator|&
operator|,
specifier|const
name|hashtable
operator|<
name|_Vl
operator|,
name|_Ky
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_Al
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|size_type
name|bucket_count
argument_list|()
specifier|const
block|{
return|return
name|_M_buckets
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_bucket_count
argument_list|()
specifier|const
block|{
return|return
name|__stl_prime_list
index|[
operator|(
name|int
operator|)
name|__stl_num_primes
operator|-
literal|1
index|]
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|size_type
name|elems_in_bucket
argument_list|(
name|size_type
name|__bucket
argument_list|)
decl|const
block|{
name|size_type
name|__result
init|=
literal|0
decl_stmt|;
for|for
control|(
name|_Node
modifier|*
name|__cur
init|=
name|_M_buckets
index|[
name|__bucket
index|]
init|;
name|__cur
condition|;
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
control|)
name|__result
operator|+=
literal|1
expr_stmt|;
return|return
name|__result
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert_unique
argument_list|(
argument|const value_type& __obj
argument_list|)
block|{
name|resize
argument_list|(
name|_M_num_elements
operator|+
literal|1
argument_list|)
block|;
return|return
name|insert_unique_noresize
argument_list|(
name|__obj
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|insert_equal
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__obj
parameter_list|)
block|{
name|resize
argument_list|(
name|_M_num_elements
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|insert_equal_noresize
argument_list|(
name|__obj
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|insert_unique_noresize
argument_list|(
specifier|const
name|value_type
operator|&
name|__obj
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|iterator
name|insert_equal_noresize
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__obj
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert_unique
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|)
block|{
name|insert_unique
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|,
name|__iterator_category
argument_list|(
name|__f
argument_list|)
argument_list|)
block|;   }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert_equal
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|)
block|{
name|insert_equal
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|,
name|__iterator_category
argument_list|(
name|__f
argument_list|)
argument_list|)
block|;   }
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert_unique
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|__f
operator|!=
name|__l
condition|;
operator|++
name|__f
control|)
name|insert_unique
argument_list|(
operator|*
name|__f
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_InputIterator
operator|>
name|void
name|insert_equal
argument_list|(
argument|_InputIterator __f
argument_list|,
argument|_InputIterator __l
argument_list|,
argument|input_iterator_tag
argument_list|)
block|{
for|for
control|(
init|;
name|__f
operator|!=
name|__l
condition|;
operator|++
name|__f
control|)
name|insert_equal
argument_list|(
operator|*
name|__f
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|insert_unique
argument_list|(
argument|_ForwardIterator __f
argument_list|,
argument|_ForwardIterator __l
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__n
operator|=
name|distance
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|;
name|resize
argument_list|(
name|_M_num_elements
operator|+
name|__n
argument_list|)
block|;
for|for
control|(
init|;
name|__n
operator|>
literal|0
condition|;
operator|--
name|__n
operator|,
operator|++
name|__f
control|)
name|insert_unique_noresize
argument_list|(
operator|*
name|__f
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_ForwardIterator
operator|>
name|void
name|insert_equal
argument_list|(
argument|_ForwardIterator __f
argument_list|,
argument|_ForwardIterator __l
argument_list|,
argument|forward_iterator_tag
argument_list|)
block|{
name|size_type
name|__n
operator|=
name|distance
argument_list|(
name|__f
argument_list|,
name|__l
argument_list|)
block|;
name|resize
argument_list|(
name|_M_num_elements
operator|+
name|__n
argument_list|)
block|;
for|for
control|(
init|;
name|__n
operator|>
literal|0
condition|;
operator|--
name|__n
operator|,
operator|++
name|__f
control|)
name|insert_equal_noresize
argument_list|(
operator|*
name|__f
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_function_decl
name|reference
name|find_or_insert
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__obj
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|iterator
name|find
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__key
parameter_list|)
block|{
name|size_type
name|__n
init|=
name|_M_bkt_num_key
argument_list|(
name|__key
argument_list|)
decl_stmt|;
name|_Node
modifier|*
name|__first
decl_stmt|;
for|for
control|(
name|__first
operator|=
name|_M_buckets
index|[
name|__n
index|]
init|;
name|__first
operator|&&
operator|!
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__first
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
condition|;
name|__first
operator|=
name|__first
operator|->
name|_M_next
control|)
block|{}
return|return
name|iterator
argument_list|(
name|__first
argument_list|,
name|this
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
name|const_iterator
name|find
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
decl|const
block|{
name|size_type
name|__n
init|=
name|_M_bkt_num_key
argument_list|(
name|__key
argument_list|)
decl_stmt|;
specifier|const
name|_Node
modifier|*
name|__first
decl_stmt|;
for|for
control|(
name|__first
operator|=
name|_M_buckets
index|[
name|__n
index|]
init|;
name|__first
operator|&&
operator|!
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__first
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
condition|;
name|__first
operator|=
name|__first
operator|->
name|_M_next
control|)
block|{}
return|return
name|const_iterator
argument_list|(
name|__first
argument_list|,
name|this
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|count
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
decl|const
block|{
specifier|const
name|size_type
name|__n
init|=
name|_M_bkt_num_key
argument_list|(
name|__key
argument_list|)
decl_stmt|;
name|size_type
name|__result
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|const
name|_Node
modifier|*
name|__cur
init|=
name|_M_buckets
index|[
name|__n
index|]
init|;
name|__cur
condition|;
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
control|)
if|if
condition|(
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__cur
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
condition|)
operator|++
name|__result
expr_stmt|;
return|return
name|__result
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|equal_range
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|pair
operator|<
name|const_iterator
operator|,
name|const_iterator
operator|>
name|equal_range
argument_list|(
argument|const key_type& __key
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_function_decl
name|size_type
name|erase
parameter_list|(
specifier|const
name|key_type
modifier|&
name|__key
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
specifier|const
name|iterator
modifier|&
name|__it
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|iterator
name|__first
parameter_list|,
name|iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
specifier|const
name|const_iterator
modifier|&
name|__it
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|const_iterator
name|__first
parameter_list|,
name|const_iterator
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|resize
parameter_list|(
name|size_type
name|__num_elements_hint
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|clear
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|size_type
name|_M_next_size
argument_list|(
name|size_type
name|__n
argument_list|)
decl|const
block|{
return|return
name|__stl_next_prime
argument_list|(
name|__n
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|void
name|_M_initialize_buckets
parameter_list|(
name|size_type
name|__n
parameter_list|)
block|{
specifier|const
name|size_type
name|__n_buckets
init|=
name|_M_next_size
argument_list|(
name|__n
argument_list|)
decl_stmt|;
name|_M_buckets
operator|.
name|reserve
argument_list|(
name|__n_buckets
argument_list|)
expr_stmt|;
name|_M_buckets
operator|.
name|insert
argument_list|(
name|_M_buckets
operator|.
name|end
argument_list|()
argument_list|,
name|__n_buckets
argument_list|,
operator|(
name|_Node
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|_M_num_elements
operator|=
literal|0
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|size_type
name|_M_bkt_num_key
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|)
decl|const
block|{
return|return
name|_M_bkt_num_key
argument_list|(
name|__key
argument_list|,
name|_M_buckets
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|_M_bkt_num
argument_list|(
specifier|const
name|value_type
operator|&
name|__obj
argument_list|)
decl|const
block|{
return|return
name|_M_bkt_num_key
argument_list|(
name|_M_get_key
argument_list|(
name|__obj
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|_M_bkt_num_key
argument_list|(
specifier|const
name|key_type
operator|&
name|__key
argument_list|,
name|size_t
name|__n
argument_list|)
decl|const
block|{
return|return
name|_M_hash
argument_list|(
name|__key
argument_list|)
operator|%
name|__n
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|_M_bkt_num
argument_list|(
specifier|const
name|value_type
operator|&
name|__obj
argument_list|,
name|size_t
name|__n
argument_list|)
decl|const
block|{
return|return
name|_M_bkt_num_key
argument_list|(
name|_M_get_key
argument_list|(
name|__obj
argument_list|)
argument_list|,
name|__n
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|_Node
modifier|*
name|_M_new_node
parameter_list|(
specifier|const
name|value_type
modifier|&
name|__obj
parameter_list|)
block|{
name|_Node
modifier|*
name|__n
init|=
name|_M_get_node
argument_list|()
decl_stmt|;
name|__n
operator|->
name|_M_next
operator|=
literal|0
expr_stmt|;
name|try
block|{
name|_Construct
argument_list|(
operator|&
name|__n
operator|->
name|_M_val
argument_list|,
name|__obj
argument_list|)
expr_stmt|;
return|return
name|__n
return|;
block|}
name|catch
argument_list|(
argument|...
argument_list|)
block|{
name|_M_put_node
argument_list|(
name|__n
argument_list|)
expr_stmt|;
name|__throw_exception_again
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|_M_delete_node
parameter_list|(
name|_Node
modifier|*
name|__n
parameter_list|)
block|{
name|_Destroy
argument_list|(
operator|&
name|__n
operator|->
name|_M_val
argument_list|)
expr_stmt|;
name|_M_put_node
argument_list|(
name|__n
argument_list|)
expr_stmt|;
block|}
end_function

begin_function_decl
name|void
name|_M_erase_bucket
parameter_list|(
specifier|const
name|size_type
name|__n
parameter_list|,
name|_Node
modifier|*
name|__first
parameter_list|,
name|_Node
modifier|*
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_erase_bucket
parameter_list|(
specifier|const
name|size_type
name|__n
parameter_list|,
name|_Node
modifier|*
name|__last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|_M_copy_from
parameter_list|(
specifier|const
name|hashtable
modifier|&
name|__ht
parameter_list|)
function_decl|;
end_function_decl

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_ExK
operator|,
name|class
name|_EqK
operator|,
name|class
name|_All
operator|>
name|_Hashtable_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_ExK
operator|,
name|_EqK
operator|,
name|_All
operator|>
operator|&
name|_Hashtable_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_ExK
operator|,
name|_EqK
operator|,
name|_All
operator|>
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
specifier|const
name|_Node
operator|*
name|__old
operator|=
name|_M_cur
block|;
name|_M_cur
operator|=
name|_M_cur
operator|->
name|_M_next
block|;
if|if
condition|(
operator|!
name|_M_cur
condition|)
block|{
name|size_type
name|__bucket
init|=
name|_M_ht
operator|->
name|_M_bkt_num
argument_list|(
name|__old
operator|->
name|_M_val
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|_M_cur
operator|&&
operator|++
name|__bucket
operator|<
name|_M_ht
operator|->
name|_M_buckets
operator|.
name|size
argument_list|()
condition|)
name|_M_cur
operator|=
name|_M_ht
operator|->
name|_M_buckets
index|[
name|__bucket
index|]
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_ExK
operator|,
name|class
name|_EqK
operator|,
name|class
name|_All
operator|>
specifier|inline
name|_Hashtable_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_ExK
operator|,
name|_EqK
operator|,
name|_All
operator|>
name|_Hashtable_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_ExK
operator|,
name|_EqK
operator|,
name|_All
operator|>
operator|::
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|__tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_ExK
operator|,
name|class
name|_EqK
operator|,
name|class
name|_All
operator|>
name|_Hashtable_const_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_ExK
operator|,
name|_EqK
operator|,
name|_All
operator|>
operator|&
name|_Hashtable_const_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_ExK
operator|,
name|_EqK
operator|,
name|_All
operator|>
operator|::
name|operator
operator|++
operator|(
operator|)
block|{
specifier|const
name|_Node
operator|*
name|__old
operator|=
name|_M_cur
block|;
name|_M_cur
operator|=
name|_M_cur
operator|->
name|_M_next
block|;
if|if
condition|(
operator|!
name|_M_cur
condition|)
block|{
name|size_type
name|__bucket
init|=
name|_M_ht
operator|->
name|_M_bkt_num
argument_list|(
name|__old
operator|->
name|_M_val
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|_M_cur
operator|&&
operator|++
name|__bucket
operator|<
name|_M_ht
operator|->
name|_M_buckets
operator|.
name|size
argument_list|()
condition|)
name|_M_cur
operator|=
name|_M_ht
operator|->
name|_M_buckets
index|[
name|__bucket
index|]
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_ExK
operator|,
name|class
name|_EqK
operator|,
name|class
name|_All
operator|>
specifier|inline
name|_Hashtable_const_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_ExK
operator|,
name|_EqK
operator|,
name|_All
operator|>
name|_Hashtable_const_iterator
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_ExK
operator|,
name|_EqK
operator|,
name|_All
operator|>
operator|::
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|__tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|__tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|&
name|__ht1
operator|,
specifier|const
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|&
name|__ht2
operator|)
block|{
typedef|typedef
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|_Node
name|_Node
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__ht1
operator|.
name|_M_buckets
operator|.
name|size
argument_list|()
operator|!=
name|__ht2
operator|.
name|_M_buckets
operator|.
name|size
argument_list|()
condition|)
return|return
name|false
return|;
end_if

begin_for
for|for
control|(
name|size_t
name|__n
init|=
literal|0
init|;
name|__n
operator|<
name|__ht1
operator|.
name|_M_buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|__n
control|)
block|{
name|_Node
modifier|*
name|__cur1
init|=
name|__ht1
operator|.
name|_M_buckets
index|[
name|__n
index|]
decl_stmt|;
name|_Node
modifier|*
name|__cur2
init|=
name|__ht2
operator|.
name|_M_buckets
index|[
name|__n
index|]
decl_stmt|;
for|for
control|(
init|;
name|__cur1
operator|&&
name|__cur2
operator|&&
name|__cur1
operator|->
name|_M_val
operator|==
name|__cur2
operator|->
name|_M_val
condition|;
name|__cur1
operator|=
name|__cur1
operator|->
name|_M_next
operator|,
name|__cur2
operator|=
name|__cur2
operator|->
name|_M_next
control|)
block|{}
if|if
condition|(
name|__cur1
operator|||
name|__cur2
condition|)
return|return
name|false
return|;
block|}
end_for

begin_return
return|return
name|true
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|&
name|__ht1
operator|,
specifier|const
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|&
name|__ht2
operator|)
block|{
return|return
operator|!
operator|(
name|__ht1
operator|==
name|__ht2
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Extract
operator|,
name|class
name|_EqKey
operator|,
name|class
name|_All
operator|>
specifier|inline
name|void
name|swap
argument_list|(
argument|hashtable<_Val
argument_list|,
argument|_Key
argument_list|,
argument|_HF
argument_list|,
argument|_Extract
argument_list|,
argument|_EqKey
argument_list|,
argument|_All>& __ht1
argument_list|,
argument|hashtable<_Val
argument_list|,
argument|_Key
argument_list|,
argument|_HF
argument_list|,
argument|_Extract
argument_list|,
argument|_EqKey
argument_list|,
argument|_All>& __ht2
argument_list|)
block|{
name|__ht1
operator|.
name|swap
argument_list|(
name|__ht2
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|pair
operator|<
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|iterator
operator|,
name|bool
operator|>
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|insert_unique_noresize
argument_list|(
argument|const value_type& __obj
argument_list|)
block|{
specifier|const
name|size_type
name|__n
operator|=
name|_M_bkt_num
argument_list|(
name|__obj
argument_list|)
block|;
name|_Node
operator|*
name|__first
operator|=
name|_M_buckets
index|[
name|__n
index|]
block|;
for|for
control|(
name|_Node
modifier|*
name|__cur
init|=
name|__first
init|;
name|__cur
condition|;
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
control|)
if|if
condition|(
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__cur
operator|->
name|_M_val
argument_list|)
argument_list|,
name|_M_get_key
argument_list|(
name|__obj
argument_list|)
argument_list|)
condition|)
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|iterator
argument_list|(
name|__cur
argument_list|,
name|this
argument_list|)
operator|,
name|false
operator|)
return|;
name|_Node
operator|*
name|__tmp
operator|=
name|_M_new_node
argument_list|(
name|__obj
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__tmp
operator|->
name|_M_next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_M_buckets
index|[
name|__n
index|]
operator|=
name|__tmp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|_M_num_elements
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|iterator
argument_list|(
name|__tmp
argument_list|,
name|this
argument_list|)
operator|,
name|true
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|iterator
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|insert_equal_noresize
argument_list|(
argument|const value_type& __obj
argument_list|)
block|{
specifier|const
name|size_type
name|__n
operator|=
name|_M_bkt_num
argument_list|(
name|__obj
argument_list|)
block|;
name|_Node
operator|*
name|__first
operator|=
name|_M_buckets
index|[
name|__n
index|]
block|;
for|for
control|(
name|_Node
modifier|*
name|__cur
init|=
name|__first
init|;
name|__cur
condition|;
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
control|)
if|if
condition|(
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__cur
operator|->
name|_M_val
argument_list|)
argument_list|,
name|_M_get_key
argument_list|(
name|__obj
argument_list|)
argument_list|)
condition|)
block|{
name|_Node
modifier|*
name|__tmp
init|=
name|_M_new_node
argument_list|(
name|__obj
argument_list|)
decl_stmt|;
name|__tmp
operator|->
name|_M_next
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
name|__cur
operator|->
name|_M_next
operator|=
name|__tmp
expr_stmt|;
operator|++
name|_M_num_elements
expr_stmt|;
return|return
name|iterator
argument_list|(
name|__tmp
argument_list|,
name|this
argument_list|)
return|;
block|}
name|_Node
operator|*
name|__tmp
operator|=
name|_M_new_node
argument_list|(
name|__obj
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__tmp
operator|->
name|_M_next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_M_buckets
index|[
name|__n
index|]
operator|=
name|__tmp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|_M_num_elements
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|iterator
argument_list|(
name|__tmp
argument_list|,
name|this
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|reference
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|find_or_insert
argument_list|(
argument|const value_type& __obj
argument_list|)
block|{
name|resize
argument_list|(
name|_M_num_elements
operator|+
literal|1
argument_list|)
block|;
name|size_type
name|__n
operator|=
name|_M_bkt_num
argument_list|(
name|__obj
argument_list|)
block|;
name|_Node
operator|*
name|__first
operator|=
name|_M_buckets
index|[
name|__n
index|]
block|;
for|for
control|(
name|_Node
modifier|*
name|__cur
init|=
name|__first
init|;
name|__cur
condition|;
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
control|)
if|if
condition|(
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__cur
operator|->
name|_M_val
argument_list|)
argument_list|,
name|_M_get_key
argument_list|(
name|__obj
argument_list|)
argument_list|)
condition|)
return|return
name|__cur
operator|->
name|_M_val
return|;
name|_Node
operator|*
name|__tmp
operator|=
name|_M_new_node
argument_list|(
name|__obj
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__tmp
operator|->
name|_M_next
operator|=
name|__first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|_M_buckets
index|[
name|__n
index|]
operator|=
name|__tmp
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|++
name|_M_num_elements
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__tmp
operator|->
name|_M_val
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|pair
operator|<
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|iterator
operator|,
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|iterator
operator|>
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|equal_range
argument_list|(
argument|const key_type& __key
argument_list|)
block|{
typedef|typedef
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|_Pii
expr_stmt|;
specifier|const
name|size_type
name|__n
operator|=
name|_M_bkt_num_key
argument_list|(
name|__key
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
name|_Node
modifier|*
name|__first
init|=
name|_M_buckets
index|[
name|__n
index|]
init|;
name|__first
condition|;
name|__first
operator|=
name|__first
operator|->
name|_M_next
control|)
if|if
condition|(
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__first
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
condition|)
block|{
for|for
control|(
name|_Node
modifier|*
name|__cur
init|=
name|__first
operator|->
name|_M_next
init|;
name|__cur
condition|;
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
control|)
if|if
condition|(
operator|!
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__cur
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
condition|)
return|return
name|_Pii
argument_list|(
name|iterator
argument_list|(
name|__first
argument_list|,
name|this
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|__cur
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
for|for
control|(
name|size_type
name|__m
init|=
name|__n
operator|+
literal|1
init|;
name|__m
operator|<
name|_M_buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|__m
control|)
if|if
condition|(
name|_M_buckets
index|[
name|__m
index|]
condition|)
return|return
name|_Pii
argument_list|(
name|iterator
argument_list|(
name|__first
argument_list|,
name|this
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|_M_buckets
index|[
name|__m
index|]
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
return|return
name|_Pii
argument_list|(
name|iterator
argument_list|(
name|__first
argument_list|,
name|this
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
block|}
end_for

begin_return
return|return
name|_Pii
argument_list|(
name|end
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|pair
operator|<
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|const_iterator
operator|,
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|const_iterator
operator|>
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|equal_range
argument_list|(
argument|const key_type& __key
argument_list|)
specifier|const
block|{
typedef|typedef
name|pair
operator|<
name|const_iterator
operator|,
name|const_iterator
operator|>
name|_Pii
expr_stmt|;
specifier|const
name|size_type
name|__n
operator|=
name|_M_bkt_num_key
argument_list|(
name|__key
argument_list|)
expr_stmt|;
end_expr_stmt

begin_for
for|for
control|(
specifier|const
name|_Node
modifier|*
name|__first
init|=
name|_M_buckets
index|[
name|__n
index|]
init|;
name|__first
condition|;
name|__first
operator|=
name|__first
operator|->
name|_M_next
control|)
block|{
if|if
condition|(
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__first
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
condition|)
block|{
for|for
control|(
specifier|const
name|_Node
modifier|*
name|__cur
init|=
name|__first
operator|->
name|_M_next
init|;
name|__cur
condition|;
name|__cur
operator|=
name|__cur
operator|->
name|_M_next
control|)
if|if
condition|(
operator|!
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__cur
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
condition|)
return|return
name|_Pii
argument_list|(
name|const_iterator
argument_list|(
name|__first
argument_list|,
name|this
argument_list|)
argument_list|,
name|const_iterator
argument_list|(
name|__cur
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
for|for
control|(
name|size_type
name|__m
init|=
name|__n
operator|+
literal|1
init|;
name|__m
operator|<
name|_M_buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|__m
control|)
if|if
condition|(
name|_M_buckets
index|[
name|__m
index|]
condition|)
return|return
name|_Pii
argument_list|(
name|const_iterator
argument_list|(
name|__first
argument_list|,
name|this
argument_list|)
argument_list|,
name|const_iterator
argument_list|(
name|_M_buckets
index|[
name|__m
index|]
argument_list|,
name|this
argument_list|)
argument_list|)
return|;
return|return
name|_Pii
argument_list|(
name|const_iterator
argument_list|(
name|__first
argument_list|,
name|this
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
block|}
block|}
end_for

begin_return
return|return
name|_Pii
argument_list|(
name|end
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|typename
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|size_type
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|erase
argument_list|(
argument|const key_type& __key
argument_list|)
block|{
specifier|const
name|size_type
name|__n
operator|=
name|_M_bkt_num_key
argument_list|(
name|__key
argument_list|)
block|;
name|_Node
operator|*
name|__first
operator|=
name|_M_buckets
index|[
name|__n
index|]
block|;
name|size_type
name|__erased
operator|=
literal|0
block|;
if|if
condition|(
name|__first
condition|)
block|{
name|_Node
modifier|*
name|__cur
init|=
name|__first
decl_stmt|;
name|_Node
modifier|*
name|__next
init|=
name|__cur
operator|->
name|_M_next
decl_stmt|;
while|while
condition|(
name|__next
condition|)
block|{
if|if
condition|(
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__next
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
condition|)
block|{
name|__cur
operator|->
name|_M_next
operator|=
name|__next
operator|->
name|_M_next
expr_stmt|;
name|_M_delete_node
argument_list|(
name|__next
argument_list|)
expr_stmt|;
name|__next
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
operator|++
name|__erased
expr_stmt|;
operator|--
name|_M_num_elements
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|__cur
operator|=
name|__next
expr_stmt|;
name|__next
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
block|}
end_else

begin_expr_stmt
unit|}     if
operator|(
name|_M_equals
argument_list|(
name|_M_get_key
argument_list|(
name|__first
operator|->
name|_M_val
argument_list|)
argument_list|,
name|__key
argument_list|)
operator|)
block|{
name|_M_buckets
index|[
name|__n
index|]
operator|=
name|__first
operator|->
name|_M_next
block|;
name|_M_delete_node
argument_list|(
name|__first
argument_list|)
block|;
operator|++
name|__erased
block|;
operator|--
name|_M_num_elements
block|;     }
end_expr_stmt

begin_expr_stmt
unit|}   return
name|__erased
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|erase
argument_list|(
argument|const iterator& __it
argument_list|)
block|{
name|_Node
operator|*
name|__p
operator|=
name|__it
operator|.
name|_M_cur
block|;
if|if
condition|(
name|__p
condition|)
block|{
specifier|const
name|size_type
name|__n
init|=
name|_M_bkt_num
argument_list|(
name|__p
operator|->
name|_M_val
argument_list|)
decl_stmt|;
name|_Node
modifier|*
name|__cur
init|=
name|_M_buckets
index|[
name|__n
index|]
decl_stmt|;
if|if
condition|(
name|__cur
operator|==
name|__p
condition|)
block|{
name|_M_buckets
index|[
name|__n
index|]
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
name|_M_delete_node
argument_list|(
name|__cur
argument_list|)
expr_stmt|;
operator|--
name|_M_num_elements
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|_Node
modifier|*
name|__next
init|=
name|__cur
operator|->
name|_M_next
decl_stmt|;
while|while
condition|(
name|__next
condition|)
block|{
if|if
condition|(
name|__next
operator|==
name|__p
condition|)
block|{
name|__cur
operator|->
name|_M_next
operator|=
name|__next
operator|->
name|_M_next
expr_stmt|;
name|_M_delete_node
argument_list|(
name|__next
argument_list|)
expr_stmt|;
operator|--
name|_M_num_elements
expr_stmt|;
break|break;
block|}
else|else
block|{
name|__cur
operator|=
name|__next
expr_stmt|;
name|__next
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
block|}
block|}
block|}
end_else

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|erase
argument_list|(
argument|iterator __first
argument_list|,
argument|iterator __last
argument_list|)
block|{
name|size_type
name|__f_bucket
operator|=
name|__first
operator|.
name|_M_cur
operator|?
name|_M_bkt_num
argument_list|(
name|__first
operator|.
name|_M_cur
operator|->
name|_M_val
argument_list|)
operator|:
name|_M_buckets
operator|.
name|size
argument_list|()
block|;
name|size_type
name|__l_bucket
operator|=
name|__last
operator|.
name|_M_cur
condition|?
name|_M_bkt_num
argument_list|(
name|__last
operator|.
name|_M_cur
operator|->
name|_M_val
argument_list|)
else|:
name|_M_buckets
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|__first
operator|.
name|_M_cur
operator|==
name|__last
operator|.
name|_M_cur
condition|)
return|return;
elseif|else
if|if
condition|(
name|__f_bucket
operator|==
name|__l_bucket
condition|)
name|_M_erase_bucket
argument_list|(
name|__f_bucket
argument_list|,
name|__first
operator|.
name|_M_cur
argument_list|,
name|__last
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
else|else
block|{
name|_M_erase_bucket
argument_list|(
name|__f_bucket
argument_list|,
name|__first
operator|.
name|_M_cur
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|size_type
name|__n
init|=
name|__f_bucket
operator|+
literal|1
init|;
name|__n
operator|<
name|__l_bucket
condition|;
operator|++
name|__n
control|)
name|_M_erase_bucket
argument_list|(
name|__n
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|__l_bucket
operator|!=
name|_M_buckets
operator|.
name|size
argument_list|()
condition|)
name|_M_erase_bucket
argument_list|(
name|__l_bucket
argument_list|,
name|__last
operator|.
name|_M_cur
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
specifier|inline
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|erase
argument_list|(
argument|const_iterator __first
argument_list|,
argument|const_iterator __last
argument_list|)
block|{
name|erase
argument_list|(
name|iterator
argument_list|(
name|const_cast
operator|<
name|_Node
operator|*
operator|>
operator|(
name|__first
operator|.
name|_M_cur
operator|)
argument_list|,
name|const_cast
operator|<
name|hashtable
operator|*
operator|>
operator|(
name|__first
operator|.
name|_M_ht
operator|)
argument_list|)
argument_list|,
name|iterator
argument_list|(
name|const_cast
operator|<
name|_Node
operator|*
operator|>
operator|(
name|__last
operator|.
name|_M_cur
operator|)
argument_list|,
name|const_cast
operator|<
name|hashtable
operator|*
operator|>
operator|(
name|__last
operator|.
name|_M_ht
operator|)
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
specifier|inline
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|erase
argument_list|(
argument|const const_iterator& __it
argument_list|)
block|{
name|erase
argument_list|(
name|iterator
argument_list|(
name|const_cast
operator|<
name|_Node
operator|*
operator|>
operator|(
name|__it
operator|.
name|_M_cur
operator|)
argument_list|,
name|const_cast
operator|<
name|hashtable
operator|*
operator|>
operator|(
name|__it
operator|.
name|_M_ht
operator|)
argument_list|)
argument_list|)
block|; }
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|resize
argument_list|(
argument|size_type __num_elements_hint
argument_list|)
block|{
specifier|const
name|size_type
name|__old_n
operator|=
name|_M_buckets
operator|.
name|size
argument_list|()
block|;
if|if
condition|(
name|__num_elements_hint
operator|>
name|__old_n
condition|)
block|{
specifier|const
name|size_type
name|__n
init|=
name|_M_next_size
argument_list|(
name|__num_elements_hint
argument_list|)
decl_stmt|;
if|if
condition|(
name|__n
operator|>
name|__old_n
condition|)
block|{
name|vector
operator|<
name|_Node
operator|*
operator|,
name|_All
operator|>
name|__tmp
argument_list|(
name|__n
argument_list|,
operator|(
name|_Node
operator|*
operator|)
operator|(
literal|0
operator|)
argument_list|,
name|_M_buckets
operator|.
name|get_allocator
argument_list|()
argument_list|)
expr_stmt|;
name|try
block|{
for|for
control|(
name|size_type
name|__bucket
init|=
literal|0
init|;
name|__bucket
operator|<
name|__old_n
condition|;
operator|++
name|__bucket
control|)
block|{
name|_Node
modifier|*
name|__first
init|=
name|_M_buckets
index|[
name|__bucket
index|]
decl_stmt|;
while|while
condition|(
name|__first
condition|)
block|{
name|size_type
name|__new_bucket
init|=
name|_M_bkt_num
argument_list|(
name|__first
operator|->
name|_M_val
argument_list|,
name|__n
argument_list|)
decl_stmt|;
name|_M_buckets
index|[
name|__bucket
index|]
operator|=
name|__first
operator|->
name|_M_next
expr_stmt|;
name|__first
operator|->
name|_M_next
operator|=
name|__tmp
index|[
name|__new_bucket
index|]
expr_stmt|;
name|__tmp
index|[
name|__new_bucket
index|]
operator|=
name|__first
expr_stmt|;
name|__first
operator|=
name|_M_buckets
index|[
name|__bucket
index|]
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}         _M_buckets
operator|.
name|swap
argument_list|(
name|__tmp
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}       catch
operator|(
operator|...
operator|)
block|{
for|for
control|(
name|size_type
name|__bucket
init|=
literal|0
init|;
name|__bucket
operator|<
name|__tmp
operator|.
name|size
argument_list|()
condition|;
operator|++
name|__bucket
control|)
block|{
while|while
condition|(
name|__tmp
index|[
name|__bucket
index|]
condition|)
block|{
name|_Node
modifier|*
name|__next
init|=
name|__tmp
index|[
name|__bucket
index|]
operator|->
name|_M_next
decl_stmt|;
name|_M_delete_node
argument_list|(
name|__tmp
index|[
name|__bucket
index|]
argument_list|)
expr_stmt|;
name|__tmp
index|[
name|__bucket
index|]
operator|=
name|__next
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
unit|}         __throw_exception_again
empty_stmt|;
end_empty_stmt

begin_expr_stmt
unit|}     }   } }
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|_M_erase_bucket
argument_list|(
argument|const size_type __n
argument_list|,
argument|_Node* __first
argument_list|,
argument|_Node* __last
argument_list|)
block|{
name|_Node
operator|*
name|__cur
operator|=
name|_M_buckets
index|[
name|__n
index|]
block|;
if|if
condition|(
name|__cur
operator|==
name|__first
condition|)
name|_M_erase_bucket
argument_list|(
name|__n
argument_list|,
name|__last
argument_list|)
expr_stmt|;
else|else
block|{
name|_Node
modifier|*
name|__next
decl_stmt|;
for|for
control|(
name|__next
operator|=
name|__cur
operator|->
name|_M_next
init|;
name|__next
operator|!=
name|__first
condition|;
name|__cur
operator|=
name|__next
operator|,
name|__next
operator|=
name|__cur
operator|->
name|_M_next
control|)
empty_stmt|;
while|while
condition|(
name|__next
operator|!=
name|__last
condition|)
block|{
name|__cur
operator|->
name|_M_next
operator|=
name|__next
operator|->
name|_M_next
expr_stmt|;
name|_M_delete_node
argument_list|(
name|__next
argument_list|)
expr_stmt|;
name|__next
operator|=
name|__cur
operator|->
name|_M_next
expr_stmt|;
operator|--
name|_M_num_elements
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|} }
name|template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|_M_erase_bucket
argument_list|(
argument|const size_type __n
argument_list|,
argument|_Node* __last
argument_list|)
block|{
name|_Node
operator|*
name|__cur
operator|=
name|_M_buckets
index|[
name|__n
index|]
block|;
while|while
condition|(
name|__cur
operator|!=
name|__last
condition|)
block|{
name|_Node
modifier|*
name|__next
init|=
name|__cur
operator|->
name|_M_next
decl_stmt|;
name|_M_delete_node
argument_list|(
name|__cur
argument_list|)
expr_stmt|;
name|__cur
operator|=
name|__next
expr_stmt|;
name|_M_buckets
index|[
name|__n
index|]
operator|=
name|__cur
expr_stmt|;
operator|--
name|_M_num_elements
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|clear
argument_list|()
block|{
for|for
control|(
name|size_type
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|_M_buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|__i
control|)
block|{
name|_Node
modifier|*
name|__cur
init|=
name|_M_buckets
index|[
name|__i
index|]
decl_stmt|;
while|while
condition|(
name|__cur
operator|!=
literal|0
condition|)
block|{
name|_Node
modifier|*
name|__next
init|=
name|__cur
operator|->
name|_M_next
decl_stmt|;
name|_M_delete_node
argument_list|(
name|__cur
argument_list|)
expr_stmt|;
name|__cur
operator|=
name|__next
expr_stmt|;
block|}
name|_M_buckets
index|[
name|__i
index|]
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   _M_num_elements
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}       template
operator|<
name|class
name|_Val
operator|,
name|class
name|_Key
operator|,
name|class
name|_HF
operator|,
name|class
name|_Ex
operator|,
name|class
name|_Eq
operator|,
name|class
name|_All
operator|>
name|void
name|hashtable
operator|<
name|_Val
operator|,
name|_Key
operator|,
name|_HF
operator|,
name|_Ex
operator|,
name|_Eq
operator|,
name|_All
operator|>
operator|::
name|_M_copy_from
argument_list|(
argument|const hashtable& __ht
argument_list|)
block|{
name|_M_buckets
operator|.
name|clear
argument_list|()
block|;
name|_M_buckets
operator|.
name|reserve
argument_list|(
name|__ht
operator|.
name|_M_buckets
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|_M_buckets
operator|.
name|insert
argument_list|(
name|_M_buckets
operator|.
name|end
argument_list|()
argument_list|,
name|__ht
operator|.
name|_M_buckets
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|_Node
operator|*
operator|)
literal|0
argument_list|)
block|;
name|try
block|{
for|for
control|(
name|size_type
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__ht
operator|.
name|_M_buckets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|__i
control|)
block|{
specifier|const
name|_Node
modifier|*
name|__cur
init|=
name|__ht
operator|.
name|_M_buckets
index|[
name|__i
index|]
decl_stmt|;
if|if
condition|(
name|__cur
condition|)
block|{
name|_Node
modifier|*
name|__local_copy
init|=
name|_M_new_node
argument_list|(
name|__cur
operator|->
name|_M_val
argument_list|)
decl_stmt|;
name|_M_buckets
index|[
name|__i
index|]
operator|=
name|__local_copy
expr_stmt|;
for|for
control|(
name|_Node
modifier|*
name|__next
init|=
name|__cur
operator|->
name|_M_next
init|;
name|__next
condition|;
name|__cur
operator|=
name|__next
operator|,
name|__next
operator|=
name|__cur
operator|->
name|_M_next
control|)
block|{
name|__local_copy
operator|->
name|_M_next
operator|=
name|_M_new_node
argument_list|(
name|__next
operator|->
name|_M_val
argument_list|)
expr_stmt|;
name|__local_copy
operator|=
name|__local_copy
operator|->
name|_M_next
expr_stmt|;
block|}
block|}
end_expr_stmt

begin_expr_stmt
unit|}     _M_num_elements
operator|=
name|__ht
operator|.
name|_M_num_elements
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}   catch
operator|(
operator|...
operator|)
block|{
name|clear
argument_list|()
block|;
name|__throw_exception_again
block|;     }
end_expr_stmt

begin_comment
unit|}  }
comment|// namespace __gnu_cxx
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __SGI_STL_INTERNAL_HASHTABLE_H */
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:C++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

