begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2005, 2006 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|// Copyright (C) 2004 Ami Tavory and Vladimir Dreizin, IBM-HRL.
end_comment

begin_comment
comment|// Permission to use, copy, modify, sell, and distribute this software
end_comment

begin_comment
comment|// is hereby granted without fee, provided that the above copyright
end_comment

begin_comment
comment|// notice appears in all copies, and that both that copyright notice and
end_comment

begin_comment
comment|// this permission notice appear in supporting documentation. None of
end_comment

begin_comment
comment|// the above authors, nor IBM Haifa Research Laboratories, make any
end_comment

begin_comment
comment|// representation about the suitability of this software for any
end_comment

begin_comment
comment|// purpose. It is provided "as is" without express or implied warranty.
end_comment

begin_comment
comment|/**  * @file typelist.h  * Contains typelist_chain definitions.  * Typelists are an idea by Andrei Alexandrescu.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_TYPELIST_H
end_ifndef

begin_define
define|#
directive|define
name|_TYPELIST_H
value|1
end_define

begin_include
include|#
directive|include
file|<ext/type_traits.h>
end_include

begin_macro
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
argument|__gnu_cxx
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|typelist
block|{
struct|struct
name|null_type
block|{ }
struct|;
name|template
operator|<
name|typename
name|Root
operator|>
expr|struct
name|node
block|{
typedef|typedef
name|Root
name|root
typedef|;
block|}
empty_stmt|;
comment|// Forward declarations of functors.
name|template
operator|<
name|typename
name|Hd
operator|,
name|typename
name|Typelist
operator|>
expr|struct
name|chain
block|{
typedef|typedef
name|Hd
name|head
typedef|;
typedef|typedef
name|Typelist
name|tail
typedef|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Fn
operator|,
name|class
name|Typelist
operator|>
name|void
name|apply
argument_list|(
name|Fn
operator|&
argument_list|,
name|Typelist
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist0
operator|,
name|typename
name|Typelist1
operator|>
expr|struct
name|append
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist_Typelist
operator|>
expr|struct
name|append_typelist
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist
operator|,
name|typename
name|T
operator|>
expr|struct
name|contains
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist
operator|,
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Pred
operator|>
expr|struct
name|filter
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist
operator|,
name|int
name|i
operator|>
expr|struct
name|at_index
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist
operator|,
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Transform
operator|>
expr|struct
name|transform
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist_Typelist
operator|>
expr|struct
name|flatten
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist
operator|>
expr|struct
name|from_first
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|>
expr|struct
name|create1
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
expr|struct
name|create2
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
expr|struct
name|create3
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|>
expr|struct
name|create4
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|>
expr|struct
name|create5
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|>
expr|struct
name|create6
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace typelist
end_comment

begin_macro
unit|_GLIBCXX_END_NAMESPACE
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
argument|__gnu_cxx
argument_list|)
end_macro

begin_decl_stmt
name|namespace
name|typelist
block|{
name|namespace
name|detail
block|{
name|template
operator|<
name|typename
name|Fn
operator|,
name|typename
name|Typelist_Chain
operator|>
expr|struct
name|apply_
expr_stmt|;
name|template
operator|<
name|typename
name|Fn
operator|,
name|typename
name|Hd
operator|,
name|typename
name|Tl
operator|>
expr|struct
name|apply_
operator|<
name|Fn
operator|,
name|chain
operator|<
name|Hd
operator|,
name|Tl
operator|>
expr|>
block|{
name|void
name|operator
argument_list|()
operator|(
name|Fn
operator|&
name|f
operator|)
block|{
name|f
operator|.
name|operator
argument_list|()
argument_list|(
name|Hd
argument_list|()
argument_list|)
block|;
name|apply_
operator|<
name|Fn
block|,
name|Tl
operator|>
name|next
block|;
name|next
argument_list|(
name|f
argument_list|)
block|;       }
block|}
expr_stmt|;
name|template
operator|<
name|typename
name|Fn
operator|>
expr|struct
name|apply_
operator|<
name|Fn
operator|,
name|null_type
operator|>
block|{
name|void
name|operator
argument_list|()
operator|(
name|Fn
operator|&
operator|)
block|{ }
block|}
expr_stmt|;
name|template
operator|<
name|typename
name|Typelist_Chain0
operator|,
name|typename
name|Typelist_Chain1
operator|>
expr|struct
name|append_
expr_stmt|;
name|template
operator|<
name|typename
name|Hd
operator|,
name|typename
name|Tl
operator|,
name|typename
name|Typelist_Chain
operator|>
expr|struct
name|append_
operator|<
name|chain
operator|<
name|Hd
operator|,
name|Tl
operator|>
operator|,
name|Typelist_Chain
operator|>
block|{
name|private
operator|:
typedef|typedef
name|append_
operator|<
name|Tl
operator|,
name|Typelist_Chain
operator|>
name|append_type
expr_stmt|;
name|public
operator|:
typedef|typedef
name|chain
operator|<
name|Hd
operator|,
name|typename
name|append_type
operator|::
name|type
operator|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|Typelist_Chain
operator|>
expr|struct
name|append_
operator|<
name|null_type
operator|,
name|Typelist_Chain
operator|>
block|{
typedef|typedef
name|Typelist_Chain
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|Typelist_Chain
operator|>
expr|struct
name|append_
operator|<
name|Typelist_Chain
operator|,
name|null_type
operator|>
block|{
typedef|typedef
name|Typelist_Chain
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
operator|>
expr|struct
name|append_
operator|<
name|null_type
operator|,
name|null_type
operator|>
block|{
typedef|typedef
name|null_type
name|type
typedef|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|Typelist_Typelist_Chain
operator|>
expr|struct
name|append_typelist_
expr_stmt|;
name|template
operator|<
name|typename
name|Hd
operator|>
expr|struct
name|append_typelist_
operator|<
name|chain
operator|<
name|Hd
operator|,
name|null_type
operator|>
expr|>
block|{
typedef|typedef
name|chain
operator|<
name|Hd
operator|,
name|null_type
operator|>
name|type
expr_stmt|;
block|}
empty_stmt|;
name|template
operator|<
name|typename
name|Hd
operator|,
name|typename
name|Tl
operator|>
expr|struct
name|append_typelist_
operator|<
name|chain
operator|<
name|Hd
operator|,
name|Tl
operator|>
expr|>
block|{
name|private
operator|:
typedef|typedef
name|typename
name|append_typelist_
operator|<
name|Tl
operator|>
operator|::
name|type
name|rest_type
expr_stmt|;
name|public
operator|:
typedef|typedef
name|typename
name|append
operator|<
name|Hd
operator|,
name|node
operator|<
name|rest_type
operator|>
expr|>
operator|::
name|type
operator|::
name|root
name|type
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist_Chain
operator|,
name|typename
name|T
operator|>
expr|struct
name|contains_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T
operator|>
expr|struct
name|contains_
operator|<
name|null_type
operator|,
name|T
operator|>
block|{       enum
block|{
name|value
operator|=
name|false
block|}
block|;     }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Hd
operator|,
name|typename
name|Tl
operator|,
name|typename
name|T
operator|>
expr|struct
name|contains_
operator|<
name|chain
operator|<
name|Hd
operator|,
name|Tl
operator|>
operator|,
name|T
operator|>
block|{       enum
block|{
name|value
operator|=
name|contains_
operator|<
name|Tl
block|,
name|T
operator|>
operator|::
name|value
block|}
block|;     }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Tl
operator|,
name|typename
name|T
operator|>
expr|struct
name|contains_
operator|<
name|chain
operator|<
name|T
operator|,
name|Tl
operator|>
operator|,
name|T
operator|>
block|{       enum
block|{
name|value
operator|=
name|true
block|}
block|;     }
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist_Chain
operator|,
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Pred
operator|>
expr|struct
name|chain_filter_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Pred
operator|>
expr|struct
name|chain_filter_
operator|<
name|null_type
operator|,
name|Pred
operator|>
block|{
typedef|typedef
name|null_type
name|type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Hd
operator|,
name|typename
name|Tl
operator|,
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Pred
operator|>
expr|struct
name|chain_filter_
operator|<
name|chain
operator|<
name|Hd
operator|,
name|Tl
operator|>
operator|,
name|Pred
operator|>
block|{
name|private
operator|:
expr|enum
block|{
name|include_hd
operator|=
name|Pred
operator|<
name|Hd
operator|>
operator|::
name|value
block|}
block|;
typedef|typedef
name|typename
name|chain_filter_
operator|<
name|Tl
operator|,
name|Pred
operator|>
operator|::
name|type
name|rest_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|chain
operator|<
name|Hd
operator|,
name|rest_type
operator|>
name|chain_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|typename
name|__conditional_type
operator|<
name|include_hd
operator|,
name|chain_type
operator|,
name|rest_type
operator|>
operator|::
name|__type
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist_Chain
operator|,
name|int
name|i
operator|>
expr|struct
name|chain_at_index_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Hd
operator|,
name|typename
name|Tl
operator|>
expr|struct
name|chain_at_index_
operator|<
name|chain
operator|<
name|Hd
operator|,
name|Tl
operator|>
operator|,
literal|0
operator|>
block|{
typedef|typedef
name|Hd
name|type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Hd
operator|,
name|typename
name|Tl
operator|,
name|int
name|i
operator|>
expr|struct
name|chain_at_index_
operator|<
name|chain
operator|<
name|Hd
operator|,
name|Tl
operator|>
operator|,
name|i
operator|>
block|{
typedef|typedef
name|typename
name|chain_at_index_
operator|<
name|Tl
operator|,
name|i
operator|-
literal|1
operator|>
operator|::
name|type
name|type
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Typelist_Chain
operator|,
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Transform
operator|>
expr|struct
name|chain_transform_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Transform
operator|>
expr|struct
name|chain_transform_
operator|<
name|null_type
operator|,
name|Transform
operator|>
block|{
typedef|typedef
name|null_type
name|type
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Hd
operator|,
name|class
name|Tl
operator|,
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Transform
operator|>
expr|struct
name|chain_transform_
operator|<
name|chain
operator|<
name|Hd
operator|,
name|Tl
operator|>
operator|,
name|Transform
operator|>
block|{
name|private
operator|:
typedef|typedef
name|typename
name|chain_transform_
operator|<
name|Tl
operator|,
name|Transform
operator|>
operator|::
name|type
name|rest_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Transform
operator|<
name|Hd
operator|>
operator|::
name|type
name|transform_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|chain
operator|<
name|transform_type
operator|,
name|rest_type
operator|>
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist_Typelist_Chain
operator|>
expr|struct
name|chain_flatten_
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Hd_Tl
operator|>
expr|struct
name|chain_flatten_
operator|<
name|chain
operator|<
name|Hd_Tl
operator|,
name|null_type
operator|>
expr|>
block|{
typedef|typedef
name|typename
name|Hd_Tl
operator|::
name|root
name|type
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|Hd_Typelist
operator|,
name|class
name|Tl_Typelist
operator|>
expr|struct
name|chain_flatten_
operator|<
name|chain
operator|<
name|Hd_Typelist
operator|,
name|Tl_Typelist
operator|>
expr|>
block|{
name|private
operator|:
typedef|typedef
name|typename
name|chain_flatten_
operator|<
name|Tl_Typelist
operator|>
operator|::
name|type
name|rest_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|append
operator|<
name|Hd_Typelist
operator|,
name|node
operator|<
name|rest_type
operator|>
expr|>
name|append_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|typename
name|append_type
operator|::
name|type
operator|::
name|root
name|type
expr_stmt|;
end_typedef

begin_comment
unit|}; }
comment|// namespace detail
end_comment

begin_comment
unit|}
comment|// namespace typelist
end_comment

begin_function
name|_GLIBCXX_END_NAMESPACE
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN1
parameter_list|(
name|X0
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, __gnu_cxx::typelist::null_type>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN2
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN1(X1)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN3
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN2(X1, X2)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN4
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN3(X1, X2, X3)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN5
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN4(X1, X2, X3, X4)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN6
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN5(X1, X2, X3, X4, X5)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN7
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN6(X1, X2, X3, X4, X5, X6)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN8
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|,
name|X7
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN7(X1, X2, X3, X4, X5, X6, X7)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN9
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|,
name|X7
parameter_list|,
name|X8
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN8(X1, X2, X3, X4, X5, X6, X7, X8)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN10
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|,
name|X7
parameter_list|,
name|X8
parameter_list|,
name|X9
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN9(X1, X2, X3, X4, X5, X6, X7, X8, X9)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN11
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|,
name|X7
parameter_list|,
name|X8
parameter_list|,
name|X9
parameter_list|,
name|X10
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN10(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN12
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|,
name|X7
parameter_list|,
name|X8
parameter_list|,
name|X9
parameter_list|,
name|X10
parameter_list|,
name|X11
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN11(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN13
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|,
name|X7
parameter_list|,
name|X8
parameter_list|,
name|X9
parameter_list|,
name|X10
parameter_list|,
name|X11
parameter_list|,
name|X12
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN12(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN14
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|,
name|X7
parameter_list|,
name|X8
parameter_list|,
name|X9
parameter_list|,
name|X10
parameter_list|,
name|X11
parameter_list|,
name|X12
parameter_list|,
name|X13
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN13(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13)>
define|#
directive|define
name|_GLIBCXX_TYPELIST_CHAIN15
parameter_list|(
name|X0
parameter_list|,
name|X1
parameter_list|,
name|X2
parameter_list|,
name|X3
parameter_list|,
name|X4
parameter_list|,
name|X5
parameter_list|,
name|X6
parameter_list|,
name|X7
parameter_list|,
name|X8
parameter_list|,
name|X9
parameter_list|,
name|X10
parameter_list|,
name|X11
parameter_list|,
name|X12
parameter_list|,
name|X13
parameter_list|,
name|X14
parameter_list|)
value|__gnu_cxx::typelist::chain<X0, _GLIBCXX_TYPELIST_CHAIN14(X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12, X13, X14)>
name|_GLIBCXX_BEGIN_NAMESPACE
parameter_list|(
name|__gnu_cxx
parameter_list|)
name|namespace
name|typelist
decl_stmt|{   template<typename Fn
operator|,
decl_stmt|class Typelist>     void     apply(Fn& fn
operator|,
decl_stmt|Typelist
end_function

begin_block
unit|)
block|{
name|detail
operator|::
name|apply_
operator|<
name|Fn
operator|,
name|typename
name|Typelist
operator|::
name|root
operator|>
name|a
expr_stmt|;
name|a
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
end_block

begin_expr_stmt
name|template
operator|<
name|typename
name|Typelist0
operator|,
name|typename
name|Typelist1
operator|>
expr|struct
name|append
block|{
name|private
operator|:
typedef|typedef
name|typename
name|Typelist0
operator|::
name|root
name|root0_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|Typelist1
operator|::
name|root
name|root1_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|detail
operator|::
name|append_
operator|<
name|root0_type
operator|,
name|root1_type
operator|>
name|append_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|node
operator|<
name|typename
name|append_type
operator|::
name|type
operator|>
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist_Typelist
operator|>
expr|struct
name|append_typelist
block|{
name|private
operator|:
typedef|typedef
name|typename
name|Typelist_Typelist
operator|::
name|root
name|root_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|detail
operator|::
name|append_typelist_
operator|<
name|root_type
operator|>
name|append_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|node
operator|<
name|typename
name|append_type
operator|::
name|type
operator|>
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist
operator|,
name|typename
name|T
operator|>
expr|struct
name|contains
block|{
name|private
operator|:
typedef|typedef
name|typename
name|Typelist
operator|::
name|root
name|root_type
expr_stmt|;
name|public
operator|:
block|enum
block|{
name|value
operator|=
name|detail
operator|::
name|contains_
operator|<
name|root_type
block|,
name|T
operator|>
operator|::
name|value
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist
operator|,
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Pred
operator|>
expr|struct
name|filter
block|{
name|private
operator|:
typedef|typedef
name|typename
name|Typelist
operator|::
name|root
name|root_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|detail
operator|::
name|chain_filter_
operator|<
name|root_type
operator|,
name|Pred
operator|>
name|filter_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|node
operator|<
name|typename
name|filter_type
operator|::
name|type
operator|>
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist
operator|,
name|int
name|i
operator|>
expr|struct
name|at_index
block|{
name|private
operator|:
typedef|typedef
name|typename
name|Typelist
operator|::
name|root
name|root_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|detail
operator|::
name|chain_at_index_
operator|<
name|root_type
operator|,
name|i
operator|>
name|index_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|typename
name|index_type
operator|::
name|type
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist
operator|,
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|Transform
operator|>
expr|struct
name|transform
block|{
name|private
operator|:
typedef|typedef
name|typename
name|Typelist
operator|::
name|root
name|root_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|detail
operator|::
name|chain_transform_
operator|<
name|root_type
operator|,
name|Transform
operator|>
name|transform_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|node
operator|<
name|typename
name|transform_type
operator|::
name|type
operator|>
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist_Typelist
operator|>
expr|struct
name|flatten
block|{
name|private
operator|:
typedef|typedef
name|typename
name|Typelist_Typelist
operator|::
name|root
name|root_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|detail
operator|::
name|chain_flatten_
operator|<
name|root_type
operator|>
operator|::
name|type
name|flatten_type
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|node
operator|<
name|flatten_type
operator|>
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|Typelist
operator|>
expr|struct
name|from_first
block|{
name|private
operator|:
typedef|typedef
name|typename
name|at_index
operator|<
name|Typelist
operator|,
literal|0
operator|>
operator|::
name|type
name|first_type
expr_stmt|;
name|public
operator|:
end_expr_stmt

begin_typedef
typedef|typedef
name|node
operator|<
name|chain
operator|<
name|first_type
operator|,
name|null_type
operator|>
expr|>
name|type
expr_stmt|;
end_typedef

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|T1
operator|>
expr|struct
name|create1
block|{
typedef|typedef
name|node
operator|<
name|_GLIBCXX_TYPELIST_CHAIN1
argument_list|(
name|T1
argument_list|)
operator|>
name|type
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|>
expr|struct
name|create2
block|{
typedef|typedef
name|node
operator|<
name|_GLIBCXX_TYPELIST_CHAIN2
argument_list|(
name|T1
argument_list|,
name|T2
argument_list|)
operator|>
name|type
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|>
expr|struct
name|create3
block|{
typedef|typedef
name|node
operator|<
name|_GLIBCXX_TYPELIST_CHAIN3
argument_list|(
name|T1
argument_list|,
name|T2
argument_list|,
name|T3
argument_list|)
operator|>
name|type
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|>
expr|struct
name|create4
block|{
typedef|typedef
name|node
operator|<
name|_GLIBCXX_TYPELIST_CHAIN4
argument_list|(
name|T1
argument_list|,
name|T2
argument_list|,
name|T3
argument_list|,
name|T4
argument_list|)
operator|>
name|type
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|>
expr|struct
name|create5
block|{
typedef|typedef
name|node
operator|<
name|_GLIBCXX_TYPELIST_CHAIN5
argument_list|(
name|T1
argument_list|,
name|T2
argument_list|,
name|T3
argument_list|,
name|T4
argument_list|,
name|T5
argument_list|)
operator|>
name|type
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|T1
operator|,
name|typename
name|T2
operator|,
name|typename
name|T3
operator|,
name|typename
name|T4
operator|,
name|typename
name|T5
operator|,
name|typename
name|T6
operator|>
expr|struct
name|create6
block|{
typedef|typedef
name|node
operator|<
name|_GLIBCXX_TYPELIST_CHAIN6
argument_list|(
name|T1
argument_list|,
name|T2
argument_list|,
name|T3
argument_list|,
name|T4
argument_list|,
name|T5
argument_list|,
name|T6
argument_list|)
operator|>
name|type
expr_stmt|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace typelist
end_comment

begin_endif
unit|_GLIBCXX_END_NAMESPACE
endif|#
directive|endif
end_endif

end_unit

