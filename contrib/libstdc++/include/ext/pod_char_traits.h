begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// POD character, std::char_traits specialization -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 2002, 2003, 2004, 2005 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/** @file ext/pod_char_traits.h  *  This file is a GNU extension to the Standard C++ Library.  */
end_comment

begin_comment
comment|// Gabriel Dos Reis<gdr@integrable-solutions.net>
end_comment

begin_comment
comment|// Benjamin Kosnik<bkoz@redhat.com>
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_POD_CHAR_TRAITS_H
end_ifndef

begin_define
define|#
directive|define
name|_POD_CHAR_TRAITS_H
value|1
end_define

begin_include
include|#
directive|include
file|<string>
end_include

begin_macro
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
argument|__gnu_cxx
argument_list|)
end_macro

begin_comment
comment|// POD character abstraction.
end_comment

begin_comment
comment|// NB: The char_type parameter is a subset of int_type, as to allow
end_comment

begin_comment
comment|// int_type to properly hold the full range of char_type values as
end_comment

begin_comment
comment|// well as EOF.
end_comment

begin_comment
comment|/// @brief A POD class that serves as a character abstraction class.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|V
operator|,
name|typename
name|I
operator|,
name|typename
name|S
operator|=
name|mbstate_t
operator|>
expr|struct
name|character
block|{
typedef|typedef
name|V
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|I
name|int_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|S
name|state_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|character
operator|<
name|V
operator|,
name|I
operator|,
name|S
operator|>
name|char_type
expr_stmt|;
end_typedef

begin_decl_stmt
name|value_type
name|value
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|V2
operator|>
specifier|static
name|char_type
name|from
argument_list|(
argument|const V2& v
argument_list|)
block|{
name|char_type
name|ret
operator|=
block|{
name|static_cast
operator|<
name|value_type
operator|>
operator|(
name|v
operator|)
block|}
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|V2
operator|>
specifier|static
name|V2
name|to
argument_list|(
argument|const char_type& c
argument_list|)
block|{
name|V2
name|ret
operator|=
block|{
name|static_cast
operator|<
name|V2
operator|>
operator|(
name|c
operator|.
name|value
operator|)
block|}
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|V
operator|,
name|typename
name|I
operator|,
name|typename
name|S
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|character
operator|<
name|V
operator|,
name|I
operator|,
name|S
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|character
operator|<
name|V
operator|,
name|I
operator|,
name|S
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|value
operator|==
name|rhs
operator|.
name|value
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|V
operator|,
name|typename
name|I
operator|,
name|typename
name|S
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|character
operator|<
name|V
operator|,
name|I
operator|,
name|S
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|character
operator|<
name|V
operator|,
name|I
operator|,
name|S
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
name|lhs
operator|.
name|value
operator|<
name|rhs
operator|.
name|value
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|_GLIBCXX_END_NAMESPACE
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
name|std
argument_list|)
comment|/// char_traits<__gnu_cxx::character> specialization.
name|template
decl|<
name|typename
name|V
decl_stmt|,
name|typename
name|I
decl_stmt|,
name|typename
name|S
decl|>     struct
name|char_traits
decl|<
name|__gnu_cxx
decl|::
name|character
decl|<
name|V
decl_stmt|,
name|I
decl_stmt|,
name|S
decl|>>
block|{
typedef|typedef
name|__gnu_cxx
operator|::
name|character
operator|<
name|V
operator|,
name|I
operator|,
name|S
operator|>
name|char_type
expr_stmt|;
typedef|typedef
name|typename
name|char_type
operator|::
name|int_type
name|int_type
expr_stmt|;
typedef|typedef
name|typename
name|char_type
operator|::
name|state_type
name|state_type
expr_stmt|;
typedef|typedef
name|fpos
operator|<
name|state_type
operator|>
name|pos_type
expr_stmt|;
typedef|typedef
name|streamoff
name|off_type
typedef|;
specifier|static
name|void
name|assign
parameter_list|(
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
name|__c1
operator|=
name|__c2
expr_stmt|;
block|}
specifier|static
name|bool
name|eq
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|==
name|__c2
return|;
block|}
specifier|static
name|bool
name|lt
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|<
name|__c2
return|;
block|}
specifier|static
name|int
name|compare
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
for|for
control|(
name|size_t
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__n
condition|;
operator|++
name|__i
control|)
if|if
condition|(
operator|!
name|eq
argument_list|(
name|__s1
index|[
name|__i
index|]
argument_list|,
name|__s2
index|[
name|__i
index|]
argument_list|)
condition|)
return|return
name|lt
argument_list|(
name|__s1
index|[
name|__i
index|]
argument_list|,
name|__s2
index|[
name|__i
index|]
argument_list|)
condition|?
operator|-
literal|1
else|:
literal|1
return|;
return|return
literal|0
return|;
block|}
specifier|static
name|size_t
name|length
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|)
block|{
specifier|const
name|char_type
modifier|*
name|__p
init|=
name|__s
decl_stmt|;
while|while
condition|(
name|__p
operator|->
name|value
condition|)
operator|++
name|__p
expr_stmt|;
return|return
operator|(
name|__p
operator|-
name|__s
operator|)
return|;
block|}
specifier|static
specifier|const
name|char_type
modifier|*
name|find
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
specifier|const
name|char_type
modifier|&
name|__a
parameter_list|)
block|{
for|for
control|(
specifier|const
name|char_type
modifier|*
name|__p
init|=
name|__s
init|;
name|size_t
argument_list|(
name|__p
operator|-
name|__s
argument_list|)
operator|<
name|__n
condition|;
operator|++
name|__p
control|)
if|if
condition|(
operator|*
name|__p
operator|==
name|__a
condition|)
return|return
name|__p
return|;
return|return
literal|0
return|;
block|}
specifier|static
name|char_type
modifier|*
name|move
parameter_list|(
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
return|return
name|static_cast
operator|<
name|char_type
operator|*
operator|>
operator|(
name|std
operator|::
name|memmove
argument_list|(
name|__s1
argument_list|,
name|__s2
argument_list|,
name|__n
operator|*
sizeof|sizeof
argument_list|(
name|char_type
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|static
name|char_type
modifier|*
name|copy
parameter_list|(
name|char_type
modifier|*
name|__s1
parameter_list|,
specifier|const
name|char_type
modifier|*
name|__s2
parameter_list|,
name|size_t
name|__n
parameter_list|)
block|{
name|std
operator|::
name|copy
argument_list|(
name|__s2
argument_list|,
name|__s2
operator|+
name|__n
argument_list|,
name|__s1
argument_list|)
expr_stmt|;
return|return
name|__s1
return|;
block|}
specifier|static
name|char_type
modifier|*
name|assign
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|size_t
name|__n
parameter_list|,
name|char_type
name|__a
parameter_list|)
block|{
name|std
operator|::
name|fill_n
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|,
name|__a
argument_list|)
expr_stmt|;
return|return
name|__s
return|;
block|}
specifier|static
name|char_type
name|to_char_type
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__i
parameter_list|)
block|{
return|return
name|char_type
operator|::
name|template
name|from
argument_list|(
name|__i
argument_list|)
return|;
block|}
specifier|static
name|int_type
name|to_int_type
parameter_list|(
specifier|const
name|char_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|char_type
operator|::
name|template
name|to
operator|<
name|int_type
operator|>
operator|(
name|__c
operator|)
return|;
block|}
specifier|static
name|bool
name|eq_int_type
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c1
parameter_list|,
specifier|const
name|int_type
modifier|&
name|__c2
parameter_list|)
block|{
return|return
name|__c1
operator|==
name|__c2
return|;
block|}
specifier|static
name|int_type
name|eof
parameter_list|()
block|{
name|int_type
name|__r
init|=
block|{
operator|-
literal|1
block|}
decl_stmt|;
return|return
name|__r
return|;
block|}
specifier|static
name|int_type
name|not_eof
parameter_list|(
specifier|const
name|int_type
modifier|&
name|__c
parameter_list|)
block|{
return|return
name|eq_int_type
argument_list|(
name|__c
argument_list|,
name|eof
argument_list|()
argument_list|)
condition|?
name|int_type
argument_list|()
else|:
name|__c
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_macro
name|_GLIBCXX_END_NAMESPACE
end_macro

begin_endif
endif|#
directive|endif
end_endif

end_unit

