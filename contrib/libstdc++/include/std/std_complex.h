begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- complex number classes.
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO C++ 14882: 26.2  Complex Numbers
end_comment

begin_comment
comment|// Note: this is not a conforming implementation.
end_comment

begin_comment
comment|// Initially implemented by Ulrich Drepper<drepper@cygnus.com>
end_comment

begin_comment
comment|// Improved by Gabriel Dos Reis<dosreis@cmla.ens-cachan.fr>
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file complex  *  This is a Standard C++ Library header.  You should @c #include this header  *  in your programs, rather than any of the "st[dl]_*.h" implementation files.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GLIBCXX_COMPLEX
end_ifndef

begin_define
define|#
directive|define
name|_GLIBCXX_COMPLEX
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<bits/c++config.h>
end_include

begin_include
include|#
directive|include
file|<bits/cpp_type_traits.h>
end_include

begin_include
include|#
directive|include
file|<cmath>
end_include

begin_include
include|#
directive|include
file|<sstream>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
comment|// Forward declarations
name|template
operator|<
name|typename
name|_Tp
operator|>
name|class
name|complex
expr_stmt|;
name|template
operator|<
operator|>
name|class
name|complex
operator|<
name|float
operator|>
expr_stmt|;
name|template
operator|<
operator|>
name|class
name|complex
operator|<
name|double
operator|>
expr_stmt|;
name|template
operator|<
operator|>
name|class
name|complex
operator|<
name|long
name|double
operator|>
expr_stmt|;
comment|///  Return magnitude of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|abs
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|///  Return phase angle of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|arg
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|///  Return @a z magnitude squared.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|norm
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|///  Return complex conjugate of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|conj
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|///  Return complex with magnitude @a rho and angle @a theta.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|polar
argument_list|(
specifier|const
name|_Tp
operator|&
argument_list|,
specifier|const
name|_Tp
operator|&
operator|=
literal|0
argument_list|)
expr_stmt|;
comment|// Transcendentals:
comment|/// Return complex cosine of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|cos
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex hyperbolic cosine of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|cosh
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex base e exponential of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|exp
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex natural logarithm of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|log
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex base 10 logarithm of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|log10
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex cosine of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|pow
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|,
name|int
argument_list|)
expr_stmt|;
comment|/// Return @a x to the @a y'th power.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|pow
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|,
specifier|const
name|_Tp
operator|&
argument_list|)
expr_stmt|;
comment|/// Return @a x to the @a y'th power.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|pow
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return @a x to the @a y'th power.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|pow
argument_list|(
specifier|const
name|_Tp
operator|&
argument_list|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex sine of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|sin
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex hyperbolic sine of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|sinh
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex square root of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|sqrt
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex tangent of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|tan
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|/// Return complex hyperbolic tangent of @a z.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|tanh
argument_list|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|//@}
comment|// 26.2.2  Primary template class complex
comment|/**    *  Template to represent complex numbers.    *    *  Specializations for float, double, and long double are part of the    *  library.  Results with any other type are not guaranteed.    *    *  @param  Tp  Type of real and imaginary values.   */
name|template
operator|<
name|typename
name|_Tp
operator|>
name|class
name|complex
block|{
name|public
operator|:
comment|/// Value typedef.
typedef|typedef
name|_Tp
name|value_type
typedef|;
comment|///  Default constructor.  First parameter is x, second parameter is y.
comment|///  Unspecified parameters default to 0.
name|complex
argument_list|(
specifier|const
name|_Tp
operator|&
operator|=
name|_Tp
argument_list|()
argument_list|,
specifier|const
name|_Tp
operator|&
operator|=
name|_Tp
argument_list|()
argument_list|)
expr_stmt|;
comment|// Lets the compiler synthesize the copy constructor
comment|// complex (const complex<_Tp>&);
comment|///  Copy constructor.
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
argument_list|)
expr_stmt|;
comment|///  Return real part of complex number.
name|_Tp
modifier|&
name|real
parameter_list|()
function_decl|;
comment|///  Return real part of complex number.
specifier|const
name|_Tp
operator|&
name|real
argument_list|()
specifier|const
expr_stmt|;
comment|///  Return imaginary part of complex number.
name|_Tp
modifier|&
name|imag
parameter_list|()
function_decl|;
comment|///  Return imaginary part of complex number.
specifier|const
name|_Tp
operator|&
name|imag
argument_list|()
specifier|const
expr_stmt|;
comment|/// Assign this complex number to scalar @a t.
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
comment|/// Add @a t to this complex number.
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
comment|/// Subtract @a t from this complex number.
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
comment|/// Multiply this complex number by @a t.
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
comment|/// Divide this complex number by @a t.
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
comment|// Lets the compiler synthesize the
comment|// copy and assignment operator
comment|// complex<_Tp>& operator= (const complex<_Tp>&);
comment|/// Assign this complex number to complex @a z.
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
operator|)
expr_stmt|;
comment|/// Add @a z to this complex number.
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
operator|)
expr_stmt|;
comment|/// Subtract @a z from this complex number.
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
operator|)
expr_stmt|;
comment|/// Multiply this complex number by @a z.
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
operator|)
expr_stmt|;
comment|/// Divide this complex number by @a z.
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
operator|)
expr_stmt|;
name|private
label|:
name|_Tp
name|_M_real
decl_stmt|;
name|_Tp
name|_M_imag
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|real
argument_list|()
block|{
return|return
name|_M_real
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
specifier|const
name|_Tp
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|real
argument_list|()
specifier|const
block|{
return|return
name|_M_real
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|imag
argument_list|()
block|{
return|return
name|_M_imag
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
specifier|const
name|_Tp
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|imag
argument_list|()
specifier|const
block|{
return|return
name|_M_imag
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|complex
argument_list|(
specifier|const
name|_Tp
operator|&
name|__r
argument_list|,
specifier|const
name|_Tp
operator|&
name|__i
argument_list|)
operator|:
name|_M_real
argument_list|(
name|__r
argument_list|)
operator|,
name|_M_imag
argument_list|(
argument|__i
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|typename
name|_Up
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
name|__z
argument_list|)
operator|:
name|_M_real
argument_list|(
name|__z
operator|.
name|real
argument_list|()
argument_list|)
operator|,
name|_M_imag
argument_list|(
argument|__z.imag()
argument_list|)
block|{ }
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
block|{
name|_M_real
operator|=
name|__t
block|;
name|_M_imag
operator|=
name|_Tp
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.5/1
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
block|{
name|_M_real
operator|+=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.5/3
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
block|{
name|_M_real
operator|-=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.5/5
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
block|{
name|_M_real
operator|*=
name|__t
block|;
name|_M_imag
operator|*=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.5/7
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
block|{
name|_M_real
operator|/=
name|__t
block|;
name|_M_imag
operator|/=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
name|__z
operator|)
block|{
name|_M_real
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|_M_imag
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.5/9
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
name|__z
operator|)
block|{
name|_M_real
operator|+=
name|__z
operator|.
name|real
argument_list|()
block|;
name|_M_imag
operator|+=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.5/11
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
name|__z
operator|)
block|{
name|_M_real
operator|-=
name|__z
operator|.
name|real
argument_list|()
block|;
name|_M_imag
operator|-=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.5/13
end_comment

begin_comment
comment|// XXX: This is a grammar school implementation.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
name|__z
operator|)
block|{
specifier|const
name|_Tp
name|__r
operator|=
name|_M_real
operator|*
name|__z
operator|.
name|real
argument_list|()
operator|-
name|_M_imag
operator|*
name|__z
operator|.
name|imag
argument_list|()
block|;
name|_M_imag
operator|=
name|_M_real
operator|*
name|__z
operator|.
name|imag
argument_list|()
operator|+
name|_M_imag
operator|*
name|__z
operator|.
name|real
argument_list|()
block|;
name|_M_real
operator|=
name|__r
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.5/15
end_comment

begin_comment
comment|// XXX: This is a grammar school implementation.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|typename
name|_Up
operator|>
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|complex
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_Up
operator|>
operator|&
name|__z
operator|)
block|{
specifier|const
name|_Tp
name|__r
operator|=
name|_M_real
operator|*
name|__z
operator|.
name|real
argument_list|()
operator|+
name|_M_imag
operator|*
name|__z
operator|.
name|imag
argument_list|()
block|;
specifier|const
name|_Tp
name|__n
operator|=
name|std
operator|::
name|norm
argument_list|(
name|__z
argument_list|)
block|;
name|_M_imag
operator|=
operator|(
name|_M_imag
operator|*
name|__z
operator|.
name|real
argument_list|()
operator|-
name|_M_real
operator|*
name|__z
operator|.
name|imag
argument_list|()
operator|)
operator|/
name|__n
block|;
name|_M_real
operator|=
name|__r
operator|/
name|__n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// Operators:
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|///  Return new complex value @a x plus @a y.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|+=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|.
name|real
argument_list|()
operator|+=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|+
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__y
block|;
name|__r
operator|.
name|real
argument_list|()
operator|+=
name|__x
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|///  Return new complex value @a x minus @a y.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|-=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|.
name|real
argument_list|()
operator|-=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|-
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
argument_list|(
name|__x
argument_list|,
operator|-
name|__y
operator|.
name|imag
argument_list|()
argument_list|)
block|;
name|__r
operator|.
name|real
argument_list|()
operator|-=
name|__y
operator|.
name|real
argument_list|()
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|///  Return new complex value @a x times @a y.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|*
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|*=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|*
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|*=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|*
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__y
block|;
name|__r
operator|*=
name|__x
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|///  Return new complex value @a x divided by @a y.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|/
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|/=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|/
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|/=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|/
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
name|complex
operator|<
name|_Tp
operator|>
name|__r
operator|=
name|__x
block|;
name|__r
operator|/=
name|__y
block|;
return|return
name|__r
return|;
block|}
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|///  Return @a x.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|)
block|{
return|return
name|__x
return|;
block|}
end_expr_stmt

begin_comment
comment|///  Return complex negation of @a x.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|)
block|{
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
operator|-
name|__x
operator|.
name|real
argument_list|()
operator|,
operator|-
name|__x
operator|.
name|imag
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|//@{
end_comment

begin_comment
comment|///  Return true if @a x is equal to @a y.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|real
argument_list|()
operator|==
name|__y
operator|.
name|real
argument_list|()
operator|&&
name|__x
operator|.
name|imag
argument_list|()
operator|==
name|__y
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|real
argument_list|()
operator|==
name|__y
operator|&&
name|__x
operator|.
name|imag
argument_list|()
operator|==
name|_Tp
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|==
name|__y
operator|.
name|real
argument_list|()
operator|&&
name|_Tp
argument_list|()
operator|==
name|__y
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|//@{
end_comment

begin_comment
comment|///  Return false if @a x is equal to @a y.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|real
argument_list|()
operator|!=
name|__y
operator|.
name|real
argument_list|()
operator|||
name|__x
operator|.
name|imag
argument_list|()
operator|!=
name|__y
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|,
specifier|const
name|_Tp
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|.
name|real
argument_list|()
operator|!=
name|__y
operator|||
name|__x
operator|.
name|imag
argument_list|()
operator|!=
name|_Tp
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|_Tp
operator|&
name|__x
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__y
operator|)
block|{
return|return
name|__x
operator|!=
name|__y
operator|.
name|real
argument_list|()
operator|||
name|_Tp
argument_list|()
operator|!=
name|__y
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|//@}
end_comment

begin_comment
comment|///  Extraction operator for complex values.
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_CharT
operator|,
name|class
name|_Traits
operator|>
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|>>
operator|(
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__is
operator|,
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|)
block|{
name|_Tp
name|__re_x
block|,
name|__im_x
block|;
name|_CharT
name|__ch
block|;
name|__is
operator|>>
name|__ch
block|;
if|if
condition|(
name|__ch
operator|==
literal|'('
condition|)
block|{
name|__is
operator|>>
name|__re_x
operator|>>
name|__ch
expr_stmt|;
if|if
condition|(
name|__ch
operator|==
literal|','
condition|)
block|{
name|__is
operator|>>
name|__im_x
operator|>>
name|__ch
expr_stmt|;
if|if
condition|(
name|__ch
operator|==
literal|')'
condition|)
name|__x
operator|=
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|__re_x
operator|,
name|__im_x
operator|)
expr_stmt|;
else|else
name|__is
operator|.
name|setstate
argument_list|(
name|ios_base
operator|::
name|failbit
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_elseif
elseif|else
if|if
condition|(
name|__ch
operator|==
literal|')'
condition|)
name|__x
operator|=
name|__re_x
expr_stmt|;
end_elseif

begin_else
else|else
name|__is
operator|.
name|setstate
argument_list|(
name|ios_base
operator|::
name|failbit
argument_list|)
expr_stmt|;
end_else

begin_block
unit|}       else
block|{
name|__is
operator|.
name|putback
argument_list|(
name|__ch
argument_list|)
expr_stmt|;
name|__is
operator|>>
name|__re_x
expr_stmt|;
name|__x
operator|=
name|__re_x
expr_stmt|;
block|}
end_block

begin_return
return|return
name|__is
return|;
end_return

begin_comment
unit|}
comment|///  Insertion operator for complex values.
end_comment

begin_expr_stmt
unit|template
operator|<
name|typename
name|_Tp
operator|,
name|typename
name|_CharT
operator|,
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__os
operator|,
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__x
operator|)
block|{
name|basic_ostringstream
operator|<
name|_CharT
block|,
name|_Traits
operator|>
name|__s
block|;
name|__s
operator|.
name|flags
argument_list|(
name|__os
operator|.
name|flags
argument_list|()
argument_list|)
block|;
name|__s
operator|.
name|imbue
argument_list|(
name|__os
operator|.
name|getloc
argument_list|()
argument_list|)
block|;
name|__s
operator|.
name|precision
argument_list|(
name|__os
operator|.
name|precision
argument_list|()
argument_list|)
block|;
name|__s
operator|<<
literal|'('
operator|<<
name|__x
operator|.
name|real
argument_list|()
operator|<<
literal|','
operator|<<
name|__x
operator|.
name|imag
argument_list|()
operator|<<
literal|')'
block|;
return|return
name|__os
operator|<<
name|__s
operator|.
name|str
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
comment|// Values
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
operator|&
name|real
argument_list|(
argument|complex<_Tp>& __z
argument_list|)
block|{
return|return
name|__z
operator|.
name|real
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
specifier|const
name|_Tp
operator|&
name|real
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|__z
operator|.
name|real
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
operator|&
name|imag
argument_list|(
argument|complex<_Tp>& __z
argument_list|)
block|{
return|return
name|__z
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
specifier|const
name|_Tp
operator|&
name|imag
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|__z
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|abs
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
name|_Tp
name|__x
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|_Tp
name|__y
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
specifier|const
name|_Tp
name|__s
operator|=
name|std
operator|::
name|max
argument_list|(
name|abs
argument_list|(
name|__x
argument_list|)
argument_list|,
name|abs
argument_list|(
name|__y
argument_list|)
argument_list|)
block|;
if|if
condition|(
name|__s
operator|==
name|_Tp
argument_list|()
condition|)
comment|// well ...
return|return
name|__s
return|;
name|__x
operator|/=
name|__s
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__y
operator|/=
name|__s
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__s
operator|*
name|sqrt
argument_list|(
name|__x
operator|*
name|__x
operator|+
name|__y
operator|*
name|__y
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|arg
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|atan2
argument_list|(
name|__z
operator|.
name|imag
argument_list|()
argument_list|,
name|__z
operator|.
name|real
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.7/5: norm(__z) returns the squared magintude of __z.
end_comment

begin_comment
comment|//     As defined, norm() is -not- a norm is the common mathematical
end_comment

begin_comment
comment|//     sens used in numerics.  The helper class _Norm_helper<> tries to
end_comment

begin_comment
comment|//     distinguish between builtin floating point and the rest, so as
end_comment

begin_comment
comment|//     to deliver an answer as close as possible to the real value.
end_comment

begin_expr_stmt
name|template
operator|<
name|bool
operator|>
expr|struct
name|_Norm_helper
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|static
specifier|inline
name|_Tp
name|_S_do_it
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
specifier|const
name|_Tp
name|__x
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
specifier|const
name|_Tp
name|__y
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
name|__x
operator|*
name|__x
operator|+
name|__y
operator|*
name|__y
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
operator|>
expr|struct
name|_Norm_helper
operator|<
name|true
operator|>
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|static
specifier|inline
name|_Tp
name|_S_do_it
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
name|_Tp
name|__res
operator|=
name|std
operator|::
name|abs
argument_list|(
name|__z
argument_list|)
block|;
return|return
name|__res
operator|*
name|__res
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|norm
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|_Norm_helper
operator|<
name|__is_floating
operator|<
name|_Tp
operator|>
operator|::
name|_M_type
operator|&&
operator|!
name|_GLIBCXX_FAST_MATH
operator|>
operator|::
name|_S_do_it
argument_list|(
name|__z
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|polar
argument_list|(
argument|const _Tp& __rho
argument_list|,
argument|const _Tp& __theta
argument_list|)
block|{
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|__rho
operator|*
name|cos
argument_list|(
name|__theta
argument_list|)
operator|,
name|__rho
operator|*
name|sin
argument_list|(
name|__theta
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|conj
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|__z
operator|.
name|real
argument_list|()
operator|,
operator|-
name|__z
operator|.
name|imag
argument_list|()
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Transcendentals
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|cos
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
specifier|const
name|_Tp
name|__x
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
specifier|const
name|_Tp
name|__y
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|cos
argument_list|(
name|__x
argument_list|)
operator|*
name|cosh
argument_list|(
name|__y
argument_list|)
operator|,
operator|-
name|sin
argument_list|(
name|__x
argument_list|)
operator|*
name|sinh
argument_list|(
name|__y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|cosh
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
specifier|const
name|_Tp
name|__x
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
specifier|const
name|_Tp
name|__y
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|cosh
argument_list|(
name|__x
argument_list|)
operator|*
name|cos
argument_list|(
name|__y
argument_list|)
operator|,
name|sinh
argument_list|(
name|__x
argument_list|)
operator|*
name|sin
argument_list|(
name|__y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|exp
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|std
operator|::
name|polar
argument_list|(
name|exp
argument_list|(
name|__z
operator|.
name|real
argument_list|()
argument_list|)
argument_list|,
name|__z
operator|.
name|imag
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|log
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|log
argument_list|(
name|std
operator|::
name|abs
argument_list|(
name|__z
argument_list|)
argument_list|)
operator|,
name|std
operator|::
name|arg
argument_list|(
name|__z
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|log10
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|std
operator|::
name|log
argument_list|(
name|__z
argument_list|)
operator|/
name|log
argument_list|(
name|_Tp
argument_list|(
literal|10.0
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|sin
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
specifier|const
name|_Tp
name|__x
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
specifier|const
name|_Tp
name|__y
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|sin
argument_list|(
name|__x
argument_list|)
operator|*
name|cosh
argument_list|(
name|__y
argument_list|)
operator|,
name|cos
argument_list|(
name|__x
argument_list|)
operator|*
name|sinh
argument_list|(
name|__y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|sinh
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
specifier|const
name|_Tp
name|__x
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
specifier|const
name|_Tp
name|__y
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|sinh
argument_list|(
name|__x
argument_list|)
operator|*
name|cos
argument_list|(
name|__y
argument_list|)
operator|,
name|cosh
argument_list|(
name|__x
argument_list|)
operator|*
name|sin
argument_list|(
name|__y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|sqrt
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
name|_Tp
name|__x
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|_Tp
name|__y
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
if|if
condition|(
name|__x
operator|==
name|_Tp
argument_list|()
condition|)
block|{
name|_Tp
name|__t
init|=
name|sqrt
argument_list|(
name|abs
argument_list|(
name|__y
argument_list|)
operator|/
literal|2
argument_list|)
decl_stmt|;
return|return
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|__t
operator|,
name|__y
operator|<
name|_Tp
argument_list|()
condition|?
operator|-
name|__t
else|:
name|__t
operator|)
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|_Tp
name|__t
init|=
name|sqrt
argument_list|(
literal|2
operator|*
operator|(
name|std
operator|::
name|abs
argument_list|(
name|__z
argument_list|)
operator|+
name|abs
argument_list|(
name|__x
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|_Tp
name|__u
init|=
name|__t
operator|/
literal|2
decl_stmt|;
return|return
name|__x
operator|>
name|_Tp
argument_list|()
condition|?
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|__u
operator|,
name|__y
operator|/
name|__t
operator|)
else|:
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|abs
argument_list|(
name|__y
argument_list|)
operator|/
name|__t
operator|,
name|__y
operator|<
name|_Tp
argument_list|()
condition|?
operator|-
name|__u
else|:
name|__u
operator|)
return|;
block|}
end_else

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|tan
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|std
operator|::
name|sin
argument_list|(
name|__z
argument_list|)
operator|/
name|std
operator|::
name|cos
argument_list|(
name|__z
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|tanh
argument_list|(
argument|const complex<_Tp>& __z
argument_list|)
block|{
return|return
name|std
operator|::
name|sinh
argument_list|(
name|__z
argument_list|)
operator|/
name|std
operator|::
name|cosh
argument_list|(
name|__z
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|pow
argument_list|(
argument|const complex<_Tp>& __z
argument_list|,
argument|int __n
argument_list|)
block|{
return|return
name|std
operator|::
name|__pow_helper
argument_list|(
name|__z
argument_list|,
name|__n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|_Tp
operator|>
name|pow
argument_list|(
argument|const complex<_Tp>& __x
argument_list|,
argument|const _Tp& __y
argument_list|)
block|{
if|if
condition|(
name|__x
operator|.
name|imag
argument_list|()
operator|==
name|_Tp
argument_list|()
operator|&&
name|__x
operator|.
name|real
argument_list|()
operator|>
name|_Tp
argument_list|()
condition|)
return|return
name|pow
argument_list|(
name|__x
operator|.
name|real
argument_list|()
argument_list|,
name|__y
argument_list|)
return|;
name|complex
operator|<
name|_Tp
operator|>
name|__t
operator|=
name|std
operator|::
name|log
argument_list|(
name|__x
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|std
operator|::
name|polar
argument_list|(
name|exp
argument_list|(
name|__y
operator|*
name|__t
operator|.
name|real
argument_list|()
argument_list|)
argument_list|,
name|__y
operator|*
name|__t
operator|.
name|imag
argument_list|()
argument_list|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|pow
argument_list|(
argument|const complex<_Tp>& __x
argument_list|,
argument|const complex<_Tp>& __y
argument_list|)
block|{
return|return
name|__x
operator|==
name|_Tp
argument_list|()
operator|?
name|_Tp
argument_list|()
operator|:
name|std
operator|::
name|exp
argument_list|(
name|__y
operator|*
name|std
operator|::
name|log
argument_list|(
name|__x
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|_Tp
operator|>
name|pow
argument_list|(
argument|const _Tp& __x
argument_list|,
argument|const complex<_Tp>& __y
argument_list|)
block|{
return|return
name|__x
operator|>
name|_Tp
argument_list|()
operator|?
name|std
operator|::
name|polar
argument_list|(
name|pow
argument_list|(
name|__x
argument_list|,
name|__y
operator|.
name|real
argument_list|()
argument_list|)
argument_list|,
name|__y
operator|.
name|imag
argument_list|()
operator|*
name|log
argument_list|(
name|__x
argument_list|)
argument_list|)
operator|:
name|std
operator|::
name|pow
argument_list|(
name|complex
operator|<
name|_Tp
operator|>
operator|(
name|__x
operator|,
name|_Tp
argument_list|()
operator|)
argument_list|,
name|__y
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.3  complex specializations
end_comment

begin_comment
comment|// complex<float> specialization
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
name|class
name|complex
operator|<
name|float
operator|>
block|{
name|public
operator|:
typedef|typedef
name|float
name|value_type
typedef|;
name|complex
argument_list|(
name|float
operator|=
literal|0.0f
argument_list|,
name|float
operator|=
literal|0.0f
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCXX_BUGGY_COMPLEX
end_ifdef

begin_expr_stmt
name|complex
argument_list|(
specifier|const
name|complex
operator|&
name|__z
argument_list|)
operator|:
name|_M_value
argument_list|(
argument|__z._M_value
argument_list|)
block|{ }
endif|#
directive|endif
name|explicit
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|double
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|explicit
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|long
name|double
operator|>
operator|&
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|float
modifier|&
name|real
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|float
operator|&
name|real
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_function_decl
name|float
modifier|&
name|imag
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|float
operator|&
name|imag
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|=
operator|(
name|float
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|+=
operator|(
name|float
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|-=
operator|(
name|float
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|*=
operator|(
name|float
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|/=
operator|(
name|float
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Let's the compiler synthetize the copy and assignment
end_comment

begin_comment
comment|// operator.  It always does a pretty good job.
end_comment

begin_comment
comment|// complex& operator= (const complex&);
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|complex
operator|<
name|float
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|__complex__
name|float
name|_ComplexT
typedef|;
end_typedef

begin_decl_stmt
name|_ComplexT
name|_M_value
decl_stmt|;
end_decl_stmt

begin_macro
name|complex
argument_list|(
argument|_ComplexT __z
argument_list|)
end_macro

begin_macro
unit|:
name|_M_value
argument_list|(
argument|__z
argument_list|)
end_macro

begin_block
block|{ }
end_block

begin_expr_stmt
name|friend
name|class
name|complex
operator|<
name|double
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|class
name|complex
operator|<
name|long
name|double
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
specifier|inline
name|float
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|real
argument_list|()
block|{
return|return
name|__real__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|float
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|real
argument_list|()
specifier|const
block|{
return|return
name|__real__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|float
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|imag
argument_list|()
block|{
return|return
name|__imag__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|float
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|imag
argument_list|()
specifier|const
block|{
return|return
name|__imag__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|::
name|complex
argument_list|(
argument|float r
argument_list|,
argument|float i
argument_list|)
block|{
name|__real__
name|_M_value
operator|=
name|r
block|;
name|__imag__
name|_M_value
operator|=
name|i
block|;   }
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|=
operator|(
name|float
name|__f
operator|)
block|{
name|__real__
name|_M_value
operator|=
name|__f
block|;
name|__imag__
name|_M_value
operator|=
literal|0.0f
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|+=
operator|(
name|float
name|__f
operator|)
block|{
name|__real__
name|_M_value
operator|+=
name|__f
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|-=
operator|(
name|float
name|__f
operator|)
block|{
name|__real__
name|_M_value
operator|-=
name|__f
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|*=
operator|(
name|float
name|__f
operator|)
block|{
name|_M_value
operator|*=
name|__f
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|/=
operator|(
name|float
name|__f
operator|)
block|{
name|_M_value
operator|/=
name|__f
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|+=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|+=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|-=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|-=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|_ComplexT
name|__t
block|;
name|__real__
name|__t
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|__t
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
name|_M_value
operator|*=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|&
name|complex
operator|<
name|float
operator|>
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|_ComplexT
name|__t
block|;
name|__real__
name|__t
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|__t
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
name|_M_value
operator|/=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.3  complex specializations
end_comment

begin_comment
comment|// complex<double> specialization
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
name|class
name|complex
operator|<
name|double
operator|>
block|{
name|public
operator|:
typedef|typedef
name|double
name|value_type
typedef|;
name|complex
argument_list|(
name|double
operator|=
literal|0.0
argument_list|,
name|double
operator|=
literal|0.0
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCXX_BUGGY_COMPLEX
end_ifdef

begin_expr_stmt
name|complex
argument_list|(
specifier|const
name|complex
operator|&
name|__z
argument_list|)
operator|:
name|_M_value
argument_list|(
argument|__z._M_value
argument_list|)
block|{ }
endif|#
directive|endif
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|float
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|explicit
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|long
name|double
operator|>
operator|&
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
name|double
modifier|&
name|real
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|double
operator|&
name|real
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_function_decl
name|double
modifier|&
name|imag
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|double
operator|&
name|imag
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|=
operator|(
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|+=
operator|(
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|-=
operator|(
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|*=
operator|(
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|/=
operator|(
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The compiler will synthetize this, efficiently.
end_comment

begin_comment
comment|// complex& operator= (const complex&);
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|double
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|__complex__
name|double
name|_ComplexT
typedef|;
end_typedef

begin_decl_stmt
name|_ComplexT
name|_M_value
decl_stmt|;
end_decl_stmt

begin_macro
name|complex
argument_list|(
argument|_ComplexT __z
argument_list|)
end_macro

begin_macro
unit|:
name|_M_value
argument_list|(
argument|__z
argument_list|)
end_macro

begin_block
block|{ }
end_block

begin_expr_stmt
name|friend
name|class
name|complex
operator|<
name|float
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|class
name|complex
operator|<
name|long
name|double
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
specifier|inline
name|double
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|real
argument_list|()
block|{
return|return
name|__real__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|double
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|real
argument_list|()
specifier|const
block|{
return|return
name|__real__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|double
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|imag
argument_list|()
block|{
return|return
name|__imag__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|double
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|imag
argument_list|()
specifier|const
block|{
return|return
name|__imag__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|::
name|complex
argument_list|(
argument|double __r
argument_list|,
argument|double __i
argument_list|)
block|{
name|__real__
name|_M_value
operator|=
name|__r
block|;
name|__imag__
name|_M_value
operator|=
name|__i
block|;   }
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|=
operator|(
name|double
name|__d
operator|)
block|{
name|__real__
name|_M_value
operator|=
name|__d
block|;
name|__imag__
name|_M_value
operator|=
literal|0.0
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|+=
operator|(
name|double
name|__d
operator|)
block|{
name|__real__
name|_M_value
operator|+=
name|__d
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|-=
operator|(
name|double
name|__d
operator|)
block|{
name|__real__
name|_M_value
operator|-=
name|__d
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|*=
operator|(
name|double
name|__d
operator|)
block|{
name|_M_value
operator|*=
name|__d
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|/=
operator|(
name|double
name|__d
operator|)
block|{
name|_M_value
operator|/=
name|__d
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|+=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|+=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|-=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|-=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|_ComplexT
name|__t
block|;
name|__real__
name|__t
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|__t
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
name|_M_value
operator|*=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|&
name|complex
operator|<
name|double
operator|>
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|_ComplexT
name|__t
block|;
name|__real__
name|__t
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|__t
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
name|_M_value
operator|/=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// 26.2.3  complex specializations
end_comment

begin_comment
comment|// complex<long double> specialization
end_comment

begin_expr_stmt
name|template
operator|<
operator|>
name|class
name|complex
operator|<
name|long
name|double
operator|>
block|{
name|public
operator|:
typedef|typedef
name|long
name|double
name|value_type
typedef|;
name|complex
argument_list|(
argument|long double =
literal|0.0L
argument_list|,
argument|long double =
literal|0.0L
argument_list|)
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCXX_BUGGY_COMPLEX
end_ifdef

begin_expr_stmt
name|complex
argument_list|(
specifier|const
name|complex
operator|&
name|__z
argument_list|)
operator|:
name|_M_value
argument_list|(
argument|__z._M_value
argument_list|)
block|{ }
endif|#
directive|endif
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|float
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|double
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function_decl
name|long
name|double
modifier|&
name|real
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|long
name|double
operator|&
name|real
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_function_decl
name|long
name|double
modifier|&
name|imag
parameter_list|()
function_decl|;
end_function_decl

begin_expr_stmt
specifier|const
name|long
name|double
operator|&
name|imag
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|=
operator|(
name|long
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|+=
operator|(
name|long
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|-=
operator|(
name|long
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|*=
operator|(
name|long
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|/=
operator|(
name|long
name|double
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// The compiler knows how to do this efficiently
end_comment

begin_comment
comment|// complex& operator= (const complex&);
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|__complex__
name|long
name|double
name|_ComplexT
typedef|;
end_typedef

begin_decl_stmt
name|_ComplexT
name|_M_value
decl_stmt|;
end_decl_stmt

begin_macro
name|complex
argument_list|(
argument|_ComplexT __z
argument_list|)
end_macro

begin_macro
unit|:
name|_M_value
argument_list|(
argument|__z
argument_list|)
end_macro

begin_block
block|{ }
end_block

begin_expr_stmt
name|friend
name|class
name|complex
operator|<
name|float
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|class
name|complex
operator|<
name|double
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|complex
argument_list|(
argument|long double __r
argument_list|,
argument|long double __i
argument_list|)
block|{
name|__real__
name|_M_value
operator|=
name|__r
block|;
name|__imag__
name|_M_value
operator|=
name|__i
block|;   }
specifier|inline
name|long
name|double
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|real
argument_list|()
block|{
return|return
name|__real__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|long
name|double
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|real
argument_list|()
specifier|const
block|{
return|return
name|__real__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|long
name|double
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|imag
argument_list|()
block|{
return|return
name|__imag__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
specifier|const
name|long
name|double
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|imag
argument_list|()
specifier|const
block|{
return|return
name|__imag__
name|_M_value
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|=
operator|(
name|long
name|double
name|__r
operator|)
block|{
name|__real__
name|_M_value
operator|=
name|__r
block|;
name|__imag__
name|_M_value
operator|=
literal|0.0L
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|+=
operator|(
name|long
name|double
name|__r
operator|)
block|{
name|__real__
name|_M_value
operator|+=
name|__r
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|-=
operator|(
name|long
name|double
name|__r
operator|)
block|{
name|__real__
name|_M_value
operator|-=
name|__r
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|*=
operator|(
name|long
name|double
name|__r
operator|)
block|{
name|_M_value
operator|*=
name|__r
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|/=
operator|(
name|long
name|double
name|__r
operator|)
block|{
name|_M_value
operator|/=
name|__r
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|+=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|+=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|__real__
name|_M_value
operator|-=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|-=
name|__z
operator|.
name|imag
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|_ComplexT
name|__t
block|;
name|__real__
name|__t
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|__t
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
name|_M_value
operator|*=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|&
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_Tp
operator|>
operator|&
name|__z
operator|)
block|{
name|_ComplexT
name|__t
block|;
name|__real__
name|__t
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|__t
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;
name|_M_value
operator|/=
name|__t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// These bits have to be at the end of this file, so that the
end_comment

begin_comment
comment|// specializations have all been defined.
end_comment

begin_comment
comment|// ??? No, they have to be there because of compiler limitation at
end_comment

begin_comment
comment|// inlining.  It suffices that class specializations be defined.
end_comment

begin_expr_stmt
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|::
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|double
operator|>
operator|&
name|__z
argument_list|)
operator|:
name|_M_value
argument_list|(
argument|_ComplexT(__z._M_value)
argument_list|)
block|{ }
specifier|inline
name|complex
operator|<
name|float
operator|>
operator|::
name|complex
argument_list|(
argument|const complex<long double>& __z
argument_list|)
operator|:
name|_M_value
argument_list|(
argument|_ComplexT(__z._M_value)
argument_list|)
block|{ }
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|::
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|float
operator|>
operator|&
name|__z
argument_list|)
operator|:
name|_M_value
argument_list|(
argument|_ComplexT(__z._M_value)
argument_list|)
block|{ }
specifier|inline
name|complex
operator|<
name|double
operator|>
operator|::
name|complex
argument_list|(
argument|const complex<long double>& __z
argument_list|)
block|{
name|__real__
name|_M_value
operator|=
name|__z
operator|.
name|real
argument_list|()
block|;
name|__imag__
name|_M_value
operator|=
name|__z
operator|.
name|imag
argument_list|()
block|;   }
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|float
operator|>
operator|&
name|__z
argument_list|)
operator|:
name|_M_value
argument_list|(
argument|_ComplexT(__z._M_value)
argument_list|)
block|{ }
specifier|inline
name|complex
operator|<
name|long
name|double
operator|>
operator|::
name|complex
argument_list|(
specifier|const
name|complex
operator|<
name|double
operator|>
operator|&
name|__z
argument_list|)
operator|:
name|_M_value
argument_list|(
argument|_ComplexT(__z._M_value)
argument_list|)
block|{ }
end_expr_stmt

begin_comment
unit|}
comment|// namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _GLIBCXX_COMPLEX */
end_comment

end_unit

