begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- valarray class.
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2004, 2005, 2006, 2007
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|/** @file valarray  *  This is a Standard C++ Library header.   */
end_comment

begin_comment
comment|// Written by Gabriel Dos Reis<Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_GLIBCXX_VALARRAY
end_ifndef

begin_define
define|#
directive|define
name|_GLIBCXX_VALARRAY
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<bits/c++config.h>
end_include

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cmath>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<numeric>
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_include
include|#
directive|include
file|<debug/debug.h>
end_include

begin_macro
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
argument|std
argument_list|)
end_macro

begin_expr_stmt
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
name|class
name|_Expr
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp1
operator|,
name|typename
name|_Tp2
operator|>
name|class
name|_ValArray
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Oper
operator|,
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_UnClos
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Oper
operator|,
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta1
operator|,
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta2
operator|,
name|class
name|_Dom1
operator|,
name|class
name|_Dom2
operator|>
name|class
name|_BinClos
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_SClos
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_GClos
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_IClos
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_ValFunClos
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_RefFunClos
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|valarray
expr_stmt|;
end_expr_stmt

begin_comment
comment|// An array of type _Tp
end_comment

begin_decl_stmt
name|class
name|slice
decl_stmt|;
end_decl_stmt

begin_comment
comment|// BLAS-like slice out of an array
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|slice_array
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|class
name|gslice
decl_stmt|;
end_decl_stmt

begin_comment
comment|// generalized slice out of an array
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|gslice_array
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|mask_array
expr_stmt|;
end_expr_stmt

begin_comment
comment|// masked array
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|indirect_array
expr_stmt|;
end_expr_stmt

begin_comment
comment|// indirected array
end_comment

begin_decl_stmt
name|_GLIBCXX_END_NAMESPACE
include|#
directive|include
file|<bits/valarray_array.h>
include|#
directive|include
file|<bits/valarray_before.h>
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
name|std
argument_list|)
comment|/**    *  @brief  Smart array designed to support numeric processing.    *    *  A valarray is an array that provides constraints intended to allow for    *  effective optimization of numeric array processing by reducing the    *  aliasing that can result from pointer representations.  It represents a    *  one-dimensional array from which different multidimensional subsets can    *  be accessed and modified.    *      *  @param  Tp  Type of object in the array.    */
name|template
decl|<
name|class
name|_Tp
decl|>
name|class
name|valarray
block|{
name|template
operator|<
name|class
name|_Op
operator|>
expr|struct
name|_UnaryOp
block|{
typedef|typedef
name|typename
name|__fun
operator|<
name|_Op
operator|,
name|_Tp
operator|>
operator|::
name|result_type
name|__rt
expr_stmt|;
typedef|typedef
name|_Expr
operator|<
name|_UnClos
operator|<
name|_Op
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|__rt
operator|>
name|_Rt
expr_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|_Tp
name|value_type
typedef|;
end_typedef

begin_comment
comment|// _lib.valarray.cons_ construct/destroy:
end_comment

begin_comment
comment|///  Construct an empty array.
end_comment

begin_expr_stmt
name|valarray
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Construct an array with @a n elements.
end_comment

begin_function_decl
name|explicit
name|valarray
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|///  Construct an array with @a n elements initialized to @a t.
end_comment

begin_expr_stmt
name|valarray
argument_list|(
specifier|const
name|_Tp
operator|&
argument_list|,
name|size_t
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Construct an array initialized to the first @a n elements of @a t.
end_comment

begin_expr_stmt
name|valarray
argument_list|(
specifier|const
name|_Tp
operator|*
name|__restrict__
argument_list|,
name|size_t
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Copy constructor.
end_comment

begin_expr_stmt
name|valarray
argument_list|(
specifier|const
name|valarray
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Construct an array with the same size and values in @a sa.
end_comment

begin_expr_stmt
name|valarray
argument_list|(
specifier|const
name|slice_array
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Construct an array with the same size and values in @a ga.
end_comment

begin_expr_stmt
name|valarray
argument_list|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Construct an array with the same size and values in @a ma.
end_comment

begin_expr_stmt
name|valarray
argument_list|(
specifier|const
name|mask_array
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Construct an array with the same size and values in @a ia.
end_comment

begin_expr_stmt
name|valarray
argument_list|(
specifier|const
name|indirect_array
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
argument_list|(
specifier|const
name|_Expr
operator|<
name|_Dom
argument_list|,
name|_Tp
operator|>
operator|&
name|__e
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
operator|~
name|valarray
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|// _lib.valarray.assign_ assignment:
end_comment

begin_comment
comment|/**        *  @brief  Assign elements to an array.        *        *  Assign elements of array to values in @a v.  Results are undefined        *  if @a v does not have the same size as this array.        *        *  @param  v  Valarray to get values from.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Assign elements to a value.        *        *  Assign all elements of array to @a t.        *        *  @param  t  Value for elements.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Assign elements to an array subset.        *        *  Assign elements of array to values in @a sa.  Results are undefined        *  if @a sa does not have the same size as this array.        *        *  @param  sa  Array slice to get values from.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|slice_array
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Assign elements to an array subset.        *        *  Assign elements of array to values in @a ga.  Results are undefined        *  if @a ga does not have the same size as this array.        *        *  @param  ga  Array slice to get values from.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Assign elements to an array subset.        *        *  Assign elements of array to values in @a ma.  Results are undefined        *  if @a ma does not have the same size as this array.        *        *  @param  ma  Array slice to get values from.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|mask_array
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Assign elements to an array subset.        *        *  Assign elements of array to values in @a ia.  Results are undefined        *  if @a ia does not have the same size as this array.        *        *  @param  ia  Array slice to get values from.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|indirect_array
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// _lib.valarray.access_ element access:
end_comment

begin_comment
comment|/**        *  Return a reference to the i'th array element.          *        *  @param  i  Index of element to return.        *  @return  Reference to the i'th element.        */
end_comment

begin_function_decl
name|_Tp
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|// _GLIBCXX_RESOLVE_LIB_DEFECTS
end_comment

begin_comment
comment|// 389. Const overload of valarray::operator[] returns by value.
end_comment

begin_decl_stmt
specifier|const
name|_Tp
modifier|&
name|operator
index|[]
argument_list|(
name|size_t
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|// _lib.valarray.sub_ subset operations:
end_comment

begin_comment
comment|/**        *  @brief  Return an array subset.        *        *  Returns a new valarray containing the elements of the array        *  indicated by the slice argument.  The new valarray has the same size        *  as the input slice.  @see slice.        *        *  @param  s  The source slice.        *  @return  New valarray containing elements in @a s.        */
end_comment

begin_expr_stmt
name|_Expr
operator|<
name|_SClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
index|[]
operator|(
name|slice
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return a reference to an array subset.        *        *  Returns a new valarray containing the elements of the array        *  indicated by the slice argument.  The new valarray has the same size        *  as the input slice.  @see slice.        *        *  @param  s  The source slice.        *  @return  New valarray containing elements in @a s.        */
end_comment

begin_expr_stmt
name|slice_array
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
name|slice
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return an array subset.        *        *  Returns a slice_array referencing the elements of the array        *  indicated by the slice argument.  @see gslice.        *        *  @param  s  The source slice.        *  @return  Slice_array referencing elements indicated by @a s.        */
end_comment

begin_expr_stmt
name|_Expr
operator|<
name|_GClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return a reference to an array subset.        *        *  Returns a new valarray containing the elements of the array        *  indicated by the gslice argument.  The new valarray has        *  the same size as the input gslice.  @see gslice.        *        *  @param  s  The source gslice.        *  @return  New valarray containing elements in @a s.        */
end_comment

begin_expr_stmt
name|gslice_array
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return an array subset.        *        *  Returns a new valarray containing the elements of the array        *  indicated by the argument.  The input is a valarray of bool which        *  represents a bitmask indicating which elements should be copied into        *  the new valarray.  Each element of the array is added to the return        *  valarray if the corresponding element of the argument is true.        *        *  @param  m  The valarray bitmask.        *  @return  New valarray containing elements indicated by @a m.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return a reference to an array subset.        *        *  Returns a new mask_array referencing the elements of the array        *  indicated by the argument.  The input is a valarray of bool which        *  represents a bitmask indicating which elements are part of the        *  subset.  Elements of the array are part of the subset if the        *  corresponding element of the argument is true.        *        *  @param  m  The valarray bitmask.        *  @return  New valarray containing elements indicated by @a m.        */
end_comment

begin_expr_stmt
name|mask_array
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return an array subset.        *        *  Returns a new valarray containing the elements of the array        *  indicated by the argument.  The elements in the argument are        *  interpreted as the indices of elements of this valarray to copy to        *  the return valarray.        *        *  @param  i  The valarray element index list.        *  @return  New valarray containing elements in @a s.        */
end_comment

begin_expr_stmt
name|_Expr
operator|<
name|_IClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return a reference to an array subset.        *        *  Returns an indirect_array referencing the elements of the array        *  indicated by the argument.  The elements in the argument are        *  interpreted as the indices of elements of this valarray to include        *  in the subset.  The returned indirect_array refers to these        *  elements.        *        *  @param  i  The valarray element index list.        *  @return  Indirect_array referencing elements in @a i.        */
end_comment

begin_expr_stmt
name|indirect_array
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// _lib.valarray.unary_ unary operators:
end_comment

begin_comment
comment|///  Return a new valarray by applying unary + to each element.
end_comment

begin_expr_stmt
name|typename
name|_UnaryOp
operator|<
name|__unary_plus
operator|>
operator|::
name|_Rt
name|operator
operator|+
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Return a new valarray by applying unary - to each element.
end_comment

begin_expr_stmt
name|typename
name|_UnaryOp
operator|<
name|__negate
operator|>
operator|::
name|_Rt
name|operator
operator|-
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Return a new valarray by applying unary ~ to each element.
end_comment

begin_expr_stmt
name|typename
name|_UnaryOp
operator|<
name|__bitwise_not
operator|>
operator|::
name|_Rt
name|operator
operator|~
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Return a new valarray by applying unary ! to each element.
end_comment

begin_expr_stmt
name|typename
name|_UnaryOp
operator|<
name|__logical_not
operator|>
operator|::
name|_Rt
name|operator
operator|!
operator|(
operator|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|// _lib.valarray.cassign_ computed assignment:
end_comment

begin_comment
comment|///  Multiply each element of array by @a t.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Divide each element of array by @a t.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Set each element e of array to e % @a t.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|%=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Add @a t to each element of array.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Subtract @a t to each element of array.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Set each element e of array to e ^ @a t.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Set each element e of array to e& @a t.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Set each element e of array to e | @a t.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator||=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Left shift each element e of array by @a t bits.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|<<=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Right shift each element e of array by @a t bits.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|>>=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Multiply elements of array by corresponding elements of @a v.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Divide elements of array by corresponding elements of @a v.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Modulo elements of array by corresponding elements of @a v.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|%=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Add corresponding elements of @a v to elements of array.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Subtract corresponding elements of @a v from elements of array.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Logical xor corresponding elements of @a v with elements of array.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Logical or corresponding elements of @a v with elements of array.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator||=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Logical and corresponding elements of @a v with elements of array.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Left shift elements of array by corresponding elements of @a v.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|<<=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Right shift elements of array by corresponding elements of @a v.
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|>>=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|%=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator||=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|<<=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|>>=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// _lib.valarray.members_ member functions:
end_comment

begin_comment
comment|///  Return the number of elements in array.
end_comment

begin_expr_stmt
name|size_t
name|size
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return the sum of all elements in the array.        *        *  Accumulates the sum of all elements into a Tp using +=.  The order        *  of adding the elements is unspecified.        */
end_comment

begin_expr_stmt
name|_Tp
name|sum
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Return the minimum element using operator<().
end_comment

begin_expr_stmt
name|_Tp
name|min
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|///  Return the maximum element using operator<().
end_comment

begin_expr_stmt
name|_Tp
name|max
argument_list|()
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return a shifted array.        *        *  A new valarray is constructed as a copy of this array with elements        *  in shifted positions.  For an element with index i, the new position        *  is i - n.  The new valarray has the same size as the current one.        *  New elements without a value are set to 0.  Elements whose new        *  position is outside the bounds of the array are discarded.        *        *  Positive arguments shift toward index 0, discarding elements [0, n).        *  Negative arguments discard elements from the top of the array.        *        *  @param  n  Number of element positions to shift.        *  @return  New valarray with elements in shifted positions.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
name|shift
argument_list|(
argument|int
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Return a rotated array.        *        *  A new valarray is constructed as a copy of this array with elements        *  in shifted positions.  For an element with index i, the new position        *  is (i - n) % size().  The new valarray has the same size as the        *  current one.  Elements that are shifted beyond the array bounds are        *  shifted into the other end of the array.  No elements are lost.        *        *  Positive arguments shift toward index 0, wrapping around the top.        *  Negative arguments shift towards the top, wrapping around to 0.        *        *  @param  n  Number of element positions to rotate.        *  @return  New valarray with elements in shifted positions.        */
end_comment

begin_expr_stmt
name|valarray
operator|<
name|_Tp
operator|>
name|cshift
argument_list|(
argument|int
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Apply a function to the array.        *        *  Returns a new valarray with elements assigned to the result of        *  applying func to the corresponding element of this array.  The new        *  array has the same size as this one.        *        *  @param  func  Function of Tp returning Tp to apply.        *  @return  New valarray with transformed elements.        */
end_comment

begin_expr_stmt
name|_Expr
operator|<
name|_ValFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|apply
argument_list|(
argument|_Tp func(_Tp)
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Apply a function to the array.        *        *  Returns a new valarray with elements assigned to the result of        *  applying func to the corresponding element of this array.  The new        *  array has the same size as this one.        *        *  @param  func  Function of const Tp& returning Tp to apply.        *  @return  New valarray with transformed elements.        */
end_comment

begin_expr_stmt
name|_Expr
operator|<
name|_RefFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|apply
argument_list|(
argument|_Tp func(const _Tp&)
argument_list|)
specifier|const
expr_stmt|;
end_expr_stmt

begin_comment
comment|/**        *  @brief  Resize array.        *        *  Resize this array to @a size and set all elements to @a c.  All        *  references and iterators are invalidated.        *        *  @param  size  New array size.        *  @param  c  New value for all elements.        */
end_comment

begin_function_decl
name|void
name|resize
parameter_list|(
name|size_t
name|__size
parameter_list|,
name|_Tp
name|__c
init|=
name|_Tp
argument_list|()
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|size_t
name|_M_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|_Tp
modifier|*
name|__restrict__
name|_M_data
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|friend
name|class
name|_Array
operator|<
name|_Tp
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
specifier|const
name|_Tp
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
name|__glibcxx_requires_subscript
argument_list|(
name|__i
argument_list|)
block|;
return|return
name|_M_data
index|[
name|__i
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
block|{
name|__glibcxx_requires_subscript
argument_list|(
name|__i
argument_list|)
block|;
return|return
name|_M_data
index|[
name|__i
index|]
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|_GLIBCXX_END_NAMESPACE
include|#
directive|include
file|<bits/valarray_after.h>
include|#
directive|include
file|<bits/slice_array.h>
include|#
directive|include
file|<bits/gslice.h>
include|#
directive|include
file|<bits/gslice_array.h>
include|#
directive|include
file|<bits/mask_array.h>
include|#
directive|include
file|<bits/indirect_array.h>
name|_GLIBCXX_BEGIN_NAMESPACE
argument_list|(
name|std
argument_list|)
name|template
decl|<
name|typename
name|_Tp
decl|>
specifier|inline
namespace|valarray
namespace|<
name|_Tp
namespace|>::
name|valarray
namespace|(
decl_stmt|) : _M_size(0
end_decl_stmt

begin_operator
unit|)
operator|,
end_operator

begin_macro
name|_M_data
argument_list|(
literal|0
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
argument|size_t __n
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__n
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(__n)
argument_list|)
block|{
name|std
operator|::
name|__valarray_default_construct
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|__n
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
argument|const _Tp& __t
argument_list|,
argument|size_t __n
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__n
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(__n)
argument_list|)
block|{
name|std
operator|::
name|__valarray_fill_construct
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|__n
argument_list|,
name|__t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
argument|const _Tp* __restrict__ __p
argument_list|,
argument|size_t __n
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__n
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(__n)
argument_list|)
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|__p
operator|!=
literal|0
operator|||
name|__n
operator|==
literal|0
argument_list|)
block|;
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|__p
argument_list|,
name|__p
operator|+
name|__n
argument_list|,
name|_M_data
argument_list|)
block|;      }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__v
operator|.
name|_M_size
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(__v._M_size)
argument_list|)
block|{
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|__v
operator|.
name|_M_data
argument_list|,
name|__v
operator|.
name|_M_data
operator|+
name|_M_size
argument_list|,
name|_M_data
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|slice_array
operator|<
name|_Tp
operator|>
operator|&
name|__sa
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__sa
operator|.
name|_M_sz
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(__sa._M_sz)
argument_list|)
block|{
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|__sa
operator|.
name|_M_array
argument_list|,
name|__sa
operator|.
name|_M_sz
argument_list|,
name|__sa
operator|.
name|_M_stride
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
name|__ga
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__ga
operator|.
name|_M_index
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(_M_size)
argument_list|)
block|{
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|__ga
operator|.
name|_M_array
argument_list|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|__ga
operator|.
name|_M_index
operator|)
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|mask_array
operator|<
name|_Tp
operator|>
operator|&
name|__ma
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__ma
operator|.
name|_M_sz
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(__ma._M_sz)
argument_list|)
block|{
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|__ma
operator|.
name|_M_array
argument_list|,
name|__ma
operator|.
name|_M_mask
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|indirect_array
operator|<
name|_Tp
operator|>
operator|&
name|__ia
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__ia
operator|.
name|_M_sz
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(__ia._M_sz)
argument_list|)
block|{
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|__ia
operator|.
name|_M_array
argument_list|,
name|__ia
operator|.
name|_M_index
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|class
name|_Dom
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|_Expr
operator|<
name|_Dom
argument_list|,
name|_Tp
operator|>
operator|&
name|__e
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__e
operator|.
name|size
argument_list|()
argument_list|)
operator|,
name|_M_data
argument_list|(
argument|__valarray_get_storage<_Tp>(_M_size)
argument_list|)
block|{
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|__e
argument_list|,
name|_M_size
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
operator|~
name|valarray
argument_list|()
block|{
name|std
operator|::
name|__valarray_destroy_elements
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|)
block|;
name|std
operator|::
name|__valarray_release_memory
argument_list|(
name|_M_data
argument_list|)
block|;     }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
operator|)
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|==
name|__v
operator|.
name|_M_size
argument_list|)
block|;
name|std
operator|::
name|__valarray_copy
argument_list|(
name|__v
operator|.
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|_M_data
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
block|{
name|std
operator|::
name|__valarray_fill
argument_list|(
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|__t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|slice_array
operator|<
name|_Tp
operator|>
operator|&
name|__sa
operator|)
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|==
name|__sa
operator|.
name|_M_sz
argument_list|)
block|;
name|std
operator|::
name|__valarray_copy
argument_list|(
name|__sa
operator|.
name|_M_array
argument_list|,
name|__sa
operator|.
name|_M_sz
argument_list|,
name|__sa
operator|.
name|_M_stride
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
name|__ga
operator|)
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|==
name|__ga
operator|.
name|_M_index
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|std
operator|::
name|__valarray_copy
argument_list|(
name|__ga
operator|.
name|_M_array
argument_list|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|__ga
operator|.
name|_M_index
operator|)
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|mask_array
operator|<
name|_Tp
operator|>
operator|&
name|__ma
operator|)
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|==
name|__ma
operator|.
name|_M_sz
argument_list|)
block|;
name|std
operator|::
name|__valarray_copy
argument_list|(
name|__ma
operator|.
name|_M_array
argument_list|,
name|__ma
operator|.
name|_M_mask
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|indirect_array
operator|<
name|_Tp
operator|>
operator|&
name|__ia
operator|)
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|==
name|__ia
operator|.
name|_M_sz
argument_list|)
block|;
name|std
operator|::
name|__valarray_copy
argument_list|(
name|__ia
operator|.
name|_M_array
argument_list|,
name|__ia
operator|.
name|_M_index
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|class
name|_Dom
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
name|__e
operator|)
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|==
name|__e
operator|.
name|size
argument_list|()
argument_list|)
block|;
name|std
operator|::
name|__valarray_copy
argument_list|(
name|__e
argument_list|,
name|_M_size
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_SClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|slice
name|__s
operator|)
specifier|const
block|{
typedef|typedef
name|_SClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|__s
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|slice_array
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|slice
name|__s
operator|)
block|{
return|return
name|slice_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__s
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_GClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
name|__gs
operator|)
specifier|const
block|{
typedef|typedef
name|_GClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|__gs
operator|.
name|_M_index
operator|->
name|_M_index
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|gslice_array
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
name|__gs
operator|)
block|{
return|return
name|gslice_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__gs
operator|.
name|_M_index
operator|->
name|_M_index
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
name|__m
operator|)
specifier|const
block|{
name|size_t
name|__s
operator|=
literal|0
block|;
name|size_t
name|__e
operator|=
name|__m
operator|.
name|size
argument_list|()
block|;
for|for
control|(
name|size_t
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__e
condition|;
operator|++
name|__i
control|)
if|if
condition|(
name|__m
index|[
name|__i
index|]
condition|)
operator|++
name|__s
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|valarray
operator|<
name|_Tp
operator|>
operator|(
name|mask_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__s
operator|,
name|_Array
operator|<
name|bool
operator|>
operator|(
name|__m
operator|)
operator|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|mask_array
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
name|__m
operator|)
block|{
name|size_t
name|__s
operator|=
literal|0
block|;
name|size_t
name|__e
operator|=
name|__m
operator|.
name|size
argument_list|()
block|;
for|for
control|(
name|size_t
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__e
condition|;
operator|++
name|__i
control|)
if|if
condition|(
name|__m
index|[
name|__i
index|]
condition|)
operator|++
name|__s
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|mask_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__s
operator|,
name|_Array
operator|<
name|bool
operator|>
operator|(
name|__m
operator|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_IClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
operator|)
specifier|const
block|{
typedef|typedef
name|_IClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
operator|*
name|this
argument_list|,
name|__i
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|indirect_array
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
operator|)
block|{
return|return
name|indirect_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__i
operator|.
name|size
argument_list|()
operator|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|__i
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|size_t
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_size
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|_Tp
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|sum
argument_list|()
specifier|const
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|>
literal|0
argument_list|)
block|;
return|return
name|std
operator|::
name|__valarray_sum
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|shift
argument_list|(
argument|int __n
argument_list|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__ret
block|;
if|if
condition|(
name|_M_size
operator|==
literal|0
condition|)
return|return
name|__ret
return|;
name|_Tp
operator|*
name|__restrict__
name|__tmp_M_data
operator|=
name|std
operator|::
name|__valarray_get_storage
operator|<
name|_Tp
operator|>
operator|(
name|_M_size
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__n
operator|==
literal|0
condition|)
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|,
name|__tmp_M_data
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|__n
operator|>
literal|0
condition|)
comment|// shift left
block|{
if|if
condition|(
name|size_t
argument_list|(
name|__n
argument_list|)
operator|>
name|_M_size
condition|)
name|__n
operator|=
name|_M_size
expr_stmt|;
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|_M_data
operator|+
name|__n
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|,
name|__tmp_M_data
argument_list|)
expr_stmt|;
name|std
operator|::
name|__valarray_default_construct
argument_list|(
name|__tmp_M_data
operator|+
name|_M_size
operator|-
name|__n
argument_list|,
name|__tmp_M_data
operator|+
name|_M_size
argument_list|)
expr_stmt|;
block|}
else|else
comment|// shift right
block|{
if|if
condition|(
name|size_t
argument_list|(
operator|-
name|__n
argument_list|)
operator|>
name|_M_size
condition|)
name|__n
operator|=
operator|-
name|_M_size
expr_stmt|;
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
operator|+
name|__n
argument_list|,
name|__tmp_M_data
operator|-
name|__n
argument_list|)
expr_stmt|;
name|std
operator|::
name|__valarray_default_construct
argument_list|(
name|__tmp_M_data
argument_list|,
name|__tmp_M_data
operator|-
name|__n
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|__ret
operator|.
name|_M_size
operator|=
name|_M_size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__ret
operator|.
name|_M_data
operator|=
name|__tmp_M_data
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__ret
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|cshift
argument_list|(
argument|int __n
argument_list|)
specifier|const
block|{
name|valarray
operator|<
name|_Tp
operator|>
name|__ret
block|;
if|if
condition|(
name|_M_size
operator|==
literal|0
condition|)
return|return
name|__ret
return|;
name|_Tp
operator|*
name|__restrict__
name|__tmp_M_data
operator|=
name|std
operator|::
name|__valarray_get_storage
operator|<
name|_Tp
operator|>
operator|(
name|_M_size
operator|)
expr_stmt|;
end_expr_stmt

begin_if
if|if
condition|(
name|__n
operator|==
literal|0
condition|)
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|,
name|__tmp_M_data
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|__n
operator|>
literal|0
condition|)
comment|// cshift left
block|{
if|if
condition|(
name|size_t
argument_list|(
name|__n
argument_list|)
operator|>
name|_M_size
condition|)
name|__n
operator|=
name|__n
operator|%
name|_M_size
expr_stmt|;
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|__n
argument_list|,
name|__tmp_M_data
operator|+
name|_M_size
operator|-
name|__n
argument_list|)
expr_stmt|;
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|_M_data
operator|+
name|__n
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|,
name|__tmp_M_data
argument_list|)
expr_stmt|;
block|}
else|else
comment|// cshift right
block|{
if|if
condition|(
name|size_t
argument_list|(
operator|-
name|__n
argument_list|)
operator|>
name|_M_size
condition|)
name|__n
operator|=
operator|-
operator|(
name|size_t
argument_list|(
operator|-
name|__n
argument_list|)
operator|%
name|_M_size
operator|)
expr_stmt|;
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|_M_data
operator|+
name|_M_size
operator|+
name|__n
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|,
name|__tmp_M_data
argument_list|)
expr_stmt|;
name|std
operator|::
name|__valarray_copy_construct
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
operator|+
name|__n
argument_list|,
name|__tmp_M_data
operator|-
name|__n
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|__ret
operator|.
name|_M_size
operator|=
name|_M_size
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|__ret
operator|.
name|_M_data
operator|=
name|__tmp_M_data
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|__ret
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|void
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|resize
argument_list|(
argument|size_t __n
argument_list|,
argument|_Tp __c
argument_list|)
block|{
comment|// This complication is so to make valarray<valarray<T>> work
comment|// even though it is not required by the standard.  Nobody should
comment|// be saying valarray<valarray<T>> anyway.  See the specs.
name|std
operator|::
name|__valarray_destroy_elements
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|)
block|;
if|if
condition|(
name|_M_size
operator|!=
name|__n
condition|)
block|{
name|std
operator|::
name|__valarray_release_memory
argument_list|(
name|_M_data
argument_list|)
expr_stmt|;
name|_M_size
operator|=
name|__n
expr_stmt|;
name|_M_data
operator|=
name|__valarray_get_storage
operator|<
name|_Tp
operator|>
operator|(
name|__n
operator|)
expr_stmt|;
block|}
name|std
operator|::
name|__valarray_fill_construct
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|__n
argument_list|,
name|__c
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}        template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|min
argument_list|()
specifier|const
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|>
literal|0
argument_list|)
block|;
return|return
operator|*
name|std
operator|::
name|min_element
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|max
argument_list|()
specifier|const
block|{
name|_GLIBCXX_DEBUG_ASSERT
argument_list|(
name|_M_size
operator|>
literal|0
argument_list|)
block|;
return|return
operator|*
name|std
operator|::
name|max_element
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_ValFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|apply
argument_list|(
argument|_Tp func(_Tp)
argument_list|)
specifier|const
block|{
typedef|typedef
name|_ValFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
operator|*
name|this
argument_list|,
name|func
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}    template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_RefFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|apply
argument_list|(
argument|_Tp func(const _Tp&)
argument_list|)
specifier|const
block|{
typedef|typedef
name|_RefFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
operator|*
name|this
argument_list|,
name|func
argument_list|)
operator|)
return|;
end_return

begin_define
unit|}
define|#
directive|define
name|_DEFINE_VALARRAY_UNARY_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<typename _Tp>						\     inline typename valarray<_Tp>::template _UnaryOp<_Name>::_Rt      	\     valarray<_Tp>::operator _Op() const					\     {									\       typedef _UnClos<_Name, _ValArray, _Tp> _Closure;	                \       typedef typename __fun<_Name, _Tp>::result_type _Rt;              \       return _Expr<_Closure, _Rt>(_Closure(*this));			\     }
end_define

begin_expr_stmt
unit|_DEFINE_VALARRAY_UNARY_OPERATOR
operator|(
operator|+
operator|,
name|__unary_plus
operator|)
name|_DEFINE_VALARRAY_UNARY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|__negate
argument_list|)
name|_DEFINE_VALARRAY_UNARY_OPERATOR
argument_list|(
argument|~
argument_list|,
argument|__bitwise_not
argument_list|)
name|_DEFINE_VALARRAY_UNARY_OPERATOR
argument_list|(
argument|!
argument_list|,
argument|__logical_not
argument_list|)
undef|#
directive|undef
name|_DEFINE_VALARRAY_UNARY_OPERATOR
define|#
directive|define
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<class _Tp>							\     inline valarray<_Tp>&						\     valarray<_Tp>::operator _Op##=(const _Tp&__t)			\     {									\       _Array_augmented_##_Name(_Array<_Tp>(_M_data), _M_size, __t);	\       return *this;							\     }									\ 									\   template<class _Tp>							\     inline valarray<_Tp>&						\     valarray<_Tp>::operator _Op##=(const valarray<_Tp>&__v)		\     {									\       _GLIBCXX_DEBUG_ASSERT(_M_size == __v._M_size);                    \       _Array_augmented_##_Name(_Array<_Tp>(_M_data), _M_size, 		\ 			       _Array<_Tp>(__v._M_data));		\       return *this;							\     }
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|+
argument_list|,
argument|__plus
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|-
argument_list|,
argument|__minus
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|*
argument_list|,
argument|__multiplies
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|/
argument_list|,
argument|__divides
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|%
argument_list|,
argument|__modulus
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|^
argument_list|,
argument|__bitwise_xor
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|&
argument_list|,
argument|__bitwise_and
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument||
argument_list|,
argument|__bitwise_or
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|<<
argument_list|,
argument|__shift_left
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|>>
argument_list|,
argument|__shift_right
argument_list|)
undef|#
directive|undef
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
define|#
directive|define
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<class _Tp> template<class _Dom>				\     inline valarray<_Tp>&						\     valarray<_Tp>::operator _Op##=(const _Expr<_Dom, _Tp>& __e)		\     {									\       _Array_augmented_##_Name(_Array<_Tp>(_M_data), __e, _M_size);	\       return *this;							\     }
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|+
argument_list|,
argument|__plus
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|-
argument_list|,
argument|__minus
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|*
argument_list|,
argument|__multiplies
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|/
argument_list|,
argument|__divides
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|%
argument_list|,
argument|__modulus
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|^
argument_list|,
argument|__bitwise_xor
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|&
argument_list|,
argument|__bitwise_and
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument||
argument_list|,
argument|__bitwise_or
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|<<
argument_list|,
argument|__shift_left
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|>>
argument_list|,
argument|__shift_right
argument_list|)
undef|#
directive|undef
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
define|#
directive|define
name|_DEFINE_BINARY_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<typename _Tp>						\     inline _Expr<_BinClos<_Name, _ValArray, _ValArray, _Tp, _Tp>,       \                  typename __fun<_Name, _Tp>::result_type>               \     operator _Op(const valarray<_Tp>& __v, const valarray<_Tp>& __w)	\     {									\       _GLIBCXX_DEBUG_ASSERT(__v.size() == __w.size());                  \       typedef _BinClos<_Name, _ValArray, _ValArray, _Tp, _Tp> _Closure; \       typedef typename __fun<_Name, _Tp>::result_type _Rt;              \       return _Expr<_Closure, _Rt>(_Closure(__v, __w));                  \     }									\ 									\   template<typename _Tp>						\     inline _Expr<_BinClos<_Name, _ValArray,_Constant, _Tp, _Tp>,        \                  typename __fun<_Name, _Tp>::result_type>               \     operator _Op(const valarray<_Tp>& __v, const _Tp& __t)		\     {									\       typedef _BinClos<_Name, _ValArray, _Constant, _Tp, _Tp> _Closure;	\       typedef typename __fun<_Name, _Tp>::result_type _Rt;              \       return _Expr<_Closure, _Rt>(_Closure(__v, __t));	                \     }									\ 									\   template<typename _Tp>						\     inline _Expr<_BinClos<_Name, _Constant, _ValArray, _Tp, _Tp>,       \                  typename __fun<_Name, _Tp>::result_type>               \     operator _Op(const _Tp& __t, const valarray<_Tp>& __v)		\     {									\       typedef _BinClos<_Name, _Constant, _ValArray, _Tp, _Tp> _Closure; \       typedef typename __fun<_Name, _Tp>::result_type _Rt;              \       return _Expr<_Closure, _Rt>(_Closure(__t, __v));        	        \     }
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|+
argument_list|,
argument|__plus
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|__minus
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|*
argument_list|,
argument|__multiplies
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|/
argument_list|,
argument|__divides
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|%
argument_list|,
argument|__modulus
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|^
argument_list|,
argument|__bitwise_xor
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|&
argument_list|,
argument|__bitwise_and
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument||
argument_list|,
argument|__bitwise_or
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|<<
argument_list|,
argument|__shift_left
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|>>
argument_list|,
argument|__shift_right
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|&&
argument_list|,
argument|__logical_and
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|||
argument_list|,
argument|__logical_or
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|==
argument_list|,
argument|__equal_to
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|!=
argument_list|,
argument|__not_equal_to
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|<
argument_list|,
argument|__less
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|>
argument_list|,
argument|__greater
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|<=
argument_list|,
argument|__less_equal
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|>=
argument_list|,
argument|__greater_equal
argument_list|)
undef|#
directive|undef
name|_DEFINE_BINARY_OPERATOR
name|_GLIBCXX_END_NAMESPACE
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _GLIBCXX_VALARRAY */
end_comment

end_unit

