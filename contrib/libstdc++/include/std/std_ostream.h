begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Output streams -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO C++ 14882: 27.6.2  Output streams
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file ostream  *  This is a Standard C++ Library header.  You should @c #include this header  *  in your programs, rather than any of the "st[dl]_*.h" implementation files.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CPP_OSTREAM
end_ifndef

begin_define
define|#
directive|define
name|_CPP_OSTREAM
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<ios>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
comment|// 27.6.2.1 Template class basic_ostream
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_ostream
operator|:
name|virtual
name|public
name|basic_ios
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
block|{
name|public
operator|:
comment|// Types (inherited from basic_ios (27.4.4)):
typedef|typedef
name|_CharT
name|char_type
typedef|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|int_type
name|int_type
expr_stmt|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|pos_type
name|pos_type
expr_stmt|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|off_type
name|off_type
expr_stmt|;
typedef|typedef
name|_Traits
name|traits_type
typedef|;
comment|// Non-standard Types:
typedef|typedef
name|basic_streambuf
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__streambuf_type
expr_stmt|;
typedef|typedef
name|basic_ios
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__ios_type
expr_stmt|;
typedef|typedef
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__ostream_type
expr_stmt|;
typedef|typedef
name|ostreambuf_iterator
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__ostreambuf_iter
expr_stmt|;
typedef|typedef
name|num_put
operator|<
name|_CharT
operator|,
name|__ostreambuf_iter
operator|>
name|__numput_type
expr_stmt|;
typedef|typedef
name|ctype
operator|<
name|_CharT
operator|>
name|__ctype_type
expr_stmt|;
comment|// 27.6.2.2 Constructor/destructor:
name|explicit
name|basic_ostream
parameter_list|(
name|__streambuf_type
modifier|*
name|__sb
parameter_list|)
block|{
name|this
operator|->
name|init
argument_list|(
name|__sb
argument_list|)
expr_stmt|;
block|}
name|virtual
operator|~
name|basic_ostream
argument_list|()
block|{ }
comment|// 27.6.2.3 Prefix/suffix:
name|class
name|sentry
expr_stmt|;
name|friend
name|class
name|sentry
decl_stmt|;
comment|// 27.6.2.5 Formatted output:
comment|// 27.6.2.5.3  basic_ostream::operator<<
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|__ostream_type
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|__ostream_type
operator|&
argument_list|)
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|__ios_type
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|__ios_type
operator|&
argument_list|)
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|ios_base
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|ios_base
operator|&
argument_list|)
operator|)
expr_stmt|;
comment|// 27.6.2.5.2 Arithmetic Inserters
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|long
name|__n
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|__n
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|bool
name|__n
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|short
name|__n
operator|)
block|{
name|ios_base
operator|::
name|fmtflags
name|__fmt
operator|=
name|this
operator|->
name|flags
argument_list|()
operator|&
name|ios_base
operator|::
name|basefield
block|;
if|if
condition|(
name|__fmt
operator|&
name|ios_base
operator|::
name|oct
operator|||
name|__fmt
operator|&
name|ios_base
operator|::
name|hex
condition|)
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
name|__n
operator|)
operator|)
operator|)
return|;
else|else
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|long
operator|>
operator|(
name|__n
operator|)
operator|)
return|;
block|}
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|short
name|__n
operator|)
block|{
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|__n
operator|)
operator|)
return|;
block|}
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|int
name|__n
operator|)
block|{
name|ios_base
operator|::
name|fmtflags
name|__fmt
operator|=
name|this
operator|->
name|flags
argument_list|()
operator|&
name|ios_base
operator|::
name|basefield
block|;
if|if
condition|(
name|__fmt
operator|&
name|ios_base
operator|::
name|oct
operator|||
name|__fmt
operator|&
name|ios_base
operator|::
name|hex
condition|)
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
name|__n
operator|)
operator|)
operator|)
return|;
else|else
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|long
operator|>
operator|(
name|__n
operator|)
operator|)
return|;
block|}
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|int
name|__n
operator|)
block|{
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
name|__n
operator|)
operator|)
return|;
block|}
ifdef|#
directive|ifdef
name|_GLIBCPP_USE_LONG_LONG
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|long
name|long
name|__n
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|unsigned
name|long
name|long
name|__n
operator|)
expr_stmt|;
endif|#
directive|endif
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|double
name|__f
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|float
name|__f
operator|)
block|{
return|return
name|this
operator|->
name|operator
operator|<<
operator|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__f
operator|)
operator|)
return|;
block|}
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|long
name|double
name|__f
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|void
operator|*
name|__p
operator|)
expr_stmt|;
name|__ostream_type
operator|&
name|operator
operator|<<
operator|(
name|__streambuf_type
operator|*
name|__sb
operator|)
expr_stmt|;
comment|// Unformatted output:
name|__ostream_type
modifier|&
name|put
parameter_list|(
name|char_type
name|__c
parameter_list|)
function_decl|;
name|__ostream_type
modifier|&
name|write
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
function_decl|;
name|__ostream_type
modifier|&
name|flush
parameter_list|()
function_decl|;
comment|// Seeks:
name|pos_type
name|tellp
parameter_list|()
function_decl|;
name|__ostream_type
modifier|&
name|seekp
parameter_list|(
name|pos_type
parameter_list|)
function_decl|;
name|__ostream_type
modifier|&
name|seekp
argument_list|(
name|off_type
argument_list|,
name|ios_base
operator|::
name|seekdir
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// 27.6.2.3  Class basic_ostream::sentry
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|::
name|sentry
block|{
comment|// Data Members:
name|bool
name|_M_ok
block|;
name|basic_ostream
operator|<
name|_CharT
block|,
name|_Traits
operator|>
operator|&
name|_M_os
block|;
name|public
operator|:
name|explicit
name|sentry
argument_list|(
name|basic_ostream
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|&
name|__os
argument_list|)
block|;
operator|~
name|sentry
argument_list|()
block|{
comment|// XXX MT
if|if
condition|(
name|_M_os
operator|.
name|flags
argument_list|()
operator|&
name|ios_base
operator|::
name|unitbuf
operator|&&
operator|!
name|uncaught_exception
argument_list|()
condition|)
block|{
comment|// Can't call flush directly or else will get into recursive lock.
if|if
condition|(
name|_M_os
operator|.
name|rdbuf
argument_list|()
operator|&&
name|_M_os
operator|.
name|rdbuf
argument_list|()
operator|->
name|pubsync
argument_list|()
operator|==
operator|-
literal|1
condition|)
name|_M_os
operator|.
name|setstate
argument_list|(
name|ios_base
operator|::
name|badbit
argument_list|)
expr_stmt|;
block|}
block|}
name|operator
name|bool
argument_list|()
block|{
return|return
name|_M_ok
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|_CharT
name|__c
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|char
name|__c
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|__out
operator|.
name|widen
argument_list|(
name|__c
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Specialization
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|char
name|__c
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Signed and unsigned
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|signed
name|char
name|__c
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|static_cast
operator|<
name|char
operator|>
operator|(
name|__c
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
name|unsigned
name|char
name|__c
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|static_cast
operator|<
name|char
operator|>
operator|(
name|__c
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|_CharT
operator|*
name|__s
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|char
operator|*
name|__s
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Partial specializationss
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|char
operator|*
name|__s
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
comment|// Signed and unsigned
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|signed
name|char
operator|*
name|__s
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|__s
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|<<
operator|(
name|basic_ostream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__out
operator|,
specifier|const
name|unsigned
name|char
operator|*
name|__s
operator|)
block|{
return|return
operator|(
name|__out
operator|<<
name|reinterpret_cast
operator|<
specifier|const
name|char
operator|*
operator|>
operator|(
name|__s
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// 27.6.2.7 Standard basic_ostream manipulators
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|endl
argument_list|(
argument|basic_ostream<_CharT
argument_list|,
argument|_Traits>& __os
argument_list|)
block|{
return|return
name|flush
argument_list|(
name|__os
operator|.
name|put
argument_list|(
name|__os
operator|.
name|widen
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|ends
argument_list|(
argument|basic_ostream<_CharT
argument_list|,
argument|_Traits>& __os
argument_list|)
block|{
return|return
name|__os
operator|.
name|put
argument_list|(
name|_CharT
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|flush
argument_list|(
argument|basic_ostream<_CharT
argument_list|,
argument|_Traits>& __os
argument_list|)
block|{
return|return
name|__os
operator|.
name|flush
argument_list|()
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// namespace std
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCPP_NO_TEMPLATE_EXPORT
end_ifdef

begin_define
define|#
directive|define
name|export
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCPP_FULLY_COMPLIANT_HEADERS
end_ifdef

begin_include
include|#
directive|include
file|<bits/ostream.tcc>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CPP_OSTREAM */
end_comment

end_unit

