begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Input streams -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2001, 2002 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO C++ 14882: 27.6.1  Input streams
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file istream  *  This is a Standard C++ Library header.  You should @c #include this header  *  in your programs, rather than any of the "st[dl]_*.h" implementation files.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CPP_ISTREAM
end_ifndef

begin_define
define|#
directive|define
name|_CPP_ISTREAM
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<ios>
end_include

begin_include
include|#
directive|include
file|<limits>
end_include

begin_comment
comment|// For numeric_limits
end_comment

begin_decl_stmt
name|namespace
name|std
block|{
comment|// 27.6.1.1 Template class basic_istream
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_istream
operator|:
name|virtual
name|public
name|basic_ios
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
block|{
name|public
operator|:
comment|// Types (inherited from basic_ios (27.4.4)):
typedef|typedef
name|_CharT
name|char_type
typedef|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|int_type
name|int_type
expr_stmt|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|pos_type
name|pos_type
expr_stmt|;
typedef|typedef
name|typename
name|_Traits
operator|::
name|off_type
name|off_type
expr_stmt|;
typedef|typedef
name|_Traits
name|traits_type
typedef|;
comment|// Non-standard Types:
typedef|typedef
name|basic_streambuf
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__streambuf_type
expr_stmt|;
typedef|typedef
name|basic_ios
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__ios_type
expr_stmt|;
typedef|typedef
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__istream_type
expr_stmt|;
typedef|typedef
name|istreambuf_iterator
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__istreambuf_iter
expr_stmt|;
typedef|typedef
name|num_get
operator|<
name|_CharT
operator|,
name|__istreambuf_iter
operator|>
name|__numget_type
expr_stmt|;
typedef|typedef
name|ctype
operator|<
name|_CharT
operator|>
name|__ctype_type
expr_stmt|;
name|protected
label|:
comment|// Data Members:
name|streamsize
name|_M_gcount
decl_stmt|;
name|public
label|:
comment|// 27.6.1.1.1 Constructor/destructor:
name|explicit
name|basic_istream
parameter_list|(
name|__streambuf_type
modifier|*
name|__sb
parameter_list|)
block|{
name|this
operator|->
name|init
argument_list|(
name|__sb
argument_list|)
expr_stmt|;
name|_M_gcount
operator|=
name|streamsize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|virtual
operator|~
name|basic_istream
argument_list|()
block|{
name|_M_gcount
operator|=
name|streamsize
argument_list|(
literal|0
argument_list|)
block|; }
comment|// 27.6.1.1.2 Prefix/suffix:
name|class
name|sentry
expr_stmt|;
name|friend
name|class
name|sentry
decl_stmt|;
comment|// 27.6.1.2 Formatted input:
comment|// 27.6.1.2.3 basic_istream::operator>>
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|__istream_type
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|__istream_type
operator|&
argument_list|)
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|__ios_type
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|__ios_type
operator|&
argument_list|)
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|ios_base
operator|&
call|(
modifier|*
name|__pf
call|)
argument_list|(
name|ios_base
operator|&
argument_list|)
operator|)
expr_stmt|;
comment|// 27.6.1.2.2 Arithmetic Extractors
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|bool
operator|&
name|__n
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|short
operator|&
name|__n
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|short
operator|&
name|__n
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|int
operator|&
name|__n
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|int
operator|&
name|__n
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|long
operator|&
name|__n
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|long
operator|&
name|__n
operator|)
expr_stmt|;
ifdef|#
directive|ifdef
name|_GLIBCPP_USE_LONG_LONG
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|long
name|long
operator|&
name|__n
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|unsigned
name|long
name|long
operator|&
name|__n
operator|)
expr_stmt|;
endif|#
directive|endif
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|float
operator|&
name|__f
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|double
operator|&
name|__f
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|long
name|double
operator|&
name|__f
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|void
operator|*
operator|&
name|__p
operator|)
expr_stmt|;
name|__istream_type
operator|&
name|operator
operator|>>
operator|(
name|__streambuf_type
operator|*
name|__sb
operator|)
expr_stmt|;
comment|// 27.6.1.3 Unformatted input:
specifier|inline
name|streamsize
name|gcount
argument_list|(
name|void
argument_list|)
decl|const
block|{
return|return
name|_M_gcount
return|;
block|}
name|int_type
name|get
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|__istream_type
modifier|&
name|get
parameter_list|(
name|char_type
modifier|&
name|__c
parameter_list|)
function_decl|;
name|__istream_type
modifier|&
name|get
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|,
name|char_type
name|__delim
parameter_list|)
function_decl|;
specifier|inline
name|__istream_type
modifier|&
name|get
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|get
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|,
name|this
operator|->
name|widen
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
return|;
block|}
name|__istream_type
modifier|&
name|get
parameter_list|(
name|__streambuf_type
modifier|&
name|__sb
parameter_list|,
name|char_type
name|__delim
parameter_list|)
function_decl|;
specifier|inline
name|__istream_type
modifier|&
name|get
parameter_list|(
name|__streambuf_type
modifier|&
name|__sb
parameter_list|)
block|{
return|return
name|this
operator|->
name|get
argument_list|(
name|__sb
argument_list|,
name|this
operator|->
name|widen
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
return|;
block|}
name|__istream_type
modifier|&
name|getline
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|,
name|char_type
name|__delim
parameter_list|)
function_decl|;
specifier|inline
name|__istream_type
modifier|&
name|getline
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|getline
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|,
name|this
operator|->
name|widen
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
return|;
block|}
name|__istream_type
modifier|&
name|ignore
parameter_list|(
name|streamsize
name|__n
init|=
literal|1
parameter_list|,
name|int_type
name|__delim
init|=
name|traits_type
operator|::
name|eof
argument_list|()
parameter_list|)
function_decl|;
name|int_type
name|peek
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|__istream_type
modifier|&
name|read
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
function_decl|;
name|streamsize
name|readsome
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
function_decl|;
name|__istream_type
modifier|&
name|putback
parameter_list|(
name|char_type
name|__c
parameter_list|)
function_decl|;
name|__istream_type
modifier|&
name|unget
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|int
name|sync
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|pos_type
name|tellg
parameter_list|(
name|void
parameter_list|)
function_decl|;
name|__istream_type
modifier|&
name|seekg
parameter_list|(
name|pos_type
parameter_list|)
function_decl|;
name|__istream_type
modifier|&
name|seekg
argument_list|(
name|off_type
argument_list|,
name|ios_base
operator|::
name|seekdir
argument_list|)
decl_stmt|;
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|::
name|sentry
block|{
name|public
operator|:
typedef|typedef
name|_Traits
name|traits_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|basic_streambuf
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__streambuf_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__istream_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|__istream_type
operator|::
name|__ctype_type
name|__ctype_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|int_type
name|__int_type
expr_stmt|;
end_typedef

begin_decl_stmt
name|explicit
name|sentry
argument_list|(
name|basic_istream
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|&
name|__is
argument_list|,
name|bool
name|__noskipws
operator|=
name|false
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
name|operator
name|bool
parameter_list|()
block|{
return|return
name|_M_ok
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|bool
name|_M_ok
decl_stmt|;
end_decl_stmt

begin_comment
unit|};
comment|// 27.6.1.2.3 Character extraction templates
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|>>
operator|(
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__in
operator|,
name|_CharT
operator|&
name|__c
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_istream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|>>
operator|(
name|basic_istream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__in
operator|,
name|unsigned
name|char
operator|&
name|__c
operator|)
block|{
return|return
operator|(
name|__in
operator|>>
name|reinterpret_cast
operator|<
name|char
operator|&
operator|>
operator|(
name|__c
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_istream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|>>
operator|(
name|basic_istream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__in
operator|,
name|signed
name|char
operator|&
name|__c
operator|)
block|{
return|return
operator|(
name|__in
operator|>>
name|reinterpret_cast
operator|<
name|char
operator|&
operator|>
operator|(
name|__c
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|>>
operator|(
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|__in
operator|,
name|_CharT
operator|*
name|__s
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_istream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|>>
operator|(
name|basic_istream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__in
operator|,
name|unsigned
name|char
operator|*
name|__s
operator|)
block|{
return|return
operator|(
name|__in
operator|>>
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|__s
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Traits
operator|>
name|basic_istream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|operator
operator|>>
operator|(
name|basic_istream
operator|<
name|char
operator|,
name|_Traits
operator|>
operator|&
name|__in
operator|,
name|signed
name|char
operator|*
name|__s
operator|)
block|{
return|return
operator|(
name|__in
operator|>>
name|reinterpret_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|__s
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// 27.6.1.5 Template class basic_iostream
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_iostream
operator|:
name|public
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|,
name|public
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
block|{
name|public
operator|:
ifdef|#
directive|ifdef
name|_GLIBCPP_RESOLVE_LIB_DEFECTS
comment|// 271. basic_iostream missing typedefs
comment|// Types (inherited):
typedef|typedef
name|_CharT
name|char_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|int_type
name|int_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|pos_type
name|pos_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|_Traits
operator|::
name|off_type
name|off_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|_Traits
name|traits_type
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// Non-standard Types:
end_comment

begin_typedef
typedef|typedef
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__istream_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|basic_ostream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
name|__ostream_type
expr_stmt|;
end_typedef

begin_decl_stmt
name|explicit
name|basic_iostream
argument_list|(
name|basic_streambuf
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|*
name|__sb
argument_list|)
range|:
name|__istream_type
argument_list|(
name|__sb
argument_list|)
decl_stmt|,
name|__ostream_type
argument_list|(
name|__sb
argument_list|)
block|{ }
end_decl_stmt

begin_expr_stmt
name|virtual
operator|~
name|basic_iostream
argument_list|()
block|{ }
end_expr_stmt

begin_comment
unit|};
comment|// 27.6.1.4 Standard basic_istream manipulators
end_comment

begin_expr_stmt
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|basic_istream
operator|<
name|_CharT
operator|,
name|_Traits
operator|>
operator|&
name|ws
argument_list|(
name|basic_istream
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|&
name|__is
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// namespace std
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCPP_NO_TEMPLATE_EXPORT
end_ifdef

begin_define
define|#
directive|define
name|export
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCPP_FULLY_COMPLIANT_HEADERS
end_ifdef

begin_include
include|#
directive|include
file|<bits/istream.tcc>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _CPP_ISTREAM */
end_comment

end_unit

