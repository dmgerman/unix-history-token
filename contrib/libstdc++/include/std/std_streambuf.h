begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Stream buffer classes -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO C++ 14882: 27.5  Stream buffers
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file streambuf  *  This is a Standard C++ Library header.  You should @c #include this header  *  in your programs, rather than any of the "st[dl]_*.h" implementation files.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CPP_STREAMBUF
end_ifndef

begin_define
define|#
directive|define
name|_CPP_STREAMBUF
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<bits/c++config.h>
end_include

begin_include
include|#
directive|include
file|<iosfwd>
end_include

begin_include
include|#
directive|include
file|<cstdio>
end_include

begin_comment
comment|// For SEEK_SET, SEEK_CUR, SEEK_END
end_comment

begin_include
include|#
directive|include
file|<bits/localefwd.h>
end_include

begin_include
include|#
directive|include
file|<bits/ios_base.h>
end_include

begin_decl_stmt
name|namespace
name|std
block|{
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|streamsize
name|__copy_streambufs
argument_list|(
name|basic_ios
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|&
name|_ios
argument_list|,
name|basic_streambuf
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|*
name|__sbin
argument_list|,
name|basic_streambuf
operator|<
name|_CharT
argument_list|,
name|_Traits
operator|>
operator|*
name|__sbout
argument_list|)
expr_stmt|;
comment|// 27.5.2 Template class basic_streambuf<_CharT, _Traits>
name|template
operator|<
name|typename
name|_CharT
operator|,
name|typename
name|_Traits
operator|>
name|class
name|basic_streambuf
block|{
name|public
operator|:
comment|// Types:
typedef|typedef
name|_CharT
name|char_type
typedef|;
typedef|typedef
name|_Traits
name|traits_type
typedef|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|int_type
name|int_type
expr_stmt|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|pos_type
name|pos_type
expr_stmt|;
typedef|typedef
name|typename
name|traits_type
operator|::
name|off_type
name|off_type
expr_stmt|;
comment|// Non-standard Types:
typedef|typedef
name|ctype
operator|<
name|char_type
operator|>
name|__ctype_type
expr_stmt|;
typedef|typedef
name|basic_streambuf
operator|<
name|char_type
operator|,
name|traits_type
operator|>
name|__streambuf_type
expr_stmt|;
name|friend
name|class
name|basic_ios
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|class
name|basic_istream
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|class
name|basic_ostream
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|class
name|istreambuf_iterator
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|class
name|ostreambuf_iterator
operator|<
name|char_type
operator|,
name|traits_type
operator|>
expr_stmt|;
name|friend
name|streamsize
name|__copy_streambufs
operator|<
operator|>
operator|(
name|basic_ios
operator|<
name|char_type
operator|,
name|traits_type
operator|>
operator|&
name|__ios
operator|,
name|__streambuf_type
operator|*
name|__sbin
operator|,
name|__streambuf_type
operator|*
name|__sbout
operator|)
expr_stmt|;
name|protected
label|:
comment|// Pointer to the beginning of internally-allocated
comment|// space. Filebuf manually allocates/deallocates this, whereas
comment|// stringstreams attempt to use the built-in intelligence of the
comment|// string class. If you are managing memory, set this. If not,
comment|// leave it NULL.
name|char_type
modifier|*
name|_M_buf
decl_stmt|;
comment|// Actual size of allocated internal buffer, in bytes.
name|int_type
name|_M_buf_size
decl_stmt|;
comment|// Optimal or preferred size of internal buffer, in bytes.
name|int_type
name|_M_buf_size_opt
decl_stmt|;
comment|// True iff _M_in_* and _M_out_* buffers should always point to
comment|// the same place.  True for fstreams, false for sstreams.
name|bool
name|_M_buf_unified
decl_stmt|;
comment|// This is based on _IO_FILE, just reordered to be more
comment|// consistent, and is intended to be the most minimal abstraction
comment|// for an internal buffer.
comment|// get == input == read
comment|// put == output == write
name|char_type
modifier|*
name|_M_in_beg
decl_stmt|;
comment|// Start of get area.
name|char_type
modifier|*
name|_M_in_cur
decl_stmt|;
comment|// Current read area.
name|char_type
modifier|*
name|_M_in_end
decl_stmt|;
comment|// End of get area.
name|char_type
modifier|*
name|_M_out_beg
decl_stmt|;
comment|// Start of put area.
name|char_type
modifier|*
name|_M_out_cur
decl_stmt|;
comment|// Current put area.
name|char_type
modifier|*
name|_M_out_end
decl_stmt|;
comment|// End of put area.
comment|// Place to stash in || out || in | out settings for current streambuf.
name|ios_base
operator|::
name|openmode
name|_M_mode
expr_stmt|;
comment|// Current locale setting.
name|locale
name|_M_buf_locale
decl_stmt|;
comment|// True iff locale is initialized.
name|bool
name|_M_buf_locale_init
decl_stmt|;
comment|// Necessary bits for putback buffer management. Only used in
comment|// the basic_filebuf class, as necessary for the standard
comment|// requirements. The only basic_streambuf member function that
comment|// needs access to these data members is in_avail...
comment|// NB: pbacks of over one character are not currently supported.
specifier|static
specifier|const
name|int_type
name|_S_pback_size
init|=
literal|1
decl_stmt|;
name|char_type
name|_M_pback
index|[
name|_S_pback_size
index|]
decl_stmt|;
name|char_type
modifier|*
name|_M_pback_cur_save
decl_stmt|;
name|char_type
modifier|*
name|_M_pback_end_save
decl_stmt|;
name|bool
name|_M_pback_init
decl_stmt|;
comment|// Initializes pback buffers, and moves normal buffers to safety.
comment|// Assumptions:
comment|// _M_in_cur has already been moved back
name|void
name|_M_pback_create
parameter_list|()
block|{
if|if
condition|(
operator|!
name|_M_pback_init
condition|)
block|{
name|int_type
name|__dist
init|=
name|_M_in_end
operator|-
name|_M_in_cur
decl_stmt|;
name|int_type
name|__len
init|=
name|min
argument_list|(
name|_S_pback_size
argument_list|,
name|__dist
argument_list|)
decl_stmt|;
name|traits_type
operator|::
name|copy
argument_list|(
name|_M_pback
argument_list|,
name|_M_in_cur
argument_list|,
name|__len
argument_list|)
expr_stmt|;
name|_M_pback_cur_save
operator|=
name|_M_in_cur
expr_stmt|;
name|_M_pback_end_save
operator|=
name|_M_in_end
expr_stmt|;
name|this
operator|->
name|setg
argument_list|(
name|_M_pback
argument_list|,
name|_M_pback
argument_list|,
name|_M_pback
operator|+
name|__len
argument_list|)
expr_stmt|;
name|_M_pback_init
operator|=
name|true
expr_stmt|;
block|}
block|}
comment|// Deactivates pback buffer contents, and restores normal buffer.
comment|// Assumptions:
comment|// The pback buffer has only moved forward.
name|void
name|_M_pback_destroy
parameter_list|()
block|{
if|if
condition|(
name|_M_pback_init
condition|)
block|{
comment|// Length _M_in_cur moved in the pback buffer.
name|int_type
name|__off_cur
init|=
name|_M_in_cur
operator|-
name|_M_pback
decl_stmt|;
comment|// For in | out buffers, the end can be pushed back...
name|int_type
name|__off_end
init|=
literal|0
decl_stmt|;
name|int_type
name|__pback_len
init|=
name|_M_in_end
operator|-
name|_M_pback
decl_stmt|;
name|int_type
name|__save_len
init|=
name|_M_pback_end_save
operator|-
name|_M_buf
decl_stmt|;
if|if
condition|(
name|__pback_len
operator|>
name|__save_len
condition|)
name|__off_end
operator|=
name|__pback_len
operator|-
name|__save_len
expr_stmt|;
name|this
operator|->
name|setg
argument_list|(
name|_M_buf
argument_list|,
name|_M_pback_cur_save
operator|+
name|__off_cur
argument_list|,
name|_M_pback_end_save
operator|+
name|__off_end
argument_list|)
expr_stmt|;
name|_M_pback_cur_save
operator|=
name|NULL
expr_stmt|;
name|_M_pback_end_save
operator|=
name|NULL
expr_stmt|;
name|_M_pback_init
operator|=
name|false
expr_stmt|;
block|}
block|}
comment|// Correctly sets the _M_in_cur pointer, and bumps the
comment|// _M_out_cur pointer as well if necessary.
name|void
name|_M_in_cur_move
parameter_list|(
name|off_type
name|__n
parameter_list|)
comment|// argument needs to be +-
block|{
name|bool
name|__testout
init|=
name|_M_out_cur
decl_stmt|;
name|_M_in_cur
operator|+=
name|__n
expr_stmt|;
if|if
condition|(
name|__testout
operator|&&
name|_M_buf_unified
condition|)
name|_M_out_cur
operator|+=
name|__n
expr_stmt|;
block|}
comment|// Correctly sets the _M_out_cur pointer, and bumps the
comment|// appropriate _M_*_end pointers as well. Necessary for the
comment|// un-tied stringbufs, in in|out mode.
comment|// Invariant:
comment|// __n + _M_out_[cur, end]<= _M_buf + _M_buf_size
comment|// Assuming all _M_*_[beg, cur, end] pointers are operating on
comment|// the same range:
comment|// _M_buf<= _M_*_<= _M_buf + _M_buf_size
name|void
name|_M_out_cur_move
parameter_list|(
name|off_type
name|__n
parameter_list|)
comment|// argument needs to be +-
block|{
name|bool
name|__testin
init|=
name|_M_in_cur
decl_stmt|;
name|_M_out_cur
operator|+=
name|__n
expr_stmt|;
if|if
condition|(
name|__testin
operator|&&
name|_M_buf_unified
condition|)
name|_M_in_cur
operator|+=
name|__n
expr_stmt|;
if|if
condition|(
name|_M_out_cur
operator|>
name|_M_out_end
condition|)
block|{
name|_M_out_end
operator|=
name|_M_out_cur
expr_stmt|;
comment|// NB: in | out buffers drag the _M_in_end pointer along...
if|if
condition|(
name|__testin
condition|)
name|_M_in_end
operator|+=
name|__n
expr_stmt|;
block|}
block|}
comment|// Return the size of the output buffer.  This depends on the
comment|// buffer in use: allocated buffers have a stored size in
comment|// _M_buf_size and setbuf() buffers don't.
name|off_type
name|_M_out_buf_size
parameter_list|()
block|{
name|off_type
name|__ret
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|_M_out_cur
condition|)
block|{
comment|// Using allocated buffer.
if|if
condition|(
name|_M_out_beg
operator|==
name|_M_buf
condition|)
name|__ret
operator|=
name|_M_out_beg
operator|+
name|_M_buf_size
operator|-
name|_M_out_cur
expr_stmt|;
comment|// Using non-allocated buffer.
else|else
name|__ret
operator|=
name|_M_out_end
operator|-
name|_M_out_cur
expr_stmt|;
block|}
return|return
name|__ret
return|;
block|}
name|public
label|:
name|virtual
operator|~
name|basic_streambuf
argument_list|()
block|{
name|_M_buf_unified
operator|=
name|false
block|;
name|_M_buf_size
operator|=
literal|0
block|;
name|_M_buf_size_opt
operator|=
literal|0
block|;
name|_M_mode
operator|=
name|ios_base
operator|::
name|openmode
argument_list|(
literal|0
argument_list|)
block|;
name|_M_buf_locale_init
operator|=
name|false
block|;       }
comment|// Locales:
name|locale
name|pubimbue
argument_list|(
argument|const locale&__loc
argument_list|)
block|{
name|locale
name|__tmp
argument_list|(
name|this
operator|->
name|getloc
argument_list|()
argument_list|)
block|;
name|this
operator|->
name|imbue
argument_list|(
name|__loc
argument_list|)
block|;
return|return
name|__tmp
return|;
block|}
name|locale
name|getloc
argument_list|()
specifier|const
block|{
if|if
condition|(
name|_M_buf_locale_init
condition|)
return|return
name|_M_buf_locale
return|;
else|else
return|return
name|locale
argument_list|()
return|;
block|}
comment|// Buffer and positioning:
name|__streambuf_type
modifier|*
name|pubsetbuf
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|setbuf
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|)
return|;
block|}
name|pos_type
name|pubseekoff
argument_list|(
name|off_type
name|__off
argument_list|,
name|ios_base
operator|::
name|seekdir
name|__way
argument_list|,
name|ios_base
operator|::
name|openmode
name|__mode
operator|=
name|ios_base
operator|::
name|in
operator||
name|ios_base
operator|::
name|out
argument_list|)
block|{
return|return
name|this
operator|->
name|seekoff
argument_list|(
name|__off
argument_list|,
name|__way
argument_list|,
name|__mode
argument_list|)
return|;
block|}
name|pos_type
name|pubseekpos
argument_list|(
name|pos_type
name|__sp
argument_list|,
name|ios_base
operator|::
name|openmode
name|__mode
operator|=
name|ios_base
operator|::
name|in
operator||
name|ios_base
operator|::
name|out
argument_list|)
block|{
return|return
name|this
operator|->
name|seekpos
argument_list|(
name|__sp
argument_list|,
name|__mode
argument_list|)
return|;
block|}
name|int
name|pubsync
parameter_list|()
block|{
return|return
name|this
operator|->
name|sync
argument_list|()
return|;
block|}
comment|// Get and put areas:
comment|// Get area:
name|streamsize
name|in_avail
parameter_list|()
block|{
name|streamsize
name|__ret
decl_stmt|;
if|if
condition|(
name|_M_in_cur
operator|&&
name|_M_in_cur
operator|<
name|_M_in_end
condition|)
block|{
if|if
condition|(
name|_M_pback_init
condition|)
block|{
name|int_type
name|__save_len
init|=
name|_M_pback_end_save
operator|-
name|_M_pback_cur_save
decl_stmt|;
name|int_type
name|__pback_len
init|=
name|_M_in_cur
operator|-
name|_M_pback
decl_stmt|;
name|__ret
operator|=
name|__save_len
operator|-
name|__pback_len
expr_stmt|;
block|}
else|else
name|__ret
operator|=
name|this
operator|->
name|egptr
argument_list|()
operator|-
name|this
operator|->
name|gptr
argument_list|()
expr_stmt|;
block|}
else|else
name|__ret
operator|=
name|this
operator|->
name|showmanyc
argument_list|()
expr_stmt|;
return|return
name|__ret
return|;
block|}
name|int_type
name|snextc
parameter_list|()
block|{
name|int_type
name|__eof
init|=
name|traits_type
operator|::
name|eof
argument_list|()
decl_stmt|;
return|return
operator|(
name|this
operator|->
name|sbumpc
argument_list|()
operator|==
name|__eof
condition|?
name|__eof
else|:
name|this
operator|->
name|sgetc
argument_list|()
operator|)
return|;
block|}
name|int_type
name|sbumpc
parameter_list|()
function_decl|;
name|int_type
name|sgetc
parameter_list|()
block|{
name|int_type
name|__ret
decl_stmt|;
if|if
condition|(
name|_M_in_cur
operator|&&
name|_M_in_cur
operator|<
name|_M_in_end
condition|)
name|__ret
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
operator|*
operator|(
name|this
operator|->
name|gptr
argument_list|()
operator|)
argument_list|)
expr_stmt|;
else|else
name|__ret
operator|=
name|this
operator|->
name|underflow
argument_list|()
expr_stmt|;
return|return
name|__ret
return|;
block|}
name|streamsize
name|sgetn
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|xsgetn
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|)
return|;
block|}
comment|// Putback:
name|int_type
name|sputbackc
parameter_list|(
name|char_type
name|__c
parameter_list|)
function_decl|;
name|int_type
name|sungetc
parameter_list|()
function_decl|;
comment|// Put area:
name|int_type
name|sputc
parameter_list|(
name|char_type
name|__c
parameter_list|)
function_decl|;
name|streamsize
name|sputn
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
block|{
return|return
name|this
operator|->
name|xsputn
argument_list|(
name|__s
argument_list|,
name|__n
argument_list|)
return|;
block|}
name|protected
label|:
name|basic_streambuf
argument_list|()
operator|:
name|_M_buf
argument_list|(
name|NULL
argument_list|)
operator|,
name|_M_buf_size
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_buf_size_opt
argument_list|(
name|static_cast
operator|<
name|int_type
operator|>
operator|(
name|BUFSIZ
operator|)
argument_list|)
operator|,
name|_M_buf_unified
argument_list|(
name|false
argument_list|)
operator|,
name|_M_in_beg
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_in_cur
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_in_end
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_out_beg
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_out_cur
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_out_end
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_mode
argument_list|(
name|ios_base
operator|::
name|openmode
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|,
name|_M_buf_locale
argument_list|(
name|locale
argument_list|()
argument_list|)
operator|,
name|_M_buf_locale_init
argument_list|(
name|false
argument_list|)
operator|,
name|_M_pback_cur_save
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_pback_end_save
argument_list|(
literal|0
argument_list|)
operator|,
name|_M_pback_init
argument_list|(
argument|false
argument_list|)
block|{ }
comment|// Get area:
name|char_type
operator|*
name|eback
argument_list|()
specifier|const
block|{
return|return
name|_M_in_beg
return|;
block|}
name|char_type
operator|*
name|gptr
argument_list|()
specifier|const
block|{
return|return
name|_M_in_cur
return|;
block|}
name|char_type
operator|*
name|egptr
argument_list|()
specifier|const
block|{
return|return
name|_M_in_end
return|;
block|}
name|void
name|gbump
parameter_list|(
name|int
name|__n
parameter_list|)
block|{
name|_M_in_cur
operator|+=
name|__n
expr_stmt|;
block|}
name|void
name|setg
parameter_list|(
name|char_type
modifier|*
name|__gbeg
parameter_list|,
name|char_type
modifier|*
name|__gnext
parameter_list|,
name|char_type
modifier|*
name|__gend
parameter_list|)
block|{
name|_M_in_beg
operator|=
name|__gbeg
expr_stmt|;
name|_M_in_cur
operator|=
name|__gnext
expr_stmt|;
name|_M_in_end
operator|=
name|__gend
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_M_mode
operator|&
name|ios_base
operator|::
name|in
operator|)
operator|&&
name|__gbeg
operator|&&
name|__gnext
operator|&&
name|__gend
condition|)
name|_M_mode
operator|=
name|_M_mode
operator||
name|ios_base
operator|::
name|in
expr_stmt|;
block|}
comment|// Put area:
name|char_type
operator|*
name|pbase
argument_list|()
specifier|const
block|{
return|return
name|_M_out_beg
return|;
block|}
name|char_type
operator|*
name|pptr
argument_list|()
specifier|const
block|{
return|return
name|_M_out_cur
return|;
block|}
name|char_type
operator|*
name|epptr
argument_list|()
specifier|const
block|{
return|return
name|_M_out_end
return|;
block|}
name|void
name|pbump
parameter_list|(
name|int
name|__n
parameter_list|)
block|{
name|_M_out_cur
operator|+=
name|__n
expr_stmt|;
block|}
name|void
name|setp
parameter_list|(
name|char_type
modifier|*
name|__pbeg
parameter_list|,
name|char_type
modifier|*
name|__pend
parameter_list|)
block|{
name|_M_out_beg
operator|=
name|_M_out_cur
operator|=
name|__pbeg
expr_stmt|;
name|_M_out_end
operator|=
name|__pend
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|_M_mode
operator|&
name|ios_base
operator|::
name|out
operator|)
operator|&&
name|__pbeg
operator|&&
name|__pend
condition|)
name|_M_mode
operator|=
name|_M_mode
operator||
name|ios_base
operator|::
name|out
expr_stmt|;
block|}
comment|// Virtual functions:
comment|// Locales:
name|virtual
name|void
name|imbue
parameter_list|(
specifier|const
name|locale
modifier|&
name|__loc
parameter_list|)
block|{
name|_M_buf_locale_init
operator|=
name|true
expr_stmt|;
if|if
condition|(
name|_M_buf_locale
operator|!=
name|__loc
condition|)
name|_M_buf_locale
operator|=
name|__loc
expr_stmt|;
block|}
comment|// Buffer management and positioning:
name|virtual
name|basic_streambuf
operator|<
name|char_type
operator|,
name|_Traits
operator|>
operator|*
name|setbuf
argument_list|(
argument|char_type*
argument_list|,
argument|streamsize
argument_list|)
block|{
return|return
name|this
return|;
block|}
name|virtual
name|pos_type
name|seekoff
argument_list|(
name|off_type
argument_list|,
name|ios_base
operator|::
name|seekdir
argument_list|,
name|ios_base
operator|::
name|openmode
comment|/*__mode*/
operator|=
name|ios_base
operator|::
name|in
operator||
name|ios_base
operator|::
name|out
argument_list|)
block|{
return|return
name|pos_type
argument_list|(
name|off_type
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|virtual
name|pos_type
name|seekpos
argument_list|(
name|pos_type
argument_list|,
name|ios_base
operator|::
name|openmode
comment|/*__mode*/
operator|=
name|ios_base
operator|::
name|in
operator||
name|ios_base
operator|::
name|out
argument_list|)
block|{
return|return
name|pos_type
argument_list|(
name|off_type
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|virtual
name|int
name|sync
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
comment|// Get area:
name|virtual
name|streamsize
name|showmanyc
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
name|virtual
name|streamsize
name|xsgetn
parameter_list|(
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
function_decl|;
name|virtual
name|int_type
name|underflow
parameter_list|()
block|{
return|return
name|traits_type
operator|::
name|eof
argument_list|()
return|;
block|}
name|virtual
name|int_type
name|uflow
parameter_list|()
block|{
name|int_type
name|__ret
init|=
name|traits_type
operator|::
name|eof
argument_list|()
decl_stmt|;
name|bool
name|__testeof
init|=
name|this
operator|->
name|underflow
argument_list|()
operator|==
name|__ret
decl_stmt|;
name|bool
name|__testpending
init|=
name|_M_in_cur
operator|&&
name|_M_in_cur
operator|<
name|_M_in_end
decl_stmt|;
if|if
condition|(
operator|!
name|__testeof
operator|&&
name|__testpending
condition|)
block|{
name|__ret
operator|=
name|traits_type
operator|::
name|to_int_type
argument_list|(
operator|*
name|_M_in_cur
argument_list|)
expr_stmt|;
operator|++
name|_M_in_cur
expr_stmt|;
if|if
condition|(
name|_M_buf_unified
operator|&&
name|_M_mode
operator|&
name|ios_base
operator|::
name|out
condition|)
operator|++
name|_M_out_cur
expr_stmt|;
block|}
return|return
name|__ret
return|;
block|}
comment|// Putback:
name|virtual
name|int_type
name|pbackfail
parameter_list|(
name|int_type
comment|/* __c */
init|=
name|traits_type
operator|::
name|eof
argument_list|()
parameter_list|)
block|{
return|return
name|traits_type
operator|::
name|eof
argument_list|()
return|;
block|}
comment|// Put area:
name|virtual
name|streamsize
name|xsputn
parameter_list|(
specifier|const
name|char_type
modifier|*
name|__s
parameter_list|,
name|streamsize
name|__n
parameter_list|)
function_decl|;
name|virtual
name|int_type
name|overflow
parameter_list|(
name|int_type
comment|/* __c */
init|=
name|traits_type
operator|::
name|eof
argument_list|()
parameter_list|)
block|{
return|return
name|traits_type
operator|::
name|eof
argument_list|()
return|;
block|}
ifdef|#
directive|ifdef
name|_GLIBCPP_DEPRECATED
name|public
label|:
name|void
name|stossc
parameter_list|()
block|{
if|if
condition|(
name|_M_in_cur
operator|<
name|_M_in_end
condition|)
operator|++
name|_M_in_cur
expr_stmt|;
else|else
name|this
operator|->
name|uflow
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
ifdef|#
directive|ifdef
name|_GLIBCPP_RESOLVE_LIB_DEFECTS
comment|// Side effect of DR 50.
name|private
label|:
name|basic_streambuf
argument_list|(
argument|const __streambuf_type&
argument_list|)
block|{ }
empty_stmt|;
name|__streambuf_type
modifier|&
name|operator
init|=
operator|(
specifier|const
name|__streambuf_type
operator|&
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
empty_stmt|;
endif|#
directive|endif
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|// namespace std
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCPP_NO_TEMPLATE_EXPORT
end_ifdef

begin_define
define|#
directive|define
name|export
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCPP_FULLY_COMPLIANT_HEADERS
end_ifdef

begin_include
include|#
directive|include
file|<bits/streambuf.tcc>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

