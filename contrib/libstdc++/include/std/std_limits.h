begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- numeric_limits classes.
end_comment

begin_comment
comment|// Copyright (C) 1999, 2000, 2001, 2002 Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|// Note: this is not a conforming implementation.
end_comment

begin_comment
comment|// Written by Gabriel Dos Reis<gdr@codesourcery.com>
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO 14882:1998
end_comment

begin_comment
comment|// 18.2.1
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file limits  *  This is a Standard C++ Library header.  You should @c #include this header  *  in your programs, rather than any of the "st[dl]_*.h" implementation files.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CPP_NUMERIC_LIMITS
end_ifndef

begin_define
define|#
directive|define
name|_CPP_NUMERIC_LIMITS
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<bits/cpu_limits.h>
end_include

begin_include
include|#
directive|include
file|<bits/c++config.h>
end_include

begin_comment
comment|//
end_comment

begin_comment
comment|// The numeric_limits<> traits document implementation-defined aspects
end_comment

begin_comment
comment|// of fundamental arithmetic data types (integers and floating points).
end_comment

begin_comment
comment|// From Standard C++ point of view, there are 13 such types:
end_comment

begin_comment
comment|//   * integers
end_comment

begin_comment
comment|//         bool						        (1)
end_comment

begin_comment
comment|//         char, signed char, unsigned char			(3)
end_comment

begin_comment
comment|//         short, unsigned short				(2)
end_comment

begin_comment
comment|//         int, unsigned					(2)
end_comment

begin_comment
comment|//         long, unsigned long					(2)
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//   * floating points
end_comment

begin_comment
comment|//         float						(1)
end_comment

begin_comment
comment|//         double						(1)
end_comment

begin_comment
comment|//         long double						(1)
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// GNU C++ undertstands (where supported by the host C-library)
end_comment

begin_comment
comment|//   * integer
end_comment

begin_comment
comment|//         long long, unsigned long long			(2)
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// which brings us to 15 fundamental arithmetic data types in GNU C++.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Since a numeric_limits<> is a bit tricky to get right, we rely on
end_comment

begin_comment
comment|// an interface composed of macros which should be defined in config/os
end_comment

begin_comment
comment|// or config/cpu when they differ from the generic (read arbitrary)
end_comment

begin_comment
comment|// definitions given here.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// These values can be overridden in the target configuration file.
end_comment

begin_comment
comment|// The default values are appropriate for many 32-bit targets.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_char_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_char_bits
value|8
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__CHAR_UNSIGNED__
end_ifdef

begin_define
define|#
directive|define
name|__glibcpp_plain_char_is_signed
value|false
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__glibcpp_plain_char_is_signed
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_short_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_short_bits
value|16
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_int_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_int_bits
value|32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_bits
value|32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_wchar_t_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_bits
value|32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_wchar_t_is_signed
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_is_signed
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_long_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_long_bits
value|64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_bits
value|32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_bits
value|64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_bits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_bits
value|128
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_char_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_char_traps
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_short_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_short_traps
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_int_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_int_traps
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_traps
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_wchar_t_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_traps
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_long_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_long_traps
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// You should not need to define any macros below this point, unless
end_comment

begin_comment
comment|// you have a machine with non-standard bit-widths.
end_comment

begin_comment
comment|// These values are the minimums and maximums for standard data types
end_comment

begin_comment
comment|// of common widths.
end_comment

begin_define
define|#
directive|define
name|__glibcpp_s8_max
value|127
end_define

begin_define
define|#
directive|define
name|__glibcpp_s8_min
value|(-__glibcpp_s8_max - 1)
end_define

begin_define
define|#
directive|define
name|__glibcpp_s8_digits
value|7
end_define

begin_define
define|#
directive|define
name|__glibcpp_s8_digits10
value|2
end_define

begin_define
define|#
directive|define
name|__glibcpp_u8_min
value|0U
end_define

begin_define
define|#
directive|define
name|__glibcpp_u8_max
value|(__glibcpp_s8_max * 2 + 1)
end_define

begin_define
define|#
directive|define
name|__glibcpp_u8_digits
value|8
end_define

begin_define
define|#
directive|define
name|__glibcpp_u8_digits10
value|2
end_define

begin_define
define|#
directive|define
name|__glibcpp_s16_max
value|32767
end_define

begin_define
define|#
directive|define
name|__glibcpp_s16_min
value|(-__glibcpp_s16_max - 1)
end_define

begin_define
define|#
directive|define
name|__glibcpp_s16_digits
value|15
end_define

begin_define
define|#
directive|define
name|__glibcpp_s16_digits10
value|4
end_define

begin_define
define|#
directive|define
name|__glibcpp_u16_min
value|0U
end_define

begin_define
define|#
directive|define
name|__glibcpp_u16_max
value|(__glibcpp_s16_max * 2 + 1)
end_define

begin_define
define|#
directive|define
name|__glibcpp_u16_digits
value|16
end_define

begin_define
define|#
directive|define
name|__glibcpp_u16_digits10
value|4
end_define

begin_define
define|#
directive|define
name|__glibcpp_s32_max
value|2147483647L
end_define

begin_define
define|#
directive|define
name|__glibcpp_s32_min
value|(-__glibcpp_s32_max - 1)
end_define

begin_define
define|#
directive|define
name|__glibcpp_s32_digits
value|31
end_define

begin_define
define|#
directive|define
name|__glibcpp_s32_digits10
value|9
end_define

begin_define
define|#
directive|define
name|__glibcpp_u32_min
value|0UL
end_define

begin_define
define|#
directive|define
name|__glibcpp_u32_max
value|(__glibcpp_s32_max * 2U + 1)
end_define

begin_define
define|#
directive|define
name|__glibcpp_u32_digits
value|32
end_define

begin_define
define|#
directive|define
name|__glibcpp_u32_digits10
value|9
end_define

begin_define
define|#
directive|define
name|__glibcpp_s64_max
value|9223372036854775807LL
end_define

begin_define
define|#
directive|define
name|__glibcpp_s64_min
value|(-__glibcpp_s64_max - 1)
end_define

begin_define
define|#
directive|define
name|__glibcpp_s64_digits
value|63
end_define

begin_define
define|#
directive|define
name|__glibcpp_s64_digits10
value|18
end_define

begin_define
define|#
directive|define
name|__glibcpp_u64_min
value|0ULL
end_define

begin_define
define|#
directive|define
name|__glibcpp_u64_max
value|(__glibcpp_s64_max * 2ULL + 1)
end_define

begin_define
define|#
directive|define
name|__glibcpp_u64_digits
value|64
end_define

begin_define
define|#
directive|define
name|__glibcpp_u64_digits10
value|19
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_min
value|1.17549435e-38F
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_max
value|3.40282347e+38F
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_digits
value|24
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_digits10
value|6
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_radix
value|2
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_epsilon
value|1.19209290e-07F
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_round_error
value|1.0F
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_min_exponent
value|-125
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_min_exponent10
value|-37
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_max_exponent
value|128
end_define

begin_define
define|#
directive|define
name|__glibcpp_f32_max_exponent10
value|38
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_min
value|2.2250738585072014e-308
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_max
value|1.7976931348623157e+308
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_digits
value|53
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_digits10
value|15
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_radix
value|2
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_epsilon
value|2.2204460492503131e-16
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_round_error
value|1.0
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_min_exponent
value|-1021
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_min_exponent10
value|-307
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_max_exponent
value|1024
end_define

begin_define
define|#
directive|define
name|__glibcpp_f64_max_exponent10
value|308
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_min
value|3.36210314311209350626e-4932L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_max
value|1.18973149535723176502e+4932L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_digits
value|64
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_digits10
value|18
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_radix
value|2
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_epsilon
value|1.08420217248550443401e-19L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_round_error
value|1.0L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_min_exponent
value|-16381
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_min_exponent10
value|-4931
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_max_exponent
value|16384
end_define

begin_define
define|#
directive|define
name|__glibcpp_f80_max_exponent10
value|4932
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_min
value|1.68105157155604675313e-4932L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_max
value|1.18973149535723176502e+4932L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_digits
value|64
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_digits10
value|18
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_radix
value|2
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_epsilon
value|1.08420217248550443401e-19L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_round_error
value|1.0L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_min_exponent
value|-16382
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_min_exponent10
value|-4931
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_max_exponent
value|16384
end_define

begin_define
define|#
directive|define
name|__glibcpp_f96_max_exponent10
value|4932
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_min
value|3.362103143112093506262677817321752603E-4932L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_max
value|1.189731495357231765085759326628007016E+4932L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_digits
value|113
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_digits10
value|33
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_radix
value|2
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_epsilon
value|1.925929944387235853055977942584927319E-34L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_round_error
value|1.0L
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_min_exponent
value|-16381
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_min_exponent10
value|-4931
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_max_exponent
value|16384
end_define

begin_define
define|#
directive|define
name|__glibcpp_f128_max_exponent10
value|4932
end_define

begin_comment
comment|// bool-specific hooks:
end_comment

begin_comment
comment|//     __glibcpp_bool_digits  __glibcpp_int_traps __glibcpp_long_traps
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_bool_digits
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_bool_digits
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// char.
end_comment

begin_define
define|#
directive|define
name|__glibcpp_plain_char_traps
value|true
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_traps
value|true
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_traps
value|true
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_char_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_char_is_modulo
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_signed_char_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_signed_char_is_modulo
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__glibcpp_char_bits
operator|==
literal|8
end_if

begin_define
define|#
directive|define
name|__glibcpp_signed_char_min
value|__glibcpp_s8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_max
value|__glibcpp_s8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_digits
value|__glibcpp_s8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_digits10
value|__glibcpp_s8_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_min
value|__glibcpp_u8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_max
value|__glibcpp_u8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_digits
value|__glibcpp_u8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_digits10
value|__glibcpp_u8_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_char_bits
operator|==
literal|16
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_char_min
value|__glibcpp_s16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_max
value|__glibcpp_s16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_digits
value|__glibcpp_s16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_digits10
value|__glibcpp_s16_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_min
value|__glibcpp_u16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_max
value|__glibcpp_u16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_digits
value|__glibcpp_u16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_digits10
value|__glibcpp_u16_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_char_bits
operator|==
literal|32
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_char_min
value|(signed char)__glibcpp_s32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_max
value|(signed char)__glibcpp_s32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_digits
value|__glibcpp_s32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_digits10
value|__glibcpp_s32_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_min
value|(unsigned char)__glibcpp_u32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_max
value|(unsigned char)__glibcpp_u32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_digits
value|__glibcpp_u32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_digits10
value|__glibcpp_u32_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_char_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_char_min
value|(signed char)__glibcpp_s64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_max
value|(signed char)__glibcpp_s64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_digits
value|__glibcpp_s64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_char_digits10
value|__glibcpp_s64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_min
value|(unsigned char)__glibcpp_u64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_max
value|(unsigned char)__glibcpp_u64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_digits
value|__glibcpp_u64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_char_digits10
value|__glibcpp_u64_digits10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__glibcpp_plain_char_is_signed
end_if

begin_define
define|#
directive|define
name|__glibcpp_char_min
value|(char)__glibcpp_signed_char_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_char_max
value|(char)__glibcpp_signed_char_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_char_digits
value|__glibcpp_signed_char_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_char_digits10
value|__glibcpp_signed_char_digits
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|__glibcpp_char_min
value|(char)__glibcpp_unsigned_char_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_char_max
value|(char)__glibcpp_unsigned_char_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_char_digits
value|__glibcpp_unsigned_char_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_char_digits10
value|__glibcpp_unsigned_char_digits
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// short
end_comment

begin_define
define|#
directive|define
name|__glibcpp_signed_short_traps
value|true
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_traps
value|true
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_signed_short_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_signed_short_is_modulo
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__glibcpp_short_bits
operator|==
literal|8
end_if

begin_define
define|#
directive|define
name|__glibcpp_signed_short_min
value|__glibcpp_s8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_max
value|__glibcpp_s8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_digits
value|__glibcpp_s8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_digits10
value|__glibcpp_s8_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_min
value|__glibcpp_u8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_max
value|__glibcpp_u8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_digits
value|__glibcpp_u8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_digits10
value|__glibcpp_u8_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_short_bits
operator|==
literal|16
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_short_min
value|__glibcpp_s16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_max
value|__glibcpp_s16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_digits
value|__glibcpp_s16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_digits10
value|__glibcpp_s16_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_min
value|__glibcpp_u16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_max
value|__glibcpp_u16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_digits
value|__glibcpp_u16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_digits10
value|__glibcpp_u16_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_short_bits
operator|==
literal|32
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_short_min
value|(short)__glibcpp_s32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_max
value|(short)__glibcpp_s32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_digits
value|__glibcpp_s32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_digits10
value|__glibcpp_s32_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_min
value|(unsigned short)__glibcpp_u32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_max
value|(unsigned short)__glibcpp_u32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_digits
value|__glibcpp_u32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_digits10
value|__glibcpp_u32_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_short_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_short_min
value|(short)__glibcpp_s64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_max
value|(short)__glibcpp_s64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_digits
value|__glibcpp_s64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_short_digits10
value|__glibcpp_s64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_min
value|(unsigned short)__glibcpp_u64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_max
value|(unsigned short)__glibcpp_u64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_digits
value|__glibcpp_u64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_short_digits10
value|__glibcpp_u64_digits10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// int
end_comment

begin_define
define|#
directive|define
name|__glibcpp_signed_int_traps
value|true
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_traps
value|true
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_signed_int_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_signed_int_is_modulo
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__glibcpp_int_bits
operator|==
literal|8
end_if

begin_define
define|#
directive|define
name|__glibcpp_signed_int_min
value|__glibcpp_s8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_max
value|__glibcpp_s8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_digits
value|__glibcpp_s8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_digits10
value|__glibcpp_s8_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_min
value|__glibcpp_u8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_max
value|__glibcpp_u8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_digits
value|__glibcpp_u8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_digits10
value|__glibcpp_u8_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_int_bits
operator|==
literal|16
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_int_min
value|__glibcpp_s16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_max
value|__glibcpp_s16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_digits
value|__glibcpp_s16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_digits10
value|__glibcpp_s16_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_min
value|__glibcpp_u16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_max
value|__glibcpp_u16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_digits
value|__glibcpp_u16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_digits10
value|__glibcpp_u16_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_int_bits
operator|==
literal|32
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_int_min
value|(int)__glibcpp_s32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_max
value|(int)__glibcpp_s32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_digits
value|__glibcpp_s32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_digits10
value|__glibcpp_s32_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_min
value|(unsigned)__glibcpp_u32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_max
value|(unsigned)__glibcpp_u32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_digits
value|__glibcpp_u32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_digits10
value|__glibcpp_u32_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_int_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_int_min
value|(int)__glibcpp_s64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_max
value|(int)__glibcpp_s64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_digits
value|__glibcpp_s64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_int_digits10
value|__glibcpp_s64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_min
value|(unsigned)__glibcpp_u64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_max
value|(unsigned)__glibcpp_u64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_digits
value|__glibcpp_u64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_int_digits10
value|__glibcpp_u64_digits10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// long
end_comment

begin_define
define|#
directive|define
name|__glibcpp_signed_long_traps
value|true
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_traps
value|true
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_signed_long_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_signed_long_is_modulo
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__glibcpp_long_bits
operator|==
literal|8
end_if

begin_define
define|#
directive|define
name|__glibcpp_signed_long_min
value|__glibcpp_s8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_max
value|__glibcpp_s8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_digits
value|__glibcpp_s8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_digits10
value|__glibcpp_s8_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_min
value|__glibcpp_u8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_max
value|__glibcpp_u8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_digits
value|__glibcpp_u8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_digits10
value|__glibcpp_u8_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_bits
operator|==
literal|16
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_long_min
value|__glibcpp_s16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_max
value|__glibcpp_s16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_digits
value|__glibcpp_s16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_digits10
value|__glibcpp_s16_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_min
value|__glibcpp_u16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_max
value|__glibcpp_u16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_digits
value|__glibcpp_u16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_digits10
value|__glibcpp_u16_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_bits
operator|==
literal|32
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_long_min
value|__glibcpp_s32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_max
value|__glibcpp_s32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_digits
value|__glibcpp_s32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_digits10
value|__glibcpp_s32_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_min
value|__glibcpp_u32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_max
value|__glibcpp_u32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_digits
value|__glibcpp_u32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_digits10
value|__glibcpp_u32_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_long_min
value|(long)__glibcpp_s64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_max
value|(long)__glibcpp_s64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_digits
value|__glibcpp_s64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_digits10
value|__glibcpp_s64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_min
value|(unsigned long)__glibcpp_u64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_max
value|(unsigned long)__glibcpp_u64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_digits
value|__glibcpp_u64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_digits10
value|__glibcpp_u64_digits10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// long long
end_comment

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_traps
value|true
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_traps
value|true
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_signed_long_long_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_is_modulo
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__glibcpp_long_long_bits
operator|==
literal|8
end_if

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_min
value|__glibcpp_s8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_max
value|__glibcpp_s8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_digits
value|__glibcpp_s8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_digits10
value|__glibcpp_s8_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_min
value|__glibcpp_u8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_max
value|__glibcpp_u8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_digits
value|__glibcpp_u8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_digits10
value|__glibcpp_u8_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_long_bits
operator|==
literal|16
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_min
value|__glibcpp_s16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_max
value|__glibcpp_s16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_digits
value|__glibcpp_s16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_digits10
value|__glibcpp_s16_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_min
value|__glibcpp_u16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_max
value|__glibcpp_u16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_digits
value|__glibcpp_u16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_digits10
value|__glibcpp_u16_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_long_bits
operator|==
literal|32
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_min
value|__glibcpp_s32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_max
value|__glibcpp_s32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_digits
value|__glibcpp_s32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_digits10
value|__glibcpp_s32_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_min
value|__glibcpp_u32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_max
value|__glibcpp_u32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_digits
value|__glibcpp_u32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_digits10
value|__glibcpp_u32_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_long_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_min
value|__glibcpp_s64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_max
value|__glibcpp_s64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_digits
value|__glibcpp_s64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_digits10
value|__glibcpp_s64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_signed_long_long_traps
value|true
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_min
value|__glibcpp_u64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_max
value|__glibcpp_u64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_digits
value|__glibcpp_u64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_digits10
value|__glibcpp_u64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_unsigned_long_long_traps
value|true
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// wchar_t
end_comment

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_traps
value|true
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_wchar_t_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_is_modulo
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|__glibcpp_wchar_t_is_signed
end_if

begin_if
if|#
directive|if
name|__glibcpp_wchar_t_bits
operator|==
literal|8
end_if

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_min
value|__glibcpp_s8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_max
value|__glibcpp_s8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits
value|__glibcpp_s8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits10
value|__glibcpp_s8_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_wchar_t_bits
operator|==
literal|16
end_elif

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_min
value|__glibcpp_s16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_max
value|__glibcpp_s16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits
value|__glibcpp_s16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits10
value|__glibcpp_s16_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_wchar_t_bits
operator|==
literal|32
end_elif

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_min
value|(wchar_t)__glibcpp_s32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_max
value|(wchar_t)__glibcpp_s32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits
value|__glibcpp_s32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits10
value|__glibcpp_s32_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_wchar_t_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_min
value|(wchar_t)__glibcpp_s64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_max
value|(wchar_t)__glibcpp_s64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits
value|__glibcpp_s64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits10
value|__glibcpp_s64_digits10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_if
if|#
directive|if
name|__glibcpp_wchar_t_bits
operator|==
literal|8
end_if

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_min
value|__glibcpp_u8_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_max
value|__glibcpp_u8_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits
value|__glibcpp_u8_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits10
value|__glibcpp_u8_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_wchar_t_bits
operator|==
literal|16
end_elif

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_min
value|__glibcpp_u16_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_max
value|__glibcpp_u16_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits
value|__glibcpp_u16_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits10
value|__glibcpp_u16_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_wchar_t_bits
operator|==
literal|32
end_elif

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_min
value|(wchar_t)__glibcpp_u32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_max
value|(wchar_t)__glibcpp_u32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits
value|__glibcpp_u32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits10
value|__glibcpp_u32_digits10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_wchar_t_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_min
value|(wchar_t)__glibcpp_u64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_max
value|(wchar_t)__glibcpp_u64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits
value|__glibcpp_u64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_wchar_t_digits10
value|__glibcpp_u64_digits10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// float
end_comment

begin_comment
comment|//
end_comment

begin_if
if|#
directive|if
name|__glibcpp_float_bits
operator|==
literal|32
end_if

begin_define
define|#
directive|define
name|__glibcpp_float_min
value|__glibcpp_f32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max
value|__glibcpp_f32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_digits
value|__glibcpp_f32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_digits10
value|__glibcpp_f32_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_radix
value|__glibcpp_f32_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_epsilon
value|__glibcpp_f32_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_round_error
value|__glibcpp_f32_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_min_exponent
value|__glibcpp_f32_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_min_exponent10
value|__glibcpp_f32_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max_exponent
value|__glibcpp_f32_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max_exponent10
value|__glibcpp_f32_max_exponent10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_float_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_float_min
value|__glibcpp_f64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max
value|__glibcpp_f64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_digits
value|__glibcpp_f64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_digits10
value|__glibcpp_f64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_radix
value|__glibcpp_f64_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_epsilon
value|__glibcpp_f64_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_round_error
value|__glibcpp_f64_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_min_exponent
value|__glibcpp_f64_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_min_exponent10
value|__glibcpp_f64_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max_exponent
value|__glibcpp_f64_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max_exponent10
value|__glibcpp_f64_max_exponent10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_float_bits
operator|==
literal|80
end_elif

begin_define
define|#
directive|define
name|__glibcpp_float_min
value|__glibcpp_f80_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max
value|__glibcpp_f80_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_digits
value|__glibcpp_f80_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_digits10
value|__glibcpp_f80_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_radix
value|__glibcpp_f80_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_epsilon
value|__glibcpp_f80_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_round_error
value|__glibcpp_f80_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_min_exponent
value|__glibcpp_f80_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_min_exponent10
value|__glibcpp_f80_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max_exponent
value|__glibcpp_f80_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_float_max_exponent10
value|__glibcpp_f80_max_exponent10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// FIXME: These are just stubs and inkorrect
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_has_infinity
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_has_infinity
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_has_quiet_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_has_quiet_NaN
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_has_signaling_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_has_signaling_NaN
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_has_denorm
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_has_denorm
value|denorm_absent
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_has_denorm_loss
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_has_denorm_loss
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_infinity
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_infinity
value|0.0F
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_quiet_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_quiet_NaN
value|0.0F
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_signaling_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_signaling_NaN
value|0.0F
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_denorm_min
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_denorm_min
value|0.0F
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_is_iec559
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_is_iec559
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_is_bounded
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_is_bounded
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_is_modulo
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_traps
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_tinyness_before
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_tinyness_before
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_float_round_style
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_float_round_style
value|round_toward_zero
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// double
end_comment

begin_if
if|#
directive|if
name|__glibcpp_double_bits
operator|==
literal|32
end_if

begin_define
define|#
directive|define
name|__glibcpp_double_min
value|__glibcpp_f32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max
value|__glibcpp_f32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_digits
value|__glibcpp_f32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_digits10
value|__glibcpp_f32_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_radix
value|__glibcpp_f32_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_epsilon
value|__glibcpp_f32_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_round_error
value|__glibcpp_f32_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_min_exponent
value|__glibcpp_f32_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_min_exponent10
value|__glibcpp_f32_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max_exponent
value|__glibcpp_f32_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max_exponent10
value|__glibcpp_f32_max_exponent10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_double_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_double_min
value|__glibcpp_f64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max
value|__glibcpp_f64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_digits
value|__glibcpp_f64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_digits10
value|__glibcpp_f64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_radix
value|__glibcpp_f64_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_epsilon
value|__glibcpp_f64_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_round_error
value|__glibcpp_f64_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_min_exponent
value|__glibcpp_f64_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_min_exponent10
value|__glibcpp_f64_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max_exponent
value|__glibcpp_f64_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max_exponent10
value|__glibcpp_f64_max_exponent10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_double_bits
operator|==
literal|80
end_elif

begin_define
define|#
directive|define
name|__glibcpp_double_min
value|__glibcpp_f80_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max
value|__glibcpp_f80_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_digits
value|__glibcpp_f80_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_digits10
value|__glibcpp_f80_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_radix
value|__glibcpp_f80_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_epsilon
value|__glibcpp_f80_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_round_error
value|__glibcpp_f80_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_min_exponent
value|__glibcpp_f80_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_min_exponent10
value|__glibcpp_f80_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max_exponent
value|__glibcpp_f80_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_double_max_exponent10
value|__glibcpp_f80_max_exponent10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// FIXME: These are just stubs and inkorrect
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_has_infinity
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_has_infinity
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_has_quiet_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_has_quiet_NaN
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_has_signaling_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_has_signaling_NaN
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_has_denorm
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_has_denorm
value|denorm_absent
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_has_denorm_loss
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_has_denorm_loss
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_infinity
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_infinity
value|0.0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_quiet_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_quiet_NaN
value|0.0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_signaling_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_signaling_NaN
value|0.0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_denorm_min
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_denorm_min
value|0.0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_is_iec559
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_is_iec559
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_is_bounded
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_is_bounded
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_is_modulo
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_traps
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_tinyness_before
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_tinyness_before
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_double_round_style
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_double_round_style
value|round_toward_zero
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// long double
end_comment

begin_if
if|#
directive|if
name|__glibcpp_long_double_bits
operator|==
literal|32
end_if

begin_define
define|#
directive|define
name|__glibcpp_long_double_min
value|__glibcpp_f32_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max
value|__glibcpp_f32_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits
value|__glibcpp_f32_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits10
value|__glibcpp_f32_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_radix
value|__glibcpp_f32_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_epsilon
value|__glibcpp_f32_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_round_error
value|__glibcpp_f32_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent
value|__glibcpp_f32_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent10
value|__glibcpp_f32_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent
value|__glibcpp_f32_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent10
value|__glibcpp_f32_max_exponent10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_double_bits
operator|==
literal|64
end_elif

begin_define
define|#
directive|define
name|__glibcpp_long_double_min
value|__glibcpp_f64_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max
value|__glibcpp_f64_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits
value|__glibcpp_f64_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits10
value|__glibcpp_f64_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_radix
value|__glibcpp_f64_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_epsilon
value|__glibcpp_f64_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_round_error
value|__glibcpp_f64_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent
value|__glibcpp_f64_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent10
value|__glibcpp_f64_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent
value|__glibcpp_f64_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent10
value|__glibcpp_f64_max_exponent10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_double_bits
operator|==
literal|80
end_elif

begin_define
define|#
directive|define
name|__glibcpp_long_double_min
value|__glibcpp_f80_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max
value|__glibcpp_f80_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits
value|__glibcpp_f80_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits10
value|__glibcpp_f80_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_radix
value|__glibcpp_f80_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_epsilon
value|__glibcpp_f80_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_round_error
value|__glibcpp_f80_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent
value|__glibcpp_f80_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent10
value|__glibcpp_f80_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent
value|__glibcpp_f80_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent10
value|__glibcpp_f80_max_exponent10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_double_bits
operator|==
literal|96
end_elif

begin_define
define|#
directive|define
name|__glibcpp_long_double_min
value|__glibcpp_f96_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max
value|__glibcpp_f96_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits
value|__glibcpp_f96_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits10
value|__glibcpp_f96_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_radix
value|__glibcpp_f96_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_epsilon
value|__glibcpp_f96_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_round_error
value|__glibcpp_f96_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent
value|__glibcpp_f96_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent10
value|__glibcpp_f96_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent
value|__glibcpp_f96_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent10
value|__glibcpp_f96_max_exponent10
end_define

begin_elif
elif|#
directive|elif
name|__glibcpp_long_double_bits
operator|==
literal|128
end_elif

begin_define
define|#
directive|define
name|__glibcpp_long_double_min
value|__glibcpp_f128_min
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max
value|__glibcpp_f128_max
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits
value|__glibcpp_f128_digits
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_digits10
value|__glibcpp_f128_digits10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_radix
value|__glibcpp_f128_radix
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_epsilon
value|__glibcpp_f128_epsilon
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_round_error
value|__glibcpp_f128_round_error
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent
value|__glibcpp_f128_min_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_min_exponent10
value|__glibcpp_f128_min_exponent10
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent
value|__glibcpp_f128_max_exponent
end_define

begin_define
define|#
directive|define
name|__glibcpp_long_double_max_exponent10
value|__glibcpp_f128_max_exponent10
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|// You must define these macros in the configuration file.
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// FIXME: These are just stubs and inkorrect
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_has_infinity
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_has_infinity
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_has_quiet_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_has_quiet_NaN
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_has_signaling_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_has_signaling_NaN
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_has_denorm
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_has_denorm
value|denorm_absent
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_has_denorm_loss
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_has_denorm_loss
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_infinity
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_infinity
value|0.0L
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_quiet_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_quiet_NaN
value|0.0L
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_signaling_NaN
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_signaling_NaN
value|0.0L
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_denorm_min
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_denorm_min
value|0.0L
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_is_iec559
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_is_iec559
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_is_bounded
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_is_bounded
value|true
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_is_modulo
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_is_modulo
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_traps
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_traps
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_tinyness_before
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_tinyness_before
value|false
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|__glibcpp_long_double_round_style
end_ifndef

begin_define
define|#
directive|define
name|__glibcpp_long_double_round_style
value|round_toward_zero
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|namespace
name|std
block|{
enum|enum
name|float_round_style
block|{
name|round_indeterminate
init|=
operator|-
literal|1
block|,
name|round_toward_zero
init|=
literal|0
block|,
name|round_to_nearest
init|=
literal|1
block|,
name|round_toward_infinity
init|=
literal|2
block|,
name|round_toward_neg_infinity
init|=
literal|3
block|}
enum|;
enum|enum
name|float_denorm_style
block|{
name|denorm_indeterminate
init|=
operator|-
literal|1
block|,
name|denorm_absent
init|=
literal|0
block|,
name|denorm_present
init|=
literal|1
block|}
enum|;
comment|//
comment|// The primary class traits
comment|//
struct|struct
name|__numeric_limits_base
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|int
name|digits
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|digits10
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|bool
name|is_signed
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|is_integer
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|is_exact
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|int
name|radix
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|min_exponent
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|min_exponent10
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|max_exponent
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|int
name|max_exponent10
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|bool
name|has_infinity
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
init|=
name|denorm_absent
decl_stmt|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|is_iec559
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|is_bounded
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|is_modulo
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|traps
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|bool
name|tinyness_before
init|=
name|false
decl_stmt|;
specifier|static
specifier|const
name|float_round_style
name|round_style
init|=
name|round_toward_zero
decl_stmt|;
block|}
struct|;
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|numeric_limits
operator|:
name|public
name|__numeric_limits_base
block|{
specifier|static
name|_Tp
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|_Tp
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|_Tp
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|_Tp
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|_Tp
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|_Tp
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|_Tp
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|_Tp
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|_Tp
operator|>
operator|(
literal|0
operator|)
return|;
block|}
expr|}
block|;
comment|// Now there follow 15 explicit specializations.  Yes, 15.  Make sure
comment|// you get the count right.
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|bool
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|bool
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|true
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_bool_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|bool
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|bool
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|static
name|bool
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|false
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|false
block|;
comment|// It is not clear what it means for a boolean type to trap.
comment|// This is a DR on the LWG issue list.  Here, I use integer
comment|// promotion semantics.
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_signed_int_traps
operator|||
name|__glibcpp_signed_long_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_bool_digits
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|char
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|char
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_char_min
return|;
block|}
specifier|static
name|char
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_char_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_char_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_char_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|__glibcpp_plain_char_is_signed
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|char
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|char
argument_list|()
return|;
block|}
specifier|static
name|char
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|char
argument_list|()
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|char
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|char
argument_list|()
return|;
block|}
specifier|static
name|char
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|char
argument_list|()
return|;
block|}
specifier|static
name|char
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|char
argument_list|()
return|;
block|}
specifier|static
name|char
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_char_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_char_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_char_min
undef|#
directive|undef
name|__glibcpp_char_max
undef|#
directive|undef
name|__glibcpp_char_digits
undef|#
directive|undef
name|__glibcpp_char_digits10
undef|#
directive|undef
name|__glibcpp_char_is_signed
undef|#
directive|undef
name|__glibcpp_char_is_modulo
undef|#
directive|undef
name|__glibcpp_char_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|signed
name|char
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|signed
name|char
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_char_min
return|;
block|}
specifier|static
name|signed
name|char
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_char_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_signed_char_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_signed_char_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|signed
name|char
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|signed
name|char
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|signed
name|char
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|signed
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|signed
name|char
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|signed
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|signed
name|char
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|signed
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|signed
name|char
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|signed
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_signed_char_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_signed_char_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_signed_char_min
undef|#
directive|undef
name|__glibcpp_signed_char_max
undef|#
directive|undef
name|__glibcpp_signed_char_digits
undef|#
directive|undef
name|__glibcpp_signed_char_digits10
undef|#
directive|undef
name|__glibcpp_signed_char_is_modulo
undef|#
directive|undef
name|__glibcpp_signed_char_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|unsigned
name|char
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|unsigned
name|char
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|char
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_unsigned_char_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_unsigned_char_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_unsigned_char_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|unsigned
name|char
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|char
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|unsigned
name|char
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|char
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|char
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|char
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|char
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_unsigned_char_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_unsigned_char_max
undef|#
directive|undef
name|__glibcpp_unsigned_char_digits
undef|#
directive|undef
name|__glibcpp_unsigned_char_digits10
undef|#
directive|undef
name|__glibcpp_unsigned_char_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|wchar_t
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|wchar_t
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_wchar_t_min
return|;
block|}
specifier|static
name|wchar_t
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_wchar_t_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_wchar_t_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_wchar_t_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|__glibcpp_wchar_t_is_signed
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|wchar_t
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|wchar_t
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|wchar_t
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|wchar_t
argument_list|()
return|;
block|}
specifier|static
name|wchar_t
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|wchar_t
argument_list|()
return|;
block|}
specifier|static
name|wchar_t
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|wchar_t
argument_list|()
return|;
block|}
specifier|static
name|wchar_t
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|wchar_t
argument_list|()
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_wchar_t_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_wchar_t_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_wchar_t_min
undef|#
directive|undef
name|__glibcpp_wchar_t_max
undef|#
directive|undef
name|__glibcpp_wchar_t_digits
undef|#
directive|undef
name|__glibcpp_wchar_t_digits10
undef|#
directive|undef
name|__glibcpp_wchar_t_is_signed
undef|#
directive|undef
name|__glibcpp_wchar_t_is_modulo
undef|#
directive|undef
name|__glibcpp_wchar_t_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|short
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|short
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_short_min
return|;
block|}
specifier|static
name|short
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_short_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_signed_short_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_signed_short_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|short
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|short
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|short
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|short
argument_list|()
return|;
block|}
specifier|static
name|short
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|short
argument_list|()
return|;
block|}
specifier|static
name|short
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|short
argument_list|()
return|;
block|}
specifier|static
name|short
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|short
argument_list|()
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_signed_short_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_signed_short_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_signed_short_min
undef|#
directive|undef
name|__glibcpp_signed_short_max
undef|#
directive|undef
name|__glibcpp_signed_short_digits
undef|#
directive|undef
name|__glibcpp_signed_short_digits10
undef|#
directive|undef
name|__glibcpp_signed_short_is_modulo
undef|#
directive|undef
name|__glibcpp_signed_short_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|unsigned
name|short
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|unsigned
name|short
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|short
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_unsigned_short_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_unsigned_short_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_unsigned_short_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|unsigned
name|short
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|short
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|unsigned
name|short
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|short
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|short
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|short
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|short
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_unsigned_short_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_unsigned_short_max
undef|#
directive|undef
name|__glibcpp_unsigned_short_digits
undef|#
directive|undef
name|__glibcpp_unsigned_short_digits10
undef|#
directive|undef
name|__glibcpp_unsigned_short_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|int
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|int
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_int_min
return|;
block|}
specifier|static
name|int
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_int_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_signed_int_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_signed_int_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|int
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|int
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|int
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|int
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|int
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|int
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|int
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_signed_int_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_signed_int_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_signed_int_min
undef|#
directive|undef
name|__glibcpp_signed_int_max
undef|#
directive|undef
name|__glibcpp_signed_int_digits
undef|#
directive|undef
name|__glibcpp_signed_int_digits10
undef|#
directive|undef
name|__glibcpp_signed_int_is_modulo
undef|#
directive|undef
name|__glibcpp_signed_int_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|unsigned
name|int
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|unsigned
name|int
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|int
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_unsigned_int_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_unsigned_int_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_unsigned_int_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|unsigned
name|int
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|int
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|unsigned
name|int
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|int
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|int
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|int
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|int
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_unsigned_int_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_unsigned_int_max
undef|#
directive|undef
name|__glibcpp_unsigned_int_digits
undef|#
directive|undef
name|__glibcpp_unsigned_int_digits10
undef|#
directive|undef
name|__glibcpp_unsigned_int_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|long
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|long
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_long_min
return|;
block|}
specifier|static
name|long
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_long_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_signed_long_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_signed_long_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|long
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|long
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|long
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|long
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|long
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|long
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_signed_long_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_signed_long_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_signed_long_min
undef|#
directive|undef
name|__glibcpp_signed_long_max
undef|#
directive|undef
name|__glibcpp_signed_long_digits
undef|#
directive|undef
name|__glibcpp_signed_long_digits10
undef|#
directive|undef
name|__glibcpp_signed_long_is_modulo
undef|#
directive|undef
name|__glibcpp_signed_long_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|unsigned
name|long
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|unsigned
name|long
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|long
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_unsigned_long_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_unsigned_long_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_unsigned_long_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|unsigned
name|long
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|long
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|unsigned
name|long
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|long
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|long
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|long
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_unsigned_long_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_unsigned_long_max
undef|#
directive|undef
name|__glibcpp_unsigned_long_digits
undef|#
directive|undef
name|__glibcpp_unsigned_long_digits10
undef|#
directive|undef
name|__glibcpp_unsigned_long_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|long
name|long
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|long
name|long
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_long_long_min
return|;
block|}
specifier|static
name|long
name|long
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_signed_long_long_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_signed_long_long_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_signed_long_long_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|long
name|long
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|long
name|long
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|long
name|long
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|long
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|long
name|long
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|long
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|long
name|long
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|long
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|long
name|long
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|long
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_signed_long_long_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_signed_long_long_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_signed_long_long_min
undef|#
directive|undef
name|__glibcpp_signed_long_long_max
undef|#
directive|undef
name|__glibcpp_signed_long_long_digits
undef|#
directive|undef
name|__glibcpp_signed_long_long_digits10
undef|#
directive|undef
name|__glibcpp_signed_long_long_is_modulo
undef|#
directive|undef
name|__glibcpp_signed_long_long_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|unsigned
name|long
name|long
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|unsigned
name|long
name|long
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|long
name|long
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_unsigned_long_long_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_unsigned_long_long_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_unsigned_long_long_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|true
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
literal|2
block|;
specifier|static
name|unsigned
name|long
name|long
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
name|unsigned
name|long
name|long
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
literal|0
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
literal|0
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|denorm_absent
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|false
block|;
specifier|static
name|unsigned
name|long
name|long
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|long
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|long
name|long
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|long
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|long
name|long
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|long
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
name|unsigned
name|long
name|long
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|static_cast
operator|<
name|unsigned
name|long
name|long
operator|>
operator|(
literal|0
operator|)
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|false
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|round_toward_zero
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_unsigned_long_long_max
undef|#
directive|undef
name|__glibcpp_unsigned_long_long_digits
undef|#
directive|undef
name|__glibcpp_unsigned_long_long_digits10
undef|#
directive|undef
name|__glibcpp_unsigned_long_long_traps
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|float
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|float
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_float_min
return|;
block|}
specifier|static
name|float
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_float_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_float_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_float_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|false
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
name|__glibcpp_float_radix
block|;
specifier|static
name|float
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_float_epsilon
return|;
block|}
specifier|static
name|float
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_float_round_error
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
name|__glibcpp_float_min_exponent
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
name|__glibcpp_float_min_exponent10
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
name|__glibcpp_float_max_exponent
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
name|__glibcpp_float_max_exponent10
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|__glibcpp_float_has_infinity
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|__glibcpp_float_has_quiet_NaN
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|__glibcpp_float_has_signaling_NaN
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|__glibcpp_float_has_denorm
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|__glibcpp_float_has_denorm_loss
block|;
specifier|static
name|float
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_float_infinity
return|;
block|}
specifier|static
name|float
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_float_quiet_NaN
return|;
block|}
specifier|static
name|float
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_float_signaling_NaN
return|;
block|}
specifier|static
name|float
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_float_denorm_min
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|__glibcpp_float_is_iec559
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|__glibcpp_float_is_bounded
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_float_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_float_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|__glibcpp_float_tinyness_before
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|__glibcpp_float_round_style
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_float_min
undef|#
directive|undef
name|__glibcpp_float_max
undef|#
directive|undef
name|__glibcpp_float_digits
undef|#
directive|undef
name|__glibcpp_float_digits10
undef|#
directive|undef
name|__glibcpp_float_radix
undef|#
directive|undef
name|__glibcpp_float_round_error
undef|#
directive|undef
name|__glibcpp_float_min_exponent
undef|#
directive|undef
name|__glibcpp_float_min_exponent10
undef|#
directive|undef
name|__glibcpp_float_max_exponent
undef|#
directive|undef
name|__glibcpp_float_max_exponent10
undef|#
directive|undef
name|__glibcpp_float_has_infinity
undef|#
directive|undef
name|__glibcpp_float_has_quiet_NaN
undef|#
directive|undef
name|__glibcpp_float_has_signaling_NaN
undef|#
directive|undef
name|__glibcpp_float_has_denorm
undef|#
directive|undef
name|__glibcpp_float_has_denorm_loss
undef|#
directive|undef
name|__glibcpp_float_infinity
undef|#
directive|undef
name|__glibcpp_float_quiet_NaN
undef|#
directive|undef
name|__glibcpp_float_signaling_NaN
undef|#
directive|undef
name|__glibcpp_float_denorm_min
undef|#
directive|undef
name|__glibcpp_float_is_iec559
undef|#
directive|undef
name|__glibcpp_float_is_bounded
undef|#
directive|undef
name|__glibcpp_float_is_modulo
undef|#
directive|undef
name|__glibcpp_float_traps
undef|#
directive|undef
name|__glibcpp_float_tinyness_before
undef|#
directive|undef
name|__glibcpp_float_round_style
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|double
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|double
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_double_min
return|;
block|}
specifier|static
name|double
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_double_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_double_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_double_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|false
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
name|__glibcpp_double_radix
block|;
specifier|static
name|double
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_double_epsilon
return|;
block|}
specifier|static
name|double
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_double_round_error
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
name|__glibcpp_double_min_exponent
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
name|__glibcpp_double_min_exponent10
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
name|__glibcpp_double_max_exponent
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
name|__glibcpp_double_max_exponent10
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|__glibcpp_double_has_infinity
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|__glibcpp_double_has_quiet_NaN
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|__glibcpp_double_has_signaling_NaN
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|__glibcpp_double_has_denorm
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|__glibcpp_double_has_denorm_loss
block|;
specifier|static
name|double
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_double_infinity
return|;
block|}
specifier|static
name|double
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_double_quiet_NaN
return|;
block|}
specifier|static
name|double
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_double_signaling_NaN
return|;
block|}
specifier|static
name|double
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_double_denorm_min
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|__glibcpp_double_is_iec559
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|__glibcpp_double_is_bounded
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_double_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_double_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|__glibcpp_double_tinyness_before
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|__glibcpp_double_round_style
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_double_min
undef|#
directive|undef
name|__glibcpp_double_max
undef|#
directive|undef
name|__glibcpp_double_digits
undef|#
directive|undef
name|__glibcpp_double_digits10
undef|#
directive|undef
name|__glibcpp_double_radix
undef|#
directive|undef
name|__glibcpp_double_round_error
undef|#
directive|undef
name|__glibcpp_double_min_exponent
undef|#
directive|undef
name|__glibcpp_double_min_exponent10
undef|#
directive|undef
name|__glibcpp_double_max_exponent
undef|#
directive|undef
name|__glibcpp_double_max_exponent10
undef|#
directive|undef
name|__glibcpp_double_has_infinity
undef|#
directive|undef
name|__glibcpp_double_has_quiet_NaN
undef|#
directive|undef
name|__glibcpp_double_has_signaling_NaN
undef|#
directive|undef
name|__glibcpp_double_has_denorm
undef|#
directive|undef
name|__glibcpp_double_has_denorm_loss
undef|#
directive|undef
name|__glibcpp_double_infinity
undef|#
directive|undef
name|__glibcpp_double_quiet_NaN
undef|#
directive|undef
name|__glibcpp_double_signaling_NaN
undef|#
directive|undef
name|__glibcpp_double_denorm_min
undef|#
directive|undef
name|__glibcpp_double_is_iec559
undef|#
directive|undef
name|__glibcpp_double_is_bounded
undef|#
directive|undef
name|__glibcpp_double_is_modulo
undef|#
directive|undef
name|__glibcpp_double_traps
undef|#
directive|undef
name|__glibcpp_double_tinyness_before
undef|#
directive|undef
name|__glibcpp_double_round_style
name|template
operator|<
operator|>
expr|struct
name|numeric_limits
operator|<
name|long
name|double
operator|>
block|{
specifier|static
specifier|const
name|bool
name|is_specialized
operator|=
name|true
block|;
specifier|static
name|long
name|double
name|min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_long_double_min
return|;
block|}
specifier|static
name|long
name|double
name|max
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_long_double_max
return|;
block|}
specifier|static
specifier|const
name|int
name|digits
operator|=
name|__glibcpp_long_double_digits
block|;
specifier|static
specifier|const
name|int
name|digits10
operator|=
name|__glibcpp_long_double_digits10
block|;
specifier|static
specifier|const
name|bool
name|is_signed
operator|=
name|true
block|;
specifier|static
specifier|const
name|bool
name|is_integer
operator|=
name|false
block|;
specifier|static
specifier|const
name|bool
name|is_exact
operator|=
name|false
block|;
specifier|static
specifier|const
name|int
name|radix
operator|=
name|__glibcpp_long_double_radix
block|;
specifier|static
name|long
name|double
name|epsilon
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_long_double_epsilon
return|;
block|}
specifier|static
name|long
name|double
name|round_error
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_long_double_round_error
return|;
block|}
specifier|static
specifier|const
name|int
name|min_exponent
operator|=
name|__glibcpp_long_double_min_exponent
block|;
specifier|static
specifier|const
name|int
name|min_exponent10
operator|=
name|__glibcpp_long_double_min_exponent10
block|;
specifier|static
specifier|const
name|int
name|max_exponent
operator|=
name|__glibcpp_long_double_max_exponent
block|;
specifier|static
specifier|const
name|int
name|max_exponent10
operator|=
name|__glibcpp_long_double_max_exponent10
block|;
specifier|static
specifier|const
name|bool
name|has_infinity
operator|=
name|__glibcpp_long_double_has_infinity
block|;
specifier|static
specifier|const
name|bool
name|has_quiet_NaN
operator|=
name|__glibcpp_long_double_has_quiet_NaN
block|;
specifier|static
specifier|const
name|bool
name|has_signaling_NaN
operator|=
name|__glibcpp_long_double_has_signaling_NaN
block|;
specifier|static
specifier|const
name|float_denorm_style
name|has_denorm
operator|=
name|__glibcpp_long_double_has_denorm
block|;
specifier|static
specifier|const
name|bool
name|has_denorm_loss
operator|=
name|__glibcpp_long_double_has_denorm_loss
block|;
specifier|static
name|long
name|double
name|infinity
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_long_double_infinity
return|;
block|}
specifier|static
name|long
name|double
name|quiet_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_long_double_quiet_NaN
return|;
block|}
specifier|static
name|long
name|double
name|signaling_NaN
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_long_double_signaling_NaN
return|;
block|}
specifier|static
name|long
name|double
name|denorm_min
argument_list|()
name|throw
argument_list|()
block|{
return|return
name|__glibcpp_long_double_denorm_min
return|;
block|}
specifier|static
specifier|const
name|bool
name|is_iec559
operator|=
name|__glibcpp_long_double_is_iec559
block|;
specifier|static
specifier|const
name|bool
name|is_bounded
operator|=
name|__glibcpp_long_double_is_bounded
block|;
specifier|static
specifier|const
name|bool
name|is_modulo
operator|=
name|__glibcpp_long_double_is_modulo
block|;
specifier|static
specifier|const
name|bool
name|traps
operator|=
name|__glibcpp_long_double_traps
block|;
specifier|static
specifier|const
name|bool
name|tinyness_before
operator|=
name|__glibcpp_long_double_tinyness_before
block|;
specifier|static
specifier|const
name|float_round_style
name|round_style
operator|=
name|__glibcpp_long_double_round_style
block|;     }
block|;
undef|#
directive|undef
name|__glibcpp_long_double_min
undef|#
directive|undef
name|__glibcpp_long_double_max
undef|#
directive|undef
name|__glibcpp_long_double_digits
undef|#
directive|undef
name|__glibcpp_long_double_digits10
undef|#
directive|undef
name|__glibcpp_long_double_radix
undef|#
directive|undef
name|__glibcpp_long_double_round_error
undef|#
directive|undef
name|__glibcpp_long_double_min_exponent
undef|#
directive|undef
name|__glibcpp_long_double_min_exponent10
undef|#
directive|undef
name|__glibcpp_long_double_max_exponent
undef|#
directive|undef
name|__glibcpp_long_double_max_exponent10
undef|#
directive|undef
name|__glibcpp_long_double_has_infinity
undef|#
directive|undef
name|__glibcpp_long_double_has_quiet_NaN
undef|#
directive|undef
name|__glibcpp_long_double_has_signaling_NaN
undef|#
directive|undef
name|__glibcpp_long_double_has_denorm
undef|#
directive|undef
name|__glibcpp_long_double_has_denorm_loss
undef|#
directive|undef
name|__glibcpp_long_double_infinity
undef|#
directive|undef
name|__glibcpp_long_double_quiet_NaN
undef|#
directive|undef
name|__glibcpp_long_double_signaling_NaN
undef|#
directive|undef
name|__glibcpp_long_double_denorm_min
undef|#
directive|undef
name|__glibcpp_long_double_is_iec559
undef|#
directive|undef
name|__glibcpp_long_double_is_bounded
undef|#
directive|undef
name|__glibcpp_long_double_is_modulo
undef|#
directive|undef
name|__glibcpp_long_double_traps
undef|#
directive|undef
name|__glibcpp_long_double_tinyness_before
undef|#
directive|undef
name|__glibcpp_long_double_round_style
block|}
end_decl_stmt

begin_comment
comment|// namespace std
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// _CPP_NUMERIC_LIMITS
end_comment

end_unit

