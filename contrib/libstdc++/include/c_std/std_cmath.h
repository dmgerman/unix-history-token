begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// -*- C++ -*- C forwarding header.
end_comment

begin_comment
comment|// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002
end_comment

begin_comment
comment|// Free Software Foundation, Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// ISO C++ 14882: 26.5  C library
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|/** @file cmath  *  This is a Standard C++ Library file.  You should @c #include this file  *  in your programs, rather than any of the "*.h" implementation files.  *  *  This is the C++ version of the Standard C Library header @c math.h,  *  and its contents are (mostly) the same as that header, but are all  *  contained in the namespace @c std.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_CPP_CMATH
end_ifndef

begin_define
define|#
directive|define
name|_CPP_CMATH
value|1
end_define

begin_pragma
pragma|#
directive|pragma
name|GCC
name|system_header
end_pragma

begin_include
include|#
directive|include
file|<bits/c++config.h>
end_include

begin_include
include|#
directive|include
file|<math.h>
end_include

begin_comment
comment|// Get rid of those macros defined in<math.h> in lieu of real functions.
end_comment

begin_undef
undef|#
directive|undef
name|abs
end_undef

begin_undef
undef|#
directive|undef
name|div
end_undef

begin_undef
undef|#
directive|undef
name|acos
end_undef

begin_undef
undef|#
directive|undef
name|asin
end_undef

begin_undef
undef|#
directive|undef
name|atan
end_undef

begin_undef
undef|#
directive|undef
name|atan2
end_undef

begin_undef
undef|#
directive|undef
name|ceil
end_undef

begin_undef
undef|#
directive|undef
name|cos
end_undef

begin_undef
undef|#
directive|undef
name|cosh
end_undef

begin_undef
undef|#
directive|undef
name|exp
end_undef

begin_undef
undef|#
directive|undef
name|fabs
end_undef

begin_undef
undef|#
directive|undef
name|floor
end_undef

begin_undef
undef|#
directive|undef
name|fmod
end_undef

begin_undef
undef|#
directive|undef
name|frexp
end_undef

begin_undef
undef|#
directive|undef
name|ldexp
end_undef

begin_undef
undef|#
directive|undef
name|log
end_undef

begin_undef
undef|#
directive|undef
name|log10
end_undef

begin_undef
undef|#
directive|undef
name|modf
end_undef

begin_undef
undef|#
directive|undef
name|pow
end_undef

begin_undef
undef|#
directive|undef
name|sin
end_undef

begin_undef
undef|#
directive|undef
name|sinh
end_undef

begin_undef
undef|#
directive|undef
name|sqrt
end_undef

begin_undef
undef|#
directive|undef
name|tan
end_undef

begin_undef
undef|#
directive|undef
name|tanh
end_undef

begin_decl_stmt
name|namespace
name|std
block|{
comment|// Forward declaration of a helper function.  This really should be
comment|// an `exported' forward declaration.
name|template
operator|<
name|typename
name|_Tp
operator|>
name|_Tp
name|__cmath_power
argument_list|(
argument|_Tp
argument_list|,
argument|unsigned int
argument_list|)
expr_stmt|;
specifier|inline
name|double
name|abs
parameter_list|(
name|double
name|__x
parameter_list|)
block|{
return|return
name|__builtin_fabs
argument_list|(
name|__x
argument_list|)
return|;
block|}
specifier|inline
name|float
name|abs
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
name|__builtin_fabsf
argument_list|(
name|__x
argument_list|)
return|;
block|}
specifier|inline
name|long
name|double
name|abs
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
name|__builtin_fabsl
argument_list|(
name|__x
argument_list|)
return|;
block|}
if|#
directive|if
name|_GLIBCPP_HAVE_ACOSF
specifier|inline
name|float
name|acos
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|acosf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|acos
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|acos
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|acos
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_ACOSL
specifier|inline
name|long
name|double
name|acos
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|acosl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|acos
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|acos
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|asin
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_ASINF
specifier|inline
name|float
name|asin
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|asinf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|asin
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|asin
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_ASINL
specifier|inline
name|long
name|double
name|asin
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|asinl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|asin
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|asin
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|atan
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_ATANF
specifier|inline
name|float
name|atan
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atanf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|atan
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atan
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_ATANL
specifier|inline
name|long
name|double
name|atan
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atanl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|atan
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atan
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|atan2
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_ATAN2F
specifier|inline
name|float
name|atan2
parameter_list|(
name|float
name|__y
parameter_list|,
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atan2f
argument_list|(
name|__y
argument_list|,
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|atan2
parameter_list|(
name|float
name|__y
parameter_list|,
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atan2
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__y
operator|)
argument_list|,
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_ATAN2L
specifier|inline
name|long
name|double
name|atan2
parameter_list|(
name|long
name|double
name|__y
parameter_list|,
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atan2l
argument_list|(
name|__y
argument_list|,
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|atan2
parameter_list|(
name|long
name|double
name|__y
parameter_list|,
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|atan2
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__y
operator|)
argument_list|,
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|ceil
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_CEILF
specifier|inline
name|float
name|ceil
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|ceilf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|ceil
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|ceil
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_CEILL
specifier|inline
name|long
name|double
name|ceil
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|ceill
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|ceil
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|ceil
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|cos
expr_stmt|;
specifier|inline
name|float
name|cos
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
name|__builtin_cosf
argument_list|(
name|__x
argument_list|)
return|;
block|}
specifier|inline
name|long
name|double
name|cos
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
name|__builtin_cosl
argument_list|(
name|__x
argument_list|)
return|;
block|}
name|using
operator|::
name|cosh
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_COSHF
specifier|inline
name|float
name|cosh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|coshf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|cosh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|cosh
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_COSHL
specifier|inline
name|long
name|double
name|cosh
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|coshl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|cosh
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|cosh
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|exp
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_EXPF
specifier|inline
name|float
name|exp
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|expf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|exp
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|exp
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_EXPL
specifier|inline
name|long
name|double
name|exp
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|expl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|exp
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|exp
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|fabs
expr_stmt|;
specifier|inline
name|float
name|fabs
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
name|__builtin_fabsf
argument_list|(
name|__x
argument_list|)
return|;
block|}
specifier|inline
name|long
name|double
name|fabs
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
name|__builtin_fabsl
argument_list|(
name|__x
argument_list|)
return|;
block|}
name|using
operator|::
name|floor
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_FLOORF
specifier|inline
name|float
name|floor
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|floorf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|floor
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|floor
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_FLOORL
specifier|inline
name|long
name|double
name|floor
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|floorl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|floor
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|floor
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|fmod
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_FMODF
specifier|inline
name|float
name|fmod
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
operator|::
name|fmodf
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|fmod
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
operator|::
name|fmod
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__y
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_FMODL
specifier|inline
name|long
name|double
name|fmod
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|long
name|double
name|__y
parameter_list|)
block|{
return|return
operator|::
name|fmodl
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|fmod
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|long
name|double
name|__y
parameter_list|)
block|{
return|return
operator|::
name|fmod
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__y
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|frexp
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_FREXPF
specifier|inline
name|float
name|frexp
parameter_list|(
name|float
name|__x
parameter_list|,
name|int
modifier|*
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|frexpf
argument_list|(
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|frexp
parameter_list|(
name|float
name|__x
parameter_list|,
name|int
modifier|*
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|frexp
argument_list|(
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_FREXPL
specifier|inline
name|long
name|double
name|frexp
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|int
modifier|*
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|frexpl
argument_list|(
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|frexp
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|int
modifier|*
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|frexp
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
name|__exp
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|ldexp
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_LDEXPF
specifier|inline
name|float
name|ldexp
parameter_list|(
name|float
name|__x
parameter_list|,
name|int
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|ldexpf
argument_list|(
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|ldexp
parameter_list|(
name|float
name|__x
parameter_list|,
name|int
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|ldexp
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
name|__exp
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_LDEXPL
specifier|inline
name|long
name|double
name|ldexp
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|int
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|ldexpl
argument_list|(
name|__x
argument_list|,
name|__exp
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|ldexp
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|int
name|__exp
parameter_list|)
block|{
return|return
operator|::
name|ldexp
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
name|__exp
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|log
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_LOGF
specifier|inline
name|float
name|log
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|logf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|log
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|log
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_LOGL
specifier|inline
name|long
name|double
name|log
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|logl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|log
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|log
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|log10
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_LOG10F
specifier|inline
name|float
name|log10
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|log10f
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|log10
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|log10
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_LOG10L
specifier|inline
name|long
name|double
name|log10
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|log10l
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|log10
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|log10
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|modf
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_MODFF
specifier|inline
name|float
name|modf
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
modifier|*
name|__iptr
parameter_list|)
block|{
return|return
operator|::
name|modff
argument_list|(
name|__x
argument_list|,
name|__iptr
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|modf
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
modifier|*
name|__iptr
parameter_list|)
block|{
name|double
name|__tmp
decl_stmt|;
name|double
name|__res
init|=
operator|::
name|modf
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
operator|&
name|__tmp
argument_list|)
decl_stmt|;
operator|*
name|__iptr
operator|=
name|static_cast
operator|<
name|float
operator|>
operator|(
name|__tmp
operator|)
expr_stmt|;
return|return
name|__res
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_MODFL
specifier|inline
name|long
name|double
name|modf
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|long
name|double
modifier|*
name|__iptr
parameter_list|)
block|{
return|return
operator|::
name|modfl
argument_list|(
name|__x
argument_list|,
name|__iptr
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|modf
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|long
name|double
modifier|*
name|__iptr
parameter_list|)
block|{
name|double
name|__tmp
decl_stmt|;
name|double
name|__res
init|=
operator|::
name|modf
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
operator|&
name|__tmp
argument_list|)
decl_stmt|;
operator|*
name|__iptr
operator|=
name|static_cast
operator|<
name|long
name|double
operator|>
operator|(
name|__tmp
operator|)
expr_stmt|;
return|return
name|__res
return|;
block|}
endif|#
directive|endif
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|__pow_helper
argument_list|(
argument|_Tp __x
argument_list|,
argument|int __n
argument_list|)
block|{
return|return
name|__n
operator|<
literal|0
operator|?
name|_Tp
argument_list|(
literal|1
argument_list|)
operator|/
name|__cmath_power
argument_list|(
name|__x
argument_list|,
operator|-
name|__n
argument_list|)
operator|:
name|__cmath_power
argument_list|(
name|__x
argument_list|,
name|__n
argument_list|)
return|;
block|}
name|using
operator|::
name|pow
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_POWF
specifier|inline
name|float
name|pow
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
operator|::
name|powf
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|pow
parameter_list|(
name|float
name|__x
parameter_list|,
name|float
name|__y
parameter_list|)
block|{
return|return
operator|::
name|pow
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__y
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_POWL
specifier|inline
name|long
name|double
name|pow
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|long
name|double
name|__y
parameter_list|)
block|{
return|return
operator|::
name|powl
argument_list|(
name|__x
argument_list|,
name|__y
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|pow
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|long
name|double
name|__y
parameter_list|)
block|{
return|return
operator|::
name|pow
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|,
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__y
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
specifier|inline
name|double
name|pow
parameter_list|(
name|double
name|__x
parameter_list|,
name|int
name|__i
parameter_list|)
block|{
return|return
name|__pow_helper
argument_list|(
name|__x
argument_list|,
name|__i
argument_list|)
return|;
block|}
specifier|inline
name|float
name|pow
parameter_list|(
name|float
name|__x
parameter_list|,
name|int
name|__n
parameter_list|)
block|{
return|return
name|__pow_helper
argument_list|(
name|__x
argument_list|,
name|__n
argument_list|)
return|;
block|}
specifier|inline
name|long
name|double
name|pow
parameter_list|(
name|long
name|double
name|__x
parameter_list|,
name|int
name|__n
parameter_list|)
block|{
return|return
name|__pow_helper
argument_list|(
name|__x
argument_list|,
name|__n
argument_list|)
return|;
block|}
name|using
operator|::
name|sin
expr_stmt|;
specifier|inline
name|float
name|sin
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
name|__builtin_sinf
argument_list|(
name|__x
argument_list|)
return|;
block|}
specifier|inline
name|long
name|double
name|sin
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
name|__builtin_sinl
argument_list|(
name|__x
argument_list|)
return|;
block|}
name|using
operator|::
name|sinh
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_SINHF
specifier|inline
name|float
name|sinh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|sinhf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|sinh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|sinh
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_SINHL
specifier|inline
name|long
name|double
name|sinh
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|sinhl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|sinh
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|sinh
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|sqrt
expr_stmt|;
specifier|inline
name|float
name|sqrt
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
name|__builtin_sqrtf
argument_list|(
name|__x
argument_list|)
return|;
block|}
specifier|inline
name|long
name|double
name|sqrt
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
name|__builtin_sqrtl
argument_list|(
name|__x
argument_list|)
return|;
block|}
name|using
operator|::
name|tan
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_TANF
specifier|inline
name|float
name|tan
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tanf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|tan
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tan
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_TANL
specifier|inline
name|long
name|double
name|tan
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tanl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|tan
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tan
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
name|using
operator|::
name|tanh
expr_stmt|;
if|#
directive|if
name|_GLIBCPP_HAVE_TANHF
specifier|inline
name|float
name|tanh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tanhf
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|float
name|tanh
parameter_list|(
name|float
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tanh
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
if|#
directive|if
name|_GLIBCPP_HAVE_TANHL
specifier|inline
name|long
name|double
name|tanh
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tanhl
argument_list|(
name|__x
argument_list|)
return|;
block|}
else|#
directive|else
specifier|inline
name|long
name|double
name|tanh
parameter_list|(
name|long
name|double
name|__x
parameter_list|)
block|{
return|return
operator|::
name|tanh
argument_list|(
name|static_cast
operator|<
name|double
operator|>
operator|(
name|__x
operator|)
argument_list|)
return|;
block|}
endif|#
directive|endif
block|}
end_decl_stmt

begin_if
if|#
directive|if
name|_GLIBCPP_USE_C99
end_if

begin_comment
comment|// These are possible macros imported from C99-land. For strict
end_comment

begin_comment
comment|// conformance, remove possible C99-injected names from the global
end_comment

begin_comment
comment|// namespace, and sequester them in the __gnu_cxx extension namespace.
end_comment

begin_decl_stmt
name|namespace
name|__gnu_cxx
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_fpclassify
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|fpclassify
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_isfinite
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|isfinite
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_isinf
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|isinf
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_isnan
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|isnan
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_isnormal
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|isnormal
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_signbit
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|signbit
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_isgreater
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|isgreater
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_isgreaterequal
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|isgreaterequal
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_isless
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|isless
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_islessequal
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|islessequal
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_islessgreater
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|islessgreater
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|__capture_isunordered
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|isunordered
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_undef
undef|#
directive|undef
name|fpclassify
end_undef

begin_undef
undef|#
directive|undef
name|isfinite
end_undef

begin_undef
undef|#
directive|undef
name|isinf
end_undef

begin_undef
undef|#
directive|undef
name|isnan
end_undef

begin_undef
undef|#
directive|undef
name|isnormal
end_undef

begin_undef
undef|#
directive|undef
name|signbit
end_undef

begin_undef
undef|#
directive|undef
name|isgreater
end_undef

begin_undef
undef|#
directive|undef
name|isgreaterequal
end_undef

begin_undef
undef|#
directive|undef
name|isless
end_undef

begin_undef
undef|#
directive|undef
name|islessequal
end_undef

begin_undef
undef|#
directive|undef
name|islessgreater
end_undef

begin_undef
undef|#
directive|undef
name|isunordered
end_undef

begin_if
if|#
directive|if
name|_GLIBCPP_USE_C99
end_if

begin_decl_stmt
name|namespace
name|__gnu_cxx
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|fpclassify
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|__capture_fpclassify
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|isfinite
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|__capture_isfinite
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|isinf
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|__capture_isinf
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|isnan
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|__capture_isnan
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|isnormal
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|__capture_isnormal
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|signbit
argument_list|(
argument|_Tp __f
argument_list|)
block|{
return|return
name|__capture_signbit
argument_list|(
name|__f
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|isgreater
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|__capture_isgreater
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|isgreaterequal
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|__capture_isgreaterequal
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|isless
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|__capture_isless
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|islessequal
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|__capture_islessequal
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|islessgreater
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|__capture_islessgreater
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
name|int
name|isunordered
argument_list|(
argument|_Tp __f1
argument_list|,
argument|_Tp __f2
argument_list|)
block|{
return|return
name|__capture_isunordered
argument_list|(
name|__f1
argument_list|,
name|__f2
argument_list|)
return|;
block|}
block|}
end_decl_stmt

begin_decl_stmt
name|namespace
name|std
block|{
name|using
name|__gnu_cxx
operator|::
name|fpclassify
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|isfinite
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|isinf
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|isnan
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|isnormal
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|signbit
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|isgreater
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|isgreaterequal
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|isless
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|islessequal
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|islessgreater
expr_stmt|;
name|using
name|__gnu_cxx
operator|::
name|isunordered
expr_stmt|;
block|}
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|_GLIBCPP_NO_TEMPLATE_EXPORT
end_ifdef

begin_define
define|#
directive|define
name|export
end_define

begin_include
include|#
directive|include
file|<bits/cmath.tcc>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

