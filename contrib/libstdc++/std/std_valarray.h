begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- valarray class.
end_comment

begin_comment
comment|// Copyright (C) 1997-1999 Cygnus Solutions
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// This file is part of the GNU ISO C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License along
end_comment

begin_comment
comment|// with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,
end_comment

begin_comment
comment|// USA.
end_comment

begin_comment
comment|// As a special exception, you may use this file as part of a free software
end_comment

begin_comment
comment|// library without restriction.  Specifically, if other files instantiate
end_comment

begin_comment
comment|// templates or use macros or inline functions from this file, or you compile
end_comment

begin_comment
comment|// this file and link it with other files to produce an executable, this
end_comment

begin_comment
comment|// file does not by itself cause the resulting executable to be covered by
end_comment

begin_comment
comment|// the GNU General Public License.  This exception does not however
end_comment

begin_comment
comment|// invalidate any other reasons why the executable file might be covered by
end_comment

begin_comment
comment|// the GNU General Public License.
end_comment

begin_comment
comment|// Written by Gabriel Dos Reis<Gabriel.Dos-Reis@DPTMaths.ENS-Cachan.Fr>
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__STD_VALARRAY__
end_ifndef

begin_define
define|#
directive|define
name|__STD_VALARRAY__
end_define

begin_define
define|#
directive|define
name|_G_NO_VALARRAY_TEMPLATE_EXPORT
value|1
end_define

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<cmath>
end_include

begin_include
include|#
directive|include
file|<cstdlib>
end_include

begin_include
include|#
directive|include
file|<numeric>
end_include

begin_include
include|#
directive|include
file|<functional>
end_include

begin_include
include|#
directive|include
file|<algorithm>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|alloca
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUC__
end_ifdef

begin_define
define|#
directive|define
name|alloca
value|__builtin_alloca
end_define

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* not GNU C.  */
end_comment

begin_if
if|#
directive|if
operator|(
operator|!
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|&&
name|defined
argument_list|(
name|sparc
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|__sparc__
argument_list|)
operator|||
name|defined
argument_list|(
name|__sparc
argument_list|)
operator|||
name|defined
argument_list|(
name|__sgi
argument_list|)
end_if

begin_include
include|#
directive|include
file|<alloca.h>
end_include

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* not sparc */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|MSDOS
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__TURBOC__
argument_list|)
end_if

begin_include
include|#
directive|include
file|<malloc.h>
end_include

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* not MSDOS, or __TURBOC__ */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_AIX
argument_list|)
end_if

begin_include
include|#
directive|include
file|<malloc.h>
end_include

begin_pragma
pragma|#
directive|pragma
name|alloca
end_pragma

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* not MSDOS, __TURBOC__, or _AIX */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__hpux
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __hpux */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not _AIX */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not MSDOS, or __TURBOC__ */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not sparc.  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* not GNU C.  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* alloca not defined.  */
end_comment

begin_extern
extern|extern
literal|"C"
block|{
name|void
modifier|*
name|alloca
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
block|}
end_extern

begin_extern
extern|extern
literal|"C++"
block|{
name|template
operator|<
name|class
name|_Clos
operator|,
name|typename
name|_Tp
operator|>
name|class
name|_Expr
expr_stmt|;
name|template
operator|<
name|typename
name|_Tp1
operator|,
name|typename
name|_Tp2
operator|>
name|class
name|_ValArray
expr_stmt|;
name|template
operator|<
name|template
operator|<
name|class
operator|>
name|class
name|_Oper
operator|,
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
expr|struct
name|_UnClos
expr_stmt|;
name|template
operator|<
name|template
operator|<
name|class
operator|>
name|class
name|_Oper
operator|,
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta1
operator|,
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta2
operator|,
name|class
name|_Dom1
operator|,
name|class
name|_Dom2
operator|>
name|class
name|_BinClos
expr_stmt|;
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_SClos
expr_stmt|;
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_GClos
expr_stmt|;
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_IClos
expr_stmt|;
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_ValFunClos
expr_stmt|;
name|template
operator|<
name|template
operator|<
name|class
operator|,
name|class
operator|>
name|class
name|_Meta
operator|,
name|class
name|_Dom
operator|>
name|class
name|_RefFunClos
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|_Unary_plus
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|_Bitwise_and
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|_Bitwise_or
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|_Bitwise_xor
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|_Bitwise_not
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|_Shift_left
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
expr|struct
name|_Shift_right
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|valarray
expr_stmt|;
comment|// An array of type _Tp
name|class
name|slice
decl_stmt|;
comment|// BLAS-like slice out of an array
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|slice_array
expr_stmt|;
name|class
name|gslice
decl_stmt|;
comment|// generalized slice out of an array
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|gslice_array
expr_stmt|;
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|mask_array
expr_stmt|;
comment|// masked array
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|indirect_array
expr_stmt|;
comment|// indirected array
block|}
end_extern

begin_comment
comment|// extern "C++"
end_comment

begin_include
include|#
directive|include
file|<std/valarray_array.h>
end_include

begin_include
include|#
directive|include
file|<std/valarray_meta.h>
end_include

begin_extern
extern|extern
literal|"C++"
block|{
name|template
operator|<
name|class
name|_Tp
operator|>
name|class
name|valarray
block|{
name|public
operator|:
typedef|typedef
name|_Tp
name|value_type
typedef|;
comment|// _lib.valarray.cons_ construct/destroy:
name|valarray
argument_list|()
expr_stmt|;
name|explicit
name|valarray
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
name|valarray
argument_list|(
specifier|const
name|_Tp
operator|&
argument_list|,
name|size_t
argument_list|)
expr_stmt|;
name|valarray
argument_list|(
specifier|const
name|_Tp
operator|*
name|__restrict__
argument_list|,
name|size_t
argument_list|)
expr_stmt|;
name|valarray
argument_list|(
specifier|const
name|valarray
operator|&
argument_list|)
expr_stmt|;
name|valarray
argument_list|(
specifier|const
name|slice_array
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
name|valarray
argument_list|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
name|valarray
argument_list|(
specifier|const
name|mask_array
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
name|valarray
argument_list|(
specifier|const
name|indirect_array
operator|<
name|_Tp
operator|>
operator|&
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
argument_list|(
specifier|const
name|_Expr
operator|<
name|_Dom
argument_list|,
name|_Tp
operator|>
operator|&
name|__e
argument_list|)
expr_stmt|;
operator|~
name|valarray
argument_list|()
expr_stmt|;
comment|// _lib.valarray.assign_ assignment:
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|slice_array
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|mask_array
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|indirect_array
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
comment|// _lib.valarray.access_ element access:
name|_Tp
name|operator
index|[]
argument_list|(
name|size_t
argument_list|)
decl|const
decl_stmt|;
name|_Tp
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
comment|// _lib.valarray.sub_ subset operations:
name|_Expr
operator|<
name|_SClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
index|[]
operator|(
name|slice
operator|)
specifier|const
expr_stmt|;
name|slice_array
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
name|slice
operator|)
expr_stmt|;
name|_Expr
operator|<
name|_GClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
operator|)
specifier|const
expr_stmt|;
name|gslice_array
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|mask_array
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
operator|)
expr_stmt|;
name|_Expr
operator|<
name|_IClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
operator|)
specifier|const
expr_stmt|;
name|indirect_array
operator|<
name|_Tp
operator|>
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
operator|)
expr_stmt|;
comment|// _lib.valarray.unary_ unary operators:
name|_Expr
operator|<
name|_UnClos
operator|<
name|_Unary_plus
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
operator|+
operator|(
operator|)
specifier|const
expr_stmt|;
name|_Expr
operator|<
name|_UnClos
operator|<
name|negate
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
operator|-
operator|(
operator|)
specifier|const
expr_stmt|;
name|_Expr
operator|<
name|_UnClos
operator|<
name|_Bitwise_not
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|operator
operator|~
operator|(
operator|)
specifier|const
expr_stmt|;
name|_Expr
operator|<
name|_UnClos
operator|<
name|logical_not
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|bool
operator|>
name|operator
operator|!
operator|(
operator|)
specifier|const
expr_stmt|;
comment|// _lib.valarray.cassign_ computed assignment:
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|%=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator||=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|<<=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|>>=
operator|(
specifier|const
name|_Tp
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|%=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator||=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|<<=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|>>=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|%=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|^=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator||=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|&=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|<<=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
name|template
operator|<
name|class
name|_Dom
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|operator
operator|>>=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
operator|)
expr_stmt|;
comment|// _lib.valarray.members_ member functions:
name|size_t
name|size
argument_list|()
specifier|const
expr_stmt|;
name|_Tp
name|sum
argument_list|()
specifier|const
expr_stmt|;
name|_Tp
name|min
argument_list|()
specifier|const
expr_stmt|;
name|_Tp
name|max
argument_list|()
specifier|const
expr_stmt|;
comment|// FIXME: Extension
name|_Tp
name|product
argument_list|()
specifier|const
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
name|shift
argument_list|(
argument|int
argument_list|)
specifier|const
expr_stmt|;
name|valarray
operator|<
name|_Tp
operator|>
name|cshift
argument_list|(
argument|int
argument_list|)
specifier|const
expr_stmt|;
name|_Expr
operator|<
name|_ValFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|apply
argument_list|(
argument|_Tp func(_Tp)
argument_list|)
specifier|const
expr_stmt|;
name|_Expr
operator|<
name|_RefFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|apply
argument_list|(
argument|_Tp func(const _Tp&)
argument_list|)
specifier|const
expr_stmt|;
name|void
name|resize
parameter_list|(
name|size_t
name|__size
parameter_list|,
name|_Tp
name|__c
init|=
name|_Tp
argument_list|()
parameter_list|)
function_decl|;
name|private
label|:
name|size_t
name|_M_size
decl_stmt|;
name|_Tp
modifier|*
name|__restrict__
name|_M_data
decl_stmt|;
name|friend
name|class
name|_Array
operator|<
name|_Tp
operator|>
expr_stmt|;
block|}
end_extern

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Unary_plus
operator|:
name|unary_function
operator|<
name|_Tp
operator|,
name|_Tp
operator|>
block|{
name|_Tp
name|operator
argument_list|()
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
specifier|const
block|{
return|return
name|__t
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Bitwise_and
operator|:
name|binary_function
operator|<
name|_Tp
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
block|{
name|_Tp
name|operator
argument_list|()
operator|(
name|_Tp
name|__x
operator|,
name|_Tp
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|&
name|__y
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Bitwise_or
operator|:
name|binary_function
operator|<
name|_Tp
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
block|{
name|_Tp
name|operator
argument_list|()
operator|(
name|_Tp
name|__x
operator|,
name|_Tp
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator||
name|__y
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Bitwise_xor
operator|:
name|binary_function
operator|<
name|_Tp
operator|,
name|_Tp
operator|,
name|_Tp
operator|>
block|{
name|_Tp
name|operator
argument_list|()
operator|(
name|_Tp
name|__x
operator|,
name|_Tp
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|^
name|__y
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Bitwise_not
operator|:
name|unary_function
operator|<
name|_Tp
operator|,
name|_Tp
operator|>
block|{
name|_Tp
name|operator
argument_list|()
operator|(
name|_Tp
name|__t
operator|)
specifier|const
block|{
return|return
operator|~
name|__t
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Shift_left
operator|:
name|unary_function
operator|<
name|_Tp
operator|,
name|_Tp
operator|>
block|{
name|_Tp
name|operator
argument_list|()
operator|(
name|_Tp
name|__x
operator|,
name|_Tp
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|<<
name|__y
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
expr|struct
name|_Shift_right
operator|:
name|unary_function
operator|<
name|_Tp
operator|,
name|_Tp
operator|>
block|{
name|_Tp
name|operator
argument_list|()
operator|(
name|_Tp
name|__x
operator|,
name|_Tp
name|__y
operator|)
specifier|const
block|{
return|return
name|__x
operator|>>
name|__y
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
specifier|const
block|{
return|return
name|_M_data
index|[
name|__i
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|size_t
name|__i
operator|)
block|{
return|return
name|_M_data
index|[
name|__i
index|]
return|;
block|}
end_expr_stmt

begin_comment
unit|}
comment|// extern "C++"
end_comment

begin_include
include|#
directive|include
file|<std/slice.h>
end_include

begin_include
include|#
directive|include
file|<std/slice_array.h>
end_include

begin_include
include|#
directive|include
file|<std/gslice.h>
end_include

begin_include
include|#
directive|include
file|<std/gslice_array.h>
end_include

begin_include
include|#
directive|include
file|<std/mask_array.h>
end_include

begin_include
include|#
directive|include
file|<std/indirect_array.h>
end_include

begin_expr_stmt
unit|extern
literal|"C++"
block|{
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|()
operator|:
name|_M_size
argument_list|(
literal|0
argument_list|)
block|,
name|_M_data
argument_list|(
literal|0
argument_list|)
block|{}
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
argument|size_t __n
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__n
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[__n]
argument_list|)
block|{}
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
argument|const _Tp& __t
argument_list|,
argument|size_t __n
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__n
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[__n]
argument_list|)
block|{
name|__valarray_fill
argument_list|(
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|__t
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
argument|const _Tp* __restrict__ __pT
argument_list|,
argument|size_t __n
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__n
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[__n]
argument_list|)
block|{
name|__valarray_copy
argument_list|(
name|__pT
argument_list|,
name|__n
argument_list|,
name|_M_data
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__v
operator|.
name|_M_size
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[__v._M_size]
argument_list|)
block|{
name|__valarray_copy
argument_list|(
name|__v
operator|.
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|_M_data
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|slice_array
operator|<
name|_Tp
operator|>
operator|&
name|__sa
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__sa
operator|.
name|_M_sz
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[__sa._M_sz]
argument_list|)
block|{
name|__valarray_copy
argument_list|(
name|__sa
operator|.
name|_M_array
argument_list|,
name|__sa
operator|.
name|_M_sz
argument_list|,
name|__sa
operator|.
name|_M_stride
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
name|__ga
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__ga
operator|.
name|_M_index
operator|.
name|size
argument_list|()
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[_M_size]
argument_list|)
block|{
name|__valarray_copy
argument_list|(
name|__ga
operator|.
name|_M_array
argument_list|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|__ga
operator|.
name|_M_index
operator|)
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|mask_array
operator|<
name|_Tp
operator|>
operator|&
name|__ma
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__ma
operator|.
name|_M_sz
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[__ma._M_sz]
argument_list|)
block|{
name|__valarray_copy
argument_list|(
name|__ma
operator|.
name|_M_array
argument_list|,
name|__ma
operator|.
name|_M_mask
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|indirect_array
operator|<
name|_Tp
operator|>
operator|&
name|__ia
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__ia
operator|.
name|_M_sz
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[__ia._M_sz]
argument_list|)
block|{
name|__valarray_copy
argument_list|(
name|__ia
operator|.
name|_M_array
argument_list|,
name|__ia
operator|.
name|_M_index
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|class
name|_Dom
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|valarray
argument_list|(
specifier|const
name|_Expr
operator|<
name|_Dom
argument_list|,
name|_Tp
operator|>
operator|&
name|__e
argument_list|)
operator|:
name|_M_size
argument_list|(
name|__e
operator|.
name|size
argument_list|()
argument_list|)
block|,
name|_M_data
argument_list|(
argument|new _Tp[_M_size]
argument_list|)
block|{
name|__valarray_copy
argument_list|(
name|__e
argument_list|,
name|_M_size
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|)
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|::
operator|~
name|valarray
argument_list|()
block|{
name|delete
index|[]
name|_M_data
block|; }
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|__v
operator|)
block|{
name|__valarray_copy
argument_list|(
name|__v
operator|.
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|_M_data
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|_Tp
operator|&
name|__t
operator|)
block|{
name|__valarray_fill
argument_list|(
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|__t
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|slice_array
operator|<
name|_Tp
operator|>
operator|&
name|__sa
operator|)
block|{
name|__valarray_copy
argument_list|(
name|__sa
operator|.
name|_M_array
argument_list|,
name|__sa
operator|.
name|_M_sz
argument_list|,
name|__sa
operator|.
name|_M_stride
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|gslice_array
operator|<
name|_Tp
operator|>
operator|&
name|__ga
operator|)
block|{
name|__valarray_copy
argument_list|(
name|__ga
operator|.
name|_M_array
argument_list|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|__ga
operator|.
name|_M_index
operator|)
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|mask_array
operator|<
name|_Tp
operator|>
operator|&
name|__ma
operator|)
block|{
name|__valarray_copy
argument_list|(
name|__ma
operator|.
name|_M_array
argument_list|,
name|__ma
operator|.
name|_M_mask
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|indirect_array
operator|<
name|_Tp
operator|>
operator|&
name|__ia
operator|)
block|{
name|__valarray_copy
argument_list|(
name|__ia
operator|.
name|_M_array
argument_list|,
name|__ia
operator|.
name|_M_index
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|_M_size
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
name|template
operator|<
name|class
name|_Dom
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
operator|&
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|_Expr
operator|<
name|_Dom
operator|,
name|_Tp
operator|>
operator|&
name|__e
operator|)
block|{
name|__valarray_copy
argument_list|(
name|__e
argument_list|,
name|_M_size
argument_list|,
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_SClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|slice
name|__s
operator|)
specifier|const
block|{
typedef|typedef
name|_SClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|__s
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|slice_array
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
name|slice
name|__s
operator|)
block|{
return|return
name|slice_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__s
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_GClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
name|__gs
operator|)
specifier|const
block|{
typedef|typedef
name|_GClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
argument_list|,
name|__gs
operator|.
name|_M_index
operator|->
name|_M_index
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|gslice_array
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|gslice
operator|&
name|__gs
operator|)
block|{
return|return
name|gslice_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__gs
operator|.
name|_M_index
operator|->
name|_M_index
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
name|__m
operator|)
specifier|const
block|{
name|size_t
name|__s
argument_list|(
literal|0
argument_list|)
block|;
name|size_t
name|__e
argument_list|(
name|__m
operator|.
name|size
argument_list|()
argument_list|)
block|;
for|for
control|(
name|size_t
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__e
condition|;
operator|++
name|__i
control|)
if|if
condition|(
name|__m
index|[
name|__i
index|]
condition|)
operator|++
name|__s
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|valarray
operator|<
name|_Tp
operator|>
operator|(
name|mask_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__s
operator|,
name|_Array
operator|<
name|bool
operator|>
operator|(
name|__m
operator|)
operator|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|mask_array
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|bool
operator|>
operator|&
name|__m
operator|)
block|{
name|size_t
name|__s
argument_list|(
literal|0
argument_list|)
block|;
name|size_t
name|__e
argument_list|(
name|__m
operator|.
name|size
argument_list|()
argument_list|)
block|;
for|for
control|(
name|size_t
name|__i
init|=
literal|0
init|;
name|__i
operator|<
name|__e
condition|;
operator|++
name|__i
control|)
if|if
condition|(
name|__m
index|[
name|__i
index|]
condition|)
operator|++
name|__s
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|mask_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__s
operator|,
name|_Array
operator|<
name|bool
operator|>
operator|(
name|__m
operator|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_IClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
operator|)
specifier|const
block|{
typedef|typedef
name|_IClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
operator|*
name|this
argument_list|,
name|__i
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|indirect_array
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
index|[]
operator|(
specifier|const
name|valarray
operator|<
name|size_t
operator|>
operator|&
name|__i
operator|)
block|{
return|return
name|indirect_array
operator|<
name|_Tp
operator|>
operator|(
name|_Array
operator|<
name|_Tp
operator|>
operator|(
name|_M_data
operator|)
operator|,
name|__i
operator|.
name|size
argument_list|()
operator|,
name|_Array
operator|<
name|size_t
operator|>
operator|(
name|__i
operator|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|size_t
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|size
argument_list|()
specifier|const
block|{
return|return
name|_M_size
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|_Tp
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|sum
argument_list|()
specifier|const
block|{
return|return
name|accumulate
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|,
name|_Tp
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|product
argument_list|()
specifier|const
block|{
return|return
name|accumulate
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|,
name|_Tp
argument_list|(
literal|1
argument_list|)
argument_list|,
name|multiplies
operator|<
name|_Tp
operator|>
operator|(
operator|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|shift
argument_list|(
argument|int __n
argument_list|)
specifier|const
block|{
name|_Tp
operator|*
specifier|const
name|__a
operator|=
name|static_cast
operator|<
name|_Tp
operator|*
operator|>
operator|(
name|alloca
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
operator|*
name|_M_size
argument_list|)
operator|)
block|;
if|if
condition|(
operator|!
name|__n
condition|)
comment|// __n == 0: no shift
name|__valarray_copy
argument_list|(
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|__a
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|__n
operator|>
literal|0
condition|)
block|{
comment|// __n> 0: shift left
if|if
condition|(
name|__n
operator|>
name|_M_size
condition|)
name|__valarray_fill
argument_list|(
name|__a
argument_list|,
name|__n
argument_list|,
name|_Tp
argument_list|()
argument_list|)
expr_stmt|;
else|else
block|{
name|__valarray_copy
argument_list|(
name|_M_data
operator|+
name|__n
argument_list|,
name|_M_size
operator|-
name|__n
argument_list|,
name|__a
argument_list|)
expr_stmt|;
name|__valarray_fill
argument_list|(
name|__a
operator|+
name|_M_size
operator|-
name|__n
argument_list|,
name|__n
argument_list|,
name|_Tp
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_block
unit|}     else
block|{
comment|// __n< 0: shift right
name|__valarray_copy
argument_list|(
name|_M_data
argument_list|,
name|_M_size
operator|+
name|__n
argument_list|,
name|__a
operator|-
name|__n
argument_list|)
expr_stmt|;
name|__valarray_fill
argument_list|(
name|__a
argument_list|,
operator|-
name|__n
argument_list|,
name|_Tp
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_block

begin_return
return|return
name|valarray
operator|<
name|_Tp
operator|>
operator|(
name|__a
operator|,
name|_M_size
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|valarray
operator|<
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|cshift
argument_list|(
argument|int __n
argument_list|)
specifier|const
block|{
name|_Tp
operator|*
specifier|const
name|__a
operator|=
name|static_cast
operator|<
name|_Tp
operator|*
operator|>
operator|(
name|alloca
argument_list|(
sizeof|sizeof
argument_list|(
name|_Tp
argument_list|)
operator|*
name|_M_size
argument_list|)
operator|)
block|;
if|if
condition|(
operator|!
name|__n
condition|)
comment|// __n == 0: no cshift
name|__valarray_copy
argument_list|(
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|__a
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|__n
operator|>
literal|0
condition|)
block|{
comment|// __n> 0: cshift left
name|__valarray_copy
argument_list|(
name|_M_data
argument_list|,
name|__n
argument_list|,
name|__a
operator|+
name|_M_size
operator|-
name|__n
argument_list|)
expr_stmt|;
name|__valarray_copy
argument_list|(
name|_M_data
operator|+
name|__n
argument_list|,
name|_M_size
operator|-
name|__n
argument_list|,
name|__a
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
comment|// __n< 0: cshift right
name|__valarray_copy
argument_list|(
name|_M_data
operator|+
name|_M_size
operator|+
name|__n
argument_list|,
operator|-
name|__n
argument_list|,
name|__a
argument_list|)
expr_stmt|;
name|__valarray_copy
argument_list|(
name|_M_data
argument_list|,
name|_M_size
operator|+
name|__n
argument_list|,
name|__a
operator|-
name|__n
argument_list|)
expr_stmt|;
block|}
end_else

begin_return
return|return
name|valarray
operator|<
name|_Tp
operator|>
operator|(
name|__a
operator|,
name|_M_size
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|void
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|resize
argument_list|(
argument|size_t __n
argument_list|,
argument|_Tp __c
argument_list|)
block|{
if|if
condition|(
name|_M_size
operator|!=
name|__n
condition|)
block|{
name|delete
index|[]
name|_M_data
decl_stmt|;
name|_M_size
operator|=
name|__n
expr_stmt|;
name|_M_data
operator|=
name|new
name|_Tp
index|[
name|_M_size
index|]
expr_stmt|;
block|}
name|__valarray_fill
argument_list|(
name|_M_data
argument_list|,
name|_M_size
argument_list|,
name|__c
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|min
argument_list|()
specifier|const
block|{
return|return
operator|*
name|min_element
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Tp
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|max
argument_list|()
specifier|const
block|{
return|return
operator|*
name|max_element
argument_list|(
name|_M_data
argument_list|,
name|_M_data
operator|+
name|_M_size
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_ValFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|apply
argument_list|(
argument|_Tp func (_Tp)
argument_list|)
specifier|const
block|{
typedef|typedef
name|_ValFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
operator|*
name|this
argument_list|,
name|func
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_RefFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|_Tp
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|apply
argument_list|(
argument|_Tp func (const _Tp&)
argument_list|)
specifier|const
block|{
typedef|typedef
name|_RefFunClos
operator|<
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|_Tp
operator|>
operator|(
name|_Closure
argument_list|(
operator|*
name|this
argument_list|,
name|func
argument_list|)
operator|)
return|;
end_return

begin_define
unit|}
define|#
directive|define
name|_DEFINE_VALARRAY_UNARY_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<typename _Tp>						\   inline _Expr<_UnClos<_Name,_ValArray,_Tp>, _Tp>               	\   valarray<_Tp>::operator##_Op() const					\   {									\       typedef _UnClos<_Name,_ValArray,_Tp> _Closure;	                \       return _Expr<_Closure, _Tp> (_Closure (*this));			\   }
end_define

begin_expr_stmt
unit|_DEFINE_VALARRAY_UNARY_OPERATOR
operator|(
operator|+
operator|,
name|_Unary_plus
operator|)
name|_DEFINE_VALARRAY_UNARY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|negate
argument_list|)
name|_DEFINE_VALARRAY_UNARY_OPERATOR
argument_list|(
argument|~
argument_list|,
argument|_Bitwise_not
argument_list|)
undef|#
directive|undef
name|_DEFINE_VALARRAY_UNARY_OPERATOR
name|template
operator|<
name|typename
name|_Tp
operator|>
specifier|inline
name|_Expr
operator|<
name|_UnClos
operator|<
name|logical_not
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
operator|,
name|bool
operator|>
name|valarray
operator|<
name|_Tp
operator|>
operator|::
name|operator
operator|!
operator|(
operator|)
specifier|const
block|{
typedef|typedef
name|_UnClos
operator|<
name|logical_not
operator|,
name|_ValArray
operator|,
name|_Tp
operator|>
name|_Closure
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|_Expr
operator|<
name|_Closure
operator|,
name|bool
operator|>
operator|(
name|_Closure
argument_list|(
operator|*
name|this
argument_list|)
operator|)
return|;
end_return

begin_define
unit|}
define|#
directive|define
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<class _Tp>							\   inline valarray<_Tp>&						\   valarray<_Tp>::operator##_Op##= (const _Tp&__t)			\   {									\       _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, __t);	\       return *this;							\   }									\ 									\   template<class _Tp>							\   inline valarray<_Tp>&						\   valarray<_Tp>::operator##_Op##= (const valarray<_Tp>&__v)		\   {									\       _Array_augmented_##_Name (_Array<_Tp>(_M_data), _M_size, 		\                                _Array<_Tp>(__v._M_data));		\       return *this;							\   }
end_define

begin_expr_stmt
unit|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
operator|(
operator|+
operator|,
name|plus
operator|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|-
argument_list|,
argument|minus
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|*
argument_list|,
argument|multiplies
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|/
argument_list|,
argument|divides
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|%
argument_list|,
argument|modulus
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|^
argument_list|,
argument|xor
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|&
argument_list|,
argument|and
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument||
argument_list|,
argument|or
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|<<
argument_list|,
argument|shift_left
argument_list|)
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
argument_list|(
argument|>>
argument_list|,
argument|shift_right
argument_list|)
undef|#
directive|undef
name|_DEFINE_VALARRAY_AUGMENTED_ASSIGNMENT
define|#
directive|define
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<class _Tp> template<class _Dom>				\   inline valarray<_Tp>&						\   valarray<_Tp>::operator##_Op##= (const _Expr<_Dom,_Tp>&__e)		\   {									\       _Array_augmented_##_Name (_Array<_Tp>(_M_data), __e, _M_size);	\       return *this;							\   }
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|+
argument_list|,
argument|plus
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|-
argument_list|,
argument|minus
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|*
argument_list|,
argument|multiplies
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|/
argument_list|,
argument|divides
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|%
argument_list|,
argument|modulus
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|^
argument_list|,
argument|xor
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|&
argument_list|,
argument|and
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument||
argument_list|,
argument|or
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|<<
argument_list|,
argument|shift_left
argument_list|)
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
argument_list|(
argument|>>
argument_list|,
argument|shift_right
argument_list|)
undef|#
directive|undef
name|_DEFINE_VALARRAY_EXPR_AUGMENTED_ASSIGNMENT
define|#
directive|define
name|_DEFINE_BINARY_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<typename _Tp>						\   inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>, _Tp>        \   operator##_Op (const valarray<_Tp>&__v, const valarray<_Tp>&__w)	\   {									\       typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \       return _Expr<_Closure, _Tp> (_Closure (__v, __w));		\   }									\ 									\   template<typename _Tp>						\   inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,_Tp>         \   operator##_Op (const valarray<_Tp>&__v, const _Tp&__t)		\   {									\       typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;	\       return _Expr<_Closure, _Tp> (_Closure (__v, __t));	        \   }									\ 									\   template<typename _Tp>						\   inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,_Tp>         \   operator##_Op (const _Tp&__t, const valarray<_Tp>&__v)		\   {									\       typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \       return _Expr<_Closure, _Tp> (_Closure (__t, __v));        	\   }
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|+
argument_list|,
argument|plus
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|-
argument_list|,
argument|minus
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|*
argument_list|,
argument|multiplies
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|/
argument_list|,
argument|divides
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|%
argument_list|,
argument|modulus
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|^
argument_list|,
argument|_Bitwise_xor
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|&
argument_list|,
argument|_Bitwise_and
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument||
argument_list|,
argument|_Bitwise_or
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|<<
argument_list|,
argument|_Shift_left
argument_list|)
name|_DEFINE_BINARY_OPERATOR
argument_list|(
argument|>>
argument_list|,
argument|_Shift_right
argument_list|)
undef|#
directive|undef
name|_DEFINE_BINARY_OPERATOR
define|#
directive|define
name|_DEFINE_LOGICAL_OPERATOR
parameter_list|(
name|_Op
parameter_list|,
name|_Name
parameter_list|)
define|\
value|template<typename _Tp>						\   inline _Expr<_BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp>,bool>        \   operator##_Op (const valarray<_Tp>&__v, const valarray<_Tp>&__w)	\   {									\       typedef _BinClos<_Name,_ValArray,_ValArray,_Tp,_Tp> _Closure;     \       return _Expr<_Closure, bool> (_Closure (__v, __w));               \   }									\ 									\   template<class _Tp>							\   inline _Expr<_BinClos<_Name,_ValArray,_Constant,_Tp,_Tp>,bool>        \   operator##_Op (const valarray<_Tp>&__v, const _Tp&__t)		\   {									\       typedef _BinClos<_Name,_ValArray,_Constant,_Tp,_Tp> _Closure;     \       return _Expr<_Closure, bool> (_Closure (__v, __t));       	\   }									\ 									\   template<class _Tp>							\   inline _Expr<_BinClos<_Name,_Constant,_ValArray,_Tp,_Tp>,bool>        \   operator##_Op (const _Tp&__t, const valarray<_Tp>&__v)		\   {									\       typedef _BinClos<_Name,_Constant,_ValArray,_Tp,_Tp> _Closure;     \       return _Expr<_Closure, bool> (_Closure (__t, __v));	        \   }
name|_DEFINE_LOGICAL_OPERATOR
argument_list|(
argument|&&
argument_list|,
argument|logical_and
argument_list|)
name|_DEFINE_LOGICAL_OPERATOR
argument_list|(
argument|||
argument_list|,
argument|logical_or
argument_list|)
name|_DEFINE_LOGICAL_OPERATOR
argument_list|(
argument|==
argument_list|,
argument|equal_to
argument_list|)
name|_DEFINE_LOGICAL_OPERATOR
argument_list|(
argument|!=
argument_list|,
argument|not_equal_to
argument_list|)
name|_DEFINE_LOGICAL_OPERATOR
argument_list|(
argument|<
argument_list|,
argument|less
argument_list|)
name|_DEFINE_LOGICAL_OPERATOR
argument_list|(
argument|>
argument_list|,
argument|greater
argument_list|)
name|_DEFINE_LOGICAL_OPERATOR
argument_list|(
argument|<=
argument_list|,
argument|less_equal
argument_list|)
name|_DEFINE_LOGICAL_OPERATOR
argument_list|(
argument|>=
argument_list|,
argument|greater_equal
argument_list|)
end_expr_stmt

begin_undef
undef|#
directive|undef
name|_DEFINE_VALARRAY_OPERATOR
end_undef

begin_undef
undef|#
directive|undef
name|_G_NO_VALARRAY_TEMPLATE_EXPORT
end_undef

begin_comment
unit|}
comment|// extern "C++"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// __STD_VALARRAY__
end_comment

begin_comment
comment|// Local Variables:
end_comment

begin_comment
comment|// mode:c++
end_comment

begin_comment
comment|// End:
end_comment

end_unit

