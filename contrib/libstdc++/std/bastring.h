begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// Main templates for the -*- C++ -*- string classes.
end_comment

begin_comment
comment|// Copyright (C) 1994, 1995 Free Software Foundation
end_comment

begin_comment
comment|// This file is part of the GNU ANSI C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License
end_comment

begin_comment
comment|// along with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
end_comment

begin_comment
comment|// As a special exception, if you link this library with files
end_comment

begin_comment
comment|// compiled with a GNU compiler to produce an executable, this does not cause
end_comment

begin_comment
comment|// the resulting executable to be covered by the GNU General Public License.
end_comment

begin_comment
comment|// This exception does not however invalidate any other reasons why
end_comment

begin_comment
comment|// the executable file might be covered by the GNU General Public License.
end_comment

begin_comment
comment|// Written by Jason Merrill based upon the specification by Takanori Adachi
end_comment

begin_comment
comment|// in ANSI X3J16/94-0013R2.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__BASTRING__
end_ifndef

begin_define
define|#
directive|define
name|__BASTRING__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<cstddef>
end_include

begin_include
include|#
directive|include
file|<std/straits.h>
end_include

begin_comment
comment|// NOTE : This does NOT conform to the draft standard and is likely to change
end_comment

begin_include
include|#
directive|include
file|<alloc.h>
end_include

begin_extern
extern|extern
literal|"C++"
block|{
name|class
name|istream
decl_stmt|;
name|class
name|ostream
decl_stmt|;
include|#
directive|include
file|<iterator>
ifdef|#
directive|ifdef
name|__STL_USE_EXCEPTIONS
specifier|extern
name|void
name|__out_of_range
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|__length_error
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
define|#
directive|define
name|OUTOFRANGE
parameter_list|(
name|cond
parameter_list|)
define|\
value|do { if (cond) __out_of_range (#cond); } while (0)
define|#
directive|define
name|LENGTHERROR
parameter_list|(
name|cond
parameter_list|)
define|\
value|do { if (cond) __length_error (#cond); } while (0)
else|#
directive|else
include|#
directive|include
file|<cassert>
define|#
directive|define
name|OUTOFRANGE
parameter_list|(
name|cond
parameter_list|)
value|assert (!(cond))
define|#
directive|define
name|LENGTHERROR
parameter_list|(
name|cond
parameter_list|)
value|assert (!(cond))
endif|#
directive|endif
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|=
name|string_char_traits
operator|<
name|charT
operator|>
operator|,
name|class
name|Allocator
operator|=
name|alloc
operator|>
name|class
name|basic_string
block|{
name|private
operator|:
expr|struct
name|Rep
block|{
name|size_t
name|len
block|,
name|res
block|,
name|ref
block|;
name|bool
name|selfish
block|;
name|charT
operator|*
name|data
argument_list|()
block|{
return|return
name|reinterpret_cast
operator|<
name|charT
operator|*
operator|>
operator|(
name|this
operator|+
literal|1
operator|)
return|;
block|}
name|charT
operator|&
name|operator
index|[]
operator|(
name|size_t
name|s
operator|)
block|{
return|return
name|data
argument_list|()
index|[
name|s
index|]
return|;
block|}
name|charT
operator|*
name|grab
argument_list|()
block|{
if|if
condition|(
name|selfish
condition|)
return|return
name|clone
argument_list|()
return|;
operator|++
name|ref
expr_stmt|;
return|return
name|data
argument_list|()
return|;
block|}
end_extern

begin_if
if|#
directive|if
name|defined
name|__i486__
operator|||
name|defined
name|__i586__
operator|||
name|defined
name|__i686__
end_if

begin_function
name|void
name|release
parameter_list|()
block|{
name|size_t
name|__val
decl_stmt|;
comment|// This opcode exists as a .byte instead of as a mnemonic for the
comment|// benefit of SCO OpenServer 5.  The system assembler (which is
comment|// essentially required on this target) can't assemble xaddl in
comment|//COFF mode.
asm|asm (".byte 0xf0, 0x0f, 0xc1, 0x02"
comment|// lock; xaddl %eax, (%edx)
asm|: "=a" (__val) 	    : "0" (-1), "m" (ref), "d" (&ref) 	    : "memory");
if|if
condition|(
name|__val
operator|==
literal|1
condition|)
name|delete
name|this
decl_stmt|;
block|}
end_function

begin_elif
elif|#
directive|elif
name|defined
name|__sparcv9__
end_elif

begin_function
name|void
name|release
parameter_list|()
block|{
name|size_t
name|__newval
decl_stmt|,
name|__oldval
init|=
name|ref
decl_stmt|;
do|do
block|{
name|__newval
operator|=
name|__oldval
operator|-
literal|1
expr_stmt|;
asm|__asm__ ("cas	[%4], %2, %0" 		     : "=r" (__oldval), "=m" (ref) 		     : "r" (__oldval), "m" (ref), "r"(&(ref)), "0" (__newval));
block|}
do|while
condition|(
name|__newval
operator|!=
name|__oldval
condition|)
do|;
if|if
condition|(
name|__oldval
operator|==
literal|0
condition|)
name|delete
name|this
decl_stmt|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
name|void
name|release
parameter_list|()
block|{
if|if
condition|(
operator|--
name|ref
operator|==
literal|0
condition|)
name|delete
name|this
decl_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
specifier|inline
specifier|static
name|void
modifier|*
name|operator
name|new
parameter_list|(
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|inline
specifier|static
name|void
name|operator
name|delete
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|inline
specifier|static
name|Rep
modifier|*
name|create
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|charT
modifier|*
name|clone
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
specifier|inline
name|void
name|copy
parameter_list|(
name|size_t
parameter_list|,
specifier|const
name|charT
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|inline
name|void
name|move
parameter_list|(
name|size_t
parameter_list|,
specifier|const
name|charT
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|inline
name|void
name|set
parameter_list|(
name|size_t
parameter_list|,
specifier|const
name|charT
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|inline
specifier|static
name|bool
name|excess_slop
parameter_list|(
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|inline
specifier|static
name|size_t
name|frob_size
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_label
name|private
label|:
end_label

begin_decl_stmt
name|Rep
modifier|&
name|operator
init|=
operator|(
specifier|const
name|Rep
operator|&
operator|)
decl_stmt|;
end_decl_stmt

begin_label
unit|};
name|public
label|:
end_label

begin_comment
comment|// types:
end_comment

begin_typedef
typedef|typedef
name|traits
name|traits_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|typename
name|traits
operator|::
name|char_type
name|value_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
name|allocator_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|charT
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|charT
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|charT
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|charT
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|pointer
name|iterator
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|const_pointer
name|const_iterator
typedef|;
end_typedef

begin_typedef
typedef|typedef
operator|::
name|reverse_iterator
operator|<
name|iterator
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
operator|::
name|reverse_iterator
operator|<
name|const_iterator
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_decl_stmt
specifier|static
specifier|const
name|size_type
name|npos
init|=
name|static_cast
operator|<
name|size_type
operator|>
operator|(
operator|-
literal|1
operator|)
decl_stmt|;
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|Rep
operator|*
name|rep
argument_list|()
specifier|const
block|{
return|return
name|reinterpret_cast
operator|<
name|Rep
operator|*
operator|>
operator|(
name|dat
operator|)
operator|-
literal|1
return|;
block|}
end_expr_stmt

begin_function
name|void
name|repup
parameter_list|(
name|Rep
modifier|*
name|p
parameter_list|)
block|{
name|rep
argument_list|()
operator|->
name|release
argument_list|()
expr_stmt|;
name|dat
operator|=
name|p
operator|->
name|data
argument_list|()
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_expr_stmt
specifier|const
name|charT
operator|*
name|data
argument_list|()
specifier|const
block|{
return|return
name|rep
argument_list|()
operator|->
name|data
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|length
argument_list|()
specifier|const
block|{
return|return
name|rep
argument_list|()
operator|->
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|rep
argument_list|()
operator|->
name|len
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|rep
argument_list|()
operator|->
name|res
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
operator|(
name|npos
operator|-
literal|1
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|charT
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// XXX
end_comment

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|size
argument_list|()
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_comment
comment|// _lib.string.cons_ construct/copy/destroy:
end_comment

begin_decl_stmt
name|basic_string
modifier|&
name|operator
init|=
operator|(
specifier|const
name|basic_string
operator|&
name|str
operator|)
block|{
if|if
condition|(
operator|&
name|str
operator|!=
name|this
condition|)
block|{
name|rep
argument_list|()
operator|->
name|release
argument_list|()
expr_stmt|;
name|dat
operator|=
name|str
operator|.
name|rep
argument_list|()
operator|->
name|grab
argument_list|()
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_macro
name|explicit
end_macro

begin_expr_stmt
name|basic_string
argument_list|()
operator|:
name|dat
argument_list|(
argument|nilRep.grab ()
argument_list|)
block|{ }
name|basic_string
argument_list|(
specifier|const
name|basic_string
operator|&
name|str
argument_list|)
operator|:
name|dat
argument_list|(
argument|str.rep ()->grab ()
argument_list|)
block|{ }
name|basic_string
argument_list|(
argument|const basic_string& str
argument_list|,
argument|size_type pos
argument_list|,
argument|size_type n = npos
argument_list|)
operator|:
name|dat
argument_list|(
argument|nilRep.grab ()
argument_list|)
block|{
name|assign
argument_list|(
name|str
argument_list|,
name|pos
argument_list|,
name|n
argument_list|)
block|; }
name|basic_string
argument_list|(
argument|const charT* s
argument_list|,
argument|size_type n
argument_list|)
operator|:
name|dat
argument_list|(
argument|nilRep.grab ()
argument_list|)
block|{
name|assign
argument_list|(
name|s
argument_list|,
name|n
argument_list|)
block|; }
name|basic_string
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|)
operator|:
name|dat
argument_list|(
argument|nilRep.grab ()
argument_list|)
block|{
name|assign
argument_list|(
name|s
argument_list|)
block|; }
name|basic_string
argument_list|(
argument|size_type n
argument_list|,
argument|charT c
argument_list|)
operator|:
name|dat
argument_list|(
argument|nilRep.grab ()
argument_list|)
block|{
name|assign
argument_list|(
name|n
argument_list|,
name|c
argument_list|)
block|; }
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
name|template
operator|<
name|class
name|InputIterator
operator|>
name|basic_string
argument_list|(
argument|InputIterator begin
argument_list|,
argument|InputIterator end
argument_list|)
else|#
directive|else
name|basic_string
argument_list|(
argument|const_iterator begin
argument_list|,
argument|const_iterator end
argument_list|)
endif|#
directive|endif
operator|:
name|dat
argument_list|(
argument|nilRep.grab ()
argument_list|)
block|{
name|assign
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
block|; }
operator|~
name|basic_string
argument_list|()
block|{
name|rep
argument_list|()
operator|->
name|release
argument_list|()
block|; }
name|void
name|swap
argument_list|(
argument|basic_string&s
argument_list|)
block|{
name|charT
operator|*
name|d
operator|=
name|dat
block|;
name|dat
operator|=
name|s
operator|.
name|dat
block|;
name|s
operator|.
name|dat
operator|=
name|d
block|; }
name|basic_string
operator|&
name|append
argument_list|(
argument|const basic_string& str
argument_list|,
argument|size_type pos =
literal|0
argument_list|,
argument|size_type n = npos
argument_list|)
block|{
return|return
name|replace
argument_list|(
name|length
argument_list|()
argument_list|,
literal|0
argument_list|,
name|str
argument_list|,
name|pos
argument_list|,
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|basic_string
modifier|&
name|append
parameter_list|(
specifier|const
name|charT
modifier|*
name|s
parameter_list|,
name|size_type
name|n
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|length
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|append
parameter_list|(
specifier|const
name|charT
modifier|*
name|s
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|s
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|append
parameter_list|(
name|size_type
name|n
parameter_list|,
name|charT
name|c
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|length
argument_list|()
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|basic_string
operator|&
name|append
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
else|#
directive|else
name|basic_string
operator|&
name|append
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
endif|#
directive|endif
block|{
return|return
name|replace
argument_list|(
name|iend
argument_list|()
argument_list|,
name|iend
argument_list|()
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|basic_string
modifier|&
name|assign
parameter_list|(
specifier|const
name|basic_string
modifier|&
name|str
parameter_list|,
name|size_type
name|pos
init|=
literal|0
parameter_list|,
name|size_type
name|n
init|=
name|npos
parameter_list|)
block|{
return|return
name|replace
argument_list|(
literal|0
argument_list|,
name|npos
argument_list|,
name|str
argument_list|,
name|pos
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|assign
parameter_list|(
specifier|const
name|charT
modifier|*
name|s
parameter_list|,
name|size_type
name|n
parameter_list|)
block|{
return|return
name|replace
argument_list|(
literal|0
argument_list|,
name|npos
argument_list|,
name|s
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|assign
parameter_list|(
specifier|const
name|charT
modifier|*
name|s
parameter_list|)
block|{
return|return
name|assign
argument_list|(
name|s
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|assign
parameter_list|(
name|size_type
name|n
parameter_list|,
name|charT
name|c
parameter_list|)
block|{
return|return
name|replace
argument_list|(
literal|0
argument_list|,
name|npos
argument_list|,
name|n
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|basic_string
operator|&
name|assign
argument_list|(
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
else|#
directive|else
name|basic_string
operator|&
name|assign
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
endif|#
directive|endif
block|{
return|return
name|replace
argument_list|(
name|ibegin
argument_list|()
argument_list|,
name|iend
argument_list|()
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|basic_string
modifier|&
name|operator
init|=
operator|(
specifier|const
name|charT
operator|*
name|s
operator|)
block|{
return|return
name|assign
argument_list|(
name|s
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|basic_string
modifier|&
name|operator
init|=
operator|(
name|charT
name|c
operator|)
block|{
return|return
name|assign
argument_list|(
literal|1
argument_list|,
name|c
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|basic_string
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|basic_string
operator|&
name|rhs
operator|)
block|{
return|return
name|append
argument_list|(
name|rhs
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|basic_string
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|charT
operator|*
name|s
operator|)
block|{
return|return
name|append
argument_list|(
name|s
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|basic_string
operator|&
name|operator
operator|+=
operator|(
name|charT
name|c
operator|)
block|{
return|return
name|append
argument_list|(
literal|1
argument_list|,
name|c
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|basic_string
modifier|&
name|insert
parameter_list|(
name|size_type
name|pos1
parameter_list|,
specifier|const
name|basic_string
modifier|&
name|str
parameter_list|,
name|size_type
name|pos2
init|=
literal|0
parameter_list|,
name|size_type
name|n
init|=
name|npos
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|pos1
argument_list|,
literal|0
argument_list|,
name|str
argument_list|,
name|pos2
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|insert
parameter_list|(
name|size_type
name|pos
parameter_list|,
specifier|const
name|charT
modifier|*
name|s
parameter_list|,
name|size_type
name|n
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|pos
argument_list|,
literal|0
argument_list|,
name|s
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|insert
parameter_list|(
name|size_type
name|pos
parameter_list|,
specifier|const
name|charT
modifier|*
name|s
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|pos
argument_list|,
name|s
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|insert
parameter_list|(
name|size_type
name|pos
parameter_list|,
name|size_type
name|n
parameter_list|,
name|charT
name|c
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|pos
argument_list|,
literal|0
argument_list|,
name|n
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|p
parameter_list|,
name|charT
name|c
parameter_list|)
block|{
name|size_type
name|__o
init|=
name|p
operator|-
name|ibegin
argument_list|()
decl_stmt|;
name|insert
argument_list|(
name|p
operator|-
name|ibegin
argument_list|()
argument_list|,
literal|1
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|selfish
argument_list|()
expr_stmt|;
return|return
name|ibegin
argument_list|()
operator|+
name|__o
return|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|p
parameter_list|,
name|size_type
name|n
parameter_list|,
name|charT
name|c
parameter_list|)
block|{
name|size_type
name|__o
init|=
name|p
operator|-
name|ibegin
argument_list|()
decl_stmt|;
name|insert
argument_list|(
name|p
operator|-
name|ibegin
argument_list|()
argument_list|,
name|n
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|selfish
argument_list|()
expr_stmt|;
return|return
name|ibegin
argument_list|()
operator|+
name|__o
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|void
name|insert
argument_list|(
argument|iterator p
argument_list|,
argument|InputIterator first
argument_list|,
argument|InputIterator last
argument_list|)
else|#
directive|else
name|void
name|insert
argument_list|(
argument|iterator p
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
endif|#
directive|endif
block|{
name|replace
argument_list|(
name|p
argument_list|,
name|p
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
block|; }
name|basic_string
operator|&
name|erase
argument_list|(
argument|size_type pos =
literal|0
argument_list|,
argument|size_type n = npos
argument_list|)
block|{
return|return
name|replace
argument_list|(
name|pos
argument_list|,
name|n
argument_list|,
operator|(
name|size_type
operator|)
literal|0
argument_list|,
operator|(
name|charT
operator|)
literal|0
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|p
parameter_list|)
block|{
name|size_type
name|__o
init|=
name|p
operator|-
name|begin
argument_list|()
decl_stmt|;
name|replace
argument_list|(
name|__o
argument_list|,
literal|1
argument_list|,
operator|(
name|size_type
operator|)
literal|0
argument_list|,
operator|(
name|charT
operator|)
literal|0
argument_list|)
expr_stmt|;
name|selfish
argument_list|()
expr_stmt|;
return|return
name|ibegin
argument_list|()
operator|+
name|__o
return|;
block|}
end_function

begin_function
name|iterator
name|erase
parameter_list|(
name|iterator
name|f
parameter_list|,
name|iterator
name|l
parameter_list|)
block|{
name|size_type
name|__o
init|=
name|f
operator|-
name|ibegin
argument_list|()
decl_stmt|;
name|replace
argument_list|(
name|__o
argument_list|,
name|l
operator|-
name|f
argument_list|,
operator|(
name|size_type
operator|)
literal|0
argument_list|,
operator|(
name|charT
operator|)
literal|0
argument_list|)
expr_stmt|;
name|selfish
argument_list|()
expr_stmt|;
return|return
name|ibegin
argument_list|()
operator|+
name|__o
return|;
block|}
end_function

begin_function_decl
name|basic_string
modifier|&
name|replace
parameter_list|(
name|size_type
name|pos1
parameter_list|,
name|size_type
name|n1
parameter_list|,
specifier|const
name|basic_string
modifier|&
name|str
parameter_list|,
name|size_type
name|pos2
init|=
literal|0
parameter_list|,
name|size_type
name|n2
init|=
name|npos
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|basic_string
modifier|&
name|replace
parameter_list|(
name|size_type
name|pos
parameter_list|,
name|size_type
name|n1
parameter_list|,
specifier|const
name|charT
modifier|*
name|s
parameter_list|,
name|size_type
name|n2
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|basic_string
modifier|&
name|replace
parameter_list|(
name|size_type
name|pos
parameter_list|,
name|size_type
name|n1
parameter_list|,
specifier|const
name|charT
modifier|*
name|s
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|pos
argument_list|,
name|n1
argument_list|,
name|s
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|basic_string
modifier|&
name|replace
parameter_list|(
name|size_type
name|pos
parameter_list|,
name|size_type
name|n1
parameter_list|,
name|size_type
name|n2
parameter_list|,
name|charT
name|c
parameter_list|)
function_decl|;
end_function_decl

begin_function
name|basic_string
modifier|&
name|replace
parameter_list|(
name|size_type
name|pos
parameter_list|,
name|size_type
name|n
parameter_list|,
name|charT
name|c
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|pos
argument_list|,
name|n
argument_list|,
literal|1
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|replace
parameter_list|(
name|iterator
name|i1
parameter_list|,
name|iterator
name|i2
parameter_list|,
specifier|const
name|basic_string
modifier|&
name|str
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|i1
operator|-
name|ibegin
argument_list|()
argument_list|,
name|i2
operator|-
name|i1
argument_list|,
name|str
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|replace
parameter_list|(
name|iterator
name|i1
parameter_list|,
name|iterator
name|i2
parameter_list|,
specifier|const
name|charT
modifier|*
name|s
parameter_list|,
name|size_type
name|n
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|i1
operator|-
name|ibegin
argument_list|()
argument_list|,
name|i2
operator|-
name|i1
argument_list|,
name|s
argument_list|,
name|n
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|replace
parameter_list|(
name|iterator
name|i1
parameter_list|,
name|iterator
name|i2
parameter_list|,
specifier|const
name|charT
modifier|*
name|s
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|i1
operator|-
name|ibegin
argument_list|()
argument_list|,
name|i2
operator|-
name|i1
argument_list|,
name|s
argument_list|)
return|;
block|}
end_function

begin_function
name|basic_string
modifier|&
name|replace
parameter_list|(
name|iterator
name|i1
parameter_list|,
name|iterator
name|i2
parameter_list|,
name|size_type
name|n
parameter_list|,
name|charT
name|c
parameter_list|)
block|{
return|return
name|replace
argument_list|(
name|i1
operator|-
name|ibegin
argument_list|()
argument_list|,
name|i2
operator|-
name|i1
argument_list|,
name|n
argument_list|,
name|c
argument_list|)
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|InputIterator
operator|>
name|basic_string
operator|&
name|replace
argument_list|(
argument|iterator i1
argument_list|,
argument|iterator i2
argument_list|,
argument|InputIterator j1
argument_list|,
argument|InputIterator j2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_function_decl
name|basic_string
modifier|&
name|replace
parameter_list|(
name|iterator
name|i1
parameter_list|,
name|iterator
name|i2
parameter_list|,
name|const_iterator
name|j1
parameter_list|,
name|const_iterator
name|j2
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_label
name|private
label|:
end_label

begin_function
specifier|static
name|charT
name|eos
parameter_list|()
block|{
return|return
name|traits
operator|::
name|eos
argument_list|()
return|;
block|}
end_function

begin_function
name|void
name|unique
parameter_list|()
block|{
if|if
condition|(
name|rep
argument_list|()
operator|->
name|ref
operator|>
literal|1
condition|)
name|alloc
argument_list|(
name|length
argument_list|()
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|selfish
parameter_list|()
block|{
name|unique
argument_list|()
expr_stmt|;
name|rep
argument_list|()
operator|->
name|selfish
operator|=
name|true
expr_stmt|;
block|}
end_function

begin_label
name|public
label|:
end_label

begin_decl_stmt
name|charT
name|operator
index|[]
argument_list|(
name|size_type
name|pos
argument_list|)
decl|const
block|{
if|if
condition|(
name|pos
operator|==
name|length
argument_list|()
condition|)
return|return
name|eos
argument_list|()
return|;
return|return
name|data
argument_list|()
index|[
name|pos
index|]
return|;
block|}
end_decl_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|pos
parameter_list|)
block|{
name|selfish
argument_list|()
expr_stmt|;
return|return
operator|(
operator|*
name|rep
argument_list|()
operator|)
index|[
name|pos
index|]
return|;
block|}
end_function

begin_function
name|reference
name|at
parameter_list|(
name|size_type
name|pos
parameter_list|)
block|{
name|OUTOFRANGE
argument_list|(
name|pos
operator|>=
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
operator|*
name|this
operator|)
index|[
name|pos
index|]
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|at
argument_list|(
name|size_type
name|pos
argument_list|)
decl|const
block|{
name|OUTOFRANGE
argument_list|(
name|pos
operator|>=
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|data
argument_list|()
index|[
name|pos
index|]
return|;
block|}
end_decl_stmt

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|void
name|terminate
argument_list|()
specifier|const
block|{
name|traits
operator|::
name|assign
argument_list|(
operator|(
operator|*
name|rep
argument_list|()
operator|)
index|[
name|length
argument_list|()
index|]
argument_list|,
name|eos
argument_list|()
argument_list|)
block|; }
name|public
operator|:
specifier|const
name|charT
operator|*
name|c_str
argument_list|()
specifier|const
block|{
if|if
condition|(
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|""
return|;
name|terminate
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|data
argument_list|()
return|;
end_return

begin_macro
unit|}   void
name|resize
argument_list|(
argument|size_type n
argument_list|,
argument|charT c
argument_list|)
end_macro

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_function
name|void
name|resize
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
name|resize
argument_list|(
name|n
argument_list|,
name|eos
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|reserve
parameter_list|(
name|size_type
parameter_list|)
block|{ }
end_function

begin_decl_stmt
name|size_type
name|copy
argument_list|(
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|n
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|find
argument_list|(
specifier|const
name|basic_string
operator|&
name|str
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|find
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|pos
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
argument_list|,
name|size_type
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|find
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|find
argument_list|(
name|s
argument_list|,
name|pos
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find
argument_list|(
name|charT
name|c
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|rfind
argument_list|(
specifier|const
name|basic_string
operator|&
name|str
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
block|{
return|return
name|rfind
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|pos
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|rfind
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
argument_list|,
name|size_type
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|rfind
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
block|{
return|return
name|rfind
argument_list|(
name|s
argument_list|,
name|pos
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|rfind
argument_list|(
name|charT
name|c
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_first_of
argument_list|(
specifier|const
name|basic_string
operator|&
name|str
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|find_first_of
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|pos
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_first_of
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
argument_list|,
name|size_type
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_first_of
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|find_first_of
argument_list|(
name|s
argument_list|,
name|pos
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_first_of
argument_list|(
name|charT
name|c
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|find
argument_list|(
name|c
argument_list|,
name|pos
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_last_of
argument_list|(
specifier|const
name|basic_string
operator|&
name|str
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
block|{
return|return
name|find_last_of
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|pos
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_last_of
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
argument_list|,
name|size_type
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_last_of
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
block|{
return|return
name|find_last_of
argument_list|(
name|s
argument_list|,
name|pos
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_last_of
argument_list|(
name|charT
name|c
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
block|{
return|return
name|rfind
argument_list|(
name|c
argument_list|,
name|pos
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_first_not_of
argument_list|(
specifier|const
name|basic_string
operator|&
name|str
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|find_first_not_of
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|pos
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_first_not_of
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
argument_list|,
name|size_type
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_first_not_of
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|find_first_not_of
argument_list|(
name|s
argument_list|,
name|pos
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_first_not_of
argument_list|(
name|charT
name|c
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_last_not_of
argument_list|(
specifier|const
name|basic_string
operator|&
name|str
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
block|{
return|return
name|find_last_not_of
argument_list|(
name|str
operator|.
name|data
argument_list|()
argument_list|,
name|pos
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_last_not_of
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
argument_list|,
name|size_type
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_last_not_of
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
block|{
return|return
name|find_last_not_of
argument_list|(
name|s
argument_list|,
name|pos
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|find_last_not_of
argument_list|(
name|charT
name|c
argument_list|,
name|size_type
name|pos
operator|=
name|npos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|basic_string
name|substr
argument_list|(
name|size_type
name|pos
operator|=
literal|0
argument_list|,
name|size_type
name|n
operator|=
name|npos
argument_list|)
decl|const
block|{
return|return
name|basic_string
argument_list|(
operator|*
name|this
argument_list|,
name|pos
argument_list|,
name|n
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|int
name|compare
argument_list|(
specifier|const
name|basic_string
operator|&
name|str
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|,
name|size_type
name|n
operator|=
name|npos
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_comment
comment|// There is no 'strncmp' equivalent for charT pointers.
end_comment

begin_decl_stmt
name|int
name|compare
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
argument_list|,
name|size_type
name|n
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|compare
argument_list|(
specifier|const
name|charT
operator|*
name|s
argument_list|,
name|size_type
name|pos
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|compare
argument_list|(
name|s
argument_list|,
name|pos
argument_list|,
name|traits
operator|::
name|length
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_decl_stmt

begin_function
name|iterator
name|begin
parameter_list|()
block|{
name|selfish
argument_list|()
expr_stmt|;
return|return
operator|&
operator|(
operator|*
name|this
operator|)
index|[
literal|0
index|]
return|;
block|}
end_function

begin_function
name|iterator
name|end
parameter_list|()
block|{
name|selfish
argument_list|()
expr_stmt|;
return|return
operator|&
operator|(
operator|*
name|this
operator|)
index|[
name|length
argument_list|()
index|]
return|;
block|}
end_function

begin_label
name|private
label|:
end_label

begin_expr_stmt
name|iterator
name|ibegin
argument_list|()
specifier|const
block|{
return|return
operator|&
operator|(
operator|*
name|rep
argument_list|()
operator|)
index|[
literal|0
index|]
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|iend
argument_list|()
specifier|const
block|{
return|return
operator|&
operator|(
operator|*
name|rep
argument_list|()
operator|)
index|[
name|length
argument_list|()
index|]
return|;
block|}
end_expr_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|ibegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|iend
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_label
name|private
label|:
end_label

begin_function_decl
name|void
name|alloc
parameter_list|(
name|size_type
name|size
parameter_list|,
name|bool
name|save
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|static
name|size_type
name|_find
parameter_list|(
specifier|const
name|charT
modifier|*
name|ptr
parameter_list|,
name|charT
name|c
parameter_list|,
name|size_type
name|xpos
parameter_list|,
name|size_type
name|len
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|inline
name|bool
name|check_realloc
argument_list|(
name|size_type
name|s
argument_list|)
decl|const
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|Rep
name|nilRep
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|charT
modifier|*
name|dat
decl_stmt|;
end_decl_stmt

begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|__STL_MEMBER_TEMPLATES
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
name|template
operator|<
name|class
name|InputIterator
operator|>
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|::
name|replace
argument_list|(
argument|iterator i1
argument_list|,
argument|iterator i2
argument_list|,
argument|InputIterator j1
argument_list|,
argument|InputIterator j2
argument_list|)
else|#
directive|else
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|::
name|replace
argument_list|(
argument|iterator i1
argument_list|,
argument|iterator i2
argument_list|,
argument|const_iterator j1
argument_list|,
argument|const_iterator j2
argument_list|)
endif|#
directive|endif
block|{
specifier|const
name|size_type
name|len
operator|=
name|length
argument_list|()
block|;
name|size_type
name|pos
operator|=
name|i1
operator|-
name|ibegin
argument_list|()
block|;
name|size_type
name|n1
operator|=
name|i2
operator|-
name|i1
block|;
name|size_type
name|n2
operator|=
name|j2
operator|-
name|j1
block|;
name|OUTOFRANGE
argument_list|(
name|pos
operator|>
name|len
argument_list|)
block|;
if|if
condition|(
name|n1
operator|>
name|len
operator|-
name|pos
condition|)
name|n1
operator|=
name|len
operator|-
name|pos
expr_stmt|;
name|LENGTHERROR
argument_list|(
name|len
operator|-
name|n1
operator|>
name|max_size
argument_list|()
operator|-
name|n2
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|size_t
name|newlen
init|=
name|len
operator|-
name|n1
operator|+
name|n2
decl_stmt|;
end_decl_stmt

begin_if
if|if
condition|(
name|check_realloc
argument_list|(
name|newlen
argument_list|)
condition|)
block|{
name|Rep
modifier|*
name|p
init|=
name|Rep
operator|::
name|create
argument_list|(
name|newlen
argument_list|)
decl_stmt|;
name|p
operator|->
name|copy
argument_list|(
literal|0
argument_list|,
name|data
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|p
operator|->
name|copy
argument_list|(
name|pos
operator|+
name|n2
argument_list|,
name|data
argument_list|()
operator|+
name|pos
operator|+
name|n1
argument_list|,
name|len
operator|-
operator|(
name|pos
operator|+
name|n1
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|j1
operator|!=
name|j2
condition|;
operator|++
name|j1
operator|,
operator|++
name|pos
control|)
name|traits
operator|::
name|assign
argument_list|(
operator|(
operator|*
name|p
operator|)
index|[
name|pos
index|]
argument_list|,
operator|*
name|j1
argument_list|)
expr_stmt|;
name|repup
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rep
argument_list|()
operator|->
name|move
argument_list|(
name|pos
operator|+
name|n2
argument_list|,
name|data
argument_list|()
operator|+
name|pos
operator|+
name|n1
argument_list|,
name|len
operator|-
operator|(
name|pos
operator|+
name|n1
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|j1
operator|!=
name|j2
condition|;
operator|++
name|j1
operator|,
operator|++
name|pos
control|)
name|traits
operator|::
name|assign
argument_list|(
operator|(
operator|*
name|rep
argument_list|()
operator|)
index|[
name|pos
index|]
argument_list|,
operator|*
name|j1
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|rep
argument_list|()
operator|->
name|len
operator|=
name|newlen
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
name|operator
operator|+
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
name|basic_string
operator|<
name|charT
block|,
name|traits
block|,
name|Allocator
operator|>
name|str
argument_list|(
name|lhs
argument_list|)
block|;
name|str
operator|.
name|append
argument_list|(
name|rhs
argument_list|)
block|;
return|return
name|str
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
name|operator
operator|+
operator|(
specifier|const
name|charT
operator|*
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
name|basic_string
operator|<
name|charT
block|,
name|traits
block|,
name|Allocator
operator|>
name|str
argument_list|(
name|lhs
argument_list|)
block|;
name|str
operator|.
name|append
argument_list|(
name|rhs
argument_list|)
block|;
return|return
name|str
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
name|operator
operator|+
operator|(
name|charT
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
name|basic_string
operator|<
name|charT
block|,
name|traits
block|,
name|Allocator
operator|>
name|str
argument_list|(
literal|1
argument_list|,
name|lhs
argument_list|)
block|;
name|str
operator|.
name|append
argument_list|(
name|rhs
argument_list|)
block|;
return|return
name|str
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
name|operator
operator|+
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|charT
operator|*
name|rhs
operator|)
block|{
name|basic_string
operator|<
name|charT
block|,
name|traits
block|,
name|Allocator
operator|>
name|str
argument_list|(
name|lhs
argument_list|)
block|;
name|str
operator|.
name|append
argument_list|(
name|rhs
argument_list|)
block|;
return|return
name|str
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
name|operator
operator|+
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
name|charT
name|rhs
operator|)
block|{
name|basic_string
operator|<
name|charT
block|,
name|traits
block|,
name|Allocator
operator|>
name|str
argument_list|(
name|lhs
argument_list|)
block|;
name|str
operator|.
name|append
argument_list|(
literal|1
argument_list|,
name|rhs
argument_list|)
block|;
return|return
name|str
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|charT
operator|*
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|rhs
operator|.
name|compare
argument_list|(
name|lhs
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|charT
operator|*
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|charT
operator|*
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|rhs
operator|.
name|compare
argument_list|(
name|lhs
argument_list|)
operator|!=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|charT
operator|*
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|!=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|charT
operator|*
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|rhs
operator|.
name|compare
argument_list|(
name|lhs
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|charT
operator|*
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|charT
operator|*
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|rhs
operator|.
name|compare
argument_list|(
name|lhs
argument_list|)
operator|<
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|charT
operator|*
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|charT
operator|*
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|rhs
operator|.
name|compare
argument_list|(
name|lhs
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|charT
operator|*
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|charT
operator|*
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|rhs
operator|.
name|compare
argument_list|(
name|lhs
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|charT
operator|*
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|!=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|>
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|>
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|<=
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|<=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
specifier|inline
name|bool
name|operator
operator|>=
operator|(
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|lhs
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
name|rhs
operator|)
block|{
return|return
operator|(
name|lhs
operator|.
name|compare
argument_list|(
name|rhs
argument_list|)
operator|>=
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|class
name|istream
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|ostream
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
operator|,
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
operator|,
specifier|const
name|basic_string
operator|<
name|charT
operator|,
name|traits
operator|,
name|Allocator
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|charT
operator|,
name|class
name|traits
operator|,
name|class
name|Allocator
operator|>
name|istream
operator|&
name|getline
argument_list|(
argument|istream&
argument_list|,
argument|basic_string<charT
argument_list|,
argument|traits
argument_list|,
argument|Allocator>&
argument_list|,
argument|charT delim =
literal|'\n'
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// extern "C++"
end_comment

begin_include
include|#
directive|include
file|<std/bastring.cc>
end_include

begin_endif
endif|#
directive|endif
end_endif

end_unit

