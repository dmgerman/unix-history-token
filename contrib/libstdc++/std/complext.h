begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// The template and inlines for the -*- C++ -*- complex number classes.
end_comment

begin_comment
comment|// Copyright (C) 1994 Free Software Foundation
end_comment

begin_comment
comment|// This file is part of the GNU ANSI C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the terms of
end_comment

begin_comment
comment|// the GNU General Public License as published by the Free Software
end_comment

begin_comment
comment|// Foundation; either version 2, or (at your option) any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License
end_comment

begin_comment
comment|// along with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
end_comment

begin_comment
comment|// As a special exception, if you link this library with files compiled
end_comment

begin_comment
comment|// with a GNU compiler to produce an executable, this does not cause the
end_comment

begin_comment
comment|// resulting executable to be covered by the GNU General Public License.
end_comment

begin_comment
comment|// This exception does not however invalidate any other reasons why the
end_comment

begin_comment
comment|// executable file might be covered by the GNU General Public License.
end_comment

begin_comment
comment|// Written by Jason Merrill based upon the specification in the 27 May 1994
end_comment

begin_comment
comment|// C++ working paper, ANSI document X3J16/94-0098.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__COMPLEXT__
end_ifndef

begin_define
define|#
directive|define
name|__COMPLEXT__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<cmath>
end_include

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|__GNUG__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__attribute__
argument_list|)
end_if

begin_define
define|#
directive|define
name|__attribute__
parameter_list|(
name|foo
parameter_list|)
end_define

begin_comment
comment|/* Ignore.  */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|class
name|istream
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|class
name|ostream
decl_stmt|;
end_decl_stmt

begin_extern
extern|extern
literal|"C++"
block|{
name|template
operator|<
name|class
name|_FLT
operator|>
name|class
name|complex
expr_stmt|;
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|__doapl
argument_list|(
name|complex
operator|<
name|_FLT
operator|>
operator|*
name|ths
argument_list|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|r
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|__doami
argument_list|(
name|complex
operator|<
name|_FLT
operator|>
operator|*
name|ths
argument_list|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|r
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|__doaml
argument_list|(
name|complex
operator|<
name|_FLT
operator|>
operator|*
name|ths
argument_list|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|r
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|__doadv
argument_list|(
name|complex
operator|<
name|_FLT
operator|>
operator|*
name|ths
argument_list|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|r
argument_list|)
expr_stmt|;
name|template
operator|<
name|class
name|_FLT
operator|>
name|class
name|complex
block|{
name|public
operator|:
name|complex
argument_list|(
argument|_FLT r =
literal|0
argument_list|,
argument|_FLT i =
literal|0
argument_list|)
operator|:
name|re
argument_list|(
name|r
argument_list|)
block|,
name|im
argument_list|(
argument|i
argument_list|)
block|{ }
name|complex
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|&
operator|)
block|;
name|complex
operator|&
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|&
operator|)
block|;
name|complex
operator|&
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|&
operator|)
block|;
name|complex
operator|&
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|&
operator|)
block|;
name|_FLT
name|real
argument_list|()
specifier|const
block|{
return|return
name|re
return|;
block|}
name|_FLT
name|imag
argument_list|()
specifier|const
block|{
return|return
name|im
return|;
block|}
name|private
label|:
name|_FLT
name|re
decl_stmt|,
name|im
decl_stmt|;
name|friend
name|complex
operator|&
name|__doapl
operator|<
operator|>
operator|(
name|complex
operator|*
operator|,
specifier|const
name|complex
operator|&
operator|)
expr_stmt|;
name|friend
name|complex
operator|&
name|__doami
operator|<
operator|>
operator|(
name|complex
operator|*
operator|,
specifier|const
name|complex
operator|&
operator|)
expr_stmt|;
name|friend
name|complex
operator|&
name|__doaml
operator|<
operator|>
operator|(
name|complex
operator|*
operator|,
specifier|const
name|complex
operator|&
operator|)
expr_stmt|;
name|friend
name|complex
operator|&
name|__doadv
operator|<
operator|>
operator|(
name|complex
operator|*
operator|,
specifier|const
name|complex
operator|&
operator|)
expr_stmt|;
block|}
end_extern

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// Declare specializations.
end_comment

begin_expr_stmt
name|class
name|complex
operator|<
name|float
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|class
name|complex
operator|<
name|double
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|class
name|complex
operator|<
name|long
name|double
operator|>
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|__doapl
argument_list|(
argument|complex<_FLT>* ths
argument_list|,
argument|const complex<_FLT>& r
argument_list|)
block|{
name|ths
operator|->
name|re
operator|+=
name|r
operator|.
name|re
block|;
name|ths
operator|->
name|im
operator|+=
name|r
operator|.
name|im
block|;
return|return
operator|*
name|ths
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|complex
operator|<
name|_FLT
operator|>
operator|::
name|operator
operator|+=
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|r
operator|)
block|{
return|return
name|__doapl
argument_list|(
name|this
argument_list|,
name|r
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|__doami
argument_list|(
argument|complex<_FLT>* ths
argument_list|,
argument|const complex<_FLT>& r
argument_list|)
block|{
name|ths
operator|->
name|re
operator|-=
name|r
operator|.
name|re
block|;
name|ths
operator|->
name|im
operator|-=
name|r
operator|.
name|im
block|;
return|return
operator|*
name|ths
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|complex
operator|<
name|_FLT
operator|>
operator|::
name|operator
operator|-=
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|r
operator|)
block|{
return|return
name|__doami
argument_list|(
name|this
argument_list|,
name|r
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|__doaml
argument_list|(
argument|complex<_FLT>* ths
argument_list|,
argument|const complex<_FLT>& r
argument_list|)
block|{
name|_FLT
name|f
operator|=
name|ths
operator|->
name|re
operator|*
name|r
operator|.
name|re
operator|-
name|ths
operator|->
name|im
operator|*
name|r
operator|.
name|im
block|;
name|ths
operator|->
name|im
operator|=
name|ths
operator|->
name|re
operator|*
name|r
operator|.
name|im
operator|+
name|ths
operator|->
name|im
operator|*
name|r
operator|.
name|re
block|;
name|ths
operator|->
name|re
operator|=
name|f
block|;
return|return
operator|*
name|ths
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|complex
operator|<
name|_FLT
operator|>
operator|::
name|operator
operator|*=
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|r
operator|)
block|{
return|return
name|__doaml
argument_list|(
name|this
argument_list|,
name|r
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|complex
operator|<
name|_FLT
operator|>
operator|::
name|operator
operator|/=
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|r
operator|)
block|{
return|return
name|__doadv
argument_list|(
name|this
argument_list|,
name|r
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|imag
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|imag
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
block|{
return|return
name|x
operator|.
name|imag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|real
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|real
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
block|{
return|return
name|x
operator|.
name|real
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|real
argument_list|(
name|x
argument_list|)
operator|+
name|real
argument_list|(
name|y
argument_list|)
operator|,
name|imag
argument_list|(
name|x
argument_list|)
operator|+
name|imag
argument_list|(
name|y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|real
argument_list|(
name|x
argument_list|)
operator|+
name|y
operator|,
name|imag
argument_list|(
name|x
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|+
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|+
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|x
operator|+
name|real
argument_list|(
name|y
argument_list|)
operator|,
name|imag
argument_list|(
name|y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|real
argument_list|(
name|x
argument_list|)
operator|-
name|real
argument_list|(
name|y
argument_list|)
operator|,
name|imag
argument_list|(
name|x
argument_list|)
operator|-
name|imag
argument_list|(
name|y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|real
argument_list|(
name|x
argument_list|)
operator|-
name|y
operator|,
name|imag
argument_list|(
name|x
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|-
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|-
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|x
operator|-
name|real
argument_list|(
name|y
argument_list|)
operator|,
operator|-
name|imag
argument_list|(
name|y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|*
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|*
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|real
argument_list|(
name|x
argument_list|)
operator|*
name|real
argument_list|(
name|y
argument_list|)
operator|-
name|imag
argument_list|(
name|x
argument_list|)
operator|*
name|imag
argument_list|(
name|y
argument_list|)
operator|,
name|real
argument_list|(
name|x
argument_list|)
operator|*
name|imag
argument_list|(
name|y
argument_list|)
operator|+
name|imag
argument_list|(
name|x
argument_list|)
operator|*
name|real
argument_list|(
name|y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|*
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|*
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|real
argument_list|(
name|x
argument_list|)
operator|*
name|y
operator|,
name|imag
argument_list|(
name|x
argument_list|)
operator|*
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|*
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|*
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|x
operator|*
name|real
argument_list|(
name|y
argument_list|)
operator|,
name|x
operator|*
name|imag
argument_list|(
name|y
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|/
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|/
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|real
argument_list|(
name|x
argument_list|)
operator|/
name|y
operator|,
name|imag
argument_list|(
name|x
argument_list|)
operator|/
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|+
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|)
block|{
return|return
name|x
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|-
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
operator|-
name|real
argument_list|(
name|x
argument_list|)
operator|,
operator|-
name|imag
argument_list|(
name|x
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|real
argument_list|(
name|x
argument_list|)
operator|==
name|real
argument_list|(
name|y
argument_list|)
operator|&&
name|imag
argument_list|(
name|x
argument_list|)
operator|==
name|imag
argument_list|(
name|y
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
block|{
return|return
name|real
argument_list|(
name|x
argument_list|)
operator|==
name|y
operator|&&
name|imag
argument_list|(
name|x
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|==
name|real
argument_list|(
name|y
argument_list|)
operator|&&
name|imag
argument_list|(
name|y
argument_list|)
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|real
argument_list|(
name|x
argument_list|)
operator|!=
name|real
argument_list|(
name|y
argument_list|)
operator|||
name|imag
argument_list|(
name|x
argument_list|)
operator|!=
name|imag
argument_list|(
name|y
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|x
operator|,
name|_FLT
name|y
operator|)
block|{
return|return
name|real
argument_list|(
name|x
argument_list|)
operator|!=
name|y
operator|||
name|imag
argument_list|(
name|x
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|bool
name|operator
operator|!=
operator|(
name|_FLT
name|x
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|!=
name|real
argument_list|(
name|y
argument_list|)
operator|||
name|imag
argument_list|(
name|y
argument_list|)
operator|!=
literal|0
return|;
block|}
end_expr_stmt

begin_comment
comment|// Some targets don't provide a prototype for hypot when -ansi.
end_comment

begin_extern
extern|extern
literal|"C"
name|double
name|hypot
parameter_list|(
name|double
parameter_list|,
name|double
parameter_list|)
function_decl|__attribute__
parameter_list|(
function_decl|(const
end_extern

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|abs
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|abs
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
block|{
return|return
name|hypot
argument_list|(
name|real
argument_list|(
name|x
argument_list|)
argument_list|,
name|imag
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|arg
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|arg
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
block|{
return|return
name|atan2
argument_list|(
name|imag
argument_list|(
name|x
argument_list|)
argument_list|,
name|real
argument_list|(
name|x
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|polar
argument_list|(
argument|_FLT r
argument_list|,
argument|_FLT t
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|polar
argument_list|(
argument|_FLT r
argument_list|,
argument|_FLT t
argument_list|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|r
operator|*
name|cos
argument_list|(
name|t
argument_list|)
operator|,
name|r
operator|*
name|sin
argument_list|(
name|t
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|conj
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|complex
operator|<
name|_FLT
operator|>
name|conj
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
block|{
return|return
name|complex
operator|<
name|_FLT
operator|>
operator|(
name|real
argument_list|(
name|x
argument_list|)
operator|,
operator|-
name|imag
argument_list|(
name|x
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|norm
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
specifier|inline
name|_FLT
name|norm
argument_list|(
argument|const complex<_FLT>& x
argument_list|)
block|{
return|return
name|real
argument_list|(
name|x
argument_list|)
operator|*
name|real
argument_list|(
name|x
argument_list|)
operator|+
name|imag
argument_list|(
name|x
argument_list|)
operator|*
name|imag
argument_list|(
name|x
argument_list|)
return|;
block|}
end_expr_stmt

begin_comment
comment|// Declarations of templates in complext.ccI
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|/
operator|(
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|operator
operator|/
operator|(
name|_FLT
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
operator|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|cos
argument_list|(
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|cosh
argument_list|(
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|exp
argument_list|(
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|log
argument_list|(
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|pow
argument_list|(
argument|const complex<_FLT>&
argument_list|,
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|pow
argument_list|(
argument|const complex<_FLT>&
argument_list|,
argument|_FLT
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|pow
argument_list|(
argument|const complex<_FLT>&
argument_list|,
argument|int
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|pow
argument_list|(
argument|_FLT
argument_list|,
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|sin
argument_list|(
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|sinh
argument_list|(
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|complex
operator|<
name|_FLT
operator|>
name|sqrt
argument_list|(
argument|const complex<_FLT>&
argument_list|)
name|__attribute__
argument_list|(
operator|(
specifier|const
operator|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|istream
operator|&
name|operator
operator|>>
operator|(
name|istream
operator|&
operator|,
name|complex
operator|<
name|_FLT
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|_FLT
operator|>
name|ostream
operator|&
name|operator
operator|<<
operator|(
name|ostream
operator|&
operator|,
specifier|const
name|complex
operator|<
name|_FLT
operator|>
operator|&
operator|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|// extern "C++"
end_comment

begin_comment
comment|// Specializations and such
end_comment

begin_include
include|#
directive|include
file|<std/fcomplex.h>
end_include

begin_include
include|#
directive|include
file|<std/dcomplex.h>
end_include

begin_include
include|#
directive|include
file|<std/ldcomplex.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

end_unit

