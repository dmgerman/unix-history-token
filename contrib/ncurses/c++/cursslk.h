begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// * this is for making emacs happy: -*-Mode: C++;-*-
end_comment

begin_comment
comment|/****************************************************************************  * Copyright (c) 1998,2000 Free Software Foundation, Inc.                   *  *                                                                          *  * Permission is hereby granted, free of charge, to any person obtaining a  *  * copy of this software and associated documentation files (the            *  * "Software"), to deal in the Software without restriction, including      *  * without limitation the rights to use, copy, modify, merge, publish,      *  * distribute, distribute with modifications, sublicense, and/or sell       *  * copies of the Software, and to permit persons to whom the Software is    *  * furnished to do so, subject to the following conditions:                 *  *                                                                          *  * The above copyright notice and this permission notice shall be included  *  * in all copies or substantial portions of the Software.                   *  *                                                                          *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *  * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *  * IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *  * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *  * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *  * THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *  *                                                                          *  * Except as contained in this notice, the name(s) of the above copyright   *  * holders shall not be used in advertising or otherwise to promote the     *  * sale, use or other dealings in this Software without prior written       *  * authorization.                                                           *  ****************************************************************************/
end_comment

begin_comment
comment|/****************************************************************************  *   Author: Juergen Pfeifer<juergen.pfeifer@gmx.net> 1997                 *  ****************************************************************************/
end_comment

begin_comment
comment|// $Id: cursslk.h,v 1.7 2001/03/24 21:41:47 tom Exp $
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NCURSES_CURSSLK_H_incl
end_ifndef

begin_define
define|#
directive|define
name|NCURSES_CURSSLK_H_incl
end_define

begin_include
include|#
directive|include
file|<cursesw.h>
end_include

begin_decl_stmt
name|class
name|NCURSES_IMPEXP
name|Soft_Label_Key_Set
block|{
name|public
label|:
comment|// This inner class represents the attributes of a Soft Label Key (SLK)
name|class
name|NCURSES_IMPEXP
name|Soft_Label_Key
block|{
name|friend
name|class
name|Soft_Label_Key_Set
decl_stmt|;
name|public
label|:
typedef|typedef
enum|enum
block|{
name|Left
init|=
literal|0
block|,
name|Center
init|=
literal|1
block|,
name|Right
init|=
literal|2
block|}
name|Justification
typedef|;
name|private
label|:
name|char
modifier|*
name|label
decl_stmt|;
comment|// The Text of the Label
name|Justification
name|format
decl_stmt|;
comment|// The Justification
name|int
name|num
decl_stmt|;
comment|// The number of the Label
name|Soft_Label_Key
argument_list|()
operator|:
name|label
argument_list|(
operator|(
name|char
operator|*
operator|)
literal|0
argument_list|)
operator|,
name|format
argument_list|(
name|Left
argument_list|)
operator|,
name|num
argument_list|(
argument|-
literal|1
argument_list|)
block|{     }
name|virtual
operator|~
name|Soft_Label_Key
argument_list|()
block|{
name|delete
index|[]
name|label
block|;     }
expr_stmt|;
name|public
label|:
comment|// Set the text of the Label
name|void
name|operator
init|=
operator|(
name|char
operator|*
name|text
operator|)
decl_stmt|;
comment|// Set the Justification of the Label
specifier|inline
name|void
name|operator
init|=
operator|(
name|Justification
name|just
operator|)
block|{
name|format
operator|=
name|just
block|;     }
comment|// Retrieve the text of the label
specifier|inline
name|char
operator|*
name|operator
argument_list|()
operator|(
name|void
operator|)
specifier|const
block|{
return|return
name|label
return|;
block|}
block|}
empty_stmt|;
name|public
label|:
typedef|typedef
enum|enum
block|{
name|None
init|=
operator|-
literal|1
block|,
name|Three_Two_Three
init|=
literal|0
block|,
name|Four_Four
init|=
literal|1
block|,
name|PC_Style
init|=
literal|2
block|,
name|PC_Style_With_Index
init|=
literal|3
block|}
name|Label_Layout
typedef|;
name|private
label|:
specifier|static
name|long
name|NCURSES_IMPEXP
name|count
decl_stmt|;
comment|// Number of Key Sets
specifier|static
name|Label_Layout
name|NCURSES_IMPEXP
name|format
decl_stmt|;
comment|// Layout of the Key Sets
specifier|static
name|int
name|NCURSES_IMPEXP
name|num_labels
decl_stmt|;
comment|// Number Of Labels in Key Sets
name|bool
name|NCURSES_IMPEXP
name|b_attrInit
decl_stmt|;
comment|// Are attributes initialized
name|Soft_Label_Key
modifier|*
name|slk_array
decl_stmt|;
comment|// The array of SLK's
comment|// Init the Key Set
name|void
name|init
parameter_list|()
function_decl|;
comment|// Activate or Deactivate Label# i, Label counting starts with 1!
name|void
name|activate_label
parameter_list|(
name|int
name|i
parameter_list|,
name|bool
name|bf
init|=
name|TRUE
parameter_list|)
function_decl|;
comment|// Activate of Deactivate all Labels
name|void
name|activate_labels
parameter_list|(
name|bool
name|bf
parameter_list|)
function_decl|;
name|protected
label|:
specifier|inline
name|void
name|Error
argument_list|(
specifier|const
name|char
operator|*
name|msg
argument_list|)
decl|const
name|THROWS
argument_list|(
name|NCursesException
argument_list|)
block|{
name|THROW
argument_list|(
argument|new NCursesException (msg)
argument_list|)
empty_stmt|;
block|}
comment|// Remove SLK's from screen
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_clear
argument_list|()
condition|)
name|Error
argument_list|(
literal|"slk_clear"
argument_list|)
expr_stmt|;
block|}
comment|// Restore them
name|void
name|restore
parameter_list|()
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_restore
argument_list|()
condition|)
name|Error
argument_list|(
literal|"slk_restore"
argument_list|)
expr_stmt|;
block|}
name|public
label|:
comment|// Construct a Key Set, use the most comfortable layout as default.
comment|// You must create a Soft_Label_Key_Set before you create any object of
comment|// the NCursesWindow, NCursesPanel or derived classes. (Actually before
comment|// ::initscr() is called).
name|Soft_Label_Key_Set
argument_list|(
argument|Label_Layout fmt
argument_list|)
empty_stmt|;
comment|// This constructor assumes, that you already constructed a Key Set
comment|// with a layout by the constructor above. This layout will be reused.
name|NCURSES_IMPEXP
name|Soft_Label_Key_Set
parameter_list|()
function_decl|;
name|virtual
operator|~
name|Soft_Label_Key_Set
argument_list|()
expr_stmt|;
comment|// Get Label# i. Label counting starts with 1!
name|NCURSES_IMPEXP
name|Soft_Label_Key
modifier|&
name|operator
function_decl|[]
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
comment|// Retrieve number of Labels
specifier|inline
name|int
name|labels
argument_list|()
specifier|const
block|{
return|return
name|num_labels
return|;
block|}
comment|// Refresh the SLK portion of the screen
specifier|inline
name|void
name|refresh
parameter_list|()
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_refresh
argument_list|()
condition|)
name|Error
argument_list|(
literal|"slk_refresh"
argument_list|)
expr_stmt|;
block|}
comment|// Mark the SLK portion of the screen for refresh, defer actual refresh
comment|// until next update call.
specifier|inline
name|void
name|noutrefresh
parameter_list|()
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_noutrefresh
argument_list|()
condition|)
name|Error
argument_list|(
literal|"slk_noutrefresh"
argument_list|)
expr_stmt|;
block|}
comment|// Mark the whole SLK portion of the screen as modified
specifier|inline
name|void
name|touch
parameter_list|()
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_touch
argument_list|()
condition|)
name|Error
argument_list|(
literal|"slk_touch"
argument_list|)
expr_stmt|;
block|}
comment|// Activate Label# i
specifier|inline
name|void
name|show
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|activate_label
argument_list|(
name|i
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
name|activate_label
argument_list|(
name|i
argument_list|,
name|TRUE
argument_list|)
expr_stmt|;
block|}
comment|// Hide Label# i
specifier|inline
name|void
name|hide
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|activate_label
argument_list|(
name|i
argument_list|,
name|FALSE
argument_list|)
expr_stmt|;
block|}
comment|// Show all Labels
specifier|inline
name|void
name|show
parameter_list|()
block|{
name|activate_labels
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
name|activate_labels
argument_list|(
name|TRUE
argument_list|)
expr_stmt|;
block|}
comment|// Hide all Labels
specifier|inline
name|void
name|hide
parameter_list|()
block|{
name|activate_labels
argument_list|(
name|FALSE
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|attron
parameter_list|(
name|attr_t
name|attrs
parameter_list|)
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_attron
argument_list|(
name|attrs
argument_list|)
condition|)
name|Error
argument_list|(
literal|"slk_attron"
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|attroff
parameter_list|(
name|attr_t
name|attrs
parameter_list|)
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_attroff
argument_list|(
name|attrs
argument_list|)
condition|)
name|Error
argument_list|(
literal|"slk_attroff"
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|attrset
parameter_list|(
name|attr_t
name|attrs
parameter_list|)
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_attrset
argument_list|(
name|attrs
argument_list|)
condition|)
name|Error
argument_list|(
literal|"slk_attrset"
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|void
name|color
parameter_list|(
name|short
name|color_pair_number
parameter_list|)
block|{
if|if
condition|(
name|ERR
operator|==
operator|::
name|slk_color
argument_list|(
name|color_pair_number
argument_list|)
condition|)
name|Error
argument_list|(
literal|"slk_color"
argument_list|)
expr_stmt|;
block|}
specifier|inline
name|attr_t
name|attr
argument_list|()
specifier|const
block|{
return|return
operator|::
name|slk_attr
argument_list|()
return|;
block|}
block|}
end_decl_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|// NCURSES_CURSSLK_H_incl
end_comment

end_unit

