begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/****************************************************************  The author of this software is David M. Gay.  Copyright (C) 1998 by Lucent Technologies All Rights Reserved  Permission to use, copy, modify, and distribute this software and its documentation for any purpose and without fee is hereby granted, provided that the above copyright notice appear in all copies and that both that the copyright notice and this permission notice and warranty disclaimer appear in supporting documentation, and that the name of Lucent or any of its entities not be used in advertising or publicity pertaining to distribution of the software without specific, written prior permission.  LUCENT DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL LUCENT OR ANY OF ITS ENTITIES BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ****************************************************************/
end_comment

begin_comment
comment|/* Please send bug reports to David M. Gay (dmg at acm dot org,  * with " at " changed at "@" and " dot " changed to ".").	*/
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|GDTOA_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|GDTOA_H_INCLUDED
end_define

begin_include
include|#
directive|include
file|"arith.h"
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|Long
end_ifndef

begin_define
define|#
directive|define
name|Long
value|long
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|ULong
end_ifndef

begin_typedef
typedef|typedef
name|unsigned
name|Long
name|ULong
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|UShort
end_ifndef

begin_typedef
typedef|typedef
name|unsigned
name|short
name|UShort
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|ANSI
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|KR_headers
end_ifdef

begin_define
define|#
directive|define
name|ANSI
parameter_list|(
name|x
parameter_list|)
value|()
end_define

begin_define
define|#
directive|define
name|Void
end_define

begin_comment
comment|/*nothing*/
end_comment

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ANSI
parameter_list|(
name|x
parameter_list|)
value|x
end_define

begin_define
define|#
directive|define
name|Void
value|void
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ANSI */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CONST
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|KR_headers
end_ifdef

begin_define
define|#
directive|define
name|CONST
end_define

begin_comment
comment|/* blank */
end_comment

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|CONST
value|const
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONST */
end_comment

begin_enum
enum|enum
block|{
comment|/* return values from strtodg */
name|STRTOG_Zero
init|=
literal|0
block|,
name|STRTOG_Normal
init|=
literal|1
block|,
name|STRTOG_Denormal
init|=
literal|2
block|,
name|STRTOG_Infinite
init|=
literal|3
block|,
name|STRTOG_NaN
init|=
literal|4
block|,
name|STRTOG_NaNbits
init|=
literal|5
block|,
name|STRTOG_NoNumber
init|=
literal|6
block|,
name|STRTOG_Retmask
init|=
literal|7
block|,
comment|/* The following may be or-ed into one of the above values. */
name|STRTOG_Neg
init|=
literal|0x08
block|,
comment|/* does not affect STRTOG_Inexlo or STRTOG_Inexhi */
name|STRTOG_Inexlo
init|=
literal|0x10
block|,
comment|/* returned result rounded toward zero */
name|STRTOG_Inexhi
init|=
literal|0x20
block|,
comment|/* returned result rounded away from zero */
name|STRTOG_Inexact
init|=
literal|0x30
block|,
name|STRTOG_Underflow
init|=
literal|0x40
block|,
name|STRTOG_Overflow
init|=
literal|0x80
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
struct|struct
name|FPI
block|{
name|int
name|nbits
decl_stmt|;
name|int
name|emin
decl_stmt|;
name|int
name|emax
decl_stmt|;
name|int
name|rounding
decl_stmt|;
name|int
name|sudden_underflow
decl_stmt|;
block|}
name|FPI
typedef|;
end_typedef

begin_enum
enum|enum
block|{
comment|/* FPI.rounding values: same as FLT_ROUNDS */
name|FPI_Round_zero
init|=
literal|0
block|,
name|FPI_Round_near
init|=
literal|1
block|,
name|FPI_Round_up
init|=
literal|2
block|,
name|FPI_Round_down
init|=
literal|3
block|}
enum|;
end_enum

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
specifier|extern
name|char
modifier|*
name|dtoa
name|ANSI
argument_list|(
operator|(
name|double
name|d
operator|,
name|int
name|mode
operator|,
name|int
name|ndigits
operator|,
name|int
operator|*
name|decpt
operator|,
name|int
operator|*
name|sign
operator|,
name|char
operator|*
operator|*
name|rve
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|gdtoa
name|ANSI
argument_list|(
operator|(
name|FPI
operator|*
name|fpi
operator|,
name|int
name|be
operator|,
name|ULong
operator|*
name|bits
operator|,
name|int
operator|*
name|kindp
operator|,
name|int
name|mode
operator|,
name|int
name|ndigits
operator|,
name|int
operator|*
name|decpt
operator|,
name|char
operator|*
operator|*
name|rve
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|void
name|freedtoa
name|ANSI
argument_list|(
operator|(
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|float
name|strtof
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|double
name|strtod
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtodg
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|FPI
operator|*
operator|,
name|Long
operator|*
operator|,
name|ULong
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|g_ddfmt
name|ANSI
argument_list|(
operator|(
name|char
operator|*
operator|,
name|double
operator|*
operator|,
name|int
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|g_dfmt
name|ANSI
argument_list|(
operator|(
name|char
operator|*
operator|,
name|double
operator|*
operator|,
name|int
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|g_ffmt
name|ANSI
argument_list|(
operator|(
name|char
operator|*
operator|,
name|float
operator|*
operator|,
name|int
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|g_Qfmt
name|ANSI
argument_list|(
operator|(
name|char
operator|*
operator|,
name|void
operator|*
operator|,
name|int
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|g_xfmt
name|ANSI
argument_list|(
operator|(
name|char
operator|*
operator|,
name|void
operator|*
operator|,
name|int
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|g_xLfmt
name|ANSI
argument_list|(
operator|(
name|char
operator|*
operator|,
name|void
operator|*
operator|,
name|int
operator|,
name|unsigned
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtoId
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|double
operator|*
operator|,
name|double
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtoIdd
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|double
operator|*
operator|,
name|double
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtoIf
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|float
operator|*
operator|,
name|float
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtoIQ
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|void
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtoIx
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|void
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtoIxL
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|void
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtord
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|int
operator|,
name|double
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtordd
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|int
operator|,
name|double
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtorf
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|int
operator|,
name|float
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtorQ
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|int
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtorx
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|int
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtorxL
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|int
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
if|#
directive|if
literal|1
specifier|extern
name|int
name|strtodI
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|double
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtopd
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|double
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtopdd
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|double
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtopf
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|float
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtopQ
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtopx
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|int
name|strtopxL
name|ANSI
argument_list|(
operator|(
name|CONST
name|char
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|void
operator|*
operator|)
argument_list|)
decl_stmt|;
else|#
directive|else
define|#
directive|define
name|strtopd
parameter_list|(
name|s
parameter_list|,
name|se
parameter_list|,
name|x
parameter_list|)
value|strtord(s,se,1,x)
define|#
directive|define
name|strtopdd
parameter_list|(
name|s
parameter_list|,
name|se
parameter_list|,
name|x
parameter_list|)
value|strtordd(s,se,1,x)
define|#
directive|define
name|strtopf
parameter_list|(
name|s
parameter_list|,
name|se
parameter_list|,
name|x
parameter_list|)
value|strtorf(s,se,1,x)
define|#
directive|define
name|strtopQ
parameter_list|(
name|s
parameter_list|,
name|se
parameter_list|,
name|x
parameter_list|)
value|strtorQ(s,se,1,x)
define|#
directive|define
name|strtopx
parameter_list|(
name|s
parameter_list|,
name|se
parameter_list|,
name|x
parameter_list|)
value|strtorx(s,se,1,x)
define|#
directive|define
name|strtopxL
parameter_list|(
name|s
parameter_list|,
name|se
parameter_list|,
name|x
parameter_list|)
value|strtorxL(s,se,1,x)
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* GDTOA_H_INCLUDED */
end_comment

end_unit

