begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|DRIVER_H
end_ifndef

begin_define
define|#
directive|define
name|DRIVER_H
end_define

begin_enum
enum|enum
name|hostapd_driver_if_type
block|{
name|HOSTAPD_IF_VLAN
block|,
name|HOSTAPD_IF_WDS
block|}
enum|;
end_enum

begin_struct
struct|struct
name|driver_ops
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* as appears in the config file */
name|int
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|deinit
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|wireless_event_init
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|wireless_event_deinit
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
comment|/** 	 * set_8021x - enable/disable IEEE 802.1X support 	 * @ifname: Interface name (for multi-SSID/VLAN support) 	 * @priv: driver private data 	 * @enabled: 1 = enable, 0 = disable 	 * 	 * Returns: 0 on success, -1 on failure 	 * 	 * Configure the kernel driver to enable/disable 802.1X support. 	 * This may be an empty function if 802.1X support is always enabled. 	 */
name|int
function_decl|(
modifier|*
name|set_ieee8021x
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|enabled
parameter_list|)
function_decl|;
comment|/** 	 * set_privacy - enable/disable privacy 	 * @priv: driver private data 	 * @enabled: 1 = privacy enabled, 0 = disabled 	 * 	 * Return: 0 on success, -1 on failure 	 * 	 * Configure privacy. 	 */
name|int
function_decl|(
modifier|*
name|set_privacy
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|enabled
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_encryption
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|char
modifier|*
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|idx
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|,
name|int
name|txkey
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_seqnum
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|idx
parameter_list|,
name|u8
modifier|*
name|seq
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_seqnum_igtk
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|idx
parameter_list|,
name|u8
modifier|*
name|seq
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|flush
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_generic_elem
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|elem
parameter_list|,
name|size_t
name|elem_len
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|read_sta_data
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|hostap_sta_driver_data
modifier|*
name|data
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|send_eapol
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|,
name|int
name|encrypt
parameter_list|,
specifier|const
name|u8
modifier|*
name|own_addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sta_deauth
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sta_disassoc
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sta_remove
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_ssid
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|u8
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_ssid
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|buf
parameter_list|,
name|int
name|len
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_countermeasures
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|enabled
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|send_mgmt_frame
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|void
modifier|*
name|msg
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_assoc_ap
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sta_add
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|u16
name|aid
parameter_list|,
name|u16
name|capability
parameter_list|,
name|u8
modifier|*
name|supp_rates
parameter_list|,
name|size_t
name|supp_rates_len
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_inact_sec
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sta_clear_stats
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_freq
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|freq
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_rts
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|rts
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_rts
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
modifier|*
name|rts
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_frag
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|frag
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_frag
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
modifier|*
name|frag
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_retry
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|short_retry
parameter_list|,
name|int
name|long_retry
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_retry
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
modifier|*
name|short_retry
parameter_list|,
name|int
modifier|*
name|long_retry
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|sta_set_flags
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|flags_or
parameter_list|,
name|int
name|flags_and
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_rate_sets
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
modifier|*
name|supp_rates
parameter_list|,
name|int
modifier|*
name|basic_rates
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_channel_flag
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|chan
parameter_list|,
name|int
name|flag
parameter_list|,
name|unsigned
name|char
name|power_level
parameter_list|,
name|unsigned
name|char
name|antenna_max
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_regulatory_domain
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|unsigned
name|int
name|rd
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_country
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|char
modifier|*
name|country
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_ieee80211d
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|enabled
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_beacon
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|u8
modifier|*
name|head
parameter_list|,
name|size_t
name|head_len
parameter_list|,
name|u8
modifier|*
name|tail
parameter_list|,
name|size_t
name|tail_len
parameter_list|)
function_decl|;
comment|/* Configure internal bridge: 	 * 0 = disabled, i.e., client separation is enabled (no bridging of 	 *     packets between associated STAs 	 * 1 = enabled, i.e., bridge packets between associated STAs (default) 	 */
name|int
function_decl|(
modifier|*
name|set_internal_bridge
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_beacon_int
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_dtim_period
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
comment|/* Configure broadcast SSID mode: 	 * 0 = include SSID in Beacon frames and reply to Probe Request frames 	 *     that use broadcast SSID 	 * 1 = hide SSID from Beacon frames and ignore Probe Request frames for 	 *     broadcast SSID 	 */
name|int
function_decl|(
modifier|*
name|set_broadcast_ssid
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_cts_protect
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_key_tx_rx_threshold
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_preamble
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_short_slot_time
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|value
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_tx_queue_params
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|queue
parameter_list|,
name|int
name|aifs
parameter_list|,
name|int
name|cw_min
parameter_list|,
name|int
name|cw_max
parameter_list|,
name|int
name|burst_time
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|bss_add
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|bss_remove
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|valid_bss_mask
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|mask
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|passive_scan
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|int
name|now
parameter_list|,
name|int
name|our_mode_only
parameter_list|,
name|int
name|interval
parameter_list|,
name|int
name|_listen
parameter_list|,
name|int
modifier|*
name|channel
parameter_list|,
name|int
modifier|*
name|last_rx
parameter_list|)
function_decl|;
name|struct
name|hostapd_hw_modes
modifier|*
function_decl|(
modifier|*
name|get_hw_feature_data
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|u16
modifier|*
name|num_modes
parameter_list|,
name|u16
modifier|*
name|flags
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|if_add
function_decl|)
parameter_list|(
specifier|const
name|char
modifier|*
name|iface
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|hostapd_driver_if_type
name|type
parameter_list|,
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|if_update
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|hostapd_driver_if_type
name|type
parameter_list|,
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|if_remove
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
name|enum
name|hostapd_driver_if_type
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|set_sta_vlan
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|int
name|vlan_id
parameter_list|)
function_decl|;
comment|/** 	 * commit - Optional commit changes handler 	 * @priv: driver private data 	 * Returns: 0 on success, -1 on failure 	 * 	 * This optional handler function can be registered if the driver 	 * interface implementation needs to commit changes (e.g., by setting 	 * network interface up) at the end of initial configuration. If set, 	 * this handler will be called after initial setup has been completed. 	 */
name|int
function_decl|(
modifier|*
name|commit
function_decl|)
parameter_list|(
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_driver_init
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|init
operator|==
name|NULL
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|init
argument_list|(
name|hapd
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hostapd_driver_deinit
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|deinit
operator|==
name|NULL
condition|)
return|return;
name|hapd
operator|->
name|driver
operator|->
name|deinit
argument_list|(
name|hapd
operator|->
name|driver
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_wireless_event_init
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|wireless_event_init
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|wireless_event_init
argument_list|(
name|hapd
operator|->
name|driver
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|hostapd_wireless_event_deinit
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|wireless_event_deinit
operator|==
name|NULL
condition|)
return|return;
name|hapd
operator|->
name|driver
operator|->
name|wireless_event_deinit
argument_list|(
name|hapd
operator|->
name|driver
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_ieee8021x
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_ieee8021x
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_ieee8021x
argument_list|(
name|ifname
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|enabled
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_privacy
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_privacy
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_privacy
argument_list|(
name|hapd
operator|->
name|conf
operator|->
name|iface
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|enabled
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_encryption
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|char
modifier|*
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|idx
parameter_list|,
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|,
name|int
name|txkey
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_encryption
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_encryption
argument_list|(
name|ifname
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|alg
argument_list|,
name|addr
argument_list|,
name|idx
argument_list|,
name|key
argument_list|,
name|key_len
argument_list|,
name|txkey
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_get_seqnum
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|idx
parameter_list|,
name|u8
modifier|*
name|seq
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|get_seqnum
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|get_seqnum
argument_list|(
name|ifname
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|idx
argument_list|,
name|seq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_get_seqnum_igtk
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|idx
parameter_list|,
name|u8
modifier|*
name|seq
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|get_seqnum_igtk
operator|==
name|NULL
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|get_seqnum_igtk
argument_list|(
name|ifname
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|idx
argument_list|,
name|seq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_flush
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|flush
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|flush
argument_list|(
name|hapd
operator|->
name|driver
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_generic_elem
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|elem
parameter_list|,
name|size_t
name|elem_len
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_generic_elem
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_generic_elem
argument_list|(
name|hapd
operator|->
name|conf
operator|->
name|iface
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|elem
argument_list|,
name|elem_len
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_read_sta_data
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|struct
name|hostap_sta_driver_data
modifier|*
name|data
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|read_sta_data
operator|==
name|NULL
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|read_sta_data
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|data
argument_list|,
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_send_eapol
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|data
parameter_list|,
name|size_t
name|data_len
parameter_list|,
name|int
name|encrypt
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|send_eapol
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|send_eapol
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|data
argument_list|,
name|data_len
argument_list|,
name|encrypt
argument_list|,
name|hapd
operator|->
name|own_addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_sta_deauth
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|sta_deauth
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|sta_deauth
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|reason
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_sta_disassoc
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|reason
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|sta_disassoc
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|sta_disassoc
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|reason
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_sta_remove
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|sta_remove
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|sta_remove
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_get_ssid
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|u8
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|get_ssid
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|get_ssid
argument_list|(
name|hapd
operator|->
name|conf
operator|->
name|iface
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|buf
argument_list|,
name|len
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_ssid
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_ssid
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_ssid
argument_list|(
name|hapd
operator|->
name|conf
operator|->
name|iface
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|buf
argument_list|,
name|len
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_send_mgmt_frame
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|void
modifier|*
name|msg
parameter_list|,
name|size_t
name|len
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|send_mgmt_frame
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|send_mgmt_frame
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|msg
argument_list|,
name|len
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_assoc_ap
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_assoc_ap
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_assoc_ap
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_countermeasures
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_countermeasures
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_countermeasures
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|enabled
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_sta_add
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|u16
name|aid
parameter_list|,
name|u16
name|capability
parameter_list|,
name|u8
modifier|*
name|supp_rates
parameter_list|,
name|size_t
name|supp_rates_len
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|sta_add
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|sta_add
argument_list|(
name|ifname
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|aid
argument_list|,
name|capability
argument_list|,
name|supp_rates
argument_list|,
name|supp_rates_len
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_get_inact_sec
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|get_inact_sec
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|get_inact_sec
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_freq
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|freq
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_freq
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_freq
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|mode
argument_list|,
name|freq
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_rts
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|rts
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_rts
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_rts
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|rts
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_get_rts
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
modifier|*
name|rts
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|get_rts
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|get_rts
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|rts
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_frag
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|frag
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_frag
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_frag
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|frag
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_get_frag
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
modifier|*
name|frag
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|get_frag
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|get_frag
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|frag
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_retry
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|short_retry
parameter_list|,
name|int
name|long_retry
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_retry
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_retry
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|short_retry
argument_list|,
name|long_retry
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_get_retry
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
modifier|*
name|short_retry
parameter_list|,
name|int
modifier|*
name|long_retry
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|get_retry
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|get_retry
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|short_retry
argument_list|,
name|long_retry
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_sta_set_flags
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|flags_or
parameter_list|,
name|int
name|flags_and
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|sta_set_flags
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|sta_set_flags
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|flags_or
argument_list|,
name|flags_and
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_rate_sets
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
modifier|*
name|supp_rates
parameter_list|,
name|int
modifier|*
name|basic_rates
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_rate_sets
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_rate_sets
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|supp_rates
argument_list|,
name|basic_rates
argument_list|,
name|mode
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_channel_flag
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|chan
parameter_list|,
name|int
name|flag
parameter_list|,
name|unsigned
name|char
name|power_level
parameter_list|,
name|unsigned
name|char
name|antenna_max
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_channel_flag
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_channel_flag
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|mode
argument_list|,
name|chan
argument_list|,
name|flag
argument_list|,
name|power_level
argument_list|,
name|antenna_max
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_regulatory_domain
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|unsigned
name|int
name|rd
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_regulatory_domain
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_regulatory_domain
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|rd
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_country
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|char
modifier|*
name|country
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_country
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_country
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|country
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_ieee80211d
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_ieee80211d
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_ieee80211d
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|enabled
argument_list|)
return|;
block|}
end_function

begin_function_decl
name|void
name|driver_register
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|struct
name|driver_ops
modifier|*
name|ops
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|driver_unregister
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|driver_ops
modifier|*
name|driver_lookup
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
end_function_decl

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_sta_clear_stats
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|sta_clear_stats
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|sta_clear_stats
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_beacon
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|u8
modifier|*
name|head
parameter_list|,
name|size_t
name|head_len
parameter_list|,
name|u8
modifier|*
name|tail
parameter_list|,
name|size_t
name|tail_len
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_beacon
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_beacon
argument_list|(
name|ifname
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|head
argument_list|,
name|head_len
argument_list|,
name|tail
argument_list|,
name|tail_len
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_internal_bridge
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_internal_bridge
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_internal_bridge
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_beacon_int
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_beacon_int
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_beacon_int
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_dtim_period
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_dtim_period
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_dtim_period
argument_list|(
name|hapd
operator|->
name|conf
operator|->
name|iface
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_broadcast_ssid
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_broadcast_ssid
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_broadcast_ssid
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_cts_protect
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_cts_protect
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_cts_protect
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_key_tx_rx_threshold
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_key_tx_rx_threshold
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_key_tx_rx_threshold
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_preamble
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_preamble
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_preamble
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_short_slot_time
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|value
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_short_slot_time
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_short_slot_time
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_tx_queue_params
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|queue
parameter_list|,
name|int
name|aifs
parameter_list|,
name|int
name|cw_min
parameter_list|,
name|int
name|cw_max
parameter_list|,
name|int
name|burst_time
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_tx_queue_params
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_tx_queue_params
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|queue
argument_list|,
name|aifs
argument_list|,
name|cw_min
argument_list|,
name|cw_max
argument_list|,
name|burst_time
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_bss_add
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|bss_add
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|bss_add
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|ifname
argument_list|,
name|bssid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_bss_remove
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|char
modifier|*
name|ifname
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|bss_remove
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|bss_remove
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|ifname
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_valid_bss_mask
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|mask
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|valid_bss_mask
operator|==
name|NULL
condition|)
return|return
literal|1
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|valid_bss_mask
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|mask
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_if_add
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|enum
name|hostapd_driver_if_type
name|type
parameter_list|,
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|if_add
operator|==
name|NULL
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|if_add
argument_list|(
name|hapd
operator|->
name|conf
operator|->
name|iface
argument_list|,
name|hapd
operator|->
name|driver
argument_list|,
name|type
argument_list|,
name|ifname
argument_list|,
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_if_update
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|enum
name|hostapd_driver_if_type
name|type
parameter_list|,
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|if_update
operator|==
name|NULL
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|if_update
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|type
argument_list|,
name|ifname
argument_list|,
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_if_remove
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|enum
name|hostapd_driver_if_type
name|type
parameter_list|,
name|char
modifier|*
name|ifname
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|if_remove
operator|==
name|NULL
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|if_remove
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|type
argument_list|,
name|ifname
argument_list|,
name|addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_passive_scan
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|int
name|now
parameter_list|,
name|int
name|our_mode_only
parameter_list|,
name|int
name|interval
parameter_list|,
name|int
name|_listen
parameter_list|,
name|int
modifier|*
name|channel
parameter_list|,
name|int
modifier|*
name|last_rx
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|passive_scan
operator|==
name|NULL
condition|)
return|return
operator|-
literal|1
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|passive_scan
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|now
argument_list|,
name|our_mode_only
argument_list|,
name|interval
argument_list|,
name|_listen
argument_list|,
name|channel
argument_list|,
name|last_rx
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|hostapd_hw_modes
modifier|*
name|hostapd_get_hw_feature_data
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
name|u16
modifier|*
name|num_modes
parameter_list|,
name|u16
modifier|*
name|flags
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|get_hw_feature_data
operator|==
name|NULL
condition|)
return|return
name|NULL
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|get_hw_feature_data
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|num_modes
argument_list|,
name|flags
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_set_sta_vlan
parameter_list|(
specifier|const
name|char
modifier|*
name|ifname
parameter_list|,
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|vlan_id
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|set_sta_vlan
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|set_sta_vlan
argument_list|(
name|hapd
operator|->
name|driver
argument_list|,
name|addr
argument_list|,
name|ifname
argument_list|,
name|vlan_id
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|hostapd_driver_commit
parameter_list|(
name|struct
name|hostapd_data
modifier|*
name|hapd
parameter_list|)
block|{
if|if
condition|(
name|hapd
operator|->
name|driver
operator|==
name|NULL
operator|||
name|hapd
operator|->
name|driver
operator|->
name|commit
operator|==
name|NULL
condition|)
return|return
literal|0
return|;
return|return
name|hapd
operator|->
name|driver
operator|->
name|commit
argument_list|(
name|hapd
operator|->
name|driver
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* DRIVER_H */
end_comment

end_unit

