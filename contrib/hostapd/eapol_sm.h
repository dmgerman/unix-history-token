begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|EAPOL_SM_H
end_ifndef

begin_define
define|#
directive|define
name|EAPOL_SM_H
end_define

begin_include
include|#
directive|include
file|"defs.h"
end_include

begin_comment
comment|/* IEEE Std 802.1X-REV-d11, Ch. 8.2 */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|ForceUnauthorized
init|=
literal|1
block|,
name|ForceAuthorized
init|=
literal|3
block|,
name|Auto
init|=
literal|2
block|}
name|PortTypes
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|Unauthorized
init|=
literal|2
block|,
name|Authorized
init|=
literal|1
block|}
name|PortState
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|Both
init|=
literal|0
block|,
name|In
init|=
literal|1
block|}
name|ControlledDirection
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|int
name|Counter
typedef|;
end_typedef

begin_comment
comment|/* Authenticator PAE state machine */
end_comment

begin_struct
struct|struct
name|eapol_auth_pae_sm
block|{
comment|/* variables */
name|Boolean
name|eapolLogoff
decl_stmt|;
name|Boolean
name|eapolStart
decl_stmt|;
name|Boolean
name|eapRestart
decl_stmt|;
name|PortTypes
name|portMode
decl_stmt|;
name|unsigned
name|int
name|reAuthCount
decl_stmt|;
comment|/* constants */
name|unsigned
name|int
name|quietPeriod
decl_stmt|;
comment|/* default 60; 0..65535 */
define|#
directive|define
name|AUTH_PAE_DEFAULT_quietPeriod
value|60
name|unsigned
name|int
name|reAuthMax
decl_stmt|;
comment|/* default 2 */
define|#
directive|define
name|AUTH_PAE_DEFAULT_reAuthMax
value|2
comment|/* counters */
name|Counter
name|authEntersConnecting
decl_stmt|;
name|Counter
name|authEapLogoffsWhileConnecting
decl_stmt|;
name|Counter
name|authEntersAuthenticating
decl_stmt|;
name|Counter
name|authAuthSuccessesWhileAuthenticating
decl_stmt|;
name|Counter
name|authAuthTimeoutsWhileAuthenticating
decl_stmt|;
name|Counter
name|authAuthFailWhileAuthenticating
decl_stmt|;
name|Counter
name|authAuthEapStartsWhileAuthenticating
decl_stmt|;
name|Counter
name|authAuthEapLogoffWhileAuthenticating
decl_stmt|;
name|Counter
name|authAuthReauthsWhileAuthenticated
decl_stmt|;
name|Counter
name|authAuthEapStartsWhileAuthenticated
decl_stmt|;
name|Counter
name|authAuthEapLogoffWhileAuthenticated
decl_stmt|;
enum|enum
block|{
name|AUTH_PAE_INITIALIZE
block|,
name|AUTH_PAE_DISCONNECTED
block|,
name|AUTH_PAE_CONNECTING
block|,
name|AUTH_PAE_AUTHENTICATING
block|,
name|AUTH_PAE_AUTHENTICATED
block|,
name|AUTH_PAE_ABORTING
block|,
name|AUTH_PAE_HELD
block|,
name|AUTH_PAE_FORCE_AUTH
block|,
name|AUTH_PAE_FORCE_UNAUTH
block|,
name|AUTH_PAE_RESTART
block|}
name|state
enum|;
block|}
struct|;
end_struct

begin_comment
comment|/* Backend Authentication state machine */
end_comment

begin_struct
struct|struct
name|eapol_backend_auth_sm
block|{
comment|/* variables */
name|Boolean
name|eapNoReq
decl_stmt|;
name|Boolean
name|eapReq
decl_stmt|;
name|Boolean
name|eapResp
decl_stmt|;
comment|/* constants */
name|unsigned
name|int
name|serverTimeout
decl_stmt|;
comment|/* default 30; 1..X */
define|#
directive|define
name|BE_AUTH_DEFAULT_serverTimeout
value|30
comment|/* counters */
name|Counter
name|backendResponses
decl_stmt|;
name|Counter
name|backendAccessChallenges
decl_stmt|;
name|Counter
name|backendOtherRequestsToSupplicant
decl_stmt|;
name|Counter
name|backendAuthSuccesses
decl_stmt|;
name|Counter
name|backendAuthFails
decl_stmt|;
enum|enum
block|{
name|BE_AUTH_REQUEST
block|,
name|BE_AUTH_RESPONSE
block|,
name|BE_AUTH_SUCCESS
block|,
name|BE_AUTH_FAIL
block|,
name|BE_AUTH_TIMEOUT
block|,
name|BE_AUTH_IDLE
block|,
name|BE_AUTH_INITIALIZE
block|,
name|BE_AUTH_IGNORE
block|}
name|state
enum|;
block|}
struct|;
end_struct

begin_comment
comment|/* Reauthentication Timer state machine */
end_comment

begin_struct
struct|struct
name|eapol_reauth_timer_sm
block|{
comment|/* constants */
name|unsigned
name|int
name|reAuthPeriod
decl_stmt|;
comment|/* default 3600 s */
name|Boolean
name|reAuthEnabled
decl_stmt|;
enum|enum
block|{
name|REAUTH_TIMER_INITIALIZE
block|,
name|REAUTH_TIMER_REAUTHENTICATE
block|}
name|state
enum|;
block|}
struct|;
end_struct

begin_comment
comment|/* Authenticator Key Transmit state machine */
end_comment

begin_struct
struct|struct
name|eapol_auth_key_tx
block|{
enum|enum
block|{
name|AUTH_KEY_TX_NO_KEY_TRANSMIT
block|,
name|AUTH_KEY_TX_KEY_TRANSMIT
block|}
name|state
enum|;
block|}
struct|;
end_struct

begin_comment
comment|/* Key Receive state machine */
end_comment

begin_struct
struct|struct
name|eapol_key_rx
block|{
comment|/* variables */
name|Boolean
name|rxKey
decl_stmt|;
enum|enum
block|{
name|KEY_RX_NO_KEY_RECEIVE
block|,
name|KEY_RX_KEY_RECEIVE
block|}
name|state
enum|;
block|}
struct|;
end_struct

begin_comment
comment|/* Controlled Directions state machine */
end_comment

begin_struct
struct|struct
name|eapol_ctrl_dir
block|{
comment|/* variables */
name|ControlledDirection
name|adminControlledDirections
decl_stmt|;
name|ControlledDirection
name|operControlledDirections
decl_stmt|;
name|Boolean
name|operEdge
decl_stmt|;
enum|enum
block|{
name|CTRL_DIR_FORCE_BOTH
block|,
name|CTRL_DIR_IN_OR_BOTH
block|}
name|state
enum|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|eap_sm
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|eapol_state_machine
block|{
comment|/* timers */
name|int
name|aWhile
decl_stmt|;
name|int
name|quietWhile
decl_stmt|;
name|int
name|reAuthWhen
decl_stmt|;
comment|/* global variables */
name|Boolean
name|authAbort
decl_stmt|;
name|Boolean
name|authFail
decl_stmt|;
name|PortState
name|authPortStatus
decl_stmt|;
name|Boolean
name|authStart
decl_stmt|;
name|Boolean
name|authTimeout
decl_stmt|;
name|Boolean
name|authSuccess
decl_stmt|;
name|Boolean
name|eapFail
decl_stmt|;
name|Boolean
name|eapolEap
decl_stmt|;
name|Boolean
name|eapSuccess
decl_stmt|;
name|Boolean
name|eapTimeout
decl_stmt|;
name|Boolean
name|initialize
decl_stmt|;
name|Boolean
name|keyAvailable
decl_stmt|;
name|Boolean
name|keyDone
decl_stmt|;
name|Boolean
name|keyRun
decl_stmt|;
name|Boolean
name|keyTxEnabled
decl_stmt|;
name|PortTypes
name|portControl
decl_stmt|;
name|Boolean
name|portEnabled
decl_stmt|;
name|Boolean
name|portValid
decl_stmt|;
name|Boolean
name|reAuthenticate
decl_stmt|;
comment|/* Port Timers state machine */
comment|/* 'Boolean tick' implicitly handled as registered timeout */
name|struct
name|eapol_auth_pae_sm
name|auth_pae
decl_stmt|;
name|struct
name|eapol_backend_auth_sm
name|be_auth
decl_stmt|;
name|struct
name|eapol_reauth_timer_sm
name|reauth_timer
decl_stmt|;
name|struct
name|eapol_auth_key_tx
name|auth_key_tx
decl_stmt|;
name|struct
name|eapol_key_rx
name|key_rx
decl_stmt|;
name|struct
name|eapol_ctrl_dir
name|ctrl_dir
decl_stmt|;
comment|/* Authenticator Statistics Table */
name|Counter
name|dot1xAuthEapolFramesRx
decl_stmt|;
name|Counter
name|dot1xAuthEapolFramesTx
decl_stmt|;
name|Counter
name|dot1xAuthEapolStartFramesRx
decl_stmt|;
name|Counter
name|dot1xAuthEapolLogoffFramesRx
decl_stmt|;
name|Counter
name|dot1xAuthEapolRespIdFramesRx
decl_stmt|;
name|Counter
name|dot1xAuthEapolRespFramesRx
decl_stmt|;
name|Counter
name|dot1xAuthEapolReqIdFramesTx
decl_stmt|;
name|Counter
name|dot1xAuthEapolReqFramesTx
decl_stmt|;
name|Counter
name|dot1xAuthInvalidEapolFramesRx
decl_stmt|;
name|Counter
name|dot1xAuthEapLengthErrorFramesRx
decl_stmt|;
name|Counter
name|dot1xAuthLastEapolFrameVersion
decl_stmt|;
comment|/* Other variables - not defined in IEEE 802.1X */
name|u8
name|addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
comment|/* Supplicant address */
define|#
directive|define
name|EAPOL_SM_PREAUTH
value|BIT(0)
name|int
name|flags
decl_stmt|;
comment|/* EAPOL_SM_* */
name|int
name|radius_identifier
decl_stmt|;
comment|/* TODO: check when the last messages can be released */
name|struct
name|radius_msg
modifier|*
name|last_recv_radius
decl_stmt|;
name|u8
modifier|*
name|last_eap_supp
decl_stmt|;
comment|/* last received EAP Response from Supplicant */
name|size_t
name|last_eap_supp_len
decl_stmt|;
name|u8
modifier|*
name|last_eap_radius
decl_stmt|;
comment|/* last received EAP Response from Authentication 			      * Server */
name|size_t
name|last_eap_radius_len
decl_stmt|;
name|u8
modifier|*
name|identity
decl_stmt|;
name|size_t
name|identity_len
decl_stmt|;
name|u8
modifier|*
name|radius_class
decl_stmt|;
name|size_t
name|radius_class_len
decl_stmt|;
comment|/* Keys for encrypting and signing EAPOL-Key frames */
name|u8
modifier|*
name|eapol_key_sign
decl_stmt|;
name|size_t
name|eapol_key_sign_len
decl_stmt|;
name|u8
modifier|*
name|eapol_key_crypt
decl_stmt|;
name|size_t
name|eapol_key_crypt_len
decl_stmt|;
name|Boolean
name|rx_identity
decl_stmt|;
comment|/* set to TRUE on reception of 			      * EAP-Response/Identity */
name|struct
name|eap_sm
modifier|*
name|eap
decl_stmt|;
comment|/* currentId was removed in IEEE 802.1X-REV, but it is needed to filter 	 * out EAP-Responses to old packets (e.g., to two EAP-Request/Identity 	 * packets that are often sent in the beginning of the authentication). 	 */
name|u8
name|currentId
decl_stmt|;
comment|/* Somewhat nasty pointers to global hostapd and STA data to avoid 	 * passing these to every function */
name|struct
name|hostapd_data
modifier|*
name|hapd
decl_stmt|;
name|struct
name|sta_info
modifier|*
name|sta
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|eapol_state_machine
modifier|*
name|eapol_sm_alloc
parameter_list|(
name|hostapd
modifier|*
name|hapd
parameter_list|,
name|struct
name|sta_info
modifier|*
name|sta
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eapol_sm_free
parameter_list|(
name|struct
name|eapol_state_machine
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eapol_sm_step
parameter_list|(
name|struct
name|eapol_state_machine
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eapol_sm_initialize
parameter_list|(
name|struct
name|eapol_state_machine
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|eapol_sm_dump_state
parameter_list|(
name|FILE
modifier|*
name|f
parameter_list|,
specifier|const
name|char
modifier|*
name|prefix
parameter_list|,
name|struct
name|eapol_state_machine
modifier|*
name|sm
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EAPOL_SM_H */
end_comment

end_unit

