begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * hostapd / Configuration file  * Copyright (c) 2003-2006, Jouni Malinen<j@w1.fi>  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License version 2 as  * published by the Free Software Foundation.  *  * Alternatively, this software may be distributed under the terms of BSD  * license.  *  * See README and COPYING for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|CONFIG_H
end_define

begin_include
include|#
directive|include
file|"config_types.h"
end_include

begin_typedef
typedef|typedef
name|u8
name|macaddr
index|[
name|ETH_ALEN
index|]
typedef|;
end_typedef

begin_struct_decl
struct_decl|struct
name|hostapd_radius_servers
struct_decl|;
end_struct_decl

begin_define
define|#
directive|define
name|HOSTAPD_MAX_SSID_LEN
value|32
end_define

begin_define
define|#
directive|define
name|NUM_WEP_KEYS
value|4
end_define

begin_struct
struct|struct
name|hostapd_wep_keys
block|{
name|u8
name|idx
decl_stmt|;
name|u8
modifier|*
name|key
index|[
name|NUM_WEP_KEYS
index|]
decl_stmt|;
name|size_t
name|len
index|[
name|NUM_WEP_KEYS
index|]
decl_stmt|;
name|int
name|keys_set
decl_stmt|;
name|size_t
name|default_len
decl_stmt|;
comment|/* key length used for dynamic key generation */
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
name|hostap_security_policy
block|{
name|SECURITY_PLAINTEXT
init|=
literal|0
block|,
name|SECURITY_STATIC_WEP
init|=
literal|1
block|,
name|SECURITY_IEEE_802_1X
init|=
literal|2
block|,
name|SECURITY_WPA_PSK
init|=
literal|3
block|,
name|SECURITY_WPA
init|=
literal|4
block|}
name|secpolicy
typedef|;
end_typedef

begin_struct
struct|struct
name|hostapd_ssid
block|{
name|char
name|ssid
index|[
name|HOSTAPD_MAX_SSID_LEN
operator|+
literal|1
index|]
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
name|int
name|ssid_set
decl_stmt|;
name|char
name|vlan
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|secpolicy
name|security_policy
decl_stmt|;
name|struct
name|hostapd_wpa_psk
modifier|*
name|wpa_psk
decl_stmt|;
name|char
modifier|*
name|wpa_passphrase
decl_stmt|;
name|char
modifier|*
name|wpa_psk_file
decl_stmt|;
name|struct
name|hostapd_wep_keys
name|wep
decl_stmt|;
define|#
directive|define
name|DYNAMIC_VLAN_DISABLED
value|0
define|#
directive|define
name|DYNAMIC_VLAN_OPTIONAL
value|1
define|#
directive|define
name|DYNAMIC_VLAN_REQUIRED
value|2
name|int
name|dynamic_vlan
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_FULL_DYNAMIC_VLAN
name|char
modifier|*
name|vlan_tagged_interface
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_FULL_DYNAMIC_VLAN */
name|struct
name|hostapd_wep_keys
modifier|*
modifier|*
name|dyn_vlan_keys
decl_stmt|;
name|size_t
name|max_dyn_vlan_keys
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|VLAN_ID_WILDCARD
value|-1
end_define

begin_struct
struct|struct
name|hostapd_vlan
block|{
name|struct
name|hostapd_vlan
modifier|*
name|next
decl_stmt|;
name|int
name|vlan_id
decl_stmt|;
comment|/* VLAN ID or -1 (VLAN_ID_WILDCARD) for wildcard entry */
name|char
name|ifname
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|int
name|dynamic_vlan
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_FULL_DYNAMIC_VLAN
define|#
directive|define
name|DVLAN_CLEAN_BR
value|0x1
define|#
directive|define
name|DVLAN_CLEAN_VLAN
value|0x2
define|#
directive|define
name|DVLAN_CLEAN_VLAN_PORT
value|0x4
define|#
directive|define
name|DVLAN_CLEAN_WLAN_PORT
value|0x8
name|int
name|clean
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_FULL_DYNAMIC_VLAN */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PMK_LEN
value|32
end_define

begin_struct
struct|struct
name|hostapd_wpa_psk
block|{
name|struct
name|hostapd_wpa_psk
modifier|*
name|next
decl_stmt|;
name|int
name|group
decl_stmt|;
name|u8
name|psk
index|[
name|PMK_LEN
index|]
decl_stmt|;
name|u8
name|addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|EAP_USER_MAX_METHODS
value|8
end_define

begin_struct
struct|struct
name|hostapd_eap_user
block|{
name|struct
name|hostapd_eap_user
modifier|*
name|next
decl_stmt|;
name|u8
modifier|*
name|identity
decl_stmt|;
name|size_t
name|identity_len
decl_stmt|;
struct|struct
block|{
name|int
name|vendor
decl_stmt|;
name|u32
name|method
decl_stmt|;
block|}
name|methods
index|[
name|EAP_USER_MAX_METHODS
index|]
struct|;
name|u8
modifier|*
name|password
decl_stmt|;
name|size_t
name|password_len
decl_stmt|;
name|int
name|phase2
decl_stmt|;
name|int
name|force_version
decl_stmt|;
name|unsigned
name|int
name|wildcard_prefix
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|password_hash
range|:
literal|1
decl_stmt|;
comment|/* whether password is hashed with 				       * nt_password_hash() */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|NUM_TX_QUEUES
value|8
end_define

begin_struct
struct|struct
name|hostapd_tx_queue_params
block|{
name|int
name|aifs
decl_stmt|;
name|int
name|cwmin
decl_stmt|;
name|int
name|cwmax
decl_stmt|;
name|int
name|burst
decl_stmt|;
comment|/* maximum burst time in 0.1 ms, i.e., 10 = 1 ms */
name|int
name|configured
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_wme_ac_params
block|{
name|int
name|cwmin
decl_stmt|;
name|int
name|cwmax
decl_stmt|;
name|int
name|aifs
decl_stmt|;
name|int
name|txopLimit
decl_stmt|;
comment|/* in units of 32us */
name|int
name|admission_control_mandatory
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/**  * struct hostapd_bss_config - Per-BSS configuration  */
end_comment

begin_struct
struct|struct
name|hostapd_bss_config
block|{
name|char
name|iface
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|bridge
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
enum|enum
block|{
name|HOSTAPD_LEVEL_DEBUG_VERBOSE
init|=
literal|0
block|,
name|HOSTAPD_LEVEL_DEBUG
init|=
literal|1
block|,
name|HOSTAPD_LEVEL_INFO
init|=
literal|2
block|,
name|HOSTAPD_LEVEL_NOTICE
init|=
literal|3
block|,
name|HOSTAPD_LEVEL_WARNING
init|=
literal|4
block|}
name|logger_syslog_level
enum|,
name|logger_stdout_level
expr_stmt|;
define|#
directive|define
name|HOSTAPD_MODULE_IEEE80211
value|BIT(0)
define|#
directive|define
name|HOSTAPD_MODULE_IEEE8021X
value|BIT(1)
define|#
directive|define
name|HOSTAPD_MODULE_RADIUS
value|BIT(2)
define|#
directive|define
name|HOSTAPD_MODULE_WPA
value|BIT(3)
define|#
directive|define
name|HOSTAPD_MODULE_DRIVER
value|BIT(4)
define|#
directive|define
name|HOSTAPD_MODULE_IAPP
value|BIT(5)
define|#
directive|define
name|HOSTAPD_MODULE_MLME
value|BIT(6)
name|unsigned
name|int
name|logger_syslog
decl_stmt|;
comment|/* module bitfield */
name|unsigned
name|int
name|logger_stdout
decl_stmt|;
comment|/* module bitfield */
enum|enum
block|{
name|HOSTAPD_DEBUG_NO
init|=
literal|0
block|,
name|HOSTAPD_DEBUG_MINIMAL
init|=
literal|1
block|,
name|HOSTAPD_DEBUG_VERBOSE
init|=
literal|2
block|,
name|HOSTAPD_DEBUG_MSGDUMPS
init|=
literal|3
block|,
name|HOSTAPD_DEBUG_EXCESSIVE
init|=
literal|4
block|}
name|debug
enum|;
comment|/* debug verbosity level */
name|char
modifier|*
name|dump_log_name
decl_stmt|;
comment|/* file name for state dump (SIGUSR1) */
name|int
name|max_num_sta
decl_stmt|;
comment|/* maximum number of STAs in station table */
name|int
name|dtim_period
decl_stmt|;
name|int
name|ieee802_1x
decl_stmt|;
comment|/* use IEEE 802.1X */
name|int
name|eapol_version
decl_stmt|;
name|int
name|eap_server
decl_stmt|;
comment|/* Use internal EAP server instead of external 			 * RADIUS server */
name|struct
name|hostapd_eap_user
modifier|*
name|eap_user
decl_stmt|;
name|char
modifier|*
name|eap_sim_db
decl_stmt|;
name|struct
name|hostapd_ip_addr
name|own_ip_addr
decl_stmt|;
name|char
modifier|*
name|nas_identifier
decl_stmt|;
name|struct
name|hostapd_radius_servers
modifier|*
name|radius
decl_stmt|;
name|struct
name|hostapd_ssid
name|ssid
decl_stmt|;
name|char
modifier|*
name|eap_req_id_text
decl_stmt|;
comment|/* optional displayable message sent with 				* EAP Request-Identity */
name|size_t
name|eap_req_id_text_len
decl_stmt|;
name|int
name|eapol_key_index_workaround
decl_stmt|;
name|size_t
name|default_wep_key_len
decl_stmt|;
name|int
name|individual_wep_key_len
decl_stmt|;
name|int
name|wep_rekeying_period
decl_stmt|;
name|int
name|broadcast_key_idx_min
decl_stmt|,
name|broadcast_key_idx_max
decl_stmt|;
name|int
name|eap_reauth_period
decl_stmt|;
name|int
name|ieee802_11f
decl_stmt|;
comment|/* use IEEE 802.11f (IAPP) */
name|char
name|iapp_iface
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
comment|/* interface used with IAPP broadcast 					* frames */
name|u8
name|assoc_ap_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|assoc_ap
decl_stmt|;
comment|/* whether assoc_ap_addr is set */
enum|enum
block|{
name|ACCEPT_UNLESS_DENIED
init|=
literal|0
block|,
name|DENY_UNLESS_ACCEPTED
init|=
literal|1
block|,
name|USE_EXTERNAL_RADIUS_AUTH
init|=
literal|2
block|}
name|macaddr_acl
enum|;
name|macaddr
modifier|*
name|accept_mac
decl_stmt|;
name|int
name|num_accept_mac
decl_stmt|;
name|macaddr
modifier|*
name|deny_mac
decl_stmt|;
name|int
name|num_deny_mac
decl_stmt|;
define|#
directive|define
name|HOSTAPD_AUTH_OPEN
value|BIT(0)
define|#
directive|define
name|HOSTAPD_AUTH_SHARED_KEY
value|BIT(1)
name|int
name|auth_algs
decl_stmt|;
comment|/* bitfield of allowed IEEE 802.11 authentication 			* algorithms */
define|#
directive|define
name|HOSTAPD_WPA_VERSION_WPA
value|BIT(0)
define|#
directive|define
name|HOSTAPD_WPA_VERSION_WPA2
value|BIT(1)
name|int
name|wpa
decl_stmt|;
define|#
directive|define
name|WPA_KEY_MGMT_IEEE8021X
value|BIT(0)
define|#
directive|define
name|WPA_KEY_MGMT_PSK
value|BIT(1)
name|int
name|wpa_key_mgmt
decl_stmt|;
define|#
directive|define
name|WPA_CIPHER_NONE
value|BIT(0)
define|#
directive|define
name|WPA_CIPHER_WEP40
value|BIT(1)
define|#
directive|define
name|WPA_CIPHER_WEP104
value|BIT(2)
define|#
directive|define
name|WPA_CIPHER_TKIP
value|BIT(3)
define|#
directive|define
name|WPA_CIPHER_CCMP
value|BIT(4)
ifdef|#
directive|ifdef
name|CONFIG_IEEE80211W
define|#
directive|define
name|WPA_CIPHER_AES_128_CMAC
value|BIT(5)
enum|enum
block|{
name|NO_IEEE80211W
init|=
literal|0
block|,
name|IEEE80211W_OPTIONAL
init|=
literal|1
block|,
name|IEEE80211W_REQUIRED
init|=
literal|2
block|}
name|ieee80211w
enum|;
endif|#
directive|endif
comment|/* CONFIG_IEEE80211W */
name|int
name|wpa_pairwise
decl_stmt|;
name|int
name|wpa_group
decl_stmt|;
name|int
name|wpa_group_rekey
decl_stmt|;
name|int
name|wpa_strict_rekey
decl_stmt|;
name|int
name|wpa_gmk_rekey
decl_stmt|;
name|int
name|rsn_preauth
decl_stmt|;
name|char
modifier|*
name|rsn_preauth_interfaces
decl_stmt|;
name|int
name|peerkey
decl_stmt|;
name|char
modifier|*
name|ctrl_interface
decl_stmt|;
comment|/* directory for UNIX domain sockets */
name|gid_t
name|ctrl_interface_gid
decl_stmt|;
name|int
name|ctrl_interface_gid_set
decl_stmt|;
name|char
modifier|*
name|ca_cert
decl_stmt|;
name|char
modifier|*
name|server_cert
decl_stmt|;
name|char
modifier|*
name|private_key
decl_stmt|;
name|char
modifier|*
name|private_key_passwd
decl_stmt|;
name|int
name|check_crl
decl_stmt|;
name|char
modifier|*
name|radius_server_clients
decl_stmt|;
name|int
name|radius_server_auth_port
decl_stmt|;
name|int
name|radius_server_ipv6
decl_stmt|;
name|char
modifier|*
name|test_socket
decl_stmt|;
comment|/* UNIX domain socket path for driver_test */
name|int
name|use_pae_group_addr
decl_stmt|;
comment|/* Whether to send EAPOL frames to PAE group 				 * address instead of individual address 				 * (for driver_wired.c). 				 */
name|int
name|ap_max_inactivity
decl_stmt|;
name|int
name|ignore_broadcast_ssid
decl_stmt|;
name|int
name|wme_enabled
decl_stmt|;
name|struct
name|hostapd_vlan
modifier|*
name|vlan
decl_stmt|,
modifier|*
name|vlan_tail
decl_stmt|;
name|macaddr
name|bssid
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
enum|enum
block|{
name|HOSTAPD_MODE_IEEE80211B
block|,
name|HOSTAPD_MODE_IEEE80211G
block|,
name|HOSTAPD_MODE_IEEE80211A
block|,
name|NUM_HOSTAPD_MODES
block|}
name|hostapd_hw_mode
typedef|;
end_typedef

begin_comment
comment|/**  * struct hostapd_config - Per-radio interface configuration  */
end_comment

begin_struct
struct|struct
name|hostapd_config
block|{
name|struct
name|hostapd_bss_config
modifier|*
name|bss
decl_stmt|,
modifier|*
name|last_bss
decl_stmt|;
name|struct
name|hostapd_radius_servers
modifier|*
name|radius
decl_stmt|;
name|size_t
name|num_bss
decl_stmt|;
name|u16
name|beacon_int
decl_stmt|;
name|int
name|rts_threshold
decl_stmt|;
name|int
name|fragm_threshold
decl_stmt|;
name|u8
name|send_probe_response
decl_stmt|;
name|u8
name|channel
decl_stmt|;
name|hostapd_hw_mode
name|hw_mode
decl_stmt|;
comment|/* HOSTAPD_MODE_IEEE80211A, .. */
enum|enum
block|{
name|LONG_PREAMBLE
init|=
literal|0
block|,
name|SHORT_PREAMBLE
init|=
literal|1
block|}
name|preamble
enum|;
enum|enum
block|{
name|CTS_PROTECTION_AUTOMATIC
init|=
literal|0
block|,
name|CTS_PROTECTION_FORCE_ENABLED
init|=
literal|1
block|,
name|CTS_PROTECTION_FORCE_DISABLED
init|=
literal|2
block|,
name|CTS_PROTECTION_AUTOMATIC_NO_OLBC
init|=
literal|3
block|, 	}
name|cts_protection_type
enum|;
name|int
modifier|*
name|supported_rates
decl_stmt|;
name|int
modifier|*
name|basic_rates
decl_stmt|;
specifier|const
name|struct
name|driver_ops
modifier|*
name|driver
decl_stmt|;
name|int
name|passive_scan_interval
decl_stmt|;
comment|/* seconds, 0 = disabled */
name|int
name|passive_scan_listen
decl_stmt|;
comment|/* usec */
name|int
name|passive_scan_mode
decl_stmt|;
name|int
name|ap_table_max_size
decl_stmt|;
name|int
name|ap_table_expiration_time
decl_stmt|;
name|char
name|country
index|[
literal|3
index|]
decl_stmt|;
comment|/* first two octets: country code as described in 			  * ISO/IEC 3166-1. Third octet: 			  * ' ' (ascii 32): all environments 			  * 'O': Outdoor environemnt only 			  * 'I': Indoor environment only 			  */
name|int
name|ieee80211d
decl_stmt|;
name|unsigned
name|int
name|ieee80211h
decl_stmt|;
comment|/* Enable/Disable 80211h */
name|struct
name|hostapd_tx_queue_params
name|tx_queue
index|[
name|NUM_TX_QUEUES
index|]
decl_stmt|;
comment|/* 	 * WME AC parameters, in same order as 802.1D, i.e. 	 * 0 = BE (best effort) 	 * 1 = BK (background) 	 * 2 = VI (video) 	 * 3 = VO (voice) 	 */
name|struct
name|hostapd_wme_ac_params
name|wme_ac_params
index|[
literal|4
index|]
decl_stmt|;
enum|enum
block|{
name|INTERNAL_BRIDGE_DO_NOT_CONTROL
init|=
operator|-
literal|1
block|,
name|INTERNAL_BRIDGE_DISABLED
init|=
literal|0
block|,
name|INTERNAL_BRIDGE_ENABLED
init|=
literal|1
block|}
name|bridge_packets
enum|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|hostapd_mac_comp
parameter_list|(
specifier|const
name|void
modifier|*
name|a
parameter_list|,
specifier|const
name|void
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_mac_comp_empty
parameter_list|(
specifier|const
name|void
modifier|*
name|a
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|hostapd_config
modifier|*
name|hostapd_config_read
parameter_list|(
specifier|const
name|char
modifier|*
name|fname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_config_free
parameter_list|(
name|struct
name|hostapd_config
modifier|*
name|conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_maclist_found
parameter_list|(
name|macaddr
modifier|*
name|list
parameter_list|,
name|int
name|num_entries
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_rate_found
parameter_list|(
name|int
modifier|*
name|list
parameter_list|,
name|int
name|rate
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_wep_key_cmp
parameter_list|(
name|struct
name|hostapd_wep_keys
modifier|*
name|a
parameter_list|,
name|struct
name|hostapd_wep_keys
modifier|*
name|b
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|hostapd_get_psk
parameter_list|(
specifier|const
name|struct
name|hostapd_bss_config
modifier|*
name|conf
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|prev_psk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_setup_wpa_psk
parameter_list|(
name|struct
name|hostapd_bss_config
modifier|*
name|conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|hostapd_get_vlan_id_ifname
parameter_list|(
name|struct
name|hostapd_vlan
modifier|*
name|vlan
parameter_list|,
name|int
name|vlan_id
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|hostapd_eap_user
modifier|*
name|hostapd_get_eap_user
parameter_list|(
specifier|const
name|struct
name|hostapd_bss_config
modifier|*
name|conf
parameter_list|,
specifier|const
name|u8
modifier|*
name|identity
parameter_list|,
name|size_t
name|identity_len
parameter_list|,
name|int
name|phase2
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_H */
end_comment

end_unit

