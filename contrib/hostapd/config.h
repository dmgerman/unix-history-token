begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_H
end_ifndef

begin_define
define|#
directive|define
name|CONFIG_H
end_define

begin_typedef
typedef|typedef
name|u8
name|macaddr
index|[
name|ETH_ALEN
index|]
typedef|;
end_typedef

begin_struct
struct|struct
name|hostapd_radius_server
block|{
comment|/* MIB prefix for shared variables: 	 * @ = radiusAuth or radiusAcc depending on the type of the server */
name|struct
name|in_addr
name|addr
decl_stmt|;
comment|/* @ServerAddress */
name|int
name|port
decl_stmt|;
comment|/* @ClientServerPortNumber */
name|u8
modifier|*
name|shared_secret
decl_stmt|;
name|size_t
name|shared_secret_len
decl_stmt|;
comment|/* Dynamic (not from configuration file) MIB data */
name|int
name|index
decl_stmt|;
comment|/* @ServerIndex */
name|int
name|round_trip_time
decl_stmt|;
comment|/* @ClientRoundTripTime; in hundredths of a 			      * second */
name|u32
name|requests
decl_stmt|;
comment|/* @Client{Access,}Requests */
name|u32
name|retransmissions
decl_stmt|;
comment|/* @Client{Access,}Retransmissions */
name|u32
name|access_accepts
decl_stmt|;
comment|/* radiusAuthClientAccessAccepts */
name|u32
name|access_rejects
decl_stmt|;
comment|/* radiusAuthClientAccessRejects */
name|u32
name|access_challenges
decl_stmt|;
comment|/* radiusAuthClientAccessChallenges */
name|u32
name|responses
decl_stmt|;
comment|/* radiusAccClientResponses */
name|u32
name|malformed_responses
decl_stmt|;
comment|/* @ClientMalformed{Access,}Responses */
name|u32
name|bad_authenticators
decl_stmt|;
comment|/* @ClientBadAuthenticators */
name|u32
name|timeouts
decl_stmt|;
comment|/* @ClientTimeouts */
name|u32
name|unknown_types
decl_stmt|;
comment|/* @ClientUnknownTypes */
name|u32
name|packets_dropped
decl_stmt|;
comment|/* @ClientPacketsDropped */
comment|/* @ClientPendingRequests: length of hapd->radius->msgs for matching 	 * msg_type */
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|PMK_LEN
value|32
end_define

begin_struct
struct|struct
name|hostapd_wpa_psk
block|{
name|struct
name|hostapd_wpa_psk
modifier|*
name|next
decl_stmt|;
name|int
name|group
decl_stmt|;
name|u8
name|psk
index|[
name|PMK_LEN
index|]
decl_stmt|;
name|u8
name|addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|EAP_USER_MAX_METHODS
value|8
end_define

begin_struct
struct|struct
name|hostapd_eap_user
block|{
name|struct
name|hostapd_eap_user
modifier|*
name|next
decl_stmt|;
name|u8
modifier|*
name|identity
decl_stmt|;
name|size_t
name|identity_len
decl_stmt|;
name|u8
name|methods
index|[
name|EAP_USER_MAX_METHODS
index|]
decl_stmt|;
name|u8
modifier|*
name|password
decl_stmt|;
name|size_t
name|password_len
decl_stmt|;
name|int
name|phase2
decl_stmt|;
name|int
name|force_version
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|hostapd_config
block|{
name|char
name|iface
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
name|char
name|bridge
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
specifier|const
name|struct
name|driver_ops
modifier|*
name|driver
decl_stmt|;
enum|enum
block|{
name|HOSTAPD_LEVEL_DEBUG_VERBOSE
init|=
literal|0
block|,
name|HOSTAPD_LEVEL_DEBUG
init|=
literal|1
block|,
name|HOSTAPD_LEVEL_INFO
init|=
literal|2
block|,
name|HOSTAPD_LEVEL_NOTICE
init|=
literal|3
block|,
name|HOSTAPD_LEVEL_WARNING
init|=
literal|4
block|}
name|logger_syslog_level
enum|,
name|logger_stdout_level
expr_stmt|;
define|#
directive|define
name|HOSTAPD_MODULE_IEEE80211
value|BIT(0)
define|#
directive|define
name|HOSTAPD_MODULE_IEEE8021X
value|BIT(1)
define|#
directive|define
name|HOSTAPD_MODULE_RADIUS
value|BIT(2)
define|#
directive|define
name|HOSTAPD_MODULE_WPA
value|BIT(3)
define|#
directive|define
name|HOSTAPD_MODULE_DRIVER
value|BIT(4)
define|#
directive|define
name|HOSTAPD_MODULE_IAPP
value|BIT(5)
name|unsigned
name|int
name|logger_syslog
decl_stmt|;
comment|/* module bitfield */
name|unsigned
name|int
name|logger_stdout
decl_stmt|;
comment|/* module bitfield */
enum|enum
block|{
name|HOSTAPD_DEBUG_NO
init|=
literal|0
block|,
name|HOSTAPD_DEBUG_MINIMAL
init|=
literal|1
block|,
name|HOSTAPD_DEBUG_VERBOSE
init|=
literal|2
block|,
name|HOSTAPD_DEBUG_MSGDUMPS
init|=
literal|3
block|,
name|HOSTAPD_DEBUG_EXCESSIVE
init|=
literal|4
block|}
name|debug
enum|;
comment|/* debug verbosity level */
name|char
modifier|*
name|dump_log_name
decl_stmt|;
comment|/* file name for state dump (SIGUSR1) */
name|int
name|ieee802_1x
decl_stmt|;
comment|/* use IEEE 802.1X */
name|int
name|eap_authenticator
decl_stmt|;
comment|/* Use internal EAP authenticator instead of 				* external RADIUS server */
name|struct
name|hostapd_eap_user
modifier|*
name|eap_user
decl_stmt|;
name|char
modifier|*
name|eap_sim_db
decl_stmt|;
name|struct
name|in_addr
name|own_ip_addr
decl_stmt|;
name|char
modifier|*
name|nas_identifier
decl_stmt|;
comment|/* RADIUS Authentication and Accounting servers in priority order */
name|struct
name|hostapd_radius_server
modifier|*
name|auth_servers
decl_stmt|,
modifier|*
name|auth_server
decl_stmt|;
name|int
name|num_auth_servers
decl_stmt|;
name|struct
name|hostapd_radius_server
modifier|*
name|acct_servers
decl_stmt|,
modifier|*
name|acct_server
decl_stmt|;
name|int
name|num_acct_servers
decl_stmt|;
name|int
name|radius_retry_primary_interval
decl_stmt|;
name|int
name|radius_acct_interim_interval
decl_stmt|;
define|#
directive|define
name|HOSTAPD_SSID_LEN
value|32
name|char
name|ssid
index|[
name|HOSTAPD_SSID_LEN
operator|+
literal|1
index|]
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
name|int
name|ssid_set
decl_stmt|;
name|char
modifier|*
name|eap_req_id_text
decl_stmt|;
comment|/* optional displayable message sent with 				* EAP Request-Identity */
name|int
name|eapol_key_index_workaround
decl_stmt|;
name|size_t
name|default_wep_key_len
decl_stmt|;
name|int
name|individual_wep_key_len
decl_stmt|;
name|int
name|wep_rekeying_period
decl_stmt|;
name|int
name|eap_reauth_period
decl_stmt|;
name|int
name|ieee802_11f
decl_stmt|;
comment|/* use IEEE 802.11f (IAPP) */
name|char
name|iapp_iface
index|[
name|IFNAMSIZ
operator|+
literal|1
index|]
decl_stmt|;
comment|/* interface used with IAPP broadcast 					* frames */
name|u8
name|assoc_ap_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|assoc_ap
decl_stmt|;
comment|/* whether assoc_ap_addr is set */
enum|enum
block|{
name|ACCEPT_UNLESS_DENIED
init|=
literal|0
block|,
name|DENY_UNLESS_ACCEPTED
init|=
literal|1
block|,
name|USE_EXTERNAL_RADIUS_AUTH
init|=
literal|2
block|}
name|macaddr_acl
enum|;
name|macaddr
modifier|*
name|accept_mac
decl_stmt|;
name|int
name|num_accept_mac
decl_stmt|;
name|macaddr
modifier|*
name|deny_mac
decl_stmt|;
name|int
name|num_deny_mac
decl_stmt|;
define|#
directive|define
name|HOSTAPD_AUTH_OPEN
value|BIT(0)
define|#
directive|define
name|HOSTAPD_AUTH_SHARED_KEY
value|BIT(1)
name|int
name|auth_algs
decl_stmt|;
comment|/* bitfield of allowed IEEE 802.11 authentication 			* algorithms */
define|#
directive|define
name|HOSTAPD_WPA_VERSION_WPA
value|BIT(0)
define|#
directive|define
name|HOSTAPD_WPA_VERSION_WPA2
value|BIT(1)
name|int
name|wpa
decl_stmt|;
name|struct
name|hostapd_wpa_psk
modifier|*
name|wpa_psk
decl_stmt|;
name|char
modifier|*
name|wpa_passphrase
decl_stmt|;
name|char
modifier|*
name|wpa_psk_file
decl_stmt|;
define|#
directive|define
name|WPA_KEY_MGMT_IEEE8021X
value|BIT(0)
define|#
directive|define
name|WPA_KEY_MGMT_PSK
value|BIT(1)
name|int
name|wpa_key_mgmt
decl_stmt|;
define|#
directive|define
name|WPA_CIPHER_NONE
value|BIT(0)
define|#
directive|define
name|WPA_CIPHER_WEP40
value|BIT(1)
define|#
directive|define
name|WPA_CIPHER_WEP104
value|BIT(2)
define|#
directive|define
name|WPA_CIPHER_TKIP
value|BIT(3)
define|#
directive|define
name|WPA_CIPHER_CCMP
value|BIT(4)
name|int
name|wpa_pairwise
decl_stmt|;
name|int
name|wpa_group
decl_stmt|;
name|int
name|wpa_group_rekey
decl_stmt|;
name|int
name|wpa_strict_rekey
decl_stmt|;
name|int
name|wpa_gmk_rekey
decl_stmt|;
name|int
name|rsn_preauth
decl_stmt|;
name|char
modifier|*
name|rsn_preauth_interfaces
decl_stmt|;
name|char
modifier|*
name|ctrl_interface
decl_stmt|;
comment|/* directory for UNIX domain sockets */
name|gid_t
name|ctrl_interface_gid
decl_stmt|;
name|char
modifier|*
name|ca_cert
decl_stmt|;
name|char
modifier|*
name|server_cert
decl_stmt|;
name|char
modifier|*
name|private_key
decl_stmt|;
name|char
modifier|*
name|private_key_passwd
decl_stmt|;
name|char
modifier|*
name|radius_server_clients
decl_stmt|;
name|int
name|radius_server_auth_port
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|struct
name|hostapd_config
modifier|*
name|hostapd_config_read
parameter_list|(
specifier|const
name|char
modifier|*
name|fname
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hostapd_config_free
parameter_list|(
name|struct
name|hostapd_config
modifier|*
name|conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_maclist_found
parameter_list|(
name|macaddr
modifier|*
name|list
parameter_list|,
name|int
name|num_entries
parameter_list|,
name|u8
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|u8
modifier|*
name|hostapd_get_psk
parameter_list|(
specifier|const
name|struct
name|hostapd_config
modifier|*
name|conf
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
specifier|const
name|u8
modifier|*
name|prev_psk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|hostapd_setup_wpa_psk
parameter_list|(
name|struct
name|hostapd_config
modifier|*
name|conf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|struct
name|hostapd_eap_user
modifier|*
name|hostapd_get_eap_user
parameter_list|(
specifier|const
name|struct
name|hostapd_config
modifier|*
name|conf
parameter_list|,
specifier|const
name|u8
modifier|*
name|identity
parameter_list|,
name|size_t
name|identity_len
parameter_list|,
name|int
name|phase2
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_H */
end_comment

end_unit

