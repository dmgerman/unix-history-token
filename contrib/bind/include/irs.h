begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (c) 1996,1999 by Internet Software Consortium.  *  * Permission to use, copy, modify, and distribute this software for any  * purpose with or without fee is hereby granted, provided that the above  * copyright notice and this permission notice appear in all copies.  *  * THE SOFTWARE IS PROVIDED "AS IS" AND INTERNET SOFTWARE CONSORTIUM DISCLAIMS  * ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL INTERNET SOFTWARE  * CONSORTIUM BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL  * DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR  * PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS  * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS  * SOFTWARE.  */
end_comment

begin_comment
comment|/*  * $Id: irs.h,v 8.4 1999/01/18 07:46:46 vixie Exp $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_IRS_H_INCLUDED
end_ifndef

begin_define
define|#
directive|define
name|_IRS_H_INCLUDED
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_include
include|#
directive|include
file|<arpa/nameser.h>
end_include

begin_include
include|#
directive|include
file|<grp.h>
end_include

begin_include
include|#
directive|include
file|<netdb.h>
end_include

begin_include
include|#
directive|include
file|<resolv.h>
end_include

begin_include
include|#
directive|include
file|<pwd.h>
end_include

begin_comment
comment|/*  * This is the group map class.  */
end_comment

begin_struct
struct|struct
name|irs_gr
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|group
modifier|*
argument_list|(
operator|*
name|next
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|group
modifier|*
argument_list|(
operator|*
name|byname
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|group
modifier|*
argument_list|(
operator|*
name|bygid
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|,
name|gid_t
operator|)
argument_list|)
decl_stmt|;
name|int
argument_list|(
argument|*list
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|gid_t
operator|,
name|gid_t
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*rewind
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*minimize
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|__res_state
modifier|*
argument_list|(
operator|*
name|res_get
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*res_set
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_gr
operator|*
operator|,
name|res_state
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the password map class.  */
end_comment

begin_struct
struct|struct
name|irs_pw
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pw
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|passwd
modifier|*
argument_list|(
operator|*
name|next
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pw
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|passwd
modifier|*
argument_list|(
operator|*
name|byname
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pw
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|passwd
modifier|*
argument_list|(
operator|*
name|byuid
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pw
operator|*
operator|,
name|uid_t
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*rewind
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pw
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*minimize
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pw
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|__res_state
modifier|*
argument_list|(
operator|*
name|res_get
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pw
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*res_set
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pw
operator|*
operator|,
name|res_state
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the service map class.  */
end_comment

begin_struct
struct|struct
name|irs_sv
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_sv
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|servent
modifier|*
argument_list|(
operator|*
name|byname
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_sv
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|servent
modifier|*
argument_list|(
operator|*
name|byport
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_sv
operator|*
operator|,
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|servent
modifier|*
argument_list|(
operator|*
name|next
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_sv
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*rewind
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_sv
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*minimize
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_sv
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|__res_state
modifier|*
argument_list|(
operator|*
name|res_get
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_sv
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*res_set
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_sv
operator|*
operator|,
name|res_state
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the protocols map class.  */
end_comment

begin_struct
struct|struct
name|irs_pr
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pr
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|protoent
modifier|*
argument_list|(
operator|*
name|byname
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pr
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|protoent
modifier|*
argument_list|(
operator|*
name|bynumber
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pr
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|struct
name|protoent
modifier|*
argument_list|(
operator|*
name|next
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pr
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*rewind
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pr
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*minimize
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pr
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|__res_state
modifier|*
argument_list|(
operator|*
name|res_get
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pr
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*res_set
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_pr
operator|*
operator|,
name|res_state
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the hosts map class.  */
end_comment

begin_struct
struct|struct
name|irs_ho
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|hostent
modifier|*
argument_list|(
operator|*
name|byname
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|hostent
modifier|*
argument_list|(
operator|*
name|byname2
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|struct
name|hostent
modifier|*
argument_list|(
operator|*
name|byaddr
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|,
specifier|const
name|void
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|struct
name|hostent
modifier|*
argument_list|(
operator|*
name|next
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*rewind
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*minimize
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|__res_state
modifier|*
argument_list|(
operator|*
name|res_get
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*res_set
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ho
operator|*
operator|,
name|res_state
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the networks map class.  */
end_comment

begin_struct
struct|struct
name|irs_nw
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_nw
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|nwent
modifier|*
argument_list|(
operator|*
name|byname
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_nw
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|struct
name|nwent
modifier|*
argument_list|(
operator|*
name|byaddr
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_nw
operator|*
operator|,
name|void
operator|*
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
decl_stmt|;
name|struct
name|nwent
modifier|*
argument_list|(
operator|*
name|next
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_nw
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*rewind
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_nw
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*minimize
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_nw
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|__res_state
modifier|*
argument_list|(
operator|*
name|res_get
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_nw
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*res_set
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_nw
operator|*
operator|,
name|res_state
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the netgroups map class.  */
end_comment

begin_struct
struct|struct
name|irs_ng
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ng
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*next
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ng
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|char
operator|*
operator|*
operator|,
name|char
operator|*
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*test
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ng
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*rewind
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ng
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*minimize
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_ng
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the generic map class, which copies the front of all others.  */
end_comment

begin_struct
struct|struct
name|irs_map
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
name|void
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is the accessor class.  It contains pointers to all of the  * initializers for the map classes for a particular accessor.  */
end_comment

begin_struct
struct|struct
name|irs_acc
block|{
name|void
modifier|*
name|private
decl_stmt|;
name|void
argument_list|(
argument|*close
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
expr_stmt|;
name|struct
name|irs_gr
modifier|*
argument_list|(
operator|*
name|gr_map
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|irs_pw
modifier|*
argument_list|(
operator|*
name|pw_map
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|irs_sv
modifier|*
argument_list|(
operator|*
name|sv_map
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|irs_pr
modifier|*
argument_list|(
operator|*
name|pr_map
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|irs_ho
modifier|*
argument_list|(
operator|*
name|ho_map
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|irs_nw
modifier|*
argument_list|(
operator|*
name|nw_map
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|irs_ng
modifier|*
argument_list|(
operator|*
name|ng_map
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
decl_stmt|;
name|struct
name|__res_state
modifier|*
argument_list|(
operator|*
name|res_get
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|)
argument_list|)
decl_stmt|;
name|void
argument_list|(
argument|*res_set
argument_list|)
name|__P
argument_list|(
operator|(
expr|struct
name|irs_acc
operator|*
operator|,
name|res_state
operator|,
name|void
argument_list|(
operator|*
argument_list|)
argument_list|(
name|void
operator|*
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * This is because the official definition of "struct netent" has no  * concept of CIDR even though it allows variant address families (on  * output but not input).  The compatibility stubs convert the structs  * below into "struct netent"'s.  */
end_comment

begin_struct
struct|struct
name|nwent
block|{
name|char
modifier|*
name|n_name
decl_stmt|;
comment|/* official name of net */
name|char
modifier|*
modifier|*
name|n_aliases
decl_stmt|;
comment|/* alias list */
name|int
name|n_addrtype
decl_stmt|;
comment|/* net address type */
name|void
modifier|*
name|n_addr
decl_stmt|;
comment|/* network address */
name|int
name|n_length
decl_stmt|;
comment|/* address length, in bits */
block|}
struct|;
end_struct

begin_comment
comment|/*  * Hide external function names from POSIX.  */
end_comment

begin_define
define|#
directive|define
name|irs_gen_acc
value|__irs_gen_acc
end_define

begin_define
define|#
directive|define
name|irs_lcl_acc
value|__irs_lcl_acc
end_define

begin_define
define|#
directive|define
name|irs_dns_acc
value|__irs_dns_acc
end_define

begin_define
define|#
directive|define
name|irs_nis_acc
value|__irs_nis_acc
end_define

begin_define
define|#
directive|define
name|irs_irp_acc
value|__irs_irp_acc
end_define

begin_comment
comment|/*  * Externs.  */
end_comment

begin_decl_stmt
specifier|extern
name|struct
name|irs_acc
modifier|*
name|irs_gen_acc
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|options
operator|,
specifier|const
name|char
operator|*
name|conf_file
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|irs_acc
modifier|*
name|irs_lcl_acc
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|options
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|irs_acc
modifier|*
name|irs_dns_acc
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|options
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|irs_acc
modifier|*
name|irs_nis_acc
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|options
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|irs_acc
modifier|*
name|irs_irp_acc
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|options
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * These forward declarations are for the semi-private functions in  * the get*.c files. Each of these funcs implements the real get*  * functionality and the standard versions are just wrappers that  * call these. Apart from the wrappers, only irpd is expected to  * call these directly, hence these decls are put here and not in  * the /usr/include replacements.  */
end_comment

begin_struct_decl
struct_decl|struct
name|net_data
struct_decl|;
end_struct_decl

begin_comment
comment|/* forward */
end_comment

begin_comment
comment|/*  * net_data_create gets a singleton net_data object.  net_data_init  * creates as many net_data objects as times it is called.  Clients using  * the default interface will use net_data_create by default.  Servers will  * probably want net_data_init (one call per client)  */
end_comment

begin_function_decl
name|struct
name|net_data
modifier|*
name|net_data_create
parameter_list|(
specifier|const
name|char
modifier|*
name|conf_file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|struct
name|net_data
modifier|*
name|net_data_init
parameter_list|(
specifier|const
name|char
modifier|*
name|conf_file
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|net_data_destroy
parameter_list|(
name|void
modifier|*
name|p
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|struct
name|group
modifier|*
name|getgrent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|group
modifier|*
name|getgrnam_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|group
modifier|*
name|getgrgid_p
name|__P
argument_list|(
operator|(
name|gid_t
name|gid
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|setgroupent_p
name|__P
argument_list|(
operator|(
name|int
name|stayopen
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|endgrent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|getgrouplist_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
name|gid_t
name|basegid
operator|,
name|gid_t
operator|*
name|groups
operator|,
name|int
operator|*
name|ngroups
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|SETGRENT_VOID
end_ifdef

begin_decl_stmt
specifier|extern
name|void
name|setgrent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|extern
name|int
name|setgrent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|struct
name|hostent
modifier|*
name|gethostbyname_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|hostent
modifier|*
name|gethostbyname2_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
name|int
name|af
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|hostent
modifier|*
name|gethostbyaddr_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|addr
operator|,
name|int
name|len
operator|,
name|int
name|af
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|hostent
modifier|*
name|gethostent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|sethostent_p
name|__P
argument_list|(
operator|(
name|int
name|stayopen
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|endhostent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|netent
modifier|*
name|getnetent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|netent
modifier|*
name|getnetbyname_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|netent
modifier|*
name|getnetbyaddr_p
name|__P
argument_list|(
operator|(
name|unsigned
name|long
name|net
operator|,
name|int
name|type
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|setnetent_p
name|__P
argument_list|(
operator|(
name|int
name|stayopen
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|endnetent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|setnetgrent_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|netgroup
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|endnetgrent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|innetgr_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|netgroup
operator|,
specifier|const
name|char
operator|*
name|host
operator|,
specifier|const
name|char
operator|*
name|user
operator|,
specifier|const
name|char
operator|*
name|domain
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|getnetgrent_p
name|__P
argument_list|(
operator|(
name|char
operator|*
operator|*
name|host
operator|,
name|char
operator|*
operator|*
name|user
operator|,
name|char
operator|*
operator|*
name|domain
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|protoent
modifier|*
name|getprotoent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|protoent
modifier|*
name|getprotobyname_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|protoent
modifier|*
name|getprotobynumber_p
name|__P
argument_list|(
operator|(
name|int
name|proto
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|setprotoent_p
name|__P
argument_list|(
operator|(
name|int
name|stayopen
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|endprotoent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|passwd
modifier|*
name|getpwent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|passwd
modifier|*
name|getpwnam_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|passwd
modifier|*
name|getpwuid_p
name|__P
argument_list|(
operator|(
name|uid_t
name|uid
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|setpassent_p
name|__P
argument_list|(
operator|(
name|int
name|stayopen
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|endpwent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|SETPWENT_VOID
end_ifdef

begin_decl_stmt
specifier|extern
name|void
name|setpwent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|extern
name|int
name|setpwent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|struct
name|servent
modifier|*
name|getservent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|servent
modifier|*
name|getservbyname_p
name|__P
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|name
operator|,
specifier|const
name|char
operator|*
name|proto
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|struct
name|servent
modifier|*
name|getservbyport_p
name|__P
argument_list|(
operator|(
name|int
name|port
operator|,
specifier|const
name|char
operator|*
name|proto
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|setservent_p
name|__P
argument_list|(
operator|(
name|int
name|stayopen
operator|,
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|endservent_p
name|__P
argument_list|(
operator|(
expr|struct
name|net_data
operator|*
name|net_data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*_IRS_H_INCLUDED*/
end_comment

end_unit

