begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_CTL_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_CTL_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/jemalloc_internal_types.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/malloc_io.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/mutex_prof.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ql.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/size_classes.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/stats.h"
end_include

begin_comment
comment|/* Maximum ctl tree depth. */
end_comment

begin_define
define|#
directive|define
name|CTL_MAX_DEPTH
value|7
end_define

begin_typedef
typedef|typedef
struct|struct
name|ctl_node_s
block|{
name|bool
name|named
decl_stmt|;
block|}
name|ctl_node_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ctl_named_node_s
block|{
name|ctl_node_t
name|node
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* If (nchildren == 0), this is a terminal node. */
name|size_t
name|nchildren
decl_stmt|;
specifier|const
name|ctl_node_t
modifier|*
name|children
decl_stmt|;
name|int
function_decl|(
modifier|*
name|ctl
function_decl|)
parameter_list|(
name|tsd_t
modifier|*
parameter_list|,
specifier|const
name|size_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
block|}
name|ctl_named_node_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ctl_indexed_node_s
block|{
name|struct
name|ctl_node_s
name|node
decl_stmt|;
specifier|const
name|ctl_named_node_t
modifier|*
function_decl|(
modifier|*
name|index
function_decl|)
parameter_list|(
name|tsdn_t
modifier|*
parameter_list|,
specifier|const
name|size_t
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
block|}
name|ctl_indexed_node_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ctl_arena_stats_s
block|{
name|arena_stats_t
name|astats
decl_stmt|;
comment|/* Aggregate stats for small size classes, based on bin stats. */
name|size_t
name|allocated_small
decl_stmt|;
name|uint64_t
name|nmalloc_small
decl_stmt|;
name|uint64_t
name|ndalloc_small
decl_stmt|;
name|uint64_t
name|nrequests_small
decl_stmt|;
name|malloc_bin_stats_t
name|bstats
index|[
name|NBINS
index|]
decl_stmt|;
name|malloc_large_stats_t
name|lstats
index|[
name|NSIZES
operator|-
name|NBINS
index|]
decl_stmt|;
block|}
name|ctl_arena_stats_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|ctl_stats_s
block|{
name|size_t
name|allocated
decl_stmt|;
name|size_t
name|active
decl_stmt|;
name|size_t
name|metadata
decl_stmt|;
name|size_t
name|resident
decl_stmt|;
name|size_t
name|mapped
decl_stmt|;
name|size_t
name|retained
decl_stmt|;
name|background_thread_stats_t
name|background_thread
decl_stmt|;
name|mutex_prof_data_t
name|mutex_prof_data
index|[
name|mutex_prof_num_global_mutexes
index|]
decl_stmt|;
block|}
name|ctl_stats_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|ctl_arena_s
name|ctl_arena_t
typedef|;
end_typedef

begin_struct
struct|struct
name|ctl_arena_s
block|{
name|unsigned
name|arena_ind
decl_stmt|;
name|bool
name|initialized
decl_stmt|;
name|ql_elm
argument_list|(
argument|ctl_arena_t
argument_list|)
name|destroyed_link
expr_stmt|;
comment|/* Basic stats, supported even if !config_stats. */
name|unsigned
name|nthreads
decl_stmt|;
specifier|const
name|char
modifier|*
name|dss
decl_stmt|;
name|ssize_t
name|dirty_decay_ms
decl_stmt|;
name|ssize_t
name|muzzy_decay_ms
decl_stmt|;
name|size_t
name|pactive
decl_stmt|;
name|size_t
name|pdirty
decl_stmt|;
name|size_t
name|pmuzzy
decl_stmt|;
comment|/* NULL if !config_stats. */
name|ctl_arena_stats_t
modifier|*
name|astats
decl_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
struct|struct
name|ctl_arenas_s
block|{
name|uint64_t
name|epoch
decl_stmt|;
name|unsigned
name|narenas
decl_stmt|;
name|ql_head
argument_list|(
argument|ctl_arena_t
argument_list|)
name|destroyed
expr_stmt|;
comment|/* 	 * Element 0 corresponds to merged stats for extant arenas (accessed via 	 * MALLCTL_ARENAS_ALL), element 1 corresponds to merged stats for 	 * destroyed arenas (accessed via MALLCTL_ARENAS_DESTROYED), and the 	 * remaining MALLOCX_ARENA_LIMIT elements correspond to arenas. 	 */
name|ctl_arena_t
modifier|*
name|arenas
index|[
literal|2
operator|+
name|MALLOCX_ARENA_LIMIT
index|]
decl_stmt|;
block|}
name|ctl_arenas_t
typedef|;
end_typedef

begin_function_decl
name|int
name|ctl_byname
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|oldp
parameter_list|,
name|size_t
modifier|*
name|oldlenp
parameter_list|,
name|void
modifier|*
name|newp
parameter_list|,
name|size_t
name|newlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_nametomib
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|size_t
modifier|*
name|mibp
parameter_list|,
name|size_t
modifier|*
name|miblenp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|int
name|ctl_bymib
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
specifier|const
name|size_t
modifier|*
name|mib
parameter_list|,
name|size_t
name|miblen
parameter_list|,
name|void
modifier|*
name|oldp
parameter_list|,
name|size_t
modifier|*
name|oldlenp
parameter_list|,
name|void
modifier|*
name|newp
parameter_list|,
name|size_t
name|newlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ctl_boot
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_prefork
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_postfork_parent
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|ctl_postfork_child
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|xmallctl
parameter_list|(
name|name
parameter_list|,
name|oldp
parameter_list|,
name|oldlenp
parameter_list|,
name|newp
parameter_list|,
name|newlen
parameter_list|)
value|do {		\ 	if (je_mallctl(name, oldp, oldlenp, newp, newlen)		\ 	    != 0) {							\ 		malloc_printf(						\ 		    "<jemalloc>: Failure in xmallctl(\"%s\", ...)\n",	\ 		    name);						\ 		abort();						\ 	}								\ } while (0)
end_define

begin_define
define|#
directive|define
name|xmallctlnametomib
parameter_list|(
name|name
parameter_list|,
name|mibp
parameter_list|,
name|miblenp
parameter_list|)
value|do {			\ 	if (je_mallctlnametomib(name, mibp, miblenp) != 0) {		\ 		malloc_printf("<jemalloc>: Failure in "			\ 		    "xmallctlnametomib(\"%s\", ...)\n", name);		\ 		abort();						\ 	}								\ } while (0)
end_define

begin_define
define|#
directive|define
name|xmallctlbymib
parameter_list|(
name|mib
parameter_list|,
name|miblen
parameter_list|,
name|oldp
parameter_list|,
name|oldlenp
parameter_list|,
name|newp
parameter_list|,
name|newlen
parameter_list|)
value|do {	\ 	if (je_mallctlbymib(mib, miblen, oldp, oldlenp, newp,		\ 	    newlen) != 0) {						\ 		malloc_write(						\ 		    "<jemalloc>: Failure in xmallctlbymib()\n");	\ 		abort();						\ 	}								\ } while (0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_CTL_H */
end_comment

end_unit

