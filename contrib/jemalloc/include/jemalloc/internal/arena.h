begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_TYPES
end_ifdef

begin_define
define|#
directive|define
name|LARGE_MINCLASS
value|(ZU(1)<< LG_LARGE_MINCLASS)
end_define

begin_comment
comment|/* Maximum number of regions in one run. */
end_comment

begin_define
define|#
directive|define
name|LG_RUN_MAXREGS
value|(LG_PAGE - LG_TINY_MIN)
end_define

begin_define
define|#
directive|define
name|RUN_MAXREGS
value|(1U<< LG_RUN_MAXREGS)
end_define

begin_comment
comment|/*  * Minimum redzone size.  Redzones may be larger than this if necessary to  * preserve region alignment.  */
end_comment

begin_define
define|#
directive|define
name|REDZONE_MINSIZE
value|16
end_define

begin_comment
comment|/*  * The minimum ratio of active:dirty pages per arena is computed as:  *  *   (nactive>> lg_dirty_mult)>= ndirty  *  * So, supposing that lg_dirty_mult is 3, there can be no less than 8 times as  * many active pages as dirty pages.  */
end_comment

begin_define
define|#
directive|define
name|LG_DIRTY_MULT_DEFAULT
value|3
end_define

begin_typedef
typedef|typedef
enum|enum
block|{
name|purge_mode_ratio
init|=
literal|0
block|,
name|purge_mode_decay
init|=
literal|1
block|,
name|purge_mode_limit
init|=
literal|2
block|}
name|purge_mode_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|PURGE_DEFAULT
value|purge_mode_ratio
end_define

begin_comment
comment|/* Default decay time in seconds. */
end_comment

begin_define
define|#
directive|define
name|DECAY_TIME_DEFAULT
value|10
end_define

begin_comment
comment|/* Number of event ticks between time checks. */
end_comment

begin_define
define|#
directive|define
name|DECAY_NTICKS_PER_UPDATE
value|1000
end_define

begin_typedef
typedef|typedef
name|struct
name|arena_runs_dirty_link_s
name|arena_runs_dirty_link_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|arena_run_s
name|arena_run_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|arena_chunk_map_bits_s
name|arena_chunk_map_bits_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|arena_chunk_map_misc_s
name|arena_chunk_map_misc_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|arena_chunk_s
name|arena_chunk_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|arena_bin_info_s
name|arena_bin_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|arena_bin_s
name|arena_bin_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|arena_s
name|arena_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|arena_tdata_s
name|arena_tdata_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_TYPES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_STRUCTS
end_ifdef

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_ARENA_STRUCTS_A
end_ifdef

begin_struct
struct|struct
name|arena_run_s
block|{
comment|/* Index of bin this run is associated with. */
name|szind_t
name|binind
decl_stmt|;
comment|/* Number of free regions in run. */
name|unsigned
name|nfree
decl_stmt|;
comment|/* Per region allocated/deallocated bitmap. */
name|bitmap_t
name|bitmap
index|[
name|BITMAP_GROUPS_MAX
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Each element of the chunk map corresponds to one page within the chunk. */
end_comment

begin_struct
struct|struct
name|arena_chunk_map_bits_s
block|{
comment|/* 	 * Run address (or size) and various flags are stored together.  The bit 	 * layout looks like (assuming 32-bit system): 	 * 	 *   ???????? ???????? ???nnnnn nnndumla 	 * 	 * ? : Unallocated: Run address for first/last pages, unset for internal 	 *                  pages. 	 *     Small: Run page offset. 	 *     Large: Run page count for first page, unset for trailing pages. 	 * n : binind for small size class, BININD_INVALID for large size class. 	 * d : dirty? 	 * u : unzeroed? 	 * m : decommitted? 	 * l : large? 	 * a : allocated? 	 * 	 * Following are example bit patterns for the three types of runs. 	 * 	 * p : run page offset 	 * s : run size 	 * n : binind for size class; large objects set these to BININD_INVALID 	 * x : don't care 	 * - : 0 	 * + : 1 	 * [DUMLA] : bit set 	 * [dumla] : bit unset 	 * 	 *   Unallocated (clean): 	 *     ssssssss ssssssss sss+++++ +++dum-a 	 *     xxxxxxxx xxxxxxxx xxxxxxxx xxx-Uxxx 	 *     ssssssss ssssssss sss+++++ +++dUm-a 	 * 	 *   Unallocated (dirty): 	 *     ssssssss ssssssss sss+++++ +++D-m-a 	 *     xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx 	 *     ssssssss ssssssss sss+++++ +++D-m-a 	 * 	 *   Small: 	 *     pppppppp pppppppp pppnnnnn nnnd---A 	 *     pppppppp pppppppp pppnnnnn nnn----A 	 *     pppppppp pppppppp pppnnnnn nnnd---A 	 * 	 *   Large: 	 *     ssssssss ssssssss sss+++++ +++D--LA 	 *     xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx 	 *     -------- -------- ---+++++ +++D--LA 	 * 	 *   Large (sampled, size<= LARGE_MINCLASS): 	 *     ssssssss ssssssss sssnnnnn nnnD--LA 	 *     xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx 	 *     -------- -------- ---+++++ +++D--LA 	 * 	 *   Large (not sampled, size == LARGE_MINCLASS): 	 *     ssssssss ssssssss sss+++++ +++D--LA 	 *     xxxxxxxx xxxxxxxx xxxxxxxx xxxxxxxx 	 *     -------- -------- ---+++++ +++D--LA 	 */
name|size_t
name|bits
decl_stmt|;
define|#
directive|define
name|CHUNK_MAP_ALLOCATED
value|((size_t)0x01U)
define|#
directive|define
name|CHUNK_MAP_LARGE
value|((size_t)0x02U)
define|#
directive|define
name|CHUNK_MAP_STATE_MASK
value|((size_t)0x3U)
define|#
directive|define
name|CHUNK_MAP_DECOMMITTED
value|((size_t)0x04U)
define|#
directive|define
name|CHUNK_MAP_UNZEROED
value|((size_t)0x08U)
define|#
directive|define
name|CHUNK_MAP_DIRTY
value|((size_t)0x10U)
define|#
directive|define
name|CHUNK_MAP_FLAGS_MASK
value|((size_t)0x1cU)
define|#
directive|define
name|CHUNK_MAP_BININD_SHIFT
value|5
define|#
directive|define
name|BININD_INVALID
value|((size_t)0xffU)
define|#
directive|define
name|CHUNK_MAP_BININD_MASK
value|(BININD_INVALID<< CHUNK_MAP_BININD_SHIFT)
define|#
directive|define
name|CHUNK_MAP_BININD_INVALID
value|CHUNK_MAP_BININD_MASK
define|#
directive|define
name|CHUNK_MAP_RUNIND_SHIFT
value|(CHUNK_MAP_BININD_SHIFT + 8)
define|#
directive|define
name|CHUNK_MAP_SIZE_SHIFT
value|(CHUNK_MAP_RUNIND_SHIFT - LG_PAGE)
define|#
directive|define
name|CHUNK_MAP_SIZE_MASK
define|\
value|(~(CHUNK_MAP_BININD_MASK | CHUNK_MAP_FLAGS_MASK | CHUNK_MAP_STATE_MASK))
block|}
struct|;
end_struct

begin_struct
struct|struct
name|arena_runs_dirty_link_s
block|{
name|qr
argument_list|(
argument|arena_runs_dirty_link_t
argument_list|)
name|rd_link
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/*  * Each arena_chunk_map_misc_t corresponds to one page within the chunk, just  * like arena_chunk_map_bits_t.  Two separate arrays are stored within each  * chunk header in order to improve cache locality.  */
end_comment

begin_struct
struct|struct
name|arena_chunk_map_misc_s
block|{
comment|/* 	 * Linkage for run trees.  There are two disjoint uses: 	 * 	 * 1) arena_t's runs_avail tree. 	 * 2) arena_run_t conceptually uses this linkage for in-use non-full 	 *    runs, rather than directly embedding linkage. 	 */
name|rb_node
argument_list|(
argument|arena_chunk_map_misc_t
argument_list|)
name|rb_link
expr_stmt|;
union|union
block|{
comment|/* Linkage for list of dirty runs. */
name|arena_runs_dirty_link_t
name|rd
decl_stmt|;
comment|/* Profile counters, used for large object runs. */
union|union
block|{
name|void
modifier|*
name|prof_tctx_pun
decl_stmt|;
name|prof_tctx_t
modifier|*
name|prof_tctx
decl_stmt|;
block|}
union|;
comment|/* Small region run metadata. */
name|arena_run_t
name|run
decl_stmt|;
block|}
union|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|rb_tree
argument_list|(
argument|arena_chunk_map_misc_t
argument_list|)
name|arena_run_tree_t
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_ARENA_STRUCTS_A */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_ARENA_STRUCTS_B
end_ifdef

begin_comment
comment|/* Arena chunk header. */
end_comment

begin_struct
struct|struct
name|arena_chunk_s
block|{
comment|/* 	 * A pointer to the arena that owns the chunk is stored within the node. 	 * This field as a whole is used by chunks_rtree to support both 	 * ivsalloc() and core-based debugging. 	 */
name|extent_node_t
name|node
decl_stmt|;
comment|/* 	 * Map of pages within chunk that keeps track of free/large/small.  The 	 * first map_bias entries are omitted, since the chunk header does not 	 * need to be tracked in the map.  This omission saves a header page 	 * for common chunk sizes (e.g. 4 MiB). 	 */
name|arena_chunk_map_bits_t
name|map_bits
index|[
literal|1
index|]
decl_stmt|;
comment|/* Dynamically sized. */
block|}
struct|;
end_struct

begin_comment
comment|/*  * Read-only information associated with each element of arena_t's bins array  * is stored separately, partly to reduce memory usage (only one copy, rather  * than one per arena), but mainly to avoid false cacheline sharing.  *  * Each run has the following layout:  *  *               /--------------------\  *               | pad?               |  *               |--------------------|  *               | redzone            |  *   reg0_offset | region 0           |  *               | redzone            |  *               |--------------------| \  *               | redzone            | |  *               | region 1           |> reg_interval  *               | redzone            | /  *               |--------------------|  *               | ...                |  *               | ...                |  *               | ...                |  *               |--------------------|  *               | redzone            |  *               | region nregs-1     |  *               | redzone            |  *               |--------------------|  *               | alignment pad?     |  *               \--------------------/  *  * reg_interval has at least the same minimum alignment as reg_size; this  * preserves the alignment constraint that sa2u() depends on.  Alignment pad is  * either 0 or redzone_size; it is present only if needed to align reg0_offset.  */
end_comment

begin_struct
struct|struct
name|arena_bin_info_s
block|{
comment|/* Size of regions in a run for this bin's size class. */
name|size_t
name|reg_size
decl_stmt|;
comment|/* Redzone size. */
name|size_t
name|redzone_size
decl_stmt|;
comment|/* Interval between regions (reg_size + (redzone_size<< 1)). */
name|size_t
name|reg_interval
decl_stmt|;
comment|/* Total size of a run for this bin's size class. */
name|size_t
name|run_size
decl_stmt|;
comment|/* Total number of regions in a run for this bin's size class. */
name|uint32_t
name|nregs
decl_stmt|;
comment|/* 	 * Metadata used to manipulate bitmaps for runs associated with this 	 * bin. 	 */
name|bitmap_info_t
name|bitmap_info
decl_stmt|;
comment|/* Offset of first region in a run for this bin's size class. */
name|uint32_t
name|reg0_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|arena_bin_s
block|{
comment|/* 	 * All operations on runcur, runs, and stats require that lock be 	 * locked.  Run allocation/deallocation are protected by the arena lock, 	 * which may be acquired while holding one or more bin locks, but not 	 * vise versa. 	 */
name|malloc_mutex_t
name|lock
decl_stmt|;
comment|/* 	 * Current run being used to service allocations of this bin's size 	 * class. 	 */
name|arena_run_t
modifier|*
name|runcur
decl_stmt|;
comment|/* 	 * Tree of non-full runs.  This tree is used when looking for an 	 * existing run when runcur is no longer usable.  We choose the 	 * non-full run that is lowest in memory; this policy tends to keep 	 * objects packed well, and it can also help reduce the number of 	 * almost-empty chunks. 	 */
name|arena_run_tree_t
name|runs
decl_stmt|;
comment|/* Bin statistics. */
name|malloc_bin_stats_t
name|stats
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|arena_s
block|{
comment|/* This arena's index within the arenas array. */
name|unsigned
name|ind
decl_stmt|;
comment|/* 	 * Number of threads currently assigned to this arena.  This field is 	 * synchronized via atomic operations. 	 */
name|unsigned
name|nthreads
decl_stmt|;
comment|/* 	 * There are three classes of arena operations from a locking 	 * perspective: 	 * 1) Thread assignment (modifies nthreads) is synchronized via atomics. 	 * 2) Bin-related operations are protected by bin locks. 	 * 3) Chunk- and run-related operations are protected by this mutex. 	 */
name|malloc_mutex_t
name|lock
decl_stmt|;
name|arena_stats_t
name|stats
decl_stmt|;
comment|/* 	 * List of tcaches for extant threads associated with this arena. 	 * Stats from these are merged incrementally, and at exit if 	 * opt_stats_print is enabled. 	 */
name|ql_head
argument_list|(
argument|tcache_t
argument_list|)
name|tcache_ql
expr_stmt|;
name|uint64_t
name|prof_accumbytes
decl_stmt|;
comment|/* 	 * PRNG state for cache index randomization of large allocation base 	 * pointers. 	 */
name|uint64_t
name|offset_state
decl_stmt|;
name|dss_prec_t
name|dss_prec
decl_stmt|;
comment|/* 	 * In order to avoid rapid chunk allocation/deallocation when an arena 	 * oscillates right on the cusp of needing a new chunk, cache the most 	 * recently freed chunk.  The spare is left in the arena's chunk trees 	 * until it is deleted. 	 * 	 * There is one spare chunk per arena, rather than one spare total, in 	 * order to avoid interactions between multiple threads that could make 	 * a single spare inadequate. 	 */
name|arena_chunk_t
modifier|*
name|spare
decl_stmt|;
comment|/* Minimum ratio (log base 2) of nactive:ndirty. */
name|ssize_t
name|lg_dirty_mult
decl_stmt|;
comment|/* True if a thread is currently executing arena_purge_to_limit(). */
name|bool
name|purging
decl_stmt|;
comment|/* Number of pages in active runs and huge regions. */
name|size_t
name|nactive
decl_stmt|;
comment|/* 	 * Current count of pages within unused runs that are potentially 	 * dirty, and for which madvise(... MADV_DONTNEED) has not been called. 	 * By tracking this, we can institute a limit on how much dirty unused 	 * memory is mapped for each arena. 	 */
name|size_t
name|ndirty
decl_stmt|;
comment|/* 	 * Unused dirty memory this arena manages.  Dirty memory is conceptually 	 * tracked as an arbitrarily interleaved LRU of dirty runs and cached 	 * chunks, but the list linkage is actually semi-duplicated in order to 	 * avoid extra arena_chunk_map_misc_t space overhead. 	 * 	 *   LRU-----------------------------------------------------------MRU 	 * 	 *        /-- arena ---\ 	 *        |            | 	 *        |            | 	 *        |------------|                             /- chunk -\ 	 *   ...->|chunks_cache|<--------------------------->|  /----\ |<--... 	 *        |------------|                             |  |node| | 	 *        |            |                             |  |    | | 	 *        |            |    /- run -\    /- run -\   |  |    | | 	 *        |            |    |       |    |       |   |  |    | | 	 *        |            |    |       |    |       |   |  |    | | 	 *        |------------|    |-------|    |-------|   |  |----| | 	 *   ...->|runs_dirty  |<-->|rd     |<-->|rd     |<---->|rd  |<----... 	 *        |------------|    |-------|    |-------|   |  |----| | 	 *        |            |    |       |    |       |   |  |    | | 	 *        |            |    |       |    |       |   |  \----/ | 	 *        |            |    \-------/    \-------/   |         | 	 *        |            |                             |         | 	 *        |            |                             |         | 	 *        \------------/                             \---------/ 	 */
name|arena_runs_dirty_link_t
name|runs_dirty
decl_stmt|;
name|extent_node_t
name|chunks_cache
decl_stmt|;
comment|/* 	 * Approximate time in seconds from the creation of a set of unused 	 * dirty pages until an equivalent set of unused dirty pages is purged 	 * and/or reused. 	 */
name|ssize_t
name|decay_time
decl_stmt|;
comment|/* decay_time / SMOOTHSTEP_NSTEPS. */
name|nstime_t
name|decay_interval
decl_stmt|;
comment|/* 	 * Time at which the current decay interval logically started.  We do 	 * not actually advance to a new epoch until sometime after it starts 	 * because of scheduling and computation delays, and it is even possible 	 * to completely skip epochs.  In all cases, during epoch advancement we 	 * merge all relevant activity into the most recently recorded epoch. 	 */
name|nstime_t
name|decay_epoch
decl_stmt|;
comment|/* decay_deadline randomness generator. */
name|uint64_t
name|decay_jitter_state
decl_stmt|;
comment|/* 	 * Deadline for current epoch.  This is the sum of decay_interval and 	 * per epoch jitter which is a uniform random variable in 	 * [0..decay_interval).  Epochs always advance by precise multiples of 	 * decay_interval, but we randomize the deadline to reduce the 	 * likelihood of arenas purging in lockstep. 	 */
name|nstime_t
name|decay_deadline
decl_stmt|;
comment|/* 	 * Number of dirty pages at beginning of current epoch.  During epoch 	 * advancement we use the delta between decay_ndirty and ndirty to 	 * determine how many dirty pages, if any, were generated, and record 	 * the result in decay_backlog. 	 */
name|size_t
name|decay_ndirty
decl_stmt|;
comment|/* 	 * Memoized result of arena_decay_backlog_npages_limit() corresponding 	 * to the current contents of decay_backlog, i.e. the limit on how many 	 * pages are allowed to exist for the decay epochs. 	 */
name|size_t
name|decay_backlog_npages_limit
decl_stmt|;
comment|/* 	 * Trailing log of how many unused dirty pages were generated during 	 * each of the past SMOOTHSTEP_NSTEPS decay epochs, where the last 	 * element is the most recent epoch.  Corresponding epoch times are 	 * relative to decay_epoch. 	 */
name|size_t
name|decay_backlog
index|[
name|SMOOTHSTEP_NSTEPS
index|]
decl_stmt|;
comment|/* Extant huge allocations. */
name|ql_head
argument_list|(
argument|extent_node_t
argument_list|)
name|huge
expr_stmt|;
comment|/* Synchronizes all huge allocation/update/deallocation. */
name|malloc_mutex_t
name|huge_mtx
decl_stmt|;
comment|/* 	 * Trees of chunks that were previously allocated (trees differ only in 	 * node ordering).  These are used when allocating chunks, in an attempt 	 * to re-use address space.  Depending on function, different tree 	 * orderings are needed, which is why there are two trees with the same 	 * contents. 	 */
name|extent_tree_t
name|chunks_szad_cached
decl_stmt|;
name|extent_tree_t
name|chunks_ad_cached
decl_stmt|;
name|extent_tree_t
name|chunks_szad_retained
decl_stmt|;
name|extent_tree_t
name|chunks_ad_retained
decl_stmt|;
name|malloc_mutex_t
name|chunks_mtx
decl_stmt|;
comment|/* Cache of nodes that were allocated via base_alloc(). */
name|ql_head
argument_list|(
argument|extent_node_t
argument_list|)
name|node_cache
expr_stmt|;
name|malloc_mutex_t
name|node_cache_mtx
decl_stmt|;
comment|/* User-configurable chunk hook functions. */
name|chunk_hooks_t
name|chunk_hooks
decl_stmt|;
comment|/* bins is used to store trees of free regions. */
name|arena_bin_t
name|bins
index|[
name|NBINS
index|]
decl_stmt|;
comment|/* 	 * Quantized address-ordered trees of this arena's available runs.  The 	 * trees are used for first-best-fit run allocation. 	 */
name|arena_run_tree_t
name|runs_avail
index|[
literal|1
index|]
decl_stmt|;
comment|/* Dynamically sized. */
block|}
struct|;
end_struct

begin_comment
comment|/* Used in conjunction with tsd for fast arena-related context lookup. */
end_comment

begin_struct
struct|struct
name|arena_tdata_s
block|{
name|ticker_t
name|decay_ticker
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_ARENA_STRUCTS_B */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_STRUCTS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_EXTERNS
end_ifdef

begin_decl_stmt
specifier|static
specifier|const
name|size_t
name|large_pad
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_CACHE_OBLIVIOUS
name|PAGE
else|#
directive|else
literal|0
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|purge_mode_t
name|opt_purge
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|purge_mode_names
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ssize_t
name|opt_lg_dirty_mult
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ssize_t
name|opt_decay_time
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|arena_bin_info_t
name|arena_bin_info
index|[
name|NBINS
index|]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|size_t
name|map_bias
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Number of arena chunk header pages. */
end_comment

begin_decl_stmt
specifier|extern
name|size_t
name|map_misc_offset
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|size_t
name|arena_maxrun
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Max run size for arenas. */
end_comment

begin_decl_stmt
specifier|extern
name|size_t
name|large_maxclass
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Max large size class. */
end_comment

begin_decl_stmt
specifier|extern
name|size_t
name|run_quantize_max
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Max run_quantize_*() input. */
end_comment

begin_decl_stmt
specifier|extern
name|unsigned
name|nlclasses
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Number of large size classes. */
end_comment

begin_decl_stmt
specifier|extern
name|unsigned
name|nhclasses
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Number of huge size classes. */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_JET
end_ifdef

begin_typedef
typedef|typedef
name|size_t
function_decl|(
name|run_quantize_t
function_decl|)
parameter_list|(
name|size_t
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|run_quantize_t
modifier|*
name|run_quantize_floor
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|run_quantize_t
modifier|*
name|run_quantize_ceil
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|arena_chunk_cache_maybe_insert
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|bool
name|cache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_chunk_cache_maybe_remove
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|bool
name|cache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|extent_node_t
modifier|*
name|arena_node_alloc
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_node_dalloc
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|arena_chunk_alloc_huge
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
modifier|*
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_chunk_dalloc_huge
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|void
modifier|*
name|chunk
parameter_list|,
name|size_t
name|usize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_chunk_ralloc_huge_similar
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|void
modifier|*
name|chunk
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|usize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_chunk_ralloc_huge_shrink
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|void
modifier|*
name|chunk
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|usize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_chunk_ralloc_huge_expand
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|void
modifier|*
name|chunk
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|bool
modifier|*
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|arena_lg_dirty_mult_get
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_lg_dirty_mult_set
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|ssize_t
name|lg_dirty_mult
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|arena_decay_time_get
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_decay_time_set
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|ssize_t
name|decay_time
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_maybe_purge
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_purge
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|bool
name|all
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_tcache_fill_small
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|tcache_bin_t
modifier|*
name|tbin
parameter_list|,
name|szind_t
name|binind
parameter_list|,
name|uint64_t
name|prof_accumbytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_alloc_junk_small
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|arena_bin_info_t
modifier|*
name|bin_info
parameter_list|,
name|bool
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_JET
end_ifdef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|arena_redzone_corruption_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|bool
parameter_list|,
name|size_t
parameter_list|,
name|uint8_t
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|arena_redzone_corruption_t
modifier|*
name|arena_redzone_corruption
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|void
function_decl|(
name|arena_dalloc_junk_small_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|arena_bin_info_t
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|arena_dalloc_junk_small_t
modifier|*
name|arena_dalloc_junk_small
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_function_decl
name|void
name|arena_dalloc_junk_small
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|arena_bin_info_t
modifier|*
name|bin_info
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|arena_quarantine_junk_small
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|usize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|arena_malloc_large
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|arena_malloc_hard
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|arena_palloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_prof_promoted
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_dalloc_bin_junked_locked
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|arena_chunk_map_bits_t
modifier|*
name|bitselm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_dalloc_bin
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|arena_chunk_map_bits_t
modifier|*
name|bitselm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_dalloc_small
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_JET
end_ifdef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|arena_dalloc_junk_large_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|arena_dalloc_junk_large_t
modifier|*
name|arena_dalloc_junk_large
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_function_decl
name|void
name|arena_dalloc_junk_large
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|usize
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|void
name|arena_dalloc_large_junked_locked
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_dalloc_large
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_JET
end_ifdef

begin_typedef
typedef|typedef
name|void
function_decl|(
name|arena_ralloc_junk_large_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|arena_ralloc_junk_large_t
modifier|*
name|arena_ralloc_junk_large
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|bool
name|arena_ralloc_no_move
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|extra
parameter_list|,
name|bool
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|arena_ralloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|dss_prec_t
name|arena_dss_prec_get
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_dss_prec_set
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|dss_prec_t
name|dss_prec
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|arena_lg_dirty_mult_default_get
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_lg_dirty_mult_default_set
parameter_list|(
name|ssize_t
name|lg_dirty_mult
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ssize_t
name|arena_decay_time_default_get
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_decay_time_default_set
parameter_list|(
name|ssize_t
name|decay_time
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_basic_stats_merge
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|unsigned
modifier|*
name|nthreads
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|dss
parameter_list|,
name|ssize_t
modifier|*
name|lg_dirty_mult
parameter_list|,
name|ssize_t
modifier|*
name|decay_time
parameter_list|,
name|size_t
modifier|*
name|nactive
parameter_list|,
name|size_t
modifier|*
name|ndirty
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_stats_merge
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|unsigned
modifier|*
name|nthreads
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|dss
parameter_list|,
name|ssize_t
modifier|*
name|lg_dirty_mult
parameter_list|,
name|ssize_t
modifier|*
name|decay_time
parameter_list|,
name|size_t
modifier|*
name|nactive
parameter_list|,
name|size_t
modifier|*
name|ndirty
parameter_list|,
name|arena_stats_t
modifier|*
name|astats
parameter_list|,
name|malloc_bin_stats_t
modifier|*
name|bstats
parameter_list|,
name|malloc_large_stats_t
modifier|*
name|lstats
parameter_list|,
name|malloc_huge_stats_t
modifier|*
name|hstats
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|arena_nthreads_get
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_nthreads_inc
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_nthreads_dec
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_t
modifier|*
name|arena_new
parameter_list|(
name|unsigned
name|ind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_boot
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_prefork
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_postfork_parent
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_postfork_child
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_EXTERNS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_INLINES
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_function_decl
name|arena_chunk_map_bits_t
modifier|*
name|arena_bitselm_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_chunk_map_misc_t
modifier|*
name|arena_miscelm_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_miscelm_to_pageind
parameter_list|(
specifier|const
name|arena_chunk_map_misc_t
modifier|*
name|miscelm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|arena_miscelm_to_rpages
parameter_list|(
name|arena_chunk_map_misc_t
modifier|*
name|miscelm
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_chunk_map_misc_t
modifier|*
name|arena_rd_to_miscelm
parameter_list|(
name|arena_runs_dirty_link_t
modifier|*
name|rd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_chunk_map_misc_t
modifier|*
name|arena_run_to_miscelm
parameter_list|(
name|arena_run_t
modifier|*
name|run
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
modifier|*
name|arena_mapbitsp_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbitsp_read
parameter_list|(
name|size_t
modifier|*
name|mapbitsp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_size_decode
parameter_list|(
name|size_t
name|mapbits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_unallocated_size_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_large_size_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_small_runind_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|szind_t
name|arena_mapbits_binind_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_dirty_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_unzeroed_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_decommitted_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_large_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_allocated_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_mapbitsp_write
parameter_list|(
name|size_t
modifier|*
name|mapbitsp
parameter_list|,
name|size_t
name|mapbits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_mapbits_size_encode
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_mapbits_unallocated_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_mapbits_unallocated_size_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_mapbits_internal_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_mapbits_large_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_mapbits_large_binind_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|szind_t
name|binind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_mapbits_small_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|runind
parameter_list|,
name|szind_t
name|binind
parameter_list|,
name|size_t
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_metadata_allocated_add
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_metadata_allocated_sub
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_metadata_allocated_get
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_prof_accum_impl
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|uint64_t
name|accumbytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_prof_accum_locked
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|uint64_t
name|accumbytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|arena_prof_accum
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|uint64_t
name|accumbytes
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|szind_t
name|arena_ptr_small_binind_get
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|mapbits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|szind_t
name|arena_bin_index
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|arena_bin_t
modifier|*
name|bin
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_run_regind
parameter_list|(
name|arena_run_t
modifier|*
name|run
parameter_list|,
name|arena_bin_info_t
modifier|*
name|bin_info
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|prof_tctx_t
modifier|*
name|arena_prof_tctx_get
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_prof_tctx_set
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|prof_tctx_t
modifier|*
name|tctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_prof_tctx_reset
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|usize
parameter_list|,
specifier|const
name|void
modifier|*
name|old_ptr
parameter_list|,
name|prof_tctx_t
modifier|*
name|old_tctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_decay_ticks
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|unsigned
name|nticks
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_decay_tick
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|arena_malloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_t
modifier|*
name|arena_aalloc
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|arena_salloc
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|bool
name|demote
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_dalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_sdalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_ARENA_C_
argument_list|)
operator|)
end_if

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_ARENA_INLINE_A
end_ifdef

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|arena_chunk_map_bits_t
modifier|*
name|arena_bitselm_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|assert
argument_list|(
name|pageind
operator|>=
name|map_bias
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|pageind
operator|<
name|chunk_npages
argument_list|)
expr_stmt|;
return|return
operator|(
operator|&
name|chunk
operator|->
name|map_bits
index|[
name|pageind
operator|-
name|map_bias
index|]
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|arena_chunk_map_misc_t
modifier|*
name|arena_miscelm_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|assert
argument_list|(
name|pageind
operator|>=
name|map_bias
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|pageind
operator|<
name|chunk_npages
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|arena_chunk_map_misc_t
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|chunk
operator|+
operator|(
name|uintptr_t
operator|)
name|map_misc_offset
operator|)
operator|+
name|pageind
operator|-
name|map_bias
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_miscelm_to_pageind
parameter_list|(
specifier|const
name|arena_chunk_map_misc_t
modifier|*
name|miscelm
parameter_list|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
init|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|miscelm
argument_list|)
decl_stmt|;
name|size_t
name|pageind
init|=
operator|(
operator|(
name|uintptr_t
operator|)
name|miscelm
operator|-
operator|(
operator|(
name|uintptr_t
operator|)
name|chunk
operator|+
name|map_misc_offset
operator|)
operator|)
operator|/
sizeof|sizeof
argument_list|(
name|arena_chunk_map_misc_t
argument_list|)
operator|+
name|map_bias
decl_stmt|;
name|assert
argument_list|(
name|pageind
operator|>=
name|map_bias
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|pageind
operator|<
name|chunk_npages
argument_list|)
expr_stmt|;
return|return
operator|(
name|pageind
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|arena_miscelm_to_rpages
parameter_list|(
name|arena_chunk_map_misc_t
modifier|*
name|miscelm
parameter_list|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
init|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|miscelm
argument_list|)
decl_stmt|;
name|size_t
name|pageind
init|=
name|arena_miscelm_to_pageind
argument_list|(
name|miscelm
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|chunk
operator|+
operator|(
name|pageind
operator|<<
name|LG_PAGE
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|arena_chunk_map_misc_t
modifier|*
name|arena_rd_to_miscelm
parameter_list|(
name|arena_runs_dirty_link_t
modifier|*
name|rd
parameter_list|)
block|{
name|arena_chunk_map_misc_t
modifier|*
name|miscelm
init|=
operator|(
name|arena_chunk_map_misc_t
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|rd
operator|-
name|offsetof
argument_list|(
name|arena_chunk_map_misc_t
argument_list|,
name|rd
argument_list|)
operator|)
decl_stmt|;
name|assert
argument_list|(
name|arena_miscelm_to_pageind
argument_list|(
name|miscelm
argument_list|)
operator|>=
name|map_bias
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|arena_miscelm_to_pageind
argument_list|(
name|miscelm
argument_list|)
operator|<
name|chunk_npages
argument_list|)
expr_stmt|;
return|return
operator|(
name|miscelm
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|arena_chunk_map_misc_t
modifier|*
name|arena_run_to_miscelm
parameter_list|(
name|arena_run_t
modifier|*
name|run
parameter_list|)
block|{
name|arena_chunk_map_misc_t
modifier|*
name|miscelm
init|=
operator|(
name|arena_chunk_map_misc_t
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|run
operator|-
name|offsetof
argument_list|(
name|arena_chunk_map_misc_t
argument_list|,
name|run
argument_list|)
operator|)
decl_stmt|;
name|assert
argument_list|(
name|arena_miscelm_to_pageind
argument_list|(
name|miscelm
argument_list|)
operator|>=
name|map_bias
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|arena_miscelm_to_pageind
argument_list|(
name|miscelm
argument_list|)
operator|<
name|chunk_npages
argument_list|)
expr_stmt|;
return|return
operator|(
name|miscelm
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
modifier|*
name|arena_mapbitsp_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
return|return
operator|(
operator|&
name|arena_bitselm_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|->
name|bits
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbitsp_read
parameter_list|(
name|size_t
modifier|*
name|mapbitsp
parameter_list|)
block|{
return|return
operator|(
operator|*
name|mapbitsp
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
return|return
operator|(
name|arena_mapbitsp_read
argument_list|(
name|arena_mapbitsp_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_size_decode
parameter_list|(
name|size_t
name|mapbits
parameter_list|)
block|{
name|size_t
name|size
decl_stmt|;
if|#
directive|if
name|CHUNK_MAP_SIZE_SHIFT
operator|>
literal|0
name|size
operator|=
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_SIZE_MASK
operator|)
operator|>>
name|CHUNK_MAP_SIZE_SHIFT
expr_stmt|;
elif|#
directive|elif
name|CHUNK_MAP_SIZE_SHIFT
operator|==
literal|0
name|size
operator|=
name|mapbits
operator|&
name|CHUNK_MAP_SIZE_MASK
expr_stmt|;
else|#
directive|else
name|size
operator|=
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_SIZE_MASK
operator|)
operator|<<
operator|-
name|CHUNK_MAP_SIZE_SHIFT
expr_stmt|;
endif|#
directive|endif
return|return
operator|(
name|size
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_unallocated_size_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
operator|(
name|CHUNK_MAP_LARGE
operator||
name|CHUNK_MAP_ALLOCATED
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|arena_mapbits_size_decode
argument_list|(
name|mapbits
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_large_size_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
operator|(
name|CHUNK_MAP_LARGE
operator||
name|CHUNK_MAP_ALLOCATED
operator|)
operator|)
operator|==
operator|(
name|CHUNK_MAP_LARGE
operator||
name|CHUNK_MAP_ALLOCATED
operator|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|arena_mapbits_size_decode
argument_list|(
name|mapbits
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_small_runind_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
operator|(
name|CHUNK_MAP_LARGE
operator||
name|CHUNK_MAP_ALLOCATED
operator|)
operator|)
operator|==
name|CHUNK_MAP_ALLOCATED
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapbits
operator|>>
name|CHUNK_MAP_RUNIND_SHIFT
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|szind_t
name|arena_mapbits_binind_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|szind_t
name|binind
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|binind
operator|=
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_BININD_MASK
operator|)
operator|>>
name|CHUNK_MAP_BININD_SHIFT
expr_stmt|;
name|assert
argument_list|(
name|binind
operator|<
name|NBINS
operator|||
name|binind
operator|==
name|BININD_INVALID
argument_list|)
expr_stmt|;
return|return
operator|(
name|binind
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_dirty_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_DECOMMITTED
operator|)
operator|==
literal|0
operator|||
operator|(
name|mapbits
operator|&
operator|(
name|CHUNK_MAP_DIRTY
operator||
name|CHUNK_MAP_UNZEROED
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_DIRTY
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_unzeroed_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_DECOMMITTED
operator|)
operator|==
literal|0
operator|||
operator|(
name|mapbits
operator|&
operator|(
name|CHUNK_MAP_DIRTY
operator||
name|CHUNK_MAP_UNZEROED
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_UNZEROED
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_decommitted_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_DECOMMITTED
operator|)
operator|==
literal|0
operator|||
operator|(
name|mapbits
operator|&
operator|(
name|CHUNK_MAP_DIRTY
operator||
name|CHUNK_MAP_UNZEROED
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_DECOMMITTED
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_large_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_LARGE
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_allocated_get
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_ALLOCATED
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_mapbitsp_write
parameter_list|(
name|size_t
modifier|*
name|mapbitsp
parameter_list|,
name|size_t
name|mapbits
parameter_list|)
block|{
operator|*
name|mapbitsp
operator|=
name|mapbits
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_mapbits_size_encode
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
name|size_t
name|mapbits
decl_stmt|;
if|#
directive|if
name|CHUNK_MAP_SIZE_SHIFT
operator|>
literal|0
name|mapbits
operator|=
name|size
operator|<<
name|CHUNK_MAP_SIZE_SHIFT
expr_stmt|;
elif|#
directive|elif
name|CHUNK_MAP_SIZE_SHIFT
operator|==
literal|0
name|mapbits
operator|=
name|size
expr_stmt|;
else|#
directive|else
name|mapbits
operator|=
name|size
operator|>>
operator|-
name|CHUNK_MAP_SIZE_SHIFT
expr_stmt|;
endif|#
directive|endif
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
operator|~
name|CHUNK_MAP_SIZE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|mapbits
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_mapbits_unallocated_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|flags
parameter_list|)
block|{
name|size_t
modifier|*
name|mapbitsp
init|=
name|arena_mapbitsp_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|(
name|size
operator|&
name|PAGE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|flags
operator|&
name|CHUNK_MAP_FLAGS_MASK
operator|)
operator|==
name|flags
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|flags
operator|&
name|CHUNK_MAP_DECOMMITTED
operator|)
operator|==
literal|0
operator|||
operator|(
name|flags
operator|&
operator|(
name|CHUNK_MAP_DIRTY
operator||
name|CHUNK_MAP_UNZEROED
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|arena_mapbitsp_write
argument_list|(
name|mapbitsp
argument_list|,
name|arena_mapbits_size_encode
argument_list|(
name|size
argument_list|)
operator||
name|CHUNK_MAP_BININD_INVALID
operator||
name|flags
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_mapbits_unallocated_size_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|size_t
modifier|*
name|mapbitsp
init|=
name|arena_mapbitsp_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|size_t
name|mapbits
init|=
name|arena_mapbitsp_read
argument_list|(
name|mapbitsp
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|(
name|size
operator|&
name|PAGE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
operator|(
name|CHUNK_MAP_LARGE
operator||
name|CHUNK_MAP_ALLOCATED
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|arena_mapbitsp_write
argument_list|(
name|mapbitsp
argument_list|,
name|arena_mapbits_size_encode
argument_list|(
name|size
argument_list|)
operator||
operator|(
name|mapbits
operator|&
operator|~
name|CHUNK_MAP_SIZE_MASK
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_mapbits_internal_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|flags
parameter_list|)
block|{
name|size_t
modifier|*
name|mapbitsp
init|=
name|arena_mapbitsp_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|(
name|flags
operator|&
name|CHUNK_MAP_UNZEROED
operator|)
operator|==
name|flags
argument_list|)
expr_stmt|;
name|arena_mapbitsp_write
argument_list|(
name|mapbitsp
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_mapbits_large_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|flags
parameter_list|)
block|{
name|size_t
modifier|*
name|mapbitsp
init|=
name|arena_mapbitsp_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|(
name|size
operator|&
name|PAGE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|flags
operator|&
name|CHUNK_MAP_FLAGS_MASK
operator|)
operator|==
name|flags
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|flags
operator|&
name|CHUNK_MAP_DECOMMITTED
operator|)
operator|==
literal|0
operator|||
operator|(
name|flags
operator|&
operator|(
name|CHUNK_MAP_DIRTY
operator||
name|CHUNK_MAP_UNZEROED
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|arena_mapbitsp_write
argument_list|(
name|mapbitsp
argument_list|,
name|arena_mapbits_size_encode
argument_list|(
name|size
argument_list|)
operator||
name|CHUNK_MAP_BININD_INVALID
operator||
name|flags
operator||
name|CHUNK_MAP_LARGE
operator||
name|CHUNK_MAP_ALLOCATED
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_mapbits_large_binind_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|szind_t
name|binind
parameter_list|)
block|{
name|size_t
modifier|*
name|mapbitsp
init|=
name|arena_mapbitsp_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|size_t
name|mapbits
init|=
name|arena_mapbitsp_read
argument_list|(
name|mapbitsp
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|binind
operator|<=
name|BININD_INVALID
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|arena_mapbits_large_size_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|==
name|LARGE_MINCLASS
operator|+
name|large_pad
argument_list|)
expr_stmt|;
name|arena_mapbitsp_write
argument_list|(
name|mapbitsp
argument_list|,
operator|(
name|mapbits
operator|&
operator|~
name|CHUNK_MAP_BININD_MASK
operator|)
operator||
operator|(
name|binind
operator|<<
name|CHUNK_MAP_BININD_SHIFT
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_mapbits_small_set
parameter_list|(
name|arena_chunk_t
modifier|*
name|chunk
parameter_list|,
name|size_t
name|pageind
parameter_list|,
name|size_t
name|runind
parameter_list|,
name|szind_t
name|binind
parameter_list|,
name|size_t
name|flags
parameter_list|)
block|{
name|size_t
modifier|*
name|mapbitsp
init|=
name|arena_mapbitsp_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|binind
operator|<
name|BININD_INVALID
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|pageind
operator|-
name|runind
operator|>=
name|map_bias
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|flags
operator|&
name|CHUNK_MAP_UNZEROED
operator|)
operator|==
name|flags
argument_list|)
expr_stmt|;
name|arena_mapbitsp_write
argument_list|(
name|mapbitsp
argument_list|,
operator|(
name|runind
operator|<<
name|CHUNK_MAP_RUNIND_SHIFT
operator|)
operator||
operator|(
name|binind
operator|<<
name|CHUNK_MAP_BININD_SHIFT
operator|)
operator||
name|flags
operator||
name|CHUNK_MAP_ALLOCATED
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|arena_metadata_allocated_add
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|atomic_add_z
argument_list|(
operator|&
name|arena
operator|->
name|stats
operator|.
name|metadata_allocated
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|arena_metadata_allocated_sub
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|atomic_sub_z
argument_list|(
operator|&
name|arena
operator|->
name|stats
operator|.
name|metadata_allocated
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|size_t
name|arena_metadata_allocated_get
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
return|return
operator|(
name|atomic_read_z
argument_list|(
operator|&
name|arena
operator|->
name|stats
operator|.
name|metadata_allocated
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|bool
name|arena_prof_accum_impl
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|uint64_t
name|accumbytes
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|prof_interval
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|arena
operator|->
name|prof_accumbytes
operator|+=
name|accumbytes
expr_stmt|;
if|if
condition|(
name|arena
operator|->
name|prof_accumbytes
operator|>=
name|prof_interval
condition|)
block|{
name|arena
operator|->
name|prof_accumbytes
operator|-=
name|prof_interval
expr_stmt|;
return|return
operator|(
name|true
operator|)
return|;
block|}
return|return
operator|(
name|false
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|bool
name|arena_prof_accum_locked
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|uint64_t
name|accumbytes
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|prof_interval
operator|==
literal|0
argument_list|)
condition|)
return|return
operator|(
name|false
operator|)
return|;
return|return
operator|(
name|arena_prof_accum_impl
argument_list|(
name|arena
argument_list|,
name|accumbytes
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|bool
name|arena_prof_accum
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|uint64_t
name|accumbytes
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|prof_interval
operator|==
literal|0
argument_list|)
condition|)
return|return
operator|(
name|false
operator|)
return|;
block|{
name|bool
name|ret
decl_stmt|;
name|malloc_mutex_lock
argument_list|(
operator|&
name|arena
operator|->
name|lock
argument_list|)
expr_stmt|;
name|ret
operator|=
name|arena_prof_accum_impl
argument_list|(
name|arena
argument_list|,
name|accumbytes
argument_list|)
expr_stmt|;
name|malloc_mutex_unlock
argument_list|(
operator|&
name|arena
operator|->
name|lock
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|szind_t
name|arena_ptr_small_binind_get
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|mapbits
parameter_list|)
block|{
name|szind_t
name|binind
decl_stmt|;
name|binind
operator|=
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_BININD_MASK
operator|)
operator|>>
name|CHUNK_MAP_BININD_SHIFT
expr_stmt|;
if|if
condition|(
name|config_debug
condition|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
decl_stmt|;
name|arena_t
modifier|*
name|arena
decl_stmt|;
name|size_t
name|pageind
decl_stmt|;
name|size_t
name|actual_mapbits
decl_stmt|;
name|size_t
name|rpages_ind
decl_stmt|;
name|arena_run_t
modifier|*
name|run
decl_stmt|;
name|arena_bin_t
modifier|*
name|bin
decl_stmt|;
name|szind_t
name|run_binind
decl_stmt|,
name|actual_binind
decl_stmt|;
name|arena_bin_info_t
modifier|*
name|bin_info
decl_stmt|;
name|arena_chunk_map_misc_t
modifier|*
name|miscelm
decl_stmt|;
name|void
modifier|*
name|rpages
decl_stmt|;
name|assert
argument_list|(
name|binind
operator|!=
name|BININD_INVALID
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|binind
operator|<
name|NBINS
argument_list|)
expr_stmt|;
name|chunk
operator|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
name|arena
operator|=
name|extent_node_arena_get
argument_list|(
operator|&
name|chunk
operator|->
name|node
argument_list|)
expr_stmt|;
name|pageind
operator|=
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
expr_stmt|;
name|actual_mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|mapbits
operator|==
name|actual_mapbits
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|arena_mapbits_large_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|arena_mapbits_allocated_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|rpages_ind
operator|=
name|pageind
operator|-
name|arena_mapbits_small_runind_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|miscelm
operator|=
name|arena_miscelm_get
argument_list|(
name|chunk
argument_list|,
name|rpages_ind
argument_list|)
expr_stmt|;
name|run
operator|=
operator|&
name|miscelm
operator|->
name|run
expr_stmt|;
name|run_binind
operator|=
name|run
operator|->
name|binind
expr_stmt|;
name|bin
operator|=
operator|&
name|arena
operator|->
name|bins
index|[
name|run_binind
index|]
expr_stmt|;
name|actual_binind
operator|=
call|(
name|szind_t
call|)
argument_list|(
name|bin
operator|-
name|arena
operator|->
name|bins
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|run_binind
operator|==
name|actual_binind
argument_list|)
expr_stmt|;
name|bin_info
operator|=
operator|&
name|arena_bin_info
index|[
name|actual_binind
index|]
expr_stmt|;
name|rpages
operator|=
name|arena_miscelm_to_rpages
argument_list|(
name|miscelm
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
operator|(
name|uintptr_t
operator|)
name|rpages
operator|+
operator|(
name|uintptr_t
operator|)
name|bin_info
operator|->
name|reg0_offset
operator|)
operator|)
operator|%
name|bin_info
operator|->
name|reg_interval
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|binind
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_ARENA_INLINE_A */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_ARENA_INLINE_B
end_ifdef

begin_function
name|JEMALLOC_INLINE
name|szind_t
name|arena_bin_index
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|arena_bin_t
modifier|*
name|bin
parameter_list|)
block|{
name|szind_t
name|binind
init|=
call|(
name|szind_t
call|)
argument_list|(
name|bin
operator|-
name|arena
operator|->
name|bins
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|binind
operator|<
name|NBINS
argument_list|)
expr_stmt|;
return|return
operator|(
name|binind
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|size_t
name|arena_run_regind
parameter_list|(
name|arena_run_t
modifier|*
name|run
parameter_list|,
name|arena_bin_info_t
modifier|*
name|bin_info
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|size_t
name|diff
decl_stmt|,
name|interval
decl_stmt|,
name|shift
decl_stmt|,
name|regind
decl_stmt|;
name|arena_chunk_map_misc_t
modifier|*
name|miscelm
init|=
name|arena_run_to_miscelm
argument_list|(
name|run
argument_list|)
decl_stmt|;
name|void
modifier|*
name|rpages
init|=
name|arena_miscelm_to_rpages
argument_list|(
name|miscelm
argument_list|)
decl_stmt|;
comment|/* 	 * Freeing a pointer lower than region zero can cause assertion 	 * failure. 	 */
name|assert
argument_list|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|>=
operator|(
name|uintptr_t
operator|)
name|rpages
operator|+
operator|(
name|uintptr_t
operator|)
name|bin_info
operator|->
name|reg0_offset
argument_list|)
expr_stmt|;
comment|/* 	 * Avoid doing division with a variable divisor if possible.  Using 	 * actual division here can reduce allocator throughput by over 20%! 	 */
name|diff
operator|=
call|(
name|size_t
call|)
argument_list|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|rpages
operator|-
name|bin_info
operator|->
name|reg0_offset
argument_list|)
expr_stmt|;
comment|/* Rescale (factor powers of 2 out of the numerator and denominator). */
name|interval
operator|=
name|bin_info
operator|->
name|reg_interval
expr_stmt|;
name|shift
operator|=
name|ffs_zu
argument_list|(
name|interval
argument_list|)
operator|-
literal|1
expr_stmt|;
name|diff
operator|>>=
name|shift
expr_stmt|;
name|interval
operator|>>=
name|shift
expr_stmt|;
if|if
condition|(
name|interval
operator|==
literal|1
condition|)
block|{
comment|/* The divisor was a power of 2. */
name|regind
operator|=
name|diff
expr_stmt|;
block|}
else|else
block|{
comment|/* 		 * To divide by a number D that is not a power of two we 		 * multiply by (2^21 / D) and then right shift by 21 positions. 		 * 		 *   X / D 		 * 		 * becomes 		 * 		 *   (X * interval_invs[D - 3])>> SIZE_INV_SHIFT 		 * 		 * We can omit the first three elements, because we never 		 * divide by 0, and 1 and 2 are both powers of two, which are 		 * handled above. 		 */
define|#
directive|define
name|SIZE_INV_SHIFT
value|((sizeof(size_t)<< 3) - LG_RUN_MAXREGS)
define|#
directive|define
name|SIZE_INV
parameter_list|(
name|s
parameter_list|)
value|(((ZU(1)<< SIZE_INV_SHIFT) / (s)) + 1)
specifier|static
specifier|const
name|size_t
name|interval_invs
index|[]
init|=
block|{
name|SIZE_INV
argument_list|(
literal|3
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|4
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|5
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|6
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|7
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|8
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|9
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|10
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|11
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|12
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|13
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|14
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|15
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|16
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|17
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|18
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|19
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|20
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|21
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|22
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|23
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|24
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|25
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|26
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|27
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|28
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|29
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|30
argument_list|)
block|,
name|SIZE_INV
argument_list|(
literal|31
argument_list|)
block|}
decl_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|interval
operator|<=
operator|(
operator|(
sizeof|sizeof
argument_list|(
name|interval_invs
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|size_t
argument_list|)
operator|)
operator|+
literal|2
operator|)
argument_list|)
condition|)
block|{
name|regind
operator|=
operator|(
name|diff
operator|*
name|interval_invs
index|[
name|interval
operator|-
literal|3
index|]
operator|)
operator|>>
name|SIZE_INV_SHIFT
expr_stmt|;
block|}
else|else
name|regind
operator|=
name|diff
operator|/
name|interval
expr_stmt|;
undef|#
directive|undef
name|SIZE_INV
undef|#
directive|undef
name|SIZE_INV_SHIFT
block|}
name|assert
argument_list|(
name|diff
operator|==
name|regind
operator|*
name|interval
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|regind
operator|<
name|bin_info
operator|->
name|nregs
argument_list|)
expr_stmt|;
return|return
operator|(
name|regind
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|prof_tctx_t
modifier|*
name|arena_prof_tctx_get
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|prof_tctx_t
modifier|*
name|ret
decl_stmt|;
name|arena_chunk_t
modifier|*
name|chunk
decl_stmt|;
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|chunk
operator|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|chunk
operator|!=
name|ptr
argument_list|)
condition|)
block|{
name|size_t
name|pageind
init|=
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
decl_stmt|;
name|size_t
name|mapbits
init|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_ALLOCATED
operator|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_LARGE
operator|)
operator|==
literal|0
argument_list|)
condition|)
name|ret
operator|=
operator|(
name|prof_tctx_t
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
literal|1U
expr_stmt|;
else|else
block|{
name|arena_chunk_map_misc_t
modifier|*
name|elm
init|=
name|arena_miscelm_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|ret
operator|=
name|atomic_read_p
argument_list|(
operator|&
name|elm
operator|->
name|prof_tctx_pun
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|ret
operator|=
name|huge_prof_tctx_get
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|arena_prof_tctx_set
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|prof_tctx_t
modifier|*
name|tctx
parameter_list|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
decl_stmt|;
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|chunk
operator|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|chunk
operator|!=
name|ptr
argument_list|)
condition|)
block|{
name|size_t
name|pageind
init|=
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
decl_stmt|;
name|assert
argument_list|(
name|arena_mapbits_allocated_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|usize
operator|>
name|SMALL_MAXCLASS
operator|||
operator|(
name|uintptr_t
operator|)
name|tctx
operator|>
operator|(
name|uintptr_t
operator|)
literal|1U
argument_list|)
condition|)
block|{
name|arena_chunk_map_misc_t
modifier|*
name|elm
decl_stmt|;
name|assert
argument_list|(
name|arena_mapbits_large_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|elm
operator|=
name|arena_miscelm_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|atomic_write_p
argument_list|(
operator|&
name|elm
operator|->
name|prof_tctx_pun
argument_list|,
name|tctx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* 			 * tctx must always be initialized for large runs. 			 * Assert that the surrounding conditional logic is 			 * equivalent to checking whether ptr refers to a large 			 * run. 			 */
name|assert
argument_list|(
name|arena_mapbits_large_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|huge_prof_tctx_set
argument_list|(
name|ptr
argument_list|,
name|tctx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|arena_prof_tctx_reset
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|usize
parameter_list|,
specifier|const
name|void
modifier|*
name|old_ptr
parameter_list|,
name|prof_tctx_t
modifier|*
name|old_tctx
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|usize
operator|>
name|SMALL_MAXCLASS
operator|||
operator|(
name|ptr
operator|==
name|old_ptr
operator|&&
operator|(
name|uintptr_t
operator|)
name|old_tctx
operator|>
operator|(
name|uintptr_t
operator|)
literal|1U
operator|)
argument_list|)
condition|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
init|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|chunk
operator|!=
name|ptr
argument_list|)
condition|)
block|{
name|size_t
name|pageind
decl_stmt|;
name|arena_chunk_map_misc_t
modifier|*
name|elm
decl_stmt|;
name|pageind
operator|=
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
expr_stmt|;
name|assert
argument_list|(
name|arena_mapbits_allocated_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|arena_mapbits_large_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|elm
operator|=
name|arena_miscelm_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|atomic_write_p
argument_list|(
operator|&
name|elm
operator|->
name|prof_tctx_pun
argument_list|,
operator|(
name|prof_tctx_t
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
literal|1U
argument_list|)
expr_stmt|;
block|}
else|else
name|huge_prof_tctx_reset
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_decay_ticks
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|unsigned
name|nticks
parameter_list|)
block|{
name|ticker_t
modifier|*
name|decay_ticker
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tsd
operator|==
name|NULL
argument_list|)
condition|)
return|return;
name|decay_ticker
operator|=
name|decay_ticker_get
argument_list|(
name|tsd
argument_list|,
name|arena
operator|->
name|ind
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|decay_ticker
operator|==
name|NULL
argument_list|)
condition|)
return|return;
if|if
condition|(
name|unlikely
argument_list|(
name|ticker_ticks
argument_list|(
name|decay_ticker
argument_list|,
name|nticks
argument_list|)
argument_list|)
condition|)
name|arena_purge
argument_list|(
name|arena
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_decay_tick
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|arena_decay_ticks
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|arena_malloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|assert
argument_list|(
name|size
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|tcache
operator|!=
name|NULL
argument_list|)
condition|)
block|{
if|if
condition|(
name|likely
argument_list|(
name|size
operator|<=
name|SMALL_MAXCLASS
argument_list|)
condition|)
block|{
return|return
operator|(
name|tcache_alloc_small
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|,
name|tcache
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|slow_path
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|likely
argument_list|(
name|size
operator|<=
name|tcache_maxclass
argument_list|)
condition|)
block|{
return|return
operator|(
name|tcache_alloc_large
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|,
name|tcache
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|slow_path
argument_list|)
operator|)
return|;
block|}
comment|/* (size> tcache_maxclass) case falls through. */
name|assert
argument_list|(
name|size
operator|>
name|tcache_maxclass
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|arena_malloc_hard
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|arena_t
modifier|*
name|arena_aalloc
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
decl_stmt|;
name|chunk
operator|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|chunk
operator|!=
name|ptr
argument_list|)
condition|)
return|return
operator|(
name|extent_node_arena_get
argument_list|(
operator|&
name|chunk
operator|->
name|node
argument_list|)
operator|)
return|;
else|else
return|return
operator|(
name|huge_aalloc
argument_list|(
name|ptr
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/* Return the size of the allocation pointed to by ptr. */
end_comment

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_salloc
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|bool
name|demote
parameter_list|)
block|{
name|size_t
name|ret
decl_stmt|;
name|arena_chunk_t
modifier|*
name|chunk
decl_stmt|;
name|size_t
name|pageind
decl_stmt|;
name|szind_t
name|binind
decl_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|chunk
operator|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|chunk
operator|!=
name|ptr
argument_list|)
condition|)
block|{
name|pageind
operator|=
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
expr_stmt|;
name|assert
argument_list|(
name|arena_mapbits_allocated_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|binind
operator|=
name|arena_mapbits_binind_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|binind
operator|==
name|BININD_INVALID
operator|||
operator|(
name|config_prof
operator|&&
operator|!
name|demote
operator|&&
name|arena_mapbits_large_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
operator|)
argument_list|)
condition|)
block|{
comment|/* 			 * Large allocation.  In the common case (demote), and 			 * as this is an inline function, most callers will only 			 * end up looking at binind to determine that ptr is a 			 * small allocation. 			 */
name|assert
argument_list|(
name|config_cache_oblivious
operator|||
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|&
name|PAGE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|=
name|arena_mapbits_large_size_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|-
name|large_pad
expr_stmt|;
name|assert
argument_list|(
name|ret
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|pageind
operator|+
operator|(
operator|(
name|ret
operator|+
name|large_pad
operator|)
operator|>>
name|LG_PAGE
operator|)
operator|<=
name|chunk_npages
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|arena_mapbits_dirty_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|==
name|arena_mapbits_dirty_get
argument_list|(
name|chunk
argument_list|,
name|pageind
operator|+
operator|(
operator|(
name|ret
operator|+
name|large_pad
operator|)
operator|>>
name|LG_PAGE
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/* 			 * Small allocation (possibly promoted to a large 			 * object). 			 */
name|assert
argument_list|(
name|arena_mapbits_large_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
operator|||
name|arena_ptr_small_binind_get
argument_list|(
name|ptr
argument_list|,
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
argument_list|)
operator|==
name|binind
argument_list|)
expr_stmt|;
name|ret
operator|=
name|index2size
argument_list|(
name|binind
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|ret
operator|=
name|huge_salloc
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_dalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
decl_stmt|;
name|size_t
name|pageind
decl_stmt|,
name|mapbits
decl_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|chunk
operator|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|chunk
operator|!=
name|ptr
argument_list|)
condition|)
block|{
name|pageind
operator|=
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
expr_stmt|;
name|mapbits
operator|=
name|arena_mapbits_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|arena_mapbits_allocated_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
operator|(
name|mapbits
operator|&
name|CHUNK_MAP_LARGE
operator|)
operator|==
literal|0
argument_list|)
condition|)
block|{
comment|/* Small allocation. */
if|if
condition|(
name|likely
argument_list|(
name|tcache
operator|!=
name|NULL
argument_list|)
condition|)
block|{
name|szind_t
name|binind
init|=
name|arena_ptr_small_binind_get
argument_list|(
name|ptr
argument_list|,
name|mapbits
argument_list|)
decl_stmt|;
name|tcache_dalloc_small
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|,
name|ptr
argument_list|,
name|binind
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arena_dalloc_small
argument_list|(
name|tsd
argument_list|,
name|extent_node_arena_get
argument_list|(
operator|&
name|chunk
operator|->
name|node
argument_list|)
argument_list|,
name|chunk
argument_list|,
name|ptr
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|size_t
name|size
init|=
name|arena_mapbits_large_size_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|config_cache_oblivious
operator|||
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|&
name|PAGE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|tcache
operator|!=
name|NULL
argument_list|)
operator|&&
name|size
operator|-
name|large_pad
operator|<=
name|tcache_maxclass
condition|)
block|{
name|tcache_dalloc_large
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|,
name|ptr
argument_list|,
name|size
operator|-
name|large_pad
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arena_dalloc_large
argument_list|(
name|tsd
argument_list|,
name|extent_node_arena_get
argument_list|(
operator|&
name|chunk
operator|->
name|node
argument_list|)
argument_list|,
name|chunk
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
name|huge_dalloc
argument_list|(
name|tsd
argument_list|,
name|ptr
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_sdalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
decl_stmt|;
name|chunk
operator|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|chunk
operator|!=
name|ptr
argument_list|)
condition|)
block|{
if|if
condition|(
name|config_prof
operator|&&
name|opt_prof
condition|)
block|{
name|size_t
name|pageind
init|=
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
decl_stmt|;
name|assert
argument_list|(
name|arena_mapbits_allocated_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|arena_mapbits_large_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|/* 				 * Make sure to use promoted size, not request 				 * size. 				 */
name|size
operator|=
name|arena_mapbits_large_size_get
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|)
operator|-
name|large_pad
expr_stmt|;
block|}
block|}
name|assert
argument_list|(
name|s2u
argument_list|(
name|size
argument_list|)
operator|==
name|s2u
argument_list|(
name|arena_salloc
argument_list|(
name|ptr
argument_list|,
name|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|size
operator|<=
name|SMALL_MAXCLASS
argument_list|)
condition|)
block|{
comment|/* Small allocation. */
if|if
condition|(
name|likely
argument_list|(
name|tcache
operator|!=
name|NULL
argument_list|)
condition|)
block|{
name|szind_t
name|binind
init|=
name|size2index
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|tcache_dalloc_small
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|,
name|ptr
argument_list|,
name|binind
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|size_t
name|pageind
init|=
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
decl_stmt|;
name|arena_dalloc_small
argument_list|(
name|tsd
argument_list|,
name|extent_node_arena_get
argument_list|(
operator|&
name|chunk
operator|->
name|node
argument_list|)
argument_list|,
name|chunk
argument_list|,
name|ptr
argument_list|,
name|pageind
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|assert
argument_list|(
name|config_cache_oblivious
operator|||
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|&
name|PAGE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|tcache
operator|!=
name|NULL
argument_list|)
operator|&&
name|size
operator|<=
name|tcache_maxclass
condition|)
block|{
name|tcache_dalloc_large
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|,
name|ptr
argument_list|,
name|size
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arena_dalloc_large
argument_list|(
name|tsd
argument_list|,
name|extent_node_arena_get
argument_list|(
operator|&
name|chunk
operator|->
name|node
argument_list|)
argument_list|,
name|chunk
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
name|huge_dalloc
argument_list|(
name|tsd
argument_list|,
name|ptr
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_ARENA_INLINE_B */
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_INLINES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

end_unit

