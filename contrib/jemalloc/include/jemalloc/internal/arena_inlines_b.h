begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_ARENA_INLINES_B_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_ARENA_INLINES_B_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/jemalloc_internal_types.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/mutex.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/rtree.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/size_classes.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/sz.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ticker.h"
end_include

begin_function
specifier|static
specifier|inline
name|szind_t
name|arena_bin_index
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|,
name|arena_bin_t
modifier|*
name|bin
parameter_list|)
block|{
name|szind_t
name|binind
init|=
call|(
name|szind_t
call|)
argument_list|(
name|bin
operator|-
name|arena
operator|->
name|bins
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|binind
operator|<
name|NBINS
argument_list|)
expr_stmt|;
return|return
name|binind
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|prof_tctx_t
modifier|*
name|arena_prof_tctx_get
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|alloc_ctx_t
modifier|*
name|alloc_ctx
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
comment|/* Static check. */
if|if
condition|(
name|alloc_ctx
operator|==
name|NULL
condition|)
block|{
specifier|const
name|extent_t
modifier|*
name|extent
init|=
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
operator|!
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
condition|)
block|{
return|return
name|large_prof_tctx_get
argument_list|(
name|tsdn
argument_list|,
name|extent
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|unlikely
argument_list|(
operator|!
name|alloc_ctx
operator|->
name|slab
argument_list|)
condition|)
block|{
return|return
name|large_prof_tctx_get
argument_list|(
name|tsdn
argument_list|,
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
argument_list|)
return|;
block|}
block|}
return|return
operator|(
name|prof_tctx_t
operator|*
operator|)
operator|(
name|uintptr_t
operator|)
literal|1U
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_prof_tctx_set
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|alloc_ctx_t
modifier|*
name|alloc_ctx
parameter_list|,
name|prof_tctx_t
modifier|*
name|tctx
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
comment|/* Static check. */
if|if
condition|(
name|alloc_ctx
operator|==
name|NULL
condition|)
block|{
name|extent_t
modifier|*
name|extent
init|=
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
operator|!
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
condition|)
block|{
name|large_prof_tctx_set
argument_list|(
name|tsdn
argument_list|,
name|extent
argument_list|,
name|tctx
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|unlikely
argument_list|(
operator|!
name|alloc_ctx
operator|->
name|slab
argument_list|)
condition|)
block|{
name|large_prof_tctx_set
argument_list|(
name|tsdn
argument_list|,
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
argument_list|,
name|tctx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|arena_prof_tctx_reset
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|prof_tctx_t
modifier|*
name|tctx
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|extent_t
modifier|*
name|extent
init|=
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|!
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|large_prof_tctx_reset
argument_list|(
name|tsdn
argument_list|,
name|extent
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_decay_ticks
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|unsigned
name|nticks
parameter_list|)
block|{
name|tsd_t
modifier|*
name|tsd
decl_stmt|;
name|ticker_t
modifier|*
name|decay_ticker
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tsdn_null
argument_list|(
name|tsdn
argument_list|)
argument_list|)
condition|)
block|{
return|return;
block|}
name|tsd
operator|=
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
expr_stmt|;
name|decay_ticker
operator|=
name|decay_ticker_get
argument_list|(
name|tsd
argument_list|,
name|arena_ind_get
argument_list|(
name|arena
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|decay_ticker
operator|==
name|NULL
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|unlikely
argument_list|(
name|ticker_ticks
argument_list|(
name|decay_ticker
argument_list|,
name|nticks
argument_list|)
argument_list|)
condition|)
block|{
name|arena_decay
argument_list|(
name|tsdn
argument_list|,
name|arena
argument_list|,
name|false
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_decay_tick
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|malloc_mutex_assert_not_owner
argument_list|(
name|tsdn
argument_list|,
operator|&
name|arena
operator|->
name|decay_dirty
operator|.
name|mtx
argument_list|)
expr_stmt|;
name|malloc_mutex_assert_not_owner
argument_list|(
name|tsdn
argument_list|,
operator|&
name|arena
operator|->
name|decay_muzzy
operator|.
name|mtx
argument_list|)
expr_stmt|;
name|arena_decay_ticks
argument_list|(
name|tsdn
argument_list|,
name|arena
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|arena_malloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|tsdn_null
argument_list|(
name|tsdn
argument_list|)
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|size
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|tcache
operator|!=
name|NULL
argument_list|)
condition|)
block|{
if|if
condition|(
name|likely
argument_list|(
name|size
operator|<=
name|SMALL_MAXCLASS
argument_list|)
condition|)
block|{
return|return
name|tcache_alloc_small
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|arena
argument_list|,
name|tcache
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|slow_path
argument_list|)
return|;
block|}
if|if
condition|(
name|likely
argument_list|(
name|size
operator|<=
name|tcache_maxclass
argument_list|)
condition|)
block|{
return|return
name|tcache_alloc_large
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|arena
argument_list|,
name|tcache
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|slow_path
argument_list|)
return|;
block|}
comment|/* (size> tcache_maxclass) case falls through. */
name|assert
argument_list|(
name|size
operator|>
name|tcache_maxclass
argument_list|)
expr_stmt|;
block|}
return|return
name|arena_malloc_hard
argument_list|(
name|tsdn
argument_list|,
name|arena
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|arena_t
modifier|*
name|arena_aalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|extent_arena_get
argument_list|(
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_salloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|rtree_ctx_t
name|rtree_ctx_fallback
decl_stmt|;
name|rtree_ctx_t
modifier|*
name|rtree_ctx
init|=
name|tsdn_rtree_ctx
argument_list|(
name|tsdn
argument_list|,
operator|&
name|rtree_ctx_fallback
argument_list|)
decl_stmt|;
name|szind_t
name|szind
init|=
name|rtree_szind_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|szind
operator|!=
name|NSIZES
argument_list|)
expr_stmt|;
return|return
name|sz_index2size
argument_list|(
name|szind
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|arena_vsalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
comment|/* 	 * Return 0 if ptr is not within an extent managed by jemalloc.  This 	 * function has two extra costs relative to isalloc(): 	 * - The rtree calls cannot claim to be dependent lookups, which induces 	 *   rtree lookup load dependencies. 	 * - The lookup may fail, so there is an extra branch to check for 	 *   failure. 	 */
name|rtree_ctx_t
name|rtree_ctx_fallback
decl_stmt|;
name|rtree_ctx_t
modifier|*
name|rtree_ctx
init|=
name|tsdn_rtree_ctx
argument_list|(
name|tsdn
argument_list|,
operator|&
name|rtree_ctx_fallback
argument_list|)
decl_stmt|;
name|extent_t
modifier|*
name|extent
decl_stmt|;
name|szind_t
name|szind
decl_stmt|;
if|if
condition|(
name|rtree_extent_szind_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|false
argument_list|,
operator|&
name|extent
argument_list|,
operator|&
name|szind
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|extent
operator|==
name|NULL
condition|)
block|{
return|return
literal|0
return|;
block|}
name|assert
argument_list|(
name|extent_state_get
argument_list|(
name|extent
argument_list|)
operator|==
name|extent_state_active
argument_list|)
expr_stmt|;
comment|/* Only slab members should be looked up via interior pointers. */
name|assert
argument_list|(
name|extent_addr_get
argument_list|(
name|extent
argument_list|)
operator|==
name|ptr
operator|||
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|szind
operator|!=
name|NSIZES
argument_list|)
expr_stmt|;
return|return
name|sz_index2size
argument_list|(
name|szind
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|arena_dalloc_no_tcache
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|rtree_ctx_t
name|rtree_ctx_fallback
decl_stmt|;
name|rtree_ctx_t
modifier|*
name|rtree_ctx
init|=
name|tsdn_rtree_ctx
argument_list|(
name|tsdn
argument_list|,
operator|&
name|rtree_ctx_fallback
argument_list|)
decl_stmt|;
name|szind_t
name|szind
decl_stmt|;
name|bool
name|slab
decl_stmt|;
name|rtree_szind_slab_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|,
operator|&
name|szind
argument_list|,
operator|&
name|slab
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_debug
condition|)
block|{
name|extent_t
modifier|*
name|extent
init|=
name|rtree_extent_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|szind
operator|==
name|extent_szind_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|szind
operator|<
name|NSIZES
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|slab
operator|==
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|likely
argument_list|(
name|slab
argument_list|)
condition|)
block|{
comment|/* Small allocation. */
name|arena_dalloc_small
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extent_t
modifier|*
name|extent
init|=
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
name|large_dalloc
argument_list|(
name|tsdn
argument_list|,
name|extent
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_dalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|alloc_ctx_t
modifier|*
name|alloc_ctx
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|tsdn_null
argument_list|(
name|tsdn
argument_list|)
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tcache
operator|==
name|NULL
argument_list|)
condition|)
block|{
name|arena_dalloc_no_tcache
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
return|return;
block|}
name|szind_t
name|szind
decl_stmt|;
name|bool
name|slab
decl_stmt|;
name|rtree_ctx_t
modifier|*
name|rtree_ctx
decl_stmt|;
if|if
condition|(
name|alloc_ctx
operator|!=
name|NULL
condition|)
block|{
name|szind
operator|=
name|alloc_ctx
operator|->
name|szind
expr_stmt|;
name|slab
operator|=
name|alloc_ctx
operator|->
name|slab
expr_stmt|;
name|assert
argument_list|(
name|szind
operator|!=
name|NSIZES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rtree_ctx
operator|=
name|tsd_rtree_ctx
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|)
expr_stmt|;
name|rtree_szind_slab_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|,
operator|&
name|szind
argument_list|,
operator|&
name|slab
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config_debug
condition|)
block|{
name|rtree_ctx
operator|=
name|tsd_rtree_ctx
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|)
expr_stmt|;
name|extent_t
modifier|*
name|extent
init|=
name|rtree_extent_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|szind
operator|==
name|extent_szind_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|szind
operator|<
name|NSIZES
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|slab
operator|==
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|likely
argument_list|(
name|slab
argument_list|)
condition|)
block|{
comment|/* Small allocation. */
name|tcache_dalloc_small
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|tcache
argument_list|,
name|ptr
argument_list|,
name|szind
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|szind
operator|<
name|nhbins
condition|)
block|{
if|if
condition|(
name|config_prof
operator|&&
name|unlikely
argument_list|(
name|szind
operator|<
name|NBINS
argument_list|)
condition|)
block|{
name|arena_dalloc_promoted
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|tcache
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tcache_dalloc_large
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|tcache
argument_list|,
name|ptr
argument_list|,
name|szind
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|extent_t
modifier|*
name|extent
init|=
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
name|large_dalloc
argument_list|(
name|tsdn
argument_list|,
name|extent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|arena_sdalloc_no_tcache
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|size
operator|<=
name|LARGE_MAXCLASS
argument_list|)
expr_stmt|;
name|szind_t
name|szind
decl_stmt|;
name|bool
name|slab
decl_stmt|;
if|if
condition|(
operator|!
name|config_prof
operator|||
operator|!
name|opt_prof
condition|)
block|{
comment|/* 		 * There is no risk of being confused by a promoted sampled 		 * object, so base szind and slab on the given size. 		 */
name|szind
operator|=
name|sz_size2index
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|slab
operator|=
operator|(
name|szind
operator|<
name|NBINS
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|config_prof
operator|&&
name|opt_prof
operator|)
operator|||
name|config_debug
condition|)
block|{
name|rtree_ctx_t
name|rtree_ctx_fallback
decl_stmt|;
name|rtree_ctx_t
modifier|*
name|rtree_ctx
init|=
name|tsdn_rtree_ctx
argument_list|(
name|tsdn
argument_list|,
operator|&
name|rtree_ctx_fallback
argument_list|)
decl_stmt|;
name|rtree_szind_slab_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|,
operator|&
name|szind
argument_list|,
operator|&
name|slab
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|szind
operator|==
name|sz_size2index
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|config_prof
operator|&&
name|opt_prof
operator|)
operator|||
name|slab
operator|==
operator|(
name|szind
operator|<
name|NBINS
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_debug
condition|)
block|{
name|extent_t
modifier|*
name|extent
init|=
name|rtree_extent_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|szind
operator|==
name|extent_szind_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|slab
operator|==
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|likely
argument_list|(
name|slab
argument_list|)
condition|)
block|{
comment|/* Small allocation. */
name|arena_dalloc_small
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|extent_t
modifier|*
name|extent
init|=
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
name|large_dalloc
argument_list|(
name|tsdn
argument_list|,
name|extent
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|arena_sdalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|alloc_ctx_t
modifier|*
name|alloc_ctx
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|tsdn_null
argument_list|(
name|tsdn
argument_list|)
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|size
operator|<=
name|LARGE_MAXCLASS
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tcache
operator|==
name|NULL
argument_list|)
condition|)
block|{
name|arena_sdalloc_no_tcache
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return;
block|}
name|szind_t
name|szind
decl_stmt|;
name|bool
name|slab
decl_stmt|;
name|UNUSED
name|alloc_ctx_t
name|local_ctx
decl_stmt|;
if|if
condition|(
name|config_prof
operator|&&
name|opt_prof
condition|)
block|{
if|if
condition|(
name|alloc_ctx
operator|==
name|NULL
condition|)
block|{
comment|/* Uncommon case and should be a static check. */
name|rtree_ctx_t
name|rtree_ctx_fallback
decl_stmt|;
name|rtree_ctx_t
modifier|*
name|rtree_ctx
init|=
name|tsdn_rtree_ctx
argument_list|(
name|tsdn
argument_list|,
operator|&
name|rtree_ctx_fallback
argument_list|)
decl_stmt|;
name|rtree_szind_slab_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|,
operator|&
name|local_ctx
operator|.
name|szind
argument_list|,
operator|&
name|local_ctx
operator|.
name|slab
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|local_ctx
operator|.
name|szind
operator|==
name|sz_size2index
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|alloc_ctx
operator|=
operator|&
name|local_ctx
expr_stmt|;
block|}
name|slab
operator|=
name|alloc_ctx
operator|->
name|slab
expr_stmt|;
name|szind
operator|=
name|alloc_ctx
operator|->
name|szind
expr_stmt|;
block|}
else|else
block|{
comment|/* 		 * There is no risk of being confused by a promoted sampled 		 * object, so base szind and slab on the given size. 		 */
name|szind
operator|=
name|sz_size2index
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|slab
operator|=
operator|(
name|szind
operator|<
name|NBINS
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|config_debug
condition|)
block|{
name|rtree_ctx_t
modifier|*
name|rtree_ctx
init|=
name|tsd_rtree_ctx
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|)
decl_stmt|;
name|rtree_szind_slab_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|,
operator|&
name|szind
argument_list|,
operator|&
name|slab
argument_list|)
expr_stmt|;
name|extent_t
modifier|*
name|extent
init|=
name|rtree_extent_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|szind
operator|==
name|extent_szind_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|slab
operator|==
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|likely
argument_list|(
name|slab
argument_list|)
condition|)
block|{
comment|/* Small allocation. */
name|tcache_dalloc_small
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|tcache
argument_list|,
name|ptr
argument_list|,
name|szind
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|szind
operator|<
name|nhbins
condition|)
block|{
if|if
condition|(
name|config_prof
operator|&&
name|unlikely
argument_list|(
name|szind
operator|<
name|NBINS
argument_list|)
condition|)
block|{
name|arena_dalloc_promoted
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|tcache
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tcache_dalloc_large
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|tcache
argument_list|,
name|ptr
argument_list|,
name|szind
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|extent_t
modifier|*
name|extent
init|=
name|iealloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
decl_stmt|;
name|large_dalloc
argument_list|(
name|tsdn
argument_list|,
name|extent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_ARENA_INLINES_B_H */
end_comment

end_unit

