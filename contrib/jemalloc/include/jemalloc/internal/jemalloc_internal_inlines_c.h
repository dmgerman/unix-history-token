begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_INLINES_C_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_INLINES_C_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/jemalloc_internal_types.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/sz.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/witness.h"
end_include

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|arena_t
modifier|*
name|iaalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
return|return
name|arena_aalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|isalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
return|return
name|arena_salloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|iallocztm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|is_internal
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
name|assert
argument_list|(
name|size
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_internal
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_internal
operator|||
name|arena
operator|==
name|NULL
operator|||
name|arena_is_auto
argument_list|(
name|arena
argument_list|)
argument_list|)
expr_stmt|;
name|witness_assert_depth_to_rank
argument_list|(
name|tsdn_witness_tsdp_get
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|WITNESS_RANK_CORE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|=
name|arena_malloc
argument_list|(
name|tsdn
argument_list|,
name|arena
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_stats
operator|&&
name|is_internal
operator|&&
name|likely
argument_list|(
name|ret
operator|!=
name|NULL
argument_list|)
condition|)
block|{
name|arena_internal_add
argument_list|(
name|iaalloc
argument_list|(
name|tsdn
argument_list|,
name|ret
argument_list|)
argument_list|,
name|isalloc
argument_list|(
name|tsdn
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|ialloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
return|return
name|iallocztm
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|tcache_get
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|false
argument_list|,
name|NULL
argument_list|,
name|slow_path
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|ipallocztm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|is_internal
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
name|assert
argument_list|(
name|usize
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|usize
operator|==
name|sz_sa2u
argument_list|(
name|usize
argument_list|,
name|alignment
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_internal
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_internal
operator|||
name|arena
operator|==
name|NULL
operator|||
name|arena_is_auto
argument_list|(
name|arena
argument_list|)
argument_list|)
expr_stmt|;
name|witness_assert_depth_to_rank
argument_list|(
name|tsdn_witness_tsdp_get
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|WITNESS_RANK_CORE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|ret
operator|=
name|arena_palloc
argument_list|(
name|tsdn
argument_list|,
name|arena
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ALIGNMENT_ADDR2BASE
argument_list|(
name|ret
argument_list|,
name|alignment
argument_list|)
operator|==
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_stats
operator|&&
name|is_internal
operator|&&
name|likely
argument_list|(
name|ret
operator|!=
name|NULL
argument_list|)
condition|)
block|{
name|arena_internal_add
argument_list|(
name|iaalloc
argument_list|(
name|tsdn
argument_list|,
name|ret
argument_list|)
argument_list|,
name|isalloc
argument_list|(
name|tsdn
argument_list|,
name|ret
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|ipalloct
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
return|return
name|ipallocztm
argument_list|(
name|tsdn
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|false
argument_list|,
name|arena
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|ipalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
block|{
return|return
name|ipallocztm
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache_get
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|false
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|ivsalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
return|return
name|arena_vsalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|idalloctm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|alloc_ctx_t
modifier|*
name|alloc_ctx
parameter_list|,
name|bool
name|is_internal
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_internal
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_internal
operator|||
name|arena_is_auto
argument_list|(
name|iaalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|witness_assert_depth_to_rank
argument_list|(
name|tsdn_witness_tsdp_get
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|WITNESS_RANK_CORE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_stats
operator|&&
name|is_internal
condition|)
block|{
name|arena_internal_sub
argument_list|(
name|iaalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
argument_list|,
name|isalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|is_internal
operator|&&
name|tsd_reentrancy_level_get
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|assert
argument_list|(
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
block|}
name|arena_dalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|tcache
argument_list|,
name|alloc_ctx
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|idalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|idalloctm
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ptr
argument_list|,
name|tcache_get
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|false
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|isdalloct
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|alloc_ctx_t
modifier|*
name|alloc_ctx
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|witness_assert_depth_to_rank
argument_list|(
name|tsdn_witness_tsdp_get
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|WITNESS_RANK_CORE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|arena_sdalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|size
argument_list|,
name|tcache
argument_list|,
name|alloc_ctx
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|iralloct_realign
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|extra
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|witness_assert_depth_to_rank
argument_list|(
name|tsdn_witness_tsdp_get
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|WITNESS_RANK_CORE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|void
modifier|*
name|p
decl_stmt|;
name|size_t
name|usize
decl_stmt|,
name|copysize
decl_stmt|;
name|usize
operator|=
name|sz_sa2u
argument_list|(
name|size
operator|+
name|extra
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|usize
operator|==
literal|0
operator|||
name|usize
operator|>
name|LARGE_MAXCLASS
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|p
operator|=
name|ipalloct
argument_list|(
name|tsdn
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|arena
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
name|NULL
condition|)
block|{
if|if
condition|(
name|extra
operator|==
literal|0
condition|)
block|{
return|return
name|NULL
return|;
block|}
comment|/* Try again, without extra this time. */
name|usize
operator|=
name|sz_sa2u
argument_list|(
name|size
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|usize
operator|==
literal|0
operator|||
name|usize
operator|>
name|LARGE_MAXCLASS
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|p
operator|=
name|ipalloct
argument_list|(
name|tsdn
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|arena
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
name|NULL
condition|)
block|{
return|return
name|NULL
return|;
block|}
block|}
comment|/* 	 * Copy at most size bytes (not size+extra), since the caller has no 	 * expectation that the extra bytes will be reliably preserved. 	 */
name|copysize
operator|=
operator|(
name|size
operator|<
name|oldsize
operator|)
condition|?
name|size
else|:
name|oldsize
expr_stmt|;
name|memcpy
argument_list|(
name|p
argument_list|,
name|ptr
argument_list|,
name|copysize
argument_list|)
expr_stmt|;
name|isdalloct
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|tcache
argument_list|,
name|NULL
argument_list|,
name|true
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|iralloct
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|size
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|witness_assert_depth_to_rank
argument_list|(
name|tsdn_witness_tsdp_get
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|WITNESS_RANK_CORE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignment
operator|!=
literal|0
operator|&&
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|&
operator|(
operator|(
name|uintptr_t
operator|)
name|alignment
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
comment|/* 		 * Existing object alignment is inadequate; allocate new space 		 * and copy. 		 */
return|return
name|iralloct_realign
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|arena
argument_list|)
return|;
block|}
return|return
name|arena_ralloc
argument_list|(
name|tsdn
argument_list|,
name|arena
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|size
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|iralloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
block|{
return|return
name|iralloct
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|size
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache_get
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|NULL
argument_list|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|bool
name|ixalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|extra
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|size
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|witness_assert_depth_to_rank
argument_list|(
name|tsdn_witness_tsdp_get
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|WITNESS_RANK_CORE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignment
operator|!=
literal|0
operator|&&
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|&
operator|(
operator|(
name|uintptr_t
operator|)
name|alignment
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
comment|/* Existing object alignment is inadequate. */
return|return
name|true
return|;
block|}
return|return
name|arena_ralloc_no_move
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|size
argument_list|,
name|extra
argument_list|,
name|zero
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_INLINES_C_H */
end_comment

end_unit

