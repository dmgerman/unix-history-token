begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_MUTEX_POOL_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_MUTEX_POOL_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/hash.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/mutex.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/witness.h"
end_include

begin_comment
comment|/* We do mod reductions by this value, so it should be kept a power of 2. */
end_comment

begin_define
define|#
directive|define
name|MUTEX_POOL_SIZE
value|256
end_define

begin_typedef
typedef|typedef
name|struct
name|mutex_pool_s
name|mutex_pool_t
typedef|;
end_typedef

begin_struct
struct|struct
name|mutex_pool_s
block|{
name|malloc_mutex_t
name|mutexes
index|[
name|MUTEX_POOL_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|bool
name|mutex_pool_init
parameter_list|(
name|mutex_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|witness_rank_t
name|rank
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Internal helper - not meant to be called outside this module. */
end_comment

begin_function
specifier|static
specifier|inline
name|malloc_mutex_t
modifier|*
name|mutex_pool_mutex
parameter_list|(
name|mutex_pool_t
modifier|*
name|pool
parameter_list|,
name|uintptr_t
name|key
parameter_list|)
block|{
name|size_t
name|hash_result
index|[
literal|2
index|]
decl_stmt|;
name|hash
argument_list|(
operator|&
name|key
argument_list|,
sizeof|sizeof
argument_list|(
name|key
argument_list|)
argument_list|,
literal|0xd50dcc1b
argument_list|,
name|hash_result
argument_list|)
expr_stmt|;
return|return
operator|&
name|pool
operator|->
name|mutexes
index|[
name|hash_result
index|[
literal|0
index|]
operator|%
name|MUTEX_POOL_SIZE
index|]
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mutex_pool_assert_not_held
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|mutex_pool_t
modifier|*
name|pool
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MUTEX_POOL_SIZE
condition|;
name|i
operator|++
control|)
block|{
name|malloc_mutex_assert_not_owner
argument_list|(
name|tsdn
argument_list|,
operator|&
name|pool
operator|->
name|mutexes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*  * Note that a mutex pool doesn't work exactly the way an embdedded mutex would.  * You're not allowed to acquire mutexes in the pool one at a time.  You have to  * acquire all the mutexes you'll need in a single function call, and then  * release them all in a single function call.  */
end_comment

begin_function
specifier|static
specifier|inline
name|void
name|mutex_pool_lock
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|mutex_pool_t
modifier|*
name|pool
parameter_list|,
name|uintptr_t
name|key
parameter_list|)
block|{
name|mutex_pool_assert_not_held
argument_list|(
name|tsdn
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|malloc_mutex_t
modifier|*
name|mutex
init|=
name|mutex_pool_mutex
argument_list|(
name|pool
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|malloc_mutex_lock
argument_list|(
name|tsdn
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mutex_pool_unlock
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|mutex_pool_t
modifier|*
name|pool
parameter_list|,
name|uintptr_t
name|key
parameter_list|)
block|{
name|malloc_mutex_t
modifier|*
name|mutex
init|=
name|mutex_pool_mutex
argument_list|(
name|pool
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|malloc_mutex_unlock
argument_list|(
name|tsdn
argument_list|,
name|mutex
argument_list|)
expr_stmt|;
name|mutex_pool_assert_not_held
argument_list|(
name|tsdn
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mutex_pool_lock2
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|mutex_pool_t
modifier|*
name|pool
parameter_list|,
name|uintptr_t
name|key1
parameter_list|,
name|uintptr_t
name|key2
parameter_list|)
block|{
name|mutex_pool_assert_not_held
argument_list|(
name|tsdn
argument_list|,
name|pool
argument_list|)
expr_stmt|;
name|malloc_mutex_t
modifier|*
name|mutex1
init|=
name|mutex_pool_mutex
argument_list|(
name|pool
argument_list|,
name|key1
argument_list|)
decl_stmt|;
name|malloc_mutex_t
modifier|*
name|mutex2
init|=
name|mutex_pool_mutex
argument_list|(
name|pool
argument_list|,
name|key2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|uintptr_t
operator|)
name|mutex1
operator|<
operator|(
name|uintptr_t
operator|)
name|mutex2
condition|)
block|{
name|malloc_mutex_lock
argument_list|(
name|tsdn
argument_list|,
name|mutex1
argument_list|)
expr_stmt|;
name|malloc_mutex_lock
argument_list|(
name|tsdn
argument_list|,
name|mutex2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|uintptr_t
operator|)
name|mutex1
operator|==
operator|(
name|uintptr_t
operator|)
name|mutex2
condition|)
block|{
name|malloc_mutex_lock
argument_list|(
name|tsdn
argument_list|,
name|mutex1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|malloc_mutex_lock
argument_list|(
name|tsdn
argument_list|,
name|mutex2
argument_list|)
expr_stmt|;
name|malloc_mutex_lock
argument_list|(
name|tsdn
argument_list|,
name|mutex1
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mutex_pool_unlock2
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|mutex_pool_t
modifier|*
name|pool
parameter_list|,
name|uintptr_t
name|key1
parameter_list|,
name|uintptr_t
name|key2
parameter_list|)
block|{
name|malloc_mutex_t
modifier|*
name|mutex1
init|=
name|mutex_pool_mutex
argument_list|(
name|pool
argument_list|,
name|key1
argument_list|)
decl_stmt|;
name|malloc_mutex_t
modifier|*
name|mutex2
init|=
name|mutex_pool_mutex
argument_list|(
name|pool
argument_list|,
name|key2
argument_list|)
decl_stmt|;
if|if
condition|(
name|mutex1
operator|==
name|mutex2
condition|)
block|{
name|malloc_mutex_unlock
argument_list|(
name|tsdn
argument_list|,
name|mutex1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|malloc_mutex_unlock
argument_list|(
name|tsdn
argument_list|,
name|mutex1
argument_list|)
expr_stmt|;
name|malloc_mutex_unlock
argument_list|(
name|tsdn
argument_list|,
name|mutex2
argument_list|)
expr_stmt|;
block|}
name|mutex_pool_assert_not_held
argument_list|(
name|tsdn
argument_list|,
name|pool
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|mutex_pool_assert_owner
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|mutex_pool_t
modifier|*
name|pool
parameter_list|,
name|uintptr_t
name|key
parameter_list|)
block|{
name|malloc_mutex_assert_owner
argument_list|(
name|tsdn
argument_list|,
name|mutex_pool_mutex
argument_list|(
name|pool
argument_list|,
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_MUTEX_POOL_H */
end_comment

end_unit

