begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_TYPES
end_ifdef

begin_typedef
typedef|typedef
name|struct
name|extent_node_s
name|extent_node_t
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_TYPES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_STRUCTS
end_ifdef

begin_comment
comment|/* Tree of extents.  Use accessor functions for en_* fields. */
end_comment

begin_struct
struct|struct
name|extent_node_s
block|{
comment|/* Arena from which this extent came, if any. */
name|arena_t
modifier|*
name|en_arena
decl_stmt|;
comment|/* Pointer to the extent that this tree node is responsible for. */
name|void
modifier|*
name|en_addr
decl_stmt|;
comment|/* Total region size. */
name|size_t
name|en_size
decl_stmt|;
comment|/* 	 * Serial number (potentially non-unique). 	 * 	 * In principle serial numbers can wrap around on 32-bit systems if 	 * JEMALLOC_MUNMAP is defined, but as long as comparison functions fall 	 * back on address comparison for equal serial numbers, stable (if 	 * imperfect) ordering is maintained. 	 * 	 * Serial numbers may not be unique even in the absence of wrap-around, 	 * e.g. when splitting an extent and assigning the same serial number to 	 * both resulting adjacent extents. 	 */
name|size_t
name|en_sn
decl_stmt|;
comment|/* 	 * The zeroed flag is used by chunk recycling code to track whether 	 * memory is zero-filled. 	 */
name|bool
name|en_zeroed
decl_stmt|;
comment|/* 	 * True if physical memory is committed to the extent, whether 	 * explicitly or implicitly as on a system that overcommits and 	 * satisfies physical memory needs on demand via soft page faults. 	 */
name|bool
name|en_committed
decl_stmt|;
comment|/* 	 * The achunk flag is used to validate that huge allocation lookups 	 * don't return arena chunks. 	 */
name|bool
name|en_achunk
decl_stmt|;
comment|/* Profile counters, used for huge objects. */
name|prof_tctx_t
modifier|*
name|en_prof_tctx
decl_stmt|;
comment|/* Linkage for arena's runs_dirty and chunks_cache rings. */
name|arena_runs_dirty_link_t
name|rd
decl_stmt|;
name|qr
argument_list|(
argument|extent_node_t
argument_list|)
name|cc_link
expr_stmt|;
union|union
block|{
comment|/* Linkage for the size/sn/address-ordered tree. */
name|rb_node
argument_list|(
argument|extent_node_t
argument_list|)
name|szsnad_link
expr_stmt|;
comment|/* Linkage for arena's achunks, huge, and node_cache lists. */
name|ql_elm
argument_list|(
argument|extent_node_t
argument_list|)
name|ql_link
expr_stmt|;
block|}
union|;
comment|/* Linkage for the address-ordered tree. */
name|rb_node
argument_list|(
argument|extent_node_t
argument_list|)
name|ad_link
expr_stmt|;
block|}
struct|;
end_struct

begin_typedef
typedef|typedef
name|rb_tree
argument_list|(
argument|extent_node_t
argument_list|)
name|extent_tree_t
expr_stmt|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_STRUCTS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_EXTERNS
end_ifdef

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_JET
end_ifdef

begin_function_decl
name|size_t
name|extent_size_quantize_floor
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function_decl
name|size_t
name|extent_size_quantize_ceil
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_macro
name|rb_proto
argument_list|(
argument_list|,
argument|extent_tree_szsnad_
argument_list|,
argument|extent_tree_t
argument_list|,
argument|extent_node_t
argument_list|)
end_macro

begin_macro
name|rb_proto
argument_list|(
argument_list|,
argument|extent_tree_ad_
argument_list|,
argument|extent_tree_t
argument_list|,
argument|extent_node_t
argument_list|)
end_macro

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_EXTERNS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_INLINES
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_function_decl
name|arena_t
modifier|*
name|extent_node_arena_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|extent_node_addr_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|extent_node_size_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|extent_node_sn_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|extent_node_zeroed_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|extent_node_committed_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|extent_node_achunk_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|prof_tctx_t
modifier|*
name|extent_node_prof_tctx_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_arena_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_addr_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_size_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_sn_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|size_t
name|sn
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_zeroed_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|bool
name|zeroed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_committed_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|bool
name|committed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_achunk_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|bool
name|achunk
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_prof_tctx_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|prof_tctx_t
modifier|*
name|tctx
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_init
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|sn
parameter_list|,
name|bool
name|zeroed
parameter_list|,
name|bool
name|committed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_dirty_linkage_init
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_dirty_insert
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|arena_runs_dirty_link_t
modifier|*
name|runs_dirty
parameter_list|,
name|extent_node_t
modifier|*
name|chunks_dirty
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|extent_node_dirty_remove
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_EXTENT_C_
argument_list|)
operator|)
end_if

begin_function
name|JEMALLOC_INLINE
name|arena_t
modifier|*
name|extent_node_arena_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|->
name|en_arena
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
modifier|*
name|extent_node_addr_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|->
name|en_addr
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|size_t
name|extent_node_size_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|->
name|en_size
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|size_t
name|extent_node_sn_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|->
name|en_sn
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|bool
name|extent_node_zeroed_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|->
name|en_zeroed
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|bool
name|extent_node_committed_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|node
operator|->
name|en_achunk
argument_list|)
expr_stmt|;
return|return
operator|(
name|node
operator|->
name|en_committed
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|bool
name|extent_node_achunk_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|->
name|en_achunk
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|prof_tctx_t
modifier|*
name|extent_node_prof_tctx_get
parameter_list|(
specifier|const
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
return|return
operator|(
name|node
operator|->
name|en_prof_tctx
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_arena_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|node
operator|->
name|en_arena
operator|=
name|arena
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_addr_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|node
operator|->
name|en_addr
operator|=
name|addr
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_size_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|node
operator|->
name|en_size
operator|=
name|size
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_sn_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|size_t
name|sn
parameter_list|)
block|{
name|node
operator|->
name|en_sn
operator|=
name|sn
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_zeroed_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|bool
name|zeroed
parameter_list|)
block|{
name|node
operator|->
name|en_zeroed
operator|=
name|zeroed
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_committed_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|bool
name|committed
parameter_list|)
block|{
name|node
operator|->
name|en_committed
operator|=
name|committed
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_achunk_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|bool
name|achunk
parameter_list|)
block|{
name|node
operator|->
name|en_achunk
operator|=
name|achunk
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_prof_tctx_set
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|prof_tctx_t
modifier|*
name|tctx
parameter_list|)
block|{
name|node
operator|->
name|en_prof_tctx
operator|=
name|tctx
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_init
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|sn
parameter_list|,
name|bool
name|zeroed
parameter_list|,
name|bool
name|committed
parameter_list|)
block|{
name|extent_node_arena_set
argument_list|(
name|node
argument_list|,
name|arena
argument_list|)
expr_stmt|;
name|extent_node_addr_set
argument_list|(
name|node
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|extent_node_size_set
argument_list|(
name|node
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|extent_node_sn_set
argument_list|(
name|node
argument_list|,
name|sn
argument_list|)
expr_stmt|;
name|extent_node_zeroed_set
argument_list|(
name|node
argument_list|,
name|zeroed
argument_list|)
expr_stmt|;
name|extent_node_committed_set
argument_list|(
name|node
argument_list|,
name|committed
argument_list|)
expr_stmt|;
name|extent_node_achunk_set
argument_list|(
name|node
argument_list|,
name|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_prof
condition|)
name|extent_node_prof_tctx_set
argument_list|(
name|node
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_dirty_linkage_init
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
name|qr_new
argument_list|(
operator|&
name|node
operator|->
name|rd
argument_list|,
name|rd_link
argument_list|)
expr_stmt|;
name|qr_new
argument_list|(
name|node
argument_list|,
name|cc_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_dirty_insert
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|,
name|arena_runs_dirty_link_t
modifier|*
name|runs_dirty
parameter_list|,
name|extent_node_t
modifier|*
name|chunks_dirty
parameter_list|)
block|{
name|qr_meld
argument_list|(
name|runs_dirty
argument_list|,
operator|&
name|node
operator|->
name|rd
argument_list|,
name|rd_link
argument_list|)
expr_stmt|;
name|qr_meld
argument_list|(
name|chunks_dirty
argument_list|,
name|node
argument_list|,
name|cc_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|extent_node_dirty_remove
parameter_list|(
name|extent_node_t
modifier|*
name|node
parameter_list|)
block|{
name|qr_remove
argument_list|(
operator|&
name|node
operator|->
name|rd
argument_list|,
name|rd_link
argument_list|)
expr_stmt|;
name|qr_remove
argument_list|(
name|node
argument_list|,
name|cc_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_INLINES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

end_unit

