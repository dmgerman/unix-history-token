begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_TYPES
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_TYPES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_STRUCTS
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_STRUCTS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_EXTERNS
end_ifdef

begin_define
define|#
directive|define
name|atomic_read_uint64
parameter_list|(
name|p
parameter_list|)
value|atomic_add_uint64(p, 0)
end_define

begin_define
define|#
directive|define
name|atomic_read_uint32
parameter_list|(
name|p
parameter_list|)
value|atomic_add_uint32(p, 0)
end_define

begin_define
define|#
directive|define
name|atomic_read_z
parameter_list|(
name|p
parameter_list|)
value|atomic_add_z(p, 0)
end_define

begin_define
define|#
directive|define
name|atomic_read_u
parameter_list|(
name|p
parameter_list|)
value|atomic_add_u(p, 0)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_EXTERNS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_INLINES
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_function_decl
name|uint64_t
name|atomic_add_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint64_t
name|atomic_sub_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|atomic_add_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|uint32_t
name|atomic_sub_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|atomic_add_z
parameter_list|(
name|size_t
modifier|*
name|p
parameter_list|,
name|size_t
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|atomic_sub_z
parameter_list|(
name|size_t
modifier|*
name|p
parameter_list|,
name|size_t
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|atomic_add_u
parameter_list|(
name|unsigned
modifier|*
name|p
parameter_list|,
name|unsigned
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|atomic_sub_u
parameter_list|(
name|unsigned
modifier|*
name|p
parameter_list|,
name|unsigned
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_ATOMIC_C_
argument_list|)
operator|)
end_if

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* 64-bit operations. */
end_comment

begin_if
if|#
directive|if
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|3
operator|||
name|LG_SIZEOF_INT
operator|==
literal|3
operator|)
end_if

begin_ifdef
ifdef|#
directive|ifdef
name|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8
end_ifdef

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_add_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|__sync_add_and_fetch
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_sub_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|__sync_sub_and_fetch
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_add_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|InterlockedExchangeAdd64
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_sub_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|InterlockedExchangeAdd64
argument_list|(
name|p
argument_list|,
operator|-
operator|(
operator|(
name|int64_t
operator|)
name|x
operator|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|JEMALLOC_OSATOMIC
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_add_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|OSAtomicAdd64
argument_list|(
operator|(
name|int64_t
operator|)
name|x
argument_list|,
operator|(
name|int64_t
operator|*
operator|)
name|p
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_sub_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|OSAtomicAdd64
argument_list|(
operator|-
operator|(
operator|(
name|int64_t
operator|)
name|x
operator|)
argument_list|,
operator|(
name|int64_t
operator|*
operator|)
name|p
argument_list|)
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_add_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
asm|asm
specifier|volatile
asm|( 	    "lock; xaddq %0, %1;" 	    : "+r" (x), "=m" (*p)
comment|/* Outputs. */
asm|: "m" (*p)
comment|/* Inputs. */
asm|);
return|return
operator|(
name|x
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_sub_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
name|x
operator|=
call|(
name|uint64_t
call|)
argument_list|(
operator|-
operator|(
name|int64_t
operator|)
name|x
argument_list|)
expr_stmt|;
asm|asm
specifier|volatile
asm|( 	    "lock; xaddq %0, %1;" 	    : "+r" (x), "=m" (*p)
comment|/* Outputs. */
asm|: "m" (*p)
comment|/* Inputs. */
asm|);
return|return
operator|(
name|x
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|JEMALLOC_ATOMIC9
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_add_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
comment|/* 	 * atomic_fetchadd_64() doesn't exist, but we only ever use this 	 * function on LP64 systems, so atomic_fetchadd_long() will do. 	 */
name|assert
argument_list|(
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
operator|==
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|atomic_fetchadd_long
argument_list|(
name|p
argument_list|,
operator|(
name|unsigned
name|long
operator|)
name|x
argument_list|)
operator|+
name|x
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_sub_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
name|assert
argument_list|(
sizeof|sizeof
argument_list|(
name|uint64_t
argument_list|)
operator|==
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|atomic_fetchadd_long
argument_list|(
name|p
argument_list|,
call|(
name|unsigned
name|long
call|)
argument_list|(
operator|-
operator|(
name|long
operator|)
name|x
argument_list|)
argument_list|)
operator|-
name|x
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|JE_FORCE_SYNC_COMPARE_AND_SWAP_8
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_add_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|__sync_add_and_fetch
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|atomic_sub_uint64
parameter_list|(
name|uint64_t
modifier|*
name|p
parameter_list|,
name|uint64_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|__sync_sub_and_fetch
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
literal|"Missing implementation for 64-bit atomic operations"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* 32-bit operations. */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4
end_ifdef

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_add_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|__sync_add_and_fetch
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_sub_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|__sync_sub_and_fetch
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_add_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|InterlockedExchangeAdd
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_sub_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|InterlockedExchangeAdd
argument_list|(
name|p
argument_list|,
operator|-
operator|(
operator|(
name|int32_t
operator|)
name|x
operator|)
argument_list|)
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|JEMALLOC_OSATOMIC
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_add_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|OSAtomicAdd32
argument_list|(
operator|(
name|int32_t
operator|)
name|x
argument_list|,
operator|(
name|int32_t
operator|*
operator|)
name|p
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_sub_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|OSAtomicAdd32
argument_list|(
operator|-
operator|(
operator|(
name|int32_t
operator|)
name|x
operator|)
argument_list|,
operator|(
name|int32_t
operator|*
operator|)
name|p
argument_list|)
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_add_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
asm|asm
specifier|volatile
asm|( 	    "lock; xaddl %0, %1;" 	    : "+r" (x), "=m" (*p)
comment|/* Outputs. */
asm|: "m" (*p)
comment|/* Inputs. */
asm|);
return|return
operator|(
name|x
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_sub_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
name|x
operator|=
call|(
name|uint32_t
call|)
argument_list|(
operator|-
operator|(
name|int32_t
operator|)
name|x
argument_list|)
expr_stmt|;
asm|asm
specifier|volatile
asm|( 	    "lock; xaddl %0, %1;" 	    : "+r" (x), "=m" (*p)
comment|/* Outputs. */
asm|: "m" (*p)
comment|/* Inputs. */
asm|);
return|return
operator|(
name|x
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|JEMALLOC_ATOMIC9
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_add_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|atomic_fetchadd_32
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|+
name|x
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_sub_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|atomic_fetchadd_32
argument_list|(
name|p
argument_list|,
call|(
name|uint32_t
call|)
argument_list|(
operator|-
operator|(
name|int32_t
operator|)
name|x
argument_list|)
argument_list|)
operator|-
name|x
operator|)
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|JE_FORCE_SYNC_COMPARE_AND_SWAP_4
argument_list|)
operator|)
end_elif

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_add_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|__sync_add_and_fetch
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|atomic_sub_uint32
parameter_list|(
name|uint32_t
modifier|*
name|p
parameter_list|,
name|uint32_t
name|x
parameter_list|)
block|{
return|return
operator|(
name|__sync_sub_and_fetch
argument_list|(
name|p
argument_list|,
name|x
argument_list|)
operator|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
literal|"Missing implementation for 32-bit atomic operations"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* size_t operations. */
end_comment

begin_function
name|JEMALLOC_INLINE
name|size_t
name|atomic_add_z
parameter_list|(
name|size_t
modifier|*
name|p
parameter_list|,
name|size_t
name|x
parameter_list|)
block|{
if|#
directive|if
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|3
operator|)
return|return
operator|(
operator|(
name|size_t
operator|)
name|atomic_add_uint64
argument_list|(
operator|(
name|uint64_t
operator|*
operator|)
name|p
argument_list|,
operator|(
name|uint64_t
operator|)
name|x
argument_list|)
operator|)
return|;
elif|#
directive|elif
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|2
operator|)
return|return
operator|(
operator|(
name|size_t
operator|)
name|atomic_add_uint32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
name|p
argument_list|,
operator|(
name|uint32_t
operator|)
name|x
argument_list|)
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|size_t
name|atomic_sub_z
parameter_list|(
name|size_t
modifier|*
name|p
parameter_list|,
name|size_t
name|x
parameter_list|)
block|{
if|#
directive|if
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|3
operator|)
return|return
operator|(
operator|(
name|size_t
operator|)
name|atomic_add_uint64
argument_list|(
operator|(
name|uint64_t
operator|*
operator|)
name|p
argument_list|,
operator|(
name|uint64_t
operator|)
operator|-
operator|(
operator|(
name|int64_t
operator|)
name|x
operator|)
argument_list|)
operator|)
return|;
elif|#
directive|elif
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|2
operator|)
return|return
operator|(
operator|(
name|size_t
operator|)
name|atomic_add_uint32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
name|p
argument_list|,
operator|(
name|uint32_t
operator|)
operator|-
operator|(
operator|(
name|int32_t
operator|)
name|x
operator|)
argument_list|)
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* unsigned operations. */
end_comment

begin_function
name|JEMALLOC_INLINE
name|unsigned
name|atomic_add_u
parameter_list|(
name|unsigned
modifier|*
name|p
parameter_list|,
name|unsigned
name|x
parameter_list|)
block|{
if|#
directive|if
operator|(
name|LG_SIZEOF_INT
operator|==
literal|3
operator|)
return|return
operator|(
operator|(
name|unsigned
operator|)
name|atomic_add_uint64
argument_list|(
operator|(
name|uint64_t
operator|*
operator|)
name|p
argument_list|,
operator|(
name|uint64_t
operator|)
name|x
argument_list|)
operator|)
return|;
elif|#
directive|elif
operator|(
name|LG_SIZEOF_INT
operator|==
literal|2
operator|)
return|return
operator|(
operator|(
name|unsigned
operator|)
name|atomic_add_uint32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
name|p
argument_list|,
operator|(
name|uint32_t
operator|)
name|x
argument_list|)
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|unsigned
name|atomic_sub_u
parameter_list|(
name|unsigned
modifier|*
name|p
parameter_list|,
name|unsigned
name|x
parameter_list|)
block|{
if|#
directive|if
operator|(
name|LG_SIZEOF_INT
operator|==
literal|3
operator|)
return|return
operator|(
operator|(
name|unsigned
operator|)
name|atomic_add_uint64
argument_list|(
operator|(
name|uint64_t
operator|*
operator|)
name|p
argument_list|,
operator|(
name|uint64_t
operator|)
operator|-
operator|(
operator|(
name|int64_t
operator|)
name|x
operator|)
argument_list|)
operator|)
return|;
elif|#
directive|elif
operator|(
name|LG_SIZEOF_INT
operator|==
literal|2
operator|)
return|return
operator|(
operator|(
name|unsigned
operator|)
name|atomic_add_uint32
argument_list|(
operator|(
name|uint32_t
operator|*
operator|)
name|p
argument_list|,
operator|(
name|uint32_t
operator|)
operator|-
operator|(
operator|(
name|int32_t
operator|)
name|x
operator|)
argument_list|)
operator|)
return|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/******************************************************************************/
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_INLINES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

end_unit

