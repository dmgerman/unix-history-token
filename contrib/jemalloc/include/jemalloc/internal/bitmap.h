begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_TYPES
end_ifdef

begin_comment
comment|/* Maximum bitmap bit count is 2^LG_BITMAP_MAXBITS. */
end_comment

begin_define
define|#
directive|define
name|LG_BITMAP_MAXBITS
value|LG_RUN_MAXREGS
end_define

begin_define
define|#
directive|define
name|BITMAP_MAXBITS
value|(ZU(1)<< LG_BITMAP_MAXBITS)
end_define

begin_typedef
typedef|typedef
name|struct
name|bitmap_level_s
name|bitmap_level_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|bitmap_info_s
name|bitmap_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|bitmap_t
typedef|;
end_typedef

begin_define
define|#
directive|define
name|LG_SIZEOF_BITMAP
value|LG_SIZEOF_LONG
end_define

begin_comment
comment|/* Number of bits per group. */
end_comment

begin_define
define|#
directive|define
name|LG_BITMAP_GROUP_NBITS
value|(LG_SIZEOF_BITMAP + 3)
end_define

begin_define
define|#
directive|define
name|BITMAP_GROUP_NBITS
value|(ZU(1)<< LG_BITMAP_GROUP_NBITS)
end_define

begin_define
define|#
directive|define
name|BITMAP_GROUP_NBITS_MASK
value|(BITMAP_GROUP_NBITS-1)
end_define

begin_comment
comment|/* Number of groups required to store a given number of bits. */
end_comment

begin_define
define|#
directive|define
name|BITMAP_BITS2GROUPS
parameter_list|(
name|nbits
parameter_list|)
define|\
value|((nbits + BITMAP_GROUP_NBITS_MASK)>> LG_BITMAP_GROUP_NBITS)
end_define

begin_comment
comment|/*  * Number of groups required at a particular level for a given number of bits.  */
end_comment

begin_define
define|#
directive|define
name|BITMAP_GROUPS_L0
parameter_list|(
name|nbits
parameter_list|)
define|\
value|BITMAP_BITS2GROUPS(nbits)
end_define

begin_define
define|#
directive|define
name|BITMAP_GROUPS_L1
parameter_list|(
name|nbits
parameter_list|)
define|\
value|BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(nbits))
end_define

begin_define
define|#
directive|define
name|BITMAP_GROUPS_L2
parameter_list|(
name|nbits
parameter_list|)
define|\
value|BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS((nbits))))
end_define

begin_define
define|#
directive|define
name|BITMAP_GROUPS_L3
parameter_list|(
name|nbits
parameter_list|)
define|\
value|BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(BITMAP_BITS2GROUPS(		\ 	BITMAP_BITS2GROUPS((nbits)))))
end_define

begin_comment
comment|/*  * Assuming the number of levels, number of groups required for a given number  * of bits.  */
end_comment

begin_define
define|#
directive|define
name|BITMAP_GROUPS_1_LEVEL
parameter_list|(
name|nbits
parameter_list|)
define|\
value|BITMAP_GROUPS_L0(nbits)
end_define

begin_define
define|#
directive|define
name|BITMAP_GROUPS_2_LEVEL
parameter_list|(
name|nbits
parameter_list|)
define|\
value|(BITMAP_GROUPS_1_LEVEL(nbits) + BITMAP_GROUPS_L1(nbits))
end_define

begin_define
define|#
directive|define
name|BITMAP_GROUPS_3_LEVEL
parameter_list|(
name|nbits
parameter_list|)
define|\
value|(BITMAP_GROUPS_2_LEVEL(nbits) + BITMAP_GROUPS_L2(nbits))
end_define

begin_define
define|#
directive|define
name|BITMAP_GROUPS_4_LEVEL
parameter_list|(
name|nbits
parameter_list|)
define|\
value|(BITMAP_GROUPS_3_LEVEL(nbits) + BITMAP_GROUPS_L3(nbits))
end_define

begin_comment
comment|/*  * Maximum number of groups required to support LG_BITMAP_MAXBITS.  */
end_comment

begin_if
if|#
directive|if
name|LG_BITMAP_MAXBITS
operator|<=
name|LG_BITMAP_GROUP_NBITS
end_if

begin_define
define|#
directive|define
name|BITMAP_GROUPS_MAX
value|BITMAP_GROUPS_1_LEVEL(BITMAP_MAXBITS)
end_define

begin_elif
elif|#
directive|elif
name|LG_BITMAP_MAXBITS
operator|<=
name|LG_BITMAP_GROUP_NBITS
operator|*
literal|2
end_elif

begin_define
define|#
directive|define
name|BITMAP_GROUPS_MAX
value|BITMAP_GROUPS_2_LEVEL(BITMAP_MAXBITS)
end_define

begin_elif
elif|#
directive|elif
name|LG_BITMAP_MAXBITS
operator|<=
name|LG_BITMAP_GROUP_NBITS
operator|*
literal|3
end_elif

begin_define
define|#
directive|define
name|BITMAP_GROUPS_MAX
value|BITMAP_GROUPS_3_LEVEL(BITMAP_MAXBITS)
end_define

begin_elif
elif|#
directive|elif
name|LG_BITMAP_MAXBITS
operator|<=
name|LG_BITMAP_GROUP_NBITS
operator|*
literal|4
end_elif

begin_define
define|#
directive|define
name|BITMAP_GROUPS_MAX
value|BITMAP_GROUPS_4_LEVEL(BITMAP_MAXBITS)
end_define

begin_else
else|#
directive|else
end_else

begin_error
error|#
directive|error
literal|"Unsupported bitmap size"
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* Maximum number of levels possible. */
end_comment

begin_define
define|#
directive|define
name|BITMAP_MAX_LEVELS
define|\
value|(LG_BITMAP_MAXBITS / LG_SIZEOF_BITMAP)				\     + !!(LG_BITMAP_MAXBITS % LG_SIZEOF_BITMAP)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_TYPES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_STRUCTS
end_ifdef

begin_struct
struct|struct
name|bitmap_level_s
block|{
comment|/* Offset of this level's groups within the array of groups. */
name|size_t
name|group_offset
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|bitmap_info_s
block|{
comment|/* Logical number of bits in bitmap (stored at bottom level). */
name|size_t
name|nbits
decl_stmt|;
comment|/* Number of levels necessary for nbits. */
name|unsigned
name|nlevels
decl_stmt|;
comment|/* 	 * Only the first (nlevels+1) elements are used, and levels are ordered 	 * bottom to top (e.g. the bottom level is stored in levels[0]). 	 */
name|bitmap_level_t
name|levels
index|[
name|BITMAP_MAX_LEVELS
operator|+
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_STRUCTS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_EXTERNS
end_ifdef

begin_function_decl
name|void
name|bitmap_info_init
parameter_list|(
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|,
name|size_t
name|nbits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|bitmap_info_ngroups
parameter_list|(
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|bitmap_size
parameter_list|(
name|size_t
name|nbits
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bitmap_init
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_EXTERNS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_INLINES
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_function_decl
name|bool
name|bitmap_full
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|bitmap_get
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|,
name|size_t
name|bit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bitmap_set
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|,
name|size_t
name|bit
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|bitmap_sfu
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bitmap_unset
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|,
name|size_t
name|bit
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_BITMAP_C_
argument_list|)
operator|)
end_if

begin_function
name|JEMALLOC_INLINE
name|bool
name|bitmap_full
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|)
block|{
name|unsigned
name|rgoff
init|=
name|binfo
operator|->
name|levels
index|[
name|binfo
operator|->
name|nlevels
index|]
operator|.
name|group_offset
operator|-
literal|1
decl_stmt|;
name|bitmap_t
name|rg
init|=
name|bitmap
index|[
name|rgoff
index|]
decl_stmt|;
comment|/* The bitmap is full iff the root group is 0. */
return|return
operator|(
name|rg
operator|==
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|bool
name|bitmap_get
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|,
name|size_t
name|bit
parameter_list|)
block|{
name|size_t
name|goff
decl_stmt|;
name|bitmap_t
name|g
decl_stmt|;
name|assert
argument_list|(
name|bit
operator|<
name|binfo
operator|->
name|nbits
argument_list|)
expr_stmt|;
name|goff
operator|=
name|bit
operator|>>
name|LG_BITMAP_GROUP_NBITS
expr_stmt|;
name|g
operator|=
name|bitmap
index|[
name|goff
index|]
expr_stmt|;
return|return
operator|(
operator|!
operator|(
name|g
operator|&
operator|(
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|bitmap_set
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|,
name|size_t
name|bit
parameter_list|)
block|{
name|size_t
name|goff
decl_stmt|;
name|bitmap_t
modifier|*
name|gp
decl_stmt|;
name|bitmap_t
name|g
decl_stmt|;
name|assert
argument_list|(
name|bit
operator|<
name|binfo
operator|->
name|nbits
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|bitmap_get
argument_list|(
name|bitmap
argument_list|,
name|binfo
argument_list|,
name|bit
argument_list|)
argument_list|)
expr_stmt|;
name|goff
operator|=
name|bit
operator|>>
name|LG_BITMAP_GROUP_NBITS
expr_stmt|;
name|gp
operator|=
operator|&
name|bitmap
index|[
name|goff
index|]
expr_stmt|;
name|g
operator|=
operator|*
name|gp
expr_stmt|;
name|assert
argument_list|(
name|g
operator|&
operator|(
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
operator|)
argument_list|)
expr_stmt|;
name|g
operator|^=
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
expr_stmt|;
operator|*
name|gp
operator|=
name|g
expr_stmt|;
name|assert
argument_list|(
name|bitmap_get
argument_list|(
name|bitmap
argument_list|,
name|binfo
argument_list|,
name|bit
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Propagate group state transitions up the tree. */
if|if
condition|(
name|g
operator|==
literal|0
condition|)
block|{
name|unsigned
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|binfo
operator|->
name|nlevels
condition|;
name|i
operator|++
control|)
block|{
name|bit
operator|=
name|goff
expr_stmt|;
name|goff
operator|=
name|bit
operator|>>
name|LG_BITMAP_GROUP_NBITS
expr_stmt|;
name|gp
operator|=
operator|&
name|bitmap
index|[
name|binfo
operator|->
name|levels
index|[
name|i
index|]
operator|.
name|group_offset
operator|+
name|goff
index|]
expr_stmt|;
name|g
operator|=
operator|*
name|gp
expr_stmt|;
name|assert
argument_list|(
name|g
operator|&
operator|(
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
operator|)
argument_list|)
expr_stmt|;
name|g
operator|^=
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
expr_stmt|;
operator|*
name|gp
operator|=
name|g
expr_stmt|;
if|if
condition|(
name|g
operator|!=
literal|0
condition|)
break|break;
block|}
block|}
block|}
end_function

begin_comment
comment|/* sfu: set first unset. */
end_comment

begin_function
name|JEMALLOC_INLINE
name|size_t
name|bitmap_sfu
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|)
block|{
name|size_t
name|bit
decl_stmt|;
name|bitmap_t
name|g
decl_stmt|;
name|unsigned
name|i
decl_stmt|;
name|assert
argument_list|(
operator|!
name|bitmap_full
argument_list|(
name|bitmap
argument_list|,
name|binfo
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|=
name|binfo
operator|->
name|nlevels
operator|-
literal|1
expr_stmt|;
name|g
operator|=
name|bitmap
index|[
name|binfo
operator|->
name|levels
index|[
name|i
index|]
operator|.
name|group_offset
index|]
expr_stmt|;
name|bit
operator|=
name|jemalloc_ffsl
argument_list|(
name|g
argument_list|)
operator|-
literal|1
expr_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|i
operator|--
expr_stmt|;
name|g
operator|=
name|bitmap
index|[
name|binfo
operator|->
name|levels
index|[
name|i
index|]
operator|.
name|group_offset
operator|+
name|bit
index|]
expr_stmt|;
name|bit
operator|=
operator|(
name|bit
operator|<<
name|LG_BITMAP_GROUP_NBITS
operator|)
operator|+
operator|(
name|jemalloc_ffsl
argument_list|(
name|g
argument_list|)
operator|-
literal|1
operator|)
expr_stmt|;
block|}
name|bitmap_set
argument_list|(
name|bitmap
argument_list|,
name|binfo
argument_list|,
name|bit
argument_list|)
expr_stmt|;
return|return
operator|(
name|bit
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|bitmap_unset
parameter_list|(
name|bitmap_t
modifier|*
name|bitmap
parameter_list|,
specifier|const
name|bitmap_info_t
modifier|*
name|binfo
parameter_list|,
name|size_t
name|bit
parameter_list|)
block|{
name|size_t
name|goff
decl_stmt|;
name|bitmap_t
modifier|*
name|gp
decl_stmt|;
name|bitmap_t
name|g
decl_stmt|;
name|bool
name|propagate
decl_stmt|;
name|assert
argument_list|(
name|bit
operator|<
name|binfo
operator|->
name|nbits
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|bitmap_get
argument_list|(
name|bitmap
argument_list|,
name|binfo
argument_list|,
name|bit
argument_list|)
argument_list|)
expr_stmt|;
name|goff
operator|=
name|bit
operator|>>
name|LG_BITMAP_GROUP_NBITS
expr_stmt|;
name|gp
operator|=
operator|&
name|bitmap
index|[
name|goff
index|]
expr_stmt|;
name|g
operator|=
operator|*
name|gp
expr_stmt|;
name|propagate
operator|=
operator|(
name|g
operator|==
literal|0
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|g
operator|&
operator|(
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|g
operator|^=
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
expr_stmt|;
operator|*
name|gp
operator|=
name|g
expr_stmt|;
name|assert
argument_list|(
operator|!
name|bitmap_get
argument_list|(
name|bitmap
argument_list|,
name|binfo
argument_list|,
name|bit
argument_list|)
argument_list|)
expr_stmt|;
comment|/* Propagate group state transitions up the tree. */
if|if
condition|(
name|propagate
condition|)
block|{
name|unsigned
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|binfo
operator|->
name|nlevels
condition|;
name|i
operator|++
control|)
block|{
name|bit
operator|=
name|goff
expr_stmt|;
name|goff
operator|=
name|bit
operator|>>
name|LG_BITMAP_GROUP_NBITS
expr_stmt|;
name|gp
operator|=
operator|&
name|bitmap
index|[
name|binfo
operator|->
name|levels
index|[
name|i
index|]
operator|.
name|group_offset
operator|+
name|goff
index|]
expr_stmt|;
name|g
operator|=
operator|*
name|gp
expr_stmt|;
name|propagate
operator|=
operator|(
name|g
operator|==
literal|0
operator|)
expr_stmt|;
name|assert
argument_list|(
operator|(
name|g
operator|&
operator|(
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
operator|)
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|g
operator|^=
literal|1LU
operator|<<
operator|(
name|bit
operator|&
name|BITMAP_GROUP_NBITS_MASK
operator|)
expr_stmt|;
operator|*
name|gp
operator|=
name|g
expr_stmt|;
if|if
condition|(
operator|!
name|propagate
condition|)
break|break;
block|}
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_INLINES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

end_unit

