begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * The following hash function is based on MurmurHash3, placed into the public  * domain by Austin Appleby.  See http://code.google.com/p/smhasher/ for  * details.  */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_TYPES
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_TYPES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_STRUCTS
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_STRUCTS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_EXTERNS
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_EXTERNS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_INLINES
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_function_decl
name|uint32_t
name|hash_x86_32
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|int
name|len
parameter_list|,
name|uint32_t
name|seed
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hash_x86_128
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|int
name|len
parameter_list|,
name|uint32_t
name|seed
parameter_list|,
name|uint64_t
name|r_out
index|[
literal|2
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hash_x64_128
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|int
name|len
parameter_list|,
specifier|const
name|uint32_t
name|seed
parameter_list|,
name|uint64_t
name|r_out
index|[
literal|2
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|hash
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|uint32_t
name|seed
parameter_list|,
name|size_t
name|r_hash
index|[
literal|2
index|]
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_HASH_C_
argument_list|)
operator|)
end_if

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* Internal implementation. */
end_comment

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|hash_rotl_32
parameter_list|(
name|uint32_t
name|x
parameter_list|,
name|int8_t
name|r
parameter_list|)
block|{
return|return
operator|(
operator|(
name|x
operator|<<
name|r
operator|)
operator||
operator|(
name|x
operator|>>
operator|(
literal|32
operator|-
name|r
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|hash_rotl_64
parameter_list|(
name|uint64_t
name|x
parameter_list|,
name|int8_t
name|r
parameter_list|)
block|{
return|return
operator|(
operator|(
name|x
operator|<<
name|r
operator|)
operator||
operator|(
name|x
operator|>>
operator|(
literal|64
operator|-
name|r
operator|)
operator|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|hash_get_block_32
parameter_list|(
specifier|const
name|uint32_t
modifier|*
name|p
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|p
index|[
name|i
index|]
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|hash_get_block_64
parameter_list|(
specifier|const
name|uint64_t
modifier|*
name|p
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|p
index|[
name|i
index|]
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|hash_fmix_32
parameter_list|(
name|uint32_t
name|h
parameter_list|)
block|{
name|h
operator|^=
name|h
operator|>>
literal|16
expr_stmt|;
name|h
operator|*=
literal|0x85ebca6b
expr_stmt|;
name|h
operator|^=
name|h
operator|>>
literal|13
expr_stmt|;
name|h
operator|*=
literal|0xc2b2ae35
expr_stmt|;
name|h
operator|^=
name|h
operator|>>
literal|16
expr_stmt|;
return|return
operator|(
name|h
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|hash_fmix_64
parameter_list|(
name|uint64_t
name|k
parameter_list|)
block|{
name|k
operator|^=
name|k
operator|>>
literal|33
expr_stmt|;
name|k
operator|*=
name|KQU
argument_list|(
literal|0xff51afd7ed558ccd
argument_list|)
expr_stmt|;
name|k
operator|^=
name|k
operator|>>
literal|33
expr_stmt|;
name|k
operator|*=
name|KQU
argument_list|(
literal|0xc4ceb9fe1a85ec53
argument_list|)
expr_stmt|;
name|k
operator|^=
name|k
operator|>>
literal|33
expr_stmt|;
return|return
operator|(
name|k
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|uint32_t
name|hash_x86_32
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|int
name|len
parameter_list|,
name|uint32_t
name|seed
parameter_list|)
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|int
name|nblocks
init|=
name|len
operator|/
literal|4
decl_stmt|;
name|uint32_t
name|h1
init|=
name|seed
decl_stmt|;
specifier|const
name|uint32_t
name|c1
init|=
literal|0xcc9e2d51
decl_stmt|;
specifier|const
name|uint32_t
name|c2
init|=
literal|0x1b873593
decl_stmt|;
comment|/* body */
block|{
specifier|const
name|uint32_t
modifier|*
name|blocks
init|=
operator|(
specifier|const
name|uint32_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|4
operator|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
operator|-
name|nblocks
init|;
name|i
condition|;
name|i
operator|++
control|)
block|{
name|uint32_t
name|k1
init|=
name|hash_get_block_32
argument_list|(
name|blocks
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|hash_rotl_32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|hash_rotl_32
argument_list|(
name|h1
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0xe6546b64
expr_stmt|;
block|}
block|}
comment|/* tail */
block|{
specifier|const
name|uint8_t
modifier|*
name|tail
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|4
operator|)
decl_stmt|;
name|uint32_t
name|k1
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|3
condition|)
block|{
case|case
literal|3
case|:
name|k1
operator|^=
name|tail
index|[
literal|2
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
name|tail
index|[
literal|1
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
name|tail
index|[
literal|0
index|]
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|hash_rotl_32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
block|}
comment|/* finalization */
name|h1
operator|^=
name|len
expr_stmt|;
name|h1
operator|=
name|hash_fmix_32
argument_list|(
name|h1
argument_list|)
expr_stmt|;
return|return
operator|(
name|h1
operator|)
return|;
block|}
end_function

begin_function
name|UNUSED
name|JEMALLOC_INLINE
name|void
name|hash_x86_128
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|int
name|len
parameter_list|,
name|uint32_t
name|seed
parameter_list|,
name|uint64_t
name|r_out
index|[
literal|2
index|]
parameter_list|)
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|int
name|nblocks
init|=
name|len
operator|/
literal|16
decl_stmt|;
name|uint32_t
name|h1
init|=
name|seed
decl_stmt|;
name|uint32_t
name|h2
init|=
name|seed
decl_stmt|;
name|uint32_t
name|h3
init|=
name|seed
decl_stmt|;
name|uint32_t
name|h4
init|=
name|seed
decl_stmt|;
specifier|const
name|uint32_t
name|c1
init|=
literal|0x239b961b
decl_stmt|;
specifier|const
name|uint32_t
name|c2
init|=
literal|0xab0e9789
decl_stmt|;
specifier|const
name|uint32_t
name|c3
init|=
literal|0x38b34ae5
decl_stmt|;
specifier|const
name|uint32_t
name|c4
init|=
literal|0xa1e38b93
decl_stmt|;
comment|/* body */
block|{
specifier|const
name|uint32_t
modifier|*
name|blocks
init|=
operator|(
specifier|const
name|uint32_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|16
operator|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
operator|-
name|nblocks
init|;
name|i
condition|;
name|i
operator|++
control|)
block|{
name|uint32_t
name|k1
init|=
name|hash_get_block_32
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|4
operator|+
literal|0
argument_list|)
decl_stmt|;
name|uint32_t
name|k2
init|=
name|hash_get_block_32
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|4
operator|+
literal|1
argument_list|)
decl_stmt|;
name|uint32_t
name|k3
init|=
name|hash_get_block_32
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|4
operator|+
literal|2
argument_list|)
decl_stmt|;
name|uint32_t
name|k4
init|=
name|hash_get_block_32
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|4
operator|+
literal|3
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|hash_rotl_32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|hash_rotl_32
argument_list|(
name|h1
argument_list|,
literal|19
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0x561ccd1b
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|hash_rotl_32
argument_list|(
name|k2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c3
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
name|h2
operator|=
name|hash_rotl_32
argument_list|(
name|h2
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|h2
operator|+=
name|h3
expr_stmt|;
name|h2
operator|=
name|h2
operator|*
literal|5
operator|+
literal|0x0bcaa747
expr_stmt|;
name|k3
operator|*=
name|c3
expr_stmt|;
name|k3
operator|=
name|hash_rotl_32
argument_list|(
name|k3
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|k3
operator|*=
name|c4
expr_stmt|;
name|h3
operator|^=
name|k3
expr_stmt|;
name|h3
operator|=
name|hash_rotl_32
argument_list|(
name|h3
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|h3
operator|+=
name|h4
expr_stmt|;
name|h3
operator|=
name|h3
operator|*
literal|5
operator|+
literal|0x96cd1c35
expr_stmt|;
name|k4
operator|*=
name|c4
expr_stmt|;
name|k4
operator|=
name|hash_rotl_32
argument_list|(
name|k4
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|k4
operator|*=
name|c1
expr_stmt|;
name|h4
operator|^=
name|k4
expr_stmt|;
name|h4
operator|=
name|hash_rotl_32
argument_list|(
name|h4
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|h4
operator|+=
name|h1
expr_stmt|;
name|h4
operator|=
name|h4
operator|*
literal|5
operator|+
literal|0x32ac3b17
expr_stmt|;
block|}
block|}
comment|/* tail */
block|{
specifier|const
name|uint8_t
modifier|*
name|tail
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|16
operator|)
decl_stmt|;
name|uint32_t
name|k1
init|=
literal|0
decl_stmt|;
name|uint32_t
name|k2
init|=
literal|0
decl_stmt|;
name|uint32_t
name|k3
init|=
literal|0
decl_stmt|;
name|uint32_t
name|k4
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|15
condition|)
block|{
case|case
literal|15
case|:
name|k4
operator|^=
name|tail
index|[
literal|14
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|14
case|:
name|k4
operator|^=
name|tail
index|[
literal|13
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|13
case|:
name|k4
operator|^=
name|tail
index|[
literal|12
index|]
operator|<<
literal|0
expr_stmt|;
name|k4
operator|*=
name|c4
expr_stmt|;
name|k4
operator|=
name|hash_rotl_32
argument_list|(
name|k4
argument_list|,
literal|18
argument_list|)
expr_stmt|;
name|k4
operator|*=
name|c1
expr_stmt|;
name|h4
operator|^=
name|k4
expr_stmt|;
case|case
literal|12
case|:
name|k3
operator|^=
name|tail
index|[
literal|11
index|]
operator|<<
literal|24
expr_stmt|;
case|case
literal|11
case|:
name|k3
operator|^=
name|tail
index|[
literal|10
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|10
case|:
name|k3
operator|^=
name|tail
index|[
literal|9
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|9
case|:
name|k3
operator|^=
name|tail
index|[
literal|8
index|]
operator|<<
literal|0
expr_stmt|;
name|k3
operator|*=
name|c3
expr_stmt|;
name|k3
operator|=
name|hash_rotl_32
argument_list|(
name|k3
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|k3
operator|*=
name|c4
expr_stmt|;
name|h3
operator|^=
name|k3
expr_stmt|;
case|case
literal|8
case|:
name|k2
operator|^=
name|tail
index|[
literal|7
index|]
operator|<<
literal|24
expr_stmt|;
case|case
literal|7
case|:
name|k2
operator|^=
name|tail
index|[
literal|6
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|6
case|:
name|k2
operator|^=
name|tail
index|[
literal|5
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|5
case|:
name|k2
operator|^=
name|tail
index|[
literal|4
index|]
operator|<<
literal|0
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|hash_rotl_32
argument_list|(
name|k2
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c3
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
case|case
literal|4
case|:
name|k1
operator|^=
name|tail
index|[
literal|3
index|]
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|k1
operator|^=
name|tail
index|[
literal|2
index|]
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
name|tail
index|[
literal|1
index|]
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
name|tail
index|[
literal|0
index|]
operator|<<
literal|0
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|hash_rotl_32
argument_list|(
name|k1
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
block|}
comment|/* finalization */
name|h1
operator|^=
name|len
expr_stmt|;
name|h2
operator|^=
name|len
expr_stmt|;
name|h3
operator|^=
name|len
expr_stmt|;
name|h4
operator|^=
name|len
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|+=
name|h3
expr_stmt|;
name|h1
operator|+=
name|h4
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h3
operator|+=
name|h1
expr_stmt|;
name|h4
operator|+=
name|h1
expr_stmt|;
name|h1
operator|=
name|hash_fmix_32
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|h2
operator|=
name|hash_fmix_32
argument_list|(
name|h2
argument_list|)
expr_stmt|;
name|h3
operator|=
name|hash_fmix_32
argument_list|(
name|h3
argument_list|)
expr_stmt|;
name|h4
operator|=
name|hash_fmix_32
argument_list|(
name|h4
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|+=
name|h3
expr_stmt|;
name|h1
operator|+=
name|h4
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h3
operator|+=
name|h1
expr_stmt|;
name|h4
operator|+=
name|h1
expr_stmt|;
name|r_out
index|[
literal|0
index|]
operator|=
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|h2
operator|)
operator|<<
literal|32
operator|)
operator||
name|h1
expr_stmt|;
name|r_out
index|[
literal|1
index|]
operator|=
operator|(
operator|(
operator|(
name|uint64_t
operator|)
name|h4
operator|)
operator|<<
literal|32
operator|)
operator||
name|h3
expr_stmt|;
block|}
end_function

begin_function
name|UNUSED
name|JEMALLOC_INLINE
name|void
name|hash_x64_128
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
specifier|const
name|int
name|len
parameter_list|,
specifier|const
name|uint32_t
name|seed
parameter_list|,
name|uint64_t
name|r_out
index|[
literal|2
index|]
parameter_list|)
block|{
specifier|const
name|uint8_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|int
name|nblocks
init|=
name|len
operator|/
literal|16
decl_stmt|;
name|uint64_t
name|h1
init|=
name|seed
decl_stmt|;
name|uint64_t
name|h2
init|=
name|seed
decl_stmt|;
specifier|const
name|uint64_t
name|c1
init|=
name|KQU
argument_list|(
literal|0x87c37b91114253d5
argument_list|)
decl_stmt|;
specifier|const
name|uint64_t
name|c2
init|=
name|KQU
argument_list|(
literal|0x4cf5ad432745937f
argument_list|)
decl_stmt|;
comment|/* body */
block|{
specifier|const
name|uint64_t
modifier|*
name|blocks
init|=
operator|(
specifier|const
name|uint64_t
operator|*
operator|)
operator|(
name|data
operator|)
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|nblocks
condition|;
name|i
operator|++
control|)
block|{
name|uint64_t
name|k1
init|=
name|hash_get_block_64
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|0
argument_list|)
decl_stmt|;
name|uint64_t
name|k2
init|=
name|hash_get_block_64
argument_list|(
name|blocks
argument_list|,
name|i
operator|*
literal|2
operator|+
literal|1
argument_list|)
decl_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|hash_rotl_64
argument_list|(
name|k1
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
name|h1
operator|=
name|hash_rotl_64
argument_list|(
name|h1
argument_list|,
literal|27
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h1
operator|=
name|h1
operator|*
literal|5
operator|+
literal|0x52dce729
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|hash_rotl_64
argument_list|(
name|k2
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c1
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
name|h2
operator|=
name|hash_rotl_64
argument_list|(
name|h2
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h2
operator|=
name|h2
operator|*
literal|5
operator|+
literal|0x38495ab5
expr_stmt|;
block|}
block|}
comment|/* tail */
block|{
specifier|const
name|uint8_t
modifier|*
name|tail
init|=
operator|(
specifier|const
name|uint8_t
operator|*
operator|)
operator|(
name|data
operator|+
name|nblocks
operator|*
literal|16
operator|)
decl_stmt|;
name|uint64_t
name|k1
init|=
literal|0
decl_stmt|;
name|uint64_t
name|k2
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|15
condition|)
block|{
case|case
literal|15
case|:
name|k2
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|14
index|]
argument_list|)
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|14
case|:
name|k2
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|13
index|]
argument_list|)
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|13
case|:
name|k2
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|12
index|]
argument_list|)
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|12
case|:
name|k2
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|11
index|]
argument_list|)
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|11
case|:
name|k2
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|10
index|]
argument_list|)
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|10
case|:
name|k2
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|9
index|]
argument_list|)
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|9
case|:
name|k2
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|8
index|]
argument_list|)
operator|)
operator|<<
literal|0
expr_stmt|;
name|k2
operator|*=
name|c2
expr_stmt|;
name|k2
operator|=
name|hash_rotl_64
argument_list|(
name|k2
argument_list|,
literal|33
argument_list|)
expr_stmt|;
name|k2
operator|*=
name|c1
expr_stmt|;
name|h2
operator|^=
name|k2
expr_stmt|;
case|case
literal|8
case|:
name|k1
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|7
index|]
argument_list|)
operator|)
operator|<<
literal|56
expr_stmt|;
case|case
literal|7
case|:
name|k1
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|6
index|]
argument_list|)
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|6
case|:
name|k1
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|5
index|]
argument_list|)
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|5
case|:
name|k1
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|4
index|]
argument_list|)
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|4
case|:
name|k1
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|3
index|]
argument_list|)
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|k1
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|2
index|]
argument_list|)
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|k1
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|1
index|]
argument_list|)
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|k1
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|tail
index|[
literal|0
index|]
argument_list|)
operator|)
operator|<<
literal|0
expr_stmt|;
name|k1
operator|*=
name|c1
expr_stmt|;
name|k1
operator|=
name|hash_rotl_64
argument_list|(
name|k1
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|k1
operator|*=
name|c2
expr_stmt|;
name|h1
operator|^=
name|k1
expr_stmt|;
block|}
block|}
comment|/* finalization */
name|h1
operator|^=
name|len
expr_stmt|;
name|h2
operator|^=
name|len
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|h1
operator|=
name|hash_fmix_64
argument_list|(
name|h1
argument_list|)
expr_stmt|;
name|h2
operator|=
name|hash_fmix_64
argument_list|(
name|h2
argument_list|)
expr_stmt|;
name|h1
operator|+=
name|h2
expr_stmt|;
name|h2
operator|+=
name|h1
expr_stmt|;
name|r_out
index|[
literal|0
index|]
operator|=
name|h1
expr_stmt|;
name|r_out
index|[
literal|1
index|]
operator|=
name|h2
expr_stmt|;
block|}
end_function

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* API. */
end_comment

begin_function
name|JEMALLOC_INLINE
name|void
name|hash
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|size_t
name|len
parameter_list|,
specifier|const
name|uint32_t
name|seed
parameter_list|,
name|size_t
name|r_hash
index|[
literal|2
index|]
parameter_list|)
block|{
if|#
directive|if
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|3
operator|&&
operator|!
name|defined
argument_list|(
name|JEMALLOC_BIG_ENDIAN
argument_list|)
operator|)
name|hash_x64_128
argument_list|(
name|key
argument_list|,
name|len
argument_list|,
name|seed
argument_list|,
operator|(
name|uint64_t
operator|*
operator|)
name|r_hash
argument_list|)
expr_stmt|;
else|#
directive|else
name|uint64_t
name|hashes
index|[
literal|2
index|]
decl_stmt|;
name|hash_x86_128
argument_list|(
name|key
argument_list|,
name|len
argument_list|,
name|seed
argument_list|,
name|hashes
argument_list|)
expr_stmt|;
name|r_hash
index|[
literal|0
index|]
operator|=
operator|(
name|size_t
operator|)
name|hashes
index|[
literal|0
index|]
expr_stmt|;
name|r_hash
index|[
literal|1
index|]
operator|=
operator|(
name|size_t
operator|)
name|hashes
index|[
literal|1
index|]
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_INLINES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

end_unit

