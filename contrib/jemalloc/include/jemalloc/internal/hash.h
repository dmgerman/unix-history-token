begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_TYPES
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_TYPES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_STRUCTS
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_STRUCTS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_EXTERNS
end_ifdef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_EXTERNS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_INLINES
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_function_decl
name|uint64_t
name|hash
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|size_t
name|len
parameter_list|,
name|uint64_t
name|seed
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_HASH_C_
argument_list|)
operator|)
end_if

begin_comment
comment|/*  * The following hash function is based on MurmurHash64A(), placed into the  * public domain by Austin Appleby.  See http://murmurhash.googlepages.com/ for  * details.  */
end_comment

begin_function
name|JEMALLOC_INLINE
name|uint64_t
name|hash
parameter_list|(
specifier|const
name|void
modifier|*
name|key
parameter_list|,
name|size_t
name|len
parameter_list|,
name|uint64_t
name|seed
parameter_list|)
block|{
specifier|const
name|uint64_t
name|m
init|=
name|UINT64_C
argument_list|(
literal|0xc6a4a7935bd1e995
argument_list|)
decl_stmt|;
specifier|const
name|int
name|r
init|=
literal|47
decl_stmt|;
name|uint64_t
name|h
init|=
name|seed
operator|^
operator|(
name|len
operator|*
name|m
operator|)
decl_stmt|;
specifier|const
name|uint64_t
modifier|*
name|data
init|=
operator|(
specifier|const
name|uint64_t
operator|*
operator|)
name|key
decl_stmt|;
specifier|const
name|uint64_t
modifier|*
name|end
init|=
name|data
operator|+
operator|(
name|len
operator|/
literal|8
operator|)
decl_stmt|;
specifier|const
name|unsigned
name|char
modifier|*
name|data2
decl_stmt|;
name|assert
argument_list|(
operator|(
operator|(
name|uintptr_t
operator|)
name|key
operator|&
literal|0x7
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
while|while
condition|(
name|data
operator|!=
name|end
condition|)
block|{
name|uint64_t
name|k
init|=
operator|*
name|data
operator|++
decl_stmt|;
name|k
operator|*=
name|m
expr_stmt|;
name|k
operator|^=
name|k
operator|>>
name|r
expr_stmt|;
name|k
operator|*=
name|m
expr_stmt|;
name|h
operator|^=
name|k
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
block|}
name|data2
operator|=
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
expr_stmt|;
switch|switch
condition|(
name|len
operator|&
literal|7
condition|)
block|{
case|case
literal|7
case|:
name|h
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|6
index|]
argument_list|)
operator|)
operator|<<
literal|48
expr_stmt|;
case|case
literal|6
case|:
name|h
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|5
index|]
argument_list|)
operator|)
operator|<<
literal|40
expr_stmt|;
case|case
literal|5
case|:
name|h
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|4
index|]
argument_list|)
operator|)
operator|<<
literal|32
expr_stmt|;
case|case
literal|4
case|:
name|h
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|3
index|]
argument_list|)
operator|)
operator|<<
literal|24
expr_stmt|;
case|case
literal|3
case|:
name|h
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|2
index|]
argument_list|)
operator|)
operator|<<
literal|16
expr_stmt|;
case|case
literal|2
case|:
name|h
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|1
index|]
argument_list|)
operator|)
operator|<<
literal|8
expr_stmt|;
case|case
literal|1
case|:
name|h
operator|^=
operator|(
call|(
name|uint64_t
call|)
argument_list|(
name|data2
index|[
literal|0
index|]
argument_list|)
operator|)
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
block|}
name|h
operator|^=
name|h
operator|>>
name|r
expr_stmt|;
name|h
operator|*=
name|m
expr_stmt|;
name|h
operator|^=
name|h
operator|>>
name|r
expr_stmt|;
return|return
operator|(
name|h
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_INLINES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

end_unit

