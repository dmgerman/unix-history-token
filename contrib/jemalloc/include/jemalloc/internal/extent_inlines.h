begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_EXTENT_INLINES_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_EXTENT_INLINES_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/mutex.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/mutex_pool.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/pages.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/prng.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ql.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/sz.h"
end_include

begin_function
specifier|static
specifier|inline
name|void
name|extent_lock
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|mutex_pool_lock
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extent_mutex_pool
argument_list|,
operator|(
name|uintptr_t
operator|)
name|extent
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_unlock
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|mutex_pool_unlock
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extent_mutex_pool
argument_list|,
operator|(
name|uintptr_t
operator|)
name|extent
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_lock2
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|extent_t
modifier|*
name|extent1
parameter_list|,
name|extent_t
modifier|*
name|extent2
parameter_list|)
block|{
name|assert
argument_list|(
name|extent1
operator|!=
name|NULL
operator|&&
name|extent2
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|mutex_pool_lock2
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extent_mutex_pool
argument_list|,
operator|(
name|uintptr_t
operator|)
name|extent1
argument_list|,
operator|(
name|uintptr_t
operator|)
name|extent2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_unlock2
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|extent_t
modifier|*
name|extent1
parameter_list|,
name|extent_t
modifier|*
name|extent2
parameter_list|)
block|{
name|assert
argument_list|(
name|extent1
operator|!=
name|NULL
operator|&&
name|extent2
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|mutex_pool_unlock2
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extent_mutex_pool
argument_list|,
operator|(
name|uintptr_t
operator|)
name|extent1
argument_list|,
operator|(
name|uintptr_t
operator|)
name|extent2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|arena_t
modifier|*
name|extent_arena_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|unsigned
name|arena_ind
init|=
call|(
name|unsigned
call|)
argument_list|(
operator|(
name|extent
operator|->
name|e_bits
operator|&
name|EXTENT_BITS_ARENA_MASK
operator|)
operator|>>
name|EXTENT_BITS_ARENA_SHIFT
argument_list|)
decl_stmt|;
comment|/* 	 * The following check is omitted because we should never actually read 	 * a NULL arena pointer. 	 */
if|if
condition|(
name|false
operator|&&
name|arena_ind
operator|>=
name|MALLOCX_ARENA_LIMIT
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|assert
argument_list|(
name|arena_ind
operator|<
name|MALLOCX_ARENA_LIMIT
argument_list|)
expr_stmt|;
return|return
operator|(
name|arena_t
operator|*
operator|)
name|atomic_load_p
argument_list|(
operator|&
name|arenas
index|[
name|arena_ind
index|]
argument_list|,
name|ATOMIC_ACQUIRE
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|szind_t
name|extent_szind_get_maybe_invalid
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|szind_t
name|szind
init|=
call|(
name|szind_t
call|)
argument_list|(
operator|(
name|extent
operator|->
name|e_bits
operator|&
name|EXTENT_BITS_SZIND_MASK
operator|)
operator|>>
name|EXTENT_BITS_SZIND_SHIFT
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|szind
operator|<=
name|NSIZES
argument_list|)
expr_stmt|;
return|return
name|szind
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|szind_t
name|extent_szind_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|szind_t
name|szind
init|=
name|extent_szind_get_maybe_invalid
argument_list|(
name|extent
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|szind
operator|<
name|NSIZES
argument_list|)
expr_stmt|;
comment|/* Never call when "invalid". */
return|return
name|szind
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|size_t
name|extent_usize_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
name|sz_index2size
argument_list|(
name|extent_szind_get
argument_list|(
name|extent
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|size_t
name|extent_sn_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
call|(
name|size_t
call|)
argument_list|(
operator|(
name|extent
operator|->
name|e_bits
operator|&
name|EXTENT_BITS_SN_MASK
operator|)
operator|>>
name|EXTENT_BITS_SN_SHIFT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|extent_state_t
name|extent_state_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
call|(
name|extent_state_t
call|)
argument_list|(
operator|(
name|extent
operator|->
name|e_bits
operator|&
name|EXTENT_BITS_STATE_MASK
operator|)
operator|>>
name|EXTENT_BITS_STATE_SHIFT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|extent_zeroed_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
call|(
name|bool
call|)
argument_list|(
operator|(
name|extent
operator|->
name|e_bits
operator|&
name|EXTENT_BITS_ZEROED_MASK
operator|)
operator|>>
name|EXTENT_BITS_ZEROED_SHIFT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|extent_committed_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
call|(
name|bool
call|)
argument_list|(
operator|(
name|extent
operator|->
name|e_bits
operator|&
name|EXTENT_BITS_COMMITTED_MASK
operator|)
operator|>>
name|EXTENT_BITS_COMMITTED_SHIFT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|extent_slab_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
call|(
name|bool
call|)
argument_list|(
operator|(
name|extent
operator|->
name|e_bits
operator|&
name|EXTENT_BITS_SLAB_MASK
operator|)
operator|>>
name|EXTENT_BITS_SLAB_SHIFT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|unsigned
name|extent_nfree_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
return|return
call|(
name|unsigned
call|)
argument_list|(
operator|(
name|extent
operator|->
name|e_bits
operator|&
name|EXTENT_BITS_NFREE_MASK
operator|)
operator|>>
name|EXTENT_BITS_NFREE_SHIFT
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|extent_base_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent
operator|->
name|e_addr
operator|==
name|PAGE_ADDR2BASE
argument_list|(
name|extent
operator|->
name|e_addr
argument_list|)
operator|||
operator|!
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|PAGE_ADDR2BASE
argument_list|(
name|extent
operator|->
name|e_addr
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|extent_addr_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent
operator|->
name|e_addr
operator|==
name|PAGE_ADDR2BASE
argument_list|(
name|extent
operator|->
name|e_addr
argument_list|)
operator|||
operator|!
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|extent
operator|->
name|e_addr
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|size_t
name|extent_size_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
operator|(
name|extent
operator|->
name|e_size_esn
operator|&
name|EXTENT_SIZE_MASK
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|size_t
name|extent_esn_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
operator|(
name|extent
operator|->
name|e_size_esn
operator|&
name|EXTENT_ESN_MASK
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|size_t
name|extent_bsize_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
name|extent
operator|->
name|e_bsize
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|extent_before_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|extent_base_get
argument_list|(
name|extent
argument_list|)
operator|-
name|PAGE
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|extent_last_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|extent_base_get
argument_list|(
name|extent
argument_list|)
operator|+
name|extent_size_get
argument_list|(
name|extent
argument_list|)
operator|-
name|PAGE
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
modifier|*
name|extent_past_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|extent_base_get
argument_list|(
name|extent
argument_list|)
operator|+
name|extent_size_get
argument_list|(
name|extent
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|arena_slab_data_t
modifier|*
name|extent_slab_data_get
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|&
name|extent
operator|->
name|e_slab_data
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
specifier|const
name|arena_slab_data_t
modifier|*
name|extent_slab_data_get_const
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|&
name|extent
operator|->
name|e_slab_data
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|prof_tctx_t
modifier|*
name|extent_prof_tctx_get
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
return|return
operator|(
name|prof_tctx_t
operator|*
operator|)
name|atomic_load_p
argument_list|(
operator|&
name|extent
operator|->
name|e_prof_tctx
argument_list|,
name|ATOMIC_ACQUIRE
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_arena_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|unsigned
name|arena_ind
init|=
operator|(
name|arena
operator|!=
name|NULL
operator|)
condition|?
name|arena_ind_get
argument_list|(
name|arena
argument_list|)
else|:
operator|(
operator|(
literal|1U
operator|<<
name|MALLOCX_ARENA_BITS
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|extent
operator|->
name|e_bits
operator|=
operator|(
name|extent
operator|->
name|e_bits
operator|&
operator|~
name|EXTENT_BITS_ARENA_MASK
operator|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|arena_ind
operator|<<
name|EXTENT_BITS_ARENA_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_addr_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|)
block|{
name|extent
operator|->
name|e_addr
operator|=
name|addr
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_addr_randomize
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|extent_t
modifier|*
name|extent
parameter_list|,
name|size_t
name|alignment
parameter_list|)
block|{
name|assert
argument_list|(
name|extent_base_get
argument_list|(
name|extent
argument_list|)
operator|==
name|extent_addr_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignment
operator|<
name|PAGE
condition|)
block|{
name|unsigned
name|lg_range
init|=
name|LG_PAGE
operator|-
name|lg_floor
argument_list|(
name|CACHELINE_CEILING
argument_list|(
name|alignment
argument_list|)
argument_list|)
decl_stmt|;
name|size_t
name|r
init|=
name|prng_lg_range_zu
argument_list|(
operator|&
name|extent_arena_get
argument_list|(
name|extent
argument_list|)
operator|->
name|offset_state
argument_list|,
name|lg_range
argument_list|,
name|true
argument_list|)
decl_stmt|;
name|uintptr_t
name|random_offset
init|=
operator|(
operator|(
name|uintptr_t
operator|)
name|r
operator|)
operator|<<
operator|(
name|LG_PAGE
operator|-
name|lg_range
operator|)
decl_stmt|;
name|extent
operator|->
name|e_addr
operator|=
operator|(
name|void
operator|*
operator|)
operator|(
operator|(
name|uintptr_t
operator|)
name|extent
operator|->
name|e_addr
operator|+
name|random_offset
operator|)
expr_stmt|;
name|assert
argument_list|(
name|ALIGNMENT_ADDR2BASE
argument_list|(
name|extent
operator|->
name|e_addr
argument_list|,
name|alignment
argument_list|)
operator|==
name|extent
operator|->
name|e_addr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_size_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|assert
argument_list|(
operator|(
name|size
operator|&
operator|~
name|EXTENT_SIZE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|extent
operator|->
name|e_size_esn
operator|=
name|size
operator||
operator|(
name|extent
operator|->
name|e_size_esn
operator|&
operator|~
name|EXTENT_SIZE_MASK
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_esn_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|size_t
name|esn
parameter_list|)
block|{
name|extent
operator|->
name|e_size_esn
operator|=
operator|(
name|extent
operator|->
name|e_size_esn
operator|&
operator|~
name|EXTENT_ESN_MASK
operator|)
operator||
operator|(
name|esn
operator|&
name|EXTENT_ESN_MASK
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_bsize_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|size_t
name|bsize
parameter_list|)
block|{
name|extent
operator|->
name|e_bsize
operator|=
name|bsize
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_szind_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|szind_t
name|szind
parameter_list|)
block|{
name|assert
argument_list|(
name|szind
operator|<=
name|NSIZES
argument_list|)
expr_stmt|;
comment|/* NSIZES means "invalid". */
name|extent
operator|->
name|e_bits
operator|=
operator|(
name|extent
operator|->
name|e_bits
operator|&
operator|~
name|EXTENT_BITS_SZIND_MASK
operator|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|szind
operator|<<
name|EXTENT_BITS_SZIND_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_nfree_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|unsigned
name|nfree
parameter_list|)
block|{
name|assert
argument_list|(
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|extent
operator|->
name|e_bits
operator|=
operator|(
name|extent
operator|->
name|e_bits
operator|&
operator|~
name|EXTENT_BITS_NFREE_MASK
operator|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|nfree
operator|<<
name|EXTENT_BITS_NFREE_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_nfree_inc
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|extent
operator|->
name|e_bits
operator|+=
operator|(
operator|(
name|uint64_t
operator|)
literal|1U
operator|<<
name|EXTENT_BITS_NFREE_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_nfree_dec
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|assert
argument_list|(
name|extent_slab_get
argument_list|(
name|extent
argument_list|)
argument_list|)
expr_stmt|;
name|extent
operator|->
name|e_bits
operator|-=
operator|(
operator|(
name|uint64_t
operator|)
literal|1U
operator|<<
name|EXTENT_BITS_NFREE_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_sn_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|size_t
name|sn
parameter_list|)
block|{
name|extent
operator|->
name|e_bits
operator|=
operator|(
name|extent
operator|->
name|e_bits
operator|&
operator|~
name|EXTENT_BITS_SN_MASK
operator|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|sn
operator|<<
name|EXTENT_BITS_SN_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_state_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|extent_state_t
name|state
parameter_list|)
block|{
name|extent
operator|->
name|e_bits
operator|=
operator|(
name|extent
operator|->
name|e_bits
operator|&
operator|~
name|EXTENT_BITS_STATE_MASK
operator|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|state
operator|<<
name|EXTENT_BITS_STATE_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_zeroed_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|bool
name|zeroed
parameter_list|)
block|{
name|extent
operator|->
name|e_bits
operator|=
operator|(
name|extent
operator|->
name|e_bits
operator|&
operator|~
name|EXTENT_BITS_ZEROED_MASK
operator|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|zeroed
operator|<<
name|EXTENT_BITS_ZEROED_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_committed_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|bool
name|committed
parameter_list|)
block|{
name|extent
operator|->
name|e_bits
operator|=
operator|(
name|extent
operator|->
name|e_bits
operator|&
operator|~
name|EXTENT_BITS_COMMITTED_MASK
operator|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|committed
operator|<<
name|EXTENT_BITS_COMMITTED_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_slab_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|bool
name|slab
parameter_list|)
block|{
name|extent
operator|->
name|e_bits
operator|=
operator|(
name|extent
operator|->
name|e_bits
operator|&
operator|~
name|EXTENT_BITS_SLAB_MASK
operator|)
operator||
operator|(
operator|(
name|uint64_t
operator|)
name|slab
operator|<<
name|EXTENT_BITS_SLAB_SHIFT
operator|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_prof_tctx_set
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|prof_tctx_t
modifier|*
name|tctx
parameter_list|)
block|{
name|atomic_store_p
argument_list|(
operator|&
name|extent
operator|->
name|e_prof_tctx
argument_list|,
name|tctx
argument_list|,
name|ATOMIC_RELEASE
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_init
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|bool
name|slab
parameter_list|,
name|szind_t
name|szind
parameter_list|,
name|size_t
name|sn
parameter_list|,
name|extent_state_t
name|state
parameter_list|,
name|bool
name|zeroed
parameter_list|,
name|bool
name|committed
parameter_list|)
block|{
name|assert
argument_list|(
name|addr
operator|==
name|PAGE_ADDR2BASE
argument_list|(
name|addr
argument_list|)
operator|||
operator|!
name|slab
argument_list|)
expr_stmt|;
name|extent_arena_set
argument_list|(
name|extent
argument_list|,
name|arena
argument_list|)
expr_stmt|;
name|extent_addr_set
argument_list|(
name|extent
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|extent_size_set
argument_list|(
name|extent
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|extent_slab_set
argument_list|(
name|extent
argument_list|,
name|slab
argument_list|)
expr_stmt|;
name|extent_szind_set
argument_list|(
name|extent
argument_list|,
name|szind
argument_list|)
expr_stmt|;
name|extent_sn_set
argument_list|(
name|extent
argument_list|,
name|sn
argument_list|)
expr_stmt|;
name|extent_state_set
argument_list|(
name|extent
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|extent_zeroed_set
argument_list|(
name|extent
argument_list|,
name|zeroed
argument_list|)
expr_stmt|;
name|extent_committed_set
argument_list|(
name|extent
argument_list|,
name|committed
argument_list|)
expr_stmt|;
name|ql_elm_new
argument_list|(
name|extent
argument_list|,
name|ql_link
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_prof
condition|)
block|{
name|extent_prof_tctx_set
argument_list|(
name|extent
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_binit
parameter_list|(
name|extent_t
modifier|*
name|extent
parameter_list|,
name|void
modifier|*
name|addr
parameter_list|,
name|size_t
name|bsize
parameter_list|,
name|size_t
name|sn
parameter_list|)
block|{
name|extent_arena_set
argument_list|(
name|extent
argument_list|,
name|NULL
argument_list|)
expr_stmt|;
name|extent_addr_set
argument_list|(
name|extent
argument_list|,
name|addr
argument_list|)
expr_stmt|;
name|extent_bsize_set
argument_list|(
name|extent
argument_list|,
name|bsize
argument_list|)
expr_stmt|;
name|extent_slab_set
argument_list|(
name|extent
argument_list|,
name|false
argument_list|)
expr_stmt|;
name|extent_szind_set
argument_list|(
name|extent
argument_list|,
name|NSIZES
argument_list|)
expr_stmt|;
name|extent_sn_set
argument_list|(
name|extent
argument_list|,
name|sn
argument_list|)
expr_stmt|;
name|extent_state_set
argument_list|(
name|extent
argument_list|,
name|extent_state_active
argument_list|)
expr_stmt|;
name|extent_zeroed_set
argument_list|(
name|extent
argument_list|,
name|true
argument_list|)
expr_stmt|;
name|extent_committed_set
argument_list|(
name|extent
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_list_init
parameter_list|(
name|extent_list_t
modifier|*
name|list
parameter_list|)
block|{
name|ql_new
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|extent_t
modifier|*
name|extent_list_first
parameter_list|(
specifier|const
name|extent_list_t
modifier|*
name|list
parameter_list|)
block|{
return|return
name|ql_first
argument_list|(
name|list
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|extent_t
modifier|*
name|extent_list_last
parameter_list|(
specifier|const
name|extent_list_t
modifier|*
name|list
parameter_list|)
block|{
return|return
name|ql_last
argument_list|(
name|list
argument_list|,
name|ql_link
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_list_append
parameter_list|(
name|extent_list_t
modifier|*
name|list
parameter_list|,
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|ql_tail_insert
argument_list|(
name|list
argument_list|,
name|extent
argument_list|,
name|ql_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_list_replace
parameter_list|(
name|extent_list_t
modifier|*
name|list
parameter_list|,
name|extent_t
modifier|*
name|to_remove
parameter_list|,
name|extent_t
modifier|*
name|to_insert
parameter_list|)
block|{
name|ql_after_insert
argument_list|(
name|to_remove
argument_list|,
name|to_insert
argument_list|,
name|ql_link
argument_list|)
expr_stmt|;
name|ql_remove
argument_list|(
name|list
argument_list|,
name|to_remove
argument_list|,
name|ql_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|extent_list_remove
parameter_list|(
name|extent_list_t
modifier|*
name|list
parameter_list|,
name|extent_t
modifier|*
name|extent
parameter_list|)
block|{
name|ql_remove
argument_list|(
name|list
argument_list|,
name|extent
argument_list|,
name|ql_link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|extent_sn_comp
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|a
parameter_list|,
specifier|const
name|extent_t
modifier|*
name|b
parameter_list|)
block|{
name|size_t
name|a_sn
init|=
name|extent_sn_get
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|size_t
name|b_sn
init|=
name|extent_sn_get
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
operator|(
name|a_sn
operator|>
name|b_sn
operator|)
operator|-
operator|(
name|a_sn
operator|<
name|b_sn
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|extent_esn_comp
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|a
parameter_list|,
specifier|const
name|extent_t
modifier|*
name|b
parameter_list|)
block|{
name|size_t
name|a_esn
init|=
name|extent_esn_get
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|size_t
name|b_esn
init|=
name|extent_esn_get
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
operator|(
name|a_esn
operator|>
name|b_esn
operator|)
operator|-
operator|(
name|a_esn
operator|<
name|b_esn
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|extent_ad_comp
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|a
parameter_list|,
specifier|const
name|extent_t
modifier|*
name|b
parameter_list|)
block|{
name|uintptr_t
name|a_addr
init|=
operator|(
name|uintptr_t
operator|)
name|extent_addr_get
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|uintptr_t
name|b_addr
init|=
operator|(
name|uintptr_t
operator|)
name|extent_addr_get
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
operator|(
name|a_addr
operator|>
name|b_addr
operator|)
operator|-
operator|(
name|a_addr
operator|<
name|b_addr
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|extent_ead_comp
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|a
parameter_list|,
specifier|const
name|extent_t
modifier|*
name|b
parameter_list|)
block|{
name|uintptr_t
name|a_eaddr
init|=
operator|(
name|uintptr_t
operator|)
name|a
decl_stmt|;
name|uintptr_t
name|b_eaddr
init|=
operator|(
name|uintptr_t
operator|)
name|b
decl_stmt|;
return|return
operator|(
name|a_eaddr
operator|>
name|b_eaddr
operator|)
operator|-
operator|(
name|a_eaddr
operator|<
name|b_eaddr
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|extent_snad_comp
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|a
parameter_list|,
specifier|const
name|extent_t
modifier|*
name|b
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|ret
operator|=
name|extent_sn_comp
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
name|ret
operator|=
name|extent_ad_comp
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|extent_esnead_comp
parameter_list|(
specifier|const
name|extent_t
modifier|*
name|a
parameter_list|,
specifier|const
name|extent_t
modifier|*
name|b
parameter_list|)
block|{
name|int
name|ret
decl_stmt|;
name|ret
operator|=
name|extent_esn_comp
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|!=
literal|0
condition|)
block|{
return|return
name|ret
return|;
block|}
name|ret
operator|=
name|extent_ead_comp
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_EXTENT_INLINES_H */
end_comment

end_unit

