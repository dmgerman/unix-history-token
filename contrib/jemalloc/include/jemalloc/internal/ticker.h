begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_TICKER_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_TICKER_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/util.h"
end_include

begin_comment
comment|/**  * A ticker makes it easy to count-down events until some limit.  You  * ticker_init the ticker to trigger every nticks events.  You then notify it  * that an event has occurred with calls to ticker_tick (or that nticks events  * have occurred with a call to ticker_ticks), which will return true (and reset  * the counter) if the countdown hit zero.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int32_t
name|tick
decl_stmt|;
name|int32_t
name|nticks
decl_stmt|;
block|}
name|ticker_t
typedef|;
end_typedef

begin_function
specifier|static
specifier|inline
name|void
name|ticker_init
parameter_list|(
name|ticker_t
modifier|*
name|ticker
parameter_list|,
name|int32_t
name|nticks
parameter_list|)
block|{
name|ticker
operator|->
name|tick
operator|=
name|nticks
expr_stmt|;
name|ticker
operator|->
name|nticks
operator|=
name|nticks
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|ticker_copy
parameter_list|(
name|ticker_t
modifier|*
name|ticker
parameter_list|,
specifier|const
name|ticker_t
modifier|*
name|other
parameter_list|)
block|{
operator|*
name|ticker
operator|=
operator|*
name|other
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int32_t
name|ticker_read
parameter_list|(
specifier|const
name|ticker_t
modifier|*
name|ticker
parameter_list|)
block|{
return|return
name|ticker
operator|->
name|tick
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|ticker_ticks
parameter_list|(
name|ticker_t
modifier|*
name|ticker
parameter_list|,
name|int32_t
name|nticks
parameter_list|)
block|{
if|if
condition|(
name|unlikely
argument_list|(
name|ticker
operator|->
name|tick
operator|<
name|nticks
argument_list|)
condition|)
block|{
name|ticker
operator|->
name|tick
operator|=
name|ticker
operator|->
name|nticks
expr_stmt|;
return|return
name|true
return|;
block|}
name|ticker
operator|->
name|tick
operator|-=
name|nticks
expr_stmt|;
return|return
operator|(
name|false
operator|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|ticker_tick
parameter_list|(
name|ticker_t
modifier|*
name|ticker
parameter_list|)
block|{
return|return
name|ticker_ticks
argument_list|(
name|ticker
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_TICKER_H */
end_comment

end_unit

