begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_WITNESS_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_WITNESS_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/ql.h"
end_include

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* LOCK RANKS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/*  * Witnesses with rank WITNESS_RANK_OMIT are completely ignored by the witness  * machinery.  */
end_comment

begin_define
define|#
directive|define
name|WITNESS_RANK_OMIT
value|0U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_MIN
value|1U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_INIT
value|1U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_CTL
value|1U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_TCACHES
value|2U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_ARENAS
value|3U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_BACKGROUND_THREAD_GLOBAL
value|4U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_DUMP
value|5U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_BT2GCTX
value|6U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_TDATAS
value|7U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_TDATA
value|8U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_GCTX
value|9U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_BACKGROUND_THREAD
value|10U
end_define

begin_comment
comment|/*  * Used as an argument to witness_assert_depth_to_rank() in order to validate  * depth excluding non-core locks with lower ranks.  Since the rank argument to  * witness_assert_depth_to_rank() is inclusive rather than exclusive, this  * definition can have the same value as the minimally ranked core lock.  */
end_comment

begin_define
define|#
directive|define
name|WITNESS_RANK_CORE
value|11U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_DECAY
value|11U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_TCACHE_QL
value|12U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_EXTENT_GROW
value|13U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_EXTENTS
value|14U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_EXTENT_AVAIL
value|15U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_EXTENT_POOL
value|16U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_RTREE
value|17U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_BASE
value|18U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_ARENA_LARGE
value|19U
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_LEAF
value|0xffffffffU
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_ARENA_BIN
value|WITNESS_RANK_LEAF
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_ARENA_STATS
value|WITNESS_RANK_LEAF
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_DSS
value|WITNESS_RANK_LEAF
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_ACTIVE
value|WITNESS_RANK_LEAF
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_ACCUM
value|WITNESS_RANK_LEAF
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_DUMP_SEQ
value|WITNESS_RANK_LEAF
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_GDUMP
value|WITNESS_RANK_LEAF
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_NEXT_THR_UID
value|WITNESS_RANK_LEAF
end_define

begin_define
define|#
directive|define
name|WITNESS_RANK_PROF_THREAD_ACTIVE_INIT
value|WITNESS_RANK_LEAF
end_define

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* PER-WITNESS DATA */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|JEMALLOC_DEBUG
argument_list|)
end_if

begin_define
define|#
directive|define
name|WITNESS_INITIALIZER
parameter_list|(
name|name
parameter_list|,
name|rank
parameter_list|)
value|{name, rank, NULL, NULL, {NULL, NULL}}
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|WITNESS_INITIALIZER
parameter_list|(
name|name
parameter_list|,
name|rank
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|struct
name|witness_s
name|witness_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|witness_rank_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ql_head
argument_list|(
argument|witness_t
argument_list|)
name|witness_list_t
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
name|witness_comp_t
parameter_list|(
specifier|const
name|witness_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
specifier|const
name|witness_t
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|witness_s
block|{
comment|/* Name, used for printing lock order reversal messages. */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* 	 * Witness rank, where 0 is lowest and UINT_MAX is highest.  Witnesses 	 * must be acquired in order of increasing rank. 	 */
name|witness_rank_t
name|rank
decl_stmt|;
comment|/* 	 * If two witnesses are of equal rank and they have the samp comp 	 * function pointer, it is called as a last attempt to differentiate 	 * between witnesses of equal rank. 	 */
name|witness_comp_t
modifier|*
name|comp
decl_stmt|;
comment|/* Opaque data, passed to comp(). */
name|void
modifier|*
name|opaque
decl_stmt|;
comment|/* Linkage for thread's currently owned locks. */
name|ql_elm
argument_list|(
argument|witness_t
argument_list|)
name|link
expr_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* PER-THREAD DATA */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_typedef
typedef|typedef
name|struct
name|witness_tsd_s
name|witness_tsd_t
typedef|;
end_typedef

begin_struct
struct|struct
name|witness_tsd_s
block|{
name|witness_list_t
name|witnesses
decl_stmt|;
name|bool
name|forking
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|WITNESS_TSD_INITIALIZER
value|{ ql_head_initializer(witnesses), false }
end_define

begin_define
define|#
directive|define
name|WITNESS_TSDN_NULL
value|((witness_tsdn_t *)0)
end_define

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* (PER-THREAD) NULLABILITY HELPERS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_typedef
typedef|typedef
name|struct
name|witness_tsdn_s
name|witness_tsdn_t
typedef|;
end_typedef

begin_struct
struct|struct
name|witness_tsdn_s
block|{
name|witness_tsd_t
name|witness_tsd
decl_stmt|;
block|}
struct|;
end_struct

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|witness_tsdn_t
modifier|*
name|witness_tsd_tsdn
parameter_list|(
name|witness_tsd_t
modifier|*
name|witness_tsd
parameter_list|)
block|{
return|return
operator|(
name|witness_tsdn_t
operator|*
operator|)
name|witness_tsd
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|bool
name|witness_tsdn_null
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|)
block|{
return|return
name|witness_tsdn
operator|==
name|NULL
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|witness_tsd_t
modifier|*
name|witness_tsdn_tsd
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|witness_tsdn_null
argument_list|(
name|witness_tsdn
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|&
name|witness_tsdn
operator|->
name|witness_tsd
return|;
block|}
end_function

begin_comment
comment|/******************************************************************************/
end_comment

begin_comment
comment|/* API */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_function_decl
name|void
name|witness_init
parameter_list|(
name|witness_t
modifier|*
name|witness
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|witness_rank_t
name|rank
parameter_list|,
name|witness_comp_t
modifier|*
name|comp
parameter_list|,
name|void
modifier|*
name|opaque
parameter_list|)
function_decl|;
end_function_decl

begin_typedef
typedef|typedef
name|void
function_decl|(
name|witness_lock_error_t
function_decl|)
parameter_list|(
specifier|const
name|witness_list_t
modifier|*
parameter_list|,
specifier|const
name|witness_t
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|witness_lock_error_t
modifier|*
name|JET_MUTABLE
name|witness_lock_error
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|void
function_decl|(
name|witness_owner_error_t
function_decl|)
parameter_list|(
specifier|const
name|witness_t
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|witness_owner_error_t
modifier|*
name|JET_MUTABLE
name|witness_owner_error
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|void
function_decl|(
name|witness_not_owner_error_t
function_decl|)
parameter_list|(
specifier|const
name|witness_t
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|witness_not_owner_error_t
modifier|*
name|JET_MUTABLE
name|witness_not_owner_error
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|void
function_decl|(
name|witness_depth_error_t
function_decl|)
parameter_list|(
specifier|const
name|witness_list_t
modifier|*
parameter_list|,
name|witness_rank_t
name|rank_inclusive
parameter_list|,
name|unsigned
name|depth
parameter_list|)
function_decl|;
end_typedef

begin_decl_stmt
specifier|extern
name|witness_depth_error_t
modifier|*
name|JET_MUTABLE
name|witness_depth_error
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|witnesses_cleanup
parameter_list|(
name|witness_tsd_t
modifier|*
name|witness_tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|witness_prefork
parameter_list|(
name|witness_tsd_t
modifier|*
name|witness_tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|witness_postfork_parent
parameter_list|(
name|witness_tsd_t
modifier|*
name|witness_tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|witness_postfork_child
parameter_list|(
name|witness_tsd_t
modifier|*
name|witness_tsd
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Helper, not intended for direct use. */
end_comment

begin_function
specifier|static
specifier|inline
name|bool
name|witness_owner
parameter_list|(
name|witness_tsd_t
modifier|*
name|witness_tsd
parameter_list|,
specifier|const
name|witness_t
modifier|*
name|witness
parameter_list|)
block|{
name|witness_list_t
modifier|*
name|witnesses
decl_stmt|;
name|witness_t
modifier|*
name|w
decl_stmt|;
name|cassert
argument_list|(
name|config_debug
argument_list|)
expr_stmt|;
name|witnesses
operator|=
operator|&
name|witness_tsd
operator|->
name|witnesses
expr_stmt|;
name|ql_foreach
argument_list|(
argument|w
argument_list|,
argument|witnesses
argument_list|,
argument|link
argument_list|)
block|{
if|if
condition|(
name|w
operator|==
name|witness
condition|)
block|{
return|return
name|true
return|;
block|}
block|}
return|return
name|false
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|witness_assert_owner
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|,
specifier|const
name|witness_t
modifier|*
name|witness
parameter_list|)
block|{
name|witness_tsd_t
modifier|*
name|witness_tsd
decl_stmt|;
if|if
condition|(
operator|!
name|config_debug
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|witness_tsdn_null
argument_list|(
name|witness_tsdn
argument_list|)
condition|)
block|{
return|return;
block|}
name|witness_tsd
operator|=
name|witness_tsdn_tsd
argument_list|(
name|witness_tsdn
argument_list|)
expr_stmt|;
if|if
condition|(
name|witness
operator|->
name|rank
operator|==
name|WITNESS_RANK_OMIT
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|witness_owner
argument_list|(
name|witness_tsd
argument_list|,
name|witness
argument_list|)
condition|)
block|{
return|return;
block|}
name|witness_owner_error
argument_list|(
name|witness
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|witness_assert_not_owner
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|,
specifier|const
name|witness_t
modifier|*
name|witness
parameter_list|)
block|{
name|witness_tsd_t
modifier|*
name|witness_tsd
decl_stmt|;
name|witness_list_t
modifier|*
name|witnesses
decl_stmt|;
name|witness_t
modifier|*
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|config_debug
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|witness_tsdn_null
argument_list|(
name|witness_tsdn
argument_list|)
condition|)
block|{
return|return;
block|}
name|witness_tsd
operator|=
name|witness_tsdn_tsd
argument_list|(
name|witness_tsdn
argument_list|)
expr_stmt|;
if|if
condition|(
name|witness
operator|->
name|rank
operator|==
name|WITNESS_RANK_OMIT
condition|)
block|{
return|return;
block|}
name|witnesses
operator|=
operator|&
name|witness_tsd
operator|->
name|witnesses
expr_stmt|;
name|ql_foreach
argument_list|(
argument|w
argument_list|,
argument|witnesses
argument_list|,
argument|link
argument_list|)
block|{
if|if
condition|(
name|w
operator|==
name|witness
condition|)
block|{
name|witness_not_owner_error
argument_list|(
name|witness
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|witness_assert_depth_to_rank
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|,
name|witness_rank_t
name|rank_inclusive
parameter_list|,
name|unsigned
name|depth
parameter_list|)
block|{
name|witness_tsd_t
modifier|*
name|witness_tsd
decl_stmt|;
name|unsigned
name|d
decl_stmt|;
name|witness_list_t
modifier|*
name|witnesses
decl_stmt|;
name|witness_t
modifier|*
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|config_debug
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|witness_tsdn_null
argument_list|(
name|witness_tsdn
argument_list|)
condition|)
block|{
return|return;
block|}
name|witness_tsd
operator|=
name|witness_tsdn_tsd
argument_list|(
name|witness_tsdn
argument_list|)
expr_stmt|;
name|d
operator|=
literal|0
expr_stmt|;
name|witnesses
operator|=
operator|&
name|witness_tsd
operator|->
name|witnesses
expr_stmt|;
name|w
operator|=
name|ql_last
argument_list|(
name|witnesses
argument_list|,
name|link
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|!=
name|NULL
condition|)
block|{
name|ql_reverse_foreach
argument_list|(
argument|w
argument_list|,
argument|witnesses
argument_list|,
argument|link
argument_list|)
block|{
if|if
condition|(
name|w
operator|->
name|rank
operator|<
name|rank_inclusive
condition|)
block|{
break|break;
block|}
name|d
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|d
operator|!=
name|depth
condition|)
block|{
name|witness_depth_error
argument_list|(
name|witnesses
argument_list|,
name|rank_inclusive
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|witness_assert_depth
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|,
name|unsigned
name|depth
parameter_list|)
block|{
name|witness_assert_depth_to_rank
argument_list|(
name|witness_tsdn
argument_list|,
name|WITNESS_RANK_MIN
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|witness_assert_lockless
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|)
block|{
name|witness_assert_depth
argument_list|(
name|witness_tsdn
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|witness_lock
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|,
name|witness_t
modifier|*
name|witness
parameter_list|)
block|{
name|witness_tsd_t
modifier|*
name|witness_tsd
decl_stmt|;
name|witness_list_t
modifier|*
name|witnesses
decl_stmt|;
name|witness_t
modifier|*
name|w
decl_stmt|;
if|if
condition|(
operator|!
name|config_debug
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|witness_tsdn_null
argument_list|(
name|witness_tsdn
argument_list|)
condition|)
block|{
return|return;
block|}
name|witness_tsd
operator|=
name|witness_tsdn_tsd
argument_list|(
name|witness_tsdn
argument_list|)
expr_stmt|;
if|if
condition|(
name|witness
operator|->
name|rank
operator|==
name|WITNESS_RANK_OMIT
condition|)
block|{
return|return;
block|}
name|witness_assert_not_owner
argument_list|(
name|witness_tsdn
argument_list|,
name|witness
argument_list|)
expr_stmt|;
name|witnesses
operator|=
operator|&
name|witness_tsd
operator|->
name|witnesses
expr_stmt|;
name|w
operator|=
name|ql_last
argument_list|(
name|witnesses
argument_list|,
name|link
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|==
name|NULL
condition|)
block|{
comment|/* No other locks; do nothing. */
block|}
elseif|else
if|if
condition|(
name|witness_tsd
operator|->
name|forking
operator|&&
name|w
operator|->
name|rank
operator|<=
name|witness
operator|->
name|rank
condition|)
block|{
comment|/* Forking, and relaxed ranking satisfied. */
block|}
elseif|else
if|if
condition|(
name|w
operator|->
name|rank
operator|>
name|witness
operator|->
name|rank
condition|)
block|{
comment|/* Not forking, rank order reversal. */
name|witness_lock_error
argument_list|(
name|witnesses
argument_list|,
name|witness
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|w
operator|->
name|rank
operator|==
name|witness
operator|->
name|rank
operator|&&
operator|(
name|w
operator|->
name|comp
operator|==
name|NULL
operator|||
name|w
operator|->
name|comp
operator|!=
name|witness
operator|->
name|comp
operator|||
name|w
operator|->
name|comp
argument_list|(
name|w
argument_list|,
name|w
operator|->
name|opaque
argument_list|,
name|witness
argument_list|,
name|witness
operator|->
name|opaque
argument_list|)
operator|>
literal|0
operator|)
condition|)
block|{
comment|/* 		 * Missing/incompatible comparison function, or comparison 		 * function indicates rank order reversal. 		 */
name|witness_lock_error
argument_list|(
name|witnesses
argument_list|,
name|witness
argument_list|)
expr_stmt|;
block|}
name|ql_elm_new
argument_list|(
name|witness
argument_list|,
name|link
argument_list|)
expr_stmt|;
name|ql_tail_insert
argument_list|(
name|witnesses
argument_list|,
name|witness
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|witness_unlock
parameter_list|(
name|witness_tsdn_t
modifier|*
name|witness_tsdn
parameter_list|,
name|witness_t
modifier|*
name|witness
parameter_list|)
block|{
name|witness_tsd_t
modifier|*
name|witness_tsd
decl_stmt|;
name|witness_list_t
modifier|*
name|witnesses
decl_stmt|;
if|if
condition|(
operator|!
name|config_debug
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|witness_tsdn_null
argument_list|(
name|witness_tsdn
argument_list|)
condition|)
block|{
return|return;
block|}
name|witness_tsd
operator|=
name|witness_tsdn_tsd
argument_list|(
name|witness_tsdn
argument_list|)
expr_stmt|;
if|if
condition|(
name|witness
operator|->
name|rank
operator|==
name|WITNESS_RANK_OMIT
condition|)
block|{
return|return;
block|}
comment|/* 	 * Check whether owner before removal, rather than relying on 	 * witness_assert_owner() to abort, so that unit tests can test this 	 * function's failure mode without causing undefined behavior. 	 */
if|if
condition|(
name|witness_owner
argument_list|(
name|witness_tsd
argument_list|,
name|witness
argument_list|)
condition|)
block|{
name|witnesses
operator|=
operator|&
name|witness_tsd
operator|->
name|witnesses
expr_stmt|;
name|ql_remove
argument_list|(
name|witnesses
argument_list|,
name|witness
argument_list|,
name|link
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|witness_assert_owner
argument_list|(
name|witness_tsdn
argument_list|,
name|witness
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_WITNESS_H */
end_comment

end_unit

