begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_INTERNAL_TSD_GENERIC_H
end_ifdef

begin_error
error|#
directive|error
error|This file should be included only once, by tsd.h.
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_TSD_GENERIC_H
end_define

begin_typedef
typedef|typedef
name|struct
name|tsd_init_block_s
name|tsd_init_block_t
typedef|;
end_typedef

begin_struct
struct|struct
name|tsd_init_block_s
block|{
name|ql_elm
argument_list|(
argument|tsd_init_block_t
argument_list|)
name|link
expr_stmt|;
name|pthread_t
name|thread
decl_stmt|;
name|void
modifier|*
name|data
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Defined in tsd.c, to allow the mutex headers to have tsd dependencies. */
end_comment

begin_typedef
typedef|typedef
name|struct
name|tsd_init_head_s
name|tsd_init_head_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|bool
name|initialized
decl_stmt|;
name|tsd_t
name|val
decl_stmt|;
block|}
name|tsd_wrapper_t
typedef|;
end_typedef

begin_function_decl
name|void
modifier|*
name|tsd_init_check_recursion
parameter_list|(
name|tsd_init_head_t
modifier|*
name|head
parameter_list|,
name|tsd_init_block_t
modifier|*
name|block
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tsd_init_finish
parameter_list|(
name|tsd_init_head_t
modifier|*
name|head
parameter_list|,
name|tsd_init_block_t
modifier|*
name|block
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|pthread_key_t
name|tsd_tsd
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|tsd_init_head_t
name|tsd_init_head
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|tsd_wrapper_t
name|tsd_boot_wrapper
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bool
name|tsd_booted
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Initialization/cleanup. */
end_comment

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tsd_cleanup_wrapper
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
block|{
name|tsd_wrapper_t
modifier|*
name|wrapper
init|=
operator|(
name|tsd_wrapper_t
operator|*
operator|)
name|arg
decl_stmt|;
if|if
condition|(
name|wrapper
operator|->
name|initialized
condition|)
block|{
name|wrapper
operator|->
name|initialized
operator|=
name|false
expr_stmt|;
name|tsd_cleanup
argument_list|(
operator|&
name|wrapper
operator|->
name|val
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapper
operator|->
name|initialized
condition|)
block|{
comment|/* Trigger another cleanup round. */
if|if
condition|(
name|pthread_setspecific
argument_list|(
name|tsd_tsd
argument_list|,
operator|(
name|void
operator|*
operator|)
name|wrapper
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|malloc_write
argument_list|(
literal|"<jemalloc>: Error setting TSD\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt_abort
condition|)
block|{
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
return|return;
block|}
block|}
name|malloc_tsd_dalloc
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tsd_wrapper_set
parameter_list|(
name|tsd_wrapper_t
modifier|*
name|wrapper
parameter_list|)
block|{
if|if
condition|(
name|pthread_setspecific
argument_list|(
name|tsd_tsd
argument_list|,
operator|(
name|void
operator|*
operator|)
name|wrapper
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|malloc_write
argument_list|(
literal|"<jemalloc>: Error setting TSD\n"
argument_list|)
expr_stmt|;
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|tsd_wrapper_t
modifier|*
name|tsd_wrapper_get
parameter_list|(
name|bool
name|init
parameter_list|)
block|{
name|tsd_wrapper_t
modifier|*
name|wrapper
init|=
operator|(
name|tsd_wrapper_t
operator|*
operator|)
name|pthread_getspecific
argument_list|(
name|tsd_tsd
argument_list|)
decl_stmt|;
if|if
condition|(
name|init
operator|&&
name|unlikely
argument_list|(
name|wrapper
operator|==
name|NULL
argument_list|)
condition|)
block|{
name|tsd_init_block_t
name|block
decl_stmt|;
name|wrapper
operator|=
operator|(
name|tsd_wrapper_t
operator|*
operator|)
name|tsd_init_check_recursion
argument_list|(
operator|&
name|tsd_init_head
argument_list|,
operator|&
name|block
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapper
condition|)
block|{
return|return
name|wrapper
return|;
block|}
name|wrapper
operator|=
operator|(
name|tsd_wrapper_t
operator|*
operator|)
name|malloc_tsd_malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|tsd_wrapper_t
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|.
name|data
operator|=
operator|(
name|void
operator|*
operator|)
name|wrapper
expr_stmt|;
if|if
condition|(
name|wrapper
operator|==
name|NULL
condition|)
block|{
name|malloc_write
argument_list|(
literal|"<jemalloc>: Error allocating TSD\n"
argument_list|)
expr_stmt|;
name|abort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wrapper
operator|->
name|initialized
operator|=
name|false
expr_stmt|;
name|tsd_t
name|initializer
init|=
name|TSD_INITIALIZER
decl_stmt|;
name|wrapper
operator|->
name|val
operator|=
name|initializer
expr_stmt|;
block|}
name|tsd_wrapper_set
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
name|tsd_init_finish
argument_list|(
operator|&
name|tsd_init_head
argument_list|,
operator|&
name|block
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapper
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|bool
name|tsd_boot0
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
name|pthread_key_create
argument_list|(
operator|&
name|tsd_tsd
argument_list|,
name|tsd_cleanup_wrapper
argument_list|)
operator|!=
literal|0
condition|)
block|{
return|return
name|true
return|;
block|}
name|tsd_wrapper_set
argument_list|(
operator|&
name|tsd_boot_wrapper
argument_list|)
expr_stmt|;
name|tsd_booted
operator|=
name|true
expr_stmt|;
return|return
name|false
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tsd_boot1
parameter_list|(
name|void
parameter_list|)
block|{
name|tsd_wrapper_t
modifier|*
name|wrapper
decl_stmt|;
name|wrapper
operator|=
operator|(
name|tsd_wrapper_t
operator|*
operator|)
name|malloc_tsd_malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|tsd_wrapper_t
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|wrapper
operator|==
name|NULL
condition|)
block|{
name|malloc_write
argument_list|(
literal|"<jemalloc>: Error allocating TSD\n"
argument_list|)
expr_stmt|;
name|abort
argument_list|()
expr_stmt|;
block|}
name|tsd_boot_wrapper
operator|.
name|initialized
operator|=
name|false
expr_stmt|;
name|tsd_cleanup
argument_list|(
operator|&
name|tsd_boot_wrapper
operator|.
name|val
argument_list|)
expr_stmt|;
name|wrapper
operator|->
name|initialized
operator|=
name|false
expr_stmt|;
name|tsd_t
name|initializer
init|=
name|TSD_INITIALIZER
decl_stmt|;
name|wrapper
operator|->
name|val
operator|=
name|initializer
expr_stmt|;
name|tsd_wrapper_set
argument_list|(
name|wrapper
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|bool
name|tsd_boot
parameter_list|(
name|void
parameter_list|)
block|{
if|if
condition|(
name|tsd_boot0
argument_list|()
condition|)
block|{
return|return
name|true
return|;
block|}
name|tsd_boot1
argument_list|()
expr_stmt|;
return|return
name|false
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|bool
name|tsd_booted_get
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|tsd_booted
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|bool
name|tsd_get_allocates
parameter_list|(
name|void
parameter_list|)
block|{
return|return
name|true
return|;
block|}
end_function

begin_comment
comment|/* Get/set. */
end_comment

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|tsd_t
modifier|*
name|tsd_get
parameter_list|(
name|bool
name|init
parameter_list|)
block|{
name|tsd_wrapper_t
modifier|*
name|wrapper
decl_stmt|;
name|assert
argument_list|(
name|tsd_booted
argument_list|)
expr_stmt|;
name|wrapper
operator|=
name|tsd_wrapper_get
argument_list|(
name|init
argument_list|)
expr_stmt|;
if|if
condition|(
name|tsd_get_allocates
argument_list|()
operator|&&
operator|!
name|init
operator|&&
name|wrapper
operator|==
name|NULL
condition|)
block|{
return|return
name|NULL
return|;
block|}
return|return
operator|&
name|wrapper
operator|->
name|val
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tsd_set
parameter_list|(
name|tsd_t
modifier|*
name|val
parameter_list|)
block|{
name|tsd_wrapper_t
modifier|*
name|wrapper
decl_stmt|;
name|assert
argument_list|(
name|tsd_booted
argument_list|)
expr_stmt|;
name|wrapper
operator|=
name|tsd_wrapper_get
argument_list|(
name|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
operator|&
name|wrapper
operator|->
name|val
operator|!=
name|val
argument_list|)
condition|)
block|{
name|wrapper
operator|->
name|val
operator|=
operator|*
operator|(
name|val
operator|)
expr_stmt|;
block|}
name|wrapper
operator|->
name|initialized
operator|=
name|true
expr_stmt|;
block|}
end_function

end_unit

