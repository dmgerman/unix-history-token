begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_TCACHE_INLINES_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_TCACHE_INLINES_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/jemalloc_internal_types.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/size_classes.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/sz.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ticker.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/util.h"
end_include

begin_function
specifier|static
specifier|inline
name|bool
name|tcache_enabled_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
block|{
return|return
name|tsd_tcache_enabled_get
argument_list|(
name|tsd
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|tcache_enabled_set
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|bool
name|enabled
parameter_list|)
block|{
name|bool
name|was_enabled
init|=
name|tsd_tcache_enabled_get
argument_list|(
name|tsd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|was_enabled
operator|&&
name|enabled
condition|)
block|{
name|tsd_tcache_data_init
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|was_enabled
operator|&&
operator|!
name|enabled
condition|)
block|{
name|tcache_cleanup
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
block|}
comment|/* Commit the state last.  Above calls check current state. */
name|tsd_tcache_enabled_set
argument_list|(
name|tsd
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|tsd_slow_update
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tcache_event
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|)
block|{
if|if
condition|(
name|TCACHE_GC_INCR
operator|==
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|unlikely
argument_list|(
name|ticker_tick
argument_list|(
operator|&
name|tcache
operator|->
name|gc_ticker
argument_list|)
argument_list|)
condition|)
block|{
name|tcache_event_hard
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|tcache_alloc_easy
parameter_list|(
name|tcache_bin_t
modifier|*
name|tbin
parameter_list|,
name|bool
modifier|*
name|tcache_success
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tbin
operator|->
name|ncached
operator|==
literal|0
argument_list|)
condition|)
block|{
name|tbin
operator|->
name|low_water
operator|=
operator|-
literal|1
expr_stmt|;
operator|*
name|tcache_success
operator|=
name|false
expr_stmt|;
return|return
name|NULL
return|;
block|}
comment|/* 	 * tcache_success (instead of ret) should be checked upon the return of 	 * this function.  We avoid checking (ret == NULL) because there is 	 * never a null stored on the avail stack (which is unknown to the 	 * compiler), and eagerly checking ret would cause pipeline stall 	 * (waiting for the cacheline). 	 */
operator|*
name|tcache_success
operator|=
name|true
expr_stmt|;
name|ret
operator|=
operator|*
operator|(
name|tbin
operator|->
name|avail
operator|-
name|tbin
operator|->
name|ncached
operator|)
expr_stmt|;
name|tbin
operator|->
name|ncached
operator|--
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
operator|(
name|low_water_t
operator|)
name|tbin
operator|->
name|ncached
operator|<
name|tbin
operator|->
name|low_water
argument_list|)
condition|)
block|{
name|tbin
operator|->
name|low_water
operator|=
name|tbin
operator|->
name|ncached
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|tcache_alloc_small
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|binind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
name|tcache_bin_t
modifier|*
name|tbin
decl_stmt|;
name|bool
name|tcache_success
decl_stmt|;
name|size_t
name|usize
name|JEMALLOC_CC_SILENCE_INIT
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|binind
operator|<
name|NBINS
argument_list|)
expr_stmt|;
name|tbin
operator|=
name|tcache_small_bin_get
argument_list|(
name|tcache
argument_list|,
name|binind
argument_list|)
expr_stmt|;
name|ret
operator|=
name|tcache_alloc_easy
argument_list|(
name|tbin
argument_list|,
operator|&
name|tcache_success
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|tcache_success
operator|==
operator|(
name|ret
operator|!=
name|NULL
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
operator|!
name|tcache_success
argument_list|)
condition|)
block|{
name|bool
name|tcache_hard_success
decl_stmt|;
name|arena
operator|=
name|arena_choose
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|arena
operator|==
name|NULL
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|ret
operator|=
name|tcache_alloc_small_hard
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|arena
argument_list|,
name|tcache
argument_list|,
name|tbin
argument_list|,
name|binind
argument_list|,
operator|&
name|tcache_hard_success
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcache_hard_success
operator|==
name|false
condition|)
block|{
return|return
name|NULL
return|;
block|}
block|}
name|assert
argument_list|(
name|ret
argument_list|)
expr_stmt|;
comment|/* 	 * Only compute usize if required.  The checks in the following if 	 * statement are all static. 	 */
if|if
condition|(
name|config_prof
operator|||
operator|(
name|slow_path
operator|&&
name|config_fill
operator|)
operator|||
name|unlikely
argument_list|(
name|zero
argument_list|)
condition|)
block|{
name|usize
operator|=
name|sz_index2size
argument_list|(
name|binind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|tcache_salloc
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ret
argument_list|)
operator|==
name|usize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|likely
argument_list|(
operator|!
name|zero
argument_list|)
condition|)
block|{
if|if
condition|(
name|slow_path
operator|&&
name|config_fill
condition|)
block|{
if|if
condition|(
name|unlikely
argument_list|(
name|opt_junk_alloc
argument_list|)
condition|)
block|{
name|arena_alloc_junk_small
argument_list|(
name|ret
argument_list|,
operator|&
name|arena_bin_info
index|[
name|binind
index|]
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unlikely
argument_list|(
name|opt_zero
argument_list|)
condition|)
block|{
name|memset
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|usize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|slow_path
operator|&&
name|config_fill
operator|&&
name|unlikely
argument_list|(
name|opt_junk_alloc
argument_list|)
condition|)
block|{
name|arena_alloc_junk_small
argument_list|(
name|ret
argument_list|,
operator|&
name|arena_bin_info
index|[
name|binind
index|]
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
name|memset
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|usize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config_stats
condition|)
block|{
name|tbin
operator|->
name|tstats
operator|.
name|nrequests
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|config_prof
condition|)
block|{
name|tcache
operator|->
name|prof_accumbytes
operator|+=
name|usize
expr_stmt|;
block|}
name|tcache_event
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|tcache_alloc_large
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|binind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
name|tcache_bin_t
modifier|*
name|tbin
decl_stmt|;
name|bool
name|tcache_success
decl_stmt|;
name|assert
argument_list|(
name|binind
operator|>=
name|NBINS
operator|&&
name|binind
operator|<
name|nhbins
argument_list|)
expr_stmt|;
name|tbin
operator|=
name|tcache_large_bin_get
argument_list|(
name|tcache
argument_list|,
name|binind
argument_list|)
expr_stmt|;
name|ret
operator|=
name|tcache_alloc_easy
argument_list|(
name|tbin
argument_list|,
operator|&
name|tcache_success
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|tcache_success
operator|==
operator|(
name|ret
operator|!=
name|NULL
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
operator|!
name|tcache_success
argument_list|)
condition|)
block|{
comment|/* 		 * Only allocate one large object at a time, because it's quite 		 * expensive to create one and not use it. 		 */
name|arena
operator|=
name|arena_choose
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|arena
operator|==
name|NULL
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
name|ret
operator|=
name|large_malloc
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|arena
argument_list|,
name|sz_s2u
argument_list|(
name|size
argument_list|)
argument_list|,
name|zero
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|NULL
condition|)
block|{
return|return
name|NULL
return|;
block|}
block|}
else|else
block|{
name|size_t
name|usize
name|JEMALLOC_CC_SILENCE_INIT
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/* Only compute usize on demand */
if|if
condition|(
name|config_prof
operator|||
operator|(
name|slow_path
operator|&&
name|config_fill
operator|)
operator|||
name|unlikely
argument_list|(
name|zero
argument_list|)
condition|)
block|{
name|usize
operator|=
name|sz_index2size
argument_list|(
name|binind
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|usize
operator|<=
name|tcache_maxclass
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|likely
argument_list|(
operator|!
name|zero
argument_list|)
condition|)
block|{
if|if
condition|(
name|slow_path
operator|&&
name|config_fill
condition|)
block|{
if|if
condition|(
name|unlikely
argument_list|(
name|opt_junk_alloc
argument_list|)
condition|)
block|{
name|memset
argument_list|(
name|ret
argument_list|,
name|JEMALLOC_ALLOC_JUNK
argument_list|,
name|usize
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|unlikely
argument_list|(
name|opt_zero
argument_list|)
condition|)
block|{
name|memset
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|usize
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|memset
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|usize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config_stats
condition|)
block|{
name|tbin
operator|->
name|tstats
operator|.
name|nrequests
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|config_prof
condition|)
block|{
name|tcache
operator|->
name|prof_accumbytes
operator|+=
name|usize
expr_stmt|;
block|}
block|}
name|tcache_event
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tcache_dalloc_small
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|szind_t
name|binind
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|tcache_bin_t
modifier|*
name|tbin
decl_stmt|;
name|tcache_bin_info_t
modifier|*
name|tbin_info
decl_stmt|;
name|assert
argument_list|(
name|tcache_salloc
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ptr
argument_list|)
operator|<=
name|SMALL_MAXCLASS
argument_list|)
expr_stmt|;
if|if
condition|(
name|slow_path
operator|&&
name|config_fill
operator|&&
name|unlikely
argument_list|(
name|opt_junk_free
argument_list|)
condition|)
block|{
name|arena_dalloc_junk_small
argument_list|(
name|ptr
argument_list|,
operator|&
name|arena_bin_info
index|[
name|binind
index|]
argument_list|)
expr_stmt|;
block|}
name|tbin
operator|=
name|tcache_small_bin_get
argument_list|(
name|tcache
argument_list|,
name|binind
argument_list|)
expr_stmt|;
name|tbin_info
operator|=
operator|&
name|tcache_bin_info
index|[
name|binind
index|]
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tbin
operator|->
name|ncached
operator|==
name|tbin_info
operator|->
name|ncached_max
argument_list|)
condition|)
block|{
name|tcache_bin_flush_small
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|,
name|tbin
argument_list|,
name|binind
argument_list|,
operator|(
name|tbin_info
operator|->
name|ncached_max
operator|>>
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|assert
argument_list|(
name|tbin
operator|->
name|ncached
operator|<
name|tbin_info
operator|->
name|ncached_max
argument_list|)
expr_stmt|;
name|tbin
operator|->
name|ncached
operator|++
expr_stmt|;
operator|*
operator|(
name|tbin
operator|->
name|avail
operator|-
name|tbin
operator|->
name|ncached
operator|)
operator|=
name|ptr
expr_stmt|;
name|tcache_event
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tcache_dalloc_large
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|szind_t
name|binind
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|tcache_bin_t
modifier|*
name|tbin
decl_stmt|;
name|tcache_bin_info_t
modifier|*
name|tbin_info
decl_stmt|;
name|assert
argument_list|(
name|tcache_salloc
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ptr
argument_list|)
operator|>
name|SMALL_MAXCLASS
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|tcache_salloc
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ptr
argument_list|)
operator|<=
name|tcache_maxclass
argument_list|)
expr_stmt|;
if|if
condition|(
name|slow_path
operator|&&
name|config_fill
operator|&&
name|unlikely
argument_list|(
name|opt_junk_free
argument_list|)
condition|)
block|{
name|large_dalloc_junk
argument_list|(
name|ptr
argument_list|,
name|sz_index2size
argument_list|(
name|binind
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tbin
operator|=
name|tcache_large_bin_get
argument_list|(
name|tcache
argument_list|,
name|binind
argument_list|)
expr_stmt|;
name|tbin_info
operator|=
operator|&
name|tcache_bin_info
index|[
name|binind
index|]
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tbin
operator|->
name|ncached
operator|==
name|tbin_info
operator|->
name|ncached_max
argument_list|)
condition|)
block|{
name|tcache_bin_flush_large
argument_list|(
name|tsd
argument_list|,
name|tbin
argument_list|,
name|binind
argument_list|,
operator|(
name|tbin_info
operator|->
name|ncached_max
operator|>>
literal|1
operator|)
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
block|}
name|assert
argument_list|(
name|tbin
operator|->
name|ncached
operator|<
name|tbin_info
operator|->
name|ncached_max
argument_list|)
expr_stmt|;
name|tbin
operator|->
name|ncached
operator|++
expr_stmt|;
operator|*
operator|(
name|tbin
operator|->
name|avail
operator|-
name|tbin
operator|->
name|ncached
operator|)
operator|=
name|ptr
expr_stmt|;
name|tcache_event
argument_list|(
name|tsd
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|tcache_t
modifier|*
name|tcaches_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|ind
parameter_list|)
block|{
name|tcaches_t
modifier|*
name|elm
init|=
operator|&
name|tcaches
index|[
name|ind
index|]
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|elm
operator|->
name|tcache
operator|==
name|NULL
argument_list|)
condition|)
block|{
name|elm
operator|->
name|tcache
operator|=
name|tcache_create_explicit
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
block|}
return|return
name|elm
operator|->
name|tcache
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_TCACHE_INLINES_H */
end_comment

end_unit

