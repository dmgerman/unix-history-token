begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_TYPES
end_ifdef

begin_typedef
typedef|typedef
name|struct
name|tcache_bin_info_s
name|tcache_bin_info_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|tcache_bin_s
name|tcache_bin_t
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|tcache_s
name|tcache_t
typedef|;
end_typedef

begin_comment
comment|/*  * tcache pointers close to NULL are used to encode state information that is  * used for two purposes: preventing thread caching on a per thread basis and  * cleaning up during thread shutdown.  */
end_comment

begin_define
define|#
directive|define
name|TCACHE_STATE_DISABLED
value|((tcache_t *)(uintptr_t)1)
end_define

begin_define
define|#
directive|define
name|TCACHE_STATE_REINCARNATED
value|((tcache_t *)(uintptr_t)2)
end_define

begin_define
define|#
directive|define
name|TCACHE_STATE_PURGATORY
value|((tcache_t *)(uintptr_t)3)
end_define

begin_define
define|#
directive|define
name|TCACHE_STATE_MAX
value|TCACHE_STATE_PURGATORY
end_define

begin_comment
comment|/*  * Absolute maximum number of cache slots for each small bin in the thread  * cache.  This is an additional constraint beyond that imposed as: twice the  * number of regions per run for this size class.  *  * This constant must be an even number.  */
end_comment

begin_define
define|#
directive|define
name|TCACHE_NSLOTS_SMALL_MAX
value|200
end_define

begin_comment
comment|/* Number of cache slots for large size classes. */
end_comment

begin_define
define|#
directive|define
name|TCACHE_NSLOTS_LARGE
value|20
end_define

begin_comment
comment|/* (1U<< opt_lg_tcache_max) is used to compute tcache_maxclass. */
end_comment

begin_define
define|#
directive|define
name|LG_TCACHE_MAXCLASS_DEFAULT
value|15
end_define

begin_comment
comment|/*  * TCACHE_GC_SWEEP is the approximate number of allocation events between  * full GC sweeps.  Integer rounding may cause the actual number to be  * slightly higher, since GC is performed incrementally.  */
end_comment

begin_define
define|#
directive|define
name|TCACHE_GC_SWEEP
value|8192
end_define

begin_comment
comment|/* Number of tcache allocation/deallocation events between incremental GCs. */
end_comment

begin_define
define|#
directive|define
name|TCACHE_GC_INCR
define|\
value|((TCACHE_GC_SWEEP / NBINS) + ((TCACHE_GC_SWEEP / NBINS == 0) ? 0 : 1))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_TYPES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_STRUCTS
end_ifdef

begin_typedef
typedef|typedef
enum|enum
block|{
name|tcache_enabled_false
init|=
literal|0
block|,
comment|/* Enable cast to/from bool. */
name|tcache_enabled_true
init|=
literal|1
block|,
name|tcache_enabled_default
init|=
literal|2
block|}
name|tcache_enabled_t
typedef|;
end_typedef

begin_comment
comment|/*  * Read-only information associated with each element of tcache_t's tbins array  * is stored separately, mainly to reduce memory usage.  */
end_comment

begin_struct
struct|struct
name|tcache_bin_info_s
block|{
name|unsigned
name|ncached_max
decl_stmt|;
comment|/* Upper limit on ncached. */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tcache_bin_s
block|{
name|tcache_bin_stats_t
name|tstats
decl_stmt|;
name|int
name|low_water
decl_stmt|;
comment|/* Min # cached since last GC. */
name|unsigned
name|lg_fill_div
decl_stmt|;
comment|/* Fill (ncached_max>> lg_fill_div). */
name|unsigned
name|ncached
decl_stmt|;
comment|/* # of cached objects. */
name|void
modifier|*
modifier|*
name|avail
decl_stmt|;
comment|/* Stack of available objects. */
block|}
struct|;
end_struct

begin_struct
struct|struct
name|tcache_s
block|{
name|ql_elm
argument_list|(
argument|tcache_t
argument_list|)
name|link
expr_stmt|;
comment|/* Used for aggregating stats. */
name|uint64_t
name|prof_accumbytes
decl_stmt|;
comment|/* Cleared after arena_prof_accum() */
name|arena_t
modifier|*
name|arena
decl_stmt|;
comment|/* This thread's arena. */
name|unsigned
name|ev_cnt
decl_stmt|;
comment|/* Event count since incremental GC. */
name|unsigned
name|next_gc_bin
decl_stmt|;
comment|/* Next bin to GC. */
name|tcache_bin_t
name|tbins
index|[
literal|1
index|]
decl_stmt|;
comment|/* Dynamically sized. */
comment|/* 	 * The pointer stacks associated with tbins follow as a contiguous 	 * array.  During tcache initialization, the avail pointer in each 	 * element of tbins is initialized to point to the proper offset within 	 * this array. 	 */
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_STRUCTS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_EXTERNS
end_ifdef

begin_decl_stmt
specifier|extern
name|bool
name|opt_tcache
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|ssize_t
name|opt_lg_tcache_max
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|tcache_bin_info_t
modifier|*
name|tcache_bin_info
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Number of tcache bins.  There are NBINS small-object bins, plus 0 or more  * large-object bins.  */
end_comment

begin_decl_stmt
specifier|extern
name|size_t
name|nhbins
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Maximum cached size class. */
end_comment

begin_decl_stmt
specifier|extern
name|size_t
name|tcache_maxclass
decl_stmt|;
end_decl_stmt

begin_function_decl
name|size_t
name|tcache_salloc
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_event_hard
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|tcache_alloc_small_hard
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|tcache_bin_t
modifier|*
name|tbin
parameter_list|,
name|size_t
name|binind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_bin_flush_small
parameter_list|(
name|tcache_bin_t
modifier|*
name|tbin
parameter_list|,
name|size_t
name|binind
parameter_list|,
name|unsigned
name|rem
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_bin_flush_large
parameter_list|(
name|tcache_bin_t
modifier|*
name|tbin
parameter_list|,
name|size_t
name|binind
parameter_list|,
name|unsigned
name|rem
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_arena_associate
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_arena_dissociate
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|tcache_t
modifier|*
name|tcache_create
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_destroy
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_thread_cleanup
parameter_list|(
name|void
modifier|*
name|arg
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_stats_merge
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|tcache_boot0
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|tcache_boot1
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_EXTERNS */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_H_INLINES
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_macro
name|malloc_tsd_protos
argument_list|(
argument|JEMALLOC_ATTR(unused)
argument_list|,
argument|tcache
argument_list|,
argument|tcache_t *
argument_list|)
end_macro

begin_macro
name|malloc_tsd_protos
argument_list|(
argument|JEMALLOC_ATTR(unused)
argument_list|,
argument|tcache_enabled
argument_list|,
argument|tcache_enabled_t
argument_list|)
end_macro

begin_function_decl
name|void
name|tcache_event
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_flush
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|tcache_enabled_get
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|tcache_t
modifier|*
name|tcache_get
parameter_list|(
name|bool
name|create
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_enabled_set
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|tcache_alloc_easy
parameter_list|(
name|tcache_bin_t
modifier|*
name|tbin
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|tcache_alloc_small
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|size_t
name|size
parameter_list|,
name|bool
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|tcache_alloc_large
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|size_t
name|size
parameter_list|,
name|bool
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_dalloc_small
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|binind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|tcache_dalloc_large
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_TCACHE_C_
argument_list|)
operator|)
end_if

begin_comment
comment|/* Map of thread-specific caches. */
end_comment

begin_macro
name|malloc_tsd_externs
argument_list|(
argument|tcache
argument_list|,
argument|tcache_t *
argument_list|)
end_macro

begin_macro
name|malloc_tsd_funcs
argument_list|(
argument|JEMALLOC_ALWAYS_INLINE
argument_list|,
argument|tcache
argument_list|,
argument|tcache_t *
argument_list|,
argument|NULL
argument_list|,
argument|tcache_thread_cleanup
argument_list|)
end_macro

begin_comment
comment|/* Per thread flag that allows thread caches to be disabled. */
end_comment

begin_macro
name|malloc_tsd_externs
argument_list|(
argument|tcache_enabled
argument_list|,
argument|tcache_enabled_t
argument_list|)
end_macro

begin_macro
name|malloc_tsd_funcs
argument_list|(
argument|JEMALLOC_ALWAYS_INLINE
argument_list|,
argument|tcache_enabled
argument_list|,
argument|tcache_enabled_t
argument_list|,
argument|tcache_enabled_default
argument_list|,
argument|malloc_tsd_no_cleanup
argument_list|)
end_macro

begin_function
name|JEMALLOC_INLINE
name|void
name|tcache_flush
parameter_list|(
name|void
parameter_list|)
block|{
name|tcache_t
modifier|*
name|tcache
decl_stmt|;
name|cassert
argument_list|(
name|config_tcache
argument_list|)
expr_stmt|;
name|tcache
operator|=
operator|*
name|tcache_tsd_get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|uintptr_t
operator|)
name|tcache
operator|<=
operator|(
name|uintptr_t
operator|)
name|TCACHE_STATE_MAX
condition|)
return|return;
name|tcache_destroy
argument_list|(
name|tcache
argument_list|)
expr_stmt|;
name|tcache
operator|=
name|NULL
expr_stmt|;
name|tcache_tsd_set
argument_list|(
operator|&
name|tcache
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|bool
name|tcache_enabled_get
parameter_list|(
name|void
parameter_list|)
block|{
name|tcache_enabled_t
name|tcache_enabled
decl_stmt|;
name|cassert
argument_list|(
name|config_tcache
argument_list|)
expr_stmt|;
name|tcache_enabled
operator|=
operator|*
name|tcache_enabled_tsd_get
argument_list|()
expr_stmt|;
if|if
condition|(
name|tcache_enabled
operator|==
name|tcache_enabled_default
condition|)
block|{
name|tcache_enabled
operator|=
operator|(
name|tcache_enabled_t
operator|)
name|opt_tcache
expr_stmt|;
name|tcache_enabled_tsd_set
argument_list|(
operator|&
name|tcache_enabled
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|bool
operator|)
name|tcache_enabled
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|void
name|tcache_enabled_set
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
name|tcache_enabled_t
name|tcache_enabled
decl_stmt|;
name|tcache_t
modifier|*
name|tcache
decl_stmt|;
name|cassert
argument_list|(
name|config_tcache
argument_list|)
expr_stmt|;
name|tcache_enabled
operator|=
operator|(
name|tcache_enabled_t
operator|)
name|enabled
expr_stmt|;
name|tcache_enabled_tsd_set
argument_list|(
operator|&
name|tcache_enabled
argument_list|)
expr_stmt|;
name|tcache
operator|=
operator|*
name|tcache_tsd_get
argument_list|()
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
if|if
condition|(
name|tcache
operator|==
name|TCACHE_STATE_DISABLED
condition|)
block|{
name|tcache
operator|=
name|NULL
expr_stmt|;
name|tcache_tsd_set
argument_list|(
operator|&
name|tcache
argument_list|)
expr_stmt|;
block|}
block|}
else|else
comment|/* disabled */
block|{
if|if
condition|(
name|tcache
operator|>
name|TCACHE_STATE_MAX
condition|)
block|{
name|tcache_destroy
argument_list|(
name|tcache
argument_list|)
expr_stmt|;
name|tcache
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
name|tcache
operator|==
name|NULL
condition|)
block|{
name|tcache
operator|=
name|TCACHE_STATE_DISABLED
expr_stmt|;
name|tcache_tsd_set
argument_list|(
operator|&
name|tcache
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|tcache_t
modifier|*
name|tcache_get
parameter_list|(
name|bool
name|create
parameter_list|)
block|{
name|tcache_t
modifier|*
name|tcache
decl_stmt|;
if|if
condition|(
name|config_tcache
operator|==
name|false
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
if|if
condition|(
name|config_lazy_lock
operator|&&
name|isthreaded
operator|==
name|false
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|tcache
operator|=
operator|*
name|tcache_tsd_get
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|uintptr_t
operator|)
name|tcache
operator|<=
operator|(
name|uintptr_t
operator|)
name|TCACHE_STATE_MAX
condition|)
block|{
if|if
condition|(
name|tcache
operator|==
name|TCACHE_STATE_DISABLED
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
if|if
condition|(
name|tcache
operator|==
name|NULL
condition|)
block|{
if|if
condition|(
name|create
operator|==
name|false
condition|)
block|{
comment|/* 				 * Creating a tcache here would cause 				 * allocation as a side effect of free(). 				 * Ordinarily that would be okay since 				 * tcache_create() failure is a soft failure 				 * that doesn't propagate.  However, if TLS 				 * data are freed via free() as in glibc, 				 * subtle corruption could result from setting 				 * a TLS variable after its backing memory is 				 * freed. 				 */
return|return
operator|(
name|NULL
operator|)
return|;
block|}
if|if
condition|(
name|tcache_enabled_get
argument_list|()
operator|==
name|false
condition|)
block|{
name|tcache_enabled_set
argument_list|(
name|false
argument_list|)
expr_stmt|;
comment|/* Memoize. */
return|return
operator|(
name|NULL
operator|)
return|;
block|}
return|return
operator|(
name|tcache_create
argument_list|(
name|choose_arena
argument_list|(
name|NULL
argument_list|)
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|tcache
operator|==
name|TCACHE_STATE_PURGATORY
condition|)
block|{
comment|/* 			 * Make a note that an allocator function was called 			 * after tcache_thread_cleanup() was called. 			 */
name|tcache
operator|=
name|TCACHE_STATE_REINCARNATED
expr_stmt|;
name|tcache_tsd_set
argument_list|(
operator|&
name|tcache
argument_list|)
expr_stmt|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
if|if
condition|(
name|tcache
operator|==
name|TCACHE_STATE_REINCARNATED
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|not_reached
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|tcache
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tcache_event
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|)
block|{
if|if
condition|(
name|TCACHE_GC_INCR
operator|==
literal|0
condition|)
return|return;
name|tcache
operator|->
name|ev_cnt
operator|++
expr_stmt|;
name|assert
argument_list|(
name|tcache
operator|->
name|ev_cnt
operator|<=
name|TCACHE_GC_INCR
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcache
operator|->
name|ev_cnt
operator|==
name|TCACHE_GC_INCR
condition|)
name|tcache_event_hard
argument_list|(
name|tcache
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|tcache_alloc_easy
parameter_list|(
name|tcache_bin_t
modifier|*
name|tbin
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
if|if
condition|(
name|tbin
operator|->
name|ncached
operator|==
literal|0
condition|)
block|{
name|tbin
operator|->
name|low_water
operator|=
operator|-
literal|1
expr_stmt|;
return|return
operator|(
name|NULL
operator|)
return|;
block|}
name|tbin
operator|->
name|ncached
operator|--
expr_stmt|;
if|if
condition|(
operator|(
name|int
operator|)
name|tbin
operator|->
name|ncached
operator|<
name|tbin
operator|->
name|low_water
condition|)
name|tbin
operator|->
name|low_water
operator|=
name|tbin
operator|->
name|ncached
expr_stmt|;
name|ret
operator|=
name|tbin
operator|->
name|avail
index|[
name|tbin
operator|->
name|ncached
index|]
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|tcache_alloc_small
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|size_t
name|size
parameter_list|,
name|bool
name|zero
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
name|size_t
name|binind
decl_stmt|;
name|tcache_bin_t
modifier|*
name|tbin
decl_stmt|;
name|binind
operator|=
name|SMALL_SIZE2BIN
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|binind
operator|<
name|NBINS
argument_list|)
expr_stmt|;
name|tbin
operator|=
operator|&
name|tcache
operator|->
name|tbins
index|[
name|binind
index|]
expr_stmt|;
name|ret
operator|=
name|tcache_alloc_easy
argument_list|(
name|tbin
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|NULL
condition|)
block|{
name|ret
operator|=
name|tcache_alloc_small_hard
argument_list|(
name|tcache
argument_list|,
name|tbin
argument_list|,
name|binind
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
block|}
name|assert
argument_list|(
name|tcache_salloc
argument_list|(
name|ret
argument_list|)
operator|==
name|arena_bin_info
index|[
name|binind
index|]
operator|.
name|reg_size
argument_list|)
expr_stmt|;
if|if
condition|(
name|zero
operator|==
name|false
condition|)
block|{
if|if
condition|(
name|config_fill
condition|)
block|{
if|if
condition|(
name|opt_junk
condition|)
block|{
name|arena_alloc_junk_small
argument_list|(
name|ret
argument_list|,
operator|&
name|arena_bin_info
index|[
name|binind
index|]
argument_list|,
name|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt_zero
condition|)
name|memset
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|config_fill
operator|&&
name|opt_junk
condition|)
block|{
name|arena_alloc_junk_small
argument_list|(
name|ret
argument_list|,
operator|&
name|arena_bin_info
index|[
name|binind
index|]
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
name|VALGRIND_MAKE_MEM_UNDEFINED
argument_list|(
name|ret
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|VALGRIND_MAKE_MEM_UNDEFINED
argument_list|(
name|ret
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config_stats
condition|)
name|tbin
operator|->
name|tstats
operator|.
name|nrequests
operator|++
expr_stmt|;
if|if
condition|(
name|config_prof
condition|)
name|tcache
operator|->
name|prof_accumbytes
operator|+=
name|arena_bin_info
index|[
name|binind
index|]
operator|.
name|reg_size
expr_stmt|;
name|tcache_event
argument_list|(
name|tcache
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|tcache_alloc_large
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|size_t
name|size
parameter_list|,
name|bool
name|zero
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
name|size_t
name|binind
decl_stmt|;
name|tcache_bin_t
modifier|*
name|tbin
decl_stmt|;
name|size
operator|=
name|PAGE_CEILING
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|size
operator|<=
name|tcache_maxclass
argument_list|)
expr_stmt|;
name|binind
operator|=
name|NBINS
operator|+
operator|(
name|size
operator|>>
name|LG_PAGE
operator|)
operator|-
literal|1
expr_stmt|;
name|assert
argument_list|(
name|binind
operator|<
name|nhbins
argument_list|)
expr_stmt|;
name|tbin
operator|=
operator|&
name|tcache
operator|->
name|tbins
index|[
name|binind
index|]
expr_stmt|;
name|ret
operator|=
name|tcache_alloc_easy
argument_list|(
name|tbin
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|NULL
condition|)
block|{
comment|/* 		 * Only allocate one large object at a time, because it's quite 		 * expensive to create one and not use it. 		 */
name|ret
operator|=
name|arena_malloc_large
argument_list|(
name|tcache
operator|->
name|arena
argument_list|,
name|size
argument_list|,
name|zero
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|config_prof
operator|&&
name|prof_promote
operator|&&
name|size
operator|==
name|PAGE
condition|)
block|{
name|arena_chunk_t
modifier|*
name|chunk
init|=
operator|(
name|arena_chunk_t
operator|*
operator|)
name|CHUNK_ADDR2BASE
argument_list|(
name|ret
argument_list|)
decl_stmt|;
name|size_t
name|pageind
init|=
operator|(
operator|(
operator|(
name|uintptr_t
operator|)
name|ret
operator|-
operator|(
name|uintptr_t
operator|)
name|chunk
operator|)
operator|>>
name|LG_PAGE
operator|)
decl_stmt|;
name|arena_mapbits_large_binind_set
argument_list|(
name|chunk
argument_list|,
name|pageind
argument_list|,
name|BININD_INVALID
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|zero
operator|==
name|false
condition|)
block|{
if|if
condition|(
name|config_fill
condition|)
block|{
if|if
condition|(
name|opt_junk
condition|)
name|memset
argument_list|(
name|ret
argument_list|,
literal|0xa5
argument_list|,
name|size
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|opt_zero
condition|)
name|memset
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|VALGRIND_MAKE_MEM_UNDEFINED
argument_list|(
name|ret
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|ret
argument_list|,
literal|0
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|VALGRIND_MAKE_MEM_UNDEFINED
argument_list|(
name|ret
argument_list|,
name|size
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config_stats
condition|)
name|tbin
operator|->
name|tstats
operator|.
name|nrequests
operator|++
expr_stmt|;
if|if
condition|(
name|config_prof
condition|)
name|tcache
operator|->
name|prof_accumbytes
operator|+=
name|size
expr_stmt|;
block|}
name|tcache_event
argument_list|(
name|tcache
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tcache_dalloc_small
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|binind
parameter_list|)
block|{
name|tcache_bin_t
modifier|*
name|tbin
decl_stmt|;
name|tcache_bin_info_t
modifier|*
name|tbin_info
decl_stmt|;
name|assert
argument_list|(
name|tcache_salloc
argument_list|(
name|ptr
argument_list|)
operator|<=
name|SMALL_MAXCLASS
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_fill
operator|&&
name|opt_junk
condition|)
name|arena_dalloc_junk_small
argument_list|(
name|ptr
argument_list|,
operator|&
name|arena_bin_info
index|[
name|binind
index|]
argument_list|)
expr_stmt|;
name|tbin
operator|=
operator|&
name|tcache
operator|->
name|tbins
index|[
name|binind
index|]
expr_stmt|;
name|tbin_info
operator|=
operator|&
name|tcache_bin_info
index|[
name|binind
index|]
expr_stmt|;
if|if
condition|(
name|tbin
operator|->
name|ncached
operator|==
name|tbin_info
operator|->
name|ncached_max
condition|)
block|{
name|tcache_bin_flush_small
argument_list|(
name|tbin
argument_list|,
name|binind
argument_list|,
operator|(
name|tbin_info
operator|->
name|ncached_max
operator|>>
literal|1
operator|)
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
block|}
name|assert
argument_list|(
name|tbin
operator|->
name|ncached
operator|<
name|tbin_info
operator|->
name|ncached_max
argument_list|)
expr_stmt|;
name|tbin
operator|->
name|avail
index|[
name|tbin
operator|->
name|ncached
index|]
operator|=
name|ptr
expr_stmt|;
name|tbin
operator|->
name|ncached
operator|++
expr_stmt|;
name|tcache_event
argument_list|(
name|tcache
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|tcache_dalloc_large
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|size_t
name|binind
decl_stmt|;
name|tcache_bin_t
modifier|*
name|tbin
decl_stmt|;
name|tcache_bin_info_t
modifier|*
name|tbin_info
decl_stmt|;
name|assert
argument_list|(
operator|(
name|size
operator|&
name|PAGE_MASK
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|tcache_salloc
argument_list|(
name|ptr
argument_list|)
operator|>
name|SMALL_MAXCLASS
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|tcache_salloc
argument_list|(
name|ptr
argument_list|)
operator|<=
name|tcache_maxclass
argument_list|)
expr_stmt|;
name|binind
operator|=
name|NBINS
operator|+
operator|(
name|size
operator|>>
name|LG_PAGE
operator|)
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|config_fill
operator|&&
name|opt_junk
condition|)
name|memset
argument_list|(
name|ptr
argument_list|,
literal|0x5a
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|tbin
operator|=
operator|&
name|tcache
operator|->
name|tbins
index|[
name|binind
index|]
expr_stmt|;
name|tbin_info
operator|=
operator|&
name|tcache_bin_info
index|[
name|binind
index|]
expr_stmt|;
if|if
condition|(
name|tbin
operator|->
name|ncached
operator|==
name|tbin_info
operator|->
name|ncached_max
condition|)
block|{
name|tcache_bin_flush_large
argument_list|(
name|tbin
argument_list|,
name|binind
argument_list|,
operator|(
name|tbin_info
operator|->
name|ncached_max
operator|>>
literal|1
operator|)
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
block|}
name|assert
argument_list|(
name|tbin
operator|->
name|ncached
operator|<
name|tbin_info
operator|->
name|ncached_max
argument_list|)
expr_stmt|;
name|tbin
operator|->
name|avail
index|[
name|tbin
operator|->
name|ncached
index|]
operator|=
name|ptr
expr_stmt|;
name|tbin
operator|->
name|ncached
operator|++
expr_stmt|;
name|tcache_event
argument_list|(
name|tcache
argument_list|)
expr_stmt|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_INLINES */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

end_unit

