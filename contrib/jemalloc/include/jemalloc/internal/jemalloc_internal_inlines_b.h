begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_INLINES_B_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_INLINES_B_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/rtree.h"
end_include

begin_comment
comment|/* Choose an arena based on a per-thread value. */
end_comment

begin_function
specifier|static
specifier|inline
name|arena_t
modifier|*
name|arena_choose_impl
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|bool
name|internal
parameter_list|)
block|{
name|arena_t
modifier|*
name|ret
decl_stmt|;
if|if
condition|(
name|arena
operator|!=
name|NULL
condition|)
block|{
return|return
name|arena
return|;
block|}
comment|/* During reentrancy, arena 0 is the safest bet. */
if|if
condition|(
name|unlikely
argument_list|(
name|tsd_reentrancy_level_get
argument_list|(
name|tsd
argument_list|)
operator|>
literal|0
argument_list|)
condition|)
block|{
return|return
name|arena_get
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
literal|0
argument_list|,
name|true
argument_list|)
return|;
block|}
name|ret
operator|=
name|internal
condition|?
name|tsd_iarena_get
argument_list|(
name|tsd
argument_list|)
else|:
name|tsd_arena_get
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|ret
operator|==
name|NULL
argument_list|)
condition|)
block|{
name|ret
operator|=
name|arena_choose_hard
argument_list|(
name|tsd
argument_list|,
name|internal
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcache_available
argument_list|(
name|tsd
argument_list|)
condition|)
block|{
name|tcache_t
modifier|*
name|tcache
init|=
name|tcache_get
argument_list|(
name|tsd
argument_list|)
decl_stmt|;
if|if
condition|(
name|tcache
operator|->
name|arena
operator|!=
name|NULL
condition|)
block|{
comment|/* See comments in tcache_data_init().*/
name|assert
argument_list|(
name|tcache
operator|->
name|arena
operator|==
name|arena_get
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
literal|0
argument_list|,
name|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tcache
operator|->
name|arena
operator|!=
name|ret
condition|)
block|{
name|tcache_arena_reassociate
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|tcache
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|tcache_arena_associate
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|tcache
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* 	 * Note that for percpu arena, if the current arena is outside of the 	 * auto percpu arena range, (i.e. thread is assigned to a manually 	 * managed arena), then percpu arena is skipped. 	 */
if|if
condition|(
name|have_percpu_arena
operator|&&
name|PERCPU_ARENA_ENABLED
argument_list|(
name|opt_percpu_arena
argument_list|)
operator|&&
operator|!
name|internal
operator|&&
operator|(
name|arena_ind_get
argument_list|(
name|ret
argument_list|)
operator|<
name|percpu_arena_ind_limit
argument_list|(
name|opt_percpu_arena
argument_list|)
operator|)
operator|&&
operator|(
name|ret
operator|->
name|last_thd
operator|!=
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
operator|)
condition|)
block|{
name|unsigned
name|ind
init|=
name|percpu_arena_choose
argument_list|()
decl_stmt|;
if|if
condition|(
name|arena_ind_get
argument_list|(
name|ret
argument_list|)
operator|!=
name|ind
condition|)
block|{
name|percpu_arena_update
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|ret
operator|=
name|tsd_arena_get
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
block|}
name|ret
operator|->
name|last_thd
operator|=
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|arena_t
modifier|*
name|arena_choose
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
return|return
name|arena_choose_impl
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|,
name|false
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|arena_t
modifier|*
name|arena_ichoose
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
return|return
name|arena_choose_impl
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|bool
name|arena_is_auto
parameter_list|(
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|assert
argument_list|(
name|narenas_auto
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
operator|(
name|arena_ind_get
argument_list|(
name|arena
argument_list|)
operator|<
name|narenas_auto
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|extent_t
modifier|*
name|iealloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|rtree_ctx_t
name|rtree_ctx_fallback
decl_stmt|;
name|rtree_ctx_t
modifier|*
name|rtree_ctx
init|=
name|tsdn_rtree_ctx
argument_list|(
name|tsdn
argument_list|,
operator|&
name|rtree_ctx_fallback
argument_list|)
decl_stmt|;
return|return
name|rtree_extent_read
argument_list|(
name|tsdn
argument_list|,
operator|&
name|extents_rtree
argument_list|,
name|rtree_ctx
argument_list|,
operator|(
name|uintptr_t
operator|)
name|ptr
argument_list|,
name|true
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_INLINES_B_H */
end_comment

end_unit

