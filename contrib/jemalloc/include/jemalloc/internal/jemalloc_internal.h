begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_H
end_define

begin_include
include|#
directive|include
file|"jemalloc_internal_defs.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/jemalloc_internal_decls.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_UTRACE
end_ifdef

begin_include
include|#
directive|include
file|<sys/ktrace.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"un-namespace.h"
end_include

begin_include
include|#
directive|include
file|"libc_private.h"
end_include

begin_define
define|#
directive|define
name|JEMALLOC_NO_DEMANGLE
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_JET
end_ifdef

begin_define
define|#
directive|define
name|JEMALLOC_N
parameter_list|(
name|n
parameter_list|)
value|jet_##n
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/public_namespace.h"
end_include

begin_define
define|#
directive|define
name|JEMALLOC_NO_RENAME
end_define

begin_include
include|#
directive|include
file|"../jemalloc.h"
end_include

begin_undef
undef|#
directive|undef
name|JEMALLOC_NO_RENAME
end_undef

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|JEMALLOC_N
parameter_list|(
name|n
parameter_list|)
value|__je_##n
end_define

begin_include
include|#
directive|include
file|"../jemalloc.h"
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"jemalloc/internal/private_namespace.h"
end_include

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_debug
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_DEBUG
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|have_dss
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_DSS
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_fill
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_FILL
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_lazy_lock
init|=
name|true
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|config_malloc_conf
init|=
name|JEMALLOC_CONFIG_MALLOC_CONF
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_prof
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_PROF
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_prof_libgcc
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_PROF_LIBGCC
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_prof_libunwind
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_PROF_LIBUNWIND
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|maps_coalesce
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_MAPS_COALESCE
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_munmap
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_MUNMAP
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_stats
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_STATS
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_tcache
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_TCACHE
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_tls
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_TLS
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_utrace
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_UTRACE
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_valgrind
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_VALGRIND
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_xmalloc
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_XMALLOC
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_ivsalloc
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_IVSALLOC
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|bool
name|config_cache_oblivious
init|=
ifdef|#
directive|ifdef
name|JEMALLOC_CACHE_OBLIVIOUS
name|true
else|#
directive|else
name|false
endif|#
directive|endif
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_C11ATOMICS
end_ifdef

begin_include
include|#
directive|include
file|<stdatomic.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_ATOMIC9
end_ifdef

begin_include
include|#
directive|include
file|<machine/atomic.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_OSATOMIC
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_OSSPIN
argument_list|)
operator|)
end_if

begin_include
include|#
directive|include
file|<libkern/OSAtomic.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_ZONE
end_ifdef

begin_include
include|#
directive|include
file|<mach/mach_error.h>
end_include

begin_include
include|#
directive|include
file|<mach/mach_init.h>
end_include

begin_include
include|#
directive|include
file|<mach/vm_map.h>
end_include

begin_include
include|#
directive|include
file|<malloc/malloc.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"jemalloc/internal/ph.h"
end_include

begin_define
define|#
directive|define
name|RB_COMPACT
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/rb.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/qr.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ql.h"
end_include

begin_comment
comment|/*  * jemalloc can conceptually be broken into components (arena, tcache, etc.),  * but there are circular dependencies that cannot be broken without  * substantial performance degradation.  In order to reduce the effect on  * visual code flow, read the header files in multiple passes, with one of the  * following cpp variables defined during each pass:  *  *   JEMALLOC_H_TYPES   : Preprocessor-defined constants and psuedo-opaque data  *                        types.  *   JEMALLOC_H_STRUCTS : Data structures.  *   JEMALLOC_H_EXTERNS : Extern data declarations and function prototypes.  *   JEMALLOC_H_INLINES : Inline functions.  */
end_comment

begin_comment
comment|/******************************************************************************/
end_comment

begin_define
define|#
directive|define
name|JEMALLOC_H_TYPES
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/jemalloc_internal_macros.h"
end_include

begin_comment
comment|/* Size class index type. */
end_comment

begin_typedef
typedef|typedef
name|unsigned
name|szind_t
typedef|;
end_typedef

begin_comment
comment|/*  * Flags bits:  *  * a: arena  * t: tcache  * 0: unused  * z: zero  * n: alignment  *  * aaaaaaaa aaaatttt tttttttt 0znnnnnn  */
end_comment

begin_define
define|#
directive|define
name|MALLOCX_ARENA_MASK
value|((int)~0xfffff)
end_define

begin_define
define|#
directive|define
name|MALLOCX_ARENA_MAX
value|0xffe
end_define

begin_define
define|#
directive|define
name|MALLOCX_TCACHE_MASK
value|((int)~0xfff000ffU)
end_define

begin_define
define|#
directive|define
name|MALLOCX_TCACHE_MAX
value|0xffd
end_define

begin_define
define|#
directive|define
name|MALLOCX_LG_ALIGN_MASK
value|((int)0x3f)
end_define

begin_comment
comment|/* Use MALLOCX_ALIGN_GET() if alignment may not be specified in flags. */
end_comment

begin_define
define|#
directive|define
name|MALLOCX_ALIGN_GET_SPECIFIED
parameter_list|(
name|flags
parameter_list|)
define|\
value|(ZU(1)<< (flags& MALLOCX_LG_ALIGN_MASK))
end_define

begin_define
define|#
directive|define
name|MALLOCX_ALIGN_GET
parameter_list|(
name|flags
parameter_list|)
define|\
value|(MALLOCX_ALIGN_GET_SPECIFIED(flags)& (SIZE_T_MAX-1))
end_define

begin_define
define|#
directive|define
name|MALLOCX_ZERO_GET
parameter_list|(
name|flags
parameter_list|)
define|\
value|((bool)(flags& MALLOCX_ZERO))
end_define

begin_define
define|#
directive|define
name|MALLOCX_TCACHE_GET
parameter_list|(
name|flags
parameter_list|)
define|\
value|(((unsigned)((flags& MALLOCX_TCACHE_MASK)>> 8)) - 2)
end_define

begin_define
define|#
directive|define
name|MALLOCX_ARENA_GET
parameter_list|(
name|flags
parameter_list|)
define|\
value|(((unsigned)(((unsigned)flags)>> 20)) - 1)
end_define

begin_comment
comment|/* Smallest size class to support. */
end_comment

begin_define
define|#
directive|define
name|TINY_MIN
value|(1U<< LG_TINY_MIN)
end_define

begin_comment
comment|/*  * Minimum allocation alignment is 2^LG_QUANTUM bytes (ignoring tiny size  * classes).  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LG_QUANTUM
end_ifndef

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|_M_IX86
argument_list|)
operator|)
end_if

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__ia64__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__alpha__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__sparc64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__sparcv9
argument_list|)
operator|)
end_if

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|||
name|defined
argument_list|(
name|_M_X64
argument_list|)
operator|)
end_if

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__arm__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|3
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__aarch64__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__hppa__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__mips__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|3
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__or1k__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|3
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__powerpc__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__riscv__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__s390__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__SH4__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__tile__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__le32__
end_ifdef

begin_define
define|#
directive|define
name|LG_QUANTUM
value|4
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|LG_QUANTUM
end_ifndef

begin_error
error|#
directive|error
literal|"Unknown minimum alignment for architecture; specify via "
end_error

begin_expr_stmt
literal|"--with-lg-quantum"
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|QUANTUM
value|((size_t)(1U<< LG_QUANTUM))
define|#
directive|define
name|QUANTUM_MASK
value|(QUANTUM - 1)
comment|/* Return the smallest quantum multiple that is>= a. */
define|#
directive|define
name|QUANTUM_CEILING
parameter_list|(
name|a
parameter_list|)
define|\
value|(((a) + QUANTUM_MASK)& ~QUANTUM_MASK)
define|#
directive|define
name|LONG
value|((size_t)(1U<< LG_SIZEOF_LONG))
define|#
directive|define
name|LONG_MASK
value|(LONG - 1)
comment|/* Return the smallest long multiple that is>= a. */
define|#
directive|define
name|LONG_CEILING
parameter_list|(
name|a
parameter_list|)
define|\
value|(((a) + LONG_MASK)& ~LONG_MASK)
define|#
directive|define
name|SIZEOF_PTR
value|(1U<< LG_SIZEOF_PTR)
define|#
directive|define
name|PTR_MASK
value|(SIZEOF_PTR - 1)
comment|/* Return the smallest (void *) multiple that is>= a. */
define|#
directive|define
name|PTR_CEILING
parameter_list|(
name|a
parameter_list|)
define|\
value|(((a) + PTR_MASK)& ~PTR_MASK)
comment|/*  * Maximum size of L1 cache line.  This is used to avoid cache line aliasing.  * In addition, this controls the spacing of cacheline-spaced size classes.  *  * CACHELINE cannot be based on LG_CACHELINE because __declspec(align()) can  * only handle raw constants.  */
define|#
directive|define
name|LG_CACHELINE
value|6
define|#
directive|define
name|CACHELINE
value|64
define|#
directive|define
name|CACHELINE_MASK
value|(CACHELINE - 1)
comment|/* Return the smallest cacheline multiple that is>= s. */
define|#
directive|define
name|CACHELINE_CEILING
parameter_list|(
name|s
parameter_list|)
define|\
value|(((s) + CACHELINE_MASK)& ~CACHELINE_MASK)
comment|/* Page size.  LG_PAGE is determined by the configure script. */
ifdef|#
directive|ifdef
name|PAGE_MASK
undef|#
directive|undef
name|PAGE_MASK
endif|#
directive|endif
define|#
directive|define
name|PAGE
value|((size_t)(1U<< LG_PAGE))
define|#
directive|define
name|PAGE_MASK
value|((size_t)(PAGE - 1))
comment|/* Return the page base address for the page containing address a. */
define|#
directive|define
name|PAGE_ADDR2BASE
parameter_list|(
name|a
parameter_list|)
define|\
value|((void *)((uintptr_t)(a)& ~PAGE_MASK))
comment|/* Return the smallest pagesize multiple that is>= s. */
define|#
directive|define
name|PAGE_CEILING
parameter_list|(
name|s
parameter_list|)
define|\
value|(((s) + PAGE_MASK)& ~PAGE_MASK)
comment|/* Return the nearest aligned address at or below a. */
define|#
directive|define
name|ALIGNMENT_ADDR2BASE
parameter_list|(
name|a
parameter_list|,
name|alignment
parameter_list|)
define|\
value|((void *)((uintptr_t)(a)& (-(alignment))))
comment|/* Return the offset between a and the nearest aligned address at or below a. */
define|#
directive|define
name|ALIGNMENT_ADDR2OFFSET
parameter_list|(
name|a
parameter_list|,
name|alignment
parameter_list|)
define|\
value|((size_t)((uintptr_t)(a)& (alignment - 1)))
comment|/* Return the smallest alignment multiple that is>= s. */
define|#
directive|define
name|ALIGNMENT_CEILING
parameter_list|(
name|s
parameter_list|,
name|alignment
parameter_list|)
define|\
value|(((s) + (alignment - 1))& (-(alignment)))
comment|/* Declare a variable-length array. */
if|#
directive|if
name|__STDC_VERSION__
operator|<
literal|199901L
ifdef|#
directive|ifdef
name|_MSC_VER
include|#
directive|include
file|<malloc.h>
define|#
directive|define
name|alloca
value|_alloca
else|#
directive|else
ifdef|#
directive|ifdef
name|JEMALLOC_HAS_ALLOCA_H
include|#
directive|include
file|<alloca.h>
else|#
directive|else
include|#
directive|include
file|<stdlib.h>
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|VARIABLE_ARRAY
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|count
parameter_list|)
define|\
value|type *name = alloca(sizeof(type) * (count))
else|#
directive|else
define|#
directive|define
name|VARIABLE_ARRAY
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|count
parameter_list|)
value|type name[(count)]
endif|#
directive|endif
include|#
directive|include
file|"jemalloc/internal/nstime.h"
include|#
directive|include
file|"jemalloc/internal/valgrind.h"
include|#
directive|include
file|"jemalloc/internal/util.h"
include|#
directive|include
file|"jemalloc/internal/atomic.h"
include|#
directive|include
file|"jemalloc/internal/prng.h"
include|#
directive|include
file|"jemalloc/internal/ticker.h"
include|#
directive|include
file|"jemalloc/internal/ckh.h"
include|#
directive|include
file|"jemalloc/internal/size_classes.h"
include|#
directive|include
file|"jemalloc/internal/smoothstep.h"
include|#
directive|include
file|"jemalloc/internal/stats.h"
include|#
directive|include
file|"jemalloc/internal/ctl.h"
include|#
directive|include
file|"jemalloc/internal/witness.h"
include|#
directive|include
file|"jemalloc/internal/mutex.h"
include|#
directive|include
file|"jemalloc/internal/tsd.h"
include|#
directive|include
file|"jemalloc/internal/mb.h"
include|#
directive|include
file|"jemalloc/internal/extent.h"
include|#
directive|include
file|"jemalloc/internal/arena.h"
include|#
directive|include
file|"jemalloc/internal/bitmap.h"
include|#
directive|include
file|"jemalloc/internal/base.h"
include|#
directive|include
file|"jemalloc/internal/rtree.h"
include|#
directive|include
file|"jemalloc/internal/pages.h"
include|#
directive|include
file|"jemalloc/internal/chunk.h"
include|#
directive|include
file|"jemalloc/internal/huge.h"
include|#
directive|include
file|"jemalloc/internal/tcache.h"
include|#
directive|include
file|"jemalloc/internal/hash.h"
include|#
directive|include
file|"jemalloc/internal/quarantine.h"
include|#
directive|include
file|"jemalloc/internal/prof.h"
undef|#
directive|undef
name|JEMALLOC_H_TYPES
comment|/******************************************************************************/
define|#
directive|define
name|JEMALLOC_H_STRUCTS
include|#
directive|include
file|"jemalloc/internal/nstime.h"
include|#
directive|include
file|"jemalloc/internal/valgrind.h"
include|#
directive|include
file|"jemalloc/internal/util.h"
include|#
directive|include
file|"jemalloc/internal/atomic.h"
include|#
directive|include
file|"jemalloc/internal/prng.h"
include|#
directive|include
file|"jemalloc/internal/ticker.h"
include|#
directive|include
file|"jemalloc/internal/ckh.h"
include|#
directive|include
file|"jemalloc/internal/size_classes.h"
include|#
directive|include
file|"jemalloc/internal/smoothstep.h"
include|#
directive|include
file|"jemalloc/internal/stats.h"
include|#
directive|include
file|"jemalloc/internal/ctl.h"
include|#
directive|include
file|"jemalloc/internal/witness.h"
include|#
directive|include
file|"jemalloc/internal/mutex.h"
include|#
directive|include
file|"jemalloc/internal/mb.h"
include|#
directive|include
file|"jemalloc/internal/bitmap.h"
define|#
directive|define
name|JEMALLOC_ARENA_STRUCTS_A
include|#
directive|include
file|"jemalloc/internal/arena.h"
undef|#
directive|undef
name|JEMALLOC_ARENA_STRUCTS_A
include|#
directive|include
file|"jemalloc/internal/extent.h"
define|#
directive|define
name|JEMALLOC_ARENA_STRUCTS_B
include|#
directive|include
file|"jemalloc/internal/arena.h"
undef|#
directive|undef
name|JEMALLOC_ARENA_STRUCTS_B
include|#
directive|include
file|"jemalloc/internal/base.h"
include|#
directive|include
file|"jemalloc/internal/rtree.h"
include|#
directive|include
file|"jemalloc/internal/pages.h"
include|#
directive|include
file|"jemalloc/internal/chunk.h"
include|#
directive|include
file|"jemalloc/internal/huge.h"
include|#
directive|include
file|"jemalloc/internal/tcache.h"
include|#
directive|include
file|"jemalloc/internal/hash.h"
include|#
directive|include
file|"jemalloc/internal/quarantine.h"
include|#
directive|include
file|"jemalloc/internal/prof.h"
include|#
directive|include
file|"jemalloc/internal/tsd.h"
undef|#
directive|undef
name|JEMALLOC_H_STRUCTS
comment|/******************************************************************************/
define|#
directive|define
name|JEMALLOC_H_EXTERNS
specifier|extern
name|bool
name|opt_abort
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|char
modifier|*
name|opt_junk
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bool
name|opt_junk_alloc
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bool
name|opt_junk_free
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|size_t
name|opt_quarantine
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bool
name|opt_redzone
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bool
name|opt_utrace
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bool
name|opt_xmalloc
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bool
name|opt_zero
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|unsigned
name|opt_narenas
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|bool
name|in_valgrind
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Number of CPUs. */
end_comment

begin_decl_stmt
specifier|extern
name|unsigned
name|ncpus
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Number of arenas used for automatic multiplexing of threads and arenas. */
end_comment

begin_decl_stmt
specifier|extern
name|unsigned
name|narenas_auto
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Arenas that are used to service external requests.  Not all elements of the  * arenas array are necessarily used; arenas are created lazily as needed.  */
end_comment

begin_decl_stmt
specifier|extern
name|arena_t
modifier|*
modifier|*
name|arenas
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * index2size_tab encodes the same information as could be computed (at  * unacceptable cost in some code paths) by index2size_compute().  */
end_comment

begin_decl_stmt
specifier|extern
name|size_t
specifier|const
name|index2size_tab
index|[
name|NSIZES
operator|+
literal|1
index|]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * size2index_tab is a compact lookup table that rounds request sizes up to  * size classes.  In order to reduce cache footprint, the table is compressed,  * and all accesses are via size2index().  */
end_comment

begin_decl_stmt
specifier|extern
name|uint8_t
specifier|const
name|size2index_tab
index|[]
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
modifier|*
name|a0malloc
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|a0dalloc
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|bootstrap_malloc
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|bootstrap_calloc
parameter_list|(
name|size_t
name|num
parameter_list|,
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|bootstrap_free
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|unsigned
name|narenas_total_get
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_t
modifier|*
name|arena_init
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|unsigned
name|ind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_tdata_t
modifier|*
name|arena_tdata_get_hard
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|ind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_t
modifier|*
name|arena_choose_hard
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|bool
name|internal
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_migrate
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|oldind
parameter_list|,
name|unsigned
name|newind
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|thread_allocated_cleanup
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|thread_deallocated_cleanup
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iarena_cleanup
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arena_cleanup
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arenas_tdata_cleanup
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|narenas_tdata_cleanup
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|arenas_tdata_bypass_cleanup
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|jemalloc_prefork
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|jemalloc_postfork_parent
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|jemalloc_postfork_child
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_include
include|#
directive|include
file|"jemalloc/internal/nstime.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/valgrind.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/util.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/atomic.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/prng.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ticker.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ckh.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/size_classes.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/smoothstep.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/stats.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ctl.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/witness.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/mutex.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/mb.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/bitmap.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/extent.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/arena.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/base.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/rtree.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/pages.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/chunk.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/huge.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/tcache.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/hash.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/quarantine.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/prof.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/tsd.h"
end_include

begin_undef
undef|#
directive|undef
name|JEMALLOC_H_EXTERNS
end_undef

begin_comment
comment|/******************************************************************************/
end_comment

begin_define
define|#
directive|define
name|JEMALLOC_H_INLINES
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/nstime.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/valgrind.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/util.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/atomic.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/prng.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ticker.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ckh.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/size_classes.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/smoothstep.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/stats.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ctl.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/tsd.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/witness.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/mutex.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/mb.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/extent.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/base.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/rtree.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/pages.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/chunk.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/huge.h"
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_function_decl
name|szind_t
name|size2index_compute
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|szind_t
name|size2index_lookup
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|szind_t
name|size2index
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|index2size_compute
parameter_list|(
name|szind_t
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|index2size_lookup
parameter_list|(
name|szind_t
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|index2size
parameter_list|(
name|szind_t
name|index
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|s2u_compute
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|s2u_lookup
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|s2u
parameter_list|(
name|size_t
name|size
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|sa2u
parameter_list|(
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_t
modifier|*
name|arena_choose_impl
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|bool
name|internal
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_t
modifier|*
name|arena_choose
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_t
modifier|*
name|arena_ichoose
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_tdata_t
modifier|*
name|arena_tdata_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|ind
parameter_list|,
name|bool
name|refresh_if_missing
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|arena_t
modifier|*
name|arena_get
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|unsigned
name|ind
parameter_list|,
name|bool
name|init_if_missing
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|ticker_t
modifier|*
name|decay_ticker_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|ind
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_C_
argument_list|)
operator|)
end_if

begin_function
name|JEMALLOC_INLINE
name|szind_t
name|size2index_compute
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
if|#
directive|if
operator|(
name|NTBINS
operator|!=
literal|0
operator|)
if|if
condition|(
name|size
operator|<=
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
name|LG_TINY_MAXCLASS
operator|)
condition|)
block|{
name|szind_t
name|lg_tmin
init|=
name|LG_TINY_MAXCLASS
operator|-
name|NTBINS
operator|+
literal|1
decl_stmt|;
name|szind_t
name|lg_ceil
init|=
name|lg_floor
argument_list|(
name|pow2_ceil_zu
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|lg_ceil
operator|<
name|lg_tmin
condition|?
literal|0
else|:
name|lg_ceil
operator|-
name|lg_tmin
operator|)
return|;
block|}
endif|#
directive|endif
block|{
name|szind_t
name|x
init|=
name|unlikely
argument_list|(
name|ZI
argument_list|(
name|size
argument_list|)
operator|<
literal|0
argument_list|)
condition|?
operator|(
operator|(
name|size
operator|<<
literal|1
operator|)
condition|?
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|LG_SIZEOF_PTR
operator|+
literal|3
operator|)
operator|)
else|:
operator|(
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|LG_SIZEOF_PTR
operator|+
literal|3
operator|)
operator|)
operator|-
literal|1
operator|)
operator|)
else|:
name|lg_floor
argument_list|(
operator|(
name|size
operator|<<
literal|1
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|szind_t
name|shift
init|=
operator|(
name|x
operator|<
name|LG_SIZE_CLASS_GROUP
operator|+
name|LG_QUANTUM
operator|)
condition|?
literal|0
else|:
name|x
operator|-
operator|(
name|LG_SIZE_CLASS_GROUP
operator|+
name|LG_QUANTUM
operator|)
decl_stmt|;
name|szind_t
name|grp
init|=
name|shift
operator|<<
name|LG_SIZE_CLASS_GROUP
decl_stmt|;
name|szind_t
name|lg_delta
init|=
operator|(
name|x
operator|<
name|LG_SIZE_CLASS_GROUP
operator|+
name|LG_QUANTUM
operator|+
literal|1
operator|)
condition|?
name|LG_QUANTUM
else|:
name|x
operator|-
name|LG_SIZE_CLASS_GROUP
operator|-
literal|1
decl_stmt|;
name|size_t
name|delta_inverse_mask
init|=
name|ZI
argument_list|(
operator|-
literal|1
argument_list|)
operator|<<
name|lg_delta
decl_stmt|;
name|szind_t
name|mod
init|=
operator|(
operator|(
operator|(
operator|(
name|size
operator|-
literal|1
operator|)
operator|&
name|delta_inverse_mask
operator|)
operator|>>
name|lg_delta
operator|)
operator|)
operator|&
operator|(
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
name|LG_SIZE_CLASS_GROUP
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|szind_t
name|index
init|=
name|NTBINS
operator|+
name|grp
operator|+
name|mod
decl_stmt|;
return|return
operator|(
name|index
operator|)
return|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|szind_t
name|size2index_lookup
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
name|assert
argument_list|(
name|size
operator|<=
name|LOOKUP_MAXCLASS
argument_list|)
expr_stmt|;
block|{
name|szind_t
name|ret
init|=
operator|(
name|size2index_tab
index|[
operator|(
name|size
operator|-
literal|1
operator|)
operator|>>
name|LG_TINY_MIN
index|]
operator|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|==
name|size2index_compute
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|szind_t
name|size2index
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
name|assert
argument_list|(
name|size
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|size
operator|<=
name|LOOKUP_MAXCLASS
argument_list|)
condition|)
return|return
operator|(
name|size2index_lookup
argument_list|(
name|size
argument_list|)
operator|)
return|;
return|return
operator|(
name|size2index_compute
argument_list|(
name|size
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|size_t
name|index2size_compute
parameter_list|(
name|szind_t
name|index
parameter_list|)
block|{
if|#
directive|if
operator|(
name|NTBINS
operator|>
literal|0
operator|)
if|if
condition|(
name|index
operator|<
name|NTBINS
condition|)
return|return
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|LG_TINY_MAXCLASS
operator|-
name|NTBINS
operator|+
literal|1
operator|+
name|index
operator|)
operator|)
return|;
endif|#
directive|endif
block|{
name|size_t
name|reduced_index
init|=
name|index
operator|-
name|NTBINS
decl_stmt|;
name|size_t
name|grp
init|=
name|reduced_index
operator|>>
name|LG_SIZE_CLASS_GROUP
decl_stmt|;
name|size_t
name|mod
init|=
name|reduced_index
operator|&
operator|(
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
name|LG_SIZE_CLASS_GROUP
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|size_t
name|grp_size_mask
init|=
operator|~
operator|(
operator|(
operator|!
operator|!
name|grp
operator|)
operator|-
literal|1
operator|)
decl_stmt|;
name|size_t
name|grp_size
init|=
operator|(
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|LG_QUANTUM
operator|+
operator|(
name|LG_SIZE_CLASS_GROUP
operator|-
literal|1
operator|)
operator|)
operator|)
operator|<<
name|grp
operator|)
operator|&
name|grp_size_mask
decl_stmt|;
name|size_t
name|shift
init|=
operator|(
name|grp
operator|==
literal|0
operator|)
condition|?
literal|1
else|:
name|grp
decl_stmt|;
name|size_t
name|lg_delta
init|=
name|shift
operator|+
operator|(
name|LG_QUANTUM
operator|-
literal|1
operator|)
decl_stmt|;
name|size_t
name|mod_size
init|=
operator|(
name|mod
operator|+
literal|1
operator|)
operator|<<
name|lg_delta
decl_stmt|;
name|size_t
name|usize
init|=
name|grp_size
operator|+
name|mod_size
decl_stmt|;
return|return
operator|(
name|usize
operator|)
return|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|index2size_lookup
parameter_list|(
name|szind_t
name|index
parameter_list|)
block|{
name|size_t
name|ret
init|=
operator|(
name|size_t
operator|)
name|index2size_tab
index|[
name|index
index|]
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|==
name|index2size_compute
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|index2size
parameter_list|(
name|szind_t
name|index
parameter_list|)
block|{
name|assert
argument_list|(
name|index
operator|<
name|NSIZES
argument_list|)
expr_stmt|;
return|return
operator|(
name|index2size_lookup
argument_list|(
name|index
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|s2u_compute
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
if|#
directive|if
operator|(
name|NTBINS
operator|>
literal|0
operator|)
if|if
condition|(
name|size
operator|<=
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
name|LG_TINY_MAXCLASS
operator|)
condition|)
block|{
name|size_t
name|lg_tmin
init|=
name|LG_TINY_MAXCLASS
operator|-
name|NTBINS
operator|+
literal|1
decl_stmt|;
name|size_t
name|lg_ceil
init|=
name|lg_floor
argument_list|(
name|pow2_ceil_zu
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|(
name|lg_ceil
operator|<
name|lg_tmin
condition|?
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
name|lg_tmin
operator|)
else|:
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
name|lg_ceil
operator|)
operator|)
return|;
block|}
endif|#
directive|endif
block|{
name|size_t
name|x
init|=
name|unlikely
argument_list|(
name|ZI
argument_list|(
name|size
argument_list|)
operator|<
literal|0
argument_list|)
condition|?
operator|(
operator|(
name|size
operator|<<
literal|1
operator|)
condition|?
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|LG_SIZEOF_PTR
operator|+
literal|3
operator|)
operator|)
else|:
operator|(
operator|(
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
operator|(
name|LG_SIZEOF_PTR
operator|+
literal|3
operator|)
operator|)
operator|-
literal|1
operator|)
operator|)
else|:
name|lg_floor
argument_list|(
operator|(
name|size
operator|<<
literal|1
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|size_t
name|lg_delta
init|=
operator|(
name|x
operator|<
name|LG_SIZE_CLASS_GROUP
operator|+
name|LG_QUANTUM
operator|+
literal|1
operator|)
condition|?
name|LG_QUANTUM
else|:
name|x
operator|-
name|LG_SIZE_CLASS_GROUP
operator|-
literal|1
decl_stmt|;
name|size_t
name|delta
init|=
name|ZU
argument_list|(
literal|1
argument_list|)
operator|<<
name|lg_delta
decl_stmt|;
name|size_t
name|delta_mask
init|=
name|delta
operator|-
literal|1
decl_stmt|;
name|size_t
name|usize
init|=
operator|(
name|size
operator|+
name|delta_mask
operator|)
operator|&
operator|~
name|delta_mask
decl_stmt|;
return|return
operator|(
name|usize
operator|)
return|;
block|}
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|s2u_lookup
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
name|size_t
name|ret
init|=
name|index2size_lookup
argument_list|(
name|size2index_lookup
argument_list|(
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|assert
argument_list|(
name|ret
operator|==
name|s2u_compute
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Compute usable size that would result from allocating an object with the  * specified size.  */
end_comment

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|s2u
parameter_list|(
name|size_t
name|size
parameter_list|)
block|{
name|assert
argument_list|(
name|size
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|size
operator|<=
name|LOOKUP_MAXCLASS
argument_list|)
condition|)
return|return
operator|(
name|s2u_lookup
argument_list|(
name|size
argument_list|)
operator|)
return|;
return|return
operator|(
name|s2u_compute
argument_list|(
name|size
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Compute usable size that would result from allocating an object with the  * specified size and alignment.  */
end_comment

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|sa2u
parameter_list|(
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|)
block|{
name|size_t
name|usize
decl_stmt|;
name|assert
argument_list|(
name|alignment
operator|!=
literal|0
operator|&&
operator|(
operator|(
name|alignment
operator|-
literal|1
operator|)
operator|&
name|alignment
operator|)
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|/* Try for a small size class. */
if|if
condition|(
name|size
operator|<=
name|SMALL_MAXCLASS
operator|&&
name|alignment
operator|<
name|PAGE
condition|)
block|{
comment|/* 		 * Round size up to the nearest multiple of alignment. 		 * 		 * This done, we can take advantage of the fact that for each 		 * small size class, every object is aligned at the smallest 		 * power of two that is non-zero in the base two representation 		 * of the size.  For example: 		 * 		 *   Size |   Base 2 | Minimum alignment 		 *   -----+----------+------------------ 		 *     96 |  1100000 |  32 		 *    144 | 10100000 |  32 		 *    192 | 11000000 |  64 		 */
name|usize
operator|=
name|s2u
argument_list|(
name|ALIGNMENT_CEILING
argument_list|(
name|size
argument_list|,
name|alignment
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|usize
operator|<
name|LARGE_MINCLASS
condition|)
return|return
operator|(
name|usize
operator|)
return|;
block|}
comment|/* Try for a large size class. */
if|if
condition|(
name|likely
argument_list|(
name|size
operator|<=
name|large_maxclass
argument_list|)
operator|&&
name|likely
argument_list|(
name|alignment
operator|<
name|chunksize
argument_list|)
condition|)
block|{
comment|/* 		 * We can't achieve subpage alignment, so round up alignment 		 * to the minimum that can actually be supported. 		 */
name|alignment
operator|=
name|PAGE_CEILING
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
comment|/* Make sure result is a large size class. */
name|usize
operator|=
operator|(
name|size
operator|<=
name|LARGE_MINCLASS
operator|)
condition|?
name|LARGE_MINCLASS
else|:
name|s2u
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|/* 		 * Calculate the size of the over-size run that arena_palloc() 		 * would need to allocate in order to guarantee the alignment. 		 */
if|if
condition|(
name|usize
operator|+
name|large_pad
operator|+
name|alignment
operator|-
name|PAGE
operator|<=
name|arena_maxrun
condition|)
return|return
operator|(
name|usize
operator|)
return|;
block|}
comment|/* Huge size class.  Beware of overflow. */
if|if
condition|(
name|unlikely
argument_list|(
name|alignment
operator|>
name|HUGE_MAXCLASS
argument_list|)
condition|)
return|return
operator|(
literal|0
operator|)
return|;
comment|/* 	 * We can't achieve subchunk alignment, so round up alignment to the 	 * minimum that can actually be supported. 	 */
name|alignment
operator|=
name|CHUNK_CEILING
argument_list|(
name|alignment
argument_list|)
expr_stmt|;
comment|/* Make sure result is a huge size class. */
if|if
condition|(
name|size
operator|<=
name|chunksize
condition|)
name|usize
operator|=
name|chunksize
expr_stmt|;
else|else
block|{
name|usize
operator|=
name|s2u
argument_list|(
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
name|usize
operator|<
name|size
condition|)
block|{
comment|/* size_t overflow. */
return|return
operator|(
literal|0
operator|)
return|;
block|}
block|}
comment|/* 	 * Calculate the multi-chunk mapping that huge_palloc() would need in 	 * order to guarantee the alignment. 	 */
if|if
condition|(
name|usize
operator|+
name|alignment
operator|-
name|PAGE
operator|<
name|usize
condition|)
block|{
comment|/* size_t overflow. */
return|return
operator|(
literal|0
operator|)
return|;
block|}
return|return
operator|(
name|usize
operator|)
return|;
block|}
end_function

begin_comment
comment|/* Choose an arena based on a per-thread value. */
end_comment

begin_function
name|JEMALLOC_INLINE
name|arena_t
modifier|*
name|arena_choose_impl
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|bool
name|internal
parameter_list|)
block|{
name|arena_t
modifier|*
name|ret
decl_stmt|;
if|if
condition|(
name|arena
operator|!=
name|NULL
condition|)
return|return
operator|(
name|arena
operator|)
return|;
name|ret
operator|=
name|internal
condition|?
name|tsd_iarena_get
argument_list|(
name|tsd
argument_list|)
else|:
name|tsd_arena_get
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|ret
operator|==
name|NULL
argument_list|)
condition|)
name|ret
operator|=
name|arena_choose_hard
argument_list|(
name|tsd
argument_list|,
name|internal
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|arena_t
modifier|*
name|arena_choose
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
return|return
operator|(
name|arena_choose_impl
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|,
name|false
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|arena_t
modifier|*
name|arena_ichoose
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|assert
argument_list|(
operator|!
name|tsdn_null
argument_list|(
name|tsdn
argument_list|)
operator|||
name|arena
operator|!=
name|NULL
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tsdn_null
argument_list|(
name|tsdn
argument_list|)
condition|)
return|return
operator|(
name|arena_choose_impl
argument_list|(
name|tsdn_tsd
argument_list|(
name|tsdn
argument_list|)
argument_list|,
name|NULL
argument_list|,
name|true
argument_list|)
operator|)
return|;
return|return
operator|(
name|arena
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|arena_tdata_t
modifier|*
name|arena_tdata_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|ind
parameter_list|,
name|bool
name|refresh_if_missing
parameter_list|)
block|{
name|arena_tdata_t
modifier|*
name|tdata
decl_stmt|;
name|arena_tdata_t
modifier|*
name|arenas_tdata
init|=
name|tsd_arenas_tdata_get
argument_list|(
name|tsd
argument_list|)
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|arenas_tdata
operator|==
name|NULL
argument_list|)
condition|)
block|{
comment|/* arenas_tdata hasn't been initialized yet. */
return|return
operator|(
name|arena_tdata_get_hard
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|)
operator|)
return|;
block|}
if|if
condition|(
name|unlikely
argument_list|(
name|ind
operator|>=
name|tsd_narenas_tdata_get
argument_list|(
name|tsd
argument_list|)
argument_list|)
condition|)
block|{
comment|/* 		 * ind is invalid, cache is old (too small), or tdata to be 		 * initialized. 		 */
return|return
operator|(
name|refresh_if_missing
condition|?
name|arena_tdata_get_hard
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|)
else|:
name|NULL
operator|)
return|;
block|}
name|tdata
operator|=
operator|&
name|arenas_tdata
index|[
name|ind
index|]
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|tdata
operator|!=
name|NULL
argument_list|)
operator|||
operator|!
name|refresh_if_missing
condition|)
return|return
operator|(
name|tdata
operator|)
return|;
return|return
operator|(
name|arena_tdata_get_hard
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|arena_t
modifier|*
name|arena_get
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|unsigned
name|ind
parameter_list|,
name|bool
name|init_if_missing
parameter_list|)
block|{
name|arena_t
modifier|*
name|ret
decl_stmt|;
name|assert
argument_list|(
name|ind
operator|<=
name|MALLOCX_ARENA_MAX
argument_list|)
expr_stmt|;
name|ret
operator|=
name|arenas
index|[
name|ind
index|]
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|ret
operator|==
name|NULL
argument_list|)
condition|)
block|{
name|ret
operator|=
name|atomic_read_p
argument_list|(
operator|(
name|void
operator|*
operator|)
operator|&
name|arenas
index|[
name|ind
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|init_if_missing
operator|&&
name|unlikely
argument_list|(
name|ret
operator|==
name|NULL
argument_list|)
condition|)
name|ret
operator|=
name|arena_init
argument_list|(
name|tsdn
argument_list|,
name|ind
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|ticker_t
modifier|*
name|decay_ticker_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|ind
parameter_list|)
block|{
name|arena_tdata_t
modifier|*
name|tdata
decl_stmt|;
name|tdata
operator|=
name|arena_tdata_get
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|,
name|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tdata
operator|==
name|NULL
argument_list|)
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
return|return
operator|(
operator|&
name|tdata
operator|->
name|decay_ticker
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"jemalloc/internal/bitmap.h"
end_include

begin_comment
comment|/*  * Include portions of arena.h interleaved with tcache.h in order to resolve  * circular dependencies.  */
end_comment

begin_define
define|#
directive|define
name|JEMALLOC_ARENA_INLINE_A
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/arena.h"
end_include

begin_undef
undef|#
directive|undef
name|JEMALLOC_ARENA_INLINE_A
end_undef

begin_include
include|#
directive|include
file|"jemalloc/internal/tcache.h"
end_include

begin_define
define|#
directive|define
name|JEMALLOC_ARENA_INLINE_B
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/arena.h"
end_include

begin_undef
undef|#
directive|undef
name|JEMALLOC_ARENA_INLINE_B
end_undef

begin_include
include|#
directive|include
file|"jemalloc/internal/hash.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/quarantine.h"
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_ENABLE_INLINE
end_ifndef

begin_function_decl
name|arena_t
modifier|*
name|iaalloc
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|isalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|bool
name|demote
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|iallocztm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|is_metadata
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|bool
name|slow_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ialloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|bool
name|slow_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ipallocztm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|is_metadata
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ipalloct
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|ipalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|ivsalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|bool
name|demote
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|u2rz
parameter_list|(
name|size_t
name|usize
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|size_t
name|p2rz
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|idalloctm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|is_metadata
parameter_list|,
name|bool
name|slow_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|idalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|iqalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isdalloct
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|isqalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|iralloct_realign
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|extra
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|iralloct
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|iralloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|bool
name|ixalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|extra
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|JEMALLOC_ENABLE_INLINE
argument_list|)
operator|||
name|defined
argument_list|(
name|JEMALLOC_C_
argument_list|)
operator|)
end_if

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|arena_t
modifier|*
name|iaalloc
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
return|return
operator|(
name|arena_aalloc
argument_list|(
name|ptr
argument_list|)
operator|)
return|;
block|}
end_function

begin_comment
comment|/*  * Typical usage:  *   tsdn_t *tsdn = [...]  *   void *ptr = [...]  *   size_t sz = isalloc(tsdn, ptr, config_prof);  */
end_comment

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|isalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|bool
name|demote
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
comment|/* Demotion only makes sense if config_prof is true. */
name|assert
argument_list|(
name|config_prof
operator|||
operator|!
name|demote
argument_list|)
expr_stmt|;
return|return
operator|(
name|arena_salloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|demote
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|iallocztm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|is_metadata
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
name|assert
argument_list|(
name|size
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_metadata
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_metadata
operator|||
name|arena
operator|==
name|NULL
operator|||
name|arena
operator|->
name|ind
operator|<
name|narenas_auto
argument_list|)
expr_stmt|;
name|ret
operator|=
name|arena_malloc
argument_list|(
name|tsdn
argument_list|,
name|arena
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_stats
operator|&&
name|is_metadata
operator|&&
name|likely
argument_list|(
name|ret
operator|!=
name|NULL
argument_list|)
condition|)
block|{
name|arena_metadata_allocated_add
argument_list|(
name|iaalloc
argument_list|(
name|ret
argument_list|)
argument_list|,
name|isalloc
argument_list|(
name|tsdn
argument_list|,
name|ret
argument_list|,
name|config_prof
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|ialloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|size_t
name|size
parameter_list|,
name|szind_t
name|ind
parameter_list|,
name|bool
name|zero
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
return|return
operator|(
name|iallocztm
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|size
argument_list|,
name|ind
argument_list|,
name|zero
argument_list|,
name|tcache_get
argument_list|(
name|tsd
argument_list|,
name|true
argument_list|)
argument_list|,
name|false
argument_list|,
name|NULL
argument_list|,
name|slow_path
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|ipallocztm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|is_metadata
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|void
modifier|*
name|ret
decl_stmt|;
name|assert
argument_list|(
name|usize
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|usize
operator|==
name|sa2u
argument_list|(
name|usize
argument_list|,
name|alignment
argument_list|)
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_metadata
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_metadata
operator|||
name|arena
operator|==
name|NULL
operator|||
name|arena
operator|->
name|ind
operator|<
name|narenas_auto
argument_list|)
expr_stmt|;
name|ret
operator|=
name|arena_palloc
argument_list|(
name|tsdn
argument_list|,
name|arena
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|ALIGNMENT_ADDR2BASE
argument_list|(
name|ret
argument_list|,
name|alignment
argument_list|)
operator|==
name|ret
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_stats
operator|&&
name|is_metadata
operator|&&
name|likely
argument_list|(
name|ret
operator|!=
name|NULL
argument_list|)
condition|)
block|{
name|arena_metadata_allocated_add
argument_list|(
name|iaalloc
argument_list|(
name|ret
argument_list|)
argument_list|,
name|isalloc
argument_list|(
name|tsdn
argument_list|,
name|ret
argument_list|,
name|config_prof
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|ipalloct
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
return|return
operator|(
name|ipallocztm
argument_list|(
name|tsdn
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|false
argument_list|,
name|arena
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|ipalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|size_t
name|usize
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
block|{
return|return
operator|(
name|ipallocztm
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache_get
argument_list|(
name|tsd
argument_list|,
name|true
argument_list|)
argument_list|,
name|false
argument_list|,
name|NULL
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|size_t
name|ivsalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|bool
name|demote
parameter_list|)
block|{
name|extent_node_t
modifier|*
name|node
decl_stmt|;
comment|/* Return 0 if ptr is not within a chunk managed by jemalloc. */
name|node
operator|=
name|chunk_lookup
argument_list|(
name|ptr
argument_list|,
name|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|==
name|NULL
condition|)
return|return
operator|(
literal|0
operator|)
return|;
comment|/* Only arena chunks should be looked up via interior pointers. */
name|assert
argument_list|(
name|extent_node_addr_get
argument_list|(
name|node
argument_list|)
operator|==
name|ptr
operator|||
name|extent_node_achunk_get
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|isalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|demote
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|size_t
name|u2rz
parameter_list|(
name|size_t
name|usize
parameter_list|)
block|{
name|size_t
name|ret
decl_stmt|;
if|if
condition|(
name|usize
operator|<=
name|SMALL_MAXCLASS
condition|)
block|{
name|szind_t
name|binind
init|=
name|size2index
argument_list|(
name|usize
argument_list|)
decl_stmt|;
name|ret
operator|=
name|arena_bin_info
index|[
name|binind
index|]
operator|.
name|redzone_size
expr_stmt|;
block|}
else|else
name|ret
operator|=
literal|0
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_INLINE
name|size_t
name|p2rz
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|size_t
name|usize
init|=
name|isalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|false
argument_list|)
decl_stmt|;
return|return
operator|(
name|u2rz
argument_list|(
name|usize
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|idalloctm
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|is_metadata
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_metadata
operator|||
name|tcache
operator|==
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
operator|!
name|is_metadata
operator|||
name|iaalloc
argument_list|(
name|ptr
argument_list|)
operator|->
name|ind
operator|<
name|narenas_auto
argument_list|)
expr_stmt|;
if|if
condition|(
name|config_stats
operator|&&
name|is_metadata
condition|)
block|{
name|arena_metadata_allocated_sub
argument_list|(
name|iaalloc
argument_list|(
name|ptr
argument_list|)
argument_list|,
name|isalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|config_prof
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|arena_dalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|tcache
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|idalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|idalloctm
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ptr
argument_list|,
name|tcache_get
argument_list|(
name|tsd
argument_list|,
name|false
argument_list|)
argument_list|,
name|false
argument_list|,
name|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|iqalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
if|if
condition|(
name|slow_path
operator|&&
name|config_fill
operator|&&
name|unlikely
argument_list|(
name|opt_quarantine
argument_list|)
condition|)
name|quarantine
argument_list|(
name|tsd
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
else|else
name|idalloctm
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ptr
argument_list|,
name|tcache
argument_list|,
name|false
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|isdalloct
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
name|arena_sdalloc
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|size
argument_list|,
name|tcache
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
name|isqalloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|bool
name|slow_path
parameter_list|)
block|{
if|if
condition|(
name|slow_path
operator|&&
name|config_fill
operator|&&
name|unlikely
argument_list|(
name|opt_quarantine
argument_list|)
condition|)
name|quarantine
argument_list|(
name|tsd
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
else|else
name|isdalloct
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|ptr
argument_list|,
name|size
argument_list|,
name|tcache
argument_list|,
name|slow_path
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|iralloct_realign
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|extra
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|void
modifier|*
name|p
decl_stmt|;
name|size_t
name|usize
decl_stmt|,
name|copysize
decl_stmt|;
name|usize
operator|=
name|sa2u
argument_list|(
name|size
operator|+
name|extra
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|usize
operator|==
literal|0
operator|||
name|usize
operator|>
name|HUGE_MAXCLASS
argument_list|)
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|p
operator|=
name|ipalloct
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|arena
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
name|NULL
condition|)
block|{
if|if
condition|(
name|extra
operator|==
literal|0
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
comment|/* Try again, without extra this time. */
name|usize
operator|=
name|sa2u
argument_list|(
name|size
argument_list|,
name|alignment
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|usize
operator|==
literal|0
operator|||
name|usize
operator|>
name|HUGE_MAXCLASS
argument_list|)
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
name|p
operator|=
name|ipalloct
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
name|usize
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|arena
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|==
name|NULL
condition|)
return|return
operator|(
name|NULL
operator|)
return|;
block|}
comment|/* 	 * Copy at most size bytes (not size+extra), since the caller has no 	 * expectation that the extra bytes will be reliably preserved. 	 */
name|copysize
operator|=
operator|(
name|size
operator|<
name|oldsize
operator|)
condition|?
name|size
else|:
name|oldsize
expr_stmt|;
name|memcpy
argument_list|(
name|p
argument_list|,
name|ptr
argument_list|,
name|copysize
argument_list|)
expr_stmt|;
name|isqalloc
argument_list|(
name|tsd
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|tcache
argument_list|,
name|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|p
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|iralloct
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|,
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|size
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignment
operator|!=
literal|0
operator|&&
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|&
operator|(
operator|(
name|uintptr_t
operator|)
name|alignment
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
comment|/* 		 * Existing object alignment is inadequate; allocate new space 		 * and copy. 		 */
return|return
operator|(
name|iralloct_realign
argument_list|(
name|tsd
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|,
name|arena
argument_list|)
operator|)
return|;
block|}
return|return
operator|(
name|arena_ralloc
argument_list|(
name|tsd
argument_list|,
name|arena
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|size
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|void
modifier|*
name|iralloc
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
block|{
return|return
operator|(
name|iralloct
argument_list|(
name|tsd
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|size
argument_list|,
name|alignment
argument_list|,
name|zero
argument_list|,
name|tcache_get
argument_list|(
name|tsd
argument_list|,
name|true
argument_list|)
argument_list|,
name|NULL
argument_list|)
operator|)
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|bool
name|ixalloc
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|oldsize
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|extra
parameter_list|,
name|size_t
name|alignment
parameter_list|,
name|bool
name|zero
parameter_list|)
block|{
name|assert
argument_list|(
name|ptr
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|size
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|alignment
operator|!=
literal|0
operator|&&
operator|(
operator|(
name|uintptr_t
operator|)
name|ptr
operator|&
operator|(
operator|(
name|uintptr_t
operator|)
name|alignment
operator|-
literal|1
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
comment|/* Existing object alignment is inadequate. */
return|return
operator|(
name|true
operator|)
return|;
block|}
return|return
operator|(
name|arena_ralloc_no_move
argument_list|(
name|tsdn
argument_list|,
name|ptr
argument_list|,
name|oldsize
argument_list|,
name|size
argument_list|,
name|extra
argument_list|,
name|zero
argument_list|)
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|"jemalloc/internal/prof.h"
end_include

begin_undef
undef|#
directive|undef
name|JEMALLOC_H_INLINES
end_undef

begin_comment
comment|/******************************************************************************/
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_H */
end_comment

end_unit

