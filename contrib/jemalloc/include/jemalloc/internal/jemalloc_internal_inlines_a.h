begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_INLINES_A_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_INLINES_A_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/atomic.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/bit_util.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/jemalloc_internal_types.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/size_classes.h"
end_include

begin_include
include|#
directive|include
file|"jemalloc/internal/ticker.h"
end_include

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|malloc_cpuid_t
name|malloc_getcpu
parameter_list|(
name|void
parameter_list|)
block|{
name|assert
argument_list|(
name|have_percpu_arena
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|JEMALLOC_HAVE_SCHED_GETCPU
argument_list|)
return|return
operator|(
name|malloc_cpuid_t
operator|)
name|sched_getcpu
argument_list|()
return|;
else|#
directive|else
name|not_reached
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Return the chosen arena index based on current cpu. */
end_comment

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|unsigned
name|percpu_arena_choose
parameter_list|(
name|void
parameter_list|)
block|{
name|assert
argument_list|(
name|have_percpu_arena
operator|&&
name|PERCPU_ARENA_ENABLED
argument_list|(
name|opt_percpu_arena
argument_list|)
argument_list|)
expr_stmt|;
name|malloc_cpuid_t
name|cpuid
init|=
name|malloc_getcpu
argument_list|()
decl_stmt|;
name|assert
argument_list|(
name|cpuid
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|unsigned
name|arena_ind
decl_stmt|;
if|if
condition|(
operator|(
name|opt_percpu_arena
operator|==
name|percpu_arena
operator|)
operator|||
operator|(
operator|(
name|unsigned
operator|)
name|cpuid
operator|<
name|ncpus
operator|/
literal|2
operator|)
condition|)
block|{
name|arena_ind
operator|=
name|cpuid
expr_stmt|;
block|}
else|else
block|{
name|assert
argument_list|(
name|opt_percpu_arena
operator|==
name|per_phycpu_arena
argument_list|)
expr_stmt|;
comment|/* Hyper threads on the same physical CPU share arena. */
name|arena_ind
operator|=
name|cpuid
operator|-
name|ncpus
operator|/
literal|2
expr_stmt|;
block|}
return|return
name|arena_ind
return|;
block|}
end_function

begin_comment
comment|/* Return the limit of percpu auto arena range, i.e. arenas[0...ind_limit). */
end_comment

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|unsigned
name|percpu_arena_ind_limit
parameter_list|(
name|percpu_arena_mode_t
name|mode
parameter_list|)
block|{
name|assert
argument_list|(
name|have_percpu_arena
operator|&&
name|PERCPU_ARENA_ENABLED
argument_list|(
name|mode
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|per_phycpu_arena
operator|&&
name|ncpus
operator|>
literal|1
condition|)
block|{
if|if
condition|(
name|ncpus
operator|%
literal|2
condition|)
block|{
comment|/* This likely means a misconfig. */
return|return
name|ncpus
operator|/
literal|2
operator|+
literal|1
return|;
block|}
return|return
name|ncpus
operator|/
literal|2
return|;
block|}
else|else
block|{
return|return
name|ncpus
return|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|arena_tdata_t
modifier|*
name|arena_tdata_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|ind
parameter_list|,
name|bool
name|refresh_if_missing
parameter_list|)
block|{
name|arena_tdata_t
modifier|*
name|tdata
decl_stmt|;
name|arena_tdata_t
modifier|*
name|arenas_tdata
init|=
name|tsd_arenas_tdata_get
argument_list|(
name|tsd
argument_list|)
decl_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|arenas_tdata
operator|==
name|NULL
argument_list|)
condition|)
block|{
comment|/* arenas_tdata hasn't been initialized yet. */
return|return
name|arena_tdata_get_hard
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|)
return|;
block|}
if|if
condition|(
name|unlikely
argument_list|(
name|ind
operator|>=
name|tsd_narenas_tdata_get
argument_list|(
name|tsd
argument_list|)
argument_list|)
condition|)
block|{
comment|/* 		 * ind is invalid, cache is old (too small), or tdata to be 		 * initialized. 		 */
return|return
operator|(
name|refresh_if_missing
condition|?
name|arena_tdata_get_hard
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|)
else|:
name|NULL
operator|)
return|;
block|}
name|tdata
operator|=
operator|&
name|arenas_tdata
index|[
name|ind
index|]
expr_stmt|;
if|if
condition|(
name|likely
argument_list|(
name|tdata
operator|!=
name|NULL
argument_list|)
operator|||
operator|!
name|refresh_if_missing
condition|)
block|{
return|return
name|tdata
return|;
block|}
return|return
name|arena_tdata_get_hard
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|arena_t
modifier|*
name|arena_get
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|unsigned
name|ind
parameter_list|,
name|bool
name|init_if_missing
parameter_list|)
block|{
name|arena_t
modifier|*
name|ret
decl_stmt|;
name|assert
argument_list|(
name|ind
operator|<
name|MALLOCX_ARENA_LIMIT
argument_list|)
expr_stmt|;
name|ret
operator|=
operator|(
name|arena_t
operator|*
operator|)
name|atomic_load_p
argument_list|(
operator|&
name|arenas
index|[
name|ind
index|]
argument_list|,
name|ATOMIC_ACQUIRE
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|ret
operator|==
name|NULL
argument_list|)
condition|)
block|{
if|if
condition|(
name|init_if_missing
condition|)
block|{
name|ret
operator|=
name|arena_init
argument_list|(
name|tsdn
argument_list|,
name|ind
argument_list|,
operator|(
name|extent_hooks_t
operator|*
operator|)
operator|&
name|extent_hooks_default
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|ticker_t
modifier|*
name|decay_ticker_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|unsigned
name|ind
parameter_list|)
block|{
name|arena_tdata_t
modifier|*
name|tdata
decl_stmt|;
name|tdata
operator|=
name|arena_tdata_get
argument_list|(
name|tsd
argument_list|,
name|ind
argument_list|,
name|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|unlikely
argument_list|(
name|tdata
operator|==
name|NULL
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
return|return
operator|&
name|tdata
operator|->
name|decay_ticker
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|tcache_bin_t
modifier|*
name|tcache_small_bin_get
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|szind_t
name|binind
parameter_list|)
block|{
name|assert
argument_list|(
name|binind
operator|<
name|NBINS
argument_list|)
expr_stmt|;
return|return
operator|&
name|tcache
operator|->
name|tbins_small
index|[
name|binind
index|]
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|tcache_bin_t
modifier|*
name|tcache_large_bin_get
parameter_list|(
name|tcache_t
modifier|*
name|tcache
parameter_list|,
name|szind_t
name|binind
parameter_list|)
block|{
name|assert
argument_list|(
name|binind
operator|>=
name|NBINS
operator|&&
name|binind
operator|<
name|nhbins
argument_list|)
expr_stmt|;
return|return
operator|&
name|tcache
operator|->
name|tbins_large
index|[
name|binind
operator|-
name|NBINS
index|]
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|bool
name|tcache_available
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
block|{
comment|/* 	 * Thread specific auto tcache might be unavailable if: 1) during tcache 	 * initialization, or 2) disabled through thread.tcache.enabled mallctl 	 * or config options.  This check covers all cases. 	 */
if|if
condition|(
name|likely
argument_list|(
name|tsd_tcache_enabled_get
argument_list|(
name|tsd
argument_list|)
argument_list|)
condition|)
block|{
comment|/* Associated arena == NULL implies tcache init in progress. */
name|assert
argument_list|(
name|tsd_tcachep_get
argument_list|(
name|tsd
argument_list|)
operator|->
name|arena
operator|==
name|NULL
operator|||
name|tcache_small_bin_get
argument_list|(
name|tsd_tcachep_get
argument_list|(
name|tsd
argument_list|)
argument_list|,
literal|0
argument_list|)
operator|->
name|avail
operator|!=
name|NULL
argument_list|)
expr_stmt|;
return|return
name|true
return|;
block|}
return|return
name|false
return|;
block|}
end_function

begin_function
name|JEMALLOC_ALWAYS_INLINE
name|tcache_t
modifier|*
name|tcache_get
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tcache_available
argument_list|(
name|tsd
argument_list|)
condition|)
block|{
return|return
name|NULL
return|;
block|}
return|return
name|tsd_tcachep_get
argument_list|(
name|tsd
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|pre_reentrancy
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|,
name|arena_t
modifier|*
name|arena
parameter_list|)
block|{
comment|/* arena is the current context.  Reentry from a0 is not allowed. */
name|assert
argument_list|(
name|arena
operator|!=
name|arena_get
argument_list|(
name|tsd_tsdn
argument_list|(
name|tsd
argument_list|)
argument_list|,
literal|0
argument_list|,
name|false
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|fast
init|=
name|tsd_fast
argument_list|(
name|tsd
argument_list|)
decl_stmt|;
operator|++
operator|*
name|tsd_reentrancy_levelp_get
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
if|if
condition|(
name|fast
condition|)
block|{
comment|/* Prepare slow path for reentrancy. */
name|tsd_slow_update
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
name|assert
argument_list|(
name|tsd
operator|->
name|state
operator|==
name|tsd_state_nominal_slow
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|post_reentrancy
parameter_list|(
name|tsd_t
modifier|*
name|tsd
parameter_list|)
block|{
name|int8_t
modifier|*
name|reentrancy_level
init|=
name|tsd_reentrancy_levelp_get
argument_list|(
name|tsd
argument_list|)
decl_stmt|;
name|assert
argument_list|(
operator|*
name|reentrancy_level
operator|>
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|--
operator|*
name|reentrancy_level
operator|==
literal|0
condition|)
block|{
name|tsd_slow_update
argument_list|(
name|tsd
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_INLINES_A_H */
end_comment

end_unit

