begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_BIT_UTIL_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_BIT_UTIL_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/assert.h"
end_include

begin_define
define|#
directive|define
name|BIT_UTIL_INLINE
value|static inline
end_define

begin_comment
comment|/* Sanity check. */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|JEMALLOC_INTERNAL_FFSLL
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|JEMALLOC_INTERNAL_FFSL
argument_list|)
expr|\
operator|||
operator|!
name|defined
argument_list|(
name|JEMALLOC_INTERNAL_FFS
argument_list|)
end_if

begin_error
error|#
directive|error
error|JEMALLOC_INTERNAL_FFS{,L,LL} should have been defined by configure
end_error

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|ffs_llu
parameter_list|(
name|unsigned
name|long
name|long
name|bitmap
parameter_list|)
block|{
return|return
name|JEMALLOC_INTERNAL_FFSLL
argument_list|(
name|bitmap
argument_list|)
return|;
block|}
end_function

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|ffs_lu
parameter_list|(
name|unsigned
name|long
name|bitmap
parameter_list|)
block|{
return|return
name|JEMALLOC_INTERNAL_FFSL
argument_list|(
name|bitmap
argument_list|)
return|;
block|}
end_function

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|ffs_u
parameter_list|(
name|unsigned
name|bitmap
parameter_list|)
block|{
return|return
name|JEMALLOC_INTERNAL_FFS
argument_list|(
name|bitmap
argument_list|)
return|;
block|}
end_function

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|ffs_zu
parameter_list|(
name|size_t
name|bitmap
parameter_list|)
block|{
if|#
directive|if
name|LG_SIZEOF_PTR
operator|==
name|LG_SIZEOF_INT
return|return
name|ffs_u
argument_list|(
name|bitmap
argument_list|)
return|;
elif|#
directive|elif
name|LG_SIZEOF_PTR
operator|==
name|LG_SIZEOF_LONG
return|return
name|ffs_lu
argument_list|(
name|bitmap
argument_list|)
return|;
elif|#
directive|elif
name|LG_SIZEOF_PTR
operator|==
name|LG_SIZEOF_LONG_LONG
return|return
name|ffs_llu
argument_list|(
name|bitmap
argument_list|)
return|;
else|#
directive|else
error|#
directive|error
error|No implementation for size_t ffs()
endif|#
directive|endif
block|}
end_function

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|ffs_u64
parameter_list|(
name|uint64_t
name|bitmap
parameter_list|)
block|{
if|#
directive|if
name|LG_SIZEOF_LONG
operator|==
literal|3
return|return
name|ffs_lu
argument_list|(
name|bitmap
argument_list|)
return|;
elif|#
directive|elif
name|LG_SIZEOF_LONG_LONG
operator|==
literal|3
return|return
name|ffs_llu
argument_list|(
name|bitmap
argument_list|)
return|;
else|#
directive|else
error|#
directive|error
error|No implementation for 64-bit ffs()
endif|#
directive|endif
block|}
end_function

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|ffs_u32
parameter_list|(
name|uint32_t
name|bitmap
parameter_list|)
block|{
if|#
directive|if
name|LG_SIZEOF_INT
operator|==
literal|2
return|return
name|ffs_u
argument_list|(
name|bitmap
argument_list|)
return|;
else|#
directive|else
error|#
directive|error
error|No implementation for 32-bit ffs()
endif|#
directive|endif
return|return
name|ffs_u
argument_list|(
name|bitmap
argument_list|)
return|;
block|}
end_function

begin_function
name|BIT_UTIL_INLINE
name|uint64_t
name|pow2_ceil_u64
parameter_list|(
name|uint64_t
name|x
parameter_list|)
block|{
name|x
operator|--
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|1
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|2
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|4
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|8
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|16
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|32
expr_stmt|;
name|x
operator|++
expr_stmt|;
return|return
name|x
return|;
block|}
end_function

begin_function
name|BIT_UTIL_INLINE
name|uint32_t
name|pow2_ceil_u32
parameter_list|(
name|uint32_t
name|x
parameter_list|)
block|{
name|x
operator|--
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|1
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|2
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|4
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|8
expr_stmt|;
name|x
operator||=
name|x
operator|>>
literal|16
expr_stmt|;
name|x
operator|++
expr_stmt|;
return|return
name|x
return|;
block|}
end_function

begin_comment
comment|/* Compute the smallest power of 2 that is>= x. */
end_comment

begin_function
name|BIT_UTIL_INLINE
name|size_t
name|pow2_ceil_zu
parameter_list|(
name|size_t
name|x
parameter_list|)
block|{
if|#
directive|if
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|3
operator|)
return|return
name|pow2_ceil_u64
argument_list|(
name|x
argument_list|)
return|;
else|#
directive|else
return|return
name|pow2_ceil_u32
argument_list|(
name|x
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function

begin_if
if|#
directive|if
operator|(
name|defined
argument_list|(
name|__i386__
argument_list|)
operator|||
name|defined
argument_list|(
name|__amd64__
argument_list|)
operator|||
name|defined
argument_list|(
name|__x86_64__
argument_list|)
operator|)
end_if

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|lg_floor
parameter_list|(
name|size_t
name|x
parameter_list|)
block|{
name|size_t
name|ret
decl_stmt|;
name|assert
argument_list|(
name|x
operator|!=
literal|0
argument_list|)
expr_stmt|;
asm|asm ("bsr %1, %0" 	    : "=r"(ret)
comment|// Outputs.
asm|: "r"(x)
comment|// Inputs.
asm|);
name|assert
argument_list|(
name|ret
operator|<
name|UINT_MAX
argument_list|)
expr_stmt|;
return|return
operator|(
name|unsigned
operator|)
name|ret
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|)
end_elif

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|lg_floor
parameter_list|(
name|size_t
name|x
parameter_list|)
block|{
name|unsigned
name|long
name|ret
decl_stmt|;
name|assert
argument_list|(
name|x
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|3
operator|)
name|_BitScanReverse64
argument_list|(
operator|&
name|ret
argument_list|,
name|x
argument_list|)
expr_stmt|;
elif|#
directive|elif
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|2
operator|)
name|_BitScanReverse
argument_list|(
operator|&
name|ret
argument_list|,
name|x
argument_list|)
expr_stmt|;
else|#
directive|else
error|#
directive|error
literal|"Unsupported type size for lg_floor()"
endif|#
directive|endif
name|assert
argument_list|(
name|ret
operator|<
name|UINT_MAX
argument_list|)
expr_stmt|;
return|return
operator|(
name|unsigned
operator|)
name|ret
return|;
block|}
end_function

begin_elif
elif|#
directive|elif
operator|(
name|defined
argument_list|(
name|JEMALLOC_HAVE_BUILTIN_CLZ
argument_list|)
operator|)
end_elif

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|lg_floor
parameter_list|(
name|size_t
name|x
parameter_list|)
block|{
name|assert
argument_list|(
name|x
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|#
directive|if
operator|(
name|LG_SIZEOF_PTR
operator|==
name|LG_SIZEOF_INT
operator|)
return|return
operator|(
operator|(
literal|8
operator|<<
name|LG_SIZEOF_PTR
operator|)
operator|-
literal|1
operator|)
operator|-
name|__builtin_clz
argument_list|(
name|x
argument_list|)
return|;
elif|#
directive|elif
operator|(
name|LG_SIZEOF_PTR
operator|==
name|LG_SIZEOF_LONG
operator|)
return|return
operator|(
operator|(
literal|8
operator|<<
name|LG_SIZEOF_PTR
operator|)
operator|-
literal|1
operator|)
operator|-
name|__builtin_clzl
argument_list|(
name|x
argument_list|)
return|;
else|#
directive|else
error|#
directive|error
literal|"Unsupported type size for lg_floor()"
endif|#
directive|endif
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
name|BIT_UTIL_INLINE
name|unsigned
name|lg_floor
parameter_list|(
name|size_t
name|x
parameter_list|)
block|{
name|assert
argument_list|(
name|x
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|x
operator||=
operator|(
name|x
operator|>>
literal|1
operator|)
expr_stmt|;
name|x
operator||=
operator|(
name|x
operator|>>
literal|2
operator|)
expr_stmt|;
name|x
operator||=
operator|(
name|x
operator|>>
literal|4
operator|)
expr_stmt|;
name|x
operator||=
operator|(
name|x
operator|>>
literal|8
operator|)
expr_stmt|;
name|x
operator||=
operator|(
name|x
operator|>>
literal|16
operator|)
expr_stmt|;
if|#
directive|if
operator|(
name|LG_SIZEOF_PTR
operator|==
literal|3
operator|)
name|x
operator||=
operator|(
name|x
operator|>>
literal|32
operator|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|x
operator|==
name|SIZE_T_MAX
condition|)
block|{
return|return
operator|(
literal|8
operator|<<
name|LG_SIZEOF_PTR
operator|)
operator|-
literal|1
return|;
block|}
name|x
operator|++
expr_stmt|;
return|return
name|ffs_zu
argument_list|(
name|x
argument_list|)
operator|-
literal|2
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_undef
undef|#
directive|undef
name|BIT_UTIL_INLINE
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_BIT_UTIL_H */
end_comment

end_unit

