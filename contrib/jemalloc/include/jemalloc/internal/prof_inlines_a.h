begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_INTERNAL_PROF_INLINES_A_H
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_INTERNAL_PROF_INLINES_A_H
end_define

begin_include
include|#
directive|include
file|"jemalloc/internal/mutex.h"
end_include

begin_function
specifier|static
specifier|inline
name|bool
name|prof_accum_add
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|prof_accum_t
modifier|*
name|prof_accum
parameter_list|,
name|uint64_t
name|accumbytes
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
name|bool
name|overflow
decl_stmt|;
name|uint64_t
name|a0
decl_stmt|,
name|a1
decl_stmt|;
comment|/* 	 * If the application allocates fast enough (and/or if idump is slow 	 * enough), extreme overflow here (a1>= prof_interval * 2) can cause 	 * idump trigger coalescing.  This is an intentional mechanism that 	 * avoids rate-limiting allocation. 	 */
ifdef|#
directive|ifdef
name|JEMALLOC_ATOMIC_U64
name|a0
operator|=
name|atomic_load_u64
argument_list|(
operator|&
name|prof_accum
operator|->
name|accumbytes
argument_list|,
name|ATOMIC_RELAXED
argument_list|)
expr_stmt|;
do|do
block|{
name|a1
operator|=
name|a0
operator|+
name|accumbytes
expr_stmt|;
name|assert
argument_list|(
name|a1
operator|>=
name|a0
argument_list|)
expr_stmt|;
name|overflow
operator|=
operator|(
name|a1
operator|>=
name|prof_interval
operator|)
expr_stmt|;
if|if
condition|(
name|overflow
condition|)
block|{
name|a1
operator|%=
name|prof_interval
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|atomic_compare_exchange_weak_u64
argument_list|(
operator|&
name|prof_accum
operator|->
name|accumbytes
argument_list|,
operator|&
name|a0
argument_list|,
name|a1
argument_list|,
name|ATOMIC_RELAXED
argument_list|,
name|ATOMIC_RELAXED
argument_list|)
condition|)
do|;
else|#
directive|else
name|malloc_mutex_lock
argument_list|(
name|tsdn
argument_list|,
operator|&
name|prof_accum
operator|->
name|mtx
argument_list|)
expr_stmt|;
name|a0
operator|=
name|prof_accum
operator|->
name|accumbytes
expr_stmt|;
name|a1
operator|=
name|a0
operator|+
name|accumbytes
expr_stmt|;
name|overflow
operator|=
operator|(
name|a1
operator|>=
name|prof_interval
operator|)
expr_stmt|;
if|if
condition|(
name|overflow
condition|)
block|{
name|a1
operator|%=
name|prof_interval
expr_stmt|;
block|}
name|prof_accum
operator|->
name|accumbytes
operator|=
name|a1
expr_stmt|;
name|malloc_mutex_unlock
argument_list|(
name|tsdn
argument_list|,
operator|&
name|prof_accum
operator|->
name|mtx
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|overflow
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|prof_accum_cancel
parameter_list|(
name|tsdn_t
modifier|*
name|tsdn
parameter_list|,
name|prof_accum_t
modifier|*
name|prof_accum
parameter_list|,
name|size_t
name|usize
parameter_list|)
block|{
name|cassert
argument_list|(
name|config_prof
argument_list|)
expr_stmt|;
comment|/* 	 * Cancel out as much of the excessive prof_accumbytes increase as 	 * possible without underflowing.  Interval-triggered dumps occur 	 * slightly more often than intended as a result of incomplete 	 * canceling. 	 */
name|uint64_t
name|a0
decl_stmt|,
name|a1
decl_stmt|;
ifdef|#
directive|ifdef
name|JEMALLOC_ATOMIC_U64
name|a0
operator|=
name|atomic_load_u64
argument_list|(
operator|&
name|prof_accum
operator|->
name|accumbytes
argument_list|,
name|ATOMIC_RELAXED
argument_list|)
expr_stmt|;
do|do
block|{
name|a1
operator|=
operator|(
name|a0
operator|>=
name|LARGE_MINCLASS
operator|-
name|usize
operator|)
condition|?
name|a0
operator|-
operator|(
name|LARGE_MINCLASS
operator|-
name|usize
operator|)
else|:
literal|0
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|atomic_compare_exchange_weak_u64
argument_list|(
operator|&
name|prof_accum
operator|->
name|accumbytes
argument_list|,
operator|&
name|a0
argument_list|,
name|a1
argument_list|,
name|ATOMIC_RELAXED
argument_list|,
name|ATOMIC_RELAXED
argument_list|)
condition|)
do|;
else|#
directive|else
name|malloc_mutex_lock
argument_list|(
name|tsdn
argument_list|,
operator|&
name|prof_accum
operator|->
name|mtx
argument_list|)
expr_stmt|;
name|a0
operator|=
name|prof_accum
operator|->
name|accumbytes
expr_stmt|;
name|a1
operator|=
operator|(
name|a0
operator|>=
name|LARGE_MINCLASS
operator|-
name|usize
operator|)
condition|?
name|a0
operator|-
operator|(
name|LARGE_MINCLASS
operator|-
name|usize
operator|)
else|:
literal|0
expr_stmt|;
name|prof_accum
operator|->
name|accumbytes
operator|=
name|a1
expr_stmt|;
name|malloc_mutex_unlock
argument_list|(
name|tsdn
argument_list|,
operator|&
name|prof_accum
operator|->
name|mtx
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_INTERNAL_PROF_INLINES_A_H */
end_comment

end_unit

