begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_H_
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_H_
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* Defined if __attribute__((...)) syntax is supported. */
define|#
directive|define
name|JEMALLOC_HAVE_ATTR
comment|/* Defined if alloc_size attribute is supported. */
comment|/* #undef JEMALLOC_HAVE_ATTR_ALLOC_SIZE */
comment|/* Defined if format(gnu_printf, ...) attribute is supported. */
comment|/* #undef JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF */
comment|/* Defined if format(printf, ...) attribute is supported. */
define|#
directive|define
name|JEMALLOC_HAVE_ATTR_FORMAT_PRINTF
comment|/*  * Define overrides for non-standard allocator-related functions if they are  * present on the system.  */
comment|/* #undef JEMALLOC_OVERRIDE_MEMALIGN */
define|#
directive|define
name|JEMALLOC_OVERRIDE_VALLOC
comment|/*  * At least Linux omits the "const" in:  *  *   size_t malloc_usable_size(const void *ptr);  *  * Match the operating system's prototype.  */
define|#
directive|define
name|JEMALLOC_USABLE_SIZE_CONST
value|const
comment|/*  * If defined, specify throw() for the public function prototypes when compiling  * with C++.  The only justification for this is to match the prototypes that  * glibc defines.  */
comment|/* #undef JEMALLOC_USE_CXX_THROW */
comment|/* sizeof(void *) == 2^LG_SIZEOF_PTR. */
define|#
directive|define
name|LG_SIZEOF_PTR
value|3
comment|/*  * Name mangling for public symbols is controlled by --with-mangling and  * --with-jemalloc-prefix.  With default settings the je_ prefix is stripped by  * these macro definitions.  */
ifndef|#
directive|ifndef
name|JEMALLOC_NO_RENAME
define|#
directive|define
name|je_malloc_conf
value|malloc_conf
define|#
directive|define
name|je_malloc_message
value|malloc_message
define|#
directive|define
name|je_malloc
value|malloc
define|#
directive|define
name|je_calloc
value|calloc
define|#
directive|define
name|je_posix_memalign
value|posix_memalign
define|#
directive|define
name|je_aligned_alloc
value|aligned_alloc
define|#
directive|define
name|je_realloc
value|realloc
define|#
directive|define
name|je_free
value|free
define|#
directive|define
name|je_mallocx
value|mallocx
define|#
directive|define
name|je_rallocx
value|rallocx
define|#
directive|define
name|je_xallocx
value|xallocx
define|#
directive|define
name|je_sallocx
value|sallocx
define|#
directive|define
name|je_dallocx
value|dallocx
define|#
directive|define
name|je_sdallocx
value|sdallocx
define|#
directive|define
name|je_nallocx
value|nallocx
define|#
directive|define
name|je_mallctl
value|mallctl
define|#
directive|define
name|je_mallctlnametomib
value|mallctlnametomib
define|#
directive|define
name|je_mallctlbymib
value|mallctlbymib
define|#
directive|define
name|je_malloc_stats_print
value|malloc_stats_print
define|#
directive|define
name|je_malloc_usable_size
value|malloc_usable_size
define|#
directive|define
name|je_valloc
value|valloc
endif|#
directive|endif
include|#
directive|include
file|"jemalloc_FreeBSD.h"
include|#
directive|include
file|<stdlib.h>
include|#
directive|include
file|<stdbool.h>
include|#
directive|include
file|<stdint.h>
include|#
directive|include
file|<limits.h>
include|#
directive|include
file|<strings.h>
define|#
directive|define
name|JEMALLOC_VERSION
value|"4.0.4-0-g91010a9e2ebfc84b1ac1ed7fdde3bfed4f65f180"
define|#
directive|define
name|JEMALLOC_VERSION_MAJOR
value|4
define|#
directive|define
name|JEMALLOC_VERSION_MINOR
value|0
define|#
directive|define
name|JEMALLOC_VERSION_BUGFIX
value|4
define|#
directive|define
name|JEMALLOC_VERSION_NREV
value|0
define|#
directive|define
name|JEMALLOC_VERSION_GID
value|"91010a9e2ebfc84b1ac1ed7fdde3bfed4f65f180"
define|#
directive|define
name|MALLOCX_LG_ALIGN
parameter_list|(
name|la
parameter_list|)
value|(la)
if|#
directive|if
name|LG_SIZEOF_PTR
operator|==
literal|2
define|#
directive|define
name|MALLOCX_ALIGN
parameter_list|(
name|a
parameter_list|)
value|(ffs(a)-1)
else|#
directive|else
define|#
directive|define
name|MALLOCX_ALIGN
parameter_list|(
name|a
parameter_list|)
define|\
value|((a< (size_t)INT_MAX) ? ffs(a)-1 : ffs(a>>32)+31)
endif|#
directive|endif
define|#
directive|define
name|MALLOCX_ZERO
value|((int)0x40)
comment|/*  * Bias tcache index bits so that 0 encodes "automatic tcache management", and 1  * encodes MALLOCX_TCACHE_NONE.  */
define|#
directive|define
name|MALLOCX_TCACHE
parameter_list|(
name|tc
parameter_list|)
value|((int)(((tc)+2)<< 8))
define|#
directive|define
name|MALLOCX_TCACHE_NONE
value|MALLOCX_TCACHE(-1)
comment|/*  * Bias arena index bits so that 0 encodes "use an automatically chosen arena".  */
define|#
directive|define
name|MALLOCX_ARENA
parameter_list|(
name|a
parameter_list|)
value|((int)(((a)+1)<< 20))
if|#
directive|if
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|&&
name|defined
argument_list|(
name|JEMALLOC_USE_CXX_THROW
argument_list|)
define|#
directive|define
name|JEMALLOC_CXX_THROW
value|throw()
else|#
directive|else
define|#
directive|define
name|JEMALLOC_CXX_THROW
endif|#
directive|endif
ifdef|#
directive|ifdef
name|JEMALLOC_HAVE_ATTR
define|#
directive|define
name|JEMALLOC_ATTR
parameter_list|(
name|s
parameter_list|)
value|__attribute__((s))
define|#
directive|define
name|JEMALLOC_ALIGNED
parameter_list|(
name|s
parameter_list|)
value|JEMALLOC_ATTR(aligned(s))
ifdef|#
directive|ifdef
name|JEMALLOC_HAVE_ATTR_ALLOC_SIZE
define|#
directive|define
name|JEMALLOC_ALLOC_SIZE
parameter_list|(
name|s
parameter_list|)
value|JEMALLOC_ATTR(alloc_size(s))
define|#
directive|define
name|JEMALLOC_ALLOC_SIZE2
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
value|JEMALLOC_ATTR(alloc_size(s1, s2))
else|#
directive|else
define|#
directive|define
name|JEMALLOC_ALLOC_SIZE
parameter_list|(
name|s
parameter_list|)
define|#
directive|define
name|JEMALLOC_ALLOC_SIZE2
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|JEMALLOC_EXPORT
define|#
directive|define
name|JEMALLOC_EXPORT
value|JEMALLOC_ATTR(visibility("default"))
endif|#
directive|endif
ifdef|#
directive|ifdef
name|JEMALLOC_HAVE_ATTR_FORMAT_GNU_PRINTF
define|#
directive|define
name|JEMALLOC_FORMAT_PRINTF
parameter_list|(
name|s
parameter_list|,
name|i
parameter_list|)
value|JEMALLOC_ATTR(format(gnu_printf, s, i))
elif|#
directive|elif
name|defined
argument_list|(
name|JEMALLOC_HAVE_ATTR_FORMAT_PRINTF
argument_list|)
define|#
directive|define
name|JEMALLOC_FORMAT_PRINTF
parameter_list|(
name|s
parameter_list|,
name|i
parameter_list|)
value|JEMALLOC_ATTR(format(printf, s, i))
else|#
directive|else
define|#
directive|define
name|JEMALLOC_FORMAT_PRINTF
parameter_list|(
name|s
parameter_list|,
name|i
parameter_list|)
endif|#
directive|endif
define|#
directive|define
name|JEMALLOC_NOINLINE
value|JEMALLOC_ATTR(noinline)
define|#
directive|define
name|JEMALLOC_NOTHROW
value|JEMALLOC_ATTR(nothrow)
define|#
directive|define
name|JEMALLOC_SECTION
parameter_list|(
name|s
parameter_list|)
value|JEMALLOC_ATTR(section(s))
define|#
directive|define
name|JEMALLOC_RESTRICT_RETURN
define|#
directive|define
name|JEMALLOC_ALLOCATOR
elif|#
directive|elif
name|_MSC_VER
define|#
directive|define
name|JEMALLOC_ATTR
parameter_list|(
name|s
parameter_list|)
define|#
directive|define
name|JEMALLOC_ALIGNED
parameter_list|(
name|s
parameter_list|)
value|__declspec(align(s))
define|#
directive|define
name|JEMALLOC_ALLOC_SIZE
parameter_list|(
name|s
parameter_list|)
define|#
directive|define
name|JEMALLOC_ALLOC_SIZE2
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
ifndef|#
directive|ifndef
name|JEMALLOC_EXPORT
ifdef|#
directive|ifdef
name|DLLEXPORT
define|#
directive|define
name|JEMALLOC_EXPORT
value|__declspec(dllexport)
else|#
directive|else
define|#
directive|define
name|JEMALLOC_EXPORT
value|__declspec(dllimport)
endif|#
directive|endif
endif|#
directive|endif
define|#
directive|define
name|JEMALLOC_FORMAT_PRINTF
parameter_list|(
name|s
parameter_list|,
name|i
parameter_list|)
define|#
directive|define
name|JEMALLOC_NOINLINE
value|__declspec(noinline)
ifdef|#
directive|ifdef
name|__cplusplus
define|#
directive|define
name|JEMALLOC_NOTHROW
value|__declspec(nothrow)
else|#
directive|else
define|#
directive|define
name|JEMALLOC_NOTHROW
endif|#
directive|endif
define|#
directive|define
name|JEMALLOC_SECTION
parameter_list|(
name|s
parameter_list|)
value|__declspec(allocate(s))
define|#
directive|define
name|JEMALLOC_RESTRICT_RETURN
value|__declspec(restrict)
if|#
directive|if
name|_MSC_VER
operator|>=
literal|1900
operator|&&
operator|!
name|defined
argument_list|(
name|__EDG__
argument_list|)
define|#
directive|define
name|JEMALLOC_ALLOCATOR
value|__declspec(allocator)
else|#
directive|else
define|#
directive|define
name|JEMALLOC_ALLOCATOR
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|JEMALLOC_ATTR
parameter_list|(
name|s
parameter_list|)
define|#
directive|define
name|JEMALLOC_ALIGNED
parameter_list|(
name|s
parameter_list|)
define|#
directive|define
name|JEMALLOC_ALLOC_SIZE
parameter_list|(
name|s
parameter_list|)
define|#
directive|define
name|JEMALLOC_ALLOC_SIZE2
parameter_list|(
name|s1
parameter_list|,
name|s2
parameter_list|)
define|#
directive|define
name|JEMALLOC_EXPORT
define|#
directive|define
name|JEMALLOC_FORMAT_PRINTF
parameter_list|(
name|s
parameter_list|,
name|i
parameter_list|)
define|#
directive|define
name|JEMALLOC_NOINLINE
define|#
directive|define
name|JEMALLOC_NOTHROW
define|#
directive|define
name|JEMALLOC_SECTION
parameter_list|(
name|s
parameter_list|)
define|#
directive|define
name|JEMALLOC_RESTRICT_RETURN
define|#
directive|define
name|JEMALLOC_ALLOCATOR
endif|#
directive|endif
comment|/*  * The je_ prefix on the following public symbol declarations is an artifact  * of namespace management, and should be omitted in application code unless  * JEMALLOC_NO_DEMANGLE is defined (see jemalloc_mangle.h).  */
specifier|extern
name|JEMALLOC_EXPORT
specifier|const
name|char
modifier|*
name|je_malloc_conf
decl_stmt|;
specifier|extern
name|JEMALLOC_EXPORT
name|void
function_decl|(
modifier|*
name|je_malloc_message
function_decl|)
parameter_list|(
name|void
modifier|*
name|cbopaque
parameter_list|,
specifier|const
name|char
modifier|*
name|s
parameter_list|)
function_decl|;
name|JEMALLOC_EXPORT
name|JEMALLOC_ALLOCATOR
name|JEMALLOC_RESTRICT_RETURN
name|void
name|JEMALLOC_NOTHROW
modifier|*
name|je_malloc
argument_list|(
name|size_t
name|size
argument_list|)
name|JEMALLOC_CXX_THROW
name|JEMALLOC_ATTR
argument_list|(
name|malloc
argument_list|)
name|JEMALLOC_ALLOC_SIZE
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|JEMALLOC_EXPORT
name|JEMALLOC_ALLOCATOR
name|JEMALLOC_RESTRICT_RETURN
name|void
name|JEMALLOC_NOTHROW
modifier|*
name|je_calloc
argument_list|(
name|size_t
name|num
argument_list|,
name|size_t
name|size
argument_list|)
name|JEMALLOC_CXX_THROW
name|JEMALLOC_ATTR
argument_list|(
name|malloc
argument_list|)
name|JEMALLOC_ALLOC_SIZE2
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|JEMALLOC_EXPORT
name|int
name|JEMALLOC_NOTHROW
name|je_posix_memalign
argument_list|(
name|void
operator|*
operator|*
name|memptr
argument_list|,
name|size_t
name|alignment
argument_list|,
name|size_t
name|size
argument_list|)
name|JEMALLOC_CXX_THROW
name|JEMALLOC_ATTR
argument_list|(
name|nonnull
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|JEMALLOC_EXPORT
name|JEMALLOC_ALLOCATOR
name|JEMALLOC_RESTRICT_RETURN
name|void
name|JEMALLOC_NOTHROW
modifier|*
name|je_aligned_alloc
argument_list|(
name|size_t
name|alignment
argument_list|,
name|size_t
name|size
argument_list|)
name|JEMALLOC_CXX_THROW
name|JEMALLOC_ATTR
argument_list|(
name|malloc
argument_list|)
name|JEMALLOC_ALLOC_SIZE
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|JEMALLOC_EXPORT
name|JEMALLOC_ALLOCATOR
name|JEMALLOC_RESTRICT_RETURN
name|void
name|JEMALLOC_NOTHROW
modifier|*
name|je_realloc
argument_list|(
name|void
operator|*
name|ptr
argument_list|,
name|size_t
name|size
argument_list|)
name|JEMALLOC_CXX_THROW
name|JEMALLOC_ALLOC_SIZE
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|JEMALLOC_EXPORT
name|void
name|JEMALLOC_NOTHROW
name|je_free
argument_list|(
name|void
operator|*
name|ptr
argument_list|)
name|JEMALLOC_CXX_THROW
decl_stmt|;
name|JEMALLOC_EXPORT
name|JEMALLOC_ALLOCATOR
name|JEMALLOC_RESTRICT_RETURN
name|void
name|JEMALLOC_NOTHROW
modifier|*
name|je_mallocx
parameter_list|(
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|JEMALLOC_ATTR
parameter_list|(
name|malloc
parameter_list|)
function_decl|JEMALLOC_ALLOC_SIZE
parameter_list|(
function_decl|1
block|)
empty_stmt|;
end_extern

begin_function_decl
name|JEMALLOC_EXPORT
name|JEMALLOC_ALLOCATOR
name|JEMALLOC_RESTRICT_RETURN
name|void
name|JEMALLOC_NOTHROW
modifier|*
name|je_rallocx
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|JEMALLOC_ALLOC_SIZE
parameter_list|(
function_decl|2
end_function_decl

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_function_decl
name|JEMALLOC_EXPORT
name|size_t
name|JEMALLOC_NOTHROW
name|je_xallocx
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|size_t
name|extra
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|JEMALLOC_EXPORT
name|size_t
name|JEMALLOC_NOTHROW
name|je_sallocx
parameter_list|(
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|JEMALLOC_ATTR
parameter_list|(
name|pure
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|JEMALLOC_EXPORT
name|void
name|JEMALLOC_NOTHROW
name|je_dallocx
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|JEMALLOC_EXPORT
name|void
name|JEMALLOC_NOTHROW
name|je_sdallocx
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|,
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|JEMALLOC_EXPORT
name|size_t
name|JEMALLOC_NOTHROW
name|je_nallocx
parameter_list|(
name|size_t
name|size
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|JEMALLOC_ATTR
parameter_list|(
name|pure
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|JEMALLOC_EXPORT
name|int
name|JEMALLOC_NOTHROW
name|je_mallctl
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|void
modifier|*
name|oldp
parameter_list|,
name|size_t
modifier|*
name|oldlenp
parameter_list|,
name|void
modifier|*
name|newp
parameter_list|,
name|size_t
name|newlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|JEMALLOC_EXPORT
name|int
name|JEMALLOC_NOTHROW
name|je_mallctlnametomib
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|size_t
modifier|*
name|mibp
parameter_list|,
name|size_t
modifier|*
name|miblenp
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|JEMALLOC_EXPORT
name|int
name|JEMALLOC_NOTHROW
name|je_mallctlbymib
parameter_list|(
specifier|const
name|size_t
modifier|*
name|mib
parameter_list|,
name|size_t
name|miblen
parameter_list|,
name|void
modifier|*
name|oldp
parameter_list|,
name|size_t
modifier|*
name|oldlenp
parameter_list|,
name|void
modifier|*
name|newp
parameter_list|,
name|size_t
name|newlen
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|JEMALLOC_EXPORT
name|void
name|JEMALLOC_NOTHROW
name|je_malloc_stats_print
parameter_list|(
name|void
function_decl|(
modifier|*
name|write_cb
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|je_cbopaque
parameter_list|,
specifier|const
name|char
modifier|*
name|opts
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|JEMALLOC_EXPORT
name|size_t
name|JEMALLOC_NOTHROW
name|je_malloc_usable_size
argument_list|(
name|JEMALLOC_USABLE_SIZE_CONST
name|void
operator|*
name|ptr
argument_list|)
name|JEMALLOC_CXX_THROW
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_OVERRIDE_MEMALIGN
end_ifdef

begin_decl_stmt
name|JEMALLOC_EXPORT
name|JEMALLOC_ALLOCATOR
name|JEMALLOC_RESTRICT_RETURN
name|void
name|JEMALLOC_NOTHROW
modifier|*
name|je_memalign
argument_list|(
name|size_t
name|alignment
argument_list|,
name|size_t
name|size
argument_list|)
name|JEMALLOC_CXX_THROW
name|JEMALLOC_ATTR
argument_list|(
name|malloc
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_OVERRIDE_VALLOC
end_ifdef

begin_decl_stmt
name|JEMALLOC_EXPORT
name|JEMALLOC_ALLOCATOR
name|JEMALLOC_RESTRICT_RETURN
name|void
name|JEMALLOC_NOTHROW
modifier|*
name|je_valloc
argument_list|(
name|size_t
name|size
argument_list|)
name|JEMALLOC_CXX_THROW
name|JEMALLOC_ATTR
argument_list|(
name|malloc
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * void *  * chunk_alloc(void *new_addr, size_t size, size_t alignment, bool *zero,  *     bool *commit, unsigned arena_ind);  */
end_comment

begin_typedef
typedef|typedef
name|void
modifier|*
function_decl|(
name|chunk_alloc_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|bool
modifier|*
parameter_list|,
name|bool
modifier|*
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * bool  * chunk_dalloc(void *chunk, size_t size, bool committed, unsigned arena_ind);  */
end_comment

begin_typedef
typedef|typedef
name|bool
function_decl|(
name|chunk_dalloc_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|bool
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * bool  * chunk_commit(void *chunk, size_t size, size_t offset, size_t length,  *     unsigned arena_ind);  */
end_comment

begin_typedef
typedef|typedef
name|bool
function_decl|(
name|chunk_commit_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * bool  * chunk_decommit(void *chunk, size_t size, size_t offset, size_t length,  *     unsigned arena_ind);  */
end_comment

begin_typedef
typedef|typedef
name|bool
function_decl|(
name|chunk_decommit_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * bool  * chunk_purge(void *chunk, size_t size, size_t offset, size_t length,  *     unsigned arena_ind);  */
end_comment

begin_typedef
typedef|typedef
name|bool
function_decl|(
name|chunk_purge_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * bool  * chunk_split(void *chunk, size_t size, size_t size_a, size_t size_b,  *     bool committed, unsigned arena_ind);  */
end_comment

begin_typedef
typedef|typedef
name|bool
function_decl|(
name|chunk_split_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|bool
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_typedef

begin_comment
comment|/*  * bool  * chunk_merge(void *chunk_a, size_t size_a, void *chunk_b, size_t size_b,  *     bool committed, unsigned arena_ind);  */
end_comment

begin_typedef
typedef|typedef
name|bool
function_decl|(
name|chunk_merge_t
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|bool
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|chunk_alloc_t
modifier|*
name|alloc
decl_stmt|;
name|chunk_dalloc_t
modifier|*
name|dalloc
decl_stmt|;
name|chunk_commit_t
modifier|*
name|commit
decl_stmt|;
name|chunk_decommit_t
modifier|*
name|decommit
decl_stmt|;
name|chunk_purge_t
modifier|*
name|purge
decl_stmt|;
name|chunk_split_t
modifier|*
name|split
decl_stmt|;
name|chunk_merge_t
modifier|*
name|merge
decl_stmt|;
block|}
name|chunk_hooks_t
typedef|;
end_typedef

begin_comment
comment|/*  * By default application code must explicitly refer to mangled symbol names,  * so that it is possible to use jemalloc in conjunction with another allocator  * in the same application.  Define JEMALLOC_MANGLE in order to cause automatic  * name mangling that matches the API prefixing that happened as a result of  * --with-mangling and/or --with-jemalloc-prefix configuration settings.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|JEMALLOC_MANGLE
end_ifdef

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_NO_DEMANGLE
end_ifndef

begin_define
define|#
directive|define
name|JEMALLOC_NO_DEMANGLE
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|malloc_conf
value|je_malloc_conf
end_define

begin_define
define|#
directive|define
name|malloc_message
value|je_malloc_message
end_define

begin_define
define|#
directive|define
name|malloc
value|je_malloc
end_define

begin_define
define|#
directive|define
name|calloc
value|je_calloc
end_define

begin_define
define|#
directive|define
name|posix_memalign
value|je_posix_memalign
end_define

begin_define
define|#
directive|define
name|aligned_alloc
value|je_aligned_alloc
end_define

begin_define
define|#
directive|define
name|realloc
value|je_realloc
end_define

begin_define
define|#
directive|define
name|free
value|je_free
end_define

begin_define
define|#
directive|define
name|mallocx
value|je_mallocx
end_define

begin_define
define|#
directive|define
name|rallocx
value|je_rallocx
end_define

begin_define
define|#
directive|define
name|xallocx
value|je_xallocx
end_define

begin_define
define|#
directive|define
name|sallocx
value|je_sallocx
end_define

begin_define
define|#
directive|define
name|dallocx
value|je_dallocx
end_define

begin_define
define|#
directive|define
name|sdallocx
value|je_sdallocx
end_define

begin_define
define|#
directive|define
name|nallocx
value|je_nallocx
end_define

begin_define
define|#
directive|define
name|mallctl
value|je_mallctl
end_define

begin_define
define|#
directive|define
name|mallctlnametomib
value|je_mallctlnametomib
end_define

begin_define
define|#
directive|define
name|mallctlbymib
value|je_mallctlbymib
end_define

begin_define
define|#
directive|define
name|malloc_stats_print
value|je_malloc_stats_print
end_define

begin_define
define|#
directive|define
name|malloc_usable_size
value|je_malloc_usable_size
end_define

begin_define
define|#
directive|define
name|valloc
value|je_valloc
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * The je_* macros can be used as stable alternative names for the  * public jemalloc API if JEMALLOC_NO_DEMANGLE is defined.  This is primarily  * meant for use in jemalloc itself, but it can be used by application code to  * provide isolation from the name mangling specified via --with-mangling  * and/or --with-jemalloc-prefix.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|JEMALLOC_NO_DEMANGLE
end_ifndef

begin_undef
undef|#
directive|undef
name|je_malloc_conf
end_undef

begin_undef
undef|#
directive|undef
name|je_malloc_message
end_undef

begin_undef
undef|#
directive|undef
name|je_malloc
end_undef

begin_undef
undef|#
directive|undef
name|je_calloc
end_undef

begin_undef
undef|#
directive|undef
name|je_posix_memalign
end_undef

begin_undef
undef|#
directive|undef
name|je_aligned_alloc
end_undef

begin_undef
undef|#
directive|undef
name|je_realloc
end_undef

begin_undef
undef|#
directive|undef
name|je_free
end_undef

begin_undef
undef|#
directive|undef
name|je_mallocx
end_undef

begin_undef
undef|#
directive|undef
name|je_rallocx
end_undef

begin_undef
undef|#
directive|undef
name|je_xallocx
end_undef

begin_undef
undef|#
directive|undef
name|je_sallocx
end_undef

begin_undef
undef|#
directive|undef
name|je_dallocx
end_undef

begin_undef
undef|#
directive|undef
name|je_sdallocx
end_undef

begin_undef
undef|#
directive|undef
name|je_nallocx
end_undef

begin_undef
undef|#
directive|undef
name|je_mallctl
end_undef

begin_undef
undef|#
directive|undef
name|je_mallctlnametomib
end_undef

begin_undef
undef|#
directive|undef
name|je_mallctlbymib
end_undef

begin_undef
undef|#
directive|undef
name|je_malloc_stats_print
end_undef

begin_undef
undef|#
directive|undef
name|je_malloc_usable_size
end_undef

begin_undef
undef|#
directive|undef
name|je_valloc
end_undef

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_endif
unit|}
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* JEMALLOC_H_ */
end_comment

end_unit

