begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*-  * Copyright (c) 2009 Kai Wang  * Copyright (c) 2007,2008 Hyogeol Lee<hyogeollee@gmail.com>  * All rights reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer  *    in this position and unchanged.  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in the  *    documentation and/or other materials provided with the distribution.  *  * THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  *  * $Id: _libelftc.h 3531 2017-06-05 05:08:43Z kaiwang27 $  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__LIBELFTC_H_
end_ifndef

begin_define
define|#
directive|define
name|__LIBELFTC_H_
end_define

begin_include
include|#
directive|include
file|<stdbool.h>
end_include

begin_include
include|#
directive|include
file|"_elftc.h"
end_include

begin_struct
struct|struct
name|_Elftc_Bfd_Target
block|{
specifier|const
name|char
modifier|*
name|bt_name
decl_stmt|;
comment|/* target name. */
name|unsigned
name|int
name|bt_type
decl_stmt|;
comment|/* target type. */
name|unsigned
name|int
name|bt_byteorder
decl_stmt|;
comment|/* elf target byteorder. */
name|unsigned
name|int
name|bt_elfclass
decl_stmt|;
comment|/* elf target class (32/64bit). */
name|unsigned
name|int
name|bt_machine
decl_stmt|;
comment|/* elf target arch. */
name|unsigned
name|int
name|bt_osabi
decl_stmt|;
comment|/* elf target abi. */
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|struct
name|_Elftc_Bfd_Target
name|_libelftc_targets
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/** @brief Dynamic vector data for string. */
end_comment

begin_struct
struct|struct
name|vector_str
block|{
comment|/** Current size */
name|size_t
name|size
decl_stmt|;
comment|/** Total capacity */
name|size_t
name|capacity
decl_stmt|;
comment|/** String array */
name|char
modifier|*
modifier|*
name|container
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|BUFFER_GROWFACTOR
value|1.618
end_define

begin_define
define|#
directive|define
name|ELFTC_FAILURE
value|0
end_define

begin_define
define|#
directive|define
name|ELFTC_ISDIGIT
parameter_list|(
name|C
parameter_list|)
value|(isdigit((C)& 0xFF))
end_define

begin_define
define|#
directive|define
name|ELFTC_SUCCESS
value|1
end_define

begin_define
define|#
directive|define
name|VECTOR_DEF_CAPACITY
value|8
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
name|char
modifier|*
name|cpp_demangle_ARM
parameter_list|(
specifier|const
name|char
modifier|*
name|_org
parameter_list|)
function_decl|;
name|char
modifier|*
name|cpp_demangle_gnu2
parameter_list|(
specifier|const
name|char
modifier|*
name|_org
parameter_list|)
function_decl|;
name|char
modifier|*
name|cpp_demangle_gnu3
parameter_list|(
specifier|const
name|char
modifier|*
name|_org
parameter_list|)
function_decl|;
name|bool
name|is_cpp_mangled_ARM
parameter_list|(
specifier|const
name|char
modifier|*
name|_org
parameter_list|)
function_decl|;
name|bool
name|is_cpp_mangled_gnu2
parameter_list|(
specifier|const
name|char
modifier|*
name|_org
parameter_list|)
function_decl|;
name|bool
name|is_cpp_mangled_gnu3
parameter_list|(
specifier|const
name|char
modifier|*
name|_org
parameter_list|)
function_decl|;
name|unsigned
name|int
name|libelftc_hash_string
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
name|void
name|vector_str_dest
parameter_list|(
name|struct
name|vector_str
modifier|*
name|_vec
parameter_list|)
function_decl|;
name|int
name|vector_str_find
parameter_list|(
specifier|const
name|struct
name|vector_str
modifier|*
name|_vs
parameter_list|,
specifier|const
name|char
modifier|*
name|_str
parameter_list|,
name|size_t
name|_len
parameter_list|)
function_decl|;
name|char
modifier|*
name|vector_str_get_flat
parameter_list|(
specifier|const
name|struct
name|vector_str
modifier|*
name|_vs
parameter_list|,
name|size_t
modifier|*
name|_len
parameter_list|)
function_decl|;
name|bool
name|vector_str_init
parameter_list|(
name|struct
name|vector_str
modifier|*
name|_vs
parameter_list|)
function_decl|;
name|bool
name|vector_str_pop
parameter_list|(
name|struct
name|vector_str
modifier|*
name|_vs
parameter_list|)
function_decl|;
name|bool
name|vector_str_push
parameter_list|(
name|struct
name|vector_str
modifier|*
name|_vs
parameter_list|,
specifier|const
name|char
modifier|*
name|_str
parameter_list|,
name|size_t
name|_len
parameter_list|)
function_decl|;
name|bool
name|vector_str_push_vector
parameter_list|(
name|struct
name|vector_str
modifier|*
name|_dst
parameter_list|,
name|struct
name|vector_str
modifier|*
name|_org
parameter_list|)
function_decl|;
name|bool
name|vector_str_push_vector_head
parameter_list|(
name|struct
name|vector_str
modifier|*
name|_dst
parameter_list|,
name|struct
name|vector_str
modifier|*
name|_org
parameter_list|)
function_decl|;
name|char
modifier|*
name|vector_str_substr
parameter_list|(
specifier|const
name|struct
name|vector_str
modifier|*
name|_vs
parameter_list|,
name|size_t
name|_begin
parameter_list|,
name|size_t
name|_end
parameter_list|,
name|size_t
modifier|*
name|_rlen
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __LIBELFTC_H */
end_comment

end_unit

