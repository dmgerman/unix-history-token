begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * wpa_supplicant - Internal WPA state machine definitions  * Copyright (c) 2004-2006, Jouni Malinen<j@w1.fi>  *  * This program is free software; you can redistribute it and/or modify  * it under the terms of the GNU General Public License version 2 as  * published by the Free Software Foundation.  *  * Alternatively, this software may be distributed under the terms of BSD  * license.  *  * See README and COPYING for more details.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|WPA_I_H
end_ifndef

begin_define
define|#
directive|define
name|WPA_I_H
end_define

begin_struct_decl
struct_decl|struct
name|rsn_pmksa_candidate
struct_decl|;
end_struct_decl

begin_ifdef
ifdef|#
directive|ifdef
name|_MSC_VER
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|push
name|,
name|1
name|)
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MSC_VER */
end_comment

begin_comment
comment|/**  * struct wpa_ptk - WPA Pairwise Transient Key  * IEEE Std 802.11i-2004 - 8.5.1.2 Pairwise key hierarchy  */
end_comment

begin_struct
struct|struct
name|wpa_ptk
block|{
name|u8
name|kck
index|[
literal|16
index|]
decl_stmt|;
comment|/* EAPOL-Key Key Confirmation Key (KCK) */
name|u8
name|kek
index|[
literal|16
index|]
decl_stmt|;
comment|/* EAPOL-Key Key Encryption Key (KEK) */
name|u8
name|tk1
index|[
literal|16
index|]
decl_stmt|;
comment|/* Temporal Key 1 (TK1) */
union|union
block|{
name|u8
name|tk2
index|[
literal|16
index|]
decl_stmt|;
comment|/* Temporal Key 2 (TK2) */
struct|struct
block|{
name|u8
name|tx_mic_key
index|[
literal|8
index|]
decl_stmt|;
name|u8
name|rx_mic_key
index|[
literal|8
index|]
decl_stmt|;
block|}
name|auth
struct|;
block|}
name|u
union|;
block|}
name|STRUCT_PACKED
struct|;
end_struct

begin_ifdef
ifdef|#
directive|ifdef
name|_MSC_VER
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|pack
name|(
name|pop
name|)
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _MSC_VER */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|CONFIG_PEERKEY
end_ifdef

begin_define
define|#
directive|define
name|PEERKEY_MAX_IE_LEN
value|80
end_define

begin_struct
struct|struct
name|wpa_peerkey
block|{
name|struct
name|wpa_peerkey
modifier|*
name|next
decl_stmt|;
name|int
name|initiator
decl_stmt|;
comment|/* whether this end was initator for SMK handshake */
name|u8
name|addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
comment|/* other end MAC address */
name|u8
name|inonce
index|[
name|WPA_NONCE_LEN
index|]
decl_stmt|;
comment|/* Initiator Nonce */
name|u8
name|pnonce
index|[
name|WPA_NONCE_LEN
index|]
decl_stmt|;
comment|/* Peer Nonce */
name|u8
name|rsnie_i
index|[
name|PEERKEY_MAX_IE_LEN
index|]
decl_stmt|;
comment|/* Initiator RSN IE */
name|size_t
name|rsnie_i_len
decl_stmt|;
name|u8
name|rsnie_p
index|[
name|PEERKEY_MAX_IE_LEN
index|]
decl_stmt|;
comment|/* Peer RSN IE */
name|size_t
name|rsnie_p_len
decl_stmt|;
name|u8
name|smk
index|[
name|PMK_LEN
index|]
decl_stmt|;
name|int
name|smk_complete
decl_stmt|;
name|u8
name|smkid
index|[
name|PMKID_LEN
index|]
decl_stmt|;
name|u32
name|lifetime
decl_stmt|;
name|os_time_t
name|expiration
decl_stmt|;
name|int
name|cipher
decl_stmt|;
comment|/* Selected cipher (WPA_CIPHER_*) */
name|u8
name|replay_counter
index|[
name|WPA_REPLAY_COUNTER_LEN
index|]
decl_stmt|;
name|int
name|replay_counter_set
decl_stmt|;
name|struct
name|wpa_ptk
name|stk
decl_stmt|,
name|tstk
decl_stmt|;
name|int
name|stk_set
decl_stmt|,
name|tstk_set
decl_stmt|;
block|}
struct|;
end_struct

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* CONFIG_PEERKEY */
end_comment

begin_struct_decl
struct_decl|struct
name|wpa_peerkey
struct_decl|;
end_struct_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_PEERKEY */
end_comment

begin_comment
comment|/**  * struct wpa_sm - Internal WPA state machine data  */
end_comment

begin_struct
struct|struct
name|wpa_sm
block|{
name|u8
name|pmk
index|[
name|PMK_LEN
index|]
decl_stmt|;
name|size_t
name|pmk_len
decl_stmt|;
name|struct
name|wpa_ptk
name|ptk
decl_stmt|,
name|tptk
decl_stmt|;
name|int
name|ptk_set
decl_stmt|,
name|tptk_set
decl_stmt|;
name|u8
name|snonce
index|[
name|WPA_NONCE_LEN
index|]
decl_stmt|;
name|u8
name|anonce
index|[
name|WPA_NONCE_LEN
index|]
decl_stmt|;
comment|/* ANonce from the last 1/4 msg */
name|int
name|renew_snonce
decl_stmt|;
name|u8
name|rx_replay_counter
index|[
name|WPA_REPLAY_COUNTER_LEN
index|]
decl_stmt|;
name|int
name|rx_replay_counter_set
decl_stmt|;
name|u8
name|request_counter
index|[
name|WPA_REPLAY_COUNTER_LEN
index|]
decl_stmt|;
name|struct
name|eapol_sm
modifier|*
name|eapol
decl_stmt|;
comment|/* EAPOL state machine from upper level code */
name|struct
name|rsn_pmksa_cache
modifier|*
name|pmksa
decl_stmt|;
comment|/* PMKSA cache */
name|struct
name|rsn_pmksa_cache_entry
modifier|*
name|cur_pmksa
decl_stmt|;
comment|/* current PMKSA entry */
name|struct
name|rsn_pmksa_candidate
modifier|*
name|pmksa_candidates
decl_stmt|;
name|struct
name|l2_packet_data
modifier|*
name|l2_preauth
decl_stmt|;
name|struct
name|l2_packet_data
modifier|*
name|l2_preauth_br
decl_stmt|;
name|u8
name|preauth_bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
comment|/* current RSN pre-auth peer or 				     * 00:00:00:00:00:00 if no pre-auth is 				     * in progress */
name|struct
name|eapol_sm
modifier|*
name|preauth_eapol
decl_stmt|;
name|struct
name|wpa_sm_ctx
modifier|*
name|ctx
decl_stmt|;
name|void
modifier|*
name|scard_ctx
decl_stmt|;
comment|/* context for smartcard callbacks */
name|int
name|fast_reauth
decl_stmt|;
comment|/* whether EAP fast re-authentication is enabled */
name|struct
name|wpa_ssid
modifier|*
name|cur_ssid
decl_stmt|;
name|u8
name|own_addr
index|[
name|ETH_ALEN
index|]
decl_stmt|;
specifier|const
name|char
modifier|*
name|ifname
decl_stmt|;
specifier|const
name|char
modifier|*
name|bridge_ifname
decl_stmt|;
name|u8
name|bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|unsigned
name|int
name|dot11RSNAConfigPMKLifetime
decl_stmt|;
name|unsigned
name|int
name|dot11RSNAConfigPMKReauthThreshold
decl_stmt|;
name|unsigned
name|int
name|dot11RSNAConfigSATimeout
decl_stmt|;
name|unsigned
name|int
name|dot11RSNA4WayHandshakeFailures
decl_stmt|;
comment|/* Selected configuration (based on Beacon/ProbeResp WPA IE) */
name|unsigned
name|int
name|proto
decl_stmt|;
name|unsigned
name|int
name|pairwise_cipher
decl_stmt|;
name|unsigned
name|int
name|group_cipher
decl_stmt|;
name|unsigned
name|int
name|key_mgmt
decl_stmt|;
name|unsigned
name|int
name|mgmt_group_cipher
decl_stmt|;
name|u8
modifier|*
name|assoc_wpa_ie
decl_stmt|;
comment|/* Own WPA/RSN IE from (Re)AssocReq */
name|size_t
name|assoc_wpa_ie_len
decl_stmt|;
name|u8
modifier|*
name|ap_wpa_ie
decl_stmt|,
modifier|*
name|ap_rsn_ie
decl_stmt|;
name|size_t
name|ap_wpa_ie_len
decl_stmt|,
name|ap_rsn_ie_len
decl_stmt|;
ifdef|#
directive|ifdef
name|CONFIG_PEERKEY
name|struct
name|wpa_peerkey
modifier|*
name|peerkey
decl_stmt|;
endif|#
directive|endif
comment|/* CONFIG_PEERKEY */
block|}
struct|;
end_struct

begin_function
specifier|static
specifier|inline
name|void
name|wpa_sm_set_state
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
name|wpa_states
name|state
parameter_list|)
block|{
name|sm
operator|->
name|ctx
operator|->
name|set_state
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|wpa_states
name|wpa_sm_get_state
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|get_state
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|wpa_sm_deauthenticate
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
name|int
name|reason_code
parameter_list|)
block|{
name|sm
operator|->
name|ctx
operator|->
name|deauthenticate
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|reason_code
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|wpa_sm_disassociate
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
name|int
name|reason_code
parameter_list|)
block|{
name|sm
operator|->
name|ctx
operator|->
name|disassociate
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|reason_code
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_sm_set_key
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
name|wpa_alg
name|alg
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|key_idx
parameter_list|,
name|int
name|set_tx
parameter_list|,
specifier|const
name|u8
modifier|*
name|seq
parameter_list|,
name|size_t
name|seq_len
parameter_list|,
specifier|const
name|u8
modifier|*
name|key
parameter_list|,
name|size_t
name|key_len
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|set_key
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|alg
argument_list|,
name|addr
argument_list|,
name|key_idx
argument_list|,
name|set_tx
argument_list|,
name|seq
argument_list|,
name|seq_len
argument_list|,
name|key
argument_list|,
name|key_len
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|struct
name|wpa_ssid
modifier|*
name|wpa_sm_get_ssid
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|get_ssid
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_sm_get_bssid
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
name|u8
modifier|*
name|bssid
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|get_bssid
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|bssid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_sm_ether_send
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
specifier|const
name|u8
modifier|*
name|dest
parameter_list|,
name|u16
name|proto
parameter_list|,
specifier|const
name|u8
modifier|*
name|buf
parameter_list|,
name|size_t
name|len
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|ether_send
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|dest
argument_list|,
name|proto
argument_list|,
name|buf
argument_list|,
name|len
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_sm_get_beacon_ie
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|get_beacon_ie
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|void
name|wpa_sm_cancel_auth_timeout
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|)
block|{
name|sm
operator|->
name|ctx
operator|->
name|cancel_auth_timeout
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|u8
modifier|*
name|wpa_sm_alloc_eapol
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
name|u8
name|type
parameter_list|,
specifier|const
name|void
modifier|*
name|data
parameter_list|,
name|u16
name|data_len
parameter_list|,
name|size_t
modifier|*
name|msg_len
parameter_list|,
name|void
modifier|*
modifier|*
name|data_pos
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|alloc_eapol
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|type
argument_list|,
name|data
argument_list|,
name|data_len
argument_list|,
name|msg_len
argument_list|,
name|data_pos
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_sm_add_pmkid
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|pmkid
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|add_pmkid
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|bssid
argument_list|,
name|pmkid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_sm_remove_pmkid
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
specifier|const
name|u8
modifier|*
name|bssid
parameter_list|,
specifier|const
name|u8
modifier|*
name|pmkid
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|remove_pmkid
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|bssid
argument_list|,
name|pmkid
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
specifier|inline
name|int
name|wpa_sm_mlme_setprotection
parameter_list|(
name|struct
name|wpa_sm
modifier|*
name|sm
parameter_list|,
specifier|const
name|u8
modifier|*
name|addr
parameter_list|,
name|int
name|protect_type
parameter_list|,
name|int
name|key_type
parameter_list|)
block|{
return|return
name|sm
operator|->
name|ctx
operator|->
name|mlme_setprotection
argument_list|(
name|sm
operator|->
name|ctx
operator|->
name|ctx
argument_list|,
name|addr
argument_list|,
name|protect_type
argument_list|,
name|key_type
argument_list|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* WPA_I_H */
end_comment

end_unit

