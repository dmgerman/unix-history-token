begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|EAP_I_H
end_ifndef

begin_define
define|#
directive|define
name|EAP_I_H
end_define

begin_include
include|#
directive|include
file|"eap.h"
end_include

begin_comment
comment|/* draft-ietf-eap-statemachine-05.pdf - Peer state machine */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|DECISION_FAIL
block|,
name|DECISION_COND_SUCC
block|,
name|DECISION_UNCOND_SUCC
block|}
name|EapDecision
typedef|;
end_typedef

begin_typedef
typedef|typedef
enum|enum
block|{
name|METHOD_NONE
block|,
name|METHOD_INIT
block|,
name|METHOD_CONT
block|,
name|METHOD_MAY_CONT
block|,
name|METHOD_DONE
block|}
name|EapMethodState
typedef|;
end_typedef

begin_struct
struct|struct
name|eap_method_ret
block|{
name|Boolean
name|ignore
decl_stmt|;
name|EapMethodState
name|methodState
decl_stmt|;
name|EapDecision
name|decision
decl_stmt|;
name|Boolean
name|allowNotifications
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|eap_method
block|{
name|EapType
name|method
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|void
modifier|*
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|deinit
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|u8
modifier|*
function_decl|(
modifier|*
name|process
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|struct
name|eap_method_ret
modifier|*
name|ret
parameter_list|,
name|u8
modifier|*
name|reqData
parameter_list|,
name|size_t
name|reqDataLen
parameter_list|,
name|size_t
modifier|*
name|respDataLen
parameter_list|)
function_decl|;
name|Boolean
function_decl|(
modifier|*
name|isKeyAvailable
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|u8
modifier|*
function_decl|(
modifier|*
name|getKey
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
name|int
function_decl|(
modifier|*
name|get_status
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|size_t
name|buflen
parameter_list|,
name|int
name|verbose
parameter_list|)
function_decl|;
comment|/* Optional handlers for fast re-authentication */
name|Boolean
function_decl|(
modifier|*
name|has_reauth_data
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|deinit_for_reauth
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
name|void
modifier|*
function_decl|(
modifier|*
name|init_for_reauth
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|)
function_decl|;
specifier|const
name|u8
modifier|*
function_decl|(
modifier|*
name|get_identity
function_decl|)
parameter_list|(
name|struct
name|eap_sm
modifier|*
name|sm
parameter_list|,
name|void
modifier|*
name|priv
parameter_list|,
name|size_t
modifier|*
name|len
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|eap_sm
block|{
enum|enum
block|{
name|EAP_INITIALIZE
block|,
name|EAP_DISABLED
block|,
name|EAP_IDLE
block|,
name|EAP_RECEIVED
block|,
name|EAP_GET_METHOD
block|,
name|EAP_METHOD
block|,
name|EAP_SEND_RESPONSE
block|,
name|EAP_DISCARD
block|,
name|EAP_IDENTITY
block|,
name|EAP_NOTIFICATION
block|,
name|EAP_RETRANSMIT
block|,
name|EAP_SUCCESS
block|,
name|EAP_FAILURE
block|}
name|EAP_state
enum|;
comment|/* Long-term local variables */
name|EapType
name|selectedMethod
decl_stmt|;
name|EapMethodState
name|methodState
decl_stmt|;
name|int
name|lastId
decl_stmt|;
name|u8
modifier|*
name|lastRespData
decl_stmt|;
name|size_t
name|lastRespDataLen
decl_stmt|;
name|EapDecision
name|decision
decl_stmt|;
comment|/* Short-term local variables */
name|Boolean
name|rxReq
decl_stmt|;
name|Boolean
name|rxSuccess
decl_stmt|;
name|Boolean
name|rxFailure
decl_stmt|;
name|int
name|reqId
decl_stmt|;
name|EapType
name|reqMethod
decl_stmt|;
name|Boolean
name|ignore
decl_stmt|;
comment|/* Constants */
name|int
name|ClientTimeout
decl_stmt|;
comment|/* Miscellaneous variables */
name|Boolean
name|allowNotifications
decl_stmt|;
comment|/* peer state machine<-> methods */
name|u8
modifier|*
name|eapRespData
decl_stmt|;
comment|/* peer to lower layer */
name|size_t
name|eapRespDataLen
decl_stmt|;
comment|/* peer to lower layer */
name|Boolean
name|eapKeyAvailable
decl_stmt|;
comment|/* peer to lower layer */
name|u8
modifier|*
name|eapKeyData
decl_stmt|;
comment|/* peer to lower layer */
name|size_t
name|eapKeyDataLen
decl_stmt|;
comment|/* peer to lower layer */
specifier|const
name|struct
name|eap_method
modifier|*
name|m
decl_stmt|;
comment|/* selected EAP method */
comment|/* not defined in draft-ietf-eap-statemachine-02 */
name|Boolean
name|changed
decl_stmt|;
name|void
modifier|*
name|eapol_ctx
decl_stmt|;
name|struct
name|eapol_callbacks
modifier|*
name|eapol_cb
decl_stmt|;
name|void
modifier|*
name|eap_method_priv
decl_stmt|;
name|int
name|init_phase2
decl_stmt|;
name|int
name|fast_reauth
decl_stmt|;
name|Boolean
name|rxResp
comment|/* LEAP only */
decl_stmt|;
name|Boolean
name|leap_done
decl_stmt|;
name|Boolean
name|peap_done
decl_stmt|;
name|u8
name|req_md5
index|[
literal|16
index|]
decl_stmt|;
comment|/* MD5() of the current EAP packet */
name|u8
name|last_md5
index|[
literal|16
index|]
decl_stmt|;
comment|/* MD5() of the previously received EAP packet; used 			  * in duplicate request detection. */
name|void
modifier|*
name|msg_ctx
decl_stmt|;
name|void
modifier|*
name|scard_ctx
decl_stmt|;
name|void
modifier|*
name|ssl_ctx
decl_stmt|;
name|unsigned
name|int
name|workaround
decl_stmt|;
comment|/* Optional challenges generated in Phase 1 (EAP-FAST) */
name|u8
modifier|*
name|peer_challenge
decl_stmt|,
modifier|*
name|auth_challenge
decl_stmt|;
name|int
name|num_rounds
decl_stmt|;
block|}
struct|;
end_struct

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* EAP_I_H */
end_comment

end_unit

