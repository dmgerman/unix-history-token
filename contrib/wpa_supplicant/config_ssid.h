begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_ifndef
ifndef|#
directive|ifndef
name|CONFIG_SSID_H
end_ifndef

begin_define
define|#
directive|define
name|CONFIG_SSID_H
end_define

begin_define
define|#
directive|define
name|WPA_CIPHER_NONE
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|WPA_CIPHER_WEP40
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|WPA_CIPHER_WEP104
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|WPA_CIPHER_TKIP
value|BIT(3)
end_define

begin_define
define|#
directive|define
name|WPA_CIPHER_CCMP
value|BIT(4)
end_define

begin_define
define|#
directive|define
name|WPA_KEY_MGMT_IEEE8021X
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|WPA_KEY_MGMT_PSK
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|WPA_KEY_MGMT_NONE
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|WPA_KEY_MGMT_IEEE8021X_NO_WPA
value|BIT(3)
end_define

begin_define
define|#
directive|define
name|WPA_KEY_MGMT_WPA_NONE
value|BIT(4)
end_define

begin_define
define|#
directive|define
name|WPA_PROTO_WPA
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|WPA_PROTO_RSN
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|WPA_AUTH_ALG_OPEN
value|BIT(0)
end_define

begin_define
define|#
directive|define
name|WPA_AUTH_ALG_SHARED
value|BIT(1)
end_define

begin_define
define|#
directive|define
name|WPA_AUTH_ALG_LEAP
value|BIT(2)
end_define

begin_define
define|#
directive|define
name|MAX_SSID_LEN
value|32
end_define

begin_define
define|#
directive|define
name|PMK_LEN
value|32
end_define

begin_define
define|#
directive|define
name|EAP_PSK_LEN
value|16
end_define

begin_struct
struct|struct
name|wpa_ssid
block|{
name|struct
name|wpa_ssid
modifier|*
name|next
decl_stmt|;
comment|/* next network in global list */
name|struct
name|wpa_ssid
modifier|*
name|pnext
decl_stmt|;
comment|/* next network in per-priority list */
name|int
name|id
decl_stmt|;
comment|/* unique id for ctrl_iface */
name|int
name|priority
decl_stmt|;
name|u8
modifier|*
name|ssid
decl_stmt|;
name|size_t
name|ssid_len
decl_stmt|;
name|u8
name|bssid
index|[
name|ETH_ALEN
index|]
decl_stmt|;
name|int
name|bssid_set
decl_stmt|;
name|u8
name|psk
index|[
name|PMK_LEN
index|]
decl_stmt|;
name|int
name|psk_set
decl_stmt|;
name|char
modifier|*
name|passphrase
decl_stmt|;
comment|/* Bitfields of allowed Pairwise/Group Ciphers, WPA_CIPHER_* */
name|int
name|pairwise_cipher
decl_stmt|;
name|int
name|group_cipher
decl_stmt|;
name|int
name|key_mgmt
decl_stmt|;
name|int
name|proto
decl_stmt|;
comment|/* Bitfield of allowed protocols (WPA_PROTO_*) */
name|int
name|auth_alg
decl_stmt|;
comment|/* Bitfield of allow authentication algorithms 		       * (WPA_AUTH_ALG_*) */
name|int
name|scan_ssid
decl_stmt|;
comment|/* scan this SSID with Probe Requests */
name|u8
modifier|*
name|identity
decl_stmt|;
comment|/* EAP Identity */
name|size_t
name|identity_len
decl_stmt|;
name|u8
modifier|*
name|anonymous_identity
decl_stmt|;
comment|/* Anonymous EAP Identity (for unencrypted use 				 * with EAP types that support different 				 * tunnelled identity, e.g., EAP-TTLS) */
name|size_t
name|anonymous_identity_len
decl_stmt|;
name|u8
modifier|*
name|eappsk
decl_stmt|;
name|size_t
name|eappsk_len
decl_stmt|;
name|u8
modifier|*
name|nai
decl_stmt|;
name|size_t
name|nai_len
decl_stmt|;
name|u8
modifier|*
name|server_nai
decl_stmt|;
name|size_t
name|server_nai_len
decl_stmt|;
name|u8
modifier|*
name|password
decl_stmt|;
name|size_t
name|password_len
decl_stmt|;
name|u8
modifier|*
name|ca_cert
decl_stmt|;
name|u8
modifier|*
name|client_cert
decl_stmt|;
name|u8
modifier|*
name|private_key
decl_stmt|;
name|u8
modifier|*
name|private_key_passwd
decl_stmt|;
name|u8
modifier|*
name|dh_file
decl_stmt|;
name|u8
modifier|*
name|subject_match
decl_stmt|;
name|u8
modifier|*
name|ca_cert2
decl_stmt|;
name|u8
modifier|*
name|client_cert2
decl_stmt|;
name|u8
modifier|*
name|private_key2
decl_stmt|;
name|u8
modifier|*
name|private_key2_passwd
decl_stmt|;
name|u8
modifier|*
name|dh_file2
decl_stmt|;
name|u8
modifier|*
name|subject_match2
decl_stmt|;
name|u8
modifier|*
name|eap_methods
decl_stmt|;
comment|/* zero (EAP_TYPE_NONE) terminated list of allowed 			  * EAP methods or NULL = any */
name|char
modifier|*
name|phase1
decl_stmt|;
name|char
modifier|*
name|phase2
decl_stmt|;
name|char
modifier|*
name|pcsc
decl_stmt|;
name|char
modifier|*
name|pin
decl_stmt|;
define|#
directive|define
name|EAPOL_FLAG_REQUIRE_KEY_UNICAST
value|BIT(0)
define|#
directive|define
name|EAPOL_FLAG_REQUIRE_KEY_BROADCAST
value|BIT(1)
name|int
name|eapol_flags
decl_stmt|;
comment|/* bit field of IEEE 802.1X/EAPOL options */
define|#
directive|define
name|NUM_WEP_KEYS
value|4
define|#
directive|define
name|MAX_WEP_KEY_LEN
value|16
name|u8
name|wep_key
index|[
name|NUM_WEP_KEYS
index|]
index|[
name|MAX_WEP_KEY_LEN
index|]
decl_stmt|;
name|size_t
name|wep_key_len
index|[
name|NUM_WEP_KEYS
index|]
decl_stmt|;
name|int
name|wep_tx_keyidx
decl_stmt|;
comment|/* Per SSID variables that are not read from the configuration file */
name|u8
modifier|*
name|otp
decl_stmt|;
name|size_t
name|otp_len
decl_stmt|;
name|int
name|pending_req_identity
decl_stmt|,
name|pending_req_password
decl_stmt|;
name|char
modifier|*
name|pending_req_otp
decl_stmt|;
name|size_t
name|pending_req_otp_len
decl_stmt|;
name|int
name|leap
decl_stmt|,
name|non_leap
decl_stmt|;
name|unsigned
name|int
name|eap_workaround
decl_stmt|;
name|char
modifier|*
name|pac_file
decl_stmt|;
name|int
name|mode
decl_stmt|;
block|}
struct|;
end_struct

begin_function_decl
name|int
name|wpa_config_allowed_eap_method
parameter_list|(
name|struct
name|wpa_ssid
modifier|*
name|ssid
parameter_list|,
name|int
name|method
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|wpa_cipher_txt
parameter_list|(
name|int
name|cipher
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|const
name|char
modifier|*
name|wpa_key_mgmt_txt
parameter_list|(
name|int
name|key_mgmt
parameter_list|,
name|int
name|proto
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* CONFIG_SSID_H */
end_comment

end_unit

