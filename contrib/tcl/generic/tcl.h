begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  * tcl.h --  *  *	This header file describes the externally-visible facilities  *	of the Tcl interpreter.  *  * Copyright (c) 1987-1994 The Regents of the University of California.  * Copyright (c) 1994-1996 Sun Microsystems, Inc.  *  * See the file "license.terms" for information on usage and redistribution  * of this file, and for a DISCLAIMER OF ALL WARRANTIES.  *  * SCCS: @(#) tcl.h 1.266 96/04/10 11:25:19  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_TCL
end_ifndef

begin_define
define|#
directive|define
name|_TCL
end_define

begin_comment
comment|/*  * The following definitions set up the proper options for Windows  * compilers.  We use this method because there is no autoconf equivalent.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|__WIN32__
argument_list|)
end_if

begin_define
define|#
directive|define
name|__WIN32__
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__WIN32__
end_ifdef

begin_undef
undef|#
directive|undef
name|USE_PROTOTYPE
end_undef

begin_undef
undef|#
directive|undef
name|HAS_STDARG
end_undef

begin_define
define|#
directive|define
name|USE_PROTOTYPE
end_define

begin_define
define|#
directive|define
name|HAS_STDARG
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|BUFSIZ
end_ifndef

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|TCL_VERSION
value|"7.5"
end_define

begin_define
define|#
directive|define
name|TCL_MAJOR_VERSION
value|7
end_define

begin_define
define|#
directive|define
name|TCL_MINOR_VERSION
value|5
end_define

begin_comment
comment|/*  * Definitions that allow Tcl functions with variable numbers of  * arguments to be used with either varargs.h or stdarg.h.  TCL_VARARGS  * is used in procedure prototypes.  TCL_VARARGS_DEF is used to declare  * the arguments in a function definiton: it takes the type and name of  * the first argument and supplies the appropriate argument declaration  * string for use in the function definition.  TCL_VARARGS_START  * initializes the va_list data structure and returns the first argument.  */
end_comment

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|HAS_STDARG
argument_list|)
end_if

begin_define
define|#
directive|define
name|TCL_VARARGS
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|(type name, ...)
end_define

begin_define
define|#
directive|define
name|TCL_VARARGS_DEF
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|(type name, ...)
end_define

begin_define
define|#
directive|define
name|TCL_VARARGS_START
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|list
parameter_list|)
value|(va_start(list, name), name)
end_define

begin_else
else|#
directive|else
end_else

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|TCL_VARARGS
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|(type name, ...)
end_define

begin_define
define|#
directive|define
name|TCL_VARARGS_DEF
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|(type va_alist, ...)
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|TCL_VARARGS
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|()
end_define

begin_define
define|#
directive|define
name|TCL_VARARGS_DEF
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|)
value|(va_alist)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|TCL_VARARGS_START
parameter_list|(
name|type
parameter_list|,
name|name
parameter_list|,
name|list
parameter_list|)
define|\
value|(va_start(list), va_arg(list, type))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Definitions that allow this header file to be used either with or  * without ANSI C features like function prototypes.  */
end_comment

begin_undef
undef|#
directive|undef
name|_ANSI_ARGS_
end_undef

begin_undef
undef|#
directive|undef
name|CONST
end_undef

begin_if
if|#
directive|if
operator|(
operator|(
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|SABER
argument_list|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|NO_PROTOTYPE
argument_list|)
operator|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
operator|||
name|defined
argument_list|(
name|USE_PROTOTYPE
argument_list|)
end_if

begin_define
define|#
directive|define
name|_USING_PROTOTYPES_
value|1
end_define

begin_define
define|#
directive|define
name|_ANSI_ARGS_
parameter_list|(
name|x
parameter_list|)
value|x
end_define

begin_define
define|#
directive|define
name|CONST
value|const
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|_ANSI_ARGS_
parameter_list|(
name|x
parameter_list|)
value|()
end_define

begin_define
define|#
directive|define
name|CONST
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_define
define|#
directive|define
name|EXTERN
value|extern "C"
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|EXTERN
value|extern
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Macro to use instead of "void" for arguments that must have  * type "void *" in ANSI C;  maps them to type "char *" in  * non-ANSI systems.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__WIN32__
end_ifndef

begin_ifndef
ifndef|#
directive|ifndef
name|VOID
end_ifndef

begin_ifdef
ifdef|#
directive|ifdef
name|__STDC__
end_ifdef

begin_define
define|#
directive|define
name|VOID
value|void
end_define

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|VOID
value|char
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* __WIN32__ */
end_comment

begin_comment
comment|/*  * The following code is copied from winnt.h  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|VOID
end_ifndef

begin_define
define|#
directive|define
name|VOID
value|void
end_define

begin_typedef
typedef|typedef
name|char
name|CHAR
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|short
name|SHORT
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|long
name|LONG
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __WIN32__ */
end_comment

begin_comment
comment|/*  * Miscellaneous declarations.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NULL
end_ifndef

begin_define
define|#
directive|define
name|NULL
value|0
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|_CLIENTDATA
end_ifndef

begin_if
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|__cplusplus
argument_list|)
end_if

begin_typedef
typedef|typedef
name|void
modifier|*
name|ClientData
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|int
modifier|*
name|ClientData
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* __STDC__ */
end_comment

begin_define
define|#
directive|define
name|_CLIENTDATA
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Data structures defined opaquely in this module.  The definitions  * below just provide dummy types.  A few fields are made visible in  * Tcl_Interp structures, namely those for returning string values.  * Note:  any change to the Tcl_Interp definition below must be mirrored  * in the "real" definition in tclInt.h.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|Tcl_Interp
block|{
name|char
modifier|*
name|result
decl_stmt|;
comment|/* Points to result string returned by last 				 * command. */
name|void
argument_list|(
argument|*freeProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|blockPtr
operator|)
argument_list|)
expr_stmt|;
comment|/* Zero means result is statically allocated. 				 * TCL_DYNAMIC means result was allocated with 				 * ckalloc and should be freed with ckfree. 				 * Other values give address of procedure 				 * to invoke to free the result.  Must be 				 * freed by Tcl_Eval before executing next 				 * command. */
name|int
name|errorLine
decl_stmt|;
comment|/* When TCL_ERROR is returned, this gives 				 * the line number within the command where 				 * the error occurred (1 means first line). */
block|}
name|Tcl_Interp
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|Tcl_AsyncHandler_
modifier|*
name|Tcl_AsyncHandler
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|Tcl_Command_
modifier|*
name|Tcl_Command
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|Tcl_Event
name|Tcl_Event
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|Tcl_File_
modifier|*
name|Tcl_File
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|Tcl_Channel_
modifier|*
name|Tcl_Channel
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|Tcl_RegExp_
modifier|*
name|Tcl_RegExp
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|Tcl_TimerToken_
modifier|*
name|Tcl_TimerToken
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|struct
name|Tcl_Trace_
modifier|*
name|Tcl_Trace
typedef|;
end_typedef

begin_comment
comment|/*  * When a TCL command returns, the string pointer interp->result points to  * a string containing return information from the command.  In addition,  * the command procedure returns an integer value, which is one of the  * following:  *  * TCL_OK		Command completed normally;  interp->result contains  *			the command's result.  * TCL_ERROR		The command couldn't be completed successfully;  *			interp->result describes what went wrong.  * TCL_RETURN		The command requests that the current procedure  *			return;  interp->result contains the procedure's  *			return value.  * TCL_BREAK		The command requests that the innermost loop  *			be exited;  interp->result is meaningless.  * TCL_CONTINUE		Go on to the next iteration of the current loop;  *			interp->result is meaningless.  */
end_comment

begin_define
define|#
directive|define
name|TCL_OK
value|0
end_define

begin_define
define|#
directive|define
name|TCL_ERROR
value|1
end_define

begin_define
define|#
directive|define
name|TCL_RETURN
value|2
end_define

begin_define
define|#
directive|define
name|TCL_BREAK
value|3
end_define

begin_define
define|#
directive|define
name|TCL_CONTINUE
value|4
end_define

begin_define
define|#
directive|define
name|TCL_RESULT_SIZE
value|200
end_define

begin_comment
comment|/*  * Argument descriptors for math function callbacks in expressions:  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|TCL_INT
block|,
name|TCL_DOUBLE
block|,
name|TCL_EITHER
block|}
name|Tcl_ValueType
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|Tcl_Value
block|{
name|Tcl_ValueType
name|type
decl_stmt|;
comment|/* Indicates intValue or doubleValue is 				 * valid, or both. */
name|long
name|intValue
decl_stmt|;
comment|/* Integer value. */
name|double
name|doubleValue
decl_stmt|;
comment|/* Double-precision floating value. */
block|}
name|Tcl_Value
typedef|;
end_typedef

begin_comment
comment|/*  * Procedure types defined by Tcl:  */
end_comment

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_AppInitProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_AsyncProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|code
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_ChannelProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|int
name|mask
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_CloseProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|data
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_CmdDeleteProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_CmdProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|argc
operator|,
name|char
operator|*
name|argv
index|[]
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_CmdTraceProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|level
operator|,
name|char
operator|*
name|command
operator|,
name|Tcl_CmdProc
operator|*
name|proc
operator|,
name|ClientData
name|cmdClientData
operator|,
name|int
name|argc
operator|,
name|char
operator|*
name|argv
index|[]
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_EventProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Event
operator|*
name|evPtr
operator|,
name|int
name|flags
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_EventCheckProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|int
name|flags
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_EventDeleteProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Event
operator|*
name|evPtr
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_EventSetupProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|int
name|flags
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_ExitProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_FileProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|int
name|mask
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_FileFreeProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_FreeProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|blockPtr
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_IdleProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_InterpDeleteProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_MathProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_Value
operator|*
name|args
operator|,
name|Tcl_Value
operator|*
name|resultPtr
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_PackageInitProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_TcpAcceptProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|callbackData
operator|,
name|Tcl_Channel
name|chan
operator|,
name|char
operator|*
name|address
operator|,
name|int
name|port
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|void
argument_list|(
argument|Tcl_TimerProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|char
operator|*
operator|(
name|Tcl_VarTraceProc
operator|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|part1
operator|,
name|char
operator|*
name|part2
operator|,
name|int
name|flags
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_comment
comment|/*  * The structure returned by Tcl_GetCmdInfo and passed into  * Tcl_SetCmdInfo:  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|Tcl_CmdInfo
block|{
name|Tcl_CmdProc
modifier|*
name|proc
decl_stmt|;
comment|/* Procedure to implement command. */
name|ClientData
name|clientData
decl_stmt|;
comment|/* ClientData passed to proc. */
name|Tcl_CmdDeleteProc
modifier|*
name|deleteProc
decl_stmt|;
comment|/* Procedure to call when command 					 * is deleted. */
name|ClientData
name|deleteData
decl_stmt|;
comment|/* Value to pass to deleteProc (usually 					 * the same as clientData). */
block|}
name|Tcl_CmdInfo
typedef|;
end_typedef

begin_comment
comment|/*  * The structure defined below is used to hold dynamic strings.  The only  * field that clients should use is the string field, and they should  * never modify it.  */
end_comment

begin_define
define|#
directive|define
name|TCL_DSTRING_STATIC_SIZE
value|200
end_define

begin_typedef
typedef|typedef
struct|struct
name|Tcl_DString
block|{
name|char
modifier|*
name|string
decl_stmt|;
comment|/* Points to beginning of string:  either 				 * staticSpace below or a malloc'ed array. */
name|int
name|length
decl_stmt|;
comment|/* Number of non-NULL characters in the 				 * string. */
name|int
name|spaceAvl
decl_stmt|;
comment|/* Total number of bytes available for the 				 * string and its terminating NULL char. */
name|char
name|staticSpace
index|[
name|TCL_DSTRING_STATIC_SIZE
index|]
decl_stmt|;
comment|/* Space to use in common case where string 				 * is small. */
block|}
name|Tcl_DString
typedef|;
end_typedef

begin_define
define|#
directive|define
name|Tcl_DStringLength
parameter_list|(
name|dsPtr
parameter_list|)
value|((dsPtr)->length)
end_define

begin_define
define|#
directive|define
name|Tcl_DStringValue
parameter_list|(
name|dsPtr
parameter_list|)
value|((dsPtr)->string)
end_define

begin_define
define|#
directive|define
name|Tcl_DStringTrunc
value|Tcl_DStringSetLength
end_define

begin_comment
comment|/*  * Definitions for the maximum number of digits of precision that may  * be specified in the "tcl_precision" variable, and the number of  * characters of buffer space required by Tcl_PrintDouble.  */
end_comment

begin_define
define|#
directive|define
name|TCL_MAX_PREC
value|17
end_define

begin_define
define|#
directive|define
name|TCL_DOUBLE_SPACE
value|(TCL_MAX_PREC+10)
end_define

begin_comment
comment|/*  * Flag that may be passed to Tcl_ConvertElement to force it not to  * output braces (careful!  if you change this flag be sure to change  * the definitions at the front of tclUtil.c).  */
end_comment

begin_define
define|#
directive|define
name|TCL_DONT_USE_BRACES
value|1
end_define

begin_comment
comment|/*  * Flag values passed to Tcl_RecordAndEval.  * WARNING: these bit choices must not conflict with the bit choices  * for evalFlag bits in tclInt.h!!  */
end_comment

begin_define
define|#
directive|define
name|TCL_NO_EVAL
value|0x10000
end_define

begin_define
define|#
directive|define
name|TCL_EVAL_GLOBAL
value|0x20000
end_define

begin_comment
comment|/*  * Special freeProc values that may be passed to Tcl_SetResult (see  * the man page for details):  */
end_comment

begin_define
define|#
directive|define
name|TCL_VOLATILE
value|((Tcl_FreeProc *) 1)
end_define

begin_define
define|#
directive|define
name|TCL_STATIC
value|((Tcl_FreeProc *) 0)
end_define

begin_define
define|#
directive|define
name|TCL_DYNAMIC
value|((Tcl_FreeProc *) 3)
end_define

begin_comment
comment|/*  * Flag values passed to variable-related procedures.  */
end_comment

begin_define
define|#
directive|define
name|TCL_GLOBAL_ONLY
value|1
end_define

begin_define
define|#
directive|define
name|TCL_APPEND_VALUE
value|2
end_define

begin_define
define|#
directive|define
name|TCL_LIST_ELEMENT
value|4
end_define

begin_define
define|#
directive|define
name|TCL_TRACE_READS
value|0x10
end_define

begin_define
define|#
directive|define
name|TCL_TRACE_WRITES
value|0x20
end_define

begin_define
define|#
directive|define
name|TCL_TRACE_UNSETS
value|0x40
end_define

begin_define
define|#
directive|define
name|TCL_TRACE_DESTROYED
value|0x80
end_define

begin_define
define|#
directive|define
name|TCL_INTERP_DESTROYED
value|0x100
end_define

begin_define
define|#
directive|define
name|TCL_LEAVE_ERR_MSG
value|0x200
end_define

begin_comment
comment|/*  * Types for linked variables:  */
end_comment

begin_define
define|#
directive|define
name|TCL_LINK_INT
value|1
end_define

begin_define
define|#
directive|define
name|TCL_LINK_DOUBLE
value|2
end_define

begin_define
define|#
directive|define
name|TCL_LINK_BOOLEAN
value|3
end_define

begin_define
define|#
directive|define
name|TCL_LINK_STRING
value|4
end_define

begin_define
define|#
directive|define
name|TCL_LINK_READ_ONLY
value|0x80
end_define

begin_comment
comment|/*  * The following declarations either map ckalloc and ckfree to  * malloc and free, or they map them to procedures with all sorts  * of debugging hooks defined in tclCkalloc.c.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|TCL_MEM_DEBUG
end_ifdef

begin_define
define|#
directive|define
name|ckalloc
parameter_list|(
name|x
parameter_list|)
value|Tcl_DbCkalloc(x, __FILE__, __LINE__)
end_define

begin_define
define|#
directive|define
name|ckfree
parameter_list|(
name|x
parameter_list|)
value|Tcl_DbCkfree(x, __FILE__, __LINE__)
end_define

begin_define
define|#
directive|define
name|ckrealloc
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|Tcl_DbCkrealloc((x), (y),__FILE__, __LINE__)
end_define

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_DumpActiveMemory
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|fileName
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_ValidateAllMemory
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_define
define|#
directive|define
name|ckalloc
parameter_list|(
name|x
parameter_list|)
value|malloc(x)
end_define

begin_define
define|#
directive|define
name|ckfree
parameter_list|(
name|x
parameter_list|)
value|free(x)
end_define

begin_define
define|#
directive|define
name|ckrealloc
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|realloc(x,y)
end_define

begin_define
define|#
directive|define
name|Tcl_DumpActiveMemory
parameter_list|(
name|x
parameter_list|)
end_define

begin_define
define|#
directive|define
name|Tcl_ValidateAllMemory
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* TCL_MEM_DEBUG */
end_comment

begin_comment
comment|/*  * Macro to free result of interpreter.  */
end_comment

begin_define
define|#
directive|define
name|Tcl_FreeResult
parameter_list|(
name|interp
parameter_list|)
define|\
value|if ((interp)->freeProc != 0) {				\ 	if (((interp)->freeProc == TCL_DYNAMIC)			\ 	    || ((interp)->freeProc == (Tcl_FreeProc *) free)) {	\ 	    ckfree((interp)->result);				\ 	} else {						\ 	    (*(interp)->freeProc)((interp)->result);		\ 	}							\ 	(interp)->freeProc = 0;					\     }
end_define

begin_comment
comment|/*  * Forward declaration of Tcl_HashTable.  Needed by some C++ compilers  * to prevent errors when the forward reference to Tcl_HashTable is  * encountered in the Tcl_HashEntry structure.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_struct_decl
struct_decl|struct
name|Tcl_HashTable
struct_decl|;
end_struct_decl

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * Structure definition for an entry in a hash table.  No-one outside  * Tcl should access any of these fields directly;  use the macros  * defined below.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|Tcl_HashEntry
block|{
name|struct
name|Tcl_HashEntry
modifier|*
name|nextPtr
decl_stmt|;
comment|/* Pointer to next entry in this 					 * hash bucket, or NULL for end of 					 * chain. */
name|struct
name|Tcl_HashTable
modifier|*
name|tablePtr
decl_stmt|;
comment|/* Pointer to table containing entry. */
name|struct
name|Tcl_HashEntry
modifier|*
modifier|*
name|bucketPtr
decl_stmt|;
comment|/* Pointer to bucket that points to 					 * first entry in this entry's chain: 					 * used for deleting the entry. */
name|ClientData
name|clientData
decl_stmt|;
comment|/* Application stores something here 					 * with Tcl_SetHashValue. */
union|union
block|{
comment|/* Key has one of these forms: */
name|char
modifier|*
name|oneWordValue
decl_stmt|;
comment|/* One-word value for key. */
name|int
name|words
index|[
literal|1
index|]
decl_stmt|;
comment|/* Multiple integer words for key. 					 * The actual size will be as large 					 * as necessary for this table's 					 * keys. */
name|char
name|string
index|[
literal|4
index|]
decl_stmt|;
comment|/* String for key.  The actual size 					 * will be as large as needed to hold 					 * the key. */
block|}
name|key
union|;
comment|/* MUST BE LAST FIELD IN RECORD!! */
block|}
name|Tcl_HashEntry
typedef|;
end_typedef

begin_comment
comment|/*  * Structure definition for a hash table.  Must be in tcl.h so clients  * can allocate space for these structures, but clients should never  * access any fields in this structure.  */
end_comment

begin_define
define|#
directive|define
name|TCL_SMALL_HASH_TABLE
value|4
end_define

begin_typedef
typedef|typedef
struct|struct
name|Tcl_HashTable
block|{
name|Tcl_HashEntry
modifier|*
modifier|*
name|buckets
decl_stmt|;
comment|/* Pointer to bucket array.  Each 					 * element points to first entry in 					 * bucket's hash chain, or NULL. */
name|Tcl_HashEntry
modifier|*
name|staticBuckets
index|[
name|TCL_SMALL_HASH_TABLE
index|]
decl_stmt|;
comment|/* Bucket array used for small tables 					 * (to avoid mallocs and frees). */
name|int
name|numBuckets
decl_stmt|;
comment|/* Total number of buckets allocated 					 * at **bucketPtr. */
name|int
name|numEntries
decl_stmt|;
comment|/* Total number of entries present 					 * in table. */
name|int
name|rebuildSize
decl_stmt|;
comment|/* Enlarge table when numEntries gets 					 * to be this large. */
name|int
name|downShift
decl_stmt|;
comment|/* Shift count used in hashing 					 * function.  Designed to use high- 					 * order bits of randomized keys. */
name|int
name|mask
decl_stmt|;
comment|/* Mask value used in hashing 					 * function. */
name|int
name|keyType
decl_stmt|;
comment|/* Type of keys used in this table.  					 * It's either TCL_STRING_KEYS, 					 * TCL_ONE_WORD_KEYS, or an integer 					 * giving the number of ints that                                          * is the size of the key. 					 */
name|Tcl_HashEntry
operator|*
operator|(
operator|*
name|findProc
operator|)
name|_ANSI_ARGS_
argument_list|(
operator|(
expr|struct
name|Tcl_HashTable
operator|*
name|tablePtr
operator|,
name|char
operator|*
name|key
operator|)
argument_list|)
expr_stmt|;
name|Tcl_HashEntry
operator|*
operator|(
operator|*
name|createProc
operator|)
name|_ANSI_ARGS_
argument_list|(
operator|(
expr|struct
name|Tcl_HashTable
operator|*
name|tablePtr
operator|,
name|char
operator|*
name|key
operator|,
name|int
operator|*
name|newPtr
operator|)
argument_list|)
expr_stmt|;
block|}
name|Tcl_HashTable
typedef|;
end_typedef

begin_comment
comment|/*  * Structure definition for information used to keep track of searches  * through hash tables:  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|Tcl_HashSearch
block|{
name|Tcl_HashTable
modifier|*
name|tablePtr
decl_stmt|;
comment|/* Table being searched. */
name|int
name|nextIndex
decl_stmt|;
comment|/* Index of next bucket to be 					 * enumerated after present one. */
name|Tcl_HashEntry
modifier|*
name|nextEntryPtr
decl_stmt|;
comment|/* Next entry to be enumerated in the 					 * the current bucket. */
block|}
name|Tcl_HashSearch
typedef|;
end_typedef

begin_comment
comment|/*  * Acceptable key types for hash tables:  */
end_comment

begin_define
define|#
directive|define
name|TCL_STRING_KEYS
value|0
end_define

begin_define
define|#
directive|define
name|TCL_ONE_WORD_KEYS
value|1
end_define

begin_comment
comment|/*  * Macros for clients to use to access fields of hash entries:  */
end_comment

begin_define
define|#
directive|define
name|Tcl_GetHashValue
parameter_list|(
name|h
parameter_list|)
value|((h)->clientData)
end_define

begin_define
define|#
directive|define
name|Tcl_SetHashValue
parameter_list|(
name|h
parameter_list|,
name|value
parameter_list|)
value|((h)->clientData = (ClientData) (value))
end_define

begin_define
define|#
directive|define
name|Tcl_GetHashKey
parameter_list|(
name|tablePtr
parameter_list|,
name|h
parameter_list|)
define|\
value|((char *) (((tablePtr)->keyType == TCL_ONE_WORD_KEYS) ? (h)->key.oneWordValue \ 						: (h)->key.string))
end_define

begin_comment
comment|/*  * Macros to use for clients to use to invoke find and create procedures  * for hash tables:  */
end_comment

begin_define
define|#
directive|define
name|Tcl_FindHashEntry
parameter_list|(
name|tablePtr
parameter_list|,
name|key
parameter_list|)
define|\
value|(*((tablePtr)->findProc))(tablePtr, key)
end_define

begin_define
define|#
directive|define
name|Tcl_CreateHashEntry
parameter_list|(
name|tablePtr
parameter_list|,
name|key
parameter_list|,
name|newPtr
parameter_list|)
define|\
value|(*((tablePtr)->createProc))(tablePtr, key, newPtr)
end_define

begin_comment
comment|/*  * Flag values to pass to Tcl_DoOneEvent to disable searches  * for some kinds of events:  */
end_comment

begin_define
define|#
directive|define
name|TCL_DONT_WAIT
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|TCL_WINDOW_EVENTS
value|(1<<2)
end_define

begin_define
define|#
directive|define
name|TCL_FILE_EVENTS
value|(1<<3)
end_define

begin_define
define|#
directive|define
name|TCL_TIMER_EVENTS
value|(1<<4)
end_define

begin_define
define|#
directive|define
name|TCL_IDLE_EVENTS
value|(1<<5)
end_define

begin_comment
comment|/* WAS 0x10 ???? */
end_comment

begin_define
define|#
directive|define
name|TCL_ALL_EVENTS
value|(~TCL_DONT_WAIT)
end_define

begin_comment
comment|/*  * The following structure defines a generic event for the Tcl event  * system.  These are the things that are queued in calls to Tcl_QueueEvent  * and serviced later by Tcl_DoOneEvent.  There can be many different  * kinds of events with different fields, corresponding to window events,  * timer events, etc.  The structure for a particular event consists of  * a Tcl_Event header followed by additional information specific to that  * event.  */
end_comment

begin_struct
struct|struct
name|Tcl_Event
block|{
name|Tcl_EventProc
modifier|*
name|proc
decl_stmt|;
comment|/* Procedure to call to service this event. */
name|struct
name|Tcl_Event
modifier|*
name|nextPtr
decl_stmt|;
comment|/* Next in list of pending events, or NULL. */
block|}
struct|;
end_struct

begin_comment
comment|/*  * Positions to pass to Tk_QueueEvent:  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|TCL_QUEUE_TAIL
block|,
name|TCL_QUEUE_HEAD
block|,
name|TCL_QUEUE_MARK
block|}
name|Tcl_QueuePosition
typedef|;
end_typedef

begin_comment
comment|/*  * The following structure keeps is used to hold a time value, either as  * an absolute time (the number of seconds from the epoch) or as an  * elapsed time. On Unix systems the epoch is Midnight Jan 1, 1970 GMT.  * On Macintosh systems the epoch is Midnight Jan 1, 1904 GMT.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|Tcl_Time
block|{
name|long
name|sec
decl_stmt|;
comment|/* Seconds. */
name|long
name|usec
decl_stmt|;
comment|/* Microseconds. */
block|}
name|Tcl_Time
typedef|;
end_typedef

begin_comment
comment|/*  * Bits to pass to Tcl_CreateFileHandler and Tcl_CreateChannelHandler  * to indicate what sorts of events are of interest:  */
end_comment

begin_define
define|#
directive|define
name|TCL_READABLE
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|TCL_WRITABLE
value|(1<<2)
end_define

begin_define
define|#
directive|define
name|TCL_EXCEPTION
value|(1<<3)
end_define

begin_comment
comment|/*  * Flag values to pass to Tcl_OpenCommandChannel to indicate the  * disposition of the stdio handles.  TCL_STDIN, TCL_STDOUT, TCL_STDERR,  * are also used in Tcl_GetStdChannel.  */
end_comment

begin_define
define|#
directive|define
name|TCL_STDIN
value|(1<<1)
end_define

begin_define
define|#
directive|define
name|TCL_STDOUT
value|(1<<2)
end_define

begin_define
define|#
directive|define
name|TCL_STDERR
value|(1<<3)
end_define

begin_define
define|#
directive|define
name|TCL_ENFORCE_MODE
value|(1<<4)
end_define

begin_comment
comment|/*  * Typedefs for the various operations in a channel type:  */
end_comment

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_DriverBlockModeProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|instanceData
operator|,
name|Tcl_File
name|inFile
operator|,
name|Tcl_File
name|outFile
operator|,
name|int
name|mode
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_DriverCloseProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|instanceData
operator|,
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_File
name|inFile
operator|,
name|Tcl_File
name|outFile
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_DriverInputProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|instanceData
operator|,
name|Tcl_File
name|inFile
operator|,
name|char
operator|*
name|buf
operator|,
name|int
name|toRead
operator|,
name|int
operator|*
name|errorCodePtr
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_DriverOutputProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|instanceData
operator|,
name|Tcl_File
name|outFile
operator|,
name|char
operator|*
name|buf
operator|,
name|int
name|toWrite
operator|,
name|int
operator|*
name|errorCodePtr
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_DriverSeekProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|instanceData
operator|,
name|Tcl_File
name|inFile
operator|,
name|Tcl_File
name|outFile
operator|,
name|long
name|offset
operator|,
name|int
name|mode
operator|,
name|int
operator|*
name|errorCodePtr
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_DriverSetOptionProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|instanceData
operator|,
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|optionName
operator|,
name|char
operator|*
name|value
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|int
argument_list|(
argument|Tcl_DriverGetOptionProc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|instanceData
operator|,
name|char
operator|*
name|optionName
operator|,
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
expr_stmt|;
end_typedef

begin_comment
comment|/*  * Enum for different end of line translation and recognition modes.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|Tcl_EolTranslation
block|{
name|TCL_TRANSLATE_AUTO
block|,
comment|/* Eol == \r, \n and \r\n. */
name|TCL_TRANSLATE_CR
block|,
comment|/* Eol == \r. */
name|TCL_TRANSLATE_LF
block|,
comment|/* Eol == \n. */
name|TCL_TRANSLATE_CRLF
comment|/* Eol == \r\n. */
block|}
name|Tcl_EolTranslation
typedef|;
end_typedef

begin_comment
comment|/*  * struct Tcl_ChannelType:  *  * One such structure exists for each type (kind) of channel.  * It collects together in one place all the functions that are  * part of the specific channel type.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|Tcl_ChannelType
block|{
name|char
modifier|*
name|typeName
decl_stmt|;
comment|/* The name of the channel type in Tcl                                          * commands. This storage is owned by                                          * channel type. */
name|Tcl_DriverBlockModeProc
modifier|*
name|blockModeProc
decl_stmt|;
comment|/* Set blocking mode for the                                          * raw channel. May be NULL. */
name|Tcl_DriverCloseProc
modifier|*
name|closeProc
decl_stmt|;
comment|/* Procedure to call to close                                          * the channel. */
name|Tcl_DriverInputProc
modifier|*
name|inputProc
decl_stmt|;
comment|/* Procedure to call for input                                          * on channel. */
name|Tcl_DriverOutputProc
modifier|*
name|outputProc
decl_stmt|;
comment|/* Procedure to call for output                                          * on channel. */
name|Tcl_DriverSeekProc
modifier|*
name|seekProc
decl_stmt|;
comment|/* Procedure to call to seek                                          * on the channel. May be NULL. */
name|Tcl_DriverSetOptionProc
modifier|*
name|setOptionProc
decl_stmt|;
comment|/* Set an option on a channel. */
name|Tcl_DriverGetOptionProc
modifier|*
name|getOptionProc
decl_stmt|;
comment|/* Get an option from a channel. */
block|}
name|Tcl_ChannelType
typedef|;
end_typedef

begin_comment
comment|/*  * The following flags determine whether the blockModeProc above should  * set the channel into blocking or nonblocking mode. They are passed  * as arguments to the blockModeProc procedure in the above structure.  */
end_comment

begin_define
define|#
directive|define
name|TCL_MODE_BLOCKING
value|0
end_define

begin_comment
comment|/* Put channel into blocking mode. */
end_comment

begin_define
define|#
directive|define
name|TCL_MODE_NONBLOCKING
value|1
end_define

begin_comment
comment|/* Put channel into nonblocking 					 * mode. */
end_comment

begin_comment
comment|/*  * Types for file handles:  */
end_comment

begin_define
define|#
directive|define
name|TCL_UNIX_FD
value|1
end_define

begin_define
define|#
directive|define
name|TCL_MAC_FILE
value|2
end_define

begin_define
define|#
directive|define
name|TCL_MAC_SOCKET
value|3
end_define

begin_define
define|#
directive|define
name|TCL_WIN_PIPE
value|4
end_define

begin_define
define|#
directive|define
name|TCL_WIN_FILE
value|5
end_define

begin_define
define|#
directive|define
name|TCL_WIN_SOCKET
value|6
end_define

begin_define
define|#
directive|define
name|TCL_WIN_CONSOLE
value|7
end_define

begin_comment
comment|/*  * Enum for different types of file paths.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
name|Tcl_PathType
block|{
name|TCL_PATH_ABSOLUTE
block|,
name|TCL_PATH_RELATIVE
block|,
name|TCL_PATH_VOLUME_RELATIVE
block|}
name|Tcl_PathType
typedef|;
end_typedef

begin_comment
comment|/*  * The following interface is exported for backwards compatibility, but  * is only implemented on Unix.  Portable applications should use  * Tcl_OpenCommandChannel, instead.  */
end_comment

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_CreatePipeline
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|argc
operator|,
name|char
operator|*
operator|*
name|argv
operator|,
name|int
operator|*
operator|*
name|pidArrayPtr
operator|,
name|int
operator|*
name|inPipePtr
operator|,
name|int
operator|*
name|outPipePtr
operator|,
name|int
operator|*
name|errFilePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/*  * Exported Tcl procedures:  */
end_comment

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_AddErrorInfo
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|message
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_AllowExceptions
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_AppendElement
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_AppendResult
name|_ANSI_ARGS_
argument_list|(
name|TCL_VARARGS
argument_list|(
name|Tcl_Interp
operator|*
argument_list|,
name|interp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_AppInit
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_AsyncHandler
name|Tcl_AsyncCreate
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_AsyncProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_AsyncDelete
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_AsyncHandler
name|async
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_AsyncInvoke
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|code
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_AsyncMark
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_AsyncHandler
name|async
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_AsyncReady
name|_ANSI_ARGS_
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_BackgroundError
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
name|Tcl_Backslash
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|src
operator|,
name|int
operator|*
name|readPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CallWhenDeleted
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_InterpDeleteProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CancelIdleCall
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_IdleProc
operator|*
name|idleProc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|VOID
modifier|*
name|Tcl_Ckalloc
name|_ANSI_ARGS_
argument_list|(
operator|(
name|unsigned
name|int
name|size
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_Ckfree
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Close
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_CommandComplete
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|cmd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_Concat
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
operator|*
name|argv
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_ConvertElement
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|src
operator|,
name|char
operator|*
name|dst
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_CreateAlias
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|slave
operator|,
name|char
operator|*
name|slaveCmd
operator|,
name|Tcl_Interp
operator|*
name|target
operator|,
name|char
operator|*
name|targetCmd
operator|,
name|int
name|argc
operator|,
name|char
operator|*
operator|*
name|argv
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_CreateChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_ChannelType
operator|*
name|typePtr
operator|,
name|char
operator|*
name|chanName
operator|,
name|Tcl_File
name|inFile
operator|,
name|Tcl_File
name|outFile
operator|,
name|ClientData
name|instanceData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CreateChannelHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|int
name|mask
operator|,
name|Tcl_ChannelProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CreateCloseHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|Tcl_CloseProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Command
name|Tcl_CreateCommand
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|cmdName
operator|,
name|Tcl_CmdProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|,
name|Tcl_CmdDeleteProc
operator|*
name|deleteProc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CreateEventSource
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_EventSetupProc
operator|*
name|setupProc
operator|,
name|Tcl_EventCheckProc
operator|*
name|checkProc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CreateExitHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_ExitProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CreateFileHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_File
name|file
operator|,
name|int
name|mask
operator|,
name|Tcl_FileProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Interp
modifier|*
name|Tcl_CreateInterp
name|_ANSI_ARGS_
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CreateMathFunc
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|name
operator|,
name|int
name|numArgs
operator|,
name|Tcl_ValueType
operator|*
name|argTypes
operator|,
name|Tcl_MathProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_CreateModalTimeout
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|milliseconds
operator|,
name|Tcl_TimerProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Interp
modifier|*
name|Tcl_CreateSlave
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|slaveName
operator|,
name|int
name|isSafe
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_TimerToken
name|Tcl_CreateTimerHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|milliseconds
operator|,
name|Tcl_TimerProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Trace
name|Tcl_CreateTrace
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|level
operator|,
name|Tcl_CmdTraceProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_DbCkalloc
name|_ANSI_ARGS_
argument_list|(
operator|(
name|unsigned
name|int
name|size
operator|,
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_DbCkfree
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|ptr
operator|,
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_DbCkrealloc
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|ptr
operator|,
name|unsigned
name|int
name|size
operator|,
name|char
operator|*
name|file
operator|,
name|int
name|line
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteAssocData
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|name
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_DeleteCommand
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|cmdName
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteChannelHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|Tcl_ChannelProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteCloseHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|Tcl_CloseProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteEventSource
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_EventSetupProc
operator|*
name|setupProc
operator|,
name|Tcl_EventCheckProc
operator|*
name|checkProc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteEvents
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_EventDeleteProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteExitHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_ExitProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteFileHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_File
name|file
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteHashEntry
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_HashEntry
operator|*
name|entryPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteHashTable
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_HashTable
operator|*
name|tablePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteInterp
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteModalTimeout
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_TimerProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteTimerHandler
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_TimerToken
name|token
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DeleteTrace
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_Trace
name|trace
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DetachPids
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|numPids
operator|,
name|int
operator|*
name|pidPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DontCallWhenDeleted
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_InterpDeleteProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_DoOneEvent
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DoWhenIdle
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_IdleProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_DStringAppend
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_DString
operator|*
name|dsPtr
operator|,
name|char
operator|*
name|string
operator|,
name|int
name|length
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_DStringAppendElement
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_DString
operator|*
name|dsPtr
operator|,
name|char
operator|*
name|string
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DStringEndSublist
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DStringFree
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DStringGetResult
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DStringInit
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DStringResult
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DStringSetLength
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_DString
operator|*
name|dsPtr
operator|,
name|int
name|length
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_DStringStartSublist
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Eof
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_ErrnoId
name|_ANSI_ARGS_
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_ErrnoMsg
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|err
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Eval
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|cmd
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_EvalFile
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|fileName
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_EventuallyFree
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|,
name|Tcl_FreeProc
operator|*
name|freeProc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_Exit
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|status
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_ExprBoolean
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|int
operator|*
name|ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_ExprDouble
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|double
operator|*
name|ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_ExprLong
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|long
operator|*
name|ptr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_ExprString
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_FileReady
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_File
name|file
operator|,
name|int
name|mask
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_FindExecutable
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|argv0
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_HashEntry
modifier|*
name|Tcl_FirstHashEntry
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_HashTable
operator|*
name|tablePtr
operator|,
name|Tcl_HashSearch
operator|*
name|searchPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Flush
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_FreeFile
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_File
name|file
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetAlias
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|slaveCmd
operator|,
name|Tcl_Interp
operator|*
operator|*
name|targetInterpPtr
operator|,
name|char
operator|*
operator|*
name|targetCmdPtr
operator|,
name|int
operator|*
name|argcPtr
operator|,
name|char
operator|*
operator|*
operator|*
name|argvPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|ClientData
name|Tcl_GetAssocData
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|name
operator|,
name|Tcl_InterpDeleteProc
operator|*
operator|*
name|procPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetBoolean
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|int
operator|*
name|boolPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_GetChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|chanName
operator|,
name|int
operator|*
name|modePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetChannelBufferSize
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_File
name|Tcl_GetChannelFile
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|int
name|direction
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|ClientData
name|Tcl_GetChannelInstanceData
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetChannelOption
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|char
operator|*
name|optionName
operator|,
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_GetChannelName
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_ChannelType
modifier|*
name|Tcl_GetChannelType
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetCommandInfo
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|cmdName
operator|,
name|Tcl_CmdInfo
operator|*
name|infoPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_GetCommandName
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_Command
name|command
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_GetCwd
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|buf
operator|,
name|int
name|len
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetDouble
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|double
operator|*
name|doublePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetErrno
name|_ANSI_ARGS_
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_File
name|Tcl_GetFile
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|fileData
operator|,
name|int
name|type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|ClientData
name|Tcl_GetFileInfo
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_File
name|file
operator|,
name|int
operator|*
name|typePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_GetHostName
name|_ANSI_ARGS_
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetInt
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|int
operator|*
name|intPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetInterpPath
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|askInterp
operator|,
name|Tcl_Interp
operator|*
name|slaveInterp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Interp
modifier|*
name|Tcl_GetMaster
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|ClientData
name|Tcl_GetNotifierData
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_File
name|file
operator|,
name|Tcl_FileFreeProc
operator|*
operator|*
name|freeProcPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GetOpenFile
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|int
name|write
operator|,
name|int
name|checkUsage
operator|,
name|ClientData
operator|*
name|filePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_PathType
name|Tcl_GetPathType
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|path
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Gets
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|Tcl_DString
operator|*
name|dsPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Interp
modifier|*
name|Tcl_GetSlave
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|slaveName
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_GetStdChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_GetVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_GetVar2
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|part1
operator|,
name|char
operator|*
name|part2
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_GlobalEval
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|command
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_HashStats
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_HashTable
operator|*
name|tablePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Init
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_InitHashTable
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_HashTable
operator|*
name|tablePtr
operator|,
name|int
name|keyType
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_InitMemory
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_InputBlocked
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_InputBuffered
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_InterpDeleted
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_IsSafe
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_JoinPath
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
operator|*
name|argv
operator|,
name|Tcl_DString
operator|*
name|resultPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_LinkVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|,
name|char
operator|*
name|addr
operator|,
name|int
name|type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_Main
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
operator|*
name|argv
operator|,
name|Tcl_AppInitProc
operator|*
name|appInitProc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_MakeFileChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|inFile
operator|,
name|ClientData
name|outFile
operator|,
name|int
name|mode
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_MakeSafe
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_MakeTcpClientChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|tcpSocket
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_Merge
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|argc
operator|,
name|char
operator|*
operator|*
name|argv
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_HashEntry
modifier|*
name|Tcl_NextHashEntry
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_HashSearch
operator|*
name|searchPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_OpenCommandChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|argc
operator|,
name|char
operator|*
operator|*
name|argv
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_OpenFileChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|fileName
operator|,
name|char
operator|*
name|modeString
operator|,
name|int
name|permissions
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_OpenTcpClient
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|port
operator|,
name|char
operator|*
name|address
operator|,
name|char
operator|*
name|myaddr
operator|,
name|int
name|myport
operator|,
name|int
name|async
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_Channel
name|Tcl_OpenTcpServer
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|port
operator|,
name|char
operator|*
name|host
operator|,
name|Tcl_TcpAcceptProc
operator|*
name|acceptProc
operator|,
name|ClientData
name|callbackData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_ParseVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|char
operator|*
operator|*
name|termPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_PkgProvide
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|name
operator|,
name|char
operator|*
name|version
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_PkgRequire
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|name
operator|,
name|char
operator|*
name|version
operator|,
name|int
name|exact
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_PosixError
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_Preserve
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_PrintDouble
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|double
name|value
operator|,
name|char
operator|*
name|dst
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_PutEnv
name|_ANSI_ARGS_
argument_list|(
operator|(
name|CONST
name|char
operator|*
name|string
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_QueueEvent
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Event
operator|*
name|evPtr
operator|,
name|Tcl_QueuePosition
name|position
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Read
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|char
operator|*
name|bufPtr
operator|,
name|int
name|toRead
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_ReapDetachedProcs
name|_ANSI_ARGS_
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_RecordAndEval
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|cmd
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|Tcl_RegExp
name|Tcl_RegExpCompile
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_RegExpExec
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_RegExp
name|regexp
operator|,
name|char
operator|*
name|string
operator|,
name|char
operator|*
name|start
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_RegExpMatch
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|char
operator|*
name|pattern
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_RegExpRange
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_RegExp
name|regexp
operator|,
name|int
name|index
operator|,
name|char
operator|*
operator|*
name|startPtr
operator|,
name|char
operator|*
operator|*
name|endPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_RegisterChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_Release
name|_ANSI_ARGS_
argument_list|(
operator|(
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_ResetResult
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|Tcl_Return
value|Tcl_SetResult
end_define

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_ScanElement
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|string
operator|,
name|int
operator|*
name|flagPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Seek
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|int
name|offset
operator|,
name|int
name|mode
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetAssocData
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|name
operator|,
name|Tcl_InterpDeleteProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetChannelBufferSize
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|int
name|sz
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_SetChannelOption
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_Channel
name|chan
operator|,
name|char
operator|*
name|optionName
operator|,
name|char
operator|*
name|newValue
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_SetCommandInfo
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|cmdName
operator|,
name|Tcl_CmdInfo
operator|*
name|infoPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetErrno
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|errno
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetErrorCode
name|_ANSI_ARGS_
argument_list|(
name|TCL_VARARGS
argument_list|(
name|Tcl_Interp
operator|*
argument_list|,
name|interp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetMaxBlockTime
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Time
operator|*
name|timePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetNotifierData
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_File
name|file
operator|,
name|Tcl_FileFreeProc
operator|*
name|freeProcPtr
operator|,
name|ClientData
name|data
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetPanicProc
name|_ANSI_ARGS_
argument_list|(
operator|(
name|void
argument_list|(
argument|*proc
argument_list|)
name|_ANSI_ARGS_
argument_list|(
name|TCL_VARARGS
argument_list|(
name|char
operator|*
argument_list|,
name|format
argument_list|)
argument_list|)
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_SetRecursionLimit
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|int
name|depth
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetResult
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|string
operator|,
name|Tcl_FreeProc
operator|*
name|freeProc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SetStdChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|channel
operator|,
name|int
name|type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_SetVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|,
name|char
operator|*
name|newValue
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_SetVar2
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|part1
operator|,
name|char
operator|*
name|part2
operator|,
name|char
operator|*
name|newValue
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_SignalId
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|sig
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_SignalMsg
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|sig
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_Sleep
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|ms
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_SplitList
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|list
operator|,
name|int
operator|*
name|argcPtr
operator|,
name|char
operator|*
operator|*
operator|*
name|argvPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_SplitPath
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|path
operator|,
name|int
operator|*
name|argcPtr
operator|,
name|char
operator|*
operator|*
operator|*
name|argvPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_StaticPackage
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|pkgName
operator|,
name|Tcl_PackageInitProc
operator|*
name|initProc
operator|,
name|Tcl_PackageInitProc
operator|*
name|safeInitProc
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_StringMatch
name|_ANSI_ARGS_
argument_list|(
operator|(
name|char
operator|*
name|string
operator|,
name|char
operator|*
name|pattern
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Tell
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|Tcl_TildeSubst
value|Tcl_TranslateFileName
end_define

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_TraceVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|,
name|int
name|flags
operator|,
name|Tcl_VarTraceProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_TraceVar2
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|part1
operator|,
name|char
operator|*
name|part2
operator|,
name|int
name|flags
operator|,
name|Tcl_VarTraceProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|char
modifier|*
name|Tcl_TranslateFileName
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|name
operator|,
name|Tcl_DString
operator|*
name|bufferPtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_UnlinkVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_UnregisterChannel
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|Tcl_Channel
name|chan
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_UnsetVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_UnsetVar2
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|part1
operator|,
name|char
operator|*
name|part2
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_UntraceVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|,
name|int
name|flags
operator|,
name|Tcl_VarTraceProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_UntraceVar2
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|part1
operator|,
name|char
operator|*
name|part2
operator|,
name|int
name|flags
operator|,
name|Tcl_VarTraceProc
operator|*
name|proc
operator|,
name|ClientData
name|clientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_UpdateLinkedVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_UpVar
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|frameName
operator|,
name|char
operator|*
name|varName
operator|,
name|char
operator|*
name|localName
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_UpVar2
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|frameName
operator|,
name|char
operator|*
name|part1
operator|,
name|char
operator|*
name|part2
operator|,
name|char
operator|*
name|localName
operator|,
name|int
name|flags
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_VarEval
name|_ANSI_ARGS_
argument_list|(
name|TCL_VARARGS
argument_list|(
name|Tcl_Interp
operator|*
argument_list|,
name|interp
argument_list|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|ClientData
name|Tcl_VarTraceInfo
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|varName
operator|,
name|int
name|flags
operator|,
name|Tcl_VarTraceProc
operator|*
name|procPtr
operator|,
name|ClientData
name|prevClientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|ClientData
name|Tcl_VarTraceInfo2
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Interp
operator|*
name|interp
operator|,
name|char
operator|*
name|part1
operator|,
name|char
operator|*
name|part2
operator|,
name|int
name|flags
operator|,
name|Tcl_VarTraceProc
operator|*
name|procPtr
operator|,
name|ClientData
name|prevClientData
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_WaitForEvent
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Time
operator|*
name|timePtr
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_WaitPid
name|_ANSI_ARGS_
argument_list|(
operator|(
name|int
name|pid
operator|,
name|int
operator|*
name|statPtr
operator|,
name|int
name|options
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|void
name|Tcl_WatchFile
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_File
name|file
operator|,
name|int
name|mask
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|EXTERN
name|int
name|Tcl_Write
name|_ANSI_ARGS_
argument_list|(
operator|(
name|Tcl_Channel
name|chan
operator|,
name|char
operator|*
name|s
operator|,
name|int
name|slen
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _TCL */
end_comment

end_unit

