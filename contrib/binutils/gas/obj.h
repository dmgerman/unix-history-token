begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* obj.h - defines the object dependent hooks for all object    format backends.     Copyright 1987, 1990, 1991, 1992, 1993, 1995, 1996, 1997, 1999, 2000    Free Software Foundation, Inc.     This file is part of GAS, the GNU Assembler.     GAS is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GAS is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GAS; see the file COPYING.  If not, write to the Free    Software Foundation, 59 Temple Place - Suite 330, Boston, MA    02111-1307, USA.  */
end_comment

begin_decl_stmt
name|char
modifier|*
name|obj_default_output_file_name
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|obj_emit_relocations
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
operator|*
name|where
operator|,
name|fixS
operator|*
name|fixP
operator|,
name|relax_addressT
name|segment_address_in_file
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|obj_emit_strings
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
operator|*
name|where
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|obj_emit_symbols
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
operator|*
name|where
operator|,
name|symbolS
operator|*
name|symbols
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|obj_read_begin_hook
end_ifndef

begin_decl_stmt
name|void
name|obj_read_begin_hook
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|BFD_ASSEMBLER
end_ifndef

begin_decl_stmt
name|void
name|obj_crawl_symbol_chain
name|PARAMS
argument_list|(
operator|(
name|object_headers
operator|*
name|headers
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|obj_header_append
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
operator|*
name|where
operator|,
name|object_headers
operator|*
name|headers
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|obj_pre_write_hook
end_ifndef

begin_decl_stmt
name|void
name|obj_pre_write_hook
name|PARAMS
argument_list|(
operator|(
name|object_headers
operator|*
name|headers
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|obj_symbol_new_hook
end_ifndef

begin_decl_stmt
name|void
name|obj_symbol_new_hook
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
name|symbolP
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
name|void
name|obj_symbol_to_chars
name|PARAMS
argument_list|(
operator|(
name|char
operator|*
operator|*
name|where
operator|,
name|symbolS
operator|*
name|symbolP
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|pseudo_typeS
name|obj_pseudo_table
index|[]
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|BFD_ASSEMBLER
end_ifdef

begin_struct
struct|struct
name|format_ops
block|{
name|int
name|flavor
decl_stmt|;
name|unsigned
name|dfl_leading_underscore
range|:
literal|1
decl_stmt|;
name|unsigned
name|emit_section_symbols
range|:
literal|1
decl_stmt|;
name|void
argument_list|(
argument|*begin
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*app_file
argument_list|)
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*frob_symbol
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|,
name|int
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*frob_file
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*frob_file_before_adjust
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*frob_file_after_relocs
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
name|bfd_vma
argument_list|(
argument|*s_get_size
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*s_set_size
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|,
name|bfd_vma
operator|)
argument_list|)
expr_stmt|;
name|bfd_vma
argument_list|(
argument|*s_get_align
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*s_set_align
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|,
name|bfd_vma
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*s_get_other
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*s_set_other
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*s_get_desc
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*s_set_desc
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*s_get_type
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*s_set_type
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*copy_symbol_attributes
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|,
name|symbolS
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*generate_asm_lineno
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*process_stab
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|segT
operator|,
name|int
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|,
name|int
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*separate_stab_sections
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*init_stab_section
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|segT
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*sec_sym_ok_for_reloc
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|asection
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*pop_insert
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
comment|/* For configurations using ECOFF_DEBUGGING, this callback is used.  */
name|void
argument_list|(
argument|*ecoff_set_ext
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|,
expr|struct
name|ecoff_extr
operator|*
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*read_begin_hook
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*symbol_new_hook
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|symbolS
operator|*
operator|)
argument_list|)
expr_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|format_ops
name|elf_format_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|format_ops
name|ecoff_format_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|format_ops
name|coff_format_ops
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
specifier|const
name|struct
name|format_ops
name|aout_format_ops
decl_stmt|;
end_decl_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|this_format
end_ifndef

begin_expr_stmt
name|COMMON
specifier|const
expr|struct
name|format_ops
operator|*
name|this_format
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* end of obj.h */
end_comment

end_unit

