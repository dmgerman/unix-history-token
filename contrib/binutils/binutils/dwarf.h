begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* dwwrf.h - DWARF support header file    Copyright 2005    Free Software Foundation, Inc.  This file is part of GNU Binutils.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_include
include|#
directive|include
file|"bfd.h"
end_include

begin_include
include|#
directive|include
file|"elf/dwarf2.h"
end_include

begin_if
if|#
directive|if
name|__STDC_VERSION__
operator|>=
literal|199901L
operator|||
operator|(
name|defined
argument_list|(
name|__GNUC__
argument_list|)
operator|&&
name|__GNUC__
operator|>=
literal|2
operator|)
end_if

begin_comment
comment|/* We can't use any bfd types here since readelf may define BFD64 and    objdump may not.  */
end_comment

begin_typedef
typedef|typedef
name|unsigned
name|long
name|long
name|dwarf_vma
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|long
name|dwarf_size_type
typedef|;
end_typedef

begin_else
else|#
directive|else
end_else

begin_typedef
typedef|typedef
name|unsigned
name|long
name|dwarf_vma
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|unsigned
name|long
name|dwarf_size_type
typedef|;
end_typedef

begin_endif
endif|#
directive|endif
end_endif

begin_struct
struct|struct
name|dwarf_section
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|unsigned
name|char
modifier|*
name|start
decl_stmt|;
name|dwarf_vma
name|address
decl_stmt|;
name|dwarf_size_type
name|size
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* A structure containing the name of a debug section    and a pointer to a function that can decode it.  */
end_comment

begin_struct
struct|struct
name|dwarf_section_display
block|{
name|struct
name|dwarf_section
name|section
decl_stmt|;
name|int
function_decl|(
modifier|*
name|display
function_decl|)
parameter_list|(
name|struct
name|dwarf_section
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|unsigned
name|int
name|relocate
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|eh_frame
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|dwarf_section_display_enum
block|{
name|abbrev
init|=
literal|0
block|,
name|aranges
block|,
name|frame
block|,
name|info
block|,
name|line
block|,
name|pubnames
block|,
name|eh_frame
block|,
name|macinfo
block|,
name|str
block|,
name|loc
block|,
name|pubtypes
block|,
name|ranges
block|,
name|static_func
block|,
name|static_vars
block|,
name|types
block|,
name|weaknames
block|,
name|max
block|}
enum|;
end_enum

begin_decl_stmt
specifier|extern
name|struct
name|dwarf_section_display
name|debug_displays
index|[]
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* This structure records the information that    we extract from the.debug_info section.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|unsigned
name|int
name|pointer_size
decl_stmt|;
name|unsigned
name|long
name|cu_offset
decl_stmt|;
name|unsigned
name|long
name|base_address
decl_stmt|;
comment|/* This is an array of offsets to the location list table.  */
name|unsigned
name|long
modifier|*
name|loc_offsets
decl_stmt|;
name|int
modifier|*
name|have_frame_base
decl_stmt|;
name|unsigned
name|int
name|num_loc_offsets
decl_stmt|;
name|unsigned
name|int
name|max_loc_offsets
decl_stmt|;
name|unsigned
name|long
modifier|*
name|range_lists
decl_stmt|;
name|unsigned
name|int
name|num_range_lists
decl_stmt|;
name|unsigned
name|int
name|max_range_lists
decl_stmt|;
block|}
name|debug_info
typedef|;
end_typedef

begin_function_decl
specifier|extern
name|dwarf_vma
function_decl|(
modifier|*
name|byte_get
function_decl|)
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|dwarf_vma
name|byte_get_little_endian
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|dwarf_vma
name|byte_get_big_endian
parameter_list|(
name|unsigned
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|dwarf_vma
name|eh_addr_size
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|is_relocatable
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_info
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_abbrevs
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_lines
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_pubnames
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_aranges
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_ranges
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_frames
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_frames_interp
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_macinfo
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_str
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|do_debug_loc
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|int
name|load_debug_section
parameter_list|(
name|enum
name|dwarf_section_display_enum
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|free_debug_section
parameter_list|(
name|enum
name|dwarf_section_display_enum
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|free_debug_memory
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|cmalloc
parameter_list|(
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|xcmalloc
parameter_list|(
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
modifier|*
name|xcrealloc
parameter_list|(
name|void
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
name|void
name|error
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
operator|...
argument_list|)
name|ATTRIBUTE_PRINTF_1
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|warn
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
operator|...
argument_list|)
name|ATTRIBUTE_PRINTF_1
decl_stmt|;
end_decl_stmt

end_unit

