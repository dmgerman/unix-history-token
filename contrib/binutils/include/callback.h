begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Remote target system call callback support.    Copyright 1997 Free Software Foundation, Inc.  This file is part of GDB.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|CALLBACK_H
end_ifndef

begin_define
define|#
directive|define
name|CALLBACK_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|va_start
end_ifndef

begin_include
include|#
directive|include
file|<ansidecl.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|ANSI_PROTOTYPES
end_ifdef

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_else
else|#
directive|else
end_else

begin_include
include|#
directive|include
file|<varargs.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_typedef
typedef|typedef
name|struct
name|host_callback_struct
name|host_callback
typedef|;
end_typedef

begin_define
define|#
directive|define
name|MAX_CALLBACK_FDS
value|10
end_define

begin_struct
struct|struct
name|host_callback_struct
block|{
name|int
argument_list|(
argument|*close
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*get_errno
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*isatty
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*lseek
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
name|int
operator|,
name|long
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*open
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
name|mode
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*read
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*read_stdin
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*rename
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*system
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
expr_stmt|;
name|long
argument_list|(
argument|*time
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
name|long
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*unlink
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*write
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
name|int
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*write_stdout
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*flush_stdout
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*write_stderr
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|int
operator|)
argument_list|)
expr_stmt|;
name|void
argument_list|(
argument|*flush_stderr
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* Used when the target has gone away, so we can close open      handles and free memory etc etc.  */
name|int
argument_list|(
argument|*shutdown
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|)
argument_list|)
expr_stmt|;
name|int
argument_list|(
argument|*init
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|)
argument_list|)
expr_stmt|;
comment|/* depreciated, use vprintf_filtered - Talk to the user on a console.  */
name|void
argument_list|(
argument|*printf_filtered
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
expr_stmt|;
comment|/* Talk to the user on a console.      The `void *' is actually `va_list *'.  */
name|void
argument_list|(
argument|*vprintf_filtered
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|va_list
operator|)
argument_list|)
expr_stmt|;
comment|/* Same as vprintf_filtered but to stderr.  */
name|void
argument_list|(
argument|*evprintf_filtered
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
name|va_list
operator|)
argument_list|)
expr_stmt|;
comment|/* Print an error message and "exit".      In the case of gdb "exiting" means doing a longjmp back to the main      command loop.  */
name|void
argument_list|(
argument|*error
argument_list|)
name|PARAMS
argument_list|(
operator|(
name|host_callback
operator|*
operator|,
specifier|const
name|char
operator|*
operator|,
operator|...
operator|)
argument_list|)
expr_stmt|;
name|int
name|last_errno
decl_stmt|;
comment|/* host format */
name|int
name|fdmap
index|[
name|MAX_CALLBACK_FDS
index|]
decl_stmt|;
name|char
name|fdopen
index|[
name|MAX_CALLBACK_FDS
index|]
decl_stmt|;
name|char
name|alwaysopen
index|[
name|MAX_CALLBACK_FDS
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_decl_stmt
specifier|extern
name|host_callback
name|default_callback
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Mapping of host/target values.  */
end_comment

begin_comment
comment|/* ??? For debugging purposes, one might want to add a string of the    name of the symbol.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|host_val
decl_stmt|;
name|int
name|target_val
decl_stmt|;
block|}
name|target_defs_map
typedef|;
end_typedef

begin_decl_stmt
specifier|extern
name|target_defs_map
name|errno_map
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|target_defs_map
name|open_map
index|[]
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|host_to_target_errno
name|PARAMS
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|int
name|target_to_host_open
name|PARAMS
argument_list|(
operator|(
name|int
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

