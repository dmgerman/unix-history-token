begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Declarations and definitions of codes relating to the DWARF symbolic    debugging information format.    Copyright (C) 1992, 1993, 1995, 1996 Free Software Foundation, Inc.     Written by Gary Funck (gary@intrepid.com) The Ada Joint Program    Office (AJPO), Florida State Unviversity and Silicon Graphics Inc.    provided support for this effort -- June 21, 1995.     Derived from the DWARF 1 implementation written by Ron Guilmette    (rfg@netcom.com), November 1990.  This file is part of GNU CC.  GNU CC is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  GNU CC is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with GNU CC; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* This file is derived from the DWARF specification (a public document)    Revision 2.0.0 (July 27, 1993) developed by the UNIX International    Programming Languages Special Interest Group (UI/PLSIG) and distributed    by UNIX International.  Copies of this specification are available from    UNIX International, 20 Waterview Boulevard, Parsippany, NJ, 07054.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_ELF_DWARF2_H
end_ifndef

begin_define
define|#
directive|define
name|_ELF_DWARF2_H
end_define

begin_comment
comment|/* Tag names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_tag
block|{
name|DW_TAG_padding
init|=
literal|0x00
block|,
name|DW_TAG_array_type
init|=
literal|0x01
block|,
name|DW_TAG_class_type
init|=
literal|0x02
block|,
name|DW_TAG_entry_point
init|=
literal|0x03
block|,
name|DW_TAG_enumeration_type
init|=
literal|0x04
block|,
name|DW_TAG_formal_parameter
init|=
literal|0x05
block|,
name|DW_TAG_imported_declaration
init|=
literal|0x08
block|,
name|DW_TAG_label
init|=
literal|0x0a
block|,
name|DW_TAG_lexical_block
init|=
literal|0x0b
block|,
name|DW_TAG_member
init|=
literal|0x0d
block|,
name|DW_TAG_pointer_type
init|=
literal|0x0f
block|,
name|DW_TAG_reference_type
init|=
literal|0x10
block|,
name|DW_TAG_compile_unit
init|=
literal|0x11
block|,
name|DW_TAG_string_type
init|=
literal|0x12
block|,
name|DW_TAG_structure_type
init|=
literal|0x13
block|,
name|DW_TAG_subroutine_type
init|=
literal|0x15
block|,
name|DW_TAG_typedef
init|=
literal|0x16
block|,
name|DW_TAG_union_type
init|=
literal|0x17
block|,
name|DW_TAG_unspecified_parameters
init|=
literal|0x18
block|,
name|DW_TAG_variant
init|=
literal|0x19
block|,
name|DW_TAG_common_block
init|=
literal|0x1a
block|,
name|DW_TAG_common_inclusion
init|=
literal|0x1b
block|,
name|DW_TAG_inheritance
init|=
literal|0x1c
block|,
name|DW_TAG_inlined_subroutine
init|=
literal|0x1d
block|,
name|DW_TAG_module
init|=
literal|0x1e
block|,
name|DW_TAG_ptr_to_member_type
init|=
literal|0x1f
block|,
name|DW_TAG_set_type
init|=
literal|0x20
block|,
name|DW_TAG_subrange_type
init|=
literal|0x21
block|,
name|DW_TAG_with_stmt
init|=
literal|0x22
block|,
name|DW_TAG_access_declaration
init|=
literal|0x23
block|,
name|DW_TAG_base_type
init|=
literal|0x24
block|,
name|DW_TAG_catch_block
init|=
literal|0x25
block|,
name|DW_TAG_const_type
init|=
literal|0x26
block|,
name|DW_TAG_constant
init|=
literal|0x27
block|,
name|DW_TAG_enumerator
init|=
literal|0x28
block|,
name|DW_TAG_file_type
init|=
literal|0x29
block|,
name|DW_TAG_friend
init|=
literal|0x2a
block|,
name|DW_TAG_namelist
init|=
literal|0x2b
block|,
name|DW_TAG_namelist_item
init|=
literal|0x2c
block|,
name|DW_TAG_packed_type
init|=
literal|0x2d
block|,
name|DW_TAG_subprogram
init|=
literal|0x2e
block|,
name|DW_TAG_template_type_param
init|=
literal|0x2f
block|,
name|DW_TAG_template_value_param
init|=
literal|0x30
block|,
name|DW_TAG_thrown_type
init|=
literal|0x31
block|,
name|DW_TAG_try_block
init|=
literal|0x32
block|,
name|DW_TAG_variant_part
init|=
literal|0x33
block|,
name|DW_TAG_variable
init|=
literal|0x34
block|,
name|DW_TAG_volatile_type
init|=
literal|0x35
block|,
comment|/* SGI/MIPS Extensions */
name|DW_TAG_MIPS_loop
init|=
literal|0x4081
block|,
comment|/* GNU extensions */
name|DW_TAG_format_label
init|=
literal|0x4101
block|,
comment|/* for FORTRAN 77 and Fortran 90 */
name|DW_TAG_function_template
init|=
literal|0x4102
block|,
comment|/* for C++ */
name|DW_TAG_class_template
init|=
literal|0x4103
comment|/* for C++ */
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DW_TAG_lo_user
value|0x4080
end_define

begin_define
define|#
directive|define
name|DW_TAG_hi_user
value|0xffff
end_define

begin_comment
comment|/* flag that tells whether entry has a child or not */
end_comment

begin_define
define|#
directive|define
name|DW_children_no
value|0
end_define

begin_define
define|#
directive|define
name|DW_children_yes
value|1
end_define

begin_comment
comment|/* Form names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_form
block|{
name|DW_FORM_addr
init|=
literal|0x01
block|,
name|DW_FORM_block2
init|=
literal|0x03
block|,
name|DW_FORM_block4
init|=
literal|0x04
block|,
name|DW_FORM_data2
init|=
literal|0x05
block|,
name|DW_FORM_data4
init|=
literal|0x06
block|,
name|DW_FORM_data8
init|=
literal|0x07
block|,
name|DW_FORM_string
init|=
literal|0x08
block|,
name|DW_FORM_block
init|=
literal|0x09
block|,
name|DW_FORM_block1
init|=
literal|0x0a
block|,
name|DW_FORM_data1
init|=
literal|0x0b
block|,
name|DW_FORM_flag
init|=
literal|0x0c
block|,
name|DW_FORM_sdata
init|=
literal|0x0d
block|,
name|DW_FORM_strp
init|=
literal|0x0e
block|,
name|DW_FORM_udata
init|=
literal|0x0f
block|,
name|DW_FORM_ref_addr
init|=
literal|0x10
block|,
name|DW_FORM_ref1
init|=
literal|0x11
block|,
name|DW_FORM_ref2
init|=
literal|0x12
block|,
name|DW_FORM_ref4
init|=
literal|0x13
block|,
name|DW_FORM_ref8
init|=
literal|0x14
block|,
name|DW_FORM_ref_udata
init|=
literal|0x15
block|,
name|DW_FORM_indirect
init|=
literal|0x16
block|}
enum|;
end_enum

begin_comment
comment|/* Attribute names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_attribute
block|{
name|DW_AT_sibling
init|=
literal|0x01
block|,
name|DW_AT_location
init|=
literal|0x02
block|,
name|DW_AT_name
init|=
literal|0x03
block|,
name|DW_AT_ordering
init|=
literal|0x09
block|,
name|DW_AT_subscr_data
init|=
literal|0x0a
block|,
name|DW_AT_byte_size
init|=
literal|0x0b
block|,
name|DW_AT_bit_offset
init|=
literal|0x0c
block|,
name|DW_AT_bit_size
init|=
literal|0x0d
block|,
name|DW_AT_element_list
init|=
literal|0x0f
block|,
name|DW_AT_stmt_list
init|=
literal|0x10
block|,
name|DW_AT_low_pc
init|=
literal|0x11
block|,
name|DW_AT_high_pc
init|=
literal|0x12
block|,
name|DW_AT_language
init|=
literal|0x13
block|,
name|DW_AT_member
init|=
literal|0x14
block|,
name|DW_AT_discr
init|=
literal|0x15
block|,
name|DW_AT_discr_value
init|=
literal|0x16
block|,
name|DW_AT_visibility
init|=
literal|0x17
block|,
name|DW_AT_import
init|=
literal|0x18
block|,
name|DW_AT_string_length
init|=
literal|0x19
block|,
name|DW_AT_common_reference
init|=
literal|0x1a
block|,
name|DW_AT_comp_dir
init|=
literal|0x1b
block|,
name|DW_AT_const_value
init|=
literal|0x1c
block|,
name|DW_AT_containing_type
init|=
literal|0x1d
block|,
name|DW_AT_default_value
init|=
literal|0x1e
block|,
name|DW_AT_inline
init|=
literal|0x20
block|,
name|DW_AT_is_optional
init|=
literal|0x21
block|,
name|DW_AT_lower_bound
init|=
literal|0x22
block|,
name|DW_AT_producer
init|=
literal|0x25
block|,
name|DW_AT_prototyped
init|=
literal|0x27
block|,
name|DW_AT_return_addr
init|=
literal|0x2a
block|,
name|DW_AT_start_scope
init|=
literal|0x2c
block|,
name|DW_AT_stride_size
init|=
literal|0x2e
block|,
name|DW_AT_upper_bound
init|=
literal|0x2f
block|,
name|DW_AT_abstract_origin
init|=
literal|0x31
block|,
name|DW_AT_accessibility
init|=
literal|0x32
block|,
name|DW_AT_address_class
init|=
literal|0x33
block|,
name|DW_AT_artificial
init|=
literal|0x34
block|,
name|DW_AT_base_types
init|=
literal|0x35
block|,
name|DW_AT_calling_convention
init|=
literal|0x36
block|,
name|DW_AT_count
init|=
literal|0x37
block|,
name|DW_AT_data_member_location
init|=
literal|0x38
block|,
name|DW_AT_decl_column
init|=
literal|0x39
block|,
name|DW_AT_decl_file
init|=
literal|0x3a
block|,
name|DW_AT_decl_line
init|=
literal|0x3b
block|,
name|DW_AT_declaration
init|=
literal|0x3c
block|,
name|DW_AT_discr_list
init|=
literal|0x3d
block|,
name|DW_AT_encoding
init|=
literal|0x3e
block|,
name|DW_AT_external
init|=
literal|0x3f
block|,
name|DW_AT_frame_base
init|=
literal|0x40
block|,
name|DW_AT_friend
init|=
literal|0x41
block|,
name|DW_AT_identifier_case
init|=
literal|0x42
block|,
name|DW_AT_macro_info
init|=
literal|0x43
block|,
name|DW_AT_namelist_items
init|=
literal|0x44
block|,
name|DW_AT_priority
init|=
literal|0x45
block|,
name|DW_AT_segment
init|=
literal|0x46
block|,
name|DW_AT_specification
init|=
literal|0x47
block|,
name|DW_AT_static_link
init|=
literal|0x48
block|,
name|DW_AT_type
init|=
literal|0x49
block|,
name|DW_AT_use_location
init|=
literal|0x4a
block|,
name|DW_AT_variable_parameter
init|=
literal|0x4b
block|,
name|DW_AT_virtuality
init|=
literal|0x4c
block|,
name|DW_AT_vtable_elem_location
init|=
literal|0x4d
block|,
comment|/* SGI/MIPS Extensions */
name|DW_AT_MIPS_fde
init|=
literal|0x2001
block|,
name|DW_AT_MIPS_loop_begin
init|=
literal|0x2002
block|,
name|DW_AT_MIPS_tail_loop_begin
init|=
literal|0x2003
block|,
name|DW_AT_MIPS_epilog_begin
init|=
literal|0x2004
block|,
name|DW_AT_MIPS_loop_unroll_factor
init|=
literal|0x2005
block|,
name|DW_AT_MIPS_software_pipeline_depth
init|=
literal|0x2006
block|,
name|DW_AT_MIPS_linkage_name
init|=
literal|0x2007
block|,
name|DW_AT_MIPS_stride
init|=
literal|0x2008
block|,
name|DW_AT_MIPS_abstract_name
init|=
literal|0x2009
block|,
name|DW_AT_MIPS_clone_origin
init|=
literal|0x200a
block|,
name|DW_AT_MIPS_has_inlines
init|=
literal|0x200b
block|,
comment|/* GNU extensions.  */
name|DW_AT_sf_names
init|=
literal|0x2101
block|,
name|DW_AT_src_info
init|=
literal|0x2102
block|,
name|DW_AT_mac_info
init|=
literal|0x2103
block|,
name|DW_AT_src_coords
init|=
literal|0x2104
block|,
name|DW_AT_body_begin
init|=
literal|0x2105
block|,
name|DW_AT_body_end
init|=
literal|0x2106
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DW_AT_lo_user
value|0x2000
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|DW_AT_hi_user
value|0x3ff0
end_define

begin_comment
comment|/* implementation-defined range end */
end_comment

begin_comment
comment|/* Location atom names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_location_atom
block|{
name|DW_OP_addr
init|=
literal|0x03
block|,
name|DW_OP_deref
init|=
literal|0x06
block|,
name|DW_OP_const1u
init|=
literal|0x08
block|,
name|DW_OP_const1s
init|=
literal|0x09
block|,
name|DW_OP_const2u
init|=
literal|0x0a
block|,
name|DW_OP_const2s
init|=
literal|0x0b
block|,
name|DW_OP_const4u
init|=
literal|0x0c
block|,
name|DW_OP_const4s
init|=
literal|0x0d
block|,
name|DW_OP_const8u
init|=
literal|0x0e
block|,
name|DW_OP_const8s
init|=
literal|0x0f
block|,
name|DW_OP_constu
init|=
literal|0x10
block|,
name|DW_OP_consts
init|=
literal|0x11
block|,
name|DW_OP_dup
init|=
literal|0x12
block|,
name|DW_OP_drop
init|=
literal|0x13
block|,
name|DW_OP_over
init|=
literal|0x14
block|,
name|DW_OP_pick
init|=
literal|0x15
block|,
name|DW_OP_swap
init|=
literal|0x16
block|,
name|DW_OP_rot
init|=
literal|0x17
block|,
name|DW_OP_xderef
init|=
literal|0x18
block|,
name|DW_OP_abs
init|=
literal|0x19
block|,
name|DW_OP_and
init|=
literal|0x1a
block|,
name|DW_OP_div
init|=
literal|0x1b
block|,
name|DW_OP_minus
init|=
literal|0x1c
block|,
name|DW_OP_mod
init|=
literal|0x1d
block|,
name|DW_OP_mul
init|=
literal|0x1e
block|,
name|DW_OP_neg
init|=
literal|0x1f
block|,
name|DW_OP_not
init|=
literal|0x20
block|,
name|DW_OP_or
init|=
literal|0x21
block|,
name|DW_OP_plus
init|=
literal|0x22
block|,
name|DW_OP_plus_uconst
init|=
literal|0x23
block|,
name|DW_OP_shl
init|=
literal|0x24
block|,
name|DW_OP_shr
init|=
literal|0x25
block|,
name|DW_OP_shra
init|=
literal|0x26
block|,
name|DW_OP_xor
init|=
literal|0x27
block|,
name|DW_OP_bra
init|=
literal|0x28
block|,
name|DW_OP_eq
init|=
literal|0x29
block|,
name|DW_OP_ge
init|=
literal|0x2a
block|,
name|DW_OP_gt
init|=
literal|0x2b
block|,
name|DW_OP_le
init|=
literal|0x2c
block|,
name|DW_OP_lt
init|=
literal|0x2d
block|,
name|DW_OP_ne
init|=
literal|0x2e
block|,
name|DW_OP_skip
init|=
literal|0x2f
block|,
name|DW_OP_lit0
init|=
literal|0x30
block|,
name|DW_OP_lit1
init|=
literal|0x31
block|,
name|DW_OP_lit2
init|=
literal|0x32
block|,
name|DW_OP_lit3
init|=
literal|0x33
block|,
name|DW_OP_lit4
init|=
literal|0x34
block|,
name|DW_OP_lit5
init|=
literal|0x35
block|,
name|DW_OP_lit6
init|=
literal|0x36
block|,
name|DW_OP_lit7
init|=
literal|0x37
block|,
name|DW_OP_lit8
init|=
literal|0x38
block|,
name|DW_OP_lit9
init|=
literal|0x39
block|,
name|DW_OP_lit10
init|=
literal|0x3a
block|,
name|DW_OP_lit11
init|=
literal|0x3b
block|,
name|DW_OP_lit12
init|=
literal|0x3c
block|,
name|DW_OP_lit13
init|=
literal|0x3d
block|,
name|DW_OP_lit14
init|=
literal|0x3e
block|,
name|DW_OP_lit15
init|=
literal|0x3f
block|,
name|DW_OP_lit16
init|=
literal|0x40
block|,
name|DW_OP_lit17
init|=
literal|0x41
block|,
name|DW_OP_lit18
init|=
literal|0x42
block|,
name|DW_OP_lit19
init|=
literal|0x43
block|,
name|DW_OP_lit20
init|=
literal|0x44
block|,
name|DW_OP_lit21
init|=
literal|0x45
block|,
name|DW_OP_lit22
init|=
literal|0x46
block|,
name|DW_OP_lit23
init|=
literal|0x47
block|,
name|DW_OP_lit24
init|=
literal|0x48
block|,
name|DW_OP_lit25
init|=
literal|0x49
block|,
name|DW_OP_lit26
init|=
literal|0x4a
block|,
name|DW_OP_lit27
init|=
literal|0x4b
block|,
name|DW_OP_lit28
init|=
literal|0x4c
block|,
name|DW_OP_lit29
init|=
literal|0x4d
block|,
name|DW_OP_lit30
init|=
literal|0x4e
block|,
name|DW_OP_lit31
init|=
literal|0x4f
block|,
name|DW_OP_reg0
init|=
literal|0x50
block|,
name|DW_OP_reg1
init|=
literal|0x51
block|,
name|DW_OP_reg2
init|=
literal|0x52
block|,
name|DW_OP_reg3
init|=
literal|0x53
block|,
name|DW_OP_reg4
init|=
literal|0x54
block|,
name|DW_OP_reg5
init|=
literal|0x55
block|,
name|DW_OP_reg6
init|=
literal|0x56
block|,
name|DW_OP_reg7
init|=
literal|0x57
block|,
name|DW_OP_reg8
init|=
literal|0x58
block|,
name|DW_OP_reg9
init|=
literal|0x59
block|,
name|DW_OP_reg10
init|=
literal|0x5a
block|,
name|DW_OP_reg11
init|=
literal|0x5b
block|,
name|DW_OP_reg12
init|=
literal|0x5c
block|,
name|DW_OP_reg13
init|=
literal|0x5d
block|,
name|DW_OP_reg14
init|=
literal|0x5e
block|,
name|DW_OP_reg15
init|=
literal|0x5f
block|,
name|DW_OP_reg16
init|=
literal|0x60
block|,
name|DW_OP_reg17
init|=
literal|0x61
block|,
name|DW_OP_reg18
init|=
literal|0x62
block|,
name|DW_OP_reg19
init|=
literal|0x63
block|,
name|DW_OP_reg20
init|=
literal|0x64
block|,
name|DW_OP_reg21
init|=
literal|0x65
block|,
name|DW_OP_reg22
init|=
literal|0x66
block|,
name|DW_OP_reg23
init|=
literal|0x67
block|,
name|DW_OP_reg24
init|=
literal|0x68
block|,
name|DW_OP_reg25
init|=
literal|0x69
block|,
name|DW_OP_reg26
init|=
literal|0x6a
block|,
name|DW_OP_reg27
init|=
literal|0x6b
block|,
name|DW_OP_reg28
init|=
literal|0x6c
block|,
name|DW_OP_reg29
init|=
literal|0x6d
block|,
name|DW_OP_reg30
init|=
literal|0x6e
block|,
name|DW_OP_reg31
init|=
literal|0x6f
block|,
name|DW_OP_breg0
init|=
literal|0x70
block|,
name|DW_OP_breg1
init|=
literal|0x71
block|,
name|DW_OP_breg2
init|=
literal|0x72
block|,
name|DW_OP_breg3
init|=
literal|0x73
block|,
name|DW_OP_breg4
init|=
literal|0x74
block|,
name|DW_OP_breg5
init|=
literal|0x75
block|,
name|DW_OP_breg6
init|=
literal|0x76
block|,
name|DW_OP_breg7
init|=
literal|0x77
block|,
name|DW_OP_breg8
init|=
literal|0x78
block|,
name|DW_OP_breg9
init|=
literal|0x79
block|,
name|DW_OP_breg10
init|=
literal|0x7a
block|,
name|DW_OP_breg11
init|=
literal|0x7b
block|,
name|DW_OP_breg12
init|=
literal|0x7c
block|,
name|DW_OP_breg13
init|=
literal|0x7d
block|,
name|DW_OP_breg14
init|=
literal|0x7e
block|,
name|DW_OP_breg15
init|=
literal|0x7f
block|,
name|DW_OP_breg16
init|=
literal|0x80
block|,
name|DW_OP_breg17
init|=
literal|0x81
block|,
name|DW_OP_breg18
init|=
literal|0x82
block|,
name|DW_OP_breg19
init|=
literal|0x83
block|,
name|DW_OP_breg20
init|=
literal|0x84
block|,
name|DW_OP_breg21
init|=
literal|0x85
block|,
name|DW_OP_breg22
init|=
literal|0x86
block|,
name|DW_OP_breg23
init|=
literal|0x87
block|,
name|DW_OP_breg24
init|=
literal|0x88
block|,
name|DW_OP_breg25
init|=
literal|0x89
block|,
name|DW_OP_breg26
init|=
literal|0x8a
block|,
name|DW_OP_breg27
init|=
literal|0x8b
block|,
name|DW_OP_breg28
init|=
literal|0x8c
block|,
name|DW_OP_breg29
init|=
literal|0x8d
block|,
name|DW_OP_breg30
init|=
literal|0x8e
block|,
name|DW_OP_breg31
init|=
literal|0x8f
block|,
name|DW_OP_regx
init|=
literal|0x90
block|,
name|DW_OP_fbreg
init|=
literal|0x91
block|,
name|DW_OP_bregx
init|=
literal|0x92
block|,
name|DW_OP_piece
init|=
literal|0x93
block|,
name|DW_OP_deref_size
init|=
literal|0x94
block|,
name|DW_OP_xderef_size
init|=
literal|0x95
block|,
name|DW_OP_nop
init|=
literal|0x96
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DW_OP_lo_user
value|0x80
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|DW_OP_hi_user
value|0xff
end_define

begin_comment
comment|/* implementation-defined range end */
end_comment

begin_comment
comment|/* Type encodings.  */
end_comment

begin_enum
enum|enum
name|dwarf_type
block|{
name|DW_ATE_void
init|=
literal|0x0
block|,
name|DW_ATE_address
init|=
literal|0x1
block|,
name|DW_ATE_boolean
init|=
literal|0x2
block|,
name|DW_ATE_complex_float
init|=
literal|0x3
block|,
name|DW_ATE_float
init|=
literal|0x4
block|,
name|DW_ATE_signed
init|=
literal|0x5
block|,
name|DW_ATE_signed_char
init|=
literal|0x6
block|,
name|DW_ATE_unsigned
init|=
literal|0x7
block|,
name|DW_ATE_unsigned_char
init|=
literal|0x8
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DW_ATE_lo_user
value|0x80
end_define

begin_define
define|#
directive|define
name|DW_ATE_hi_user
value|0xff
end_define

begin_comment
comment|/* Array ordering names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_array_dim_ordering
block|{
name|DW_ORD_row_major
init|=
literal|0
block|,
name|DW_ORD_col_major
init|=
literal|1
block|}
enum|;
end_enum

begin_comment
comment|/* access attribute */
end_comment

begin_enum
enum|enum
name|dwarf_access_attribute
block|{
name|DW_ACCESS_public
init|=
literal|1
block|,
name|DW_ACCESS_protected
init|=
literal|2
block|,
name|DW_ACCESS_private
init|=
literal|3
block|}
enum|;
end_enum

begin_comment
comment|/* visibility */
end_comment

begin_enum
enum|enum
name|dwarf_visibility_attribute
block|{
name|DW_VIS_local
init|=
literal|1
block|,
name|DW_VIS_exported
init|=
literal|2
block|,
name|DW_VIS_qualified
init|=
literal|3
block|}
enum|;
end_enum

begin_comment
comment|/* virtuality */
end_comment

begin_enum
enum|enum
name|dwarf_virtuality_attribute
block|{
name|DW_VIRTUALITY_none
init|=
literal|0
block|,
name|DW_VIRTUALITY_virtual
init|=
literal|1
block|,
name|DW_VIRTUALITY_pure_virtual
init|=
literal|2
block|}
enum|;
end_enum

begin_comment
comment|/* case sensitivity */
end_comment

begin_enum
enum|enum
name|dwarf_id_case
block|{
name|DW_ID_case_sensitive
init|=
literal|0
block|,
name|DW_ID_up_case
init|=
literal|1
block|,
name|DW_ID_down_case
init|=
literal|2
block|,
name|DW_ID_case_insensitive
init|=
literal|3
block|}
enum|;
end_enum

begin_comment
comment|/* calling convention */
end_comment

begin_enum
enum|enum
name|dwarf_calling_convention
block|{
name|DW_CC_normal
init|=
literal|0x1
block|,
name|DW_CC_program
init|=
literal|0x2
block|,
name|DW_CC_nocall
init|=
literal|0x3
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DW_CC_lo_user
value|0x40
end_define

begin_define
define|#
directive|define
name|DW_CC_hi_user
value|0xff
end_define

begin_comment
comment|/* inline attribute */
end_comment

begin_enum
enum|enum
name|dwarf_inline_attribute
block|{
name|DW_INL_not_inlined
init|=
literal|0
block|,
name|DW_INL_inlined
init|=
literal|1
block|,
name|DW_INL_declared_not_inlined
init|=
literal|2
block|,
name|DW_INL_declared_inlined
init|=
literal|3
block|}
enum|;
end_enum

begin_comment
comment|/* descriminant lists */
end_comment

begin_enum
enum|enum
name|dwarf_descrim_list
block|{
name|DW_DSC_label
init|=
literal|0
block|,
name|DW_DSC_range
init|=
literal|1
block|}
enum|;
end_enum

begin_comment
comment|/* line number opcodes */
end_comment

begin_enum
enum|enum
name|dwarf_line_number_ops
block|{
name|DW_LNS_extended_op
init|=
literal|0
block|,
name|DW_LNS_copy
init|=
literal|1
block|,
name|DW_LNS_advance_pc
init|=
literal|2
block|,
name|DW_LNS_advance_line
init|=
literal|3
block|,
name|DW_LNS_set_file
init|=
literal|4
block|,
name|DW_LNS_set_column
init|=
literal|5
block|,
name|DW_LNS_negate_stmt
init|=
literal|6
block|,
name|DW_LNS_set_basic_block
init|=
literal|7
block|,
name|DW_LNS_const_add_pc
init|=
literal|8
block|,
name|DW_LNS_fixed_advance_pc
init|=
literal|9
block|}
enum|;
end_enum

begin_comment
comment|/* line number extended opcodes */
end_comment

begin_enum
enum|enum
name|dwarf_line_number_x_ops
block|{
name|DW_LNE_end_sequence
init|=
literal|1
block|,
name|DW_LNE_set_address
init|=
literal|2
block|,
name|DW_LNE_define_file
init|=
literal|3
block|}
enum|;
end_enum

begin_comment
comment|/* call frame information */
end_comment

begin_enum
enum|enum
name|dwarf_call_frame_info
block|{
name|DW_CFA_advance_loc
init|=
literal|0x40
block|,
name|DW_CFA_offset
init|=
literal|0x80
block|,
name|DW_CFA_restore
init|=
literal|0xc0
block|,
name|DW_CFA_nop
init|=
literal|0x00
block|,
name|DW_CFA_set_loc
init|=
literal|0x01
block|,
name|DW_CFA_advance_loc1
init|=
literal|0x02
block|,
name|DW_CFA_advance_loc2
init|=
literal|0x03
block|,
name|DW_CFA_advance_loc4
init|=
literal|0x04
block|,
name|DW_CFA_offset_extended
init|=
literal|0x05
block|,
name|DW_CFA_restore_extended
init|=
literal|0x06
block|,
name|DW_CFA_undefined
init|=
literal|0x07
block|,
name|DW_CFA_same_value
init|=
literal|0x08
block|,
name|DW_CFA_register
init|=
literal|0x09
block|,
name|DW_CFA_remember_state
init|=
literal|0x0a
block|,
name|DW_CFA_restore_state
init|=
literal|0x0b
block|,
name|DW_CFA_def_cfa
init|=
literal|0x0c
block|,
name|DW_CFA_def_cfa_register
init|=
literal|0x0d
block|,
name|DW_CFA_def_cfa_offset
init|=
literal|0x0e
block|,
comment|/* SGI/MIPS specific */
name|DW_CFA_MIPS_advance_loc8
init|=
literal|0x1d
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DW_CIE_ID
value|0xffffffff
end_define

begin_define
define|#
directive|define
name|DW_CIE_VERSION
value|1
end_define

begin_define
define|#
directive|define
name|DW_CFA_extended
value|0
end_define

begin_define
define|#
directive|define
name|DW_CFA_low_user
value|0x1c
end_define

begin_define
define|#
directive|define
name|DW_CFA_high_user
value|0x3f
end_define

begin_define
define|#
directive|define
name|DW_CHILDREN_no
value|0x00
end_define

begin_define
define|#
directive|define
name|DW_CHILDREN_yes
value|0x01
end_define

begin_define
define|#
directive|define
name|DW_ADDR_none
value|0
end_define

begin_comment
comment|/* Source language names and codes.  */
end_comment

begin_enum
enum|enum
name|dwarf_source_language
block|{
name|DW_LANG_C89
init|=
literal|0x0001
block|,
name|DW_LANG_C
init|=
literal|0x0002
block|,
name|DW_LANG_Ada83
init|=
literal|0x0003
block|,
name|DW_LANG_C_plus_plus
init|=
literal|0x0004
block|,
name|DW_LANG_Cobol74
init|=
literal|0x0005
block|,
name|DW_LANG_Cobol85
init|=
literal|0x0006
block|,
name|DW_LANG_Fortran77
init|=
literal|0x0007
block|,
name|DW_LANG_Fortran90
init|=
literal|0x0008
block|,
name|DW_LANG_Pascal83
init|=
literal|0x0009
block|,
name|DW_LANG_Modula2
init|=
literal|0x000a
block|,
name|DW_LANG_Mips_Assembler
init|=
literal|0x8001
block|}
enum|;
end_enum

begin_define
define|#
directive|define
name|DW_LANG_lo_user
value|0x8000
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_define
define|#
directive|define
name|DW_LANG_hi_user
value|0xffff
end_define

begin_comment
comment|/* implementation-defined range start */
end_comment

begin_comment
comment|/* Names and codes for macro information.  */
end_comment

begin_enum
enum|enum
name|dwarf_macinfo_record_type
block|{
name|DW_MACINFO_define
init|=
literal|1
block|,
name|DW_MACINFO_undef
init|=
literal|2
block|,
name|DW_MACINFO_start_file
init|=
literal|3
block|,
name|DW_MACINFO_end_file
init|=
literal|4
block|,
name|DW_MACINFO_vendor_ext
init|=
literal|255
block|}
enum|;
end_enum

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _ELF_DWARF2_H */
end_comment

end_unit

