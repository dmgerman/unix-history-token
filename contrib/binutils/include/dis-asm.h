begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Interface between the opcode library and its callers.     Copyright 2001, 2002, 2003 Free Software Foundation, Inc.        This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330,    Boston, MA 02111-1307, USA.        Written by Cygnus Support, 1993.     The opcode library (libopcodes.a) provides instruction decoders for    a large variety of instruction sets, callable with an identical    interface, for making instruction-processing programs more independent    of the instruction set being processed.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DIS_ASM_H
end_ifndef

begin_define
define|#
directive|define
name|DIS_ASM_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<stdio.h>
include|#
directive|include
file|"bfd.h"
typedef|typedef
name|int
function_decl|(
modifier|*
name|fprintf_ftype
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
enum|enum
name|dis_insn_type
block|{
name|dis_noninsn
block|,
comment|/* Not a valid instruction */
name|dis_nonbranch
block|,
comment|/* Not a branch instruction */
name|dis_branch
block|,
comment|/* Unconditional branch */
name|dis_condbranch
block|,
comment|/* Conditional branch */
name|dis_jsr
block|,
comment|/* Jump to subroutine */
name|dis_condjsr
block|,
comment|/* Conditional jump to subroutine */
name|dis_dref
block|,
comment|/* Data reference instruction */
name|dis_dref2
comment|/* Two data references in instruction */
block|}
enum|;
comment|/* This struct is passed into the instruction decoding routine,     and is passed back out into each callback.  The various fields are used    for conveying information from your main routine into your callbacks,    for passing information into the instruction decoders (such as the    addresses of the callback functions), or for passing information    back from the instruction decoders to their callers.     It must be initialized before it is first passed; this can be done    by hand, or using one of the initialization macros below.  */
typedef|typedef
struct|struct
name|disassemble_info
block|{
name|fprintf_ftype
name|fprintf_func
decl_stmt|;
name|void
modifier|*
name|stream
decl_stmt|;
name|void
modifier|*
name|application_data
decl_stmt|;
comment|/* Target description.  We could replace this with a pointer to the bfd,      but that would require one.  There currently isn't any such requirement      so to avoid introducing one we record these explicitly.  */
comment|/* The bfd_flavour.  This can be bfd_target_unknown_flavour.  */
name|enum
name|bfd_flavour
name|flavour
decl_stmt|;
comment|/* The bfd_arch value.  */
name|enum
name|bfd_architecture
name|arch
decl_stmt|;
comment|/* The bfd_mach value.  */
name|unsigned
name|long
name|mach
decl_stmt|;
comment|/* Endianness (for bi-endian cpus).  Mono-endian cpus can ignore this.  */
name|enum
name|bfd_endian
name|endian
decl_stmt|;
comment|/* An arch/mach-specific bitmask of selected instruction subsets, mainly      for processors with run-time-switchable instruction sets.  The default,      zero, means that there is no constraint.  CGEN-based opcodes ports      may use ISA_foo masks.  */
name|unsigned
name|long
name|insn_sets
decl_stmt|;
comment|/* Some targets need information about the current section to accurately      display insns.  If this is NULL, the target disassembler function      will have to make its best guess.  */
name|asection
modifier|*
name|section
decl_stmt|;
comment|/* An array of pointers to symbols either at the location being disassembled      or at the start of the function being disassembled.  The array is sorted      so that the first symbol is intended to be the one used.  The others are      present for any misc. purposes.  This is not set reliably, but if it is      not NULL, it is correct.  */
name|asymbol
modifier|*
modifier|*
name|symbols
decl_stmt|;
comment|/* Number of symbols in array.  */
name|int
name|num_symbols
decl_stmt|;
comment|/* For use by the disassembler.      The top 16 bits are reserved for public use (and are documented here).      The bottom 16 bits are for the internal use of the disassembler.  */
name|unsigned
name|long
name|flags
decl_stmt|;
define|#
directive|define
name|INSN_HAS_RELOC
value|0x80000000
name|void
modifier|*
name|private_data
decl_stmt|;
comment|/* Function used to get bytes to disassemble.  MEMADDR is the      address of the stuff to be disassembled, MYADDR is the address to      put the bytes in, and LENGTH is the number of bytes to read.      INFO is a pointer to this struct.      Returns an errno value or 0 for success.  */
name|int
function_decl|(
modifier|*
name|read_memory_func
function_decl|)
parameter_list|(
name|bfd_vma
name|memaddr
parameter_list|,
name|bfd_byte
modifier|*
name|myaddr
parameter_list|,
name|unsigned
name|int
name|length
parameter_list|,
name|struct
name|disassemble_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* Function which should be called if we get an error that we can't      recover from.  STATUS is the errno value from read_memory_func and      MEMADDR is the address that we were trying to read.  INFO is a      pointer to this struct.  */
name|void
function_decl|(
modifier|*
name|memory_error_func
function_decl|)
parameter_list|(
name|int
name|status
parameter_list|,
name|bfd_vma
name|memaddr
parameter_list|,
name|struct
name|disassemble_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* Function called to print ADDR.  */
name|void
function_decl|(
modifier|*
name|print_address_func
function_decl|)
parameter_list|(
name|bfd_vma
name|addr
parameter_list|,
name|struct
name|disassemble_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* Function called to determine if there is a symbol at the given ADDR.      If there is, the function returns 1, otherwise it returns 0.      This is used by ports which support an overlay manager where      the overlay number is held in the top part of an address.  In      some circumstances we want to include the overlay number in the      address, (normally because there is a symbol associated with      that address), but sometimes we want to mask out the overlay bits.  */
name|int
function_decl|(
modifier|*
name|symbol_at_address_func
function_decl|)
parameter_list|(
name|bfd_vma
name|addr
parameter_list|,
name|struct
name|disassemble_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* Function called to check if a SYMBOL is can be displayed to the user.      This is used by some ports that want to hide special symbols when      displaying debugging outout.  */
name|bfd_boolean
function_decl|(
modifier|*
name|symbol_is_valid
function_decl|)
parameter_list|(
name|asymbol
modifier|*
parameter_list|,
name|struct
name|disassemble_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* These are for buffer_read_memory.  */
name|bfd_byte
modifier|*
name|buffer
decl_stmt|;
name|bfd_vma
name|buffer_vma
decl_stmt|;
name|unsigned
name|int
name|buffer_length
decl_stmt|;
comment|/* This variable may be set by the instruction decoder.  It suggests       the number of bytes objdump should display on a single line.  If       the instruction decoder sets this, it should always set it to       the same value in order to get reasonable looking output.  */
name|int
name|bytes_per_line
decl_stmt|;
comment|/* The next two variables control the way objdump displays the raw data.  */
comment|/* For example, if bytes_per_line is 8 and bytes_per_chunk is 4, the */
comment|/* output will look like this:      00:   00000000 00000000      with the chunks displayed according to "display_endian". */
name|int
name|bytes_per_chunk
decl_stmt|;
name|enum
name|bfd_endian
name|display_endian
decl_stmt|;
comment|/* Number of octets per incremented target address       Normally one, but some DSPs have byte sizes of 16 or 32 bits.  */
name|unsigned
name|int
name|octets_per_byte
decl_stmt|;
comment|/* Results from instruction decoders.  Not all decoders yet support      this information.  This info is set each time an instruction is      decoded, and is only valid for the last such instruction.       To determine whether this decoder supports this information, set      insn_info_valid to 0, decode an instruction, then check it.  */
name|char
name|insn_info_valid
decl_stmt|;
comment|/* Branch info has been set. */
name|char
name|branch_delay_insns
decl_stmt|;
comment|/* How many sequential insn's will run before 				   a branch takes effect.  (0 = normal) */
name|char
name|data_size
decl_stmt|;
comment|/* Size of data reference in insn, in bytes */
name|enum
name|dis_insn_type
name|insn_type
decl_stmt|;
comment|/* Type of instruction */
name|bfd_vma
name|target
decl_stmt|;
comment|/* Target address of branch or dref, if known; 				   zero if unknown.  */
name|bfd_vma
name|target2
decl_stmt|;
comment|/* Second target address for dref2 */
comment|/* Command line options specific to the target disassembler.  */
name|char
modifier|*
name|disassembler_options
decl_stmt|;
block|}
name|disassemble_info
typedef|;
comment|/* Standard disassemblers.  Disassemble one instruction at the given    target address.  Return number of octets processed.  */
typedef|typedef
name|int
function_decl|(
modifier|*
name|disassembler_ftype
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_big_mips
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_little_mips
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_i386
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_i386_att
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_i386_intel
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_ia64
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_i370
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_m68hc11
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_m68hc12
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_m68k
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_z8001
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_z8002
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_h8300
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_h8300h
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_h8300s
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_h8500
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_alpha
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_big_arm
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_little_arm
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_sparc
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_big_a29k
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_little_a29k
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_avr
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_d10v
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_d30v
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_dlx
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_fr30
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_hppa
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_i860
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_i960
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_ip2k
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_m32r
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_m88k
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_mcore
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_mmix
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_mn10200
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_mn10300
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_msp430
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_ns32k
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_openrisc
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_big_or32
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_little_or32
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_pdp11
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_pj
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_big_powerpc
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_little_powerpc
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_rs6000
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_s390
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_sh
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_tic30
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_tic4x
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_tic54x
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_tic80
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_v850
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_vax
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_w65
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_xstormy16
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_xtensa
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_sh64
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_sh64x_media
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_frv
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|print_insn_iq2000
parameter_list|(
name|bfd_vma
parameter_list|,
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|disassembler_ftype
name|arc_get_disassembler
parameter_list|(
name|void
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|disassembler_ftype
name|cris_get_disassembler
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|print_mips_disassembler_options
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|print_ppc_disassembler_options
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|print_arm_disassembler_options
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|parse_arm_disassembler_option
parameter_list|(
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|get_arm_regname_num_options
parameter_list|(
name|void
parameter_list|)
function_decl|;
specifier|extern
name|int
name|set_arm_regname_option
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|get_arm_regnames
parameter_list|(
name|int
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|arm_symbol_is_valid
parameter_list|(
name|asymbol
modifier|*
parameter_list|,
name|struct
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Fetch the disassembler for a given BFD, if that support is available.  */
specifier|extern
name|disassembler_ftype
name|disassembler
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Amend the disassemble_info structure as necessary for the target architecture.    Should only be called after initialising the info->arch field.  */
specifier|extern
name|void
name|disassemble_init_for_target
parameter_list|(
name|struct
name|disassemble_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* Document any target specific options available from the disassembler.  */
specifier|extern
name|void
name|disassembler_usage
parameter_list|(
name|FILE
modifier|*
parameter_list|)
function_decl|;
comment|/* This block of definitions is for particular callers who read instructions    into a buffer before calling the instruction decoder.  */
comment|/* Here is a function which callers may wish to use for read_memory_func.    It gets bytes from a buffer.  */
specifier|extern
name|int
name|buffer_read_memory
parameter_list|(
name|bfd_vma
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|struct
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
comment|/* This function goes with buffer_read_memory.    It prints a message using info->fprintf_func and info->stream.  */
specifier|extern
name|void
name|perror_memory
parameter_list|(
name|int
parameter_list|,
name|bfd_vma
parameter_list|,
name|struct
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Just print the address in hex.  This is included for completeness even    though both GDB and objdump provide their own (to print symbolic    addresses).  */
specifier|extern
name|void
name|generic_print_address
parameter_list|(
name|bfd_vma
parameter_list|,
name|struct
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Always true.  */
specifier|extern
name|int
name|generic_symbol_at_address
parameter_list|(
name|bfd_vma
parameter_list|,
name|struct
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Also always true.  */
specifier|extern
name|bfd_boolean
name|generic_symbol_is_valid
parameter_list|(
name|asymbol
modifier|*
parameter_list|,
name|struct
name|disassemble_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Method to initialize a disassemble_info struct.  This should be    called by all applications creating such a struct.  */
specifier|extern
name|void
name|init_disassemble_info
parameter_list|(
name|struct
name|disassemble_info
modifier|*
name|info
parameter_list|,
name|void
modifier|*
name|stream
parameter_list|,
name|fprintf_ftype
name|fprintf_func
parameter_list|)
function_decl|;
comment|/* For compatibility with existing code.  */
define|#
directive|define
name|INIT_DISASSEMBLE_INFO
parameter_list|(
name|INFO
parameter_list|,
name|STREAM
parameter_list|,
name|FPRINTF_FUNC
parameter_list|)
define|\
value|init_disassemble_info (&(INFO), (STREAM), (fprintf_ftype) (FPRINTF_FUNC))
define|#
directive|define
name|INIT_DISASSEMBLE_INFO_NO_ARCH
parameter_list|(
name|INFO
parameter_list|,
name|STREAM
parameter_list|,
name|FPRINTF_FUNC
parameter_list|)
define|\
value|init_disassemble_info (&(INFO), (STREAM), (fprintf_ftype) (FPRINTF_FUNC))
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ! defined (DIS_ASM_H) */
end_comment

end_unit

