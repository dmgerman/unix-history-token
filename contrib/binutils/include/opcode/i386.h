begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* opcode/i386.h -- Intel 80386 opcode table    Copyright 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999,    2000, 2001, 2002, 2003, 2004    Free Software Foundation, Inc.  This file is part of GAS, the GNU Assembler, and GDB, the GNU Debugger.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* The SystemV/386 SVR3.2 assembler, and probably all AT&T derived    ix86 Unix assemblers, generate floating point instructions with    reversed source and destination registers in certain cases.    Unfortunately, gcc and possibly many other programs use this    reversed syntax, so we're stuck with it.     eg. `fsub %st(3),%st' results in st = st - st(3) as expected, but    `fsub %st,%st(3)' results in st(3) = st - st(3), rather than    the expected st(3) = st(3) - st     This happens with all the non-commutative arithmetic floating point    operations with two register operands, where the source register is    %st, and destination register is %st(i).  See FloatDR below.     The affected opcode map is dceX, dcfX, deeX, defX.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SYSV386_COMPAT
end_ifndef

begin_comment
comment|/* Set non-zero for broken, compatible instructions.  Set to zero for    non-broken opcodes at your peril.  gcc generates SystemV/386    compatible instructions.  */
end_comment

begin_define
define|#
directive|define
name|SYSV386_COMPAT
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|OLDGCC_COMPAT
end_ifndef

begin_comment
comment|/* Set non-zero to cater for old (<= 2.8.1) versions of gcc that could    generate nonsense fsubp, fsubrp, fdivp and fdivrp with operands    reversed.  */
end_comment

begin_define
define|#
directive|define
name|OLDGCC_COMPAT
value|SYSV386_COMPAT
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|static
specifier|const
name|template
name|i386_optab
index|[]
init|=
block|{
define|#
directive|define
name|X
value|None
define|#
directive|define
name|NoSuf
value|(No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|b_Suf
value|(No_wSuf|No_lSuf|No_sSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|w_Suf
value|(No_bSuf|No_lSuf|No_sSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|l_Suf
value|(No_bSuf|No_wSuf|No_sSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|q_Suf
value|(No_bSuf|No_wSuf|No_sSuf|No_lSuf|No_xSuf)
define|#
directive|define
name|x_Suf
value|(No_bSuf|No_wSuf|No_sSuf|No_lSuf|No_qSuf)
define|#
directive|define
name|bw_Suf
value|(No_lSuf|No_sSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|bl_Suf
value|(No_wSuf|No_sSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|wl_Suf
value|(No_bSuf|No_sSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|wlq_Suf
value|(No_bSuf|No_sSuf|No_xSuf)
define|#
directive|define
name|lq_Suf
value|(No_bSuf|No_wSuf|No_sSuf|No_xSuf)
define|#
directive|define
name|wq_Suf
value|(No_bSuf|No_lSuf|No_sSuf|No_xSuf)
define|#
directive|define
name|sl_Suf
value|(No_bSuf|No_wSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|sldx_Suf
value|(No_bSuf|No_wSuf|No_qSuf)
define|#
directive|define
name|bwl_Suf
value|(No_sSuf|No_xSuf|No_qSuf)
define|#
directive|define
name|bwlq_Suf
value|(No_sSuf|No_xSuf)
define|#
directive|define
name|FP
value|(NoSuf|IgnoreSize)
define|#
directive|define
name|l_FP
value|(l_Suf|IgnoreSize)
define|#
directive|define
name|x_FP
value|(x_Suf|IgnoreSize)
define|#
directive|define
name|sl_FP
value|(sl_Suf|IgnoreSize)
if|#
directive|if
name|SYSV386_COMPAT
comment|/* Someone forgot that the FloatR bit reverses the operation when not    equal to the FloatD bit.  ie. Changing only FloatD results in the    destination being swapped *and* the direction being reversed.  */
define|#
directive|define
name|FloatDR
value|FloatD
else|#
directive|else
define|#
directive|define
name|FloatDR
value|(FloatD|FloatR)
endif|#
directive|endif
comment|/* Move instructions.  */
define|#
directive|define
name|MOV_AX_DISP32
value|0xa0
comment|/* In the 64bit mode the short form mov immediate is redefined to have    64bit displacement value.  */
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0xa0
block|,
name|X
block|,
name|CpuNo64
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
block|,
block|{
name|Disp16
operator||
name|Disp32
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x88
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
comment|/* In the 64bit mode the short form mov immediate is redefined to have    64bit displacement value.  */
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0xb0
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
operator||
name|ShortForm
block|,
block|{
name|EncImm
block|,
name|Reg8
operator||
name|Reg16
operator||
name|Reg32
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0xc6
block|,
literal|0
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0xb0
block|,
name|X
block|,
name|Cpu64
block|,
name|q_Suf
operator||
name|W
operator||
name|ShortForm
block|,
block|{
name|Imm64
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
comment|/* The segment register moves accept WordReg so that a segment register    can be copied to a 32 bit register, and vice versa, without using a    size prefix.  When moving to a 32 bit register, the upper 16 bits    are set to an implementation defined value (on the Pentium Pro,    the implementation defined value is zero).  */
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x8c
block|,
name|X
block|,
literal|0
block|,
name|wl_Suf
operator||
name|Modrm
block|,
block|{
name|SReg2
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x8c
block|,
name|X
block|,
name|Cpu386
block|,
name|wl_Suf
operator||
name|Modrm
block|,
block|{
name|SReg3
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x8e
block|,
name|X
block|,
literal|0
block|,
name|wl_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|SReg2
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x8e
block|,
name|X
block|,
name|Cpu386
block|,
name|wl_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|SReg3
block|,
literal|0
block|}
block|}
block|,
comment|/* Move to/from control debug registers.  In the 16 or 32bit modes they are 32bit.  In the 64bit    mode they are 64bit.*/
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x0f20
block|,
name|X
block|,
name|Cpu386
operator||
name|CpuNo64
block|,
name|l_Suf
operator||
name|D
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Control
block|,
name|Reg32
operator||
name|InvMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x0f20
block|,
name|X
block|,
name|Cpu64
block|,
name|q_Suf
operator||
name|D
operator||
name|Modrm
operator||
name|IgnoreSize
operator||
name|NoRex64
block|,
block|{
name|Control
block|,
name|Reg64
operator||
name|InvMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x0f21
block|,
name|X
block|,
name|Cpu386
operator||
name|CpuNo64
block|,
name|l_Suf
operator||
name|D
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Debug
block|,
name|Reg32
operator||
name|InvMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x0f21
block|,
name|X
block|,
name|Cpu64
block|,
name|q_Suf
operator||
name|D
operator||
name|Modrm
operator||
name|IgnoreSize
operator||
name|NoRex64
block|,
block|{
name|Debug
block|,
name|Reg64
operator||
name|InvMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mov"
block|,
literal|2
block|,
literal|0x0f24
block|,
name|X
block|,
name|Cpu386
block|,
name|l_Suf
operator||
name|D
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Test
block|,
name|Reg32
operator||
name|InvMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movabs"
block|,
literal|2
block|,
literal|0xa0
block|,
name|X
block|,
name|Cpu64
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
block|,
block|{
name|Disp64
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movabs"
block|,
literal|2
block|,
literal|0xb0
block|,
name|X
block|,
name|Cpu64
block|,
name|q_Suf
operator||
name|W
operator||
name|ShortForm
block|,
block|{
name|Imm64
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
comment|/* Move with sign extend.  */
comment|/* "movsbl"& "movsbw" must not be unified into "movsb" to avoid    conflict with the "movs" string move instruction.  */
block|{
literal|"movsbl"
block|,
literal|2
block|,
literal|0x0fbe
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|Reg32
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsbw"
block|,
literal|2
block|,
literal|0x0fbe
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|Reg16
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movswl"
block|,
literal|2
block|,
literal|0x0fbf
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|Modrm
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
name|Reg32
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsbq"
block|,
literal|2
block|,
literal|0x0fbe
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movswq"
block|,
literal|2
block|,
literal|0x0fbf
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movslq"
block|,
literal|2
block|,
literal|0x63
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg32
operator||
name|WordMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax next 5 insns */
block|{
literal|"movsx"
block|,
literal|2
block|,
literal|0x0fbe
block|,
name|X
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsx"
block|,
literal|2
block|,
literal|0x0fbf
block|,
name|X
block|,
name|Cpu386
block|,
name|w_Suf
operator||
name|Modrm
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
name|Reg32
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsx"
block|,
literal|2
block|,
literal|0x0fbe
block|,
name|X
block|,
name|Cpu64
block|,
name|b_Suf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsx"
block|,
literal|2
block|,
literal|0x0fbf
block|,
name|X
block|,
name|Cpu64
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsx"
block|,
literal|2
block|,
literal|0x63
block|,
name|X
block|,
name|Cpu64
block|,
name|l_Suf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg32
operator||
name|WordMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
comment|/* Move with zero extend.  */
block|{
literal|"movzb"
block|,
literal|2
block|,
literal|0x0fb6
block|,
name|X
block|,
name|Cpu386
block|,
name|wl_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movzwl"
block|,
literal|2
block|,
literal|0x0fb7
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|Modrm
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
name|Reg32
block|,
literal|0
block|}
block|}
block|,
comment|/* These instructions are not particulary usefull, since the zero extend    32->64 is implicit, but we can encode them.  */
block|{
literal|"movzbq"
block|,
literal|2
block|,
literal|0x0fb6
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movzwq"
block|,
literal|2
block|,
literal|0x0fb7
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax next 4 insns */
block|{
literal|"movzx"
block|,
literal|2
block|,
literal|0x0fb6
block|,
name|X
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movzx"
block|,
literal|2
block|,
literal|0x0fb7
block|,
name|X
block|,
name|Cpu386
block|,
name|w_Suf
operator||
name|Modrm
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
name|Reg32
block|,
literal|0
block|}
block|}
block|,
comment|/* These instructions are not particulary usefull, since the zero extend    32->64 is implicit, but we can encode them.  */
block|{
literal|"movzx"
block|,
literal|2
block|,
literal|0x0fb6
block|,
name|X
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movzx"
block|,
literal|2
block|,
literal|0x0fb7
block|,
name|X
block|,
name|Cpu386
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|Rex64
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
comment|/* Push instructions.  */
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x50
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|ShortForm
operator||
name|DefaultSize
block|,
block|{
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0xff
block|,
literal|6
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Modrm
operator||
name|DefaultSize
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x6a
block|,
name|X
block|,
name|Cpu186
operator||
name|CpuNo64
block|,
name|wl_Suf
operator||
name|DefaultSize
block|,
block|{
name|Imm8S
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x68
block|,
name|X
block|,
name|Cpu186
operator||
name|CpuNo64
block|,
name|wl_Suf
operator||
name|DefaultSize
block|,
block|{
name|Imm16
operator||
name|Imm32
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x06
block|,
name|X
block|,
literal|0
operator||
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Seg2ShortForm
operator||
name|DefaultSize
block|,
block|{
name|SReg2
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x0fa0
block|,
name|X
block|,
name|Cpu386
operator||
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Seg3ShortForm
operator||
name|DefaultSize
block|,
block|{
name|SReg3
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* In 64bit mode, the operand size is implicitly 64bit.  */
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x50
block|,
name|X
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|ShortForm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0xff
block|,
literal|6
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|Modrm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x6a
block|,
name|X
block|,
name|Cpu186
operator||
name|Cpu64
block|,
name|wq_Suf
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|Imm8S
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x68
block|,
name|X
block|,
name|Cpu186
operator||
name|Cpu64
block|,
name|wq_Suf
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|Imm32S
operator||
name|Imm16
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x06
block|,
name|X
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|Seg2ShortForm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|SReg2
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"push"
block|,
literal|1
block|,
literal|0x0fa0
block|,
name|X
block|,
name|Cpu386
operator||
name|Cpu64
block|,
name|wq_Suf
operator||
name|Seg3ShortForm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|SReg3
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pusha"
block|,
literal|0
block|,
literal|0x60
block|,
name|X
block|,
name|Cpu186
operator||
name|CpuNo64
block|,
name|wl_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Pop instructions.  */
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x58
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|ShortForm
operator||
name|DefaultSize
block|,
block|{
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x8f
block|,
literal|0
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Modrm
operator||
name|DefaultSize
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|POP_SEG_SHORT
value|0x07
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x07
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Seg2ShortForm
operator||
name|DefaultSize
block|,
block|{
name|SReg2
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x0fa1
block|,
name|X
block|,
name|Cpu386
operator||
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Seg3ShortForm
operator||
name|DefaultSize
block|,
block|{
name|SReg3
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* In 64bit mode, the operand size is implicitly 64bit.  */
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x58
block|,
name|X
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|ShortForm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x8f
block|,
literal|0
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|Modrm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x07
block|,
name|X
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|Seg2ShortForm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|SReg2
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pop"
block|,
literal|1
block|,
literal|0x0fa1
block|,
name|X
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|Seg3ShortForm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|SReg3
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"popa"
block|,
literal|0
block|,
literal|0x61
block|,
name|X
block|,
name|Cpu186
operator||
name|CpuNo64
block|,
name|wl_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Exchange instructions.    xchg commutes:  we allow both operand orders.      In the 64bit code, xchg eax, eax is reused for new nop instruction.  */
block|{
literal|"xchg"
block|,
literal|2
block|,
literal|0x90
block|,
name|X
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|ShortForm
block|,
block|{
name|WordReg
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xchg"
block|,
literal|2
block|,
literal|0x90
block|,
name|X
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|ShortForm
block|,
block|{
name|Acc
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xchg"
block|,
literal|2
block|,
literal|0x86
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xchg"
block|,
literal|2
block|,
literal|0x86
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
name|Reg
block|,
literal|0
block|}
block|}
block|,
comment|/* In/out from ports.  */
block|{
literal|"in"
block|,
literal|2
block|,
literal|0xe4
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
block|,
block|{
name|Imm8
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"in"
block|,
literal|2
block|,
literal|0xec
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
block|,
block|{
name|InOutPortReg
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"in"
block|,
literal|1
block|,
literal|0xe4
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
block|,
block|{
name|Imm8
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"in"
block|,
literal|1
block|,
literal|0xec
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
block|,
block|{
name|InOutPortReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"out"
block|,
literal|2
block|,
literal|0xe6
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
block|,
block|{
name|Acc
block|,
name|Imm8
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"out"
block|,
literal|2
block|,
literal|0xee
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
block|,
block|{
name|Acc
block|,
name|InOutPortReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"out"
block|,
literal|1
block|,
literal|0xe6
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
block|,
block|{
name|Imm8
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"out"
block|,
literal|1
block|,
literal|0xee
block|,
name|X
block|,
literal|0
block|,
name|bwl_Suf
operator||
name|W
block|,
block|{
name|InOutPortReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Load effective address.  */
block|{
literal|"lea"
block|,
literal|2
block|,
literal|0x8d
block|,
name|X
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
comment|/* Load segment registers from memory.  */
block|{
literal|"lds"
block|,
literal|2
block|,
literal|0xc5
block|,
name|X
block|,
name|CpuNo64
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"les"
block|,
literal|2
block|,
literal|0xc4
block|,
name|X
block|,
name|CpuNo64
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lfs"
block|,
literal|2
block|,
literal|0x0fb4
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lgs"
block|,
literal|2
block|,
literal|0x0fb5
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lss"
block|,
literal|2
block|,
literal|0x0fb2
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
comment|/* Flags register instructions.  */
block|{
literal|"clc"
block|,
literal|0
block|,
literal|0xf8
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cld"
block|,
literal|0
block|,
literal|0xfc
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cli"
block|,
literal|0
block|,
literal|0xfa
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"clts"
block|,
literal|0
block|,
literal|0x0f06
block|,
name|X
block|,
name|Cpu286
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmc"
block|,
literal|0
block|,
literal|0xf5
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lahf"
block|,
literal|0
block|,
literal|0x9f
block|,
name|X
block|,
name|CpuNo64
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sahf"
block|,
literal|0
block|,
literal|0x9e
block|,
name|X
block|,
name|CpuNo64
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pushf"
block|,
literal|0
block|,
literal|0x9c
block|,
name|X
block|,
name|CpuNo64
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pushf"
block|,
literal|0
block|,
literal|0x9c
block|,
name|X
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"popf"
block|,
literal|0
block|,
literal|0x9d
block|,
name|X
block|,
name|CpuNo64
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"popf"
block|,
literal|0
block|,
literal|0x9d
block|,
name|X
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"stc"
block|,
literal|0
block|,
literal|0xf9
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"std"
block|,
literal|0
block|,
literal|0xfd
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sti"
block|,
literal|0
block|,
literal|0xfb
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Arithmetic.  */
block|{
literal|"add"
block|,
literal|2
block|,
literal|0x00
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"add"
block|,
literal|2
block|,
literal|0x83
block|,
literal|0
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"add"
block|,
literal|2
block|,
literal|0x04
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"add"
block|,
literal|2
block|,
literal|0x80
block|,
literal|0
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"inc"
block|,
literal|1
block|,
literal|0x40
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|ShortForm
block|,
block|{
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"inc"
block|,
literal|1
block|,
literal|0xfe
block|,
literal|0
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sub"
block|,
literal|2
block|,
literal|0x28
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sub"
block|,
literal|2
block|,
literal|0x83
block|,
literal|5
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sub"
block|,
literal|2
block|,
literal|0x2c
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sub"
block|,
literal|2
block|,
literal|0x80
block|,
literal|5
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"dec"
block|,
literal|1
block|,
literal|0x48
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|ShortForm
block|,
block|{
name|WordReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"dec"
block|,
literal|1
block|,
literal|0xfe
block|,
literal|1
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sbb"
block|,
literal|2
block|,
literal|0x18
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sbb"
block|,
literal|2
block|,
literal|0x83
block|,
literal|3
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sbb"
block|,
literal|2
block|,
literal|0x1c
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sbb"
block|,
literal|2
block|,
literal|0x80
block|,
literal|3
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmp"
block|,
literal|2
block|,
literal|0x38
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmp"
block|,
literal|2
block|,
literal|0x83
block|,
literal|7
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmp"
block|,
literal|2
block|,
literal|0x3c
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmp"
block|,
literal|2
block|,
literal|0x80
block|,
literal|7
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"test"
block|,
literal|2
block|,
literal|0x84
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
name|Reg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"test"
block|,
literal|2
block|,
literal|0x84
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"test"
block|,
literal|2
block|,
literal|0xa8
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"test"
block|,
literal|2
block|,
literal|0xf6
block|,
literal|0
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"and"
block|,
literal|2
block|,
literal|0x20
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"and"
block|,
literal|2
block|,
literal|0x83
block|,
literal|4
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"and"
block|,
literal|2
block|,
literal|0x24
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"and"
block|,
literal|2
block|,
literal|0x80
block|,
literal|4
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"or"
block|,
literal|2
block|,
literal|0x08
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"or"
block|,
literal|2
block|,
literal|0x83
block|,
literal|1
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"or"
block|,
literal|2
block|,
literal|0x0c
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"or"
block|,
literal|2
block|,
literal|0x80
block|,
literal|1
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xor"
block|,
literal|2
block|,
literal|0x30
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xor"
block|,
literal|2
block|,
literal|0x83
block|,
literal|6
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xor"
block|,
literal|2
block|,
literal|0x34
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xor"
block|,
literal|2
block|,
literal|0x80
block|,
literal|6
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
comment|/* clr with 1 operand is really xor with 2 operands.  */
block|{
literal|"clr"
block|,
literal|1
block|,
literal|0x30
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
operator||
name|regKludge
block|,
block|{
name|Reg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"adc"
block|,
literal|2
block|,
literal|0x10
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|D
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"adc"
block|,
literal|2
block|,
literal|0x83
block|,
literal|2
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"adc"
block|,
literal|2
block|,
literal|0x14
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
block|,
block|{
name|EncImm
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"adc"
block|,
literal|2
block|,
literal|0x80
block|,
literal|2
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|EncImm
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"neg"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|3
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"not"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|2
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"aaa"
block|,
literal|0
block|,
literal|0x37
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"aas"
block|,
literal|0
block|,
literal|0x3f
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"daa"
block|,
literal|0
block|,
literal|0x27
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"das"
block|,
literal|0
block|,
literal|0x2f
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"aad"
block|,
literal|0
block|,
literal|0xd50a
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"aad"
block|,
literal|1
block|,
literal|0xd5
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
name|Imm8S
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"aam"
block|,
literal|0
block|,
literal|0xd40a
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"aam"
block|,
literal|1
block|,
literal|0xd4
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
name|Imm8S
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Conversion insns.  */
comment|/* Intel naming */
block|{
literal|"cbw"
block|,
literal|0
block|,
literal|0x98
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size16
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cdqe"
block|,
literal|0
block|,
literal|0x98
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Size64
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cwde"
block|,
literal|0
block|,
literal|0x98
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size32
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cwd"
block|,
literal|0
block|,
literal|0x99
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size16
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cdq"
block|,
literal|0
block|,
literal|0x99
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size32
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cqo"
block|,
literal|0
block|,
literal|0x99
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Size64
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* AT&T naming */
block|{
literal|"cbtw"
block|,
literal|0
block|,
literal|0x98
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size16
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cltq"
block|,
literal|0
block|,
literal|0x98
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Size64
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cwtl"
block|,
literal|0
block|,
literal|0x98
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size32
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cwtd"
block|,
literal|0
block|,
literal|0x99
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size16
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cltd"
block|,
literal|0
block|,
literal|0x99
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size32
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cqto"
block|,
literal|0
block|,
literal|0x99
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|Size64
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Warning! the mul/imul (opcode 0xf6) must only have 1 operand!  They are    expanding 64-bit multiplies, and *cannot* be selected to accomplish    'imul %ebx, %eax' (opcode 0x0faf must be used in this case)    These multiplies can only be selected with single operand forms.  */
block|{
literal|"mul"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|4
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"imul"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|5
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"imul"
block|,
literal|2
block|,
literal|0x0faf
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"imul"
block|,
literal|3
block|,
literal|0x6b
block|,
name|X
block|,
name|Cpu186
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8S
block|,
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|}
block|}
block|,
block|{
literal|"imul"
block|,
literal|3
block|,
literal|0x69
block|,
name|X
block|,
name|Cpu186
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm16
operator||
name|Imm32S
operator||
name|Imm32
block|,
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|}
block|}
block|,
comment|/* imul with 2 operands mimics imul with 3 by putting the register in    both i.rm.reg& i.rm.regmem fields.  regKludge enables this    transformation.  */
block|{
literal|"imul"
block|,
literal|2
block|,
literal|0x6b
block|,
name|X
block|,
name|Cpu186
block|,
name|wlq_Suf
operator||
name|Modrm
operator||
name|regKludge
block|,
block|{
name|Imm8S
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"imul"
block|,
literal|2
block|,
literal|0x69
block|,
name|X
block|,
name|Cpu186
block|,
name|wlq_Suf
operator||
name|Modrm
operator||
name|regKludge
block|,
block|{
name|Imm16
operator||
name|Imm32S
operator||
name|Imm32
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"div"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|6
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"div"
block|,
literal|2
block|,
literal|0xf6
block|,
literal|6
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"idiv"
block|,
literal|1
block|,
literal|0xf6
block|,
literal|7
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"idiv"
block|,
literal|2
block|,
literal|0xf6
block|,
literal|7
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rol"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|0
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm1
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rol"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|0
block|,
name|Cpu186
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rol"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|0
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rol"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|0
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ror"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|1
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm1
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ror"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|1
block|,
name|Cpu186
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ror"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|1
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ror"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|1
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcl"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|2
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm1
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcl"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|2
block|,
name|Cpu186
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcl"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|2
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcl"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|2
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcr"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|3
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm1
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcr"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|3
block|,
name|Cpu186
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcr"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|3
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcr"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|3
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sal"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|4
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm1
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sal"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|4
block|,
name|Cpu186
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sal"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|4
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sal"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|4
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shl"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|4
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm1
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shl"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|4
block|,
name|Cpu186
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shl"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|4
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shl"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|4
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shr"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|5
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm1
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shr"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|5
block|,
name|Cpu186
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shr"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|5
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shr"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|5
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sar"
block|,
literal|2
block|,
literal|0xd0
block|,
literal|7
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm1
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sar"
block|,
literal|2
block|,
literal|0xc0
block|,
literal|7
block|,
name|Cpu186
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sar"
block|,
literal|2
block|,
literal|0xd2
block|,
literal|7
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sar"
block|,
literal|1
block|,
literal|0xd0
block|,
literal|7
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shld"
block|,
literal|3
block|,
literal|0x0fa4
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|}
block|}
block|,
block|{
literal|"shld"
block|,
literal|3
block|,
literal|0x0fa5
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|}
block|}
block|,
block|{
literal|"shld"
block|,
literal|2
block|,
literal|0x0fa5
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shrd"
block|,
literal|3
block|,
literal|0x0fac
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|}
block|}
block|,
block|{
literal|"shrd"
block|,
literal|3
block|,
literal|0x0fad
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|ShiftCount
block|,
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|}
block|}
block|,
block|{
literal|"shrd"
block|,
literal|2
block|,
literal|0x0fad
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
comment|/* Control transfer instructions.  */
block|{
literal|"call"
block|,
literal|1
block|,
literal|0xe8
block|,
name|X
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|JumpDword
operator||
name|DefaultSize
block|,
block|{
name|Disp16
operator||
name|Disp32
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"call"
block|,
literal|1
block|,
literal|0xff
block|,
literal|2
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Modrm
operator||
name|DefaultSize
block|,
block|{
name|WordReg
operator||
name|WordMem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"call"
block|,
literal|1
block|,
literal|0xff
block|,
literal|2
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|Modrm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|WordReg
operator||
name|WordMem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"call"
block|,
literal|2
block|,
literal|0x9a
block|,
name|X
block|,
name|CpuNo64
block|,
name|wlq_Suf
operator||
name|JumpInterSegment
operator||
name|DefaultSize
block|,
block|{
name|Imm16
block|,
name|Imm16
operator||
name|Imm32
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"call"
block|,
literal|1
block|,
literal|0xff
block|,
literal|3
block|,
literal|0
block|,
name|x_Suf
operator||
name|Modrm
operator||
name|DefaultSize
block|,
block|{
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lcall"
block|,
literal|2
block|,
literal|0x9a
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|JumpInterSegment
operator||
name|DefaultSize
block|,
block|{
name|Imm16
block|,
name|Imm16
operator||
name|Imm32
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lcall"
block|,
literal|1
block|,
literal|0xff
block|,
literal|3
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Modrm
operator||
name|DefaultSize
block|,
block|{
name|WordMem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lcall"
block|,
literal|1
block|,
literal|0xff
block|,
literal|3
block|,
name|Cpu64
block|,
name|q_Suf
operator||
name|Modrm
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|WordMem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|JUMP_PC_RELATIVE
value|0xeb
block|{
literal|"jmp"
block|,
literal|1
block|,
literal|0xeb
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jmp"
block|,
literal|1
block|,
literal|0xff
block|,
literal|4
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jmp"
block|,
literal|1
block|,
literal|0xff
block|,
literal|4
block|,
name|Cpu64
block|,
name|wq_Suf
operator||
name|Modrm
operator||
name|NoRex64
block|,
block|{
name|WordReg
operator||
name|WordMem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"jmp"
block|,
literal|2
block|,
literal|0xea
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|JumpInterSegment
block|,
block|{
name|Imm16
block|,
name|Imm16
operator||
name|Imm32
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"jmp"
block|,
literal|1
block|,
literal|0xff
block|,
literal|5
block|,
literal|0
block|,
name|x_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ljmp"
block|,
literal|2
block|,
literal|0xea
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|JumpInterSegment
block|,
block|{
name|Imm16
block|,
name|Imm16
operator||
name|Imm32
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ljmp"
block|,
literal|1
block|,
literal|0xff
block|,
literal|5
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ljmp"
block|,
literal|1
block|,
literal|0xff
block|,
literal|5
block|,
name|Cpu64
block|,
name|q_Suf
operator||
name|Modrm
operator||
name|NoRex64
block|,
block|{
name|WordMem
operator||
name|JumpAbsolute
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ret"
block|,
literal|0
block|,
literal|0xc3
block|,
name|X
block|,
name|CpuNo64
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ret"
block|,
literal|1
block|,
literal|0xc2
block|,
name|X
block|,
name|CpuNo64
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
name|Imm16
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ret"
block|,
literal|0
block|,
literal|0xc3
block|,
name|X
block|,
name|Cpu64
block|,
name|q_Suf
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ret"
block|,
literal|1
block|,
literal|0xc2
block|,
name|X
block|,
name|Cpu64
block|,
name|q_Suf
operator||
name|DefaultSize
operator||
name|NoRex64
block|,
block|{
name|Imm16
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lret"
block|,
literal|0
block|,
literal|0xcb
block|,
name|X
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lret"
block|,
literal|1
block|,
literal|0xca
block|,
name|X
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
name|Imm16
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"enter"
block|,
literal|2
block|,
literal|0xc8
block|,
name|X
block|,
name|Cpu186
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
name|Imm16
block|,
name|Imm8
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"leave"
block|,
literal|0
block|,
literal|0xc9
block|,
name|X
block|,
name|Cpu186
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Conditional jumps.  */
block|{
literal|"jo"
block|,
literal|1
block|,
literal|0x70
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jno"
block|,
literal|1
block|,
literal|0x71
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jb"
block|,
literal|1
block|,
literal|0x72
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jc"
block|,
literal|1
block|,
literal|0x72
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnae"
block|,
literal|1
block|,
literal|0x72
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnb"
block|,
literal|1
block|,
literal|0x73
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnc"
block|,
literal|1
block|,
literal|0x73
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jae"
block|,
literal|1
block|,
literal|0x73
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"je"
block|,
literal|1
block|,
literal|0x74
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jz"
block|,
literal|1
block|,
literal|0x74
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jne"
block|,
literal|1
block|,
literal|0x75
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnz"
block|,
literal|1
block|,
literal|0x75
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jbe"
block|,
literal|1
block|,
literal|0x76
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jna"
block|,
literal|1
block|,
literal|0x76
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnbe"
block|,
literal|1
block|,
literal|0x77
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ja"
block|,
literal|1
block|,
literal|0x77
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"js"
block|,
literal|1
block|,
literal|0x78
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jns"
block|,
literal|1
block|,
literal|0x79
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jp"
block|,
literal|1
block|,
literal|0x7a
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jpe"
block|,
literal|1
block|,
literal|0x7a
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnp"
block|,
literal|1
block|,
literal|0x7b
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jpo"
block|,
literal|1
block|,
literal|0x7b
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jl"
block|,
literal|1
block|,
literal|0x7c
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnge"
block|,
literal|1
block|,
literal|0x7c
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnl"
block|,
literal|1
block|,
literal|0x7d
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jge"
block|,
literal|1
block|,
literal|0x7d
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jle"
block|,
literal|1
block|,
literal|0x7e
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jng"
block|,
literal|1
block|,
literal|0x7e
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jnle"
block|,
literal|1
block|,
literal|0x7f
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jg"
block|,
literal|1
block|,
literal|0x7f
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Jump
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* jcxz vs. jecxz is chosen on the basis of the address size prefix.  */
block|{
literal|"jcxz"
block|,
literal|1
block|,
literal|0xe3
block|,
name|X
block|,
name|CpuNo64
block|,
name|NoSuf
operator||
name|JumpByte
operator||
name|Size16
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jecxz"
block|,
literal|1
block|,
literal|0xe3
block|,
name|X
block|,
name|CpuNo64
block|,
name|NoSuf
operator||
name|JumpByte
operator||
name|Size32
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jecxz"
block|,
literal|1
block|,
literal|0x67e3
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|JumpByte
operator||
name|Size32
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"jrcxz"
block|,
literal|1
block|,
literal|0xe3
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|JumpByte
operator||
name|Size64
operator||
name|NoRex64
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* The loop instructions also use the address size prefix to select    %cx rather than %ecx for the loop count, so the `w' form of these    instructions emit an address size prefix rather than a data size    prefix.  */
block|{
literal|"loop"
block|,
literal|1
block|,
literal|0xe2
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|JumpByte
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loop"
block|,
literal|1
block|,
literal|0xe2
block|,
name|X
block|,
name|Cpu64
block|,
name|lq_Suf
operator||
name|JumpByte
operator||
name|NoRex64
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loopz"
block|,
literal|1
block|,
literal|0xe1
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|JumpByte
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loopz"
block|,
literal|1
block|,
literal|0xe1
block|,
name|X
block|,
name|Cpu64
block|,
name|lq_Suf
operator||
name|JumpByte
operator||
name|NoRex64
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loope"
block|,
literal|1
block|,
literal|0xe1
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|JumpByte
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loope"
block|,
literal|1
block|,
literal|0xe1
block|,
name|X
block|,
name|Cpu64
block|,
name|lq_Suf
operator||
name|JumpByte
operator||
name|NoRex64
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loopnz"
block|,
literal|1
block|,
literal|0xe0
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|JumpByte
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loopnz"
block|,
literal|1
block|,
literal|0xe0
block|,
name|X
block|,
name|Cpu64
block|,
name|lq_Suf
operator||
name|JumpByte
operator||
name|NoRex64
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loopne"
block|,
literal|1
block|,
literal|0xe0
block|,
name|X
block|,
name|CpuNo64
block|,
name|wl_Suf
operator||
name|JumpByte
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"loopne"
block|,
literal|1
block|,
literal|0xe0
block|,
name|X
block|,
name|Cpu64
block|,
name|lq_Suf
operator||
name|JumpByte
operator||
name|NoRex64
block|,
block|{
name|Disp
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Set byte on flag instructions.  */
block|{
literal|"seto"
block|,
literal|1
block|,
literal|0x0f90
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setno"
block|,
literal|1
block|,
literal|0x0f91
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setb"
block|,
literal|1
block|,
literal|0x0f92
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setc"
block|,
literal|1
block|,
literal|0x0f92
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnae"
block|,
literal|1
block|,
literal|0x0f92
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnb"
block|,
literal|1
block|,
literal|0x0f93
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnc"
block|,
literal|1
block|,
literal|0x0f93
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setae"
block|,
literal|1
block|,
literal|0x0f93
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sete"
block|,
literal|1
block|,
literal|0x0f94
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setz"
block|,
literal|1
block|,
literal|0x0f94
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setne"
block|,
literal|1
block|,
literal|0x0f95
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnz"
block|,
literal|1
block|,
literal|0x0f95
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setbe"
block|,
literal|1
block|,
literal|0x0f96
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setna"
block|,
literal|1
block|,
literal|0x0f96
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnbe"
block|,
literal|1
block|,
literal|0x0f97
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"seta"
block|,
literal|1
block|,
literal|0x0f97
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sets"
block|,
literal|1
block|,
literal|0x0f98
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setns"
block|,
literal|1
block|,
literal|0x0f99
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setp"
block|,
literal|1
block|,
literal|0x0f9a
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setpe"
block|,
literal|1
block|,
literal|0x0f9a
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnp"
block|,
literal|1
block|,
literal|0x0f9b
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setpo"
block|,
literal|1
block|,
literal|0x0f9b
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setl"
block|,
literal|1
block|,
literal|0x0f9c
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnge"
block|,
literal|1
block|,
literal|0x0f9c
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnl"
block|,
literal|1
block|,
literal|0x0f9d
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setge"
block|,
literal|1
block|,
literal|0x0f9d
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setle"
block|,
literal|1
block|,
literal|0x0f9e
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setng"
block|,
literal|1
block|,
literal|0x0f9e
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setnle"
block|,
literal|1
block|,
literal|0x0f9f
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"setg"
block|,
literal|1
block|,
literal|0x0f9f
block|,
literal|0
block|,
name|Cpu386
block|,
name|b_Suf
operator||
name|Modrm
block|,
block|{
name|Reg8
operator||
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* String manipulation.  */
block|{
literal|"cmps"
block|,
literal|0
block|,
literal|0xa6
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmps"
block|,
literal|2
block|,
literal|0xa6
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
operator||
name|EsSeg
block|,
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"scmp"
block|,
literal|0
block|,
literal|0xa6
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"scmp"
block|,
literal|2
block|,
literal|0xa6
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
operator||
name|EsSeg
block|,
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ins"
block|,
literal|0
block|,
literal|0x6c
block|,
name|X
block|,
name|Cpu186
block|,
name|bwl_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ins"
block|,
literal|2
block|,
literal|0x6c
block|,
name|X
block|,
name|Cpu186
block|,
name|bwl_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|InOutPortReg
block|,
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"outs"
block|,
literal|0
block|,
literal|0x6e
block|,
name|X
block|,
name|Cpu186
block|,
name|bwl_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"outs"
block|,
literal|2
block|,
literal|0x6e
block|,
name|X
block|,
name|Cpu186
block|,
name|bwl_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
name|InOutPortReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lods"
block|,
literal|0
block|,
literal|0xac
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lods"
block|,
literal|1
block|,
literal|0xac
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lods"
block|,
literal|2
block|,
literal|0xac
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"slod"
block|,
literal|0
block|,
literal|0xac
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"slod"
block|,
literal|1
block|,
literal|0xac
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"slod"
block|,
literal|2
block|,
literal|0xac
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movs"
block|,
literal|0
block|,
literal|0xa4
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movs"
block|,
literal|2
block|,
literal|0xa4
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"smov"
block|,
literal|0
block|,
literal|0xa4
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"smov"
block|,
literal|2
block|,
literal|0xa4
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"scas"
block|,
literal|0
block|,
literal|0xae
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"scas"
block|,
literal|1
block|,
literal|0xae
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"scas"
block|,
literal|2
block|,
literal|0xae
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
operator||
name|EsSeg
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ssca"
block|,
literal|0
block|,
literal|0xae
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ssca"
block|,
literal|1
block|,
literal|0xae
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ssca"
block|,
literal|2
block|,
literal|0xae
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
operator||
name|EsSeg
block|,
name|Acc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"stos"
block|,
literal|0
block|,
literal|0xaa
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"stos"
block|,
literal|1
block|,
literal|0xaa
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"stos"
block|,
literal|2
block|,
literal|0xaa
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|Acc
block|,
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ssto"
block|,
literal|0
block|,
literal|0xaa
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ssto"
block|,
literal|1
block|,
literal|0xaa
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ssto"
block|,
literal|2
block|,
literal|0xaa
block|,
name|X
block|,
literal|0
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|IsString
block|,
block|{
name|Acc
block|,
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xlat"
block|,
literal|0
block|,
literal|0xd7
block|,
name|X
block|,
literal|0
block|,
name|b_Suf
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xlat"
block|,
literal|1
block|,
literal|0xd7
block|,
name|X
block|,
literal|0
block|,
name|b_Suf
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Bit manipulation.  */
block|{
literal|"bsf"
block|,
literal|2
block|,
literal|0x0fbc
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"bsr"
block|,
literal|2
block|,
literal|0x0fbd
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"bt"
block|,
literal|2
block|,
literal|0x0fa3
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"bt"
block|,
literal|2
block|,
literal|0x0fba
block|,
literal|4
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"btc"
block|,
literal|2
block|,
literal|0x0fbb
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"btc"
block|,
literal|2
block|,
literal|0x0fba
block|,
literal|7
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"btr"
block|,
literal|2
block|,
literal|0x0fb3
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"btr"
block|,
literal|2
block|,
literal|0x0fba
block|,
literal|6
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"bts"
block|,
literal|2
block|,
literal|0x0fab
block|,
name|X
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"bts"
block|,
literal|2
block|,
literal|0x0fba
block|,
literal|5
block|,
name|Cpu386
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|WordReg
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
comment|/* Interrupts& op. sys insns.  */
comment|/* See gas/config/tc-i386.c for conversion of 'int $3' into the special    int 3 insn.  */
define|#
directive|define
name|INT_OPCODE
value|0xcd
define|#
directive|define
name|INT3_OPCODE
value|0xcc
block|{
literal|"int"
block|,
literal|1
block|,
literal|0xcd
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
name|Imm8
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"int3"
block|,
literal|0
block|,
literal|0xcc
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"into"
block|,
literal|0
block|,
literal|0xce
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"iret"
block|,
literal|0
block|,
literal|0xcf
block|,
name|X
block|,
literal|0
block|,
name|wlq_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* i386sl, i486sl, later 486, and Pentium.  */
block|{
literal|"rsm"
block|,
literal|0
block|,
literal|0x0faa
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"bound"
block|,
literal|2
block|,
literal|0x62
block|,
name|X
block|,
name|Cpu186
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
block|,
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"hlt"
block|,
literal|0
block|,
literal|0xf4
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* nop is actually 'xchgl %eax, %eax'.  */
block|{
literal|"nop"
block|,
literal|0
block|,
literal|0x90
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Protection control.  */
block|{
literal|"arpl"
block|,
literal|2
block|,
literal|0x63
block|,
name|X
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Reg16
block|,
name|Reg16
operator||
name|ShortMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lar"
block|,
literal|2
block|,
literal|0x0f02
block|,
name|X
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lgdt"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|2
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lidt"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|3
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lldt"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|2
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lmsw"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|6
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lsl"
block|,
literal|2
block|,
literal|0x0f03
block|,
name|X
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ltr"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|3
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sgdt"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|0
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sidt"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|1
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sldt"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|0
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|InvMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sldt"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|0
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"smsw"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|4
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|InvMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"smsw"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|4
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"str"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|1
block|,
name|Cpu286
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|InvMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"str"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|1
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"verr"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|4
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"verw"
block|,
literal|1
block|,
literal|0x0f00
block|,
literal|5
block|,
name|Cpu286
block|,
name|w_Suf
operator||
name|Modrm
operator||
name|IgnoreSize
block|,
block|{
name|Reg16
operator||
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Floating point instructions.  */
comment|/* load */
block|{
literal|"fld"
block|,
literal|1
block|,
literal|0xd9c0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fld"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|0
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fld"
block|,
literal|1
block|,
literal|0xd9c0
block|,
name|X
block|,
literal|0
block|,
name|l_FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"fld"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|5
block|,
literal|0
block|,
name|x_FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fild"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|0
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"fildd"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|5
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fildq"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|5
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fildll"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|5
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldt"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|5
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fbld"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|4
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* store (no pop) */
block|{
literal|"fst"
block|,
literal|1
block|,
literal|0xddd0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fst"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|2
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fst"
block|,
literal|1
block|,
literal|0xddd0
block|,
name|X
block|,
literal|0
block|,
name|l_FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fist"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|2
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* store (with pop) */
block|{
literal|"fstp"
block|,
literal|1
block|,
literal|0xddd8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fstp"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|3
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fstp"
block|,
literal|1
block|,
literal|0xddd8
block|,
name|X
block|,
literal|0
block|,
name|l_FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"fstp"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|7
block|,
literal|0
block|,
name|x_FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fistp"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|3
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"fistpd"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|7
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fistpq"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|7
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fistpll"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|7
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fstpt"
block|,
literal|1
block|,
literal|0xdb
block|,
literal|7
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fbstp"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|6
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* exchange %st<n> with %st0 */
block|{
literal|"fxch"
block|,
literal|1
block|,
literal|0xd9c8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* alias for fxch %st(1) */
block|{
literal|"fxch"
block|,
literal|0
block|,
literal|0xd9c9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* comparison (without pop) */
block|{
literal|"fcom"
block|,
literal|1
block|,
literal|0xd8d0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* alias for fcom %st(1) */
block|{
literal|"fcom"
block|,
literal|0
block|,
literal|0xd8d1
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcom"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|2
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcom"
block|,
literal|1
block|,
literal|0xd8d0
block|,
name|X
block|,
literal|0
block|,
name|l_FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ficom"
block|,
literal|1
block|,
literal|0xde
block|,
literal|2
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* comparison (with pop) */
block|{
literal|"fcomp"
block|,
literal|1
block|,
literal|0xd8d8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* alias for fcomp %st(1) */
block|{
literal|"fcomp"
block|,
literal|0
block|,
literal|0xd8d9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcomp"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|3
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcomp"
block|,
literal|1
block|,
literal|0xd8d8
block|,
name|X
block|,
literal|0
block|,
name|l_FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ficomp"
block|,
literal|1
block|,
literal|0xde
block|,
literal|3
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcompp"
block|,
literal|0
block|,
literal|0xded9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* unordered comparison (with pop) */
block|{
literal|"fucom"
block|,
literal|1
block|,
literal|0xdde0
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* alias for fucom %st(1) */
block|{
literal|"fucom"
block|,
literal|0
block|,
literal|0xdde1
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucomp"
block|,
literal|1
block|,
literal|0xdde8
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* alias for fucomp %st(1) */
block|{
literal|"fucomp"
block|,
literal|0
block|,
literal|0xdde9
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucompp"
block|,
literal|0
block|,
literal|0xdae9
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ftst"
block|,
literal|0
block|,
literal|0xd9e4
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fxam"
block|,
literal|0
block|,
literal|0xd9e5
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* load constants into %st0 */
block|{
literal|"fld1"
block|,
literal|0
block|,
literal|0xd9e8
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldl2t"
block|,
literal|0
block|,
literal|0xd9e9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldl2e"
block|,
literal|0
block|,
literal|0xd9ea
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldpi"
block|,
literal|0
block|,
literal|0xd9eb
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldlg2"
block|,
literal|0
block|,
literal|0xd9ec
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldln2"
block|,
literal|0
block|,
literal|0xd9ed
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldz"
block|,
literal|0
block|,
literal|0xd9ee
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* arithmetic */
comment|/* add */
block|{
literal|"fadd"
block|,
literal|2
block|,
literal|0xd8c0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|FloatD
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
comment|/* alias for fadd %st(i), %st */
block|{
literal|"fadd"
block|,
literal|1
block|,
literal|0xd8c0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
comment|/* alias for faddp */
block|{
literal|"fadd"
block|,
literal|0
block|,
literal|0xdec1
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|Ugh
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
block|{
literal|"fadd"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|0
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fiadd"
block|,
literal|1
block|,
literal|0xde
block|,
literal|0
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"faddp"
block|,
literal|2
block|,
literal|0xdec0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"faddp"
block|,
literal|1
block|,
literal|0xdec0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* alias for faddp %st, %st(1) */
block|{
literal|"faddp"
block|,
literal|0
block|,
literal|0xdec1
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"faddp"
block|,
literal|2
block|,
literal|0xdec0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
comment|/* subtract */
block|{
literal|"fsub"
block|,
literal|2
block|,
literal|0xd8e0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|FloatDR
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsub"
block|,
literal|1
block|,
literal|0xd8e0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
comment|/* alias for fsubp */
block|{
literal|"fsub"
block|,
literal|0
block|,
literal|0xdee1
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|Ugh
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
block|{
literal|"fsub"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|4
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fisub"
block|,
literal|1
block|,
literal|0xde
block|,
literal|4
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
block|{
literal|"fsubp"
block|,
literal|2
block|,
literal|0xdee0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubp"
block|,
literal|1
block|,
literal|0xdee0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubp"
block|,
literal|0
block|,
literal|0xdee1
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|OLDGCC_COMPAT
block|{
literal|"fsubp"
block|,
literal|2
block|,
literal|0xdee0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
else|#
directive|else
block|{
literal|"fsubp"
block|,
literal|2
block|,
literal|0xdee8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubp"
block|,
literal|1
block|,
literal|0xdee8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubp"
block|,
literal|0
block|,
literal|0xdee9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
comment|/* subtract reverse */
block|{
literal|"fsubr"
block|,
literal|2
block|,
literal|0xd8e8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|FloatDR
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubr"
block|,
literal|1
block|,
literal|0xd8e8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
comment|/* alias for fsubrp */
block|{
literal|"fsubr"
block|,
literal|0
block|,
literal|0xdee9
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|Ugh
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
block|{
literal|"fsubr"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|5
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fisubr"
block|,
literal|1
block|,
literal|0xde
block|,
literal|5
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
block|{
literal|"fsubrp"
block|,
literal|2
block|,
literal|0xdee8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubrp"
block|,
literal|1
block|,
literal|0xdee8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubrp"
block|,
literal|0
block|,
literal|0xdee9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|OLDGCC_COMPAT
block|{
literal|"fsubrp"
block|,
literal|2
block|,
literal|0xdee8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
else|#
directive|else
block|{
literal|"fsubrp"
block|,
literal|2
block|,
literal|0xdee0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubrp"
block|,
literal|1
block|,
literal|0xdee0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsubrp"
block|,
literal|0
block|,
literal|0xdee1
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
comment|/* multiply */
block|{
literal|"fmul"
block|,
literal|2
block|,
literal|0xd8c8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|FloatD
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fmul"
block|,
literal|1
block|,
literal|0xd8c8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
comment|/* alias for fmulp */
block|{
literal|"fmul"
block|,
literal|0
block|,
literal|0xdec9
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|Ugh
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
block|{
literal|"fmul"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|1
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fimul"
block|,
literal|1
block|,
literal|0xde
block|,
literal|1
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fmulp"
block|,
literal|2
block|,
literal|0xdec8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fmulp"
block|,
literal|1
block|,
literal|0xdec8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fmulp"
block|,
literal|0
block|,
literal|0xdec9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fmulp"
block|,
literal|2
block|,
literal|0xdec8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
comment|/* divide */
block|{
literal|"fdiv"
block|,
literal|2
block|,
literal|0xd8f0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|FloatDR
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdiv"
block|,
literal|1
block|,
literal|0xd8f0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
comment|/* alias for fdivp */
block|{
literal|"fdiv"
block|,
literal|0
block|,
literal|0xdef1
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|Ugh
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
block|{
literal|"fdiv"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|6
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fidiv"
block|,
literal|1
block|,
literal|0xde
block|,
literal|6
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
block|{
literal|"fdivp"
block|,
literal|2
block|,
literal|0xdef0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivp"
block|,
literal|1
block|,
literal|0xdef0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivp"
block|,
literal|0
block|,
literal|0xdef1
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|OLDGCC_COMPAT
block|{
literal|"fdivp"
block|,
literal|2
block|,
literal|0xdef0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
else|#
directive|else
block|{
literal|"fdivp"
block|,
literal|2
block|,
literal|0xdef8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivp"
block|,
literal|1
block|,
literal|0xdef8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivp"
block|,
literal|0
block|,
literal|0xdef9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
comment|/* divide reverse */
block|{
literal|"fdivr"
block|,
literal|2
block|,
literal|0xd8f8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|FloatDR
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivr"
block|,
literal|1
block|,
literal|0xd8f8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
comment|/* alias for fdivrp */
block|{
literal|"fdivr"
block|,
literal|0
block|,
literal|0xdef9
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|Ugh
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
block|{
literal|"fdivr"
block|,
literal|1
block|,
literal|0xd8
block|,
literal|7
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|LongMem
operator||
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fidivr"
block|,
literal|1
block|,
literal|0xde
block|,
literal|7
block|,
literal|0
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|SYSV386_COMPAT
block|{
literal|"fdivrp"
block|,
literal|2
block|,
literal|0xdef8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivrp"
block|,
literal|1
block|,
literal|0xdef8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivrp"
block|,
literal|0
block|,
literal|0xdef9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
if|#
directive|if
name|OLDGCC_COMPAT
block|{
literal|"fdivrp"
block|,
literal|2
block|,
literal|0xdef8
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
operator||
name|Ugh
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
else|#
directive|else
block|{
literal|"fdivrp"
block|,
literal|2
block|,
literal|0xdef0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatAcc
block|,
name|FloatReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivrp"
block|,
literal|1
block|,
literal|0xdef0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdivrp"
block|,
literal|0
block|,
literal|0xdef1
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
endif|#
directive|endif
block|{
literal|"f2xm1"
block|,
literal|0
block|,
literal|0xd9f0
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fyl2x"
block|,
literal|0
block|,
literal|0xd9f1
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fptan"
block|,
literal|0
block|,
literal|0xd9f2
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fpatan"
block|,
literal|0
block|,
literal|0xd9f3
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fxtract"
block|,
literal|0
block|,
literal|0xd9f4
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fprem1"
block|,
literal|0
block|,
literal|0xd9f5
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fdecstp"
block|,
literal|0
block|,
literal|0xd9f6
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fincstp"
block|,
literal|0
block|,
literal|0xd9f7
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fprem"
block|,
literal|0
block|,
literal|0xd9f8
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fyl2xp1"
block|,
literal|0
block|,
literal|0xd9f9
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsqrt"
block|,
literal|0
block|,
literal|0xd9fa
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsincos"
block|,
literal|0
block|,
literal|0xd9fb
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"frndint"
block|,
literal|0
block|,
literal|0xd9fc
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fscale"
block|,
literal|0
block|,
literal|0xd9fd
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsin"
block|,
literal|0
block|,
literal|0xd9fe
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcos"
block|,
literal|0
block|,
literal|0xd9ff
block|,
name|X
block|,
name|Cpu286
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fchs"
block|,
literal|0
block|,
literal|0xd9e0
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fabs"
block|,
literal|0
block|,
literal|0xd9e1
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* processor control */
block|{
literal|"fninit"
block|,
literal|0
block|,
literal|0xdbe3
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"finit"
block|,
literal|0
block|,
literal|0xdbe3
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|FWait
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldcw"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|5
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fnstcw"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|7
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fstcw"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|7
block|,
literal|0
block|,
name|FP
operator||
name|FWait
operator||
name|Modrm
block|,
block|{
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fnstsw"
block|,
literal|1
block|,
literal|0xdfe0
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
name|Acc
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fnstsw"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|7
block|,
literal|0
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fnstsw"
block|,
literal|0
block|,
literal|0xdfe0
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fstsw"
block|,
literal|1
block|,
literal|0xdfe0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|FWait
block|,
block|{
name|Acc
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fstsw"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|7
block|,
literal|0
block|,
name|FP
operator||
name|FWait
operator||
name|Modrm
block|,
block|{
name|ShortMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fstsw"
block|,
literal|0
block|,
literal|0xdfe0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|FWait
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fnclex"
block|,
literal|0
block|,
literal|0xdbe2
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fclex"
block|,
literal|0
block|,
literal|0xdbe2
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|FWait
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Short forms of fldenv, fstenv use data size prefix.  */
block|{
literal|"fnstenv"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|6
block|,
literal|0
block|,
name|sl_Suf
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fstenv"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|6
block|,
literal|0
block|,
name|sl_Suf
operator||
name|FWait
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fldenv"
block|,
literal|1
block|,
literal|0xd9
block|,
literal|4
block|,
literal|0
block|,
name|sl_Suf
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fnsave"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|6
block|,
literal|0
block|,
name|sl_Suf
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fsave"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|6
block|,
literal|0
block|,
name|sl_Suf
operator||
name|FWait
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"frstor"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|4
block|,
literal|0
block|,
name|sl_Suf
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ffree"
block|,
literal|1
block|,
literal|0xddc0
block|,
name|X
block|,
literal|0
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* P6:free st(i), pop st */
block|{
literal|"ffreep"
block|,
literal|1
block|,
literal|0xdfc0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fnop"
block|,
literal|0
block|,
literal|0xd9d0
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|FWAIT_OPCODE
value|0x9b
block|{
literal|"fwait"
block|,
literal|0
block|,
literal|0x9b
block|,
name|X
block|,
literal|0
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Opcode prefixes; we allow them as separate insns too.  */
define|#
directive|define
name|ADDR_PREFIX_OPCODE
value|0x67
block|{
literal|"addr16"
block|,
literal|0
block|,
literal|0x67
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
operator||
name|Size16
operator||
name|IgnoreSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"addr32"
block|,
literal|0
block|,
literal|0x67
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
operator||
name|Size32
operator||
name|IgnoreSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"aword"
block|,
literal|0
block|,
literal|0x67
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
operator||
name|Size16
operator||
name|IgnoreSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"adword"
block|,
literal|0
block|,
literal|0x67
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
operator||
name|Size32
operator||
name|IgnoreSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|DATA_PREFIX_OPCODE
value|0x66
block|{
literal|"data16"
block|,
literal|0
block|,
literal|0x66
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
operator||
name|Size16
operator||
name|IgnoreSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"data32"
block|,
literal|0
block|,
literal|0x66
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
operator||
name|Size32
operator||
name|IgnoreSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"word"
block|,
literal|0
block|,
literal|0x66
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
operator||
name|Size16
operator||
name|IgnoreSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"dword"
block|,
literal|0
block|,
literal|0x66
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
operator||
name|Size32
operator||
name|IgnoreSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|LOCK_PREFIX_OPCODE
value|0xf0
block|{
literal|"lock"
block|,
literal|0
block|,
literal|0xf0
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"wait"
block|,
literal|0
block|,
literal|0x9b
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|CS_PREFIX_OPCODE
value|0x2e
block|{
literal|"cs"
block|,
literal|0
block|,
literal|0x2e
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|DS_PREFIX_OPCODE
value|0x3e
block|{
literal|"ds"
block|,
literal|0
block|,
literal|0x3e
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|ES_PREFIX_OPCODE
value|0x26
block|{
literal|"es"
block|,
literal|0
block|,
literal|0x26
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|FS_PREFIX_OPCODE
value|0x64
block|{
literal|"fs"
block|,
literal|0
block|,
literal|0x64
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|GS_PREFIX_OPCODE
value|0x65
block|{
literal|"gs"
block|,
literal|0
block|,
literal|0x65
block|,
name|X
block|,
name|Cpu386
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|SS_PREFIX_OPCODE
value|0x36
block|{
literal|"ss"
block|,
literal|0
block|,
literal|0x36
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
define|#
directive|define
name|REPNE_PREFIX_OPCODE
value|0xf2
define|#
directive|define
name|REPE_PREFIX_OPCODE
value|0xf3
block|{
literal|"rep"
block|,
literal|0
block|,
literal|0xf3
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"repe"
block|,
literal|0
block|,
literal|0xf3
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"repz"
block|,
literal|0
block|,
literal|0xf3
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"repne"
block|,
literal|0
block|,
literal|0xf2
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"repnz"
block|,
literal|0
block|,
literal|0xf2
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex"
block|,
literal|0
block|,
literal|0x40
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rexz"
block|,
literal|0
block|,
literal|0x41
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rexy"
block|,
literal|0
block|,
literal|0x42
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rexyz"
block|,
literal|0
block|,
literal|0x43
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rexx"
block|,
literal|0
block|,
literal|0x44
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rexxz"
block|,
literal|0
block|,
literal|0x45
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rexxy"
block|,
literal|0
block|,
literal|0x46
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rexxyz"
block|,
literal|0
block|,
literal|0x47
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex64"
block|,
literal|0
block|,
literal|0x48
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex64z"
block|,
literal|0
block|,
literal|0x49
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex64y"
block|,
literal|0
block|,
literal|0x4a
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex64yz"
block|,
literal|0
block|,
literal|0x4b
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex64x"
block|,
literal|0
block|,
literal|0x4c
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex64xz"
block|,
literal|0
block|,
literal|0x4d
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex64xy"
block|,
literal|0
block|,
literal|0x4e
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rex64xyz"
block|,
literal|0
block|,
literal|0x4f
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|IsPrefix
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* 486 extensions.  */
block|{
literal|"bswap"
block|,
literal|1
block|,
literal|0x0fc8
block|,
name|X
block|,
name|Cpu486
block|,
name|lq_Suf
operator||
name|ShortForm
block|,
block|{
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xadd"
block|,
literal|2
block|,
literal|0x0fc0
block|,
name|X
block|,
name|Cpu486
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpxchg"
block|,
literal|2
block|,
literal|0x0fb0
block|,
name|X
block|,
name|Cpu486
block|,
name|bwlq_Suf
operator||
name|W
operator||
name|Modrm
block|,
block|{
name|Reg
block|,
name|Reg
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"invd"
block|,
literal|0
block|,
literal|0x0f08
block|,
name|X
block|,
name|Cpu486
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"wbinvd"
block|,
literal|0
block|,
literal|0x0f09
block|,
name|X
block|,
name|Cpu486
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"invlpg"
block|,
literal|1
block|,
literal|0x0f01
block|,
literal|7
block|,
name|Cpu486
block|,
name|NoSuf
operator||
name|Modrm
block|,
block|{
name|AnyMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* 586 and late 486 extensions.  */
block|{
literal|"cpuid"
block|,
literal|0
block|,
literal|0x0fa2
block|,
name|X
block|,
name|Cpu486
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Pentium extensions.  */
block|{
literal|"wrmsr"
block|,
literal|0
block|,
literal|0x0f30
block|,
name|X
block|,
name|Cpu586
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rdtsc"
block|,
literal|0
block|,
literal|0x0f31
block|,
name|X
block|,
name|Cpu586
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rdmsr"
block|,
literal|0
block|,
literal|0x0f32
block|,
name|X
block|,
name|Cpu586
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpxchg8b"
block|,
literal|1
block|,
literal|0x0fc7
block|,
literal|1
block|,
name|Cpu586
block|,
name|NoSuf
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Pentium II/Pentium Pro extensions.  */
block|{
literal|"sysenter"
block|,
literal|0
block|,
literal|0x0f34
block|,
name|X
block|,
name|Cpu686
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sysexit"
block|,
literal|0
block|,
literal|0x0f35
block|,
name|X
block|,
name|Cpu686
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fxsave"
block|,
literal|1
block|,
literal|0x0fae
block|,
literal|0
block|,
name|Cpu686
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fxrstor"
block|,
literal|1
block|,
literal|0x0fae
block|,
literal|1
block|,
name|Cpu686
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rdpmc"
block|,
literal|0
block|,
literal|0x0f33
block|,
name|X
block|,
name|Cpu686
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* official undefined instr. */
block|{
literal|"ud2"
block|,
literal|0
block|,
literal|0x0f0b
block|,
name|X
block|,
name|Cpu686
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* alias for ud2 */
block|{
literal|"ud2a"
block|,
literal|0
block|,
literal|0x0f0b
block|,
name|X
block|,
name|Cpu686
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* 2nd. official undefined instr. */
block|{
literal|"ud2b"
block|,
literal|0
block|,
literal|0x0fb9
block|,
name|X
block|,
name|Cpu686
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovo"
block|,
literal|2
block|,
literal|0x0f40
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovno"
block|,
literal|2
block|,
literal|0x0f41
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovb"
block|,
literal|2
block|,
literal|0x0f42
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovc"
block|,
literal|2
block|,
literal|0x0f42
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnae"
block|,
literal|2
block|,
literal|0x0f42
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovae"
block|,
literal|2
block|,
literal|0x0f43
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnc"
block|,
literal|2
block|,
literal|0x0f43
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnb"
block|,
literal|2
block|,
literal|0x0f43
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmove"
block|,
literal|2
block|,
literal|0x0f44
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovz"
block|,
literal|2
block|,
literal|0x0f44
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovne"
block|,
literal|2
block|,
literal|0x0f45
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnz"
block|,
literal|2
block|,
literal|0x0f45
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovbe"
block|,
literal|2
block|,
literal|0x0f46
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovna"
block|,
literal|2
block|,
literal|0x0f46
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmova"
block|,
literal|2
block|,
literal|0x0f47
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnbe"
block|,
literal|2
block|,
literal|0x0f47
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovs"
block|,
literal|2
block|,
literal|0x0f48
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovns"
block|,
literal|2
block|,
literal|0x0f49
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovp"
block|,
literal|2
block|,
literal|0x0f4a
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnp"
block|,
literal|2
block|,
literal|0x0f4b
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovl"
block|,
literal|2
block|,
literal|0x0f4c
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnge"
block|,
literal|2
block|,
literal|0x0f4c
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovge"
block|,
literal|2
block|,
literal|0x0f4d
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnl"
block|,
literal|2
block|,
literal|0x0f4d
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovle"
block|,
literal|2
block|,
literal|0x0f4e
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovng"
block|,
literal|2
block|,
literal|0x0f4e
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovg"
block|,
literal|2
block|,
literal|0x0f4f
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmovnle"
block|,
literal|2
block|,
literal|0x0f4f
block|,
name|X
block|,
name|Cpu686
block|,
name|wlq_Suf
operator||
name|Modrm
block|,
block|{
name|WordReg
operator||
name|WordMem
block|,
name|WordReg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovb"
block|,
literal|2
block|,
literal|0xdac0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovnae"
block|,
literal|2
block|,
literal|0xdac0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmove"
block|,
literal|2
block|,
literal|0xdac8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovbe"
block|,
literal|2
block|,
literal|0xdad0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovna"
block|,
literal|2
block|,
literal|0xdad0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovu"
block|,
literal|2
block|,
literal|0xdad8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovae"
block|,
literal|2
block|,
literal|0xdbc0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovnb"
block|,
literal|2
block|,
literal|0xdbc0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovne"
block|,
literal|2
block|,
literal|0xdbc8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmova"
block|,
literal|2
block|,
literal|0xdbd0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovnbe"
block|,
literal|2
block|,
literal|0xdbd0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcmovnu"
block|,
literal|2
block|,
literal|0xdbd8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcomi"
block|,
literal|2
block|,
literal|0xdbf0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcomi"
block|,
literal|0
block|,
literal|0xdbf1
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcomi"
block|,
literal|1
block|,
literal|0xdbf0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucomi"
block|,
literal|2
block|,
literal|0xdbe8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucomi"
block|,
literal|0
block|,
literal|0xdbe9
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucomi"
block|,
literal|1
block|,
literal|0xdbe8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcomip"
block|,
literal|2
block|,
literal|0xdff0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcomip"
block|,
literal|0
block|,
literal|0xdff1
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcomip"
block|,
literal|1
block|,
literal|0xdff0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcompi"
block|,
literal|2
block|,
literal|0xdff0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcompi"
block|,
literal|0
block|,
literal|0xdff1
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fcompi"
block|,
literal|1
block|,
literal|0xdff0
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucomip"
block|,
literal|2
block|,
literal|0xdfe8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucomip"
block|,
literal|0
block|,
literal|0xdfe9
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucomip"
block|,
literal|1
block|,
literal|0xdfe8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucompi"
block|,
literal|2
block|,
literal|0xdfe8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
name|FloatAcc
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucompi"
block|,
literal|0
block|,
literal|0xdfe9
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fucompi"
block|,
literal|1
block|,
literal|0xdfe8
block|,
name|X
block|,
name|Cpu686
block|,
name|FP
operator||
name|ShortForm
block|,
block|{
name|FloatReg
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Pentium4 extensions.  */
block|{
literal|"movnti"
block|,
literal|2
block|,
literal|0x0fc3
block|,
name|X
block|,
name|CpuP4
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|WordReg
block|,
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"clflush"
block|,
literal|1
block|,
literal|0x0fae
block|,
literal|7
block|,
name|CpuP4
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lfence"
block|,
literal|0
block|,
literal|0x0fae
block|,
literal|0xe8
block|,
name|CpuP4
block|,
name|FP
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mfence"
block|,
literal|0
block|,
literal|0x0fae
block|,
literal|0xf0
block|,
name|CpuP4
block|,
name|FP
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pause"
block|,
literal|0
block|,
literal|0xf390
block|,
name|X
block|,
name|CpuP4
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* MMX/SSE2 instructions.  */
block|{
literal|"emms"
block|,
literal|0
block|,
literal|0x0f77
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movd"
block|,
literal|2
block|,
literal|0x0f6e
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Reg32
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movd"
block|,
literal|2
block|,
literal|0x0f7e
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
block|,
name|Reg32
operator||
name|LongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movd"
block|,
literal|2
block|,
literal|0x660f6e
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Reg32
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movd"
block|,
literal|2
block|,
literal|0x660f7e
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|Reg32
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
comment|/* Real MMX instructions.  */
block|{
literal|"movd"
block|,
literal|2
block|,
literal|0x0f6e
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Reg64
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movd"
block|,
literal|2
block|,
literal|0x0f7e
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
block|,
name|Reg64
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movd"
block|,
literal|2
block|,
literal|0x660f6e
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Reg64
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movd"
block|,
literal|2
block|,
literal|0x660f7e
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|Reg64
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
comment|/* In the 64bit mode the short form mov immediate is redefined to have    64bit displacement value.  */
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0x0f6f
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0x0f7f
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
block|,
name|RegMMX
operator||
name|LongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0xf30f7e
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0x660fd6
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0x88
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|D
operator||
name|W
operator||
name|Modrm
operator||
name|Size64
block|,
block|{
name|Reg64
block|,
name|Reg64
operator||
name|AnyMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0xc6
block|,
literal|0
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|W
operator||
name|Modrm
operator||
name|Size64
block|,
block|{
name|Imm32S
block|,
name|Reg64
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0xb0
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|W
operator||
name|ShortForm
operator||
name|Size64
block|,
block|{
name|Imm64
block|,
name|Reg64
block|,
literal|0
block|}
block|}
block|,
comment|/* Move to/from control debug registers.  In the 16 or 32bit modes they are 32bit.  In the 64bit    mode they are 64bit.*/
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0x0f20
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|D
operator||
name|Modrm
operator||
name|IgnoreSize
operator||
name|NoRex64
operator||
name|Size64
block|,
block|{
name|Control
block|,
name|Reg64
operator||
name|InvMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movq"
block|,
literal|2
block|,
literal|0x0f21
block|,
name|X
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|D
operator||
name|Modrm
operator||
name|IgnoreSize
operator||
name|NoRex64
operator||
name|Size64
block|,
block|{
name|Debug
block|,
name|Reg64
operator||
name|InvMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"packssdw"
block|,
literal|2
block|,
literal|0x0f6b
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"packssdw"
block|,
literal|2
block|,
literal|0x660f6b
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"packsswb"
block|,
literal|2
block|,
literal|0x0f63
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"packsswb"
block|,
literal|2
block|,
literal|0x660f63
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"packuswb"
block|,
literal|2
block|,
literal|0x0f67
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"packuswb"
block|,
literal|2
block|,
literal|0x660f67
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddb"
block|,
literal|2
block|,
literal|0x0ffc
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddb"
block|,
literal|2
block|,
literal|0x660ffc
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddw"
block|,
literal|2
block|,
literal|0x0ffd
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddw"
block|,
literal|2
block|,
literal|0x660ffd
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddd"
block|,
literal|2
block|,
literal|0x0ffe
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddd"
block|,
literal|2
block|,
literal|0x660ffe
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddq"
block|,
literal|2
block|,
literal|0x0fd4
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddq"
block|,
literal|2
block|,
literal|0x660fd4
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddsb"
block|,
literal|2
block|,
literal|0x0fec
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddsb"
block|,
literal|2
block|,
literal|0x660fec
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddsw"
block|,
literal|2
block|,
literal|0x0fed
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddsw"
block|,
literal|2
block|,
literal|0x660fed
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddusb"
block|,
literal|2
block|,
literal|0x0fdc
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddusb"
block|,
literal|2
block|,
literal|0x660fdc
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddusw"
block|,
literal|2
block|,
literal|0x0fdd
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"paddusw"
block|,
literal|2
block|,
literal|0x660fdd
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pand"
block|,
literal|2
block|,
literal|0x0fdb
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pand"
block|,
literal|2
block|,
literal|0x660fdb
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pandn"
block|,
literal|2
block|,
literal|0x0fdf
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pandn"
block|,
literal|2
block|,
literal|0x660fdf
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpeqb"
block|,
literal|2
block|,
literal|0x0f74
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpeqb"
block|,
literal|2
block|,
literal|0x660f74
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpeqw"
block|,
literal|2
block|,
literal|0x0f75
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpeqw"
block|,
literal|2
block|,
literal|0x660f75
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpeqd"
block|,
literal|2
block|,
literal|0x0f76
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpeqd"
block|,
literal|2
block|,
literal|0x660f76
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpgtb"
block|,
literal|2
block|,
literal|0x0f64
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpgtb"
block|,
literal|2
block|,
literal|0x660f64
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpgtw"
block|,
literal|2
block|,
literal|0x0f65
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpgtw"
block|,
literal|2
block|,
literal|0x660f65
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpgtd"
block|,
literal|2
block|,
literal|0x0f66
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pcmpgtd"
block|,
literal|2
block|,
literal|0x660f66
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmaddwd"
block|,
literal|2
block|,
literal|0x0ff5
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmaddwd"
block|,
literal|2
block|,
literal|0x660ff5
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmulhw"
block|,
literal|2
block|,
literal|0x0fe5
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmulhw"
block|,
literal|2
block|,
literal|0x660fe5
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmullw"
block|,
literal|2
block|,
literal|0x0fd5
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmullw"
block|,
literal|2
block|,
literal|0x660fd5
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"por"
block|,
literal|2
block|,
literal|0x0feb
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"por"
block|,
literal|2
block|,
literal|0x660feb
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psllw"
block|,
literal|2
block|,
literal|0x0ff1
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psllw"
block|,
literal|2
block|,
literal|0x660ff1
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psllw"
block|,
literal|2
block|,
literal|0x0f71
block|,
literal|6
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psllw"
block|,
literal|2
block|,
literal|0x660f71
block|,
literal|6
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pslld"
block|,
literal|2
block|,
literal|0x0ff2
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pslld"
block|,
literal|2
block|,
literal|0x660ff2
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pslld"
block|,
literal|2
block|,
literal|0x0f72
block|,
literal|6
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pslld"
block|,
literal|2
block|,
literal|0x660f72
block|,
literal|6
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psllq"
block|,
literal|2
block|,
literal|0x0ff3
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psllq"
block|,
literal|2
block|,
literal|0x660ff3
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psllq"
block|,
literal|2
block|,
literal|0x0f73
block|,
literal|6
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psllq"
block|,
literal|2
block|,
literal|0x660f73
block|,
literal|6
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psraw"
block|,
literal|2
block|,
literal|0x0fe1
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psraw"
block|,
literal|2
block|,
literal|0x660fe1
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psraw"
block|,
literal|2
block|,
literal|0x0f71
block|,
literal|4
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psraw"
block|,
literal|2
block|,
literal|0x660f71
block|,
literal|4
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrad"
block|,
literal|2
block|,
literal|0x0fe2
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrad"
block|,
literal|2
block|,
literal|0x660fe2
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrad"
block|,
literal|2
block|,
literal|0x0f72
block|,
literal|4
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrad"
block|,
literal|2
block|,
literal|0x660f72
block|,
literal|4
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrlw"
block|,
literal|2
block|,
literal|0x0fd1
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrlw"
block|,
literal|2
block|,
literal|0x660fd1
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrlw"
block|,
literal|2
block|,
literal|0x0f71
block|,
literal|2
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrlw"
block|,
literal|2
block|,
literal|0x660f71
block|,
literal|2
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrld"
block|,
literal|2
block|,
literal|0x0fd2
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrld"
block|,
literal|2
block|,
literal|0x660fd2
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrld"
block|,
literal|2
block|,
literal|0x0f72
block|,
literal|2
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrld"
block|,
literal|2
block|,
literal|0x660f72
block|,
literal|2
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrlq"
block|,
literal|2
block|,
literal|0x0fd3
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrlq"
block|,
literal|2
block|,
literal|0x660fd3
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrlq"
block|,
literal|2
block|,
literal|0x0f73
block|,
literal|2
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrlq"
block|,
literal|2
block|,
literal|0x660f73
block|,
literal|2
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubb"
block|,
literal|2
block|,
literal|0x0ff8
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubb"
block|,
literal|2
block|,
literal|0x660ff8
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubw"
block|,
literal|2
block|,
literal|0x0ff9
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubw"
block|,
literal|2
block|,
literal|0x660ff9
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubd"
block|,
literal|2
block|,
literal|0x0ffa
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubd"
block|,
literal|2
block|,
literal|0x660ffa
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubq"
block|,
literal|2
block|,
literal|0x0ffb
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubq"
block|,
literal|2
block|,
literal|0x660ffb
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubsb"
block|,
literal|2
block|,
literal|0x0fe8
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubsb"
block|,
literal|2
block|,
literal|0x660fe8
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubsw"
block|,
literal|2
block|,
literal|0x0fe9
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubsw"
block|,
literal|2
block|,
literal|0x660fe9
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubusb"
block|,
literal|2
block|,
literal|0x0fd8
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubusb"
block|,
literal|2
block|,
literal|0x660fd8
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubusw"
block|,
literal|2
block|,
literal|0x0fd9
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psubusw"
block|,
literal|2
block|,
literal|0x660fd9
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckhbw"
block|,
literal|2
block|,
literal|0x0f68
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckhbw"
block|,
literal|2
block|,
literal|0x660f68
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckhwd"
block|,
literal|2
block|,
literal|0x0f69
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckhwd"
block|,
literal|2
block|,
literal|0x660f69
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckhdq"
block|,
literal|2
block|,
literal|0x0f6a
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckhdq"
block|,
literal|2
block|,
literal|0x660f6a
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpcklbw"
block|,
literal|2
block|,
literal|0x0f60
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpcklbw"
block|,
literal|2
block|,
literal|0x660f60
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpcklwd"
block|,
literal|2
block|,
literal|0x0f61
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpcklwd"
block|,
literal|2
block|,
literal|0x660f61
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckldq"
block|,
literal|2
block|,
literal|0x0f62
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckldq"
block|,
literal|2
block|,
literal|0x660f62
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pxor"
block|,
literal|2
block|,
literal|0x0fef
block|,
name|X
block|,
name|CpuMMX
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pxor"
block|,
literal|2
block|,
literal|0x660fef
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
comment|/* PIII Katmai New Instructions / SIMD instructions.  */
block|{
literal|"addps"
block|,
literal|2
block|,
literal|0x0f58
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"addss"
block|,
literal|2
block|,
literal|0xf30f58
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"andnps"
block|,
literal|2
block|,
literal|0x0f55
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"andps"
block|,
literal|2
block|,
literal|0x0f54
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpeqps"
block|,
literal|2
block|,
literal|0x0fc2
block|,
literal|0
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpeqss"
block|,
literal|2
block|,
literal|0xf30fc2
block|,
literal|0
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpleps"
block|,
literal|2
block|,
literal|0x0fc2
block|,
literal|2
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpless"
block|,
literal|2
block|,
literal|0xf30fc2
block|,
literal|2
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpltps"
block|,
literal|2
block|,
literal|0x0fc2
block|,
literal|1
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpltss"
block|,
literal|2
block|,
literal|0xf30fc2
block|,
literal|1
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpneqps"
block|,
literal|2
block|,
literal|0x0fc2
block|,
literal|4
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpneqss"
block|,
literal|2
block|,
literal|0xf30fc2
block|,
literal|4
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpnleps"
block|,
literal|2
block|,
literal|0x0fc2
block|,
literal|6
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpnless"
block|,
literal|2
block|,
literal|0xf30fc2
block|,
literal|6
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpnltps"
block|,
literal|2
block|,
literal|0x0fc2
block|,
literal|5
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpnltss"
block|,
literal|2
block|,
literal|0xf30fc2
block|,
literal|5
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpordps"
block|,
literal|2
block|,
literal|0x0fc2
block|,
literal|7
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpordss"
block|,
literal|2
block|,
literal|0xf30fc2
block|,
literal|7
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpunordps"
block|,
literal|2
block|,
literal|0x0fc2
block|,
literal|3
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpunordss"
block|,
literal|2
block|,
literal|0xf30fc2
block|,
literal|3
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpps"
block|,
literal|3
block|,
literal|0x0fc2
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"cmpss"
block|,
literal|3
block|,
literal|0xf30fc2
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"comiss"
block|,
literal|2
block|,
literal|0x0f2f
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtpi2ps"
block|,
literal|2
block|,
literal|0x0f2a
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtps2pi"
block|,
literal|2
block|,
literal|0x0f2d
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtsi2ss"
block|,
literal|2
block|,
literal|0xf30f2a
block|,
name|X
block|,
name|CpuSSE
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|Reg32
operator||
name|Reg64
operator||
name|WordMem
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtss2si"
block|,
literal|2
block|,
literal|0xf30f2d
block|,
name|X
block|,
name|CpuSSE
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvttps2pi"
block|,
literal|2
block|,
literal|0x0f2c
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvttss2si"
block|,
literal|2
block|,
literal|0xf30f2c
block|,
name|X
block|,
name|CpuSSE
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"divps"
block|,
literal|2
block|,
literal|0x0f5e
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"divss"
block|,
literal|2
block|,
literal|0xf30f5e
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ldmxcsr"
block|,
literal|1
block|,
literal|0x0fae
block|,
literal|2
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"maskmovq"
block|,
literal|2
block|,
literal|0x0ff7
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|InvMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"maxps"
block|,
literal|2
block|,
literal|0x0f5f
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"maxss"
block|,
literal|2
block|,
literal|0xf30f5f
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"minps"
block|,
literal|2
block|,
literal|0x0f5d
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"minss"
block|,
literal|2
block|,
literal|0xf30f5d
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movaps"
block|,
literal|2
block|,
literal|0x0f28
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movaps"
block|,
literal|2
block|,
literal|0x0f29
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movhlps"
block|,
literal|2
block|,
literal|0x0f12
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|InvMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movhps"
block|,
literal|2
block|,
literal|0x0f16
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movhps"
block|,
literal|2
block|,
literal|0x0f17
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movlhps"
block|,
literal|2
block|,
literal|0x0f16
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|InvMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movlps"
block|,
literal|2
block|,
literal|0x0f12
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movlps"
block|,
literal|2
block|,
literal|0x0f13
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movmskps"
block|,
literal|2
block|,
literal|0x0f50
block|,
name|X
block|,
name|CpuSSE
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|InvMem
block|,
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movntps"
block|,
literal|2
block|,
literal|0x0f2b
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movntq"
block|,
literal|2
block|,
literal|0x0fe7
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
block|,
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movntdq"
block|,
literal|2
block|,
literal|0x660fe7
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movss"
block|,
literal|2
block|,
literal|0xf30f10
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movss"
block|,
literal|2
block|,
literal|0xf30f11
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|WordMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movups"
block|,
literal|2
block|,
literal|0x0f10
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movups"
block|,
literal|2
block|,
literal|0x0f11
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mulps"
block|,
literal|2
block|,
literal|0x0f59
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mulss"
block|,
literal|2
block|,
literal|0xf30f59
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"orps"
block|,
literal|2
block|,
literal|0x0f56
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pavgb"
block|,
literal|2
block|,
literal|0x0fe0
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pavgb"
block|,
literal|2
block|,
literal|0x660fe0
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pavgw"
block|,
literal|2
block|,
literal|0x0fe3
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pavgw"
block|,
literal|2
block|,
literal|0x660fe3
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pextrw"
block|,
literal|3
block|,
literal|0x0fc5
block|,
name|X
block|,
name|CpuSSE
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
operator||
name|InvMem
block|,
name|Reg32
operator||
name|Reg64
block|}
block|}
block|,
block|{
literal|"pextrw"
block|,
literal|3
block|,
literal|0x660fc5
block|,
name|X
block|,
name|CpuSSE2
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|InvMem
block|,
name|Reg32
operator||
name|Reg64
block|}
block|}
block|,
block|{
literal|"pinsrw"
block|,
literal|3
block|,
literal|0x0fc4
block|,
name|X
block|,
name|CpuSSE
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg32
operator||
name|Reg64
operator||
name|ShortMem
block|,
name|RegMMX
block|}
block|}
block|,
block|{
literal|"pinsrw"
block|,
literal|3
block|,
literal|0x660fc4
block|,
name|X
block|,
name|CpuSSE2
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|Reg32
operator||
name|Reg64
operator||
name|ShortMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"pmaxsw"
block|,
literal|2
block|,
literal|0x0fee
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmaxsw"
block|,
literal|2
block|,
literal|0x660fee
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmaxub"
block|,
literal|2
block|,
literal|0x0fde
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmaxub"
block|,
literal|2
block|,
literal|0x660fde
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pminsw"
block|,
literal|2
block|,
literal|0x0fea
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pminsw"
block|,
literal|2
block|,
literal|0x660fea
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pminub"
block|,
literal|2
block|,
literal|0x0fda
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pminub"
block|,
literal|2
block|,
literal|0x660fda
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmovmskb"
block|,
literal|2
block|,
literal|0x0fd7
block|,
name|X
block|,
name|CpuSSE
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|InvMem
block|,
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmovmskb"
block|,
literal|2
block|,
literal|0x660fd7
block|,
name|X
block|,
name|CpuSSE2
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|InvMem
block|,
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmulhuw"
block|,
literal|2
block|,
literal|0x0fe4
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmulhuw"
block|,
literal|2
block|,
literal|0x660fe4
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"prefetchnta"
block|,
literal|1
block|,
literal|0x0f18
block|,
literal|0
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"prefetcht0"
block|,
literal|1
block|,
literal|0x0f18
block|,
literal|1
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"prefetcht1"
block|,
literal|1
block|,
literal|0x0f18
block|,
literal|2
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"prefetcht2"
block|,
literal|1
block|,
literal|0x0f18
block|,
literal|3
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psadbw"
block|,
literal|2
block|,
literal|0x0ff6
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psadbw"
block|,
literal|2
block|,
literal|0x660ff6
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pshufw"
block|,
literal|3
block|,
literal|0x0f70
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
operator||
name|LLongMem
block|,
name|RegMMX
block|}
block|}
block|,
block|{
literal|"rcpps"
block|,
literal|2
block|,
literal|0x0f53
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rcpss"
block|,
literal|2
block|,
literal|0xf30f53
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rsqrtps"
block|,
literal|2
block|,
literal|0x0f52
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"rsqrtss"
block|,
literal|2
block|,
literal|0xf30f52
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sfence"
block|,
literal|0
block|,
literal|0x0fae
block|,
literal|0xf8
block|,
name|CpuSSE
block|,
name|FP
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shufps"
block|,
literal|3
block|,
literal|0x0fc6
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"sqrtps"
block|,
literal|2
block|,
literal|0x0f51
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sqrtss"
block|,
literal|2
block|,
literal|0xf30f51
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"stmxcsr"
block|,
literal|1
block|,
literal|0x0fae
block|,
literal|3
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|WordMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"subps"
block|,
literal|2
block|,
literal|0x0f5c
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"subss"
block|,
literal|2
block|,
literal|0xf30f5c
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ucomiss"
block|,
literal|2
block|,
literal|0x0f2e
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"unpckhps"
block|,
literal|2
block|,
literal|0x0f15
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"unpcklps"
block|,
literal|2
block|,
literal|0x0f14
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xorps"
block|,
literal|2
block|,
literal|0x0f57
block|,
name|X
block|,
name|CpuSSE
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
comment|/* SSE-2 instructions.  */
block|{
literal|"addpd"
block|,
literal|2
block|,
literal|0x660f58
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"addsd"
block|,
literal|2
block|,
literal|0xf20f58
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"andnpd"
block|,
literal|2
block|,
literal|0x660f55
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"andpd"
block|,
literal|2
block|,
literal|0x660f54
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpeqpd"
block|,
literal|2
block|,
literal|0x660fc2
block|,
literal|0
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpeqsd"
block|,
literal|2
block|,
literal|0xf20fc2
block|,
literal|0
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmplepd"
block|,
literal|2
block|,
literal|0x660fc2
block|,
literal|2
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmplesd"
block|,
literal|2
block|,
literal|0xf20fc2
block|,
literal|2
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpltpd"
block|,
literal|2
block|,
literal|0x660fc2
block|,
literal|1
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpltsd"
block|,
literal|2
block|,
literal|0xf20fc2
block|,
literal|1
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpneqpd"
block|,
literal|2
block|,
literal|0x660fc2
block|,
literal|4
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpneqsd"
block|,
literal|2
block|,
literal|0xf20fc2
block|,
literal|4
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpnlepd"
block|,
literal|2
block|,
literal|0x660fc2
block|,
literal|6
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpnlesd"
block|,
literal|2
block|,
literal|0xf20fc2
block|,
literal|6
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpnltpd"
block|,
literal|2
block|,
literal|0x660fc2
block|,
literal|5
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpnltsd"
block|,
literal|2
block|,
literal|0xf20fc2
block|,
literal|5
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpordpd"
block|,
literal|2
block|,
literal|0x660fc2
block|,
literal|7
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpordsd"
block|,
literal|2
block|,
literal|0xf20fc2
block|,
literal|7
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpunordpd"
block|,
literal|2
block|,
literal|0x660fc2
block|,
literal|3
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpunordsd"
block|,
literal|2
block|,
literal|0xf20fc2
block|,
literal|3
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmppd"
block|,
literal|3
block|,
literal|0x660fc2
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|}
block|}
block|,
comment|/* Intel mode string compare.  */
block|{
literal|"cmpsd"
block|,
literal|0
block|,
literal|0xa7
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size32
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpsd"
block|,
literal|2
block|,
literal|0xa7
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size32
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cmpsd"
block|,
literal|3
block|,
literal|0xf20fc2
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"comisd"
block|,
literal|2
block|,
literal|0x660f2f
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtpi2pd"
block|,
literal|2
block|,
literal|0x660f2a
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtsi2sd"
block|,
literal|2
block|,
literal|0xf20f2a
block|,
name|X
block|,
name|CpuSSE2
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|Reg32
operator||
name|Reg64
operator||
name|WordMem
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"divpd"
block|,
literal|2
block|,
literal|0x660f5e
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"divsd"
block|,
literal|2
block|,
literal|0xf20f5e
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"maxpd"
block|,
literal|2
block|,
literal|0x660f5f
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"maxsd"
block|,
literal|2
block|,
literal|0xf20f5f
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"minpd"
block|,
literal|2
block|,
literal|0x660f5d
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"minsd"
block|,
literal|2
block|,
literal|0xf20f5d
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movapd"
block|,
literal|2
block|,
literal|0x660f28
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movapd"
block|,
literal|2
block|,
literal|0x660f29
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movhpd"
block|,
literal|2
block|,
literal|0x660f16
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movhpd"
block|,
literal|2
block|,
literal|0x660f17
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movlpd"
block|,
literal|2
block|,
literal|0x660f12
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movlpd"
block|,
literal|2
block|,
literal|0x660f13
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movmskpd"
block|,
literal|2
block|,
literal|0x660f50
block|,
name|X
block|,
name|CpuSSE2
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|InvMem
block|,
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movntpd"
block|,
literal|2
block|,
literal|0x660f2b
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel mode string move.  */
block|{
literal|"movsd"
block|,
literal|0
block|,
literal|0xa5
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size32
operator||
name|IsString
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsd"
block|,
literal|2
block|,
literal|0xa5
block|,
name|X
block|,
literal|0
block|,
name|NoSuf
operator||
name|Size32
operator||
name|IsString
block|,
block|{
name|AnyMem
block|,
name|AnyMem
operator||
name|EsSeg
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsd"
block|,
literal|2
block|,
literal|0xf20f10
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsd"
block|,
literal|2
block|,
literal|0xf20f11
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|LongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movupd"
block|,
literal|2
block|,
literal|0x660f10
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movupd"
block|,
literal|2
block|,
literal|0x660f11
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mulpd"
block|,
literal|2
block|,
literal|0x660f59
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mulsd"
block|,
literal|2
block|,
literal|0xf20f59
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"orpd"
block|,
literal|2
block|,
literal|0x660f56
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"shufpd"
block|,
literal|3
block|,
literal|0x660fc6
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"sqrtpd"
block|,
literal|2
block|,
literal|0x660f51
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sqrtsd"
block|,
literal|2
block|,
literal|0xf20f51
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"subpd"
block|,
literal|2
block|,
literal|0x660f5c
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"subsd"
block|,
literal|2
block|,
literal|0xf20f5c
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"ucomisd"
block|,
literal|2
block|,
literal|0x660f2e
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"unpckhpd"
block|,
literal|2
block|,
literal|0x660f15
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"unpcklpd"
block|,
literal|2
block|,
literal|0x660f14
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xorpd"
block|,
literal|2
block|,
literal|0x660f57
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtdq2pd"
block|,
literal|2
block|,
literal|0xf30fe6
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtpd2dq"
block|,
literal|2
block|,
literal|0xf20fe6
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtdq2ps"
block|,
literal|2
block|,
literal|0x0f5b
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtpd2pi"
block|,
literal|2
block|,
literal|0x660f2d
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtpd2ps"
block|,
literal|2
block|,
literal|0x660f5a
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtps2pd"
block|,
literal|2
block|,
literal|0x0f5a
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtps2dq"
block|,
literal|2
block|,
literal|0x660f5b
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtsd2si"
block|,
literal|2
block|,
literal|0xf20f2d
block|,
name|X
block|,
name|CpuSSE2
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtsd2ss"
block|,
literal|2
block|,
literal|0xf20f5a
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvtss2sd"
block|,
literal|2
block|,
literal|0xf30f5a
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvttpd2pi"
block|,
literal|2
block|,
literal|0x660f2c
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvttsd2si"
block|,
literal|2
block|,
literal|0xf20f2c
block|,
name|X
block|,
name|CpuSSE2
block|,
name|lq_Suf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|WordMem
block|,
name|Reg32
operator||
name|Reg64
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvttpd2dq"
block|,
literal|2
block|,
literal|0x660fe6
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"cvttps2dq"
block|,
literal|2
block|,
literal|0xf30f5b
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"maskmovdqu"
block|,
literal|2
block|,
literal|0x660ff7
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|InvMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movdqa"
block|,
literal|2
block|,
literal|0x660f6f
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movdqa"
block|,
literal|2
block|,
literal|0x660f7f
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movdqu"
block|,
literal|2
block|,
literal|0xf30f6f
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movdqu"
block|,
literal|2
block|,
literal|0xf30f7f
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
block|,
name|RegXMM
operator||
name|LLongMem
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movdq2q"
block|,
literal|2
block|,
literal|0xf20fd6
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|InvMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movq2dq"
block|,
literal|2
block|,
literal|0xf30fd6
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|InvMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmuludq"
block|,
literal|2
block|,
literal|0x0ff4
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmuludq"
block|,
literal|2
block|,
literal|0x660ff4
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pshufd"
block|,
literal|3
block|,
literal|0x660f70
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"pshufhw"
block|,
literal|3
block|,
literal|0xf30f70
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"pshuflw"
block|,
literal|3
block|,
literal|0xf20f70
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"pslldq"
block|,
literal|2
block|,
literal|0x660f73
block|,
literal|7
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psrldq"
block|,
literal|2
block|,
literal|0x660f73
block|,
literal|3
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpckhqdq"
block|,
literal|2
block|,
literal|0x660f6d
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"punpcklqdq"
block|,
literal|2
block|,
literal|0x660f6c
block|,
name|X
block|,
name|CpuSSE2
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
comment|/* Prescott New Instructions.  */
block|{
literal|"addsubpd"
block|,
literal|2
block|,
literal|0x660fd0
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"addsubps"
block|,
literal|2
block|,
literal|0xf20fd0
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fisttp"
block|,
literal|1
block|,
literal|0xdf
block|,
literal|1
block|,
name|CpuPNI
block|,
name|sl_FP
operator||
name|FloatMF
operator||
name|Modrm
block|,
block|{
name|ShortMem
operator||
name|LongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Intel Syntax */
block|{
literal|"fisttpd"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|1
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fisttpq"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|1
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"fisttpll"
block|,
literal|1
block|,
literal|0xdd
block|,
literal|1
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"haddpd"
block|,
literal|2
block|,
literal|0x660f7c
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"haddps"
block|,
literal|2
block|,
literal|0xf20f7c
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"hsubpd"
block|,
literal|2
block|,
literal|0x660f7d
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"hsubps"
block|,
literal|2
block|,
literal|0xf20f7d
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"lddqu"
block|,
literal|2
block|,
literal|0xf20ff0
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"monitor"
block|,
literal|0
block|,
literal|0x0f01
block|,
literal|0xc8
block|,
name|CpuPNI
block|,
name|FP
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Need to ensure only "monitor %eax,%ecx,%edx" is accepted. */
block|{
literal|"monitor"
block|,
literal|3
block|,
literal|0x0f01
block|,
literal|0xc8
block|,
name|CpuPNI
block|,
name|FP
operator||
name|ImmExt
block|,
block|{
name|Reg32
block|,
name|Reg32
block|,
name|Reg32
block|}
block|}
block|,
block|{
literal|"movddup"
block|,
literal|2
block|,
literal|0xf20f12
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movshdup"
block|,
literal|2
block|,
literal|0xf30f16
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"movsldup"
block|,
literal|2
block|,
literal|0xf30f12
block|,
name|X
block|,
name|CpuPNI
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"mwait"
block|,
literal|0
block|,
literal|0x0f01
block|,
literal|0xc9
block|,
name|CpuPNI
block|,
name|FP
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Need to ensure only "mwait %eax,%ecx" is accepted.  */
block|{
literal|"mwait"
block|,
literal|2
block|,
literal|0x0f01
block|,
literal|0xc9
block|,
name|CpuPNI
block|,
name|FP
operator||
name|ImmExt
block|,
block|{
name|Reg32
block|,
name|Reg32
block|,
literal|0
block|}
block|}
block|,
comment|/* Supplemental Streaming SIMD extensions 3 Instructions.  */
block|{
literal|"phaddw"
block|,
literal|2
block|,
literal|0x0f3801
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phaddw"
block|,
literal|2
block|,
literal|0x660f3801
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phaddd"
block|,
literal|2
block|,
literal|0x0f3802
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phaddd"
block|,
literal|2
block|,
literal|0x660f3802
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phaddsw"
block|,
literal|2
block|,
literal|0x0f3803
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phaddsw"
block|,
literal|2
block|,
literal|0x660f3803
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phsubw"
block|,
literal|2
block|,
literal|0x0f3805
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phsubw"
block|,
literal|2
block|,
literal|0x660f3805
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phsubd"
block|,
literal|2
block|,
literal|0x0f3806
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phsubd"
block|,
literal|2
block|,
literal|0x660f3806
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phsubsw"
block|,
literal|2
block|,
literal|0x0f3807
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"phsubsw"
block|,
literal|2
block|,
literal|0x660f3807
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmaddubsw"
block|,
literal|2
block|,
literal|0x0f3804
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmaddubsw"
block|,
literal|2
block|,
literal|0x660f3804
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmulhrsw"
block|,
literal|2
block|,
literal|0x0f380b
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmulhrsw"
block|,
literal|2
block|,
literal|0x660f380b
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pshufb"
block|,
literal|2
block|,
literal|0x0f3800
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pshufb"
block|,
literal|2
block|,
literal|0x660f3800
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psignb"
block|,
literal|2
block|,
literal|0x0f3808
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psignb"
block|,
literal|2
block|,
literal|0x660f3808
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psignw"
block|,
literal|2
block|,
literal|0x0f3809
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psignw"
block|,
literal|2
block|,
literal|0x660f3809
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psignd"
block|,
literal|2
block|,
literal|0x0f380a
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"psignd"
block|,
literal|2
block|,
literal|0x660f380a
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"palignr"
block|,
literal|3
block|,
literal|0x0f3a0f
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|}
block|}
block|,
block|{
literal|"palignr"
block|,
literal|3
block|,
literal|0x660f3a0f
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|Imm8
block|,
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|}
block|}
block|,
block|{
literal|"pabsb"
block|,
literal|2
block|,
literal|0x0f381c
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pabsb"
block|,
literal|2
block|,
literal|0x660f381c
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pabsw"
block|,
literal|2
block|,
literal|0x0f381d
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pabsw"
block|,
literal|2
block|,
literal|0x660f381d
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pabsd"
block|,
literal|2
block|,
literal|0x0f381e
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pabsd"
block|,
literal|2
block|,
literal|0x660f381e
block|,
name|X
block|,
name|CpuSSSE3
block|,
name|NoSuf
operator||
name|IgnoreSize
operator||
name|Modrm
block|,
block|{
name|RegXMM
operator||
name|LLongMem
block|,
name|RegXMM
block|,
literal|0
block|}
block|}
block|,
comment|/* AMD 3DNow! instructions.  */
block|{
literal|"prefetch"
block|,
literal|1
block|,
literal|0x0f0d
block|,
literal|0
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"prefetchw"
block|,
literal|1
block|,
literal|0x0f0d
block|,
literal|1
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
block|,
block|{
name|ByteMem
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"femms"
block|,
literal|0
block|,
literal|0x0f0e
block|,
name|X
block|,
name|Cpu3dnow
block|,
name|FP
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pavgusb"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xbf
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pf2id"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x1d
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pf2iw"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x1c
block|,
name|Cpu3dnow
operator||
name|Cpu686
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfacc"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xae
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfadd"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x9e
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfcmpeq"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xb0
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfcmpge"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x90
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfcmpgt"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xa0
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfmax"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xa4
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfmin"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x94
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfmul"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xb4
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfnacc"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x8a
block|,
name|Cpu3dnow
operator||
name|Cpu686
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfpnacc"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x8e
block|,
name|Cpu3dnow
operator||
name|Cpu686
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfrcp"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x96
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfrcpit1"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xa6
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfrcpit2"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xb6
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfrsqit1"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xa7
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfrsqrt"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x97
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfsub"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x9a
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pfsubr"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xaa
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pi2fd"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x0d
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pi2fw"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0x0c
block|,
name|Cpu3dnow
operator||
name|Cpu686
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pmulhrw"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xb7
block|,
name|Cpu3dnow
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"pswapd"
block|,
literal|2
block|,
literal|0x0f0f
block|,
literal|0xbb
block|,
name|Cpu3dnow
operator||
name|Cpu686
block|,
name|FP
operator||
name|Modrm
operator||
name|ImmExt
block|,
block|{
name|RegMMX
operator||
name|LongMem
block|,
name|RegMMX
block|,
literal|0
block|}
block|}
block|,
comment|/* AMD extensions. */
block|{
literal|"syscall"
block|,
literal|0
block|,
literal|0x0f05
block|,
name|X
block|,
name|CpuK6
block|,
name|NoSuf
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"sysret"
block|,
literal|0
block|,
literal|0x0f07
block|,
name|X
block|,
name|CpuK6
block|,
name|lq_Suf
operator||
name|DefaultSize
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"swapgs"
block|,
literal|0
block|,
literal|0x0f01
block|,
literal|0xf8
block|,
name|Cpu64
block|,
name|NoSuf
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* VIA PadLock extensions. */
block|{
literal|"xstorerng"
block|,
literal|0
block|,
literal|0x000fa7
block|,
literal|0xc0
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xcryptecb"
block|,
literal|0
block|,
literal|0xf30fa7
block|,
literal|0xc8
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xcryptcbc"
block|,
literal|0
block|,
literal|0xf30fa7
block|,
literal|0xd0
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xcryptcfb"
block|,
literal|0
block|,
literal|0xf30fa7
block|,
literal|0xe0
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xcryptofb"
block|,
literal|0
block|,
literal|0xf30fa7
block|,
literal|0xe8
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"montmul"
block|,
literal|0
block|,
literal|0xf30fa6
block|,
literal|0xc0
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xsha1"
block|,
literal|0
block|,
literal|0xf30fa6
block|,
literal|0xc8
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
block|{
literal|"xsha256"
block|,
literal|0
block|,
literal|0xf30fa6
block|,
literal|0xd0
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* Alias for xstorerng.  */
block|{
literal|"xstore"
block|,
literal|0
block|,
literal|0x000fa7
block|,
literal|0xc0
block|,
name|Cpu686
operator||
name|CpuPadLock
block|,
name|NoSuf
operator||
name|IsString
operator||
name|ImmExt
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|,
comment|/* sentinel */
block|{
name|NULL
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|}
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_undef
undef|#
directive|undef
name|X
end_undef

begin_undef
undef|#
directive|undef
name|NoSuf
end_undef

begin_undef
undef|#
directive|undef
name|b_Suf
end_undef

begin_undef
undef|#
directive|undef
name|w_Suf
end_undef

begin_undef
undef|#
directive|undef
name|l_Suf
end_undef

begin_undef
undef|#
directive|undef
name|q_Suf
end_undef

begin_undef
undef|#
directive|undef
name|x_Suf
end_undef

begin_undef
undef|#
directive|undef
name|bw_Suf
end_undef

begin_undef
undef|#
directive|undef
name|bl_Suf
end_undef

begin_undef
undef|#
directive|undef
name|wl_Suf
end_undef

begin_undef
undef|#
directive|undef
name|wlq_Suf
end_undef

begin_undef
undef|#
directive|undef
name|sl_Suf
end_undef

begin_undef
undef|#
directive|undef
name|bwl_Suf
end_undef

begin_undef
undef|#
directive|undef
name|bwlq_Suf
end_undef

begin_undef
undef|#
directive|undef
name|FP
end_undef

begin_undef
undef|#
directive|undef
name|l_FP
end_undef

begin_undef
undef|#
directive|undef
name|x_FP
end_undef

begin_undef
undef|#
directive|undef
name|sl_FP
end_undef

begin_define
define|#
directive|define
name|MAX_MNEM_SIZE
value|16
end_define

begin_comment
comment|/* for parsing insn mnemonics from input */
end_comment

begin_comment
comment|/* 386 register table.  */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|reg_entry
name|i386_regtab
index|[]
init|=
block|{
comment|/* make %st first as we test for it */
block|{
literal|"st"
block|,
name|FloatReg
operator||
name|FloatAcc
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* 8 bit regs */
define|#
directive|define
name|REGNAM_AL
value|1
comment|/* Entry in i386_regtab.  */
block|{
literal|"al"
block|,
name|Reg8
operator||
name|Acc
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cl"
block|,
name|Reg8
operator||
name|ShiftCount
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"dl"
block|,
name|Reg8
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"bl"
block|,
name|Reg8
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"ah"
block|,
name|Reg8
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"ch"
block|,
name|Reg8
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"dh"
block|,
name|Reg8
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"bh"
block|,
name|Reg8
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"axl"
block|,
name|Reg8
operator||
name|Acc
block|,
name|RegRex64
block|,
literal|0
block|}
block|,
comment|/* Must be in the "al + 8" slot.  */
block|{
literal|"cxl"
block|,
name|Reg8
block|,
name|RegRex64
block|,
literal|1
block|}
block|,
block|{
literal|"dxl"
block|,
name|Reg8
block|,
name|RegRex64
block|,
literal|2
block|}
block|,
block|{
literal|"bxl"
block|,
name|Reg8
block|,
name|RegRex64
block|,
literal|3
block|}
block|,
block|{
literal|"spl"
block|,
name|Reg8
block|,
name|RegRex64
block|,
literal|4
block|}
block|,
block|{
literal|"bpl"
block|,
name|Reg8
block|,
name|RegRex64
block|,
literal|5
block|}
block|,
block|{
literal|"sil"
block|,
name|Reg8
block|,
name|RegRex64
block|,
literal|6
block|}
block|,
block|{
literal|"dil"
block|,
name|Reg8
block|,
name|RegRex64
block|,
literal|7
block|}
block|,
block|{
literal|"r8b"
block|,
name|Reg8
block|,
name|RegRex64
operator||
name|RegRex
block|,
literal|0
block|}
block|,
block|{
literal|"r9b"
block|,
name|Reg8
block|,
name|RegRex64
operator||
name|RegRex
block|,
literal|1
block|}
block|,
block|{
literal|"r10b"
block|,
name|Reg8
block|,
name|RegRex64
operator||
name|RegRex
block|,
literal|2
block|}
block|,
block|{
literal|"r11b"
block|,
name|Reg8
block|,
name|RegRex64
operator||
name|RegRex
block|,
literal|3
block|}
block|,
block|{
literal|"r12b"
block|,
name|Reg8
block|,
name|RegRex64
operator||
name|RegRex
block|,
literal|4
block|}
block|,
block|{
literal|"r13b"
block|,
name|Reg8
block|,
name|RegRex64
operator||
name|RegRex
block|,
literal|5
block|}
block|,
block|{
literal|"r14b"
block|,
name|Reg8
block|,
name|RegRex64
operator||
name|RegRex
block|,
literal|6
block|}
block|,
block|{
literal|"r15b"
block|,
name|Reg8
block|,
name|RegRex64
operator||
name|RegRex
block|,
literal|7
block|}
block|,
comment|/* 16 bit regs */
define|#
directive|define
name|REGNAM_AX
value|25
block|{
literal|"ax"
block|,
name|Reg16
operator||
name|Acc
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cx"
block|,
name|Reg16
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"dx"
block|,
name|Reg16
operator||
name|InOutPortReg
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"bx"
block|,
name|Reg16
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"sp"
block|,
name|Reg16
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"bp"
block|,
name|Reg16
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"si"
block|,
name|Reg16
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"di"
block|,
name|Reg16
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"r8w"
block|,
name|Reg16
block|,
name|RegRex
block|,
literal|0
block|}
block|,
block|{
literal|"r9w"
block|,
name|Reg16
block|,
name|RegRex
block|,
literal|1
block|}
block|,
block|{
literal|"r10w"
block|,
name|Reg16
block|,
name|RegRex
block|,
literal|2
block|}
block|,
block|{
literal|"r11w"
block|,
name|Reg16
block|,
name|RegRex
block|,
literal|3
block|}
block|,
block|{
literal|"r12w"
block|,
name|Reg16
block|,
name|RegRex
block|,
literal|4
block|}
block|,
block|{
literal|"r13w"
block|,
name|Reg16
block|,
name|RegRex
block|,
literal|5
block|}
block|,
block|{
literal|"r14w"
block|,
name|Reg16
block|,
name|RegRex
block|,
literal|6
block|}
block|,
block|{
literal|"r15w"
block|,
name|Reg16
block|,
name|RegRex
block|,
literal|7
block|}
block|,
comment|/* 32 bit regs */
define|#
directive|define
name|REGNAM_EAX
value|41
block|{
literal|"eax"
block|,
name|Reg32
operator||
name|BaseIndex
operator||
name|Acc
block|,
literal|0
block|,
literal|0
block|}
block|,
comment|/* Must be in ax + 16 slot */
block|{
literal|"ecx"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"edx"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"ebx"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"esp"
block|,
name|Reg32
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"ebp"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"esi"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"edi"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"r8d"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|0
block|}
block|,
block|{
literal|"r9d"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|1
block|}
block|,
block|{
literal|"r10d"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|2
block|}
block|,
block|{
literal|"r11d"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|3
block|}
block|,
block|{
literal|"r12d"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|4
block|}
block|,
block|{
literal|"r13d"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|5
block|}
block|,
block|{
literal|"r14d"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|6
block|}
block|,
block|{
literal|"r15d"
block|,
name|Reg32
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|7
block|}
block|,
block|{
literal|"rax"
block|,
name|Reg64
operator||
name|BaseIndex
operator||
name|Acc
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"rcx"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"rdx"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"rbx"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"rsp"
block|,
name|Reg64
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"rbp"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"rsi"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"rdi"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"r8"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|0
block|}
block|,
block|{
literal|"r9"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|1
block|}
block|,
block|{
literal|"r10"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|2
block|}
block|,
block|{
literal|"r11"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|3
block|}
block|,
block|{
literal|"r12"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|4
block|}
block|,
block|{
literal|"r13"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|5
block|}
block|,
block|{
literal|"r14"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|6
block|}
block|,
block|{
literal|"r15"
block|,
name|Reg64
operator||
name|BaseIndex
block|,
name|RegRex
block|,
literal|7
block|}
block|,
comment|/* segment registers */
block|{
literal|"es"
block|,
name|SReg2
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cs"
block|,
name|SReg2
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"ss"
block|,
name|SReg2
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"ds"
block|,
name|SReg2
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"fs"
block|,
name|SReg3
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"gs"
block|,
name|SReg3
block|,
literal|0
block|,
literal|5
block|}
block|,
comment|/* control registers */
block|{
literal|"cr0"
block|,
name|Control
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"cr1"
block|,
name|Control
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"cr2"
block|,
name|Control
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"cr3"
block|,
name|Control
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"cr4"
block|,
name|Control
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"cr5"
block|,
name|Control
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"cr6"
block|,
name|Control
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"cr7"
block|,
name|Control
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"cr8"
block|,
name|Control
block|,
name|RegRex
block|,
literal|0
block|}
block|,
block|{
literal|"cr9"
block|,
name|Control
block|,
name|RegRex
block|,
literal|1
block|}
block|,
block|{
literal|"cr10"
block|,
name|Control
block|,
name|RegRex
block|,
literal|2
block|}
block|,
block|{
literal|"cr11"
block|,
name|Control
block|,
name|RegRex
block|,
literal|3
block|}
block|,
block|{
literal|"cr12"
block|,
name|Control
block|,
name|RegRex
block|,
literal|4
block|}
block|,
block|{
literal|"cr13"
block|,
name|Control
block|,
name|RegRex
block|,
literal|5
block|}
block|,
block|{
literal|"cr14"
block|,
name|Control
block|,
name|RegRex
block|,
literal|6
block|}
block|,
block|{
literal|"cr15"
block|,
name|Control
block|,
name|RegRex
block|,
literal|7
block|}
block|,
comment|/* debug registers */
block|{
literal|"db0"
block|,
name|Debug
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"db1"
block|,
name|Debug
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"db2"
block|,
name|Debug
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"db3"
block|,
name|Debug
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"db4"
block|,
name|Debug
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"db5"
block|,
name|Debug
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"db6"
block|,
name|Debug
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"db7"
block|,
name|Debug
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"db8"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|0
block|}
block|,
block|{
literal|"db9"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|1
block|}
block|,
block|{
literal|"db10"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|2
block|}
block|,
block|{
literal|"db11"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|3
block|}
block|,
block|{
literal|"db12"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|4
block|}
block|,
block|{
literal|"db13"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|5
block|}
block|,
block|{
literal|"db14"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|6
block|}
block|,
block|{
literal|"db15"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|7
block|}
block|,
block|{
literal|"dr0"
block|,
name|Debug
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"dr1"
block|,
name|Debug
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"dr2"
block|,
name|Debug
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"dr3"
block|,
name|Debug
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"dr4"
block|,
name|Debug
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"dr5"
block|,
name|Debug
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"dr6"
block|,
name|Debug
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"dr7"
block|,
name|Debug
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"dr8"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|0
block|}
block|,
block|{
literal|"dr9"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|1
block|}
block|,
block|{
literal|"dr10"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|2
block|}
block|,
block|{
literal|"dr11"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|3
block|}
block|,
block|{
literal|"dr12"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|4
block|}
block|,
block|{
literal|"dr13"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|5
block|}
block|,
block|{
literal|"dr14"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|6
block|}
block|,
block|{
literal|"dr15"
block|,
name|Debug
block|,
name|RegRex
block|,
literal|7
block|}
block|,
comment|/* test registers */
block|{
literal|"tr0"
block|,
name|Test
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"tr1"
block|,
name|Test
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"tr2"
block|,
name|Test
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"tr3"
block|,
name|Test
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"tr4"
block|,
name|Test
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"tr5"
block|,
name|Test
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"tr6"
block|,
name|Test
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"tr7"
block|,
name|Test
block|,
literal|0
block|,
literal|7
block|}
block|,
comment|/* mmx and simd registers */
block|{
literal|"mm0"
block|,
name|RegMMX
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"mm1"
block|,
name|RegMMX
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"mm2"
block|,
name|RegMMX
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"mm3"
block|,
name|RegMMX
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"mm4"
block|,
name|RegMMX
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"mm5"
block|,
name|RegMMX
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"mm6"
block|,
name|RegMMX
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"mm7"
block|,
name|RegMMX
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"xmm0"
block|,
name|RegXMM
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"xmm1"
block|,
name|RegXMM
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"xmm2"
block|,
name|RegXMM
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"xmm3"
block|,
name|RegXMM
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"xmm4"
block|,
name|RegXMM
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"xmm5"
block|,
name|RegXMM
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"xmm6"
block|,
name|RegXMM
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"xmm7"
block|,
name|RegXMM
block|,
literal|0
block|,
literal|7
block|}
block|,
block|{
literal|"xmm8"
block|,
name|RegXMM
block|,
name|RegRex
block|,
literal|0
block|}
block|,
block|{
literal|"xmm9"
block|,
name|RegXMM
block|,
name|RegRex
block|,
literal|1
block|}
block|,
block|{
literal|"xmm10"
block|,
name|RegXMM
block|,
name|RegRex
block|,
literal|2
block|}
block|,
block|{
literal|"xmm11"
block|,
name|RegXMM
block|,
name|RegRex
block|,
literal|3
block|}
block|,
block|{
literal|"xmm12"
block|,
name|RegXMM
block|,
name|RegRex
block|,
literal|4
block|}
block|,
block|{
literal|"xmm13"
block|,
name|RegXMM
block|,
name|RegRex
block|,
literal|5
block|}
block|,
block|{
literal|"xmm14"
block|,
name|RegXMM
block|,
name|RegRex
block|,
literal|6
block|}
block|,
block|{
literal|"xmm15"
block|,
name|RegXMM
block|,
name|RegRex
block|,
literal|7
block|}
block|,
comment|/* no type will make this register rejected for all purposes except      for addressing.  This saves creating one extra type for RIP.  */
block|{
literal|"rip"
block|,
name|BaseIndex
block|,
literal|0
block|,
literal|0
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|reg_entry
name|i386_float_regtab
index|[]
init|=
block|{
block|{
literal|"st(0)"
block|,
name|FloatReg
operator||
name|FloatAcc
block|,
literal|0
block|,
literal|0
block|}
block|,
block|{
literal|"st(1)"
block|,
name|FloatReg
block|,
literal|0
block|,
literal|1
block|}
block|,
block|{
literal|"st(2)"
block|,
name|FloatReg
block|,
literal|0
block|,
literal|2
block|}
block|,
block|{
literal|"st(3)"
block|,
name|FloatReg
block|,
literal|0
block|,
literal|3
block|}
block|,
block|{
literal|"st(4)"
block|,
name|FloatReg
block|,
literal|0
block|,
literal|4
block|}
block|,
block|{
literal|"st(5)"
block|,
name|FloatReg
block|,
literal|0
block|,
literal|5
block|}
block|,
block|{
literal|"st(6)"
block|,
name|FloatReg
block|,
literal|0
block|,
literal|6
block|}
block|,
block|{
literal|"st(7)"
block|,
name|FloatReg
block|,
literal|0
block|,
literal|7
block|}
block|}
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|MAX_REG_NAME_SIZE
value|8
end_define

begin_comment
comment|/* for parsing register names from input */
end_comment

begin_comment
comment|/* segment stuff */
end_comment

begin_decl_stmt
specifier|static
specifier|const
name|seg_entry
name|cs
init|=
block|{
literal|"cs"
block|,
literal|0x2e
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|seg_entry
name|ds
init|=
block|{
literal|"ds"
block|,
literal|0x3e
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|seg_entry
name|ss
init|=
block|{
literal|"ss"
block|,
literal|0x36
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|seg_entry
name|es
init|=
block|{
literal|"es"
block|,
literal|0x26
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|seg_entry
name|fs
init|=
block|{
literal|"fs"
block|,
literal|0x64
block|}
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
specifier|const
name|seg_entry
name|gs
init|=
block|{
literal|"gs"
block|,
literal|0x65
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* end of opcode/i386.h */
end_comment

end_unit

