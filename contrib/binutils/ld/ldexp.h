begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* ldexp.h -    Copyright 1991, 1992, 1993, 1994, 1995, 1998, 1999, 2000, 2001, 2002    Free Software Foundation, Inc.     This file is part of GLD, the Gnu Linker.     GLD is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     GLD is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with GLD; see the file COPYING.  If not, write to the Free    Software Foundation, 59 Temple Place - Suite 330, Boston, MA    02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|LDEXP_H
end_ifndef

begin_define
define|#
directive|define
name|LDEXP_H
end_define

begin_comment
comment|/* The result of an expression tree */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
name|bfd_vma
name|value
decl_stmt|;
name|char
modifier|*
name|str
decl_stmt|;
name|struct
name|lang_output_section_statement_struct
modifier|*
name|section
decl_stmt|;
name|boolean
name|valid_p
decl_stmt|;
block|}
name|etree_value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|node_code
decl_stmt|;
enum|enum
block|{
name|etree_binary
block|,
name|etree_trinary
block|,
name|etree_unary
block|,
name|etree_name
block|,
name|etree_assign
block|,
name|etree_provide
block|,
name|etree_provided
block|,
name|etree_undef
block|,
name|etree_unspec
block|,
name|etree_value
block|,
name|etree_assert
block|,
name|etree_rel
block|}
name|node_class
enum|;
block|}
name|node_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
union|union
name|etree_union
block|{
name|node_type
name|type
decl_stmt|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|union
name|etree_union
modifier|*
name|lhs
decl_stmt|;
name|union
name|etree_union
modifier|*
name|rhs
decl_stmt|;
block|}
name|binary
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|union
name|etree_union
modifier|*
name|cond
decl_stmt|;
name|union
name|etree_union
modifier|*
name|lhs
decl_stmt|;
name|union
name|etree_union
modifier|*
name|rhs
decl_stmt|;
block|}
name|trinary
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|dst
decl_stmt|;
name|union
name|etree_union
modifier|*
name|src
decl_stmt|;
block|}
name|assign
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|union
name|etree_union
modifier|*
name|child
decl_stmt|;
block|}
name|unary
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
name|name
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|bfd_vma
name|value
decl_stmt|;
name|char
modifier|*
name|str
decl_stmt|;
block|}
name|value
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|asection
modifier|*
name|section
decl_stmt|;
name|bfd_vma
name|value
decl_stmt|;
block|}
name|rel
struct|;
struct|struct
block|{
name|node_type
name|type
decl_stmt|;
name|union
name|etree_union
modifier|*
name|child
decl_stmt|;
specifier|const
name|char
modifier|*
name|message
decl_stmt|;
block|}
name|assert_s
struct|;
block|}
name|etree_type
typedef|;
end_typedef

begin_struct
specifier|extern
struct|struct
name|exp_data_seg
block|{
enum|enum
block|{
name|exp_dataseg_none
block|,
name|exp_dataseg_align_seen
block|,
name|exp_dataseg_end_seen
block|,
name|exp_dataseg_adjust
block|}
name|phase
enum|;
name|bfd_vma
name|base
decl_stmt|,
name|end
decl_stmt|,
name|pagesize
decl_stmt|;
block|}
name|exp_data_seg
struct|;
end_struct

begin_typedef
typedef|typedef
name|struct
name|_fill_type
name|fill_type
typedef|;
end_typedef

begin_decl_stmt
name|etree_type
modifier|*
name|exp_intop
name|PARAMS
argument_list|(
operator|(
name|bfd_vma
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_bigintop
name|PARAMS
argument_list|(
operator|(
name|bfd_vma
operator|,
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_relop
name|PARAMS
argument_list|(
operator|(
name|asection
operator|*
operator|,
name|bfd_vma
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_value_type
name|invalid
name|PARAMS
argument_list|(
operator|(
name|void
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_value_type
name|exp_fold_tree
name|PARAMS
argument_list|(
operator|(
name|etree_type
operator|*
operator|,
expr|struct
name|lang_output_section_statement_struct
operator|*
operator|,
name|lang_phase_type
operator|,
name|bfd_vma
operator|,
name|bfd_vma
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_binop
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
name|etree_type
operator|*
operator|,
name|etree_type
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_trinop
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
name|etree_type
operator|*
operator|,
name|etree_type
operator|*
operator|,
name|etree_type
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_unop
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
name|etree_type
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_nameop
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_assop
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|char
operator|*
operator|,
name|etree_type
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_provide
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|,
name|etree_type
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|etree_type
modifier|*
name|exp_assert
name|PARAMS
argument_list|(
operator|(
name|etree_type
operator|*
operator|,
specifier|const
name|char
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|void
name|exp_print_tree
name|PARAMS
argument_list|(
operator|(
name|etree_type
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bfd_vma
name|exp_get_vma
name|PARAMS
argument_list|(
operator|(
name|etree_type
operator|*
operator|,
name|bfd_vma
operator|,
name|char
operator|*
operator|,
name|lang_phase_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|exp_get_value_int
name|PARAMS
argument_list|(
operator|(
name|etree_type
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|,
name|lang_phase_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|fill_type
modifier|*
name|exp_get_fill
name|PARAMS
argument_list|(
operator|(
name|etree_type
operator|*
operator|,
name|fill_type
operator|*
operator|,
name|char
operator|*
operator|,
name|lang_phase_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bfd_vma
name|exp_get_abs_int
name|PARAMS
argument_list|(
operator|(
name|etree_type
operator|*
operator|,
name|int
operator|,
name|char
operator|*
operator|,
name|lang_phase_type
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|bfd_vma
name|align_n
name|PARAMS
argument_list|(
operator|(
name|bfd_vma
operator|,
name|bfd_vma
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

