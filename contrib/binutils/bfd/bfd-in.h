begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Main header file for the bfd library -- portable access to object files.     Copyright 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,    1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.     Contributed by Cygnus Support.     This file is part of BFD, the Binary File Descriptor library.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__BFD_H_SEEN__
end_ifndef

begin_define
define|#
directive|define
name|__BFD_H_SEEN__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|"ansidecl.h"
include|#
directive|include
file|"symcat.h"
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALMOST_STDC
argument_list|)
operator|||
name|defined
argument_list|(
name|HAVE_STRINGIZE
argument_list|)
ifndef|#
directive|ifndef
name|SABER
comment|/* This hack is to avoid a problem with some strict ANSI C preprocessors.    The problem is, "32_" is not a valid preprocessing token, and we don't    want extra underscores (e.g., "nlm_32_").  The XCONCAT2 macro will    cause the inner CONCAT2 macros to be evaluated first, producing    still-valid pp-tokens.  Then the final concatenation can be done.  */
undef|#
directive|undef
name|CONCAT4
define|#
directive|define
name|CONCAT4
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
value|XCONCAT2(CONCAT2(a,b),CONCAT2(c,d))
endif|#
directive|endif
endif|#
directive|endif
comment|/* The word size used by BFD on the host.  This may be 64 with a 32    bit target if the host is 64 bit, or if other 64 bit targets have    been selected with --enable-targets, or if --enable-64-bit-bfd.  */
define|#
directive|define
name|BFD_ARCH_SIZE
value|@wordsize@
comment|/* The word size of the default bfd target.  */
define|#
directive|define
name|BFD_DEFAULT_TARGET_SIZE
value|@bfd_default_target_size@
define|#
directive|define
name|BFD_HOST_64BIT_LONG
value|@BFD_HOST_64BIT_LONG@
define|#
directive|define
name|BFD_HOST_LONG_LONG
value|@BFD_HOST_LONG_LONG@
if|#
directive|if
if|@
name|BFD_HOST_64_BIT_DEFINED
expr|@
define|#
directive|define
name|BFD_HOST_64_BIT
value|@BFD_HOST_64_BIT@
define|#
directive|define
name|BFD_HOST_U_64_BIT
value|@BFD_HOST_U_64_BIT@
typedef|typedef
name|BFD_HOST_64_BIT
name|bfd_int64_t
typedef|;
typedef|typedef
name|BFD_HOST_U_64_BIT
name|bfd_uint64_t
typedef|;
endif|#
directive|endif
if|#
directive|if
name|BFD_ARCH_SIZE
operator|>=
literal|64
define|#
directive|define
name|BFD64
endif|#
directive|endif
ifndef|#
directive|ifndef
name|INLINE
if|#
directive|if
name|__GNUC__
operator|>=
literal|2
define|#
directive|define
name|INLINE
value|__inline__
else|#
directive|else
define|#
directive|define
name|INLINE
endif|#
directive|endif
endif|#
directive|endif
comment|/* Forward declaration.  */
typedef|typedef
name|struct
name|bfd
name|bfd
typedef|;
comment|/* Boolean type used in bfd.  Too many systems define their own    versions of "boolean" for us to safely typedef a "boolean" of    our own.  Using an enum for "bfd_boolean" has its own set of    problems, with strange looking casts required to avoid warnings    on some older compilers.  Thus we just use an int.     General rule: Functions which are bfd_boolean return TRUE on    success and FALSE on failure (unless they're a predicate).  */
typedef|typedef
name|int
name|bfd_boolean
typedef|;
undef|#
directive|undef
name|FALSE
undef|#
directive|undef
name|TRUE
define|#
directive|define
name|FALSE
value|0
define|#
directive|define
name|TRUE
value|1
if|#
directive|if
literal|0
comment|/* Poison.  */
undef|#
directive|undef
name|false
undef|#
directive|undef
name|true
define|#
directive|define
name|false
value|dont_use_false_in_bfd
define|#
directive|define
name|true
value|dont_use_true_in_bfd
endif|#
directive|endif
ifdef|#
directive|ifdef
name|BFD64
ifndef|#
directive|ifndef
name|BFD_HOST_64_BIT
error|#
directive|error
error|No 64 bit integer type available
endif|#
directive|endif
comment|/* ! defined (BFD_HOST_64_BIT) */
typedef|typedef
name|BFD_HOST_U_64_BIT
name|bfd_vma
typedef|;
typedef|typedef
name|BFD_HOST_64_BIT
name|bfd_signed_vma
typedef|;
typedef|typedef
name|BFD_HOST_U_64_BIT
name|bfd_size_type
typedef|;
typedef|typedef
name|BFD_HOST_U_64_BIT
name|symvalue
typedef|;
ifndef|#
directive|ifndef
name|fprintf_vma
if|#
directive|if
name|BFD_HOST_64BIT_LONG
define|#
directive|define
name|sprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
value|sprintf (s, "%016lx", x)
define|#
directive|define
name|fprintf_vma
parameter_list|(
name|f
parameter_list|,
name|x
parameter_list|)
value|fprintf (f, "%016lx", x)
else|#
directive|else
define|#
directive|define
name|_bfd_int64_low
parameter_list|(
name|x
parameter_list|)
value|((unsigned long) (((x)& 0xffffffff)))
define|#
directive|define
name|_bfd_int64_high
parameter_list|(
name|x
parameter_list|)
value|((unsigned long) (((x)>> 32)& 0xffffffff))
define|#
directive|define
name|fprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
define|\
value|fprintf ((s), "%08lx%08lx", _bfd_int64_high (x), _bfd_int64_low (x))
define|#
directive|define
name|sprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
define|\
value|sprintf ((s), "%08lx%08lx", _bfd_int64_high (x), _bfd_int64_low (x))
endif|#
directive|endif
endif|#
directive|endif
else|#
directive|else
comment|/* not BFD64  */
comment|/* Represent a target address.  Also used as a generic unsigned type    which is guaranteed to be big enough to hold any arithmetic types    we need to deal with.  */
typedef|typedef
name|unsigned
name|long
name|bfd_vma
typedef|;
comment|/* A generic signed type which is guaranteed to be big enough to hold any    arithmetic types we need to deal with.  Can be assumed to be compatible    with bfd_vma in the same way that signed and unsigned ints are compatible    (as parameters, in assignment, etc).  */
typedef|typedef
name|long
name|bfd_signed_vma
typedef|;
typedef|typedef
name|unsigned
name|long
name|symvalue
typedef|;
typedef|typedef
name|unsigned
name|long
name|bfd_size_type
typedef|;
comment|/* Print a bfd_vma x on stream s.  */
define|#
directive|define
name|fprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
value|fprintf (s, "%08lx", x)
define|#
directive|define
name|sprintf_vma
parameter_list|(
name|s
parameter_list|,
name|x
parameter_list|)
value|sprintf (s, "%08lx", x)
endif|#
directive|endif
comment|/* not BFD64  */
ifndef|#
directive|ifndef
name|BFD_HOST_64_BIT
comment|/* Fall back on a 32 bit type.  The idea is to make these types always    available for function return types, but in the case that    BFD_HOST_64_BIT is undefined such a function should abort or    otherwise signal an error.  */
typedef|typedef
name|bfd_signed_vma
name|bfd_int64_t
typedef|;
typedef|typedef
name|bfd_vma
name|bfd_uint64_t
typedef|;
endif|#
directive|endif
comment|/* An offset into a file.  BFD always uses the largest possible offset    based on the build time availability of fseek, fseeko, or fseeko64.  */
typedef|typedef @
name|bfd_file_ptr
expr|@
name|file_ptr
expr_stmt|;
typedef|typedef
name|unsigned
expr|@
name|bfd_file_ptr
expr|@
name|ufile_ptr
expr_stmt|;
specifier|extern
name|void
name|bfd_sprintf_vma
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_fprintf_vma
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
define|#
directive|define
name|printf_vma
parameter_list|(
name|x
parameter_list|)
value|fprintf_vma(stdout,x)
define|#
directive|define
name|bfd_printf_vma
parameter_list|(
name|abfd
parameter_list|,
name|x
parameter_list|)
value|bfd_fprintf_vma (abfd,stdout,x)
typedef|typedef
name|unsigned
name|int
name|flagword
typedef|;
comment|/* 32 bits of flags */
typedef|typedef
name|unsigned
name|char
name|bfd_byte
typedef|;
comment|/* File formats.  */
typedef|typedef
enum|enum
name|bfd_format
block|{
name|bfd_unknown
init|=
literal|0
block|,
comment|/* File format is unknown.  */
name|bfd_object
block|,
comment|/* Linker/assembler/compiler output.  */
name|bfd_archive
block|,
comment|/* Object archive file.  */
name|bfd_core
block|,
comment|/* Core dump.  */
name|bfd_type_end
comment|/* Marks the end; don't use it!  */
block|}
name|bfd_format
typedef|;
comment|/* Values that may appear in the flags field of a BFD.  These also    appear in the object_flags field of the bfd_target structure, where    they indicate the set of flags used by that backend (not all flags    are meaningful for all object file formats) (FIXME: at the moment,    the object_flags values have mostly just been copied from backend    to another, and are not necessarily correct).  */
comment|/* No flags.  */
define|#
directive|define
name|BFD_NO_FLAGS
value|0x00
comment|/* BFD contains relocation entries.  */
define|#
directive|define
name|HAS_RELOC
value|0x01
comment|/* BFD is directly executable.  */
define|#
directive|define
name|EXEC_P
value|0x02
comment|/* BFD has line number information (basically used for F_LNNO in a    COFF header).  */
define|#
directive|define
name|HAS_LINENO
value|0x04
comment|/* BFD has debugging information.  */
define|#
directive|define
name|HAS_DEBUG
value|0x08
comment|/* BFD has symbols.  */
define|#
directive|define
name|HAS_SYMS
value|0x10
comment|/* BFD has local symbols (basically used for F_LSYMS in a COFF    header).  */
define|#
directive|define
name|HAS_LOCALS
value|0x20
comment|/* BFD is a dynamic object.  */
define|#
directive|define
name|DYNAMIC
value|0x40
comment|/* Text section is write protected (if D_PAGED is not set, this is    like an a.out NMAGIC file) (the linker sets this by default, but    clears it for -r or -N).  */
define|#
directive|define
name|WP_TEXT
value|0x80
comment|/* BFD is dynamically paged (this is like an a.out ZMAGIC file) (the    linker sets this by default, but clears it for -r or -n or -N).  */
define|#
directive|define
name|D_PAGED
value|0x100
comment|/* BFD is relaxable (this means that bfd_relax_section may be able to    do something) (sometimes bfd_relax_section can do something even if    this is not set).  */
define|#
directive|define
name|BFD_IS_RELAXABLE
value|0x200
comment|/* This may be set before writing out a BFD to request using a    traditional format.  For example, this is used to request that when    writing out an a.out object the symbols not be hashed to eliminate    duplicates.  */
define|#
directive|define
name|BFD_TRADITIONAL_FORMAT
value|0x400
comment|/* This flag indicates that the BFD contents are actually cached in    memory.  If this is set, iostream points to a bfd_in_memory struct.  */
define|#
directive|define
name|BFD_IN_MEMORY
value|0x800
comment|/* The sections in this BFD specify a memory page.  */
define|#
directive|define
name|HAS_LOAD_PAGE
value|0x1000
comment|/* Symbols and relocation.  */
comment|/* A count of carsyms (canonical archive symbols).  */
typedef|typedef
name|unsigned
name|long
name|symindex
typedef|;
comment|/* How to perform a relocation.  */
typedef|typedef
specifier|const
name|struct
name|reloc_howto_struct
name|reloc_howto_type
typedef|;
define|#
directive|define
name|BFD_NO_MORE_SYMBOLS
value|((symindex) ~0)
comment|/* General purpose part of a symbol X;    target specific parts are in libcoff.h, libaout.h, etc.  */
define|#
directive|define
name|bfd_get_section
parameter_list|(
name|x
parameter_list|)
value|((x)->section)
define|#
directive|define
name|bfd_get_output_section
parameter_list|(
name|x
parameter_list|)
value|((x)->section->output_section)
define|#
directive|define
name|bfd_set_section
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|((x)->section) = (y)
define|#
directive|define
name|bfd_asymbol_base
parameter_list|(
name|x
parameter_list|)
value|((x)->section->vma)
define|#
directive|define
name|bfd_asymbol_value
parameter_list|(
name|x
parameter_list|)
value|(bfd_asymbol_base(x) + (x)->value)
define|#
directive|define
name|bfd_asymbol_name
parameter_list|(
name|x
parameter_list|)
value|((x)->name)
comment|/*Perhaps future: #define bfd_asymbol_bfd(x) ((x)->section->owner)*/
define|#
directive|define
name|bfd_asymbol_bfd
parameter_list|(
name|x
parameter_list|)
value|((x)->the_bfd)
define|#
directive|define
name|bfd_asymbol_flavour
parameter_list|(
name|x
parameter_list|)
value|(bfd_asymbol_bfd(x)->xvec->flavour)
comment|/* A canonical archive symbol.  */
comment|/* This is a type pun with struct ranlib on purpose!  */
typedef|typedef
struct|struct
name|carsym
block|{
name|char
modifier|*
name|name
decl_stmt|;
name|file_ptr
name|file_offset
decl_stmt|;
comment|/* Look here to find the file.  */
block|}
name|carsym
typedef|;
comment|/* To make these you call a carsymogen.  */
comment|/* Used in generating armaps (archive tables of contents).    Perhaps just a forward definition would do?  */
struct|struct
name|orl
comment|/* Output ranlib.  */
block|{
name|char
modifier|*
modifier|*
name|name
decl_stmt|;
comment|/* Symbol name.  */
union|union
block|{
name|file_ptr
name|pos
decl_stmt|;
name|bfd
modifier|*
name|abfd
decl_stmt|;
block|}
name|u
union|;
comment|/* bfd* or file position.  */
name|int
name|namidx
decl_stmt|;
comment|/* Index into string table.  */
block|}
struct|;
comment|/* Linenumber stuff.  */
typedef|typedef
struct|struct
name|lineno_cache_entry
block|{
name|unsigned
name|int
name|line_number
decl_stmt|;
comment|/* Linenumber from start of function.  */
union|union
block|{
name|struct
name|bfd_symbol
modifier|*
name|sym
decl_stmt|;
comment|/* Function name.  */
name|bfd_vma
name|offset
decl_stmt|;
comment|/* Offset into section.  */
block|}
name|u
union|;
block|}
name|alent
typedef|;
comment|/* Object and core file sections.  */
define|#
directive|define
name|align_power
parameter_list|(
name|addr
parameter_list|,
name|align
parameter_list|)
define|\
value|(((addr) + ((bfd_vma) 1<< (align)) - 1)& ((bfd_vma) -1<< (align)))
typedef|typedef
name|struct
name|bfd_section
modifier|*
name|sec_ptr
typedef|;
define|#
directive|define
name|bfd_get_section_name
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->name + 0)
define|#
directive|define
name|bfd_get_section_vma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->vma + 0)
define|#
directive|define
name|bfd_get_section_lma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->lma + 0)
define|#
directive|define
name|bfd_get_section_alignment
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->alignment_power + 0)
define|#
directive|define
name|bfd_section_name
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->name)
define|#
directive|define
name|bfd_section_size
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|(bfd_get_section_size_before_reloc(ptr))
define|#
directive|define
name|bfd_section_vma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->vma)
define|#
directive|define
name|bfd_section_lma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->lma)
define|#
directive|define
name|bfd_section_alignment
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->alignment_power)
define|#
directive|define
name|bfd_get_section_flags
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->flags + 0)
define|#
directive|define
name|bfd_get_section_userdata
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|)
value|((ptr)->userdata)
define|#
directive|define
name|bfd_is_com_section
parameter_list|(
name|ptr
parameter_list|)
value|(((ptr)->flags& SEC_IS_COMMON) != 0)
define|#
directive|define
name|bfd_set_section_vma
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|,
name|val
parameter_list|)
value|(((ptr)->vma = (ptr)->lma = (val)), ((ptr)->user_set_vma = TRUE), TRUE)
define|#
directive|define
name|bfd_set_section_alignment
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|,
name|val
parameter_list|)
value|(((ptr)->alignment_power = (val)),TRUE)
define|#
directive|define
name|bfd_set_section_userdata
parameter_list|(
name|bfd
parameter_list|,
name|ptr
parameter_list|,
name|val
parameter_list|)
value|(((ptr)->userdata = (val)),TRUE)
typedef|typedef
name|struct
name|stat
name|stat_type
typedef|;
typedef|typedef
enum|enum
name|bfd_print_symbol
block|{
name|bfd_print_symbol_name
block|,
name|bfd_print_symbol_more
block|,
name|bfd_print_symbol_all
block|}
name|bfd_print_symbol_type
typedef|;
comment|/* Information about a symbol that nm needs.  */
typedef|typedef
struct|struct
name|_symbol_info
block|{
name|symvalue
name|value
decl_stmt|;
name|char
name|type
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Symbol name.  */
name|unsigned
name|char
name|stab_type
decl_stmt|;
comment|/* Stab type.  */
name|char
name|stab_other
decl_stmt|;
comment|/* Stab other.  */
name|short
name|stab_desc
decl_stmt|;
comment|/* Stab desc.  */
specifier|const
name|char
modifier|*
name|stab_name
decl_stmt|;
comment|/* String for stab type.  */
block|}
name|symbol_info
typedef|;
comment|/* Get the name of a stabs type code.  */
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_get_stab_name
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* Hash table routines.  There is no way to free up a hash table.  */
comment|/* An element in the hash table.  Most uses will actually use a larger    structure, and an instance of this will be the first field.  */
struct|struct
name|bfd_hash_entry
block|{
comment|/* Next entry for this hash code.  */
name|struct
name|bfd_hash_entry
modifier|*
name|next
decl_stmt|;
comment|/* String being hashed.  */
specifier|const
name|char
modifier|*
name|string
decl_stmt|;
comment|/* Hash code.  This is the full hash code, not the index into the      table.  */
name|unsigned
name|long
name|hash
decl_stmt|;
block|}
struct|;
comment|/* A hash table.  */
struct|struct
name|bfd_hash_table
block|{
comment|/* The hash array.  */
name|struct
name|bfd_hash_entry
modifier|*
modifier|*
name|table
decl_stmt|;
comment|/* The number of slots in the hash table.  */
name|unsigned
name|int
name|size
decl_stmt|;
comment|/* A function used to create new elements in the hash table.  The      first entry is itself a pointer to an element.  When this      function is first invoked, this pointer will be NULL.  However,      having the pointer permits a hierarchy of method functions to be      built each of which calls the function in the superclass.  Thus      each function should be written to allocate a new block of memory      only if the argument is NULL.  */
name|struct
name|bfd_hash_entry
modifier|*
function_decl|(
modifier|*
name|newfunc
function_decl|)
parameter_list|(
name|struct
name|bfd_hash_entry
modifier|*
parameter_list|,
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* An objalloc for this hash table.  This is a struct objalloc *,      but we use void * to avoid requiring the inclusion of objalloc.h.  */
name|void
modifier|*
name|memory
decl_stmt|;
block|}
struct|;
comment|/* Initialize a hash table.  */
specifier|extern
name|bfd_boolean
name|bfd_hash_table_init
argument_list|(
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
expr|struct
name|bfd_hash_entry
operator|*
call|(
modifier|*
call|)
argument_list|(
expr|struct
name|bfd_hash_entry
operator|*
argument_list|,
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
argument_list|)
decl_stmt|;
comment|/* Initialize a hash table specifying a size.  */
specifier|extern
name|bfd_boolean
name|bfd_hash_table_init_n
argument_list|(
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
expr|struct
name|bfd_hash_entry
operator|*
call|(
modifier|*
call|)
argument_list|(
expr|struct
name|bfd_hash_entry
operator|*
argument_list|,
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
argument_list|,
name|unsigned
name|int
name|size
argument_list|)
decl_stmt|;
comment|/* Free up a hash table.  */
specifier|extern
name|void
name|bfd_hash_table_free
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|)
function_decl|;
comment|/* Look up a string in a hash table.  If CREATE is TRUE, a new entry    will be created for this string if one does not already exist.  The    COPY argument must be TRUE if this routine should copy the string    into newly allocated memory when adding an entry.  */
specifier|extern
name|struct
name|bfd_hash_entry
modifier|*
name|bfd_hash_lookup
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|bfd_boolean
name|create
parameter_list|,
name|bfd_boolean
name|copy
parameter_list|)
function_decl|;
comment|/* Replace an entry in a hash table.  */
specifier|extern
name|void
name|bfd_hash_replace
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
name|struct
name|bfd_hash_entry
modifier|*
name|old
parameter_list|,
name|struct
name|bfd_hash_entry
modifier|*
name|nw
parameter_list|)
function_decl|;
comment|/* Base method for creating a hash table entry.  */
specifier|extern
name|struct
name|bfd_hash_entry
modifier|*
name|bfd_hash_newfunc
parameter_list|(
name|struct
name|bfd_hash_entry
modifier|*
parameter_list|,
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Grab some space for a hash table entry.  */
specifier|extern
name|void
modifier|*
name|bfd_hash_allocate
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
comment|/* Traverse a hash table in a random order, calling a function on each    element.  If the function returns FALSE, the traversal stops.  The    INFO argument is passed to the function.  */
specifier|extern
name|void
name|bfd_hash_traverse
parameter_list|(
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
name|bfd_boolean
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|struct
name|bfd_hash_entry
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|void
modifier|*
name|info
parameter_list|)
function_decl|;
define|#
directive|define
name|COFF_SWAP_TABLE
value|(void *)&bfd_coff_std_swap_table
comment|/* User program access to BFD facilities.  */
comment|/* Direct I/O routines, for programs which know more about the object    file than BFD does.  Use higher level routines if possible.  */
specifier|extern
name|bfd_size_type
name|bfd_bread
parameter_list|(
name|void
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_size_type
name|bfd_bwrite
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|bfd_seek
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|file_ptr
name|bfd_tell
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|bfd_flush
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|int
name|bfd_stat
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|stat
modifier|*
parameter_list|)
function_decl|;
comment|/* Deprecated old routines.  */
if|#
directive|if
name|__GNUC__
define|#
directive|define
name|bfd_read
parameter_list|(
name|BUF
parameter_list|,
name|ELTSIZE
parameter_list|,
name|NITEMS
parameter_list|,
name|ABFD
parameter_list|)
define|\
value|(warn_deprecated ("bfd_read", __FILE__, __LINE__, __FUNCTION__),	\    bfd_bread ((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
define|#
directive|define
name|bfd_write
parameter_list|(
name|BUF
parameter_list|,
name|ELTSIZE
parameter_list|,
name|NITEMS
parameter_list|,
name|ABFD
parameter_list|)
define|\
value|(warn_deprecated ("bfd_write", __FILE__, __LINE__, __FUNCTION__),	\    bfd_bwrite ((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
else|#
directive|else
define|#
directive|define
name|bfd_read
parameter_list|(
name|BUF
parameter_list|,
name|ELTSIZE
parameter_list|,
name|NITEMS
parameter_list|,
name|ABFD
parameter_list|)
define|\
value|(warn_deprecated ("bfd_read", (const char *) 0, 0, (const char *) 0), \    bfd_bread ((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
define|#
directive|define
name|bfd_write
parameter_list|(
name|BUF
parameter_list|,
name|ELTSIZE
parameter_list|,
name|NITEMS
parameter_list|,
name|ABFD
parameter_list|)
define|\
value|(warn_deprecated ("bfd_write", (const char *) 0, 0, (const char *) 0),\    bfd_bwrite ((BUF), (ELTSIZE) * (NITEMS), (ABFD)))
endif|#
directive|endif
specifier|extern
name|void
name|warn_deprecated
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Cast from const char * to char * so that caller can assign to    a char * without a warning.  */
define|#
directive|define
name|bfd_get_filename
parameter_list|(
name|abfd
parameter_list|)
value|((char *) (abfd)->filename)
define|#
directive|define
name|bfd_get_cacheable
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->cacheable)
define|#
directive|define
name|bfd_get_format
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->format)
define|#
directive|define
name|bfd_get_target
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->name)
define|#
directive|define
name|bfd_get_flavour
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->flavour)
define|#
directive|define
name|bfd_family_coff
parameter_list|(
name|abfd
parameter_list|)
define|\
value|(bfd_get_flavour (abfd) == bfd_target_coff_flavour || \    bfd_get_flavour (abfd) == bfd_target_xcoff_flavour)
define|#
directive|define
name|bfd_big_endian
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->byteorder == BFD_ENDIAN_BIG)
define|#
directive|define
name|bfd_little_endian
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->byteorder == BFD_ENDIAN_LITTLE)
define|#
directive|define
name|bfd_header_big_endian
parameter_list|(
name|abfd
parameter_list|)
define|\
value|((abfd)->xvec->header_byteorder == BFD_ENDIAN_BIG)
define|#
directive|define
name|bfd_header_little_endian
parameter_list|(
name|abfd
parameter_list|)
define|\
value|((abfd)->xvec->header_byteorder == BFD_ENDIAN_LITTLE)
define|#
directive|define
name|bfd_get_file_flags
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->flags)
define|#
directive|define
name|bfd_applicable_file_flags
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->object_flags)
define|#
directive|define
name|bfd_applicable_section_flags
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->section_flags)
define|#
directive|define
name|bfd_my_archive
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->my_archive)
define|#
directive|define
name|bfd_has_map
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->has_armap)
define|#
directive|define
name|bfd_valid_reloc_types
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->valid_reloc_types)
define|#
directive|define
name|bfd_usrdata
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->usrdata)
define|#
directive|define
name|bfd_get_start_address
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->start_address)
define|#
directive|define
name|bfd_get_symcount
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->symcount)
define|#
directive|define
name|bfd_get_outsymbols
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->outsymbols)
define|#
directive|define
name|bfd_count_sections
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->section_count)
define|#
directive|define
name|bfd_get_dynamic_symcount
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->dynsymcount)
define|#
directive|define
name|bfd_get_symbol_leading_char
parameter_list|(
name|abfd
parameter_list|)
value|((abfd)->xvec->symbol_leading_char)
define|#
directive|define
name|bfd_set_cacheable
parameter_list|(
name|abfd
parameter_list|,
name|bool
parameter_list|)
value|(((abfd)->cacheable = bool), TRUE)
specifier|extern
name|bfd_boolean
name|bfd_cache_close
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
comment|/* NB: This declaration should match the autogenerated one in libbfd.h.  */
specifier|extern
name|bfd_boolean
name|bfd_record_phdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|bfd_boolean
parameter_list|,
name|flagword
parameter_list|,
name|bfd_boolean
parameter_list|,
name|bfd_vma
parameter_list|,
name|bfd_boolean
parameter_list|,
name|bfd_boolean
parameter_list|,
name|unsigned
name|int
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Byte swapping routines.  */
name|bfd_uint64_t
name|bfd_getb64
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_uint64_t
name|bfd_getl64
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_int64_t
name|bfd_getb_signed_64
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_int64_t
name|bfd_getl_signed_64
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_getb32
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_getl32
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
name|bfd_getb_signed_32
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
name|bfd_getl_signed_32
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_getb16
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_vma
name|bfd_getl16
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
name|bfd_getb_signed_16
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_signed_vma
name|bfd_getl_signed_16
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putb64
parameter_list|(
name|bfd_uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putl64
parameter_list|(
name|bfd_uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putb32
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putl32
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putb16
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|void
name|bfd_putl16
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* Byte swapping routines which take size and endiannes as arguments.  */
name|bfd_uint64_t
name|bfd_get_bits
parameter_list|(
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
name|void
name|bfd_put_bits
parameter_list|(
name|bfd_uint64_t
parameter_list|,
name|void
modifier|*
parameter_list|,
name|int
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* Externally visible ECOFF routines.  */
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALMOST_STDC
argument_list|)
struct_decl|struct
name|ecoff_debug_info
struct_decl|;
struct_decl|struct
name|ecoff_debug_swap
struct_decl|;
struct_decl|struct
name|ecoff_extr
struct_decl|;
struct_decl|struct
name|bfd_symbol
struct_decl|;
struct_decl|struct
name|bfd_link_info
struct_decl|;
struct_decl|struct
name|bfd_link_hash_entry
struct_decl|;
struct_decl|struct
name|bfd_elf_version_tree
struct_decl|;
endif|#
directive|endif
specifier|extern
name|bfd_vma
name|bfd_ecoff_get_gp_value
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_set_gp_value
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|bfd_vma
name|gp_value
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_set_regmasks
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|unsigned
name|long
name|gprmask
parameter_list|,
name|unsigned
name|long
name|fprmask
parameter_list|,
name|unsigned
name|long
modifier|*
name|cprmask
parameter_list|)
function_decl|;
specifier|extern
name|void
modifier|*
name|bfd_ecoff_debug_init
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|output_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|output_swap
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_ecoff_debug_free
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|output_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|output_swap
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_debug_accumulate
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|output_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|output_swap
parameter_list|,
name|bfd
modifier|*
name|input_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|input_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|input_swap
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_debug_accumulate_other
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|output_debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|output_swap
parameter_list|,
name|bfd
modifier|*
name|input_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_debug_externals
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|,
name|bfd_boolean
name|relocatable
parameter_list|,
name|bfd_boolean
function_decl|(
modifier|*
name|get_extr
function_decl|)
parameter_list|(
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|struct
name|ecoff_extr
modifier|*
parameter_list|)
parameter_list|,
name|void
function_decl|(
modifier|*
name|set_index
function_decl|)
parameter_list|(
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|)
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_debug_one_external
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|struct
name|ecoff_extr
modifier|*
name|esym
parameter_list|)
function_decl|;
specifier|extern
name|bfd_size_type
name|bfd_ecoff_debug_size
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_write_debug
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|,
name|file_ptr
name|where
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_ecoff_write_accumulated_debug
parameter_list|(
name|void
modifier|*
name|handle
parameter_list|,
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|ecoff_debug_info
modifier|*
name|debug
parameter_list|,
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|swap
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|file_ptr
name|where
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_mips_ecoff_create_embedded_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Externally visible ELF routines.  */
struct|struct
name|bfd_link_needed_list
block|{
name|struct
name|bfd_link_needed_list
modifier|*
name|next
decl_stmt|;
name|bfd
modifier|*
name|by
decl_stmt|;
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
block|}
struct|;
enum|enum
name|dynamic_lib_link_class
block|{
name|DYN_NORMAL
init|=
literal|0
block|,
name|DYN_AS_NEEDED
init|=
literal|1
block|,
name|DYN_DT_NEEDED
init|=
literal|2
block|}
enum|;
specifier|extern
name|bfd_boolean
name|bfd_elf_record_link_assignment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|bfd_link_needed_list
modifier|*
name|bfd_elf_get_needed_list
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf_get_bfd_needed_list
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_needed_list
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
specifier|const
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|,
name|struct
name|bfd_elf_version_tree
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_elf_set_dt_needed_name
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_elf_get_dt_soname
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_elf_set_dyn_lib_class
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|bfd_link_needed_list
modifier|*
name|bfd_elf_get_runpath_list
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf_discard_info
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* Return an upper bound on the number of bytes required to store a    copy of ABFD's program header table entries.  Return -1 if an error    occurs; bfd_get_error will return an appropriate code.  */
specifier|extern
name|long
name|bfd_get_elf_phdr_upper_bound
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|)
function_decl|;
comment|/* Copy ABFD's program header table entries to *PHDRS.  The entries    will be stored as an array of Elf_Internal_Phdr structures, as    defined in include/elf/internal.h.  To find out how large the    buffer needs to be, call bfd_get_elf_phdr_upper_bound.     Return the number of program header table entries read, or -1 if an    error occurs; bfd_get_error will return an appropriate code.  */
specifier|extern
name|int
name|bfd_get_elf_phdrs
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|void
modifier|*
name|phdrs
parameter_list|)
function_decl|;
comment|/* Create a new BFD as if by bfd_openr.  Rather than opening a file,    reconstruct an ELF file by reading the segments out of remote memory    based on the ELF file header at EHDR_VMA and the ELF program headers it    points to.  If not null, *LOADBASEP is filled in with the difference    between the VMAs from which the segments were read, and the VMAs the    file headers (and hence BFD's idea of each section's VMA) put them at.     The function TARGET_READ_MEMORY is called to copy LEN bytes from the    remote memory at target address VMA into the local buffer at MYADDR; it    should return zero on success or an `errno' code on failure.  TEMPL must    be a BFD for an ELF target with the word size and byte order found in    the remote memory.  */
specifier|extern
name|bfd
modifier|*
name|bfd_elf_bfd_from_remote_memory
parameter_list|(
name|bfd
modifier|*
name|templ
parameter_list|,
name|bfd_vma
name|ehdr_vma
parameter_list|,
name|bfd_vma
modifier|*
name|loadbasep
parameter_list|,
name|int
function_decl|(
modifier|*
name|target_read_memory
function_decl|)
parameter_list|(
name|bfd_vma
name|vma
parameter_list|,
name|char
modifier|*
name|myaddr
parameter_list|,
name|int
name|len
parameter_list|)
parameter_list|)
function_decl|;
comment|/* Return the arch_size field of an elf bfd, or -1 if not elf.  */
specifier|extern
name|int
name|bfd_get_arch_size
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* Return TRUE if address "naturally" sign extends, or -1 if not elf.  */
specifier|extern
name|int
name|bfd_get_sign_extend_vma
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|struct
name|bfd_section
modifier|*
name|_bfd_elf_tls_setup
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_m68k_elf32_create_embedded_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_mips_elf32_create_embedded_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* SunOS shared library support routines for the linker.  */
specifier|extern
name|struct
name|bfd_link_needed_list
modifier|*
name|bfd_sunos_get_needed_list
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_sunos_record_link_assignment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_sunos_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Linux shared library support routines for the linker.  */
specifier|extern
name|bfd_boolean
name|bfd_i386linux_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_m68klinux_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_sparclinux_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* mmap hacks */
struct_decl|struct
name|_bfd_window_internal
struct_decl|;
typedef|typedef
name|struct
name|_bfd_window_internal
name|bfd_window_internal
typedef|;
typedef|typedef
struct|struct
name|_bfd_window
block|{
comment|/* What the user asked for.  */
name|void
modifier|*
name|data
decl_stmt|;
name|bfd_size_type
name|size
decl_stmt|;
comment|/* The actual window used by BFD.  Small user-requested read-only      regions sharing a page may share a single window into the object      file.  Read-write versions shouldn't until I've fixed things to      keep track of which portions have been claimed by the      application; don't want to give the same region back when the      application wants two writable copies!  */
name|struct
name|_bfd_window_internal
modifier|*
name|i
decl_stmt|;
block|}
name|bfd_window
typedef|;
specifier|extern
name|void
name|bfd_init_window
parameter_list|(
name|bfd_window
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_free_window
parameter_list|(
name|bfd_window
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_get_file_window
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|bfd_size_type
parameter_list|,
name|bfd_window
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* XCOFF support routines for the linker.  */
specifier|extern
name|bfd_boolean
name|bfd_xcoff_link_record_set
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_link_hash_entry
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_import_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_link_hash_entry
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_export_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_link_count_reloc
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_record_link_assignment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_size_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|unsigned
name|long
parameter_list|,
name|bfd_boolean
parameter_list|,
name|int
parameter_list|,
name|bfd_boolean
parameter_list|,
name|bfd_boolean
parameter_list|,
name|struct
name|bfd_section
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_xcoff_link_generate_rtinit
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* XCOFF support routines for ar.  */
specifier|extern
name|bfd_boolean
name|bfd_xcoff_ar_archive_set_magic
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Externally visible COFF routines.  */
if|#
directive|if
name|defined
argument_list|(
name|__STDC__
argument_list|)
operator|||
name|defined
argument_list|(
name|ALMOST_STDC
argument_list|)
struct_decl|struct
name|internal_syment
struct_decl|;
union_decl|union
name|internal_auxent
union_decl|;
endif|#
directive|endif
specifier|extern
name|bfd_boolean
name|bfd_coff_get_syment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|struct
name|internal_syment
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_coff_get_auxent
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|int
parameter_list|,
name|union
name|internal_auxent
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_coff_set_symbol_class
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_m68k_coff_create_embedded_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* ARM Interworking support.  Called from linker.  */
specifier|extern
name|bfd_boolean
name|bfd_arm_allocate_interworking_sections
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_process_before_allocation
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_get_bfd_for_interworking
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* PE ARM Interworking support.  Called from linker.  */
specifier|extern
name|bfd_boolean
name|bfd_arm_pe_allocate_interworking_sections
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_pe_process_before_allocation
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_pe_get_bfd_for_interworking
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* ELF ARM Interworking support.  Called from linker.  */
specifier|extern
name|bfd_boolean
name|bfd_elf32_arm_allocate_interworking_sections
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf32_arm_process_before_allocation
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf32_arm_get_bfd_for_interworking
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_elf32_arm_add_glue_sections_to_bfd
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* ARM Note section processing.  */
specifier|extern
name|bfd_boolean
name|bfd_arm_merge_machines
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|bfd_boolean
name|bfd_arm_update_notes
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
specifier|extern
name|unsigned
name|int
name|bfd_arm_get_mach_from_notes
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* TI COFF load page support.  */
specifier|extern
name|void
name|bfd_ticoff_set_section_load_page
parameter_list|(
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
specifier|extern
name|int
name|bfd_ticoff_get_section_load_page
parameter_list|(
name|struct
name|bfd_section
modifier|*
parameter_list|)
function_decl|;
comment|/* H8/300 functions.  */
specifier|extern
name|bfd_vma
name|bfd_h8300_pad_address
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
comment|/* IA64 Itanium code generation.  Called from linker.  */
specifier|extern
name|void
name|bfd_elf32_ia64_after_parse
parameter_list|(
name|int
parameter_list|)
function_decl|;
specifier|extern
name|void
name|bfd_elf64_ia64_after_parse
parameter_list|(
name|int
parameter_list|)
function_decl|;
end_extern

end_unit

