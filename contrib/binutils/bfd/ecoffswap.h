begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Generic ECOFF swapping routines, for BFD.    Copyright 1992, 1993, 1994, 1995, 1996, 2000 Free Software Foundation, Inc.    Written by Cygnus Support.  This file is part of BFD, the Binary File Descriptor library.  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* NOTE: This is a header file, but it contains executable routines.    This is done this way because these routines are substantially    similar, but are not identical, for all ECOFF targets.     These are routines to swap the ECOFF symbolic information in and    out.  The routines are defined statically.  You can set breakpoints    on them in gdb by naming the including source file; e.g.,    'coff-mips.c':ecoff_swap_hdr_in.     Before including this header file, one of ECOFF_32, ECOFF_64,    ECOFF_SIGNED_32 or ECOFF_SIGNED_64 must be defined.  These are    checked when swapping information that depends upon the target    size.  This code works for 32 bit and 64 bit ECOFF, but may need to    be generalized in the future.     Some header file which defines the external forms of these    structures must also be included before including this header file.    Currently this is either coff/mips.h or coff/alpha.h.     If the symbol TEST is defined when this file is compiled, a    comparison is made to ensure that, in fact, the output is    bit-for-bit the same as the input.  Of course, this symbol should    only be defined when deliberately testing the code on a machine    with the proper byte sex and such.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|ECOFF_32
end_ifdef

begin_define
define|#
directive|define
name|ecoff_get_off
value|bfd_h_get_32
end_define

begin_define
define|#
directive|define
name|ecoff_put_off
value|bfd_h_put_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|ECOFF_64
end_ifdef

begin_define
define|#
directive|define
name|ecoff_get_off
value|bfd_h_get_64
end_define

begin_define
define|#
directive|define
name|ecoff_put_off
value|bfd_h_put_64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|ECOFF_SIGNED_32
end_ifdef

begin_define
define|#
directive|define
name|ecoff_get_off
value|bfd_h_get_signed_32
end_define

begin_define
define|#
directive|define
name|ecoff_put_off
value|bfd_h_put_signed_32
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|ECOFF_SIGNED_64
end_ifdef

begin_define
define|#
directive|define
name|ecoff_get_off
value|bfd_h_get_signed_64
end_define

begin_define
define|#
directive|define
name|ecoff_put_off
value|bfd_h_put_signed_64
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* ECOFF auxiliary information swapping routines.  These are the same    for all ECOFF targets, so they are defined in ecofflink.c.  */
end_comment

begin_decl_stmt
specifier|extern
name|void
name|_bfd_ecoff_swap_tir_in
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
specifier|const
expr|struct
name|tir_ext
operator|*
operator|,
name|TIR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|_bfd_ecoff_swap_tir_out
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|TIR
operator|*
operator|,
expr|struct
name|tir_ext
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|_bfd_ecoff_swap_rndx_in
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
specifier|const
expr|struct
name|rndx_ext
operator|*
operator|,
name|RNDXR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|extern
name|void
name|_bfd_ecoff_swap_rndx_out
name|PARAMS
argument_list|(
operator|(
name|int
operator|,
specifier|const
name|RNDXR
operator|*
operator|,
expr|struct
name|rndx_ext
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Prototypes for functions defined in this file.  */
end_comment

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_hdr_in
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|HDRR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_hdr_out
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|HDRR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_fdr_in
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|FDR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_fdr_out
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|FDR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_pdr_in
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|PDR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_pdr_out
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|PDR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_sym_in
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|SYMR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_sym_out
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|SYMR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_ext_in
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|EXTR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_ext_out
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|EXTR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_rfd_in
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|RFDT
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_rfd_out
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|RFDT
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_opt_in
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|OPTR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_opt_out
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|OPTR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_dnr_in
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
name|PTR
operator|,
name|DNR
operator|*
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|static
name|void
name|ecoff_swap_dnr_out
name|PARAMS
argument_list|(
operator|(
name|bfd
operator|*
operator|,
specifier|const
name|DNR
operator|*
operator|,
name|PTR
operator|)
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* Swap in the symbolic header.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_hdr_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_copy
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_copy
decl_stmt|;
name|HDRR
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|hdr_ext
name|ext
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|ext
operator|=
operator|*
operator|(
expr|struct
name|hdr_ext
operator|*
operator|)
name|ext_copy
expr_stmt|;
name|intern
operator|->
name|magic
operator|=
name|bfd_h_get_signed_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_magic
argument_list|)
expr_stmt|;
name|intern
operator|->
name|vstamp
operator|=
name|bfd_h_get_signed_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_vstamp
argument_list|)
expr_stmt|;
name|intern
operator|->
name|ilineMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_ilineMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbLine
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbLine
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbLineOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbLineOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|idnMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_idnMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbDnOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbDnOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|ipdMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_ipdMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbPdOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbPdOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|isymMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_isymMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbSymOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbSymOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|ioptMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_ioptMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbOptOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbOptOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|iauxMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_iauxMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbAuxOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbAuxOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|issMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_issMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbSsOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbSsOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|issExtMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_issExtMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbSsExtOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbSsExtOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|ifdMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_ifdMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbFdOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbFdOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|crfd
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_crfd
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbRfdOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbRfdOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|iextMax
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_iextMax
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbExtOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbExtOffset
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out the symbolic header.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_hdr_out
parameter_list|(
name|abfd
parameter_list|,
name|intern_copy
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|HDRR
modifier|*
name|intern_copy
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|hdr_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|hdr_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|HDRR
name|intern
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|intern
operator|=
operator|*
name|intern_copy
expr_stmt|;
name|bfd_h_put_signed_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|magic
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_magic
argument_list|)
expr_stmt|;
name|bfd_h_put_signed_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|vstamp
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_vstamp
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ilineMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_ilineMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbLine
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbLine
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbLineOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbLineOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|idnMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_idnMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbDnOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbDnOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ipdMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_ipdMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbPdOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbPdOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|isymMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_isymMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbSymOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbSymOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ioptMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_ioptMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbOptOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbOptOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|iauxMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_iauxMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbAuxOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbAuxOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|issMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_issMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbSsOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbSsOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|issExtMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_issExtMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbSsExtOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbSsExtOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ifdMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_ifdMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbFdOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbFdOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|crfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_crfd
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbRfdOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbRfdOffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|iextMax
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_iextMax
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbExtOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|h_cbExtOffset
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap in the file descriptor record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_fdr_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_copy
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_copy
decl_stmt|;
name|FDR
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|fdr_ext
name|ext
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|ext
operator|=
operator|*
operator|(
expr|struct
name|fdr_ext
operator|*
operator|)
name|ext_copy
expr_stmt|;
name|intern
operator|->
name|adr
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_adr
argument_list|)
expr_stmt|;
name|intern
operator|->
name|rss
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_rss
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
if|if
condition|(
name|intern
operator|->
name|rss
operator|==
literal|0xffffffff
condition|)
name|intern
operator|->
name|rss
operator|=
operator|-
literal|1
expr_stmt|;
endif|#
directive|endif
name|intern
operator|->
name|issBase
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_issBase
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbSs
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cbSs
argument_list|)
expr_stmt|;
name|intern
operator|->
name|isymBase
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_isymBase
argument_list|)
expr_stmt|;
name|intern
operator|->
name|csym
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_csym
argument_list|)
expr_stmt|;
name|intern
operator|->
name|ilineBase
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_ilineBase
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cline
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cline
argument_list|)
expr_stmt|;
name|intern
operator|->
name|ioptBase
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_ioptBase
argument_list|)
expr_stmt|;
name|intern
operator|->
name|copt
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_copt
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_32
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_32
argument_list|)
name|intern
operator|->
name|ipdFirst
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_ipdFirst
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cpd
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cpd
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
name|intern
operator|->
name|ipdFirst
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_ipdFirst
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cpd
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cpd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|intern
operator|->
name|iauxBase
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_iauxBase
argument_list|)
expr_stmt|;
name|intern
operator|->
name|caux
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_caux
argument_list|)
expr_stmt|;
name|intern
operator|->
name|rfdBase
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_rfdBase
argument_list|)
expr_stmt|;
name|intern
operator|->
name|crfd
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_crfd
argument_list|)
expr_stmt|;
comment|/* now the fun stuff...  */
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|intern
operator|->
name|lang
operator|=
operator|(
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|&
name|FDR_BITS1_LANG_BIG
operator|)
operator|>>
name|FDR_BITS1_LANG_SH_BIG
expr_stmt|;
name|intern
operator|->
name|fMerge
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|&
name|FDR_BITS1_FMERGE_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|fReadin
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|&
name|FDR_BITS1_FREADIN_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|fBigendian
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|&
name|FDR_BITS1_FBIGENDIAN_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|glevel
operator|=
operator|(
name|ext
operator|->
name|f_bits2
index|[
literal|0
index|]
operator|&
name|FDR_BITS2_GLEVEL_BIG
operator|)
operator|>>
name|FDR_BITS2_GLEVEL_SH_BIG
expr_stmt|;
block|}
else|else
block|{
name|intern
operator|->
name|lang
operator|=
operator|(
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|&
name|FDR_BITS1_LANG_LITTLE
operator|)
operator|>>
name|FDR_BITS1_LANG_SH_LITTLE
expr_stmt|;
name|intern
operator|->
name|fMerge
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|&
name|FDR_BITS1_FMERGE_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|fReadin
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|&
name|FDR_BITS1_FREADIN_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|fBigendian
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|&
name|FDR_BITS1_FBIGENDIAN_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|glevel
operator|=
operator|(
name|ext
operator|->
name|f_bits2
index|[
literal|0
index|]
operator|&
name|FDR_BITS2_GLEVEL_LITTLE
operator|)
operator|>>
name|FDR_BITS2_GLEVEL_SH_LITTLE
expr_stmt|;
block|}
name|intern
operator|->
name|reserved
operator|=
literal|0
expr_stmt|;
name|intern
operator|->
name|cbLineOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cbLineOffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbLine
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cbLine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out the file descriptor record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_fdr_out
parameter_list|(
name|abfd
parameter_list|,
name|intern_copy
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|FDR
modifier|*
name|intern_copy
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|fdr_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|fdr_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|FDR
name|intern
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|intern
operator|=
operator|*
name|intern_copy
expr_stmt|;
comment|/* Make it reasonable to do in-place.  */
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|adr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_adr
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|rss
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_rss
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|issBase
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_issBase
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbSs
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cbSs
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|isymBase
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_isymBase
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|csym
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_csym
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ilineBase
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_ilineBase
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cline
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cline
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ioptBase
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_ioptBase
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|copt
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_copt
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_32
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_32
argument_list|)
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ipdFirst
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_ipdFirst
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cpd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cpd
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ipdFirst
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_ipdFirst
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cpd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cpd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|iauxBase
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_iauxBase
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|caux
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_caux
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|rfdBase
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_rfdBase
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|crfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_crfd
argument_list|)
expr_stmt|;
comment|/* now the fun stuff...  */
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|=
operator|(
operator|(
operator|(
name|intern
operator|->
name|lang
operator|<<
name|FDR_BITS1_LANG_SH_BIG
operator|)
operator|&
name|FDR_BITS1_LANG_BIG
operator|)
operator||
operator|(
name|intern
operator|->
name|fMerge
condition|?
name|FDR_BITS1_FMERGE_BIG
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|fReadin
condition|?
name|FDR_BITS1_FREADIN_BIG
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|fBigendian
condition|?
name|FDR_BITS1_FBIGENDIAN_BIG
else|:
literal|0
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|f_bits2
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|intern
operator|->
name|glevel
operator|<<
name|FDR_BITS2_GLEVEL_SH_BIG
operator|)
operator|&
name|FDR_BITS2_GLEVEL_BIG
operator|)
expr_stmt|;
name|ext
operator|->
name|f_bits2
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|ext
operator|->
name|f_bits2
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|ext
operator|->
name|f_bits1
index|[
literal|0
index|]
operator|=
operator|(
operator|(
operator|(
name|intern
operator|->
name|lang
operator|<<
name|FDR_BITS1_LANG_SH_LITTLE
operator|)
operator|&
name|FDR_BITS1_LANG_LITTLE
operator|)
operator||
operator|(
name|intern
operator|->
name|fMerge
condition|?
name|FDR_BITS1_FMERGE_LITTLE
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|fReadin
condition|?
name|FDR_BITS1_FREADIN_LITTLE
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|fBigendian
condition|?
name|FDR_BITS1_FBIGENDIAN_LITTLE
else|:
literal|0
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|f_bits2
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|intern
operator|->
name|glevel
operator|<<
name|FDR_BITS2_GLEVEL_SH_LITTLE
operator|)
operator|&
name|FDR_BITS2_GLEVEL_LITTLE
operator|)
expr_stmt|;
name|ext
operator|->
name|f_bits2
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|ext
operator|->
name|f_bits2
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
block|}
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbLineOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cbLineOffset
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbLine
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|f_cbLine
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_ifndef
ifndef|#
directive|ifndef
name|MPW_C
end_ifndef

begin_comment
comment|/* Swap in the procedure descriptor record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_pdr_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_copy
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_copy
decl_stmt|;
name|PDR
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|pdr_ext
name|ext
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|ext
operator|=
operator|*
operator|(
expr|struct
name|pdr_ext
operator|*
operator|)
name|ext_copy
expr_stmt|;
name|memset
argument_list|(
operator|(
name|PTR
operator|)
name|intern
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
expr_stmt|;
name|intern
operator|->
name|adr
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_adr
argument_list|)
expr_stmt|;
name|intern
operator|->
name|isym
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_isym
argument_list|)
expr_stmt|;
name|intern
operator|->
name|iline
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_iline
argument_list|)
expr_stmt|;
name|intern
operator|->
name|regmask
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_regmask
argument_list|)
expr_stmt|;
name|intern
operator|->
name|regoffset
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_regoffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|iopt
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_iopt
argument_list|)
expr_stmt|;
name|intern
operator|->
name|fregmask
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_fregmask
argument_list|)
expr_stmt|;
name|intern
operator|->
name|fregoffset
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_fregoffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|frameoffset
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_frameoffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|framereg
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_framereg
argument_list|)
expr_stmt|;
name|intern
operator|->
name|pcreg
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_pcreg
argument_list|)
expr_stmt|;
name|intern
operator|->
name|lnLow
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_lnLow
argument_list|)
expr_stmt|;
name|intern
operator|->
name|lnHigh
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_lnHigh
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbLineOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_cbLineOffset
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
name|intern
operator|->
name|gp_prologue
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_gp_prologue
argument_list|)
expr_stmt|;
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|intern
operator|->
name|gp_used
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|&
name|PDR_BITS1_GP_USED_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|reg_frame
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|&
name|PDR_BITS1_REG_FRAME_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|prof
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|&
name|PDR_BITS1_PROF_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|reserved
operator|=
operator|(
operator|(
operator|(
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|&
name|PDR_BITS1_RESERVED_BIG
operator|)
operator|<<
name|PDR_BITS1_RESERVED_SH_LEFT_BIG
operator|)
operator||
operator|(
operator|(
name|ext
operator|->
name|p_bits2
index|[
literal|0
index|]
operator|&
name|PDR_BITS2_RESERVED_BIG
operator|)
operator|>>
name|PDR_BITS2_RESERVED_SH_BIG
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|intern
operator|->
name|gp_used
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|&
name|PDR_BITS1_GP_USED_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|reg_frame
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|&
name|PDR_BITS1_REG_FRAME_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|prof
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|&
name|PDR_BITS1_PROF_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|reserved
operator|=
operator|(
operator|(
operator|(
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|&
name|PDR_BITS1_RESERVED_LITTLE
operator|)
operator|>>
name|PDR_BITS1_RESERVED_SH_LITTLE
operator|)
operator||
operator|(
operator|(
name|ext
operator|->
name|p_bits2
index|[
literal|0
index|]
operator|&
name|PDR_BITS2_RESERVED_LITTLE
operator|)
operator|<<
name|PDR_BITS2_RESERVED_SH_LEFT_LITTLE
operator|)
operator|)
expr_stmt|;
block|}
name|intern
operator|->
name|localoff
operator|=
name|bfd_h_get_8
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_localoff
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out the procedure descriptor record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_pdr_out
parameter_list|(
name|abfd
parameter_list|,
name|intern_copy
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|PDR
modifier|*
name|intern_copy
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|pdr_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|pdr_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|PDR
name|intern
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|intern
operator|=
operator|*
name|intern_copy
expr_stmt|;
comment|/* Make it reasonable to do in-place.  */
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|adr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_adr
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|isym
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_isym
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|iline
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_iline
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|regmask
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_regmask
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|regoffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_regoffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|iopt
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_iopt
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|fregmask
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_fregmask
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|fregoffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_fregoffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|frameoffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_frameoffset
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|framereg
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_framereg
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|pcreg
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_pcreg
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|lnLow
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_lnLow
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|lnHigh
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_lnHigh
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbLineOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_cbLineOffset
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
name|bfd_h_put_8
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|gp_prologue
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_gp_prologue
argument_list|)
expr_stmt|;
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|intern
operator|->
name|gp_used
condition|?
name|PDR_BITS1_GP_USED_BIG
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|reg_frame
condition|?
name|PDR_BITS1_REG_FRAME_BIG
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|prof
condition|?
name|PDR_BITS1_PROF_BIG
else|:
literal|0
operator|)
operator||
operator|(
operator|(
name|intern
operator|->
name|reserved
operator|>>
name|PDR_BITS1_RESERVED_SH_LEFT_BIG
operator|)
operator|&
name|PDR_BITS1_RESERVED_BIG
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|p_bits2
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|intern
operator|->
name|reserved
operator|<<
name|PDR_BITS2_RESERVED_SH_BIG
operator|)
operator|&
name|PDR_BITS2_RESERVED_BIG
operator|)
expr_stmt|;
block|}
else|else
block|{
name|ext
operator|->
name|p_bits1
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|intern
operator|->
name|gp_used
condition|?
name|PDR_BITS1_GP_USED_LITTLE
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|reg_frame
condition|?
name|PDR_BITS1_REG_FRAME_LITTLE
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|prof
condition|?
name|PDR_BITS1_PROF_LITTLE
else|:
literal|0
operator|)
operator||
operator|(
operator|(
name|intern
operator|->
name|reserved
operator|<<
name|PDR_BITS1_RESERVED_SH_LITTLE
operator|)
operator|&
name|PDR_BITS1_RESERVED_LITTLE
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|p_bits2
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|intern
operator|->
name|reserved
operator|>>
name|PDR_BITS2_RESERVED_SH_LEFT_LITTLE
operator|)
operator|&
name|PDR_BITS2_RESERVED_LITTLE
operator|)
expr_stmt|;
block|}
name|bfd_h_put_8
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|localoff
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_localoff
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_comment
comment|/* MPW_C */
end_comment

begin_comment
comment|/* Same routines, but with ECOFF_64 code removed, so ^&%$#&! MPW C doesn't    corrupt itself and then freak out.  */
end_comment

begin_comment
comment|/* Swap in the procedure descriptor record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_pdr_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_copy
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_copy
decl_stmt|;
name|PDR
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|pdr_ext
name|ext
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|ext
operator|=
operator|*
operator|(
expr|struct
name|pdr_ext
operator|*
operator|)
name|ext_copy
expr_stmt|;
name|intern
operator|->
name|adr
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_adr
argument_list|)
expr_stmt|;
name|intern
operator|->
name|isym
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_isym
argument_list|)
expr_stmt|;
name|intern
operator|->
name|iline
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_iline
argument_list|)
expr_stmt|;
name|intern
operator|->
name|regmask
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_regmask
argument_list|)
expr_stmt|;
name|intern
operator|->
name|regoffset
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_regoffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|iopt
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_iopt
argument_list|)
expr_stmt|;
name|intern
operator|->
name|fregmask
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_fregmask
argument_list|)
expr_stmt|;
name|intern
operator|->
name|fregoffset
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_fregoffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|frameoffset
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_frameoffset
argument_list|)
expr_stmt|;
name|intern
operator|->
name|framereg
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_framereg
argument_list|)
expr_stmt|;
name|intern
operator|->
name|pcreg
operator|=
name|bfd_h_get_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_pcreg
argument_list|)
expr_stmt|;
name|intern
operator|->
name|lnLow
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_lnLow
argument_list|)
expr_stmt|;
name|intern
operator|->
name|lnHigh
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_lnHigh
argument_list|)
expr_stmt|;
name|intern
operator|->
name|cbLineOffset
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_cbLineOffset
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out the procedure descriptor record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_pdr_out
parameter_list|(
name|abfd
parameter_list|,
name|intern_copy
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|PDR
modifier|*
name|intern_copy
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|pdr_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|pdr_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|PDR
name|intern
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|intern
operator|=
operator|*
name|intern_copy
expr_stmt|;
comment|/* Make it reasonable to do in-place.  */
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|adr
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_adr
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|isym
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_isym
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|iline
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_iline
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|regmask
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_regmask
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|regoffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_regoffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|iopt
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_iopt
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|fregmask
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_fregmask
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|fregoffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_fregoffset
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|frameoffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_frameoffset
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|framereg
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_framereg
argument_list|)
expr_stmt|;
name|bfd_h_put_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|pcreg
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_pcreg
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|lnLow
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_lnLow
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|lnHigh
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_lnHigh
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|cbLineOffset
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|p_cbLineOffset
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* MPW_C */
end_comment

begin_comment
comment|/* Swap in a symbol record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_sym_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_copy
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_copy
decl_stmt|;
name|SYMR
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|sym_ext
name|ext
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|ext
operator|=
operator|*
operator|(
expr|struct
name|sym_ext
operator|*
operator|)
name|ext_copy
expr_stmt|;
name|intern
operator|->
name|iss
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|s_iss
argument_list|)
expr_stmt|;
name|intern
operator|->
name|value
operator|=
name|ecoff_get_off
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|s_value
argument_list|)
expr_stmt|;
comment|/* now the fun stuff...  */
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|intern
operator|->
name|st
operator|=
operator|(
name|ext
operator|->
name|s_bits1
index|[
literal|0
index|]
operator|&
name|SYM_BITS1_ST_BIG
operator|)
operator|>>
name|SYM_BITS1_ST_SH_BIG
expr_stmt|;
name|intern
operator|->
name|sc
operator|=
operator|(
operator|(
name|ext
operator|->
name|s_bits1
index|[
literal|0
index|]
operator|&
name|SYM_BITS1_SC_BIG
operator|)
operator|<<
name|SYM_BITS1_SC_SH_LEFT_BIG
operator|)
operator||
operator|(
operator|(
name|ext
operator|->
name|s_bits2
index|[
literal|0
index|]
operator|&
name|SYM_BITS2_SC_BIG
operator|)
operator|>>
name|SYM_BITS2_SC_SH_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|reserved
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|s_bits2
index|[
literal|0
index|]
operator|&
name|SYM_BITS2_RESERVED_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|index
operator|=
operator|(
operator|(
name|ext
operator|->
name|s_bits2
index|[
literal|0
index|]
operator|&
name|SYM_BITS2_INDEX_BIG
operator|)
operator|<<
name|SYM_BITS2_INDEX_SH_LEFT_BIG
operator|)
operator||
operator|(
name|ext
operator|->
name|s_bits3
index|[
literal|0
index|]
operator|<<
name|SYM_BITS3_INDEX_SH_LEFT_BIG
operator|)
operator||
operator|(
name|ext
operator|->
name|s_bits4
index|[
literal|0
index|]
operator|<<
name|SYM_BITS4_INDEX_SH_LEFT_BIG
operator|)
expr_stmt|;
block|}
else|else
block|{
name|intern
operator|->
name|st
operator|=
operator|(
name|ext
operator|->
name|s_bits1
index|[
literal|0
index|]
operator|&
name|SYM_BITS1_ST_LITTLE
operator|)
operator|>>
name|SYM_BITS1_ST_SH_LITTLE
expr_stmt|;
name|intern
operator|->
name|sc
operator|=
operator|(
operator|(
name|ext
operator|->
name|s_bits1
index|[
literal|0
index|]
operator|&
name|SYM_BITS1_SC_LITTLE
operator|)
operator|>>
name|SYM_BITS1_SC_SH_LITTLE
operator|)
operator||
operator|(
operator|(
name|ext
operator|->
name|s_bits2
index|[
literal|0
index|]
operator|&
name|SYM_BITS2_SC_LITTLE
operator|)
operator|<<
name|SYM_BITS2_SC_SH_LEFT_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|reserved
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|s_bits2
index|[
literal|0
index|]
operator|&
name|SYM_BITS2_RESERVED_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|index
operator|=
operator|(
operator|(
name|ext
operator|->
name|s_bits2
index|[
literal|0
index|]
operator|&
name|SYM_BITS2_INDEX_LITTLE
operator|)
operator|>>
name|SYM_BITS2_INDEX_SH_LITTLE
operator|)
operator||
operator|(
name|ext
operator|->
name|s_bits3
index|[
literal|0
index|]
operator|<<
name|SYM_BITS3_INDEX_SH_LEFT_LITTLE
operator|)
operator||
operator|(
operator|(
name|unsigned
name|int
operator|)
name|ext
operator|->
name|s_bits4
index|[
literal|0
index|]
operator|<<
name|SYM_BITS4_INDEX_SH_LEFT_LITTLE
operator|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out a symbol record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_sym_out
parameter_list|(
name|abfd
parameter_list|,
name|intern_copy
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|SYMR
modifier|*
name|intern_copy
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|sym_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|sym_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|SYMR
name|intern
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|intern
operator|=
operator|*
name|intern_copy
expr_stmt|;
comment|/* Make it reasonable to do in-place.  */
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|iss
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|s_iss
argument_list|)
expr_stmt|;
name|ecoff_put_off
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|value
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|s_value
argument_list|)
expr_stmt|;
comment|/* now the fun stuff...  */
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|ext
operator|->
name|s_bits1
index|[
literal|0
index|]
operator|=
operator|(
operator|(
operator|(
name|intern
operator|->
name|st
operator|<<
name|SYM_BITS1_ST_SH_BIG
operator|)
operator|&
name|SYM_BITS1_ST_BIG
operator|)
operator||
operator|(
operator|(
name|intern
operator|->
name|sc
operator|>>
name|SYM_BITS1_SC_SH_LEFT_BIG
operator|)
operator|&
name|SYM_BITS1_SC_BIG
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|s_bits2
index|[
literal|0
index|]
operator|=
operator|(
operator|(
operator|(
name|intern
operator|->
name|sc
operator|<<
name|SYM_BITS2_SC_SH_BIG
operator|)
operator|&
name|SYM_BITS2_SC_BIG
operator|)
operator||
operator|(
name|intern
operator|->
name|reserved
condition|?
name|SYM_BITS2_RESERVED_BIG
else|:
literal|0
operator|)
operator||
operator|(
operator|(
name|intern
operator|->
name|index
operator|>>
name|SYM_BITS2_INDEX_SH_LEFT_BIG
operator|)
operator|&
name|SYM_BITS2_INDEX_BIG
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|s_bits3
index|[
literal|0
index|]
operator|=
operator|(
name|intern
operator|->
name|index
operator|>>
name|SYM_BITS3_INDEX_SH_LEFT_BIG
operator|)
operator|&
literal|0xff
expr_stmt|;
name|ext
operator|->
name|s_bits4
index|[
literal|0
index|]
operator|=
operator|(
name|intern
operator|->
name|index
operator|>>
name|SYM_BITS4_INDEX_SH_LEFT_BIG
operator|)
operator|&
literal|0xff
expr_stmt|;
block|}
else|else
block|{
name|ext
operator|->
name|s_bits1
index|[
literal|0
index|]
operator|=
operator|(
operator|(
operator|(
name|intern
operator|->
name|st
operator|<<
name|SYM_BITS1_ST_SH_LITTLE
operator|)
operator|&
name|SYM_BITS1_ST_LITTLE
operator|)
operator||
operator|(
operator|(
name|intern
operator|->
name|sc
operator|<<
name|SYM_BITS1_SC_SH_LITTLE
operator|)
operator|&
name|SYM_BITS1_SC_LITTLE
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|s_bits2
index|[
literal|0
index|]
operator|=
operator|(
operator|(
operator|(
name|intern
operator|->
name|sc
operator|>>
name|SYM_BITS2_SC_SH_LEFT_LITTLE
operator|)
operator|&
name|SYM_BITS2_SC_LITTLE
operator|)
operator||
operator|(
name|intern
operator|->
name|reserved
condition|?
name|SYM_BITS2_RESERVED_LITTLE
else|:
literal|0
operator|)
operator||
operator|(
operator|(
name|intern
operator|->
name|index
operator|<<
name|SYM_BITS2_INDEX_SH_LITTLE
operator|)
operator|&
name|SYM_BITS2_INDEX_LITTLE
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|s_bits3
index|[
literal|0
index|]
operator|=
operator|(
name|intern
operator|->
name|index
operator|>>
name|SYM_BITS3_INDEX_SH_LEFT_LITTLE
operator|)
operator|&
literal|0xff
expr_stmt|;
name|ext
operator|->
name|s_bits4
index|[
literal|0
index|]
operator|=
operator|(
name|intern
operator|->
name|index
operator|>>
name|SYM_BITS4_INDEX_SH_LEFT_LITTLE
operator|)
operator|&
literal|0xff
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap in an external symbol record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_ext_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_copy
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_copy
decl_stmt|;
name|EXTR
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|ext_ext
name|ext
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|ext
operator|=
operator|*
operator|(
expr|struct
name|ext_ext
operator|*
operator|)
name|ext_copy
expr_stmt|;
comment|/* now the fun stuff...  */
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|intern
operator|->
name|jmptbl
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|es_bits1
index|[
literal|0
index|]
operator|&
name|EXT_BITS1_JMPTBL_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|cobol_main
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|es_bits1
index|[
literal|0
index|]
operator|&
name|EXT_BITS1_COBOL_MAIN_BIG
operator|)
expr_stmt|;
name|intern
operator|->
name|weakext
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|es_bits1
index|[
literal|0
index|]
operator|&
name|EXT_BITS1_WEAKEXT_BIG
operator|)
expr_stmt|;
block|}
else|else
block|{
name|intern
operator|->
name|jmptbl
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|es_bits1
index|[
literal|0
index|]
operator|&
name|EXT_BITS1_JMPTBL_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|cobol_main
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|es_bits1
index|[
literal|0
index|]
operator|&
name|EXT_BITS1_COBOL_MAIN_LITTLE
operator|)
expr_stmt|;
name|intern
operator|->
name|weakext
operator|=
literal|0
operator|!=
operator|(
name|ext
operator|->
name|es_bits1
index|[
literal|0
index|]
operator|&
name|EXT_BITS1_WEAKEXT_LITTLE
operator|)
expr_stmt|;
block|}
name|intern
operator|->
name|reserved
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_32
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_32
argument_list|)
name|intern
operator|->
name|ifd
operator|=
name|bfd_h_get_signed_16
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|es_ifd
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
name|intern
operator|->
name|ifd
operator|=
name|bfd_h_get_signed_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|es_ifd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ecoff_swap_sym_in
argument_list|(
name|abfd
argument_list|,
operator|&
name|ext
operator|->
name|es_asym
argument_list|,
operator|&
name|intern
operator|->
name|asym
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out an external symbol record.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_ext_out
parameter_list|(
name|abfd
parameter_list|,
name|intern_copy
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|EXTR
modifier|*
name|intern_copy
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|ext_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|ext_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|EXTR
name|intern
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|intern
operator|=
operator|*
name|intern_copy
expr_stmt|;
comment|/* Make it reasonable to do in-place.  */
comment|/* now the fun stuff...  */
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|ext
operator|->
name|es_bits1
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|intern
operator|->
name|jmptbl
condition|?
name|EXT_BITS1_JMPTBL_BIG
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|cobol_main
condition|?
name|EXT_BITS1_COBOL_MAIN_BIG
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|weakext
condition|?
name|EXT_BITS1_WEAKEXT_BIG
else|:
literal|0
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|es_bits2
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
name|ext
operator|->
name|es_bits2
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|ext
operator|->
name|es_bits2
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|ext
operator|->
name|es_bits1
index|[
literal|0
index|]
operator|=
operator|(
operator|(
name|intern
operator|->
name|jmptbl
condition|?
name|EXT_BITS1_JMPTBL_LITTLE
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|cobol_main
condition|?
name|EXT_BITS1_COBOL_MAIN_LITTLE
else|:
literal|0
operator|)
operator||
operator|(
name|intern
operator|->
name|weakext
condition|?
name|EXT_BITS1_WEAKEXT_LITTLE
else|:
literal|0
operator|)
operator|)
expr_stmt|;
name|ext
operator|->
name|es_bits2
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
name|ext
operator|->
name|es_bits2
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
name|ext
operator|->
name|es_bits2
index|[
literal|2
index|]
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_32
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_32
argument_list|)
name|bfd_h_put_signed_16
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ifd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|es_ifd
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|ECOFF_64
argument_list|)
operator|||
name|defined
argument_list|(
name|ECOFF_SIGNED_64
argument_list|)
name|bfd_h_put_signed_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|ifd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|es_ifd
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ecoff_swap_sym_out
argument_list|(
name|abfd
argument_list|,
operator|&
name|intern
operator|->
name|asym
argument_list|,
operator|&
name|ext
operator|->
name|es_asym
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap in a relative file descriptor.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_rfd_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_ptr
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
name|RFDT
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|rfd_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|rfd_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
operator|*
name|intern
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|rfd
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out a relative file descriptor.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_rfd_out
parameter_list|(
name|abfd
parameter_list|,
name|intern
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|RFDT
modifier|*
name|intern
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|rfd_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|rfd_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
operator|*
name|intern
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|rfd
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap in an optimization symbol.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_opt_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_copy
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_copy
decl_stmt|;
name|OPTR
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|opt_ext
name|ext
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|ext
operator|=
operator|*
operator|(
expr|struct
name|opt_ext
operator|*
operator|)
name|ext_copy
expr_stmt|;
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|intern
operator|->
name|ot
operator|=
name|ext
operator|->
name|o_bits1
index|[
literal|0
index|]
expr_stmt|;
name|intern
operator|->
name|value
operator|=
operator|(
operator|(
operator|(
name|unsigned
name|int
operator|)
name|ext
operator|->
name|o_bits2
index|[
literal|0
index|]
operator|<<
name|OPT_BITS2_VALUE_SH_LEFT_BIG
operator|)
operator||
operator|(
operator|(
name|unsigned
name|int
operator|)
name|ext
operator|->
name|o_bits3
index|[
literal|0
index|]
operator|<<
name|OPT_BITS2_VALUE_SH_LEFT_BIG
operator|)
operator||
operator|(
operator|(
name|unsigned
name|int
operator|)
name|ext
operator|->
name|o_bits4
index|[
literal|0
index|]
operator|<<
name|OPT_BITS2_VALUE_SH_LEFT_BIG
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|intern
operator|->
name|ot
operator|=
name|ext
operator|->
name|o_bits1
index|[
literal|0
index|]
expr_stmt|;
name|intern
operator|->
name|value
operator|=
operator|(
operator|(
name|ext
operator|->
name|o_bits2
index|[
literal|0
index|]
operator|<<
name|OPT_BITS2_VALUE_SH_LEFT_LITTLE
operator|)
operator||
operator|(
name|ext
operator|->
name|o_bits3
index|[
literal|0
index|]
operator|<<
name|OPT_BITS2_VALUE_SH_LEFT_LITTLE
operator|)
operator||
operator|(
name|ext
operator|->
name|o_bits4
index|[
literal|0
index|]
operator|<<
name|OPT_BITS2_VALUE_SH_LEFT_LITTLE
operator|)
operator|)
expr_stmt|;
block|}
name|_bfd_ecoff_swap_rndx_in
argument_list|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
argument_list|,
operator|&
name|ext
operator|->
name|o_rndx
argument_list|,
operator|&
name|intern
operator|->
name|rndx
argument_list|)
expr_stmt|;
name|intern
operator|->
name|offset
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|o_offset
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out an optimization symbol.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_opt_out
parameter_list|(
name|abfd
parameter_list|,
name|intern_copy
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|OPTR
modifier|*
name|intern_copy
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|opt_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|opt_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|OPTR
name|intern
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|intern
operator|=
operator|*
name|intern_copy
expr_stmt|;
comment|/* Make it reasonable to do in-place.  */
if|if
condition|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
condition|)
block|{
name|ext
operator|->
name|o_bits1
index|[
literal|0
index|]
operator|=
name|intern
operator|->
name|ot
expr_stmt|;
name|ext
operator|->
name|o_bits2
index|[
literal|0
index|]
operator|=
name|intern
operator|->
name|value
operator|>>
name|OPT_BITS2_VALUE_SH_LEFT_BIG
expr_stmt|;
name|ext
operator|->
name|o_bits3
index|[
literal|0
index|]
operator|=
name|intern
operator|->
name|value
operator|>>
name|OPT_BITS3_VALUE_SH_LEFT_BIG
expr_stmt|;
name|ext
operator|->
name|o_bits4
index|[
literal|0
index|]
operator|=
name|intern
operator|->
name|value
operator|>>
name|OPT_BITS4_VALUE_SH_LEFT_BIG
expr_stmt|;
block|}
else|else
block|{
name|ext
operator|->
name|o_bits1
index|[
literal|0
index|]
operator|=
name|intern
operator|->
name|ot
expr_stmt|;
name|ext
operator|->
name|o_bits2
index|[
literal|0
index|]
operator|=
name|intern
operator|->
name|value
operator|>>
name|OPT_BITS2_VALUE_SH_LEFT_LITTLE
expr_stmt|;
name|ext
operator|->
name|o_bits3
index|[
literal|0
index|]
operator|=
name|intern
operator|->
name|value
operator|>>
name|OPT_BITS3_VALUE_SH_LEFT_LITTLE
expr_stmt|;
name|ext
operator|->
name|o_bits4
index|[
literal|0
index|]
operator|=
name|intern
operator|->
name|value
operator|>>
name|OPT_BITS4_VALUE_SH_LEFT_LITTLE
expr_stmt|;
block|}
name|_bfd_ecoff_swap_rndx_out
argument_list|(
name|bfd_header_big_endian
argument_list|(
name|abfd
argument_list|)
argument_list|,
operator|&
name|intern
operator|->
name|rndx
argument_list|,
operator|&
name|ext
operator|->
name|o_rndx
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|value
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|o_offset
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap in a dense number.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_dnr_in
parameter_list|(
name|abfd
parameter_list|,
name|ext_copy
parameter_list|,
name|intern
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|PTR
name|ext_copy
decl_stmt|;
name|DNR
modifier|*
name|intern
decl_stmt|;
block|{
name|struct
name|dnr_ext
name|ext
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|ext
operator|=
operator|*
operator|(
expr|struct
name|dnr_ext
operator|*
operator|)
name|ext_copy
expr_stmt|;
name|intern
operator|->
name|rfd
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|d_rfd
argument_list|)
expr_stmt|;
name|intern
operator|->
name|index
operator|=
name|bfd_h_get_32
argument_list|(
name|abfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|d_index
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

begin_comment
comment|/* Swap out a dense number.  */
end_comment

begin_function
specifier|static
name|void
name|ecoff_swap_dnr_out
parameter_list|(
name|abfd
parameter_list|,
name|intern_copy
parameter_list|,
name|ext_ptr
parameter_list|)
name|bfd
modifier|*
name|abfd
decl_stmt|;
specifier|const
name|DNR
modifier|*
name|intern_copy
decl_stmt|;
name|PTR
name|ext_ptr
decl_stmt|;
block|{
name|struct
name|dnr_ext
modifier|*
name|ext
init|=
operator|(
expr|struct
name|dnr_ext
operator|*
operator|)
name|ext_ptr
decl_stmt|;
name|DNR
name|intern
index|[
literal|1
index|]
decl_stmt|;
operator|*
name|intern
operator|=
operator|*
name|intern_copy
expr_stmt|;
comment|/* Make it reasonable to do in-place.  */
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|rfd
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|d_rfd
argument_list|)
expr_stmt|;
name|bfd_h_put_32
argument_list|(
name|abfd
argument_list|,
name|intern
operator|->
name|index
argument_list|,
operator|(
name|bfd_byte
operator|*
operator|)
name|ext
operator|->
name|d_index
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|TEST
if|if
condition|(
name|memcmp
argument_list|(
operator|(
name|char
operator|*
operator|)
name|ext
argument_list|,
operator|(
name|char
operator|*
operator|)
name|intern
argument_list|,
sizeof|sizeof
argument_list|(
operator|*
name|intern
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
name|abort
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function

end_unit

