begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* BFD back-end data structures for ELF files.    Copyright 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,    2002, 2003, 2004, 2005, 2006, 2007 Free Software Foundation, Inc.    Written by Cygnus Support.     This file is part of BFD, the Binary File Descriptor library.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBELF_H_
end_ifndef

begin_define
define|#
directive|define
name|_LIBELF_H_
value|1
end_define

begin_include
include|#
directive|include
file|"elf/common.h"
end_include

begin_include
include|#
directive|include
file|"elf/internal.h"
end_include

begin_include
include|#
directive|include
file|"elf/external.h"
end_include

begin_include
include|#
directive|include
file|"bfdlink.h"
end_include

begin_comment
comment|/* The number of entries in a section is its size divided by the size    of a single entry.  This is normally only applicable to reloc and    symbol table sections.  */
end_comment

begin_define
define|#
directive|define
name|NUM_SHDR_ENTRIES
parameter_list|(
name|shdr
parameter_list|)
value|((shdr)->sh_size / (shdr)->sh_entsize)
end_define

begin_comment
comment|/* If size isn't specified as 64 or 32, NAME macro should fail.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|NAME
end_ifndef

begin_if
if|#
directive|if
name|ARCH_SIZE
operator|==
literal|64
end_if

begin_define
define|#
directive|define
name|NAME
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|x ## 64 ## _ ## y
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_if
if|#
directive|if
name|ARCH_SIZE
operator|==
literal|32
end_if

begin_define
define|#
directive|define
name|NAME
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|x ## 32 ## _ ## y
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|NAME
end_ifndef

begin_define
define|#
directive|define
name|NAME
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|x ## NOSIZE ## _ ## y
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|ElfNAME
parameter_list|(
name|X
parameter_list|)
value|NAME(Elf,X)
end_define

begin_define
define|#
directive|define
name|elfNAME
parameter_list|(
name|X
parameter_list|)
value|NAME(elf,X)
end_define

begin_comment
comment|/* Information held for an ELF symbol.  The first field is the    corresponding asymbol.  Every symbol is an ELF file is actually a    pointer to this structure, although it is often handled as a    pointer to an asymbol.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
block|{
comment|/* The BFD symbol.  */
name|asymbol
name|symbol
decl_stmt|;
comment|/* ELF symbol information.  */
name|Elf_Internal_Sym
name|internal_elf_sym
decl_stmt|;
comment|/* Backend specific information.  */
union|union
block|{
name|unsigned
name|int
name|hppa_arg_reloc
decl_stmt|;
name|void
modifier|*
name|mips_extr
decl_stmt|;
name|void
modifier|*
name|any
decl_stmt|;
block|}
name|tc_data
union|;
comment|/* Version information.  This is from an Elf_Internal_Versym      structure in a SHT_GNU_versym section.  It is zero if there is no      version information.  */
name|unsigned
name|short
name|version
decl_stmt|;
block|}
name|elf_symbol_type
typedef|;
end_typedef

begin_escape
end_escape

begin_struct_decl
struct_decl|struct
name|elf_strtab_hash
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|got_entry
struct_decl|;
end_struct_decl

begin_struct_decl
struct_decl|struct
name|plt_entry
struct_decl|;
end_struct_decl

begin_comment
comment|/* ELF linker hash table entries.  */
end_comment

begin_struct
struct|struct
name|elf_link_hash_entry
block|{
name|struct
name|bfd_link_hash_entry
name|root
decl_stmt|;
comment|/* Symbol index in output file.  This is initialized to -1.  It is      set to -2 if the symbol is used by a reloc.  */
name|long
name|indx
decl_stmt|;
comment|/* Symbol index as a dynamic symbol.  Initialized to -1, and remains      -1 if this is not a dynamic symbol.  */
comment|/* ??? Note that this is consistently used as a synonym for tests      against whether we can perform various simplifying transformations      to the code.  (E.g. changing a pc-relative jump to a PLT entry      into a pc-relative jump to the target function.)  That test, which      is often relatively complex, and someplaces wrong or incomplete,      should really be replaced by a predicate in elflink.c.       End result: this field -1 does not indicate that the symbol is      not in the dynamic symbol table, but rather that the symbol is      not visible outside this DSO.  */
name|long
name|dynindx
decl_stmt|;
comment|/* If this symbol requires an entry in the global offset table, the      processor specific backend uses this field to track usage and      final offset.  Two schemes are supported:  The first assumes that      a symbol may only have one GOT entry, and uses REFCOUNT until      size_dynamic_sections, at which point the contents of the .got is      fixed.  Afterward, if OFFSET is -1, then the symbol does not      require a global offset table entry.  The second scheme allows      multiple GOT entries per symbol, managed via a linked list      pointed to by GLIST.  */
union|union
name|gotplt_union
block|{
name|bfd_signed_vma
name|refcount
decl_stmt|;
name|bfd_vma
name|offset
decl_stmt|;
name|struct
name|got_entry
modifier|*
name|glist
decl_stmt|;
name|struct
name|plt_entry
modifier|*
name|plist
decl_stmt|;
block|}
name|got
union|;
comment|/* Same, but tracks a procedure linkage table entry.  */
name|union
name|gotplt_union
name|plt
decl_stmt|;
comment|/* Symbol size.  */
name|bfd_size_type
name|size
decl_stmt|;
comment|/* Symbol type (STT_NOTYPE, STT_OBJECT, etc.).  */
name|unsigned
name|int
name|type
range|:
literal|8
decl_stmt|;
comment|/* Symbol st_other value, symbol visibility.  */
name|unsigned
name|int
name|other
range|:
literal|8
decl_stmt|;
comment|/* Symbol is referenced by a non-shared object.  */
name|unsigned
name|int
name|ref_regular
range|:
literal|1
decl_stmt|;
comment|/* Symbol is defined by a non-shared object.  */
name|unsigned
name|int
name|def_regular
range|:
literal|1
decl_stmt|;
comment|/* Symbol is referenced by a shared object.  */
name|unsigned
name|int
name|ref_dynamic
range|:
literal|1
decl_stmt|;
comment|/* Symbol is defined by a shared object.  */
name|unsigned
name|int
name|def_dynamic
range|:
literal|1
decl_stmt|;
comment|/* Symbol has a non-weak reference from a non-shared object.  */
name|unsigned
name|int
name|ref_regular_nonweak
range|:
literal|1
decl_stmt|;
comment|/* Dynamic symbol has been adjustd.  */
name|unsigned
name|int
name|dynamic_adjusted
range|:
literal|1
decl_stmt|;
comment|/* Symbol needs a copy reloc.  */
name|unsigned
name|int
name|needs_copy
range|:
literal|1
decl_stmt|;
comment|/* Symbol needs a procedure linkage table entry.  */
name|unsigned
name|int
name|needs_plt
range|:
literal|1
decl_stmt|;
comment|/* Symbol appears in a non-ELF input file.  */
name|unsigned
name|int
name|non_elf
range|:
literal|1
decl_stmt|;
comment|/* Symbol should be marked as hidden in the version information.  */
name|unsigned
name|int
name|hidden
range|:
literal|1
decl_stmt|;
comment|/* Symbol was forced to local scope due to a version script file.  */
name|unsigned
name|int
name|forced_local
range|:
literal|1
decl_stmt|;
comment|/* Symbol was forced to be dynamic due to a version script file.  */
name|unsigned
name|int
name|dynamic
range|:
literal|1
decl_stmt|;
comment|/* Symbol was marked during garbage collection.  */
name|unsigned
name|int
name|mark
range|:
literal|1
decl_stmt|;
comment|/* Symbol is referenced by a non-GOT/non-PLT relocation.  This is      not currently set by all the backends.  */
name|unsigned
name|int
name|non_got_ref
range|:
literal|1
decl_stmt|;
comment|/* Symbol has a definition in a shared object.      FIXME: There is no real need for this field if def_dynamic is never      cleared and all places that test def_dynamic also test def_regular.  */
name|unsigned
name|int
name|dynamic_def
range|:
literal|1
decl_stmt|;
comment|/* Symbol is weak in all shared objects.  */
name|unsigned
name|int
name|dynamic_weak
range|:
literal|1
decl_stmt|;
comment|/* Symbol is referenced with a relocation where C/C++ pointer equality      matters.  */
name|unsigned
name|int
name|pointer_equality_needed
range|:
literal|1
decl_stmt|;
comment|/* String table index in .dynstr if this is a dynamic symbol.  */
name|unsigned
name|long
name|dynstr_index
decl_stmt|;
union|union
block|{
comment|/* If this is a weak defined symbol from a dynamic object, this        field points to a defined symbol with the same value, if there is        one.  Otherwise it is NULL.  */
name|struct
name|elf_link_hash_entry
modifier|*
name|weakdef
decl_stmt|;
comment|/* Hash value of the name computed using the ELF hash function.        Used part way through size_dynamic_sections, after we've finished        with weakdefs.  */
name|unsigned
name|long
name|elf_hash_value
decl_stmt|;
block|}
name|u
union|;
comment|/* Version information.  */
union|union
block|{
comment|/* This field is used for a symbol which is not defined in a        regular object.  It points to the version information read in        from the dynamic object.  */
name|Elf_Internal_Verdef
modifier|*
name|verdef
decl_stmt|;
comment|/* This field is used for a symbol which is defined in a regular        object.  It is set up in size_dynamic_sections.  It points to        the version information we should write out for this symbol.  */
name|struct
name|bfd_elf_version_tree
modifier|*
name|vertree
decl_stmt|;
block|}
name|verinfo
union|;
struct|struct
block|{
comment|/* Virtual table entry use information.  This array is nominally of size        size/sizeof(target_void_pointer), though we have to be able to assume        and track a size while the symbol is still undefined.  It is indexed        via offset/sizeof(target_void_pointer).  */
name|size_t
name|size
decl_stmt|;
name|bfd_boolean
modifier|*
name|used
decl_stmt|;
comment|/* Virtual table derivation info.  */
name|struct
name|elf_link_hash_entry
modifier|*
name|parent
decl_stmt|;
block|}
modifier|*
name|vtable
struct|;
block|}
struct|;
end_struct

begin_comment
comment|/* Will references to this symbol always reference the symbol    in this object?  STV_PROTECTED is excluded from the visibility test    here so that function pointer comparisons work properly.  Since    function symbols not defined in an app are set to their .plt entry,    it's necessary for shared libs to also reference the .plt even    though the symbol is really local to the shared lib.  */
end_comment

begin_define
define|#
directive|define
name|SYMBOL_REFERENCES_LOCAL
parameter_list|(
name|INFO
parameter_list|,
name|H
parameter_list|)
define|\
value|_bfd_elf_symbol_refs_local_p (H, INFO, 0)
end_define

begin_comment
comment|/* Will _calls_ to this symbol always call the version in this object?  */
end_comment

begin_define
define|#
directive|define
name|SYMBOL_CALLS_LOCAL
parameter_list|(
name|INFO
parameter_list|,
name|H
parameter_list|)
define|\
value|_bfd_elf_symbol_refs_local_p (H, INFO, 1)
end_define

begin_comment
comment|/* Common symbols that are turned into definitions don't have the    DEF_REGULAR flag set, so they might appear to be undefined.  */
end_comment

begin_define
define|#
directive|define
name|ELF_COMMON_DEF_P
parameter_list|(
name|H
parameter_list|)
define|\
value|(!(H)->def_regular							\&& !(H)->def_dynamic							\&& (H)->root.type == bfd_link_hash_defined)
end_define

begin_comment
comment|/* Records local symbols to be emitted in the dynamic symbol table.  */
end_comment

begin_struct
struct|struct
name|elf_link_local_dynamic_entry
block|{
name|struct
name|elf_link_local_dynamic_entry
modifier|*
name|next
decl_stmt|;
comment|/* The input bfd this symbol came from.  */
name|bfd
modifier|*
name|input_bfd
decl_stmt|;
comment|/* The index of the local symbol being copied.  */
name|long
name|input_indx
decl_stmt|;
comment|/* The index in the outgoing dynamic symbol table.  */
name|long
name|dynindx
decl_stmt|;
comment|/* A copy of the input symbol.  */
name|Elf_Internal_Sym
name|isym
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|elf_link_loaded_list
block|{
name|struct
name|elf_link_loaded_list
modifier|*
name|next
decl_stmt|;
name|bfd
modifier|*
name|abfd
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Structures used by the eh_frame optimization code.  */
end_comment

begin_struct
struct|struct
name|eh_cie_fde
block|{
comment|/* For FDEs, this points to the CIE used.  */
name|struct
name|eh_cie_fde
modifier|*
name|cie_inf
decl_stmt|;
name|unsigned
name|int
name|size
decl_stmt|;
name|unsigned
name|int
name|offset
decl_stmt|;
name|unsigned
name|int
name|new_offset
decl_stmt|;
name|unsigned
name|char
name|fde_encoding
decl_stmt|;
name|unsigned
name|char
name|lsda_encoding
decl_stmt|;
name|unsigned
name|char
name|lsda_offset
decl_stmt|;
name|unsigned
name|int
name|cie
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|removed
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|add_augmentation_size
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|add_fde_encoding
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|make_relative
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|make_lsda_relative
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|need_lsda_relative
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
name|per_encoding_relative
range|:
literal|1
decl_stmt|;
name|unsigned
name|int
modifier|*
name|set_loc
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|eh_frame_sec_info
block|{
name|unsigned
name|int
name|count
decl_stmt|;
name|struct
name|eh_cie_fde
name|entry
index|[
literal|1
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_struct
struct|struct
name|eh_frame_array_ent
block|{
name|bfd_vma
name|initial_loc
decl_stmt|;
name|bfd_vma
name|fde
decl_stmt|;
block|}
struct|;
end_struct

begin_struct_decl
struct_decl|struct
name|htab
struct_decl|;
end_struct_decl

begin_struct
struct|struct
name|eh_frame_hdr_info
block|{
name|struct
name|htab
modifier|*
name|cies
decl_stmt|;
name|asection
modifier|*
name|hdr_sec
decl_stmt|;
name|unsigned
name|int
name|fde_count
decl_stmt|,
name|array_count
decl_stmt|;
name|struct
name|eh_frame_array_ent
modifier|*
name|array
decl_stmt|;
comment|/* TRUE if .eh_frame_hdr should contain the sorted search table.      We build it if we successfully read all .eh_frame input sections      and recognize them.  */
name|bfd_boolean
name|table
decl_stmt|;
name|bfd_boolean
name|offsets_adjusted
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* ELF linker hash table.  */
end_comment

begin_struct
struct|struct
name|elf_link_hash_table
block|{
name|struct
name|bfd_link_hash_table
name|root
decl_stmt|;
comment|/* Whether we have created the special dynamic sections required      when linking against or generating a shared object.  */
name|bfd_boolean
name|dynamic_sections_created
decl_stmt|;
comment|/* True if this target has relocatable executables, so needs dynamic      section symbols.  */
name|bfd_boolean
name|is_relocatable_executable
decl_stmt|;
comment|/* The BFD used to hold special sections created by the linker.      This will be the first BFD found which requires these sections to      be created.  */
name|bfd
modifier|*
name|dynobj
decl_stmt|;
comment|/* The value to use when initialising got.refcount/offset and      plt.refcount/offset in an elf_link_hash_entry.  Set to zero when      the values are refcounts.  Set to init_got_offset/init_plt_offset      in size_dynamic_sections when the values may be offsets.  */
name|union
name|gotplt_union
name|init_got_refcount
decl_stmt|;
name|union
name|gotplt_union
name|init_plt_refcount
decl_stmt|;
comment|/* The value to use for got.refcount/offset and plt.refcount/offset      when the values may be offsets.  Normally (bfd_vma) -1.  */
name|union
name|gotplt_union
name|init_got_offset
decl_stmt|;
name|union
name|gotplt_union
name|init_plt_offset
decl_stmt|;
comment|/* The number of symbols found in the link which must be put into      the .dynsym section.  */
name|bfd_size_type
name|dynsymcount
decl_stmt|;
comment|/* The string table of dynamic symbols, which becomes the .dynstr      section.  */
name|struct
name|elf_strtab_hash
modifier|*
name|dynstr
decl_stmt|;
comment|/* The number of buckets in the hash table in the .hash section.      This is based on the number of dynamic symbols.  */
name|bfd_size_type
name|bucketcount
decl_stmt|;
comment|/* A linked list of DT_NEEDED names found in dynamic objects      included in the link.  */
name|struct
name|bfd_link_needed_list
modifier|*
name|needed
decl_stmt|;
comment|/* Sections in the output bfd that provides a section symbol      to be used by relocations emitted against local symbols.      Most targets will not use data_index_section.  */
name|asection
modifier|*
name|text_index_section
decl_stmt|;
name|asection
modifier|*
name|data_index_section
decl_stmt|;
comment|/* The _GLOBAL_OFFSET_TABLE_ symbol.  */
name|struct
name|elf_link_hash_entry
modifier|*
name|hgot
decl_stmt|;
comment|/* The _PROCEDURE_LINKAGE_TABLE_ symbol.  */
name|struct
name|elf_link_hash_entry
modifier|*
name|hplt
decl_stmt|;
comment|/* A pointer to information used to merge SEC_MERGE sections.  */
name|void
modifier|*
name|merge_info
decl_stmt|;
comment|/* Used to link stabs in sections.  */
name|struct
name|stab_info
name|stab_info
decl_stmt|;
comment|/* Used by eh_frame code when editing .eh_frame.  */
name|struct
name|eh_frame_hdr_info
name|eh_info
decl_stmt|;
comment|/* A linked list of local symbols to be added to .dynsym.  */
name|struct
name|elf_link_local_dynamic_entry
modifier|*
name|dynlocal
decl_stmt|;
comment|/* A linked list of DT_RPATH/DT_RUNPATH names found in dynamic      objects included in the link.  */
name|struct
name|bfd_link_needed_list
modifier|*
name|runpath
decl_stmt|;
comment|/* Cached first output tls section and size of PT_TLS segment.  */
name|asection
modifier|*
name|tls_sec
decl_stmt|;
name|bfd_size_type
name|tls_size
decl_stmt|;
comment|/* A linked list of BFD's loaded in the link.  */
name|struct
name|elf_link_loaded_list
modifier|*
name|loaded
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Look up an entry in an ELF linker hash table.  */
end_comment

begin_define
define|#
directive|define
name|elf_link_hash_lookup
parameter_list|(
name|table
parameter_list|,
name|string
parameter_list|,
name|create
parameter_list|,
name|copy
parameter_list|,
name|follow
parameter_list|)
define|\
value|((struct elf_link_hash_entry *)					\    bfd_link_hash_lookup (&(table)->root, (string), (create),		\ 			 (copy), (follow)))
end_define

begin_comment
comment|/* Traverse an ELF linker hash table.  */
end_comment

begin_define
define|#
directive|define
name|elf_link_hash_traverse
parameter_list|(
name|table
parameter_list|,
name|func
parameter_list|,
name|info
parameter_list|)
define|\
value|(bfd_link_hash_traverse						\    (&(table)->root,							\     (bfd_boolean (*) (struct bfd_link_hash_entry *, void *)) (func),	\     (info)))
end_define

begin_comment
comment|/* Get the ELF linker hash table from a link_info structure.  */
end_comment

begin_define
define|#
directive|define
name|elf_hash_table
parameter_list|(
name|p
parameter_list|)
value|((struct elf_link_hash_table *) ((p)->hash))
end_define

begin_comment
comment|/* Returns TRUE if the hash table is a struct elf_link_hash_table.  */
end_comment

begin_define
define|#
directive|define
name|is_elf_hash_table
parameter_list|(
name|htab
parameter_list|)
define|\
value|(((struct bfd_link_hash_table *) (htab))->type == bfd_link_elf_hash_table)
end_define

begin_comment
comment|/* Used by bfd_section_from_r_symndx to cache a small number of local    symbol to section mappings.  */
end_comment

begin_define
define|#
directive|define
name|LOCAL_SYM_CACHE_SIZE
value|32
end_define

begin_struct
struct|struct
name|sym_sec_cache
block|{
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|unsigned
name|long
name|indx
index|[
name|LOCAL_SYM_CACHE_SIZE
index|]
decl_stmt|;
name|asection
modifier|*
name|sec
index|[
name|LOCAL_SYM_CACHE_SIZE
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_escape
end_escape

begin_comment
comment|/* Constant information held for an ELF backend.  */
end_comment

begin_struct
struct|struct
name|elf_size_info
block|{
name|unsigned
name|char
name|sizeof_ehdr
decl_stmt|,
name|sizeof_phdr
decl_stmt|,
name|sizeof_shdr
decl_stmt|;
name|unsigned
name|char
name|sizeof_rel
decl_stmt|,
name|sizeof_rela
decl_stmt|,
name|sizeof_sym
decl_stmt|,
name|sizeof_dyn
decl_stmt|,
name|sizeof_note
decl_stmt|;
comment|/* The size of entries in the .hash section.  */
name|unsigned
name|char
name|sizeof_hash_entry
decl_stmt|;
comment|/* The number of internal relocations to allocate per external      relocation entry.  */
name|unsigned
name|char
name|int_rels_per_ext_rel
decl_stmt|;
comment|/* We use some fixed size arrays.  This should be large enough to      handle all back-ends.  */
define|#
directive|define
name|MAX_INT_RELS_PER_EXT_REL
value|3
name|unsigned
name|char
name|arch_size
decl_stmt|,
name|log_file_align
decl_stmt|;
name|unsigned
name|char
name|elfclass
decl_stmt|,
name|ev_current
decl_stmt|;
name|int
function_decl|(
modifier|*
name|write_out_phdrs
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Phdr
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|write_shdrs_and_ehdr
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|write_relocs
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|swap_symbol_in
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|swap_symbol_out
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|slurp_reloc_table
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
name|long
function_decl|(
modifier|*
name|slurp_symbol_table
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|swap_dyn_in
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|Elf_Internal_Dyn
modifier|*
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|swap_dyn_out
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Dyn
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
comment|/* This function is called to swap in a REL relocation.  If an      external relocation corresponds to more than one internal      relocation, then all relocations are swapped in at once.  */
name|void
function_decl|(
modifier|*
name|swap_reloc_in
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|bfd_byte
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
comment|/* This function is called to swap out a REL relocation.  */
name|void
function_decl|(
modifier|*
name|swap_reloc_out
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|)
function_decl|;
comment|/* This function is called to swap in a RELA relocation.  If an      external relocation corresponds to more than one internal      relocation, then all relocations are swapped in at once.  */
name|void
function_decl|(
modifier|*
name|swap_reloca_in
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|bfd_byte
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
comment|/* This function is called to swap out a RELA relocation.  */
name|void
function_decl|(
modifier|*
name|swap_reloca_out
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|elf_symbol_from
parameter_list|(
name|ABFD
parameter_list|,
name|S
parameter_list|)
define|\
value|(((S)->the_bfd->xvec->flavour == bfd_target_elf_flavour \&& (S)->the_bfd->tdata.elf_obj_data != 0) \ 	 ? (elf_symbol_type *) (S) \ 	 : 0)
end_define

begin_enum
enum|enum
name|elf_reloc_type_class
block|{
name|reloc_class_normal
block|,
name|reloc_class_relative
block|,
name|reloc_class_plt
block|,
name|reloc_class_copy
block|}
enum|;
end_enum

begin_struct
struct|struct
name|elf_reloc_cookie
block|{
name|Elf_Internal_Rela
modifier|*
name|rels
decl_stmt|,
modifier|*
name|rel
decl_stmt|,
modifier|*
name|relend
decl_stmt|;
name|Elf_Internal_Sym
modifier|*
name|locsyms
decl_stmt|;
name|bfd
modifier|*
name|abfd
decl_stmt|;
name|size_t
name|locsymcount
decl_stmt|;
name|size_t
name|extsymoff
decl_stmt|;
name|struct
name|elf_link_hash_entry
modifier|*
modifier|*
name|sym_hashes
decl_stmt|;
name|int
name|r_sym_shift
decl_stmt|;
name|bfd_boolean
name|bad_symtab
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* The level of IRIX compatibility we're striving for.  */
end_comment

begin_typedef
typedef|typedef
enum|enum
block|{
name|ict_none
block|,
name|ict_irix5
block|,
name|ict_irix6
block|}
name|irix_compat_t
typedef|;
end_typedef

begin_comment
comment|/* Mapping of ELF section names and types.  */
end_comment

begin_struct
struct|struct
name|bfd_elf_special_section
block|{
specifier|const
name|char
modifier|*
name|prefix
decl_stmt|;
name|int
name|prefix_length
decl_stmt|;
comment|/* 0 means name must match PREFIX exactly.      -1 means name must start with PREFIX followed by an arbitrary string.      -2 means name must match PREFIX exactly or consist of PREFIX followed      by a dot then anything.> 0 means name must start with the first PREFIX_LENGTH chars of      PREFIX and finish with the last SUFFIX_LENGTH chars of PREFIX.  */
name|int
name|suffix_length
decl_stmt|;
name|int
name|type
decl_stmt|;
name|int
name|attr
decl_stmt|;
block|}
struct|;
end_struct

begin_enum
enum|enum
name|action_discarded
block|{
name|COMPLAIN
init|=
literal|1
block|,
name|PRETEND
init|=
literal|2
block|}
enum|;
end_enum

begin_typedef
typedef|typedef
name|asection
modifier|*
function_decl|(
modifier|*
name|elf_gc_mark_hook_fn
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|)
function_decl|;
end_typedef

begin_struct
struct|struct
name|elf_backend_data
block|{
comment|/* The architecture for this backend.  */
name|enum
name|bfd_architecture
name|arch
decl_stmt|;
comment|/* The ELF machine code (EM_xxxx) for this backend.  */
name|int
name|elf_machine_code
decl_stmt|;
comment|/* EI_OSABI. */
name|int
name|elf_osabi
decl_stmt|;
comment|/* The maximum page size for this backend.  */
name|bfd_vma
name|maxpagesize
decl_stmt|;
comment|/* The minimum page size for this backend.  An input object will not be      considered page aligned unless its sections are correctly aligned for      pages at least this large.  May be smaller than maxpagesize.  */
name|bfd_vma
name|minpagesize
decl_stmt|;
comment|/* The common page size for this backend.  */
name|bfd_vma
name|commonpagesize
decl_stmt|;
comment|/* The BFD flags applied to sections created for dynamic linking.  */
name|flagword
name|dynamic_sec_flags
decl_stmt|;
comment|/* A function to translate an ELF RELA relocation to a BFD arelent      structure.  */
name|void
function_decl|(
modifier|*
name|elf_info_to_howto
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to translate an ELF REL relocation to a BFD arelent      structure.  */
name|void
function_decl|(
modifier|*
name|elf_info_to_howto_rel
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to determine whether a symbol is global when      partitioning the symbol table into local and global symbols.      This should be NULL for most targets, in which case the correct      thing will be done.  MIPS ELF, at least on the Irix 5, has      special requirements.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_sym_is_global
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|)
function_decl|;
comment|/* The remaining functions are hooks which are called only if they      are not NULL.  */
comment|/* A function to permit a backend specific check on whether a      particular BFD format is relevant for an object file, and to      permit the backend to set any global information it wishes.  When      this is called elf_elfheader is set, but anything else should be      used with caution.  If this returns FALSE, the check_format      routine will return a bfd_error_wrong_format error.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_object_p
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to do additional symbol processing when reading the      ELF symbol table.  This is where any processor-specific special      section indices are handled.  */
name|void
function_decl|(
modifier|*
name|elf_backend_symbol_processing
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to do additional symbol processing after reading the      entire ELF symbol table.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_symbol_table_processing
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|elf_symbol_type
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
comment|/* A function to set the type of the info field.  Processor-specific      types should be handled here.  */
name|int
function_decl|(
modifier|*
name|elf_backend_get_symbol_type
function_decl|)
parameter_list|(
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* A function to return the linker hash table entry of a symbol that      might be satisfied by an archive symbol.  */
name|struct
name|elf_link_hash_entry
modifier|*
function_decl|(
modifier|*
name|elf_backend_archive_symbol_lookup
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* Return true if local section symbols should have a non-null st_name.      NULL implies false.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_name_local_section_symbols
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to do additional processing on the ELF section header      just before writing it out.  This is used to set the flags and      type fields for some sections, or to actually write out data for      unusual sections.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_section_processing
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to handle unusual section types when creating BFD      sections from ELF sections.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_section_from_shdr
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
comment|/* A function to convert machine dependent ELF section header flags to      BFD internal section header flags.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_section_flags
function_decl|)
parameter_list|(
name|flagword
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Shdr
modifier|*
parameter_list|)
function_decl|;
comment|/* A function that returns a struct containing ELF section flags and      type for the given BFD section.   */
specifier|const
name|struct
name|bfd_elf_special_section
modifier|*
function_decl|(
modifier|*
name|get_sec_type_attr
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to handle unusual program segment types when creating BFD      sections from ELF program segments.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_section_from_phdr
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Phdr
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to set up the ELF section header for a BFD section in      preparation for writing it out.  This is where the flags and type      fields are set for unusual sections.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_fake_sections
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to get the ELF section index for a BFD section.  If      this returns TRUE, the section was found.  If it is a normal ELF      section, *RETVAL should be left unchanged.  If it is not a normal      ELF section *RETVAL should be set to the SHN_xxxx index.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_section_from_bfd_section
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|int
modifier|*
name|retval
parameter_list|)
function_decl|;
comment|/* If this field is not NULL, it is called by the add_symbols phase      of a link just before adding a symbol to the global linker hash      table.  It may modify any of the fields as it wishes.  If *NAME      is set to NULL, the symbol will be skipped rather than being      added to the hash table.  This function is responsible for      handling all processor dependent symbol bindings and section      indices, and must set at least *FLAGS and *SEC for each processor      dependent case; failure to do so will cause a link error.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_add_symbol_hook
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|name
parameter_list|,
name|flagword
modifier|*
name|flags
parameter_list|,
name|asection
modifier|*
modifier|*
name|sec
parameter_list|,
name|bfd_vma
modifier|*
name|value
parameter_list|)
function_decl|;
comment|/* If this field is not NULL, it is called by the elf_link_output_sym      phase of a link for each symbol which will appear in the object file.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_link_output_symbol_hook
function_decl|)
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
comment|/* The CREATE_DYNAMIC_SECTIONS function is called by the ELF backend      linker the first time it encounters a dynamic object in the link.      This function must create any sections required for dynamic      linking.  The ABFD argument is a dynamic object.  The .interp,      .dynamic, .dynsym, .dynstr, and .hash functions have already been      created, and this function may modify the section flags if      desired.  This function will normally create the .got and .plt      sections, but different backends have different requirements.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_create_dynamic_sections
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* When creating a shared library, determine whether to omit the      dynamic symbol for the section.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_omit_section_dynsym
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|osec
parameter_list|)
function_decl|;
comment|/* The CHECK_RELOCS function is called by the add_symbols phase of      the ELF backend linker.  It is called once for each section with      relocs of an object file, just after the symbols for the object      file have been added to the global linker hash table.  The      function must look through the relocs and do any special handling      required.  This generally means allocating space in the global      offset table, and perhaps allocating space for a reloc.  The      relocs are always passed as Rela structures; if the section      actually uses Rel structures, the r_addend field will always be      zero.  */
name|bfd_boolean
function_decl|(
modifier|*
name|check_relocs
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|o
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
name|relocs
parameter_list|)
function_decl|;
comment|/* The CHECK_DIRECTIVES function is called once per input file by      the add_symbols phase of the ELF backend linker.  The function      must inspect the bfd and create any additional symbols according      to any custom directives in the bfd.  */
name|bfd_boolean
function_decl|(
modifier|*
name|check_directives
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* The AS_NEEDED_CLEANUP function is called once per --as-needed      input file that was not needed by the add_symbols phase of the      ELF backend linker.  The function must undo any target specific      changes in the symbol hash table.  */
name|bfd_boolean
function_decl|(
modifier|*
name|as_needed_cleanup
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* The ADJUST_DYNAMIC_SYMBOL function is called by the ELF backend      linker for every symbol which is defined by a dynamic object and      referenced by a regular object.  This is called after all the      input files have been seen, but before the SIZE_DYNAMIC_SECTIONS      function has been called.  The hash table entry should be      bfd_link_hash_defined ore bfd_link_hash_defweak, and it should be      defined in a section from a dynamic object.  Dynamic object      sections are not included in the final link, and this function is      responsible for changing the value to something which the rest of      the link can deal with.  This will normally involve adding an      entry to the .plt or .got or some such section, and setting the      symbol to point to that.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_adjust_dynamic_symbol
function_decl|)
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
name|h
parameter_list|)
function_decl|;
comment|/* The ALWAYS_SIZE_SECTIONS function is called by the backend linker      after all the linker input files have been seen but before the      section sizes have been set.  This is called after      ADJUST_DYNAMIC_SYMBOL, but before SIZE_DYNAMIC_SECTIONS.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_always_size_sections
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* The SIZE_DYNAMIC_SECTIONS function is called by the ELF backend      linker after all the linker input files have been seen but before      the sections sizes have been set.  This is called after      ADJUST_DYNAMIC_SYMBOL has been called on all appropriate symbols.      It is only called when linking against a dynamic object.  It must      set the sizes of the dynamic sections, and may fill in their      contents as well.  The generic ELF linker can handle the .dynsym,      .dynstr and .hash sections.  This function must handle the      .interp section and any sections created by the      CREATE_DYNAMIC_SECTIONS entry point.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_size_dynamic_sections
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* Set TEXT_INDEX_SECTION and DATA_INDEX_SECTION, the output sections      we keep to use as a base for relocs and symbols.  */
name|void
function_decl|(
modifier|*
name|elf_backend_init_index_section
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* The RELOCATE_SECTION function is called by the ELF backend linker      to handle the relocations for a section.       The relocs are always passed as Rela structures; if the section      actually uses Rel structures, the r_addend field will always be      zero.       This function is responsible for adjust the section contents as      necessary, and (if using Rela relocs and generating a      relocatable output file) adjusting the reloc addend as      necessary.       This function does not have to worry about setting the reloc      address or the reloc symbol index.       LOCAL_SYMS is a pointer to the swapped in local symbols.       LOCAL_SECTIONS is an array giving the section in the input file      corresponding to the st_shndx field of each local symbol.       The global hash table entry for the global symbols can be found      via elf_sym_hashes (input_bfd).       When generating relocatable output, this function must handle      STB_LOCAL/STT_SECTION symbols specially.  The output symbol is      going to be the section symbol corresponding to the output      section, which means that the addend must be adjusted      accordingly.       Returns FALSE on error, TRUE on success, 2 if successful and      relocations should be written for this section.  */
name|int
function_decl|(
modifier|*
name|elf_backend_relocate_section
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|bfd
modifier|*
name|input_bfd
parameter_list|,
name|asection
modifier|*
name|input_section
parameter_list|,
name|bfd_byte
modifier|*
name|contents
parameter_list|,
name|Elf_Internal_Rela
modifier|*
name|relocs
parameter_list|,
name|Elf_Internal_Sym
modifier|*
name|local_syms
parameter_list|,
name|asection
modifier|*
modifier|*
name|local_sections
parameter_list|)
function_decl|;
comment|/* The FINISH_DYNAMIC_SYMBOL function is called by the ELF backend      linker just before it writes a symbol out to the .dynsym section.      The processor backend may make any required adjustment to the      symbol.  It may also take the opportunity to set contents of the      dynamic sections.  Note that FINISH_DYNAMIC_SYMBOL is called on      all .dynsym symbols, while ADJUST_DYNAMIC_SYMBOL is only called      on those symbols which are defined by a dynamic object.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_finish_dynamic_symbol
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
name|h
parameter_list|,
name|Elf_Internal_Sym
modifier|*
name|sym
parameter_list|)
function_decl|;
comment|/* The FINISH_DYNAMIC_SECTIONS function is called by the ELF backend      linker just before it writes all the dynamic sections out to the      output file.  The FINISH_DYNAMIC_SYMBOL will have been called on      all dynamic symbols.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_finish_dynamic_sections
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|output_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|)
function_decl|;
comment|/* A function to do any beginning processing needed for the ELF file      before building the ELF headers and computing file positions.  */
name|void
function_decl|(
modifier|*
name|elf_backend_begin_write_processing
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* A function to do any final processing needed for the ELF file      before writing it out.  The LINKER argument is TRUE if this BFD      was created by the ELF backend linker.  */
name|void
function_decl|(
modifier|*
name|elf_backend_final_write_processing
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_boolean
name|linker
parameter_list|)
function_decl|;
comment|/* This function is called by get_program_header_size.  It should      return the number of additional program segments which this BFD      will need.  It should return -1 on error.  */
name|int
function_decl|(
modifier|*
name|elf_backend_additional_program_headers
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* This function is called to modify an existing segment map in a      backend specific fashion.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_modify_segment_map
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* This function is called to modify program headers just before      they are written.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_modify_program_headers
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* This function is called during section garbage collection to      mark sections that define global symbols.  */
name|bfd_boolean
function_decl|(
modifier|*
name|gc_mark_dynamic_ref
function_decl|)
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
name|h
parameter_list|,
name|void
modifier|*
name|inf
parameter_list|)
function_decl|;
comment|/* This function is called during section gc to discover the section a      particular relocation refers to.  */
name|elf_gc_mark_hook_fn
name|gc_mark_hook
decl_stmt|;
comment|/* This function, if defined, is called after the first gc marking pass      to allow the backend to mark additional sections.  */
name|bfd_boolean
function_decl|(
modifier|*
name|gc_mark_extra_sections
function_decl|)
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|elf_gc_mark_hook_fn
name|gc_mark_hook
parameter_list|)
function_decl|;
comment|/* This function, if defined, is called during the sweep phase of gc      in order that a backend might update any data structures it might      be maintaining.  */
name|bfd_boolean
function_decl|(
modifier|*
name|gc_sweep_hook
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|o
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
name|relocs
parameter_list|)
function_decl|;
comment|/* This function, if defined, is called after the ELF headers have      been created.  This allows for things like the OS and ABI versions      to be changed.  */
name|void
function_decl|(
modifier|*
name|elf_backend_post_process_headers
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* This function, if defined, prints a symbol to file and returns the      name of the symbol to be printed.  It should return NULL to fall      back to default symbol printing.  */
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|elf_backend_print_symbol_all
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|)
function_decl|;
comment|/* This function, if defined, is called after all local symbols and      global symbols converted to locals are emitted into the symtab      section.  It allows the backend to emit special local symbols      not handled in the hash table.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_output_arch_local_syms
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bfd_boolean
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/* This function, if defined, is called after all symbols are emitted      into the symtab section.  It allows the backend to emit special      global symbols not handled in the hash table.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_output_arch_syms
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bfd_boolean
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|void
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
comment|/* Copy any information related to dynamic linking from a pre-existing      symbol to a newly created symbol.  Also called to copy flags and      other back-end info to a weakdef, in which case the symbol is not      newly created and plt/got refcounts and dynamic indices should not      be copied.  */
name|void
function_decl|(
modifier|*
name|elf_backend_copy_indirect_symbol
function_decl|)
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
comment|/* Modify any information related to dynamic linking such that the      symbol is not exported.  */
name|void
function_decl|(
modifier|*
name|elf_backend_hide_symbol
function_decl|)
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* A function to do additional symbol fixup, called by      _bfd_elf_fix_symbol_flags.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_fixup_symbol
function_decl|)
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
comment|/* Merge the backend specific symbol attribute.  */
name|void
function_decl|(
modifier|*
name|elf_backend_merge_symbol_attribute
function_decl|)
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* Decide whether an undefined symbol is special and can be ignored.      This is the case for OPTIONAL symbols on IRIX.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_ignore_undef_symbol
function_decl|)
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
comment|/* Emit relocations.  Overrides default routine for emitting relocs,      except during a relocatable link, or if all relocs are being emitted.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_emit_relocs
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Count relocations.  Not called for relocatable links      or if all relocs are being preserved in the output.  */
name|unsigned
name|int
function_decl|(
modifier|*
name|elf_backend_count_relocs
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
comment|/* This function, if defined, is called when an NT_PRSTATUS note is found      in a core file.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_grok_prstatus
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Note
modifier|*
parameter_list|)
function_decl|;
comment|/* This function, if defined, is called when an NT_PSINFO or NT_PRPSINFO      note is found in a core file.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_grok_psinfo
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Note
modifier|*
parameter_list|)
function_decl|;
comment|/* This function, if defined, is called to write a note to a corefile.  */
name|char
modifier|*
function_decl|(
modifier|*
name|elf_backend_write_core_note
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|char
modifier|*
name|buf
parameter_list|,
name|int
modifier|*
name|bufsiz
parameter_list|,
name|int
name|note_type
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
comment|/* Functions to print VMAs.  Special code to handle 64 bit ELF files.  */
name|void
function_decl|(
modifier|*
name|elf_backend_sprintf_vma
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
name|void
function_decl|(
modifier|*
name|elf_backend_fprintf_vma
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
comment|/* This function returns class of a reloc type.  */
name|enum
name|elf_reloc_type_class
function_decl|(
modifier|*
name|elf_backend_reloc_type_class
function_decl|)
parameter_list|(
specifier|const
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
comment|/* This function, if defined, removes information about discarded functions      from other sections which mention them.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_discard_info
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|elf_reloc_cookie
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
comment|/* This function, if defined, signals that the function above has removed      the discarded relocations for this section.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_ignore_discarded_relocs
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* What to do when ld finds relocations against symbols defined in      discarded sections.  */
name|unsigned
name|int
function_decl|(
modifier|*
name|action_discarded
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* This function returns the width of FDE pointers in bytes, or 0 if      that can't be determined for some reason.  The default definition      goes by the bfd's EI_CLASS.  */
name|unsigned
name|int
function_decl|(
modifier|*
name|elf_backend_eh_frame_address_size
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* These functions tell elf-eh-frame whether to attempt to turn      absolute or lsda encodings into pc-relative ones.  The default      definition enables these transformations.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_can_make_relative_eh_frame
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_can_make_lsda_relative_eh_frame
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* This function returns an encoding after computing the encoded      value (and storing it in ENCODED) for the given OFFSET into OSEC,      to be stored in at LOC_OFFSET into the LOC_SEC input section.      The default definition chooses a 32-bit PC-relative encoding.  */
name|bfd_byte
function_decl|(
modifier|*
name|elf_backend_encode_eh_address
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|osec
parameter_list|,
name|bfd_vma
name|offset
parameter_list|,
name|asection
modifier|*
name|loc_sec
parameter_list|,
name|bfd_vma
name|loc_offset
parameter_list|,
name|bfd_vma
modifier|*
name|encoded
parameter_list|)
function_decl|;
comment|/* This function, if defined, may write out the given section.      Returns TRUE if it did so and FALSE if the caller should.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_backend_write_section
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|)
function_decl|;
comment|/* The level of IRIX compatibility we're striving for.      MIPS ELF specific function.  */
name|irix_compat_t
function_decl|(
modifier|*
name|elf_backend_mips_irix_compat
function_decl|)
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
name|reloc_howto_type
modifier|*
function_decl|(
modifier|*
name|elf_backend_mips_rtype_to_howto
function_decl|)
parameter_list|(
name|unsigned
name|int
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
comment|/* The swapping table to use when dealing with ECOFF information.      Used for the MIPS ELF .mdebug section.  */
specifier|const
name|struct
name|ecoff_debug_swap
modifier|*
name|elf_backend_ecoff_debug_swap
decl_stmt|;
comment|/* This function implements `bfd_elf_bfd_from_remote_memory';      see elf.c, elfcode.h.  */
name|bfd
modifier|*
function_decl|(
modifier|*
name|elf_backend_bfd_from_remote_memory
function_decl|)
parameter_list|(
name|bfd
modifier|*
name|templ
parameter_list|,
name|bfd_vma
name|ehdr_vma
parameter_list|,
name|bfd_vma
modifier|*
name|loadbasep
parameter_list|,
name|int
function_decl|(
modifier|*
name|target_read_memory
function_decl|)
parameter_list|(
name|bfd_vma
name|vma
parameter_list|,
name|bfd_byte
modifier|*
name|myaddr
parameter_list|,
name|int
name|len
parameter_list|)
parameter_list|)
function_decl|;
comment|/* This function is used by `_bfd_elf_get_synthetic_symtab';      see elf.c.  */
name|bfd_vma
function_decl|(
modifier|*
name|plt_sym_val
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
specifier|const
name|asection
modifier|*
parameter_list|,
specifier|const
name|arelent
modifier|*
parameter_list|)
function_decl|;
comment|/* Is symbol defined in common section?  */
name|bfd_boolean
function_decl|(
modifier|*
name|common_definition
function_decl|)
parameter_list|(
name|Elf_Internal_Sym
modifier|*
parameter_list|)
function_decl|;
comment|/* Return a common section index for section.  */
name|unsigned
name|int
function_decl|(
modifier|*
name|common_section_index
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* Return a common section for section.  */
name|asection
modifier|*
function_decl|(
modifier|*
name|common_section
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|)
function_decl|;
comment|/* Return TRUE if we can merge 2 definitions.  */
name|bfd_boolean
function_decl|(
modifier|*
name|merge_symbol
function_decl|)
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
modifier|*
parameter_list|,
name|bfd_vma
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
modifier|*
parameter_list|)
function_decl|;
comment|/* Return TRUE if symbol should be hashed in the `.gnu.hash' section.  */
name|bfd_boolean
function_decl|(
modifier|*
name|elf_hash_symbol
function_decl|)
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
comment|/* Return TRUE if type is a function symbol type.  */
name|bfd_boolean
function_decl|(
modifier|*
name|is_function_type
function_decl|)
parameter_list|(
name|unsigned
name|int
name|type
parameter_list|)
function_decl|;
comment|/* Used to handle bad SHF_LINK_ORDER input.  */
name|bfd_error_handler_type
name|link_order_error_handler
decl_stmt|;
comment|/* Name of the PLT relocation section.  */
specifier|const
name|char
modifier|*
name|relplt_name
decl_stmt|;
comment|/* Alternate EM_xxxx machine codes for this backend.  */
name|int
name|elf_machine_alt1
decl_stmt|;
name|int
name|elf_machine_alt2
decl_stmt|;
specifier|const
name|struct
name|elf_size_info
modifier|*
name|s
decl_stmt|;
comment|/* An array of target specific special sections.  */
specifier|const
name|struct
name|bfd_elf_special_section
modifier|*
name|special_sections
decl_stmt|;
comment|/* The size in bytes of the header for the GOT.  This includes the      so-called reserved entries on some systems.  */
name|bfd_vma
name|got_header_size
decl_stmt|;
comment|/* The vendor name to use for a processor-standard attributes section.  */
specifier|const
name|char
modifier|*
name|obj_attrs_vendor
decl_stmt|;
comment|/* The section name to use for a processor-standard attributes section.  */
specifier|const
name|char
modifier|*
name|obj_attrs_section
decl_stmt|;
comment|/* Return 1, 2 or 3 to indicate what type of arguments a      processor-specific tag takes.  */
name|int
function_decl|(
modifier|*
name|obj_attrs_arg_type
function_decl|)
parameter_list|(
name|int
parameter_list|)
function_decl|;
comment|/* The section type to use for an attributes section.  */
name|unsigned
name|int
name|obj_attrs_section_type
decl_stmt|;
comment|/* This is TRUE if the linker should act like collect and gather      global constructors and destructors by name.  This is TRUE for      MIPS ELF because the Irix 5 tools can not handle the .init      section.  */
name|unsigned
name|collect
range|:
literal|1
decl_stmt|;
comment|/* This is TRUE if the linker should ignore changes to the type of a      symbol.  This is TRUE for MIPS ELF because some Irix 5 objects      record undefined functions as STT_OBJECT although the definitions      are STT_FUNC.  */
name|unsigned
name|type_change_ok
range|:
literal|1
decl_stmt|;
comment|/* Whether the backend may use REL relocations.  (Some backends use      both REL and RELA relocations, and this flag is set for those      backends.)  */
name|unsigned
name|may_use_rel_p
range|:
literal|1
decl_stmt|;
comment|/* Whether the backend may use RELA relocations.  (Some backends use      both REL and RELA relocations, and this flag is set for those      backends.)  */
name|unsigned
name|may_use_rela_p
range|:
literal|1
decl_stmt|;
comment|/* Whether the default relocation type is RELA.  If a backend with      this flag set wants REL relocations for a particular section,      it must note that explicitly.  Similarly, if this flag is clear,      and the backend wants RELA relocations for a particular      section.  */
name|unsigned
name|default_use_rela_p
range|:
literal|1
decl_stmt|;
comment|/* Set if RELA relocations for a relocatable link can be handled by      generic code.  Backends that set this flag need do nothing in the      backend relocate_section routine for relocatable linking.  */
name|unsigned
name|rela_normal
range|:
literal|1
decl_stmt|;
comment|/* TRUE if addresses "naturally" sign extend.  This is used when      swapping in from Elf32 when BFD64.  */
name|unsigned
name|sign_extend_vma
range|:
literal|1
decl_stmt|;
name|unsigned
name|want_got_plt
range|:
literal|1
decl_stmt|;
name|unsigned
name|plt_readonly
range|:
literal|1
decl_stmt|;
name|unsigned
name|want_plt_sym
range|:
literal|1
decl_stmt|;
name|unsigned
name|plt_not_loaded
range|:
literal|1
decl_stmt|;
name|unsigned
name|plt_alignment
range|:
literal|4
decl_stmt|;
name|unsigned
name|can_gc_sections
range|:
literal|1
decl_stmt|;
name|unsigned
name|can_refcount
range|:
literal|1
decl_stmt|;
name|unsigned
name|want_got_sym
range|:
literal|1
decl_stmt|;
name|unsigned
name|want_dynbss
range|:
literal|1
decl_stmt|;
comment|/* Targets which do not support physical addressing often require      that the p_paddr field in the section header to be set to zero.      This field indicates whether this behavior is required.  */
name|unsigned
name|want_p_paddr_set_to_zero
range|:
literal|1
decl_stmt|;
comment|/* True if an object file lacking a .note.GNU-stack section      should be assumed to be requesting exec stack.  At least one      other file in the link needs to have a .note.GNU-stack section      for a PT_GNU_STACK segment to be created.  */
name|unsigned
name|default_execstack
range|:
literal|1
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* Information stored for each BFD section in an ELF file.  This    structure is allocated by elf_new_section_hook.  */
end_comment

begin_struct
struct|struct
name|bfd_elf_section_data
block|{
comment|/* The ELF header for this section.  */
name|Elf_Internal_Shdr
name|this_hdr
decl_stmt|;
comment|/* The ELF header for the reloc section associated with this      section, if any.  */
name|Elf_Internal_Shdr
name|rel_hdr
decl_stmt|;
comment|/* If there is a second reloc section associated with this section,      as can happen on Irix 6, this field points to the header.  */
name|Elf_Internal_Shdr
modifier|*
name|rel_hdr2
decl_stmt|;
comment|/* The number of relocations currently assigned to REL_HDR.  */
name|unsigned
name|int
name|rel_count
decl_stmt|;
comment|/* The number of relocations currently assigned to REL_HDR2.  */
name|unsigned
name|int
name|rel_count2
decl_stmt|;
comment|/* The ELF section number of this section.  */
name|int
name|this_idx
decl_stmt|;
comment|/* The ELF section number of the reloc section indicated by      REL_HDR if any.  Only used for an output file.  */
name|int
name|rel_idx
decl_stmt|;
comment|/* The ELF section number of the reloc section indicated by      REL_HDR2 if any.  Only used for an output file.  */
name|int
name|rel_idx2
decl_stmt|;
comment|/* Used by the backend linker when generating a shared library to      record the dynamic symbol index for a section symbol      corresponding to this section.  A value of 0 means that there is      no dynamic symbol for this section.  */
name|int
name|dynindx
decl_stmt|;
comment|/* A pointer to the linked-to section for SHF_LINK_ORDER.  */
name|asection
modifier|*
name|linked_to
decl_stmt|;
comment|/* Used by the backend linker to store the symbol hash table entries      associated with relocs against global symbols.  */
name|struct
name|elf_link_hash_entry
modifier|*
modifier|*
name|rel_hashes
decl_stmt|;
comment|/* A pointer to the swapped relocs.  If the section uses REL relocs,      rather than RELA, all the r_addend fields will be zero.  This      pointer may be NULL.  It is used by the backend linker.  */
name|Elf_Internal_Rela
modifier|*
name|relocs
decl_stmt|;
comment|/* A pointer to a linked list tracking dynamic relocs copied for      local symbols.  */
name|void
modifier|*
name|local_dynrel
decl_stmt|;
comment|/* A pointer to the bfd section used for dynamic relocs.  */
name|asection
modifier|*
name|sreloc
decl_stmt|;
union|union
block|{
comment|/* Group name, if this section is a member of a group.  */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/* Group signature sym, if this is the SHT_GROUP section.  */
name|struct
name|bfd_symbol
modifier|*
name|id
decl_stmt|;
block|}
name|group
union|;
comment|/* For a member of a group, points to the SHT_GROUP section.      NULL for the SHT_GROUP section itself and non-group sections.  */
name|asection
modifier|*
name|sec_group
decl_stmt|;
comment|/* A linked list of member sections in the group.  Circular when used by      the linker.  For the SHT_GROUP section, points at first member.  */
name|asection
modifier|*
name|next_in_group
decl_stmt|;
comment|/* A pointer used for various section optimizations.  */
name|void
modifier|*
name|sec_info
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|elf_section_data
parameter_list|(
name|sec
parameter_list|)
value|((struct bfd_elf_section_data*)(sec)->used_by_bfd)
end_define

begin_define
define|#
directive|define
name|elf_linked_to_section
parameter_list|(
name|sec
parameter_list|)
value|(elf_section_data(sec)->linked_to)
end_define

begin_define
define|#
directive|define
name|elf_section_type
parameter_list|(
name|sec
parameter_list|)
value|(elf_section_data(sec)->this_hdr.sh_type)
end_define

begin_define
define|#
directive|define
name|elf_section_flags
parameter_list|(
name|sec
parameter_list|)
value|(elf_section_data(sec)->this_hdr.sh_flags)
end_define

begin_define
define|#
directive|define
name|elf_group_name
parameter_list|(
name|sec
parameter_list|)
value|(elf_section_data(sec)->group.name)
end_define

begin_define
define|#
directive|define
name|elf_group_id
parameter_list|(
name|sec
parameter_list|)
value|(elf_section_data(sec)->group.id)
end_define

begin_define
define|#
directive|define
name|elf_next_in_group
parameter_list|(
name|sec
parameter_list|)
value|(elf_section_data(sec)->next_in_group)
end_define

begin_define
define|#
directive|define
name|elf_sec_group
parameter_list|(
name|sec
parameter_list|)
value|(elf_section_data(sec)->sec_group)
end_define

begin_define
define|#
directive|define
name|xvec_get_elf_backend_data
parameter_list|(
name|xvec
parameter_list|)
define|\
value|((struct elf_backend_data *) (xvec)->backend_data)
end_define

begin_define
define|#
directive|define
name|get_elf_backend_data
parameter_list|(
name|abfd
parameter_list|)
define|\
value|xvec_get_elf_backend_data ((abfd)->xvec)
end_define

begin_comment
comment|/* This struct is used to pass information to routines called via    elf_link_hash_traverse which must return failure.  */
end_comment

begin_struct
struct|struct
name|elf_info_failed
block|{
name|bfd_boolean
name|failed
decl_stmt|;
name|struct
name|bfd_link_info
modifier|*
name|info
decl_stmt|;
name|struct
name|bfd_elf_version_tree
modifier|*
name|verdefs
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* This structure is used to pass information to    _bfd_elf_link_assign_sym_version.  */
end_comment

begin_struct
struct|struct
name|elf_assign_sym_version_info
block|{
comment|/* Output BFD.  */
name|bfd
modifier|*
name|output_bfd
decl_stmt|;
comment|/* General link information.  */
name|struct
name|bfd_link_info
modifier|*
name|info
decl_stmt|;
comment|/* Version tree.  */
name|struct
name|bfd_elf_version_tree
modifier|*
name|verdefs
decl_stmt|;
comment|/* Whether we had a failure.  */
name|bfd_boolean
name|failed
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* This structure is used to pass information to    _bfd_elf_link_find_version_dependencies.  */
end_comment

begin_struct
struct|struct
name|elf_find_verdep_info
block|{
comment|/* Output BFD.  */
name|bfd
modifier|*
name|output_bfd
decl_stmt|;
comment|/* General link information.  */
name|struct
name|bfd_link_info
modifier|*
name|info
decl_stmt|;
comment|/* The number of dependencies.  */
name|unsigned
name|int
name|vers
decl_stmt|;
comment|/* Whether we had a failure.  */
name|bfd_boolean
name|failed
decl_stmt|;
block|}
struct|;
end_struct

begin_comment
comment|/* The maximum number of known object attributes for any target.  */
end_comment

begin_define
define|#
directive|define
name|NUM_KNOWN_OBJ_ATTRIBUTES
value|32
end_define

begin_comment
comment|/* The value of an object attribute.  type& 1 indicates whether there    is an integer value; type& 2 indicates whether there is a string    value.  */
end_comment

begin_typedef
typedef|typedef
struct|struct
name|obj_attribute
block|{
name|int
name|type
decl_stmt|;
name|unsigned
name|int
name|i
decl_stmt|;
name|char
modifier|*
name|s
decl_stmt|;
block|}
name|obj_attribute
typedef|;
end_typedef

begin_typedef
typedef|typedef
struct|struct
name|obj_attribute_list
block|{
name|struct
name|obj_attribute_list
modifier|*
name|next
decl_stmt|;
name|int
name|tag
decl_stmt|;
name|obj_attribute
name|attr
decl_stmt|;
block|}
name|obj_attribute_list
typedef|;
end_typedef

begin_comment
comment|/* Object attributes may either be defined by the processor ABI, index    OBJ_ATTR_PROC in the *_obj_attributes arrays, or be GNU-specific    (and possibly also processor-specific), index OBJ_ATTR_GNU.  */
end_comment

begin_define
define|#
directive|define
name|OBJ_ATTR_PROC
value|0
end_define

begin_define
define|#
directive|define
name|OBJ_ATTR_GNU
value|1
end_define

begin_define
define|#
directive|define
name|OBJ_ATTR_FIRST
value|OBJ_ATTR_PROC
end_define

begin_define
define|#
directive|define
name|OBJ_ATTR_LAST
value|OBJ_ATTR_GNU
end_define

begin_comment
comment|/* The following object attribute tags are taken as generic, for all    targets and for "gnu" where there is no target standard.  */
end_comment

begin_enum
enum|enum
block|{
name|Tag_NULL
init|=
literal|0
block|,
name|Tag_File
init|=
literal|1
block|,
name|Tag_Section
init|=
literal|2
block|,
name|Tag_Symbol
init|=
literal|3
block|,
name|Tag_compatibility
init|=
literal|32
block|}
enum|;
end_enum

begin_comment
comment|/* Some private data is stashed away for future use using the tdata pointer    in the bfd structure.  */
end_comment

begin_struct
struct|struct
name|elf_obj_tdata
block|{
name|Elf_Internal_Ehdr
name|elf_header
index|[
literal|1
index|]
decl_stmt|;
comment|/* Actual data, but ref like ptr */
name|Elf_Internal_Shdr
modifier|*
modifier|*
name|elf_sect_ptr
decl_stmt|;
name|Elf_Internal_Phdr
modifier|*
name|phdr
decl_stmt|;
name|struct
name|elf_segment_map
modifier|*
name|segment_map
decl_stmt|;
name|struct
name|elf_strtab_hash
modifier|*
name|strtab_ptr
decl_stmt|;
name|int
name|num_locals
decl_stmt|;
name|int
name|num_globals
decl_stmt|;
name|unsigned
name|int
name|num_elf_sections
decl_stmt|;
comment|/* elf_sect_ptr size */
name|int
name|num_section_syms
decl_stmt|;
name|asymbol
modifier|*
modifier|*
name|section_syms
decl_stmt|;
comment|/* STT_SECTION symbols for each section */
name|Elf_Internal_Shdr
name|symtab_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|shstrtab_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|strtab_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|dynsymtab_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|dynstrtab_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|dynversym_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|dynverref_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|dynverdef_hdr
decl_stmt|;
name|Elf_Internal_Shdr
name|symtab_shndx_hdr
decl_stmt|;
name|unsigned
name|int
name|symtab_section
decl_stmt|,
name|shstrtab_section
decl_stmt|;
name|unsigned
name|int
name|strtab_section
decl_stmt|,
name|dynsymtab_section
decl_stmt|;
name|unsigned
name|int
name|symtab_shndx_section
decl_stmt|;
name|unsigned
name|int
name|dynversym_section
decl_stmt|,
name|dynverdef_section
decl_stmt|,
name|dynverref_section
decl_stmt|;
name|file_ptr
name|next_file_pos
decl_stmt|;
name|bfd_vma
name|gp
decl_stmt|;
comment|/* The gp value */
name|unsigned
name|int
name|gp_size
decl_stmt|;
comment|/* The gp size */
comment|/* Information grabbed from an elf core file.  */
name|int
name|core_signal
decl_stmt|;
name|int
name|core_pid
decl_stmt|;
name|int
name|core_lwpid
decl_stmt|;
name|char
modifier|*
name|core_program
decl_stmt|;
name|char
modifier|*
name|core_command
decl_stmt|;
comment|/* A mapping from external symbols to entries in the linker hash      table, used when linking.  This is indexed by the symbol index      minus the sh_info field of the symbol table header.  */
name|struct
name|elf_link_hash_entry
modifier|*
modifier|*
name|sym_hashes
decl_stmt|;
comment|/* Track usage and final offsets of GOT entries for local symbols.      This array is indexed by symbol index.  Elements are used      identically to "got" in struct elf_link_hash_entry.  */
union|union
block|{
name|bfd_signed_vma
modifier|*
name|refcounts
decl_stmt|;
name|bfd_vma
modifier|*
name|offsets
decl_stmt|;
name|struct
name|got_entry
modifier|*
modifier|*
name|ents
decl_stmt|;
block|}
name|local_got
union|;
comment|/* The linker ELF emulation code needs to let the backend ELF linker      know what filename should be used for a dynamic object if the      dynamic object is found using a search.  The emulation code then      sometimes needs to know what name was actually used.  Until the      file has been added to the linker symbol table, this field holds      the name the linker wants.  After it has been added, it holds the      name actually used, which will be the DT_SONAME entry if there is      one.  */
specifier|const
name|char
modifier|*
name|dt_name
decl_stmt|;
comment|/* Records the result of `get_program_header_size'.  */
name|bfd_size_type
name|program_header_size
decl_stmt|;
comment|/* Used by find_nearest_line entry point.  */
name|void
modifier|*
name|line_info
decl_stmt|;
comment|/* Used by MIPS ELF find_nearest_line entry point.  The structure      could be included directly in this one, but there's no point to      wasting the memory just for the infrequently called      find_nearest_line.  */
name|struct
name|mips_elf_find_line
modifier|*
name|find_line_info
decl_stmt|;
comment|/* A place to stash dwarf1 info for this bfd.  */
name|struct
name|dwarf1_debug
modifier|*
name|dwarf1_find_line_info
decl_stmt|;
comment|/* A place to stash dwarf2 info for this bfd.  */
name|void
modifier|*
name|dwarf2_find_line_info
decl_stmt|;
comment|/* An array of stub sections indexed by symbol number, used by the      MIPS ELF linker.  FIXME: We should figure out some way to only      include this field for a MIPS ELF target.  */
name|asection
modifier|*
modifier|*
name|local_stubs
decl_stmt|;
name|asection
modifier|*
modifier|*
name|local_call_stubs
decl_stmt|;
comment|/* Used to determine if PT_GNU_EH_FRAME segment header should be      created.  */
name|asection
modifier|*
name|eh_frame_hdr
decl_stmt|;
name|Elf_Internal_Shdr
modifier|*
modifier|*
name|group_sect_ptr
decl_stmt|;
name|int
name|num_group
decl_stmt|;
comment|/* Number of symbol version definitions we are about to emit.  */
name|unsigned
name|int
name|cverdefs
decl_stmt|;
comment|/* Number of symbol version references we are about to emit.  */
name|unsigned
name|int
name|cverrefs
decl_stmt|;
comment|/* Segment flags for the PT_GNU_STACK segment.  */
name|unsigned
name|int
name|stack_flags
decl_stmt|;
comment|/* Should the PT_GNU_RELRO segment be emitted?  */
name|bfd_boolean
name|relro
decl_stmt|;
comment|/* Symbol version definitions in external objects.  */
name|Elf_Internal_Verdef
modifier|*
name|verdef
decl_stmt|;
comment|/* Symbol version references to external objects.  */
name|Elf_Internal_Verneed
modifier|*
name|verref
decl_stmt|;
comment|/* The Irix 5 support uses two virtual sections, which represent      text/data symbols defined in dynamic objects.  */
name|asymbol
modifier|*
name|elf_data_symbol
decl_stmt|;
name|asymbol
modifier|*
name|elf_text_symbol
decl_stmt|;
name|asection
modifier|*
name|elf_data_section
decl_stmt|;
name|asection
modifier|*
name|elf_text_section
decl_stmt|;
comment|/* Whether a dyanmic object was specified normally on the linker      command line, or was specified when --as-needed was in effect,      or was found via a DT_NEEDED entry.  */
name|enum
name|dynamic_lib_link_class
name|dyn_lib_class
decl_stmt|;
comment|/* This is set to TRUE if the object was created by the backend      linker.  */
name|bfd_boolean
name|linker
decl_stmt|;
comment|/* Irix 5 often screws up the symbol table, sorting local symbols      after global symbols.  This flag is set if the symbol table in      this BFD appears to be screwed up.  If it is, we ignore the      sh_info field in the symbol table header, and always read all the      symbols.  */
name|bfd_boolean
name|bad_symtab
decl_stmt|;
comment|/* Used to determine if the e_flags field has been initialized */
name|bfd_boolean
name|flags_init
decl_stmt|;
comment|/* Symbol buffer.  */
name|void
modifier|*
name|symbuf
decl_stmt|;
name|obj_attribute
name|known_obj_attributes
index|[
literal|2
index|]
index|[
name|NUM_KNOWN_OBJ_ATTRIBUTES
index|]
decl_stmt|;
name|obj_attribute_list
modifier|*
name|other_obj_attributes
index|[
literal|2
index|]
decl_stmt|;
block|}
struct|;
end_struct

begin_define
define|#
directive|define
name|elf_tdata
parameter_list|(
name|bfd
parameter_list|)
value|((bfd) -> tdata.elf_obj_data)
end_define

begin_define
define|#
directive|define
name|elf_elfheader
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> elf_header)
end_define

begin_define
define|#
directive|define
name|elf_elfsections
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> elf_sect_ptr)
end_define

begin_define
define|#
directive|define
name|elf_numsections
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> num_elf_sections)
end_define

begin_define
define|#
directive|define
name|elf_shstrtab
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> strtab_ptr)
end_define

begin_define
define|#
directive|define
name|elf_onesymtab
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> symtab_section)
end_define

begin_define
define|#
directive|define
name|elf_symtab_shndx
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> symtab_shndx_section)
end_define

begin_define
define|#
directive|define
name|elf_dynsymtab
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> dynsymtab_section)
end_define

begin_define
define|#
directive|define
name|elf_dynversym
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> dynversym_section)
end_define

begin_define
define|#
directive|define
name|elf_dynverdef
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> dynverdef_section)
end_define

begin_define
define|#
directive|define
name|elf_dynverref
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> dynverref_section)
end_define

begin_define
define|#
directive|define
name|elf_num_locals
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> num_locals)
end_define

begin_define
define|#
directive|define
name|elf_num_globals
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> num_globals)
end_define

begin_define
define|#
directive|define
name|elf_section_syms
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> section_syms)
end_define

begin_define
define|#
directive|define
name|elf_num_section_syms
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> num_section_syms)
end_define

begin_define
define|#
directive|define
name|core_prpsinfo
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> prpsinfo)
end_define

begin_define
define|#
directive|define
name|core_prstatus
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> prstatus)
end_define

begin_define
define|#
directive|define
name|elf_gp
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> gp)
end_define

begin_define
define|#
directive|define
name|elf_gp_size
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> gp_size)
end_define

begin_define
define|#
directive|define
name|elf_sym_hashes
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> sym_hashes)
end_define

begin_define
define|#
directive|define
name|elf_local_got_refcounts
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> local_got.refcounts)
end_define

begin_define
define|#
directive|define
name|elf_local_got_offsets
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> local_got.offsets)
end_define

begin_define
define|#
directive|define
name|elf_local_got_ents
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> local_got.ents)
end_define

begin_define
define|#
directive|define
name|elf_dt_name
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> dt_name)
end_define

begin_define
define|#
directive|define
name|elf_dyn_lib_class
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> dyn_lib_class)
end_define

begin_define
define|#
directive|define
name|elf_bad_symtab
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> bad_symtab)
end_define

begin_define
define|#
directive|define
name|elf_flags_init
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata(bfd) -> flags_init)
end_define

begin_define
define|#
directive|define
name|elf_known_obj_attributes
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata (bfd) -> known_obj_attributes)
end_define

begin_define
define|#
directive|define
name|elf_other_obj_attributes
parameter_list|(
name|bfd
parameter_list|)
value|(elf_tdata (bfd) -> other_obj_attributes)
end_define

begin_define
define|#
directive|define
name|elf_known_obj_attributes_proc
parameter_list|(
name|bfd
parameter_list|)
define|\
value|(elf_known_obj_attributes (bfd) [OBJ_ATTR_PROC])
end_define

begin_define
define|#
directive|define
name|elf_other_obj_attributes_proc
parameter_list|(
name|bfd
parameter_list|)
define|\
value|(elf_other_obj_attributes (bfd) [OBJ_ATTR_PROC])
end_define

begin_escape
end_escape

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_verdef_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_External_Verdef
modifier|*
parameter_list|,
name|Elf_Internal_Verdef
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_verdef_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Verdef
modifier|*
parameter_list|,
name|Elf_External_Verdef
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_verdaux_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_External_Verdaux
modifier|*
parameter_list|,
name|Elf_Internal_Verdaux
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_verdaux_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Verdaux
modifier|*
parameter_list|,
name|Elf_External_Verdaux
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_verneed_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_External_Verneed
modifier|*
parameter_list|,
name|Elf_Internal_Verneed
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_verneed_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Verneed
modifier|*
parameter_list|,
name|Elf_External_Verneed
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_vernaux_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_External_Vernaux
modifier|*
parameter_list|,
name|Elf_Internal_Vernaux
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_vernaux_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Vernaux
modifier|*
parameter_list|,
name|Elf_External_Vernaux
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_versym_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_External_Versym
modifier|*
parameter_list|,
name|Elf_Internal_Versym
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_swap_versym_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Versym
modifier|*
parameter_list|,
name|Elf_External_Versym
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|_bfd_elf_section_from_bfd_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|bfd_elf_string_from_elf_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|unsigned
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|bfd_elf_get_str_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|unsigned
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|Elf_Internal_Sym
modifier|*
name|bfd_elf_get_elf_syms
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|size_t
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|Elf_External_Sym_Shndx
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|char
modifier|*
name|bfd_elf_sym_name
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_copy_private_bfd_data
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_print_private_bfd_data
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf_print_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|,
name|bfd_print_symbol_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_sprintf_vma
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_fprintf_vma
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|unsigned
name|int
name|_bfd_elf_eh_frame_address_size
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_byte
name|_bfd_elf_encode_eh_address
parameter_list|(
name|bfd
modifier|*
name|abfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|osec
parameter_list|,
name|bfd_vma
name|offset
parameter_list|,
name|asection
modifier|*
name|loc_sec
parameter_list|,
name|bfd_vma
name|loc_offset
parameter_list|,
name|bfd_vma
modifier|*
name|encoded
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_can_make_relative
parameter_list|(
name|bfd
modifier|*
name|input_bfd
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|asection
modifier|*
name|eh_frame_section
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|enum
name|elf_reloc_type_class
name|_bfd_elf_reloc_type_class
parameter_list|(
specifier|const
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_vma
name|_bfd_elf_rela_local_sym
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_vma
name|_bfd_elf_rel_local_sym
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_vma
name|_bfd_elf_section_offset
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|unsigned
name|long
name|bfd_elf_hash
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|unsigned
name|long
name|bfd_elf_gnu_hash
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_reloc_status_type
name|bfd_elf_generic_reloc
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_mkobject
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_mkcorefile
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|Elf_Internal_Shdr
modifier|*
name|bfd_elf_find_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_make_section_from_shdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_make_section_from_phdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Phdr
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|bfd_hash_entry
modifier|*
name|_bfd_elf_link_hash_newfunc
parameter_list|(
name|struct
name|bfd_hash_entry
modifier|*
parameter_list|,
name|struct
name|bfd_hash_table
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|bfd_link_hash_table
modifier|*
name|_bfd_elf_link_hash_table_create
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_link_hash_copy_indirect
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_link_hash_hide_symbol
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_hash_fixup_symbol
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_decl_stmt
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_hash_table_init
argument_list|(
expr|struct
name|elf_link_hash_table
operator|*
argument_list|,
name|bfd
operator|*
argument_list|,
expr|struct
name|bfd_hash_entry
operator|*
call|(
modifier|*
call|)
argument_list|(
expr|struct
name|bfd_hash_entry
operator|*
argument_list|,
expr|struct
name|bfd_hash_table
operator|*
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
argument_list|,
name|unsigned
name|int
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_slurp_version_tables
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_merge_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_match_sections_by_type
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|asection
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
specifier|const
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_is_group_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|struct
name|bfd_section
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_section_already_linked
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_section
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf_set_group_contents
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|asection
modifier|*
name|_bfd_elf_check_kept_section
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_link_just_syms
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_copy_private_header_data
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_copy_private_symbol_data
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|_bfd_generic_init_private_section_data
define|\
value|_bfd_elf_init_private_section_data
end_define

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_init_private_section_data
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_copy_private_section_data
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_write_object_contents
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_write_corefile_contents
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_set_section_contents
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_get_symtab_upper_bound
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_canonicalize_symtab
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_get_dynamic_symtab_upper_bound
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_canonicalize_dynamic_symtab
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_get_synthetic_symtab
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|long
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|long
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_get_reloc_upper_bound
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_canonicalize_reloc
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|sec_ptr
parameter_list|,
name|arelent
modifier|*
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_get_dynamic_reloc_upper_bound
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_canonicalize_dynamic_reloc
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|asymbol
modifier|*
name|_bfd_elf_make_empty_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_get_symbol_info
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|,
name|symbol_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_is_local_label_name
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|alent
modifier|*
name|_bfd_elf_get_lineno
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_set_arch_mach
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|enum
name|bfd_architecture
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_find_nearest_line
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_find_line
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|asymbol
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|_bfd_generic_find_line
value|_bfd_elf_find_line
end_define

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_find_inliner_info
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|_bfd_elf_read_minisymbols
value|_bfd_generic_read_minisymbols
end_define

begin_define
define|#
directive|define
name|_bfd_elf_minisymbol_to_symbol
value|_bfd_generic_minisymbol_to_symbol
end_define

begin_function_decl
specifier|extern
name|int
name|_bfd_elf_sizeof_headers
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_new_section_hook
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_init_reloc_shdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|struct
name|bfd_elf_special_section
modifier|*
name|_bfd_elf_get_special_section
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|struct
name|bfd_elf_special_section
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|struct
name|bfd_elf_special_section
modifier|*
name|_bfd_elf_get_sec_type_attr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* If the target doesn't have reloc handling written yet:  */
end_comment

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_no_info_to_howto
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_section_from_shdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|unsigned
name|int
name|shindex
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_section_from_phdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Phdr
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|_bfd_elf_symbol_from_bfd_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|asection
modifier|*
name|bfd_section_from_r_symndx
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|sym_sec_cache
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|unsigned
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|asection
modifier|*
name|bfd_section_from_elf_index
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|bfd_strtab_hash
modifier|*
name|_bfd_elf_stringtab_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|elf_strtab_hash
modifier|*
name|_bfd_elf_strtab_init
parameter_list|(
name|void
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_strtab_free
parameter_list|(
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_size_type
name|_bfd_elf_strtab_add
parameter_list|(
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_strtab_addref
parameter_list|(
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_strtab_delref
parameter_list|(
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_strtab_clear_all_refs
parameter_list|(
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_size_type
name|_bfd_elf_strtab_size
parameter_list|(
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_size_type
name|_bfd_elf_strtab_offset
parameter_list|(
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|,
name|bfd_size_type
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_strtab_emit
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_strtab_finalize
parameter_list|(
name|struct
name|elf_strtab_hash
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_discard_section_eh_frame
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd_boolean
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
parameter_list|,
name|struct
name|elf_reloc_cookie
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_discard_section_eh_frame_hdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_vma
name|_bfd_elf_eh_frame_section_offset
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_write_section_eh_frame
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_write_section_eh_frame_hdr
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_maybe_strip_eh_frame_hdr
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_merge_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
modifier|*
parameter_list|,
name|bfd_vma
modifier|*
parameter_list|,
name|unsigned
name|int
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_hash_symbol
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_add_default_symbol
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|asection
modifier|*
modifier|*
parameter_list|,
name|bfd_vma
modifier|*
parameter_list|,
name|bfd_boolean
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_export_symbol
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_find_version_dependencies
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_assign_sym_version
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|_bfd_elf_link_lookup_local_dynindx
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_compute_section_file_positions
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_assign_file_positions_for_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|file_ptr
name|_bfd_elf_assign_file_position_for_section
parameter_list|(
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
name|file_ptr
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_validate_reloc
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_create_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_omit_section_dynsym
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_create_dynamic_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_create_got_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|elf_link_hash_entry
modifier|*
name|_bfd_elf_define_linkage_sym
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_init_1_index_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_init_2_index_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elfcore_make_pseudosection
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|,
name|ufile_ptr
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|_bfd_elfcore_strndup
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|size_t
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|Elf_Internal_Rela
modifier|*
name|_bfd_elf_link_read_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_size_reloc_section
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_output_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_fix_symbol_flags
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|struct
name|elf_info_failed
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_adjust_dynamic_symbol
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_adjust_dynamic_copy
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_link_sec_merge_syms
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_dynamic_symbol_p
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_symbol_refs_local_p
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_match_symbols_in_sections
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf_perform_complex_relocation
parameter_list|(
name|bfd
modifier|*
name|output_bfd
name|ATTRIBUTE_UNUSED
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
name|info
parameter_list|,
name|bfd
modifier|*
name|input_bfd
parameter_list|,
name|asection
modifier|*
name|input_section
parameter_list|,
name|bfd_byte
modifier|*
name|contents
parameter_list|,
name|Elf_Internal_Rela
modifier|*
name|rel
parameter_list|,
name|Elf_Internal_Sym
modifier|*
name|local_syms
parameter_list|,
name|asection
modifier|*
modifier|*
name|local_sections
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_setup_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_set_osabi
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|bfd_target
modifier|*
name|bfd_elf32_object_p
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|bfd_target
modifier|*
name|bfd_elf32_core_file_p
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|bfd_elf32_core_file_failing_command
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|bfd_elf32_core_file_failing_signal
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf32_core_file_matches_executable_p
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf32_swap_symbol_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_symbol_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_reloc_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|bfd_byte
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_reloc_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_reloca_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|bfd_byte
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_reloca_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_phdr_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf32_External_Phdr
modifier|*
parameter_list|,
name|Elf_Internal_Phdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_phdr_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Phdr
modifier|*
parameter_list|,
name|Elf32_External_Phdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_dyn_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|Elf_Internal_Dyn
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_swap_dyn_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Dyn
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|bfd_elf32_slurp_symbol_table
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf32_write_shdrs_and_ehdr
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|bfd_elf32_write_out_phdrs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Phdr
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf32_write_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf32_slurp_reloc_table
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|bfd_target
modifier|*
name|bfd_elf64_object_p
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
specifier|const
name|bfd_target
modifier|*
name|bfd_elf64_core_file_p
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|bfd_elf64_core_file_failing_command
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|bfd_elf64_core_file_failing_signal
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf64_core_file_matches_executable_p
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf64_swap_symbol_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_symbol_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Sym
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_reloc_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|bfd_byte
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_reloc_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_reloca_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|bfd_byte
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_reloca_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_phdr_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf64_External_Phdr
modifier|*
parameter_list|,
name|Elf_Internal_Phdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_phdr_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Phdr
modifier|*
parameter_list|,
name|Elf64_External_Phdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_dyn_in
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|Elf_Internal_Dyn
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_swap_dyn_out
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Dyn
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|long
name|bfd_elf64_slurp_symbol_table
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf64_write_shdrs_and_ehdr
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|bfd_elf64_write_out_phdrs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|Elf_Internal_Phdr
modifier|*
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf64_write_relocs
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf64_slurp_reloc_table
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|asymbol
modifier|*
modifier|*
parameter_list|,
name|bfd_boolean
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|elf_link_hash_entry
modifier|*
name|_bfd_elf_archive_symbol_lookup
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_link_add_symbols
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_add_dynamic_entry
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_link_record_dynamic_symbol
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|bfd_elf_link_record_local_dynamic_symbol
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|long
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf_link_mark_dynamic_symbol
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_close_and_cleanup
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_common_definition
parameter_list|(
name|Elf_Internal_Sym
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|unsigned
name|int
name|_bfd_elf_common_section_index
parameter_list|(
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|asection
modifier|*
name|_bfd_elf_common_section
parameter_list|(
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_dwarf2_cleanup_debug_info
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_reloc_status_type
name|_bfd_elf_rel_vtable_reloc_fn
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|arelent
modifier|*
parameter_list|,
name|struct
name|bfd_symbol
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_final_link
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_gc_mark_dynamic_ref_symbol
parameter_list|(
name|struct
name|elf_link_hash_entry
modifier|*
name|h
parameter_list|,
name|void
modifier|*
name|inf
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_gc_sections
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_gc_record_vtinherit
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_gc_record_vtentry
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|asection
modifier|*
name|_bfd_elf_gc_mark_hook
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_gc_mark
parameter_list|(
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|,
name|asection
modifier|*
function_decl|(
modifier|*
function_decl|)
parameter_list|(
name|asection
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|,
name|Elf_Internal_Rela
modifier|*
parameter_list|,
name|struct
name|elf_link_hash_entry
modifier|*
parameter_list|,
name|Elf_Internal_Sym
modifier|*
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_gc_common_finalize_got_offsets
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_gc_common_final_link
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|bfd_elf_reloc_symbol_deleted_p
parameter_list|(
name|bfd_vma
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|struct
name|elf_segment_map
modifier|*
name|_bfd_elf_make_dynamic_segment
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|asection
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_map_sections_to_segments
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|struct
name|bfd_link_info
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_is_function_type
parameter_list|(
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Exported interface for writing elf corefile notes. */
end_comment

begin_function_decl
specifier|extern
name|char
modifier|*
name|elfcore_write_note
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|elfcore_write_prpsinfo
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|elfcore_write_prstatus
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|long
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|elfcore_write_pstatus
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|long
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|elfcore_write_prfpreg
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|elfcore_write_prxfpreg
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|char
modifier|*
name|elfcore_write_lwpstatus
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|char
modifier|*
parameter_list|,
name|int
modifier|*
parameter_list|,
name|long
parameter_list|,
name|int
parameter_list|,
specifier|const
name|void
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd
modifier|*
name|_bfd_elf32_bfd_from_remote_memory
parameter_list|(
name|bfd
modifier|*
name|templ
parameter_list|,
name|bfd_vma
name|ehdr_vma
parameter_list|,
name|bfd_vma
modifier|*
name|loadbasep
parameter_list|,
name|int
function_decl|(
modifier|*
name|target_read_memory
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd
modifier|*
name|_bfd_elf64_bfd_from_remote_memory
parameter_list|(
name|bfd
modifier|*
name|templ
parameter_list|,
name|bfd_vma
name|ehdr_vma
parameter_list|,
name|bfd_vma
modifier|*
name|loadbasep
parameter_list|,
name|int
function_decl|(
modifier|*
name|target_read_memory
function_decl|)
parameter_list|(
name|bfd_vma
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|,
name|int
parameter_list|)
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_vma
name|bfd_elf_obj_attr_size
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf_set_obj_attr_contents
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd_byte
modifier|*
parameter_list|,
name|bfd_vma
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|bfd_elf_get_obj_attr_int
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|bfd_elf_add_obj_attr_int
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|bfd_elf_add_proc_attr_int
parameter_list|(
name|BFD
parameter_list|,
name|TAG
parameter_list|,
name|VALUE
parameter_list|)
define|\
value|bfd_elf_add_obj_attr_int ((BFD), OBJ_ATTR_PROC, (TAG), (VALUE))
end_define

begin_function_decl
specifier|extern
name|void
name|bfd_elf_add_obj_attr_string
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|bfd_elf_add_proc_attr_string
parameter_list|(
name|BFD
parameter_list|,
name|TAG
parameter_list|,
name|VALUE
parameter_list|)
define|\
value|bfd_elf_add_obj_attr_string ((BFD), OBJ_ATTR_PROC, (TAG), (VALUE))
end_define

begin_function_decl
specifier|extern
name|void
name|bfd_elf_add_obj_attr_compat
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|int
parameter_list|,
name|unsigned
name|int
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_define
define|#
directive|define
name|bfd_elf_add_proc_attr_compat
parameter_list|(
name|BFD
parameter_list|,
name|INTVAL
parameter_list|,
name|STRVAL
parameter_list|)
define|\
value|bfd_elf_add_obj_attr_compat ((BFD), OBJ_ATTR_PROC, (INTVAL), (STRVAL))
end_define

begin_function_decl
specifier|extern
name|char
modifier|*
name|_bfd_elf_attr_strdup
parameter_list|(
name|bfd
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_copy_obj_attributes
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|int
name|_bfd_elf_obj_attrs_arg_type
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|void
name|_bfd_elf_parse_attributes
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|Elf_Internal_Shdr
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
specifier|extern
name|bfd_boolean
name|_bfd_elf_merge_object_attributes
parameter_list|(
name|bfd
modifier|*
parameter_list|,
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* Large common section.  */
end_comment

begin_decl_stmt
specifier|extern
name|asection
name|_bfd_elf_large_com_section
decl_stmt|;
end_decl_stmt

begin_comment
comment|/* SH ELF specific routine.  */
end_comment

begin_function_decl
specifier|extern
name|bfd_boolean
name|_sh_elf_set_mach_from_flags
parameter_list|(
name|bfd
modifier|*
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|/* This is the condition under which finish_dynamic_symbol will be called.    If our finish_dynamic_symbol isn't called, we'll need to do something    about initializing any .plt and .got entries in relocate_section.  */
end_comment

begin_define
define|#
directive|define
name|WILL_CALL_FINISH_DYNAMIC_SYMBOL
parameter_list|(
name|DYN
parameter_list|,
name|SHARED
parameter_list|,
name|H
parameter_list|)
define|\
value|((DYN)								\&& ((SHARED) || !(H)->forced_local)					\&& ((H)->dynindx != -1 || (H)->forced_local))
end_define

begin_comment
comment|/* This macro is to avoid lots of duplicated code in the body    of xxx_relocate_section() in the various elfxx-xxxx.c files.  */
end_comment

begin_define
define|#
directive|define
name|RELOC_FOR_GLOBAL_SYMBOL
parameter_list|(
name|info
parameter_list|,
name|input_bfd
parameter_list|,
name|input_section
parameter_list|,
name|rel
parameter_list|,	\
name|r_symndx
parameter_list|,
name|symtab_hdr
parameter_list|,
name|sym_hashes
parameter_list|,	\
name|h
parameter_list|,
name|sec
parameter_list|,
name|relocation
parameter_list|,			\
name|unresolved_reloc
parameter_list|,
name|warned
parameter_list|)
define|\
value|do									\     {									\
comment|/* It seems this can happen with erroneous or unsupported		\ 	 input (mixing a.out and elf in an archive, for example.)  */
value|\       if (sym_hashes == NULL)						\ 	return FALSE;							\ 									\       h = sym_hashes[r_symndx - symtab_hdr->sh_info];			\ 									\       while (h->root.type == bfd_link_hash_indirect			\ 	     || h->root.type == bfd_link_hash_warning)			\ 	h = (struct elf_link_hash_entry *) h->root.u.i.link;		\ 									\       warned = FALSE;							\       unresolved_reloc = FALSE;						\       relocation = 0;							\       if (h->root.type == bfd_link_hash_defined				\ 	  || h->root.type == bfd_link_hash_defweak)			\ 	{								\ 	  sec = h->root.u.def.section;					\ 	  if (sec == NULL						\ 	      || sec->output_section == NULL)				\
comment|/* Set a flag that will be cleared later if we find a	\ 	       relocation value for this symbol.  output_section	\ 	       is typically NULL for symbols satisfied by a shared	\ 	       library.  */
value|\ 	    unresolved_reloc = TRUE;					\ 	  else								\ 	    relocation = (h->root.u.def.value				\ 			  + sec->output_section->vma			\ 			  + sec->output_offset);			\ 	}								\       else if (h->root.type == bfd_link_hash_undefweak)			\ 	;								\       else if (info->unresolved_syms_in_objects == RM_IGNORE		\&& ELF_ST_VISIBILITY (h->other) == STV_DEFAULT)		\ 	;								\       else if (!info->relocatable)					\ 	{								\ 	  bfd_boolean err;						\ 	  err = (info->unresolved_syms_in_objects == RM_GENERATE_ERROR	\ 		 || ELF_ST_VISIBILITY (h->other) != STV_DEFAULT);	\ 	  if (!info->callbacks->undefined_symbol (info,			\ 						  h->root.root.string,	\ 						  input_bfd,		\ 						  input_section,	\ 						  rel->r_offset, err))	\ 	    return FALSE;						\ 	  warned = TRUE;						\ 	}								\     }									\   while (0)
end_define

begin_comment
comment|/* Will a symbol be bound to the the definition within the shared    library, if any.  */
end_comment

begin_define
define|#
directive|define
name|SYMBOLIC_BIND
parameter_list|(
name|INFO
parameter_list|,
name|H
parameter_list|)
define|\
value|((INFO)->symbolic || ((INFO)->dynamic&& !(H)->dynamic))
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* _LIBELF_H_ */
end_comment

end_unit

