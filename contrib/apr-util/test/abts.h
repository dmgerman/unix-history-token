begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
include|#
directive|include
file|<stdarg.h>
include|#
directive|include
file|<stdio.h>
include|#
directive|include
file|<stdlib.h>
include|#
directive|include
file|<string.h>
ifdef|#
directive|ifdef
name|WIN32
include|#
directive|include
file|<io.h>
else|#
directive|else
include|#
directive|include
file|<unistd.h>
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ABTS_H
define|#
directive|define
name|ABTS_H
ifndef|#
directive|ifndef
name|FALSE
define|#
directive|define
name|FALSE
value|0
endif|#
directive|endif
ifndef|#
directive|ifndef
name|TRUE
define|#
directive|define
name|TRUE
value|1
endif|#
directive|endif
struct|struct
name|sub_suite
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|int
name|num_test
decl_stmt|;
name|int
name|failed
decl_stmt|;
name|int
name|not_run
decl_stmt|;
name|int
name|not_impl
decl_stmt|;
name|struct
name|sub_suite
modifier|*
name|next
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|sub_suite
name|sub_suite
typedef|;
struct|struct
name|abts_suite
block|{
name|sub_suite
modifier|*
name|head
decl_stmt|;
name|sub_suite
modifier|*
name|tail
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|abts_suite
name|abts_suite
typedef|;
struct|struct
name|abts_case
block|{
name|int
name|failed
decl_stmt|;
name|sub_suite
modifier|*
name|suite
decl_stmt|;
block|}
struct|;
typedef|typedef
name|struct
name|abts_case
name|abts_case
typedef|;
typedef|typedef
name|void
function_decl|(
modifier|*
name|test_func
function_decl|)
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
define|#
directive|define
name|ADD_SUITE
parameter_list|(
name|suite
parameter_list|)
value|abts_add_suite(suite, __FILE__);
name|abts_suite
modifier|*
name|abts_add_suite
parameter_list|(
name|abts_suite
modifier|*
name|suite
parameter_list|,
specifier|const
name|char
modifier|*
name|suite_name
parameter_list|)
function_decl|;
name|void
name|abts_run_test
parameter_list|(
name|abts_suite
modifier|*
name|ts
parameter_list|,
name|test_func
name|f
parameter_list|,
name|void
modifier|*
name|value
parameter_list|)
function_decl|;
name|void
name|abts_log_message
parameter_list|(
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
function_decl|;
name|void
name|abts_int_equal
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|int
name|expected
parameter_list|,
specifier|const
name|int
name|actual
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_int_nequal
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|int
name|expected
parameter_list|,
specifier|const
name|int
name|actual
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_str_equal
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|char
modifier|*
name|expected
parameter_list|,
specifier|const
name|char
modifier|*
name|actual
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_str_nequal
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|char
modifier|*
name|expected
parameter_list|,
specifier|const
name|char
modifier|*
name|actual
parameter_list|,
name|size_t
name|n
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_ptr_notnull
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|void
modifier|*
name|ptr
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_ptr_equal
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|void
modifier|*
name|expected
parameter_list|,
specifier|const
name|void
modifier|*
name|actual
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_true
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
name|int
name|condition
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_fail
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|char
modifier|*
name|message
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_not_impl
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|char
modifier|*
name|message
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
name|void
name|abts_assert
parameter_list|(
name|abts_case
modifier|*
name|tc
parameter_list|,
specifier|const
name|char
modifier|*
name|message
parameter_list|,
name|int
name|condition
parameter_list|,
name|int
name|lineno
parameter_list|)
function_decl|;
comment|/* Convenience macros. Ryan hates these! */
define|#
directive|define
name|ABTS_INT_EQUAL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|abts_int_equal(a, b, c, __LINE__)
define|#
directive|define
name|ABTS_INT_NEQUAL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|abts_int_nequal(a, b, c, __LINE__)
define|#
directive|define
name|ABTS_STR_EQUAL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|abts_str_equal(a, b, c, __LINE__)
define|#
directive|define
name|ABTS_STR_NEQUAL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|,
name|d
parameter_list|)
value|abts_str_nequal(a, b, c, d, __LINE__)
define|#
directive|define
name|ABTS_PTR_NOTNULL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|abts_ptr_notnull(a, b, __LINE__)
define|#
directive|define
name|ABTS_PTR_EQUAL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|abts_ptr_equal(a, b, c, __LINE__)
define|#
directive|define
name|ABTS_TRUE
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|abts_true(a, b, __LINE__);
define|#
directive|define
name|ABTS_FAIL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|abts_fail(a, b, __LINE__);
define|#
directive|define
name|ABTS_NOT_IMPL
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|abts_not_impl(a, b, __LINE__);
define|#
directive|define
name|ABTS_ASSERT
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|,
name|c
parameter_list|)
value|abts_assert(a, b, c, __LINE__);
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

end_unit

