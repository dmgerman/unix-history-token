begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/* Overview of what this is and does:  * http://www.apache.org/~niq/dbd.html  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|APR_DBD_INTERNAL_H
end_ifndef

begin_define
define|#
directive|define
name|APR_DBD_INTERNAL_H
end_define

begin_include
include|#
directive|include
file|<stdarg.h>
end_include

begin_include
include|#
directive|include
file|"apr_dbd.h"
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
define|#
directive|define
name|TXN_IGNORE_ERRORS
parameter_list|(
name|t
parameter_list|)
define|\
value|((t)&& ((t)->mode& APR_DBD_TRANSACTION_IGNORE_ERRORS))
define|#
directive|define
name|TXN_NOTICE_ERRORS
parameter_list|(
name|t
parameter_list|)
define|\
value|((t)&& !((t)->mode& APR_DBD_TRANSACTION_IGNORE_ERRORS))
define|#
directive|define
name|TXN_DO_COMMIT
parameter_list|(
name|t
parameter_list|)
value|(!((t)->mode& APR_DBD_TRANSACTION_ROLLBACK))
define|#
directive|define
name|TXN_DO_ROLLBACK
parameter_list|(
name|t
parameter_list|)
value|((t)->mode& APR_DBD_TRANSACTION_ROLLBACK)
define|#
directive|define
name|TXN_MODE_BITS
define|\
value|(APR_DBD_TRANSACTION_ROLLBACK|APR_DBD_TRANSACTION_IGNORE_ERRORS)
struct|struct
name|apr_dbd_driver_t
block|{
comment|/** name */
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
comment|/** init: allow driver to perform once-only initialisation.      *  Called once only.  May be NULL      */
name|void
function_decl|(
modifier|*
name|init
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|)
function_decl|;
comment|/** native_handle: return the native database handle of the underlying db      *      * @param handle - apr_dbd handle      * @return - native handle      */
name|void
modifier|*
function_decl|(
modifier|*
name|native_handle
function_decl|)
parameter_list|(
name|apr_dbd_t
modifier|*
name|handle
parameter_list|)
function_decl|;
comment|/** open: obtain a database connection from the server rec.      *  Must be explicitly closed when you're finished with it.      *  WARNING: only use this when you need a connection with      *  a lifetime other than a request      *      *  @param pool - a pool to use for error messages (if any).      *  @param params - connection parameters.      *  @param error - descriptive error.      *  @return database handle, or NULL on error.      */
name|apr_dbd_t
modifier|*
function_decl|(
modifier|*
name|open
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|params
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|error
parameter_list|)
function_decl|;
comment|/** check_conn: check status of a database connection      *      *  @param pool - a pool to use for error messages (if any).      *  @param handle - the connection to check      *  @return APR_SUCCESS or error      */
name|apr_status_t
function_decl|(
modifier|*
name|check_conn
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|)
function_decl|;
comment|/** close: close/release a connection obtained from open()      *      *  @param handle - the connection to release      *  @return APR_SUCCESS or error      */
name|apr_status_t
function_decl|(
modifier|*
name|close
function_decl|)
parameter_list|(
name|apr_dbd_t
modifier|*
name|handle
parameter_list|)
function_decl|;
comment|/** set_dbname: select database name.  May be a no-op if not supported.      *      *  @param pool - working pool      *  @param handle - the connection      *  @param name - the database to select      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|set_dbname
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
comment|/** transaction: start a transaction.  May be a no-op.      *      *  @param pool   - a pool to use for error messages (if any).      *  @param handle - the connection      *  @param trans  - ptr to a transaction.  May be null on entry      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|start_transaction
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|apr_dbd_transaction_t
modifier|*
modifier|*
name|trans
parameter_list|)
function_decl|;
comment|/** end_transaction: end a transaction      *  (commit on success, rollback on error).      *  May be a no-op.      *      *  @param trans - the transaction.      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|end_transaction
function_decl|)
parameter_list|(
name|apr_dbd_transaction_t
modifier|*
name|trans
parameter_list|)
function_decl|;
comment|/** query: execute an SQL query that doesn't return a result set      *      *  @param handle - the connection      *  @param nrows - number of rows affected.      *  @param statement - the SQL statement to execute      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|query
function_decl|)
parameter_list|(
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|int
modifier|*
name|nrows
parameter_list|,
specifier|const
name|char
modifier|*
name|statement
parameter_list|)
function_decl|;
comment|/** select: execute an SQL query that returns a result set      *      *  @param pool - pool to allocate the result set      *  @param handle - the connection      *  @param res - pointer to result set pointer.  May point to NULL on entry      *  @param statement - the SQL statement to execute      *  @param random - 1 to support random access to results (seek any row);      *                  0 to support only looping through results in order      *                    (async access - faster)      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|select
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|apr_dbd_results_t
modifier|*
modifier|*
name|res
parameter_list|,
specifier|const
name|char
modifier|*
name|statement
parameter_list|,
name|int
name|random
parameter_list|)
function_decl|;
comment|/** num_cols: get the number of columns in a results set      *      *  @param res - result set.      *  @return number of columns      */
name|int
function_decl|(
modifier|*
name|num_cols
function_decl|)
parameter_list|(
name|apr_dbd_results_t
modifier|*
name|res
parameter_list|)
function_decl|;
comment|/** num_tuples: get the number of rows in a results set      *  of a synchronous select      *      *  @param res - result set.      *  @return number of rows, or -1 if the results are asynchronous      */
name|int
function_decl|(
modifier|*
name|num_tuples
function_decl|)
parameter_list|(
name|apr_dbd_results_t
modifier|*
name|res
parameter_list|)
function_decl|;
comment|/** get_row: get a row from a result set      *      *  @param pool - pool to allocate the row      *  @param res - result set pointer      *  @param row - pointer to row pointer.  May point to NULL on entry      *  @param rownum - row number, or -1 for "next row".  Ignored if random      *                  access is not supported.      *  @return 0 for success, -1 for rownum out of range or data finished      */
name|int
function_decl|(
modifier|*
name|get_row
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_results_t
modifier|*
name|res
parameter_list|,
name|apr_dbd_row_t
modifier|*
modifier|*
name|row
parameter_list|,
name|int
name|rownum
parameter_list|)
function_decl|;
comment|/** get_entry: get an entry from a row      *      *  @param row - row pointer      *  @param col - entry number      *  @param val - entry to fill      *  @return 0 for success, -1 for no data, +1 for general error      */
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|get_entry
function_decl|)
parameter_list|(
specifier|const
name|apr_dbd_row_t
modifier|*
name|row
parameter_list|,
name|int
name|col
parameter_list|)
function_decl|;
comment|/** error: get current error message (if any)      *      *  @param handle - the connection      *  @param errnum - error code from operation that returned an error      *  @return the database current error message, or message for errnum      *          (implementation-dependent whether errnum is ignored)      */
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|error
function_decl|)
parameter_list|(
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|int
name|errnum
parameter_list|)
function_decl|;
comment|/** escape: escape a string so it is safe for use in query/select      *      *  @param pool - pool to alloc the result from      *  @param string - the string to escape      *  @param handle - the connection      *  @return the escaped, safe string      */
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|escape
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
specifier|const
name|char
modifier|*
name|string
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|)
function_decl|;
comment|/** prepare: prepare a statement      *      *  @param pool - pool to alloc the result from      *  @param handle - the connection      *  @param query - the SQL query      *  @param label - A label for the prepared statement.      *                 use NULL for temporary prepared statements      *                 (eg within a Request in httpd)      *  @param nargs - number of parameters in the query      *  @param nvals - number of values passed in p[b]query/select      *  @param types - pointer to an array with types of parameters      *  @param statement - statement to prepare.  May point to null on entry.      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|prepare
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
specifier|const
name|char
modifier|*
name|query
parameter_list|,
specifier|const
name|char
modifier|*
name|label
parameter_list|,
name|int
name|nargs
parameter_list|,
name|int
name|nvals
parameter_list|,
name|apr_dbd_type_e
modifier|*
name|types
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
modifier|*
name|statement
parameter_list|)
function_decl|;
comment|/** pvquery: query using a prepared statement + args      *      *  @param pool - working pool      *  @param handle - the connection      *  @param nrows - number of rows affected.      *  @param statement - the prepared statement to execute      *  @param args - args to prepared statement      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|pvquery
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|int
modifier|*
name|nrows
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
name|statement
parameter_list|,
name|va_list
name|args
parameter_list|)
function_decl|;
comment|/** pvselect: select using a prepared statement + args      *      *  @param pool - working pool      *  @param handle - the connection      *  @param res - pointer to query results.  May point to NULL on entry      *  @param statement - the prepared statement to execute      *  @param random - Whether to support random-access to results      *  @param args - args to prepared statement      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|pvselect
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|apr_dbd_results_t
modifier|*
modifier|*
name|res
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
name|statement
parameter_list|,
name|int
name|random
parameter_list|,
name|va_list
name|args
parameter_list|)
function_decl|;
comment|/** pquery: query using a prepared statement + args      *      *  @param pool - working pool      *  @param handle - the connection      *  @param nrows - number of rows affected.      *  @param statement - the prepared statement to execute      *  @param args - args to prepared statement      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|pquery
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|int
modifier|*
name|nrows
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
name|statement
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|args
parameter_list|)
function_decl|;
comment|/** pselect: select using a prepared statement + args      *      *  @param pool - working pool      *  @param handle - the connection      *  @param res - pointer to query results.  May point to NULL on entry      *  @param statement - the prepared statement to execute      *  @param random - Whether to support random-access to results      *  @param args - args to prepared statement      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|pselect
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|apr_dbd_results_t
modifier|*
modifier|*
name|res
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
name|statement
parameter_list|,
name|int
name|random
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|args
parameter_list|)
function_decl|;
comment|/** get_name: get a column title from a result set      *      *  @param res - result set pointer      *  @param col - entry number      *  @return param name, or NULL if col is out of bounds.      */
specifier|const
name|char
modifier|*
function_decl|(
modifier|*
name|get_name
function_decl|)
parameter_list|(
specifier|const
name|apr_dbd_results_t
modifier|*
name|res
parameter_list|,
name|int
name|col
parameter_list|)
function_decl|;
comment|/** transaction_mode_get: get the mode of transaction      *      *  @param trans - the transaction.      *  @return mode of transaction      */
name|int
function_decl|(
modifier|*
name|transaction_mode_get
function_decl|)
parameter_list|(
name|apr_dbd_transaction_t
modifier|*
name|trans
parameter_list|)
function_decl|;
comment|/** transaction_mode_set: get the mode of transaction      *      *  @param trans - the transaction.      *  @param mode  - new mode of the transaction      *  @return the mode of transaction in force after the call      */
name|int
function_decl|(
modifier|*
name|transaction_mode_set
function_decl|)
parameter_list|(
name|apr_dbd_transaction_t
modifier|*
name|trans
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
comment|/** format of prepared statement parameters */
specifier|const
name|char
modifier|*
name|pformat
decl_stmt|;
comment|/** pvbquery: query using a prepared statement + binary args      *      *  @param pool - working pool      *  @param handle - the connection      *  @param nrows - number of rows affected.      *  @param statement - the prepared statement to execute      *  @param args - binary args to prepared statement      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|pvbquery
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|int
modifier|*
name|nrows
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
name|statement
parameter_list|,
name|va_list
name|args
parameter_list|)
function_decl|;
comment|/** pvbselect: select using a prepared statement + binary args      *      *  @param pool - working pool      *  @param handle - the connection      *  @param res - pointer to query results.  May point to NULL on entry      *  @param statement - the prepared statement to execute      *  @param random - Whether to support random-access to results      *  @param args - binary args to prepared statement      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|pvbselect
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|apr_dbd_results_t
modifier|*
modifier|*
name|res
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
name|statement
parameter_list|,
name|int
name|random
parameter_list|,
name|va_list
name|args
parameter_list|)
function_decl|;
comment|/** pbquery: query using a prepared statement + binary args      *      *  @param pool - working pool      *  @param handle - the connection      *  @param nrows - number of rows affected.      *  @param statement - the prepared statement to execute      *  @param args - binary args to prepared statement      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|pbquery
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|int
modifier|*
name|nrows
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
name|statement
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
name|args
parameter_list|)
function_decl|;
comment|/** pbselect: select using a prepared statement + binary args      *      *  @param pool - working pool      *  @param handle - the connection      *  @param res - pointer to query results.  May point to NULL on entry      *  @param statement - the prepared statement to execute      *  @param random - Whether to support random-access to results      *  @param args - binary args to prepared statement      *  @return 0 for success or error code      */
name|int
function_decl|(
modifier|*
name|pbselect
function_decl|)
parameter_list|(
name|apr_pool_t
modifier|*
name|pool
parameter_list|,
name|apr_dbd_t
modifier|*
name|handle
parameter_list|,
name|apr_dbd_results_t
modifier|*
modifier|*
name|res
parameter_list|,
name|apr_dbd_prepared_t
modifier|*
name|statement
parameter_list|,
name|int
name|random
parameter_list|,
specifier|const
name|void
modifier|*
modifier|*
name|args
parameter_list|)
function_decl|;
comment|/** datum_get: get a binary entry from a row      *      *  @param row - row pointer      *  @param col - entry number      *  @param type - type of data to get      *  @param data - pointer to data, allocated by the caller      *  @return APR_SUCCESS, an error code on error or if col is out of bounds      */
name|apr_status_t
function_decl|(
modifier|*
name|datum_get
function_decl|)
parameter_list|(
specifier|const
name|apr_dbd_row_t
modifier|*
name|row
parameter_list|,
name|int
name|col
parameter_list|,
name|apr_dbd_type_e
name|type
parameter_list|,
name|void
modifier|*
name|data
parameter_list|)
function_decl|;
block|}
struct|;
comment|/* Export mutex lock/unlock for drivers that need it   * deprecated; create a per-dbd mutex within the (*init) function  * to avoid blocking other providers running on other threads  */
name|APU_DECLARE
argument_list|(
argument|apr_status_t
argument_list|)
name|apr_dbd_mutex_lock
argument_list|(
name|void
argument_list|)
expr_stmt|;
name|APU_DECLARE
argument_list|(
argument|apr_status_t
argument_list|)
name|apr_dbd_mutex_unlock
argument_list|(
name|void
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

