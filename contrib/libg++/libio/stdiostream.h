begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* This is part of libio/iostream, providing -*- C++ -*- input/output. Copyright (C) 1993 Free Software Foundation  This file is part of the GNU IO Library.  This library is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this library; see the file COPYING.  If not, write to the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  As a special exception, if you link this library with files compiled with a GNU compiler to produce an executable, this does not cause the resulting executable to be covered by the GNU General Public License. This exception does not however invalidate any other reasons why the executable file might be covered by the GNU General Public License. */
end_comment

begin_comment
comment|/* Written by Per Bothner (bothner@cygnus.com). */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|_STDIOSTREAM_H
end_ifndef

begin_define
define|#
directive|define
name|_STDIOSTREAM_H
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<iostream.h>
end_include

begin_include
include|#
directive|include
file|<stdio.h>
end_include

begin_extern
extern|extern
literal|"C++"
block|{
name|class
name|stdiobuf
range|:
name|public
name|filebuf
block|{
name|protected
operator|:
name|FILE
operator|*
name|_file
block|;
name|public
operator|:
name|FILE
operator|*
name|stdiofile
argument_list|()
specifier|const
block|{
return|return
name|_file
return|;
block|}
name|stdiobuf
argument_list|(
name|FILE
operator|*
argument_list|)
block|;
operator|~
name|stdiobuf
argument_list|()
block|;
name|int
name|buffered
argument_list|()
specifier|const
block|{
return|return
name|_flags
operator|&
name|_IO_UNBUFFERED
operator|?
literal|0
operator|:
literal|1
return|;
block|}
name|void
name|buffered
argument_list|(
name|int
argument_list|)
block|;
name|virtual
name|streamsize
name|sys_read
argument_list|(
name|char
operator|*
argument_list|,
name|streamsize
argument_list|)
block|;
name|virtual
name|streampos
name|sys_seek
argument_list|(
name|streamoff
argument_list|,
name|_seek_dir
argument_list|)
block|;
name|virtual
name|streamsize
name|sys_write
argument_list|(
specifier|const
name|char
operator|*
argument_list|,
name|streamsize
argument_list|)
block|;
name|virtual
name|int
name|sys_close
argument_list|()
block|;
name|virtual
name|int
name|sync
argument_list|()
block|;
name|virtual
name|int
name|overflow
argument_list|(
argument|int c = EOF
argument_list|)
block|;
name|streamsize
name|xsputn
argument_list|(
argument|const char* s
argument_list|,
argument|streamsize n
argument_list|)
block|; }
decl_stmt|;
name|class
name|istdiostream
range|:
name|public
name|istream
block|{
name|private
operator|:
name|stdiobuf
name|_file
block|;
name|public
operator|:
name|istdiostream
argument_list|(
name|FILE
operator|*
name|__f
argument_list|)
operator|:
name|istream
argument_list|()
block|,
name|_file
argument_list|(
argument|__f
argument_list|)
block|{
name|init
argument_list|(
operator|&
name|_file
argument_list|)
block|; }
name|stdiobuf
operator|*
name|rdbuf
argument_list|()
comment|/* const */
block|{
return|return
operator|&
name|_file
return|;
block|}
name|int
name|buffered
argument_list|()
specifier|const
block|{
return|return
name|_file
operator|.
name|buffered
argument_list|()
return|;
block|}
name|void
name|buffered
argument_list|(
argument|int _i
argument_list|)
block|{
name|_file
operator|.
name|buffered
argument_list|(
name|_i
argument_list|)
block|; }
expr|}
block|;
name|class
name|ostdiostream
operator|:
name|public
name|ostream
block|{
name|private
operator|:
name|stdiobuf
name|_file
block|;
name|public
operator|:
name|ostdiostream
argument_list|(
name|FILE
operator|*
name|__f
argument_list|)
operator|:
name|ostream
argument_list|()
block|,
name|_file
argument_list|(
argument|__f
argument_list|)
block|{
name|init
argument_list|(
operator|&
name|_file
argument_list|)
block|; }
name|stdiobuf
operator|*
name|rdbuf
argument_list|()
comment|/* const */
block|{
return|return
operator|&
name|_file
return|;
block|}
name|int
name|buffered
argument_list|()
specifier|const
block|{
return|return
name|_file
operator|.
name|buffered
argument_list|()
return|;
block|}
name|void
name|buffered
argument_list|(
argument|int _i
argument_list|)
block|{
name|_file
operator|.
name|buffered
argument_list|(
name|_i
argument_list|)
block|; }
expr|}
block|; }
end_extern

begin_comment
comment|// extern "C++"
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !_STDIOSTREAM_H */
end_comment

end_unit

