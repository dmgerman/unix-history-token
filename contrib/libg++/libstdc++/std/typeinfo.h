begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|// RTTI support for -*- C++ -*-
end_comment

begin_comment
comment|// Copyright (C) 1994, 1995 Free Software Foundation
end_comment

begin_comment
comment|// This file is part of the GNU ANSI C++ Library.  This library is free
end_comment

begin_comment
comment|// software; you can redistribute it and/or modify it under the
end_comment

begin_comment
comment|// terms of the GNU General Public License as published by the
end_comment

begin_comment
comment|// Free Software Foundation; either version 2, or (at your option)
end_comment

begin_comment
comment|// any later version.
end_comment

begin_comment
comment|// This library is distributed in the hope that it will be useful,
end_comment

begin_comment
comment|// but WITHOUT ANY WARRANTY; without even the implied warranty of
end_comment

begin_comment
comment|// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
end_comment

begin_comment
comment|// GNU General Public License for more details.
end_comment

begin_comment
comment|// You should have received a copy of the GNU General Public License
end_comment

begin_comment
comment|// along with this library; see the file COPYING.  If not, write to the Free
end_comment

begin_comment
comment|// Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
end_comment

begin_comment
comment|// As a special exception, if you link this library with files
end_comment

begin_comment
comment|// compiled with a GNU compiler to produce an executable, this does not cause
end_comment

begin_comment
comment|// the resulting executable to be covered by the GNU General Public License.
end_comment

begin_comment
comment|// This exception does not however invalidate any other reasons why
end_comment

begin_comment
comment|// the executable file might be covered by the GNU General Public License.
end_comment

begin_comment
comment|// Written by Kung Hsu based upon the specification in the 20 September 1994
end_comment

begin_comment
comment|// C++ working paper, ANSI document X3J16/94-0158.
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|__TYPEINFO__
end_ifndef

begin_define
define|#
directive|define
name|__TYPEINFO__
end_define

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_pragma
pragma|#
directive|pragma
name|interface
literal|"std/typeinfo.h"
end_pragma

begin_endif
endif|#
directive|endif
end_endif

begin_extern
extern|extern
literal|"C"
name|void
modifier|*
name|__throw_type_match_rtti
parameter_list|(
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|,
name|void
modifier|*
parameter_list|)
function_decl|;
end_extern

begin_extern
extern|extern
literal|"C++"
block|{
name|class
name|type_info
block|{
name|private
label|:
comment|// assigning type_info is not supported.  made private.
name|type_info
modifier|&
name|operator
init|=
operator|(
specifier|const
name|type_info
operator|&
operator|)
decl_stmt|;
name|type_info
argument_list|(
specifier|const
name|type_info
operator|&
argument_list|)
expr_stmt|;
name|public
label|:
enum|enum
name|node_type
block|{
name|_RTTI_BUILTIN_TYPE
block|,
comment|// builtin type
name|_RTTI_USER_TYPE
block|,
comment|// user defined type
name|_RTTI_CLASS_TYPE
block|,
comment|// class type
name|_RTTI_POINTER_TYPE
block|,
comment|// pointer type
name|_RTTI_ATTR_TYPE
block|,
comment|// attribute type for const and volatile
name|_RTTI_FUNC_TYPE
block|,
comment|// function type
name|_RTTI_PTMF_TYPE
block|,
comment|// pointer to member function type
name|_RTTI_PTMD_TYPE
comment|// pointer to member data type
block|}
enum|;
comment|// return node type of the object
name|virtual
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_BUILTIN_TYPE
return|;
block|}
comment|// get_name will return the name of the type, NULL if no name (like builtin)
name|virtual
specifier|const
name|char
operator|*
name|__rtti_get_name
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
comment|// compare if type represented by the type_info are the same type
name|virtual
name|int
name|__rtti_compare
argument_list|(
specifier|const
name|type_info
operator|&
argument_list|)
decl|const
block|{
return|return
literal|0
return|;
block|}
comment|// argument passed is the desired type,
comment|// for class type, if the type can be converted to the desired type,
comment|// it will be, and returned, else 0 is returned.  If the match
comment|// succeeds, the return value will be adjusted to point to the sub-object.
name|virtual
name|void
modifier|*
name|__rtti_match
argument_list|(
specifier|const
name|type_info
operator|&
argument_list|,
name|int
argument_list|,
name|void
operator|*
argument_list|)
decl|const
block|{
comment|// This should never be called.
return|return
literal|0
return|;
block|}
empty_stmt|;
comment|// destructor
name|virtual
operator|~
name|type_info
argument_list|()
block|{}
name|type_info
argument_list|()
block|{}
name|bool
name|before
argument_list|(
specifier|const
name|type_info
operator|&
name|arg
argument_list|)
expr_stmt|;
specifier|const
name|char
operator|*
name|name
argument_list|()
specifier|const
block|{
return|return
name|__rtti_get_name
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|type_info
operator|&
name|arg
operator|)
specifier|const
block|{
return|return
name|__rtti_compare
argument_list|(
name|arg
argument_list|)
operator|==
literal|0
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|type_info
operator|&
name|arg
operator|)
specifier|const
block|{
return|return
name|__rtti_compare
argument_list|(
name|arg
argument_list|)
operator|!=
literal|0
return|;
block|}
block|}
empty_stmt|;
comment|// type_info for builtin type
name|class
name|__builtin_type_info
range|:
name|public
name|type_info
block|{
name|public
operator|:
expr|enum
name|builtin_type_val
block|{
name|_RTTI_BI_BOOL
operator|=
literal|1
block|,
name|_RTTI_BI_CHAR
block|,
name|_RTTI_BI_SHORT
block|,
name|_RTTI_BI_INT
block|,
name|_RTTI_BI_LONG
block|,
name|_RTTI_BI_LONGLONG
block|,
name|_RTTI_BI_FLOAT
block|,
name|_RTTI_BI_DOUBLE
block|,
name|_RTTI_BI_LDOUBLE
block|,
name|_RTTI_BI_UCHAR
block|,
name|_RTTI_BI_USHORT
block|,
name|_RTTI_BI_UINT
block|,
name|_RTTI_BI_ULONG
block|,
name|_RTTI_BI_ULONGLONG
block|,
name|_RTTI_BI_SCHAR
block|,
name|_RTTI_BI_WCHAR
block|,
name|_RTTI_BI_VOID
block|}
block|;
name|builtin_type_val
name|b_type
block|;
name|__builtin_type_info
argument_list|(
argument|builtin_type_val bt
argument_list|)
operator|:
name|b_type
argument_list|(
argument|bt
argument_list|)
block|{}
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_BUILTIN_TYPE
return|;
block|}
specifier|const
name|char
operator|*
name|__rtti_get_name
argument_list|()
specifier|const
block|{
return|return
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
return|;
block|}
name|int
name|__rtti_compare
argument_list|(
argument|const type_info& arg
argument_list|)
specifier|const
block|{
return|return
operator|(
name|arg
operator|.
name|__rtti_get_node_type
argument_list|()
operator|==
name|_RTTI_BUILTIN_TYPE
operator|&&
operator|(
operator|(
name|__builtin_type_info
operator|&
operator|)
name|arg
operator|)
operator|.
name|b_type
operator|==
name|b_type
operator|)
operator|?
literal|0
operator|:
operator|-
literal|1
return|;
block|}
expr|}
block|;
comment|// serice function for comparing types by name.
specifier|inline
name|int
name|__fast_compare
argument_list|(
argument|const char *n1
argument_list|,
argument|const char *n2
argument_list|)
block|{
name|int
name|c
block|;
if|if
condition|(
name|n1
operator|==
name|n2
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|n1
operator|==
literal|0
condition|)
return|return
operator|*
name|n2
return|;
elseif|else
if|if
condition|(
name|n2
operator|==
literal|0
condition|)
return|return
operator|*
name|n1
return|;
name|c
operator|=
operator|(
name|int
operator|)
operator|*
name|n1
operator|++
operator|-
operator|(
name|int
operator|)
operator|*
name|n2
operator|++
decl_stmt|;
return|return
name|c
operator|==
literal|0
condition|?
name|strcmp
argument_list|(
name|n1
argument_list|,
name|n2
argument_list|)
else|:
name|c
return|;
block|}
end_extern

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_comment
comment|// type_info for user type.
end_comment

begin_decl_stmt
name|class
name|__user_type_info
range|:
name|public
name|type_info
block|{
name|private
operator|:
specifier|const
name|char
operator|*
name|_name
block|;
name|public
operator|:
name|__user_type_info
argument_list|(
specifier|const
name|char
operator|*
name|nm
argument_list|)
operator|:
name|_name
argument_list|(
argument|nm
argument_list|)
block|{}
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_USER_TYPE
return|;
block|}
specifier|const
name|char
operator|*
name|__rtti_get_name
argument_list|()
specifier|const
block|{
return|return
name|_name
return|;
block|}
name|int
name|__rtti_compare
argument_list|(
argument|const type_info& arg
argument_list|)
specifier|const
block|{
return|return
operator|(
name|arg
operator|.
name|__rtti_get_node_type
argument_list|()
operator|==
name|__rtti_get_node_type
argument_list|()
operator|&&
name|__fast_compare
argument_list|(
name|_name
argument_list|,
name|arg
operator|.
name|__rtti_get_name
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
operator|?
literal|0
operator|:
operator|-
literal|1
return|;
block|}
expr|}
block|;
comment|// type_info for a class.
name|class
name|__class_type_info
operator|:
name|public
name|__user_type_info
block|{
name|private
operator|:
expr|enum
name|access_mode
block|{
name|_RTTI_ACCESS_PUBLIC
block|,
name|_RTTI_ACCESS_PROTECTED
block|,
name|_RTTI_ACCESS_PRIVATE
block|}
block|;
name|type_info
operator|*
operator|*
name|base_list
block|;
name|int
operator|*
name|offset_list
block|;
name|int
operator|*
name|is_virtual_list
block|;
name|access_mode
operator|*
name|access_list
block|;
name|int
name|n_bases
block|;
name|public
operator|:
name|__class_type_info
argument_list|(
argument|const char *name
argument_list|,
argument|type_info **bl
argument_list|,
argument|int *off
argument_list|,
argument|int *is_vir
argument_list|,
argument|access_mode *acc
argument_list|,
argument|int bn
argument_list|)
operator|:
name|__user_type_info
argument_list|(
name|name
argument_list|)
block|,
name|base_list
argument_list|(
name|bl
argument_list|)
block|,
name|offset_list
argument_list|(
name|off
argument_list|)
block|,
name|is_virtual_list
argument_list|(
name|is_vir
argument_list|)
block|,
name|access_list
argument_list|(
name|acc
argument_list|)
block|,
name|n_bases
argument_list|(
argument|bn
argument_list|)
block|{}
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_CLASS_TYPE
return|;
block|}
comment|// inherit __rtti_compare from __user_type_info
comment|// This is a little complex defined in typeinfo.cc
name|void
operator|*
name|__rtti_match
argument_list|(
argument|const type_info&
argument_list|,
argument|int
argument_list|,
argument|void *
argument_list|)
specifier|const
block|; }
block|;
comment|// type info for pointer type.
name|class
name|__pointer_type_info
operator|:
name|public
name|type_info
block|{
name|private
operator|:
name|type_info
operator|&
name|type
block|;
name|public
operator|:
name|__pointer_type_info
argument_list|(
name|type_info
operator|&
name|ti
argument_list|)
operator|:
name|type
argument_list|(
argument|ti
argument_list|)
block|{}
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_POINTER_TYPE
return|;
block|}
specifier|const
name|char
operator|*
name|__rtti_get_name
argument_list|()
specifier|const
block|{
return|return
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
return|;
block|}
name|int
name|__rtti_compare
argument_list|(
argument|const type_info& arg
argument_list|)
specifier|const
block|{
return|return
operator|(
name|arg
operator|.
name|__rtti_get_node_type
argument_list|()
operator|==
name|__rtti_get_node_type
argument_list|()
operator|&&
name|type
operator|.
name|__rtti_compare
argument_list|(
operator|(
operator|(
name|__pointer_type_info
operator|&
operator|)
name|arg
operator|)
operator|.
name|type
argument_list|)
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
name|void
operator|*
name|__rtti_match
argument_list|(
argument|const type_info& catch_type
argument_list|,
argument|int
argument_list|,
argument|void *objptr
argument_list|)
specifier|const
block|; }
block|;
comment|// type info for attributes
name|class
name|__attr_type_info
operator|:
name|public
name|type_info
block|{
name|public
operator|:
expr|enum
name|attr_val
block|{
name|_RTTI_ATTR_CONST
operator|=
literal|1
block|,
name|_RTTI_ATTR_VOLATILE
block|,
name|_RTTI_ATTR_CONSTVOL
block|}
block|;
name|attr_val
name|attr
block|;
name|type_info
operator|&
name|type
block|;
name|__attr_type_info
argument_list|(
argument|attr_val a
argument_list|,
argument|type_info& t
argument_list|)
operator|:
name|attr
argument_list|(
name|a
argument_list|)
block|,
name|type
argument_list|(
argument|t
argument_list|)
block|{}
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_ATTR_TYPE
return|;
block|}
specifier|const
name|char
operator|*
name|__rtti_get_name
argument_list|()
specifier|const
block|{
return|return
operator|(
specifier|const
name|char
operator|*
operator|)
literal|0
return|;
block|}
name|int
name|__rtti_compare
argument_list|(
argument|const type_info& arg
argument_list|)
specifier|const
block|{
return|return
operator|(
name|arg
operator|.
name|__rtti_get_node_type
argument_list|()
operator|==
name|_RTTI_ATTR_TYPE
operator|&&
name|attr
operator|==
operator|(
operator|(
name|__attr_type_info
operator|&
operator|)
name|arg
operator|)
operator|.
name|attr
operator|&&
name|type
operator|.
name|__rtti_compare
argument_list|(
operator|(
operator|(
name|__attr_type_info
operator|&
operator|)
name|arg
operator|)
operator|.
name|type
argument_list|)
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
expr|}
block|;
comment|// type info for function.
name|class
name|__func_type_info
operator|:
name|public
name|__user_type_info
block|{
name|public
operator|:
name|__func_type_info
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
operator|:
name|__user_type_info
argument_list|(
argument|name
argument_list|)
block|{}
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_FUNC_TYPE
return|;
block|}
expr|}
block|;
comment|// type info for pointer to member function.
name|class
name|__ptmf_type_info
operator|:
name|public
name|__user_type_info
block|{
name|public
operator|:
name|__ptmf_type_info
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
operator|:
name|__user_type_info
argument_list|(
argument|name
argument_list|)
block|{}
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_PTMF_TYPE
return|;
block|}
expr|}
block|;
comment|// type info for pointer to data member.
name|class
name|__ptmd_type_info
operator|:
name|public
name|type_info
block|{
name|type_info
operator|&
name|classtype
block|;
name|type_info
operator|&
name|type
block|;
name|public
operator|:
name|__ptmd_type_info
argument_list|(
name|type_info
operator|&
name|tc
argument_list|,
name|type_info
operator|&
name|t
argument_list|)
operator|:
name|classtype
argument_list|(
name|tc
argument_list|)
block|,
name|type
argument_list|(
argument|t
argument_list|)
block|{}
name|node_type
name|__rtti_get_node_type
argument_list|()
specifier|const
block|{
return|return
name|_RTTI_PTMD_TYPE
return|;
block|}
name|int
name|__rtti_compare
argument_list|(
argument|const type_info& arg
argument_list|)
specifier|const
block|{
return|return
operator|(
name|arg
operator|.
name|__rtti_get_node_type
argument_list|()
operator|==
name|_RTTI_PTMD_TYPE
operator|&&
name|classtype
operator|.
name|__rtti_compare
argument_list|(
operator|(
operator|(
name|__ptmd_type_info
operator|&
operator|)
name|arg
operator|)
operator|.
name|classtype
argument_list|)
operator|==
literal|0
operator|&&
name|type
operator|.
name|__rtti_compare
argument_list|(
operator|(
operator|(
name|__ptmd_type_info
operator|&
operator|)
name|arg
operator|)
operator|.
name|type
argument_list|)
operator|==
literal|0
operator|)
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
expr|}
block|; }
end_decl_stmt

begin_comment
comment|// extern "C++"
end_comment

begin_include
include|#
directive|include
file|<stdexcept>
end_include

begin_endif
endif|#
directive|endif
end_endif

end_unit

