begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|TEMPBUF_H
end_ifndef

begin_define
define|#
directive|define
name|TEMPBUF_H
end_define

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<pair.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__stl_buffer_size
end_ifndef

begin_define
define|#
directive|define
name|__stl_buffer_size
value|16384
end_define

begin_comment
comment|// 16k
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|extern
name|char
name|__stl_temp_buffer
index|[
name|__stl_buffer_size
index|]
decl_stmt|;
end_decl_stmt

begin_comment
comment|//not reentrant code
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|pair
operator|<
name|T
operator|*
operator|,
name|int
operator|>
name|get_temporary_buffer
argument_list|(
argument|int len
argument_list|,
argument|T*
argument_list|)
block|{
while|while
condition|(
name|len
operator|>
name|__stl_buffer_size
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|)
block|{
name|set_new_handler
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|T
modifier|*
name|tmp
init|=
operator|(
name|T
operator|*
operator|)
operator|(
operator|::
name|operator
name|new
argument_list|(
operator|(
name|unsigned
name|int
operator|)
name|len
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|tmp
condition|)
return|return
name|pair
operator|<
name|T
operator|*
operator|,
name|int
operator|>
operator|(
name|tmp
operator|,
name|len
operator|)
return|;
name|len
operator|=
name|len
operator|/
literal|2
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|pair
operator|<
name|T
operator|*
operator|,
name|int
operator|>
operator|(
operator|(
name|T
operator|*
operator|)
name|__stl_temp_buffer
operator|,
call|(
name|int
call|)
argument_list|(
name|__stl_buffer_size
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
operator|)
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|return_temporary_buffer
argument_list|(
argument|T* p
argument_list|)
block|{
if|if
condition|(
operator|(
name|char
operator|*
operator|)
operator|(
name|p
operator|)
operator|!=
name|__stl_temp_buffer
condition|)
name|deallocate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|pair
operator|<
name|T
operator|*
operator|,
name|long
operator|>
name|get_temporary_buffer
argument_list|(
argument|long len
argument_list|,
argument|T* p
argument_list|)
block|{
if|if
condition|(
name|len
operator|>
name|INT_MAX
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
condition|)
name|len
operator|=
name|INT_MAX
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
expr_stmt|;
name|pair
operator|<
name|T
operator|*
operator|,
name|int
operator|>
name|tmp
operator|=
name|get_temporary_buffer
argument_list|(
operator|(
name|int
operator|)
name|len
argument_list|,
name|p
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|pair
operator|<
name|T
operator|*
operator|,
name|long
operator|>
operator|(
name|tmp
operator|.
name|first
operator|,
call|(
name|long
call|)
argument_list|(
name|tmp
operator|.
name|second
argument_list|)
operator|)
return|;
end_return

begin_endif
unit|}
endif|#
directive|endif
end_endif

end_unit

