begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|SET_H
end_ifndef

begin_define
define|#
directive|define
name|SET_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|Allocator
end_ifndef

begin_define
define|#
directive|define
name|Allocator
value|allocator
end_define

begin_include
include|#
directive|include
file|<defalloc.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<tree.h>
end_include

begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|Compare
operator|>
name|class
name|set
block|{
name|public
operator|:
comment|// typedefs:
typedef|typedef
name|Key
name|key_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Key
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Compare
name|key_compare
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|Compare
name|value_compare
typedef|;
end_typedef

begin_label
name|private
label|:
end_label

begin_typedef
typedef|typedef
name|rb_tree
operator|<
name|key_type
operator|,
name|value_type
operator|,
name|ident
operator|<
name|value_type
operator|,
name|key_type
operator|>
operator|,
name|key_compare
operator|>
name|rep_type
expr_stmt|;
end_typedef

begin_decl_stmt
name|rep_type
name|t
decl_stmt|;
end_decl_stmt

begin_comment
comment|// red-black tree representing set
end_comment

begin_label
name|public
label|:
end_label

begin_typedef
typedef|typedef
name|rep_type
operator|::
name|const_reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|rep_type
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|rep_type
operator|::
name|const_iterator
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|rep_type
operator|::
name|const_iterator
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|rep_type
operator|::
name|const_reverse_iterator
name|reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|rep_type
operator|::
name|const_reverse_iterator
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|rep_type
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|rep_type
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_comment
comment|// allocation/deallocation
end_comment

begin_expr_stmt
name|set
argument_list|(
specifier|const
name|Compare
operator|&
name|comp
operator|=
name|Compare
argument_list|()
argument_list|)
operator|:
name|t
argument_list|(
argument|comp
argument_list|,
argument|false
argument_list|)
block|{}
name|set
argument_list|(
specifier|const
name|value_type
operator|*
name|first
argument_list|,
specifier|const
name|value_type
operator|*
name|last
argument_list|,
specifier|const
name|Compare
operator|&
name|comp
operator|=
name|Compare
argument_list|()
argument_list|)
operator|:
name|t
argument_list|(
argument|comp
argument_list|,
argument|false
argument_list|)
block|{
for|for
control|(
specifier|const
name|value_type
modifier|*
name|i
init|=
name|first
init|;
name|i
operator|!=
name|last
condition|;
operator|++
name|i
control|)
name|t
operator|.
name|insert
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|set
argument_list|(
specifier|const
name|set
operator|<
name|Key
argument_list|,
name|Compare
operator|>
operator|&
name|x
argument_list|)
operator|:
name|t
argument_list|(
argument|x.t
argument_list|,
argument|false
argument_list|)
block|{}
name|set
operator|<
name|Key
operator|,
name|Compare
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|set
operator|<
name|Key
operator|,
name|Compare
operator|>
operator|&
name|x
operator|)
block|{
name|t
operator|=
name|x
operator|.
name|t
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_comment
comment|// accessors:
end_comment

begin_expr_stmt
name|key_compare
name|key_comp
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|key_comp
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|value_compare
name|value_comp
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|key_comp
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|rbegin
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|rend
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|t
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_decl_stmt
name|void
name|swap
argument_list|(
name|set
operator|<
name|Key
argument_list|,
name|Compare
operator|>
operator|&
name|x
argument_list|)
block|{
name|t
operator|.
name|swap
argument_list|(
name|x
operator|.
name|t
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_comment
comment|// insert/erase
end_comment

begin_typedef
typedef|typedef
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
name|pair_iterator_bool
expr_stmt|;
end_typedef

begin_comment
comment|// typedef done to get around compiler bug
end_comment

begin_function
name|pair_iterator_bool
name|insert
parameter_list|(
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
name|pair
operator|<
name|rep_type
operator|::
name|iterator
operator|,
name|bool
operator|>
name|p
operator|=
name|t
operator|.
name|insert
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|pair
operator|<
name|iterator
operator|,
name|bool
operator|>
operator|(
name|p
operator|.
name|first
operator|,
name|p
operator|.
name|second
operator|)
return|;
block|}
end_function

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|t
operator|.
name|insert
argument_list|(
operator|(
name|rep_type
operator|::
name|iterator
operator|&
operator|)
name|position
argument_list|,
name|x
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|insert
parameter_list|(
specifier|const
name|value_type
modifier|*
name|first
parameter_list|,
specifier|const
name|value_type
modifier|*
name|last
parameter_list|)
block|{
for|for
control|(
specifier|const
name|value_type
modifier|*
name|i
init|=
name|first
init|;
name|i
operator|!=
name|last
condition|;
operator|++
name|i
control|)
name|t
operator|.
name|insert
argument_list|(
operator|*
name|i
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
name|t
operator|.
name|erase
argument_list|(
operator|(
name|rep_type
operator|::
name|iterator
operator|&
operator|)
name|position
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|size_type
name|erase
parameter_list|(
specifier|const
name|key_type
modifier|&
name|x
parameter_list|)
block|{
return|return
name|t
operator|.
name|erase
argument_list|(
name|x
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
name|t
operator|.
name|erase
argument_list|(
operator|(
name|rep_type
operator|::
name|iterator
operator|&
operator|)
name|first
argument_list|,
operator|(
name|rep_type
operator|::
name|iterator
operator|&
operator|)
name|last
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// set operations:
end_comment

begin_decl_stmt
name|iterator
name|find
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|find
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|size_type
name|count
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|count
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|iterator
name|lower_bound
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|lower_bound
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_decl_stmt
name|iterator
name|upper_bound
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|upper_bound
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_typedef
typedef|typedef
name|pair
operator|<
name|iterator
operator|,
name|iterator
operator|>
name|pair_iterator_iterator
expr_stmt|;
end_typedef

begin_comment
comment|// typedef done to get around compiler bug
end_comment

begin_decl_stmt
name|pair_iterator_iterator
name|equal_range
argument_list|(
specifier|const
name|key_type
operator|&
name|x
argument_list|)
decl|const
block|{
return|return
name|t
operator|.
name|equal_range
argument_list|(
name|x
argument_list|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|set
operator|<
name|Key
operator|,
name|Compare
operator|>
operator|&
name|x
operator|,
specifier|const
name|set
operator|<
name|Key
operator|,
name|Compare
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|size
argument_list|()
operator|==
name|y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Key
operator|,
name|class
name|Compare
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|set
operator|<
name|Key
operator|,
name|Compare
operator|>
operator|&
name|x
operator|,
specifier|const
name|set
operator|<
name|Key
operator|,
name|Compare
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|,
name|y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_undef
undef|#
directive|undef
name|Allocator
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

