begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|ITERATOR_H
end_ifndef

begin_define
define|#
directive|define
name|ITERATOR_H
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<iostream.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_include
include|#
directive|include
file|<bool.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<function.h>
end_include

begin_struct
struct|struct
name|input_iterator_tag
block|{}
struct|;
end_struct

begin_struct
struct|struct
name|output_iterator_tag
block|{}
struct|;
end_struct

begin_struct
struct|struct
name|forward_iterator_tag
block|{}
struct|;
end_struct

begin_struct
struct|struct
name|bidirectional_iterator_tag
block|{}
struct|;
end_struct

begin_struct
struct|struct
name|random_access_iterator_tag
block|{}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
expr|struct
name|input_iterator
block|{}
expr_stmt|;
end_expr_stmt

begin_struct
struct|struct
name|output_iterator
block|{}
struct|;
end_struct

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
expr|struct
name|forward_iterator
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
expr|struct
name|bidirectional_iterator
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
expr|struct
name|random_access_iterator
block|{}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|input_iterator_tag
name|iterator_category
argument_list|(
argument|const input_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|input_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
specifier|inline
name|output_iterator_tag
name|iterator_category
parameter_list|(
specifier|const
name|output_iterator
modifier|&
parameter_list|)
block|{
return|return
name|output_iterator_tag
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|forward_iterator_tag
name|iterator_category
argument_list|(
argument|const forward_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|forward_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bidirectional_iterator_tag
name|iterator_category
argument_list|(
argument|const bidirectional_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|bidirectional_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const random_access_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|random_access_iterator_tag
name|iterator_category
argument_list|(
argument|const T*
argument_list|)
block|{
return|return
name|random_access_iterator_tag
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const input_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const forward_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const bidirectional_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const random_access_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const T*
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const input_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const forward_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const bidirectional_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
operator|*
name|distance_type
argument_list|(
argument|const random_access_iterator<T
argument_list|,
argument|Distance>&
argument_list|)
block|{
return|return
operator|(
name|Distance
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|ptrdiff_t
operator|*
name|distance_type
argument_list|(
argument|const T*
argument_list|)
block|{
return|return
operator|(
name|ptrdiff_t
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|class
name|back_insert_iterator
operator|:
name|public
name|output_iterator
block|{
name|protected
operator|:
name|Container
operator|&
name|container
block|;
name|public
operator|:
name|back_insert_iterator
argument_list|(
name|Container
operator|&
name|x
argument_list|)
operator|:
name|container
argument_list|(
argument|x
argument_list|)
block|{}
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Container
operator|::
name|value_type
operator|&
name|value
operator|)
block|{
name|container
operator|.
name|push_back
argument_list|(
name|value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Container
operator|>
name|back_insert_iterator
operator|<
name|Container
operator|>
name|back_inserter
argument_list|(
argument|Container& x
argument_list|)
block|{
return|return
name|back_insert_iterator
operator|<
name|Container
operator|>
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|class
name|front_insert_iterator
operator|:
name|public
name|output_iterator
block|{
name|protected
operator|:
name|Container
operator|&
name|container
block|;
name|public
operator|:
name|front_insert_iterator
argument_list|(
name|Container
operator|&
name|x
argument_list|)
operator|:
name|container
argument_list|(
argument|x
argument_list|)
block|{}
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Container
operator|::
name|value_type
operator|&
name|value
operator|)
block|{
name|container
operator|.
name|push_front
argument_list|(
name|value
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Container
operator|>
name|front_insert_iterator
operator|<
name|Container
operator|>
name|front_inserter
argument_list|(
argument|Container& x
argument_list|)
block|{
return|return
name|front_insert_iterator
operator|<
name|Container
operator|>
operator|(
name|x
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|class
name|insert_iterator
operator|:
name|public
name|output_iterator
block|{
name|protected
operator|:
name|Container
operator|&
name|container
block|;
name|Container
operator|::
name|iterator
name|iter
block|;
name|public
operator|:
name|insert_iterator
argument_list|(
argument|Container& x
argument_list|,
argument|Container::iterator i
argument_list|)
operator|:
name|container
argument_list|(
name|x
argument_list|)
block|,
name|iter
argument_list|(
argument|i
argument_list|)
block|{}
name|insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|Container
operator|::
name|value_type
operator|&
name|value
operator|)
block|{
name|iter
operator|=
name|container
operator|.
name|insert
argument_list|(
name|iter
argument_list|,
name|value
argument_list|)
block|;
operator|++
name|iter
block|;
return|return
operator|*
name|this
return|;
block|}
name|insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|insert_iterator
operator|<
name|Container
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Container
operator|,
name|class
name|Iterator
operator|>
name|insert_iterator
operator|<
name|Container
operator|>
name|inserter
argument_list|(
argument|Container& x
argument_list|,
argument|Iterator i
argument_list|)
block|{
return|return
name|insert_iterator
operator|<
name|Container
operator|>
operator|(
name|x
operator|,
name|Container
operator|::
name|iterator
argument_list|(
name|i
argument_list|)
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|=
name|ptrdiff_t
operator|>
comment|// Reference = T&
name|class
name|reverse_bidirectional_iterator
operator|:
name|public
name|bidirectional_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
block|{
typedef|typedef
name|reverse_bidirectional_iterator
operator|<
name|BidirectionalIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
name|self
expr_stmt|;
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|self
operator|&
name|x
operator|,
specifier|const
name|self
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|BidirectionalIterator
name|current
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|reverse_bidirectional_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|reverse_bidirectional_iterator
argument_list|(
argument|BidirectionalIterator x
argument_list|)
end_macro

begin_macro
unit|:
name|current
argument_list|(
argument|x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_function
name|BidirectionalIterator
name|base
parameter_list|()
block|{
return|return
name|current
return|;
block|}
end_function

begin_expr_stmt
name|Reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
name|BidirectionalIterator
name|tmp
operator|=
name|current
block|;
return|return
operator|*
operator|--
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|--
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|++
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|BidirectionalIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|reverse_bidirectional_iterator
operator|<
name|BidirectionalIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_bidirectional_iterator
operator|<
name|BidirectionalIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|current
operator|==
name|y
operator|.
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|=
name|ptrdiff_t
operator|>
comment|// Reference = T&
name|class
name|reverse_iterator
operator|:
name|public
name|random_access_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
block|{
typedef|typedef
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
name|self
expr_stmt|;
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|self
operator|&
name|x
operator|,
specifier|const
name|self
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|self
operator|&
name|x
operator|,
specifier|const
name|self
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|Distance
name|operator
operator|-
operator|(
specifier|const
name|self
operator|&
name|x
operator|,
specifier|const
name|self
operator|&
name|y
operator|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|friend
name|self
name|operator
operator|+
operator|(
name|Distance
name|n
operator|,
specifier|const
name|self
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|RandomAccessIterator
name|current
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_macro
name|reverse_iterator
argument_list|()
end_macro

begin_block
block|{}
end_block

begin_macro
name|reverse_iterator
argument_list|(
argument|RandomAccessIterator x
argument_list|)
end_macro

begin_macro
unit|:
name|current
argument_list|(
argument|x
argument_list|)
end_macro

begin_block
block|{}
end_block

begin_function
name|RandomAccessIterator
name|base
parameter_list|()
block|{
return|return
name|current
return|;
block|}
end_function

begin_expr_stmt
name|Reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
operator|(
name|current
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|--
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
operator|++
name|current
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|self
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
name|current
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|+
operator|(
name|Distance
name|n
operator|)
specifier|const
block|{
return|return
name|self
argument_list|(
name|current
operator|-
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|+=
operator|(
name|Distance
name|n
operator|)
block|{
name|current
operator|-=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
name|operator
operator|-
operator|(
name|Distance
name|n
operator|)
specifier|const
block|{
return|return
name|self
argument_list|(
name|current
operator|+
name|n
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|self
operator|&
name|operator
operator|-=
operator|(
name|Distance
name|n
operator|)
block|{
name|current
operator|+=
name|n
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_function
name|Reference
name|operator
function|[]
parameter_list|(
name|Distance
name|n
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|n
operator|)
return|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|current
operator|==
name|y
operator|.
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|.
name|current
operator|<
name|x
operator|.
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|Distance
name|operator
operator|-
operator|(
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|y
operator|.
name|current
operator|-
name|x
operator|.
name|current
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|RandomAccessIterator
operator|,
name|class
name|T
operator|,
name|class
name|Reference
operator|,
name|class
name|Distance
operator|>
specifier|inline
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
name|operator
operator|+
operator|(
name|Distance
name|n
operator|,
specifier|const
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|&
name|x
operator|)
block|{
return|return
name|reverse_iterator
operator|<
name|RandomAccessIterator
operator|,
name|T
operator|,
name|Reference
operator|,
name|Distance
operator|>
operator|(
name|x
operator|.
name|current
operator|-
name|n
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|OutputIterator
operator|,
name|class
name|T
operator|>
name|class
name|raw_storage_iterator
operator|:
name|public
name|output_iterator
block|{
name|protected
operator|:
name|OutputIterator
name|iter
block|;
name|public
operator|:
name|raw_storage_iterator
argument_list|(
argument|OutputIterator x
argument_list|)
operator|:
name|iter
argument_list|(
argument|x
argument_list|)
block|{}
name|raw_storage_iterator
operator|<
name|OutputIterator
block|,
name|T
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
name|raw_storage_iterator
operator|<
name|OutputIterator
operator|,
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|T
operator|&
name|element
operator|)
block|{
name|construct
argument_list|(
name|iter
argument_list|,
name|element
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|raw_storage_iterator
operator|<
name|OutputIterator
operator|,
name|T
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
operator|++
name|iter
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|raw_storage_iterator
operator|<
name|OutputIterator
operator|,
name|T
operator|>
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|raw_storage_iterator
operator|<
name|OutputIterator
block|,
name|T
operator|>
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
name|iter
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|=
name|ptrdiff_t
operator|>
name|class
name|istream_iterator
operator|:
name|public
name|input_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
block|{
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|;
name|protected
operator|:
name|istream
operator|*
name|stream
block|;
name|T
name|value
block|;
name|bool
name|end_marker
block|;
name|void
name|read
argument_list|()
block|{
name|end_marker
operator|=
operator|(
operator|*
name|stream
operator|)
operator|?
name|true
operator|:
name|false
block|;
if|if
condition|(
name|end_marker
condition|)
operator|*
name|stream
operator|>>
name|value
expr_stmt|;
name|end_marker
operator|=
operator|(
operator|*
name|stream
operator|)
condition|?
name|true
else|:
name|false
block|;     }
name|public
operator|:
name|istream_iterator
argument_list|()
operator|:
name|stream
argument_list|(
operator|&
name|cin
argument_list|)
operator|,
name|end_marker
argument_list|(
argument|false
argument_list|)
block|{}
name|istream_iterator
argument_list|(
name|istream
operator|&
name|s
argument_list|)
operator|:
name|stream
argument_list|(
argument|&s
argument_list|)
block|{
name|read
argument_list|()
block|; }
specifier|const
name|T
operator|&
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
name|value
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
name|read
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|istream_iterator
operator|<
name|T
block|,
name|Distance
operator|>
name|tmp
operator|=
operator|*
name|this
block|;
name|read
argument_list|()
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|,
name|class
name|Distance
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
operator|&
name|x
operator|,
specifier|const
name|istream_iterator
operator|<
name|T
operator|,
name|Distance
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|stream
operator|==
name|y
operator|.
name|stream
operator|&&
name|x
operator|.
name|end_marker
operator|==
name|y
operator|.
name|end_marker
operator|||
name|x
operator|.
name|end_marker
operator|==
name|false
operator|&&
name|y
operator|.
name|end_marker
operator|==
name|false
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|ostream_iterator
operator|:
name|public
name|output_iterator
block|{
name|protected
operator|:
name|ostream
operator|*
name|stream
block|;
name|char
operator|*
name|string
block|;
name|public
operator|:
name|ostream_iterator
argument_list|(
name|ostream
operator|&
name|s
argument_list|)
operator|:
name|stream
argument_list|(
operator|&
name|s
argument_list|)
block|,
name|string
argument_list|(
literal|0
argument_list|)
block|{}
name|ostream_iterator
argument_list|(
name|ostream
operator|&
name|s
argument_list|,
name|char
operator|*
name|c
argument_list|)
operator|:
name|stream
argument_list|(
operator|&
name|s
argument_list|)
block|,
name|string
argument_list|(
argument|c
argument_list|)
block|{}
name|ostream_iterator
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|T
operator|&
name|value
operator|)
block|{
operator|*
name|stream
operator|<<
name|value
block|;
if|if
condition|(
name|string
condition|)
operator|*
name|stream
operator|<<
name|string
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ostream_iterator
operator|<
name|T
operator|>
operator|&
name|operator
operator|*
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ostream_iterator
operator|<
name|T
operator|>
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|ostream_iterator
operator|<
name|T
operator|>
operator|&
name|operator
operator|++
operator|(
name|int
operator|)
block|{
return|return
operator|*
name|this
return|;
block|}
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

end_unit

