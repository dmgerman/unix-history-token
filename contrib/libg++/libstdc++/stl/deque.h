begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DEQUE_H
end_ifndef

begin_define
define|#
directive|define
name|DEQUE_H
end_define

begin_include
include|#
directive|include
file|<function.h>
end_include

begin_include
include|#
directive|include
file|<algobase.h>
end_include

begin_include
include|#
directive|include
file|<iterator.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_include
include|#
directive|include
file|<bool.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|Allocator
end_ifndef

begin_define
define|#
directive|define
name|Allocator
value|allocator
end_define

begin_include
include|#
directive|include
file|<defalloc.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|deque
end_ifndef

begin_define
define|#
directive|define
name|deque
value|deque
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|deque
block|{
name|public
operator|:
name|class
name|iterator
block|;
name|class
name|const_iterator
block|;
name|friend
name|class
name|iterator
block|;
name|friend
name|class
name|const_iterator
block|;
name|public
operator|:
typedef|typedef
name|T
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
name|data_allocator_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|pointer
operator|>
name|map_allocator_type
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
specifier|static
name|data_allocator_type
name|data_allocator
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_comment
comment|//    static  // Too bad -- I don't like this hack very much...
end_comment

begin_function
specifier|static
name|size_type
name|buffer_size
parameter_list|()
block|{
return|return
name|data_allocator
operator|.
name|init_page_size
argument_list|()
return|;
block|}
end_function

begin_define
define|#
directive|define
name|__dq_buffer_size
value|buffer_size()
end_define

begin_else
else|#
directive|else
end_else

begin_decl_stmt
specifier|static
name|size_type
name|buffer_size
decl_stmt|;
end_decl_stmt

begin_define
define|#
directive|define
name|__dq_buffer_size
value|buffer_size
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_decl_stmt
specifier|static
name|map_allocator_type
name|map_allocator
decl_stmt|;
end_decl_stmt

begin_typedef
typedef|typedef
name|Allocator
operator|<
name|pointer
operator|>
operator|::
name|pointer
name|map_pointer
expr_stmt|;
end_typedef

begin_label
name|public
label|:
end_label

begin_decl_stmt
name|class
name|iterator
range|:
name|public
name|random_access_iterator
operator|<
name|T
decl_stmt|,
name|difference_type
decl|>
block|{
name|friend
name|class
name|deque
operator|<
name|T
operator|>
expr_stmt|;
name|friend
name|class
name|const_iterator
decl_stmt|;
name|protected
label|:
name|pointer
name|current
decl_stmt|;
name|pointer
name|first
decl_stmt|;
name|pointer
name|last
decl_stmt|;
name|map_pointer
name|node
decl_stmt|;
name|iterator
argument_list|(
argument|pointer x
argument_list|,
argument|map_pointer y
argument_list|)
block|:
name|current
argument_list|(
name|x
argument_list|)
operator|,
name|first
argument_list|(
operator|*
name|y
argument_list|)
operator|,
name|last
argument_list|(
operator|*
name|y
operator|+
name|__dq_buffer_size
argument_list|)
operator|,
name|node
argument_list|(
argument|y
argument_list|)
block|{}
name|public
operator|:
name|iterator
argument_list|()
operator|:
name|current
argument_list|(
literal|0
argument_list|)
operator|,
name|first
argument_list|(
literal|0
argument_list|)
operator|,
name|last
argument_list|(
literal|0
argument_list|)
operator|,
name|node
argument_list|(
literal|0
argument_list|)
block|{}
name|reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|current
return|;
block|}
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|node
operator|==
name|x
operator|.
name|node
operator|?
name|current
operator|-
name|x
operator|.
name|current
operator|:
name|difference_type
argument_list|(
name|__dq_buffer_size
operator|*
operator|(
name|node
operator|-
name|x
operator|.
name|node
operator|-
literal|1
operator|)
operator|+
operator|(
name|current
operator|-
name|first
operator|)
operator|+
operator|(
name|x
operator|.
name|last
operator|-
name|x
operator|.
name|current
operator|)
argument_list|)
return|;
block|}
name|iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
if|if
condition|(
operator|++
name|current
operator|==
name|last
condition|)
block|{
name|first
operator|=
operator|*
operator|(
operator|++
name|node
operator|)
expr_stmt|;
name|current
operator|=
name|first
expr_stmt|;
name|last
operator|=
name|first
operator|+
name|__dq_buffer_size
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
name|iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
name|iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
if|if
condition|(
name|current
operator|==
name|first
condition|)
block|{
name|first
operator|=
operator|*
operator|(
operator|--
name|node
operator|)
expr_stmt|;
name|last
operator|=
name|first
operator|+
name|__dq_buffer_size
expr_stmt|;
name|current
operator|=
name|last
expr_stmt|;
block|}
operator|--
name|current
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|difference_type
name|offset
operator|=
name|n
operator|+
operator|(
name|current
operator|-
name|first
operator|)
block|;
name|difference_type
name|num_node_to_jump
operator|=
name|offset
operator|>=
literal|0
condition|?
name|offset
operator|/
name|__dq_buffer_size
else|:
operator|-
operator|(
operator|(
operator|-
name|offset
operator|+
name|__dq_buffer_size
operator|-
literal|1
operator|)
operator|/
name|__dq_buffer_size
operator|)
block|;
if|if
condition|(
name|num_node_to_jump
operator|==
literal|0
condition|)
name|current
operator|+=
name|n
expr_stmt|;
else|else
block|{
name|node
operator|=
name|node
operator|+
name|num_node_to_jump
expr_stmt|;
name|first
operator|=
operator|*
name|node
expr_stmt|;
name|last
operator|=
name|first
operator|+
name|__dq_buffer_size
expr_stmt|;
name|current
operator|=
name|first
operator|+
operator|(
name|offset
operator|-
name|num_node_to_jump
operator|*
name|__dq_buffer_size
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|} 	iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
return|return
operator|*
name|this
operator|+=
operator|-
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|+=
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|iterator
name|operator
operator|-
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|iterator
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|-=
name|n
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|difference_type
name|n
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|n
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|current
operator|==
name|x
operator|.
name|current
operator|||
operator|(
operator|(
name|current
operator|==
name|first
operator|||
name|x
operator|.
name|current
operator|==
name|x
operator|.
name|first
operator|)
operator|&&
operator|*
name|this
operator|-
name|x
operator|==
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|(
name|node
operator|==
name|x
operator|.
name|node
operator|)
operator|?
operator|(
name|current
operator|<
name|x
operator|.
name|current
operator|)
operator|:
operator|(
name|node
operator|<
name|x
operator|.
name|node
operator|)
return|;
block|}
end_expr_stmt

begin_decl_stmt
unit|};
name|class
name|const_iterator
range|:
name|public
name|random_access_iterator
operator|<
name|T
decl_stmt|,
name|difference_type
decl|>
block|{
name|friend
name|class
name|deque
operator|<
name|T
operator|>
expr_stmt|;
name|protected
label|:
name|pointer
name|current
decl_stmt|;
name|pointer
name|first
decl_stmt|;
name|pointer
name|last
decl_stmt|;
name|map_pointer
name|node
decl_stmt|;
name|const_iterator
argument_list|(
argument|pointer x
argument_list|,
argument|map_pointer y
argument_list|)
block|:
name|current
argument_list|(
name|x
argument_list|)
operator|,
name|first
argument_list|(
operator|*
name|y
argument_list|)
operator|,
name|last
argument_list|(
operator|*
name|y
operator|+
name|__dq_buffer_size
argument_list|)
operator|,
name|node
argument_list|(
argument|y
argument_list|)
block|{}
name|public
operator|:
name|const_iterator
argument_list|()
operator|:
name|current
argument_list|(
literal|0
argument_list|)
operator|,
name|first
argument_list|(
literal|0
argument_list|)
operator|,
name|last
argument_list|(
literal|0
argument_list|)
operator|,
name|node
argument_list|(
literal|0
argument_list|)
block|{}
name|const_iterator
argument_list|(
specifier|const
name|iterator
operator|&
name|x
argument_list|)
operator|:
name|current
argument_list|(
name|x
operator|.
name|current
argument_list|)
operator|,
name|first
argument_list|(
name|x
operator|.
name|first
argument_list|)
operator|,
name|last
argument_list|(
name|x
operator|.
name|last
argument_list|)
operator|,
name|node
argument_list|(
argument|x.node
argument_list|)
block|{}
name|const_reference
name|operator
operator|*
operator|(
operator|)
specifier|const
block|{
return|return
operator|*
name|current
return|;
block|}
name|difference_type
name|operator
operator|-
operator|(
specifier|const
name|const_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|node
operator|==
name|x
operator|.
name|node
operator|?
name|current
operator|-
name|x
operator|.
name|current
operator|:
name|difference_type
argument_list|(
name|__dq_buffer_size
operator|*
operator|(
name|node
operator|-
name|x
operator|.
name|node
operator|-
literal|1
operator|)
operator|+
operator|(
name|current
operator|-
name|first
operator|)
operator|+
operator|(
name|x
operator|.
name|last
operator|-
name|x
operator|.
name|current
operator|)
argument_list|)
return|;
block|}
name|const_iterator
operator|&
name|operator
operator|++
operator|(
operator|)
block|{
if|if
condition|(
operator|++
name|current
operator|==
name|last
condition|)
block|{
name|first
operator|=
operator|*
operator|(
operator|++
name|node
operator|)
expr_stmt|;
name|current
operator|=
name|first
expr_stmt|;
name|last
operator|=
name|first
operator|+
name|__dq_buffer_size
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
name|const_iterator
name|operator
operator|++
operator|(
name|int
operator|)
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|++
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
name|const_iterator
operator|&
name|operator
operator|--
operator|(
operator|)
block|{
if|if
condition|(
name|current
operator|==
name|first
condition|)
block|{
name|first
operator|=
operator|*
operator|(
operator|--
name|node
operator|)
expr_stmt|;
name|last
operator|=
name|first
operator|+
name|__dq_buffer_size
expr_stmt|;
name|current
operator|=
name|last
expr_stmt|;
block|}
operator|--
name|current
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|--
operator|(
name|int
operator|)
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
operator|--
operator|*
name|this
block|;
return|return
name|tmp
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
operator|&
name|operator
operator|+=
operator|(
name|difference_type
name|n
operator|)
block|{
name|difference_type
name|offset
operator|=
name|n
operator|+
operator|(
name|current
operator|-
name|first
operator|)
block|;
name|difference_type
name|num_node_to_jump
operator|=
name|offset
operator|>=
literal|0
condition|?
name|offset
operator|/
name|__dq_buffer_size
else|:
operator|-
operator|(
operator|(
operator|-
name|offset
operator|+
name|__dq_buffer_size
operator|-
literal|1
operator|)
operator|/
name|__dq_buffer_size
operator|)
block|;
if|if
condition|(
name|num_node_to_jump
operator|==
literal|0
condition|)
name|current
operator|+=
name|n
expr_stmt|;
else|else
block|{
name|node
operator|=
name|node
operator|+
name|num_node_to_jump
expr_stmt|;
name|first
operator|=
operator|*
name|node
expr_stmt|;
name|last
operator|=
name|first
operator|+
name|__dq_buffer_size
expr_stmt|;
name|current
operator|=
name|first
operator|+
operator|(
name|offset
operator|-
name|num_node_to_jump
operator|*
name|__dq_buffer_size
operator|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|} 	const_iterator
operator|&
name|operator
operator|-=
operator|(
name|difference_type
name|n
operator|)
block|{
return|return
operator|*
name|this
operator|+=
operator|-
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|+
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|+=
name|n
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|operator
operator|-
operator|(
name|difference_type
name|n
operator|)
specifier|const
block|{
name|const_iterator
name|tmp
operator|=
operator|*
name|this
block|;
return|return
name|tmp
operator|-=
name|n
return|;
block|}
end_expr_stmt

begin_function
name|const_reference
name|operator
function|[]
parameter_list|(
name|difference_type
name|n
parameter_list|)
block|{
return|return
operator|*
operator|(
operator|*
name|this
operator|+
name|n
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|const_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
name|current
operator|==
name|x
operator|.
name|current
operator|||
operator|(
operator|(
name|current
operator|==
name|first
operator|||
name|x
operator|.
name|current
operator|==
name|x
operator|.
name|first
operator|)
operator|&&
operator|*
name|this
operator|-
name|x
operator|==
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|operator
operator|<
operator|(
specifier|const
name|const_iterator
operator|&
name|x
operator|)
specifier|const
block|{
return|return
operator|(
name|node
operator|==
name|x
operator|.
name|node
operator|)
operator|?
operator|(
name|current
operator|<
name|x
operator|.
name|current
operator|)
operator|:
operator|(
name|node
operator|<
name|x
operator|.
name|node
operator|)
return|;
block|}
end_expr_stmt

begin_typedef
unit|};
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|,
name|value_type
operator|,
name|const_reference
operator|,
name|difference_type
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|,
name|value_type
operator|,
name|reference
operator|,
name|difference_type
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|iterator
name|start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|finish
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|length
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|map_pointer
name|map
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|size_type
name|map_size
decl_stmt|;
end_decl_stmt

begin_function_decl
name|void
name|allocate_at_begin
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|allocate_at_end
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|deallocate_at_begin
parameter_list|()
function_decl|;
end_function_decl

begin_function_decl
name|void
name|deallocate_at_end
parameter_list|()
function_decl|;
end_function_decl

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|deque
argument_list|()
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|length
argument_list|(
literal|0
argument_list|)
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|__GNUG__
name|__dq_buffer_size
operator|=
name|data_allocator
operator|.
name|init_page_size
argument_list|()
block|;
endif|#
directive|endif
block|}
name|iterator
name|begin
argument_list|()
block|{
return|return
name|start
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|start
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|finish
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|finish
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|length
operator|==
literal|0
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|length
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|data_allocator
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|)
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|)
return|;
block|}
end_decl_stmt

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push_front
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
if|if
condition|(
name|empty
argument_list|()
operator|||
name|begin
argument_list|()
operator|.
name|current
operator|==
name|begin
argument_list|()
operator|.
name|first
condition|)
name|allocate_at_begin
argument_list|()
expr_stmt|;
operator|--
name|start
operator|.
name|current
expr_stmt|;
name|construct
argument_list|(
name|start
operator|.
name|current
argument_list|,
name|x
argument_list|)
expr_stmt|;
operator|++
name|length
expr_stmt|;
if|if
condition|(
name|end
argument_list|()
operator|.
name|current
operator|==
name|end
argument_list|()
operator|.
name|last
condition|)
name|allocate_at_end
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
if|if
condition|(
name|empty
argument_list|()
condition|)
name|allocate_at_end
argument_list|()
expr_stmt|;
name|construct
argument_list|(
name|finish
operator|.
name|current
argument_list|,
name|x
argument_list|)
expr_stmt|;
operator|++
name|finish
operator|.
name|current
expr_stmt|;
operator|++
name|length
expr_stmt|;
if|if
condition|(
name|end
argument_list|()
operator|.
name|current
operator|==
name|end
argument_list|()
operator|.
name|last
condition|)
name|allocate_at_end
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_front
parameter_list|()
block|{
name|destroy
argument_list|(
name|start
operator|.
name|current
argument_list|)
expr_stmt|;
operator|++
name|start
operator|.
name|current
expr_stmt|;
operator|--
name|length
expr_stmt|;
if|if
condition|(
name|empty
argument_list|()
operator|||
name|begin
argument_list|()
operator|.
name|current
operator|==
name|begin
argument_list|()
operator|.
name|last
condition|)
name|deallocate_at_begin
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop_back
parameter_list|()
block|{
if|if
condition|(
name|end
argument_list|()
operator|.
name|current
operator|==
name|end
argument_list|()
operator|.
name|first
condition|)
name|deallocate_at_end
argument_list|()
expr_stmt|;
operator|--
name|finish
operator|.
name|current
expr_stmt|;
name|destroy
argument_list|(
name|finish
operator|.
name|current
argument_list|)
expr_stmt|;
operator|--
name|length
expr_stmt|;
if|if
condition|(
name|empty
argument_list|()
condition|)
name|deallocate_at_end
argument_list|()
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|swap
argument_list|(
name|deque
operator|<
name|T
operator|>
operator|&
name|x
argument_list|)
block|{
operator|::
name|swap
argument_list|(
name|start
argument_list|,
name|x
operator|.
name|start
argument_list|)
expr_stmt|;
operator|::
name|swap
argument_list|(
name|finish
argument_list|,
name|x
operator|.
name|finish
argument_list|)
expr_stmt|;
operator|::
name|swap
argument_list|(
name|length
argument_list|,
name|x
operator|.
name|length
argument_list|)
expr_stmt|;
operator|::
name|swap
argument_list|(
name|map
argument_list|,
name|x
operator|.
name|map
argument_list|)
expr_stmt|;
operator|::
name|swap
argument_list|(
name|map_size
argument_list|,
name|x
operator|.
name|map_size
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
return|return
name|insert
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
operator|(
name|position
operator|)
argument_list|,
name|x
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|deque_iterator
operator|<
name|T
operator|>
name|insert
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
name|position
argument_list|,
specifier|const
name|T
operator|&
name|x
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
operator|(
name|position
operator|)
argument_list|,
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|insert
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
operator|(
name|position
operator|)
argument_list|,
name|size_type
name|n
argument_list|,
specifier|const
name|T
operator|&
name|x
argument_list|)
decl_stmt|;
end_decl_stmt

begin_comment
comment|//  template<class Iterator> void insert(iterator position,
end_comment

begin_comment
comment|//                                        Iterator first, Iterator last);
end_comment

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|*
name|first
parameter_list|,
specifier|const
name|T
modifier|*
name|last
parameter_list|)
block|{
name|insert
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
operator|(
name|position
operator|)
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|insert
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
name|position
argument_list|,
specifier|const
name|T
operator|*
name|first
argument_list|,
specifier|const
name|T
operator|*
name|last
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
name|erase
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
operator|(
name|position
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|erase
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
name|position
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
name|erase
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
operator|(
name|first
operator|)
argument_list|,
name|deque_iterator
operator|<
name|T
operator|>
operator|(
name|last
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|erase
argument_list|(
name|deque_iterator
operator|<
name|T
operator|>
name|first
argument_list|,
name|deque_iterator
operator|<
name|T
operator|>
name|last
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_function_decl
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_comment
comment|//  template<class Iterator> void insert(iterator position,
end_comment

begin_comment
comment|//                                        Iterator first, Iterator last);
end_comment

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|*
name|first
parameter_list|,
specifier|const
name|T
modifier|*
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|iterator
name|position
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_macro
name|deque
argument_list|(
argument|size_type n
argument_list|,
argument|const T& value = T()
argument_list|)
end_macro

begin_expr_stmt
unit|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|length
argument_list|(
literal|0
argument_list|)
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|__GNUG__
name|__dq_buffer_size
operator|=
name|data_allocator
operator|.
name|init_page_size
argument_list|()
block|;
endif|#
directive|endif
name|insert
argument_list|(
name|begin
argument_list|()
argument_list|,
name|n
argument_list|,
name|value
argument_list|)
block|;     }
comment|//  template<class Iterator> deque(Iterator first, Iterator last);
name|deque
argument_list|(
specifier|const
name|T
operator|*
name|first
argument_list|,
specifier|const
name|T
operator|*
name|last
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|length
argument_list|(
literal|0
argument_list|)
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|__GNUG__
name|__dq_buffer_size
operator|=
name|data_allocator
operator|.
name|init_page_size
argument_list|()
block|;
endif|#
directive|endif
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|back_inserter
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
block|;     }
name|deque
argument_list|(
specifier|const
name|deque
operator|<
name|T
operator|>
operator|&
name|x
argument_list|)
operator|:
name|start
argument_list|()
operator|,
name|finish
argument_list|()
operator|,
name|length
argument_list|(
literal|0
argument_list|)
operator|,
name|map
argument_list|(
literal|0
argument_list|)
operator|,
name|map_size
argument_list|(
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|__GNUG__
name|__dq_buffer_size
operator|=
name|data_allocator
operator|.
name|init_page_size
argument_list|()
block|;
endif|#
directive|endif
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|back_inserter
argument_list|(
operator|*
name|this
argument_list|)
argument_list|)
block|;     }
name|deque
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|deque
operator|<
name|T
operator|>
operator|&
name|x
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|x
condition|)
if|if
condition|(
name|size
argument_list|()
operator|>=
name|x
operator|.
name|size
argument_list|()
condition|)
name|erase
argument_list|(
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|begin
argument_list|()
argument_list|)
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|inserter
argument_list|(
operator|*
name|this
argument_list|,
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|begin
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}     ~
name|deque
argument_list|()
expr_stmt|;
end_expr_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
name|friend
name|T
modifier|*
name|value_type
parameter_list|(
specifier|const
name|iterator
modifier|&
parameter_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_function
name|friend
specifier|inline
name|difference_type
modifier|*
name|distance_type
parameter_list|(
specifier|const
name|iterator
modifier|&
parameter_list|)
block|{
return|return
operator|(
name|difference_type
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|deque_iterator
operator|:
name|deque
operator|<
name|T
operator|>
operator|::
name|iterator
block|{
name|deque_iterator
argument_list|(
argument|deque<T>::iterator i
argument_list|)
operator|:
name|deque
operator|<
name|T
operator|>
operator|::
name|iterator
argument_list|(
argument|i
argument_list|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const deque_iterator<T>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_else
else|#
directive|else
end_else

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|deque
operator|<
name|T
operator|>
operator|::
name|data_allocator_type
name|deque
operator|<
name|T
operator|>
operator|::
name|data_allocator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|deque
operator|<
name|T
operator|>
operator|::
name|map_allocator_type
name|deque
operator|<
name|T
operator|>
operator|::
name|map_allocator
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|deque
operator|<
name|T
operator|>
operator|::
name|size_type
name|deque
operator|<
name|T
operator|>
operator|::
name|__dq_buffer_size
operator|=
literal|0
expr_stmt|;
end_expr_stmt

begin_comment
comment|// should be data_allocator.init_page_size(); // Borland bug
end_comment

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|deque
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|deque
operator|<
name|T
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|size
argument_list|()
operator|==
name|y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|bool
name|operator
operator|<
operator|(
specifier|const
name|deque
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|deque
operator|<
name|T
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|,
name|y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|deque
operator|<
name|T
operator|>
operator|::
operator|~
name|deque
argument_list|()
block|{
while|while
condition|(
operator|!
name|empty
argument_list|()
condition|)
name|pop_front
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|allocate_at_begin
argument_list|()
block|{
name|pointer
name|p
operator|=
name|data_allocator
operator|.
name|allocate
argument_list|(
name|__dq_buffer_size
argument_list|)
block|;
if|if
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
if|if
condition|(
name|start
operator|.
name|node
operator|==
name|map
condition|)
block|{
name|difference_type
name|i
init|=
name|finish
operator|.
name|node
operator|-
name|start
operator|.
name|node
decl_stmt|;
name|map_size
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|2
expr_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|map_pointer
name|tmp
init|=
name|map_allocator_type
operator|::
name|allocate
argument_list|(
name|map_size
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|start
operator|.
name|node
argument_list|,
name|finish
operator|.
name|node
operator|+
literal|1
argument_list|,
name|tmp
operator|+
name|map_size
operator|/
literal|4
operator|+
literal|1
argument_list|)
expr_stmt|;
name|map_allocator_type
operator|::
name|deallocate
argument_list|(
name|map
argument_list|)
expr_stmt|;
else|#
directive|else
name|map_pointer
name|tmp
init|=
name|map_allocator
operator|.
name|allocate
argument_list|(
name|map_size
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|start
operator|.
name|node
argument_list|,
name|finish
operator|.
name|node
operator|+
literal|1
argument_list|,
name|tmp
operator|+
name|map_size
operator|/
literal|4
operator|+
literal|1
argument_list|)
expr_stmt|;
name|map_allocator
operator|.
name|deallocate
argument_list|(
name|map
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map
operator|=
name|tmp
expr_stmt|;
name|map
index|[
name|map_size
operator|/
literal|4
index|]
operator|=
name|p
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|p
operator|+
name|__dq_buffer_size
argument_list|,
name|map
operator|+
name|map_size
operator|/
literal|4
argument_list|)
expr_stmt|;
name|finish
operator|=
name|iterator
argument_list|(
name|finish
operator|.
name|current
argument_list|,
name|map
operator|+
name|map_size
operator|/
literal|4
operator|+
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
ifdef|#
directive|ifdef
name|__GNUG__
name|map_size
operator|=
name|map_allocator_type
operator|::
name|init_page_size
argument_list|()
expr_stmt|;
name|map
operator|=
name|map_allocator_type
operator|::
name|allocate
argument_list|(
name|map_size
argument_list|)
expr_stmt|;
else|#
directive|else
operator|*
operator|--
name|start
operator|.
name|node
operator|=
name|p
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|p
operator|+
name|__dq_buffer_size
argument_list|,
name|start
operator|.
name|node
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_else

begin_block
unit|} else
block|{
ifdef|#
directive|ifdef
name|__GNUG__
name|map_size
operator|=
name|map_allocator_type
operator|::
name|init_page_size
argument_list|()
expr_stmt|;
name|map
operator|=
name|map_allocator_type
operator|::
name|allocate
argument_list|(
name|map_size
argument_list|)
expr_stmt|;
else|#
directive|else
name|map_size
operator|=
name|map_allocator
operator|.
name|init_page_size
argument_list|()
expr_stmt|;
name|map
operator|=
name|map_allocator
operator|.
name|allocate
argument_list|(
name|map_size
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map
index|[
name|map_size
operator|/
literal|2
index|]
operator|=
name|p
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|p
operator|+
name|__dq_buffer_size
operator|/
literal|2
operator|+
literal|1
argument_list|,
name|map
operator|+
name|map_size
operator|/
literal|2
argument_list|)
expr_stmt|;
name|finish
operator|=
name|start
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|allocate_at_end
argument_list|()
block|{
name|pointer
name|p
operator|=
name|data_allocator
operator|.
name|allocate
argument_list|(
name|__dq_buffer_size
argument_list|)
block|;
if|if
condition|(
operator|!
name|empty
argument_list|()
condition|)
block|{
if|if
condition|(
name|finish
operator|.
name|node
operator|==
name|map
operator|+
name|map_size
operator|-
literal|1
condition|)
block|{
name|difference_type
name|i
init|=
name|finish
operator|.
name|node
operator|-
name|start
operator|.
name|node
decl_stmt|;
name|map_size
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|2
expr_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|map_pointer
name|tmp
init|=
name|map_allocator_type
operator|::
name|allocate
argument_list|(
name|map_size
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|start
operator|.
name|node
argument_list|,
name|finish
operator|.
name|node
operator|+
literal|1
argument_list|,
name|tmp
operator|+
name|map_size
operator|/
literal|4
argument_list|)
expr_stmt|;
name|map_allocator_type
operator|::
name|deallocate
argument_list|(
name|map
argument_list|)
expr_stmt|;
else|#
directive|else
name|map_pointer
name|tmp
init|=
name|map_allocator
operator|.
name|allocate
argument_list|(
name|map_size
argument_list|)
decl_stmt|;
name|copy
argument_list|(
name|start
operator|.
name|node
argument_list|,
name|finish
operator|.
name|node
operator|+
literal|1
argument_list|,
name|tmp
operator|+
name|map_size
operator|/
literal|4
argument_list|)
expr_stmt|;
name|map_allocator
operator|.
name|deallocate
argument_list|(
name|map
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map
operator|=
name|tmp
expr_stmt|;
name|map
index|[
name|map_size
operator|/
literal|4
operator|+
name|i
operator|+
literal|1
index|]
operator|=
name|p
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|start
operator|.
name|current
argument_list|,
name|map
operator|+
name|map_size
operator|/
literal|4
argument_list|)
expr_stmt|;
name|finish
operator|=
name|iterator
argument_list|(
name|p
argument_list|,
name|map
operator|+
name|map_size
operator|/
literal|4
operator|+
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
operator|*
operator|++
name|finish
operator|.
name|node
operator|=
name|p
expr_stmt|;
name|finish
operator|=
name|iterator
argument_list|(
name|p
argument_list|,
name|finish
operator|.
name|node
argument_list|)
expr_stmt|;
block|}
end_else

begin_block
unit|} else
block|{
ifdef|#
directive|ifdef
name|__GNUG__
name|map_size
operator|=
name|map_allocator_type
operator|::
name|init_page_size
argument_list|()
expr_stmt|;
name|map
operator|=
name|map_allocator_type
operator|::
name|allocate
argument_list|(
name|map_size
argument_list|)
expr_stmt|;
else|#
directive|else
name|map_size
operator|=
name|map_allocator
operator|.
name|init_page_size
argument_list|()
expr_stmt|;
name|map
operator|=
name|map_allocator
operator|.
name|allocate
argument_list|(
name|map_size
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|map
index|[
name|map_size
operator|/
literal|2
index|]
operator|=
name|p
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|(
name|p
operator|+
name|__dq_buffer_size
operator|/
literal|2
argument_list|,
name|map
operator|+
name|map_size
operator|/
literal|2
argument_list|)
expr_stmt|;
name|finish
operator|=
name|start
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|deallocate_at_begin
argument_list|()
block|{
name|data_allocator
operator|.
name|deallocate
argument_list|(
operator|*
name|start
operator|.
name|node
operator|++
argument_list|)
block|;
if|if
condition|(
name|empty
argument_list|()
condition|)
block|{
if|if
condition|(
name|finish
operator|.
name|current
operator|==
name|finish
operator|.
name|first
condition|)
name|data_allocator
operator|.
name|deallocate
argument_list|(
operator|*
name|start
operator|.
name|node
argument_list|)
expr_stmt|;
name|start
operator|=
name|iterator
argument_list|()
expr_stmt|;
name|finish
operator|=
name|start
expr_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|map_allocator
operator|.
name|deallocate
argument_list|(
name|map
argument_list|)
expr_stmt|;
else|#
directive|else
name|map_allocator
operator|.
name|deallocate
argument_list|(
name|map
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_expr_stmt

begin_else
else|else
name|start
operator|=
name|iterator
argument_list|(
operator|*
name|start
operator|.
name|node
argument_list|,
name|start
operator|.
name|node
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|deallocate_at_end
argument_list|()
block|{
name|data_allocator
operator|.
name|deallocate
argument_list|(
operator|*
name|finish
operator|.
name|node
operator|--
argument_list|)
block|;
if|if
condition|(
name|empty
argument_list|()
condition|)
block|{
name|start
operator|=
name|iterator
argument_list|()
expr_stmt|;
name|finish
operator|=
name|start
expr_stmt|;
ifdef|#
directive|ifdef
name|__GNUG__
name|map_allocator
operator|.
name|deallocate
argument_list|(
name|map
argument_list|)
expr_stmt|;
else|#
directive|else
name|map_allocator
operator|.
name|deallocate
argument_list|(
name|map
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_expr_stmt

begin_else
else|else
name|finish
operator|=
name|iterator
argument_list|(
operator|*
name|finish
operator|.
name|node
operator|+
name|__dq_buffer_size
argument_list|,
name|finish
operator|.
name|node
argument_list|)
expr_stmt|;
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
ifdef|#
directive|ifdef
name|__GNUG__
name|deque_iterator
operator|<
name|T
operator|>
name|deque
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|deque_iterator<T> posn
argument_list|,
argument|const T& x
argument_list|)
block|{
name|iterator
name|position
operator|=
name|posn
block|;
else|#
directive|else
name|deque
operator|<
name|T
operator|>
operator|::
name|iterator
name|deque
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const T& x
argument_list|)
block|{
endif|#
directive|endif
if|if
condition|(
name|position
operator|==
name|begin
argument_list|()
condition|)
block|{
name|push_front
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|begin
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|position
operator|==
name|end
argument_list|()
condition|)
block|{
name|push_back
argument_list|(
name|x
argument_list|)
expr_stmt|;
return|return
name|end
argument_list|()
operator|-
literal|1
return|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|difference_type
name|index
init|=
name|position
operator|-
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|length
condition|)
block|{
name|push_front
argument_list|(
operator|*
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|begin
argument_list|()
operator|+
literal|2
argument_list|,
name|begin
argument_list|()
operator|+
name|index
operator|+
literal|1
argument_list|,
name|begin
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|push_back
argument_list|(
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|copy_backward
argument_list|(
name|begin
argument_list|()
operator|+
name|index
argument_list|,
name|end
argument_list|()
operator|-
literal|2
argument_list|,
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|index
operator|)
operator|=
name|x
expr_stmt|;
return|return
name|begin
argument_list|()
operator|+
name|index
return|;
block|}
end_else

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
ifdef|#
directive|ifdef
name|__GNUG__
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|deque_iterator<T> posn
argument_list|,
argument|size_t n
argument_list|,
comment|// BAD HACK
argument|const T& x
argument_list|)
block|{
name|iterator
name|position
operator|=
name|posn
block|;
else|#
directive|else
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|size_type n
argument_list|,
argument|const T& x
argument_list|)
block|{
endif|#
directive|endif
name|difference_type
name|index
operator|=
name|position
operator|-
name|begin
argument_list|()
block|;
name|difference_type
name|remainder
operator|=
name|length
operator|-
name|index
block|;
if|if
condition|(
name|remainder
operator|>
name|index
condition|)
block|{
if|if
condition|(
name|n
operator|>
name|index
condition|)
block|{
name|difference_type
name|m
init|=
name|n
operator|-
name|index
decl_stmt|;
while|while
condition|(
name|m
operator|--
operator|>
literal|0
condition|)
name|push_front
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|difference_type
name|i
init|=
name|index
decl_stmt|;
while|while
condition|(
name|i
operator|--
condition|)
name|push_front
argument_list|(
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|begin
argument_list|()
operator|+
name|n
argument_list|,
name|begin
argument_list|()
operator|+
name|n
operator|+
name|index
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|difference_type
name|i
init|=
name|n
decl_stmt|;
while|while
condition|(
name|i
operator|--
condition|)
name|push_front
argument_list|(
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|begin
argument_list|()
operator|+
name|n
operator|+
name|n
argument_list|,
name|begin
argument_list|()
operator|+
name|n
operator|+
name|index
argument_list|,
name|begin
argument_list|()
operator|+
name|n
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|begin
argument_list|()
operator|+
name|index
argument_list|,
name|begin
argument_list|()
operator|+
name|n
operator|+
name|index
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_block
unit|} else
block|{
name|difference_type
name|orig_len
init|=
name|index
operator|+
name|remainder
decl_stmt|;
if|if
condition|(
name|n
operator|>
name|remainder
condition|)
block|{
name|difference_type
name|m
init|=
name|n
operator|-
name|remainder
decl_stmt|;
while|while
condition|(
name|m
operator|--
operator|>
literal|0
condition|)
name|push_back
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|difference_type
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|remainder
condition|)
name|push_back
argument_list|(
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|index
operator|+
name|i
operator|++
operator|)
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|begin
argument_list|()
operator|+
name|index
argument_list|,
name|begin
argument_list|()
operator|+
name|orig_len
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|difference_type
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|n
condition|)
name|push_back
argument_list|(
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|orig_len
operator|-
name|n
operator|+
name|i
operator|++
operator|)
argument_list|)
expr_stmt|;
name|copy_backward
argument_list|(
name|begin
argument_list|()
operator|+
name|index
argument_list|,
name|begin
argument_list|()
operator|+
name|orig_len
operator|-
name|n
argument_list|,
name|begin
argument_list|()
operator|+
name|orig_len
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|begin
argument_list|()
operator|+
name|index
argument_list|,
name|begin
argument_list|()
operator|+
name|index
operator|+
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|insert
ifdef|#
directive|ifdef
name|__GNUG__
argument_list|(
argument|deque_iterator<T> posn
argument_list|,
argument|const T* first
argument_list|,
argument|const T* last
argument_list|)
block|{
name|iterator
name|position
operator|=
name|posn
block|;
else|#
directive|else
operator|(
name|iterator
name|position
operator|,
specifier|const
name|T
operator|*
name|first
operator|,
specifier|const
name|T
operator|*
name|last
operator|)
block|{
endif|#
directive|endif
name|difference_type
name|index
operator|=
name|position
operator|-
name|begin
argument_list|()
block|;
name|difference_type
name|remainder
operator|=
name|length
operator|-
name|index
block|;
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
if|if
condition|(
name|remainder
operator|>
name|index
condition|)
block|{
if|if
condition|(
name|n
operator|>
name|index
condition|)
block|{
specifier|const
name|T
modifier|*
name|m
init|=
name|last
operator|-
name|index
decl_stmt|;
while|while
condition|(
name|m
operator|!=
name|first
condition|)
name|push_front
argument_list|(
operator|*
operator|--
name|m
argument_list|)
expr_stmt|;
name|difference_type
name|i
init|=
name|index
decl_stmt|;
while|while
condition|(
name|i
operator|--
condition|)
name|push_front
argument_list|(
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|last
operator|-
name|index
argument_list|,
name|last
argument_list|,
name|begin
argument_list|()
operator|+
name|n
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|difference_type
name|i
init|=
name|n
decl_stmt|;
while|while
condition|(
name|i
operator|--
condition|)
name|push_front
argument_list|(
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|begin
argument_list|()
operator|+
name|n
operator|+
name|n
argument_list|,
name|begin
argument_list|()
operator|+
name|n
operator|+
name|index
argument_list|,
name|begin
argument_list|()
operator|+
name|n
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|begin
argument_list|()
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_block
unit|} else
block|{
name|difference_type
name|orig_len
init|=
name|index
operator|+
name|remainder
decl_stmt|;
if|if
condition|(
name|n
operator|>
name|remainder
condition|)
block|{
specifier|const
name|T
modifier|*
name|m
init|=
name|first
operator|+
name|remainder
decl_stmt|;
while|while
condition|(
name|m
operator|!=
name|last
condition|)
name|push_back
argument_list|(
operator|*
name|m
operator|++
argument_list|)
expr_stmt|;
name|difference_type
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|remainder
condition|)
name|push_back
argument_list|(
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|index
operator|+
name|i
operator|++
operator|)
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|first
operator|+
name|remainder
argument_list|,
name|begin
argument_list|()
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|difference_type
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|n
condition|)
name|push_back
argument_list|(
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|orig_len
operator|-
name|n
operator|+
name|i
operator|++
operator|)
argument_list|)
expr_stmt|;
name|copy_backward
argument_list|(
name|begin
argument_list|()
operator|+
name|index
argument_list|,
name|begin
argument_list|()
operator|+
name|orig_len
operator|-
name|n
argument_list|,
name|begin
argument_list|()
operator|+
name|orig_len
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|begin
argument_list|()
operator|+
name|index
argument_list|)
expr_stmt|;
block|}
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
ifdef|#
directive|ifdef
name|__GNUG__
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|deque_iterator<T> posn
argument_list|)
block|{
name|iterator
name|position
operator|=
name|posn
block|;
else|#
directive|else
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator position
argument_list|)
block|{
endif|#
directive|endif
if|if
condition|(
name|end
argument_list|()
operator|-
name|position
operator|>
name|position
operator|-
name|begin
argument_list|()
condition|)
block|{
name|copy_backward
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|position
operator|+
literal|1
argument_list|)
expr_stmt|;
name|pop_front
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|position
operator|+
literal|1
argument_list|,
name|end
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|pop_back
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}      template
operator|<
name|class
name|T
operator|>
ifdef|#
directive|ifdef
name|__GNUG__
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|deque_iterator<T> fi
argument_list|,
argument|deque_iterator<T> la
argument_list|)
block|{
name|iterator
name|first
operator|=
name|fi
block|;
name|iterator
name|last
operator|=
name|la
block|;
name|difference_type
name|n
operator|=
name|last
operator|-
name|first
block|;
else|#
directive|else
name|void
name|deque
operator|<
name|T
operator|>
operator|::
name|erase
argument_list|(
argument|iterator first
argument_list|,
argument|iterator last
argument_list|)
block|{
name|difference_type
name|n
operator|=
name|last
operator|-
name|first
block|;
endif|#
directive|endif
if|if
condition|(
name|end
argument_list|()
operator|-
name|last
operator|>
name|first
operator|-
name|begin
argument_list|()
condition|)
block|{
name|copy_backward
argument_list|(
name|begin
argument_list|()
argument_list|,
name|first
argument_list|,
name|last
argument_list|)
expr_stmt|;
while|while
condition|(
name|n
operator|--
operator|>
literal|0
condition|)
name|pop_front
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|copy
argument_list|(
name|last
argument_list|,
name|end
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
while|while
condition|(
name|n
operator|--
operator|>
literal|0
condition|)
name|pop_back
argument_list|()
expr_stmt|;
block|}
end_expr_stmt

begin_undef
unit|}
undef|#
directive|undef
name|Allocator
end_undef

begin_undef
undef|#
directive|undef
name|deque
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

