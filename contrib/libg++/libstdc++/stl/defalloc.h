begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|DEFALLOC_H
end_ifndef

begin_define
define|#
directive|define
name|DEFALLOC_H
end_define

begin_include
include|#
directive|include
file|<new.h>
end_include

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_include
include|#
directive|include
file|<stdlib.h>
end_include

begin_include
include|#
directive|include
file|<limits.h>
end_include

begin_include
include|#
directive|include
file|<iostream.h>
end_include

begin_include
include|#
directive|include
file|<algobase.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_function
specifier|inline
name|void
modifier|*
name|operator
name|new
parameter_list|(
name|size_t
parameter_list|,
name|void
modifier|*
name|p
parameter_list|)
block|{
return|return
name|p
return|;
block|}
end_function

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/*  * the following template function is replaced by the following two functions  * due to the fact that the Borland compiler doesn't change prediff_t type  * to type long when compile with -ml or -mh.  template<class T> inline T* allocate(ptrdiff_t size, T*) {     set_new_handler(0);     T* tmp = (T*)(::operator new((size_t)(size * sizeof(T))));     if (tmp == 0) { 	cerr<< "out of memory"<< endl;  	exit(1);     }     return tmp; } */
end_comment

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|allocate
argument_list|(
argument|int size
argument_list|,
argument|T*
argument_list|)
block|{
name|set_new_handler
argument_list|(
literal|0
argument_list|)
block|;
name|T
operator|*
name|tmp
operator|=
operator|(
name|T
operator|*
operator|)
operator|(
operator|::
name|operator
name|new
argument_list|(
call|(
name|unsigned
name|int
call|)
argument_list|(
name|size
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|)
operator|)
block|;
if|if
condition|(
name|tmp
operator|==
literal|0
condition|)
block|{
name|cerr
operator|<<
literal|"out of memory"
operator|<<
name|endl
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|tmp
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|allocate
argument_list|(
argument|long size
argument_list|,
argument|T*
argument_list|)
block|{
name|set_new_handler
argument_list|(
literal|0
argument_list|)
block|;
name|T
operator|*
name|tmp
operator|=
operator|(
name|T
operator|*
operator|)
operator|(
operator|::
name|operator
name|new
argument_list|(
call|(
name|unsigned
name|long
call|)
argument_list|(
name|size
operator|*
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|)
operator|)
block|;
if|if
condition|(
name|tmp
operator|==
literal|0
condition|)
block|{
name|cerr
operator|<<
literal|"out of memory"
operator|<<
name|endl
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_return
return|return
name|tmp
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|deallocate
argument_list|(
argument|T* buffer
argument_list|)
block|{
operator|::
name|operator
name|delete
argument_list|(
name|buffer
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|void
name|destroy
argument_list|(
argument|T* pointer
argument_list|)
block|{
name|pointer
operator|->
expr|~
name|T
argument_list|()
block|; }
specifier|inline
name|void
name|destroy
argument_list|(
argument|char*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned char*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|short*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned short*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|int*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned int*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|long*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned long*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|float*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|double*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|char**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned char**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|short**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned short**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|int**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned int**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|long**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned long**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|float**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|double**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|char*
argument_list|,
argument|char*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned char*
argument_list|,
argument|unsigned char*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|short*
argument_list|,
argument|short*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned short*
argument_list|,
argument|unsigned short*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|int*
argument_list|,
argument|int*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned int*
argument_list|,
argument|unsigned int*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|long*
argument_list|,
argument|long*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned long*
argument_list|,
argument|unsigned long*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|float*
argument_list|,
argument|float*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|double*
argument_list|,
argument|double*
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|char**
argument_list|,
argument|char**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned char**
argument_list|,
argument|unsigned char**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|short**
argument_list|,
argument|short**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned short**
argument_list|,
argument|unsigned short**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|int**
argument_list|,
argument|int**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned int**
argument_list|,
argument|unsigned int**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|long**
argument_list|,
argument|long**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|unsigned long**
argument_list|,
argument|unsigned long**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|float**
argument_list|,
argument|float**
argument_list|)
block|{}
specifier|inline
name|void
name|destroy
argument_list|(
argument|double**
argument_list|,
argument|double**
argument_list|)
block|{}
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
specifier|inline
name|void
name|construct
argument_list|(
argument|T1* p
argument_list|,
argument|const T2& value
argument_list|)
block|{
name|new
argument_list|(
argument|p
argument_list|)
name|T1
argument_list|(
name|value
argument_list|)
block|; }
name|template
operator|<
name|class
name|T
operator|>
name|class
name|allocator
block|{
name|public
operator|:
typedef|typedef
name|T
name|value_type
typedef|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
modifier|*
name|pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|*
name|const_pointer
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|T
modifier|&
name|reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
specifier|const
name|T
modifier|&
name|const_reference
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|size_t
name|size_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|ptrdiff_t
name|difference_type
typedef|;
end_typedef

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
specifier|static
name|pointer
name|allocate
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
return|return
operator|::
name|allocate
argument_list|(
operator|(
name|difference_type
operator|)
name|n
argument_list|,
operator|(
name|pointer
operator|)
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|void
name|deallocate
parameter_list|(
name|pointer
name|p
parameter_list|)
block|{
operator|::
name|deallocate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|static
name|pointer
name|address
parameter_list|(
name|reference
name|x
parameter_list|)
block|{
return|return
operator|(
name|pointer
operator|)
operator|&
name|x
return|;
block|}
end_function

begin_function
specifier|static
name|const_pointer
name|const_address
parameter_list|(
name|const_reference
name|x
parameter_list|)
block|{
return|return
operator|(
name|const_pointer
operator|)
operator|&
name|x
return|;
block|}
end_function

begin_function
specifier|static
name|size_type
name|init_page_size
parameter_list|()
block|{
return|return
name|max
argument_list|(
name|size_type
argument_list|(
literal|1
argument_list|)
argument_list|,
name|size_type
argument_list|(
literal|4096
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|static
name|size_type
name|max_size
parameter_list|()
block|{
return|return
name|max
argument_list|(
name|size_type
argument_list|(
literal|1
argument_list|)
argument_list|,
name|size_type
argument_list|(
name|UINT_MAX
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_else
else|#
directive|else
end_else

begin_function
name|pointer
name|allocate
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
return|return
operator|::
name|allocate
argument_list|(
operator|(
name|difference_type
operator|)
name|n
argument_list|,
operator|(
name|pointer
operator|)
literal|0
argument_list|)
return|;
block|}
end_function

begin_function
name|void
name|deallocate
parameter_list|(
name|pointer
name|p
parameter_list|)
block|{
operator|::
name|deallocate
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|pointer
name|address
parameter_list|(
name|reference
name|x
parameter_list|)
block|{
return|return
operator|(
name|pointer
operator|)
operator|&
name|x
return|;
block|}
end_function

begin_function
name|const_pointer
name|const_address
parameter_list|(
name|const_reference
name|x
parameter_list|)
block|{
return|return
operator|(
name|const_pointer
operator|)
operator|&
name|x
return|;
block|}
end_function

begin_function
name|size_type
name|init_page_size
parameter_list|()
block|{
return|return
name|max
argument_list|(
name|size_type
argument_list|(
literal|1
argument_list|)
argument_list|,
name|size_type
argument_list|(
literal|4096
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|max
argument_list|(
name|size_type
argument_list|(
literal|1
argument_list|)
argument_list|,
name|size_type
argument_list|(
name|UINT_MAX
operator|/
sizeof|sizeof
argument_list|(
name|T
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
unit|};
name|class
name|allocator
operator|<
name|void
operator|>
block|{
name|public
operator|:
typedef|typedef
name|void
modifier|*
name|pointer
typedef|;
block|}
end_expr_stmt

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

