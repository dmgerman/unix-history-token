begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|VECTOR_H
end_ifndef

begin_define
define|#
directive|define
name|VECTOR_H
end_define

begin_include
include|#
directive|include
file|<function.h>
end_include

begin_include
include|#
directive|include
file|<algobase.h>
end_include

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_include
include|#
directive|include
file|<bool.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|Allocator
end_ifndef

begin_define
define|#
directive|define
name|Allocator
value|allocator
end_define

begin_include
include|#
directive|include
file|<defalloc.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifndef
ifndef|#
directive|ifndef
name|vector
end_ifndef

begin_define
define|#
directive|define
name|vector
value|vector
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|class
name|vector
block|{
name|public
operator|:
typedef|typedef
name|Allocator
operator|<
name|T
operator|>
name|vector_allocator
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|T
name|value_type
typedef|;
end_typedef

begin_typedef
typedef|typedef
name|vector_allocator
operator|::
name|pointer
name|pointer
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|vector_allocator
operator|::
name|pointer
name|iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|vector_allocator
operator|::
name|const_pointer
name|const_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|vector_allocator
operator|::
name|reference
name|reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|vector_allocator
operator|::
name|const_reference
name|const_reference
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|vector_allocator
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|vector_allocator
operator|::
name|difference_type
name|difference_type
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|const_iterator
operator|,
name|value_type
operator|,
name|const_reference
operator|,
name|difference_type
operator|>
name|const_reverse_iterator
expr_stmt|;
end_typedef

begin_typedef
typedef|typedef
name|reverse_iterator
operator|<
name|iterator
operator|,
name|value_type
operator|,
name|reference
operator|,
name|difference_type
operator|>
name|reverse_iterator
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_expr_stmt
specifier|static
name|Allocator
operator|<
name|T
operator|>
name|static_allocator
expr_stmt|;
end_expr_stmt

begin_decl_stmt
name|iterator
name|start
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|finish
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|iterator
name|end_of_storage
decl_stmt|;
end_decl_stmt

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
name|void
name|insert_aux
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert_aux
argument_list|(
name|vector_iterator
operator|<
name|T
operator|>
operator|(
name|position
operator|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|insert_aux
argument_list|(
name|vector_iterator
operator|<
name|T
operator|>
name|position
argument_list|,
specifier|const
name|T
operator|&
name|x
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_function_decl
name|void
name|insert_aux
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_label
name|public
label|:
end_label

begin_function
name|iterator
name|begin
parameter_list|()
block|{
return|return
name|start
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|begin
argument_list|()
specifier|const
block|{
return|return
name|start
return|;
block|}
end_expr_stmt

begin_function
name|iterator
name|end
parameter_list|()
block|{
return|return
name|finish
return|;
block|}
end_function

begin_expr_stmt
name|const_iterator
name|end
argument_list|()
specifier|const
block|{
return|return
name|finish
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rbegin
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rbegin
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_function
name|reverse_iterator
name|rend
parameter_list|()
block|{
return|return
name|reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reverse_iterator
name|rend
argument_list|()
specifier|const
block|{
return|return
name|const_reverse_iterator
argument_list|(
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|end
argument_list|()
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|max_size
argument_list|()
specifier|const
block|{
return|return
name|static_allocator
operator|.
name|max_size
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|capacity
argument_list|()
specifier|const
block|{
return|return
name|size_type
argument_list|(
name|end_of_storage
operator|-
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|begin
argument_list|()
operator|==
name|end
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|operator
function|[]
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|)
return|;
block|}
end_function

begin_decl_stmt
name|const_reference
name|operator
index|[]
argument_list|(
name|size_type
name|n
argument_list|)
decl|const
block|{
return|return
operator|*
operator|(
name|begin
argument_list|()
operator|+
name|n
operator|)
return|;
block|}
end_decl_stmt

begin_expr_stmt
name|vector
argument_list|()
operator|:
name|start
argument_list|(
literal|0
argument_list|)
operator|,
name|finish
argument_list|(
literal|0
argument_list|)
operator|,
name|end_of_storage
argument_list|(
literal|0
argument_list|)
block|{}
name|vector
argument_list|(
argument|size_type n
argument_list|,
argument|const T& value = T()
argument_list|)
block|{
name|start
operator|=
name|static_allocator
operator|.
name|allocate
argument_list|(
name|n
argument_list|)
block|;
name|uninitialized_fill_n
argument_list|(
name|start
argument_list|,
name|n
argument_list|,
name|value
argument_list|)
block|;
name|finish
operator|=
name|start
operator|+
name|n
block|;
name|end_of_storage
operator|=
name|finish
block|;     }
name|vector
argument_list|(
argument|const vector<T>& x
argument_list|)
block|{
name|start
operator|=
name|static_allocator
operator|.
name|allocate
argument_list|(
name|x
operator|.
name|end
argument_list|()
operator|-
name|x
operator|.
name|begin
argument_list|()
argument_list|)
block|;
name|finish
operator|=
name|uninitialized_copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|start
argument_list|)
block|;
name|end_of_storage
operator|=
name|finish
block|;     }
name|vector
argument_list|(
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
name|start
operator|=
name|static_allocator
operator|.
name|allocate
argument_list|(
name|n
argument_list|)
block|;
name|finish
operator|=
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|start
argument_list|)
block|;
name|end_of_storage
operator|=
name|finish
block|;     }
operator|~
name|vector
argument_list|()
block|{
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
block|;
name|static_allocator
operator|.
name|deallocate
argument_list|(
name|start
argument_list|)
block|;     }
name|vector
operator|<
name|T
operator|>
operator|&
name|operator
operator|=
operator|(
specifier|const
name|vector
operator|<
name|T
operator|>
operator|&
name|x
operator|)
expr_stmt|;
end_expr_stmt

begin_function
name|void
name|reserve
parameter_list|(
name|size_type
name|n
parameter_list|)
block|{
if|if
condition|(
name|capacity
argument_list|()
operator|<
name|n
condition|)
block|{
name|iterator
name|tmp
init|=
name|static_allocator
operator|.
name|allocate
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|static_allocator
operator|.
name|deallocate
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|finish
operator|=
name|tmp
operator|+
name|size
argument_list|()
expr_stmt|;
name|start
operator|=
name|tmp
expr_stmt|;
name|end_of_storage
operator|=
name|begin
argument_list|()
operator|+
name|n
expr_stmt|;
block|}
block|}
end_function

begin_function
name|reference
name|front
parameter_list|()
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|front
argument_list|()
specifier|const
block|{
return|return
operator|*
name|begin
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|reference
name|back
parameter_list|()
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_function

begin_expr_stmt
name|const_reference
name|back
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
name|end
argument_list|()
operator|-
literal|1
operator|)
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push_back
parameter_list|(
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
if|if
condition|(
name|finish
operator|!=
name|end_of_storage
condition|)
block|{
comment|/* Borland bug */
name|construct
argument_list|(
name|finish
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|finish
operator|++
expr_stmt|;
block|}
else|else
name|insert_aux
argument_list|(
name|end
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|swap
argument_list|(
name|vector
operator|<
name|T
operator|>
operator|&
name|x
argument_list|)
block|{
operator|::
name|swap
argument_list|(
name|start
argument_list|,
name|x
operator|.
name|start
argument_list|)
expr_stmt|;
operator|::
name|swap
argument_list|(
name|finish
argument_list|,
name|x
operator|.
name|finish
argument_list|)
expr_stmt|;
operator|::
name|swap
argument_list|(
name|end_of_storage
argument_list|,
name|x
operator|.
name|end_of_storage
argument_list|)
expr_stmt|;
block|}
end_decl_stmt

begin_function
name|iterator
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|size_type
name|n
init|=
name|position
operator|-
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|finish
operator|!=
name|end_of_storage
operator|&&
name|position
operator|==
name|end
argument_list|()
condition|)
block|{
comment|/* Borland bug */
name|construct
argument_list|(
name|finish
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|finish
operator|++
expr_stmt|;
block|}
else|else
name|insert_aux
argument_list|(
name|position
argument_list|,
name|x
argument_list|)
expr_stmt|;
return|return
name|begin
argument_list|()
operator|+
name|n
return|;
block|}
end_function

begin_ifdef
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|const_iterator
name|first
parameter_list|,
name|const_iterator
name|last
parameter_list|)
block|{
name|insert
argument_list|(
name|vector_iterator
operator|<
name|T
operator|>
operator|(
name|position
operator|)
argument_list|,
name|vector_const_iterator
operator|<
name|T
operator|>
operator|(
name|first
operator|)
argument_list|,
name|vector_const_iterator
operator|<
name|T
operator|>
operator|(
name|last
operator|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|insert
argument_list|(
name|vector_iterator
operator|<
name|T
operator|>
name|position
argument_list|,
name|vector_const_iterator
operator|<
name|T
operator|>
name|first
argument_list|,
name|vector_const_iterator
operator|<
name|T
operator|>
name|last
argument_list|)
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
block|{
name|insert
argument_list|(
name|vector_iterator
operator|<
name|T
operator|>
operator|(
name|position
operator|)
argument_list|,
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_decl_stmt
name|void
name|insert
argument_list|(
name|vector_iterator
operator|<
name|T
operator|>
name|position
argument_list|,
name|size_type
name|n
argument_list|,
specifier|const
name|T
operator|&
name|x
argument_list|)
decl_stmt|;
end_decl_stmt

begin_else
else|#
directive|else
end_else

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|const_iterator
name|first
parameter_list|,
name|const_iterator
name|last
parameter_list|)
function_decl|;
end_function_decl

begin_function_decl
name|void
name|insert
parameter_list|(
name|iterator
name|position
parameter_list|,
name|size_type
name|n
parameter_list|,
specifier|const
name|T
modifier|&
name|x
parameter_list|)
function_decl|;
end_function_decl

begin_endif
endif|#
directive|endif
end_endif

begin_function
name|void
name|pop_back
parameter_list|()
block|{
comment|/* Borland bug */
operator|--
name|finish
expr_stmt|;
name|destroy
argument_list|(
name|finish
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|position
parameter_list|)
block|{
if|if
condition|(
name|position
operator|+
literal|1
operator|!=
name|end
argument_list|()
condition|)
name|copy
argument_list|(
name|position
operator|+
literal|1
argument_list|,
name|end
argument_list|()
argument_list|,
name|position
argument_list|)
expr_stmt|;
comment|/* Borland bug */
operator|--
name|finish
expr_stmt|;
name|destroy
argument_list|(
name|finish
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|erase
parameter_list|(
name|iterator
name|first
parameter_list|,
name|iterator
name|last
parameter_list|)
block|{
name|vector
operator|<
name|T
operator|>
operator|::
name|iterator
name|i
operator|=
name|copy
argument_list|(
name|last
argument_list|,
name|end
argument_list|()
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|i
argument_list|,
name|finish
argument_list|)
expr_stmt|;
comment|// work around for destroy(copy(last, end(), first), finish);
name|finish
operator|=
name|finish
operator|-
operator|(
name|last
operator|-
name|first
operator|)
expr_stmt|;
block|}
end_function

begin_ifdef
unit|};
ifdef|#
directive|ifdef
name|__GNUG__
end_ifdef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|vector_iterator
block|{
name|vector
operator|<
name|T
operator|>
operator|::
name|iterator
name|it
block|;
name|vector_iterator
argument_list|(
argument|vector<T>::iterator i
argument_list|)
operator|:
name|it
argument_list|(
argument|i
argument_list|)
block|{}
name|operator
name|vector
operator|<
name|T
operator|>
operator|::
name|iterator
argument_list|()
block|{
return|return
name|it
return|;
block|}
end_expr_stmt

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
operator|*
name|value_type
argument_list|(
argument|const vector_iterator<T>&
argument_list|)
block|{
return|return
operator|(
name|T
operator|*
operator|)
operator|(
literal|0
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
expr|struct
name|vector_const_iterator
block|{
name|vector
operator|<
name|T
operator|>
operator|::
name|const_iterator
name|it
block|;
name|vector_const_iterator
argument_list|(
argument|vector<T>::const_iterator i
argument_list|)
operator|:
name|it
argument_list|(
argument|i
argument_list|)
block|{}
name|operator
name|vector
operator|<
name|T
operator|>
operator|::
name|const_iterator
argument_list|()
block|{
return|return
name|it
return|;
block|}
end_expr_stmt

begin_endif
unit|};
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|vector
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|vector
operator|<
name|T
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|size
argument_list|()
operator|==
name|y
operator|.
name|size
argument_list|()
operator|&&
name|equal
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|vector
operator|<
name|T
operator|>
operator|&
name|x
operator|,
specifier|const
name|vector
operator|<
name|T
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|lexicographical_compare
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|y
operator|.
name|begin
argument_list|()
argument_list|,
name|y
operator|.
name|end
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|vector
operator|<
name|T
operator|>
operator|::
name|vector_allocator
name|vector
operator|<
name|T
operator|>
operator|::
name|static_allocator
expr_stmt|;
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
name|vector
operator|<
name|T
operator|>
operator|&
name|vector
operator|<
name|T
operator|>
operator|::
name|operator
operator|=
operator|(
specifier|const
name|vector
operator|<
name|T
operator|>
operator|&
name|x
operator|)
block|{
if|if
condition|(
operator|&
name|x
operator|==
name|this
condition|)
return|return
operator|*
name|this
return|;
end_expr_stmt

begin_if
if|if
condition|(
name|x
operator|.
name|size
argument_list|()
operator|>
name|capacity
argument_list|()
condition|)
block|{
name|destroy
argument_list|(
name|start
argument_list|,
name|finish
argument_list|)
expr_stmt|;
name|static_allocator
operator|.
name|deallocate
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
name|static_allocator
operator|.
name|allocate
argument_list|(
name|x
operator|.
name|end
argument_list|()
operator|-
name|x
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|end_of_storage
operator|=
name|uninitialized_copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|size
argument_list|()
operator|>=
name|x
operator|.
name|size
argument_list|()
condition|)
block|{
name|vector
operator|<
name|T
operator|>
operator|::
name|iterator
name|i
operator|=
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|i
argument_list|,
name|finish
argument_list|)
expr_stmt|;
comment|// work around for destroy(copy(x.begin(), x.end(), begin()), finish);
block|}
else|else
block|{
name|copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
argument_list|,
name|x
operator|.
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|x
operator|.
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|,
name|x
operator|.
name|end
argument_list|()
argument_list|,
name|begin
argument_list|()
operator|+
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_if

begin_expr_stmt
name|finish
operator|=
name|begin
argument_list|()
operator|+
name|x
operator|.
name|size
argument_list|()
expr_stmt|;
end_expr_stmt

begin_return
return|return
operator|*
name|this
return|;
end_return

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
ifdef|#
directive|ifdef
name|__GNUG__
name|void
name|vector
operator|<
name|T
operator|>
operator|::
name|insert_aux
argument_list|(
argument|vector_iterator<T> posn
argument_list|,
argument|const T& x
argument_list|)
block|{
name|iterator
name|position
operator|=
name|posn
block|;
else|#
directive|else
name|void
name|vector
operator|<
name|T
operator|>
operator|::
name|insert_aux
argument_list|(
argument|iterator position
argument_list|,
argument|const T& x
argument_list|)
block|{
endif|#
directive|endif
if|if
condition|(
name|finish
operator|!=
name|end_of_storage
condition|)
block|{
name|construct
argument_list|(
name|finish
argument_list|,
operator|*
operator|(
name|finish
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|copy_backward
argument_list|(
name|position
argument_list|,
name|finish
operator|-
literal|1
argument_list|,
name|finish
argument_list|)
expr_stmt|;
operator|*
name|position
operator|=
name|x
expr_stmt|;
operator|++
name|finish
expr_stmt|;
block|}
else|else
block|{
name|size_type
name|len
init|=
name|size
argument_list|()
condition|?
literal|2
operator|*
name|size
argument_list|()
else|:
name|static_allocator
operator|.
name|init_page_size
argument_list|()
decl_stmt|;
name|iterator
name|tmp
init|=
name|static_allocator
operator|.
name|allocate
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|construct
argument_list|(
name|tmp
operator|+
operator|(
name|position
operator|-
name|begin
argument_list|()
operator|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|tmp
operator|+
operator|(
name|position
operator|-
name|begin
argument_list|()
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|static_allocator
operator|.
name|deallocate
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|end_of_storage
operator|=
name|tmp
operator|+
name|len
expr_stmt|;
name|finish
operator|=
name|tmp
operator|+
name|size
argument_list|()
operator|+
literal|1
expr_stmt|;
name|start
operator|=
name|tmp
expr_stmt|;
block|}
end_expr_stmt

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
ifdef|#
directive|ifdef
name|__GNUG__
name|void
name|vector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|vector_iterator<T> posn
argument_list|,
argument|size_t n
argument_list|,
argument|const T& x
argument_list|)
block|{
name|iterator
name|position
operator|=
name|posn
block|;
else|#
directive|else
name|void
name|vector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|size_type n
argument_list|,
argument|const T& x
argument_list|)
block|{
endif|#
directive|endif
if|if
condition|(
name|n
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
call|(
name|size_type
call|)
argument_list|(
name|end_of_storage
operator|-
name|finish
argument_list|)
operator|>=
name|n
condition|)
block|{
if|if
condition|(
call|(
name|size_type
call|)
argument_list|(
name|end
argument_list|()
operator|-
name|position
argument_list|)
operator|>
name|n
condition|)
block|{
name|uninitialized_copy
argument_list|(
name|end
argument_list|()
operator|-
name|n
argument_list|,
name|end
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|copy_backward
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
operator|-
name|n
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|position
argument_list|,
name|position
operator|+
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|position
operator|+
name|n
argument_list|)
expr_stmt|;
name|fill
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|uninitialized_fill_n
argument_list|(
name|end
argument_list|()
argument_list|,
name|n
operator|-
operator|(
name|end
argument_list|()
operator|-
name|position
operator|)
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|finish
operator|+=
name|n
expr_stmt|;
end_expr_stmt

begin_block
unit|} else
block|{
name|size_type
name|len
init|=
name|size
argument_list|()
operator|+
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|iterator
name|tmp
init|=
name|static_allocator
operator|.
name|allocate
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|uninitialized_fill_n
argument_list|(
name|tmp
operator|+
operator|(
name|position
operator|-
name|begin
argument_list|()
operator|)
argument_list|,
name|n
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|tmp
operator|+
operator|(
name|position
operator|-
name|begin
argument_list|()
operator|+
name|n
operator|)
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|static_allocator
operator|.
name|deallocate
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|end_of_storage
operator|=
name|tmp
operator|+
name|len
expr_stmt|;
name|finish
operator|=
name|tmp
operator|+
name|size
argument_list|()
operator|+
name|n
expr_stmt|;
name|start
operator|=
name|tmp
expr_stmt|;
block|}
end_block

begin_expr_stmt
unit|}  template
operator|<
name|class
name|T
operator|>
ifdef|#
directive|ifdef
name|__GNUG__
name|void
name|vector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|vector_iterator<T> posn
argument_list|,
argument|vector_const_iterator<T> fi
argument_list|,
argument|vector_const_iterator<T> la
argument_list|)
block|{
name|iterator
name|position
operator|=
name|posn
block|;
name|const_iterator
name|first
operator|=
name|fi
block|;
name|const_iterator
name|last
operator|=
name|la
block|;
else|#
directive|else
name|void
name|vector
operator|<
name|T
operator|>
operator|::
name|insert
argument_list|(
argument|iterator position
argument_list|,
argument|const_iterator first
argument_list|,
argument|const_iterator last
argument_list|)
block|{
endif|#
directive|endif
if|if
condition|(
name|first
operator|==
name|last
condition|)
return|return;
name|size_type
name|n
operator|=
literal|0
block|;
name|distance
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|n
argument_list|)
block|;
if|if
condition|(
call|(
name|size_type
call|)
argument_list|(
name|end_of_storage
operator|-
name|finish
argument_list|)
operator|>=
name|n
condition|)
block|{
if|if
condition|(
call|(
name|size_type
call|)
argument_list|(
name|end
argument_list|()
operator|-
name|position
argument_list|)
operator|>
name|n
condition|)
block|{
name|uninitialized_copy
argument_list|(
name|end
argument_list|()
operator|-
name|n
argument_list|,
name|end
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|copy_backward
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
operator|-
name|n
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
end_expr_stmt

begin_else
else|else
block|{
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|position
operator|+
name|n
argument_list|)
expr_stmt|;
name|copy
argument_list|(
name|first
argument_list|,
name|first
operator|+
operator|(
name|end
argument_list|()
operator|-
name|position
operator|)
argument_list|,
name|position
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|first
operator|+
operator|(
name|end
argument_list|()
operator|-
name|position
operator|)
argument_list|,
name|last
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_else

begin_expr_stmt
name|finish
operator|+=
name|n
expr_stmt|;
end_expr_stmt

begin_block
unit|} else
block|{
name|size_type
name|len
init|=
name|size
argument_list|()
operator|+
name|max
argument_list|(
name|size
argument_list|()
argument_list|,
name|n
argument_list|)
decl_stmt|;
name|iterator
name|tmp
init|=
name|static_allocator
operator|.
name|allocate
argument_list|(
name|len
argument_list|)
decl_stmt|;
name|uninitialized_copy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|position
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|first
argument_list|,
name|last
argument_list|,
name|tmp
operator|+
operator|(
name|position
operator|-
name|begin
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|uninitialized_copy
argument_list|(
name|position
argument_list|,
name|end
argument_list|()
argument_list|,
name|tmp
operator|+
operator|(
name|position
operator|-
name|begin
argument_list|()
operator|+
name|n
operator|)
argument_list|)
expr_stmt|;
name|destroy
argument_list|(
name|begin
argument_list|()
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|static_allocator
operator|.
name|deallocate
argument_list|(
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|end_of_storage
operator|=
name|tmp
operator|+
name|len
expr_stmt|;
name|finish
operator|=
name|tmp
operator|+
name|size
argument_list|()
operator|+
name|n
expr_stmt|;
name|start
operator|=
name|tmp
expr_stmt|;
block|}
end_block

begin_undef
unit|}
undef|#
directive|undef
name|Allocator
end_undef

begin_undef
undef|#
directive|undef
name|vector
end_undef

begin_endif
endif|#
directive|endif
end_endif

end_unit

