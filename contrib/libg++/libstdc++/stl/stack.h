begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|STACK_H
end_ifndef

begin_define
define|#
directive|define
name|STACK_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_include
include|#
directive|include
file|<bool.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_include
include|#
directive|include
file|<heap.h>
end_include

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|class
name|stack
block|{
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|stack
operator|<
name|Container
operator|>
operator|&
name|x
operator|,
specifier|const
name|stack
operator|<
name|Container
operator|>
operator|&
name|y
operator|)
block|;
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|stack
operator|<
name|Container
operator|>
operator|&
name|x
operator|,
specifier|const
name|stack
operator|<
name|Container
operator|>
operator|&
name|y
operator|)
block|;
name|public
operator|:
typedef|typedef
name|Container
operator|::
name|value_type
name|value_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Container
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|Container
name|c
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|value_type
modifier|&
name|top
parameter_list|()
block|{
return|return
name|c
operator|.
name|back
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|value_type
operator|&
name|top
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|back
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push
parameter_list|(
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
name|c
operator|.
name|push_back
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop
parameter_list|()
block|{
name|c
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Container
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|stack
operator|<
name|Container
operator|>
operator|&
name|x
operator|,
specifier|const
name|stack
operator|<
name|Container
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|c
operator|==
name|y
operator|.
name|c
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|bool
name|operator
operator|<
operator|(
specifier|const
name|stack
operator|<
name|Container
operator|>
operator|&
name|x
operator|,
specifier|const
name|stack
operator|<
name|Container
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|c
operator|<
name|y
operator|.
name|c
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|class
name|queue
block|{
name|friend
name|bool
name|operator
operator|==
operator|(
specifier|const
name|queue
operator|<
name|Container
operator|>
operator|&
name|x
operator|,
specifier|const
name|queue
operator|<
name|Container
operator|>
operator|&
name|y
operator|)
block|;
name|friend
name|bool
name|operator
operator|<
operator|(
specifier|const
name|queue
operator|<
name|Container
operator|>
operator|&
name|x
operator|,
specifier|const
name|queue
operator|<
name|Container
operator|>
operator|&
name|y
operator|)
block|;
name|public
operator|:
typedef|typedef
name|Container
operator|::
name|value_type
name|value_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Container
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|Container
name|c
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|value_type
modifier|&
name|front
parameter_list|()
block|{
return|return
name|c
operator|.
name|front
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|value_type
operator|&
name|front
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|front
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|value_type
modifier|&
name|back
parameter_list|()
block|{
return|return
name|c
operator|.
name|back
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|value_type
operator|&
name|back
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|back
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push
parameter_list|(
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
name|c
operator|.
name|push_back
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop
parameter_list|()
block|{
name|c
operator|.
name|pop_front
argument_list|()
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|};
name|template
operator|<
name|class
name|Container
operator|>
name|bool
name|operator
operator|==
operator|(
specifier|const
name|queue
operator|<
name|Container
operator|>
operator|&
name|x
operator|,
specifier|const
name|queue
operator|<
name|Container
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|c
operator|==
name|y
operator|.
name|c
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|>
name|bool
name|operator
operator|<
operator|(
specifier|const
name|queue
operator|<
name|Container
operator|>
operator|&
name|x
operator|,
specifier|const
name|queue
operator|<
name|Container
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|c
operator|<
name|y
operator|.
name|c
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|Container
operator|,
name|class
name|Compare
operator|>
comment|// Compare = less<Container::value_type>>
name|class
name|priority_queue
block|{
name|public
operator|:
typedef|typedef
name|Container
operator|::
name|value_type
name|value_type
expr_stmt|;
end_expr_stmt

begin_typedef
typedef|typedef
name|Container
operator|::
name|size_type
name|size_type
expr_stmt|;
end_typedef

begin_label
name|protected
label|:
end_label

begin_decl_stmt
name|Container
name|c
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|Compare
name|comp
decl_stmt|;
end_decl_stmt

begin_label
name|public
label|:
end_label

begin_expr_stmt
name|priority_queue
argument_list|(
specifier|const
name|Compare
operator|&
name|x
operator|=
name|Compare
argument_list|()
argument_list|)
operator|:
name|c
argument_list|()
operator|,
name|comp
argument_list|(
argument|x
argument_list|)
block|{}
name|priority_queue
argument_list|(
specifier|const
name|value_type
operator|*
name|first
argument_list|,
specifier|const
name|value_type
operator|*
name|last
argument_list|,
specifier|const
name|Compare
operator|&
name|x
operator|=
name|Compare
argument_list|()
argument_list|)
operator|:
name|c
argument_list|(
name|first
argument_list|,
name|last
argument_list|)
operator|,
name|comp
argument_list|(
argument|x
argument_list|)
block|{
name|make_heap
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|comp
argument_list|)
block|;     }
comment|/*     template<class InputIterator>     priority_queue(InputIterator first, InputIterator last,  		   const Compare& x = Compare()) : c(first, last), comp(x) { 	make_heap(c.begin(), c.end(), comp);     } */
name|bool
name|empty
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|empty
argument_list|()
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|size_type
name|size
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|size
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|value_type
modifier|&
name|top
parameter_list|()
block|{
return|return
name|c
operator|.
name|front
argument_list|()
return|;
block|}
end_function

begin_expr_stmt
specifier|const
name|value_type
operator|&
name|top
argument_list|()
specifier|const
block|{
return|return
name|c
operator|.
name|front
argument_list|()
return|;
block|}
end_expr_stmt

begin_function
name|void
name|push
parameter_list|(
specifier|const
name|value_type
modifier|&
name|x
parameter_list|)
block|{
name|c
operator|.
name|push_back
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|push_heap
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|pop
parameter_list|()
block|{
name|pop_heap
argument_list|(
name|c
operator|.
name|begin
argument_list|()
argument_list|,
name|c
operator|.
name|end
argument_list|()
argument_list|,
name|comp
argument_list|)
expr_stmt|;
name|c
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
end_function

begin_comment
unit|};
comment|// no equality is provided
end_comment

begin_endif
endif|#
directive|endif
end_endif

end_unit

