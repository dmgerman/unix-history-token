begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/*  *  * Copyright (c) 1994  * Hewlett-Packard Company  *  * Permission to use, copy, modify, distribute and sell this software  * and its documentation for any purpose is hereby granted without fee,  * provided that the above copyright notice appear in all copies and  * that both that copyright notice and this permission notice appear  * in supporting documentation.  Hewlett-Packard Company makes no  * representations about the suitability of this software for any  * purpose.  It is provided "as is" without express or implied warranty.  *  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|PAIR_H
end_ifndef

begin_define
define|#
directive|define
name|PAIR_H
end_define

begin_ifndef
ifndef|#
directive|ifndef
name|__GNUG__
end_ifndef

begin_include
include|#
directive|include
file|<bool.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_expr_stmt
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
expr|struct
name|pair
block|{
name|T1
name|first
block|;
name|T2
name|second
block|;
name|pair
argument_list|()
block|{}
name|pair
argument_list|(
specifier|const
name|T1
operator|&
name|a
argument_list|,
specifier|const
name|T2
operator|&
name|b
argument_list|)
operator|:
name|first
argument_list|(
name|a
argument_list|)
block|,
name|second
argument_list|(
argument|b
argument_list|)
block|{}
block|}
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|pair
operator|<
name|T1
operator|,
name|T2
operator|>
operator|&
name|x
operator|,
specifier|const
name|pair
operator|<
name|T1
operator|,
name|T2
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|first
operator|==
name|y
operator|.
name|first
operator|&&
name|x
operator|.
name|second
operator|==
name|y
operator|.
name|second
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
specifier|inline
name|bool
name|operator
operator|<
operator|(
specifier|const
name|pair
operator|<
name|T1
operator|,
name|T2
operator|>
operator|&
name|x
operator|,
specifier|const
name|pair
operator|<
name|T1
operator|,
name|T2
operator|>
operator|&
name|y
operator|)
block|{
return|return
name|x
operator|.
name|first
operator|<
name|y
operator|.
name|first
operator|||
operator|(
operator|!
operator|(
name|y
operator|.
name|first
operator|<
name|x
operator|.
name|first
operator|)
operator|&&
name|x
operator|.
name|second
operator|<
name|y
operator|.
name|second
operator|)
return|;
block|}
end_expr_stmt

begin_expr_stmt
name|template
operator|<
name|class
name|T1
operator|,
name|class
name|T2
operator|>
specifier|inline
name|pair
operator|<
name|T1
operator|,
name|T2
operator|>
name|make_pair
argument_list|(
argument|const T1& x
argument_list|,
argument|const T2& y
argument_list|)
block|{
return|return
name|pair
operator|<
name|T1
operator|,
name|T2
operator|>
operator|(
name|x
operator|,
name|y
operator|)
return|;
block|}
end_expr_stmt

begin_endif
endif|#
directive|endif
end_endif

end_unit

