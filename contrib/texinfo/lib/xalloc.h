begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* xalloc.h -- malloc with out-of-memory checking     Copyright (C) 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998,    1999, 2000, 2003, 2004 Free Software Foundation, Inc.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software Foundation,    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_ifndef
ifndef|#
directive|ifndef
name|XALLOC_H_
end_ifndef

begin_define
define|#
directive|define
name|XALLOC_H_
end_define

begin_include
include|#
directive|include
file|<stddef.h>
end_include

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
ifndef|#
directive|ifndef
name|__attribute__
if|#
directive|if
name|__GNUC__
operator|<
literal|2
operator|||
operator|(
name|__GNUC__
operator|==
literal|2
operator|&&
name|__GNUC_MINOR__
operator|<
literal|8
operator|)
operator|||
name|__STRICT_ANSI__
define|#
directive|define
name|__attribute__
parameter_list|(
name|x
parameter_list|)
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|ATTRIBUTE_NORETURN
define|#
directive|define
name|ATTRIBUTE_NORETURN
value|__attribute__ ((__noreturn__))
endif|#
directive|endif
comment|/* This function is always triggered when memory is exhausted.    It must be defined by the application, either explicitly    or by using gnulib's xalloc-die module.  This is the    function to call when one wants the program to die because of a    memory allocation failure.  */
specifier|extern
name|void
name|xalloc_die
argument_list|(
name|void
argument_list|)
name|ATTRIBUTE_NORETURN
decl_stmt|;
name|void
modifier|*
name|xmalloc
parameter_list|(
name|size_t
name|s
parameter_list|)
function_decl|;
name|void
modifier|*
name|xnmalloc
parameter_list|(
name|size_t
name|n
parameter_list|,
name|size_t
name|s
parameter_list|)
function_decl|;
name|void
modifier|*
name|xzalloc
parameter_list|(
name|size_t
name|s
parameter_list|)
function_decl|;
name|void
modifier|*
name|xcalloc
parameter_list|(
name|size_t
name|n
parameter_list|,
name|size_t
name|s
parameter_list|)
function_decl|;
name|void
modifier|*
name|xrealloc
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|size_t
name|s
parameter_list|)
function_decl|;
name|void
modifier|*
name|xnrealloc
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|size_t
name|n
parameter_list|,
name|size_t
name|s
parameter_list|)
function_decl|;
name|void
modifier|*
name|x2realloc
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|size_t
modifier|*
name|pn
parameter_list|)
function_decl|;
name|void
modifier|*
name|x2nrealloc
parameter_list|(
name|void
modifier|*
name|p
parameter_list|,
name|size_t
modifier|*
name|pn
parameter_list|,
name|size_t
name|s
parameter_list|)
function_decl|;
name|void
modifier|*
name|xclone
parameter_list|(
name|void
specifier|const
modifier|*
name|p
parameter_list|,
name|size_t
name|s
parameter_list|)
function_decl|;
name|char
modifier|*
name|xstrdup
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
comment|/* Return 1 if an array of N objects, each of size S, cannot exist due    to size arithmetic overflow.  S must be positive and N must be    nonnegative.  This is a macro, not an inline function, so that it    works correctly even when SIZE_MAX< N.     By gnulib convention, SIZE_MAX represents overflow in size    calculations, so the conservative dividend to use here is    SIZE_MAX - 1, since SIZE_MAX might represent an overflowed value.    However, malloc (SIZE_MAX) fails on all known hosts where    sizeof (ptrdiff_t)<= sizeof (size_t), so do not bother to test for    exactly-SIZE_MAX allocations on such hosts; this avoids a test and    branch when S is known to be 1.  */
define|#
directive|define
name|xalloc_oversized
parameter_list|(
name|n
parameter_list|,
name|s
parameter_list|)
define|\
value|((size_t) (sizeof (ptrdiff_t)<= sizeof (size_t) ? -1 : -2) / (s)< (n))
comment|/* These macros are deprecated; they will go away soon, and are retained    temporarily only to ease conversion to the functions described above.  */
define|#
directive|define
name|CCLONE
parameter_list|(
name|p
parameter_list|,
name|n
parameter_list|)
value|xclone (p, (n) * sizeof *(p))
define|#
directive|define
name|CLONE
parameter_list|(
name|p
parameter_list|)
value|xclone (p, sizeof *(p))
define|#
directive|define
name|NEW
parameter_list|(
name|type
parameter_list|,
name|var
parameter_list|)
value|type *var = xmalloc (sizeof (type))
define|#
directive|define
name|XCALLOC
parameter_list|(
name|type
parameter_list|,
name|n
parameter_list|)
value|xcalloc (n, sizeof (type))
define|#
directive|define
name|XMALLOC
parameter_list|(
name|type
parameter_list|,
name|n
parameter_list|)
value|xnmalloc (n, sizeof (type))
define|#
directive|define
name|XREALLOC
parameter_list|(
name|p
parameter_list|,
name|type
parameter_list|,
name|n
parameter_list|)
value|xnrealloc (p, n, sizeof (type))
define|#
directive|define
name|XFREE
parameter_list|(
name|p
parameter_list|)
value|free (p)
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

begin_comment
comment|/* !XALLOC_H_ */
end_comment

end_unit

