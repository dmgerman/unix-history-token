begin_unit|revision:0.9.5;language:C;cregit-version:0.0.1
begin_comment
comment|/* Message catalogs for internationalization.    Copyright (C) 1995, 1996, 1997, 1998 Free Software Foundation, Inc.     This program is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2, or (at your option)    any later version.     This program is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.     You should have received a copy of the GNU General Public License    along with this program; if not, write to the Free Software Foundation,    Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
end_comment

begin_comment
comment|/* Because on some systems (e.g. Solaris) we sometimes have to include    the systems libintl.h as well as this file we have more complex    include protection above.  But the systems header might perhaps also    define _LIBINTL_H and therefore we have to protect the definition here.  */
end_comment

begin_if
if|#
directive|if
operator|!
name|defined
name|_LIBINTL_H
operator|||
operator|!
name|defined
name|_LIBGETTEXT_H
end_if

begin_ifndef
ifndef|#
directive|ifndef
name|_LIBINTL_H
end_ifndef

begin_define
define|#
directive|define
name|_LIBINTL_H
value|1
end_define

begin_endif
endif|#
directive|endif
end_endif

begin_define
define|#
directive|define
name|_LIBGETTEXT_H
value|1
end_define

begin_comment
comment|/* We define an additional symbol to signal that we use the GNU    implementation of gettext.  */
end_comment

begin_define
define|#
directive|define
name|__USE_GNU_GETTEXT
value|1
end_define

begin_include
include|#
directive|include
file|<sys/types.h>
end_include

begin_if
if|#
directive|if
name|HAVE_LOCALE_H
end_if

begin_include
include|#
directive|include
file|<locale.h>
end_include

begin_endif
endif|#
directive|endif
end_endif

begin_ifdef
ifdef|#
directive|ifdef
name|__cplusplus
end_ifdef

begin_extern
extern|extern
literal|"C"
block|{
endif|#
directive|endif
comment|/* @@ end of prolog @@ */
ifndef|#
directive|ifndef
name|PARAMS
if|#
directive|if
name|__STDC__
operator|||
name|defined
name|__cplusplus
define|#
directive|define
name|PARAMS
parameter_list|(
name|args
parameter_list|)
value|args
else|#
directive|else
define|#
directive|define
name|PARAMS
parameter_list|(
name|args
parameter_list|)
value|()
endif|#
directive|endif
endif|#
directive|endif
ifndef|#
directive|ifndef
name|NULL
if|#
directive|if
operator|!
name|defined
name|__cplusplus
operator|||
name|defined
name|__GNUC__
define|#
directive|define
name|NULL
value|((void *) 0)
else|#
directive|else
define|#
directive|define
name|NULL
value|(0)
endif|#
directive|endif
endif|#
directive|endif
if|#
directive|if
operator|!
name|HAVE_LC_MESSAGES
comment|/* This value determines the behaviour of the gettext() and dgettext()    function.  But some system does not have this defined.  Define it    to a default value.  */
define|#
directive|define
name|LC_MESSAGES
value|(-1)
endif|#
directive|endif
comment|/* Declarations for gettext-using-catgets interface.  Derived from    Jim Meyering's libintl.h.  */
struct|struct
name|_msg_ent
block|{
specifier|const
name|char
modifier|*
name|_msg
decl_stmt|;
name|int
name|_msg_number
decl_stmt|;
block|}
struct|;
if|#
directive|if
name|HAVE_CATGETS
comment|/* These two variables are defined in the automatically by po-to-tbl.sed    generated file `cat-id-tbl.c'.  */
specifier|extern
specifier|const
name|struct
name|_msg_ent
name|_msg_tbl
index|[]
decl_stmt|;
specifier|extern
name|int
name|_msg_tbl_length
decl_stmt|;
endif|#
directive|endif
comment|/* For automatical extraction of messages sometimes no real    translation is needed.  Instead the string itself is the result.  */
define|#
directive|define
name|gettext_noop
parameter_list|(
name|Str
parameter_list|)
value|(Str)
comment|/* Look up MSGID in the current default message catalog for the current    LC_MESSAGES locale.  If not found, returns MSGID itself (the default    text).  */
specifier|extern
name|char
modifier|*
name|gettext
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__msgid
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|gettext__
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__msgid
operator|)
argument_list|)
decl_stmt|;
comment|/* Look up MSGID in the DOMAINNAME message catalog for the current    LC_MESSAGES locale.  */
specifier|extern
name|char
modifier|*
name|dgettext
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__msgid
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|dgettext__
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__msgid
operator|)
argument_list|)
decl_stmt|;
comment|/* Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY    locale.  */
specifier|extern
name|char
modifier|*
name|dcgettext
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__msgid
operator|,
name|int
name|__category
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|dcgettext__
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__msgid
operator|,
name|int
name|__category
operator|)
argument_list|)
decl_stmt|;
comment|/* Set the current default message catalog to DOMAINNAME.    If DOMAINNAME is null, return the current default.    If DOMAINNAME is "", reset to the default of "messages".  */
specifier|extern
name|char
modifier|*
name|textdomain
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|textdomain__
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|)
argument_list|)
decl_stmt|;
comment|/* Specify that the DOMAINNAME message catalog will be found    in DIRNAME rather than in the system locale data base.  */
specifier|extern
name|char
modifier|*
name|bindtextdomain
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__dirname
operator|)
argument_list|)
decl_stmt|;
specifier|extern
name|char
modifier|*
name|bindtextdomain__
name|PARAMS
argument_list|(
operator|(
specifier|const
name|char
operator|*
name|__domainname
operator|,
specifier|const
name|char
operator|*
name|__dirname
operator|)
argument_list|)
decl_stmt|;
if|#
directive|if
name|ENABLE_NLS
comment|/* Solaris 2.3 has the gettext function but dcgettext is missing.    So we omit this optimization for Solaris 2.3.  BTW, Solaris 2.4    has dcgettext.  */
if|#
directive|if
operator|!
name|HAVE_CATGETS
operator|&&
operator|(
operator|!
name|HAVE_GETTEXT
operator|||
name|HAVE_DCGETTEXT
operator|)
define|#
directive|define
name|gettext
parameter_list|(
name|Msgid
parameter_list|)
define|\
value|dgettext (NULL, Msgid)
define|#
directive|define
name|dgettext
parameter_list|(
name|Domainname
parameter_list|,
name|Msgid
parameter_list|)
define|\
value|dcgettext (Domainname, Msgid, LC_MESSAGES)
if|#
directive|if
name|defined
name|__GNUC__
operator|&&
name|__GNUC__
operator|==
literal|2
operator|&&
name|__GNUC_MINOR__
operator|>=
literal|7
comment|/* This global variable is defined in loadmsgcat.c.  We need a sign,    whether a new catalog was loaded, which can be associated with all    translations.  */
specifier|extern
name|int
name|_nl_msg_cat_cntr
decl_stmt|;
define|#
directive|define
name|dcgettext
parameter_list|(
name|Domainname
parameter_list|,
name|Msgid
parameter_list|,
name|Category
parameter_list|)
define|\
value|(__extension__							      \    ({									      \      char *__result;							      \      if (__builtin_constant_p (Msgid))					      \        {								      \ 	 static char *__translation__;					      \ 	 static int __catalog_counter__;				      \ 	 if (! __translation__ || __catalog_counter__ != _nl_msg_cat_cntr)    \ 	   {								      \ 	     __translation__ =						      \ 	       dcgettext__ (Domainname, Msgid, Category);		      \ 	     __catalog_counter__ = _nl_msg_cat_cntr;			      \ 	   }								      \ 	 __result = __translation__;					      \        }								      \      else								      \        __result = dcgettext__ (Domainname, Msgid, Category);		      \      __result;								      \     }))
endif|#
directive|endif
endif|#
directive|endif
else|#
directive|else
define|#
directive|define
name|gettext
parameter_list|(
name|Msgid
parameter_list|)
value|(Msgid)
define|#
directive|define
name|dgettext
parameter_list|(
name|Domainname
parameter_list|,
name|Msgid
parameter_list|)
value|(Msgid)
define|#
directive|define
name|dcgettext
parameter_list|(
name|Domainname
parameter_list|,
name|Msgid
parameter_list|,
name|Category
parameter_list|)
value|(Msgid)
define|#
directive|define
name|textdomain
parameter_list|(
name|Domainname
parameter_list|)
value|((char *) Domainname)
define|#
directive|define
name|bindtextdomain
parameter_list|(
name|Domainname
parameter_list|,
name|Dirname
parameter_list|)
value|((char *) Dirname)
endif|#
directive|endif
comment|/* @@ begin of epilog @@ */
ifdef|#
directive|ifdef
name|__cplusplus
block|}
end_extern

begin_endif
endif|#
directive|endif
end_endif

begin_endif
endif|#
directive|endif
end_endif

end_unit

